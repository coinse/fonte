{"sha": "90439e50bdadeac753d515de0e28371fd9701e2e", "log": "Remove non-thrown throws clauses  ", "commit": "\n--- a/src/test/org/apache/commons/math/estimation/MinpackTest.java\n+++ b/src/test/org/apache/commons/math/estimation/MinpackTest.java\n     super(name);\n   }\n \n-  public void testMinpackLinearFullRank()\n-    throws EstimationException {\n+  public void testMinpackLinearFullRank() {\n     minpackTest(new LinearFullRankFunction(10, 5, 1.0,\n                                            5.0, 2.23606797749979), false);\n     minpackTest(new LinearFullRankFunction(50, 5, 1.0,\n                                            8.06225774829855, 6.70820393249937), false);\n   }\n \n-  public void testMinpackLinearRank1()\n-    throws EstimationException {\n+  public void testMinpackLinearRank1() {\n     minpackTest(new LinearRank1Function(10, 5, 1.0,\n                                         291.521868819476, 1.4638501094228), false);\n     minpackTest(new LinearRank1Function(50, 5, 1.0,\n                                         3101.60039334535, 3.48263016573496), false);\n   }\n \n-  public void testMinpackLinearRank1ZeroColsAndRows()\n-    throws EstimationException {\n+  public void testMinpackLinearRank1ZeroColsAndRows() {\n     minpackTest(new LinearRank1ZeroColsAndRowsFunction(10, 5, 1.0), false);\n     minpackTest(new LinearRank1ZeroColsAndRowsFunction(50, 5, 1.0), false);\n   }\n \n-  public void testMinpackRosenbrok()\n-    throws EstimationException {\n+  public void testMinpackRosenbrok() {\n     minpackTest(new RosenbrockFunction(new double[] { -1.2, 1.0 },\n                                        Math.sqrt(24.2)), false);\n     minpackTest(new RosenbrockFunction(new double[] { -12.0, 10.0 },\n                                        11.0 * Math.sqrt(169000121.0)), false);\n   }\n \n-  public void testMinpackHelicalValley()\n-    throws EstimationException {\n+  public void testMinpackHelicalValley() {\n     minpackTest(new HelicalValleyFunction(new double[] { -1.0, 0.0, 0.0 },\n                                           50.0), false);\n     minpackTest(new HelicalValleyFunction(new double[] { -10.0, 0.0, 0.0 },\n                                           991.261822123701), false);\n   }\n     \n-  public void testMinpackPowellSingular()\n-    throws EstimationException {\n+  public void testMinpackPowellSingular() {\n     minpackTest(new PowellSingularFunction(new double[] { 3.0, -1.0, 0.0, 1.0 },\n                                            14.6628782986152), false);\n     minpackTest(new PowellSingularFunction(new double[] { 30.0, -10.0, 0.0, 10.0 },\n                                            126887.903284750), false);\n   }\n     \n-  public void testMinpackFreudensteinRoth()\n-    throws EstimationException {\n+  public void testMinpackFreudensteinRoth() {\n     minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },\n                                              20.0124960961895, 6.99887517584575,\n                                              new double[] {\n                                              }), false);\n   }\n     \n-  public void testMinpackBard()\n-    throws EstimationException {\n+  public void testMinpackBard() {\n     minpackTest(new BardFunction(1.0, 6.45613629515967, 0.0906359603390466,\n                                  new double[] {\n                                    0.0824105765758334,\n                                  }), false);\n   }\n     \n-  public void testMinpackKowalikOsborne()\n-    throws EstimationException {\n+  public void testMinpackKowalikOsborne() {\n     minpackTest(new KowalikOsborneFunction(new double[] { 0.25, 0.39, 0.415, 0.39 },\n                                            0.0728915102882945,\n                                            0.017535837721129,\n                                            }), true);\n   }\n     \n-  public void testMinpackMeyer()\n-    throws EstimationException {\n+  public void testMinpackMeyer() {\n     minpackTest(new MeyerFunction(new double[] { 0.02, 4000.0, 250.0 },\n                                   41153.4665543031, 9.37794514651874,\n                                   new double[] {\n                                   }), true);\n   }\n     \n-  public void testMinpackWatson()\n-    throws EstimationException {\n+  public void testMinpackWatson() {\n   \n     minpackTest(new WatsonFunction(6, 0.0,\n                                    5.47722557505166, 0.0478295939097601,\n \n   }\n     \n-  public void testMinpackBox3Dimensional()\n-  throws EstimationException {\n+  public void testMinpackBox3Dimensional() {\n     minpackTest(new Box3DimensionalFunction(10, new double[] { 0.0, 10.0, 20.0 },\n                                             32.1115837449572), false);\n   }\n     \n-  public void testMinpackJennrichSampson()\n-    throws EstimationException {\n+  public void testMinpackJennrichSampson() {\n     minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },\n                                             64.5856498144943, 11.1517793413499,\n                                             new double[] {\n                                             }), false);\n   }\n \n-  public void testMinpackBrownDennis()\n-    throws EstimationException {\n+  public void testMinpackBrownDennis() {\n     minpackTest(new BrownDennisFunction(20,\n                                         new double[] { 25.0, 5.0, -5.0, -1.0 },\n                                         2815.43839161816, 292.954288244866,\n                                         }), false);\n   }\n     \n-  public void testMinpackChebyquad()\n-    throws EstimationException {\n+  public void testMinpackChebyquad() {\n     minpackTest(new ChebyquadFunction(1, 8, 1.0,\n                                       1.88623796907732, 1.88623796907732,\n                                       new double[] { 0.5 }), false);\n                                       }), false);\n   }\n     \n-  public void testMinpackBrownAlmostLinear()\n-    throws EstimationException {\n+  public void testMinpackBrownAlmostLinear() {\n     minpackTest(new BrownAlmostLinearFunction(10, 0.5,\n                                               16.5302162063499, 0.0,\n                                               new double[] {\n                                               }), false);\n     }\n     \n-  public void testMinpackOsborne1()\n-    throws EstimationException {\n+  public void testMinpackOsborne1() {\n       minpackTest(new Osborne1Function(new double[] { 0.5, 1.5, -1.0, 0.01, 0.02, },\n                                        0.937564021037838, 0.00739249260904843,\n                                        new double[] {\n                                        }), false);\n     }\n     \n-  public void testMinpackOsborne2()\n-    throws EstimationException {\n+  public void testMinpackOsborne2() {\n       \n     minpackTest(new Osborne2Function(new double[] {\n                                        1.3, 0.65, 0.65, 0.7, 0.6,", "timestamp": 1239713550, "metainfo": ""}