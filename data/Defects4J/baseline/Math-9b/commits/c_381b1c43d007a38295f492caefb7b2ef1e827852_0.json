{"sha": "381b1c43d007a38295f492caefb7b2ef1e827852", "log": "Improved javadoc, simplified implementation, ensured NaN is returned when n=0.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n import java.io.Serializable;\n \n /**\n+ * Computes the sample standard deviation.  The standard deviation\n+ * is the positive square root of the variance.  See {@link Variance} for\n+ * more information.\n  *\n- * @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision: 1.18 $ $Date: 2004/06/26 22:41:27 $\n  */\n public class StandardDeviation extends Variance implements Serializable {\n \n     /** Serializable version identifier */\n     static final long serialVersionUID = 5728716329662425188L;    \n-    \n-    /** */\n-    protected double std = Double.NaN;\n-\n-    /** */\n-    private double lastVar = 0.0;\n \n     /**\n      * Constructs a StandardDeviation\n     }\n \n     /**\n-     * Constructs a StandardDeviation with an external moment\n+     * Constructs a StandardDeviation from an external second moment.\n+     * \n      * @param m2 the external moment\n      */\n     public StandardDeviation(final SecondMoment m2) {\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n      */\n     public double getResult() {\n-        if (lastVar != super.getResult()) {\n-            lastVar = super.getResult();\n-            if (Double.isNaN(lastVar)) {\n-                std = Double.NaN;\n-            } else if (lastVar == 0.0) {\n-                std = 0.0;\n-            } else {\n-                std = Math.sqrt(lastVar);\n-            }\n-        }\n-        return std;\n+        return Math.sqrt(super.getResult());\n     }\n \n     /**\n      */\n     public void clear() {\n         super.clear();\n-        lastVar = 0.0;\n     }\n \n     /**\n      * Returns the Standard Deviation on an array of values.\n+     * \n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length the number of elements to include\n      * or 0.0 for a single value set.\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n-    public double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n-\n-        double var = super.evaluate(values, begin, length);\n-\n-        if (Double.isNaN(var)) {\n-            return Double.NaN;\n-        }\n-\n-        return var != 0.0 ? Math.sqrt(var) : 0.0;\n+    public double evaluate(final double[] values, final int begin, final int length)  {\n+       return Math.sqrt(super.evaluate(values, begin, length));\n     }\n \n }", "timestamp": 1088289687, "metainfo": ""}