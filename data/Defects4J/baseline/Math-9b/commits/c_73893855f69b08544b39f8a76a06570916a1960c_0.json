{"sha": "73893855f69b08544b39f8a76a06570916a1960c", "log": "MATH-795: factoring out testPredicates().   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n     }\n \n     @Test\n+    @Override\n     public void testPredicates() {\n-\n-        ArrayRealVector v = new ArrayRealVector(new double[] { 0, 1, 2 });\n-\n-        Assert.assertFalse(v.isNaN());\n-        v.setEntry(1, Double.NaN);\n-        Assert.assertTrue(v.isNaN());\n-\n-        Assert.assertFalse(v.isInfinite());\n-        v.setEntry(0, Double.POSITIVE_INFINITY);\n-        Assert.assertFalse(v.isInfinite());\n-        v.setEntry(1, 1);\n-        Assert.assertTrue(v.isInfinite());\n-        v.setEntry(0, 1);\n-        Assert.assertFalse(v.isInfinite());\n-\n-        v.setEntry(0, 0);\n-        Assert.assertEquals(v, new ArrayRealVector(new double[] { 0, 1, 2 }));\n-        Assert.assertNotSame(v, new ArrayRealVector(new double[] { 0, 1, 2 + FastMath.ulp(2)}));\n-        Assert.assertNotSame(v, new ArrayRealVector(new double[] { 0, 1, 2, 3 }));\n-\n-        Assert.assertEquals(new ArrayRealVector(new double[] { Double.NaN, 1, 2 }).hashCode(),\n-                     new ArrayRealVector(new double[] { 0, Double.NaN, 2 }).hashCode());\n-\n-        Assert.assertTrue(new ArrayRealVector(new double[] { Double.NaN, 1, 2 }).hashCode() !=\n-                   new ArrayRealVector(new double[] { 0, 1, 2 }).hashCode());\n-\n-        Assert.assertTrue(v.equals(v));\n-        Assert.assertTrue(v.equals(v.copy()));\n-        Assert.assertFalse(v.equals(null));\n+        super.testPredicates();\n+\n+        final ArrayRealVector v = (ArrayRealVector) create(new double[] { 0, 1, 2 });\n         Assert.assertFalse(v.equals(v.getDataRef()));\n-        Assert.assertFalse(v.equals(v.getSubVector(0, v.getDimension() - 1)));\n-        Assert.assertTrue(v.equals(v.getSubVector(0, v.getDimension())));\n-\n+\n+        Assert.assertEquals(create(new double[] { Double.NaN, 1, 2 }).hashCode(),\n+                     create(new double[] { 0, Double.NaN, 2 }).hashCode());\n+\n+        Assert.assertTrue(create(new double[] { Double.NaN, 1, 2 }).hashCode() !=\n+                   create(new double[] { 0, 1, 2 }).hashCode());\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n+import org.apache.commons.math3.util.FastMath;\n import org.junit.Test;\n \n \n         }\n     }\n \n+    @Test\n+    public void testPredicates() {\n+        final RealVector v = create(new double[] { 0, 1, 2 });\n+\n+        Assert.assertFalse(v.isNaN());\n+        v.setEntry(1, Double.NaN);\n+        Assert.assertTrue(v.isNaN());\n+\n+        Assert.assertFalse(v.isInfinite());\n+        v.setEntry(0, Double.POSITIVE_INFINITY);\n+        Assert.assertFalse(v.isInfinite());\n+        v.setEntry(1, 1);\n+        Assert.assertTrue(v.isInfinite());\n+\n+        v.setEntry(0, 0);\n+        Assert.assertEquals(v, create(new double[] { 0, 1, 2 }));\n+        Assert.assertNotSame(v, create(new double[] { 0, 1, 2 + FastMath.ulp(2)}));\n+        Assert.assertNotSame(v, create(new double[] { 0, 1, 2, 3 }));\n+\n+        Assert.assertTrue(v.equals(v));\n+        Assert.assertTrue(v.equals(v.copy()));\n+        Assert.assertFalse(v.equals(null));\n+        Assert.assertFalse(v.equals(v.getSubVector(0, v.getDimension() - 1)));\n+        Assert.assertTrue(v.equals(v.getSubVector(0, v.getDimension())));\n+    }\n+\n     /*\n      * TESTS OF THE VISITOR PATTERN\n      */\n--- a/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n     }\n \n     @Test\n-    public void testPredicates() {\n-\n-        OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });\n-\n-        Assert.assertFalse(v.isNaN());\n-        v.setEntry(1, Double.NaN);\n-        Assert.assertTrue(v.isNaN());\n-\n-        Assert.assertFalse(v.isInfinite());\n-        v.setEntry(0, Double.POSITIVE_INFINITY);\n-        Assert.assertFalse(v.isInfinite()); // NaN has higher priority than infinity\n-        v.setEntry(1, 1);\n-        Assert.assertTrue(v.isInfinite());\n-\n-        v.setEntry(0, 0);\n-        Assert.assertEquals(v, new OpenMapRealVector(new double[] { 0, 1, 2 }));\n-        Assert.assertNotSame(v, new OpenMapRealVector(new double[] { 0, 1, 2 + FastMath.ulp(2)}));\n-        Assert.assertNotSame(v, new OpenMapRealVector(new double[] { 0, 1, 2, 3 }));\n-\n-    }\n-\n-    @Test\n     public void testSerial()  {\n         OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });\n         Assert.assertEquals(v,TestUtils.serializeAndRecover(v));", "timestamp": 1338873055, "metainfo": ""}