{"sha": "8065360aafd9b457564c53afad8dd555b3483b3a", "log": "Move Serializable from interface to implementations  ", "commit": "\n--- a/src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java\n \n package org.apache.commons.math.optimization;\n \n+import java.io.Serializable;\n import java.util.Arrays;\n import java.util.Comparator;\n \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class MultiStartMultivariateRealOptimizer implements MultivariateRealOptimizer {\n+public class MultiStartMultivariateRealOptimizer implements MultivariateRealOptimizer, Serializable {\n+    // TODO: Add Serializable documentation\n+    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 5983375963110961019L;\n--- a/src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java\n \n package org.apache.commons.math.optimization;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface MultivariateRealOptimizer extends Serializable {\n+public interface MultivariateRealOptimizer {\n \n     /** Set the maximal number of iterations of the algorithm.\n      * @param maxIterations maximal number of function calls\n--- a/src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java\n+++ b/src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java\n \n package org.apache.commons.math.optimization;\n \n-import java.io.Serializable;\n-\n /** This interface specifies how to check if an {@link MultivariateRealOptimizer optimization\n  * algorithm} has converged.\n  *\n  * @since 2.0\n  */\n \n-public interface RealConvergenceChecker extends Serializable {\n+public interface RealConvergenceChecker {\n \n   /** Check if the optimization algorithm has converged considering the last points.\n    * <p>\n--- a/src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java\n+++ b/src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java\n \n package org.apache.commons.math.optimization;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.util.MathUtils;\n \n /** \n  * @version $Revision: 757180 $ $Date: 2009-03-22 13:54:45 +0100 (dim., 22 mars 2009) $\n  * @since 2.0\n  */\n-public class SimpleRealPointChecker implements RealConvergenceChecker {\n+public class SimpleRealPointChecker implements RealConvergenceChecker, Serializable {\n+    // TODO: Add Serializable documentation\n+    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 2490271385513842607L;\n--- a/src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java\n+++ b/src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java\n \n package org.apache.commons.math.optimization;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.util.MathUtils;\n \n /** \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class SimpleScalarValueChecker implements RealConvergenceChecker {\n+public class SimpleScalarValueChecker implements RealConvergenceChecker, Serializable {\n+    // TODO: Add Serializable documentation\n+    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 2490271385513842607L;\n--- a/src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java\n+++ b/src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java\n \n package org.apache.commons.math.optimization;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.util.MathUtils;\n \n /** \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class SimpleVectorialPointChecker implements VectorialConvergenceChecker {\n+public class SimpleVectorialPointChecker implements VectorialConvergenceChecker, Serializable {\n+    // TODO: Add Serializable documentation\n+    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 6571098732056285089L;\n--- a/src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java\n+++ b/src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java\n \n package org.apache.commons.math.optimization;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.util.MathUtils;\n \n /** \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class SimpleVectorialValueChecker implements VectorialConvergenceChecker {\n+public class SimpleVectorialValueChecker implements VectorialConvergenceChecker, Serializable {\n+    // TODO: Add Serializable documentation\n+    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = -3892196630780700808L;\n--- a/src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java\n+++ b/src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java\n \n package org.apache.commons.math.optimization;\n \n-import java.io.Serializable;\n-\n /** This interface specifies how to check if an {@link VectorialOptimizer optimization\n  * algorithm} has converged.\n  *\n  * @since 2.0\n  */\n \n-public interface VectorialConvergenceChecker extends Serializable {\n+public interface VectorialConvergenceChecker {\n \n   /** Check if the optimization algorithm has converged considering the last points.\n    * <p>\n--- a/src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java\n \n package org.apache.commons.math.optimization.direct;\n \n+import java.io.Serializable;\n import java.util.Arrays;\n import java.util.Comparator;\n \n  * performed by the derived classes according to the implemented\n  * algorithms.</p>\n  *\n+ * implements MultivariateRealOptimizer, Serializable since 2.0\n+ * \n  * @see MultivariateRealFunction\n  * @see NelderMead\n  * @see MultiDirectional\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-public abstract class DirectSearchOptimizer implements MultivariateRealOptimizer {\n+public abstract class DirectSearchOptimizer implements MultivariateRealOptimizer, Serializable {\n+    // TODO: Add Serializable documentation\n+    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 4299910390345933369L;\n--- a/src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n \n package org.apache.commons.math.optimization.direct;\n \n+import java.io.Serializable;\n import java.util.Comparator;\n \n import org.apache.commons.math.FunctionEvaluationException;\n /** \n  * This class implements the multi-directional direct search method.\n  *\n+ * implements Serializable since 2.0\n+ * \n  * @version $Revision$ $Date$\n  * @see NelderMead\n  * @since 1.2\n  */\n-public class MultiDirectional extends DirectSearchOptimizer {\n+public class MultiDirectional extends DirectSearchOptimizer implements Serializable {\n+    // TODO: Add Serializable documentation\n+    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = -5347711305645019145L;\n--- a/src/java/org/apache/commons/math/optimization/direct/NelderMead.java\n+++ b/src/java/org/apache/commons/math/optimization/direct/NelderMead.java\n \n package org.apache.commons.math.optimization.direct;\n \n+import java.io.Serializable;\n import java.util.Comparator;\n \n import org.apache.commons.math.FunctionEvaluationException;\n /** \n  * This class implements the Nelder-Mead direct search method.\n  *\n+ * implements Serializable since 2.0\n+ * \n  * @version $Revision$ $Date$\n  * @see MultiDirectional\n  * @since 1.2\n  */\n-public class NelderMead extends DirectSearchOptimizer {\n+public class NelderMead extends DirectSearchOptimizer implements Serializable {\n+    // TODO: Add Serializable documentation\n+    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = -5810365844886183056L;\n--- a/src/java/org/apache/commons/math/stat/clustering/Clusterable.java\n+++ b/src/java/org/apache/commons/math/stat/clustering/Clusterable.java\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface Clusterable<T> extends Serializable {\n+public interface Clusterable<T> {\n \n     /**\n      * Returns the distance from the given point.\n--- a/src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n+++ b/src/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n \n package org.apache.commons.math.stat.clustering;\n \n+import java.io.Serializable;\n import java.util.Collection;\n \n import org.apache.commons.math.util.MathUtils;\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint> {\n+public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {\n+    // TODO: Add Serializable documentation\n+    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 3946024775784901369L;", "timestamp": 1243078016, "metainfo": ""}