{"sha": "4538d3d35a9846ed9bc5bfe867fc2fb9461db9cf", "log": "Add missing fail() calls for expected exceptions  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java\n     public void testSolveBadParameters() throws MathException {\n         try { // bad endpoints\n             UnivariateRealSolverUtils.solve(sin,0.0, 4.0, 4.0);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         try { // bad accuracy\n             UnivariateRealSolverUtils.solve(sin, 0.0, 4.0, 0.0);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n--- a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java\n+++ b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java\n         assertFraction(1055531162664967l, 70368744177664l, new BigFraction(15.0000000000001));\n         try {\n             new BigFraction(null, BigInteger.ONE);\n+            fail(\"Expecting NullArgumentException\");\n         } catch (NullArgumentException npe) {\n             // expected\n         }\n         try {\n             new BigFraction(BigInteger.ONE, null);\n+            fail(\"Expecting NullArgumentException\");\n         } catch (NullArgumentException npe) {\n             // expected\n         }\n         try {\n             new BigFraction(BigInteger.ONE, BigInteger.ZERO);\n+            fail(\"Expecting ArithmeticException\");\n         } catch (ArithmeticException npe) {\n             // expected\n         }\n         try {\n             new BigFraction(2.0 * Integer.MAX_VALUE, 1.0e-5, 100000);\n+            fail(\"Expecting FractionConversionException\");\n         } catch (FractionConversionException fce) {\n             // expected\n         }\n         for (double v : new double[] { Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY}) {\n             try {\n                 new BigFraction(v);\n-                fail(\"expected exception\");\n+                fail(\"Expecting IllegalArgumentException\");\n             } catch (IllegalArgumentException iae) {\n                 // expected\n             }\n--- a/src/test/java/org/apache/commons/math/geometry/RotationTest.java\n+++ b/src/test/java/org/apache/commons/math/geometry/RotationTest.java\n                      { 0.0, 1.0, 0.0 },\n                      { 1.0, 0.0, 0.0 }\n                    }, 1.0e-7);\n+      fail(\"Expecting NotARotationMatrixException\");\n     } catch (NotARotationMatrixException nrme) {\n       // expected behavior\n     } catch (Exception e) {\n                      {  0.821760, -0.184320,  0.539200 },\n                      { -0.354816,  0.574912,  0.737280 }\n                    }, 1.0e-7);\n+      fail(\"Expecting NotARotationMatrixException\");\n     } catch (NotARotationMatrixException nrme) {\n       // expected behavior\n     } catch (Exception e) {\n                        { -0.4,  0.6,  0.7 },\n                        {  0.8, -0.2,  0.5 }\n                      }, 1.0e-15);\n+        fail(\"Expecting NotARotationMatrixException\");\n       } catch (NotARotationMatrixException nrme) {\n         // expected behavior\n       } catch (Exception e) {\n--- a/src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java\n     public void testNonSquare() {\n         try {\n             new LUDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));\n+            fail(\"Expecting InvalidMatrixException\");\n         } catch (InvalidMatrixException ime) {\n             // expected behavior\n         } catch (Exception e) {\n--- a/src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java\n         checkIdentityMatrix(MatrixUtils.createRealIdentityMatrix(1));\n         try {\n             MatrixUtils.createRealIdentityMatrix(0);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         checkIdentityFieldMatrix(MatrixUtils.createFieldIdentityMatrix(FractionField.getInstance(), 1));\n         try {\n             MatrixUtils.createRealIdentityMatrix(0);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         checkIdentityBigMatrix(MatrixUtils.createBigIdentityMatrix(1));\n         try {\n             MatrixUtils.createRealIdentityMatrix(0);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n--- a/src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java\n     public void testParseNoComponents() {\n         try {\n             realVectorFormat.parseObject(\"{ }\");\n+            fail(\"Expecting ParseException\");\n         } catch (ParseException pe) {\n             // expected behavior\n         } catch (Exception e) {\n--- a/src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n           ContinuousOutputModel otherCm = new ContinuousOutputModel();\n           otherCm.handleStep(buildInterpolator(t0, y0, t1), true);\n           cm.append(otherCm);\n+          fail(\"Expecting IllegalArgumentException\");\n       } catch(IllegalArgumentException iae) {\n           //expected behavior\n           return true;\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java\n     public void testDimension() {\n         try {\n             createMultivariateSummaryStatistics(2, true).addValue(new double[3]);\n+            fail(\"Expecting DimensionMismatchException\");\n         } catch (DimensionMismatchException dme) {\n             // expected behavior\n         } catch (Exception e) {", "timestamp": 1285942108, "metainfo": ""}