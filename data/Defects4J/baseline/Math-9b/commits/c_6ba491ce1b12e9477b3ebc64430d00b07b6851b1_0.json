{"sha": "6ba491ce1b12e9477b3ebc64430d00b07b6851b1", "log": "Removed misleading javadoc comment on derivative value constraints.   ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n  * A <strong>polynomial spline function</strong> consists of a set of <i>interpolating polynomials</i> \n  * and an ascending array of  domain <i>knot points</i>, determining the intervals over which the \n  * spline function is defined by the constituent polynomials.  The polynomials are assumed to have \n- * been computed to match the values of another function at the knot points and the first two \n- * derivatives of \"adjacent\" polynomials are constrained to agree at the knot points.  The value \n+ * been computed to match the values of another function at the knot points.  The value \n  * consistency constraints are not currently enforced by <code>PolynomialSplineFunction</code> itself,\n  * but are assumed to hold  among the polynomials and knot points passed to the constructor.\n  * <p>\n  * <li> Let <code>j</code> be the index of the largest knot point that is less than or equal to <code>x</code>. \n  *  The value returned is <br> <code>polynomials[j](x - knot[j])</code></li></ol>\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/04/02 20:58:11 $\n+ * @version $Revision: 1.2 $ $Date: 2004/04/03 03:05:33 $\n  */\n public class PolynomialSplineFunction implements UnivariateRealFunction, Serializable {\n    ", "timestamp": 1080961533, "metainfo": ""}