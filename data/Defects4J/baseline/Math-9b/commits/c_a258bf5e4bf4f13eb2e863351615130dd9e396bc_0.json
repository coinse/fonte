{"sha": "a258bf5e4bf4f13eb2e863351615130dd9e396bc", "log": "slight optimization: cached pointers to row vectors from double arrays wherever the same row was used in a loop, to avoid double index computation/range check  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java\n+++ b/src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java\n \n     /**\n      * Build the transformation to bi-diagonal shape of a matrix. \n-     * @param matrix The matrix to transform.\n-     */\n-    public BiDiagonalTransformer(RealMatrix matrix)\n-        throws InvalidMatrixException {\n+     * @param matrix the matrix to transform.\n+     */\n+    public BiDiagonalTransformer(RealMatrix matrix) {\n \n         final int m = matrix.getRowDimension();\n         final int n = matrix.getColumnDimension();\n             final int n = householderVectors[0].length;\n             double[][] bData = new double[m][n];\n             for (int i = 0; i < main.length; ++i) {\n-                bData[i][i] = main[i];\n-                if (i < main.length - 1) {\n-                    if (m < n) {\n-                        bData[i + 1][i] = secondary[i];\n-                    } else {\n-                        bData[i][i + 1] = secondary[i];\n+                double[] bDataI = bData[i];\n+                bDataI[i] = main[i];\n+                if (m < n) {\n+                    if (i > 0) {\n+                        bDataI[i - 1] = secondary[i - 1];\n+                    }\n+                } else {\n+                    if (i < main.length - 1) {\n+                        bDataI[i + 1] = secondary[i];\n                     }\n                 }\n             }\n                 final double c = householderVectors[i][k];\n                 xNormSqr += c * c;\n             }\n-            final double a = (householderVectors[k][k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);\n+            final double[] hK = householderVectors[k];\n+            final double a = (hK[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);\n             main[k] = a;\n             if (a != 0.0) {\n-                householderVectors[k][k] -= a;\n+                hK[k] -= a;\n                 for (int j = k + 1; j < n; ++j) {\n                     double alpha = 0;\n                     for (int i = k; i < m; ++i) {\n-                        final double[] uvI = householderVectors[i];\n-                        alpha -= uvI[j] * uvI[k];\n+                        final double[] hI = householderVectors[i];\n+                        alpha -= hI[j] * hI[k];\n                     }\n                     alpha /= a * householderVectors[k][k];\n                     for (int i = k; i < m; ++i) {\n-                        final double[] uvI = householderVectors[i];\n-                        uvI[j] -= alpha * uvI[k];\n+                        final double[] hI = householderVectors[i];\n+                        hI[j] -= alpha * hI[k];\n                     }\n                 }\n             }\n \n             if (k < n - 1) {\n                 //zero-out a row\n-                final double[] uvK = householderVectors[k];\n                 xNormSqr = 0;\n                 for (int j = k + 1; j < n; ++j) {\n-                    final double c = uvK[j];\n+                    final double c = hK[j];\n                     xNormSqr += c * c;\n                 }\n-                final double b = (uvK[k + 1] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);\n+                final double b = (hK[k + 1] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);\n                 secondary[k] = b;\n                 if (b != 0.0) {\n-                    uvK[k + 1] -= b;\n+                    hK[k + 1] -= b;\n                     for (int i = k + 1; i < m; ++i) {\n-                        final double[] uvI = householderVectors[i];\n+                        final double[] hI = householderVectors[i];\n                         double beta = 0;\n                         for (int j = k + 1; j < n; ++j) {\n-                            beta -= uvI[j] * uvK[j];\n-                        }\n-                        beta /= b * uvK[k + 1];\n+                            beta -= hI[j] * hK[j];\n+                        }\n+                        beta /= b * hK[k + 1];\n                         for (int j = k + 1; j < n; ++j) {\n-                            uvI[j] -= beta * uvK[j];\n+                            hI[j] -= beta * hK[j];\n                         }\n                     }\n                 }\n         for (int k = 0; k < m; k++) {\n \n             //zero-out a row\n-            final double[] uvK = householderVectors[k];\n+            final double[] hK = householderVectors[k];\n             double xNormSqr = 0;\n             for (int j = k; j < n; ++j) {\n-                final double c = uvK[j];\n+                final double c = hK[j];\n                 xNormSqr += c * c;\n             }\n-            final double a = (uvK[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);\n+            final double a = (hK[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);\n             main[k] = a;\n             if (a != 0.0) {\n-                uvK[k] -= a;\n+                hK[k] -= a;\n                 for (int i = k + 1; i < m; ++i) {\n-                    final double[] uvI = householderVectors[i];\n+                    final double[] hI = householderVectors[i];\n                     double alpha = 0;\n                     for (int j = k; j < n; ++j) {\n-                        alpha -= uvI[j] * uvK[j];\n+                        alpha -= hI[j] * hK[j];\n                     }\n                     alpha /= a * householderVectors[k][k];\n                     for (int j = k; j < n; ++j) {\n-                        uvI[j] -= alpha * uvK[j];\n+                        hI[j] -= alpha * hK[j];\n                     }\n                 }\n             }\n \n             if (k < m - 1) {\n                 //zero-out a column\n+                final double[] hKp1 = householderVectors[k + 1];\n                 xNormSqr = 0;\n                 for (int i = k + 1; i < m; ++i) {\n                     final double c = householderVectors[i][k];\n                     xNormSqr += c * c;\n                 }\n-                final double b = (householderVectors[k + 1][k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);\n+                final double b = (hKp1[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);\n                 secondary[k] = b;\n                 if (b != 0.0) {\n-                    householderVectors[k + 1][k] -= b;\n+                    hKp1[k] -= b;\n                     for (int j = k + 1; j < n; ++j) {\n                         double beta = 0;\n                         for (int i = k + 1; i < m; ++i) {\n-                            final double[] uvI = householderVectors[i];\n-                            beta -= uvI[j] * uvI[k];\n-                        }\n-                        beta /= b * householderVectors[k + 1][k];\n+                            final double[] hI = householderVectors[i];\n+                            beta -= hI[j] * hI[k];\n+                        }\n+                        beta /= b * hKp1[k];\n                         for (int i = k + 1; i < m; ++i) {\n-                            final double[] uvI = householderVectors[i];\n-                            uvI[j] -= beta * uvI[k];\n+                            final double[] hI = householderVectors[i];\n+                            hI[j] -= beta * hI[k];\n                         }\n                     }\n                 }", "timestamp": 1222617554, "metainfo": ""}