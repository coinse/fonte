{"sha": "c1a29c733bf932cd32d58f0fb9b929990b654ed8", "log": "Made RandomGenerator configurable and reseedable.  JIRA: MATH-634.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n     private double[] upperBounds = null;\n \n     /** RandomData instance to use in repeated calls to getNext() */\n-    private final RandomData randomData = new RandomDataImpl();\n+    private final RandomDataImpl randomData;\n \n     /**\n      * Creates a new EmpiricalDistribution with the default bin count.\n      */\n     public EmpiricalDistributionImpl() {\n-        binCount = 1000;\n-        binStats = new ArrayList<SummaryStatistics>();\n-    }\n-\n-    /**\n-     * Creates a new EmpiricalDistribution  with the specified bin count.\n+        this(1000, null);\n+    }\n+\n+    /**\n+     * Creates a new EmpiricalDistribution with the specified bin count.\n      *\n      * @param binCount number of bins\n      */\n     public EmpiricalDistributionImpl(int binCount) {\n+        this(binCount, null);\n+    }\n+    \n+    /**\n+     * Creates a new EmpiricalDistribution with the specified bin count using the\n+     * provided {@link RandomGenerator} as the source of random data.\n+     * \n+     * @param binCount number of bins\n+     * @param generator random data generator (may be null, resulting in default JDK generator)\n+     * @since 3.0\n+     */\n+    public EmpiricalDistributionImpl(int binCount, RandomGenerator generator) {\n         this.binCount = binCount;\n+        randomData = new RandomDataImpl(generator);\n         binStats = new ArrayList<SummaryStatistics>();\n     }\n \n         }\n \n         // Start with a uniformly distributed random number in (0,1)\n-        double x = FastMath.random();\n+        double x = randomData.nextUniform(0,1);\n \n         // Use this to select the bin and generate a Gaussian within the bin\n         for (int i = 0; i < binCount; i++) {\n     public boolean isLoaded() {\n         return loaded;\n     }\n+    \n+    /**\n+     * Reseeds the random number generator used by {@link #getNextValue()}.\n+     * \n+     * @param seed random generator seed\n+     * @since 3.0\n+     */\n+    public void reSeed(long seed) {\n+        randomData.reSeed(seed);\n+    }\n }\n--- a/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java\n @RunWith(RetryRunner.class)\n public final class EmpiricalDistributionTest {\n \n-    protected EmpiricalDistribution empiricalDistribution = null;\n+    protected EmpiricalDistributionImpl empiricalDistribution = null;\n     protected EmpiricalDistribution empiricalDistribution2 = null;\n     protected File file = null;\n     protected URL url = null;\n         TestUtils.assertEquals(expectedBinUpperBounds, dist.getUpperBounds(), tol);\n         TestUtils.assertEquals(expectedGeneratorUpperBounds, dist.getGeneratorUpperBounds(), tol);\n     }\n+    \n+    @Test\n+    public void testGeneratorConfig() {\n+        double[] testData = {0, 1, 2, 3, 4};\n+        RandomGenerator generator = new RandomAdaptorTest.ConstantGenerator(0.5);\n+        \n+        EmpiricalDistribution dist = new EmpiricalDistributionImpl(5, generator);\n+        dist.load(testData);\n+        for (int i = 0; i < 5; i++) {\n+            Assert.assertEquals(2.0, dist.getNextValue(), 0d);\n+        }\n+        \n+        // Verify no NPE with null generator argument\n+        dist = new EmpiricalDistributionImpl(5, null);\n+        dist.load(testData);\n+        dist.getNextValue();\n+    }\n+    \n+    @Test\n+    public void testReSeed() throws Exception {\n+        empiricalDistribution.load(url);\n+        empiricalDistribution.reSeed(100);\n+        final double [] values = new double[10];\n+        for (int i = 0; i < 10; i++) {\n+            values[i] = empiricalDistribution.getNextValue();\n+        }\n+        empiricalDistribution.reSeed(100);\n+        for (int i = 0; i < 10; i++) {\n+            Assert.assertEquals(values[i],empiricalDistribution.getNextValue(), 0d);\n+        }\n+    }\n \n     private void verifySame(EmpiricalDistribution d1, EmpiricalDistribution d2) {\n         Assert.assertEquals(d1.isLoaded(), d2.isLoaded());", "timestamp": 1312155094, "metainfo": ""}