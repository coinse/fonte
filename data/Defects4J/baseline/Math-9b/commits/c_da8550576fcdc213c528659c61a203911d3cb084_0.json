{"sha": "da8550576fcdc213c528659c61a203911d3cb084", "log": "Replaced last remaining uses of OptimizationException.  the replacement exceptions are unchecked ones: UnboundSolutionException, NoFeasibleSolutionException, MaxCountExceededException ...  JIRA: MATH-457  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java\n \n import java.util.Collection;\n \n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.optimization.GoalType;\n-import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.RealPointValuePair;\n \n /**\n     public RealPointValuePair optimize(final LinearObjectiveFunction f,\n                                        final Collection<LinearConstraint> constraints,\n                                        final GoalType goalType, final boolean restrictToNonNegative)\n-         throws OptimizationException {\n+         throws MathIllegalStateException {\n \n         // store linear problem characteristics\n         this.function          = f;\n \n     /** Perform the bulk of optimization algorithm.\n      * @return the point/value pair giving the optimal value for objective function\n-     * @exception OptimizationException if no solution fulfilling the constraints\n+     * @exception MathIllegalStateException if no solution fulfilling the constraints\n      * can be found in the allowed number of iterations\n      */\n     protected abstract RealPointValuePair doOptimize()\n-        throws OptimizationException;\n+        throws MathIllegalStateException;\n \n }\n--- a/src/main/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java\n \n import java.util.Collection;\n \n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.optimization.GoalType;\n-import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.RealPointValuePair;\n \n /**\n      * or {@link GoalType#MINIMIZE}\n      * @param restrictToNonNegative whether to restrict the variables to non-negative values\n      * @return point/value pair giving the optimal value for objective function\n-     * @exception OptimizationException if no solution fulfilling the constraints\n+     * @exception MathIllegalStateException if no solution fulfilling the constraints\n      * can be found in the allowed number of iterations\n      */\n    RealPointValuePair optimize(LinearObjectiveFunction f, Collection<LinearConstraint> constraints,\n                                GoalType goalType, boolean restrictToNonNegative)\n-        throws OptimizationException;\n+        throws MathIllegalStateException;\n \n }\n--- a/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java\n \n package org.apache.commons.math.optimization.linear;\n \n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n-import org.apache.commons.math.optimization.OptimizationException;\n \n /**\n  * This class represents exceptions thrown by optimizers when no solution\n  * @version $Id$\n  * @since 2.0\n  */\n-public class NoFeasibleSolutionException extends OptimizationException {\n+public class NoFeasibleSolutionException extends MathIllegalStateException {\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = -3044253632189082760L;\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.math.optimization.OptimizationException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.optimization.RealPointValuePair;\n import org.apache.commons.math.util.MathUtils;\n \n     /**\n      * Runs one iteration of the Simplex method on the given model.\n      * @param tableau simple tableau for the problem\n-     * @throws OptimizationException if the maximal iteration count has been\n-     * exceeded or if the model is found not to have a bounded solution\n+     * @throws MaxCountExceededException if the maximal iteration count has been exceeded\n+     * @throws UnboundedSolutionException if the model is found not to have a bounded solution\n      */\n     protected void doIteration(final SimplexTableau tableau)\n-        throws OptimizationException {\n+        throws MaxCountExceededException, UnboundedSolutionException {\n \n         incrementIterationsCounter();\n \n     /**\n      * Solves Phase 1 of the Simplex method.\n      * @param tableau simple tableau for the problem\n-     * @exception OptimizationException if the maximal number of iterations is\n-     * exceeded, or if the problem is found not to have a bounded solution, or\n-     * if there is no feasible solution\n-     */\n-    protected void solvePhase1(final SimplexTableau tableau) throws OptimizationException {\n+     * @throws MaxCountExceededException if the maximal iteration count has been exceeded\n+     * @throws UnboundedSolutionException if the model is found not to have a bounded solution\n+     * @throws NoFeasibleSolutionException if there is no feasible solution\n+     */\n+    protected void solvePhase1(final SimplexTableau tableau)\n+        throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {\n \n         // make sure we're in Phase 1\n         if (tableau.getNumArtificialVariables() == 0) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealPointValuePair doOptimize() throws OptimizationException {\n+    public RealPointValuePair doOptimize()\n+        throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {\n         final SimplexTableau tableau =\n             new SimplexTableau(function, linearConstraints, goal, nonNegative,\n                                epsilon, maxUlps);\n--- a/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java\n \n package org.apache.commons.math.optimization.linear;\n \n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n-import org.apache.commons.math.optimization.OptimizationException;\n \n /**\n  * This class represents exceptions thrown by optimizers when a solution\n  * @version $Id$\n  * @since 2.0\n  */\n-public class UnboundedSolutionException extends OptimizationException {\n+public class UnboundedSolutionException extends MathIllegalStateException {\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 940539497277290619L;\n--- a/src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java\n package org.apache.commons.math.optimization.fitting;\n \n import org.apache.commons.math.exception.MathIllegalArgumentException;\n-import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;\n \n import org.junit.Assert;\n \n     /**\n      * Basic.\n-     *\n-     * @throws OptimizationException in the event of a test case error\n-     */\n-    @Test\n-    public void testFit01()\n-    throws OptimizationException {\n+     */\n+    @Test\n+    public void testFit01() {\n         GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n         addDatasetToGaussianFitter(DATASET1, fitter);\n         double[] parameters = fitter.fit();\n \n     /**\n      * Zero points is not enough observed points.\n-     *\n-     * @throws OptimizationException in the event of a test case error\n      */\n     @Test(expected=MathIllegalArgumentException.class)\n-    public void testFit02()\n-    throws OptimizationException {\n+    public void testFit02() {\n         GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n         fitter.fit();\n     }\n     \n     /**\n      * Two points is not enough observed points.\n-     *\n-     * @throws OptimizationException in the event of a test case error\n      */\n     @Test(expected=MathIllegalArgumentException.class)\n-    public void testFit03()\n-    throws OptimizationException {\n+    public void testFit03() {\n         GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n         addDatasetToGaussianFitter(new double[][] {\n             {4.0254623,  531026.0},\n     \n     /**\n      * Poor data: right of peak not symmetric with left of peak.\n-     *\n-     * @throws OptimizationException in the event of a test case error\n-     */\n-    @Test\n-    public void testFit04()\n-    throws OptimizationException \n-    {\n+     */\n+    @Test\n+    public void testFit04() {\n         GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n         addDatasetToGaussianFitter(DATASET2, fitter);\n         double[] parameters = fitter.fit();\n     \n     /**\n      * Poor data: long tails.\n-     *\n-     * @throws OptimizationException in the event of a test case error\n-     */\n-    @Test\n-    public void testFit05()\n-    throws OptimizationException {\n+     */\n+    @Test\n+    public void testFit05() {\n         GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n         addDatasetToGaussianFitter(DATASET3, fitter);\n         double[] parameters = fitter.fit();\n     \n     /**\n      * Poor data: right of peak is missing.\n-     *\n-     * @throws OptimizationException in the event of a test case error\n-     */\n-    @Test\n-    public void testFit06()\n-    throws OptimizationException {\n+     */\n+    @Test\n+    public void testFit06() {\n         GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n         addDatasetToGaussianFitter(DATASET4, fitter);\n         double[] parameters = fitter.fit();\n \n     /**\n      * Basic with smaller dataset.\n-     *\n-     * @throws OptimizationException in the event of a test case error\n-     */\n-    @Test\n-    public void testFit07()\n-    throws OptimizationException {\n+     */\n+    @Test\n+    public void testFit07() {\n         GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n         addDatasetToGaussianFitter(DATASET5, fitter);\n         double[] parameters = fitter.fit();\n--- a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n import java.util.Collection;\n \n import org.apache.commons.math.optimization.GoalType;\n-import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.RealPointValuePair;\n import org.apache.commons.math.util.MathUtils;\n import org.junit.Test;\n public class SimplexSolverTest {\n \n     @Test\n-    public void testMath434NegativeVariable() throws OptimizationException\n-    {\n+    public void testMath434NegativeVariable() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0, 0.0, 1.0}, 0.0d);\n         ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] {1, 1, 0}, Relationship.EQ, 5));\n     }\n \n     @Test(expected = NoFeasibleSolutionException.class)\n-    public void testMath434UnfeasibleSolution() throws OptimizationException\n-    {\n+    public void testMath434UnfeasibleSolution() {\n         double epsilon = 1e-6;\n \n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 0.0}, 0.0);\n     }\n \n     @Test\n-    public void testMath434PivotRowSelection() throws OptimizationException\n-    {\n+    public void testMath434PivotRowSelection() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0}, 0.0);\n \n         double epsilon = 1e-6;\n     }\n \n     @Test\n-    public void testMath434PivotRowSelection2() throws OptimizationException\n-    {\n+    public void testMath434PivotRowSelection2() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d}, 0.0d);\n \n         ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n     }\n     \n     @Test\n-    public void testMath272() throws OptimizationException {\n+    public void testMath272() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n     }\n \n     @Test\n-    public void testMath286() throws OptimizationException {\n+    public void testMath286() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }, 0 );\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 23.0));\n     }\n \n     @Test\n-    public void testDegeneracy() throws OptimizationException {\n+    public void testDegeneracy() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.7 }, 0 );\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 18.0));\n     }\n \n     @Test\n-    public void testMath288() throws OptimizationException {\n+    public void testMath288() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0 );\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));\n     }\n \n     @Test\n-    public void testMath290GEQ() throws OptimizationException {\n+    public void testMath290GEQ() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 5 }, 0 );\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.GEQ, -1.0));\n     }\n \n     @Test(expected=NoFeasibleSolutionException.class)\n-    public void testMath290LEQ() throws OptimizationException {\n+    public void testMath290LEQ() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 5 }, 0 );\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.LEQ, -1.0));\n     }\n \n     @Test\n-    public void testMath293() throws OptimizationException {\n+    public void testMath293() {\n       LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.4, 0.6}, 0 );\n       Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n       constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 30.0));\n     }\n \n     @Test\n-    public void testSimplexSolver() throws OptimizationException {\n+    public void testSimplexSolver() {\n         LinearObjectiveFunction f =\n             new LinearObjectiveFunction(new double[] { 15, 10 }, 7);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n     }\n \n     @Test\n-    public void testSingleVariableAndConstraint() throws OptimizationException {\n+    public void testSingleVariableAndConstraint() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n      * constraints) we can go straight to Phase 2.\n      */\n     @Test\n-    public void testModelWithNoArtificialVars() throws OptimizationException {\n+    public void testModelWithNoArtificialVars() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.LEQ, 2));\n     }\n \n     @Test\n-    public void testMinimization() throws OptimizationException {\n+    public void testMinimization() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, -5);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1, 2 }, Relationship.LEQ, 6));\n     }\n \n     @Test\n-    public void testSolutionWithNegativeDecisionVariable() throws OptimizationException {\n+    public void testSolutionWithNegativeDecisionVariable() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.GEQ, 6));\n     }\n \n     @Test(expected = NoFeasibleSolutionException.class)\n-    public void testInfeasibleSolution() throws OptimizationException {\n+    public void testInfeasibleSolution() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 1));\n     }\n \n     @Test(expected = UnboundedSolutionException.class)\n-    public void testUnboundedSolution() throws OptimizationException {\n+    public void testUnboundedSolution() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.EQ, 2));\n     }\n \n     @Test\n-    public void testRestrictVariablesToNonNegative() throws OptimizationException {\n+    public void testRestrictVariablesToNonNegative() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 409, 523, 70, 204, 339 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] {    43,   56, 345,  56,    5 }, Relationship.LEQ,  4567456));\n     }\n \n     @Test\n-    public void testEpsilon() throws OptimizationException {\n+    public void testEpsilon() {\n       LinearObjectiveFunction f =\n           new LinearObjectiveFunction(new double[] { 10, 5, 1 }, 0);\n       Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n   }\n \n     @Test\n-    public void testTrivialModel() throws OptimizationException {\n+    public void testTrivialModel() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 1 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ,  0));\n     }\n \n     @Test\n-    public void testLargeModel() throws OptimizationException {\n+    public void testLargeModel() {\n         double[] objective = new double[] {\n                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                                            1, 1, 12, 1, 1, 1, 1, 1, 1, 1,", "timestamp": 1317480741, "metainfo": ""}