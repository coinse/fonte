{"sha": "6961b425200662ff28b494ca836650ea0ea8e7a0", "log": "Merged interface and implementation of OneWayAnova, MannWhitneyUTest and WilcoxonSignedRankTest. JIRA: MATH-739  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java\n  */\n package org.apache.commons.math.stat.inference;\n \n+import org.apache.commons.math.distribution.NormalDistribution;\n import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.stat.ranking.NaNStrategy;\n+import org.apache.commons.math.stat.ranking.NaturalRanking;\n+import org.apache.commons.math.stat.ranking.TiesStrategy;\n+import org.apache.commons.math.util.FastMath;\n \n /**\n- * An interface for Mann-Whitney U test (also called Wilcoxon rank-sum test).\n+ * An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum test).\n  *\n  * @version $Id$\n  */\n-public interface MannWhitneyUTest {\n+public class MannWhitneyUTest {\n+\n+    /** Ranking algorithm. */\n+    private NaturalRanking naturalRanking;\n+\n+    /**\n+     * Create a test instance using where NaN's are left in place and ties get\n+     * the average of applicable ranks. Use this unless you are very sure of\n+     * what you are doing.\n+     */\n+    public MannWhitneyUTest() {\n+        naturalRanking = new NaturalRanking(NaNStrategy.FIXED,\n+                TiesStrategy.AVERAGE);\n+    }\n+\n+    /**\n+     * Create a test instance using the given strategies for NaN's and ties.\n+     * Only use this if you are sure of what you are doing.\n+     *\n+     * @param nanStrategy\n+     *            specifies the strategy that should be used for Double.NaN's\n+     * @param tiesStrategy\n+     *            specifies the strategy that should be used for ties\n+     */\n+    public MannWhitneyUTest(final NaNStrategy nanStrategy,\n+                            final TiesStrategy tiesStrategy) {\n+        naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);\n+    }\n+\n+    /**\n+     * Ensures that the provided arrays fulfills the assumptions.\n+     *\n+     * @param x first sample\n+     * @param y second sample\n+     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n+     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n+     */\n+    private void ensureDataConformance(final double[] x, final double[] y)\n+        throws NullArgumentException, NoDataException {\n+\n+        if (x == null ||\n+            y == null) {\n+            throw new NullArgumentException();\n+        }\n+        if (x.length == 0 ||\n+            y.length == 0) {\n+            throw new NoDataException();\n+        }\n+    }\n+\n+    /** Concatenate the samples into one array.\n+     * @param x first sample\n+     * @param y second sample\n+     * @return concatenated array\n+     */\n+    private double[] concatenateSamples(final double[] x, final double[] y) {\n+        final double[] z = new double[x.length + y.length];\n+\n+        System.arraycopy(x, 0, z, 0, x.length);\n+        System.arraycopy(y, 0, z, x.length, y.length);\n+\n+        return z;\n+    }\n \n     /**\n      * Computes the <a\n      * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n      * @throws NoDataException if {@code x} or {@code y} are zero-length.\n      */\n-    double mannWhitneyU(final double[] x, final double[] y)\n-        throws NullArgumentException, NoDataException;\n+    public double mannWhitneyU(final double[] x, final double[] y)\n+        throws NullArgumentException, NoDataException {\n+\n+        ensureDataConformance(x, y);\n+\n+        final double[] z = concatenateSamples(x, y);\n+        final double[] ranks = naturalRanking.rank(z);\n+\n+        double sumRankX = 0;\n+\n+        /*\n+         * The ranks for x is in the first x.length entries in ranks because x\n+         * is in the first x.length entries in z\n+         */\n+        for (int i = 0; i < x.length; ++i) {\n+            sumRankX += ranks[i];\n+        }\n+\n+        /*\n+         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,\n+         * e.g. x, n1 is the number of observations in sample 1.\n+         */\n+        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;\n+\n+        /*\n+         * It can be shown that U1 + U2 = n1 * n2\n+         */\n+        final double U2 = x.length * y.length - U1;\n+\n+        return FastMath.max(U1, U2);\n+    }\n+\n+    /**\n+     * @param Umin smallest Mann-Whitney U value\n+     * @param n1 number of subjects in first sample\n+     * @param n2 number of subjects in second sample\n+     * @return two-sided asymptotic p-value\n+     * @throws ConvergenceException if the p-value can not be computed\n+     * due to a convergence error\n+     * @throws MaxCountExceededException if the maximum number of\n+     * iterations is exceeded\n+     */\n+    private double calculateAsymptoticPValue(final double Umin,\n+                                             final int n1,\n+                                             final int n2)\n+        throws ConvergenceException, MaxCountExceededException {\n+\n+        final int n1n2prod = n1 * n2;\n+\n+        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n+        final double EU = (double) n1n2prod / 2.0;\n+        final double VarU = (double) (n1n2prod * (n1 + n2 + 1)) / 12.0;\n+\n+        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n+\n+        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n+\n+        return 2 * standardNormal.cumulativeProbability(z);\n+    }\n \n     /**\n      * Returns the asymptotic <i>observed significance level</i>, or <a href=\n      * <li>All observations in the two samples are independent.</li>\n      * <li>The observations are at least ordinal (continuous are also ordinal).</li>\n      * </ul>\n-     * </p>\n+     * </p><p>\n+     * Ties give rise to biased variance at the moment. See e.g. <a\n+     * href=\"http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf\"\n+     * >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.</p>\n      *\n      * @param x the first sample\n      * @param y the second sample\n      * @throws MaxCountExceededException if the maximum number of iterations\n      * is exceeded\n      */\n-    double mannWhitneyUTest(final double[] x, final double[] y)\n+    public double mannWhitneyUTest(final double[] x, final double[] y)\n         throws NullArgumentException, NoDataException,\n-        ConvergenceException, MaxCountExceededException;\n+        ConvergenceException, MaxCountExceededException {\n+\n+        ensureDataConformance(x, y);\n+\n+        final double Umax = mannWhitneyU(x, y);\n+\n+        /*\n+         * It can be shown that U1 + U2 = n1 * n2\n+         */\n+        final double Umin = x.length * y.length - Umax;\n+\n+        return calculateAsymptoticPValue(Umin, x.length, y.length);\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java\n  */\n package org.apache.commons.math.stat.inference;\n \n+import org.apache.commons.math.distribution.FDistribution;\n import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.stat.descriptive.summary.Sum;\n+import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;\n \n import java.util.Collection;\n \n /**\n- * An interface for one-way ANOVA (analysis of variance).\n+ * Implements one-way ANOVA (analysis of variance) statistics.\n  *\n  * <p> Tests for differences between two or more categories of univariate data\n  * (for example, the body mass index of accountants, lawyers, doctors and\n  * computer programmers).  When two categories are given, this is equivalent to\n  * the {@link org.apache.commons.math.stat.inference.TTest}.\n- * </p>\n+ * </p><p>\n+ * Uses the {@link org.apache.commons.math.distribution.FDistribution\n+ * commons-math F Distribution implementation} to estimate exact p-values.</p>\n+ * <p>This implementation is based on a description at\n+ * http://faculty.vassar.edu/lowry/ch13pt1.html</p>\n+ * <pre>\n+ * Abbreviations: bg = between groups,\n+ *                wg = within groups,\n+ *                ss = sum squared deviations\n+ * </pre>\n  *\n  * @since 1.2\n  * @version $Id$\n  */\n-public interface OneWayAnova {\n+public class OneWayAnova {\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public OneWayAnova() {\n+    }\n \n     /**\n      * Computes the ANOVA F-value for a collection of <code>double[]</code>\n      * <code>double[]</code> arrays.</li>\n      * <li> There must be at least two <code>double[]</code> arrays in the\n      * <code>categoryData</code> collection and each of these arrays must\n-     * contain at least two values.</li></ul></p>\n+     * contain at least two values.</li></ul></p><p>\n+     * This implementation computes the F statistic using the definitional\n+     * formula<pre>\n+     *   F = msbg/mswg</pre>\n+     * where<pre>\n+     *  msbg = between group mean square\n+     *  mswg = within group mean square</pre>\n+     * are as defined <a href=\"http://faculty.vassar.edu/lowry/ch13pt1.html\">\n+     * here</a></p>\n      *\n      * @param categoryData <code>Collection</code> of <code>double[]</code>\n      * arrays each containing data for one category\n      * array is less than 2 or a contained <code>double[]</code> array does not have\n      * at least two values\n      */\n-    double anovaFValue(Collection<double[]> categoryData)\n-        throws NullArgumentException, DimensionMismatchException;\n+    public double anovaFValue(final Collection<double[]> categoryData)\n+        throws NullArgumentException, DimensionMismatchException {\n+\n+        AnovaStats a = anovaStats(categoryData);\n+        return a.F;\n+\n+    }\n \n     /**\n      * Computes the ANOVA P-value for a collection of <code>double[]</code>\n      * <code>double[]</code> arrays.</li>\n      * <li> There must be at least two <code>double[]</code> arrays in the\n      * <code>categoryData</code> collection and each of these arrays must\n-     * contain at least two values.</li></ul></p>\n+     * contain at least two values.</li></ul></p><p>\n+     * This implementation uses the\n+     * {@link org.apache.commons.math.distribution.FDistribution\n+     * commons-math F Distribution implementation} to estimate the exact\n+     * p-value, using the formula<pre>\n+     *   p = 1 - cumulativeProbability(F)</pre>\n+     * where <code>F</code> is the F value and <code>cumulativeProbability</code>\n+     * is the commons-math implementation of the F distribution.</p>\n      *\n      * @param categoryData <code>Collection</code> of <code>double[]</code>\n      * arrays each containing data for one category\n      * @throws ConvergenceException if the p-value can not be computed due to a convergence error\n      * @throws MaxCountExceededException if the maximum number of iterations is exceeded\n      */\n-    double anovaPValue(Collection<double[]> categoryData)\n+    public double anovaPValue(final Collection<double[]> categoryData)\n         throws NullArgumentException, DimensionMismatchException,\n-        ConvergenceException, MaxCountExceededException;\n+        ConvergenceException, MaxCountExceededException {\n+\n+        AnovaStats a = anovaStats(categoryData);\n+        FDistribution fdist = new FDistribution(a.dfbg, a.dfwg);\n+        return 1.0 - fdist.cumulativeProbability(a.F);\n+\n+    }\n \n     /**\n      * Performs an ANOVA test, evaluating the null hypothesis that there\n      * <code>categoryData</code> collection and each of these arrays must\n      * contain at least two values.</li>\n      * <li>alpha must be strictly greater than 0 and less than or equal to 0.5.\n-     * </li></ul></p>\n+     * </li></ul></p><p>\n+     * This implementation uses the\n+     * {@link org.apache.commons.math.distribution.FDistribution\n+     * commons-math F Distribution implementation} to estimate the exact\n+     * p-value, using the formula<pre>\n+     *   p = 1 - cumulativeProbability(F)</pre>\n+     * where <code>F</code> is the F value and <code>cumulativeProbability</code>\n+     * is the commons-math implementation of the F distribution.</p>\n+     * <p>True is returned iff the estimated p-value is less than alpha.</p>\n      *\n      * @param categoryData <code>Collection</code> of <code>double[]</code>\n      * arrays each containing data for one category\n      * @throws ConvergenceException if the p-value can not be computed due to a convergence error\n      * @throws MaxCountExceededException if the maximum number of iterations is exceeded\n      */\n-    boolean anovaTest(Collection<double[]> categoryData, double alpha)\n-        throws NullArgumentException, DimensionMismatchException, OutOfRangeException,\n-        ConvergenceException, MaxCountExceededException;\n+    public boolean anovaTest(final Collection<double[]> categoryData,\n+                             final double alpha)\n+        throws NullArgumentException, DimensionMismatchException,\n+        OutOfRangeException, ConvergenceException, MaxCountExceededException {\n+\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new OutOfRangeException(\n+                    LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,\n+                    alpha, 0, 0.5);\n+        }\n+        return anovaPValue(categoryData) < alpha;\n+\n+    }\n+\n+    /**\n+     * This method actually does the calculations (except P-value).\n+     *\n+     * @param categoryData <code>Collection</code> of <code>double[]</code>\n+     * arrays each containing data for one category\n+     * @return computed AnovaStats\n+     * @throws NullArgumentException if <code>categoryData</code> is <code>null</code>\n+     * @throws DimensionMismatchException if the length of the <code>categoryData</code>\n+     * array is less than 2 or a contained <code>double[]</code> array does not contain\n+     * at least two values\n+     */\n+    private AnovaStats anovaStats(final Collection<double[]> categoryData)\n+        throws NullArgumentException, DimensionMismatchException {\n+\n+        if (categoryData == null) {\n+            throw new NullArgumentException();\n+        }\n+\n+        // check if we have enough categories\n+        if (categoryData.size() < 2) {\n+            throw new DimensionMismatchException(\n+                    LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n+                    categoryData.size(), 2);\n+        }\n+\n+        // check if each category has enough data and all is double[]\n+        for (double[] array : categoryData) {\n+            if (array.length <= 1) {\n+                throw new DimensionMismatchException(\n+                        LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n+                        array.length, 2);\n+            }\n+        }\n+\n+        int dfwg = 0;\n+        double sswg = 0;\n+        Sum totsum = new Sum();\n+        SumOfSquares totsumsq = new SumOfSquares();\n+        int totnum = 0;\n+\n+        for (double[] data : categoryData) {\n+\n+            Sum sum = new Sum();\n+            SumOfSquares sumsq = new SumOfSquares();\n+            int num = 0;\n+\n+            for (int i = 0; i < data.length; i++) {\n+                double val = data[i];\n+\n+                // within category\n+                num++;\n+                sum.increment(val);\n+                sumsq.increment(val);\n+\n+                // for all categories\n+                totnum++;\n+                totsum.increment(val);\n+                totsumsq.increment(val);\n+            }\n+            dfwg += num - 1;\n+            double ss = sumsq.getResult() - sum.getResult() * sum.getResult() / num;\n+            sswg += ss;\n+        }\n+        double sst = totsumsq.getResult() - totsum.getResult() *\n+            totsum.getResult()/totnum;\n+        double ssbg = sst - sswg;\n+        int dfbg = categoryData.size() - 1;\n+        double msbg = ssbg/dfbg;\n+        double mswg = sswg/dfwg;\n+        double F = msbg/mswg;\n+\n+        return new AnovaStats(dfbg, dfwg, F);\n+    }\n+\n+    /**\n+        Convenience class to pass dfbg,dfwg,F values around within AnovaImpl.\n+        No get/set methods provided.\n+    */\n+    private static class AnovaStats {\n+\n+        /** Degrees of freedom in numerator (between groups). */\n+        private final int dfbg;\n+\n+        /** Degrees of freedom in denominator (within groups). */\n+        private final int dfwg;\n+\n+        /** Statistic. */\n+        private final double F;\n+\n+        /**\n+         * Constructor\n+         * @param dfbg degrees of freedom in numerator (between groups)\n+         * @param dfwg degrees of freedom in denominator (within groups)\n+         * @param F statistic\n+         */\n+        private AnovaStats(int dfbg, int dfwg, double F) {\n+            this.dfbg = dfbg;\n+            this.dfwg = dfwg;\n+            this.F = F;\n+        }\n+    }\n \n }\n--- a/src/main/java/org/apache/commons/math/stat/inference/TestUtils.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/TestUtils.java\n \n import java.util.Collection;\n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.exception.ConvergenceException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n \n /**\n  */\n public class TestUtils  {\n \n-    /** Singleton TTest instance using default implementation. */\n+    /** Singleton TTest instance. */\n     private static final TTest T_TEST = new TTestImpl();\n \n-    /** Singleton ChiSquareTest instance using default implementation. */\n+    /** Singleton ChiSquareTest instance. */\n     private static final ChiSquareTest CHI_SQUARE_TEST = new ChiSquareTestImpl();\n \n-    /** Singleton ChiSquareTest instance using default implementation. */\n+    /** Singleton ChiSquareTest instance. */\n     private static final UnknownDistributionChiSquareTest UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST =\n         new ChiSquareTestImpl();\n \n-    /** Singleton OneWayAnova instance using default implementation. */\n-    private static final OneWayAnova ONE_WAY_ANANOVA = new OneWayAnovaImpl();\n+    /** Singleton OneWayAnova instance. */\n+    private static final OneWayAnova ONE_WAY_ANANOVA = new OneWayAnova();\n+\n+    /** Singleton MannWhitneyUTest instance using default ranking. */\n+    private static final MannWhitneyUTest MANN_WHITNEY_U_TEST = new MannWhitneyUTest();\n+\n+    /** Singleton WilcoxonSignedRankTest instance. */\n+    private static final WilcoxonSignedRankTest WILCOXON_SIGNED_RANK_TEST =\n+        new WilcoxonSignedRankTest();\n \n     /**\n      * Prevent instantiation.\n     public static boolean homoscedasticTTest(double[] sample1, double[] sample2,\n             double alpha)\n         throws IllegalArgumentException, MathException {\n-        return T_TEST. homoscedasticTTest(sample1, sample2, alpha);\n+        return T_TEST.homoscedasticTTest(sample1, sample2, alpha);\n     }\n \n     /**\n     public static boolean tTest(double mu, StatisticalSummary sampleStats,\n         double alpha)\n         throws IllegalArgumentException, MathException {\n-        return T_TEST. tTest(mu, sampleStats, alpha);\n+        return T_TEST.tTest(mu, sampleStats, alpha);\n     }\n \n     /**\n     public static boolean tTest(StatisticalSummary sampleStats1,\n         StatisticalSummary sampleStats2, double alpha)\n         throws IllegalArgumentException, MathException {\n-        return T_TEST. tTest(sampleStats1, sampleStats2, alpha);\n+        return T_TEST.tTest(sampleStats1, sampleStats2, alpha);\n     }\n \n     /**\n      */\n     public static boolean chiSquareTest(long[][] counts, double alpha)\n         throws IllegalArgumentException, MathException {\n-        return CHI_SQUARE_TEST. chiSquareTest(counts, alpha);\n+        return CHI_SQUARE_TEST.chiSquareTest(counts, alpha);\n     }\n \n     /**\n      *\n      * @since 1.2\n      */\n-    public static double oneWayAnovaFValue(Collection<double[]> categoryData)\n-    throws IllegalArgumentException, MathException {\n+    public static double oneWayAnovaFValue(final Collection<double[]> categoryData)\n+        throws NullArgumentException, DimensionMismatchException {\n         return ONE_WAY_ANANOVA.anovaFValue(categoryData);\n     }\n \n      *\n      * @since 1.2\n      */\n-    public static double oneWayAnovaPValue(Collection<double[]> categoryData)\n-    throws IllegalArgumentException, MathException {\n+    public static double oneWayAnovaPValue(final Collection<double[]> categoryData)\n+        throws NullArgumentException, DimensionMismatchException,\n+        ConvergenceException, MaxCountExceededException {\n         return ONE_WAY_ANANOVA.anovaPValue(categoryData);\n     }\n \n      *\n      * @since 1.2\n      */\n-    public static boolean oneWayAnovaTest(Collection<double[]> categoryData, double alpha)\n-    throws IllegalArgumentException, MathException {\n+    public static boolean oneWayAnovaTest(final Collection<double[]> categoryData,\n+                                          final double alpha)\n+        throws NullArgumentException, DimensionMismatchException,\n+        OutOfRangeException, ConvergenceException, MaxCountExceededException {\n         return ONE_WAY_ANANOVA.anovaTest(categoryData, alpha);\n     }\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java\n  */\n package org.apache.commons.math.stat.inference;\n \n+import org.apache.commons.math.distribution.NormalDistribution;\n import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.NumberIsTooLargeException;\n+import org.apache.commons.math.stat.ranking.NaNStrategy;\n+import org.apache.commons.math.stat.ranking.NaturalRanking;\n+import org.apache.commons.math.stat.ranking.TiesStrategy;\n+import org.apache.commons.math.util.FastMath;\n \n /**\n- * An interface for Wilcoxon signed-rank test.\n+ * An implementation of the Wilcoxon signed-rank test.\n  *\n  * @version $Id$\n  */\n-public interface WilcoxonSignedRankTest {\n+public class WilcoxonSignedRankTest {\n+\n+    /** Ranking algorithm. */\n+    private NaturalRanking naturalRanking;\n+\n+    /**\n+     * Create a test instance where NaN's are left in place and ties get\n+     * the average of applicable ranks. Use this unless you are very sure\n+     * of what you are doing.\n+     */\n+    public WilcoxonSignedRankTest() {\n+        naturalRanking = new NaturalRanking(NaNStrategy.FIXED,\n+                TiesStrategy.AVERAGE);\n+    }\n+\n+    /**\n+     * Create a test instance using the given strategies for NaN's and ties.\n+     * Only use this if you are sure of what you are doing.\n+     *\n+     * @param nanStrategy\n+     *            specifies the strategy that should be used for Double.NaN's\n+     * @param tiesStrategy\n+     *            specifies the strategy that should be used for ties\n+     */\n+    public WilcoxonSignedRankTest(final NaNStrategy nanStrategy,\n+                                  final TiesStrategy tiesStrategy) {\n+        naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);\n+    }\n+\n+    /**\n+     * Ensures that the provided arrays fulfills the assumptions.\n+     *\n+     * @param x first sample\n+     * @param y second sample\n+     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n+     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n+     * @throws DimensionMismatchException if {@code x} and {@code y} do not\n+     * have the same length.\n+     */\n+    private void ensureDataConformance(final double[] x, final double[] y)\n+        throws NullArgumentException, NoDataException, DimensionMismatchException {\n+\n+        if (x == null ||\n+            y == null) {\n+                throw new NullArgumentException();\n+        }\n+        if (x.length == 0 ||\n+            y.length == 0) {\n+            throw new NoDataException();\n+        }\n+        if (y.length != x.length) {\n+            throw new DimensionMismatchException(y.length, x.length);\n+        }\n+    }\n+\n+    /**\n+     * Calculates y[i] - x[i] for all i\n+     *\n+     * @param x first sample\n+     * @param y second sample\n+     * @return z = y - x\n+     */\n+    private double[] calculateDifferences(final double[] x, final double[] y) {\n+\n+        final double[] z = new double[x.length];\n+\n+        for (int i = 0; i < x.length; ++i) {\n+            z[i] = y[i] - x[i];\n+        }\n+\n+        return z;\n+    }\n+\n+    /**\n+     * Calculates |z[i]| for all i\n+     *\n+     * @param z sample\n+     * @return |z|\n+     * @throws NullArgumentException if {@code z} is {@code null}\n+     * @throws NoDataException if {@code z} is zero-length.\n+     */\n+    private double[] calculateAbsoluteDifferences(final double[] z)\n+        throws NullArgumentException, NoDataException {\n+\n+        if (z == null) {\n+            throw new NullArgumentException();\n+        }\n+\n+        if (z.length == 0) {\n+            throw new NoDataException();\n+        }\n+\n+        final double[] zAbs = new double[z.length];\n+\n+        for (int i = 0; i < z.length; ++i) {\n+            zAbs[i] = FastMath.abs(z[i]);\n+        }\n+\n+        return zAbs;\n+    }\n \n     /**\n      * Computes the <a\n      * @throws DimensionMismatchException if {@code x} and {@code y} do not\n      * have the same length.\n      */\n-    double wilcoxonSignedRank(final double[] x, final double[] y)\n-        throws NullArgumentException, NoDataException, DimensionMismatchException;\n+    public double wilcoxonSignedRank(final double[] x, final double[] y)\n+        throws NullArgumentException, NoDataException, DimensionMismatchException {\n+\n+        ensureDataConformance(x, y);\n+\n+        // throws IllegalArgumentException if x and y are not correctly\n+        // specified\n+        final double[] z = calculateDifferences(x, y);\n+        final double[] zAbs = calculateAbsoluteDifferences(z);\n+\n+        final double[] ranks = naturalRanking.rank(zAbs);\n+\n+        double Wplus = 0;\n+\n+        for (int i = 0; i < z.length; ++i) {\n+            if (z[i] > 0) {\n+                Wplus += ranks[i];\n+            }\n+        }\n+\n+        final int N = x.length;\n+        final double Wminus = (((double) (N * (N + 1))) / 2.0) - Wplus;\n+\n+        return FastMath.max(Wplus, Wminus);\n+    }\n+\n+    /**\n+     * Algorithm inspired by\n+     * http://www.fon.hum.uva.nl/Service/Statistics/Signed_Rank_Algorihms.html#C\n+     * by Rob van Son, Institute of Phonetic Sciences & IFOTT,\n+     * University of Amsterdam\n+     *\n+     * @param Wmax largest Wilcoxon signed rank value\n+     * @param N number of subjects (corresponding to x.length)\n+     * @return two-sided exact p-value\n+     */\n+    private double calculateExactPValue(final double Wmax, final int N) {\n+\n+        // Total number of outcomes (equal to 2^N but a lot faster)\n+        final int m = 1 << N;\n+\n+        int largerRankSums = 0;\n+\n+        for (int i = 0; i < m; ++i) {\n+            int rankSum = 0;\n+\n+            // Generate all possible rank sums\n+            for (int j = 0; j < N; ++j) {\n+\n+                // (i >> j) & 1 extract i's j-th bit from the right\n+                if (((i >> j) & 1) == 1) {\n+                    rankSum += j + 1;\n+                }\n+            }\n+\n+            if (rankSum >= Wmax) {\n+                ++largerRankSums;\n+            }\n+        }\n+\n+        /*\n+         * largerRankSums / m gives the one-sided p-value, so it's multiplied\n+         * with 2 to get the two-sided p-value\n+         */\n+        return 2 * ((double) largerRankSums) / ((double) m);\n+    }\n+\n+    /**\n+     * @param Wmin smallest Wilcoxon signed rank value\n+     * @param N number of subjects (corresponding to x.length)\n+     * @return two-sided asymptotic p-value\n+     */\n+    private double calculateAsymptoticPValue(final double Wmin, final int N) {\n+\n+        final double ES = (double) (N * (N + 1)) / 4.0;\n+\n+        /* Same as (but saves computations):\n+         * final double VarW = ((double) (N * (N + 1) * (2*N + 1))) / 24;\n+         */\n+        final double VarS = ES * ((double) (2 * N + 1) / 6.0);\n+\n+        // - 0.5 is a continuity correction\n+        final double z = (Wmin - ES - 0.5) / FastMath.sqrt(VarS);\n+\n+        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n+\n+        return 2*standardNormal.cumulativeProbability(z);\n+    }\n \n     /**\n      * Returns the <i>observed significance level</i>, or <a href=\n      * @throws MaxCountExceededException if the maximum number of iterations\n      * is exceeded\n      */\n-    double wilcoxonSignedRankTest(final double[] x, final double[] y, boolean exactPValue)\n+    public double wilcoxonSignedRankTest(final double[] x, final double[] y,\n+                                         final boolean exactPValue)\n         throws NullArgumentException, NoDataException, DimensionMismatchException,\n-        NumberIsTooLargeException, ConvergenceException, MaxCountExceededException;\n+        NumberIsTooLargeException, ConvergenceException, MaxCountExceededException {\n+\n+        ensureDataConformance(x, y);\n+\n+        final int N = x.length;\n+        final double Wmax = wilcoxonSignedRank(x, y);\n+\n+        if (exactPValue && N > 30) {\n+            throw new NumberIsTooLargeException(N, 30, true);\n+        }\n+\n+        if (exactPValue) {\n+            return calculateExactPValue(Wmax, N);\n+        } else {\n+            final double Wmin = ( (double)(N*(N+1)) / 2.0 ) - Wmax;\n+            return calculateAsymptoticPValue(Wmin, N);\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java\n \n public class MannWhitneyUTestTest {\n \n-    protected MannWhitneyUTest testStatistic = new MannWhitneyUTestImpl();\n+    protected MannWhitneyUTest testStatistic = new MannWhitneyUTest();\n \n     @Test\n     public void testMannWhitneyUSimple() throws Exception {\n--- a/src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java\n \n public class OneWayAnovaTest {\n \n-    protected OneWayAnova testStatistic = new OneWayAnovaImpl();\n+    protected OneWayAnova testStatistic = new OneWayAnova();\n \n     private double[] emptyArray = {};\n \n--- a/src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java\n       {110.0, 115.0, 111.0, 117.0, 128.0};\n \n     private List<double[]> classes = new ArrayList<double[]>();\n-    private OneWayAnova oneWayAnova = new OneWayAnovaImpl();\n+    private OneWayAnova oneWayAnova = new OneWayAnova();\n \n     @Test\n     public void testOneWayAnovaUtils() throws Exception {\n--- a/src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java\n \n \n /**\n- * Test cases for the ChiSquareTestImpl class.\n+ * Test cases for the WilcoxonSignedRangTest class.\n  *\n  * @version $Id$\n  */\n \n public class WilcoxonSignedRankTestTest {\n \n-    protected WilcoxonSignedRankTest testStatistic = new WilcoxonSignedRankTestImpl();\n+    protected WilcoxonSignedRankTest testStatistic = new WilcoxonSignedRankTest();\n \n     @Test\n     public void testWilcoxonSignedRankSimple() throws Exception {", "timestamp": 1328741931, "metainfo": ""}