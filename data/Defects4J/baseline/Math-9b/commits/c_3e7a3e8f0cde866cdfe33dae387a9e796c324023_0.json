{"sha": "3e7a3e8f0cde866cdfe33dae387a9e796c324023", "log": "MATH-413 Convergence checker passed in the constructor.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java\n  *  re-initialized to one with the appropriate dimensions.\n  * </p>\n  * <p>\n- *  If {@link #setConvergenceChecker(ConvergenceChecker)} is not called,\n- *  a default {@link SimpleScalarValueChecker} is used.\n- * </p>\n- * <p>\n  *  Convergence is checked by providing the <em>worst</em> points of\n  *  previous and current simplex to the convergence checker, not the best\n  *  ones.\n     private AbstractSimplex simplex;\n \n     /**\n-     * Default constructor.\n+     * Constructor using a default {@link SimpleScalarValueChecker convergence\n+     * checker}.\n      */\n     public SimplexOptimizer() {\n-        setConvergenceChecker(new SimpleScalarValueChecker());\n+        this(new SimpleScalarValueChecker());\n+    }\n+\n+    /**\n+     * @param checker Convergence checker.\n+     */\n+    public SimplexOptimizer(ConvergenceChecker<RealPointValuePair> checker) {\n+        super(checker);\n     }\n \n     /**\n      * @param abs Absolute threshold.\n      */\n     public SimplexOptimizer(double rel, double abs) {\n-        setConvergenceChecker(new SimpleScalarValueChecker(rel, abs));\n+        this(new SimpleScalarValueChecker(rel, abs));\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java\n \n public class SimplexOptimizerMultiDirectionalTest {\n     @Test\n-    public void testMinimizeMaximize() {\n-        // the following function has 4 local extrema:\n-        final double xM        = -3.841947088256863675365;\n-        final double yM        = -1.391745200270734924416;\n-        final double xP        =  0.2286682237349059125691;\n-        final double yP        = -yM;\n-        final double valueXmYm =  0.2373295333134216789769; // local  maximum\n-        final double valueXmYp = -valueXmYm;                // local  minimum\n-        final double valueXpYm = -0.7290400707055187115322; // global minimum\n-        final double valueXpYp = -valueXpYm;                // global maximum\n-        MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {\n-                public double value(double[] variables) {\n-                    final double x = variables[0];\n-                    final double y = variables[1];\n-                    return ((x == 0) || (y == 0)) ? 0 :\n-                        (FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y));\n-                }\n-            };\n-\n+    public void testMinimize1() {\n         SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);\n         optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));\n-        RealPointValuePair optimum;\n-\n-        // minimization\n-        optimum = optimizer.optimize(200, fourExtrema, GoalType.MINIMIZE, new double[] { -3, 0 });\n-        Assert.assertEquals(xM,        optimum.getPoint()[0], 4e-6);\n-        Assert.assertEquals(yP,        optimum.getPoint()[1], 3e-6);\n-        Assert.assertEquals(valueXmYp, optimum.getValue(),    8e-13);\n+        final FourExtrema fourExtrema = new FourExtrema();\n+\n+        final RealPointValuePair optimum\n+            = optimizer.optimize(200, fourExtrema, GoalType.MINIMIZE, new double[] { -3, 0 });\n+        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);\n+        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);\n+        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);\n         Assert.assertTrue(optimizer.getEvaluations() > 120);\n         Assert.assertTrue(optimizer.getEvaluations() < 150);\n-\n-        optimum = optimizer.optimize(200, fourExtrema, GoalType.MINIMIZE, new double[] { 1, 0 });\n-        Assert.assertEquals(xP,        optimum.getPoint()[0], 2e-8);\n-        Assert.assertEquals(yM,        optimum.getPoint()[1], 3e-6);\n-        Assert.assertEquals(valueXpYm, optimum.getValue(),    2e-12);\n+    }\n+\n+    @Test\n+    public void testMinimize2() {\n+        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);\n+        optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));\n+        final FourExtrema fourExtrema = new FourExtrema();\n+\n+        final RealPointValuePair optimum\n+            =  optimizer.optimize(200, fourExtrema, GoalType.MINIMIZE, new double[] { 1, 0 });\n+        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);\n+        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);\n+        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);\n         Assert.assertTrue(optimizer.getEvaluations() > 120);\n         Assert.assertTrue(optimizer.getEvaluations() < 150);\n-\n-        // maximization\n-        optimum = optimizer.optimize(200, fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });\n-        Assert.assertEquals(xM,        optimum.getPoint()[0], 7e-7);\n-        Assert.assertEquals(yM,        optimum.getPoint()[1], 3e-7);\n-        Assert.assertEquals(valueXmYm, optimum.getValue(),    2e-14);\n+    }\n+\n+    @Test\n+    public void testMaximize1() {\n+        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);\n+        optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));\n+        final FourExtrema fourExtrema = new FourExtrema();\n+\n+        final RealPointValuePair optimum\n+            = optimizer.optimize(200, fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });\n+        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);\n+        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);\n+        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);\n         Assert.assertTrue(optimizer.getEvaluations() > 120);\n         Assert.assertTrue(optimizer.getEvaluations() < 150);\n-\n-        optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1e-15, 1e-30));\n-        optimum = optimizer.optimize(200, fourExtrema, GoalType.MAXIMIZE, new double[] { 1, 0 });\n-        Assert.assertEquals(xP,        optimum.getPoint()[0], 2e-8);\n-        Assert.assertEquals(yP,        optimum.getPoint()[1], 3e-6);\n-        Assert.assertEquals(valueXpYp, optimum.getValue(),    2e-12);\n+    }\n+\n+    @Test\n+    public void testMaximize2() {\n+        SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleScalarValueChecker(1e-15, 1e-30));\n+        optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));\n+        final FourExtrema fourExtrema = new FourExtrema();\n+\n+        final RealPointValuePair optimum\n+            = optimizer.optimize(200, fourExtrema, GoalType.MAXIMIZE, new double[] { 1, 0 });\n+        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);\n+        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);\n+        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);\n         Assert.assertTrue(optimizer.getEvaluations() > 180);\n         Assert.assertTrue(optimizer.getEvaluations() < 220);\n     }\n         Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );\n     }\n \n+    private static class FourExtrema implements MultivariateRealFunction {\n+        // The following function has 4 local extrema.\n+        final double xM = -3.841947088256863675365;\n+        final double yM = -1.391745200270734924416;\n+        final double xP =  0.2286682237349059125691;\n+        final double yP = -yM;\n+        final double valueXmYm = 0.2373295333134216789769; // Local maximum.\n+        final double valueXmYp = -valueXmYm; // Local minimum.\n+        final double valueXpYm = -0.7290400707055187115322; // Global minimum.\n+        final double valueXpYp = -valueXpYm; // Global maximum.\n+\n+        public double value(double[] variables) {\n+            final double x = variables[0];\n+            final double y = variables[1];\n+            return (x == 0 || y == 0) ? 0 :\n+                FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y);\n+        }\n+    }\n+\n     private static class Gaussian2D implements MultivariateRealFunction {\n         private final double[] maximumPosition;\n         private final double std;\n--- a/src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.LeastSquaresConverter;\n import org.apache.commons.math.optimization.RealPointValuePair;\n+import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n \n public class SimplexOptimizerNelderMeadTest {\n     @Test\n-    public void testMinimizeMaximize() {\n-\n-        // the following function has 4 local extrema:\n-        final double xM        = -3.841947088256863675365;\n-        final double yM        = -1.391745200270734924416;\n-        final double xP        =  0.2286682237349059125691;\n-        final double yP        = -yM;\n-        final double valueXmYm =  0.2373295333134216789769; // local  maximum\n-        final double valueXmYp = -valueXmYm;                // local  minimum\n-        final double valueXpYm = -0.7290400707055187115322; // global minimum\n-        final double valueXpYp = -valueXpYm;                // global maximum\n-        MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {\n-                public double value(double[] variables) {\n-                    final double x = variables[0];\n-                    final double y = variables[1];\n-                    return (x == 0 || y == 0) ? 0 :\n-                        (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));\n-                }\n-            };\n-\n-        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n-        optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n-        RealPointValuePair optimum;\n-\n-        // minimization\n-        optimum = optimizer.optimize(100, fourExtrema, GoalType.MINIMIZE, new double[] { -3, 0 });\n-        Assert.assertEquals(xM,        optimum.getPoint()[0], 2e-7);\n-        Assert.assertEquals(yP,        optimum.getPoint()[1], 2e-5);\n-        Assert.assertEquals(valueXmYp, optimum.getValue(),    6e-12);\n-        Assert.assertTrue(optimizer.getEvaluations() > 60);\n-        Assert.assertTrue(optimizer.getEvaluations() < 90);\n-\n-        optimum = optimizer.optimize(100, fourExtrema, GoalType.MINIMIZE, new double[] { 1, 0 });\n-        Assert.assertEquals(xP,        optimum.getPoint()[0], 5e-6);\n-        Assert.assertEquals(yM,        optimum.getPoint()[1], 6e-6);\n-        Assert.assertEquals(valueXpYm, optimum.getValue(),    1e-11);\n-        Assert.assertTrue(optimizer.getEvaluations() > 60);\n-        Assert.assertTrue(optimizer.getEvaluations() < 90);\n-\n-        // maximization\n-        optimum = optimizer.optimize(100, fourExtrema, GoalType.MAXIMIZE, new double[] { -3, 0 });\n-        Assert.assertEquals(xM,        optimum.getPoint()[0], 1e-5);\n-        Assert.assertEquals(yM,        optimum.getPoint()[1], 3e-6);\n-        Assert.assertEquals(valueXmYm, optimum.getValue(),    3e-12);\n-        Assert.assertTrue(optimizer.getEvaluations() > 60);\n-        Assert.assertTrue(optimizer.getEvaluations() < 90);\n-\n-        optimum = optimizer.optimize(100, fourExtrema, GoalType.MAXIMIZE, new double[] { 1, 0 });\n-        Assert.assertEquals(xP,        optimum.getPoint()[0], 4e-6);\n-        Assert.assertEquals(yP,        optimum.getPoint()[1], 5e-6);\n-        Assert.assertEquals(valueXpYp, optimum.getValue(),    7e-12);\n+    public void testMinimize1() {\n+        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n+        optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n+        final FourExtrema fourExtrema = new FourExtrema();\n+\n+        final RealPointValuePair optimum\n+            = optimizer.optimize(100, fourExtrema, GoalType.MINIMIZE, new double[] { -3, 0 });\n+        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);\n+        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);\n+        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);\n+        Assert.assertTrue(optimizer.getEvaluations() > 60);\n+        Assert.assertTrue(optimizer.getEvaluations() < 90);\n+    }\n+\n+    @Test\n+    public void testMinimize2() {\n+        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n+        optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n+        final FourExtrema fourExtrema = new FourExtrema();\n+\n+        final RealPointValuePair optimum\n+            = optimizer.optimize(100, fourExtrema, GoalType.MINIMIZE, new double[] { 1, 0 });\n+        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);\n+        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);\n+        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);\n+        Assert.assertTrue(optimizer.getEvaluations() > 60);\n+        Assert.assertTrue(optimizer.getEvaluations() < 90);\n+    }\n+\n+    @Test\n+    public void testMaximize1() {\n+        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n+        optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n+        final FourExtrema fourExtrema = new FourExtrema();\n+\n+        final RealPointValuePair optimum\n+            = optimizer.optimize(100, fourExtrema, GoalType.MAXIMIZE, new double[] { -3, 0 });\n+        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);\n+        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);\n+        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);\n+        Assert.assertTrue(optimizer.getEvaluations() > 60);\n+        Assert.assertTrue(optimizer.getEvaluations() < 90);\n+    }\n+\n+    @Test\n+    public void testMaximize2() {\n+        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n+        optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n+        final FourExtrema fourExtrema = new FourExtrema();\n+\n+        final RealPointValuePair optimum\n+            = optimizer.optimize(100, fourExtrema, GoalType.MAXIMIZE, new double[] { 1, 0 });\n+        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);\n+        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);\n+        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);\n         Assert.assertTrue(optimizer.getEvaluations() > 60);\n         Assert.assertTrue(optimizer.getEvaluations() < 90);\n     }\n         optimizer.optimize(20, powell, GoalType.MINIMIZE, new double[] { 3, -1, 0, 1 });\n     }\n \n+    private static class FourExtrema implements MultivariateRealFunction {\n+        // The following function has 4 local extrema.\n+        final double xM = -3.841947088256863675365;\n+        final double yM = -1.391745200270734924416;\n+        final double xP =  0.2286682237349059125691;\n+        final double yP = -yM;\n+        final double valueXmYm = 0.2373295333134216789769; // Local maximum.\n+        final double valueXmYp = -valueXmYm; // Local minimum.\n+        final double valueXpYm = -0.7290400707055187115322; // Global minimum.\n+        final double valueXpYp = -valueXpYm; // Global maximum.\n+\n+        public double value(double[] variables) {\n+            final double x = variables[0];\n+            final double y = variables[1];\n+            return (x == 0 || y == 0) ? 0 :\n+                FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y);\n+        }\n+    }\n+\n     private static class Rosenbrock implements MultivariateRealFunction {\n         private int count;\n ", "timestamp": 1314920256, "metainfo": ""}