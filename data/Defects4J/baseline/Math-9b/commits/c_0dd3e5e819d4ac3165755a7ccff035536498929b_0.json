{"sha": "0dd3e5e819d4ac3165755a7ccff035536498929b", "log": "Use constructor chaining (in place of duplicate code). Fixed Javadoc typos (expansion factor and contraction criterion default values). Javadoc formatting.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.MathInternalError;\n import org.apache.commons.math3.exception.NullArgumentException;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n \n /**\n     /** Serializable version identifier. */\n     private static final long serialVersionUID = -3485529955529426875L;\n \n+    /** Default value for initial capacity. */\n+    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n+    /** Default value for initial capacity. */\n+    private static final float DEFAULT_EXPANSION_FACTOR = 2.0f;\n+\n     /**\n      * The contraction criteria determines when the internal array will be\n      * contracted to fit the number of elements contained in the element\n     }\n \n     /**\n-     * Create a ResizableArray with default properties.\n+     * Creates an instance with default properties.\n      * <ul>\n-     * <li><code>initialCapacity = 16</code></li>\n-     * <li><code>expansionMode = MULTIPLICATIVE_MODE</code></li>\n-     * <li><code>expansionFactor = 2.5</code></li>\n-     * <li><code>contractionFactor = 2.0</code></li>\n+     *  <li>{@code initialCapacity = 16}</li>\n+     *  <li>{@code expansionMode = MULTIPLICATIVE}</li>\n+     *  <li>{@code expansionFactor = 2.0}</li>\n+     *  <li>{@code contractionFactor = 2.5}</li>\n      * </ul>\n      */\n-    public ResizableDoubleArray() {\n-        internalArray = new double[initialCapacity];\n-    }\n-\n-    /**\n-     * Create a ResizableArray with the specified initial capacity.  Other\n-     * properties take default values:\n-      * <ul>\n-     * <li><code>expansionMode = MULTIPLICATIVE_MODE</code></li>\n-     * <li><code>expansionFactor = 2.5</code></li>\n-     * <li><code>contractionFactor = 2.0</code></li>\n+    public ResizableDoubleArray()\n+        throws MathIllegalArgumentException {\n+        this(DEFAULT_INITIAL_CAPACITY);\n+    }\n+\n+    /**\n+     * Creates an instance with the specified initial capacity.\n+     * Other properties take default values:\n+     * <ul>\n+     *  <li>{@code expansionMode = MULTIPLICATIVE}</li>\n+     *  <li>{@code expansionFactor = 2.0}</li>\n+     *  <li>{@code contractionFactor = 2.5}</li>\n      * </ul>\n-     * @param initialCapacity The initial size of the internal storage array\n-     * @throws MathIllegalArgumentException if initialCapacity is not > 0\n-     */\n-    public ResizableDoubleArray(int initialCapacity) throws MathIllegalArgumentException {\n-        setInitialCapacity(initialCapacity);\n-        internalArray = new double[this.initialCapacity];\n-    }\n-\n-    /**\n-     * Create a ResizableArray from an existing double[] with the\n+     * @param initialCapacity Initial size of the internal storage array.\n+     * @throws MathIllegalArgumentException if {@code initialCapacity <= 0}.\n+     */\n+    public ResizableDoubleArray(int initialCapacity)\n+        throws MathIllegalArgumentException {\n+        this(initialCapacity, DEFAULT_EXPANSION_FACTOR);\n+    }\n+\n+    /**\n+     * Creates an instance from an existing {@code double[]} with the\n      * initial capacity and numElements corresponding to the size of\n-     * the supplied double[] array. If the supplied array is null, a\n-     * new empty array with the default initial capacity will be created.\n+     * the supplied {@code double[]} array.\n+     * If the supplied array is null, a new empty array with the default\n+     * initial capacity will be created.\n      * The input array is copied, not referenced.\n      * Other properties take default values:\n      * <ul>\n-     * <li><code>initialCapacity = 16</code></li>\n-     * <li><code>expansionMode = MULTIPLICATIVE_MODE</code></li>\n-     * <li><code>expansionFactor = 2.5</code></li>\n-     * <li><code>contractionFactor = 2.0</code></li>\n+     *  <li>{@code initialCapacity = 16}</li>\n+     *  <li>{@code expansionMode = MULTIPLICATIVE}</li>\n+     *  <li>{@code expansionFactor = 2.0}</li>\n+     *  <li>{@code contractionFactor = 2.5}</li>\n      * </ul>\n      *\n      * @param initialArray initial array\n      * @since 2.2\n      */\n     public ResizableDoubleArray(double[] initialArray) {\n-        if (initialArray == null) {\n-            this.internalArray = new double[initialCapacity];\n-        } else {\n-            this.internalArray = new double[initialArray.length];\n-            System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);\n-            initialCapacity = initialArray.length;\n-            numElements = initialArray.length;\n-        }\n-    }\n-\n-    /**\n-     * <p>\n-     * Create a ResizableArray with the specified initial capacity\n-     * and expansion factor.  The remaining properties take default\n-     * values:\n+        this(DEFAULT_INITIAL_CAPACITY,\n+             DEFAULT_EXPANSION_FACTOR,\n+             0.5f + DEFAULT_EXPANSION_FACTOR,\n+             ExpansionMode.MULTIPLICATIVE,\n+             initialArray);\n+    }\n+\n+    /**\n+     * Creates an instance with the specified initial capacity\n+     * and expansion factor.\n+     * The remaining properties take default values:\n      * <ul>\n-     * <li><code>expansionMode = MULTIPLICATIVE_MODE</code></li>\n-     * <li><code>contractionFactor = 0.5 + expansionFactor</code></li>\n-     * </ul></p>\n-     * <p>\n+     *  <li>{@code expansionMode = MULTIPLICATIVE}</li>\n+     *  <li>{@code contractionFactor = 0.5 + expansionFactor}</li>\n+     * </ul>\n+     * <br/>\n      * Throws IllegalArgumentException if the following conditions are\n      * not met:\n      * <ul>\n-     * <li><code>initialCapacity > 0</code></li>\n-     * <li><code>expansionFactor > 1</code></li>\n-     * </ul></p>\n-     *\n-     * @param initialCapacity The initial size of the internal storage array\n-     * @param expansionFactor the array will be expanded based on this\n-     *                        parameter\n-     * @throws MathIllegalArgumentException if parameters are not valid\n-     */\n-    public ResizableDoubleArray(int initialCapacity, float expansionFactor) throws MathIllegalArgumentException {\n-        this.expansionFactor = expansionFactor;\n-        setInitialCapacity(initialCapacity);\n-        internalArray = new double[initialCapacity];\n-        setContractionCriteria(expansionFactor +0.5f);\n-    }\n-\n-    /**\n-     * <p>\n-     * Create a ResizableArray with the specified initialCapacity,\n-     * expansionFactor, and contractionCriteria. The <code>expansionMode</code>\n-     * will default to <code>MULTIPLICATIVE_MODE.</code></p>\n-     * <p>\n+     *  <li>{@code initialCapacity > 0}</li>\n+     *  <li>{@code expansionFactor > 1}</li>\n+     * </ul>\n+     *\n+     * @param initialCapacity Initial size of the internal storage array.\n+     * @param expansionFactor The array will be expanded based on this\n+     * parameter.\n+     * @throws MathIllegalArgumentException if parameters are not valid.\n+     */\n+    public ResizableDoubleArray(int initialCapacity,\n+                                float expansionFactor)\n+        throws MathIllegalArgumentException {\n+        this(initialCapacity,\n+             expansionFactor,\n+             0.5f + expansionFactor);\n+    }\n+\n+    /**\n+     * Creates an instance with the specified initialCapacity,\n+     * expansionFactor, and contractionCriteria.\n+     * The expansion mode will default to {@code MULTIPLICATIVE}.\n+     * <br/>\n      * Throws IllegalArgumentException if the following conditions are\n      * not met:\n      * <ul>\n-     * <li><code>initialCapacity > 0</code></li>\n-     * <li><code>expansionFactor > 1</code></li>\n-     * <li><code>contractionFactor >= expansionFactor</code></li>\n-     * </ul></p>\n-     * @param initialCapacity The initial size of the internal storage array\n-     * @param expansionFactor the array will be expanded based on this\n-     *                        parameter\n-     * @param contractionCriteria The contraction Criteria.\n-     * @throws MathIllegalArgumentException if parameters are not valid\n-     */\n-    public ResizableDoubleArray(int initialCapacity, float expansionFactor,\n-        float contractionCriteria) throws MathIllegalArgumentException {\n-        this.expansionFactor = expansionFactor;\n-        setContractionCriteria(contractionCriteria);\n-        setInitialCapacity(initialCapacity);\n-        internalArray = new double[initialCapacity];\n+     *  <li>{@code initialCapacity > 0}</li>\n+     *  <li>{@code expansionFactor > 1}</li>\n+     *  <li>{@code contractionFactor >= expansionFactor}</li>\n+     * </ul>\n+     *\n+     * @param initialCapacity Initial size of the internal storage array..\n+     * @param expansionFactor The array will be expanded based on this\n+     * parameter.\n+     * @param contractionCriteria Contraction criteria.\n+     * @throws MathIllegalArgumentException if parameters are not valid.\n+     */\n+    public ResizableDoubleArray(int initialCapacity,\n+                                float expansionFactor,\n+                                float contractionCriteria)\n+        throws MathIllegalArgumentException {\n+        this(initialCapacity,\n+             expansionFactor,\n+             contractionCriteria,\n+             ExpansionMode.MULTIPLICATIVE,\n+             null);\n     }\n \n     /**\n     }\n \n     /**\n-     * Create a ResizableArray with the specified properties.\n+     * Creates an instance with the specified properties.\n      * <br/>\n      * Throws MathIllegalArgumentException if the following conditions are\n      * not met:\n      * @param contractionCriteria Contraction criteria.\n      * @param expansionMode Expansion mode.\n      * @param data Initial contents of the array.\n-     * @throws MathIllegalArgumentException if parameters are not valid.\n+     * @throws MathIllegalArgumentException if the parameters are not valid.\n      */\n     public ResizableDoubleArray(int initialCapacity,\n                                 float expansionFactor,\n                                 ExpansionMode expansionMode,\n                                 double ... data)\n         throws MathIllegalArgumentException {\n-\n-        setExpansionFactor(expansionFactor);\n-        setContractionCriteria(contractionCriteria);\n-        setExpansionMode(expansionMode);\n-        setInitialCapacity(initialCapacity);\n+        if (initialCapacity <= 0) {\n+            throw new NotStrictlyPositiveException(LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE,\n+                                                   initialCapacity);\n+        }\n+        checkContractExpand(contractionCriteria, expansionFactor);\n+\n+        this.expansionFactor = expansionFactor;\n+        this.contractionCriteria = contractionCriteria;\n+        this.expansionMode = expansionMode;\n+        this.initialCapacity = initialCapacity;\n         internalArray = new double[initialCapacity];\n         numElements = 0;\n         startIndex = 0;", "timestamp": 1352825593, "metainfo": ""}