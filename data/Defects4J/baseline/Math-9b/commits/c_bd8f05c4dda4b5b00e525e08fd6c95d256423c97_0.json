{"sha": "bd8f05c4dda4b5b00e525e08fd6c95d256423c97", "log": "fixed detection of not positive definite matrices JIRA: MATH-274  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n \n             final double[] lI = lTData[i];\n \n-            // check diagonal element\n-            if (lTData[i][i] < absolutePositivityThreshold) {\n-                throw new NotPositiveDefiniteMatrixException();\n-            }\n-\n             // check off-diagonal elements (and reset them to 0)\n             for (int j = i + 1; j < order; ++j) {\n                 final double[] lJ = lTData[j];\n         for (int i = 0; i < order; ++i) {\n \n             final double[] ltI = lTData[i];\n+\n+            // check diagonal element\n+            if (ltI[i] < absolutePositivityThreshold) {\n+                throw new NotPositiveDefiniteMatrixException();\n+            }\n+\n             ltI[i] = Math.sqrt(ltI[i]);\n             final double inverse = 1.0 / ltI[i];\n \n--- a/src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java\n \n package org.apache.commons.math.linear;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.linear.CholeskyDecomposition;\n import org.apache.commons.math.linear.CholeskyDecompositionImpl;\n import org.apache.commons.math.linear.NotPositiveDefiniteMatrixException;\n import org.apache.commons.math.linear.NotSymmetricMatrixException;\n import org.apache.commons.math.linear.RealMatrix;\n+import org.junit.Test;\n \n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n-public class CholeskyDecompositionImplTest extends TestCase {\n+public class CholeskyDecompositionImplTest {\n \n     private double[][] testData = new double[][] {\n             {  1,  2,   4,   7,  11 },\n             { 11, 58, 182, 430, 855 }\n     };\n \n-    public CholeskyDecompositionImplTest(String name) {\n-        super(name);\n-    }\n-\n-    public static Test suite() {\n-        TestSuite suite = new TestSuite(CholeskyDecompositionImplTest.class);\n-        suite.setName(\"CholeskyDecompositionImpl Tests\");\n-        return suite;\n-    }\n-\n     /** test dimensions */\n+    @Test\n     public void testDimensions() throws MathException {\n         CholeskyDecomposition llt =\n             new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData));\n     }\n \n     /** test non-square matrix */\n-    public void testNonSquare() {\n-        try {\n-            new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));\n-        } catch (NonSquareMatrixException ime) {\n-            // expected behavior\n-        } catch (Exception e) {\n-            fail(\"wrong exception caught\");\n-        }\n+    @Test(expected = NonSquareMatrixException.class)\n+    public void testNonSquare() throws MathException {\n+        new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));\n     }\n \n     /** test non-symmetric matrix */\n-    public void testNotSymmetricMatrixException() {\n-        try {\n-            double[][] changed = testData.clone();\n-            changed[0][changed[0].length - 1] += 1.0e-5;\n-            new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(changed));\n-        } catch (NotSymmetricMatrixException e) {\n-            // expected behavior\n-        } catch (Exception e) {\n-            fail(\"wrong exception caught\");\n-        }\n+    @Test(expected = NotSymmetricMatrixException.class)\n+    public void testNotSymmetricMatrixException() throws MathException {\n+        double[][] changed = testData.clone();\n+        changed[0][changed[0].length - 1] += 1.0e-5;\n+        new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(changed));\n     }\n \n     /** test non positive definite matrix */\n-    public void testNotPositiveDefinite() {\n-        try {\n-            new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {\n-                    { 14, 11, 13, 15, 24 },\n-                    { 11, 34, 13, 8,  25 },\n-                    { 13, 13, 14, 15, 21 },\n-                    { 15, 8,  15, 18, 23 },\n-                    { 24, 25, 21, 23, 45 }\n-            }));\n-        } catch (NotPositiveDefiniteMatrixException e) {\n-            // expected behavior\n-        } catch (Exception e) {\n-            fail(\"wrong exception caught\");\n-        }\n+    @Test(expected = NotPositiveDefiniteMatrixException.class)\n+    public void testNotPositiveDefinite() throws MathException {\n+        CholeskyDecomposition cd = new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {\n+                { 14, 11, 13, 15, 24 },\n+                { 11, 34, 13, 8,  25 },\n+                { 13, 13, 14, 15, 21 },\n+                { 15, 8,  15, 18, 23 },\n+                { 24, 25, 21, 23, 45 }\n+        }));\n+        System.out.println(cd.getL().multiply(cd.getLT()));\n+    }\n+\n+    @Test(expected = NotPositiveDefiniteMatrixException.class)\n+    public void testMath274() throws MathException {\n+        new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {\n+                { 0.40434286, -0.09376327, 0.30328980, 0.04909388 },\n+                {-0.09376327,  0.10400408, 0.07137959, 0.04762857 },\n+                { 0.30328980,  0.07137959, 0.30458776, 0.04882449 },\n+                { 0.04909388,  0.04762857, 0.04882449, 0.07543265 }\n+            \n+        }));\n     }\n \n     /** test A = LLT */\n+    @Test\n     public void testAEqualLLT() throws MathException {\n         RealMatrix matrix = MatrixUtils.createRealMatrix(testData);\n         CholeskyDecomposition llt = new CholeskyDecompositionImpl(matrix);\n     }\n \n     /** test that L is lower triangular */\n+    @Test\n     public void testLLowerTriangular() throws MathException {\n         RealMatrix matrix = MatrixUtils.createRealMatrix(testData);\n         RealMatrix l = new CholeskyDecompositionImpl(matrix).getL();\n         for (int i = 0; i < l.getRowDimension(); i++) {\n             for (int j = i + 1; j < l.getColumnDimension(); j++) {\n-                assertEquals(0.0, l.getEntry(i, j));\n+                assertEquals(0.0, l.getEntry(i, j), 0.0);\n             }\n         }\n     }\n \n     /** test that LT is transpose of L */\n+    @Test\n     public void testLTTransposed() throws MathException {\n         RealMatrix matrix = MatrixUtils.createRealMatrix(testData);\n         CholeskyDecomposition llt = new CholeskyDecompositionImpl(matrix);\n     }\n \n     /** test matrices values */\n+    @Test\n     public void testMatricesValues() throws MathException {\n         RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] {\n                 {  1,  0,  0,  0,  0 },", "timestamp": 1244146049, "metainfo": ""}