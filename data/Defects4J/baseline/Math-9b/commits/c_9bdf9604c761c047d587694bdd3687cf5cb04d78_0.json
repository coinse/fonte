{"sha": "9bdf9604c761c047d587694bdd3687cf5cb04d78", "log": "Added Serialization Interface to all Implementations   ", "commit": "\n--- a/src/java/org/apache/commons/math/ConvergenceException.java\n+++ b/src/java/org/apache/commons/math/ConvergenceException.java\n  */\n package org.apache.commons.math;\n \n+import java.io.Serializable;\n+\n /**\n  * Error thrown when a numerical computation can not be performed because the\n  * numerical result failed to converge to a finite value.\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/19 03:28:25 $\n  */\n-public class ConvergenceException extends MathException {\n+public class ConvergenceException extends MathException implements Serializable{\n     /**\n      * Default constructor.\n      */\n--- a/src/java/org/apache/commons/math/MathConfigurationException.java\n+++ b/src/java/org/apache/commons/math/MathConfigurationException.java\n  */\n package org.apache.commons.math;\n \n+import java.io.Serializable;\n+\n /**\n  * Signals a configuration problem with any of the factory methods.\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:25 $\n  */\n-public class MathConfigurationException extends MathException {\n+public class MathConfigurationException extends MathException implements Serializable {\n \n     /**\n      * Default constructor.\n--- a/src/java/org/apache/commons/math/MathException.java\n+++ b/src/java/org/apache/commons/math/MathException.java\n  */\n package org.apache.commons.math;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.lang.exception.NestableException;\n \n /**\n  * A generic exception indicating problems in the math package.\n- * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.11 $ $Date: 2003/11/19 03:28:25 $\n  */\n-public class MathException extends NestableException {\n+public class MathException extends NestableException implements Serializable {\n \n     /**\n      * Constructs a MathException\n--- a/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n  */\n package org.apache.commons.math.analysis;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.MathException;\n \n /**\n  * Provide the bisection algorithm for solving for zeros of real univariate\n  * functions.  It will only search for one zero in the given interval.  The\n  * function is supposed to be continuous but not necessarily smooth.\n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/19 03:28:23 $\n  */\n-public class BisectionSolver extends UnivariateRealSolverImpl {\n+public class BisectionSolver extends UnivariateRealSolverImpl implements Serializable {\n     /**\n      * Construct a solver for the given function.\n      * @param f function to solve.\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n  */\n package org.apache.commons.math.analysis;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.MathException;\n \n /**\n  * It will only search for one zero in the given interval.\n  * The function is supposed to be continuous but not necessarily smooth.\n  *  \n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/19 03:28:23 $\n  */\n-public class BrentSolver extends UnivariateRealSolverImpl {\n+public class BrentSolver extends UnivariateRealSolverImpl implements Serializable {\n     /**\n      * Construct a solver for the given function.\n      * @param f function to solve.\n--- a/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java\n  */\n package org.apache.commons.math.analysis;\n \n+import java.io.Serializable;\n import java.util.Arrays;\n \n import org.apache.commons.math.MathException;\n  * polynominal coefficents are used.\n  * Arguments outside of the domain cause an IllegalArgumentException.\n  * \n- * @version $Revision: 1.8 $ $Date: 2003/11/15 18:44:52 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/19 03:28:23 $\n  */\n-public class CubicSplineFunction implements UnivariateRealFunction {\n+public class CubicSplineFunction implements UnivariateRealFunction, Serializable {\n     /** Spline segment interval delimiters. Size is N+1 for N segments. */\n     private double xval[];\n \n--- a/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n \n \n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.MathException;\n \n /**\n  * polynominal coefficents are used.\n  * Arguments outside of the domain cause an IllegalArgumentException.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/11/15 18:44:52 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/19 03:28:23 $\n  */\n-public class PolynomialFunction implements UnivariateRealFunction {\n+public class PolynomialFunction implements UnivariateRealFunction, Serializable {\n \n     /**\n      * The polynominal coefficients.\n--- a/src/java/org/apache/commons/math/analysis/SecantSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/SecantSolver.java\n  */\n package org.apache.commons.math.analysis;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.MathException;\n \n /**\n  * It will only search for one zero in the given interval.\n  * The function is supposed to be continuous but not necessarily smooth.\n  *  \n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/19 03:28:23 $\n  */\n-public class SecantSolver extends UnivariateRealSolverImpl {\n+public class SecantSolver extends UnivariateRealSolverImpl implements Serializable {\n     /**\n      * Construct a solver for the given function.\n      * @param f function to solve.\n--- a/src/java/org/apache/commons/math/analysis/SplineInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/SplineInterpolator.java\n  */\n package org.apache.commons.math.analysis;\n \n+import java.io.Serializable;\n+\n /**\n  * Computes a natural spline interpolation for the data set.\n  *\n- * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/19 03:28:23 $\n  *\n  */\n-public class SplineInterpolator implements UnivariateRealInterpolator {\n+public class SplineInterpolator implements UnivariateRealInterpolator, Serializable {\n     /** the natural spline coefficients. */\n     private double[][] c = null;\n \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\n  */\n package org.apache.commons.math.analysis;\n \n+import java.io.Serializable;\n+\n \n /**\n  * A factory to easily get a default solver and some convenience\n  * (this may be controversial, because the configuration data\n  * may also be used for the default solver used by the static\n  * solve() method). \n- * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:18 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/19 03:28:23 $\n  */\n public class UnivariateRealSolverFactoryImpl\n-    extends UnivariateRealSolverFactory {\n+    extends UnivariateRealSolverFactory implements Serializable {\n         \n     /**\n      * Default constructor.\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n \n package org.apache.commons.math.analysis;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.MathException;\n \n /**\n  * Provide a default implementation for several functions useful to generic\n  * solvers.\n  *  \n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/19 03:28:23 $\n  */\n public abstract class UnivariateRealSolverImpl\n-    implements UnivariateRealSolver {\n+    implements UnivariateRealSolver, Serializable {\n \n     /** Maximum absolute error. */\n     protected double absoluteAccuracy;\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n \n package org.apache.commons.math.complex;\n \n+import java.io.Serializable;\n+\n /**\n  * Reference:\n  *   http://myweb.lmu.edu/dmsmith/ZMLIB.pdf\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/19 03:28:25 $\n  */\n-public class Complex {\n+public class Complex implements Serializable  {\n \n     /** The square root of -1. */    \n     public static final Complex I = new Complex(0.0, 1.0);\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n  *    entry per line.</li>\n  * </ol></p>\n  *\n- * @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:37 $\n+ * @version $Revision: 1.11 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class EmpiricalDistributionImpl implements Serializable,EmpiricalDistribution {\n+public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n     \n     /** List of DescriptiveStatistics objects characterizing the bins */\n--- a/src/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/java/org/apache/commons/math/random/RandomDataImpl.java\n \n package org.apache.commons.math.random;\n \n+import java.io.Serializable;\n import java.security.MessageDigest;\n import java.security.SecureRandom;\n import java.security.NoSuchAlgorithmException;\n  * (so secure sequences started with calls to reseedSecure(long) won't be \n  * identical).</li></ul>\n  * \n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class RandomDataImpl implements RandomData {\n+public class RandomDataImpl implements RandomData, Serializable {\n     \n     /** underlying random number generator */\n     private Random rand = null;\n--- a/src/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/java/org/apache/commons/math/random/ValueServer.java\n import java.io.BufferedReader;\n import java.io.FileReader;\n import java.io.File;\n+import java.io.Serializable;\n import java.net.URL;\n import java.io.IOException;\n import java.net.MalformedURLException;\n  *                       standard deviation = <code>sigma</code></li>\n  * <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul> \n  *\n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:21 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/19 03:28:24 $\n  *\n  */\n-public class ValueServer {\n+public class ValueServer implements Serializable {\n     /** mode determines how values are generated */\n     private int mode = 5;\n     \n--- a/src/java/org/apache/commons/math/special/Beta.java\n+++ b/src/java/org/apache/commons/math/special/Beta.java\n  */\n package org.apache.commons.math.special;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.util.ContinuedFraction;\n \n  * This is a utility class that provides computation methods related to the\n  * Beta family of functions.\n  * \n- * @version $Revision: 1.13 $ $Date: 2003/11/18 15:07:12 $\n+ * @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:25 $\n  */\n-public class Beta {\n+public class Beta implements Serializable {\n     /** Maximum allowed numerical error. */\n     private static final double DEFAULT_EPSILON = 10e-9;\n \n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n  */\n package org.apache.commons.math.special;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MathException;\n \n  * This is a utility class that provides computation methods related to the\n  * Gamma family of functions.\n  * \n- * @version $Revision: 1.14 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.15 $ $Date: 2003/11/19 03:28:25 $\n  */\n-public class Gamma {\n+public class Gamma implements Serializable{\n     /** Maximum allowed numerical error. */\n     private static final double DEFAULT_EPSILON = 10e-9;\n \n--- a/src/java/org/apache/commons/math/stat/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/DescriptiveStatistics.java\n  */\n package org.apache.commons.math.stat;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.discovery.tools.DiscoverClass;\n \n /**\n  * Univariate provides additional percentile functionality \n  * such as.  This additional functionality comes with \n  * a price of increased storage costs.\n- * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:38 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/19 03:28:23 $\n  */\n-public abstract class DescriptiveStatistics {\n+public abstract class DescriptiveStatistics implements Serializable{\n \n \t/**\n \t * Create an instance of a <code>DescriptiveStatistics</code>\n--- a/src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java\n  */\n package org.apache.commons.math.stat;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.stat.univariate.*;\n import org.apache.commons.math.util.ContractableDoubleArray;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:38 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/19 03:28:23 $\n  */\n-public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics {\n+public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics implements Serializable {\n \n     /** A contractable double array is used.  memory is reclaimed when \n      * the storage of the array becomes too empty.\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n  */\n package org.apache.commons.math.stat;\n \n+import java.io.Serializable;\n import java.util.Iterator;\n \n import org.apache.commons.collections.Bag;\n  * Accepts int, long or string values, converting\n  * all to Strings and maintaining frequency counts.\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/19 03:28:23 $\n  */\n-public class Frequency {\n+public class Frequency implements Serializable{\n+    \n     /** name for this frequency distribution. */\n     private String name;\n \n--- a/src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java\n  * Integers, floats and longs can be added, but they will be converted\n  * to doubles by addValue().\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:38 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/19 03:28:23 $\n */\n-public class StorelessDescriptiveStatisticsImpl\n-\textends AbstractStorelessDescriptiveStatistics\n-\timplements Serializable {\n+public class StorelessDescriptiveStatisticsImpl extends AbstractStorelessDescriptiveStatistics implements Serializable {\n \n \t/** fixed storage */\n \tprivate FixedDoubleArray storage = null;\n--- a/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n  * implemented using it. If a Statistic cannot be implemented in a Storeless\n  * approach it should implement the UnivariateStatistic interface directly\n  * instead.\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:25 $\n  */\n public interface StorelessUnivariateStatistic extends UnivariateStatistic {\n \n      */\n     double getResult();\n \n+    /**\n+     * Returns the current state of the statistic after the\n+     * last increment.\n+     * @return value of the statistic, Double.NaN if it\n+     * has been cleared or just instantiated.\n+     */\n+    double getN();\n \n     /**\n      * Clears all the internal state of the Statistic\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n  * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n  * recursive strategy\n  * </a>. Both incremental and evaluation strategies currently use this approach.\n- * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:20 $\n+ * @version $Revision: 1.11 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class FirstMoment extends AbstractStorelessUnivariateStatistic {\n+public class FirstMoment extends AbstractStorelessUnivariateStatistic implements Serializable{\n \n+    static final long serialVersionUID = -803343206421984070L;    \n+    \n     /** count of values that have been added */\n     protected int n = 0;\n \n         return m1;\n     }\n \n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n+     */\n+    public double getN() {\n+        return n;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n+import java.io.Serializable;\n+\n /**\n  * The FourthMoment is calculated using the following\n  * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n  * recursive strategy\n  * </a>. Both incremental and evaluation strategies currently use this approach.\n- * @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:20 $\n+ * @version $Revision: 1.13 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class FourthMoment extends ThirdMoment {\n+public class FourthMoment extends ThirdMoment implements Serializable{\n \n+    static final long serialVersionUID = 4763990447117157611L;\n+        \n     /** fourth moment of values that have been added */\n     protected double m4 = Double.NaN;\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.stat.univariate.summary.SumOfLogs;\n \n /**\n  * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n  * geometric mean </a> of the available values\n- * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $\n+ * @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class GeometricMean extends SumOfLogs {\n+public class GeometricMean extends SumOfLogs implements Serializable{\n \n+    static final long serialVersionUID = -8178734905303459453L;  \n+      \n     /** */\n     protected int n = 0;\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n+import java.io.Serializable;\n+\n import org\n     .apache\n     .commons\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $\n+ * @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class Kurtosis extends AbstractStorelessUnivariateStatistic {\n-\n+public class Kurtosis extends AbstractStorelessUnivariateStatistic implements Serializable {\n+\n+    static final long serialVersionUID = 2784465764798260919L;  \n+      \n     /** */\n     protected FourthMoment moment = null;\n \n         n = 0;\n     }\n \n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n+     */\n+    public double getN() {\n+        return moment.getN();\n+    }\n+    \n     /*UnvariateStatistic Approach */\n \n     /** */\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n+import java.io.Serializable;\n+\n import org\n     .apache\n     .commons\n /**\n  * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n  * arithmetic mean </a> of the available values.\n- * @version $Revision: 1.12 $ $Date: 2003/11/14 22:22:20 $\n+ * @version $Revision: 1.13 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class Mean extends AbstractStorelessUnivariateStatistic {\n+public class Mean extends AbstractStorelessUnivariateStatistic implements Serializable{\n \n+    static final long serialVersionUID = -1296043746617791564L;    \n+    \n     /** first moment of values that have been added */\n     protected FirstMoment moment = null;\n \n         return moment.m1;\n     }\n \n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n+     */\n+    public double getN() {\n+        return moment.getN();\n+    }\n+    \n     /*UnvariateStatistic Approach */\n \n     /** */\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n+import java.io.Serializable;\n+\n /**\n  * The SecondMoment is calculated using the following\n  * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n  * recursive strategy\n  * </a>. Both incremental and evaluation strategies currently use this approach.\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:20 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class SecondMoment extends FirstMoment {\n+public class SecondMoment extends FirstMoment implements Serializable {\n \n+    static final long serialVersionUID = 3942403127395076445L;  \n+      \n     /** second moment of values that have been added */\n     protected double m2 = Double.NaN;\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $\n+ * @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class Skewness extends AbstractStorelessUnivariateStatistic {\n-\n+public class Skewness extends AbstractStorelessUnivariateStatistic implements Serializable {\n+\n+    static final long serialVersionUID = 7101857578996691352L;    \n+    \n     /** */\n     protected ThirdMoment moment = null;\n \n         return skewness;\n     }\n \n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n+     */\n+    public double getN() {\n+        return moment.getN();\n+    }\n+    \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n+import java.io.Serializable;\n+\n /**\n  *\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:20 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class StandardDeviation extends Variance {\n+public class StandardDeviation extends Variance implements Serializable {\n \n+    static final long serialVersionUID = 5728716329662425188L;    \n+    \n     /** */\n     protected double std = Double.NaN;\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n+import java.io.Serializable;\n+\n /**\n  * The ThirdMoment (arithmentic mean) is calculated using the following\n  * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n  * recursive strategy\n  * </a>. Both incremental and evaluation strategies currently use this approach.\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:20 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class ThirdMoment extends SecondMoment {\n+public class ThirdMoment extends SecondMoment implements Serializable {\n \n+    static final long serialVersionUID = -7818711964045118679L;  \n+      \n     /** third moment of values that have been added */\n     protected double m3 = Double.NaN;\n \n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n  *\n- * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:20 $\n+ * @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class Variance extends AbstractStorelessUnivariateStatistic {\n+public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n+    static final long serialVersionUID = -9111962718267217978L;  \n+      \n     /** SecondMoment is used in incremental calculation of Variance*/\n     protected SecondMoment moment = null;\n \n     }\n \n     /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n+     */\n+    public double getN() {\n+        return moment.getN();\n+    }\n+    \n+    /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n      */\n     public void clear() {\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n  */\n package org.apache.commons.math.stat.univariate.rank;\n \n+import java.io.Serializable;\n+\n import org\n     .apache\n     .commons\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class Max extends AbstractStorelessUnivariateStatistic {\n+public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n+    static final long serialVersionUID = -5593383832225844641L;    \n+    \n+    /** */\n+    private int n = 0;\n+        \n     /** */\n     private double value = Double.NaN;\n \n      */\n     public void increment(final double d) {\n         value = Double.isNaN(value) ? d : Math.max(value, d);\n+        n++;\n     }\n \n     /**\n          */\n     public void clear() {\n         value = Double.NaN;\n+        n = 0;\n     }\n \n     /**\n         return value;\n     }\n \n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n+     */\n+    public double getN() {\n+        return n;\n+    }\n+    \n     /**\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Median.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Median.java\n  */\n package org.apache.commons.math.stat.univariate.rank;\n \n+import java.io.Serializable;\n+\n \n /**\n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:21 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class Median extends Percentile {\n+public class Median extends Percentile implements Serializable {\n+\n+    static final long serialVersionUID = -3961477041290915687L;    \n \n     /**\n      *\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n  */\n package org.apache.commons.math.stat.univariate.rank;\n \n+import java.io.Serializable;\n+\n import org\n     .apache\n     .commons\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class Min extends AbstractStorelessUnivariateStatistic {\n+public class Min extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n+    static final long serialVersionUID = -2941995784909003131L;  \n+      \n+    /** */\n+    private int n = 0;\n+    \n     /** */\n     private double value = Double.NaN;\n \n      */\n     public void increment(final double d) {\n         value = Double.isNaN(value) ? d : Math.min(value, d);\n+        n++;\n     }\n \n     /**\n      */\n     public void clear() {\n         value = Double.NaN;\n+        n = 0;\n     }\n \n     /**\n         return value;\n     }\n \n+    /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n+     */\n+    public double getN() {\n+        return n;\n+    }\n+    \n     /**\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n  */\n package org.apache.commons.math.stat.univariate.rank;\n \n+import java.io.Serializable;\n import java.util.Arrays;\n import org.apache.commons.math.stat.univariate.AbstractUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:21 $\n+ * @version $Revision: 1.11 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class Percentile extends AbstractUnivariateStatistic {\n+public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n \n+    static final long serialVersionUID = -8091216485095130416L; \n+       \n     /** */\n     private double percentile = 0.0;\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n  */\n package org.apache.commons.math.stat.univariate.summary;\n \n+import java.io.Serializable;\n+\n import org\n     .apache\n     .commons\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:23 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class Product extends AbstractStorelessUnivariateStatistic {\n+public class Product extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n+    static final long serialVersionUID = 2824226005990582538L;   \n+     \n+    /** */\n+    private int n = 0;\n+    \n     /**\n      * The current Running Product.\n      */\n         } else {\n             value *= d;\n         }\n+        n++;\n     }\n \n     /**\n     }\n \n     /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n+     */\n+    public double getN() {\n+        return n;\n+    }\n+    \n+    /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n      */\n     public void clear() {\n         value = Double.NaN;\n+        n = 0;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n  */\n package org.apache.commons.math.stat.univariate.summary;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:23 $\n+ * @version $Revision: 1.14 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class Sum extends AbstractStorelessUnivariateStatistic {\n+public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n+    static final long serialVersionUID = -8231831954703408316L;  \n+      \n+    /** */\n+    private int n = 0;\n+    \n     /**\n      * The currently running sum.\n      */\n         } else {\n             value += d;\n         }\n+        n++;\n     }\n \n     /**\n     }\n \n     /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n+     */\n+    public double getN() {\n+        return n;\n+    }\n+    \n+    /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n      */\n     public void clear() {\n         value = Double.NaN;\n+        n = 0;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n  */\n package org.apache.commons.math.stat.univariate.summary;\n \n+import java.io.Serializable;\n+\n import org\n     .apache\n     .commons\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:23 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class SumOfLogs extends AbstractStorelessUnivariateStatistic {\n+public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n+    static final long serialVersionUID = -370076995648386763L;    \n+\n+    /** */\n+    private int n = 0;\n+    \n     /**\n      * The currently running value\n      */\n         } else {\n             value += Math.log(d);\n         }\n+        n++;\n     }\n \n     /**\n     }\n \n     /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n+     */\n+    public double getN() {\n+        return n;\n+    }\n+    \n+    /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n      */\n     public void clear() {\n         value = Double.NaN;\n         init = true;\n+        n = 0;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n  */\n package org.apache.commons.math.stat.univariate.summary;\n \n+import java.io.Serializable;\n+\n import org\n     .apache\n     .commons\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:23 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class SumOfSquares extends AbstractStorelessUnivariateStatistic {\n+public class SumOfSquares extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n+    static final long serialVersionUID = 1460986908574398008L;  \n+      \n+    /** */\n+    private int n = 0;\n+    \n     /**\n      * The currently running sumSq\n      */\n         } else {\n             value += d * d;\n         }\n+        n++;\n     }\n \n     /**\n     }\n \n     /**\n+     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n+     */\n+    public double getN() {\n+        return n;\n+    }\n+    \n+    /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n      */\n     public void clear() {\n         value = Double.NaN;\n+        n = 0;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/util/ContinuedFraction.java\n+++ b/src/java/org/apache/commons/math/util/ContinuedFraction.java\n  */\n package org.apache.commons.math.util;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MathException;\n \n  * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n  * Continued Fraction</a></li>\n  * </ul>\n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public abstract class ContinuedFraction {\n+public abstract class ContinuedFraction implements Serializable {\n     /** Maximum allowed numerical error. */\n     private static final double DEFAULT_EPSILON = 10e-9;\n \n--- a/src/java/org/apache/commons/math/util/ContractableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/ContractableDoubleArray.java\n  * internal storage array is swapped.\n  * </p>\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class ContractableDoubleArray\n-    extends ExpandableDoubleArray\n-    implements Serializable {\n-\n+public class ContractableDoubleArray extends ExpandableDoubleArray implements Serializable {\n+\n+    static final long serialVersionUID = -3485529955529426875L; \n+   \n     /** The contraction criteria defines the conditions under which this\n      * object will \"resize\" the internal array to the number of elements\n      * contained in the element array + 1\n--- a/src/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/java/org/apache/commons/math/util/DefaultTransformer.java\n \n package org.apache.commons.math.util;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.MathException;\n \n /**\n  * into a primitive double or to turn a String representation of a Number into \n  * a double.\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/11/15 19:02:44 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class DefaultTransformer implements NumberTransformer {\n+public class DefaultTransformer implements NumberTransformer, Serializable {\n     \n     /**\n      * @param Object o Is the object that gets transformed.\n--- a/src/java/org/apache/commons/math/util/ExpandableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/ExpandableDoubleArray.java\n  * expand the array 10 times - first from 2 -> 4. then 4 -> 8, 8 -> 16,\n  * and so on until we reach 4096 which is sufficient to hold 3546 elements.\n  * </p>\n- * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.11 $ $Date: 2003/11/19 03:28:24 $\n  */\n public class ExpandableDoubleArray implements Serializable, DoubleArray {\n \n+    static final long serialVersionUID = -5697417774251632284L;    \n+   \n     // TODO: expansionFactor is valuable, by if I only need storage\n     // for 1025 items and I use the default settings, I'll end up\n     // with enough storage for 2048 elements.  Maybe this implementation\n--- a/src/java/org/apache/commons/math/util/FixedDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/FixedDoubleArray.java\n  * <http://www.apache.org/>.\n  */\n package org.apache.commons.math.util;\n+\n+import java.io.Serializable;\n \n /**\n  * <p>\n  * \"fixed\" in memory, this implementation will never allocate, or copy\n  * the internal storage array to a new array instance.\n  * </p>\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:17 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class FixedDoubleArray implements DoubleArray {\n-\n+public class FixedDoubleArray implements DoubleArray, Serializable {\n+\n+    static final long serialVersionUID = 1247853239629842963L;    \n+    \n     /**\n      * This is the internal storage array.  This array is assigned\n      * a known fixed size in the constructor\n--- a/src/java/org/apache/commons/math/util/TransformerMap.java\n+++ b/src/java/org/apache/commons/math/util/TransformerMap.java\n  */\n package org.apache.commons.math.util;\n \n+import java.io.Serializable;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n  * It provides a means to set NumberTransformers that will be selected \n  * based on the Class of the object handed to the Maps\n  * <code>double transform(Object o)</code> method.\n- * @version $Revision: 1.8 $ $Date: 2003/11/15 19:02:44 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/19 03:28:24 $\n  */\n-public class TransformerMap implements NumberTransformer {\n+public class TransformerMap implements NumberTransformer, Serializable {\n \n \t/**\n \t * A default Number Transformer for Numbers and numeric Strings.", "timestamp": 1069212505, "metainfo": ""}