{"sha": "99d6a903c741d0893f207b8a7d1ffa447bd9b3ee", "log": "added Mauro's patch to support multiple regression there is still some work to do on this new feature JIRA: MATH-203  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.regression;\n+\n+import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.linear.RealMatrixImpl;\n+\n+/**\n+ * Abstract base class for implementations of MultipleLinearRegression.\n+ */\n+public abstract class AbstractMultipleLinearRegression implements\n+        MultipleLinearRegression {\n+\n+    protected RealMatrix X;\n+    protected RealMatrix Y;\n+\n+    /**\n+     * Adds y sample data.\n+     * \n+     * @param y the [n,1] array representing the y sample\n+     */\n+    protected void addYSampleData(double[] y){\n+        this.Y = new RealMatrixImpl(y);\n+    }\n+\n+    /**\n+     * Adds x sample data.\n+     * \n+     * @param x the [n,k] array representing the x sample\n+     */\n+    protected void addXSampleData(double[][] x){\n+        this.X = new RealMatrixImpl(x);\n+    }\n+\n+    public double[] estimateRegressionParameters(){\n+        RealMatrix b = calculateBeta();\n+        return b.getColumn(0);\n+    }    \n+    \n+    public double[] estimateResiduals(){\n+        RealMatrix b = calculateBeta();\n+        RealMatrix e = Y.subtract(X.multiply(b));\n+        return e.getColumn(0);\n+    }\n+    \n+    public double[][] estimateRegressionParametersVariance() {\n+        return calculateBetaVariance().getData();\n+    }\n+\n+    public double estimateRegressandVariance() {\n+        return calculateYVariance();\n+    }\n+    \n+    /**\n+     * Calculates the beta of multiple linear regression in matrix notation.\n+     */\n+    protected abstract RealMatrix calculateBeta();    \n+    \n+    /**\n+     * Calculates the beta variance of multiple linear regression in matrix notation.\n+     */\n+    protected abstract RealMatrix calculateBetaVariance();\n+    \n+    /**\n+     * Calculates the Y variance of multiple linear regression.\n+     */\n+    protected abstract double calculateYVariance();\n+\n+    /**\n+     * Calculates the residuals of multiple linear regression in matrix notation.\n+     * <pre>\n+     * u = y - X*b\n+     * </pre>\n+     * \n+     * @return The residuals [n,1] matrix \n+     */\n+    protected RealMatrix calculateResiduals() {\n+        RealMatrix b = calculateBeta();\n+        return Y.subtract(X.multiply(b));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.regression;\n+\n+import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.linear.RealMatrixImpl;\n+\n+\n+/**\n+ * The GLS implementation of the multiple linear regression.\n+ * \n+ * GLS assumes a general covariance matrix Omega of the error\n+ * <pre>\n+ * u ~ N(0, Omega)\n+ * </pre>\n+ * \n+ * Estimated by GLS, \n+ * <pre>\n+ * b=(X' Omega^-1 X)^-1X'Omega^-1 y\n+ * </pre>\n+ * whose variance is\n+ * <pre>\n+ * Var(b)=(X' Omega^-1 X)^-1\n+ * </pre>\n+ */\n+public class GLSMultipleLinearRegression extends AbstractMultipleLinearRegression {\n+    \n+    private RealMatrix Omega;\n+    \n+\n+    public void addData(double[] y, double[][] x, double[][] covariance) {\n+        addYSampleData(y);\n+        addXSampleData(x);\n+        addCovarianceData(covariance);\n+    }\n+\n+    /**\n+     * Add the covariance data.\n+     * \n+     * @param omega the [n,n] array representing the covariance\n+     */\n+    protected void addCovarianceData(double[][] omega){\n+        this.Omega = new RealMatrixImpl(omega);\n+    }\n+    \n+    /**\n+     * Calculates beta by GLS.\n+     * <pre>\n+     *  b=(X' Omega^-1 X)^-1X'Omega^-1 y\n+     * </pre> \n+     */\n+    protected RealMatrix calculateBeta() {\n+        RealMatrix OI = Omega.inverse();\n+        RealMatrix XT = X.transpose();\n+        RealMatrix XTOIX = XT.multiply(OI).multiply(X);\n+        return XTOIX.inverse().multiply(XT).multiply(OI).multiply(Y);\n+    }\n+\n+    /**\n+     * Calculates the variance on the beta by GLS.\n+     * <pre>\n+     *  Var(b)=(X' Omega^-1 X)^-1\n+     * </pre>\n+     * @return The beta variance matrix\n+     */\n+    protected RealMatrix calculateBetaVariance() {\n+        RealMatrix XTOIX = X.transpose().multiply(Omega.inverse()).multiply(X);\n+        return XTOIX.inverse();\n+    }\n+\n+    /**\n+     * Calculates the variance on the y by GLS.\n+     * <pre>\n+     *  Var(y)=Tr(u' Omega^-1 u)/(n-k)\n+     * </pre>\n+     * @return The Y variance\n+     */\n+    protected double calculateYVariance() {\n+        RealMatrix u = calculateResiduals();\n+        RealMatrix sse =  u.transpose().multiply(Omega.inverse()).multiply(u);\n+        return sse.getTrace()/(X.getRowDimension()-X.getColumnDimension());\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.regression;\n+\n+/**\n+ * The multiple linear regression can be represented in matrix-notation.\n+ * <pre>\n+ *  y=X*b+u\n+ * </pre>\n+ * where y is an <code>n-vector</code> <b>regressand</b>, X is a <code>[n,k]</code> matrix whose <code>k</code> columns are called\n+ * <b>regressors</b>, b is <code>k-vector</code> of <b>regression parameters</b> and <code>u</code> is an <code>n-vector</code>\n+ * of <b>error terms</b> or <b>residuals</b>.\n+ * \n+ * The notation is quite standard in literature, \n+ * cf eg <a href=\"http://www.econ.queensu.ca/ETM\">Davidson and MacKinnon, Econometrics Theory and Methods, 2004</a>.\n+ */\n+public interface MultipleLinearRegression {\n+\n+    /**\n+     * Adds sample and covariance data.\n+     * \n+     * @param y the [n,1] array representing the y sample\n+     * @param x the [n,k] array representing x sample\n+     * @param covariance the [n,n] array representing the covariance matrix or <code>null</code> if not appropriate for the\n+     *          specific implementation\n+     */\n+    void addData(double[] y, double[][] x, double[][] covariance);\n+\n+    /**\n+     * Estimates the regression parameters b.\n+     * \n+     * @return The [k,1] array representing b\n+     */\n+    double[] estimateRegressionParameters();\n+\n+    /**\n+     * Estimates the variance of the regression parameters, ie Var(b).\n+     * \n+     * @return The [k,k] array representing the variance of b\n+     */\n+    double[][] estimateRegressionParametersVariance();\n+    \n+    /**\n+     * Estimates the residuals, ie u = y - X*b.\n+     * \n+     * @return The [n,1] array representing the residuals\n+     */\n+    double[] estimateResiduals();\n+    \n+    /**\n+     * Returns the variance of the regressand, ie Var(y).\n+     * \n+     * @return The double representing the variance of y\n+     */\n+    double estimateRegressandVariance();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.regression;\n+\n+import org.apache.commons.math.linear.RealMatrix;\n+\n+\n+/**\n+ * The OLS implementation of the multiple linear regression.\n+ * \n+ * OLS assumes the covariance matrix of the error to be diagonal and with equal variance.\n+ * <pre>\n+ * u ~ N(0, sigma^2*I)\n+ * </pre>\n+ * \n+ * Estimated by OLS, \n+ * <pre>\n+ * b=(X'X)^-1X'y\n+ * </pre>\n+ * whose variance is\n+ * <pre>\n+ * Var(b)=MSE*(X'X)^-1, MSE=u'u/(n-k)\n+ * </pre>\n+ */\n+public class OLSMultipleLinearRegression extends AbstractMultipleLinearRegression {\n+    \n+\n+    public void addData(double[] y, double[][] x, double[][] covariance) {\n+        addYSampleData(y);\n+        addXSampleData(x);\n+    }\n+    \n+    /**\n+     * Calculates beta by OLS.\n+     * <pre>\n+     * b=(X'X)^-1X'y\n+     * </pre> \n+     */\n+    protected RealMatrix calculateBeta() {\n+        RealMatrix XTX = X.transpose().multiply(X);\n+        return XTX.inverse().multiply(X.transpose()).multiply(Y);\n+    }\n+\n+    /**\n+     * Calculates the variance on the beta by OLS.\n+     * <pre>\n+     *  Var(b)=(X'X)^-1\n+     * </pre>\n+     * @return The beta variance\n+     */\n+    protected RealMatrix calculateBetaVariance() {\n+        RealMatrix XTX = X.transpose().multiply(X);\n+        return XTX.inverse();\n+    }\n+    \n+\n+    /**\n+     * Calculates the variance on the Y by OLS.\n+     * <pre>\n+     *  Var(y)=Tr(u'u)/(n-k)\n+     * </pre>\n+     * @return The Y variance\n+     */\n+    protected double calculateYVariance() {\n+        RealMatrix u = calculateResiduals();\n+        RealMatrix sse = u.transpose().multiply(u);\n+        return sse.getTrace()/(X.getRowDimension()-X.getColumnDimension());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegressionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.regression;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+public abstract class AbstractMultipleLinearRegressionTest {\n+\n+    private MultipleLinearRegression regression;\n+\n+    @Before\n+    public void setUp(){\n+        regression = createRegression();\n+    }\n+\n+    protected abstract MultipleLinearRegression createRegression();\n+    \n+    protected abstract int getNumberOfRegressors();\n+    \n+    protected abstract int getSampleSize();\n+\n+    @Test\n+    public void canEstimateRegressionParameters(){\n+        double[] beta = regression.estimateRegressionParameters();        \n+        assertEquals(getNumberOfRegressors(), beta.length);\n+    }\n+\n+    @Test\n+    public void canEstimateResiduals(){\n+        double[] e = regression.estimateResiduals();\n+        assertEquals(getSampleSize(), e.length);\n+    }\n+    \n+    @Test\n+    public void canEstimateRegressionParametersVariance(){\n+        double[][] variance = regression.estimateRegressionParametersVariance();\n+        assertEquals(getNumberOfRegressors(), variance.length);\n+    }\n+\n+    @Test\n+    public void canEstimateRegressandVariance(){\n+        double variance = regression.estimateRegressandVariance();\n+        assertTrue(variance > 0.0);\n+    }   \n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.regression;\n+\n+import org.junit.Before;\n+\n+public class GLSMultipleLinearRegressionTest extends AbstractMultipleLinearRegressionTest {\n+\n+    private double[] y;\n+    private double[][] x;\n+    private double[][] omega;\n+\n+    @Before\n+    public void setUp(){\n+        y = new double[]{11.0, 12.0, 13.0, 14.0, 15.0, 16.0};\n+        x = new double[6][];\n+        x[0] = new double[]{1.0, 0, 0, 0, 0, 0};\n+        x[1] = new double[]{1.0, 2.0, 0, 0, 0, 0};\n+        x[2] = new double[]{1.0, 0, 3.0, 0, 0, 0};\n+        x[3] = new double[]{1.0, 0, 0, 4.0, 0, 0};\n+        x[4] = new double[]{1.0, 0, 0, 0, 5.0, 0};\n+        x[5] = new double[]{1.0, 0, 0, 0, 0, 6.0};\n+        omega = new double[6][];\n+        omega[0] = new double[]{1.0, 0, 0, 0, 0, 0};\n+        omega[1] = new double[]{0, 2.0, 0, 0, 0, 0};\n+        omega[2] = new double[]{0, 0, 3.0, 0, 0, 0};\n+        omega[3] = new double[]{0, 0, 0, 4.0, 0, 0};\n+        omega[4] = new double[]{0, 0, 0, 0, 5.0, 0};\n+        omega[5] = new double[]{0, 0, 0, 0, 0, 6.0};\n+        super.setUp();\n+    }\n+   \n+    protected MultipleLinearRegression createRegression() {\n+        MultipleLinearRegression regression = new GLSMultipleLinearRegression();\n+        regression.addData(y, x, omega);\n+        return regression;\n+    }\n+\n+    protected int getNumberOfRegressors() {\n+        return x[0].length;\n+    }\n+\n+    protected int getSampleSize() {\n+        return y.length;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.regression;\n+\n+import org.junit.Before;\n+\n+public class OLSMultipleLinearRegressionTest extends AbstractMultipleLinearRegressionTest {\n+\n+    private double[] y;\n+    private double[][] x;\n+    \n+    @Before\n+    public void setUp(){\n+        y = new double[]{11.0, 12.0, 13.0, 14.0, 15.0, 16.0};\n+        x = new double[6][];\n+        x[0] = new double[]{1.0, 0, 0, 0, 0, 0};\n+        x[1] = new double[]{1.0, 2.0, 0, 0, 0, 0};\n+        x[2] = new double[]{1.0, 0, 3.0, 0, 0, 0};\n+        x[3] = new double[]{1.0, 0, 0, 4.0, 0, 0};\n+        x[4] = new double[]{1.0, 0, 0, 0, 5.0, 0};\n+        x[5] = new double[]{1.0, 0, 0, 0, 0, 6.0};\n+        super.setUp();\n+    }\n+\n+    protected MultipleLinearRegression createRegression() {\n+        MultipleLinearRegression regression = new OLSMultipleLinearRegression();\n+        regression.addData(y, x, null);\n+        return regression;\n+    }\n+\n+    protected int getNumberOfRegressors() {\n+        return x[0].length;\n+    }\n+\n+    protected int getSampleSize() {\n+        return y.length;\n+    }\n+\n+}", "timestamp": 1211123129, "metainfo": ""}