{"sha": "233cbc5dd7902ec87f83c80a6f77597a2673cdc0", "log": "MATH-438 Removed deprecated methods.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n      * </p>\n      *\n      * @param v the value to add.\n-     * @throws IllegalArgumentException if <code>v</code> is not Comparable,\n-     *         or is not comparable with previous entries\n-     * @deprecated use {@link #addValue(Comparable)} instead\n-     */\n-    @Deprecated\n-    public void addValue(Object v) {\n-        if (v instanceof Comparable<?>){\n-            addValue((Comparable<?>) v);\n-        } else {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE,\n-                  v.getClass().getName());\n-        }\n-    }\n-\n-    /**\n-     * Adds 1 to the frequency count for v.\n-     * <p>\n-     * If other objects have already been added to this Frequency, v must\n-     * be comparable to those that have already been added.\n-     * </p>\n-     *\n-     * @param v the value to add.\n      * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n      */\n     public void addValue(Comparable<?> v){\n      * Adds 1 to the frequency count for v.\n      *\n      * @param v the value to add.\n-     * @deprecated to be removed in math 3.0\n-     */\n-    @Deprecated\n-    public void addValue(Integer v) {\n-        addValue(Long.valueOf(v.longValue()));\n-    }\n-\n-    /**\n-     * Adds 1 to the frequency count for v.\n-     *\n-     * @param v the value to add.\n      */\n     public void addValue(long v) {\n         addValue(Long.valueOf(v));\n             result += iterator.next().longValue();\n         }\n         return result;\n-    }\n-\n-    /**\n-     * Returns the number of values = v.\n-     * Returns 0 if the value is not comparable.\n-     *\n-     * @param v the value to lookup.\n-     * @return the frequency of v.\n-     * @deprecated replaced by {@link #getCount(Comparable)} as of 2.0\n-     */\n-    @Deprecated\n-    public long getCount(Object v) {\n-        return getCount((Comparable<?>) v);\n     }\n \n     /**\n     //-------------------------------------------------------------\n \n     /**\n-      * Returns the percentage of values that are equal to v\n-     * (as a proportion between 0 and 1).\n-     * <p>\n-     * Returns <code>Double.NaN</code> if no values have been added.</p>\n-     *\n-     * @param v the value to lookup\n-     * @return the proportion of values equal to v\n-     * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n-     */\n-    @Deprecated\n-    public double getPct(Object v) {\n-        return getPct((Comparable<?>) v);\n-    }\n-\n-    /**\n      * Returns the percentage of values that are equal to v\n      * (as a proportion between 0 and 1).\n      * <p>\n     }\n \n     //-----------------------------------------------------------------------------------------\n-\n-    /**\n-     * Returns the cumulative frequency of values less than or equal to v.\n-     * <p>\n-     * Returns 0 if v is not comparable to the values set.</p>\n-     *\n-     * @param v the value to lookup.\n-     * @return the proportion of values equal to v\n-     * @deprecated replaced by {@link #getCumFreq(Comparable)} as of 2.0\n-     */\n-    @Deprecated\n-    public long getCumFreq(Object v) {\n-        return getCumFreq((Comparable<?>) v);\n-    }\n \n     /**\n      * Returns the cumulative frequency of values less than or equal to v.\n     }\n \n     //----------------------------------------------------------------------------------------------\n-\n-    /**\n-     * Returns the cumulative percentage of values less than or equal to v\n-     * (as a proportion between 0 and 1).\n-     * <p>\n-     * Returns <code>Double.NaN</code> if no values have been added.\n-     * Returns 0 if at least one value has been added, but v is not comparable\n-     * to the values set.</p>\n-     *\n-     * @param v the value to lookup\n-     * @return the proportion of values less than or equal to v\n-     * @deprecated replaced by {@link #getCumPct(Comparable)} as of 2.0\n-     */\n-    @Deprecated\n-    public double getCumPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n-\n-    }\n \n     /**\n      * Returns the cumulative percentage of values less than or equal to v\n--- a/src/test/java/org/apache/commons/math/stat/FrequencyTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/FrequencyTest.java\n     }\n \n     /** test freq counts */\n-    @SuppressWarnings(\"deprecation\")\n     public void testCounts() {\n         assertEquals(\"total count\",0,f.getSumFreq());\n         f.addValue(oneL);\n     }\n \n     /** test pcts */\n-    @SuppressWarnings(\"deprecation\")\n     public void testPcts() {\n         f.addValue(oneL);\n         f.addValue(twoL);\n         assertEquals(\"one pct\",0.25,f.getPct(1),tolerance);\n         assertEquals(\"two pct\",0.25,f.getPct(Long.valueOf(2)),tolerance);\n         assertEquals(\"three pct\",0.5,f.getPct(threeL),tolerance);\n-        // MATH-329\n-        assertEquals(\"three (Object) pct\",0.5,f.getPct((Object) (Integer.valueOf(3))),tolerance);\n         assertEquals(\"five pct\",0,f.getPct(5),tolerance);\n         assertEquals(\"foo pct\",0,f.getPct(\"foo\"),tolerance);\n         assertEquals(\"one cum pct\",0.25,f.getCumPct(1),tolerance);\n     }\n \n     /** test adding incomparable values */\n-    @SuppressWarnings(\"deprecation\")\n     public void testAdd() {\n         char aChar = 'a';\n         char bChar = 'b';\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        }\n-    }\n-\n-    // Check what happens when non-Comparable objects are added\n-    @SuppressWarnings(\"deprecation\")\n-    public void testAddNonComparable(){\n-        try {\n-            f.addValue(new Object()); // This was previously OK\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n-        f.clear();\n-        f.addValue(1);\n-        try {\n-            f.addValue(new Object());\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n         }\n     }\n \n             fail(ex.getMessage());\n         }\n     }\n-    @SuppressWarnings(\"deprecation\")\n+\n     public void testIntegerValues() {\n         Comparable<?> obj1 = null;\n         obj1 = Integer.valueOf(1);", "timestamp": 1289596954, "metainfo": ""}