{"sha": "d783dd0ac255b90b2680c8cc4cca2ba0676f924c", "log": "Improvements to the Javadoc of transform.RealTransformer (MATH-677).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/RealTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/RealTransformer.java\n import org.apache.commons.math.analysis.UnivariateFunction;\n \n /**\n- * Interface for one-dimensional data sets transformations producing real results.\n+ * <p>Interface for one-dimensional data sets transformations producing real\n+ * results.</p>\n  * <p>Such transforms include {@link FastSineTransformer sine transform},\n  * {@link FastCosineTransformer cosine transform} or {@link\n  * FastHadamardTransformer Hadamard transform}. {@link FastFourierTransformer\n  * Fourier transform} is of a different kind and does not implement this\n- * interface since it produces {@link org.apache.commons.math.complex.Complex complex}\n- * results instead of real ones.\n- * </p>\n+ * interface since it produces {@link org.apache.commons.math.complex.Complex}\n+ * results instead of real ones.</p>\n+ *\n  * @version $Id$\n  * @since 2.0\n  */\n public interface RealTransformer  {\n \n     /**\n-     * Transform the given real data set.\n+     * Returns the forward transform of the specified real data set.\n+     *\n      * @param f the real data array to be transformed (signal)\n      * @return the real transformed array (spectrum)\n      * @throws IllegalArgumentException if any parameters are invalid\n         throws IllegalArgumentException;\n \n     /**\n-     * Transform the given real function, sampled on the given interval.\n+     * Returns the forward transform of the specified real function, sampled on\n+     * the specified interval.\n+     *\n      * @param f the function to be sampled and transformed\n-     * @param min the lower bound for the interval\n-     * @param max the upper bound for the interval\n+     * @param min the (inclusive) lower bound for the interval\n+     * @param max the (exclusive) upper bound for the interval\n      * @param n the number of sample points\n      * @return the real transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n         throws IllegalArgumentException;\n \n     /**\n-     * Inversely transform the given real data set.\n-     * @param f the real data array to be inversely transformed (spectrum)\n-     * @return the real inversely transformed array (signal)\n+     * Returns the inverse transform of the specified real data set.\n+     *\n+     * @param f the real data array to be inversely transformed\n+     * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid\n      */\n     double[] inverseTransform(double[] f)\n         throws IllegalArgumentException;\n \n     /**\n-     * Inversely transform the given real function, sampled on the given interval.\n+     * Returns the inverse transform of the specified real function, sampled\n+     * on the given interval.\n+     *\n      * @param f the function to be sampled and inversely transformed\n-     * @param min the lower bound for the interval\n-     * @param max the upper bound for the interval\n+     * @param min the (inclusive) lower bound for the interval\n+     * @param max the (exclusive) upper bound for the interval\n      * @param n the number of sample points\n      * @return the real inversely transformed array\n      * @throws IllegalArgumentException if any parameters are invalid", "timestamp": 1323672382, "metainfo": ""}