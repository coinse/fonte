{"sha": "01f68f2a66ccd1d694301ba804c443a2db87f42c", "log": "Improvements to the Javadoc of transform.FastCosineTransformer (MATH-677).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n         return new FastCosineTransformer(true);\n     }\n \n-    /**\n-     * Returns the forward transform of the specified real data set.\n-     *\n-     * @param f the real data array to be transformed\n-     * @return the real transformed array\n-     * @throws IllegalArgumentException if any parameters are invalid\n-     */\n+    /** {@inheritDoc} */\n     public double[] transform(double[] f) throws IllegalArgumentException {\n \n         if (orthogonal) {\n         return fct(f);\n     }\n \n-    /**\n-     * Returns the forward transform of the specified real function, sampled on\n-     * the specified interval.\n-     *\n-     * @param f the function to be sampled and transformed\n-     * @param min the (inclusive) lower bound for the interval\n-     * @param max the (exclusive) upper bound for the interval\n-     * @param n the number of sample points\n-     * @return the real transformed array\n-     * @throws IllegalArgumentException if any parameters are invalid\n-     */\n+    /** {@inheritDoc} */\n     public double[] transform(UnivariateFunction f,\n         double min, double max, int n) throws IllegalArgumentException {\n \n         return transform(data);\n     }\n \n-    /**\n-     * Returns the inverse transform of the specified real data set.\n-     *\n-     * @param f the real data array to be inversely transformed\n-     * @return the real inversely transformed array\n-     * @throws IllegalArgumentException if any parameters are invalid\n-     */\n+    /** {@inheritDoc} */\n     public double[] inverseTransform(double[] f)\n         throws IllegalArgumentException {\n \n         return FastFourierTransformer.scaleArray(fct(f), s1);\n     }\n \n-    /**\n-     * Returns the inverse transform of the specified real function, sampled\n-     * on the given interval.\n-     *\n-     * @param f the function to be sampled and inversely transformed\n-     * @param min the (inclusive) lower bound for the interval\n-     * @param max the (exclusive) upper bound for the interval\n-     * @param n the number of sample points\n-     * @return the real inversely transformed array\n-     * @throws IllegalArgumentException if any parameters are invalid\n-     */\n+    /** {@inheritDoc} */\n     public double[] inverseTransform(UnivariateFunction f,\n         double min, double max, int n) throws IllegalArgumentException {\n ", "timestamp": 1323672544, "metainfo": ""}