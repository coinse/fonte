{"sha": "455f95bcf76059c4c31e28d2928a9315b4108534", "log": "Added support for equal variances tests.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/inference/TTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTest.java\n /**\n  * An interface for Student's t-tests.\n  * \n- * @version $Revision: 1.4 $ $Date: 2004/05/24 05:29:05 $ \n+ * @version $Revision: 1.5 $ $Date: 2004/06/02 13:08:55 $ \n  */\n public interface TTest {\n     \n      * value by 2.\n      * <p>\n      * This test is equivalent to a one-sample t-test computed using\n-     *  {@link #tTest(double, double[])} with <code>mu = 0</code> and the sample array\n-     *  consisting of the signed differences between corresponding elements of \n+     * {@link #tTest(double, double[])} with <code>mu = 0</code> and the sample\n+     * array consisting of the signed differences between corresponding elements of \n      * <code>sample1</code> and <code>sample2.</code>\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n-     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The input array lengths must be the same and their common length must\n     throws IllegalArgumentException, MathException;\n     \n     /**\n-     * Performs a paired t-test</a> evaluating that null hypothesis that the \n+     * Performs a paired t-test</a> evaluating the null hypothesis that the \n      * mean of the paired differences between <code>sample1</code> and\n      * <code>sample2</code> is 0 in favor of the two-sided alternative that the \n      * mean paired difference is not equal to 0, with significance level \n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n-     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n-     * <p>\n-     * <strong>Preconditions</strong>: <ul>\n-     * <li>The input array lengths must be the same and their common length must be at least 2.\n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The input array lengths must be the same and their common length \n+     * must be at least 2.\n      * </li>\n      * <li> <code> 0 < alpha < 0.5 </code>\n      * </li></ul>\n     \n     /**\n      * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula\">\n-     * t statistic </a> to use in comparing the dataset described by <code>sampleStats</code>\n-     *  to <code>mu</code>.\n+     * t statistic </a> to use in comparing the mean of the dataset described by \n+     * <code>sampleStats</code> to <code>mu</code>.\n      * <p>\n      * This statistic can be used to perform a one sample t-test for the mean.\n      * <p>\n     \n     /**\n      * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n-     * 2-sample t statistic </a>, without the assumption of equal sample variances.\n+     * 2-sample t statistic. </a>\n      * <p>\n      * This statistic can be used to perform a two-sample t-test to compare\n      * sample means.\n      * <p>\n+     * If <code>equalVariances</code> is <code>true</code>,  the t-statisitc is\n+     * <p>\n+     * (1) &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n+     * <p>\n+     * where <strong><code>n1</code></strong> is the size of first sample; \n+     * <strong><code> n2</code></strong> is the size of second sample; \n+     * <strong><code> m1</code></strong> is the mean of first sample;  \n+     * <strong><code> m2</code></strong> is the mean of second sample</li>\n+     * </ul>\n+     * and <strong><code>var</code></strong> is the pooled variance estimate:\n+     * <p>\n+     * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>\n+     * <p> \n+     * with <strong><code>var1<code></strong> the variance of the first sample and\n+     * <strong><code>var2</code></strong> the variance of the second sample.\n+     * <p>\n+     * If <code>equalVariances</code> is <code>false</code>,  the t-statisitc is\n+     * <p>\n+     * (2) &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n+     * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n      * </li></ul>\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n+     * @param equalVariances are the sample variances assumed equal?\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if the statistic can not be computed do to a\n      *         convergence or other numerical error.\n      */\n-    double t(double[] sample1, double[] sample2) \n+    double t(double[] sample1, double[] sample2, boolean equalVariances) \n     throws IllegalArgumentException, MathException;\n     \n     /**\n      * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n      * 2-sample t statistic </a>, comparing the means of the datasets described\n-     * by two {@link StatisticalSummary} instances without the assumption of equal sample variances.\n+     * by two {@link StatisticalSummary} instances.\n      * <p>\n      * This statistic can be used to perform a two-sample t-test to compare\n      * sample means.\n      * <p>\n+      * If <code>equalVariances</code> is <code>true</code>,  the t-statisitc is\n+     * <p>\n+     * (1) &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n+     * <p>\n+     * where <strong><code>n1</code></strong> is the size of first sample; \n+     * <strong><code> n2</code></strong> is the size of second sample; \n+     * <strong><code> m1</code></strong> is the mean of first sample;  \n+     * <strong><code> m2</code></strong> is the mean of second sample</li>\n+     * </ul>\n+     * and <strong><code>var</code></strong> is the pooled variance estimate:\n+     * <p>\n+     * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>\n+     * <p> \n+     * with <strong><code>var1<code></strong> the variance of the first sample and\n+     * <strong><code>var2</code></strong> the variance of the second sample.\n+     * <p>\n+     * If <code>equalVariances</code> is <code>false</code>,  the t-statisitc is\n+     * <p>\n+     * (2) &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n+     * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * at least 2 observations.\n      *\n      * @param sampleStats1 StatisticalSummary describing data from the first sample\n      * @param sampleStats2 StatisticalSummary describing data from the second sample\n+     * @param equalVariances are the sample variances assumed equal?\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2) \n+    double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2,\n+            boolean equalVariances) \n     throws IllegalArgumentException;\n     \n     /**\n      * equal in favor of the two-sided alternative that they are different. \n      * For a one-sided test, divide the returned value by 2.\n      * <p>\n-     * The test does not assume that the underlying popuation variances are\n-     * equal and it uses approximated degrees of freedom computed from the \n-     * sample data as described \n-     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">here</a>\n+     * If the <code>equalVariances</code> parameter is <code>false,</code>\n+     * the test does not assume that the underlying popuation variances are\n+     * equal  and it uses approximated degrees of freedom computed from the \n+     * sample data to compute the p-value.  In this case, formula (1) for the\n+     * {@link #t(double[], double[], boolean)} statistic is used\n+     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n+     * as described \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n+     * here.</a>\n+     * <p>\n+     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n+     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n+     * sample sizes minus 2 is used as the degrees of freedom.\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n-     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n      *\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n+     * @param equalVariances are sample variances assumed to be equal?\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if an error occurs computing the p-value\n      */\n-    double tTest(double[] sample1, double[] sample2)\n+    double tTest(double[] sample1, double[] sample2, boolean equalVariances)\n     throws IllegalArgumentException, MathException;\n     \n     /**\n      * equal can be rejected with confidence <code>1 - alpha</code>.  To \n      * perform a 1-sided test, use <code>alpha / 2</code>\n      * <p>\n+     * If the <code>equalVariances</code> parameter is <code>false,</code>\n+     * the test does not assume that the underlying popuation variances are\n+     * equal  and it uses approximated degrees of freedom computed from the \n+     * sample data to compute the p-value.  In this case, formula (1) for the\n+     * {@link #t(double[], double[], boolean)} statistic is used\n+     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n+     * as described \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n+     * here.</a>\n+     * <p>\n+     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n+     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n+     * sample sizes minus 2 is used as the degrees of freedom.\n+     * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n-     * the 95% level, use <br><code>tTest(sample1, sample2, 0.05) </code>\n+     * the 95% level, under the assumption of equal subpopulation variances, \n+     * use <br><code>tTest(sample1, sample2, 0.05, true) </code>\n      * </li>\n      * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n-     * at the 99% level, first verify that the measured mean of \n-     * <code>sample 1</code> is less than the mean of <code>sample 2</code>\n-     * and then use <br><code>tTest(sample1, sample2, 0.005) </code>\n+     * at the 99% level without assuming equal variances, first verify that the measured \n+     * mean of <code>sample 1</code> is less than the mean of <code>sample 2</code>\n+     * and then use <br><code>tTest(sample1, sample2, 0.005, false) </code>\n      * </li></ol>\n      * <p>\n-     * The test does not assume that the underlying popuation variances are\n-     * equal and it uses approximated degrees of freedom computed from the \n-     * sample data as described \n-     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">here</a>\n-     * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n-     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The observed array lengths must both be at least 2.\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * @param alpha significance level of the test\n+     * @param equalVariances are sample variances assumed to be equal?\n      * @return true if the null hypothesis can be rejected with \n      * confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n      * @throws MathException if an error occurs performing the test\n      */\n-    boolean tTest(double[] sample1, double[] sample2, double alpha)\n+    boolean tTest(double[] sample1, double[] sample2, double alpha, \n+            boolean equalVariances)\n     throws IllegalArgumentException, MathException;\n     \n     /**\n      * equal in favor of the two-sided alternative that they are different. \n      * For a one-sided test, divide the returned value by 2.\n      * <p>\n-     * The test does not assume that the underlying popuation variances are\n-     * equal and it uses approximated degrees of freedom computed from the \n-     * sample data as described \n-     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">here</a>\n+     * If the <code>equalVariances</code> parameter is <code>false,</code>\n+     * the test does not assume that the underlying popuation variances are\n+     * equal  and it uses approximated degrees of freedom computed from the \n+     * sample data to compute the p-value.  In this case, formula (1) for the\n+     * {@link #t(double[], double[], boolean)} statistic is used\n+     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n+     * as described \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n+     * here.</a>\n+     * <p>\n+     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n+     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n+     * sample sizes minus 2 is used as the degrees of freedom.\n      * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the p-value depends on the assumptions of the parametric\n      * at least 2 observations.\n      * </li></ul>\n      *\n-     * @param sampleStats1 StatisticalSummary describing data from the first sample\n-     * @param sampleStats2 StatisticalSummary describing data from the second sample\n+     * @param sampleStats1  StatisticalSummary describing data from the first sample\n+     * @param sampleStats2  StatisticalSummary describing data from the second sample\n+     * @param equalVariances  are sample variances assumed to be equal?\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n      * @throws MathException if an error occurs computing the p-value\n      */\n-    double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)\n+    double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2, \n+            boolean equalVariances)\n     throws IllegalArgumentException, MathException;\n     \n     /**\n      * equal can be rejected with confidence <code>1 - alpha</code>.  To \n      * perform a 1-sided test, use <code>alpha / 2</code>\n      * <p>\n+     * If the <code>equalVariances</code> parameter is <code>false,</code>\n+     * the test does not assume that the underlying popuation variances are\n+     * equal  and it uses approximated degrees of freedom computed from the \n+     * sample data to compute the p-value.  In this case, formula (1) for the\n+     * {@link #t(double[], double[], boolean)} statistic is used\n+     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n+     * as described \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n+     * here.</a>\n+     * <p>\n+     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n+     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n+     * sample sizes minus 2 is used as the degrees of freedom.\n+     * <p>\n      * <strong>Examples:</strong><br><ol>\n      * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n-     * the 95% level, use \n-     * <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>\n+     * the 95% level under the assumption of equal subpopulation variances, use \n+     * <br><code>tTest(sampleStats1, sampleStats2, 0.05, true) </code>\n      * </li>\n      * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n-     * at the 99% level, first verify that the measured mean of \n-     * <code>sample 1</code> is less than the mean of <code>sample 2</code>\n-     * and then use <br><code>tTest(sampleStats1, sampleStats2, 0.005) </code>\n+     * at the 99% level without assuming that subpopulation variances are equal, \n+     * first verify that the measured mean of  <code>sample 1</code> is less than \n+     * the mean of <code>sample 2</code> and then use \n+     * <br><code>tTest(sampleStats1, sampleStats2, 0.005, false) </code>\n      * </li></ol>\n      * <p>\n-     * The test does not assume that the underlying popuation variances are\n-     * equal and it uses approximated degrees of freedom computed from the \n-     * sample data as described \n-     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">here</a>\n-     * <p>\n      * <strong>Usage Note:</strong><br>\n      * The validity of the test depends on the assumptions of the parametric\n      * t-test procedure, as discussed \n-     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n      * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>The datasets described by the two Univariates must each contain\n      * @param sampleStats1 StatisticalSummary describing sample data values\n      * @param sampleStats2 StatisticalSummary describing sample data values\n      * @param alpha significance level of the test\n+     * @param equalVariances  are sample variances assumed to be equal?\n      * @return true if the null hypothesis can be rejected with \n      * confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n      * @throws MathException if an error occurs performing the test\n      */\n     boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2, \n-            double alpha)\n+            double alpha, boolean equalVariances)\n     throws IllegalArgumentException, MathException;\n }\n--- a/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n  */\n package org.apache.commons.math.stat.inference;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.distribution.DistributionFactory;\n import org.apache.commons.math.distribution.TDistribution;\n /**\n  * Implements t-test statistics defined in the {@link TTest} interface.\n  *\n- * @version $Revision: 1.4 $ $Date: 2004/06/01 00:44:24 $\n+ * @version $Revision: 1.5 $ $Date: 2004/06/02 13:08:55 $\n  */\n-public class TTestImpl implements TTest, Serializable {\n-\n-    /** Serializable version identifier */\n-    static final long serialVersionUID = 3003851743922752186L;\n-    \n+public class TTestImpl implements TTest  {\n+\n     public TTestImpl() {\n         super();\n     }\n-\n+    \n+    /**\n+     * Computes a paired, 2-sample t-statistic based on the data in the input \n+     * arrays.  The t-statistic returned is equivalent to what would be returned by\n+     * computing the one-sample t-statistic {@link #t(double, double[])}, with\n+     * <code>mu = 0</code> and the sample array consisting of the (signed) \n+     * differences between corresponding entries in <code>sample1</code> and \n+     * <code>sample2.</code>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The input arrays must have the same length and their common length\n+     * must be at least 2.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if the statistic can not be computed do to a\n+     *         convergence or other numerical error.\n+     */\n+    public double pairedT(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException, MathException {\n+        if ((sample1 == null) || (sample2 == null ||\n+                Math.min(sample1.length, sample2.length) < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        double meanDifference = StatUtils.meanDifference(sample1, sample2);\n+        return t(meanDifference, 0,  \n+                StatUtils.varianceDifference(sample1, sample2, meanDifference),\n+                (double) sample1.length);\n+    }\n+\n+     /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a paired, two-sample, two-tailed t-test \n+     * based on the data in the input arrays.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the mean of the paired\n+     * differences is 0 in favor of the two-sided alternative that the mean paired \n+     * difference is not equal to 0. For a one-sided test, divide the returned \n+     * value by 2.\n+     * <p>\n+     * This test is equivalent to a one-sample t-test computed using\n+     * {@link #tTest(double, double[])} with <code>mu = 0</code> and the sample\n+     * array consisting of the signed differences between corresponding elements of \n+     * <code>sample1</code> and <code>sample2.</code>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The input array lengths must be the same and their common length must\n+     * be at least 2.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double pairedTTest(double[] sample1, double[] sample2)\n+        throws IllegalArgumentException, MathException {\n+        double meanDifference = StatUtils.meanDifference(sample1, sample2);\n+        return tTest(meanDifference, 0, \n+                StatUtils.varianceDifference(sample1, sample2, meanDifference), \n+                (double) sample1.length);\n+    }\n+\n+     /**\n+     * Performs a paired t-test</a> evaluating the null hypothesis that the \n+     * mean of the paired differences between <code>sample1</code> and\n+     * <code>sample2</code> is 0 in favor of the two-sided alternative that the \n+     * mean paired difference is not equal to 0, with significance level \n+     * <code>alpha</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis can be rejected with \n+     * confidence <code>1 - alpha</code>.  To perform a 1-sided test, use \n+     * <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The input array lengths must be the same and their common length \n+     * must be at least 2.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @param alpha significance level of the test\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    public boolean pairedTTest(double[] sample1, double[] sample2, double alpha)\n+        throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (pairedTTest(sample1, sample2) < alpha);\n+    }\n+\n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula\"> \n+     * t statistic </a> given observed values and a comparison constant.\n+     * <p>\n+     * This statistic can be used to perform a one sample t-test for the mean.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array length must be at least 2.\n+     * </li></ul>\n+     *\n+     * @param mu comparison constant\n+     * @param observed array of values\n+     * @return t statistic\n+     * @throws IllegalArgumentException if input array length is less than 2\n+     */\n+    public double t(double mu, double[] observed)\n+    throws IllegalArgumentException {\n+        if ((observed == null) || (observed.length < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return t(StatUtils.mean(observed), mu, StatUtils.variance(observed), observed.length);\n+    }\n+\n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula\">\n+     * t statistic </a> to use in comparing the mean of the dataset described by \n+     * <code>sampleStats</code> to <code>mu</code>.\n+     * <p>\n+     * This statistic can be used to perform a one sample t-test for the mean.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li><code>observed.getN() > = 2</code>.\n+     * </li></ul>\n+     *\n+     * @param mu comparison constant\n+     * @param sampleStats DescriptiveStatistics holding sample summary statitstics\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double t(double mu, StatisticalSummary sampleStats)\n+    throws IllegalArgumentException {\n+        if ((sampleStats == null) || (sampleStats.getN() < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return t(sampleStats.getMean(), mu, sampleStats.getVariance(), sampleStats.getN());\n+    }\n+\n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n+     * 2-sample t statistic. </a>\n+     * <p>\n+     * This statistic can be used to perform a two-sample t-test to compare\n+     * sample means.\n+     * <p>\n+     * If <code>equalVariances</code> is <code>true</code>,  the t-statisitc is\n+     * <p>\n+     * (1) &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n+     * <p>\n+     * where <strong><code>n1</code></strong> is the size of first sample; \n+     * <strong><code> n2</code></strong> is the size of second sample; \n+     * <strong><code> m1</code></strong> is the mean of first sample;  \n+     * <strong><code> m2</code></strong> is the mean of second sample</li>\n+     * </ul>\n+     * and <strong><code>var</code></strong> is the pooled variance estimate:\n+     * <p>\n+     * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>\n+     * <p> \n+     * with <strong><code>var1<code></strong> the variance of the first sample and\n+     * <strong><code>var2</code></strong> the variance of the second sample.\n+     * <p>\n+     * If <code>equalVariances</code> is <code>false</code>,  the t-statisitc is\n+     * <p>\n+     * (2) &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 2.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @param equalVariances are the sample variances assumed equal?\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if the statistic can not be computed do to a\n+     *         convergence or other numerical error.\n+     */\n+    public double t(double[] sample1, double[] sample2, boolean equalVariances)\n+    throws IllegalArgumentException {\n+        if ((sample1 == null) || (sample2 == null ||\n+                Math.min(sample1.length, sample2.length) < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return t(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),\n+                StatUtils.variance(sample2),  (double) sample1.length, \n+                (double) sample2.length, equalVariances);\n+    }\n+\n+    /**\n+     * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n+     * 2-sample t statistic </a>, comparing the means of the datasets described\n+     * by two {@link StatisticalSummary} instances.\n+     * <p>\n+     * This statistic can be used to perform a two-sample t-test to compare\n+     * sample means.\n+     * <p>\n+      * If <code>equalVariances</code> is <code>true</code>,  the t-statisitc is\n+     * <p>\n+     * (1) &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n+     * <p>\n+     * where <strong><code>n1</code></strong> is the size of first sample; \n+     * <strong><code> n2</code></strong> is the size of second sample; \n+     * <strong><code> m1</code></strong> is the mean of first sample;  \n+     * <strong><code> m2</code></strong> is the mean of second sample</li>\n+     * </ul>\n+     * and <strong><code>var</code></strong> is the pooled variance estimate:\n+     * <p>\n+     * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>\n+     * <p> \n+     * with <strong><code>var1<code></strong> the variance of the first sample and\n+     * <strong><code>var2</code></strong> the variance of the second sample.\n+     * <p>\n+     * If <code>equalVariances</code> is <code>false</code>,  the t-statisitc is\n+     * <p>\n+     * (2) &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 2 observations.\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 StatisticalSummary describing data from the first sample\n+     * @param sampleStats2 StatisticalSummary describing data from the second sample\n+     * @param equalVariances are the sample variances assumed equal?\n+     * @return t statistic\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2, \n+            boolean equalVariances)\n+    throws IllegalArgumentException {\n+        if ((sampleStats1 == null) ||\n+                (sampleStats2 == null ||\n+                        Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return t(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),\n+                sampleStats2.getVariance(), (double) sampleStats1.getN(), \n+                (double) sampleStats2.getN(), equalVariances);\n+    }\n+\n+     /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a one-sample, two-tailed t-test \n+     * comparing the mean of the input array with the constant <code>mu</code>.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the mean equals \n+     * <code>mu</code> in favor of the two-sided alternative that the mean\n+     * is different from <code>mu</code>. For a one-sided test, divide the \n+     * returned value by 2.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array length must be at least 2.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double tTest(double mu, double[] sample)\n+    throws IllegalArgumentException, MathException {\n+        if ((sample == null) || (sample.length < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return tTest( StatUtils.mean(sample), mu, StatUtils.variance(sample), sample.length);\n+    }\n+\n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * two-sided t-test</a> evaluating the null hypothesis that the mean of the population from\n+     *  which <code>sample</code> is drawn equals <code>mu</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis can be \n+     * rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n+     * the 95% level, use <br><code>tTest(mu, sample, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>\n+     * at the 99% level, first verify that the measured sample mean is less \n+     * than <code>mu</code> and then use \n+     * <br><code>tTest(mu, sample, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the one-sample \n+     * parametric t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array length must be at least 2.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sample array of sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error computing the p-value\n+     */\n+    public boolean tTest(double mu, double[] sample, double alpha)\n+    throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (tTest(mu, sample) < alpha);\n+    }\n+\n+    /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a one-sample, two-tailed t-test \n+     * comparing the mean of the dataset described by <code>sampleStats</code>\n+     * with the constant <code>mu</code>.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the mean equals \n+     * <code>mu</code> in favor of the two-sided alternative that the mean\n+     * is different from <code>mu</code>. For a one-sided test, divide the \n+     * returned value by 2.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The sample must contain at least 2 observations.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats StatisticalSummary describing sample data\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double tTest(double mu, StatisticalSummary sampleStats)\n+    throws IllegalArgumentException, MathException {\n+        if ((sampleStats == null) || (sampleStats.getN() < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(), sampleStats.getN());\n+    }\n+\n+     /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * two-sided t-test</a> evaluating the null hypothesis that the mean of the population from\n+     * which the dataset described by <code>stats</code> is drawn equals <code>mu</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis can be \n+     * rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at\n+     * the 95% level, use <br><code>tTest(mu, sampleStats, 0.05) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>\n+     * at the 99% level, first verify that the measured sample mean is less \n+     * than <code>mu</code> and then use \n+     * <br><code>tTest(mu, sampleStats, 0.005) </code>\n+     * </li></ol>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the one-sample \n+     * parametric t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The sample must include at least 2 observations.\n+     * </li></ul>\n+     *\n+     * @param mu constant value to compare sample mean against\n+     * @param sampleStats StatisticalSummary describing sample data values\n+     * @param alpha significance level of the test\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public boolean tTest( double mu, StatisticalSummary sampleStats, double alpha)\n+    throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (tTest(mu, sampleStats) < alpha);\n+    }\n+\n+    /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the input arrays.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the two means are\n+     * equal in favor of the two-sided alternative that they are different. \n+     * For a one-sided test, divide the returned value by 2.\n+     * <p>\n+     * If the <code>equalVariances</code> parameter is <code>false,</code>\n+     * the test does not assume that the underlying popuation variances are\n+     * equal  and it uses approximated degrees of freedom computed from the \n+     * sample data to compute the p-value.  In this case, formula (1) for the\n+     * {@link #t(double[], double[], boolean)} statistic is used\n+     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n+     * as described \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n+     * here.</a>\n+     * <p>\n+     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n+     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n+     * sample sizes minus 2 is used as the degrees of freedom.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 2.\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @param equalVariances are sample variances assumed to be equal?\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double tTest(double[] sample1, double[] sample2, boolean equalVariances)\n+    throws IllegalArgumentException, MathException {\n+        if ((sample1 == null) || (sample2 == null ||\n+                Math.min(sample1.length, sample2.length) < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data\");\n+        }\n+        return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),\n+                StatUtils.variance(sample2), (double) sample1.length, \n+                (double) sample2.length, equalVariances);\n+    }\n+\n+     /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code> \n+     * and <code>sample2</code> are drawn from populations with the same mean, \n+     * with significance level <code>alpha</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis that the means are\n+     * equal can be rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * If the <code>equalVariances</code> parameter is <code>false,</code>\n+     * the test does not assume that the underlying popuation variances are\n+     * equal  and it uses approximated degrees of freedom computed from the \n+     * sample data to compute the p-value.  In this case, formula (1) for the\n+     * {@link #t(double[], double[], boolean)} statistic is used\n+     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n+     * as described \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n+     * here.</a>\n+     * <p>\n+     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n+     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n+     * sample sizes minus 2 is used as the degrees of freedom.\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n+     * the 95% level, under the assumption of equal subpopulation variances, \n+     * use <br><code>tTest(sample1, sample2, 0.05, true) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n+     * at the 99% level without assuming equal variances, first verify that the measured \n+     * mean of <code>sample 1</code> is less than the mean of <code>sample 2</code>\n+     * and then use <br><code>tTest(sample1, sample2, 0.005, false) </code>\n+     * </li></ol>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The observed array lengths must both be at least 2.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul>\n+     *\n+     * @param sample1 array of sample data values\n+     * @param sample2 array of sample data values\n+     * @param alpha significance level of the test\n+     * @param equalVariances are sample variances assumed to be equal?\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    public boolean tTest(double[] sample1, double[] sample2, double alpha, \n+            boolean equalVariances)\n+    throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (tTest(sample1, sample2, equalVariances) < alpha);\n+    }\n+\n+     /**\n+     * Returns the <i>observed significance level</i>, or \n+     * <a href=\"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a two-sample, two-tailed t-test \n+     * comparing the means of the datasets described by two Univariates.\n+     * <p>\n+     * The number returned is the smallest significance level\n+     * at which one can reject the null hypothesis that the two means are\n+     * equal in favor of the two-sided alternative that they are different. \n+     * For a one-sided test, divide the returned value by 2.\n+     * <p>\n+     * If the <code>equalVariances</code> parameter is <code>false,</code>\n+     * the test does not assume that the underlying popuation variances are\n+     * equal  and it uses approximated degrees of freedom computed from the \n+     * sample data to compute the p-value.  In this case, formula (1) for the\n+     * {@link #t(double[], double[], boolean)} statistic is used\n+     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n+     * as described \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n+     * here.</a>\n+     * <p>\n+     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n+     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n+     * sample sizes minus 2 is used as the degrees of freedom.\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the p-value depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 2 observations.\n+     * </li></ul>\n+     *\n+     * @param sampleStats1  StatisticalSummary describing data from the first sample\n+     * @param sampleStats2  StatisticalSummary describing data from the second sample\n+     * @param equalVariances  are sample variances assumed to be equal?\n+     * @return p-value for t-test\n+     * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2, \n+            boolean equalVariances)\n+    throws IllegalArgumentException, MathException {\n+        if ((sampleStats1 == null) || (sampleStats2 == null ||\n+                Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {\n+            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n+        }\n+        return tTest(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),\n+                sampleStats2.getVariance(), (double) sampleStats1.getN(), \n+                (double) sampleStats2.getN(), equalVariances);\n+    }\n+\n+    /**\n+     * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n+     * two-sided t-test</a> evaluating the null hypothesis that <code>sampleStats1</code>\n+     * and <code>sampleStats2</code> describe datasets drawn from populations with the \n+     * same mean, with significance level <code>alpha</code>.\n+     * <p>\n+     * Returns <code>true</code> iff the null hypothesis that the means are\n+     * equal can be rejected with confidence <code>1 - alpha</code>.  To \n+     * perform a 1-sided test, use <code>alpha / 2</code>\n+     * <p>\n+     * If the <code>equalVariances</code> parameter is <code>false,</code>\n+     * the test does not assume that the underlying popuation variances are\n+     * equal  and it uses approximated degrees of freedom computed from the \n+     * sample data to compute the p-value.  In this case, formula (1) for the\n+     * {@link #t(double[], double[], boolean)} statistic is used\n+     * and the Welch-Satterthwaite approximation to the degrees of freedom is used, \n+     * as described \n+     * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm\">\n+     * here.</a>\n+     * <p>\n+     * If <code>equalVariances</code> is <code>true</code>, a pooled variance\n+     * estimate is used to compute the t-statistic (formula (2)) and the sum of the \n+     * sample sizes minus 2 is used as the degrees of freedom.\n+     * <p>\n+     * <strong>Examples:</strong><br><ol>\n+     * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at\n+     * the 95% level under the assumption of equal subpopulation variances, use \n+     * <br><code>tTest(sampleStats1, sampleStats2, 0.05, true) </code>\n+     * </li>\n+     * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>\n+     * at the 99% level without assuming that subpopulation variances are equal, \n+     * first verify that the measured mean of  <code>sample 1</code> is less than \n+     * the mean of <code>sample 2</code> and then use \n+     * <br><code>tTest(sampleStats1, sampleStats2, 0.005, false) </code>\n+     * </li></ol>\n+     * <p>\n+     * <strong>Usage Note:</strong><br>\n+     * The validity of the test depends on the assumptions of the parametric\n+     * t-test procedure, as discussed \n+     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n+     * here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>The datasets described by the two Univariates must each contain\n+     * at least 2 observations.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul>\n+     *\n+     * @param sampleStats1 StatisticalSummary describing sample data values\n+     * @param sampleStats2 StatisticalSummary describing sample data values\n+     * @param alpha significance level of the test\n+     * @param equalVariances  are sample variances assumed to be equal?\n+     * @return true if the null hypothesis can be rejected with \n+     * confidence 1 - alpha\n+     * @throws IllegalArgumentException if the preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    public boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2,\n+            double alpha, boolean equalVariances)\n+    throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n+        }\n+        return (tTest(sampleStats1, sampleStats2, equalVariances) < alpha);\n+    }\n+    \n     //----------------------------------------------- Protected methods \n \n     /**\n         ((v1 * v1) / (n1 * n1 * (n1 - 1d)) + (v2 * v2) /\n                 (n2 * n2 * (n2 - 1d)));\n     }\n-    \n-    /* (non-Javadoc)\n-     * @see org.apache.commons.math.stat.inference.TTest#pairedT(double[], double[])\n-     */\n-    public double pairedT(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException, MathException {\n-        if ((sample1 == null) || (sample2 == null ||\n-                Math.min(sample1.length, sample2.length) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n-        double meanDifference = StatUtils.meanDifference(sample1, sample2);\n-        return t(meanDifference, 0,  \n-                StatUtils.varianceDifference(sample1, sample2, meanDifference),\n-                (double) sample1.length);\n-    }\n-\n-    /* (non-Javadoc)\n-     * @see org.apache.commons.math.stat.inference.TTest#pairedTTest(double[], double[])\n-     */\n-    public double pairedTTest(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException, MathException {\n-        double meanDifference = StatUtils.meanDifference(sample1, sample2);\n-        return tTest(meanDifference, 0, \n-                StatUtils.varianceDifference(sample1, sample2, meanDifference), \n-                (double) sample1.length);\n-    }\n-\n-    /**\n-     * Performs a paired t-test</a> evaluating that null hypothesis that the \n-     * mean of the paired differences between <code>sample1</code> and\n-     * <code>sample2</code> is 0 in favor of the two-sided alternative that the \n-     * mean paired difference is not equal to 0, with significance level \n-     * <code>alpha</code>.\n-     * <p>\n-     * Returns <code>true</code> iff the null hypothesis can be rejected with \n-     * confidence <code>1 - alpha</code>.  To perform a 1-sided test, use \n-     * <code>alpha / 2</code>\n-     * <p>\n-     * <strong>Usage Note:</strong><br>\n-     * The validity of the test depends on the assumptions of the parametric\n-     * t-test procedure, as discussed \n-     * <a href=\"http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html\">\n-     * here</a>\n-     * <p>\n-     * <strong>Preconditions</strong>: <ul>\n-     * <li>The input array lengths must be the same and their common length \n-     * must be at least 2.\n-     * </li>\n-     * <li> <code> 0 < alpha < 0.5 </code>\n-     * </li></ul>\n-     *\n-     * @param sample1 array of sample data values\n-     * @param sample2 array of sample data values\n-     * @param alpha significance level of the test\n-     * @return true if the null hypothesis can be rejected with \n-     * confidence 1 - alpha\n-     * @throws IllegalArgumentException if the preconditions are not met\n-     * @throws MathException if an error occurs performing the test\n-     */\n-    public boolean pairedTTest(double[] sample1, double[] sample2, double alpha)\n-        throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n-        }\n-        return (pairedTTest(sample1, sample2) < alpha);\n-    }\n \n     /**\n      * Computes t test statistic for 1-sample t-test.\n     protected double t(double m, double mu, double v, double n) {\n         return (m - mu) / Math.sqrt(v / n);\n     }\n-\n+    \n     /**\n      * Computes t test statistic for 2-sample t-test.\n+     * If equalVariance is true,  the pooled variance\n+     * estimate is computed and used.\n      * \n      * @param m1 first sample mean\n      * @param m2 second sample mean\n      * @param n2 second sample n\n      * @return t test statistic\n      */\n-    protected double t(double m1, double m2,  double v1, double v2, double n1,double n2)  {\n-        return (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));\n-    }\n-\n-    /**\n-     * @param mu comparison constant\n-     * @param observed array of values\n-     * @return t statistic\n-     * @throws IllegalArgumentException if input array length is less than 2\n-     */\n-    public double t(double mu, double[] observed)\n-    throws IllegalArgumentException {\n-        if ((observed == null) || (observed.length < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n-        return t(StatUtils.mean(observed), mu, StatUtils.variance(observed), observed.length);\n-    }\n-\n-    /**\n-     * @param mu comparison constant\n-     * @param sampleStats StatisticalSummary holding sample summary statitstics\n-     * @return t statistic\n-     * @throws IllegalArgumentException if the precondition is not met\n-     */\n-    public double t(double mu, StatisticalSummary sampleStats)\n-    throws IllegalArgumentException {\n-        if ((sampleStats == null) || (sampleStats.getN() < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n-        return t(sampleStats.getMean(), mu, sampleStats.getVariance(), sampleStats.getN());\n-    }\n-\n-    /**\n-     * @param sample1 array of sample data values\n-     * @param sample2 array of sample data values\n-     * @return t-statistic\n-     * @throws IllegalArgumentException if the precondition is not met\n-     */\n-    public double t(double[] sample1, double[] sample2)\n-    throws IllegalArgumentException {\n-        if ((sample1 == null) || (sample2 == null ||\n-                Math.min(sample1.length, sample2.length) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n-        return t(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),\n-                StatUtils.variance(sample2),  (double) sample1.length, (double) sample2.length);\n-    }\n-\n-    /**\n-     * @param sampleStats1 StatisticalSummary describing data from the first sample\n-     * @param sampleStats2 StatisticalSummary describing data from the second sample\n-     * @return t statistic\n-     * @throws IllegalArgumentException if the precondition is not met\n-     */\n-    public double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)\n-    throws IllegalArgumentException {\n-        if ((sampleStats1 == null) ||\n-                (sampleStats2 == null ||\n-                        Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n-        return t(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),\n-                sampleStats2.getVariance(), (double) sampleStats1.getN(), (double) sampleStats2.getN());\n-    }\n-\n+    protected double t(double m1, double m2,  double v1, double v2, double n1,\n+            double n2, boolean equalVariances)  {\n+        if (equalVariances) {\n+           double pooledVariance = ((n1  - 1) * v1 + (n2 -1) * v2 ) / (n1 + n2 - 2); \n+           return (m1 - m2) / Math.sqrt(pooledVariance * (1d / n1 + 1d / n2));\n+        } else {\n+        \treturn (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));\n+        }\n+    }\n+    \n     /**\n      * Computes p-value for 2-sided, 1-sample t-test.\n      * \n \n     /**\n      * Computes p-value for 2-sided, 2-sample t-test.\n+     * If equalVariances is true, the sum of the sample sizes minus 2\n+     * is used as df; otherwise df is approximated from the data.\n      * \n      * @param m1 first sample mean\n      * @param m2 second sample mean\n      * @param v2 second sample variance\n      * @param n1 first sample n\n      * @param n2 second sample n\n+     * @param equalVariances  are variances assumed equal?\n      * @return p-value\n      * @throws MathException if an error occurs computing the p-value\n      */\n-    protected double tTest(double m1, double m2, double v1, double v2, double n1, double n2)\n+    protected double tTest(double m1, double m2, double v1, double v2, \n+            double n1, double n2, boolean equalVariances)\n     throws MathException {\n-        double t = Math.abs(t(m1, m2, v1, v2, n1, n2));\n+        double t = Math.abs(t(m1, m2, v1, v2, n1, n2, equalVariances));\n+        double degreesOfFreedom = 0;\n+        if (equalVariances) {\n+            degreesOfFreedom = (double) (n1 + n2 - 2);\n+        } else {\n+        \tdegreesOfFreedom= df(v1, v2, n1, n2);\n+        }\n         TDistribution tDistribution =\n-            DistributionFactory.newInstance().createTDistribution(df(v1, v2, n1, n2));\n+            DistributionFactory.newInstance().createTDistribution(degreesOfFreedom);\n         return 1.0 - tDistribution.cumulativeProbability(-t, t);\n-    }\n-\n-    /**\n-     * @param mu constant value to compare sample mean against\n-     * @param sample array of sample data values\n-     * @return p-value\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    public double tTest(double mu, double[] sample)\n-    throws IllegalArgumentException, MathException {\n-        if ((sample == null) || (sample.length < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n-        return tTest( StatUtils.mean(sample), mu, StatUtils.variance(sample), sample.length);\n-    }\n-\n-    /**\n-     * @param mu constant value to compare sample mean against\n-     * @param sample array of sample data values\n-     * @param alpha significance level of the test\n-     * @return p-value\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    public boolean tTest(double mu, double[] sample, double alpha)\n-    throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n-        }\n-        return (tTest(mu, sample) < alpha);\n-    }\n-\n-    /**\n-     * @param mu constant value to compare sample mean against\n-     * @param sampleStats StatisticalSummary describing sample data\n-     * @return p-value\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    public double tTest(double mu, StatisticalSummary sampleStats)\n-    throws IllegalArgumentException, MathException {\n-        if ((sampleStats == null) || (sampleStats.getN() < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n-        return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(), sampleStats.getN());\n-    }\n-\n-    /**\n-     * @param mu constant value to compare sample mean against\n-     * @param sampleStats StatisticalSummary describing sample data values\n-     * @param alpha significance level of the test\n-     * @return p-value\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    public boolean tTest( double mu, StatisticalSummary sampleStats,double alpha)\n-    throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n-        }\n-        return (tTest(mu, sampleStats) < alpha);\n-    }\n-\n-    /**\n-     *\n-     * @param sample1 array of sample data values\n-     * @param sample2 array of sample data values\n-     * @return tTest p-value\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    public double tTest(double[] sample1, double[] sample2)\n-    throws IllegalArgumentException, MathException {\n-        if ((sample1 == null) || (sample2 == null ||\n-                Math.min(sample1.length, sample2.length) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data\");\n-        }\n-        return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),\n-                StatUtils.variance(sample2), (double) sample1.length, (double) sample2.length);\n-    }\n-\n-    /**\n-     * @param sample1 array of sample data values\n-     * @param sample2 array of sample data values\n-     * @param alpha significance level\n-     * @return true if the null hypothesis can be rejected with \n-     *     confidence 1 - alpha\n-     * @throws IllegalArgumentException if the preconditions are not met\n-     * @throws MathException if an error occurs performing the test\n-     */\n-    public boolean tTest(double[] sample1, double[] sample2, double alpha)\n-    throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n-        }\n-        return (tTest(sample1, sample2) < alpha);\n-    }\n-\n-    /**\n-     * @param sampleStats1 StatisticalSummary describing data from the first sample\n-     * @param sampleStats2 StatisticalSummary describing data from the second sample\n-     * @return p-value for t-test\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    public double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)\n-    throws IllegalArgumentException, MathException {\n-        if ((sampleStats1 == null) || (sampleStats2 == null ||\n-                Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {\n-            throw new IllegalArgumentException(\"insufficient data for t statistic\");\n-        }\n-        return tTest(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),\n-                sampleStats2.getVariance(), (double) sampleStats1.getN(), (double) sampleStats2.getN());\n-    }\n-\n-    /**\n-     * @param sampleStats1 StatisticalSummary describing sample data values\n-     * @param sampleStats2 StatisticalSummary describing sample data values\n-     * @param alpha significance level of the test\n-     * @return true if the null hypothesis can be rejected with \n-     *     confidence 1 - alpha\n-     * @throws IllegalArgumentException if the preconditions are not met\n-     * @throws MathException if an error occurs performing the test\n-     */\n-    public boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2,\n-            double alpha)\n-    throws IllegalArgumentException, MathException {\n-        if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n-        }\n-        return (tTest(sampleStats1, sampleStats2) < alpha);\n-    }\n-\n+    }   \n }\n--- a/src/test/org/apache/commons/math/stat/inference/TTestTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/TTestTest.java\n /**\n  * Test cases for the TTestImpl class.\n  *\n- * @version $Revision: 1.4 $ $Date: 2004/06/01 00:44:24 $\n+ * @version $Revision: 1.5 $ $Date: 2004/06/02 13:08:55 $\n  */\n \n public final class TTestTest extends TestCase {\n \n     private TTestImpl testStatistic = new TTestImpl();\n+    \n+    private double[] tooShortObs = { 1.0 };\n+    private double[] nullObserved = null;\n+    private double[] emptyObs = {};\n+    private SummaryStatistics emptyStats = SummaryStatistics.newInstance();  \n+    private SummaryStatistics nullStats = null;   \n+    SummaryStatistics tooShortStats = null;  \n \n     public TTestTest(String name) {\n         super(name);\n     }\n \n     public void setUp() {\n+        tooShortStats = SummaryStatistics.newInstance();\n+        tooShortStats.addValue(0d);\n     }\n \n     public static Test suite() {\n         return suite;\n     }\n \n-    public void testT() throws Exception {\n+    public void testOneSampleT() throws Exception {\n         double[] observed =\n             {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0,  88.0, 98.0, 94.0, 101.0, 92.0, 95.0 };\n         double mu = 100.0;\n         assertEquals(\"t statistic\", -2.82, testStatistic.t(mu, observed), 10E-3);\n         assertEquals(\"t statistic\", -2.82, testStatistic.t(mu, sampleStats), 10E-3);\n \n-        double[] nullObserved = null;\n         try {\n             testStatistic.t(mu, nullObserved);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n             // expected\n         }\n \n-        SummaryStatistics nullStats = null;   \n         try {\n             testStatistic.t(mu, nullStats);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n             // expected\n         }\n \n-        double[] emptyObs = {};\n         try {\n             testStatistic.t(mu, emptyObs);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n-\n-        SummaryStatistics emptyStats =SummaryStatistics.newInstance();   \n+ \n         try {\n             testStatistic.t(mu, emptyStats);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n             // expected\n         }\n \n-        double[] tooShortObs = { 1.0 };\n         try {\n             testStatistic.t(mu, tooShortObs);\n             fail(\"insufficient data to compute t statistic, IllegalArgumentException expected\");\n            // expected\n         }  \n \n-        SummaryStatistics tooShortStats = SummaryStatistics.newInstance();     \n-        tooShortStats.addValue(0d);\n         try {\n             testStatistic.t(mu, tooShortStats);\n             fail(\"insufficient data to compute t statistic, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // exptected\n         }  \n-\n+    }\n+    \n+    public void testOneSampleTTest() throws Exception {\n         double[] oneSidedP =\n             {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, 6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d };\n         SummaryStatistics oneSidedPStats = SummaryStatistics.newInstance();    \n         } catch (IllegalArgumentException ex) {\n             // expected\n         }  \n-\n+        \n+    }\n+    \n+    public void testTwoSampleTHeterscedastic() throws Exception {\n         double[] sample1 = { 7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d };\n         double[] sample2 = { -1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d };\n         SummaryStatistics sampleStats1 = SummaryStatistics.newInstance();  \n         }\n          \n         // Target comparison values computed using R version 1.8.1 (Linux version)\n-        assertEquals(\"two sample t stat\", 1.6037, testStatistic.t(sample1, sample2), 10E-4);\n-        assertEquals(\"two sample t stat\", 1.6037, testStatistic.t(sampleStats1, sampleStats2), 10E-4);\n-        assertEquals(\"two sample p value\", 0.0644, testStatistic.tTest(sample1, sample2) / 2d, 10E-4);\n-        assertEquals(\"two sample p value\", 0.0644, testStatistic.tTest(sampleStats1, sampleStats2) / 2d, 10E-4);\n-        \n-        assertTrue(\"two sample t-test reject\", testStatistic.tTest(sample1, sample2, 0.2));\n-        assertTrue(\"two sample t-test reject\", testStatistic.tTest(sampleStats1, sampleStats2, 0.2));\n-        assertTrue(\"two sample t-test accept\", !testStatistic.tTest(sample1, sample2, 0.1));\n-        assertTrue(\"two sample t-test accept\", !testStatistic.tTest(sampleStats1, sampleStats2, 0.1));\n+        assertEquals(\"two sample heteroscedastic t stat\", 1.603717, \n+                testStatistic.t(sample1, sample2, false), 1E-6);\n+        assertEquals(\"two sample heteroscedastic t stat\", 1.603717, \n+                testStatistic.t(sampleStats1, sampleStats2, false), 1E-6);\n+        assertEquals(\"two sample heteroscedastic p value\", 0.1288394, \n+                testStatistic.tTest(sample1, sample2, false), 1E-7);\n+        assertEquals(\"two sample heteroscedastic p value\", 0.1288394, \n+                testStatistic.tTest(sampleStats1, sampleStats2, false), 1E-7);     \n+        assertTrue(\"two sample heteroscedastic t-test reject\", \n+                testStatistic.tTest(sample1, sample2, 0.2, false));\n+        assertTrue(\"two sample heteroscedastic t-test reject\", \n+                testStatistic.tTest(sampleStats1, sampleStats2, 0.2, false));\n+        assertTrue(\"two sample heteroscedastic t-test accept\", \n+                !testStatistic.tTest(sample1, sample2, 0.1, false));\n+        assertTrue(\"two sample heteroscedastic t-test accept\", \n+                !testStatistic.tTest(sampleStats1, sampleStats2, 0.1, false));\n      \n         try {\n-            testStatistic.tTest(sample1, sample2, 95);\n+            testStatistic.tTest(sample1, sample2, .95, false);\n             fail(\"alpha out of range, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // exptected\n         } \n         \n         try {\n-            testStatistic.tTest(sampleStats1, sampleStats2, 95);\n+            testStatistic.tTest(sampleStats1, sampleStats2, .95, false);\n             fail(\"alpha out of range, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n             // expected \n         }  \n         \n         try {\n-            testStatistic.tTest(sample1, tooShortObs, .01);\n-            fail(\"insufficient data, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }  \n-        \n-        try {\n-            testStatistic.tTest(sampleStats1, tooShortStats, .01);\n-            fail(\"insufficient data, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }  \n-        \n-        try {\n-            testStatistic.tTest(sample1, tooShortObs);\n+            testStatistic.tTest(sample1, tooShortObs, .01, false);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            testStatistic.tTest(sampleStats1, tooShortStats, .01, false);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            testStatistic.tTest(sample1, tooShortObs, false);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n            // expected\n         }  \n         \n         try {\n-            testStatistic.tTest(sampleStats1, tooShortStats);\n-            fail(\"insufficient data, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }  \n-        \n-        try {\n-            testStatistic.t(sample1, tooShortObs);\n-            fail(\"insufficient data, IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }\n-        \n-        try {\n-            testStatistic.t(sampleStats1, tooShortStats);\n+            testStatistic.tTest(sampleStats1, tooShortStats, false);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            testStatistic.t(sample1, tooShortObs, false);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            testStatistic.t(sampleStats1, tooShortStats, false);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n            // expected\n         }\n+    }\n+    public void testTwoSampleTHomoscedastic() throws Exception {\n+        double[] sample1 ={2, 4, 6, 8, 10};\n+        double[] sample2 = {4, 6, 8, 10, 16};\n+        SummaryStatistics sampleStats1 = SummaryStatistics.newInstance();  \n+        for (int i = 0; i < sample1.length; i++) {\n+            sampleStats1.addValue(sample1[i]);\n+        }\n+        SummaryStatistics sampleStats2 = SummaryStatistics.newInstance();    \n+        for (int i = 0; i < sample2.length; i++) {\n+            sampleStats2.addValue(sample2[i]);\n+        }\n+        \n+        // Target comparison values computed using R version 1.8.1 (Linux version)\n+       assertEquals(\"two sample homoscedastic t stat\", -1.120897, \n+              testStatistic.t(sample1, sample2, true), 10E-6);\n+        assertEquals(\"two sample homoscedastic p value\", 0.2948490, \n+                testStatistic.tTest(sampleStats1, sampleStats2, true), 1E-6);     \n+        assertTrue(\"two sample homoscedastic t-test reject\", \n+                testStatistic.tTest(sample1, sample2, 0.3, true));\n+        assertTrue(\"two sample homoscedastic t-test accept\", \n+                !testStatistic.tTest(sample1, sample2, 0.2, true));\n     }\n     \n     public void testSmallSamples() throws Exception {\n         double[] sample2 = {4d, 5d};        \n         \n         // Target values computed using R, version 1.8.1 (linux version)\n-        assertEquals(-2.2361, testStatistic.t(sample1, sample2), 1E-4);\n-        assertEquals(0.1987, testStatistic.tTest(sample1, sample2), 1E-4);\n+        assertEquals(-2.2361, testStatistic.t(sample1, sample2, false), 1E-4);\n+        assertEquals(0.1987, testStatistic.tTest(sample1, sample2, false), 1E-4);\n     }\n     \n     public void testPaired() throws Exception {", "timestamp": 1086181735, "metainfo": ""}