{"sha": "16727ebdc33f38d0a37aee0e87700500cc272a8b", "log": "Add missing @Override marker  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public BicubicSplineInterpolatingFunction interpolate(final double[] xval,\n                                                           final double[] yval,\n                                                           final double[][] fval)\n--- a/src/main/java/org/apache/commons/math/dfp/DfpDec.java\n+++ b/src/main/java/org/apache/commons/math/dfp/DfpDec.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public Dfp newInstance() {\n         return new DfpDec(getField());\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public Dfp newInstance(final byte x) {\n         return new DfpDec(getField(), x);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public Dfp newInstance(final int x) {\n         return new DfpDec(getField(), x);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public Dfp newInstance(final long x) {\n         return new DfpDec(getField(), x);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public Dfp newInstance(final double x) {\n         return new DfpDec(getField(), x);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public Dfp newInstance(final Dfp d) {\n \n         // make sure we don't mix number with different precision\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public Dfp newInstance(final String s) {\n         return new DfpDec(getField(), s);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public Dfp newInstance(final byte sign, final byte nans) {\n         return new DfpDec(getField(), sign, nans);\n     }\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected int round(int in) {\n \n         int msb = mant[mant.length-1];\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public Dfp nextAfter(Dfp x) {\n \n         final String trapName = \"nextAfter\";\n--- a/src/main/java/org/apache/commons/math/exception/util/DummyLocalizable.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/DummyLocalizable.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public String toString() {\n         return source;\n     }\n--- a/src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java\n      * @param current Best point in the current iteration.\n      * @return {@code true} if the algorithm has converged.\n      */\n+    @Override\n     public boolean converged(final int iteration,\n                              final RealPointValuePair previous,\n                              final RealPointValuePair current) {\n--- a/src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java\n      * @param current Best point in the current iteration.\n      * @return {@code true} if the algorithm has converged.\n      */\n+    @Override\n     public boolean converged(final int iteration,\n                              final RealPointValuePair previous,\n                              final RealPointValuePair current) {\n--- a/src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java\n      * @param current Best point in the current iteration.\n      * @return {@code true} if the algorithm has converged.\n      */\n+    @Override\n     public boolean converged(final int iteration,\n                              final VectorialPointValuePair previous,\n                              final VectorialPointValuePair current) {\n--- a/src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java\n      * @param current Best point in the current iteration.\n      * @return {@code true} if the algorithm has converged.\n      */\n+    @Override\n     public boolean converged(final int iteration,\n                              final VectorialPointValuePair previous,\n                              final VectorialPointValuePair current) {\n--- a/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected RealPointValuePair doOptimize()\n         throws FunctionEvaluationException {\n \n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f,\n                                             final double[] target, final double[] weights,\n                                             final double[] startPoint)\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public RealPointValuePair optimize(final DifferentiableMultivariateRealFunction f,\n                                        final GoalType goalType,\n                                        final double[] startPoint)\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected UnivariateRealPointValuePair doOptimize()\n         throws FunctionEvaluationException {\n         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n--- a/src/main/java/org/apache/commons/math/random/AbstractWell.java\n+++ b/src/main/java/org/apache/commons/math/random/AbstractWell.java\n      * generator built with the same seed.</p>\n      * @param seed the initial seed (32 bits integer)\n      */\n+    @Override\n     public void setSeed(final int seed) {\n         setSeed(new int[] { seed });\n     }\n      * @param seed the initial seed (32 bits integers array), if null\n      * the seed of the generator will be related to the current time\n      */\n+    @Override\n     public void setSeed(final int[] seed) {\n \n         if (seed == null) {\n      * generator built with the same seed.</p>\n      * @param seed the initial seed (64 bits integer)\n      */\n+    @Override\n     public void setSeed(final long seed) {\n         setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected abstract int next(final int bits);\n \n }\n--- a/src/main/java/org/apache/commons/math/random/Well1024a.java\n+++ b/src/main/java/org/apache/commons/math/random/Well1024a.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected int next(final int bits) {\n \n         final int indexRm1 = iRm1[index];\n--- a/src/main/java/org/apache/commons/math/random/Well19937a.java\n+++ b/src/main/java/org/apache/commons/math/random/Well19937a.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected int next(final int bits) {\n \n         final int indexRm1 = iRm1[index];\n--- a/src/main/java/org/apache/commons/math/random/Well19937c.java\n+++ b/src/main/java/org/apache/commons/math/random/Well19937c.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected int next(final int bits) {\n \n         final int indexRm1 = iRm1[index];\n--- a/src/main/java/org/apache/commons/math/random/Well44497a.java\n+++ b/src/main/java/org/apache/commons/math/random/Well44497a.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected int next(final int bits) {\n \n         final int indexRm1 = iRm1[index];\n--- a/src/main/java/org/apache/commons/math/random/Well44497b.java\n+++ b/src/main/java/org/apache/commons/math/random/Well44497b.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected int next(final int bits) {\n \n         // compute raw value given by WELL44497a generator\n--- a/src/main/java/org/apache/commons/math/random/Well512a.java\n+++ b/src/main/java/org/apache/commons/math/random/Well512a.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected int next(final int bits) {\n \n         final int indexRm1 = iRm1[index];\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public String toString() {\n         final StringBuilder sb = new StringBuilder();\n         for (int i = 0; i < dimension; i++) {\n--- a/src/test/java/org/apache/commons/math/dfp/Decimal10.java\n+++ b/src/test/java/org/apache/commons/math/dfp/Decimal10.java\n         super(factory, sign, nans);\n     }\n \n+    @Override\n     public Dfp newInstance() {\n         return new Decimal10(getField());\n     }\n \n+    @Override\n     public Dfp newInstance(final byte x) {\n         return new Decimal10(getField(), x);\n     }\n \n+    @Override\n     public Dfp newInstance(final int x) {\n         return new Decimal10(getField(), x);\n     }\n \n+    @Override\n     public Dfp newInstance(final long x) {\n         return new Decimal10(getField(), x);\n     }\n \n+    @Override\n     public Dfp newInstance(final double x) {\n         return new Decimal10(getField(), x);\n     }\n \n+    @Override\n     public Dfp newInstance(final Dfp d) {\n         return new Decimal10(d);\n     }\n \n+    @Override\n     public Dfp newInstance(final String s) {\n         return new Decimal10(getField(), s);\n     }\n \n+    @Override\n     public Dfp newInstance(final byte sign, final byte nans) {\n         return new Decimal10(getField(), sign, nans);\n     }\n \n+    @Override\n     protected int getDecimalDigits() {\n         return 10;\n     }\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java\n         assertEquals(expectedValue(), product.evaluate(testArray, unitWeightsArray, 0, testArray.length), getTolerance());\n     }\n     \n+    @Override\n     protected void checkClearValue(StorelessUnivariateStatistic statistic){\n         assertEquals(1, statistic.getResult(), 0);\n     }\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java\n         assertTrue(Double.isNaN(sum.getResult()));\n     }\n     \n+    @Override\n     protected void checkClearValue(StorelessUnivariateStatistic statistic){\n         assertEquals(0, statistic.getResult(), 0);\n     }\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java\n         assertTrue(Double.isNaN(sumSq.getResult()));\n     }\n     \n+    @Override\n     protected void checkClearValue(StorelessUnivariateStatistic statistic){\n         assertEquals(0, statistic.getResult(), 0);\n     }\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java\n         assertEquals(expectedValue(), sum.evaluate(testArray, unitWeightsArray, 0, testArray.length), getTolerance());\n     }\n     \n+    @Override\n     protected void checkClearValue(StorelessUnivariateStatistic statistic){\n         assertEquals(0, statistic.getResult(), 0);\n     }", "timestamp": 1285897812, "metainfo": ""}