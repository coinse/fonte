{"sha": "e310cc19b7192f5bcb792e1a055b75df754c4956", "log": "Javadoc link to reference. Remark on numerical accuracy added as code comment. Added unit tests. Added normalized sinc function.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/function/Sinc.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sinc.java\n import org.apache.commons.math.util.FastMath;\n \n /**\n- * The sinc function, {code sin(x)/x}.\n- * Returns {code 1} if {code |x| < 1e-9}.\n+ * <a href=\"http://en.wikipedia.org/wiki/Sinc_function\">Sinc</a> function.\n  *\n  * @version $Id$\n  * @since 3.0\n  */\n public class Sinc implements UnivariateRealFunction {\n+    /** For normalized sinc function. */\n+    private final boolean normalized;\n+\n+    /**\n+     * The sinc function, {@code sin(x) / x}.\n+     */\n+    public Sinc() {\n+        this(false);\n+    }\n+\n+    /**\n+     * Instantiates the sinc function.\n+     *\n+     * @param normalized If {@code true}, the function is\n+     * <code> sin(&pi;x) / &pi;x</code>, otherwise {@code sin(x) / x}.\n+     */\n+    public Sinc(boolean normalized) {\n+        this.normalized = normalized;\n+    }\n+\n     /** {@inheritDoc} */\n     public double value(double x) {\n+        if (normalized) {\n+            final double piTimesX = Math.PI * x;\n+            return sinc(piTimesX);\n+        } else {\n+            return sinc(x);\n+        }\n+    }\n+\n+    /**\n+     * @param x Argument.\n+     * @return {@code sin(x) / x}.\n+     */\n+    private static double sinc(double x) {\n+        // The direct assignment to 1 for values below 1e-9 is an efficiency\n+        // optimization on the ground that the result of the full computation\n+        // is indistinguishable from 1 due to the limited accuracy of the\n+        // floating point representation.\n         return FastMath.abs(x) < 1e-9 ? 1 : FastMath.sin(x) / x;\n     }\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/analysis/function/SincTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n+\n+import org.junit.Test;\n+import org.junit.Assert;\n+\n+public class SincTest {\n+\n+   @Test\n+   public void testShortcut() {\n+       final Sinc s = new Sinc();\n+       final UnivariateRealFunction f = new UnivariateRealFunction() {\n+               public double value(double x) {\n+                   return FastMath.sin(x) / x;\n+               }\n+           };\n+\n+       for (double x = 1e-30; x < 1e10; x *= 5) {\n+           final double fX = f.value(x);\n+           final double sX = s.value(x);\n+           Assert.assertEquals(\"x=\" + x, fX, sX, 0);\n+       }\n+   }\n+\n+   @Test\n+   public void testCrossings() {\n+       final Sinc s = new Sinc(true);\n+       final int numCrossings = 1000;\n+       final double tol = 2e-16;\n+       for (int i = 1; i <= numCrossings; i++) {\n+           Assert.assertEquals(\"i=\" + i, 0, s.value(i), tol);\n+       }\n+   }\n+\n+   @Test\n+   public void testZero() {\n+       final Sinc s = new Sinc();\n+       Assert.assertEquals(1d, s.value(0), 0);\n+   }\n+\n+   @Test\n+   public void testEuler() {\n+       final Sinc s = new Sinc();\n+       final double x = 123456.789;\n+       double prod = 1;\n+       double xOverPow2 = x / 2;\n+       while (xOverPow2 > 0) {\n+           prod *= FastMath.cos(xOverPow2);\n+           xOverPow2 /= 2;\n+       }\n+       Assert.assertEquals(prod, s.value(x), 1e-13);\n+   }\n+}", "timestamp": 1318161880, "metainfo": ""}