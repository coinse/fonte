{"sha": "715a5dc2adfbbf3cb9321d32df577dbe93055ee3", "log": "improved test coverage  ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n  */\n package org.apache.commons.math.stat.descriptive;\n \n+import java.util.Locale;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         return new DescriptiveStatistics();\n     }\n \n-    public void testSetterInjection() throws Exception {\n+    public void testSetterInjection() {\n         DescriptiveStatistics stats = createDescriptiveStatistics();\n         stats.addValue(1);\n         stats.addValue(3);\n         // Now lets try some new math\n         stats.setMeanImpl(new deepMean());\n         assertEquals(42, stats.getMean(), 1E-10);\n+    }\n+    \n+    public void testCopy() {\n+        DescriptiveStatistics stats = createDescriptiveStatistics();\n+        stats.addValue(1);\n+        stats.addValue(3);\n+        DescriptiveStatistics copy = new DescriptiveStatistics(stats);\n+        assertEquals(2, copy.getMean(), 1E-10);\n+        // Now lets try some new math\n+        stats.setMeanImpl(new deepMean());\n+        copy = stats.copy();\n+        assertEquals(42, copy.getMean(), 1E-10);\n+    }\n+    \n+    public void testWindowSize() {\n+        DescriptiveStatistics stats = createDescriptiveStatistics();\n+        stats.setWindowSize(300);\n+        for (int i = 0; i < 100; ++i) {\n+            stats.addValue(i + 1);\n+        }\n+        int refSum = (100 * 101) / 2;\n+        assertEquals(refSum / 100.0, stats.getMean(), 1E-10);\n+        assertEquals(300, stats.getWindowSize());\n+        try {\n+            stats.setWindowSize(-3);\n+            fail(\"an exception should have been thrown\");\n+        } catch (IllegalArgumentException iae) {\n+            // expected\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught: \" + e.getMessage());\n+        }\n+        assertEquals(300, stats.getWindowSize());\n+        stats.setWindowSize(50);\n+        assertEquals(50, stats.getWindowSize());\n+        int refSum2 = refSum - (50 * 51) / 2;\n+        assertEquals(refSum2 / 50.0, stats.getMean(), 1E-10);\n+    }\n+    \n+    public void testGetValues() {\n+        DescriptiveStatistics stats = createDescriptiveStatistics();\n+        for (int i = 100; i > 0; --i) {\n+            stats.addValue(i);\n+        }\n+        int refSum = (100 * 101) / 2;\n+        assertEquals(refSum / 100.0, stats.getMean(), 1E-10);\n+        double[] v = stats.getValues();\n+        for (int i = 0; i < v.length; ++i) {\n+            assertEquals(100.0 - i, v[i], 1.0e-10);\n+        }\n+        double[] s = stats.getSortedValues();\n+        for (int i = 0; i < s.length; ++i) {\n+            assertEquals(i + 1.0, s[i], 1.0e-10);\n+        }\n+        assertEquals(12.0, stats.getElement(88), 1.0e-10);\n+    }\n+    \n+    public void testToString() {\n+        DescriptiveStatistics stats = createDescriptiveStatistics();\n+        stats.addValue(1);\n+        stats.addValue(2);\n+        stats.addValue(3);\n+        Locale d = Locale.getDefault();\n+        Locale.setDefault(Locale.US);\n+        assertEquals(\"DescriptiveStatistics:\\n\" +\n+                     \"n: 3\\n\" +\n+                     \"min: 1.0\\n\" +\n+                     \"max: 3.0\\n\" +\n+                     \"mean: 2.0\\n\" +\n+                     \"std dev: 1.0\\n\" +\n+                     \"median: 2.0\\n\" +\n+                     \"skewness: 0.0\\n\" +\n+                     \"kurtosis: NaN\\n\",  stats.toString());\n+        Locale.setDefault(d);\n+    }\n+\n+    public void testShuffledStatistics() {\n+        // the purpose of this test is only to check the get/set methods\n+        // we are aware shuffling statistics like this is really not\n+        // something sensible to do in production ...\n+        DescriptiveStatistics reference = createDescriptiveStatistics();\n+        DescriptiveStatistics shuffled  = createDescriptiveStatistics();\n+\n+        UnivariateStatistic tmp = shuffled.getGeometricMeanImpl();\n+        shuffled.setGeometricMeanImpl(shuffled.getMeanImpl());\n+        shuffled.setMeanImpl(shuffled.getKurtosisImpl());\n+        shuffled.setKurtosisImpl(shuffled.getSkewnessImpl());\n+        shuffled.setSkewnessImpl(shuffled.getVarianceImpl());\n+        shuffled.setVarianceImpl(shuffled.getMaxImpl());\n+        shuffled.setMaxImpl(shuffled.getMinImpl());\n+        shuffled.setMinImpl(shuffled.getSumImpl());\n+        shuffled.setSumImpl(shuffled.getSumsqImpl());\n+        shuffled.setSumsqImpl(tmp);\n+\n+        for (int i = 100; i > 0; --i) {\n+            reference.addValue(i);\n+            shuffled.addValue(i);\n+        }\n+\n+        assertEquals(reference.getMean(),          shuffled.getGeometricMean(), 1.0e-10);\n+        assertEquals(reference.getKurtosis(),      shuffled.getMean(),          1.0e-10);\n+        assertEquals(reference.getSkewness(),      shuffled.getKurtosis(), 1.0e-10);\n+        assertEquals(reference.getVariance(),      shuffled.getSkewness(), 1.0e-10);\n+        assertEquals(reference.getMax(),           shuffled.getVariance(), 1.0e-10);\n+        assertEquals(reference.getMin(),           shuffled.getMax(), 1.0e-10);\n+        assertEquals(reference.getSum(),           shuffled.getMin(), 1.0e-10);\n+        assertEquals(reference.getSumsq(),         shuffled.getSum(), 1.0e-10);\n+        assertEquals(reference.getGeometricMean(), shuffled.getSumsq(), 1.0e-10);\n+\n     }\n     \n     public void testPercentileSetter() throws Exception {\n--- a/src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java\n package org.apache.commons.math.stat.descriptive;\n \n \n+import java.util.Locale;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         u.addValue(new double[] { 3, 4 });\n         assertEquals(2, u.getMean()[0], 1E-14);\n         assertEquals(3, u.getMean()[1], 1E-14);\n+        assertEquals(2, u.getDimension());\n     }\n     \n     public void testSetterIllegalState() throws Exception {\n         } catch (IllegalStateException ex) {\n             // expected\n         }\n+    }\n+\n+    public void testToString() throws DimensionMismatchException {\n+        MultivariateSummaryStatistics stats = createMultivariateSummaryStatistics(2, true);\n+        stats.addValue(new double[] {1, 3});\n+        stats.addValue(new double[] {2, 2});\n+        stats.addValue(new double[] {3, 1});\n+        Locale d = Locale.getDefault();\n+        Locale.setDefault(Locale.US);\n+        assertEquals(\"MultivariateSummaryStatistics:\\n\" +\n+                     \"n: 3\\n\" +\n+                     \"min: 1.0, 1.0\\n\" +\n+                     \"max: 3.0, 3.0\\n\" +\n+                     \"mean: 2.0, 2.0\\n\" +\n+                     \"geometric mean: 1.8171205928321394, 1.8171205928321394\\n\" +\n+                     \"sum of squares: 14.0, 14.0\\n\" +\n+                     \"sum of logarithms: 1.791759469228055, 1.791759469228055\\n\" +\n+                     \"standard deviation: 1.0, 1.0\\n\" +\n+                     \"covariance: Array2DRowRealMatrix{{1.0,-1.0},{-1.0,1.0}}\\n\",\n+                     stats.toString());\n+        Locale.setDefault(d);\n+    }\n+\n+    public void testShuffledStatistics() throws DimensionMismatchException {\n+        // the purpose of this test is only to check the get/set methods\n+        // we are aware shuffling statistics like this is really not\n+        // something sensible to do in production ...\n+        MultivariateSummaryStatistics reference = createMultivariateSummaryStatistics(2, true);\n+        MultivariateSummaryStatistics shuffled  = createMultivariateSummaryStatistics(2, true);\n+\n+        StorelessUnivariateStatistic[] tmp = shuffled.getGeoMeanImpl();\n+        shuffled.setGeoMeanImpl(shuffled.getMeanImpl());\n+        shuffled.setMeanImpl(shuffled.getMaxImpl());\n+        shuffled.setMaxImpl(shuffled.getMinImpl());\n+        shuffled.setMinImpl(shuffled.getSumImpl());\n+        shuffled.setSumImpl(shuffled.getSumsqImpl());\n+        shuffled.setSumsqImpl(shuffled.getSumLogImpl());\n+        shuffled.setSumLogImpl(tmp);\n+\n+        for (int i = 100; i > 0; --i) {\n+            reference.addValue(new double[] {i, i});\n+            shuffled.addValue(new double[] {i, i});\n+        }\n+\n+        TestUtils.assertEquals(reference.getMean(),          shuffled.getGeometricMean(), 1.0e-10);\n+        TestUtils.assertEquals(reference.getMax(),           shuffled.getMean(),          1.0e-10);\n+        TestUtils.assertEquals(reference.getMin(),           shuffled.getMax(),           1.0e-10);\n+        TestUtils.assertEquals(reference.getSum(),           shuffled.getMin(),           1.0e-10);\n+        TestUtils.assertEquals(reference.getSumSq(),         shuffled.getSum(),           1.0e-10);\n+        TestUtils.assertEquals(reference.getSumLog(),        shuffled.getSumSq(),         1.0e-10);\n+        TestUtils.assertEquals(reference.getGeometricMean(), shuffled.getSumLog(),        1.0e-10);\n+\n     }\n     \n     /**", "timestamp": 1248519536, "metainfo": ""}