{"sha": "609ab4f6c90eaee53f486395942896758f5b5c89", "log": "MATH-795: factored out   - testCombinePreconditionSameType()   - testCombineSameType()   - testCombinePreconditionMixedType()   - testCombineMixedTypes()   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n     }\n \n     @Test(expected=DimensionMismatchException.class)\n-    public void testCombinePreconditionSameType() {\n-        final double a = 1d;\n-        final double b = 2d;\n-        double[] aux = new double[] { 3d, 4d, 5d };\n-        final RealVector x = new ArrayRealVector(aux, false);\n-        aux = new double[] { 6d, 7d };\n-        final RealVector y = new ArrayRealVector(aux, false);\n-        x.combine(a, b, y);\n-    }\n-\n-    @Test\n-    public void testCombineSameType() {\n-        final Random random = new Random(20110726);\n-        final int dim = 10;\n-        final double a = (2 * random.nextDouble() - 1);\n-        final double b = (2 * random.nextDouble() - 1);\n-        final RealVector x = new ArrayRealVector(dim);\n-        final RealVector y = new ArrayRealVector(dim);\n-        final double[] expected = new double[dim];\n-        for (int i = 0; i < dim; i++) {\n-            final double xi = 2 * random.nextDouble() - 1;\n-            final double yi = 2 * random.nextDouble() - 1;\n-            x.setEntry(i, xi);\n-            y.setEntry(i, yi);\n-            expected[i] = a * xi + b * yi;\n-        }\n-        final double[] actual = x.combine(a, b, y).toArray();\n-        for (int i = 0; i < dim; i++) {\n-            final double delta;\n-            if (expected[i] == 0d) {\n-                delta = Math.ulp(1d);\n-            } else {\n-                delta = Math.ulp(expected[i]);\n-            }\n-            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n-                                expected[i],\n-                                actual[i],\n-                                delta);\n-        }\n-    }\n-\n-    @Test(expected=DimensionMismatchException.class)\n-    public void testCombinePreconditionMixedType() {\n-        final double a = 1d;\n-        final double b = 2d;\n-        double[] aux = new double[] { 3d, 4d, 5d };\n-        final RealVector x = new ArrayRealVector(aux, false);\n-        aux = new double[] { 6d, 7d };\n-        final RealVector y = new OpenMapRealVector(aux);\n-        x.combine(a, b, y);\n-    }\n-\n-    @Test\n-    public void testCombineMixedTypes() {\n-        final Random random = new Random(20110726);\n-        final int dim = 10;\n-        final double a = (2 * random.nextDouble() - 1);\n-        final double b = (2 * random.nextDouble() - 1);\n-        final RealVector x = new ArrayRealVector(dim);\n-        final RealVector y = new OpenMapRealVector(dim, 0d);\n-        final double[] expected = new double[dim];\n-        for (int i = 0; i < dim; i++) {\n-            final double xi = 2 * random.nextDouble() - 1;\n-            final double yi = 2 * random.nextDouble() - 1;\n-            x.setEntry(i, xi);\n-            y.setEntry(i, yi);\n-            expected[i] = a * xi + b * yi;\n-        }\n-        final double[] actual = x.combine(a, b, y).toArray();\n-        for (int i = 0; i < dim; i++) {\n-            final double delta;\n-            if (expected[i] == 0d) {\n-                delta = Math.ulp(1d);\n-            } else {\n-                delta = Math.ulp(expected[i]);\n-            }\n-            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n-                                expected[i],\n-                                actual[i],\n-                                delta);\n-        }\n-    }\n-\n-    @Test(expected=DimensionMismatchException.class)\n     public void testCombineToSelfPreconditionSameType() {\n         final double a = 1d;\n         final double b = 2d;\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n package org.apache.commons.math3.linear;\n \n import java.util.Arrays;\n+import java.util.Random;\n \n import junit.framework.Assert;\n \n         v.cosine(w);\n     }\n \n+    @Test(expected=DimensionMismatchException.class)\n+    public void testCombinePreconditionSameType() {\n+        final double a = 1d;\n+        final double b = 2d;\n+        double[] aux = new double[] { 3d, 4d, 5d };\n+        final RealVector x = create(aux);\n+        aux = new double[] { 6d, 7d };\n+        final RealVector y = create(aux);\n+        x.combine(a, b, y);\n+    }\n+\n+    @Test\n+    public void testCombineSameType() {\n+        final Random random = new Random(20110726);\n+        final int dim = 10;\n+        final double a = (2 * random.nextDouble() - 1);\n+        final double b = (2 * random.nextDouble() - 1);\n+        final double[] dataX = new double[dim];\n+        final double[] dataY = new double[dim];\n+        final double[] expected = new double[dim];\n+        for (int i = 0; i < dim; i++) {\n+            dataX[i] = 2 * random.nextDouble() - 1;\n+            dataY[i] = 2 * random.nextDouble() - 1;\n+            expected[i] = a * dataX[i] + b * dataY[i];\n+        }\n+        final RealVector x = create(dataX);\n+        final RealVector y = create(dataY);\n+        final double[] actual = x.combine(a, b, y).toArray();\n+        for (int i = 0; i < dim; i++) {\n+            final double delta;\n+            if (expected[i] == 0d) {\n+                delta = Math.ulp(1d);\n+            } else {\n+                delta = Math.ulp(expected[i]);\n+            }\n+            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n+                                expected[i],\n+                                actual[i],\n+                                delta);\n+        }\n+    }\n+\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testCombinePreconditionMixedType() {\n+        final double a = 1d;\n+        final double b = 2d;\n+        double[] aux = new double[] { 3d, 4d, 5d };\n+        final RealVector x = create(aux);\n+        aux = new double[] { 6d, 7d };\n+        final RealVector y = create(aux);\n+        x.combine(a, b, y);\n+    }\n+\n+    @Test\n+    public void testCombineMixedTypes() {\n+        final Random random = new Random(20110726);\n+        final int dim = 10;\n+        final double a = (2 * random.nextDouble() - 1);\n+        final double b = (2 * random.nextDouble() - 1);\n+        final double[] dataX = new double[dim];\n+        final double[] dataY = new double[dim];\n+        final double[] expected = new double[dim];\n+        for (int i = 0; i < dim; i++) {\n+            dataX[i] = 2 * random.nextDouble() - 1;\n+            dataY[i] = 2 * random.nextDouble() - 1;\n+            expected[i] = a * dataX[i] + b * dataY[i];\n+        }\n+        final RealVector x = create(dataX);\n+        final RealVector y = createAlien(dataY);\n+\n+        final double[] actual = x.combine(a, b, y).toArray();\n+        for (int i = 0; i < dim; i++) {\n+            final double delta;\n+            if (expected[i] == 0d) {\n+                delta = Math.ulp(1d);\n+            } else {\n+                delta = Math.ulp(expected[i]);\n+            }\n+            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n+                                expected[i],\n+                                actual[i],\n+                                delta);\n+        }\n+    }\n+\n     /*\n      * TESTS OF THE VISITOR PATTERN\n      */\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n     }\n \n     @Test(expected=DimensionMismatchException.class)\n-    public void testCombinePrecondition() {\n-        final double a = 1d;\n-        final double b = 2d;\n-        double[] aux = new double[] { 3d, 4d, 5d };\n-        final TestVectorImpl x = new TestVectorImpl(aux);\n-        aux = new double[] { 6d, 7d };\n-        final TestVectorImpl y = new TestVectorImpl(aux);\n-        x.combine(a, b, y);\n-    }\n-\n-    @Test\n-    public void testCombine() {\n-        final Random random = new Random(20110726);\n-        final int dim = 10;\n-        final double a = (2 * random.nextDouble() - 1);\n-        final double b = (2 * random.nextDouble() - 1);\n-        final RealVector x = new TestVectorImpl(new double[dim]);\n-        final RealVector y = new TestVectorImpl(new double[dim]);\n-        final double[] expected = new double[dim];\n-        for (int i = 0; i < dim; i++) {\n-            final double xi = 2 * random.nextDouble() - 1;\n-            final double yi = 2 * random.nextDouble() - 1;\n-            x.setEntry(i, xi);\n-            y.setEntry(i, yi);\n-            expected[i] = a * xi + b * yi;\n-        }\n-        final RealVector z = x.combine(a, b, y);\n-        Assert.assertTrue(z != x);\n-        final double[] actual = z.toArray();\n-        for (int i = 0; i < dim; i++) {\n-            final double delta;\n-            if (expected[i] == 0d) {\n-                delta = Math.ulp(1d);\n-            } else {\n-                delta = Math.ulp(expected[i]);\n-            }\n-            Assert.assertEquals(\"elements [\" + i + \"] differ\", expected[i],\n-                                actual[i], delta);\n-        }\n-    }\n-\n-    @Test(expected=DimensionMismatchException.class)\n     public void testCombineToSelfPrecondition() {\n         final double a = 1d;\n         final double b = 2d;", "timestamp": 1338921989, "metainfo": ""}