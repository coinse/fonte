{"sha": "0c4ed4f6ca0002882cdd173ba01427d2c045106f", "log": "fixed a serialization error introduced by yesterday changes (sorry for the noise)  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java\n \n   /** {@inheritDoc} */\n   public abstract void readExternal(ObjectInput in)\n-    throws IOException;\n+    throws IOException, ClassNotFoundException;\n \n   /** Save the base state of the instance.\n    * This method performs step finalization if it has not been done\n--- a/src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java\n     @Override\n     public void writeExternal(final ObjectOutput out)\n         throws IOException {\n+\n+        // save the state of the base class\n         writeBaseExternal(out);\n+\n+        // save the local attributes\n+        out.writeDouble(scalingH);\n+        out.writeDouble(referenceTime);\n+\n+        final int n = (currentState == null) ? -1 : currentState.length;\n+        if (scaled == null) {\n+            out.writeBoolean(false);\n+        } else {\n+            out.writeBoolean(true);\n+            for (int j = 0; j < n; ++j) {\n+                out.writeDouble(scaled[j]);\n+            }\n+        }\n+\n+        if (nordsieck == null) {\n+            out.writeBoolean(false);\n+        } else {\n+            out.writeBoolean(true);\n+            out.writeObject(nordsieck);\n+        }\n+\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public void readExternal(final ObjectInput in)\n-        throws IOException {\n+        throws IOException, ClassNotFoundException {\n \n         // read the base class \n         final double t = readBaseExternal(in);\n \n-        if ((scaled != null) && (nordsieck != null)) {\n+        // read the local attributes\n+        scalingH      = in.readDouble();\n+        referenceTime = in.readDouble();\n+\n+        final int n = (currentState == null) ? -1 : currentState.length;\n+        final boolean hasScaled = in.readBoolean();\n+        if (hasScaled) {\n+            scaled = new double[n];\n+            for (int j = 0; j < n; ++j) {\n+                scaled[j] = in.readDouble();\n+            }\n+        } else {\n+            scaled = null;\n+        }\n+\n+        final boolean hasNordsieck = in.readBoolean();\n+        if (hasNordsieck) {\n+            nordsieck = (Array2DRowRealMatrix) in.readObject();\n+        } else {\n+            nordsieck = null;\n+        }\n+\n+        if (hasScaled && hasNordsieck) {\n             // we can now set the interpolated time and state\n             setInterpolatedTime(t);\n         }\n--- a/src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java\n             oos.writeObject(handler);\n         }\n \n-        assertTrue(bos.size () >  16000);\n-        assertTrue(bos.size () <  17000);\n+        assertTrue(bos.size () >  20000);\n+        assertTrue(bos.size () <  25000);\n \n         ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n         ObjectInputStream     ois = new ObjectInputStream(bis);", "timestamp": 1246288822, "metainfo": ""}