{"sha": "5934ec97ff10093f7fb11e48cc5a03f62a0af661", "log": "MATH-683      New method \"shift\" to compute coefficients of a polynomial (due to R. di Costanzo).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java\n \n import org.apache.commons.math.fraction.BigFraction;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * A collection of static methods that operate on or return polynomials.\n         });\n     }\n \n+    /**\n+     * Compute the coefficients of the polynomial <code>P<sub>s</sub>(x)</code>\n+     * whose values at point {@code x} will be the same as the those from the\n+     * original polynomial <code>P(x)</code> when computed at {@code x + shift}.\n+     * Thus, if <code>P(x) = &Sigma;<sub>i</sub> a<sub>i</sub> x<sup>i</sup></code>,\n+     * then\n+     * <pre>\n+     *  <table>\n+     *   <tr>\n+     *    <td><code>P<sub>s</sub>(x)</td>\n+     *    <td>= &Sigma;<sub>i</sub> b<sub>i</sub> x<sup>i</sup></code></td>\n+     *   </tr>\n+     *   <tr>\n+     *    <td></td>\n+     *    <td>= &Sigma;<sub>i</sub> a<sub>i</sub> (x + shift)<sup>i</sup></code></td>\n+     *   </tr>\n+     *  </table>\n+     * </pre>\n+     *\n+     * @param coefficients Coefficients of the original polynomial.\n+     * @param shift Shift value.\n+     * @return the coefficients <code>b<sub>i</sub></code> of the shifted\n+     * polynomial.\n+     */\n+    public static double[] shift(final double[] coefficients,\n+                                 final double shift) {\n+        final int dp1 = coefficients.length;\n+        final double[] newCoefficients = new double[dp1];\n+\n+        // Pascal triangle.\n+        final int[][] coeff = new int[dp1][dp1];\n+        for (int i = 0; i < dp1; i++){\n+            for(int j = 0; j <= i; j++){\n+                coeff[i][j] = (int) MathUtils.binomialCoefficient(i, j);\n+            }\n+        }\n+\n+        // First polynomial coefficient.\n+        for (int i = 0; i < dp1; i++){\n+            newCoefficients[0] += coefficients[i] * FastMath.pow(shift, i);\n+        }\n+\n+        // Superior order.\n+        final int d = dp1 - 1;\n+        for (int i = 0; i < d; i++) {\n+            for (int j = i; j < d; j++){\n+                newCoefficients[i + 1] += coeff[j + 1][j - i] *\n+                    coefficients[j + 1] * FastMath.pow(shift, j - i);\n+            }\n+        }\n+\n+        return newCoefficients;\n+    }\n+\n+\n     /** Get the coefficients array for a given degree.\n      * @param degree degree of the polynomial\n      * @param coefficients list where the computed coefficients are stored\n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java\n         }\n     }\n \n+    @Test\n+    public void testShift(){\n+        // f1(x) = 1 + x + 2 x^2\n+        PolynomialFunction f1x = new PolynomialFunction(new double[] { 1, 1, 2 });\n+\n+        PolynomialFunction f1x1\n+            = new PolynomialFunction(PolynomialsUtils.shift(f1x.getCoefficients(), 1));\n+        checkPolynomial(f1x1, \"4 + 5 x + 2 x^2\");\n+\n+        PolynomialFunction f1xM1\n+            = new PolynomialFunction(PolynomialsUtils.shift(f1x.getCoefficients(), -1));\n+        checkPolynomial(f1xM1, \"2 - 3 x + 2 x^2\");\n+        \n+        PolynomialFunction f1x3\n+            = new PolynomialFunction(PolynomialsUtils.shift(f1x.getCoefficients(), 3));\n+        checkPolynomial(f1x3, \"22 + 13 x + 2 x^2\");\n+\n+        // f2(x) = 2 + 3 x^2 + 8 x^3 + 121 x^5\n+        PolynomialFunction f2x = new PolynomialFunction(new double[]{2, 0, 3, 8, 0, 121});\n+\n+        PolynomialFunction f2x1\n+            = new PolynomialFunction(PolynomialsUtils.shift(f2x.getCoefficients(), 1));\n+        checkPolynomial(f2x1, \"134 + 635 x + 1237 x^2 + 1218 x^3 + 605 x^4 + 121 x^5\");\n+\n+        PolynomialFunction f2x3\n+            = new PolynomialFunction(PolynomialsUtils.shift(f2x.getCoefficients(), 3));\n+        checkPolynomial(f2x3, \"29648 + 49239 x + 32745 x^2 + 10898 x^3 + 1815 x^4 + 121 x^5\");\n+    }\n+\n+\n     private void checkPolynomial(PolynomialFunction p, long denominator, String reference) {\n         PolynomialFunction q = new PolynomialFunction(new double[] { denominator});\n         Assert.assertEquals(reference, p.multiply(q).toString());", "timestamp": 1317915881, "metainfo": ""}