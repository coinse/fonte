{"sha": "b83009edc394853908248469ae1efc8e9dc9fb85", "log": "Remove trailing spaces, added missing javadoc tags.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java\n     }\n \n     /** Compute the distance between the instance and a point.\n-     *  This is a shortcut for invoking FastMath.abs(getOffset(p)), \n-     *  and provides consistency with what is in the \n-     *  org.apache.commons.math3.geometry.euclidean.threed.Line class.\n-     *  \n+     * <p>This is a shortcut for invoking FastMath.abs(getOffset(p)),\n+     * and provides consistency with what is in the\n+     * org.apache.commons.math3.geometry.euclidean.threed.Line class.</p>\n+     *\n      * @param p to check\n      * @return distance between the instance and the point\n      */\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java\n         return line;\n     }\n \n-    /**\n-     * Calculates the shortest distance from a point to this line segment.  \n+    /** Calculates the shortest distance from a point to this line segment.\n      * <p>\n-     * If the perpendicular extension from the point to the line does not \n-     * cross in the bounds of the line segment, the shortest distance to \n+     * If the perpendicular extension from the point to the line does not\n+     * cross in the bounds of the line segment, the shortest distance to\n      * the two end points will be returned.\n      * </p>\n-     * \n-     * Algorithm adapted from: http://www.codeguru.com/forum/printthread.php?s=cc8cf0596231f9a7dba4da6e77c29db3&t=194400&pp=15&page=1 \n+     *\n+     * Algorithm adapted from:\n+     * <a href=\"http://www.codeguru.com/forum/printthread.php?s=cc8cf0596231f9a7dba4da6e77c29db3&t=194400&pp=15&page=1\">\n+     * Thread @ Codeguru</a>\n+     *\n+     * @param p to check\n+     * @return distance between the instance and the point\n      */\n     public double distance(final Vector2D p) {\n         final double deltaX = end.getX() - start.getX();", "timestamp": 1349208900, "metainfo": ""}