{"sha": "dcae84b2e8f025e93340307d8bc04d406202c323", "log": "Fixed errors in SummaryStatistics causing overriden statistics not to be updated if the supplied impls are commons-math classes.  JIRA: MATH-691.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n         secondMoment.increment(value);\n         // If mean, variance or geomean have been overridden,\n         // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+        if (meanImpl != mean) {\n             meanImpl.increment(value);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+        if (varianceImpl != variance) {\n             varianceImpl.increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+        if (geoMeanImpl != geoMean) {\n             geoMeanImpl.increment(value);\n         }\n         n++;\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n \n \n import org.apache.commons.math.TestUtils;\n+\n+import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n+import org.apache.commons.math.stat.descriptive.moment.Variance;\n import org.apache.commons.math.stat.descriptive.summary.Sum;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n             // expected\n         }\n     }\n+    \n+    \n+    /**\n+     * JIRA: MATH-691\n+     */\n+    @Test\n+    public void testOverrideVarianceWithMathClass() throws Exception {\n+        double[] scores = {1, 2, 3, 4};\n+        SummaryStatistics stats = new SummaryStatistics();\n+        stats.setVarianceImpl(new Variance(false)); //use \"population variance\"\n+        for(double i : scores) {\n+          stats.addValue(i);\n+        }\n+        Assert.assertEquals((new Variance(false)).evaluate(scores),stats.getVariance(), 0); \n+    }\n+    \n+    @Test\n+    public void testOverrideMeanWithMathClass() throws Exception {\n+        double[] scores = {1, 2, 3, 4};\n+        SummaryStatistics stats = new SummaryStatistics();\n+        stats.setMeanImpl(new Mean()); \n+        for(double i : scores) {\n+          stats.addValue(i);\n+        }\n+        Assert.assertEquals((new Mean()).evaluate(scores),stats.getMean(), 0); \n+    }\n+    \n+    @Test\n+    public void testOverrideGeoMeanWithMathClass() throws Exception {\n+        double[] scores = {1, 2, 3, 4};\n+        SummaryStatistics stats = new SummaryStatistics();\n+        stats.setGeoMeanImpl(new GeometricMean()); \n+        for(double i : scores) {\n+          stats.addValue(i);\n+        }\n+        Assert.assertEquals((new GeometricMean()).evaluate(scores),stats.getGeometricMean(), 0); \n+    }\n }", "timestamp": 1322371209, "metainfo": ""}