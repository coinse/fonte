{"sha": "61a2561bcd43f3b28eca1de12148a974024323ac", "log": "improved test coverage  ", "commit": "\n--- a/src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java\n     super(name);\n   }\n \n-  public void testDimensionCheck() {\n+  public void testSanityChecks() {\n     try  {\n       TestProblem1 pb = new TestProblem1();\n       new ClassicalRungeKuttaIntegrator(0.01).integrate(pb,\n                                                         0.0, new double[pb.getDimension()+10],\n-                                                        1.0, new double[pb.getDimension()+10]);\n+                                                        1.0, new double[pb.getDimension()]);\n         fail(\"an exception should have been thrown\");\n     } catch(DerivativeException de) {\n       fail(\"wrong exception caught\");\n     } catch(IntegratorException ie) {\n     }\n-  }\n-  \n-  public void testNullIntervalCheck() {\n+    try  {\n+        TestProblem1 pb = new TestProblem1();\n+        new ClassicalRungeKuttaIntegrator(0.01).integrate(pb,\n+                                                          0.0, new double[pb.getDimension()],\n+                                                          1.0, new double[pb.getDimension()+10]);\n+          fail(\"an exception should have been thrown\");\n+      } catch(DerivativeException de) {\n+        fail(\"wrong exception caught\");\n+      } catch(IntegratorException ie) {\n+      }\n     try  {\n       TestProblem1 pb = new TestProblem1();\n       new ClassicalRungeKuttaIntegrator(0.01).integrate(pb,\n--- a/src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java\n     super(name);\n   }\n \n-  public void testDimensionCheck() {\n-    try  {\n-      TestProblem1 pb = new TestProblem1();\n-      HighamHall54Integrator integrator = new HighamHall54Integrator(0.0, 1.0,\n-                                                                     1.0e-10, 1.0e-10);\n-      integrator.integrate(pb,\n-                           0.0, new double[pb.getDimension()+10],\n-                           1.0, new double[pb.getDimension()+10]);\n-      fail(\"an exception should have been thrown\");\n-    } catch(DerivativeException de) {\n-      fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n+  public void testWrongDerivative() {\n+    try {\n+      HighamHall54Integrator integrator =\n+          new HighamHall54Integrator(0.0, 1.0, 1.0e-10, 1.0e-10);\n+      FirstOrderDifferentialEquations equations =\n+          new FirstOrderDifferentialEquations() {\n+          public void computeDerivatives(double t, double[] y, double[] dot)\n+            throws DerivativeException {\n+            if (t < -0.5) {\n+                throw new DerivativeException(\"{0}\", new String[] { \"oops\" });\n+            } else {\n+                throw new DerivativeException(new RuntimeException(\"oops\"));\n+           }\n+          }\n+          public int getDimension() {\n+              return 1;\n+          }\n+      };\n+\n+      try  {\n+        integrator.integrate(equations, -1.0, new double[1], 0.0, new double[1]);\n+        fail(\"an exception should have been thrown\");\n+      } catch(DerivativeException de) {\n+        // expected behavior\n+      }\n+\n+      try  {\n+        integrator.integrate(equations, 0.0, new double[1], 1.0, new double[1]);\n+        fail(\"an exception should have been thrown\");\n+      } catch(DerivativeException de) {\n+        // expected behavior\n+      }\n+\n+    } catch (Exception e) {\n+      fail(\"wrong exception caught: \" + e.getMessage());        \n     }\n   }\n \n \n   }\n \n+  public void testSanityChecks() {\n+    try {\n+      final TestProblem3 pb  = new TestProblem3(0.9);\n+      double minStep = 0;\n+      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n+\n+      try {\n+        FirstOrderIntegrator integ =\n+            new HighamHall54Integrator(minStep, maxStep, new double[4], new double[4]);\n+        integ.integrate(pb, pb.getInitialTime(), new double[6],\n+                        pb.getFinalTime(), new double[pb.getDimension()]);\n+        fail(\"an exception should have been thrown\");\n+      } catch (IntegratorException ie) {\n+        // expected behavior\n+      }\n+\n+      try {\n+        FirstOrderIntegrator integ =\n+            new HighamHall54Integrator(minStep, maxStep, new double[4], new double[4]);\n+        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                        pb.getFinalTime(), new double[6]);\n+        fail(\"an exception should have been thrown\");\n+      } catch (IntegratorException ie) {\n+        // expected behavior\n+      }\n+\n+      try {\n+        FirstOrderIntegrator integ =\n+            new HighamHall54Integrator(minStep, maxStep, new double[2], new double[4]);\n+        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                        pb.getFinalTime(), new double[pb.getDimension()]);\n+        fail(\"an exception should have been thrown\");\n+      } catch (IntegratorException ie) {\n+        // expected behavior\n+      }\n+\n+      try {\n+        FirstOrderIntegrator integ =\n+            new HighamHall54Integrator(minStep, maxStep, new double[4], new double[2]);\n+        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                        pb.getFinalTime(), new double[pb.getDimension()]);\n+        fail(\"an exception should have been thrown\");\n+      } catch (IntegratorException ie) {\n+        // expected behavior\n+      }\n+\n+      try {\n+        FirstOrderIntegrator integ =\n+            new HighamHall54Integrator(minStep, maxStep, new double[4], new double[4]);\n+        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                        pb.getInitialTime(), new double[pb.getDimension()]);\n+        fail(\"an exception should have been thrown\");\n+      } catch (IntegratorException ie) {\n+        // expected behavior\n+      }\n+\n+    } catch (Exception e) {\n+      fail(\"wrong exception caught: \" + e.getMessage());\n+    }\n+  }\n+\n   public void testKepler()\n     throws DerivativeException, IntegratorException {\n \n     final TestProblem3 pb  = new TestProblem3(0.9);\n     double minStep = 0;\n     double maxStep = pb.getFinalTime() - pb.getInitialTime();\n-    double scalAbsoluteTolerance = 1.0e-8;\n-    double scalRelativeTolerance = scalAbsoluteTolerance;\n+    double[] vecAbsoluteTolerance = { 1.0e-8, 1.0e-8, 1.0e-10, 1.0e-10 };\n+    double[] vecRelativeTolerance = { 1.0e-10, 1.0e-10, 1.0e-8, 1.0e-8 };\n \n     FirstOrderIntegrator integ = new HighamHall54Integrator(minStep, maxStep,\n-                                                            scalAbsoluteTolerance,\n-                                                            scalRelativeTolerance);\n+                                                            vecAbsoluteTolerance,\n+                                                            vecRelativeTolerance);\n     integ.setStepHandler(new KeplerHandler(pb));\n     integ.integrate(pb,\n                     pb.getInitialTime(), pb.getInitialState(),\n         maxError = error;\n       }\n       if (isLast) {\n-        assertTrue(maxError < 1.54e-10);\n-        assertTrue(nbSteps < 520);\n+        assertTrue(maxError < 4e-11);\n+        assertTrue(nbSteps < 670);\n       }\n     }\n     private TestProblem3 pb;", "timestamp": 1189457006, "metainfo": ""}