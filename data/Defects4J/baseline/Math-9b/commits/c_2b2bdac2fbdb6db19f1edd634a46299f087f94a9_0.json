{"sha": "2b2bdac2fbdb6db19f1edd634a46299f087f94a9", "log": "Corrected typos in some Javadoc comments.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java\n \n     /**\n      * Get the number of iterations realized by the algorithm.\n-     * The number of evaluations corresponds to the last call to the\n-     * {@link #optimize(MultivariateRealFunction, GoalType, double[]) optimize}\n-     * method. It is 0 if the method has not been called yet.\n+     * The number of iterations corresponds to the last call to the\n+     * {@code optimize} method. It is 0 if the method has not been\n+     * called yet.\n      *\n      * @return the number of iterations.\n      */\n \n     /**\n      * Get the number of evaluations of the objective function.\n-     *\n      * The number of evaluations corresponds to the last call to the\n-     * {@link #optimize(T, GoalType, double[]) optimize}\n-     * method. It is 0 if the method has not been called yet.\n+     * {@code optimize} method. It is 0 if the method has not been\n+     * called yet.\n      *\n      * @return the number of evaluations of the objective function.\n      */\n--- a/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java\n import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;\n \n /**\n- * This interface represents an optimization algorithm for {@link DifferentiableMultivariateRealFunction\n- * scalar differentiable objective functions}.\n- * <p>Optimization algorithms find the input point set that either {@link GoalType\n- * maximize or minimize} an objective function.</p>\n+ * This interface represents an optimization algorithm for\n+ * {@link DifferentiableMultivariateRealFunction scalar differentiable objective\n+ * functions}.\n+ * Optimization algorithms find the input point set that either {@link GoalType\n+ * maximize or minimize} an objective function.\n+ *\n  * @see MultivariateRealOptimizer\n  * @see DifferentiableMultivariateVectorialOptimizer\n  * @version $Revision$ $Date$\n     /**\n      * Get the number of evaluations of the objective function gradient.\n      * The number of evaluations corresponds to the last call to the\n-     * {@link #optimize(DifferentiableMultivariateRealFunction, GoalType, double[]) optimize}\n-     * method. It is 0 if the method has not been called yet.\n+     * {@code optimize} method (see {@link BaseMultivariateRealOptimizer}).\n+     * It is 0 if the method has not been called yet.\n      *\n      * @return the number of evaluations of the objective function gradient.\n      */\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n      */\n     protected AbstractScalarDifferentiableOptimizer() {}\n     /**\n-     * @param convergenceChecker Convergence checker.\n+     * @param checker Convergence checker.\n      * @param maxIterations Maximum number of iterations.\n      * @param maxEvaluations Maximum number of evaluations.\n      */\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java\n      */\n     protected AbstractScalarOptimizer() {}\n     /**\n-     * @param convergenceChecker Convergence checker.\n+     * @param checker Convergence checker.\n      * @param maxIterations Maximum number of iterations.\n      * @param maxEvaluations Maximum number of evaluations.\n      */\n--- a/src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java\n              DEFAULT_MAX_EVALUATIONS);\n     }\n     /**\n-     * @param convergenceChecker Convergence checker.\n+     * @param checker Convergence checker.\n      * @param maxIterations Maximum number of iterations.\n      * @param maxEvaluations Maximum number of evaluations.\n      */", "timestamp": 1280180726, "metainfo": ""}