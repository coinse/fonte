{"sha": "9eb32b0e7b33340bfa0bece4656d49bb8f38f6f6", "log": "Replaced temporary matrices / entry mutators with double[][] arrays to speed computation in loops.  JIRA: MATH-612.  Reported and patched by Christopher Nix.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java\n+++ b/src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java\n     public RealMatrix getQT() {\n         if (cachedQt == null) {\n             final int m = householderVectors.length;\n-            cachedQt = MatrixUtils.createRealMatrix(m, m);\n-\n+            double[][] qta = new double[m][m];\n+          \n             // build up first part of the matrix by applying Householder transforms\n             for (int k = m - 1; k >= 1; --k) {\n                 final double[] hK = householderVectors[k - 1];\n                 final double inv = 1.0 / (secondary[k - 1] * hK[k]);\n-                cachedQt.setEntry(k, k, 1);\n+                qta[k][k] = 1;\n                 if (hK[k] != 0.0) {\n                     double beta = 1.0 / secondary[k - 1];\n-                    cachedQt.setEntry(k, k, 1 + beta * hK[k]);\n+                    qta[k][k] = 1 + beta * hK[k];\n                     for (int i = k + 1; i < m; ++i) {\n-                        cachedQt.setEntry(k, i, beta * hK[i]);\n+                        qta[k][i] = beta * hK[i];\n                     }\n                     for (int j = k + 1; j < m; ++j) {\n                         beta = 0;\n                         for (int i = k + 1; i < m; ++i) {\n-                            beta += cachedQt.getEntry(j, i) * hK[i];\n+                            beta += qta[j][i] * hK[i];\n                         }\n                         beta *= inv;\n-                        cachedQt.setEntry(j, k, beta * hK[k]);\n+                        qta[j][k] = beta * hK[k];\n                         for (int i = k + 1; i < m; ++i) {\n-                            cachedQt.addToEntry(j, i, beta * hK[i]);\n+                            qta[j][i] += beta * hK[i];\n                         }\n                     }\n                 }\n             }\n-            cachedQt.setEntry(0, 0, 1);\n+            qta[0][0] = 1;\n+            cachedQt = MatrixUtils.createRealMatrix(qta);\n         }\n \n         // return the cached matrix\n     public RealMatrix getT() {\n         if (cachedT == null) {\n             final int m = main.length;\n-            cachedT = MatrixUtils.createRealMatrix(m, m);\n+            double[][] ta = new double[m][m];\n             for (int i = 0; i < m; ++i) {\n-                cachedT.setEntry(i, i, main[i]);\n+                ta[i][i] = main[i];\n                 if (i > 0) {\n-                    cachedT.setEntry(i, i - 1, secondary[i - 1]);\n+                    ta[i][i - 1] = secondary[i - 1];\n                 }\n                 if (i < main.length - 1) {\n-                    cachedT.setEntry(i, i + 1, secondary[i]);\n-                }\n-            }\n-\n+                    ta[i][i + 1] = secondary[i];\n+                }\n+            }\n+            cachedT = MatrixUtils.createRealMatrix(ta);\n         }\n \n         // return the cached matrix", "timestamp": 1318627745, "metainfo": ""}