{"sha": "88bb991fe4d45f197400b5dfa9f4775c1ea19ce3", "log": "added cauchy distribution  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/CauchyDistribution.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+/**\n+ * Cauchy Distribution.\n+ * Instances of CauchyDistribution objects should be created using\n+ * {@link DistributionFactory#createCauchyDistribution(double, double)}.<p>\n+ *\n+ * <p>\n+ * References:<p>\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/CauchyDistribution.html\">\n+ * Cauchy Distribution</a></li>\n+ * </ul>\n+ * </p>\n+ *\n+ * @version $Revision: 1.8 $ $Date: 2004-06-23 11:26:18 -0500 (Wed, 23 Jun 2004) $\n+ */\n+public interface CauchyDistribution extends ContinuousDistribution {\n+    \n+\t/**\n+\t * Access the median.\n+\t * @return median for this distribution\n+\t */\n+\tdouble getMedian();\n+    \n+\t/**\n+\t * Access the scale parameter.\n+\t * @return scale parameter for this distribution\n+\t */\n+\tdouble getScale();\n+    \n+\t/**\n+\t * Modify the median.\n+\t * @param median for this distribution\n+\t */\n+\tvoid setMedian(double median);\n+    \n+\t/**\n+\t * Modify the scale parameter.\n+\t * @param s scale parameter for this distribution\n+\t */\n+\tvoid setScale(double s);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Default implementation of\n+ * {@link org.apache.commons.math.distribution.CauchyDistribution}.\n+ *\n+ * @version $Revision: 1.13 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $\n+ */\n+public class CauchyDistributionImpl extends AbstractContinuousDistribution \n+\t\timplements CauchyDistribution, Serializable {\n+    \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 8589540077390120676L;\n+\n+    /** The median of this distribution. */\n+\tprivate double median = 0;\n+    \n+    /** The scale of this distribution. */\n+\tprivate double scale = 1;\n+    \n+\t/**\n+\t * Creates normal distribution with the mean equal to zero and standard\n+\t * deviation equal to one. \n+\t */\n+\tpublic CauchyDistributionImpl(){\n+\t\tthis(0.0, 1.0);\n+\t}\n+\t\n+\t/**\n+\t * Create a cauchy distribution using the given median and scale.\n+\t * @param median median for this distribution\n+\t * @param s scale parameter for this distribution\n+\t */\n+\tpublic CauchyDistributionImpl(double median, double s){\n+\t\tsuper();\n+\t\tsetMedian(median);\n+\t\tsetScale(s);\n+\t}\n+\n+\t/**\n+\t * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n+\t * @param x the value at which the CDF is evaluated.\n+\t * @return CDF evaluted at <code>x</code>. \n+\t */\n+\tpublic double cumulativeProbability(double x) {\n+        return 0.5 + (Math.atan((x - median) / scale) / Math.PI);\n+\t}\n+    \n+\t/**\n+\t * Access the median.\n+\t * @return median for this distribution\n+\t */\t\n+\tpublic double getMedian() {\n+\t\treturn median;\n+\t}\n+\n+\t/**\n+     * Access the scale parameter.\n+     * @return scale parameter for this distribution\n+\t */\n+\tpublic double getScale() {\n+\t\treturn scale;\n+\t}\n+    \n+    /**\n+     * For this distribution, X, this method returns the critical point x, such\n+     * that P(X &lt; x) = <code>p</code>.\n+     * <p>\n+     * Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and \n+     * <code>Double.POSITIVE_INFINITY</code> for p=1.\n+     *\n+     * @param p the desired probability\n+     * @return x, such that P(X &lt; x) = <code>p</code>\n+     * @throws IllegalArgumentException if <code>p</code> is not a valid\n+     *         probability.\n+     */\n+    public double inverseCumulativeProbability(double p) {\n+        double ret;\n+        if (p < 0.0 || p > 1.0) {\n+            throw new IllegalArgumentException\n+                (\"probability argument must be between 0 and 1 (inclusive)\");\n+        } else if (p == 0) {\n+            ret = Double.NEGATIVE_INFINITY;\n+        } else  if (p == 1) {\n+            ret = Double.POSITIVE_INFINITY;\n+        } else {\n+            ret = median + scale * Math.tan(Math.PI * (p - .5));\n+        }\n+        return ret;\n+    }\n+    \n+\t/**\n+\t * Modify the median.\n+\t * @param median for this distribution\n+\t */\n+\tpublic void setMedian(double median) {\n+\t\tthis.median = median;\n+\t}\n+\n+\t/**\n+     * Modify the scale parameter.\n+     * @param s scale parameter for this distribution\n+     * @throws IllegalArgumentException if <code>sd</code> is not positive.\n+\t */\n+\tpublic void setScale(double s) {\n+\t\tif (s <= 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\n+                \"Scale must be positive.\");\n+\t\t}\t\t\n+\t\tscale = s;\n+\t}\n+\t\n+\t/**\n+\t * Access the domain value lower bound, based on <code>p</code>, used to\n+\t * bracket a CDF root.  This method is used by\n+\t * {@link #inverseCumulativeProbability(double)} to find critical values.\n+\t * \n+\t * @param p the desired probability for the critical value\n+\t * @return domain value lower bound, i.e.\n+\t *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+\t */\n+\tprotected double getDomainLowerBound(double p) {\n+        double ret;\n+\n+        if (p < .5) {\n+            ret = -Double.MAX_VALUE;\n+        } else {\n+            ret = getMedian();\n+        }\n+        \n+        return ret;\n+    }\n+\n+\t/**\n+\t * Access the domain value upper bound, based on <code>p</code>, used to\n+\t * bracket a CDF root.  This method is used by\n+\t * {@link #inverseCumulativeProbability(double)} to find critical values.\n+\t * \n+\t * @param p the desired probability for the critical value\n+\t * @return domain value upper bound, i.e.\n+\t *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+\t */\n+\tprotected double getDomainUpperBound(double p) {\n+        double ret;\n+\n+        if (p < .5) {\n+            ret = getMedian();\n+        } else {\n+            ret = Double.MAX_VALUE;\n+        }\n+        \n+        return ret;\n+    }\n+\n+\t/**\n+\t * Access the initial domain value, based on <code>p</code>, used to\n+\t * bracket a CDF root.  This method is used by\n+\t * {@link #inverseCumulativeProbability(double)} to find critical values.\n+\t * \n+\t * @param p the desired probability for the critical value\n+\t * @return initial domain value\n+\t */\n+\tprotected double getInitialDomain(double p) {\n+        double ret;\n+\n+        if (p < .5) {\n+            ret = getMedian() - getScale();\n+        } else if (p > .5) {\n+            ret = getMedian() + getScale();\n+        } else {\n+            ret = getMedian();\n+        }\n+        \n+        return ret;\n+\t}\n+}\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n /*\n- * Copyright 2003-2004 The Apache Software Foundation.\n+ * Copyright 2003-2005 The Apache Software Foundation.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * The following distributions are supported:\n  * <ul>\n  * <li>Binomial</li>\n+ * <li>Cauchy</li>\n  * <li>Chi-Squared</li>\n  * <li>Exponential</li>\n  * <li>F</li>\n  * ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);\n  * </pre>\n  *\n- * @version $Revision: 1.22 $ $Date: 2004/11/07 03:32:48 $\n+ * @version $Revision: 1.22 $ $Date$\n  */\n public abstract class DistributionFactory {\n     /**\n      */\n     public abstract BinomialDistribution createBinomialDistribution(\n         int numberOfTrials, double probabilityOfSuccess);\n+    \n+    /**\n+     * Create a new cauchy distribution with the given median and scale.\n+     * @param median the median of the distribution\n+     * @param scale the scale\n+     * @return a new cauchy distribution  \n+     */           \n+    public CauchyDistribution createCauchyDistribution(\n+        double median, double scale)\n+    {\n+        return new CauchyDistributionImpl(median, scale);\n+    }\n         \n     /**\n      * Create a new chi-square distribution with the given degrees of freedom.\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+/**\n+ * Test cases for CauchyDistribution.\n+ * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n+ * ContinuousDistributionAbstractTest for details.\n+ * \n+ * @version $Revision: 1.8 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $\n+ */\n+public class CauchyDistributionTest extends ContinuousDistributionAbstractTest  {\n+    \n+    /**\n+     * Constructor for CauchyDistributionTest.\n+     * @param arg0\n+     */\n+    public CauchyDistributionTest(String arg0) {\n+        super(arg0);\n+    }\n+    \n+    //-------------- Implementations for abstract methods -----------------------\n+    \n+    /** Creates the default continuous distribution instance to use in tests. */\n+    public ContinuousDistribution makeDistribution() {\n+        return DistributionFactory.newInstance().createCauchyDistribution(1.2, 2.1);\n+    }   \n+    \n+    /** Creates the default cumulative probability distribution test input values */\n+    public double[] makeCumulativeTestPoints() {\n+        // quantiles computed using Mathematica \n+        return new double[] {-667.2485619d, -65.6230835d, -25.48302995d,\n+                -12.05887818d, -5.263135428d, 7.663135428d, 14.45887818d,\n+                27.88302995d, 68.0230835d, 669.6485619d};\n+    }\n+    \n+    /** Creates the default cumulative probability density test expected values */\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.900d, 0.950d,\n+                0.975d, 0.990d, 0.999d};\n+    }\n+    \n+    //---------------------------- Additional test cases -------------------------\n+    \n+    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+        setInverseCumulativeTestPoints(new double[] {0.0, 1.0});\n+        setInverseCumulativeTestValues(\n+                new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY});\n+        verifyInverseCumulativeProbabilities();\n+    }\n+    \n+    public void testMedian() {\n+        CauchyDistribution distribution = (CauchyDistribution) getDistribution();\n+        double expected = Math.random();\n+        distribution.setMedian(expected);\n+        assertEquals(expected, distribution.getMedian(), 0.0);\n+    }\n+    \n+    public void testScale() {\n+        CauchyDistribution distribution = (CauchyDistribution) getDistribution();\n+        double expected = Math.random();\n+        distribution.setScale(expected);\n+        assertEquals(expected, distribution.getScale(), 0.0);\n+    }\n+    \n+    public void testSetScale() {\n+        CauchyDistribution distribution = (CauchyDistribution) getDistribution();\n+        try {\n+            distribution.setScale(0.0);\n+            fail(\"Can not have 0.0 scale.\");\n+        } catch (IllegalArgumentException ex) {\n+            // success\n+        }\n+        \n+        try {\n+            distribution.setScale(-1.0);\n+            fail(\"Can not have negative scale.\");\n+        } catch (IllegalArgumentException ex) {\n+            // success\n+        }\n+    }\n+}\n--- a/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n /*\n- * Copyright 2003-2004 The Apache Software Foundation.\n+ * Copyright 2003-2005 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.16 $ $Date: 2004/02/21 21:35:17 $\n+ * @version $Revision: 1.16 $ $Date$\n  */\n public class DistributionFactoryImplTest extends TestCase {\n     /** */\n             fail(\"valid sample size.  IllegalArgumentException is not expected\");\n         }\n     }\n+    \n+    public void testHypergeometricDistributionSmallPopulationSize() {\n+        try {\n+            factory.createHypergeometricDistribution(5, 3, 10);\n+            fail(\"sample size larger than population size.  IllegalArgumentException expected\");\n+        } catch(IllegalArgumentException ex) {\n+        }\n+    }\n }\n--- a/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n /*\n- * Copyright 2003-2004 The Apache Software Foundation.\n+ * Copyright 2003-2005 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * Extends IntegerDistributionAbstractTest.  See class javadoc for\n  * IntegerDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.13 $ $Date: 2004/11/07 03:32:49 $\n+ * @version $Revision: 1.13 $ $Date$\n  */\n public class HypergeometricDistributionTest extends IntegerDistributionAbstractTest {\n \n         verifyInverseCumulativeProbabilities();     \n     }\n \n+    public void testPopulationSize() {\n+        HypergeometricDistribution dist = DistributionFactory.newInstance().createHypergeometricDistribution(5,3,5);\n+        try {\n+            dist.setPopulationSize(-1);\n+            fail(\"negative population size.  IllegalArgumentException expected\");\n+        } catch(IllegalArgumentException ex) {\n+        }\n+        \n+        dist.setPopulationSize(10);\n+        assertEquals(10, dist.getPopulationSize());\n+    }\n }\n--- a/src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java\n /*\n- * Copyright 2004 The Apache Software Foundation.\n+ * Copyright 2004-2005 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n /**\n  * <code>PoissonDistributionTest</code>\n  * \n- * @version $Revision: 1.2 $ $Date: 2004/11/07 20:39:15 $\n+ * @version $Revision: 1.2 $ $Date$\n  */\n public class PoissonDistributionTest extends IntegerDistributionAbstractTest {\n \n      * P(9900 &le; X &le; 10200) for X  = Po(10000)\n      */\n     public void testNormalApproximateProbability() throws Exception {\n-        PoissonDistribution dist = new PoissonDistributionImpl(100);\n+        PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(100);\n         double result = dist.normalApproximateProbability(110)\n                 - dist.normalApproximateProbability(89);\n         assertEquals(0.706281887248, result, 1E-10);\n      * @throws Exception\n      */\n     public void testDegenerateInverseCumulativeProbability() throws Exception {\n-          PoissonDistribution dist = new PoissonDistributionImpl(\n-                    DEFAULT_TEST_POISSON_PARAMETER);\n-            assertEquals(Integer.MAX_VALUE, dist.inverseCumulativeProbability(1.0d));\n-            assertEquals(-1, dist.inverseCumulativeProbability(0d));\n+        PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);\n+        assertEquals(Integer.MAX_VALUE, dist.inverseCumulativeProbability(1.0d));\n+        assertEquals(-1, dist.inverseCumulativeProbability(0d));\n+    }\n+    \n+    public void testMean() {\n+        PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);\n+        try {\n+            dist.setMean(-1);\n+            fail(\"negative mean.  IllegalArgumentException expected\");\n+        } catch(IllegalArgumentException ex) {\n+        }\n+        \n+        dist.setMean(10.0);\n+        assertEquals(10.0, dist.getMean(), 0.0);\n     }\n }\n--- a/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n /*\n- * Copyright 2003-2004 The Apache Software Foundation.\n+ * Copyright 2003-2005 The Apache Software Foundation.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n     public double[] makeCumulativeTestPoints() {\n         // quantiles computed using R version 1.8.1 (linux version)\n         return new double[] {-5.89343,-3.36493, -2.570582, -2.015048,\n-            -1.475884, 5.89343, 3.36493, 2.570582,\n+            -1.475884, 0.0, 5.89343, 3.36493, 2.570582,\n             2.015048, 1.475884};\n     }\n \n     /** Creates the default cumulative probability density test expected values */\n     public double[] makeCumulativeTestValues() {\n-        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n+        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.0d, 0.999d,\n                 0.990d, 0.975d, 0.950d, 0.900d};\n     }\n ", "timestamp": 1109217545, "metainfo": ""}