{"sha": "1a15d5f4c13eca0435b0ed7e6a624064e7f7e07f", "log": "MATH-744 Fixed \"doubleValue()\" and \"floatValue()\" when numerator and denominator are larger than the range of the corresponding primitive type.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n      */\n     @Override\n     public double doubleValue() {\n-        return numerator.doubleValue() / denominator.doubleValue();\n+        double result = numerator.doubleValue() / denominator.doubleValue();\n+        if (Double.isNaN(result)) {\n+            // Numerator and/or denominator must be out of range:\n+            // Calculate how far to shift them to put them in range.\n+            int shift = Math.max(numerator.bitLength(),\n+                                 denominator.bitLength()) - Double.MAX_EXPONENT;\n+            result = numerator.shiftRight(shift).doubleValue() /\n+                denominator.shiftRight(shift).doubleValue();\n+        }\n+        return result;\n     }\n \n     /**\n      */\n     @Override\n     public float floatValue() {\n-        return numerator.floatValue() / denominator.floatValue();\n+        float result = numerator.floatValue() / denominator.floatValue();\n+        if (Double.isNaN(result)) {\n+            // Numerator and/or denominator must be out of range:\n+            // Calculate how far to shift them to put them in range.\n+            int shift = Math.max(numerator.bitLength(),\n+                                 denominator.bitLength()) - Float.MAX_EXPONENT;\n+            result = numerator.shiftRight(shift).floatValue() /\n+                denominator.shiftRight(shift).floatValue();\n+        }\n+        return result;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java\n+++ b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java\n         Assert.assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);\n     }\n \n+    // MATH-744\n+    @Test\n+    public void testDoubleValueForLargeNumeratorAndDenominator() {\n+        final BigInteger pow400 = BigInteger.TEN.pow(400);\n+        final BigInteger pow401 = BigInteger.TEN.pow(401);\n+        final BigInteger two = new BigInteger(\"2\");\n+        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n+                                                  pow400.multiply(two));\n+\n+        Assert.assertEquals(5, large.doubleValue(), 1e-15);\n+    }\n+\n+    // MATH-744\n+    @Test\n+    public void testFloatValueForLargeNumeratorAndDenominator() {\n+        final BigInteger pow400 = BigInteger.TEN.pow(400);\n+        final BigInteger pow401 = BigInteger.TEN.pow(401);\n+        final BigInteger two = new BigInteger(\"2\");\n+        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n+                                                  pow400.multiply(two));\n+\n+        Assert.assertEquals(5, large.floatValue(), 1e-15);\n+    }\n+\n     @Test\n     public void testFloatValue() {\n         BigFraction first = new BigFraction(1, 2);", "timestamp": 1329225417, "metainfo": ""}