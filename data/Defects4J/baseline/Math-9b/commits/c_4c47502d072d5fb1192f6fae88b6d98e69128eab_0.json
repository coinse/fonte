{"sha": "4c47502d072d5fb1192f6fae88b6d98e69128eab", "log": "Improved documentation. Added x0 <= x1 check in cumulativeProbability. Required p < 1 in inverseCumulativeProbability.   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.12 $ $Date: 2004/04/08 20:45:59 $\n+ * @version $Revision: 1.13 $ $Date: 2004/05/11 02:04:21 $\n  */\n public abstract class AbstractDiscreteDistribution\n     implements DiscreteDistribution {\n     }\n     \n     /**\n-     * For this disbution, X, this method returns P(x0 &le; X &le; x1).\n+     * For this distribution, X, this method returns P(x0 &le; X &le; x1).\n      * @param x0 the inclusive, lower bound\n      * @param x1 the inclusive, upper bound\n      * @return the cumulative probability. \n      * @exception MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n+     * @exception IllegalArgumentException if x0 > x1\n      */\n-    public double cumulativeProbability(int x0, int x1) throws MathException{\n-        return cumulativeProbability(x1) - \n-            cumulativeProbability(x0 - 1);\n+    public double cumulativeProbability(int x0, int x1) throws MathException {\n+        if (x0 > x1) {\n+            throw new IllegalArgumentException\n+            \t(\"lower endpoint must be less than or equal to upper endpoint\");\n+        }\n+        return cumulativeProbability(x1) - cumulativeProbability(x0 - 1);\n     }\n     \n     /**\n-     * For this distribution, X, this method returns the critical point x, such\n+     * For this distribution, X, this method returns the lagest x, such\n      * that P(X &le; x) &le; <code>p</code>.\n      *\n      * @param p the desired probability\n-     * @return x, such that P(X &lt; x) = <code>p</code>\n+     * @return the largest x such that P(X &le; x) <= p\n      * @exception MathException if the inverse cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n+     * @exception IllegalArgumentException if p < 0 or p >= 1\n      */\n     public int inverseCumulativeProbability(final double p) throws MathException{\n-        if (p < 0.0 || p > 1.0) {\n+        if (p < 0.0 || p >= 1.0) {\n             throw new IllegalArgumentException(\n-                \"p must be between 0.0 and 1.0, inclusive.\");\n+                \"p must be greater than or equal to 0.0 and strictly less than 1.0\");\n         }\n         \n         // by default, do simple bisection.\n             --x0;\n             pm = cumulativeProbability(x0);\n         }\n-        \n+    \n         return x0;        \n     }\n     ", "timestamp": 1084241061, "metainfo": ""}