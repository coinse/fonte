{"sha": "84a782982974cb9a9f23981055a6fb951322db9c", "log": "MATH-881 Removed meaningless properties for multivariate distributions.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java\n     public double probability(double[] x) {\n         return 0;\n     }\n-\n-    /** {@inheritDoc} */\n-    public double getSupportLowerBound() {\n-        return Double.NEGATIVE_INFINITY;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getSupportUpperBound() {\n-        return Double.POSITIVE_INFINITY;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public boolean isSupportLowerBoundInclusive() {\n-        return false;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public boolean isSupportUpperBoundInclusive() {\n-        return false;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public boolean isSupportConnected() {\n-        return false;\n-    }\n }\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java\n     double density(double[] x);\n \n     /**\n-     * Access the lower bound of the support.\n-     * This method must return the same value as {@code inverseCumulativeProbability(0)}.\n-     * In other words, this method must return\n-     * <p>\n-     * <code>inf {x in R | P(X <= x) > 0}</code>.\n-     * </p>\n-     *\n-     * @return the lower bound of the support (might be\n-     * {@code Double.NEGATIVE_INFINITY}).\n-     */\n-    double getSupportLowerBound();\n-\n-    /**\n-     * Access the upper bound of the support.\n-     * This method must return the same value as {@code inverseCumulativeProbability(1)}.\n-     * In other words, this method must return\n-     * <p>\n-     * <code>inf {x in R | P(X <= x) = 1}</code>.\n-     * </p>\n-     *\n-     * @return the upper bound of the support (might be\n-     * {@code Double.POSITIVE_INFINITY}).\n-     */\n-    double getSupportUpperBound();\n-\n-    /**\n-     * Gets information about whether the lower bound of the support is\n-     * inclusive or not.\n-     *\n-     * @return whether the lower bound of the support is inclusive or not.\n-     */\n-    boolean isSupportLowerBoundInclusive();\n-\n-    /**\n-     * gets information about whether the upper bound of the support is\n-     * inclusive or not.\n-     *\n-     * @return whether the upper bound of the support is inclusive or not.\n-     */\n-    boolean isSupportUpperBoundInclusive();\n-\n-    /**\n-     * Gets information about whether the support is connected (i.e. all\n-     * values between the lower and upper bound of the support are included\n-     * in the support).\n-     *\n-     * @return whether the support is connected or not.\n-     */\n-    boolean isSupportConnected();\n-\n-    /**\n      * Reseeds the random generator used to generate samples.\n      *\n      * @param seed Seed with which to initialize the random number generator.", "timestamp": 1350595573, "metainfo": ""}