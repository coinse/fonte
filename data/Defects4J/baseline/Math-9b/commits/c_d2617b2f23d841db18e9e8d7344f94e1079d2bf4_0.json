{"sha": "d2617b2f23d841db18e9e8d7344f94e1079d2bf4", "log": "Improved test coverage.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n     }\n \n     @Test\n+    public void testHypotNeglectible() {\n+\n+        DerivativeStructure dsSmall = new DerivativeStructure(2, 5, 0, +3.0e-10);\n+        DerivativeStructure dsLarge = new DerivativeStructure(2, 5, 1, -4.0e25);\n+\n+        Assert.assertEquals(dsLarge.abs().getValue(),\n+                            DerivativeStructure.hypot(dsSmall, dsLarge).getValue(),\n+                            1.0e-10);\n+        Assert.assertEquals(0,\n+                            DerivativeStructure.hypot(dsSmall, dsLarge).getPartialDerivative(1, 0),\n+                            1.0e-10);\n+        Assert.assertEquals(-1,\n+                            DerivativeStructure.hypot(dsSmall, dsLarge).getPartialDerivative(0, 1),\n+                            1.0e-10);\n+\n+        Assert.assertEquals(dsLarge.abs().getValue(),\n+                            DerivativeStructure.hypot(dsLarge, dsSmall).getValue(),\n+                            1.0e-10);\n+        Assert.assertEquals(0,\n+                            DerivativeStructure.hypot(dsLarge, dsSmall).getPartialDerivative(1, 0),\n+                            1.0e-10);\n+        Assert.assertEquals(-1,\n+                            DerivativeStructure.hypot(dsLarge, dsSmall).getPartialDerivative(0, 1),\n+                            1.0e-10);\n+\n+    }\n+\n+    @Test\n+    public void testHypotSpecial() {\n+        Assert.assertTrue(Double.isNaN(DerivativeStructure.hypot(new DerivativeStructure(2, 5, 0, Double.NaN),\n+                                                                 new DerivativeStructure(2, 5, 0, +3.0e250)).getValue()));\n+        Assert.assertTrue(Double.isNaN(DerivativeStructure.hypot(new DerivativeStructure(2, 5, 0, +3.0e250),\n+                                                                 new DerivativeStructure(2, 5, 0, Double.NaN)).getValue()));\n+        Assert.assertTrue(Double.isInfinite(DerivativeStructure.hypot(new DerivativeStructure(2, 5, 0, Double.POSITIVE_INFINITY),\n+                                                                      new DerivativeStructure(2, 5, 0, +3.0e250)).getValue()));\n+        Assert.assertTrue(Double.isInfinite(DerivativeStructure.hypot(new DerivativeStructure(2, 5, 0, +3.0e250),\n+                                                                      new DerivativeStructure(2, 5, 0, Double.POSITIVE_INFINITY)).getValue()));\n+    }\n+\n+    @Test\n     public void testPrimitiveRemainder() {\n         double epsilon = 1.0e-15;\n         for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n \n     @Test\n     public void testCopySign() {\n+\n         DerivativeStructure minusOne = new DerivativeStructure(1, 1, 0, -1.0);\n         Assert.assertEquals(+1.0, minusOne.copySign(+1.0).getPartialDerivative(0), 1.0e-15);\n         Assert.assertEquals(-1.0, minusOne.copySign(+1.0).getPartialDerivative(1), 1.0e-15);\n         Assert.assertEquals(+1.0, minusOne.copySign(-0.0).getPartialDerivative(1), 1.0e-15);\n         Assert.assertEquals(+1.0, minusOne.copySign(Double.NaN).getPartialDerivative(0), 1.0e-15);\n         Assert.assertEquals(-1.0, minusOne.copySign(Double.NaN).getPartialDerivative(1), 1.0e-15);\n+\n+        DerivativeStructure plusOne = new DerivativeStructure(1, 1, 0, +1.0);\n+        Assert.assertEquals(+1.0, plusOne.copySign(+1.0).getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(+1.0, plusOne.copySign(+1.0).getPartialDerivative(1), 1.0e-15);\n+        Assert.assertEquals(-1.0, plusOne.copySign(-1.0).getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(-1.0, plusOne.copySign(-1.0).getPartialDerivative(1), 1.0e-15);\n+        Assert.assertEquals(+1.0, plusOne.copySign(+0.0).getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(+1.0, plusOne.copySign(+0.0).getPartialDerivative(1), 1.0e-15);\n+        Assert.assertEquals(-1.0, plusOne.copySign(-0.0).getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(-1.0, plusOne.copySign(-0.0).getPartialDerivative(1), 1.0e-15);\n+        Assert.assertEquals(+1.0, plusOne.copySign(Double.NaN).getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(+1.0, plusOne.copySign(Double.NaN).getPartialDerivative(1), 1.0e-15);\n+\n     }\n \n     @Test", "timestamp": 1361195843, "metainfo": ""}