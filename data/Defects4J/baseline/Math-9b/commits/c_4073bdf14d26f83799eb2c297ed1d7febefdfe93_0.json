{"sha": "4073bdf14d26f83799eb2c297ed1d7febefdfe93", "log": "Added setSubMatrix methods to RealMatrix, BigMatrix. Modified copyIn methods to use setSubMatrix and moved array argument checking from constructors and copyIn to setSubMatrix. PR # 35007 Base implementation contributed by Rodrigo di Lorenzo Lopes   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/BigMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrix.java\n     throws MatrixIndexException;\n     \n     /**\n+     * Replace the submatrix starting at <code>row, column</code> using data in\n+     * the input <code>subMatrix</code> array. Indexes are 0-based.\n+     * <p> \n+     * Example:<br>\n+     * Starting with <pre>\n+     * 1  2  3  4\n+     * 5  6  7  8\n+     * 9  0  1  2\n+     * </pre>\n+     * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking \n+     * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>\n+     * 1  2  3  4\n+     * 5  3  4  8\n+     * 9  5  6  2\n+     * </pre>\n+     * \n+     * @param subMatrix  array containing the submatrix replacement data\n+     * @param row  row coordinate of the top, left element to be replaced\n+     * @param column  column coordinate of the top, left element to be replaced\n+     * @throws MatrixIndexException  if subMatrix does not fit into this \n+     *    matrix from element in (row, column) \n+     * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular\n+     *  (not all rows have the same length) or empty\n+     * @throws NullPointerException if <code>subMatrix</code> is null\n+     */\n+    public void setSubMatrix(BigDecimal subMatrix[][], int row, int column) throws MatrixIndexException;\n+    \n+    /**\n      * Returns the entries in row number <code>row</code>\n      * as a row matrix.  Row indices start at 0.\n      *\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n      * @throws NullPointerException if <code>d</code> is null\n      */\n     public BigMatrixImpl(BigDecimal[][] d) {\n-        int nRows = d.length;\n-        if (nRows == 0) {\n-            throw new IllegalArgumentException(\n-            \"Matrix must have at least one row.\"); \n-        }\n-        int nCols = d[0].length;\n-        if (nCols == 0) {\n-            throw new IllegalArgumentException(\n-            \"Matrix must have at least one column.\"); \n-        }\n-        for (int row = 1; row < nRows; row++) {\n-            if (d[row].length != nCols) {\n-                throw new IllegalArgumentException(\n-                \"All input rows must have the same length.\");\n-            }\n-        }\n         this.copyIn(d);\n         lu = null;\n     }\n         }\n         return subMatrix;\n     } \n+    \n+    /**\n+     * Replace the submatrix starting at <code>row, column</code> using data in\n+     * the input <code>subMatrix</code> array. Indexes are 0-based.\n+     * <p> \n+     * Example:<br>\n+     * Starting with <pre>\n+     * 1  2  3  4\n+     * 5  6  7  8\n+     * 9  0  1  2\n+     * </pre>\n+     * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking \n+     * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>\n+     * 1  2  3  4\n+     * 5  3  4  8\n+     * 9  5  6  2\n+     * </pre>\n+     * \n+     * @param subMatrix  array containing the submatrix replacement data\n+     * @param row  row coordinate of the top, left element to be replaced\n+     * @param column  column coordinate of the top, left element to be replaced\n+     * @throws MatrixIndexException  if subMatrix does not fit into this \n+     *    matrix from element in (row, column) \n+     * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular\n+     *  (not all rows have the same length) or empty\n+     * @throws NullPointerException if <code>subMatrix</code> is null\n+     */\n+    public void setSubMatrix(BigDecimal[][] subMatrix, int row, int column) \n+    throws MatrixIndexException {\n+        if ((row < 0) || (column < 0)){\n+            throw new MatrixIndexException\n+            (\"invalid row or column index selection\");          \n+        }\n+        int nRows = subMatrix.length;\n+        if (nRows == 0) {\n+            throw new IllegalArgumentException(\n+            \"Matrix must have at least one row.\"); \n+        }\n+        int nCols = subMatrix[0].length;\n+        if (nCols == 0) {\n+            throw new IllegalArgumentException(\n+            \"Matrix must have at least one column.\"); \n+        }\n+        for (int r = 1; r < nRows; r++) {\n+            if (subMatrix[r].length != nCols) {\n+                throw new IllegalArgumentException(\n+                \"All input rows must have the same length.\");\n+            }\n+        }       \n+        if (data == null) {\n+            if ((row > 0)||(column > 0)) throw new MatrixIndexException\n+            (\"matrix must be initialized to perfom this method\");\n+            data = new BigDecimal[nRows][nCols];\n+            System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);          \n+        }   \n+        if (((nRows + row) > this.getRowDimension())\n+        || (nCols + column > this.getColumnDimension()))\n+            throw new MatrixIndexException(\n+            \"invalid row or column index selection\");                   \n+        for (int i = 0; i < nRows; i++) {\n+            System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n+        } \n+        lu = null;\n+    }\n     \n     /**\n      * Returns the entries in row number <code>row</code>\n     \n     /**\n      * Replaces data with a fresh copy of the input array.\n+     * <p>\n+     * Verifies that the input array is rectangular and non-empty.\n      *\n      * @param in data to copy in\n+     * @throws IllegalArgumentException if input array is emtpy or not\n+     *    rectangular\n+     * @throws NullPointerException if input array is null\n      */\n     private void copyIn(BigDecimal[][] in) {\n-        int nRows = in.length;\n-        int nCols = in[0].length;\n-        data = new BigDecimal[nRows][nCols];\n-        System.arraycopy(in, 0, data, 0, in.length);\n-        for (int i = 0; i < nRows; i++) {\n-            System.arraycopy(in[i], 0, data[i], 0, nCols);\n-        }\n-        lu = null;\n+        setSubMatrix(in,0,0);\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n /*\n- * Copyright 2003-2004 The Apache Software Foundation.\n+ * Copyright 2003-2005 The Apache Software Foundation.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * @version $Revision$ $Date$\n  */\n public interface RealMatrix {\n-\n     /**\n      * Returns a (deep) copy of this.\n      *\n     */\n    RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)\n    throws MatrixIndexException;\n+   \n+    /**\n+     * Replace the submatrix starting at <code>row, column</code> using data in\n+     * the input <code>subMatrix</code> array. Indexes are 0-based.\n+     * <p> \n+     * Example:<br>\n+     * Starting with <pre>\n+     * 1  2  3  4\n+     * 5  6  7  8\n+     * 9  0  1  2\n+     * </pre>\n+     * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking \n+     * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>\n+     * 1  2  3  4\n+     * 5  3  4  8\n+     * 9  5  6  2\n+     * </pre>\n+     * \n+     * @param subMatrix  array containing the submatrix replacement data\n+     * @param row  row coordinate of the top, left element to be replaced\n+     * @param column  column coordinate of the top, left element to be replaced\n+     * @throws MatrixIndexException  if subMatrix does not fit into this \n+     *    matrix from element in (row, column) \n+     * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular\n+     *  (not all rows have the same length) or empty\n+     * @throws NullPointerException if <code>subMatrix</code> is null\n+     */\n+    public void setSubMatrix(double subMatrix[][], int row, int column) throws MatrixIndexException;\n+   \n    \n    /**\n     * Returns the entries in row number <code>row</code>\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n /*\n- * Copyright 2003-2004 The Apache Software Foundation.\n+ * Copyright 2003-2005 The Apache Software Foundation.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n      * @throws NullPointerException if <code>data</code> is null\n      */\n     public RealMatrixImpl(double[][] d) {\n-        int nRows = d.length;\n-        if (nRows == 0) {\n-            throw new IllegalArgumentException(\n-                    \"Matrix must have at least one row.\"); \n-        }\n-        int nCols = d[0].length;\n-        if (nCols == 0) {\n-            throw new IllegalArgumentException(\n-            \"Matrix must have at least one column.\"); \n-        }\n-        for (int row = 1; row < nRows; row++) {\n-            if (d[row].length != nCols) {\n-                throw new IllegalArgumentException(\n-                    \"All input rows must have the same length.\");\n-            }\n-        }\n         this.copyIn(d);\n         lu = null;\n     }\n         }\n         return subMatrix;\n     } \n+\n+    /**\n+     * Replace the submatrix starting at <code>row, column</code> using data in\n+     * the input <code>subMatrix</code> array. Indexes are 0-based.\n+     * <p> \n+     * Example:<br>\n+     * Starting with <pre>\n+     * 1  2  3  4\n+     * 5  6  7  8\n+     * 9  0  1  2\n+     * </pre>\n+     * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking \n+     * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>\n+     * 1  2  3  4\n+     * 5  3  4  8\n+     * 9  5  6  2\n+     * </pre>\n+     * \n+     * @param subMatrix  array containing the submatrix replacement data\n+     * @param row  row coordinate of the top, left element to be replaced\n+     * @param column  column coordinate of the top, left element to be replaced\n+     * @throws MatrixIndexException  if subMatrix does not fit into this \n+     *    matrix from element in (row, column) \n+     * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular\n+     *  (not all rows have the same length) or empty\n+     * @throws NullPointerException if <code>subMatrix</code> is null\n+     */\n+    public void setSubMatrix(double[][] subMatrix, int row, int column) \n+        throws MatrixIndexException {\n+        if ((row < 0) || (column < 0)){\n+            throw new MatrixIndexException\n+                (\"invalid row or column index selection\");          \n+        }\n+        int nRows = subMatrix.length;\n+        if (nRows == 0) {\n+            throw new IllegalArgumentException(\n+            \"Matrix must have at least one row.\"); \n+        }\n+        int nCols = subMatrix[0].length;\n+        if (nCols == 0) {\n+            throw new IllegalArgumentException(\n+            \"Matrix must have at least one column.\"); \n+        }\n+        for (int r = 1; r < nRows; r++) {\n+            if (subMatrix[r].length != nCols) {\n+                throw new IllegalArgumentException(\n+                \"All input rows must have the same length.\");\n+            }\n+        }       \n+        if (data == null) {\n+            if ((row > 0)||(column > 0)) throw new MatrixIndexException\n+                (\"matrix must be initialized to perfom this method\");\n+            data = new double[nRows][nCols];\n+            System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);          \n+        }   \n+        if (((nRows + row) > this.getRowDimension())\n+                || (nCols + column > this.getColumnDimension()))\n+            throw new MatrixIndexException(\n+                    \"invalid row or column index selection\");                   \n+        for (int i = 0; i < nRows; i++) {\n+            System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n+        } \n+        lu = null;\n+    }\n     \n     /**\n-     * Returns the entries in row number <code>row</code>\n-     * as a row matrix.  Row indices start at 0.\n-     *\n-     * @param row the row to be fetched\n+     * Returns the entries in row number <code>row</code> as a row matrix.\n+     * Row indices start at 0.\n+     * \n+     * @param row  the row to be fetched\n      * @return row matrix\n      * @throws MatrixIndexException if the specified row index is invalid\n      */\n \n     /**\n      * Replaces data with a fresh copy of the input array.\n+     * <p>\n+     * Verifies that the input array is rectangular and non-empty\n      *\n      * @param in data to copy in\n+     * @throws IllegalArgumentException if input array is emtpy or not\n+     *    rectangular\n+     * @throws NullPointerException if input array is null\n      */\n     private void copyIn(double[][] in) {\n-        int nRows = in.length;\n-        int nCols = in[0].length;\n-        data = new double[nRows][nCols];\n-        System.arraycopy(in, 0, data, 0, in.length);\n-        for (int i = 0; i < nRows; i++) {\n-            System.arraycopy(in[i], 0, data[i], 0, nCols);\n-        }\n-        lu = null;\n+        setSubMatrix(in,0,0);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n /*\n- * Copyright 2004 The Apache Software Foundation.\n+ * Copyright 2004-2005 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n                 m.toString());\n     }\n     \n+    public void testSetSubMatrix() throws Exception {\n+        BigDecimal[][] detData3 = \n+            MatrixUtils.createBigMatrix(detData2).getData();\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        m.setSubMatrix(detData3,1,1);\n+        BigMatrix expected = MatrixUtils.createBigMatrix\n+            (new double[][] {{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});\n+        assertEquals(expected, m);  \n+        \n+        m.setSubMatrix(detData3,0,0);\n+        expected = MatrixUtils.createBigMatrix\n+            (new double[][] {{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});\n+        assertEquals(expected, m);  \n+        \n+        BigDecimal[][] testDataPlus3 = \n+            MatrixUtils.createBigMatrix(testDataPlus2).getData();\n+        m.setSubMatrix(testDataPlus3,0,0);      \n+        expected = MatrixUtils.createBigMatrix\n+        (new double[][] {{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});\n+        assertEquals(expected, m);   \n+        \n+        // javadoc example\n+        BigMatrix matrix = MatrixUtils.createBigMatrix\n+            (new double[][] {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 0, 1 , 2}});\n+        matrix.setSubMatrix(new BigDecimal[][] {{new BigDecimal(3),\n+            new BigDecimal(4)}, {new BigDecimal(5), new BigDecimal(6)}}, 1, 1);\n+        expected = MatrixUtils.createBigMatrix\n+            (new BigDecimal[][] {{new BigDecimal(1), new BigDecimal(2),\n+             new BigDecimal(3), new BigDecimal(4)}, {new BigDecimal(5),\n+             new BigDecimal(3), new BigDecimal(4), new BigDecimal(8)},\n+             {new BigDecimal(9), new BigDecimal(5) , new BigDecimal(6),\n+              new BigDecimal(2)}});\n+        assertEquals(expected, matrix);   \n+        \n+        // dimension overflow\n+        try {  \n+            m.setSubMatrix(matrix.getData(),1,1);\n+            fail(\"expecting MatrixIndexException\");\n+        } catch (MatrixIndexException e) {\n+            // expected\n+        }\n+        \n+        // null\n+        try {\n+            m.setSubMatrix(null,1,1);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        // ragged\n+        try {\n+            m.setSubMatrix(new BigDecimal[][] {{new BigDecimal(1)},\n+                    {new BigDecimal(2), new BigDecimal(3)}}, 0, 0);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        // empty\n+        try {\n+            m.setSubMatrix(new BigDecimal[][] {{}}, 0, 0);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+    }\n+    \n     //--------------- -----------------Protected methods\n         \n     /** verifies that two matrices are close (1-norm) */              \n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n /*\n- * Copyright 2003-2004 The Apache Software Foundation.\n+ * Copyright 2003-2005 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n                 m.toString());\n     }\n     \n+    public void testSetSubMatrix() throws Exception {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        m.setSubMatrix(detData2,1,1);\n+        RealMatrix expected = MatrixUtils.createRealMatrix\n+            (new double[][] {{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});\n+        assertEquals(expected, m);  \n+        \n+        m.setSubMatrix(detData2,0,0);\n+        expected = MatrixUtils.createRealMatrix\n+            (new double[][] {{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});\n+        assertEquals(expected, m);  \n+        \n+        m.setSubMatrix(testDataPlus2,0,0);      \n+        expected = MatrixUtils.createRealMatrix\n+            (new double[][] {{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});\n+        assertEquals(expected, m);   \n+        \n+        // javadoc example\n+        RealMatrix matrix = MatrixUtils.createRealMatrix\n+            (new double[][] {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 0, 1 , 2}});\n+        matrix.setSubMatrix(new double[][] {{3, 4}, {5, 6}}, 1, 1);\n+        expected = MatrixUtils.createRealMatrix\n+            (new double[][] {{1, 2, 3, 4}, {5, 3, 4, 8}, {9, 5 ,6, 2}});\n+        assertEquals(expected, matrix);   \n+        \n+        // dimension overflow\n+        try {  \n+            m.setSubMatrix(testData,1,1);\n+            fail(\"expecting MatrixIndexException\");\n+        } catch (MatrixIndexException e) {\n+            // expected\n+        }\n+        \n+        // null\n+        try {\n+            m.setSubMatrix(null,1,1);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        // ragged\n+        try {\n+            m.setSubMatrix(new double[][] {{1}, {2, 3}}, 0, 0);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+       \n+        // empty\n+        try {\n+            m.setSubMatrix(new double[][] {{}}, 0, 0);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+    }\n+    \n     //--------------- -----------------Protected methods\n         \n     /** verifies that two matrices are close (1-norm) */              ", "timestamp": 1117398371, "metainfo": ""}