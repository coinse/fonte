{"sha": "596c41491cd8262d2f521105dafa07ef67147016", "log": "More docn of algorithms and magic numbers  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n \n     private static final int FACT_LEN = 20;\n \n-    /** Factorial table, for Taylor series expansions. */\n+    /** Factorial table, for Taylor series expansions. 0!, 1!, 2!, ... 19! */\n     private static final double FACT[] = new double[] \n         {\n         +1.0d,                        \n         {-0.16624879837036133, -2.6033824355191673E-8}\n     };\n \n-    private static final int SINE_TABLE_LEN = 14; // MAGIC NUMBER\n+    /** Sine, Cosine, Tangent tables are for 0, 1/8, 2/8, ... 13/8 = PI/2 approx. */\n+    private static final int SINE_TABLE_LEN = 14;\n     \n     /** Sine table (high bits). */\n     private static final double SINE_TABLE_A[] =\n     }\n \n     /**\n-     * For x between 0 and pi/4 compute sine.\n+     * For x between 0 and pi/4 compute sine using Taylor expansion:\n+     * sin(x) = x - x^3/3! + x^5/5! - x^7/7! ...\n      * @param x number from which sine is requested\n      * @param result placeholder where to put the result in extended precision\n+     * (may be null)\n      * @return sin(x)\n      */\n     private static double slowSin(final double x, final double result[]) {\n         split(x, xs);\n         ys[0] = ys[1] = 0.0;\n \n-        for (int i = 19; i >= 0; i--) {\n+        for (int i = FACT_LEN-1; i >= 0; i--) {\n             splitMult(xs, ys, as);\n             ys[0] = as[0]; ys[1] = as[1];\n \n-            if ( (i & 1) == 0) {\n+            if ( (i & 1) == 0) { // Ignore even numbers\n                 continue;\n             }\n \n             split(FACT[i], as);\n             splitReciprocal(as, facts);\n \n-            if ( (i & 2) != 0 ) {\n+            if ( (i & 2) != 0 ) { // alternate terms are negative\n                 facts[0] = -facts[0];\n                 facts[1] = -facts[1];\n             }\n     }\n \n     /**\n-     *  For x between 0 and pi/4 compute cosine\n+     *  For x between 0 and pi/4 compute cosine using Talor series\n+     *  cos(x) = 1 - x^2/2! + x^4/4! ...\n      * @param x number from which cosine is requested\n      * @param result placeholder where to put the result in extended precision\n+     * (may be null)\n      * @return cos(x)\n      */\n     private static double slowCos(final double x, final double result[]) {\n         split(x, xs);\n         ys[0] = ys[1] = 0.0;\n \n-        for (int i = 19; i >= 0; i--) {\n+        for (int i = FACT_LEN-1; i >= 0; i--) {\n             splitMult(xs, ys, as);\n             ys[0] = as[0]; ys[1] = as[1];\n \n-            if ( (i & 1) != 0) {\n+            if ( (i & 1) != 0) { // skip odd entries\n                 continue;\n             }\n \n             split(FACT[i], as);\n             splitReciprocal(as, facts);\n \n-            if ( (i & 2) != 0 ) {\n+            if ( (i & 2) != 0 ) { // alternate terms are negative\n                 facts[0] = -facts[0];\n                 facts[1] = -facts[1];\n             }\n         }\n \n         /* Use angle addition formula to complete table to 13/8, just beyond pi/2 */\n-        for (int i = 7; i < 14; i++) {\n+        for (int i = 7; i < SINE_TABLE_LEN; i++) {\n             double xs[] = new double[2];\n             double ys[] = new double[2];\n             double as[] = new double[2];\n         }\n \n         /* Compute tangent = sine/cosine */\n-        for (int i = 0; i < 14; i++) {\n+        for (int i = 0; i < SINE_TABLE_LEN; i++) {\n             double xs[] = new double[2];\n             double ys[] = new double[2];\n             double as[] = new double[2];", "timestamp": 1315352034, "metainfo": ""}