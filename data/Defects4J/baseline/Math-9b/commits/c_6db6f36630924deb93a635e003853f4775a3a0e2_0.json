{"sha": "6db6f36630924deb93a635e003853f4775a3a0e2", "log": "MATH-413 Passing convergence checker in constructor. Added default constructor.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java\n import org.apache.commons.math.linear.SingularMatrixException;\n import org.apache.commons.math.optimization.VectorialPointValuePair;\n import org.apache.commons.math.optimization.ConvergenceChecker;\n+import org.apache.commons.math.optimization.SimpleVectorialValueChecker;\n \n /**\n  * Gauss-Newton least-squares solver.\n \n     /**\n      * Simple constructor with default settings.\n-     * The convergence check is set to a {@link\n-     * org.apache.commons.math.optimization.SimpleVectorialValueChecker}.\n+     * The normal equations will be solved using LU decomposition and the\n+     * convergence check is set to a {@link SimpleVectorialValueChecker}\n+     * with default tolerances.\n+     */\n+    public GaussNewtonOptimizer() {\n+        this(true);\n+    }\n+\n+    /**\n+     * Simple constructor with default settings.\n+     * The normal equations will be solved using LU decomposition.\n      *\n-     * @param useLU if {@code true}, the normal equations will be solved\n+     * @param checker Convergence checker.\n+     */\n+    public GaussNewtonOptimizer(ConvergenceChecker<VectorialPointValuePair> checker) {\n+        this(true, checker);\n+    }\n+\n+    /**\n+     * Simple constructor with default settings.\n+     * The convergence check is set to a {@link SimpleVectorialValueChecker}\n+     * with default tolerances.\n+     *\n+     * @param useLU If {@code true}, the normal equations will be solved\n      * using LU decomposition, otherwise they will be solved using QR\n      * decomposition.\n      */\n     public GaussNewtonOptimizer(final boolean useLU) {\n+        this(useLU, new SimpleVectorialValueChecker());\n+    }\n+\n+    /**\n+     * @param useLU If {@code true}, the normal equations will be solved\n+     * using LU decomposition, otherwise they will be solved using QR\n+     * decomposition.\n+     * @param checker Convergence checker.\n+     */\n+    public GaussNewtonOptimizer(final boolean useLU,\n+                                ConvergenceChecker<VectorialPointValuePair> checker) {\n+        super(checker);\n         this.useLU = useLU;\n     }\n \n--- a/src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java\n     public void testTrivial() throws MathUserException {\n         LinearProblem problem =\n             new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });\n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n         VectorialPointValuePair optimum =\n             optimizer.optimize(100, problem, problem.target, new double[] { 1 }, new double[] { 0 });\n         Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n             new LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },\n                               new double[] { 4.0, 6.0, 1.0 });\n \n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n         VectorialPointValuePair optimum =\n             optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0 });\n         Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n                 { 0, 0, 0, 0, 2, 0 },\n                 { 0, 0, 0, 0, 0, 2 }\n         }, new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });\n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n         VectorialPointValuePair optimum =\n             optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },\n                                new double[] { 0, 0, 0, 0, 0, 0 });\n                 { -1,  1, 0 },\n                 {  0, -1, 1 }\n         }, new double[] { 1, 1, 1});\n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n         VectorialPointValuePair optimum =\n             optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });\n         Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);\n                 {  0,  0,   0,  0,       1, 1 }\n         }, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});\n \n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n         VectorialPointValuePair optimum =\n             optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 },\n                                new double[] { 0, 0, 0, 0, 0, 0 });\n                 {  2, 1,  3 },\n                 { -3, 0, -9 }\n         }, new double[] { 1, 1, 1 });\n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n         optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });\n     }\n \n                 {  8.0, 6.0, 10.0,  9.0 },\n                 {  7.0, 5.0,  9.0, 10.0 }\n         }, new double[] { 32, 23, 33, 31 });\n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n         VectorialPointValuePair optimum1 =\n             optimizer.optimize(100, problem1, problem1.target, new double[] { 1, 1, 1, 1 },\n                                new double[] { 0, 1, 2, 3 });\n                 { 2.0, 0.0,  1.0, 0.0 }\n         }, new double[] { 7.0, 3.0, 5.0 });\n \n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n         optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 },\n                            new double[] { 7, 6, 5, 4 });\n     }\n                  { 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },\n                  { 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }\n         }, new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 });\n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n         optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1, 1, 1 },\n                            new double[] { 2, 2, 2, 2, 2, 2 });\n     }\n                 { 1.0,  3.0 }\n         }, new double[] { 3.0, 1.0, 5.0 });\n \n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n         VectorialPointValuePair optimum =\n             optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 },\n                                new double[] { 1, 1 });\n                 { 1.0,  3.0 }\n         }, new double[] { 3.0, 1.0, 4.0 });\n \n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n         optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 1, 1 });\n         Assert.assertTrue(optimizer.getRMS() > 0.1);\n \n     public void testInconsistentSizes1() throws MathUserException {\n         LinearProblem problem =\n             new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 });\n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n \n         VectorialPointValuePair optimum =\n             optimizer.optimize(100, problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 });\n     public void testInconsistentSizes2() throws MathUserException {\n         LinearProblem problem =\n             new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 });\n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n \n         VectorialPointValuePair optimum =\n             optimizer.optimize(100, problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 });\n         circle.addPoint(110.0, -20.0);\n         circle.addPoint( 35.0,  15.0);\n         circle.addPoint( 45.0,  97.0);\n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialPointChecker(1.0e-30, 1.0e-30));\n+\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-30, 1.0e-30));\n \n         optimizer.optimize(100, circle, new double[] { 0, 0, 0, 0, 0 },\n                            new double[] { 1, 1, 1, 1, 1 },\n         circle.addPoint(110.0, -20.0);\n         circle.addPoint( 35.0,  15.0);\n         circle.addPoint( 45.0,  97.0);\n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-13, 1.0e-13));\n+\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-13, 1.0e-13));\n+\n         VectorialPointValuePair optimum =\n             optimizer.optimize(100, circle, new double[] { 0, 0, 0, 0, 0 },\n                                new double[] { 1, 1, 1, 1, 1 },\n         for (int i = 0; i < points.length; ++i) {\n             circle.addPoint(points[i][0], points[i][1]);\n         }\n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n \n         optimizer.optimize(100, circle, target, weights, new double[] { -12, -12 });\n     }\n         for (int i = 0; i < points.length; ++i) {\n             circle.addPoint(points[i][0], points[i][1]);\n         }\n-        GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n+        GaussNewtonOptimizer optimizer\n+            = new GaussNewtonOptimizer(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n \n         VectorialPointValuePair optimum =\n             optimizer.optimize(100, circle, target, weights, new double[] { 0, 0 });", "timestamp": 1313676628, "metainfo": ""}