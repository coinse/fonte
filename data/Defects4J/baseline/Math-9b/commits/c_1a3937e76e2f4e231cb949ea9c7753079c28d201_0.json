{"sha": "1a3937e76e2f4e231cb949ea9c7753079c28d201", "log": "Javadoc fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java\n \n     /**\n      * Create a default number format.  The default number format is based on\n-     * {@link NumberFormat#getNumberInstance(java.util.Locale)} with the only\n-     * customizing is the maximum number of BigFraction digits, which is set to 0.\n+     * {@link NumberFormat#getNumberInstance(java.util.Locale)}. The only\n+     * customization is the maximum number of BigFraction digits, which is set to 0.\n      * @return the default number format.\n      */\n     protected static NumberFormat getDefaultNumberFormat() {\n \n     /**\n      * Create a default number format.  The default number format is based on\n-     * {@link NumberFormat#getNumberInstance(java.util.Locale)} with the only\n-     * customizing is the maximum number of BigFraction digits, which is set to 0.\n+     * {@link NumberFormat#getNumberInstance(java.util.Locale)}. The only\n+     * customization is the maximum number of BigFraction digits, which is set to 0.\n      * @param locale the specific locale used by the format.\n      * @return the default number format specific to the given locale.\n      */\n     /**\n      * Parses <code>source</code> until a non-whitespace character is found.\n      * @param source the string to parse\n-     * @param pos input/ouput parsing parameter.  On output, <code>pos</code>\n+     * @param pos input/output parsing parameter.  On output, <code>pos</code>\n      *        holds the index of the next non-whitespace character.\n      */\n     protected static void parseAndIgnoreWhitespace(final String source,\n     /**\n      * Parses <code>source</code> until a non-whitespace character is found.\n      * @param source the string to parse\n-     * @param pos input/ouput parsing parameter.\n+     * @param pos input/output parsing parameter.\n      * @return the first non-whitespace character.\n      */\n     protected static char parseNextCharacter(final String source,\n--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n      * {@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.\n      *\n      * @param num the numerator, must not be {@code null}.\n-     * @param den the denominator, must not be {@code null}..\n+     * @param den the denominator, must not be {@code null}.\n      * @throws ArithmeticException if the denominator is zero.\n+     * @throws NullArgumentException if either of the arguments is null\n      */\n     public BigFraction(BigInteger num, BigInteger den) {\n         if (num == null) {\n      * Create a fraction given the double value.\n      * <p>\n      * This constructor behaves <em>differently</em> from\n-     * {@link #BigFraction(double, double, int)}. It converts the\n-     * double value exactly, considering its internal bits representation.\n-     * This does work for all values except NaN and infinities and does\n-     * not requires any loop or convergence threshold.\n+     * {@link #BigFraction(double, double, int)}. It converts the double value\n+     * exactly, considering its internal bits representation. This works for all\n+     * values except NaN and infinities and does not requires any loop or\n+     * convergence threshold.\n      * </p>\n      * <p>\n      * Since this conversion is exact and since double numbers are sometimes\n-     * approximated, the fraction created may seem strange in some cases. For example\n+     * approximated, the fraction created may seem strange in some cases. For example,\n      * calling <code>new BigFraction(1.0 / 3.0)</code> does <em>not</em> create\n-     * the fraction 1/3 but the fraction 6004799503160661 / 18014398509481984\n+     * the fraction 1/3, but the fraction 6004799503160661 / 18014398509481984\n      * because the double number passed to the constructor is not exactly 1/3\n      * (this number cannot be stored exactly in IEEE754).\n      * </p>\n \n     /**\n      * <p>\n-     * Returns a <tt>integer</tt> whose value is\n-     * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.\n+     * Returns a {@code BigFraction} whose value is\n+     * {@code (this<sup>exponent</sup>)}, returning the result in reduced form.\n      * </p>\n      *\n      * @param exponent\n-     *            exponent to which this <code>BigInteger</code> is to be\n+     *            exponent to which this {@code BigFraction} is to be\n      *            raised.\n      * @return <tt>this<sup>exponent</sup></tt>.\n      */\n \n     /**\n      * <p>\n-     * Subtracts the value of an {@link BigInteger} from the value of this one,\n-     * returning the result in reduced form.\n+     * Subtracts the value of an {@link BigInteger} from the value of this\n+     * {@code BigFraction}, returning the result in reduced form.\n      * </p>\n      *\n      * @param bg the {@link BigInteger} to subtract, cannot be {@code null}.\n \n     /**\n      * <p>\n-     * Subtracts the value of an <tt>integer</tt> from the value of this one,\n-     * returning the result in reduced form.\n-     * </p>\n-     *\n-     * @param i\n-     *            the <tt>integer</tt> to subtract.\n-     * @return a <code>BigFraction</code> instance with the resulting values.\n+     * Subtracts the value of an {@code integer} from the value of this\n+     * {@code BigFraction}, returning the result in reduced form.\n+     * </p>\n+     *\n+     * @param i the {@code integer} to subtract.\n+     * @return a {@code BigFraction} instance with the resulting values.\n      */\n     public BigFraction subtract(final int i) {\n         return subtract(BigInteger.valueOf(i));\n \n     /**\n      * <p>\n-     * Subtracts the value of an <tt>integer</tt> from the value of this one,\n-     * returning the result in reduced form.\n-     * </p>\n-     *\n-     * @param l\n-     *            the <tt>long</tt> to subtract.\n-     * @return a <code>BigFraction</code> instance with the resulting values, or\n-     *         this object if the <tt>long</tt> is zero.\n+     * Subtracts the value of a {@code long} from the value of this \n+     * {@code BigFraction}, returning the result in reduced form.\n+     * </p>\n+     *\n+     * @param l the {@code long} to subtract.\n+     * @return a {@ code BigFraction} instance with the resulting values.\n      */\n     public BigFraction subtract(final long l) {\n         return subtract(BigInteger.valueOf(l));\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java\n   }\n \n   /** Get the L<sub>2</sub> norm for the vector.\n-   * @return euclidian norm for the vector\n+   * @return euclidean norm for the vector\n    */\n   public double getNorm() {\n     return FastMath.sqrt (x * x + y * y + z * z);\n   }\n \n   /** Get the square of the norm for the vector.\n-   * @return square of the euclidian norm for the vector\n+   * @return square of the euclidean norm for the vector\n    */\n   public double getNormSq() {\n     return x * x + y * y + z * z;", "timestamp": 1306711097, "metainfo": ""}