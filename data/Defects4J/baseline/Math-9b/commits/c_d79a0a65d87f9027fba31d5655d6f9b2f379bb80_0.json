{"sha": "d79a0a65d87f9027fba31d5655d6f9b2f379bb80", "log": "Changed factorial methods to return 1 for argument = 0. Pr #31687 Reported by: Fredrik Norin   ", "commit": "\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n /**\n  * Some useful additions to the built-in functions in {@link Math}.\n  *\n- * @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:16 $\n+ * @version $Revision: 1.20 $ $Date: 2004/10/14 04:01:04 $\n  */\n public final class MathUtils {\n     \n      *\n      * <p>\n      * <Strong>Preconditions</strong>:<ul>\n-     * <li> <code>n > 0</code> (otherwise\n+     * <li> <code>n >= 0</code> (otherwise\n      *      <code>IllegalArgumentException</code> is thrown)</li>\n      * <li> The result is small enough to fit into a <code>long</code>.  The\n      *      largest value of <code>n</code> for which <code>n!</code>\n      * @return <code>n!</code>\n      * @throws ArithmeticException if the result is too large to be represented\n      *         by a long integer.\n+     * @throws IllegalArgumentException if n < 0\n      */\n     public static long factorial(final int n) {\n         long result = Math.round(factorialDouble(n));\n      *\n      * <p>\n      * <Strong>Preconditions</strong>:<ul>\n-     * <li> <code>n > 0</code> (otherwise\n+     * <li> <code>n >= 0</code> (otherwise\n      *      <code>IllegalArgumentException</code> is thrown)</li>\n      * <li> The result is small enough to fit into a <code>double</code>.  The\n      *      largest value of <code>n</code> for which <code>n!</code>\n      *\n      * @param n argument\n      * @return <code>n!</code>\n+     * @throws IllegalArgumentException if n < 0\n      */\n     public static double factorialDouble(final int n) {\n-        if (n <= 0) {\n-            throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        if (n < 0) {\n+            throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n         }\n         return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n     }\n      * Returns the natural logarithm of n!.\n      * <p>\n      * <Strong>Preconditions</strong>:<ul>\n-     * <li> <code>n > 0</code> (otherwise\n+     * <li> <code>n >= 0</code> (otherwise\n      *      <code>IllegalArgumentException</code> is thrown)</li>\n      * </ul>\n      *\n      * @throws IllegalArgumentException if preconditions are not met.\n      */\n     public static double factorialLog(final int n) {\n-        if (n <= 0) {\n+        if (n < 0) {\n             throw new IllegalArgumentException(\"must have n > 0 for n!\");\n         }\n         double logSum = 0;\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n /**\n  * Test cases for the MathUtils class.\n  *\n- * @version $Revision: 1.14 $ $Date: 2004/06/17 21:31:00 $\n+ * @version $Revision: 1.15 $ $Date: 2004/10/14 04:01:04 $\n  */\n \n public final class MathUtilsTest extends TestCase {\n             assertEquals(i + \"! \",Math.log((double)factorial(i)),\n                 MathUtils.factorialLog(i),10E-12);\n         }\n+        assertEquals(\"0\", 1, MathUtils.factorial(0));\n+        assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);\n+        assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);\n     }\n \n     public void testFactorialFail() {\n         try {\n-            long x = MathUtils.factorial(0);\n-            fail (\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        try {\n-            double x = MathUtils.factorialDouble(0);\n-            fail (\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        try {\n-            double x = MathUtils.factorialLog(0);\n+            long x = MathUtils.factorial(-1);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.factorialDouble(-1);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.factorialLog(-1);\n             fail (\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n         assertTrue(\"expecting infinite factorial value\",\n             Double.isInfinite(MathUtils.factorialDouble(171)));\n-\n     }\n \n ", "timestamp": 1097726464, "metainfo": ""}