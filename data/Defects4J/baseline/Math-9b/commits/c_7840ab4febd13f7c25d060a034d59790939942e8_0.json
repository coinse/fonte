{"sha": "7840ab4febd13f7c25d060a034d59790939942e8", "log": "Javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n  * <p>\n  * Implementations will search for only one zero in the given interval.\n  *  \n- * @version $Revision: 1.11 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.12 $ $Date: 2004/05/21 14:21:42 $\n  */\n public interface UnivariateRealSolver {\n \n     /**\n      * Set the upper limit for the number of iterations.\n-     * \n+     * <p>\n      * Usually a high iteration count indicates convergence problems. However,\n      * the \"reasonable value\" varies widely for different solvers.  Users are\n      * advised to use the default value supplied by the solver.\n-     *  \n+     * <p>\n      * An exception will be thrown if the number is exceeded.\n      *  \n      * @param count maximum number of iterations\n \n     /**\n      * Reset the upper limit for the number of iterations to the default.\n-     * \n+     * <p>\n      * The default value is supplied by the solver implementation.\n      * \n      * @see #setMaximalIterationCount(int)\n \n     /**\n      * Set the absolute accuracy.\n-     * \n+     * <p>\n      * The default is usually choosen so that roots in the interval\n      * -10..-0.1 and +0.1..+10 can be found with a reasonable accuracy. If the\n      * expected absolute value of your roots is of much smaller magnitude, set\n      * this to a smaller value.\n-     * \n+     * <p>\n      * Solvers are advised to do a plausibility check with the relative\n      * accuracy, but clients should not rely on this.\n      *  \n \n     /**\n      * Reset the absolute accuracy to the default.\n-     * \n+     * <p>\n      * The default value is provided by the solver implementation.\n      */\n     public void resetAbsoluteAccuracy();\n \n     /**\n      * Set the relative accuracy.\n-     * \n+     * <p>\n      * This is used to stop iterations if the absolute accuracy can't be\n      * achieved due to large values or short mantissa length.\n-     * \n-     * If this should be the primary criterium for convergence rather then a\n+     * <p>\n+     * If this should be the primary criterion for convergence rather then a\n      * safety measure, set the absolute accuracy to a ridiculously small value,\n      * like 1E-1000.\n      * \n \n     /**\n      * Set the function value accuracy.\n-     * \n+     * <p>\n      * This is used to determine whan an evaluated function value or some other\n      * value which is used as divisor is zero.\n-     * \n+     * <p>\n      * This is a safety guard and it shouldn't be necesary to change this in\n      * general.\n      * \n     /**\n      * Solve for a zero root in the given interval.\n      * A solver may require that the interval brackets a single zero root.\n+     * \n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n      * @return a value where the function is zero\n     /**\n      * Solve for a zero in the given interval, start at startValue.\n      * A solver may require that the interval brackets a single zero root.\n+     * \n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n      * @param startValue the start value to use\n \n     /**\n      * Get the number of iterations in the last run of the solver.\n+     * <p>\n      * This is mainly meant for testing purposes. It may occasionally\n      * help track down performance problems: if the iteration count\n      * is notoriously high, check whether the function is evaluated\n      * properly, and whether another solver is more amenable to the\n      * problem.\n+     * \n      * @return the last iteration count.\n      * @throws MathException if there is no result available, either\n      * because no result was yet computed or the last attempt failed.", "timestamp": 1085149302, "metainfo": ""}