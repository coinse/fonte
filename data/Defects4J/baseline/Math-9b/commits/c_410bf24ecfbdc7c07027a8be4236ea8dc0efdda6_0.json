{"sha": "410bf24ecfbdc7c07027a8be4236ea8dc0efdda6", "log": "MATH-854: in interface FieldVector, replaced throws statements with javadoc comments.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/FieldVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/FieldVector.java\n \n import org.apache.commons.math3.Field;\n import org.apache.commons.math3.FieldElement;\n-import org.apache.commons.math3.exception.DimensionMismatchException;\n-import org.apache.commons.math3.exception.MathArithmeticException;\n-import org.apache.commons.math3.exception.NotPositiveException;\n-import org.apache.commons.math3.exception.NullArgumentException;\n-import org.apache.commons.math3.exception.OutOfRangeException;\n \n /**\n  * Interface defining a field-valued vector with basic algebraic operations.\n     FieldVector<T> copy();\n \n     /**\n-     * Compute the sum of {@code this} and {@code v}.\n+     * Compute the sum of {@code this} and {@code v}. Implementations should throw\n+     * {@link org.apache.commons.math3.exception.DimensionMismatchException} if\n+     * {@code v} is not the same size as {@code this}.\n+     *\n      * @param v vector to be added\n      * @return {@code this + v}\n-     * @throws DimensionMismatchException if {@code v} is not the same size as\n-     * {@code this}\n-     */\n-    FieldVector<T> add(FieldVector<T> v) throws DimensionMismatchException;\n-\n-    /**\n-     * Compute {@code this} minus {@code v}.\n+     */\n+    FieldVector<T> add(FieldVector<T> v);\n+\n+    /**\n+     * Compute {@code this} minus {@code v}. Implementations should throw\n+     * {@link org.apache.commons.math3.exception.DimensionMismatchException} if\n+     * {@code v} is not the same size as {@code this}\n+     *\n      * @param v vector to be subtracted\n      * @return {@code this + v}\n-     * @throws DimensionMismatchException if {@code v} is not the same size as\n-     * {@code this}\n-     */\n-    FieldVector<T> subtract(FieldVector<T> v) throws DimensionMismatchException;\n+     */\n+    FieldVector<T> subtract(FieldVector<T> v);\n \n     /**\n      * Map an addition operation to each entry.\n     FieldVector<T> mapMultiplyToSelf(T d);\n \n     /**\n-     * Map a division operation to each entry.\n+     * Map a division operation to each entry. Implementations should throw\n+     * <ul>\n+     * <li>{@link org.apache.commons.math3.exception.NullArgumentException} if\n+     *     {@code d} is {@code null},</li>\n+     * <li>{@link org.apache.commons.math3.exception.MathArithmeticException} if\n+     *     {@code d} is zero.</li>\n+     * </ul>\n+     *\n      * @param d value to divide all entries by\n      * @return {@code this / d}\n-     * @throws NullArgumentException if {@code d} is {@code null}.\n-     * @throws MathArithmeticException if {@code d} is zero.\n-     */\n-    FieldVector<T> mapDivide(T d)\n-        throws NullArgumentException, MathArithmeticException;\n-\n-    /**\n-     * Map a division operation to each entry.\n-     * <p>The instance <strong>is</strong> changed by this method.</p>\n+     */\n+    FieldVector<T> mapDivide(T d);\n+\n+    /**\n+     * Map a division operation to each entry. The instance <strong>is</strong>\n+     * changed by this method.\n+     * <ul>\n+     * <li>{@link org.apache.commons.math3.exception.NullArgumentException} if\n+     *     {@code d} is {@code null},</li>\n+     * <li>{@link org.apache.commons.math3.exception.MathArithmeticException} if\n+     *     {@code d} is zero.</li>\n+     * </ul>\n+     *\n      * @param d value to divide all entries by\n      * @return for convenience, return {@code this}\n-     * @throws NullArgumentException if {@code d} is {@code null}.\n-     * @throws MathArithmeticException if {@code d} is zero.\n-     */\n-    FieldVector<T> mapDivideToSelf(T d)\n-        throws NullArgumentException, MathArithmeticException;\n-\n-    /**\n-     * Map the 1/x function to each entry.\n+     */\n+    FieldVector<T> mapDivideToSelf(T d);\n+\n+    /**\n+     * Map the 1/x function to each entry. Implementations should throw\n+     * {@link org.apache.commons.math3.exception.MathArithmeticException} if\n+     * one of the entries is zero.\n+     *\n      * @return a vector containing the result of applying the function to each\n      * entry.\n-     * @throws MathArithmeticException if one of the entries is zero.\n-     */\n-    FieldVector<T> mapInv() throws MathArithmeticException;\n-\n-    /**\n-     * Map the 1/x function to each entry.\n-     * <p>The instance <strong>is</strong> changed by this method.</p>\n-     * @return for convenience, return {@code this}\n-     * @throws MathArithmeticException if one of the entries is zero.\n-     */\n-    FieldVector<T> mapInvToSelf() throws MathArithmeticException;\n-\n-    /**\n-     * Element-by-element multiplication.\n+     */\n+    FieldVector<T> mapInv();\n+\n+    /**\n+     * Map the 1/x function to each entry. The instance <strong>is</strong>\n+     * changed by this method. Implementations should throw\n+     * {@link org.apache.commons.math3.exception.MathArithmeticException} if\n+     * one of the entries is zero.\n+     *\n+     * @return for convenience, return {@code this}\n+     */\n+    FieldVector<T> mapInvToSelf();\n+\n+    /**\n+     * Element-by-element multiplication. Implementations should throw\n+     * {@link org.apache.commons.math3.exception.DimensionMismatchException} if\n+     * {@code v} is not the same size as {@code this}.\n+     *\n      * @param v vector by which instance elements must be multiplied\n      * @return a vector containing {@code this[i] * v[i]} for all {@code i}\n-     * @throws DimensionMismatchException if {@code v} is not the same size as\n-     * {@code this}\n-     */\n-    FieldVector<T> ebeMultiply(FieldVector<T> v)\n-        throws DimensionMismatchException;\n-\n-    /**\n-     * Element-by-element division.\n+     */\n+    FieldVector<T> ebeMultiply(FieldVector<T> v);\n+\n+    /**\n+     * Element-by-element division. Implementations should throw\n+     * <ul>\n+     * <li>{@link org.apache.commons.math3.exception.DimensionMismatchException}\n+     *     if {@code v} is not the same size as {@code this},</li>\n+     * <li>{@link org.apache.commons.math3.exception.MathArithmeticException}\n+     *     if one entry of {@code v} is zero.\n+     * </li>\n+     * </ul>\n+     *\n      * @param v vector by which instance elements must be divided\n      * @return a vector containing {@code this[i] / v[i]} for all {@code i}\n-     * @throws DimensionMismatchException if {@code v} is not the same size as\n-     * {@code this}\n-     * @throws MathArithmeticException if one entry of {@code v} is zero.\n-     */\n-    FieldVector<T> ebeDivide(FieldVector<T> v)\n-        throws DimensionMismatchException, MathArithmeticException;\n+     */\n+    FieldVector<T> ebeDivide(FieldVector<T> v);\n \n     /**\n      * Returns vector entries as a T array.\n      T[] getData();\n \n     /**\n-     * Compute the dot product.\n+     * Compute the dot product. Implementations should throw\n+     * {@link org.apache.commons.math3.exception.DimensionMismatchException} if\n+     * {@code v} is not the same size as {@code this}.\n+     *\n      * @param v vector with which dot product should be computed\n      * @return the scalar dot product of {@code this} and {@code v}\n-     * @throws DimensionMismatchException if {@code v} is not the same size as\n-     * {@code this}\n-     */\n-    T dotProduct(FieldVector<T> v) throws DimensionMismatchException;\n-\n-    /** Find the orthogonal projection of this vector onto another vector.\n+     */\n+    T dotProduct(FieldVector<T> v);\n+\n+    /**\n+     * Find the orthogonal projection of this vector onto another vector.\n+     * Implementations should throw\n+     * <ul>\n+     * <li>{@link org.apache.commons.math3.exception.DimensionMismatchException}\n+     *     if {@code v} is not the same size as {@code this},</li>\n+     * <li>{@link org.apache.commons.math3.exception.MathArithmeticException}\n+     *     if {@code v} is the null vector.\n+     * </li>\n+     * </ul>\n+     *\n      * @param v vector onto which {@code this} must be projected\n      * @return projection of {@code this} onto {@code v}\n-     * @throws DimensionMismatchException if {@code v} is not the same size as\n-     * {@code this}\n-     * @throws MathArithmeticException if {@code v} is the null vector.\n-     */\n-    FieldVector<T> projection(FieldVector<T> v)\n-        throws DimensionMismatchException, MathArithmeticException;\n+     */\n+    FieldVector<T> projection(FieldVector<T> v);\n \n     /**\n      * Compute the outer product.\n     FieldMatrix<T> outerProduct(FieldVector<T> v);\n \n     /**\n-     * Returns the entry in the specified index.\n+     * Returns the entry in the specified index. Implementations should throw\n+     * {@link org.apache.commons.math3.exception.OutOfRangeException} if the\n+     * index is not valid.\n      *\n      * @param index Index location of entry to be fetched.\n      * @return the vector entry at {@code index}.\n-     * @throws OutOfRangeException if the index is not valid.\n      * @see #setEntry(int, FieldElement)\n      */\n-    T getEntry(int index) throws OutOfRangeException;\n-\n-    /**\n-     * Set a single element.\n+    T getEntry(int index);\n+\n+    /**\n+     * Set a single element. Implementations should throw\n+     * <ul>\n+     * <li>{@link org.apache.commons.math3.exception.OutOfRangeException} if the\n+     *     index is not valid,</li>\n+     * <li>{@link org.apache.commons.math3.exception.NullArgumentException} if\n+     *     the value is {@code null}.</li>\n+     * </ul>\n+     *\n      * @param index element index.\n      * @param value new value for the element.\n-     * @throws OutOfRangeException if the index is not valid.\n      * @see #getEntry(int)\n      */\n-    void setEntry(int index, T value) throws OutOfRangeException;\n+    void setEntry(int index, T value);\n \n     /**\n      * Returns the size of the vector.\n     FieldVector<T> append(T d);\n \n     /**\n-     * Get a subvector from consecutive elements.\n+     * Get a subvector from consecutive elements. Implementations should throw\n+     * <ul>\n+     * <li>{@link org.apache.commons.math3.exception.OutOfRangeException} if the\n+     *     index is not valid,</li>\n+     * <li>{@link org.apache.commons.math3.exception.NotPositiveException} if\n+     *     the number of elements is not positive.</li>\n+     * </ul>\n+     *\n      * @param index index of first element.\n      * @param n number of elements to be retrieved.\n      * @return a vector containing n elements.\n-     * @throws OutOfRangeException if the index is not valid.\n-     * @throws NotPositiveException if the number of elements if not positive.\n-     */\n-    FieldVector<T> getSubVector(int index, int n)\n-        throws OutOfRangeException, NotPositiveException;\n-\n-    /**\n-     * Set a set of consecutive elements.\n+     */\n+    FieldVector<T> getSubVector(int index, int n);\n+\n+    /**\n+     * Set a set of consecutive elements. Implementations should throw\n+     * {@link org.apache.commons.math3.exception.OutOfRangeException} if the\n+     * index is not valid.\n+     *\n      * @param index index of first element to be set.\n      * @param v vector containing the values to set.\n-     * @throws OutOfRangeException if the index is not valid.\n-     */\n-    void setSubVector(int index, FieldVector<T> v) throws OutOfRangeException;\n+     */\n+    void setSubVector(int index, FieldVector<T> v);\n \n     /**\n      * Set all elements to a single value.", "timestamp": 1347475066, "metainfo": ""}