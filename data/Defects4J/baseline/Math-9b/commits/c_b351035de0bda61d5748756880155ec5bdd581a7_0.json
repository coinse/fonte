{"sha": "b351035de0bda61d5748756880155ec5bdd581a7", "log": "Fixed, documented NaN handling.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- * The sum of the values that have been added to Univariate.\n- *\n- * @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:16 $\n+  * Returns the sum of the available values.\n+ * <p>\n+ * If there are no values in the dataset, or any of the values are \n+ * <code>NaN</code>, then <code>NaN</code> is returned.  \n+ * \n+ * @version $Revision: 1.21 $ $Date: 2004/06/29 14:50:21 $\n  */\n public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n     public void increment(final double d) {\n-        if (Double.isNaN(value)) {\n+        if (n == 0) {\n             value = d;\n         } else {\n             value += d;\n     }\n \n     /**\n-     * The sum of the values that have been added to Univariate.\n+     * The sum of the values that have been added.\n+     * \n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length the number of elements to include\n      * @return the sum of the values or Double.NaN if the array is empty\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n-    public double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+    public double evaluate(final double[] values, final int begin, final int length) {\n         double sum = Double.NaN;\n         if (test(values, begin, length)) {\n             sum = 0.0;", "timestamp": 1088520621, "metainfo": ""}