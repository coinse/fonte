{"sha": "4552822ea2525e835a37aa9ac1dacc96011d2782", "log": "Code and Javadoc cleanup.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/ISAACRandom.java\n+++ b/src/main/java/org/apache/commons/math/random/ISAACRandom.java\n import java.io.Serializable;\n \n /**\n- * <h3>ISAAC: a fast cryptographic pseudo-random number generator</h3>\n- * <p/>\n- * ISAAC (Indirection, Shift, Accumulate, Add, and Count) generates 32-bit random numbers.<br>\n- * ISAAC has been designed to be cryptographically secure and is inspired by RC4.<br>\n- * Cycles are guaranteed to be at least 2<sup>40</sup> values long, and they are 2<sup>8295</sup>\n- * values long on average.<br>\n- * The results are uniformly distributed, unbiased, and unpredictable unless you know the seed.<br>\n- * <br>\n- * This is Java implementation (with minor changes and improvements) of original algorithm by Bob Jenkins.<br>\n- * <br>\n+ * <a href=\"http://burtleburtle.net/bob/rand/isaacafa.html\">\n+ *  ISAAC: a fast cryptographic pseudo-random number generator</a>\n+ * <br/>\n+ * ISAAC (Indirection, Shift, Accumulate, Add, and Count) generates 32-bit\n+ * random numbers.\n+ * ISAAC has been designed to be cryptographically secure and is inspired\n+ * by RC4.\n+ * Cycles are guaranteed to be at least 2<sup>40</sup> values long, and they\n+ * are 2<sup>8295</sup> values long on average.\n+ * The results are uniformly distributed, unbiased, and unpredictable unless\n+ * you know the seed.\n+ * <br/>\n+ * This code is based (with minor changes and improvements) on the original\n+ * implementation of the algorithm by Bob Jenkins.\n+ * <br/>\n  *\n- * @see <a href=\"http://burtleburtle.net/bob/rand/isaacafa.html\">ISAAC: a fast cryptographic random number generator</a>\n+ * @version $Id$\n  * @since 3.0\n  */\n public class ISAACRandom extends BitsStreamGenerator implements Serializable {\n-\n     /** Serializable version identifier */\n     private static final long serialVersionUID = 7288197941165002400L;\n-\n     /** Log of size of rsl[] and mem[] */\n     private static final int SIZE_L = 8;\n-\n     /** Size of rsl[] and mem[] */\n     private static final int SIZE = 1 << SIZE_L;\n-\n     /** Half-size of rsl[] and mem[] */\n     private static final int H_SIZE = SIZE >> 1;\n-\n     /** For pseudo-random lookup */\n     private static final int MASK = SIZE - 1 << 2;\n-\n     /** The golden ratio */\n     private static final int GLD_RATIO = 0x9e3779b9;\n-\n     /** The results given to the user */\n     private int[] rsl;\n-\n     /** The internal state */\n     private int[] mem;\n-\n     /** Count through the results in rsl[] */\n     private int count;\n-\n     /** Accumulator */\n     private int isaacA;\n-\n     /** The last result */\n     private int isaacB;\n-\n     /** Counter, guarantees cycle is at least 2^40 */\n     private int isaacC;\n-\n     /** Service variable. */\n     private transient int[] arr;\n     /** Service variable. */", "timestamp": 1326903768, "metainfo": ""}