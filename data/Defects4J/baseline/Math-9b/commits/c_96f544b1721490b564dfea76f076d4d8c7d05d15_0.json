{"sha": "96f544b1721490b564dfea76f076d4d8c7d05d15", "log": "MATH-422 Removed setters. Removed coresponding unit tests. Added a \"getInstance\" method so that some tests can still work. Removed a seemingly unnecessary call to the \"clone\" method.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/main/java/org/apache/commons/math/complex/ComplexFormat.java\n      * @param format the custom format for both real and imaginary parts.\n      */\n     public ComplexFormat(String imaginaryCharacter, NumberFormat format) {\n-        this(imaginaryCharacter, format, (NumberFormat)format.clone());\n+        this(imaginaryCharacter, format, format);\n     }\n \n     /**\n      * Create an instance with a custom imaginary character, a custom number\n      * format for the real part, and a custom number format for the imaginary\n      * part.\n+     *\n      * @param imaginaryCharacter The custom imaginary character.\n      * @param realFormat the custom format for the real part.\n      * @param imaginaryFormat the custom format for the imaginary part.\n-     */\n-    public ComplexFormat(String imaginaryCharacter, NumberFormat realFormat,\n-            NumberFormat imaginaryFormat) {\n-        super();\n-        setImaginaryCharacter(imaginaryCharacter);\n-        setImaginaryFormat(imaginaryFormat);\n-        setRealFormat(realFormat);\n+     * @throws NullArgumentException if {@code imaginaryCharacter} is\n+     * {@code null}.\n+     * @throws NoDataException if {@code imaginaryCharacter} is an\n+     * empty string.\n+     * @throws NullArgumentException if {@code imaginaryFormat} is {@code null}.\n+     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n+     */\n+    public ComplexFormat(String imaginaryCharacter,\n+                         NumberFormat realFormat,\n+                         NumberFormat imaginaryFormat) {\n+        if (imaginaryCharacter == null) {\n+            throw new NullArgumentException();\n+        }\n+        if (imaginaryCharacter.length() == 0) {\n+            throw new NoDataException();\n+        }\n+        if (imaginaryFormat == null) {\n+            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n+        }\n+        if (realFormat == null) {\n+            throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);\n+        }\n+\n+        this.imaginaryCharacter = imaginaryCharacter;\n+        this.imaginaryFormat = imaginaryFormat;\n+        this.realFormat = realFormat;\n     }\n \n     /**\n     public static ComplexFormat getInstance(Locale locale) {\n         NumberFormat f = CompositeFormat.getDefaultNumberFormat(locale);\n         return new ComplexFormat(f);\n+    }\n+\n+    /**\n+     * Returns the default complex format for the given locale.\n+     * @param locale the specific locale used by the format.\n+     * @param imaginaryCharacter Imaginary character.\n+     * @return the complex format specific to the given locale.\n+     */\n+    public static ComplexFormat getInstance(String imaginaryCharacter,\n+                                            Locale locale) {\n+        NumberFormat f = CompositeFormat.getDefaultNumberFormat(locale);\n+        return new ComplexFormat(imaginaryCharacter, f);\n     }\n \n     /**\n         return new Complex(re.doubleValue(), im.doubleValue() * sign);\n \n     }\n-\n-    /**\n-     * Modify the imaginaryCharacter.\n-     * @param imaginaryCharacter The new imaginaryCharacter value.\n-     * @throws NullArgumentException if {@code imaginaryCharacter} is\n-     * {@code null}.\n-     * @throws NoDataException if {@code imaginaryCharacter} is an\n-     * empty string.\n-     */\n-    public void setImaginaryCharacter(String imaginaryCharacter) {\n-        if (imaginaryCharacter == null) {\n-            throw new NullArgumentException();\n-        }\n-        if (imaginaryCharacter.length() == 0) {\n-            throw new NoDataException();\n-        }\n-        this.imaginaryCharacter = imaginaryCharacter;\n-    }\n-\n-    /**\n-     * Modify the imaginaryFormat.\n-     * @param imaginaryFormat The new imaginaryFormat value.\n-     * @throws NullArgumentException if {@code imaginaryFormat} is {@code null}.\n-     */\n-    public void setImaginaryFormat(NumberFormat imaginaryFormat) {\n-        if (imaginaryFormat == null) {\n-            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n-        }\n-        this.imaginaryFormat = imaginaryFormat;\n-    }\n-\n-    /**\n-     * Modify the realFormat.\n-     * @param realFormat The new realFormat value.\n-     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n-     */\n-    public void setRealFormat(NumberFormat realFormat) {\n-        if (realFormat == null) {\n-            throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);\n-        }\n-        this.realFormat = realFormat;\n-    }\n }\n--- a/src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java\n \n     protected ComplexFormatAbstractTest() {\n         complexFormat = ComplexFormat.getInstance(getLocale());\n-        complexFormatJ = ComplexFormat.getInstance(getLocale());\n-        complexFormatJ.setImaginaryCharacter(\"j\");\n+        complexFormatJ = ComplexFormat.getInstance(\"j\", getLocale());\n     }\n \n     @Test\n     @Test\n     public void testGetImaginaryFormat() {\n         NumberFormat nf = NumberFormat.getInstance();\n-        ComplexFormat cf = new ComplexFormat();\n-\n-        Assert.assertNotSame(nf, cf.getImaginaryFormat());\n-        cf.setImaginaryFormat(nf);\n+        ComplexFormat cf = new ComplexFormat(nf);\n         Assert.assertSame(nf, cf.getImaginaryFormat());\n-    }\n-\n-    @Test\n-    public void testSetImaginaryFormatNull() {\n-        try {\n-            ComplexFormat cf = new ComplexFormat();\n-            cf.setImaginaryFormat(null);\n-            Assert.fail();\n-        } catch (NullArgumentException ex) {\n-            // success\n-        }\n-    }\n-\n-    @Test\n-    public void testSetRealFormatNull() {\n-        try {\n-            ComplexFormat cf = new ComplexFormat();\n-            cf.setRealFormat(null);\n-            Assert.fail();\n-        } catch (NullArgumentException ex) {\n-            // success\n-        }\n     }\n \n     @Test\n     public void testGetRealFormat() {\n         NumberFormat nf = NumberFormat.getInstance();\n-        ComplexFormat cf = new ComplexFormat();\n-\n-        Assert.assertNotSame(nf, cf.getRealFormat());\n-        cf.setRealFormat(nf);\n+        ComplexFormat cf = new ComplexFormat(nf);\n         Assert.assertSame(nf, cf.getRealFormat());\n-    }\n-\n-    @Test\n-    public void testSetImaginaryCharacterNull() {\n-        try {\n-            ComplexFormat cf = new ComplexFormat();\n-            cf.setImaginaryCharacter(null);\n-            Assert.fail();\n-        } catch (NullArgumentException ex) {\n-            // success\n-        }\n-    }\n-\n-    @Test\n-    public void testSetImaginaryCharacterEmpty() {\n-        try {\n-            ComplexFormat cf = new ComplexFormat();\n-            cf.setImaginaryCharacter(\"\");\n-            Assert.fail();\n-        } catch (MathIllegalArgumentException ex) {\n-            // success\n-        }\n     }\n \n     @Test", "timestamp": 1294432392, "metainfo": ""}