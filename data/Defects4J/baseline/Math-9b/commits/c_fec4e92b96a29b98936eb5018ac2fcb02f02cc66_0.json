{"sha": "fec4e92b96a29b98936eb5018ac2fcb02f02cc66", "log": "Improved efficiency and javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n \n import java.io.Serializable;\n \n-import org\n-    .apache\n-    .commons\n-    .math\n-    .stat\n-    .univariate\n-    .AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- * Returns the sum of the natural logs for this collection of values.\n+ * Returns the sum of the natural logs for this collection of values.  \n+ * <p>\n+ * Uses {@link java.lang.Math#log(double)} to compute the logs.  Therefore,\n+ * <ul>\n+ * <li>If any of values are < 0, the result is <code>NaN.</code></li>\n+ * <li>If all values are non-negative and less than <code>Double.POSITIVE_INFINITY</code>, \n+ * but at least one value is 0, the result is <code>Double.NEGATIVE_INFINITY.</code></li>\n+ * <li>If both <code>Double.POSITIVE_INFINITY</code> and \n+ * <code>Double.NEGATIVE_INFINITY</code> are among the values, the result is\n+ * <code>NaN.</code></li>\n+ * </ul>\n  * \n- * @version $Revision: 1.17 $ $Date: 2004/04/27 16:42:32 $\n+ * @version $Revision: 1.18 $ $Date: 2004/06/18 06:32:07 $\n  */\n public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n     static final long serialVersionUID = -370076995648386763L;    \n \n-    /** */\n+    /**Number of values that have been added */\n     private int n = 0;\n     \n     /**\n      * The currently running value\n      */\n-    private double value = Double.NaN;\n-\n-    /** */\n-    private boolean init = true;\n+    private double value = 0d;\n \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n     public void increment(final double d) {\n-        if (init) {\n-            value = Math.log(d);\n-            init = false;\n-        } else {\n-            value += Math.log(d);\n-        }\n+        value += Math.log(d);\n         n++;\n     }\n \n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n      */\n     public double getResult() {\n-        return value;\n+        if (n > 0) {\n+            return value;\n+        } else {\n+            return Double.NaN;\n+        }\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n      */\n     public void clear() {\n-        value = Double.NaN;\n-        init = true;\n+        value = 0d;\n         n = 0;\n     }\n \n     /**\n-     * Returns the sum of the natural logs for this collection of values\n+     * Returns the sum of the natural logs for this collection of values.\n+     * <p>\n+     * See {@link SumOfLogs}.\n+     * \n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length the number of elements to include\n      * @return the sumLog value or Double.NaN if the array is empty\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n-    public double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+    public double evaluate(final double[] values, final int begin, final int length) {\n         double sumLog = Double.NaN;\n         if (test(values, begin, length)) {\n             sumLog = 0.0;", "timestamp": 1087540327, "metainfo": ""}