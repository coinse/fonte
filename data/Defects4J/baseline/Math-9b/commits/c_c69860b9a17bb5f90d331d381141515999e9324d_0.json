{"sha": "c69860b9a17bb5f90d331d381141515999e9324d", "log": "added error handling for multiple linear-regression added documentation for multiple linear-regression JIRA: MATH-203  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n      * \n      * @param y the [n,1] array representing the y sample\n      */\n-    protected void addYSampleData(double[] y){\n+    protected void addYSampleData(double[] y) {\n         this.Y = new RealMatrixImpl(y);\n     }\n \n      * \n      * @param x the [n,k] array representing the x sample\n      */\n-    protected void addXSampleData(double[][] x){\n+    protected void addXSampleData(double[][] x) {\n         this.X = new RealMatrixImpl(x);\n+    }\n+\n+    /**\n+     * Validates sample data.\n+     * \n+     * @param x the [n,k] array representing the x sample\n+     * @param y the [n,1] array representing the y sample\n+     * @throws IllegalArgumentException if the x and y array data are not\n+     *             compatible for the regression\n+     */\n+    protected void validateSampleData(double[][] x, double[] y) {\n+        if (x == null) {\n+            throw new IllegalArgumentException(\"The regressors matrix x cannot be null.\");\n+        }\n+        if (y == null) {\n+            throw new IllegalArgumentException(\"The regressand vector y cannot be null.\");\n+        }\n+        if (x.length != y.length) {\n+            throw new IllegalArgumentException(\n+                    \"The regressors matrix x columns must have the same length of the regressand vector y\");\n+        }\n+    }\n+\n+    /**\n+     * Validates sample data.\n+     * \n+     * @param x the [n,k] array representing the x sample\n+     * @param covariance the [n,n] array representing the covariance matrix\n+     * @throws IllegalArgumentException if the x sample data or covariance\n+     *             matrix are not compatible for the regression\n+     */\n+    protected void validateCovarianceData(double[][] x, double[][] covariance) {\n+        if (covariance == null) {\n+            throw new IllegalArgumentException(\"Covariance matrix cannot be null.\");\n+        }\n+        if (x.length != covariance.length) {\n+            throw new IllegalArgumentException(\n+                    \"The regressors matrix x columns must have the same length of the covariance matrix columns\");\n+        }\n+        if (covariance.length > 0 && covariance.length != covariance[0].length) {\n+            throw new IllegalArgumentException(\"The covariance matrix must be square\");\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n-    public double[] estimateRegressionParameters(){\n+    public double[] estimateRegressionParameters() {\n         RealMatrix b = calculateBeta();\n         return b.getColumn(0);\n-    }    \n-    \n+    }\n+\n     /**\n      * {@inheritDoc}\n      */\n-    public double[] estimateResiduals(){\n+    public double[] estimateResiduals() {\n         RealMatrix b = calculateBeta();\n         RealMatrix e = Y.subtract(X.multiply(b));\n         return e.getColumn(0);\n     public double estimateRegressandVariance() {\n         return calculateYVariance();\n     }\n-    \n+\n     /**\n      * Calculates the beta of multiple linear regression in matrix notation.\n+     * \n      * @return beta\n      */\n-    protected abstract RealMatrix calculateBeta();    \n-    \n+    protected abstract RealMatrix calculateBeta();\n+\n     /**\n-     * Calculates the beta variance of multiple linear regression in matrix notation.\n+     * Calculates the beta variance of multiple linear regression in matrix\n+     * notation.\n+     * \n      * @return beta variance\n      */\n     protected abstract RealMatrix calculateBetaVariance();\n-    \n+\n     /**\n      * Calculates the Y variance of multiple linear regression.\n+     * \n      * @return Y variance\n      */\n     protected abstract double calculateYVariance();\n \n     /**\n-     * Calculates the residuals of multiple linear regression in matrix notation.\n+     * Calculates the residuals of multiple linear regression in matrix\n+     * notation.\n+     * \n      * <pre>\n-     * u = y - X*b\n+     * u = y - X * b\n      * </pre>\n      * \n-     * @return The residuals [n,1] matrix \n+     * @return The residuals [n,1] matrix\n      */\n     protected RealMatrix calculateResiduals() {\n         RealMatrix b = calculateBeta();\n         return Y.subtract(X.multiply(b));\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n      * {@inheritDoc}\n      */\n     public void addData(double[] y, double[][] x, double[][] covariance) {\n+        validateSampleData(x, y);\n         addYSampleData(y);\n         addXSampleData(x);\n+        validateCovarianceData(x, covariance);\n         addCovarianceData(covariance);\n     }\n \n--- a/src/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java\n      * \n      * @param y the [n,1] array representing the y sample\n      * @param x the [n,k] array representing x sample\n-     * @param covariance the [n,n] array representing the covariance matrix or <code>null</code> if not appropriate for the\n+     * @param covariance the [n,n] array representing the covariance matrix or <code>null</code> if not required for the\n      *          specific implementation\n+     * @throws IllegalArgumentException if required data arrays are <code>null</code> or their dimensions are not appropriate\n      */\n     void addData(double[] y, double[][] x, double[][] covariance);\n \n      * @return The [n,1] array representing the residuals\n      */\n     double[] estimateResiduals();\n-    \n+\n     /**\n      * Returns the variance of the regressand, ie Var(y).\n      * \n--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n      * {@inheritDoc}\n      */\n     public void addData(double[] y, double[][] x, double[][] covariance) {\n+        validateSampleData(x, y);\n         addYSampleData(y);\n         addXSampleData(x);\n     }\n--- a/src/test/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegressionTest.java\n \n public abstract class AbstractMultipleLinearRegressionTest {\n \n-    private MultipleLinearRegression regression;\n+    protected MultipleLinearRegression regression;\n \n     @Before\n     public void setUp(){\n         double variance = regression.estimateRegressandVariance();\n         assertTrue(variance > 0.0);\n     }   \n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void cannotAddXSampleData() {\n+        regression.addData(new double[]{}, null, null);\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void cannotAddNullYSampleData() {\n+        regression.addData(null, new double[][]{}, null);\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void cannotAddSampleDataWithSizeMismatch() {\n+        double[] y = new double[]{1.0, 2.0};\n+        double[][] x = new double[1][];\n+        x[0] = new double[]{1.0, 0};\n+        regression.addData(y, x, null);\n+    }\n \n }\n--- a/src/test/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java\n package org.apache.commons.math.stat.regression;\n \n import org.junit.Before;\n+import org.junit.Test;\n \n public class GLSMultipleLinearRegressionTest extends AbstractMultipleLinearRegressionTest {\n \n         super.setUp();\n     }\n    \n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void cannotAddNullCovarianceData() {\n+        regression.addData(new double[]{}, new double[][]{}, null);\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void cannotAddCovarianceDataWithSampleSizeMismatch() {\n+        double[] y = new double[]{1.0, 2.0};\n+        double[][] x = new double[2][];\n+        x[0] = new double[]{1.0, 0};\n+        x[1] = new double[]{0, 1.0};\n+        double[][] omega = new double[1][];\n+        omega[0] = new double[]{1.0, 0};\n+        regression.addData(y, x, omega);\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void cannotAddCovarianceDataThatIsNotSquare() {\n+        double[] y = new double[]{1.0, 2.0};\n+        double[][] x = new double[2][];\n+        x[0] = new double[]{1.0, 0};\n+        x[1] = new double[]{0, 1.0};\n+        double[][] omega = new double[3][];\n+        omega[0] = new double[]{1.0, 0};\n+        omega[1] = new double[]{0, 1.0};\n+        omega[2] = new double[]{0, 2.0};\n+        regression.addData(y, x, omega);\n+    }\n+\n     protected MultipleLinearRegression createRegression() {\n         MultipleLinearRegression regression = new GLSMultipleLinearRegression();\n         regression.addData(y, x, omega);\n     protected int getSampleSize() {\n         return y.length;\n     }\n-    \n+        \n }", "timestamp": 1211372007, "metainfo": ""}