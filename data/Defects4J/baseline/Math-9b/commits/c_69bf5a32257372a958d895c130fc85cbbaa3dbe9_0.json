{"sha": "69bf5a32257372a958d895c130fc85cbbaa3dbe9", "log": "added an angle normalization method to MathUtils  ", "commit": "\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n \n     /** 0.0 cast as a short. */\n     private static final short ZS = (short)0;\n+\n+    /** 2 &pi;. */\n+    private static final double TWO_PI = 2 * Math.PI;\n \n     /**\n      * Private Constructor\n     }\n \n     /**\n+     * Normalize an angle in a 2&pi wide interval around a center value.\n+     * <p>This method has three main uses:</p>\n+     * <ul>\n+     *   <li>normalize an angle between 0 and 2&pi;:<br/>\n+     *       <code>a = MathUtils.normalizeAngle(a, Math.PI);</code></li>\n+     *   <li>normalize an angle between -&pi; and +&pi;<br/>\n+     *       <code>a = MathUtils.normalizeAngle(a, 0.0);</code></li>\n+     *   <li>compute the angle between two defining angular positions:<br>\n+     *       <code>angle = MathUtils.normalizeAngle(end, start) - start;</code></li>\n+     * </ul>\n+     * <p>Note that due to numerical accuracy and since &pi; cannot be represented\n+     * exactly, the result interval is <em>closed</em>, it cannot be half-closed\n+     * as would be more satisfactory in a purely mathematical view.</p>\n+     * @param a angle to normalize\n+     * @param center center of the desired 2&pi; interval for the result\n+     * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;\n+     */\n+     public static double normalizeAngle(double a, double center) {\n+         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);\n+     }\n+\n+    /**\n      * Round the given value to the specified number of decimal places. The\n      * value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.\n      * \n         }\n         return ret;\n     }\n+\n }\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n import junit.framework.TestSuite;\n \n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n \n /**\n  * Test cases for the MathUtils class.\n         assertEquals(0, MathUtils.nextAfter(-Double.MIN_VALUE, 1), 0);\n     }\n \n+    public void testNormalizeAngle() {\n+        SummaryStatistics stat = new SummaryStatistics();\n+        for (double a = -15.0; a <= 15.0; a += 0.1) {\n+            for (double b = -15.0; b <= 15.0; b += 0.2) {\n+                double c = MathUtils.normalizeAngle(a, b);\n+                assertTrue((b - Math.PI) <= c);\n+                assertTrue(c <= (b + Math.PI));\n+                double twoK = Math.rint((a - c) / Math.PI);\n+                stat.addValue(c - a + twoK * Math.PI);\n+                assertEquals(c, a - twoK * Math.PI, 1.0e-14);\n+            }\n+        }\n+    }\n+\n     public void testRoundDouble() {\n         double x = 1.234567890;\n         assertEquals(1.23, MathUtils.round(x, 2), 0.0);", "timestamp": 1202474193, "metainfo": ""}