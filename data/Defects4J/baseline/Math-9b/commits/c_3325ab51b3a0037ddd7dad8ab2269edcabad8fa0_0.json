{"sha": "3325ab51b3a0037ddd7dad8ab2269edcabad8fa0", "log": "switch the matrix type built by factory methods depending on the dimension  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/MatrixUtils.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixUtils.java\n     \n     /**\n      * Returns a {@link RealMatrix} with specified dimensions.\n+     * <p>The type of matrix returned depends on the dimension. Below\n+     * 2<sup>12</sup> elements (i.e. 4096 elements or 64&times;64 for a\n+     * square matrix) which can be stored in a 32kB array, a {@link\n+     * RealMatrixImpl} instance is built. Above this threshold a {@link\n+     * BlockRealMatrix} instance is built.</p>\n      * <p>The matrix elements are all set to 0.0.</p>\n      * @param rows number of rows of the matrix\n      * @param columns number of columns of the matrix\n      * @see #createRealMatrix(double[][])\n      */\n     public static RealMatrix createRealMatrix(final int rows, final int columns) {\n-        return new DenseRealMatrix(rows, columns);\n+        return (rows * columns <= 4096) ?\n+                new RealMatrixImpl(rows, columns) : new BlockRealMatrix(rows, columns);\n     }\n \n     /**\n      * Returns a {@link FieldMatrix} with specified dimensions.\n+     * <p>The type of matrix returned depends on the dimension. Below\n+     * 2<sup>12</sup> elements (i.e. 4096 elements or 64&times;64 for a\n+     * square matrix), a {@link FieldMatrix} instance is built. Above\n+     * this threshold a {@link BlockFieldMatrix} instance is built.</p>\n      * <p>The matrix elements are all set to field.getZero().</p>\n      * @param <T> the type of the field elements\n      * @param field field to which the matrix elements belong\n     public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field,\n                                                                                final int rows,\n                                                                                final int columns) {\n-        return new DenseFieldMatrix<T>(field, rows, columns);\n+        return (rows * columns <= 4096) ?\n+                new FieldMatrixImpl<T>(field, rows, columns) : new BlockFieldMatrix<T>(field, rows, columns);\n     }\n \n     /**\n      * Returns a {@link RealMatrix} whose entries are the the values in the\n-     * the input array.  The input array is copied, not referenced.\n+     * the input array.\n+     * <p>The type of matrix returned depends on the dimension. Below\n+     * 2<sup>12</sup> elements (i.e. 4096 elements or 64&times;64 for a\n+     * square matrix) which can be stored in a 32kB array, a {@link\n+     * RealMatrixImpl} instance is built. Above this threshold a {@link\n+     * BlockRealMatrix} instance is built.</p>\n+     * <p>The input array is copied, not referenced.</p>\n      * \n      * @param data input array\n      * @return  RealMatrix containing the values of the array\n      * @throws IllegalArgumentException if <code>data</code> is not rectangular\n      *  (not all rows have the same length) or empty\n-     * @throws NullPointerException if <code>data</code> is null\n+     * @throws NullPointerException if either <code>data</code> or\n+     * <code>data[0]</code> is null\n      * @see #createRealMatrix(int, int)\n      */\n     public static RealMatrix createRealMatrix(double[][] data) {\n-        return new DenseRealMatrix(data);\n+        return (data.length * data[0].length <= 4096) ?\n+                new RealMatrixImpl(data) : new BlockRealMatrix(data);\n     }\n \n     /**\n      * Returns a {@link FieldMatrix} whose entries are the the values in the\n      * the input array.\n-     * <p>\n-     * The input array is copied, not referenced.\n-     * </p>\n+     * <p>The type of matrix returned depends on the dimension. Below\n+     * 2<sup>12</sup> elements (i.e. 4096 elements or 64&times;64 for a\n+     * square matrix), a {@link FieldMatrix} instance is built. Above\n+     * this threshold a {@link BlockFieldMatrix} instance is built.</p>\n+     * <p>The input array is copied, not referenced.</p>\n      * @param <T> the type of the field elements\n      * @param data input array\n      * @return  RealMatrix containing the values of the array\n      * @throws IllegalArgumentException if <code>data</code> is not rectangular\n      *  (not all rows have the same length) or empty\n-     * @throws NullPointerException if <code>data</code> is null\n+     * @throws NullPointerException if either <code>data</code> or\n+     * <code>data[0]</code> is null\n      * @see #createFieldMatrix(Field, int, int)\n      * @since 2.0\n      */\n     public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) {\n-        return new DenseFieldMatrix<T>(data);\n+        return (data.length * data[0].length <= 4096) ?\n+                new FieldMatrixImpl<T>(data) : new BlockFieldMatrix<T>(data);\n     }\n \n     /**", "timestamp": 1244707565, "metainfo": ""}