{"sha": "61a188be8961fff8d8ffaa167b2bb883b664691e", "log": "Reuse is one word :).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n          * <p>The A matrix is implicit, it is provided by the underlying\n          * decomposition algorithm.</p>\n          * @param b right-hand side of the equation A &times; X = B\n-         * @param reUseB if true, the b array will be reused and returned,\n+         * @param reuseB if true, the b array will be reused and returned,\n          * instead of being copied\n          * @return a matrix X that minimizes the two norm of A &times; X - B\n          * @throws org.apache.commons.math.exception.DimensionMismatchException\n          * @throws SingularMatrixException\n          * if the decomposed matrix is singular.\n          */\n-        private double[][] solve(double[][] b, boolean reUseB) {\n+        private double[][] solve(double[][] b, boolean reuseB) {\n             final int m = lTData.length;\n             if (b.length != m) {\n                 throw new DimensionMismatchException(b.length, m);\n \n             final int nColB = b[0].length;\n             final double[][] x;\n-            if (reUseB) {\n+            if (reuseB) {\n                 x = b;\n             } else {\n                 x = new double[b.length][nColB];\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n          * <p>The A matrix is implicit, it is provided by the underlying\n          * decomposition algorithm.</p>\n          * @param b right-hand side of the equation A &times; X = B\n-         * @param reUseB if true, the b array will be reused and returned,\n+         * @param reuseB if true, the b array will be reused and returned,\n          * instead of being copied\n          * @return a matrix X that minimizes the two norm of A &times; X - B\n          * @throws org.apache.commons.math.exception.DimensionMismatchException\n          * @throws SingularMatrixException\n          * if the decomposed matrix is singular.\n          */\n-        private double[][] solve(double[][] b, boolean reUseB) {\n+        private double[][] solve(double[][] b, boolean reuseB) {\n \n             if (!isNonSingular()) {\n                 throw new SingularMatrixException();\n \n             final int nColB = b[0].length;\n             final double[][] bp;\n-            if (reUseB) {\n+            if (reuseB) {\n                 bp = b;\n             } else {\n                 bp = new double[m][nColB];", "timestamp": 1304104089, "metainfo": ""}