{"sha": "2e4cf965daad94ba0e3b7cea6981766c4c0281bc", "log": "MATH-854 Populate \"throws\" clause.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractDifferentiableUnivariateSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractDifferentiableUnivariateSolver.java\n \n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n \n /**\n  * Provide a default implementation for several functions useful to generic\n      * @param functionValueAccuracy Maximum function value error.\n      */\n     protected AbstractDifferentiableUnivariateSolver(final double relativeAccuracy,\n-                                                         final double absoluteAccuracy,\n-                                                         final double functionValueAccuracy) {\n+                                                     final double absoluteAccuracy,\n+                                                     final double functionValueAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);\n     }\n \n      * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n      * if the maximal number of evaluations is exceeded.\n      */\n-    protected double computeDerivativeObjectiveValue(double point) {\n+    protected double computeDerivativeObjectiveValue(double point)\n+        throws TooManyEvaluationsException {\n         incrementEvaluationCount();\n         return functionDerivative.value(point);\n     }\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver.java\n      * @param absoluteAccuracy Maximum absolute error.\n      */\n     protected AbstractUnivariateSolver(final double relativeAccuracy,\n-                                           final double absoluteAccuracy) {\n+                                       final double absoluteAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy);\n     }\n     /**\n      * @param functionValueAccuracy Maximum function value error.\n      */\n     protected AbstractUnivariateSolver(final double relativeAccuracy,\n-                                           final double absoluteAccuracy,\n-                                           final double functionValueAccuracy) {\n+                                       final double absoluteAccuracy,\n+                                       final double functionValueAccuracy) {\n         super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);\n     }\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java\n import org.apache.commons.math3.exception.MaxCountExceededException;\n import org.apache.commons.math3.exception.NoBracketingException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.util.Incrementor;\n import org.apache.commons.math3.util.MathUtils;\n \n     }\n \n     /** {@inheritDoc} */\n-    public double solve(int maxEval, FUNC f, double min, double max, double startValue) {\n+    public double solve(int maxEval, FUNC f, double min, double max, double startValue)\n+        throws TooManyEvaluationsException,\n+               NoBracketingException {\n         // Initialization.\n         setup(maxEval, f, min, max, startValue);\n \n     }\n \n     /** {@inheritDoc} */\n-    public double solve(int maxEval, FUNC f, double startValue) {\n+    public double solve(int maxEval, FUNC f, double startValue)\n+        throws TooManyEvaluationsException,\n+               NoBracketingException {\n         return solve(maxEval, f, Double.NaN, Double.NaN, startValue);\n     }\n \n      *\n      * @param lower Lower endpoint.\n      * @param upper Upper endpoint.\n-     * @throws org.apache.commons.math3.exception.NumberIsTooLargeException\n-     * if {@code lower >= upper}.\n+     * @throws NumberIsTooLargeException if {@code lower >= upper}.\n      */\n     protected void verifyInterval(final double lower,\n-                                  final double upper) {\n+                                  final double upper)\n+        throws NumberIsTooLargeException {\n         UnivariateSolverUtils.verifyInterval(lower, upper);\n     }\n \n      * @param lower Lower endpoint.\n      * @param initial Initial value.\n      * @param upper Upper endpoint.\n-     * @throws org.apache.commons.math3.exception.NumberIsTooLargeException\n-     * if {@code lower >= initial} or {@code initial >= upper}.\n+     * @throws NumberIsTooLargeException if {@code lower >= initial} or\n+     * {@code initial >= upper}.\n      */\n     protected void verifySequence(final double lower,\n                                   final double initial,\n-                                  final double upper) {\n+                                  final double upper)\n+        throws NumberIsTooLargeException {\n         UnivariateSolverUtils.verifySequence(lower, initial, upper);\n     }\n \n      *\n      * @param lower Lower endpoint.\n      * @param upper Upper endpoint.\n-     * @throws org.apache.commons.math3.exception.NoBracketingException if\n-     * the function has the same sign at the endpoints.\n+     * @throws NullArgumentException if the function has not been set.\n+     * @throws NoBracketingException if the function has the same sign at\n+     * the endpoints.\n      */\n     protected void verifyBracketing(final double lower,\n-                                    final double upper) {\n+                                    final double upper)\n+        throws NullArgumentException,\n+               NoBracketingException {\n         UnivariateSolverUtils.verifyBracketing(function, lower, upper);\n     }\n \n      * {@code computeObjectiveValue} to solve the function.\n      * See e.g. {@link AbstractUnivariateDifferentiableSolver}.\n      */\n-    protected void incrementEvaluationCount() {\n+    protected void incrementEvaluationCount()\n+        throws TooManyEvaluationsException {\n         try {\n             evaluations.incrementCount();\n         } catch (MaxCountExceededException e) {\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/BaseSecantSolver.java\n         return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws ConvergenceException if the algorithm failed due to finite\n+     * precision.\n+     */\n     @Override\n-    protected final double doSolve() {\n+    protected final double doSolve()\n+        throws ConvergenceException,\n+               MathInternalError {\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/BisectionSolver.java\n package org.apache.commons.math3.analysis.solvers;\n \n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/Bisection.html\">\n      * {@inheritDoc}\n      */\n     @Override\n-    protected double doSolve() {\n+    protected double doSolve() \n+        throws TooManyEvaluationsException {\n         double min = getMin();\n         double max = getMax();\n         verifyInterval(min, max);\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver.java\n import org.apache.commons.math3.exception.MathInternalError;\n import org.apache.commons.math3.exception.NoBracketingException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.Precision;\n \n      * {@inheritDoc}\n      */\n     @Override\n-    protected double doSolve() {\n-\n+    protected double doSolve()\n+        throws TooManyEvaluationsException,\n+               NumberIsTooLargeException,\n+               NoBracketingException {\n         // prepare arrays with the first points\n         final double[] x = new double[maximalOrder + 1];\n         final double[] y = new double[maximalOrder + 1];\n                     return (yA <  0) ? xB : xA;\n                 default :\n                     // this should never happen\n-                    throw new MathInternalError(null);\n+                    throw new MathInternalError();\n                 }\n             }\n \n \n     /** {@inheritDoc} */\n     public double solve(int maxEval, UnivariateFunction f, double min,\n-                        double max, AllowedSolution allowedSolution) {\n+                        double max, AllowedSolution allowedSolution)\n+        throws TooManyEvaluationsException,\n+               NumberIsTooLargeException,\n+               NoBracketingException {\n         this.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max);\n     }\n     /** {@inheritDoc} */\n     public double solve(int maxEval, UnivariateFunction f, double min,\n                         double max, double startValue,\n-                        AllowedSolution allowedSolution) {\n+                        AllowedSolution allowedSolution)\n+        throws TooManyEvaluationsException,\n+               NumberIsTooLargeException,\n+               NoBracketingException {\n         this.allowed = allowedSolution;\n         return super.solve(maxEval, f, min, max, startValue);\n     }\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/BrentSolver.java\n \n \n import org.apache.commons.math3.exception.NoBracketingException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.Precision;\n \n      * {@inheritDoc}\n      */\n     @Override\n-    protected double doSolve() {\n+    protected double doSolve()\n+        throws NoBracketingException,\n+               TooManyEvaluationsException,\n+               NumberIsTooLargeException {\n         double min = getMin();\n         double max = getMax();\n         final double initial = getStartValue();\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java\n import org.apache.commons.math3.exception.NoBracketingException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.NoDataException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.util.FastMath;\n \n      * {@inheritDoc}\n      */\n     @Override\n-    public double doSolve() {\n+    public double doSolve()\n+        throws TooManyEvaluationsException,\n+               NumberIsTooLargeException,\n+               NoBracketingException {\n         final double min = getMin();\n         final double max = getMax();\n         final double initial = getStartValue();\n      * @throws NoDataException if the {@code coefficients} array is empty.\n      */\n     public Complex[] solveAllComplex(double[] coefficients,\n-                                     double initial) {\n+                                     double initial)\n+        throws NullArgumentException,\n+               NoDataException,\n+               TooManyEvaluationsException {\n         setup(Integer.MAX_VALUE,\n               new PolynomialFunction(coefficients),\n               Double.NEGATIVE_INFINITY,\n      * @throws NoDataException if the {@code coefficients} array is empty.\n      */\n     public Complex solveComplex(double[] coefficients,\n-                                double initial) {\n+                                double initial)\n+        throws NullArgumentException,\n+               NoDataException,\n+               TooManyEvaluationsException {\n         setup(Integer.MAX_VALUE,\n               new PolynomialFunction(coefficients),\n               Double.NEGATIVE_INFINITY,\n          * {@code null}.\n          * @throws NoDataException if the {@code coefficients} array is empty.\n          */\n-        public Complex[] solveAll(Complex coefficients[], Complex initial) {\n+        public Complex[] solveAll(Complex coefficients[], Complex initial)\n+            throws NullArgumentException,\n+                   NoDataException,\n+                   TooManyEvaluationsException {\n             if (coefficients == null) {\n                 throw new NullArgumentException();\n             }\n          * {@code null}.\n          * @throws NoDataException if the {@code coefficients} array is empty.\n          */\n-        public Complex solve(Complex coefficients[], Complex initial) {\n+        public Complex solve(Complex coefficients[], Complex initial)\n+            throws NullArgumentException,\n+                   NoDataException,\n+                   TooManyEvaluationsException {\n             if (coefficients == null) {\n                 throw new NullArgumentException();\n             }\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/MullerSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/MullerSolver.java\n package org.apache.commons.math3.analysis.solvers;\n \n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.NoBracketingException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n \n /**\n  * This class implements the <a href=\"http://mathworld.wolfram.com/MullersMethod.html\">\n      * {@inheritDoc}\n      */\n     @Override\n-    protected double doSolve() {\n+    protected double doSolve()\n+        throws TooManyEvaluationsException,\n+               NumberIsTooLargeException,\n+               NoBracketingException {\n         final double min = getMin();\n         final double max = getMax();\n         final double initial = getStartValue();\n      * @return the point at which the function value is zero.\n      */\n     private double solve(double min, double max,\n-                         double fMin, double fMax) {\n+                         double fMin, double fMax)\n+        throws TooManyEvaluationsException {\n         final double relativeAccuracy = getRelativeAccuracy();\n         final double absoluteAccuracy = getAbsoluteAccuracy();\n         final double functionValueAccuracy = getFunctionValueAccuracy();\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/MullerSolver2.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/MullerSolver2.java\n package org.apache.commons.math3.analysis.solvers;\n \n import org.apache.commons.math3.exception.NoBracketingException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n      * {@inheritDoc}\n      */\n     @Override\n-    protected double doSolve() {\n+    protected double doSolve()\n+        throws TooManyEvaluationsException,\n+               NumberIsTooLargeException,\n+               NoBracketingException {\n         final double min = getMin();\n         final double max = getMax();\n \n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n \n /**\n  * Implements <a href=\"http://mathworld.wolfram.com/NewtonsMethod.html\">\n      */\n     @Override\n     public double solve(int maxEval, final UnivariateDifferentiable f,\n-                        final double min, final double max) {\n+                        final double min, final double max)\n+        throws TooManyEvaluationsException {\n         return super.solve(maxEval, f, UnivariateSolverUtils.midpoint(min, max));\n     }\n \n      * {@inheritDoc}\n      */\n     @Override\n-    protected double doSolve() {\n+    protected double doSolve()\n+        throws TooManyEvaluationsException {\n         final double startValue = getStartValue();\n         final double absoluteAccuracy = getAbsoluteAccuracy();\n \n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonSolver.java\n \n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n \n /**\n  * Implements <a href=\"http://mathworld.wolfram.com/NewtonsMethod.html\">\n      */\n     @Override\n     public double solve(int maxEval, final DifferentiableUnivariateFunction f,\n-                        final double min, final double max) {\n+                        final double min, final double max)\n+        throws TooManyEvaluationsException {\n         return super.solve(maxEval, f, UnivariateSolverUtils.midpoint(min, max));\n     }\n \n      * {@inheritDoc}\n      */\n     @Override\n-    protected double doSolve() {\n+    protected double doSolve()\n+        throws TooManyEvaluationsException {\n         final double startValue = getStartValue();\n         final double absoluteAccuracy = getAbsoluteAccuracy();\n \n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/RiddersSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/RiddersSolver.java\n package org.apache.commons.math3.analysis.solvers;\n \n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.exception.NoBracketingException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/RiddersMethod.html\">\n      * {@inheritDoc}\n      */\n     @Override\n-    protected double doSolve() {\n+    protected double doSolve()\n+        throws TooManyEvaluationsException,\n+               NoBracketingException {\n         double min = getMin();\n         double max = getMax();\n         // [x1, x2] is the bracketing interval in each iteration\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/SecantSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/SecantSolver.java\n package org.apache.commons.math3.analysis.solvers;\n \n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.exception.NoBracketingException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n \n /**\n  * Implements the <em>Secant</em> method for root-finding (approximating a\n \n     /** {@inheritDoc} */\n     @Override\n-    protected final double doSolve() {\n+    protected final double doSolve()\n+        throws TooManyEvaluationsException,\n+               NoBracketingException {\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.java\n      * @throws IllegalArgumentException if f is null or the endpoints do not\n      * specify a valid interval.\n      */\n-    public static double solve(UnivariateFunction function, double x0, double x1) {\n+    public static double solve(UnivariateFunction function, double x0, double x1)\n+        throws NullArgumentException {\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n      */\n     public static double solve(UnivariateFunction function,\n                                double x0, double x1,\n-                               double absoluteAccuracy) {\n+                               double absoluteAccuracy)\n+        throws NullArgumentException {\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n     public static double forceSide(final int maxEval, final UnivariateFunction f,\n                                    final BracketedUnivariateSolver<UnivariateFunction> bracketing,\n                                    final double baseRoot, final double min, final double max,\n-                                   final AllowedSolution allowedSolution) {\n+                                   final AllowedSolution allowedSolution)\n+        throws NoBracketingException {\n \n         if (allowedSolution == AllowedSolution.ANY_SIDE) {\n             // no further bracketing required\n      */\n     public static double[] bracket(UnivariateFunction function,\n                                    double initial,\n-                                   double lowerBound, double upperBound) {\n+                                   double lowerBound, double upperBound)\n+        throws NullArgumentException,\n+               NotStrictlyPositiveException,\n+               NoBracketingException {\n         return bracket(function, initial, lowerBound, upperBound, Integer.MAX_VALUE);\n     }\n \n     public static double[] bracket(UnivariateFunction function,\n                                    double initial,\n                                    double lowerBound, double upperBound,\n-                                   int maximumIterations)  {\n+                                   int maximumIterations) \n+        throws NullArgumentException,\n+               NotStrictlyPositiveException,\n+               NoBracketingException {\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n      */\n     public static boolean isBracketing(UnivariateFunction function,\n                                        final double lower,\n-                                       final double upper) {\n+                                       final double upper)\n+        throws NullArgumentException {\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n      * @throws NumberIsTooLargeException if {@code lower >= upper}.\n      */\n     public static void verifyInterval(final double lower,\n-                                      final double upper) {\n+                                      final double upper)\n+        throws NumberIsTooLargeException {\n         if (lower >= upper) {\n             throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,\n                                                 lower, upper, false);\n      */\n     public static void verifySequence(final double lower,\n                                       final double initial,\n-                                      final double upper) {\n+                                      final double upper)\n+        throws NumberIsTooLargeException {\n         verifyInterval(lower, initial);\n         verifyInterval(initial, upper);\n     }\n      */\n     public static void verifyBracketing(UnivariateFunction function,\n                                         final double lower,\n-                                        final double upper) {\n+                                        final double upper)\n+        throws NullArgumentException,\n+               NoBracketingException {\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }", "timestamp": 1346442030, "metainfo": ""}