{"sha": "f25e3602099eeb8ccea425f9bb5b841905085436", "log": "Changed to allow p=1 as argument to inverseCumulativeProbability.   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision: 1.18 $ $Date: 2004/07/23 05:20:26 $\n  */\n public abstract class AbstractDiscreteDistribution\n     implements DiscreteDistribution, Serializable {\n      * @return the largest x such that P(X &le; x) <= p\n      * @throws MathException if the inverse cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n-     * @throws IllegalArgumentException if p < 0 or p >= 1\n+     * @throws IllegalArgumentException if p < 0 or p > 1\n      */\n     public int inverseCumulativeProbability(final double p) throws MathException{\n-        if (p < 0.0 || p >= 1.0) {\n+        if (p < 0.0 || p > 1.0) {\n             throw new IllegalArgumentException(\n-                \"p must be greater than or equal to 0.0 and strictly less than 1.0\");\n+                \"p must be between 0 and 1.0 (inclusive)\");\n         }\n         \n         // by default, do simple bisection.\n--- a/src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java\n+++ b/src/test/org/apache/commons/math/distribution/DiscreteDistributionAbstractTest.java\n  *  use the setXxx methods for the instance data in test cases and call the verifyXxx methods\n  *  to verify results. \n  * \n- * @version $Revision: 1.1 $ $Date: 2004/05/11 02:09:14 $\n+ * @version $Revision: 1.2 $ $Date: 2004/07/23 05:19:06 $\n  */\n public abstract class DiscreteDistributionAbstractTest extends TestCase {\n     \n             // expected\n         }\n         try {\n-            distribution.inverseCumulativeProbability(1);\n-            fail(\"Expecting IllegalArgumentException for p = 1\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }\n-        try {\n             distribution.inverseCumulativeProbability(2);\n             fail(\"Expecting IllegalArgumentException for p = 2\");\n         } catch (IllegalArgumentException ex) {", "timestamp": 1090560026, "metainfo": ""}