{"sha": "a55c142ce82fbc6c7326ef9bf8dd7b8bf9cce08b", "log": "CheckStyle.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java\n          * @throws NullArgumentException if {@code param} is {@code null}.\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 6.\n+         * @throws NotStrictlyPositiveException if {@code param[5] <= 0}.\n          */\n         public double value(double x, double ... param)\n             throws NullArgumentException,\n          * @throws NullArgumentException if {@code param} is {@code null}.\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 6.\n+         * @throws NotStrictlyPositiveException if {@code param[5] <= 0}.\n          */\n         public double[] gradient(double x, double ... param)\n             throws NullArgumentException,\n          * @throws NullArgumentException if {@code param} is {@code null}.\n          * @throws DimensionMismatchException if the size of {@code param} is\n          * not 6.\n+         * @throws NotStrictlyPositiveException if {@code param[5] <= 0}.\n          */\n         private void validateParameters(double[] param)\n             throws NullArgumentException,\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Logit.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Logit.java\n      * @param lo Lower bound.\n      * @param hi Higher bound.\n      * @return the value of the logit function at {@code x}.\n+     * @throws OutOfRangeException if {@code x < lo} or {@code x > hi}.\n      */\n     private static double value(double x,\n                                 double lo,\n                 xH  *=  i * invH;\n             }\n         }\n-        \n+\n         return t.compose(f);\n-\n-    }\n-\n+    }\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java\n         return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n \n+    /** {@inheritDoc} */\n     public double value(double x) {\n         return value(x, lo, hi);\n     }\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java\n      * It is provided for subclasses that do not exclusively use\n      * {@code computeObjectiveValue} to solve the function.\n      * See e.g. {@link AbstractUnivariateDifferentiableSolver}.\n+     *\n+     * @throws TooManyEvaluationsException when the allowed number of function\n+     * evaluations has been exhausted.\n      */\n     protected void incrementEvaluationCount()\n         throws TooManyEvaluationsException {\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/BisectionSolver.java\n      * {@inheritDoc}\n      */\n     @Override\n-    protected double doSolve() \n+    protected double doSolve()\n         throws TooManyEvaluationsException {\n         double min = getMin();\n         double max = getMax();\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/MullerSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/MullerSolver.java\n      * @param fMin function value at the lower bound.\n      * @param fMax function value at the upper bound.\n      * @return the point at which the function value is zero.\n+     * @throws TooManyEvaluationsException if the allowed number of calls to\n+     * the function to be solved has been exhausted.\n      */\n     private double solve(double min, double max,\n                          double fMin, double fMax)\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.java\n     public static double[] bracket(UnivariateFunction function,\n                                    double initial,\n                                    double lowerBound, double upperBound,\n-                                   int maximumIterations) \n+                                   int maximumIterations)\n         throws NullArgumentException,\n                NotStrictlyPositiveException,\n                NoBracketingException {\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n \n import org.apache.commons.math3.analysis.MultivariateFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n-import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n import org.apache.commons.math3.exception.NotPositiveException;\n-import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n-import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n import org.apache.commons.math3.linear.EigenDecomposition;\n import org.apache.commons.math3.linear.MatrixUtils;\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n      *\n      * @param f Objective function.\n      * @param target Target value for the objective functions at optimum.\n-     * @param weight Weights for the least squares cost computation.\n+     * @param weights Weights for the least squares cost computation.\n      * @param startPoint Start point for optimization.\n      * @return the point/value pair giving the optimal value for objective\n      * function.", "timestamp": 1348963410, "metainfo": ""}