{"sha": "d6c817211f6351b37f42c51e59ca42150bfaf2ef", "log": "Added Jacobi orthogonal polynomials.  JIRA: MATH-687  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java\n package org.apache.commons.math.analysis.polynomials;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n import org.apache.commons.math.fraction.BigFraction;\n import org.apache.commons.math.util.FastMath;\n public class PolynomialsUtils {\n \n     /** Coefficients for Chebyshev polynomials. */\n-    private static final ArrayList<BigFraction> CHEBYSHEV_COEFFICIENTS;\n+    private static final List<BigFraction> CHEBYSHEV_COEFFICIENTS;\n \n     /** Coefficients for Hermite polynomials. */\n-    private static final ArrayList<BigFraction> HERMITE_COEFFICIENTS;\n+    private static final List<BigFraction> HERMITE_COEFFICIENTS;\n \n     /** Coefficients for Laguerre polynomials. */\n-    private static final ArrayList<BigFraction> LAGUERRE_COEFFICIENTS;\n+    private static final List<BigFraction> LAGUERRE_COEFFICIENTS;\n \n     /** Coefficients for Legendre polynomials. */\n-    private static final ArrayList<BigFraction> LEGENDRE_COEFFICIENTS;\n+    private static final List<BigFraction> LEGENDRE_COEFFICIENTS;\n+\n+    /** Coefficients for Jacobi polynomials. */\n+    private static final Map<JacobiKey, List<BigFraction>> JACOBI_COEFFICIENTS;\n \n     static {\n \n         LEGENDRE_COEFFICIENTS.add(BigFraction.ONE);\n         LEGENDRE_COEFFICIENTS.add(BigFraction.ZERO);\n         LEGENDRE_COEFFICIENTS.add(BigFraction.ONE);\n+\n+        // initialize map for Jacobi polynomials\n+        JACOBI_COEFFICIENTS = new HashMap<JacobiKey, List<BigFraction>>();\n \n     }\n \n                         new BigFraction(k, kP1)};\n             }\n         });\n+    }\n+\n+    /**\n+     * Create a Jacobi polynomial.\n+     * <p><a href=\"http://mathworld.wolfram.com/JacobiPolynomial.html\">Jacobi \n+     * polynomials</a> are orthogonal polynomials.\n+     * They can be defined by the following recurrence relations:\n+     * <pre>\n+     *        P<sub>0</sub><sup>vw</sup>(X)   = 1\n+     *        P<sub>-1</sub><sup>vw</sup>(X)  = 0\n+     *  2k(k + v + w)(2k + v + w - 2) P<sub>k</sub><sup>vw</sup>(X) = \n+     *  (2k + v + w - 1)[(2k + v + w)(2k + v + w - 2) X + v<sup>2</sup> - w<sup>2</sup>] P<sub>k-1</sub><sup>vw</sup>(X)\n+     *  - 2(k + v - 1)(k + w - 1)(2k + v + w) P<sub>k-2</sub><sup>vw</sup>(X)\n+     * </pre></p>\n+     * @param degree degree of the polynomial\n+     * @param v first exponent\n+     * @param w second exponent\n+     * @return Jacobi polynomial of specified degree\n+     */\n+    public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {\n+\n+        // select the appropriate list\n+        final JacobiKey key = new JacobiKey(v, w);\n+\n+        if (!JACOBI_COEFFICIENTS.containsKey(key)) {\n+\n+            // allocate a new list for v, w\n+            final List<BigFraction> list = new ArrayList<BigFraction>();\n+            JACOBI_COEFFICIENTS.put(key, list);\n+\n+            // Pv,w,0(x) = 1;\n+            list.add(BigFraction.ONE);\n+\n+            // P1(x) = (v - w) / 2 + (2 + v + w) * X / 2\n+            list.add(new BigFraction(v - w, 2));\n+            list.add(new BigFraction(2 + v + w, 2));\n+\n+        }\n+\n+        return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),\n+                               new RecurrenceCoefficientsGenerator() {\n+            /** {@inheritDoc} */\n+            public BigFraction[] generate(int k) {\n+                k++;\n+                final int kvw      = k + v + w;\n+                final int twoKvw   = kvw + k;\n+                final int twoKvwM1 = twoKvw - 1;\n+                final int twoKvwM2 = twoKvw - 2;\n+                final int den      = 2 * k *  kvw * twoKvwM2;\n+\n+                return new BigFraction[] {\n+                    new BigFraction(twoKvwM1 * (v * v - w * w), den),\n+                    new BigFraction(twoKvwM1 * twoKvw * twoKvwM2, den),\n+                    new BigFraction(2 * (k + v - 1) * (k + w - 1) * twoKvw, den)\n+                };\n+            }\n+        });\n+\n+    }\n+\n+    /** Inner class for Jacobi polynomials keys. */\n+    private static class JacobiKey {\n+\n+        /** First exponent. */\n+        private final int v;\n+\n+        /** Second exponent. */\n+        private final int w;\n+\n+        /** Simple constructor.\n+         * @param v first exponent\n+         * @param w second exponent\n+         */\n+        public JacobiKey(final int v, final int w) {\n+            this.v = v;\n+            this.w = w;\n+        }\n+\n+        /** Get hash code.\n+         * @return hash code\n+         */\n+        public int hashCode() {\n+            return (v << 16) ^ w;\n+        }\n+\n     }\n \n     /**\n      * @return coefficients array\n      */\n     private static PolynomialFunction buildPolynomial(final int degree,\n-                                                      final ArrayList<BigFraction> coefficients,\n+                                                      final List<BigFraction> coefficients,\n                                                       final RecurrenceCoefficientsGenerator generator) {\n \n         final int maxDegree = (int) FastMath.floor(FastMath.sqrt(2 * coefficients.size())) - 1;\n      */\n     private static void computeUpToDegree(final int degree, final int maxDegree,\n                                           final RecurrenceCoefficientsGenerator generator,\n-                                          final ArrayList<BigFraction> coefficients) {\n+                                          final List<BigFraction> coefficients) {\n \n         int startK = (maxDegree - 1) * maxDegree / 2;\n         for (int k = maxDegree; k < degree; ++k) {\n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.integration.LegendreGaussIntegrator;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.MathUtils;\n import org.junit.Assert;\n import org.junit.Test;\n \n     }\n \n     @Test\n+    public void testJacobiLegendre() {\n+        for (int i = 0; i < 10; ++i) {\n+            PolynomialFunction legendre = PolynomialsUtils.createLegendrePolynomial(i);\n+            PolynomialFunction jacobi   = PolynomialsUtils.createJacobiPolynomial(i, 0, 0);\n+            checkNullPolynomial(legendre.subtract(jacobi));\n+        }\n+    }\n+\n+    @Test\n+    public void testJacobiEvaluationAt1() {\n+        for (int v = 0; v < 10; ++v) {\n+            for (int w = 0; w < 10; ++w) {\n+                for (int i = 0; i < 10; ++i) {\n+                    PolynomialFunction jacobi = PolynomialsUtils.createJacobiPolynomial(i, v, w);\n+                    double binomial = MathUtils.binomialCoefficient(v + i, i);\n+                    Assert.assertTrue(MathUtils.equals(binomial, jacobi.value(1.0), 1));\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testJacobiOrthogonality() {\n+        for (int v = 0; v < 5; ++v) {\n+            for (int w = v; w < 5; ++w) {\n+                final int vv = v;\n+                final int ww = w;\n+                UnivariateRealFunction weight = new UnivariateRealFunction() {\n+                    public double value(double x) {\n+                        return FastMath.pow(1 - x, vv) * FastMath.pow(1 + x, ww);\n+                    }\n+                };\n+                for (int i = 0; i < 10; ++i) {\n+                    PolynomialFunction pi = PolynomialsUtils.createJacobiPolynomial(i, v, w);\n+                    for (int j = 0; j <= i; ++j) {\n+                        PolynomialFunction pj = PolynomialsUtils.createJacobiPolynomial(j, v, w);\n+                        checkOrthogonality(pi, pj, weight, -1, 1, 0.1, 1.0e-12);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n     public void testShift() {\n         // f1(x) = 1 + x + 2 x^2\n         PolynomialFunction f1x = new PolynomialFunction(new double[] { 1, 1, 2 });", "timestamp": 1318005064, "metainfo": ""}