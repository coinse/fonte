{"sha": "c168b683390c8da4da7ef9ce14b646ff96a29909", "log": "Added @since tags.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n      * @param beta second distribution shape parameter\n      * @return random value sampled from the beta(alpha, beta) distribution\n      * @throws MathException if an error occurs generating the random value\n+     * @since 2.2\n      */\n     public double nextBeta(double alpha, double beta) throws MathException {\n         return nextInversionDeviate(new BetaDistributionImpl(alpha, beta));\n      * @param probabilityOfSuccess probability of success of the Binomial distribution\n      * @return random value sampled from the Binomial(numberOfTrials, probabilityOfSuccess) distribution\n      * @throws MathException if an error occurs generating the random value\n+     * @since 2.2\n      */\n     public int nextBinomial(int numberOfTrials, double probabilityOfSuccess) throws MathException {\n         return nextInversionDeviate(new BinomialDistributionImpl(numberOfTrials, probabilityOfSuccess));\n      * @param scale the scale parameter of the Cauchy distribution\n      * @return random value sampled from the Cauchy(median, scale) distribution\n      * @throws MathException if an error occurs generating the random value\n+     * @since 2.2\n      */\n     public double nextCauchy(double median, double scale) throws MathException {\n         return nextInversionDeviate(new CauchyDistributionImpl(median, scale));\n      * @param df the degrees of freedom of the ChiSquare distribution\n      * @return random value sampled from the ChiSquare(df) distribution\n      * @throws MathException if an error occurs generating the random value\n+     * @since 2.2\n      */\n     public double nextChiSquare(double df) throws MathException {\n         return nextInversionDeviate(new ChiSquaredDistributionImpl(df));\n      * @param denominatorDf the denominator degrees of freedom of the F distribution\n      * @return random value sampled from the F(numeratorDf, denominatorDf) distribution\n      * @throws MathException if an error occurs generating the random value\n+     * @since 2.2\n      */\n     public double nextF(double numeratorDf, double denominatorDf) throws MathException {\n         return nextInversionDeviate(new FDistributionImpl(numeratorDf, denominatorDf));\n      * @param scale the scale parameter of the Gamma distribution\n      * @return random value sampled from the Gamma(shape, scale) distribution\n      * @throws MathException if an error occurs generating the random value\n+     * @since 2.2\n      */\n     public double nextGamma(double shape, double scale) throws MathException {\n         return nextInversionDeviate(new GammaDistributionImpl(shape, scale));\n      * @param sampleSize the sample size of the Hypergeometric distribution\n      * @return random value sampled from the Hypergeometric(numberOfSuccesses, sampleSize) distribution\n      * @throws MathException if an error occurs generating the random value\n+     * @since 2.2\n      */\n     public int nextHypergeometric(int populationSize, int numberOfSuccesses, int sampleSize) throws MathException {\n         return nextInversionDeviate(new HypergeometricDistributionImpl(populationSize, numberOfSuccesses, sampleSize));\n      * @param p the probability of success of the Pascal distribution\n      * @return random value sampled from the Pascal(r, p) distribution\n      * @throws MathException if an error occurs generating the random value\n+     * @since 2.2\n      */\n     public int nextPascal(int r, double p) throws MathException {\n         return nextInversionDeviate(new PascalDistributionImpl(r, p));\n      * @param df the degrees of freedom of the T distribution\n      * @return random value from the T(df) distribution\n      * @throws MathException if an error occurs generating the random value\n+     * @since 2.2\n      */\n     public double nextT(double df) throws MathException {\n         return nextInversionDeviate(new TDistributionImpl(df));\n      * @param scale the scale parameter of the Weibull distribution\n      * @return random value sampled from the Weibull(shape, size) distribution\n      * @throws MathException if an error occurs generating the random value\n+     * @since 2.2\n      */\n     public double nextWeibull(double shape, double scale) throws MathException {\n         return nextInversionDeviate(new WeibullDistributionImpl(shape, scale));\n      * @param exponent the exponent of the ZipfDistribution\n      * @return random value sampled from the Zipf(numberOfElements, exponent) distribution\n      * @throws MathException if an error occurs generating the random value\n+     * @since 2.2\n      */\n     public int nextZipf(int numberOfElements, double exponent) throws MathException {\n         return nextInversionDeviate(new ZipfDistributionImpl(numberOfElements, exponent));\n      * @param distribution Continuous distribution to generate a random value from\n      * @return a random value sampled from the given distribution\n      * @throws MathException if an error occurs computing the inverse cumulative distribution function\n+     * @since 2.2\n      */\n     public double nextInversionDeviate(ContinuousDistribution distribution) throws MathException {\n         return distribution.inverseCumulativeProbability(nextUniform(0, 1));\n      * @param distribution Integer distribution to generate a random value from\n      * @return a random value sampled from the given distribution\n      * @throws MathException if an error occurs computing the inverse cumulative distribution function\n+     * @since 2.2\n      */\n     public int nextInversionDeviate(IntegerDistribution distribution) throws MathException {\n         final double target = nextUniform(0, 1);", "timestamp": 1275441530, "metainfo": ""}