{"sha": "430f487ebc550a07ed2f06a758cd2dd480669fc9", "log": "MATH-154. Added addAndCheck, mulAndCheck, and subAndCheck MathUtils methods for long integer arguments.  ", "commit": "\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n     }\n \n     /**\n+     * Add two long integers, checking for overflow.\n+     * \n+     * @param a an addend\n+     * @param b an addend\n+     * @return the sum <code>a+b</code>\n+     * @throws ArithmeticException if the result can not be represented as an\n+     *         long\n+     * @since 1.2\n+     */\n+    public static long addAndCheck(long a, long b) {\n+        return addAndCheck(a, b, \"overflow: add\");\n+    }\n+    \n+    /**\n+     * Add two long integers, checking for overflow.\n+     * \n+     * @param a an addend\n+     * @param b an addend\n+     * @param msg the message to use for any thrown exception.\n+     * @return the sum <code>a+b</code>\n+     * @throws ArithmeticException if the result can not be represented as an\n+     *         long\n+     * @since 1.2\n+     */\n+    private static long addAndCheck(long a, long b, String msg) {\n+        long ret;\n+        if (a > b) {\n+            // use symmetry to reduce boundry cases\n+            ret = addAndCheck(b, a, msg);\n+        } else {\n+            // assert a <= b\n+            \n+            if (a < 0) {\n+                if (b < 0) {\n+                    // check for negative overflow\n+                    if (Long.MIN_VALUE - b <= a) {\n+                        ret = a + b;\n+                    } else {\n+                        throw new ArithmeticException(msg);\n+                    }\n+                } else {\n+                    // oppisite sign addition is always safe\n+                    ret = a + b;\n+                }\n+            } else {\n+                // assert a >= 0\n+                // assert b >= 0\n+\n+                // check for positive overflow\n+                if (a <= Long.MAX_VALUE - b) {\n+                    ret = a + b;\n+                } else {\n+                    throw new ArithmeticException(msg);\n+                }\n+            }\n+        }\n+        return ret;\n+    }\n+    \n+    /**\n      * Returns an exact representation of the <a\n      * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n      * Coefficient</a>, \"<code>n choose k</code>\", the number of\n         }\n         return result;\n     }\n-    \n-    /** \n-     * <p>Returns the \n-     * <a href=\"http://mathworld.wolfram.com/Logarithm.html\">logarithm</a>\n-     * for base <code>b</code> of <code>x</code>.\n-     * </p>\n-     * <p>Returns <code>NaN<code> if either argument is negative.  If \n-     * <code>base</code> is 0 and <code>x</code> is positive, 0 is returned.\n-     * If <code>base</code> is positive and <code>x</code> is 0, \n-     * <code>Double.NEGATIVE_INFINITY</code> is returned.  If both arguments\n-     * are 0, the result is <code>NaN</code>.</p>\n-     * \n-     * @param base the base of the logarithm, must be greater than 0\n-     * @param x argument, must be greater than 0\n-     * @return the value of the logarithm - the number y such that base^y = x.\n-     */ \n-    public static double log(double base, double x) {\n-    \treturn Math.log(x)/Math.log(base);\n-    }\n-    \n+\n     /**\n      * Returns a <code>double</code> representation of the <a\n      * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     public static double binomialCoefficientDouble(final int n, final int k) {\n         return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);\n     }\n-\n+    \n     /**\n      * Returns the natural <code>log</code> of the <a\n      * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n \n         return logSum;\n     }\n-\n+    \n     /**\n      * Returns the <a href=\"http://mathworld.wolfram.com/HyperbolicCosine.html\">\n      * hyperbolic cosine</a> of x.\n     public static double cosh(double x) {\n         return (Math.exp(x) + Math.exp(-x)) / 2.0;\n     }\n-\n+    \n     /**\n      * Returns true iff both arguments are NaN or neither is NaN and they are\n      * equal\n         return Math.abs(mulAndCheck(a / gcd(a, b), b));\n     }\n \n+    /** \n+     * <p>Returns the \n+     * <a href=\"http://mathworld.wolfram.com/Logarithm.html\">logarithm</a>\n+     * for base <code>b</code> of <code>x</code>.\n+     * </p>\n+     * <p>Returns <code>NaN<code> if either argument is negative.  If \n+     * <code>base</code> is 0 and <code>x</code> is positive, 0 is returned.\n+     * If <code>base</code> is positive and <code>x</code> is 0, \n+     * <code>Double.NEGATIVE_INFINITY</code> is returned.  If both arguments\n+     * are 0, the result is <code>NaN</code>.</p>\n+     * \n+     * @param base the base of the logarithm, must be greater than 0\n+     * @param x argument, must be greater than 0\n+     * @return the value of the logarithm - the number y such that base^y = x.\n+     */ \n+    public static double log(double base, double x) {\n+    \treturn Math.log(x)/Math.log(base);\n+    }\n+\n     /**\n      * Multiply two integers, checking for overflow.\n      * \n             throw new ArithmeticException(\"overflow: mul\");\n         }\n         return (int)m;\n+    }\n+\n+    /**\n+     * Multiply two long integers, checking for overflow.\n+     * \n+     * @param a first value\n+     * @param b second value\n+     * @return the product <code>a * b</code>\n+     * @throws ArithmeticException if the result can not be represented as an\n+     *         long\n+     * @since 1.2\n+     */\n+    public static long mulAndCheck(long a, long b) {\n+        long ret;\n+        String msg = \"overflow: multiply\";\n+        if (a > b) {\n+            // use symmetry to reduce boundry cases\n+            ret = mulAndCheck(b, a);\n+        } else {\n+            if (a < 0) {\n+                if (b < 0) {\n+                    // check for positive overflow with negative a, negative b\n+                    if (a >= Long.MAX_VALUE / b) {\n+                        ret = a * b;\n+                    } else {\n+                        throw new ArithmeticException(msg);\n+                    }\n+                } else if (b > 0) {\n+                    // check for negative overflow with negative a, positive b\n+                    if (Long.MIN_VALUE / b <= a) {\n+                        ret = a * b;\n+                    } else {\n+                        throw new ArithmeticException(msg);\n+                        \n+                    }\n+                } else {\n+                    // assert b == 0\n+                    ret = 0;\n+                }\n+            } else if (a > 0) {\n+                // assert a > 0\n+                // assert b > 0\n+                \n+                // check for positive overflow with positive a, positive b\n+                if (a <= Long.MAX_VALUE / b) {\n+                    ret = a * b;\n+                } else {\n+                    throw new ArithmeticException(msg);\n+                }\n+            } else {\n+                // assert a == 0\n+                ret = 0;\n+            }\n+        }\n+        return ret;\n     }\n \n     /**\n         }\n         return (int)s;\n     }\n+\n+    /**\n+     * Subtract two long integers, checking for overflow.\n+     * \n+     * @param a first value\n+     * @param b second value\n+     * @return the difference <code>a-b</code>\n+     * @throws ArithmeticException if the result can not be represented as an\n+     *         long\n+     * @since 1.2\n+     */\n+    public static long subAndCheck(long a, long b) {\n+        long ret;\n+        String msg = \"overflow: subtract\";\n+        if (b == Long.MIN_VALUE) {\n+            if (a < 0) {\n+                ret = a - b;\n+            } else {\n+                throw new ArithmeticException(msg);\n+            }\n+        } else {\n+            // use additive inverse\n+            ret = addAndCheck(a, -b, msg);\n+        }\n+        return ret;\n+    }\n }\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n  */\n package org.apache.commons.math.util;\n \n import java.math.BigDecimal;\n-\n-import org.apache.commons.math.TestUtils;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.math.TestUtils;\n+\n /**\n  * Test cases for the MathUtils class.\n- *\n- * @version $Revision$ $Date$\n+ * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n+ *          2007) $\n  */\n public final class MathUtilsTest extends TestCase {\n \n         suite.setName(\"MathUtils Tests\");\n         return suite;\n     }\n-    \n-    public void testAddAndCheck() {\n-        int big = Integer.MAX_VALUE;\n-        int bigNeg = Integer.MIN_VALUE;\n-        assertEquals(big, MathUtils.addAndCheck(big, 0));\n-        try {\n-            MathUtils.addAndCheck(big, 1);\n-            fail(\"Expecting ArithmeticException\");\n-        } catch (ArithmeticException ex) {}\n-        try {\n-            MathUtils.addAndCheck(bigNeg, -1);\n-            fail(\"Expecting ArithmeticException\");\n-        } catch (ArithmeticException ex) {}\n-    }\n-    \n-    public void testMulAndCheck() {\n-        int big = Integer.MAX_VALUE;\n-        int bigNeg = Integer.MIN_VALUE;\n-        assertEquals(big, MathUtils.mulAndCheck(big, 1));\n-        try {\n-            MathUtils.mulAndCheck(big, 2);\n-            fail(\"Expecting ArithmeticException\");\n-        } catch (ArithmeticException ex) {}\n-        try {\n-            MathUtils.mulAndCheck(bigNeg, 2);\n-            fail(\"Expecting ArithmeticException\");\n-        } catch (ArithmeticException ex) {}\n-    }\n-    \n-    public void testSubAndCheck() {\n-        int big = Integer.MAX_VALUE;\n-        int bigNeg = Integer.MIN_VALUE;\n-        assertEquals(big, MathUtils.subAndCheck(big, 0));\n-        try {\n-            MathUtils.subAndCheck(big, -1);\n-            fail(\"Expecting ArithmeticException\");\n-        } catch (ArithmeticException ex) {}\n-        try {\n-            MathUtils.subAndCheck(bigNeg, 1);\n-            fail(\"Expecting ArithmeticException\");\n-        } catch (ArithmeticException ex) {}\n-    }\n-    \n-    public void testSubAndCheckErrorMessage() {\n-        int big = Integer.MAX_VALUE;\n-        try {\n-            MathUtils.subAndCheck(big, -1);\n-            fail(\"Expecting ArithmeticException\");\n-        } catch (ArithmeticException ex) {\n-            assertEquals(\"overflow: subtract\", ex.getMessage());\n-        }\n-    }\n-    \n-    public void testBinomialCoefficient() {\n-        long[] bcoef5 = {1,5,10,10,5,1};\n-        long[] bcoef6 = {1,6,15,20,15,6,1};\n-        for (int i = 0; i < 6; i++) {\n-            assertEquals(\"5 choose \" + i, bcoef5[i], \n-                MathUtils.binomialCoefficient(5,i));\n-        }\n-        for (int i = 0; i < 7; i++) {\n-            assertEquals(\"6 choose \" + i, bcoef6[i], \n-                MathUtils.binomialCoefficient(6,i));\n-        }\n-        \n-        for (int n = 1; n < 10; n++) {\n-            for (int k = 0; k <= n; k++) {\n-                assertEquals(n + \" choose \" + k, binomialCoefficient(n, k), \n-                    MathUtils.binomialCoefficient(n, k));\n-                assertEquals(n + \" choose \" + k,(double) binomialCoefficient(n, k), \n-                    MathUtils.binomialCoefficientDouble(n, k),Double.MIN_VALUE);\n-                assertEquals(n + \" choose \" + k,\n-                    Math.log((double) binomialCoefficient(n, k)), \n-                    MathUtils.binomialCoefficientLog(n, k),10E-12);\n-            }\n-        }\n-      \n-      /* \n-       * Takes a long time for recursion to unwind, but succeeds \n-       * and yields exact value = 2,333,606,220\n-        \n-        assertEquals(MathUtils.binomialCoefficient(34,17),\n-            binomialCoefficient(34,17));\n-       */\n-    }\n-    \n-    /** Verify that b(0,0) = 1 */\n-    public void test0Choose0() {\n-        assertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);\n-        assertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);\n-        assertEquals(MathUtils.binomialCoefficient(0, 0), 1);\n-    }\n-    \n-    public void testBinomialCoefficientFail() {\n-        try {\n-            MathUtils.binomialCoefficient(4,5);\n-            fail (\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        \n-        try {\n-            MathUtils.binomialCoefficientDouble(4,5);\n-            fail (\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        \n-        try {\n-            MathUtils.binomialCoefficientLog(4,5);\n-            fail (\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        try {\n-            MathUtils.binomialCoefficient(67,34);\n-            fail (\"expecting ArithmeticException\");\n-        } catch (ArithmeticException ex) {\n-            ;\n-        }\n-        double x = MathUtils.binomialCoefficientDouble(1030,515);\n-        assertTrue(\"expecting infinite binomial coefficient\",\n-            Double.isInfinite(x));\n-    }\n-\n-    public void testFactorial() {\n-        for (int i = 1; i < 10; i++) {\n-            assertEquals(i + \"! \",factorial(i),MathUtils.factorial(i));\n-            assertEquals(i + \"! \",(double)factorial(i),\n-                MathUtils.factorialDouble(i),Double.MIN_VALUE);\n-            assertEquals(i + \"! \",Math.log((double)factorial(i)),\n-                MathUtils.factorialLog(i),10E-12);\n-        }\n-        assertEquals(\"0\", 1, MathUtils.factorial(0));\n-        assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);\n-        assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);\n-    }\n-\n-    public void testFactorialFail() {\n-        try {\n-            MathUtils.factorial(-1);\n-            fail (\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        try {\n-            MathUtils.factorialDouble(-1);\n-            fail (\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        try {\n-            MathUtils.factorialLog(-1);\n-            fail (\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        try {\n-            MathUtils.factorial(21);\n-            fail (\"expecting ArithmeticException\");\n-        } catch (ArithmeticException ex) {\n-            ;\n-        }\n-        assertTrue(\"expecting infinite factorial value\",\n-            Double.isInfinite(MathUtils.factorialDouble(171)));\n-    }\n-\n \n     /**\n      * Exact recursive implementation to test against\n         if ((k == 1) || (k == n - 1)) {\n             return n;\n         }\n-        return binomialCoefficient(n - 1, k - 1) +\n-            binomialCoefficient(n - 1, k);\n-    }\n-\n-    /**\n-     * Finds the largest values of n for which binomialCoefficient and\n-     * binomialCoefficientDouble will return values that fit in a long, double,\n-     * resp.  Remove comments around test below to get this in test-report\n-     *\n-        public void testLimits() {\n-            findBinomialLimits();\n-        }\n-     */\n-\n-    private void findBinomialLimits() {\n-        /**\n-         * will kick out 66 as the limit for long\n-         */\n-        boolean foundLimit = false;\n-        int test = 10;\n-        while (!foundLimit) {\n-            try {\n-                MathUtils.binomialCoefficient(test, test / 2);\n-            } catch (ArithmeticException ex) {\n-                foundLimit = true;\n-                System.out.println\n-                    (\"largest n for binomialCoefficient = \" + (test - 1) );\n-            }\n-            test++;\n-        }\n-\n-       /**\n-        * will kick out 1029 as the limit for double\n-        */\n-        foundLimit = false;\n-        test = 10;\n-        while (!foundLimit) {\n-            double x = MathUtils.binomialCoefficientDouble(test, test / 2);\n-            if (Double.isInfinite(x)) {\n-                foundLimit = true;\n-                System.out.println\n-                    (\"largest n for binomialCoefficientD = \" + (test - 1) );\n-            }\n-            test++;\n-        }\n-    }\n-\n-    /**\n-     * Finds the largest values of n for which factiorial and\n-     * factorialDouble will return values that fit in a long, double,\n-     * resp.  Remove comments around test below to get this in test-report\n-\n-        public void testFactiorialLimits() {\n-            findFactorialLimits();\n-        }\n-     */\n-\n-    private void findFactorialLimits() {\n-        /**\n-         * will kick out 20 as the limit for long\n-         */\n-        boolean foundLimit = false;\n-        int test = 10;\n-        while (!foundLimit) {\n-            try {\n-                MathUtils.factorial(test);\n-            } catch (ArithmeticException ex) {\n-                foundLimit = true;\n-                System.out.println\n-                    (\"largest n for factorial = \" + (test - 1) );\n-            }\n-            test++;\n-        }\n-\n-       /**\n-        * will kick out 170 as the limit for double\n-        */\n-        foundLimit = false;\n-        test = 10;\n-        while (!foundLimit) {\n-            double x = MathUtils.factorialDouble(test);\n-            if (Double.isInfinite(x)) {\n-                foundLimit = true;\n-                System.out.println\n-                    (\"largest n for factorialDouble = \" + (test - 1) );\n-            }\n-            test++;\n-        }\n-    }\n-\n+        return binomialCoefficient(n - 1, k - 1) + binomialCoefficient(n - 1, k);\n+    }\n \n     /**\n      * Exact direct multiplication implementation to test against\n         return result;\n     }\n \n-    public void testSignDouble() {\n-        double delta = 0.0 ;\n-        assertEquals( 1.0, MathUtils.indicator( 2.0 ), delta ) ;\n-        assertEquals( -1.0, MathUtils.indicator( -2.0 ), delta ) ;\n-    }\n-\n-    public void testSignFloat() {\n-        float delta = 0.0F ;\n-        assertEquals( 1.0F, MathUtils.indicator( 2.0F ), delta ) ;\n-        assertEquals( -1.0F, MathUtils.indicator( -2.0F ), delta ) ;\n-    }\n-\n-    public void testSignByte() {\n-        assertEquals( (byte)1, MathUtils.indicator( (byte)2 ) ) ;\n-        assertEquals( (byte)(-1), MathUtils.indicator( (byte)(-2) ) ) ;\n-    }\n-\n-    public void testSignShort() {\n-        assertEquals( (short)1, MathUtils.indicator( (short)2 ) ) ;\n-        assertEquals( (short)(-1), MathUtils.indicator( (short)(-2) ) ) ;\n-    }\n-\n-    public void testSignInt() {\n-        assertEquals( (int)1, MathUtils.indicator( (int)(2) ) ) ;\n-        assertEquals( (int)(-1), MathUtils.indicator( (int)(-2) ) ) ;\n-    }\n-\n-    public void testSignLong() {\n-        assertEquals( 1L, MathUtils.indicator( 2L ) ) ;\n-        assertEquals( -1L, MathUtils.indicator( -2L ) ) ;\n-    }\n-   \n-    public void testIndicatorDouble() {\n-        double delta = 0.0 ;\n-        assertEquals( 1.0, MathUtils.indicator( 2.0 ), delta ) ;\n-        assertEquals( 1.0, MathUtils.indicator( 0.0 ), delta ) ;\n-        assertEquals( -1.0, MathUtils.indicator( -2.0 ), delta ) ;\n-    }\n-    \n-    public void testIndicatorFloat() {\n-        float delta = 0.0F ;\n-        assertEquals( 1.0F, MathUtils.indicator( 2.0F ), delta ) ;\n-        assertEquals( 1.0F, MathUtils.indicator( 0.0F ), delta ) ;\n-        assertEquals( -1.0F, MathUtils.indicator( -2.0F ), delta ) ;\n-    }\n-    \n-    public void testIndicatorByte() {\n-        assertEquals( (byte)1, MathUtils.indicator( (byte)2 ) ) ;\n-        assertEquals( (byte)1, MathUtils.indicator( (byte)0 ) ) ;\n-        assertEquals( (byte)(-1), MathUtils.indicator( (byte)(-2) ) ) ;\n-    }\n-    \n-    public void testIndicatorShort() {\n-        assertEquals( (short)1, MathUtils.indicator( (short)2 ) ) ;\n-        assertEquals( (short)1, MathUtils.indicator( (short)0 ) ) ;\n-        assertEquals( (short)(-1), MathUtils.indicator( (short)(-2) ) ) ;\n-    }\n-    \n-    public void testIndicatorInt() {\n-        assertEquals( (int)1, MathUtils.indicator( (int)(2) ) ) ;\n-        assertEquals( (int)1, MathUtils.indicator( (int)(0) ) ) ;\n-        assertEquals( (int)(-1), MathUtils.indicator( (int)(-2) ) ) ;\n-    }\n-    \n-    public void testIndicatorLong() {\n-        assertEquals( 1L, MathUtils.indicator( 2L ) ) ;\n-        assertEquals( 1L, MathUtils.indicator( 0L ) ) ;\n-        assertEquals( -1L, MathUtils.indicator( -2L ) ) ;\n-    }\n-    \n+    /** Verify that b(0,0) = 1 */\n+    public void test0Choose0() {\n+        assertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);\n+        assertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);\n+        assertEquals(MathUtils.binomialCoefficient(0, 0), 1);\n+    }\n+\n+    public void testAddAndCheck() {\n+        int big = Integer.MAX_VALUE;\n+        int bigNeg = Integer.MIN_VALUE;\n+        assertEquals(big, MathUtils.addAndCheck(big, 0));\n+        try {\n+            MathUtils.addAndCheck(big, 1);\n+            fail(\"Expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+        }\n+        try {\n+            MathUtils.addAndCheck(bigNeg, -1);\n+            fail(\"Expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+        }\n+    }\n+\n+    public void testAddAndCheckLong() {\n+        long max = Long.MAX_VALUE;\n+        long min = Long.MIN_VALUE;\n+        assertEquals(max, MathUtils.addAndCheck(max, 0L));\n+        assertEquals(min, MathUtils.addAndCheck(min, 0L));\n+        assertEquals(max, MathUtils.addAndCheck(0L, max));\n+        assertEquals(min, MathUtils.addAndCheck(0L, min));\n+        assertEquals(1, MathUtils.addAndCheck(-1L, 2L));\n+        assertEquals(1, MathUtils.addAndCheck(2L, -1L));\n+        testAddAndCheckLongFailure(max, 1L);\n+        testAddAndCheckLongFailure(min, -1L);\n+        testAddAndCheckLongFailure(1L, max);\n+        testAddAndCheckLongFailure(-1L, min);\n+    }\n+\n+    private void testAddAndCheckLongFailure(long a, long b) {\n+        try {\n+            MathUtils.addAndCheck(a, b);\n+            fail(\"Expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+            // success\n+        }\n+    }\n+\n+    public void testBinomialCoefficient() {\n+        long[] bcoef5 = {\n+            1,\n+            5,\n+            10,\n+            10,\n+            5,\n+            1 };\n+        long[] bcoef6 = {\n+            1,\n+            6,\n+            15,\n+            20,\n+            15,\n+            6,\n+            1 };\n+        for (int i = 0; i < 6; i++) {\n+            assertEquals(\"5 choose \" + i, bcoef5[i], MathUtils.binomialCoefficient(5, i));\n+        }\n+        for (int i = 0; i < 7; i++) {\n+            assertEquals(\"6 choose \" + i, bcoef6[i], MathUtils.binomialCoefficient(6, i));\n+        }\n+\n+        for (int n = 1; n < 10; n++) {\n+            for (int k = 0; k <= n; k++) {\n+                assertEquals(n + \" choose \" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficient(n, k));\n+                assertEquals(n + \" choose \" + k, (double)binomialCoefficient(n, k), MathUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);\n+                assertEquals(n + \" choose \" + k, Math.log((double)binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);\n+            }\n+        }\n+\n+        /*\n+         * Takes a long time for recursion to unwind, but succeeds and yields\n+         * exact value = 2,333,606,220\n+         * assertEquals(MathUtils.binomialCoefficient(34,17),\n+         * binomialCoefficient(34,17));\n+         */\n+    }\n+\n+    public void testBinomialCoefficientFail() {\n+        try {\n+            MathUtils.binomialCoefficient(4, 5);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+\n+        try {\n+            MathUtils.binomialCoefficientDouble(4, 5);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+\n+        try {\n+            MathUtils.binomialCoefficientLog(4, 5);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            MathUtils.binomialCoefficient(67, 34);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+            ;\n+        }\n+        double x = MathUtils.binomialCoefficientDouble(1030, 515);\n+        assertTrue(\"expecting infinite binomial coefficient\", Double.isInfinite(x));\n+    }\n+\n     public void testCosh() {\n         double x = 3.0;\n         double expected = 10.06766;\n         assertEquals(expected, MathUtils.cosh(x), 1.0e-5);\n-    }   \n-    \n-    public void testSinh() {\n-        double x = 3.0;\n-        double expected = 10.01787;\n-        assertEquals(expected, MathUtils.sinh(x), 1.0e-5);\n-    }   \n-    \n+    }\n+\n     public void testCoshNaN() {\n         assertTrue(Double.isNaN(MathUtils.cosh(Double.NaN)));\n-    }   \n-    \n-    public void testSinhNaN() {\n-        assertTrue(Double.isNaN(MathUtils.sinh(Double.NaN)));\n-    } \n-    \n+    }\n+\n     public void testEquals() {\n-        double[] testArray = {Double.NaN, Double.POSITIVE_INFINITY, \n-                Double.NEGATIVE_INFINITY, 1d, 0d};\n+        double[] testArray = {\n+            Double.NaN,\n+            Double.POSITIVE_INFINITY,\n+            Double.NEGATIVE_INFINITY,\n+            1d,\n+            0d };\n         for (int i = 0; i < testArray.length; i++) {\n-            for (int j = 0; j < testArray.length; j ++) {\n+            for (int j = 0; j < testArray.length; j++) {\n                 if (i == j) {\n                     assertTrue(MathUtils.equals(testArray[i], testArray[j]));\n                     assertTrue(MathUtils.equals(testArray[j], testArray[i]));\n                     assertTrue(!MathUtils.equals(testArray[j], testArray[i]));\n                 }\n             }\n-        } \n-    }\n-    \n+        }\n+    }\n+\n+    public void testFactorial() {\n+        for (int i = 1; i < 10; i++) {\n+            assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));\n+            assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);\n+            assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);\n+        }\n+        assertEquals(\"0\", 1, MathUtils.factorial(0));\n+        assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);\n+        assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);\n+    }\n+\n+    public void testFactorialFail() {\n+        try {\n+            MathUtils.factorial(-1);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            MathUtils.factorialDouble(-1);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            MathUtils.factorialLog(-1);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            MathUtils.factorial(21);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+            ;\n+        }\n+        assertTrue(\"expecting infinite factorial value\", Double.isInfinite(MathUtils.factorialDouble(171)));\n+    }\n+\n+    public void testGcd() {\n+        int a = 30;\n+        int b = 50;\n+        int c = 77;\n+\n+        assertEquals(0, MathUtils.gcd(0, 0));\n+\n+        assertEquals(b, MathUtils.gcd(0, b));\n+        assertEquals(a, MathUtils.gcd(a, 0));\n+        assertEquals(b, MathUtils.gcd(0, -b));\n+        assertEquals(a, MathUtils.gcd(-a, 0));\n+\n+        assertEquals(10, MathUtils.gcd(a, b));\n+        assertEquals(10, MathUtils.gcd(-a, b));\n+        assertEquals(10, MathUtils.gcd(a, -b));\n+        assertEquals(10, MathUtils.gcd(-a, -b));\n+\n+        assertEquals(1, MathUtils.gcd(a, c));\n+        assertEquals(1, MathUtils.gcd(-a, c));\n+        assertEquals(1, MathUtils.gcd(a, -c));\n+        assertEquals(1, MathUtils.gcd(-a, -c));\n+    }\n+\n     public void testHash() {\n-        double[] testArray = {Double.NaN, Double.POSITIVE_INFINITY, \n-                Double.NEGATIVE_INFINITY, 1d, 0d, 1E-14, (1 + 1E-14), \n-                Double.MIN_VALUE, Double.MAX_VALUE};\n+        double[] testArray = {\n+            Double.NaN,\n+            Double.POSITIVE_INFINITY,\n+            Double.NEGATIVE_INFINITY,\n+            1d,\n+            0d,\n+            1E-14,\n+            (1 + 1E-14),\n+            Double.MIN_VALUE,\n+            Double.MAX_VALUE };\n         for (int i = 0; i < testArray.length; i++) {\n-            for (int j = 0; j < testArray.length; j ++) {\n+            for (int j = 0; j < testArray.length; j++) {\n                 if (i == j) {\n                     assertEquals(MathUtils.hash(testArray[i]), MathUtils.hash(testArray[j]));\n                     assertEquals(MathUtils.hash(testArray[j]), MathUtils.hash(testArray[i]));\n                     assertTrue(MathUtils.hash(testArray[j]) != MathUtils.hash(testArray[i]));\n                 }\n             }\n-        } \n-    }\n-    \n-    public void testLog() {\n-    \tassertEquals(2.0, MathUtils.log(2,4), 0);\n-    \tassertEquals(3.0, MathUtils.log(2,8), 0);\n-        assertTrue(Double.isNaN(MathUtils.log(-1, 1)));\n-        assertTrue(Double.isNaN(MathUtils.log(1, -1)));\n-        assertTrue(Double.isNaN(MathUtils.log(0, 0)));\n-        assertEquals(0, MathUtils.log(0, 10), 0);\n-        assertEquals(Double.NEGATIVE_INFINITY, MathUtils.log(10, 0), 0);\n-    }\n-    \n-    public void testGcd() {\n-        int a = 30;\n-        int b = 50;\n-        int c = 77;\n-\n-        assertEquals(0, MathUtils.gcd(0, 0));\n-        \n-        assertEquals(b, MathUtils.gcd( 0,  b));\n-        assertEquals(a, MathUtils.gcd( a,  0));\n-        assertEquals(b, MathUtils.gcd( 0, -b));\n-        assertEquals(a, MathUtils.gcd(-a,  0));\n-        \n-        assertEquals(10, MathUtils.gcd( a,  b));\n-        assertEquals(10, MathUtils.gcd(-a,  b));\n-        assertEquals(10, MathUtils.gcd( a, -b));\n-        assertEquals(10, MathUtils.gcd(-a, -b));\n-        \n-        assertEquals(1, MathUtils.gcd( a,  c));\n-        assertEquals(1, MathUtils.gcd(-a,  c));\n-        assertEquals(1, MathUtils.gcd( a, -c));\n-        assertEquals(1, MathUtils.gcd(-a, -c));\n-    }\n-    \n+        }\n+    }\n+\n+    public void testIndicatorByte() {\n+        assertEquals((byte)1, MathUtils.indicator((byte)2));\n+        assertEquals((byte)1, MathUtils.indicator((byte)0));\n+        assertEquals((byte)(-1), MathUtils.indicator((byte)(-2)));\n+    }\n+\n+    public void testIndicatorDouble() {\n+        double delta = 0.0;\n+        assertEquals(1.0, MathUtils.indicator(2.0), delta);\n+        assertEquals(1.0, MathUtils.indicator(0.0), delta);\n+        assertEquals(-1.0, MathUtils.indicator(-2.0), delta);\n+    }\n+\n+    public void testIndicatorFloat() {\n+        float delta = 0.0F;\n+        assertEquals(1.0F, MathUtils.indicator(2.0F), delta);\n+        assertEquals(1.0F, MathUtils.indicator(0.0F), delta);\n+        assertEquals(-1.0F, MathUtils.indicator(-2.0F), delta);\n+    }\n+\n+    public void testIndicatorInt() {\n+        assertEquals((int)1, MathUtils.indicator((int)(2)));\n+        assertEquals((int)1, MathUtils.indicator((int)(0)));\n+        assertEquals((int)(-1), MathUtils.indicator((int)(-2)));\n+    }\n+\n+    public void testIndicatorLong() {\n+        assertEquals(1L, MathUtils.indicator(2L));\n+        assertEquals(1L, MathUtils.indicator(0L));\n+        assertEquals(-1L, MathUtils.indicator(-2L));\n+    }\n+\n+    public void testIndicatorShort() {\n+        assertEquals((short)1, MathUtils.indicator((short)2));\n+        assertEquals((short)1, MathUtils.indicator((short)0));\n+        assertEquals((short)(-1), MathUtils.indicator((short)(-2)));\n+    }\n+\n     public void testLcm() {\n         int a = 30;\n         int b = 50;\n         int c = 77;\n-        \n+\n         assertEquals(0, MathUtils.lcm(0, b));\n         assertEquals(0, MathUtils.lcm(a, 0));\n         assertEquals(b, MathUtils.lcm(1, b));\n         assertEquals(150, MathUtils.lcm(-a, b));\n         assertEquals(150, MathUtils.lcm(a, -b));\n         assertEquals(2310, MathUtils.lcm(a, c));\n-        \n+\n         try {\n             MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n             fail(\"Expecting ArithmeticException\");\n             // expected\n         }\n     }\n+\n+    public void testLog() {\n+        assertEquals(2.0, MathUtils.log(2, 4), 0);\n+        assertEquals(3.0, MathUtils.log(2, 8), 0);\n+        assertTrue(Double.isNaN(MathUtils.log(-1, 1)));\n+        assertTrue(Double.isNaN(MathUtils.log(1, -1)));\n+        assertTrue(Double.isNaN(MathUtils.log(0, 0)));\n+        assertEquals(0, MathUtils.log(0, 10), 0);\n+        assertEquals(Double.NEGATIVE_INFINITY, MathUtils.log(10, 0), 0);\n+    }\n+\n+    public void testMulAndCheck() {\n+        int big = Integer.MAX_VALUE;\n+        int bigNeg = Integer.MIN_VALUE;\n+        assertEquals(big, MathUtils.mulAndCheck(big, 1));\n+        try {\n+            MathUtils.mulAndCheck(big, 2);\n+            fail(\"Expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+        }\n+        try {\n+            MathUtils.mulAndCheck(bigNeg, 2);\n+            fail(\"Expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+        }\n+    }\n+\n+    public void testMulAndCheckLong() {\n+        long max = Long.MAX_VALUE;\n+        long min = Long.MIN_VALUE;\n+        assertEquals(max, MathUtils.mulAndCheck(max, 1L));\n+        assertEquals(min, MathUtils.mulAndCheck(min, 1L));\n+        assertEquals(0L, MathUtils.mulAndCheck(max, 0L));\n+        assertEquals(0L, MathUtils.mulAndCheck(min, 0L));\n+        assertEquals(max, MathUtils.mulAndCheck(1L, max));\n+        assertEquals(min, MathUtils.mulAndCheck(1L, min));\n+        assertEquals(0L, MathUtils.mulAndCheck(0L, max));\n+        assertEquals(0L, MathUtils.mulAndCheck(0L, min));\n+        testMulAndCheckLongFailure(max, 2L);\n+        testMulAndCheckLongFailure(2L, max);\n+        testMulAndCheckLongFailure(min, 2L);\n+        testMulAndCheckLongFailure(2L, min);\n+        testMulAndCheckLongFailure(min, -1L);\n+        testMulAndCheckLongFailure(-1L, min);\n+    }\n+\n+    private void testMulAndCheckLongFailure(long a, long b) {\n+        try {\n+            MathUtils.mulAndCheck(a, b);\n+            fail(\"Expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+            // success\n+        }\n+    }\n+\n+    public void testNextAfter() {\n+        // 0x402fffffffffffff 0x404123456789abcd -> 4030000000000000\n+        assertEquals(16.0, MathUtils.nextAfter(15.999999999999998, 34.27555555555555), 0.0);\n+\n+        // 0xc02fffffffffffff 0x404123456789abcd -> c02ffffffffffffe\n+        assertEquals(-15.999999999999996, MathUtils.nextAfter(-15.999999999999998, 34.27555555555555), 0.0);\n+\n+        // 0x402fffffffffffff 0x400123456789abcd -> 402ffffffffffffe\n+        assertEquals(15.999999999999996, MathUtils.nextAfter(15.999999999999998, 2.142222222222222), 0.0);\n+\n+        // 0xc02fffffffffffff 0x400123456789abcd -> c02ffffffffffffe\n+        assertEquals(-15.999999999999996, MathUtils.nextAfter(-15.999999999999998, 2.142222222222222), 0.0);\n+\n+        // 0x4020000000000000 0x404123456789abcd -> 4020000000000001\n+        assertEquals(8.000000000000002, MathUtils.nextAfter(8.0, 34.27555555555555), 0.0);\n+\n+        // 0xc020000000000000 0x404123456789abcd -> c01fffffffffffff\n+        assertEquals(-7.999999999999999, MathUtils.nextAfter(-8.0, 34.27555555555555), 0.0);\n+\n+        // 0x4020000000000000 0x400123456789abcd -> 401fffffffffffff\n+        assertEquals(7.999999999999999, MathUtils.nextAfter(8.0, 2.142222222222222), 0.0);\n+\n+        // 0xc020000000000000 0x400123456789abcd -> c01fffffffffffff\n+        assertEquals(-7.999999999999999, MathUtils.nextAfter(-8.0, 2.142222222222222), 0.0);\n+\n+        // 0x3f2e43753d36a223 0x3f2e43753d36a224 -> 3f2e43753d36a224\n+        assertEquals(2.308922399667661E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.308922399667661E-4), 0.0);\n+\n+        // 0x3f2e43753d36a223 0x3f2e43753d36a223 -> 3f2e43753d36a224\n+        assertEquals(2.308922399667661E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);\n+\n+        // 0x3f2e43753d36a223 0x3f2e43753d36a222 -> 3f2e43753d36a222\n+        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);\n+\n+        // 0x3f2e43753d36a223 0xbf2e43753d36a224 -> 3f2e43753d36a222\n+        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.308922399667661E-4), 0.0);\n+\n+        // 0x3f2e43753d36a223 0xbf2e43753d36a223 -> 3f2e43753d36a222\n+        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);\n+\n+        // 0x3f2e43753d36a223 0xbf2e43753d36a222 -> 3f2e43753d36a222\n+        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);\n+\n+        // 0xbf2e43753d36a223 0x3f2e43753d36a224 -> bf2e43753d36a222\n+        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.308922399667661E-4), 0.0);\n+\n+        // 0xbf2e43753d36a223 0x3f2e43753d36a223 -> bf2e43753d36a222\n+        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);\n+\n+        // 0xbf2e43753d36a223 0x3f2e43753d36a222 -> bf2e43753d36a222\n+        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);\n+\n+        // 0xbf2e43753d36a223 0xbf2e43753d36a224 -> bf2e43753d36a224\n+        assertEquals(-2.308922399667661E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.308922399667661E-4), 0.0);\n+\n+        // 0xbf2e43753d36a223 0xbf2e43753d36a223 -> bf2e43753d36a224\n+        assertEquals(-2.308922399667661E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);\n+\n+        // 0xbf2e43753d36a223 0xbf2e43753d36a222 -> bf2e43753d36a222\n+        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);\n+\n+    }\n+\n+    public void testNextAfterSpecialCases() {\n+        assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.NEGATIVE_INFINITY, 0)));\n+        assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.POSITIVE_INFINITY, 0)));\n+        assertTrue(Double.isNaN(MathUtils.nextAfter(Double.NaN, 0)));\n+        assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.MAX_VALUE, Double.POSITIVE_INFINITY)));\n+        assertTrue(Double.isInfinite(MathUtils.nextAfter(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY)));\n+        assertEquals(Double.MIN_VALUE, MathUtils.nextAfter(0, 1), 0);\n+        assertEquals(-Double.MIN_VALUE, MathUtils.nextAfter(0, -1), 0);\n+        assertEquals(0, MathUtils.nextAfter(Double.MIN_VALUE, -1), 0);\n+        assertEquals(0, MathUtils.nextAfter(-Double.MIN_VALUE, 1), 0);\n+    }\n+\n+    public void testRoundDouble() {\n+        double x = 1.234567890;\n+        assertEquals(1.23, MathUtils.round(x, 2), 0.0);\n+        assertEquals(1.235, MathUtils.round(x, 3), 0.0);\n+        assertEquals(1.2346, MathUtils.round(x, 4), 0.0);\n+\n+        // JIRA MATH-151\n+        assertEquals(39.25, MathUtils.round(39.245, 2), 0.0);\n+        assertEquals(39.24, MathUtils.round(39.245, 2, BigDecimal.ROUND_DOWN), 0.0);\n+        double xx = 39.0;\n+        xx = xx + 245d / 1000d;\n+        assertEquals(39.25, MathUtils.round(xx, 2), 0.0);\n+\n+        // BZ 35904\n+        assertEquals(30.1d, MathUtils.round(30.095d, 2), 0.0d);\n+        assertEquals(30.1d, MathUtils.round(30.095d, 1), 0.0d);\n+        assertEquals(33.1d, MathUtils.round(33.095d, 1), 0.0d);\n+        assertEquals(33.1d, MathUtils.round(33.095d, 2), 0.0d);\n+        assertEquals(50.09d, MathUtils.round(50.085d, 2), 0.0d);\n+        assertEquals(50.19d, MathUtils.round(50.185d, 2), 0.0d);\n+        assertEquals(50.01d, MathUtils.round(50.005d, 2), 0.0d);\n+        assertEquals(30.01d, MathUtils.round(30.005d, 2), 0.0d);\n+        assertEquals(30.65d, MathUtils.round(30.645d, 2), 0.0d);\n+\n+        assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);\n+        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);\n+        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);\n+        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);\n+        assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);\n+        assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);\n+\n+        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);\n+        assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);\n+        assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);\n+        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);\n+        assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);\n+        assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);\n+\n+        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n+        assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n+        assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n+        assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n+        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n+        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n+\n+        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n+        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n+        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n+        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n+        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n+        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n+        assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n+        assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n+\n+        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n+        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n+        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n+        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n+        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n+        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n+        assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n+        assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n+        assertEquals(1.236, MathUtils.round(1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n+        assertEquals(-1.236, MathUtils.round(-1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n+\n+        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n+        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n+        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n+        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n+        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n+        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n+        assertEquals(1.235, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n+        assertEquals(-1.235, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n+\n+        assertEquals(-1.23, MathUtils.round(-1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n+        assertEquals(1.23, MathUtils.round(1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n+\n+        try {\n+            MathUtils.round(1.234, 2, BigDecimal.ROUND_UNNECESSARY);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // success\n+        }\n+\n+        assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);\n+        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);\n+        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);\n+        assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);\n+        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);\n+        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);\n+\n+        try {\n+            MathUtils.round(1.234, 2, 1923);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // success\n+        }\n+\n+        // MATH-151\n+        assertEquals(39.25, MathUtils.round(39.245, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n+\n+        // special values\n+        TestUtils.assertEquals(Double.NaN, MathUtils.round(Double.NaN, 2), 0.0);\n+        assertEquals(0.0, MathUtils.round(0.0, 2), 0.0);\n+        assertEquals(Double.POSITIVE_INFINITY, MathUtils.round(Double.POSITIVE_INFINITY, 2), 0.0);\n+        assertEquals(Double.NEGATIVE_INFINITY, MathUtils.round(Double.NEGATIVE_INFINITY, 2), 0.0);\n+    }\n+\n     public void testRoundFloat() {\n         float x = 1.234567890f;\n         assertEquals(1.23f, MathUtils.round(x, 2), 0.0);\n         assertEquals(1.235f, MathUtils.round(x, 3), 0.0);\n         assertEquals(1.2346f, MathUtils.round(x, 4), 0.0);\n-        \n+\n         // BZ 35904\n         assertEquals(30.1f, MathUtils.round(30.095f, 2), 0.0f);\n         assertEquals(30.1f, MathUtils.round(30.095f, 1), 0.0f);\n-        assertEquals(50.09f,  MathUtils.round(50.085f, 2), 0.0f);\n-        assertEquals(50.19f,  MathUtils.round(50.185f, 2), 0.0f);\n-        assertEquals(50.01f,  MathUtils.round(50.005f, 2), 0.0f);\n-        assertEquals(30.01f,  MathUtils.round(30.005f, 2), 0.0f);\n-        assertEquals(30.65f,  MathUtils.round(30.645f, 2), 0.0f);\n-        \n+        assertEquals(50.09f, MathUtils.round(50.085f, 2), 0.0f);\n+        assertEquals(50.19f, MathUtils.round(50.185f, 2), 0.0f);\n+        assertEquals(50.01f, MathUtils.round(50.005f, 2), 0.0f);\n+        assertEquals(30.01f, MathUtils.round(30.005f, 2), 0.0f);\n+        assertEquals(30.65f, MathUtils.round(30.645f, 2), 0.0f);\n+\n         assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);\n         assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);\n         assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);\n         assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);\n         assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);\n         assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);\n-        \n+\n         assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n         assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n         assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n         assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n         assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n         assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n-        \n+\n         assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n         assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n         assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n         assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n         assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n         assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n-        \n+\n         assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n         assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n         assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n         assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n         assertEquals(1.236f, MathUtils.round(1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n         assertEquals(-1.236f, MathUtils.round(-1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n-        \n+\n         assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n         assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n         assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n         assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n         assertEquals(1.235f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n         assertEquals(-1.235f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n-        \n+\n         assertEquals(-1.23f, MathUtils.round(-1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n         assertEquals(1.23f, MathUtils.round(1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n-        \n+\n         try {\n             MathUtils.round(1.234f, 2, BigDecimal.ROUND_UNNECESSARY);\n             fail();\n         } catch (ArithmeticException ex) {\n             // success\n         }\n-        \n+\n         assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);\n         assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);\n         assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);\n         assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);\n         assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);\n         assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);\n-        \n+\n         try {\n             MathUtils.round(1.234f, 2, 1923);\n             fail();\n         } catch (IllegalArgumentException ex) {\n             // success\n         }\n-        \n+\n         // special values\n         TestUtils.assertEquals(Float.NaN, MathUtils.round(Float.NaN, 2), 0.0f);\n         assertEquals(0.0f, MathUtils.round(0.0f, 2), 0.0f);\n         assertEquals(Float.POSITIVE_INFINITY, MathUtils.round(Float.POSITIVE_INFINITY, 2), 0.0f);\n         assertEquals(Float.NEGATIVE_INFINITY, MathUtils.round(Float.NEGATIVE_INFINITY, 2), 0.0f);\n     }\n-    \n-    public void testNextAfterSpecialCases() {\n-        assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.NEGATIVE_INFINITY, 0)));\n-        assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.POSITIVE_INFINITY, 0)));\n-        assertTrue(Double.isNaN(MathUtils.nextAfter(Double.NaN, 0)));\n-        assertTrue(Double.isInfinite(MathUtils.nextAfter( Double.MAX_VALUE, Double.POSITIVE_INFINITY)));\n-        assertTrue(Double.isInfinite(MathUtils.nextAfter(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY)));\n-        assertEquals( Double.MIN_VALUE, MathUtils.nextAfter(0,  1), 0);\n-        assertEquals(-Double.MIN_VALUE, MathUtils.nextAfter(0, -1), 0);\n-        assertEquals(0, MathUtils.nextAfter( Double.MIN_VALUE, -1), 0);\n-        assertEquals(0, MathUtils.nextAfter(-Double.MIN_VALUE,  1), 0);\n-    }\n-    \n-    public void testNextAfter() {\n-        // 0x402fffffffffffff 0x404123456789abcd -> 4030000000000000\n-        assertEquals(16.0, MathUtils.nextAfter(15.999999999999998, 34.27555555555555), 0.0);\n-\n-        // 0xc02fffffffffffff 0x404123456789abcd -> c02ffffffffffffe\n-        assertEquals(-15.999999999999996, MathUtils.nextAfter(-15.999999999999998, 34.27555555555555), 0.0);\n-\n-        // 0x402fffffffffffff 0x400123456789abcd -> 402ffffffffffffe\n-        assertEquals(15.999999999999996, MathUtils.nextAfter(15.999999999999998, 2.142222222222222), 0.0);\n-\n-        // 0xc02fffffffffffff 0x400123456789abcd -> c02ffffffffffffe\n-        assertEquals(-15.999999999999996, MathUtils.nextAfter(-15.999999999999998, 2.142222222222222), 0.0);\n-\n-        // 0x4020000000000000 0x404123456789abcd -> 4020000000000001\n-        assertEquals(8.000000000000002, MathUtils.nextAfter(8.0, 34.27555555555555), 0.0);\n-\n-        // 0xc020000000000000 0x404123456789abcd -> c01fffffffffffff\n-        assertEquals(-7.999999999999999, MathUtils.nextAfter(-8.0, 34.27555555555555), 0.0);\n-\n-        // 0x4020000000000000 0x400123456789abcd -> 401fffffffffffff\n-        assertEquals(7.999999999999999, MathUtils.nextAfter(8.0, 2.142222222222222), 0.0);\n-\n-        // 0xc020000000000000 0x400123456789abcd -> c01fffffffffffff\n-        assertEquals(-7.999999999999999, MathUtils.nextAfter(-8.0, 2.142222222222222), 0.0);\n-\n-        // 0x3f2e43753d36a223 0x3f2e43753d36a224 -> 3f2e43753d36a224\n-        assertEquals(2.308922399667661E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.308922399667661E-4), 0.0);\n-\n-        // 0x3f2e43753d36a223 0x3f2e43753d36a223 -> 3f2e43753d36a224\n-        assertEquals(2.308922399667661E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);\n-\n-        // 0x3f2e43753d36a223 0x3f2e43753d36a222 -> 3f2e43753d36a222\n-        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);\n-\n-        // 0x3f2e43753d36a223 0xbf2e43753d36a224 -> 3f2e43753d36a222\n-        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.308922399667661E-4), 0.0);\n-\n-        // 0x3f2e43753d36a223 0xbf2e43753d36a223 -> 3f2e43753d36a222\n-        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);\n-\n-        // 0x3f2e43753d36a223 0xbf2e43753d36a222 -> 3f2e43753d36a222\n-        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);\n-\n-        // 0xbf2e43753d36a223 0x3f2e43753d36a224 -> bf2e43753d36a222\n-        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.308922399667661E-4), 0.0);\n-\n-        // 0xbf2e43753d36a223 0x3f2e43753d36a223 -> bf2e43753d36a222\n-        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);\n-\n-        // 0xbf2e43753d36a223 0x3f2e43753d36a222 -> bf2e43753d36a222\n-        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);\n-\n-        // 0xbf2e43753d36a223 0xbf2e43753d36a224 -> bf2e43753d36a224\n-        assertEquals(-2.308922399667661E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.308922399667661E-4), 0.0);\n-\n-        // 0xbf2e43753d36a223 0xbf2e43753d36a223 -> bf2e43753d36a224\n-        assertEquals(-2.308922399667661E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);\n-\n-        // 0xbf2e43753d36a223 0xbf2e43753d36a222 -> bf2e43753d36a222\n-        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);\n-\n-    }\n-\n-    public void testRoundDouble() {\n-        double x = 1.234567890;\n-        assertEquals(1.23, MathUtils.round(x, 2), 0.0);\n-        assertEquals(1.235, MathUtils.round(x, 3), 0.0);\n-        assertEquals(1.2346, MathUtils.round(x, 4), 0.0);\n-        \n-        // JIRA MATH-151\n-        assertEquals(39.25,MathUtils.round(39.245, 2), 0.0);\n-        assertEquals(39.24,MathUtils.round(39.245, 2, \n-                BigDecimal.ROUND_DOWN), 0.0);\n-        double xx = 39.0;\n-        xx = xx + 245d/1000d;\n-        assertEquals(39.25,MathUtils.round(xx, 2), 0.0);\n-        \n-        // BZ 35904\n-        assertEquals(30.1d, MathUtils.round(30.095d, 2), 0.0d);\n-        assertEquals(30.1d, MathUtils.round(30.095d, 1), 0.0d);\n-        assertEquals(33.1d, MathUtils.round(33.095d, 1), 0.0d);\n-        assertEquals(33.1d, MathUtils.round(33.095d, 2), 0.0d);\n-        assertEquals(50.09d,  MathUtils.round(50.085d, 2), 0.0d);\n-        assertEquals(50.19d,  MathUtils.round(50.185d, 2), 0.0d);\n-        assertEquals(50.01d,  MathUtils.round(50.005d, 2), 0.0d);\n-        assertEquals(30.01d,  MathUtils.round(30.005d, 2), 0.0d);\n-        assertEquals(30.65d,  MathUtils.round(30.645d, 2), 0.0d);\n-        \n-        assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);\n-        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);\n-        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);\n-        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);\n-        assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);\n-        assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);\n-\n-        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);\n-        assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);\n-        assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);\n-        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);\n-        assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);\n-        assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);\n-        \n-        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n-        assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n-        assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n-        assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n-        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n-        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n-        \n-        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n-        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n-        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n-        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n-        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n-        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n-        assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n-        assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n-        \n-        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n-        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n-        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n-        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n-        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n-        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n-        assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n-        assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n-        assertEquals(1.236, MathUtils.round(1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n-        assertEquals(-1.236, MathUtils.round(-1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n-        \n-        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n-        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n-        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n-        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n-        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n-        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n-        assertEquals(1.235, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n-        assertEquals(-1.235, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n-        \n-        assertEquals(-1.23, MathUtils.round(-1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n-        assertEquals(1.23, MathUtils.round(1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n-        \n-        try {\n-            MathUtils.round(1.234, 2, BigDecimal.ROUND_UNNECESSARY);\n-            fail();\n+\n+    public void testSignByte() {\n+        assertEquals((byte)1, MathUtils.indicator((byte)2));\n+        assertEquals((byte)(-1), MathUtils.indicator((byte)(-2)));\n+    }\n+\n+    public void testSignDouble() {\n+        double delta = 0.0;\n+        assertEquals(1.0, MathUtils.indicator(2.0), delta);\n+        assertEquals(-1.0, MathUtils.indicator(-2.0), delta);\n+    }\n+\n+    public void testSignFloat() {\n+        float delta = 0.0F;\n+        assertEquals(1.0F, MathUtils.indicator(2.0F), delta);\n+        assertEquals(-1.0F, MathUtils.indicator(-2.0F), delta);\n+    }\n+\n+    public void testSignInt() {\n+        assertEquals((int)1, MathUtils.indicator((int)(2)));\n+        assertEquals((int)(-1), MathUtils.indicator((int)(-2)));\n+    }\n+\n+    public void testSignLong() {\n+        assertEquals(1L, MathUtils.indicator(2L));\n+        assertEquals(-1L, MathUtils.indicator(-2L));\n+    }\n+\n+    public void testSignShort() {\n+        assertEquals((short)1, MathUtils.indicator((short)2));\n+        assertEquals((short)(-1), MathUtils.indicator((short)(-2)));\n+    }\n+\n+    public void testSinh() {\n+        double x = 3.0;\n+        double expected = 10.01787;\n+        assertEquals(expected, MathUtils.sinh(x), 1.0e-5);\n+    }\n+\n+    public void testSinhNaN() {\n+        assertTrue(Double.isNaN(MathUtils.sinh(Double.NaN)));\n+    }\n+\n+    public void testSubAndCheck() {\n+        int big = Integer.MAX_VALUE;\n+        int bigNeg = Integer.MIN_VALUE;\n+        assertEquals(big, MathUtils.subAndCheck(big, 0));\n+        try {\n+            MathUtils.subAndCheck(big, -1);\n+            fail(\"Expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+        }\n+        try {\n+            MathUtils.subAndCheck(bigNeg, 1);\n+            fail(\"Expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+        }\n+    }\n+\n+    public void testSubAndCheckErrorMessage() {\n+        int big = Integer.MAX_VALUE;\n+        try {\n+            MathUtils.subAndCheck(big, -1);\n+            fail(\"Expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+            assertEquals(\"overflow: subtract\", ex.getMessage());\n+        }\n+    }\n+\n+    public void testSubAndCheckLong() {\n+        long max = Long.MAX_VALUE;\n+        long min = Long.MIN_VALUE;\n+        assertEquals(max, MathUtils.subAndCheck(max, 0));\n+        assertEquals(min, MathUtils.subAndCheck(min, 0));\n+        assertEquals(-max, MathUtils.subAndCheck(0, max));\n+        testSubAndCheckLongFailure(0L, min);\n+        testSubAndCheckLongFailure(max, -1L);\n+        testSubAndCheckLongFailure(min, 1L);\n+    }\n+\n+    private void testSubAndCheckLongFailure(long a, long b) {\n+        try {\n+            MathUtils.subAndCheck(a, b);\n+            fail(\"Expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {\n             // success\n         }\n-        \n-        assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);\n-        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);\n-        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);\n-        assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);\n-        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);\n-        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);\n-        \n-        try {\n-            MathUtils.round(1.234, 2, 1923);\n-            fail();\n-        } catch (IllegalArgumentException ex) {\n-            // success\n-        }\n-\n-        // MATH-151\n-        assertEquals(39.25, MathUtils.round(39.245, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n-     \n-        // special values\n-        TestUtils.assertEquals(Double.NaN, MathUtils.round(Double.NaN, 2), 0.0);\n-        assertEquals(0.0, MathUtils.round(0.0, 2), 0.0);\n-        assertEquals(Double.POSITIVE_INFINITY, MathUtils.round(Double.POSITIVE_INFINITY, 2), 0.0);\n-        assertEquals(Double.NEGATIVE_INFINITY, MathUtils.round(Double.NEGATIVE_INFINITY, 2), 0.0);\n+\n     }\n }", "timestamp": 1193815381, "metainfo": ""}