{"sha": "fc505bba569dede0d29a401798fa9f55df9e27f1", "log": "MATH-393 Fixed inconsistent definition of \"getResult\". Modified associated test accordingly.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java\n \n     /** {@inheritDoc} */\n     public double getFunctionValue() {\n-        return optimizer.getFunctionValue();\n+        return optimaValues[0];\n     }\n \n     /** {@inheritDoc} */\n     public double getResult() {\n-        return optimizer.getResult();\n+        return optima[0];\n     }\n \n     /** {@inheritDoc} */\n             throws ConvergenceException, FunctionEvaluationException {\n         return optimize(f, goalType, min, max);\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java\n     void setMaxEvaluations(int maxEvaluations);\n \n     /** Get the maximal number of functions evaluations.\n-     * @return maximal number of functions evaluations\n+     * @return the maximal number of functions evaluations.\n      */\n     int getMaxEvaluations();\n \n      * {@link #optimize(UnivariateRealFunction, GoalType, double, double) optimize}\n      * method. It is 0 if the method has not been called yet.\n      * </p>\n-     * @return number of evaluations of the objective function\n+     * @return the number of evaluations of the objective function.\n      */\n     int getEvaluations();\n \n      * </p>\n      * @param f the function to optimize.\n      * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}\n-     * or {@link GoalType#MINIMIZE}\n+     * or {@link GoalType#MINIMIZE}.\n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n-     * @return a value where the function is optimum\n+     * @return a value where the function is optimum.\n      * @throws ConvergenceException if the maximum iteration count is exceeded\n      * or the optimizer detects convergence problems otherwise.\n      * @throws FunctionEvaluationException if an error occurs evaluating the\n-     * function\n+     * function.\n      * @throws IllegalArgumentException if min > max or the endpoints do not\n-     * satisfy the requirements specified by the optimizer\n+     * satisfy the requirements specified by the optimizer.\n      */\n     double optimize(UnivariateRealFunction f, GoalType goalType,\n                     double min, double max)\n      * </p>\n      * @param f the function to optimize.\n      * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}\n-     * or {@link GoalType#MINIMIZE}\n+     * or {@link GoalType#MINIMIZE}.\n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n-     * @param startValue the start value to use\n-     * @return a value where the function is optimum\n+     * @param startValue the start value to use.\n+     * @return a value where the function is optimum.\n      * @throws ConvergenceException if the maximum iteration count is exceeded\n      * or the optimizer detects convergence problems otherwise.\n      * @throws FunctionEvaluationException if an error occurs evaluating the\n-     * function\n+     * function.\n      * @throws IllegalArgumentException if min > max or the arguments do not\n-     * satisfy the requirements specified by the optimizer\n+     * satisfy the requirements specified by the optimizer.\n      */\n     double optimize(UnivariateRealFunction f, GoalType goalType,\n                     double min, double max, double startValue)\n     /**\n      * Get the result of the last run of the optimizer.\n      *\n-     * @return the last result.\n+     * @return the optimum.\n      * @throws IllegalStateException if there is no result available, either\n      * because no result was yet computed or the last attempt failed.\n      */\n     /**\n      * Get the result of the last run of the optimizer.\n      *\n-     * @return the value of the function at the last result.\n+     * @return the value of the function at the optimum.\n      * @throws IllegalStateException if there is no result available, either\n      * because no result was yet computed or the last attempt failed.\n      */\n     double getFunctionValue();\n-\n }\n--- a/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java\n         }\n \n         assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);\n-        assertEquals(-0.27194301946870, minimizer.getResult(), 1.0e-13);\n-        assertEquals(-0.04433426940878, minimizer.getFunctionValue(), 1.0e-13);\n+        assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);\n+        assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);\n \n         double[] optima = minimizer.getOptima();\n         double[] optimaValues = minimizer.getOptimaValues();", "timestamp": 1280060983, "metainfo": ""}