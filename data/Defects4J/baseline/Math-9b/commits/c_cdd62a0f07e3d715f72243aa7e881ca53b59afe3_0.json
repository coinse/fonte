{"sha": "cdd62a0f07e3d715f72243aa7e881ca53b59afe3", "log": "Remove non-thrown throws clauses  ", "commit": "\n--- a/src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java\n+++ b/src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java\n      * <p> This will test the function f(x) = 2x^2 - 3x -2 = (2x+1)(x-2)</p>\n      *\n      */\n-    public void testQuadratic() throws MathException {\n+    public void testQuadratic() {\n         double[] c = { -2.0, -3.0, 2.0 };\n         PolynomialFunction f = new PolynomialFunction( c );\n \n      *   f(x) = x^2(x-5)(x+3)(x-1) = x^5 - 3x^4 -13x^3 + 15x^2</p>\n      *\n      */\n-    public void testQuintic() throws MathException {\n+    public void testQuintic() {\n         double[] c = { 0.0, 0.0, 15.0, -13.0, -3.0, 1.0 };\n         PolynomialFunction f = new PolynomialFunction( c );\n \n--- a/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.distribution;\n-\n-import org.apache.commons.math.MathException;\n \n /**\n  * Test cases for ExponentialDistribution.\n         assertEquals(0.0905214, actual, 10e-4);\n     }\n \n-    public void testDensity() throws MathException {\n+    public void testDensity() {\n         ExponentialDistribution d1 = new ExponentialDistributionImpl(1);\n         assertEquals(0.0, d1.density(-1e-9));\n         assertEquals(1.0, d1.density(0.0));\n--- a/src/test/org/apache/commons/math/geometry/RotationTest.java\n+++ b/src/test/org/apache/commons/math/geometry/RotationTest.java\n \n   }\n \n-  public void testSingularities()\n-    throws CardanEulerSingularityException {\n+  public void testSingularities() {\n \n     RotationOrder[] CardanOrders = {\n       RotationOrder.XYZ, RotationOrder.XZY, RotationOrder.YXZ,\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n     }\n   }\n \n-  public void testMinStep()\n-    throws DerivativeException, IntegratorException {\n+  public void testMinStep() {\n \n     try {\n       TestProblem1 pb = new TestProblem1();\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n     }\n   }\n \n-  public void testMinStep()\n-    throws DerivativeException, IntegratorException {\n+  public void testMinStep() {\n \n     try {\n       TestProblem1 pb = new TestProblem1();\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n     }\n   }\n \n-  public void testMinStep()\n-    throws DerivativeException, IntegratorException {\n+  public void testMinStep() {\n \n     try {\n       TestProblem5 pb  = new TestProblem5();\n--- a/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n     }\n   }\n \n-  public void testMinStep()\n-    throws DerivativeException, IntegratorException {\n+  public void testMinStep() {\n \n     try {\n       TestProblem1 pb = new TestProblem1();\n \n   }\n \n-  public void testEventsErrors()\n-    throws DerivativeException, IntegratorException {\n+  public void testEventsErrors() {\n \n       final TestProblem1 pb = new TestProblem1();\n       double minStep = 0;\n \n   }\n \n-  public void testEventsNoConvergence()\n-  throws DerivativeException, IntegratorException {\n+  public void testEventsNoConvergence() {\n \n     final TestProblem1 pb = new TestProblem1();\n     double minStep = 0;\n--- a/src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java\n import java.io.IOException;\n \n import org.apache.commons.math.ode.DerivativeException;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.DummyStepInterpolator;\n \n   }\n \n   public void testSerialization()\n-  throws DerivativeException, IntegratorException,\n-         IOException, ClassNotFoundException {\n+  throws DerivativeException, IOException, ClassNotFoundException {\n \n     double[]   y    =   { 0.0, 1.0, -2.0 };\n     DummyStepInterpolator interpolator = new DummyStepInterpolator(y, true);\n   }\n \n   public void testImpossibleSerialization()\n-  throws DerivativeException, IntegratorException,\n-         IOException, ClassNotFoundException {\n+  throws IOException {\n \n     double[] y = { 0.0, 1.0, -2.0 };\n     AbstractStepInterpolator interpolator = new BadStepInterpolator(y, true);\n \n \n   public void testSerializationError()\n-  throws DerivativeException, IntegratorException,\n-         IOException, ClassNotFoundException {\n+  throws IOException {\n \n     double[] y = { 0.0, 1.0, -2.0 };\n     ErrorGeneratingInterpolator interpolator =\n--- a/src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java\n+++ b/src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java\n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n-import org.apache.commons.math.linear.decomposition.NotPositiveDefiniteMatrixException;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.RealPointValuePair;\n import org.apache.commons.math.optimization.SimpleScalarValueChecker;\n     super(name);\n   }\n \n-  public void testFunctionEvaluationExceptions() throws ConvergenceException {\n+  public void testFunctionEvaluationExceptions() {\n       MultivariateRealFunction wrong =\n           new MultivariateRealFunction() {\n             private static final long serialVersionUID = 4751314470965489371L;\n   }\n \n   public void testMinimizeMaximize()\n-      throws FunctionEvaluationException, ConvergenceException, NotPositiveDefiniteMatrixException {\n+      throws FunctionEvaluationException, ConvergenceException {\n \n       // the following function has 4 local extrema:\n       final double xM        = -3.841947088256863675365;\n--- a/src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java\n+++ b/src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java\n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n-import org.apache.commons.math.linear.decomposition.NotPositiveDefiniteMatrixException;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.RealPointValuePair;\n import org.apache.commons.math.optimization.SimpleScalarValueChecker;\n     super(name);\n   }\n \n-  public void testFunctionEvaluationExceptions() throws ConvergenceException {\n+  public void testFunctionEvaluationExceptions() {\n       MultivariateRealFunction wrong =\n           new MultivariateRealFunction() {\n             private static final long serialVersionUID = 4751314470965489371L;\n   }\n \n   public void testMinimizeMaximize()\n-      throws FunctionEvaluationException, ConvergenceException, NotPositiveDefiniteMatrixException {\n+      throws FunctionEvaluationException, ConvergenceException {\n \n       // the following function has 4 local extrema:\n       final double xM        = -3.841947088256863675365;\n--- a/src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java\n+++ b/src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java\n \n     }\n \n-    public void testNonInversible() throws OptimizationException {\n+    public void testNonInversible() {\n \n         LinearProblem problem = new LinearProblem(new double[][] {\n                 {  1, 2, -3 },\n \n     }\n \n-    public void testMoreEstimatedParametersSimple() throws OptimizationException {\n+    public void testMoreEstimatedParametersSimple() {\n \n         LinearProblem problem = new LinearProblem(new double[][] {\n                 { 3.0, 2.0,  0.0, 0.0 },\n \n     }\n \n-    public void testMoreEstimatedParametersUnsorted() throws OptimizationException {\n+    public void testMoreEstimatedParametersUnsorted() {\n         LinearProblem problem = new LinearProblem(new double[][] {\n                  { 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },\n                  { 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },\n--- a/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java\n+++ b/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java\n \n     }\n \n-    public void testControlParameters() throws OptimizationException {\n+    public void testControlParameters() {\n         Circle circle = new Circle();\n         circle.addPoint( 30.0,  68.0);\n         circle.addPoint( 50.0,  -6.0);\n         assertEquals( 0.2075001, center.y,      1.0e-6);\n     }\n \n-    public void testMath199() throws FunctionEvaluationException, OptimizationException {\n+    public void testMath199() throws FunctionEvaluationException {\n         try {\n             QuadraticProblem problem = new QuadraticProblem();\n             problem.addPoint (0, -3.182591015485607);\n--- a/src/test/org/apache/commons/math/optimization/general/MinpackTest.java\n+++ b/src/test/org/apache/commons/math/optimization/general/MinpackTest.java\n     super(name);\n   }\n \n-  public void testMinpackLinearFullRank()\n-    throws OptimizationException {\n+  public void testMinpackLinearFullRank() {\n     minpackTest(new LinearFullRankFunction(10, 5, 1.0,\n                                            5.0, 2.23606797749979), false);\n     minpackTest(new LinearFullRankFunction(50, 5, 1.0,\n                                            8.06225774829855, 6.70820393249937), false);\n   }\n \n-  public void testMinpackLinearRank1()\n-    throws OptimizationException {\n+  public void testMinpackLinearRank1() {\n     minpackTest(new LinearRank1Function(10, 5, 1.0,\n                                         291.521868819476, 1.4638501094228), false);\n     minpackTest(new LinearRank1Function(50, 5, 1.0,\n                                         3101.60039334535, 3.48263016573496), false);\n   }\n \n-  public void testMinpackLinearRank1ZeroColsAndRows()\n-    throws OptimizationException {\n+  public void testMinpackLinearRank1ZeroColsAndRows() {\n     minpackTest(new LinearRank1ZeroColsAndRowsFunction(10, 5, 1.0), false);\n     minpackTest(new LinearRank1ZeroColsAndRowsFunction(50, 5, 1.0), false);\n   }\n \n-  public void testMinpackRosenbrok()\n-    throws OptimizationException {\n+  public void testMinpackRosenbrok() {\n     minpackTest(new RosenbrockFunction(new double[] { -1.2, 1.0 },\n                                        Math.sqrt(24.2)), false);\n     minpackTest(new RosenbrockFunction(new double[] { -12.0, 10.0 },\n                                        11.0 * Math.sqrt(169000121.0)), false);\n   }\n \n-  public void testMinpackHelicalValley()\n-    throws OptimizationException {\n+  public void testMinpackHelicalValley() {\n     minpackTest(new HelicalValleyFunction(new double[] { -1.0, 0.0, 0.0 },\n                                           50.0), false);\n     minpackTest(new HelicalValleyFunction(new double[] { -10.0, 0.0, 0.0 },\n                                           991.261822123701), false);\n   }\n     \n-  public void testMinpackPowellSingular()\n-    throws OptimizationException {\n+  public void testMinpackPowellSingular() {\n     minpackTest(new PowellSingularFunction(new double[] { 3.0, -1.0, 0.0, 1.0 },\n                                            14.6628782986152), false);\n     minpackTest(new PowellSingularFunction(new double[] { 30.0, -10.0, 0.0, 10.0 },\n                                            126887.903284750), false);\n   }\n     \n-  public void testMinpackFreudensteinRoth()\n-    throws OptimizationException {\n+  public void testMinpackFreudensteinRoth() {\n     minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },\n                                              20.0124960961895, 6.99887517584575,\n                                              new double[] {\n                                              }), false);\n   }\n     \n-  public void testMinpackBard()\n-    throws OptimizationException {\n+  public void testMinpackBard() {\n     minpackTest(new BardFunction(1.0, 6.45613629515967, 0.0906359603390466,\n                                  new double[] {\n                                    0.0824105765758334,\n                                  }), false);\n   }\n     \n-  public void testMinpackKowalikOsborne()\n-    throws OptimizationException {\n+  public void testMinpackKowalikOsborne() {\n     minpackTest(new KowalikOsborneFunction(new double[] { 0.25, 0.39, 0.415, 0.39 },\n                                            0.0728915102882945,\n                                            0.017535837721129,\n                                            }), false);\n   }\n     \n-  public void testMinpackMeyer()\n-    throws OptimizationException {\n+  public void testMinpackMeyer() {\n     minpackTest(new MeyerFunction(new double[] { 0.02, 4000.0, 250.0 },\n                                   41153.4665543031, 9.37794514651874,\n                                   new double[] {\n                                   }), true);\n   }\n     \n-  public void testMinpackWatson()\n-    throws OptimizationException {\n+  public void testMinpackWatson() {\n   \n     minpackTest(new WatsonFunction(6, 0.0,\n                                    5.47722557505166, 0.0478295939097601,\n \n   }\n     \n-  public void testMinpackBox3Dimensional()\n-  throws OptimizationException {\n+  public void testMinpackBox3Dimensional() {\n     minpackTest(new Box3DimensionalFunction(10, new double[] { 0.0, 10.0, 20.0 },\n                                             32.1115837449572), false);\n   }\n     \n-  public void testMinpackJennrichSampson()\n-    throws OptimizationException {\n+  public void testMinpackJennrichSampson() {\n     minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },\n                                             64.5856498144943, 11.1517793413499,\n                                             new double[] {\n                                             }), false);\n   }\n \n-  public void testMinpackBrownDennis()\n-    throws OptimizationException {\n+  public void testMinpackBrownDennis() {\n     minpackTest(new BrownDennisFunction(20,\n                                         new double[] { 25.0, 5.0, -5.0, -1.0 },\n                                         2815.43839161816, 292.954288244866,\n                                         }), false);\n   }\n     \n-  public void testMinpackChebyquad()\n-    throws OptimizationException {\n+  public void testMinpackChebyquad() {\n     minpackTest(new ChebyquadFunction(1, 8, 1.0,\n                                       1.88623796907732, 1.88623796907732,\n                                       new double[] { 0.5 }), false);\n                                       }), false);\n   }\n     \n-  public void testMinpackBrownAlmostLinear()\n-    throws OptimizationException {\n+  public void testMinpackBrownAlmostLinear() {\n     minpackTest(new BrownAlmostLinearFunction(10, 0.5,\n                                               16.5302162063499, 0.0,\n                                               new double[] {\n                                               }), false);\n     }\n     \n-  public void testMinpackOsborne1()\n-    throws OptimizationException {\n+  public void testMinpackOsborne1() {\n       minpackTest(new Osborne1Function(new double[] { 0.5, 1.5, -1.0, 0.01, 0.02, },\n                                        0.937564021037838, 0.00739249260904843,\n                                        new double[] {\n                                        }), false);\n     }\n     \n-  public void testMinpackOsborne2()\n-    throws OptimizationException {\n+  public void testMinpackOsborne2() {\n       \n     minpackTest(new Osborne2Function(new double[] {\n                                        1.3, 0.65, 0.65, 0.7, 0.6,\n--- a/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n+++ b/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n         assertEquals(12.0, solution.getValue());\n     }\n \n-    public void testInfeasibleSolution() throws UnboundedSolutionException {\n+    public void testInfeasibleSolution() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 1));\n         }\n     }\n \n-    public void testUnboundedSolution() throws NoFeasibleSolutionException {\n+    public void testUnboundedSolution() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.EQ, 2));\n--- a/src/test/org/apache/commons/math/transform/FastCosineTransformerTest.java\n+++ b/src/test/org/apache/commons/math/transform/FastCosineTransformerTest.java\n     /**\n      * Test of transformer for the ad hoc data.\n      */\n-    public void testAdHocData() throws MathException {\n+    public void testAdHocData() {\n         FastCosineTransformer transformer = new FastCosineTransformer();\n         double result[], tolerance = 1E-12;\n \n--- a/src/test/org/apache/commons/math/transform/FastSineTransformerTest.java\n+++ b/src/test/org/apache/commons/math/transform/FastSineTransformerTest.java\n     /**\n      * Test of transformer for the ad hoc data.\n      */\n-    public void testAdHocData() throws MathException {\n+    public void testAdHocData() {\n         FastSineTransformer transformer = new FastSineTransformer();\n         double result[], tolerance = 1E-12;\n ", "timestamp": 1239714834, "metainfo": ""}