{"sha": "7c190c990de86a5311a4880b49d1a55e498de1ef", "log": "leverage null pointer handling, exception classes can be built using null arguments arrays which are automatically converted to zero-sized arrays to prevent null pointer exceptions  ", "commit": "\n--- a/src/java/org/apache/commons/math/ConvergenceException.java\n+++ b/src/java/org/apache/commons/math/ConvergenceException.java\n      * Default constructor.\n      */\n     public ConvergenceException() {\n-        super(\"Convergence failed\", new Object[0]);\n+        super(\"Convergence failed\", null);\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java\n+++ b/src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java\n    * if false it is related to EulerAngles\n    */\n   public CardanEulerSingularityException(boolean isCardan) {\n-    super(isCardan ? \"Cardan angles singularity\" : \"Euler angles singularity\", new Object[0]);\n+    super(isCardan ? \"Cardan angles singularity\" : \"Euler angles singularity\", null);\n   }\n \n   /** Serializable version identifier */\n--- a/src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java\n+++ b/src/java/org/apache/commons/math/linear/RankDeficientMatrixException.java\n      * Construct an exception with a default message.\n      */\n     public RankDeficientMatrixException() {\n-        super(\"matrix is rank-deficient\", new Object[0]);\n+        super(\"matrix is rank-deficient\", null);\n     }\n \n }\n--- a/src/java/org/apache/commons/math/linear/SingularMatrixException.java\n+++ b/src/java/org/apache/commons/math/linear/SingularMatrixException.java\n      * Construct an exception with a default message.\n      */\n     public SingularMatrixException() {\n-        super(\"matrix is singular\", new Object[0]);\n+        super(\"matrix is singular\", null);\n     }\n \n }\n--- a/src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java\n+++ b/src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java\n      * build an exception with a default message.\n      */\n     public NotPositiveDefiniteMatrixException() {\n-        super(\"not positive definite matrix\", new Object[0]);\n+        super(\"not positive definite matrix\", null);\n     }\n \n }\n--- a/src/test/org/apache/commons/math/MathConfigurationExceptionTest.java\n+++ b/src/test/org/apache/commons/math/MathConfigurationExceptionTest.java\n         MathConfigurationException ex = new MathConfigurationException();\n         assertNull(ex.getCause());\n         assertNull(ex.getMessage());\n-        assertNull(ex.getMessage(Locale.FRENCH));\n+        assertEquals(0, ex.getMessage(Locale.FRENCH).length());\n     }\n     \n     public void testConstructorPatternArguments(){\n--- a/src/test/org/apache/commons/math/MathExceptionTest.java\n+++ b/src/test/org/apache/commons/math/MathExceptionTest.java\n         MathException ex = new MathException();\n         assertNull(ex.getCause());\n         assertNull(ex.getMessage());\n-        assertNull(ex.getMessage(Locale.FRENCH));\n+        assertEquals(0, ex.getMessage(Locale.FRENCH).length());\n     }\n     \n     public void testConstructorPatternArguments(){\n     public void testPrintStackTrace() {\n         String outMsg = \"outer message\";\n         String inMsg = \"inner message\";\n-        MathException cause = new MathConfigurationException(inMsg, new Object[0]);\n-        MathException ex = new MathException(outMsg, new Object[0], cause);\n+        MathException cause = new MathConfigurationException(inMsg, null);\n+        MathException ex = new MathException(outMsg, null, cause);\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         PrintStream ps = new PrintStream(baos);\n         ex.printStackTrace(ps);\n     public void testSerialization() {\n         String outMsg = \"outer message\";\n         String inMsg = \"inner message\";\n-        MathException cause = new MathConfigurationException(inMsg, new Object[0]);\n-        MathException ex = new MathException(outMsg, new Object[0], cause);\n+        MathException cause = new MathConfigurationException(inMsg, null);\n+        MathException ex = new MathException(outMsg, null, cause);\n         MathException image = (MathException) TestUtils.serializeAndRecover(ex);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n--- a/src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java\n+++ b/src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java\n      */\n     public void testConstructorMessage(){\n         String msg = \"message\";\n-        InvalidMatrixException ex = new InvalidMatrixException(msg, new Object[0]);\n+        InvalidMatrixException ex = new InvalidMatrixException(msg, null);\n         assertEquals(msg, ex.getMessage());\n     }\n }\n--- a/src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java\n+++ b/src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java\n      */\n     public void testConstructorMessage(){\n         String msg = \"message\";\n-        MatrixIndexException ex = new MatrixIndexException(msg, new Object[0]);\n+        MatrixIndexException ex = new MatrixIndexException(msg, null);\n         assertEquals(msg, ex.getMessage());\n     }\n }\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n         if (!lu.isSquare() || lowerData.length != lowerData[0].length || upperData.length != upperData[0].length ||\n                 lowerData.length != upperData.length\n                 || lowerData.length != lu.getRowDimension()) {\n-            throw new InvalidMatrixException(\"incorrect dimensions\", new Object[0]);\n+            throw new InvalidMatrixException(\"incorrect dimensions\", null);\n         }    \n         int n = lu.getRowDimension();\n         for (int i = 0; i < n; i++) {", "timestamp": 1226069293, "metainfo": ""}