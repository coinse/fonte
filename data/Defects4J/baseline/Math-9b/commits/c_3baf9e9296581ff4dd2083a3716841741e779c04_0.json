{"sha": "3baf9e9296581ff4dd2083a3716841741e779c04", "log": "MATH-829 Removed unnecessary \"throws Exception\" clause from method signature.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/analysis/integration/RombergIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/RombergIntegratorTest.java\n      * Test of parameters for the integrator.\n      */\n     @Test\n-    public void testParameters() throws Exception {\n+    public void testParameters() {\n         UnivariateFunction f = new SinFunction();\n \n         try {\n--- a/src/test/java/org/apache/commons/math3/analysis/integration/SimpsonIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/SimpsonIntegratorTest.java\n      * Test of parameters for the integrator.\n      */\n     @Test\n-    public void testParameters() throws Exception {\n+    public void testParameters() {\n         UnivariateFunction f = new SinFunction();\n         try {\n             // bad interval\n--- a/src/test/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegratorTest.java\n      * Test of parameters for the integrator.\n      */\n     @Test\n-    public void testParameters() throws Exception {\n+    public void testParameters() {\n         UnivariateFunction f = new SinFunction();\n \n         try {\n--- a/src/test/java/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolatorTest.java\n      * Test of parameters for the interpolator.\n      */\n     @Test\n-    public void testParameters() throws Exception {\n+    public void testParameters() {\n         UnivariateInterpolator interpolator = new DividedDifferenceInterpolator();\n \n         try {\n--- a/src/test/java/org/apache/commons/math3/analysis/interpolation/LinearInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/interpolation/LinearInterpolatorTest.java\n \n     @Test\n     public void testInterpolateLinearDegenerateTwoSegment()\n-        throws Exception {\n+        {\n         double x[] = { 0.0, 0.5, 1.0 };\n         double y[] = { 0.0, 0.5, 1.0 };\n         UnivariateInterpolator i = new LinearInterpolator();\n \n     @Test\n     public void testInterpolateLinearDegenerateThreeSegment()\n-        throws Exception {\n+        {\n         double x[] = { 0.0, 0.5, 1.0, 1.5 };\n         double y[] = { 0.0, 0.5, 1.0, 1.5 };\n         UnivariateInterpolator i = new LinearInterpolator();\n     }\n \n     @Test\n-    public void testInterpolateLinear() throws Exception {\n+    public void testInterpolateLinear() {\n         double x[] = { 0.0, 0.5, 1.0 };\n         double y[] = { 0.0, 0.5, 0.0 };\n         UnivariateInterpolator i = new LinearInterpolator();\n      * verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length.\n      */\n     protected void verifyInterpolation(UnivariateFunction f, double x[], double y[])\n-        throws Exception{\n+       {\n         for (int i = 0; i < x.length; i++) {\n             Assert.assertEquals(f.value(x[i]), y[i], knotTolerance);\n         }\n--- a/src/test/java/org/apache/commons/math3/analysis/interpolation/NevilleInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/interpolation/NevilleInterpolatorTest.java\n      * Test of parameters for the interpolator.\n      */\n     @Test\n-    public void testParameters() throws Exception {\n+    public void testParameters() {\n         UnivariateInterpolator interpolator = new NevilleInterpolator();\n \n         try {\n--- a/src/test/java/org/apache/commons/math3/analysis/interpolation/SplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/interpolation/SplineInterpolatorTest.java\n \n     @Test\n     public void testInterpolateLinearDegenerateTwoSegment()\n-        throws Exception {\n+        {\n         double x[] = { 0.0, 0.5, 1.0 };\n         double y[] = { 0.0, 0.5, 1.0 };\n         UnivariateInterpolator i = new SplineInterpolator();\n \n     @Test\n     public void testInterpolateLinearDegenerateThreeSegment()\n-        throws Exception {\n+        {\n         double x[] = { 0.0, 0.5, 1.0, 1.5 };\n         double y[] = { 0.0, 0.5, 1.0, 1.5 };\n         UnivariateInterpolator i = new SplineInterpolator();\n     }\n \n     @Test\n-    public void testInterpolateLinear() throws Exception {\n+    public void testInterpolateLinear() {\n         double x[] = { 0.0, 0.5, 1.0 };\n         double y[] = { 0.0, 0.5, 0.0 };\n         UnivariateInterpolator i = new SplineInterpolator();\n     }\n \n     @Test\n-    public void testInterpolateSin() throws Exception {\n+    public void testInterpolateSin() {\n         double x[] =\n             {\n                 0.0,\n      * verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length.\n      */\n     protected void verifyInterpolation(UnivariateFunction f, double x[], double y[])\n-        throws Exception{\n+       {\n         for (int i = 0; i < x.length; i++) {\n             Assert.assertEquals(f.value(x[i]), y[i], knotTolerance);\n         }\n      *    adjacent polynomials must agree through two derivatives at knot points\n      */\n     protected void verifyConsistency(PolynomialSplineFunction f, double x[])\n-        throws Exception {\n+        {\n         PolynomialFunction polynomials[] = f.getPolynomials();\n         for (int i = 1; i < x.length - 2; i++) {\n             // evaluate polynomials and derivatives at x[i + 1]\n--- a/src/test/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java\n      * Test preconditions.\n      */\n     @Test\n-    public void testPreconditions() throws Exception {\n+    public void testPreconditions() {\n         double[] xval = new double[] {3, 4, 5, 6.5};\n         double[] yval = new double[] {-4, -3, -1, 2.5};\n         double[] zval = new double[] {-12, -8, -5.5, -3, 0, 2.5};\n--- a/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java\n      * Test of parameters for the polynomial.\n      */\n     @Test\n-    public void testParameters() throws Exception {\n+    public void testParameters() {\n \n         try {\n             // bad input array length\n--- a/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java\n      * Test of parameters for the polynomial.\n      */\n     @Test\n-    public void testParameters() throws Exception {\n+    public void testParameters() {\n \n         try {\n             // bad input array length\n--- a/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java\n     }\n \n     @Test\n-    public void testValues() throws Exception {\n+    public void testValues() {\n         PolynomialSplineFunction spline =\n             new PolynomialSplineFunction(knots, polynomials);\n         UnivariateFunction dSpline = spline.derivative();\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/MullerSolver2Test.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/MullerSolver2Test.java\n      * Test of parameters for the solver.\n      */\n     @Test\n-    public void testParameters() throws Exception {\n+    public void testParameters() {\n         UnivariateFunction f = new SinFunction();\n         UnivariateSolver solver = new MullerSolver2();\n \n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/MullerSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/MullerSolverTest.java\n      * Test of parameters for the solver.\n      */\n     @Test\n-    public void testParameters() throws Exception {\n+    public void testParameters() {\n         UnivariateFunction f = new SinFunction();\n         UnivariateSolver solver = new MullerSolver();\n \n--- a/src/test/java/org/apache/commons/math3/fraction/BigFractionFormatTest.java\n+++ b/src/test/java/org/apache/commons/math3/fraction/BigFractionFormatTest.java\n     }\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         properFormat = BigFractionFormat.getProperInstance(getLocale());\n         improperFormat = BigFractionFormat.getImproperInstance(getLocale());\n     }\n--- a/src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java\n+++ b/src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java\n     }\n \n     @Test\n-    public void testConstructor() throws Exception {\n+    public void testConstructor() {\n         assertFraction(0, 1, new BigFraction(0, 1));\n         assertFraction(0, 1, new BigFraction(0l, 2l));\n         assertFraction(0, 1, new BigFraction(0, -1));\n--- a/src/test/java/org/apache/commons/math3/fraction/FractionFormatTest.java\n+++ b/src/test/java/org/apache/commons/math3/fraction/FractionFormatTest.java\n     }\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         properFormat = FractionFormat.getProperInstance(getLocale());\n         improperFormat = FractionFormat.getImproperInstance(getLocale());\n     }\n--- a/src/test/java/org/apache/commons/math3/fraction/FractionTest.java\n+++ b/src/test/java/org/apache/commons/math3/fraction/FractionTest.java\n     }\n \n     @Test\n-    public void testConstructor() throws Exception {\n+    public void testConstructor() {\n         assertFraction(0, 1, new Fraction(0, 1));\n         assertFraction(0, 1, new Fraction(0, 2));\n         assertFraction(0, 1, new Fraction(0, -1));\n     }\n \n     @Test\n-    public void testConstructorDouble() throws Exception {\n+    public void testConstructorDouble() {\n         assertFraction(1, 2, new Fraction(0.5));\n         assertFraction(1, 3, new Fraction(1.0 / 3.0));\n         assertFraction(17, 100, new Fraction(17.0 / 100.0));\n--- a/src/test/java/org/apache/commons/math3/linear/Array2DRowRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/Array2DRowRealMatrixTest.java\n     }\n \n     @Test\n-    public void testSetSubMatrix() throws Exception {\n+    public void testSetSubMatrix() {\n         Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);\n         m.setSubMatrix(detData2,1,1);\n         RealMatrix expected = MatrixUtils.createRealMatrix\n--- a/src/test/java/org/apache/commons/math3/linear/BlockFieldMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/BlockFieldMatrixTest.java\n     }\n \n     @Test\n-    public void testSetSubMatrix() throws Exception {\n+    public void testSetSubMatrix() {\n         BlockFieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);\n         m.setSubMatrix(detData2,1,1);\n         FieldMatrix<Fraction> expected = new BlockFieldMatrix<Fraction>\n--- a/src/test/java/org/apache/commons/math3/linear/BlockRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/BlockRealMatrixTest.java\n     }\n \n     @Test\n-    public void testSetSubMatrix() throws Exception {\n+    public void testSetSubMatrix() {\n         BlockRealMatrix m = new BlockRealMatrix(testData);\n         m.setSubMatrix(detData2,1,1);\n         RealMatrix expected = new BlockRealMatrix\n--- a/src/test/java/org/apache/commons/math3/linear/FieldMatrixImplTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/FieldMatrixImplTest.java\n     }\n \n     @Test\n-    public void testSetSubMatrix() throws Exception {\n+    public void testSetSubMatrix() {\n         Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);\n         m.setSubMatrix(detData2,1,1);\n         FieldMatrix<Fraction> expected = new Array2DRowFieldMatrix<Fraction>\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n     }\n \n     @Test\n-    public void testSparseIterator() throws Exception {\n+    public void testSparseIterator() {\n         /*\n          * For non-default values, use x + 1, x + 2, etc... to make sure that\n          * these values are really different from x.\n--- a/src/test/java/org/apache/commons/math3/linear/SparseFieldMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SparseFieldMatrixTest.java\n     */\n \n     @Test\n-    public void testSetSubMatrix() throws Exception {\n+    public void testSetSubMatrix() {\n         SparseFieldMatrix<Fraction> m = createSparseMatrix(testData);\n         m.setSubMatrix(detData2, 1, 1);\n         FieldMatrix<Fraction> expected = createSparseMatrix(new Fraction[][] {\n--- a/src/test/java/org/apache/commons/math3/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/ode/nonstiff/HighamHall54IntegratorTest.java\n public class HighamHall54IntegratorTest {\n \n   @Test\n-  public void testWrongDerivative() throws Exception {\n+  public void testWrongDerivative() {\n       HighamHall54Integrator integrator =\n           new HighamHall54Integrator(0.0, 1.0, 1.0e-10, 1.0e-10);\n       FirstOrderDifferentialEquations equations =\n   }\n \n   @Test\n-  public void testEventsNoConvergence() throws Exception {\n+  public void testEventsNoConvergence() {\n \n     final TestProblem1 pb = new TestProblem1();\n     double minStep = 0;\n }\n \n   @Test\n-  public void testSanityChecks() throws Exception {\n+  public void testSanityChecks() {\n       final TestProblem3 pb  = new TestProblem3(0.9);\n       double minStep = 0;\n       double maxStep = pb.getFinalTime() - pb.getInitialTime();\n--- a/src/test/java/org/apache/commons/math3/special/ErfTest.java\n+++ b/src/test/java/org/apache/commons/math3/special/ErfTest.java\n      * MATH-301, MATH-456\n      */\n     @Test\n-    public void testLargeValues() throws Exception {\n+    public void testLargeValues() {\n         for (int i = 1; i < 200; i*=10) {\n             double result = Erf.erf(i);\n             Assert.assertFalse(Double.isNaN(result));\n      * erfl (extended precision erf).\n      */\n     @Test\n-    public void testErfGnu() throws Exception {\n+    public void testErfGnu() {\n         final double tol = 1E-15;\n         final double[] gnuValues = new double[] {-1, -1, -1, -1, -1, \n         -1, -1, -1, -0.99999999999999997848, \n      * erfcl (extended precision erfc).\n      */\n     @Test\n-    public void testErfcGnu() throws Exception {\n+    public void testErfcGnu() {\n         final double tol = 1E-15;\n         final double[] gnuValues = new double[] { 2,  2,  2,  2,  2, \n         2,  2,  2, 1.9999999999999999785, \n      * http//www.jstatsoft.org/v11/a05/paper\n      */\n     @Test\n-    public void testErfcMaple() throws Exception {\n+    public void testErfcMaple() {\n         double[][] ref = new double[][]\n                         {{0.1, 4.60172162722971e-01},\n                          {1.2, 1.15069670221708e-01},\n      * obtained from Erf.erf(double) and Erf.erfc(double).\n      */\n     @Test\n-    public void testTwoArgumentErf() throws Exception {\n+    public void testTwoArgumentErf() {\n         double[] xi = new double[]{-2.0, -1.0, -0.9, -0.1, 0.0, 0.1, 0.9, 1.0, 2.0};\n         for(double x1 : xi) {\n             for(double x2 : xi) {\n--- a/src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java\n     }\n \n     @Test\n-    public void testN0andN1Conditions() throws Exception {\n+    public void testN0andN1Conditions() {\n         double[] values = new double[0];\n \n         Assert.assertTrue(\n     }\n \n     @Test\n-    public void testArrayIndexConditions() throws Exception {\n+    public void testArrayIndexConditions() {\n         double[] values = { 1.0, 2.0, 3.0, 4.0 };\n \n         Assert.assertEquals(\n     }\n \n     @Test\n-    public void testDifferenceStats() throws Exception {\n+    public void testDifferenceStats() {\n         double sample1[] = {1d, 2d, 3d, 4d};\n         double sample2[] = {1d, 3d, 4d, 2d};\n         double diff[] = {0d, -1d, -1d, 2d};\n     }\n \n     @Test\n-    public void testGeometricMean() throws Exception {\n+    public void testGeometricMean() {\n         double[] test = null;\n         try {\n             StatUtils.geometricMean(test);\n--- a/src/test/java/org/apache/commons/math3/stat/correlation/PearsonsCorrelationTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/correlation/PearsonsCorrelationTest.java\n      * Test Longley dataset against R.\n      */\n     @Test\n-    public void testLongly() throws Exception {\n+    public void testLongly() {\n         RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n         PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);\n         RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();\n      * Test R Swiss fertility dataset against R.\n      */\n     @Test\n-    public void testSwissFertility() throws Exception {\n+    public void testSwissFertility() {\n          RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n          PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);\n          RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();\n      * Test p-value near 0. JIRA: MATH-371\n      */\n     @Test\n-    public void testPValueNearZero() throws Exception {\n+    public void testPValueNearZero() {\n         /*\n          * Create a dataset that has r -> 1, p -> 0 as dimension increases.\n          * Prior to the fix for MATH-371, p vanished for dimension >= 14.\n      * with reported p-values\n      */\n     @Test\n-    public void testStdErrorConsistency() throws Exception {\n+    public void testStdErrorConsistency() {\n         TDistribution tDistribution = new TDistribution(45);\n         RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n         PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);\n      * direct computation from the original matrix\n      */\n     @Test\n-    public void testCovarianceConsistency() throws Exception {\n+    public void testCovarianceConsistency() {\n         RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n         PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);\n         Covariance covInstance = new Covariance(matrix);\n--- a/src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java\n      */\n     @Override\n     @Test\n-    public void testLongly() throws Exception {\n+    public void testLongly() {\n         RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n         SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);\n         RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();\n      * Test R swiss fertility dataset.\n      */\n     @Test\n-    public void testSwiss() throws Exception {\n+    public void testSwiss() {\n         RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n         SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);\n         RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();\n     // Not relevant here\n     @Override\n     @Test\n-    public void testStdErrorConsistency() throws Exception {}\n+    public void testStdErrorConsistency() {}\n     @Override\n     @Test\n-    public void testCovarianceConsistency() throws Exception {}\n+    public void testCovarianceConsistency() {}\n \n }\n--- a/src/test/java/org/apache/commons/math3/stat/data/CertifiedDataAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/data/CertifiedDataAbstractTest.java\n     }\n \n     @After\n-    public void tearDown() throws Exception {\n+    public void tearDown() {\n         descriptives.clear();\n         descriptives = null;\n \n--- a/src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java\n      *     the full dataset\n      */\n     @Test\n-    public void testAggregationConsistency() throws Exception {\n+    public void testAggregationConsistency() {\n \n         // Generate a random sample and random partition\n         double[] totalSample = generateSample();\n      * @throws Exception\n      */\n     @Test\n-    public void testAggregate() throws Exception {\n+    public void testAggregate() {\n \n         // Generate a random sample and random partition\n         double[] totalSample = generateSample();\n \n \n     @Test\n-    public void testAggregateDegenerate() throws Exception {\n+    public void testAggregateDegenerate() {\n         double[] totalSample = {1, 2, 3, 4, 5};\n         double[][] subSamples = {{1}, {2}, {3}, {4}, {5}};\n \n     }\n \n     @Test\n-    public void testAggregateSpecialValues() throws Exception {\n+    public void testAggregateSpecialValues() {\n         double[] totalSample = {Double.POSITIVE_INFINITY, 2, 3, Double.NaN, 5};\n         double[][] subSamples = {{Double.POSITIVE_INFINITY, 2}, {3}, {Double.NaN}, {5}};\n \n--- a/src/test/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatisticsTest.java\n     }\n \n     @Test\n-    public void testPercentileSetter() throws Exception {\n+    public void testPercentileSetter() {\n         DescriptiveStatistics stats = createDescriptiveStatistics();\n         stats.addValue(1);\n         stats.addValue(2);\n--- a/src/test/java/org/apache/commons/math3/stat/descriptive/ListUnivariateImplTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/descriptive/ListUnivariateImplTest.java\n     }\n \n     @Test\n-    public void testN0andN1Conditions() throws Exception {\n+    public void testN0andN1Conditions() {\n         List<Object> list = new ArrayList<Object>();\n \n         DescriptiveStatistics u = new ListUnivariateImpl( list );\n     }\n \n     @Test\n-    public void testProductAndGeometricMean() throws Exception {\n+    public void testProductAndGeometricMean() {\n         ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList<Object>());\n         u.setWindowSize(10);\n \n--- a/src/test/java/org/apache/commons/math3/stat/descriptive/MixedListUnivariateImplTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/descriptive/MixedListUnivariateImplTest.java\n     }\n \n     @Test\n-    public void testN0andN1Conditions() throws Exception {\n+    public void testN0andN1Conditions() {\n         DescriptiveStatistics u = new ListUnivariateImpl(new ArrayList<Object>(),transformers);\n \n         Assert.assertTrue(\n     }\n \n     @Test\n-    public void testProductAndGeometricMean() throws Exception {\n+    public void testProductAndGeometricMean() {\n         ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList<Object>(),transformers);\n         u.setWindowSize(10);\n \n--- a/src/test/java/org/apache/commons/math3/stat/descriptive/MultivariateSummaryStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/descriptive/MultivariateSummaryStatisticsTest.java\n     }\n \n     @Test\n-    public void testSetterInjection() throws Exception {\n+    public void testSetterInjection() {\n         MultivariateSummaryStatistics u = createMultivariateSummaryStatistics(2, true);\n         u.setMeanImpl(new StorelessUnivariateStatistic[] {\n                         new sumMean(), new sumMean()\n     }\n \n     @Test\n-    public void testSetterIllegalState() throws Exception {\n+    public void testSetterIllegalState() {\n         MultivariateSummaryStatistics u = createMultivariateSummaryStatistics(2, true);\n         u.addValue(new double[] { 1, 2 });\n         u.addValue(new double[] { 3, 4 });\n     }\n \n     @Test\n-    public void testN0andN1Conditions() throws Exception {\n+    public void testN0andN1Conditions() {\n         MultivariateSummaryStatistics u = createMultivariateSummaryStatistics(1, true);\n         Assert.assertTrue(Double.isNaN(u.getMean()[0]));\n         Assert.assertTrue(Double.isNaN(u.getStandardDeviation()[0]));\n--- a/src/test/java/org/apache/commons/math3/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n      *  Verifies that increment() and incrementAll work properly.\n      */\n     @Test\n-    public void testIncrementation() throws Exception {\n+    public void testIncrementation() {\n \n         StorelessUnivariateStatistic statistic =\n             (StorelessUnivariateStatistic) getUnivariateStatistic();\n     }\n     \n     @Test\n-    public void testSerialization() throws Exception {\n+    public void testSerialization() {\n \n         StorelessUnivariateStatistic statistic =\n             (StorelessUnivariateStatistic) getUnivariateStatistic();\n--- a/src/test/java/org/apache/commons/math3/stat/descriptive/SummaryStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/descriptive/SummaryStatisticsTest.java\n     }\n \n     @Test\n-    public void testN0andN1Conditions() throws Exception {\n+    public void testN0andN1Conditions() {\n         SummaryStatistics u = createSummaryStatistics();\n         Assert.assertTrue(\"Mean of n = 0 set should be NaN\",\n                 Double.isNaN( u.getMean() ) );\n     }\n \n     @Test\n-    public void testProductAndGeometricMean() throws Exception {\n+    public void testProductAndGeometricMean() {\n         SummaryStatistics u = createSummaryStatistics();\n         u.addValue( 1.0 );\n         u.addValue( 2.0 );\n     }\n \n     @Test\n-    public void testCopy() throws Exception {\n+    public void testCopy() {\n         SummaryStatistics u = createSummaryStatistics();\n         u.addValue(2d);\n         u.addValue(1d);\n     }\n \n     @Test\n-    public void testSetterInjection() throws Exception {\n+    public void testSetterInjection() {\n         SummaryStatistics u = createSummaryStatistics();\n         u.setMeanImpl(new Sum());\n         u.setSumLogImpl(new Sum());\n     }\n \n     @Test\n-    public void testSetterIllegalState() throws Exception {\n+    public void testSetterIllegalState() {\n         SummaryStatistics u = createSummaryStatistics();\n         u.addValue(1);\n         u.addValue(3);\n      * JIRA: MATH-691\n      */\n     @Test\n-    public void testOverrideVarianceWithMathClass() throws Exception {\n+    public void testOverrideVarianceWithMathClass() {\n         double[] scores = {1, 2, 3, 4};\n         SummaryStatistics stats = new SummaryStatistics();\n         stats.setVarianceImpl(new Variance(false)); //use \"population variance\"\n     }\n     \n     @Test\n-    public void testOverrideMeanWithMathClass() throws Exception {\n+    public void testOverrideMeanWithMathClass() {\n         double[] scores = {1, 2, 3, 4};\n         SummaryStatistics stats = new SummaryStatistics();\n         stats.setMeanImpl(new Mean()); \n     }\n     \n     @Test\n-    public void testOverrideGeoMeanWithMathClass() throws Exception {\n+    public void testOverrideGeoMeanWithMathClass() {\n         double[] scores = {1, 2, 3, 4};\n         SummaryStatistics stats = new SummaryStatistics();\n         stats.setGeoMeanImpl(new GeometricMean()); \n--- a/src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java\n     }\n \n     @Test\n-    public void testEvaluation() throws Exception {\n+    public void testEvaluation() {\n         Assert.assertEquals(\n             expectedValue(),\n             getUnivariateStatistic().evaluate(testArray),\n     }\n \n     @Test\n-    public void testCopy() throws Exception {\n+    public void testCopy() {\n         UnivariateStatistic original = getUnivariateStatistic();\n         UnivariateStatistic copy = original.copy();\n         Assert.assertEquals(\n      */\n \n     @Test\n-    public void testWeightedConsistency() throws Exception {\n+    public void testWeightedConsistency() {\n \n         // See if this statistic computes weighted statistics\n         // If not, skip this test\n--- a/src/test/java/org/apache/commons/math3/stat/inference/ChiSquareTestTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/inference/ChiSquareTestTest.java\n     protected ChiSquareTest testStatistic = new ChiSquareTest();\n \n     @Test\n-    public void testChiSquare() throws Exception {\n+    public void testChiSquare() {\n \n         // Target values computed using R version 1.8.1\n         // Some assembly required ;-)\n     }\n \n     @Test\n-    public void testChiSquareIndependence() throws Exception {\n+    public void testChiSquareIndependence() {\n \n         // Target values computed using R version 1.8.1\n \n     }\n \n     @Test\n-    public void testChiSquareLargeTestStatistic() throws Exception {\n+    public void testChiSquareLargeTestStatistic() {\n         double[] exp = new double[] {\n             3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0,\n             232921.0, 437665.75\n \n     /** Contingency table containing zeros - PR # 32531 */\n     @Test\n-    public void testChiSquareZeroCount() throws Exception {\n+    public void testChiSquareZeroCount() {\n         // Target values computed using R version 1.8.1\n         long[][] counts = { {40, 0, 4}, {91, 1, 2}, {60, 2, 0}};\n         Assert.assertEquals( \"chi-square test statistic\", 9.67444662263,\n     /** Target values verified using DATAPLOT version 2006.3 */\n     @Test\n     public void testChiSquareDataSetsComparisonEqualCounts()\n-        throws Exception {\n+        {\n         long[] observed1 = {10, 12, 12, 10};\n         long[] observed2 = {5, 15, 14, 10};\n         Assert.assertEquals(\"chi-square p value\", 0.541096,\n     /** Target values verified using DATAPLOT version 2006.3 */\n     @Test\n     public void testChiSquareDataSetsComparisonUnEqualCounts()\n-        throws Exception {\n+        {\n         long[] observed1 = {10, 12, 12, 10, 15};\n         long[] observed2 = {15, 10, 10, 15, 5};\n         Assert.assertEquals(\"chi-square p value\", 0.124115,\n \n     @Test\n     public void testChiSquareDataSetsComparisonBadCounts()\n-        throws Exception {\n+        {\n         long[] observed1 = {10, -1, 12, 10, 15};\n         long[] observed2 = {15, 10, 10, 15, 5};\n         try {\n--- a/src/test/java/org/apache/commons/math3/stat/inference/MannWhitneyUTestTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/inference/MannWhitneyUTestTest.java\n     protected MannWhitneyUTest testStatistic = new MannWhitneyUTest();\n \n     @Test\n-    public void testMannWhitneyUSimple() throws Exception {\n+    public void testMannWhitneyUSimple() {\n         /* Target values computed using R version 2.11.1\n          * x <- c(19, 22, 16, 29, 24)\n          * y <- c(20, 11, 17, 12)\n \n \n     @Test\n-    public void testMannWhitneyUInputValidation() throws Exception {\n+    public void testMannWhitneyUInputValidation() {\n         /* Samples must be present, i.e. length > 0\n          */\n         try {\n     }\n     \n     @Test\n-    public void testBigDataSet() throws Exception {\n+    public void testBigDataSet() {\n         double[] d1 = new double[1500];\n         double[] d2 = new double[1500];\n         for (int i = 0; i < 1500; i++) {\n--- a/src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java\n             {110.0, 115.0, 111.0, 117.0, 128.0, 117.0 };\n \n     @Test\n-    public void testAnovaFValue() throws Exception {\n+    public void testAnovaFValue() {\n         // Target comparison values computed using R version 2.6.0 (Linux version)\n         List<double[]> threeClasses = new ArrayList<double[]>();\n         threeClasses.add(classA);\n \n \n     @Test\n-    public void testAnovaPValue() throws Exception {\n+    public void testAnovaPValue() {\n         // Target comparison values computed using R version 2.6.0 (Linux version)\n         List<double[]> threeClasses = new ArrayList<double[]>();\n         threeClasses.add(classA);\n     }\n \n     @Test\n-    public void testAnovaTest() throws Exception {\n+    public void testAnovaTest() {\n         // Target comparison values computed using R version 2.3.1 (Linux version)\n         List<double[]> threeClasses = new ArrayList<double[]>();\n         threeClasses.add(classA);\n--- a/src/test/java/org/apache/commons/math3/stat/inference/TTestTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/inference/TTestTest.java\n     }\n \n     @Test\n-    public void testOneSampleT() throws Exception {\n+    public void testOneSampleT() {\n         double[] observed =\n             {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0,  88.0, 98.0, 94.0, 101.0, 92.0, 95.0 };\n         double mu = 100.0;\n     }\n \n     @Test\n-    public void testOneSampleTTest() throws Exception {\n+    public void testOneSampleTTest() {\n         double[] oneSidedP =\n             {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, 6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d };\n         SummaryStatistics oneSidedPStats = new SummaryStatistics();\n     }\n \n     @Test\n-    public void testTwoSampleTHeterscedastic() throws Exception {\n+    public void testTwoSampleTHeterscedastic() {\n         double[] sample1 = { 7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d };\n         double[] sample2 = { -1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d };\n         SummaryStatistics sampleStats1 = new SummaryStatistics();\n         }\n     }\n     @Test\n-    public void testTwoSampleTHomoscedastic() throws Exception {\n+    public void testTwoSampleTHomoscedastic() {\n         double[] sample1 ={2, 4, 6, 8, 10, 97};\n         double[] sample2 = {4, 6, 8, 10, 16};\n         SummaryStatistics sampleStats1 = new SummaryStatistics();\n     }\n \n     @Test\n-    public void testSmallSamples() throws Exception {\n+    public void testSmallSamples() {\n         double[] sample1 = {1d, 3d};\n         double[] sample2 = {4d, 5d};\n \n     }\n \n     @Test\n-    public void testPaired() throws Exception {\n+    public void testPaired() {\n         double[] sample1 = {1d, 3d, 5d, 7d};\n         double[] sample2 = {0d, 6d, 11d, 2d};\n         double[] sample3 = {5d, 7d, 8d, 10d};\n--- a/src/test/java/org/apache/commons/math3/stat/inference/TestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/inference/TestUtilsTest.java\n public class TestUtilsTest {\n \n     @Test\n-    public void testChiSquare() throws Exception {\n+    public void testChiSquare() {\n \n         // Target values computed using R version 1.8.1\n         // Some assembly required ;-)\n     }\n \n     @Test\n-    public void testChiSquareIndependence() throws Exception {\n+    public void testChiSquareIndependence() {\n \n         // Target values computed using R version 1.8.1\n \n     }\n \n     @Test\n-    public void testChiSquareLargeTestStatistic() throws Exception {\n+    public void testChiSquareLargeTestStatistic() {\n         double[] exp = new double[] {\n                 3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0,\n                 232921.0, 437665.75\n \n     /** Contingency table containing zeros - PR # 32531 */\n     @Test\n-    public void testChiSquareZeroCount() throws Exception {\n+    public void testChiSquareZeroCount() {\n         // Target values computed using R version 1.8.1\n         long[][] counts = { {40, 0, 4}, {91, 1, 2}, {60, 2, 0}};\n         Assert.assertEquals( \"chi-square test statistic\", 9.67444662263,\n     private SummaryStatistics emptyStats = new SummaryStatistics();\n \n     @Test\n-    public void testOneSampleT() throws Exception {\n+    public void testOneSampleT() {\n         double[] observed =\n             {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0,  88.0, 98.0, 94.0, 101.0, 92.0, 95.0 };\n         double mu = 100.0;\n     }\n \n     @Test\n-    public void testOneSampleTTest() throws Exception {\n+    public void testOneSampleTTest() {\n         double[] oneSidedP =\n             {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, 6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d };\n         SummaryStatistics oneSidedPStats = new SummaryStatistics();\n     }\n \n     @Test\n-    public void testTwoSampleTHeterscedastic() throws Exception {\n+    public void testTwoSampleTHeterscedastic() {\n         double[] sample1 = { 7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d };\n         double[] sample2 = { -1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d };\n         SummaryStatistics sampleStats1 = new SummaryStatistics();\n         }\n     }\n     @Test\n-    public void testTwoSampleTHomoscedastic() throws Exception {\n+    public void testTwoSampleTHomoscedastic() {\n         double[] sample1 ={2, 4, 6, 8, 10, 97};\n         double[] sample2 = {4, 6, 8, 10, 16};\n         SummaryStatistics sampleStats1 = new SummaryStatistics();\n     }\n \n     @Test\n-    public void testSmallSamples() throws Exception {\n+    public void testSmallSamples() {\n         double[] sample1 = {1d, 3d};\n         double[] sample2 = {4d, 5d};\n \n     }\n \n     @Test\n-    public void testPaired() throws Exception {\n+    public void testPaired() {\n         double[] sample1 = {1d, 3d, 5d, 7d};\n         double[] sample2 = {0d, 6d, 11d, 2d};\n         double[] sample3 = {5d, 7d, 8d, 10d};\n     private OneWayAnova oneWayAnova = new OneWayAnova();\n \n     @Test\n-    public void testOneWayAnovaUtils() throws Exception {\n+    public void testOneWayAnovaUtils() {\n         classes.add(classA);\n         classes.add(classB);\n         classes.add(classC);\n--- a/src/test/java/org/apache/commons/math3/stat/inference/WilcoxonSignedRankTestTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/inference/WilcoxonSignedRankTestTest.java\n     protected WilcoxonSignedRankTest testStatistic = new WilcoxonSignedRankTest();\n \n     @Test\n-    public void testWilcoxonSignedRankSimple() throws Exception {\n+    public void testWilcoxonSignedRankSimple() {\n         /* Target values computed using R version 2.11.1\n          * x <- c(1.83, 0.50, 1.62, 2.48, 1.68, 1.88, 1.55, 3.06, 1.30)\n          * y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)\n     }\n     \n     @Test\n-    public void testWilcoxonSignedRankInputValidation() throws Exception {\n+    public void testWilcoxonSignedRankInputValidation() {\n         /*\n          * Exact only for sample size <= 30\n          */\n--- a/src/test/java/org/apache/commons/math3/stat/regression/GLSMultipleLinearRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/regression/GLSMultipleLinearRegressionTest.java\n      * Verifies that setting X, Y and covariance separately has the same effect as newSample(X,Y,cov).\n      */\n     @Test\n-    public void testNewSample2() throws Exception {\n+    public void testNewSample2() {\n         double[] y = new double[] {1, 2, 3, 4}; \n         double[][] x = new double[][] {\n           {19, 22, 33},\n      * as OLS.\n      */\n     @Test\n-    public void testGLSOLSConsistency() throws Exception {      \n+    public void testGLSOLSConsistency() {      \n         RealMatrix identityCov = MatrixUtils.createRealIdentityMatrix(16);\n         GLSMultipleLinearRegression glsModel = new GLSMultipleLinearRegression();\n         OLSMultipleLinearRegression olsModel = new OLSMultipleLinearRegression();\n      * on average, perform better than OLS.\n      */\n     @Test\n-    public void testGLSEfficiency() throws Exception {\n+    public void testGLSEfficiency() {\n         RandomGenerator rg = new JDKRandomGenerator();\n         rg.setSeed(200);  // Seed has been selected to generate non-trivial covariance\n         \n--- a/src/test/java/org/apache/commons/math3/stat/regression/MillerUpdatingRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/regression/MillerUpdatingRegressionTest.java\n      * http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat\n      */\n     @Test\n-    public void testLongly() throws Exception {\n+    public void testLongly() {\n         // Y values are first, then independent vars\n         // Each row is one observation\n         double[] design = new double[]{\n--- a/src/test/java/org/apache/commons/math3/stat/regression/MultipleLinearRegressionAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/regression/MultipleLinearRegressionAbstractTest.java\n      * in design matrix.  Confirms the fix for MATH-411.\n      */\n     @Test\n-    public void testNewSample() throws Exception {\n+    public void testNewSample() {\n         double[] design = new double[] {\n           1, 19, 22, 33,\n           2, 20, 30, 40,\n     }\n     \n     @Test(expected=IllegalArgumentException.class)\n-    public void testNewSampleNullData() throws Exception {\n+    public void testNewSampleNullData() {\n         double[] data = null;\n         createRegression().newSampleData(data, 2, 3); \n     }\n     \n     @Test(expected=IllegalArgumentException.class)\n-    public void testNewSampleInvalidData() throws Exception {\n+    public void testNewSampleInvalidData() {\n         double[] data = new double[] {1, 2, 3, 4};\n         createRegression().newSampleData(data, 2, 3);\n     }\n     \n     @Test(expected=IllegalArgumentException.class)\n-    public void testNewSampleInsufficientData() throws Exception {\n+    public void testNewSampleInsufficientData() {\n         double[] data = new double[] {1, 2, 3, 4};\n         createRegression().newSampleData(data, 1, 3);\n     }\n--- a/src/test/java/org/apache/commons/math3/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/regression/OLSMultipleLinearRegressionTest.java\n     }\n \n     @Test\n-    public void testPerfectFit() throws Exception {\n+    public void testPerfectFit() {\n         double[] betaHat = regression.estimateRegressionParameters();\n         TestUtils.assertEquals(betaHat,\n                                new double[]{ 11.0, 1.0 / 2.0, 2.0 / 3.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0 },\n      * http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat\n      */\n     @Test\n-    public void testLongly() throws Exception {\n+    public void testLongly() {\n         // Y values are first, then independent vars\n         // Each row is one observation\n         double[] design = new double[] {\n      * Data Source: R datasets package\n      */\n     @Test\n-    public void testSwissFertility() throws Exception {\n+    public void testSwissFertility() {\n         double[] design = new double[] {\n             80.2,17.0,15,12,9.96,\n             83.1,45.1,6,9,84.84,\n      * @throws Exception\n      */\n     @Test\n-    public void testHat() throws Exception {\n+    public void testHat() {\n \n         /*\n          * This example is from \"The Hat Matrix in Regression and ANOVA\",\n      * Verifies that calculateYVariance and calculateResidualVariance return consistent\n      * values with direct variance computation from Y, residuals, respectively.\n      */\n-    protected void checkVarianceConsistency(OLSMultipleLinearRegression model) throws Exception {\n+    protected void checkVarianceConsistency(OLSMultipleLinearRegression model) {\n         // Check Y variance consistency\n         TestUtils.assertEquals(StatUtils.variance(model.getY().toArray()), model.calculateYVariance(), 0);\n         \n      * Verifies that setting X and Y separately has the same effect as newSample(X,Y).\n      */\n     @Test\n-    public void testNewSample2() throws Exception {\n+    public void testNewSample2() {\n         double[] y = new double[] {1, 2, 3, 4}; \n         double[][] x = new double[][] {\n           {19, 22, 33},\n      * http://www.itl.nist.gov/div898/strd/lls/data/Wampler1.shtml\n      */\n     @Test\n-    public void testWampler1() throws Exception {\n+    public void testWampler1() {\n         double[] data = new double[]{\n             1, 0,\n             6, 1,\n      * http://www.itl.nist.gov/div898/strd/lls/data/Wampler2.shtml\n      */\n     @Test\n-    public void testWampler2() throws Exception {\n+    public void testWampler2() {\n         double[] data = new double[]{\n             1.00000, 0,\n             1.11111, 1,\n      * http://www.itl.nist.gov/div898/strd/lls/data/Wampler3.shtml\n      */\n     @Test\n-    public void testWampler3() throws Exception {\n+    public void testWampler3() {\n         double[] data = new double[]{\n             760, 0,\n             -2042, 1,\n      * http://www.itl.nist.gov/div898/strd/lls/data/Wampler4.shtml\n      */\n     @Test\n-    public void testWampler4() throws Exception {\n+    public void testWampler4() {\n         double[] data = new double[]{\n             75901, 0,\n             -204794, 1,\n--- a/src/test/java/org/apache/commons/math3/stat/regression/SimpleRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/regression/SimpleRegressionTest.java\n     }\n \n     @Test\n-    public void testInference() throws Exception {\n+    public void testInference() {\n         //----------  verified against R, version 1.8.1 -----\n         // infData\n         SimpleRegression regression = new SimpleRegression();\n     }\n \n     @Test\n-    public void testPerfect() throws Exception {\n+    public void testPerfect() {\n         SimpleRegression regression = new SimpleRegression();\n         int n = 100;\n         for (int i = 0; i < n; i++) {\n     }\n \n     @Test\n-    public void testPerfectNegative() throws Exception {\n+    public void testPerfectNegative() {\n         SimpleRegression regression = new SimpleRegression();\n         int n = 100;\n         for (int i = 0; i < n; i++) {\n     }\n \n     @Test\n-    public void testRandom() throws Exception {\n+    public void testRandom() {\n         SimpleRegression regression = new SimpleRegression();\n         Random random = new Random(1);\n         int n = 100;\n \n     // Test remove X,Y (single observation)\n     @Test\n-    public void testRemoveXY() throws Exception {\n+    public void testRemoveXY() {\n         // Create regression with inference data then remove to test\n         SimpleRegression regression = new SimpleRegression();\n         regression.addData(infData);\n \n     // Test remove single observation in array\n     @Test\n-    public void testRemoveSingle() throws Exception {\n+    public void testRemoveSingle() {\n         // Create regression with inference data then remove to test\n         SimpleRegression regression = new SimpleRegression();\n         regression.addData(infData);\n \n     // Test remove multiple observations\n     @Test\n-    public void testRemoveMultiple() throws Exception {\n+    public void testRemoveMultiple() {\n         // Create regression with inference data then remove to test\n         SimpleRegression regression = new SimpleRegression();\n         regression.addData(infData);", "timestamp": 1342833004, "metainfo": ""}