{"sha": "e2774b9140b16b1798fa6b2059786a40393fbbc6", "log": "added removeData methods to the SimpleRegression class. This allows to support regression calculations across a sliding window of (time-based) observations without having to recalculate for the entire window every time. JIRA: MATH-219  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n         }\n     }\n \n+    \n+    /**\n+     * Removes the observation (x,y) from the regression data set.\n+     * <p>\n+     * Mirrors the addData method.  This method permits the use of \n+     * SimpleRegression instances in streaming mode where the regression \n+     * is applied to a sliding \"window\" of observations, however the caller is \n+     * responsible for maintaining the set of observations in the window.</p>\n+     * \n+     * The method has no effect if there are no points of data (i.e. n=0)\n+     *\n+     * @param x independent variable value\n+     * @param y dependent variable value\n+     */\n+    public void removeData(double x, double y) {\n+        if (n > 0) {\n+            double dx = x - xbar;\n+            double dy = y - ybar;\n+            sumXX -= dx * dx * (double) n / (double) (n - 1.0);\n+            sumYY -= dy * dy * (double) n / (double) (n - 1.0);\n+            sumXY -= dx * dy * (double) n / (double) (n - 1.0);\n+            xbar -= dx / (double) (n - 1.0);\n+            ybar -= dy / (double) (n - 1.0);\n+            sumX -= x;\n+            sumY -= y;\n+            n--;\n+            \n+            if (n > 2) {\n+                distribution.setDegreesOfFreedom(n - 2);\n+            } \n+        }\n+    }\n+\n     /**\n      * Adds the observations represented by the elements in \n      * <code>data</code>.\n     public void addData(double[][] data) {\n         for (int i = 0; i < data.length; i++) {\n             addData(data[i][0], data[i][1]);\n+        }\n+    }\n+\n+\n+    /**\n+     * Removes observations represented by the elements in <code>data</code>.\n+      * <p> \n+     * If the array is larger than the current n, only the first n elements are \n+     * processed.  This method permits the use of SimpleRegression instances in \n+     * streaming mode where the regression is applied to a sliding \"window\" of \n+     * observations, however the caller is responsible for maintaining the set \n+     * of observations in the window.</p>\n+     * <p> \n+     * To remove all data, use <code>clear()</code>.</p>\n+     * \n+     * @param data array of observations to be removed\n+     */\n+    public void removeData(double[][] data) {\n+        for (int i = 0; i < data.length && n > 0; i++) {\n+            removeData(data[i][0], data[i][1]);\n         }\n     }\n \n--- a/src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n             {35.5, 8.8 }, {18.6, 4.9 }, {15.3, 4.5 }, {7.9, 2.5 }, {0.0, 1.1 }\n     };\n     \n+    /*\n+     * Points to remove in the remove tests\n+     */\n+    private double[][] removeSingle = {infData[1]};\n+    private double[][] removeMultiple = { infData[1], infData[2] };\n+    private double removeX = infData[0][0];\n+    private double removeY = infData[0][1];\n+    \n+            \n     /*\n      * Data with bad linear fit\n      */\n         }\n         assertTrue(reg.getSumSquaredErrors() >= 0.0);\n     } \n+    \n+    // Test remove X,Y (single observation)\n+    public void testRemoveXY() throws Exception {\n+        // Create regression with inference data then remove to test\n+        SimpleRegression regression = new SimpleRegression();\n+        regression.addData(infData);\n+        regression.removeData(removeX, removeY);\n+        regression.addData(removeX, removeY);\n+        // Use the inference assertions to make sure that everything worked\n+        assertEquals(\"slope std err\", 0.011448491,\n+                regression.getSlopeStdErr(), 1E-10);\n+        assertEquals(\"std err intercept\", 0.286036932,\n+                regression.getInterceptStdErr(),1E-8);\n+        assertEquals(\"significance\", 4.596e-07,\n+                regression.getSignificance(),1E-8);    \n+        assertEquals(\"slope conf interval half-width\", 0.0270713794287, \n+                regression.getSlopeConfidenceInterval(),1E-8);\n+     }\n+    \n+    \n+    // Test remove single observation in array\n+    public void testRemoveSingle() throws Exception {\n+        // Create regression with inference data then remove to test\n+        SimpleRegression regression = new SimpleRegression();\n+        regression.addData(infData);\n+        regression.removeData(removeSingle);\n+        regression.addData(removeSingle);\n+        // Use the inference assertions to make sure that everything worked\n+        assertEquals(\"slope std err\", 0.011448491,\n+                regression.getSlopeStdErr(), 1E-10);\n+        assertEquals(\"std err intercept\", 0.286036932,\n+                regression.getInterceptStdErr(),1E-8);\n+        assertEquals(\"significance\", 4.596e-07,\n+                regression.getSignificance(),1E-8);    \n+        assertEquals(\"slope conf interval half-width\", 0.0270713794287, \n+                regression.getSlopeConfidenceInterval(),1E-8);\n+     }\n+    \n+    // Test remove multiple observations\n+    public void testRemoveMultiple() throws Exception {\n+        // Create regression with inference data then remove to test\n+        SimpleRegression regression = new SimpleRegression();\n+        regression.addData(infData);\n+        regression.removeData(removeMultiple);\n+        regression.addData(removeMultiple);\n+        // Use the inference assertions to make sure that everything worked\n+        assertEquals(\"slope std err\", 0.011448491,\n+                regression.getSlopeStdErr(), 1E-10);\n+        assertEquals(\"std err intercept\", 0.286036932,\n+                regression.getInterceptStdErr(),1E-8);\n+        assertEquals(\"significance\", 4.596e-07,\n+                regression.getSignificance(),1E-8);    \n+        assertEquals(\"slope conf interval half-width\", 0.0270713794287, \n+                regression.getSlopeConfidenceInterval(),1E-8);\n+     }\n+    \n+    // Remove observation when empty\n+    public void testRemoveObsFromEmpty() {\n+        SimpleRegression regression = new SimpleRegression();\n+        regression.removeData(removeX, removeY);\n+        assertEquals(regression.getN(), 0);\n+    }\n+    \n+    // Remove single observation to empty\n+    public void testRemoveObsFromSingle() {\n+        SimpleRegression regression = new SimpleRegression();\n+        regression.addData(removeX, removeY);\n+        regression.removeData(removeX, removeY);\n+        assertEquals(regression.getN(), 0);\n+    }\n+    \n+    // Remove multiple observations to empty\n+    public void testRemoveMultipleToEmpty() {\n+        SimpleRegression regression = new SimpleRegression();\n+        regression.addData(removeMultiple);\n+        regression.removeData(removeMultiple);\n+        assertEquals(regression.getN(), 0);\n+    }\n+    \n+    // Remove multiple observations past empty (i.e. size of array > n)\n+    public void testRemoveMultiplePastEmpty() {\n+        SimpleRegression regression = new SimpleRegression();\n+        regression.addData(removeX, removeY);\n+        regression.removeData(removeMultiple);\n+        assertEquals(regression.getN(), 0);\n+    }\n }", "timestamp": 1219144690, "metainfo": ""}