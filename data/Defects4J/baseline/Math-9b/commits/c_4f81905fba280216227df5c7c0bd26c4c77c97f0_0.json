{"sha": "4f81905fba280216227df5c7c0bd26c4c77c97f0", "log": "Splitted the single \"testPerformance\" method into several ones (one test case per mathematical function) for easier comparison. Added a third benchmark (that calls \"Math\" methods).   ", "commit": "\n--- a/src/test/java/org/apache/commons/math/util/FastMathTestPerformance.java\n+++ b/src/test/java/org/apache/commons/math/util/FastMathTestPerformance.java\n package org.apache.commons.math.util;\n \n import org.junit.Test;\n+import org.junit.Ignore;\n \n /**\n  * Performance tests for FastMath.\n  * Invoke by running {@code mvn test -Dtest=FastMathTestPerformance}\n  */\n public class FastMathTestPerformance {\n-    @Test\n+    private static final int RUNS = 10000000;\n+    private static final double SCALE = 1000d / RUNS;\n+\n+    @Ignore\n     public void testPerformance() {\n         final int numberOfRuns = 10000000;\n         for (int j = 0; j < 10; j++) {\n \n         }\n     }\n-    \n-}\n+\n+    @Test\n+    public void testLog() {\n+        System.out.print(\"log \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.log(Math.PI + i/* 1.0 + i/1e9 */);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.log(Math.PI + i/* 1.0 + i/1e9 */);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.log(Math.PI + i/* 1.0 + i/1e9 */);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+\n+    @Test\n+    public void testPow() {\n+        System.out.print(\"pow \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.pow(Math.PI + i / 1e6, i / 1e6);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.pow(Math.PI + i / 1e6, i / 1e6);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.pow(Math.PI + i / 1e6, i / 1e6);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+\n+    @Test\n+    public void testExp() {\n+        System.out.print(\"exp \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.exp(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.exp(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.exp(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+\n+    @Test\n+    public void testSin() {\n+        System.out.print(\"sin \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.sin(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.sin(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.sin(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+\n+    @Test\n+    public void testAsin() {\n+        System.out.print(\"asin \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.asin(i / 10000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.asin(i / 10000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.asin(i / 10000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+\n+    @Test\n+    public void testCos() {\n+        System.out.print(\"cos \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.cos(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.cos(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.cos(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+            \n+    @Test\n+    public void testAcos() {\n+        System.out.print(\"acos \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.acos(i / 10000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.acos(i / 10000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.acos(i / 10000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+\n+    @Test\n+    public void testTan() {\n+        System.out.print(\"tan \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.tan(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.tan(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.tan(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+\n+    @Test\n+    public void testAtan() {\n+        System.out.print(\"atan \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.atan(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.atan(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.atan(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+     \n+    @Test\n+    public void testCbrt() {\n+        System.out.print(\"cbrt \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.cbrt(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.cbrt(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.cbrt(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+\n+    @Test\n+    public void testCosh() {\n+        System.out.print(\"cosh \");        \n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.cosh(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.cosh(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.cosh(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+\n+    @Test\n+    public void testSinh() {\n+        System.out.print(\"sinh \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.sinh(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.sinh(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.sinh(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+\n+    @Test\n+    public void testTanh() {\n+        System.out.print(\"tanh \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.tanh(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.tanh(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.tanh(i / 1000000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+     \n+    @Test\n+    public void testExpm1() {\n+        System.out.print(\"expm1 \");\n+        double x = 0;\n+        long time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += StrictMath.expm1(-i / 100000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += FastMath.expm1(-i / 100000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.print(time * SCALE + \" \");\n+\n+        x = 0;\n+        time = System.currentTimeMillis();\n+        for (int i = 0; i < RUNS; i++)\n+            x += Math.expm1(-i / 100000.0);\n+        time = System.currentTimeMillis() - time;\n+        System.out.println(time * SCALE);\n+    }\n+}", "timestamp": 1295873998, "metainfo": ""}