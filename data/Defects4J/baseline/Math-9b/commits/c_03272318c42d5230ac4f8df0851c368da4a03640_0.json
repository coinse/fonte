{"sha": "03272318c42d5230ac4f8df0851c368da4a03640", "log": "Serializable changes for RealVector  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/java/org/apache/commons/math/linear/OpenMapRealVector.java\n  */\n package org.apache.commons.math.linear;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.util.OpenIntToDoubleHashMap;\n import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator;\n  * @version $Revision: 728186 $ $Date$\n  * @since 2.0\n */\n-public class OpenMapRealVector implements SparseRealVector {\n+public class OpenMapRealVector implements SparseRealVector, Serializable {\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 8772222695580707260L;\n--- a/src/java/org/apache/commons/math/linear/RealVector.java\n+++ b/src/java/org/apache/commons/math/linear/RealVector.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.linear;\n-\n-import java.io.Serializable;\n \n /**\n  * Interface defining a real-valued vector with basic algebraic operations.\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface RealVector extends Serializable {\n+public interface RealVector {\n \n     /**\n      * Returns a (deep) copy of this.\n--- a/src/test/org/apache/commons/math/linear/RealVectorImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealVectorImplTest.java\n  */\n package org.apache.commons.math.linear;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import junit.framework.Test;\n import junit.framework.TestCase;\n \n     }\n \n+    public void testSerial()  {\n+        try {\n+            File test = File.createTempFile(\"RVI\",\".ser\");\n+            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n+            RealVectorImpl v = new RealVectorImpl(new double[] { 0, 1, 2 });\n+            out.writeObject(v);\n+            out.close();\n+            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n+            RealVectorImpl nv = (RealVectorImpl)in.readObject();\n+            in.close();\n+            test.delete();\n+            assertEquals(v,nv);\n+            \n+        } catch (IOException e) {\n+            fail(\"IOException: \"+e);\n+        } catch (ClassNotFoundException e) {\n+            fail(\"Can't happen: \"+e);\n+        }\n+    }\n+    \n+    \n     /** verifies that two vectors are close (sup norm) */\n     protected void assertClose(String msg, double[] m, double[] n,\n             double tolerance) {\n--- a/src/test/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/org/apache/commons/math/linear/SparseRealVectorTest.java\n  */\n package org.apache.commons.math.linear;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import junit.framework.Test;\n import junit.framework.TestCase;\n \n     }\n \n+    public void testSerial()  {\n+        try {\n+            File test = File.createTempFile(\"OMV\",\".ser\");\n+            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n+            OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });\n+            out.writeObject(v);\n+            out.close();\n+            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n+            OpenMapRealVector nv = (OpenMapRealVector)in.readObject();\n+            in.close();\n+            test.delete();\n+            assertEquals(v,nv);\n+            \n+        } catch (IOException e) {\n+            fail(\"IOException: \"+e);\n+        } catch (ClassNotFoundException e) {\n+            fail(\"Can't happen: \"+e);\n+        }\n+    }\n+    \n     /** verifies that two vectors are close (sup norm) */\n     protected void assertClose(String msg, double[] m, double[] n,\n             double tolerance) {", "timestamp": 1243119446, "metainfo": ""}