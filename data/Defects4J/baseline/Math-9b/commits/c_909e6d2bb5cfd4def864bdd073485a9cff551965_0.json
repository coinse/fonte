{"sha": "909e6d2bb5cfd4def864bdd073485a9cff551965", "log": "Javadoc: indicated the assumed layout of the Jacobian matrix.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n  * Base class for implementing least squares optimizers.\n  * It handles the boilerplate methods associated to thresholds settings,\n  * jacobian and error estimation.\n+ * <br/>\n+ * This class uses the {@link DifferentiableMultivariateVectorialFunction#jacobian()}\n+ * of the function argument in method\n+ * {@link #optimize(int,DifferentiableMultivariateVectorialFunction,double[],double[],double[])\n+ * optimize} and assumes that, in the matrix returned by the\n+ * {@link MultivariateMatrixFunction#value(double[]) value} method, the rows\n+ * iterate on the model functions while the columns iterate on the parameters; thus,\n+ * the numbers of rows is equal to the length of the {@code target} array while the\n+ * number of columns is equal to the length of the {@code startPoint} array.\n  *\n  * @version $Id$\n  * @since 1.2\n- *\n  */\n public abstract class AbstractLeastSquaresOptimizer\n     extends BaseAbstractVectorialOptimizer<DifferentiableMultivariateVectorialFunction>", "timestamp": 1314876949, "metainfo": ""}