{"sha": "70f29147ed9f8fe3b3d37c742ef126f046325d92", "log": "Created enum \"OrderDirection\" in \"MathUtils\" (instead of the existing \"Direction\" enum enclosed in an \"Order\" class). Changed affected files.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.util.LocalizedFormats;\n import org.apache.commons.math.util.MathUtils;\n-import org.apache.commons.math.util.MathUtils.Order;\n+import org.apache.commons.math.util.MathUtils.OrderDirection;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n \n             throw new DimensionMismatchException(xval.length, zval.length);\n         }\n \n-        MathUtils.checkOrder(xval, Order.Direction.INCREASING, true);\n-        MathUtils.checkOrder(yval, Order.Direction.INCREASING, true);\n+        MathUtils.checkOrder(xval, OrderDirection.INCREASING, true);\n+        MathUtils.checkOrder(yval, OrderDirection.INCREASING, true);\n \n         final int xLen = xval.length;\n         final int yLen = yval.length;\n--- a/src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java\n     /**\n      * Direction (positive for increasing, negative for decreasing).\n      */\n-    private final MathUtils.Order.Direction direction;\n+    private final MathUtils.OrderDirection direction;\n     /**\n      * Whether the sequence must be strictly increasing or decreasing.\n      */\n     public NonMonotonousSequenceException(Number wrong,\n                                           Number previous,\n                                           int index) {\n-        this(wrong, previous, index, MathUtils.Order.Direction.INCREASING, true);\n+        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);\n     }\n \n     /**\n     public NonMonotonousSequenceException(Number wrong,\n                                           Number previous,\n                                           int index,\n-                                          MathUtils.Order.Direction direction,\n+                                          MathUtils.OrderDirection direction,\n                                           boolean strict) {\n-        super(direction == MathUtils.Order.Direction.INCREASING ?\n+        super(direction == MathUtils.OrderDirection.INCREASING ?\n               (strict ?\n                LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE :\n                LocalizedFormats.NOT_INCREASING_SEQUENCE) :\n     /**\n      * @return the order direction.\n      **/\n-    public MathUtils.Order.Direction getDirection() {\n+    public MathUtils.OrderDirection getDirection() {\n         return direction;\n     }\n     /**\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n         return max;\n     }\n \n-    public static class Order {\n-\n-        /** Enumerate type for increasing/decreasing directions. */\n-        public static enum Direction {\n-\n-            /** Constant for increasing direction. */\n-            INCREASING,\n-\n-            /** Constant for decreasing direction. */\n-            DECREASING\n-\n-        };\n-\n+    /**\n+     * Specification of ordering direction.\n+     */\n+    public static enum OrderDirection {\n+        /** Constant for increasing direction. */\n+        INCREASING,\n+        /** Constant for decreasing direction. */\n+        DECREASING\n     }\n \n     /**\n      * Checks that the given array is sorted.\n      *\n      * @param val Values.\n-     * @param dir Order direction.\n+     * @param dir Ordering direction.\n      * @param strict Whether the order should be strict.\n      * @throws NonMonotonousSequenceException if the array is not sorted.\n      */\n-    public static void checkOrder(double[] val, Order.Direction dir, boolean strict) {\n+    public static void checkOrder(double[] val, OrderDirection dir, boolean strict) {\n         double previous = val[0];\n         boolean ok = true;\n \n      * @throws NonMonotonousSequenceException if the array is not sorted.\n      */\n     public static void checkOrder(double[] val) {\n-        checkOrder(val, Order.Direction.INCREASING, true);\n+        checkOrder(val, OrderDirection.INCREASING, true);\n     }\n \n     /**\n      * @param dir Order direction (-1 for decreasing, 1 for increasing)\n      * @param strict Whether the order should be strict\n      * @throws NonMonotonousSequenceException if the array is not sorted.\n-     * @deprecated as of 2.2 (please use the new {@link #checkOrder(double[],Order.Direction,boolean)\n+     * @deprecated as of 2.2 (please use the new {@link #checkOrder(double[],OrderDirection,boolean)\n      * checkOrder} method). To be removed in 3.0.\n      */\n-    public static void checkOrder(double[] val, int dir, boolean strict) {\n+public static void checkOrder(double[] val, int dir, boolean strict) {\n         if (dir > 0) {\n-            checkOrder(val, Order.Direction.INCREASING, strict);\n+            checkOrder(val, OrderDirection.INCREASING, strict);\n         } else {\n-            checkOrder(val, Order.Direction.DECREASING, strict);\n+            checkOrder(val, OrderDirection.DECREASING, strict);\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java\n     @Test\n     public void testAccessors() {\n         NonMonotonousSequenceException e\n-            = new NonMonotonousSequenceException(0, -1, 1, MathUtils.Order.Direction.DECREASING, false);\n+            = new NonMonotonousSequenceException(0, -1, 1, MathUtils.OrderDirection.DECREASING, false);\n         Assert.assertEquals(0, e.getArgument());\n         Assert.assertEquals(-1, e.getPrevious());\n         Assert.assertEquals(1, e.getIndex());\n-        Assert.assertTrue(e.getDirection() == MathUtils.Order.Direction.DECREASING);\n+        Assert.assertTrue(e.getDirection() == MathUtils.OrderDirection.DECREASING);\n         Assert.assertFalse(e.getStrict());\n \n         e = new NonMonotonousSequenceException(-1, 0, 1);\n         Assert.assertEquals(-1, e.getArgument());\n         Assert.assertEquals(0, e.getPrevious());\n         Assert.assertEquals(1, e.getIndex());\n-        Assert.assertTrue(e.getDirection() == MathUtils.Order.Direction.INCREASING);\n+        Assert.assertTrue(e.getDirection() == MathUtils.OrderDirection.INCREASING);\n         Assert.assertTrue(e.getStrict());\n     }\n }\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n \n     public void testCheckOrder() {\n         MathUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 15},\n-                             MathUtils.Order.Direction.INCREASING, true);\n+                             MathUtils.OrderDirection.INCREASING, true);\n         MathUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 2},\n-                             MathUtils.Order.Direction.INCREASING, false);\n+                             MathUtils.OrderDirection.INCREASING, false);\n         MathUtils.checkOrder(new double[] {3, -5.5, -11, -27.5},\n-                             MathUtils.Order.Direction.DECREASING, true);\n+                             MathUtils.OrderDirection.DECREASING, true);\n         MathUtils.checkOrder(new double[] {3, 0, 0, -5.5, -11, -27.5},\n-                             MathUtils.Order.Direction.DECREASING, false);\n+                             MathUtils.OrderDirection.DECREASING, false);\n \n         try {\n             MathUtils.checkOrder(new double[] {-15, -5.5, -1, -1, 2, 15},\n-                                 MathUtils.Order.Direction.INCREASING, true);\n+                                 MathUtils.OrderDirection.INCREASING, true);\n             fail(\"an exception should have been thrown\");\n         } catch (NonMonotonousSequenceException e) {\n             // Expected\n         }\n         try {\n             MathUtils.checkOrder(new double[] {-15, -5.5, -1, -2, 2},\n-                                 MathUtils.Order.Direction.INCREASING, false);\n+                                 MathUtils.OrderDirection.INCREASING, false);\n             fail(\"an exception should have been thrown\");\n         } catch (NonMonotonousSequenceException e) {\n             // Expected\n         }\n         try {\n             MathUtils.checkOrder(new double[] {3, 3, -5.5, -11, -27.5},\n-                                 MathUtils.Order.Direction.DECREASING, true);\n+                                 MathUtils.OrderDirection.DECREASING, true);\n             fail(\"an exception should have been thrown\");\n         } catch (NonMonotonousSequenceException e) {\n             // Expected\n         }\n         try {\n             MathUtils.checkOrder(new double[] {3, -1, 0, -5.5, -11, -27.5},\n-                                 MathUtils.Order.Direction.DECREASING, false);\n+                                 MathUtils.OrderDirection.DECREASING, false);\n             fail(\"an exception should have been thrown\");\n         } catch (NonMonotonousSequenceException e) {\n             // Expected", "timestamp": 1280705886, "metainfo": ""}