{"sha": "75e6ddd2c01b037486157c878ce60eb20b64ef82", "log": "Removed inconsistent null checks (reported by FindBugs).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optim/BaseMultiStartMultivariateOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/BaseMultiStartMultivariateOptimizer.java\n \n import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n-import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.random.RandomVectorGenerator;\n \n /**\n      * the {@link #optimize(OptimizationData[]) optimize} will return the\n      * same solution as the given {@code optimizer} would return.\n      * @param generator Random vector generator to use for restarts.\n-     * @throws NullArgumentException if {@code optimizer} or {@code generator}\n-     * is {@code null}.\n      * @throws NotStrictlyPositiveException if {@code starts < 1}.\n      */\n     public BaseMultiStartMultivariateOptimizer(final BaseMultivariateOptimizer<PAIR> optimizer,\n                                                final RandomVectorGenerator generator) {\n         super(optimizer.getConvergenceChecker());\n \n-        if (optimizer == null ||\n-            generator == null) {\n-            throw new NullArgumentException();\n-        }\n         if (starts < 1) {\n             throw new NotStrictlyPositiveException(starts);\n         }\n--- a/src/main/java/org/apache/commons/math3/optim/univariate/MultiStartUnivariateOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/univariate/MultiStartUnivariateOptimizer.java\n import java.util.Comparator;\n import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n-import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.random.RandomGenerator;\n import org.apache.commons.math3.optim.MaxEval;\n      * the {@code optimize} methods will return the same solution as\n      * {@code optimizer} would.\n      * @param generator Random generator to use for restarts.\n-     * @throws NullArgumentException if {@code optimizer} or {@code generator}\n-     * is {@code null}.\n      * @throws NotStrictlyPositiveException if {@code starts < 1}.\n      */\n     public MultiStartUnivariateOptimizer(final UnivariateOptimizer optimizer,\n                                          final RandomGenerator generator) {\n         super(optimizer.getConvergenceChecker());\n \n-        if (optimizer == null ||\n-            generator == null) {\n-            throw new NullArgumentException();\n-        }\n         if (starts < 1) {\n             throw new NotStrictlyPositiveException(starts);\n         }", "timestamp": 1355405944, "metainfo": ""}