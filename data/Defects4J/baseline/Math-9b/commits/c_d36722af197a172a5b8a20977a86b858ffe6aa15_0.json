{"sha": "d36722af197a172a5b8a20977a86b858ffe6aa15", "log": "MATH-795: factored out test of getL1Norm, getL1Distance, getLInfNorm, getLInfDistance.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n         doTestGetDistance(true);\n     }\n \n+    @Test(expected = DimensionMismatchException.class)\n+    public void testGetDistanceDimensionMismatch() {\n+        create(new double[4]).getDistance(createAlien(new double[5]));\n+    }\n+\n     @Test\n     public void testGetNorm() {\n         final double x = getPreferredEntryValue();\n         Assert.assertEquals(\"\", expected, actual, 0d);\n     }\n \n+    private void doTestGetL1Distance(final boolean mixed) {\n+        final double x = getPreferredEntryValue();\n+        final double[] data1 = new double[] { x, x, 1d, x, 2d, x, x, 3d, x };\n+        final double[] data2 = new double[] { 4d, x, x, 5d, 6d, 7d, x, x, 8d };\n+        final RealVector v1 = create(data1);\n+        final RealVector v2;\n+        if (mixed) {\n+            v2 = createAlien(data2);\n+        } else {\n+            v2 = create(data2);\n+        }\n+        final double actual = v1.getL1Distance(v2);\n+        double expected = 0d;\n+        for (int i = 0; i < data1.length; i++) {\n+            final double delta = data2[i] - data1[i];\n+            expected += FastMath.abs(delta);\n+        }\n+        Assert.assertEquals(\"\", expected, actual, 0d);\n+    }\n+\n+    @Test\n+    public void testGetL1DistanceSameType() {\n+        doTestGetL1Distance(false);\n+    }\n+\n+    @Test\n+    public void testGetL1DistanceMixedTypes() {\n+        doTestGetL1Distance(true);\n+    }\n+\n+    @Test(expected = DimensionMismatchException.class)\n+    public void testGetL1DistanceDimensionMismatch() {\n+        create(new double[4]).getL1Distance(createAlien(new double[5]));\n+    }\n+\n+    @Test\n+    public void testGetL1Norm() {\n+        final double x = getPreferredEntryValue();\n+        final double[] data = new double[] { x, x, 1d, x, 2d, x, x, 3d, x };\n+        final RealVector v = create(data);\n+        final double actual = v.getL1Norm();\n+        double expected = 0d;\n+        for (int i = 0; i < data.length; i++) {\n+            expected += FastMath.abs(data[i]);\n+        }\n+        Assert.assertEquals(\"\", expected, actual, 0d);\n+\n+    }\n+\n+    private void doTestGetLInfDistance(final boolean mixed) {\n+        final double x = getPreferredEntryValue();\n+        final double[] data1 = new double[] { x, x, 1d, x, 2d, x, x, 3d, x };\n+        final double[] data2 = new double[] { 4d, x, x, 5d, 6d, 7d, x, x, 8d };\n+        final RealVector v1 = create(data1);\n+        final RealVector v2;\n+        if (mixed) {\n+            v2 = createAlien(data2);\n+        } else {\n+            v2 = create(data2);\n+        }\n+        final double actual = v1.getLInfDistance(v2);\n+        double expected = 0d;\n+        for (int i = 0; i < data1.length; i++) {\n+            final double delta = data2[i] - data1[i];\n+            expected = FastMath.max(expected, FastMath.abs(delta));\n+        }\n+        Assert.assertEquals(\"\", expected, actual, 0d);\n+    }\n+\n+    @Test\n+    public void testGetLInfDistanceSameType() {\n+        doTestGetLInfDistance(false);\n+    }\n+\n+    @Test\n+    public void testGetLInfDistanceMixedTypes() {\n+        doTestGetLInfDistance(true);\n+    }\n+\n+    @Test(expected = DimensionMismatchException.class)\n+    public void testGetLInfDistanceDimensionMismatch() {\n+        create(new double[4]).getLInfDistance(createAlien(new double[5]));\n+    }\n+\n+    @Test\n+    public void testGetLInfNorm() {\n+        final double x = getPreferredEntryValue();\n+        final double[] data = new double[] { x, x, 1d, x, 2d, x, x, 3d, x };\n+        final RealVector v = create(data);\n+        final double actual = v.getLInfNorm();\n+        double expected = 0d;\n+        for (int i = 0; i < data.length; i++) {\n+            expected = FastMath.max(expected, FastMath.abs(data[i]));\n+        }\n+        Assert.assertEquals(\"\", expected, actual, 0d);\n+\n+    }\n+\n     @Test\n     public void testDataInOut() {\n         final RealVector v1 = create(vec1);\n         final RealVector v_null = create(vec_null);\n \n         final RealVector v2_t = createAlien(vec2);\n-\n-        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n-        double d_getNorm = v5.getNorm();\n-        Assert.assertEquals(\"compare values  \", 8.4261497731763586307,\n-                            d_getNorm, normTolerance);\n-\n-        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n-        double d_getL1Norm = v5.getL1Norm();\n-        Assert.assertEquals(\"compare values  \", 17.0, d_getL1Norm,\n-                            normTolerance);\n-\n-        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n-        double d_getLInfNorm = v5.getLInfNorm();\n-        Assert.assertEquals(\"compare values  \", 6.0, d_getLInfNorm,\n-                            normTolerance);\n-\n-        // octave = ???\n-        double d_getL1Distance = v1.getL1Distance(v2);\n-        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance,\n-                            normTolerance);\n-\n-        double d_getL1Distance_2 = v1.getL1Distance(v2_t);\n-        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance_2,\n-                            normTolerance);\n-\n-        // octave = ???\n-        double d_getLInfDistance = v1.getLInfDistance(v2);\n-        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance,\n-                            normTolerance);\n-\n-        double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);\n-        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance_2,\n-                            normTolerance);\n \n         // octave dot(v1,v2)\n         double dot = v1.dotProduct(v2);\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n     }\n \n     @Test\n+    @Ignore(\"Abstract class RealVector does not implement getL1Norm()\")\n+    @Override\n+    public void testGetL1Norm() {\n+        // Do nothing\n+    }\n+\n+    @Test\n+    @Ignore(\"Abstract class RealVector does not implement getLInfNorm()\")\n+    @Override\n+    public void testGetLInfNorm() {\n+        // Do nothing\n+    }\n+\n+    @Test\n     @Ignore\n     @Override\n     public void testBasicFunctions() {", "timestamp": 1340603834, "metainfo": ""}