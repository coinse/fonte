{"sha": "d0ab2f03014772f30793197b3debf0b916f97be1", "log": "Missing javadoc, extracting literals (will be removed in subsequent refactoring). JIRA: MATH-607  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java\n  */\n public class RegressionResults implements Serializable {\n \n+    /** INDEX of Sum of Squared Errors */\n     private static final int SSE_IDX = 0;\n+    /** INDEX of Sum of Squares of Model */\n     private static final int SST_IDX = 1;\n+    /** INDEX of R-Squared of regression */\n     private static final int RSQ_IDX = 2;\n+    /** INDEX of Mean Squared Error */\n     private static final int MSE_IDX = 3;\n+    /** INDEX of Adjusted R Squared */\n     private static final int ADJRSQ_IDX = 4;\n+    /** UID */\n     private static final long serialVersionUID = 1l;\n+    /** regression slope parameters */\n     private final double[] parameters;\n+    /** variance covariance matrix of parameters */\n     private final double[][] varCovData;\n+    /** boolean flag for variance covariance matrix in symm compressed storage */\n     private final boolean isSymmetricVCD;\n+    /** rank of the solution */\n     private final int rank;\n+    /** number of observations on which results are based */\n     private final long nobs;\n+    /** boolean flag indicator of whether a constant was included*/\n     private final boolean containsConstant;\n+    /** array storing global results, SSE, MSE, RSQ, adjRSQ */\n     private final double[] globalFitInfo;\n+    /** error message */\n+    private final String indexOutOfBound = \"Index is outside of the 0 to number of variables - 1 range\";\n \n     /**\n      *  Set the default constructor to private access\n         this.globalFitInfo = null;\n     }\n \n+    /**\n+     * Constructor for Regression Results.\n+     *\n+     * @param parameters a double array with the regression slope estimates\n+     * @param varcov the variance covariance matrix, stored either in a square matrix\n+     * or as a compressed\n+     * @param isSymmetricCompressed a flag which denotes that the variance covariance\n+     * matrix is in symmetric compressed format\n+     * @param nobs the number of observations of the regression estimation\n+     * @param rank the number of independent variables in the regression\n+     * @param sumy the sum of the independent variable\n+     * @param sumysq the sum of the squared independent variable\n+     * @param sse sum of squared errors\n+     * @param containsConstant true model has constant,  false model does not have constant\n+     * @param copyData if true a deep copy of all input data is made, if false only references\n+     * are copied and the RegressionResults become mutable\n+     */\n     public RegressionResults(\n             final double[] parameters, final double[][] varcov,\n             final boolean isSymmetricCompressed,\n                 this.globalFitInfo[SST_IDX];\n \n         if (!containsConstant) {\n-            this.globalFitInfo[ADJRSQ_IDX] = 1.0 - \n+            this.globalFitInfo[ADJRSQ_IDX] = 1.0-\n                     (1.0 - this.globalFitInfo[RSQ_IDX]) *\n                     ( (double) nobs / ( (double) (nobs - rank)));\n         } else {\n             return Double.NaN;\n         }\n         if (index < 0 || index >= this.parameters.length) {\n-            throw new IndexOutOfBoundsException(\"Index is outside of the 0 to number of variables - 1 range\");\n+            throw new IndexOutOfBoundsException(indexOutOfBound);\n         }\n         return this.parameters[index];\n     }\n             return Double.NaN;\n         }\n         if (index < 0 || index >= this.parameters.length) {\n-            throw new IndexOutOfBoundsException(\"Index is outside of the 0 to number of variables - 1 range\");\n+            throw new IndexOutOfBoundsException(indexOutOfBound);\n         }\n         double var = this.getVcvElement(index, index);\n         if (!Double.isNaN(var) && var > Double.MIN_VALUE) {\n      * @param i - the ith regression parameter\n      * @param j - the jth regression parameter\n      * @return the covariance of the parameter estimates\n+     * @throws IndexOutOfBoundsException thrown when i,j >= number of parameters\n      */\n     public double getCovarianceOfParameters(int i, int j) throws IndexOutOfBoundsException {\n         if (parameters == null) {", "timestamp": 1311277630, "metainfo": ""}