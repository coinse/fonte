{"sha": "2636e96ca275be309b1a23fb366c96a86bddcef1", "log": "MATH-542 Added custom \"writeObject\" and \"readObject\" so that serialization can proceed even if non-\"Serializable\" objects are stored (in messages arguments or context values).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\n import java.util.ArrayList;\n import java.util.Set;\n import java.util.Map;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectInputStream;\n import java.util.HashMap;\n import java.text.MessageFormat;\n import java.util.Locale;\n     /**\n      * Various informations that enrich the informative message.\n      */\n-    private final List<SerializablePair<Localizable, Object[]>> messages\n+    private List<SerializablePair<Localizable, Object[]>> messages\n         = new ArrayList<SerializablePair<Localizable, Object[]>>();\n     /**\n      * Arbitrary context information.\n      */\n-    private final Map<String, Object> context = new HashMap<String, Object>();\n+    private Map<String, Object> context = new HashMap<String, Object>();\n \n     /**\n      * Builds an exception.\n \n         return sb.toString();\n     }\n+\n+    /**\n+     * Serialize this object to the given stream.\n+     *\n+     * @param out Stream.\n+     * @throws IOException This should never happen.\n+     */\n+    private void writeObject(ObjectOutputStream out)\n+        throws IOException {\n+        serializeMessages(out);\n+        serializeContext(out);\n+    }\n+    /**\n+     * Deserialize this object from the given stream.\n+     *\n+     * @param in Stream.\n+     * @throws IOException This should never happen.\n+     * @throws ClassNotFoundException This should never happen.\n+     */\n+    private void readObject(ObjectInputStream in)\n+        throws IOException,\n+               ClassNotFoundException {\n+        deSerializeMessages(in);\n+        deSerializeContext(in);\n+    }\n+\n+    /**\n+     * Serialize {@link #messages}.\n+     *\n+     * @param out Stream.\n+     * @throws IOException This should never happen.\n+     */\n+    private void serializeMessages(ObjectOutputStream out)\n+        throws IOException {\n+        // Step 1.\n+        final int len = messages.size();\n+        out.writeInt(len);\n+        // Step 2.\n+        for (int i = 0; i < len; i++) {\n+            SerializablePair<Localizable, Object[]> pair = messages.get(i);\n+            // Step 3.\n+            out.writeObject(pair.getKey());\n+            final Object[] args = pair.getValue();\n+            final int aLen = args.length;\n+            // Step 4.\n+            out.writeInt(aLen);\n+            for (int j = 0; j < aLen; j++) {\n+                if (args[j] instanceof Serializable) {\n+                    // Step 5a.\n+                    out.writeObject(args[j]);\n+                } else {\n+                    // Step 5b.\n+                    out.writeObject(nonSerializableReplacement(args[j]));\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Deserialize {@link #messages}.\n+     *\n+     * @param in Stream.\n+     * @throws IOException This should never happen.\n+     * @throws ClassNotFoundException This should never happen.\n+     */\n+    private void deSerializeMessages(ObjectInputStream in)\n+        throws IOException,\n+               ClassNotFoundException {\n+        // Step 1.\n+        final int len = in.readInt();\n+        messages = new ArrayList<SerializablePair<Localizable, Object[]>>(len);\n+        // Step 2.\n+        for (int i = 0; i < len; i++) {\n+            // Step 3.\n+            final Localizable key = (Localizable) in.readObject();\n+            // Step 4.\n+            final int aLen = in.readInt();\n+            final Object[] args = new Object[aLen];\n+            for (int j = 0; j < aLen; j++) {\n+                // Step 5.\n+                args[j] = in.readObject();\n+            }\n+            messages.add(new SerializablePair<Localizable, Object[]>(key, args));\n+        }\n+    }\n+\n+    /**\n+     * Serialize {@link #context}.\n+     *\n+     * @param out Stream.\n+     * @throws IOException This should never happen.\n+     */\n+    private void serializeContext(ObjectOutputStream out)\n+        throws IOException {\n+        // Step 1.\n+        final int len = context.keySet().size();\n+        out.writeInt(len);\n+        for (String key : context.keySet()) {\n+            // Step 2.\n+            out.writeObject(key);\n+            final Object value = context.get(key);\n+            if (value instanceof Serializable) {\n+                // Step 3a.\n+                out.writeObject(value);\n+            } else {\n+                // Step 3b.\n+                out.writeObject(nonSerializableReplacement(value));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Deserialize {@link #context}.\n+     *\n+     * @param in Stream.\n+     * @throws IOException This should never happen.\n+     * @throws ClassNotFoundException This should never happen.\n+     */\n+    private void deSerializeContext(ObjectInputStream in)\n+        throws IOException,\n+               ClassNotFoundException {\n+        // Step 1.\n+        final int len = in.readInt();\n+        context = new HashMap<String, Object>();\n+        for (int i = 0; i < len; i++) {\n+            // Step 2.\n+            final String key = (String) in.readObject();\n+            // Step 3.\n+            final Object value = in.readObject();\n+            context.put(key, value);\n+        }\n+    }\n+\n+    /**\n+     * Replaces a non-serializable object with an error message string.\n+     *\n+     * @param obj Object that does not implement the {@code Serializable\n+     * interface\n+     * @return a string that mentions which class could not be serialized.\n+     */\n+    private String nonSerializableReplacement(Object obj) {\n+        return \"[Object could not be serialized: \" + obj.getClass().getName() + \"]\";\n+    }\n }\n--- a/src/test/java/org/apache/commons/math/exception/MathRuntimeExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/MathRuntimeExceptionTest.java\n \n import java.util.Locale;\n import java.util.Arrays;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ByteArrayInputStream;\n \n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n         // Check behaviour on missing key.\n         Assert.assertNull(mre.getContext(\"xyz\"));\n     }\n+\n+    @Test\n+    public void testSerialize()\n+        throws IOException,\n+               ClassNotFoundException {\n+        final MathRuntimeException mreOut = new MathRuntimeException();\n+        mreOut.addMessage(LocalizedFormats.COLUMN_INDEX, 0);\n+        mreOut.setContext(\"Key 1\", Integer.valueOf(0));\n+\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(bos);\n+        oos.writeObject(mreOut);\n+\n+        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(bis);\n+        MathRuntimeException mreIn = (MathRuntimeException) ois.readObject();\n+\n+        Assert.assertTrue(mreOut.getMessage().equals(mreIn.getMessage()));\n+        for (String key : mreIn.getContextKeys()) {\n+            Assert.assertTrue(mreOut.getContext(key).equals(mreIn.getContext(key)));\n+        }\n+    }\n+\n+    @Test\n+    public void testSerializeUnserializable() {\n+        final MathRuntimeException mreOut = new MathRuntimeException();\n+        mreOut.addMessage(LocalizedFormats.SIMPLE_MESSAGE, \"OK\");\n+        mreOut.addMessage(LocalizedFormats.SIMPLE_MESSAGE, new Unserializable(0));\n+        String key = \"Key 1\";\n+        mreOut.setContext(key, new Unserializable(1));\n+\n+        try {\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            ObjectOutputStream oos = new ObjectOutputStream(bos);\n+            oos.writeObject(mreOut);\n+\n+            ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\n+            ObjectInputStream ois = new ObjectInputStream(bis);\n+            MathRuntimeException mreIn = (MathRuntimeException) ois.readObject();\n+\n+            String nsObjStr = (String) mreIn.getContext(key);\n+            Assert.assertTrue(nsObjStr.matches(\".*could not be serialized.*\"));\n+        } catch (Exception e) {\n+            Assert.fail(e.toString());\n+        }\n+    }\n+\n+    /**\n+     * Class used by {@link #testSerializeUnserializable()}.\n+     */\n+    private static class Unserializable {\n+        private int k;\n+\n+        Unserializable(int k) {\n+            this.k = k;\n+        }\n+    }\n }", "timestamp": 1299765932, "metainfo": ""}