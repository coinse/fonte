{"sha": "af9431318d96ec72cc7d832331a5b936b73d5806", "log": "MATH-795: in RealVectorAbstractTest, factored out unit tests for double dotProduct(RealVector)  As first reported by Bill Barker, these tests fail with the current default implementation (in RealVector) as well as the sparse implementation (in OpenMapRealVector).   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n \n     }\n \n-    @Override\n     @Test\n     public void testDataInOut() {\n-        super.testDataInOut();\n \n         ArrayRealVector v1 = new ArrayRealVector(vec1);\n \n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n     }\n \n     @Test\n-    public void testDataInOut() {\n-        final RealVector v1 = create(vec1);\n-        final RealVector v2 = create(vec2);\n-        final RealVector v4 = create(vec4);\n-        final RealVector v2_t = createAlien(vec2);\n-\n-        final RealVector v_set1 = v1.copy();\n-        v_set1.setEntry(1, 11.0);\n-        Assert.assertEquals(\"testData is 11.0 \", 11.0, v_set1.getEntry(1), 0);\n-        try {\n-            v_set1.setEntry(3, 11.0);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n-\n-        final RealVector v_set2 = v4.copy();\n-        v_set2.setSubVector(3, v1);\n-        Assert.assertEquals(\"testData is 1.0 \", 1.0, v_set2.getEntry(3), 0);\n-        Assert.assertEquals(\"testData is 7.0 \", 7.0, v_set2.getEntry(6), 0);\n-        try {\n-            v_set2.setSubVector(7, v1);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n-\n-        final RealVector v_set4 = v4.copy();\n-        v_set4.setSubVector(3, v2_t);\n-        Assert.assertEquals(\"testData is 1.0 \", 4.0, v_set4.getEntry(3), 0);\n-        Assert.assertEquals(\"testData is 7.0 \", 7.0, v_set4.getEntry(6), 0);\n-        try {\n-            v_set4.setSubVector(7, v2_t);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n-\n-        final RealVector vout10 = v1.copy();\n-        final RealVector vout10_2 = v1.copy();\n-        Assert.assertEquals(vout10, vout10_2);\n-        vout10_2.setEntry(0, 1.1);\n-        Assert.assertNotSame(vout10, vout10_2);\n+    public void testCopy() {\n+        final RealVector v = create(values);\n+        final RealVector w = v.copy();\n+        Assert.assertNotSame(v, w);\n+        TestUtils.assertEquals(\"\", values, w, 0d);\n+    }\n+\n+    private void doTestDotProductRegularValues(final boolean mixed) {\n+        final double x = getPreferredEntryValue();\n+        final double[] data1 = {\n+            x, 1d, x, x, 2d, x, x, x, 3d, x, x, x, x\n+        };\n+        final double[] data2 = {\n+            5d, -6d, 7d, x, x, -8d, -9d, 10d, 11d, x, 12d, 13d, -15d\n+        };\n+        double expected = 0d;\n+        for (int i = 0; i < data1.length; i++){\n+            expected += data1[i] * data2[i];\n+        }\n+        final RealVector v1 = create(data1);\n+        final RealVector v2;\n+        if (mixed) {\n+            v2 = createAlien(data2);\n+        } else {\n+            v2 = create(data2);\n+        }\n+        final double actual = v1.dotProduct(v2);\n+        Assert.assertEquals(\"\", expected, actual, 0d);\n+    }\n+\n+    private void doTestDotProductSpecialValues(final boolean mixed) {\n+        for (int i = 0; i < values.length; i++) {\n+            final double[] data1 = {\n+                values[i]\n+            };\n+            final RealVector v1 = create(data1);\n+            for (int j = 0; j < values.length; j++) {\n+                final double[] data2 = {\n+                    values[j]\n+                };\n+                final RealVector v2;\n+                if (mixed) {\n+                    v2 = createAlien(data2);\n+                } else {\n+                    v2 = create(data2);\n+                }\n+                final double expected = data1[0] * data2[0];\n+                final double actual = v1.dotProduct(v2);\n+                Assert.assertEquals(data1[0] + \" * \" + data2[0], expected,\n+                    actual, 0d);\n+            }\n+        }\n+    }\n+\n+    private void doTestDotProductDimensionMismatch(final boolean mixed) {\n+        final double[] data1 = new double[10];\n+        final double[] data2 = new double[data1.length + 1];\n+        final RealVector v1 = create(data1);\n+        final RealVector v2;\n+        if (mixed) {\n+            v2 = createAlien(data2);\n+        } else {\n+            v2 = create(data2);\n+        }\n+        v1.dotProduct(v2);\n+    }\n+\n+    @Test\n+    public void testDotProductSameType() {\n+        doTestDotProductRegularValues(false);\n+        doTestDotProductSpecialValues(false);\n+    }\n+\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testDotProductDimensionMismatchSameType() {\n+        doTestDotProductDimensionMismatch(false);\n+    }\n+\n+    @Test\n+    public void testDotProductMixedTypes() {\n+        doTestDotProductRegularValues(true);\n+        doTestDotProductSpecialValues(true);\n+    }\n+\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testDotProductDimensionMismatchMixedTypes() {\n+        doTestDotProductDimensionMismatch(true);\n     }\n \n     @Test\n         final RealVector v_null = create(vec_null);\n \n         final RealVector v2_t = createAlien(vec2);\n-\n-        // octave dot(v1,v2)\n-        double dot = v1.dotProduct(v2);\n-        Assert.assertEquals(\"compare val \", 32d, dot, normTolerance);\n-\n-        // octave dot(v1,v2_t)\n-        double dot_2 = v1.dotProduct(v2_t);\n-        Assert.assertEquals(\"compare val \", 32d, dot_2, normTolerance);\n \n         RealVector v_projection = v1.projection(v2);\n         double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n     @Test\n     @Ignore\n     @Override\n-    public void testDataInOut() {\n-        /*\n-         *  TODO Some of the tests carried out in testDataInOut() do not pass,\n-         *  as the methods to be tested are not implemented in TestVectorImpl.\n-         *  For the time being, testDataInOut() is overriden, while ommitting\n-         *  the @Test annotation, which effectively skips the test.\n-         *\n-         *  In the future, testDataInOut() should be split in smaller units, and\n-         *  only those units which do not make sense should be skipped.\n-         */\n-    }\n-\n-    @Test\n-    @Ignore\n-    @Override\n     public void testPredicates() {\n         /*\n          *  TODO Some of the tests carried out in testPredicates() do not pass,", "timestamp": 1341294717, "metainfo": ""}