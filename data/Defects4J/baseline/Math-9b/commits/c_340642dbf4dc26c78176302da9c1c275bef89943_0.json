{"sha": "340642dbf4dc26c78176302da9c1c275bef89943", "log": "MATH-574 Allow outer product of vectors of different sizes.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java\n      * if the dimensions do not match.\n      */\n     public FieldMatrix<T> outerProduct(SparseFieldVector<T> v) {\n-        checkVectorDimensions(v.getDimension());\n-        SparseFieldMatrix<T> res = new SparseFieldMatrix<T>(field, virtualSize, virtualSize);\n+        final int n = v.getDimension();\n+        SparseFieldMatrix<T> res = new SparseFieldMatrix<T>(field, virtualSize, n);\n         OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n \n     /** {@inheritDoc} */\n     public FieldMatrix<T> outerProduct(T[] v) {\n-        checkVectorDimensions(v.length);\n-        FieldMatrix<T> res = new SparseFieldMatrix<T>(field, virtualSize, virtualSize);\n+        final int n = v.length;\n+        FieldMatrix<T> res = new SparseFieldMatrix<T>(field, virtualSize, n);\n         OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             int row = iter.key();\n             FieldElement<T>value = iter.value();\n-            for (int col = 0; col < virtualSize; col++) {\n+            for (int col = 0; col < n; col++) {\n                 res.setEntry(row, col, value.multiply(v[col]));\n             }\n         }\n--- a/src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java\n \n     }\n \n+    @Test\n+    public void testOuterProduct() {\n+        final SparseFieldVector<Fraction> u\n+            = new SparseFieldVector<Fraction>(FractionField.getInstance(),\n+                                              new Fraction[] {new Fraction(1),\n+                                                              new Fraction(2),\n+                                                              new Fraction(-3)});\n+        final SparseFieldVector<Fraction> v\n+            = new SparseFieldVector<Fraction>(FractionField.getInstance(),\n+                                              new Fraction[] {new Fraction(4),\n+                                                              new Fraction(-2)});\n+\n+        final FieldMatrix<Fraction> uv = u.outerProduct(v);\n+\n+        final double tol = Math.ulp(1d);\n+        Assert.assertEquals(new Fraction(4).doubleValue(), uv.getEntry(0, 0).doubleValue(), tol);\n+        Assert.assertEquals(new Fraction(-2).doubleValue(), uv.getEntry(0, 1).doubleValue(), tol);\n+        Assert.assertEquals(new Fraction(8).doubleValue(), uv.getEntry(1, 0).doubleValue(), tol);\n+        Assert.assertEquals(new Fraction(-4).doubleValue(), uv.getEntry(1, 1).doubleValue(), tol);\n+        Assert.assertEquals(new Fraction(-12).doubleValue(), uv.getEntry(2, 0).doubleValue(), tol);\n+        Assert.assertEquals(new Fraction(6).doubleValue(), uv.getEntry(2, 1).doubleValue(), tol);\n+    }\n \n     @Test\n     public void testMisc() {", "timestamp": 1305668325, "metainfo": ""}