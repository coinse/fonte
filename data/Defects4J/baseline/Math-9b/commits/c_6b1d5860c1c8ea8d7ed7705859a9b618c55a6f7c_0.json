{"sha": "6b1d5860c1c8ea8d7ed7705859a9b618c55a6f7c", "log": "Simplified unit tests following changes proposed in MATH-743 (should have been committed with r1243595).  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/transform/FastSineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math3/transform/FastSineTransformerTest.java\n @RunWith(value = Parameterized.class)\n public final class FastSineTransformerTest extends RealTransformerAbstractTest {\n \n-    private final boolean standard;\n+    private final DstNormalization normalization;\n \n     private final int[] invalidDataSize;\n \n \n     private final int[] validDataSize;\n \n-    public FastSineTransformerTest(final boolean standard) {\n-        this.standard = standard;\n+    public FastSineTransformerTest(final DstNormalization normalization) {\n+        this.normalization = normalization;\n         this.validDataSize = new int[] {\n             1, 2, 4, 8, 16, 32, 64, 128\n         };\n      */\n     @Parameters\n     public static Collection<Object[]> data() {\n-        final Object[][] data = new Boolean[][] {\n-            {\n-                Boolean.TRUE\n-            }, {\n-                Boolean.FALSE\n-            }\n-        };\n+        final DstNormalization[] normalization = DstNormalization.values();\n+        final Object[][] data = new DstNormalization[normalization.length][1];\n+        for (int i = 0; i < normalization.length; i++) {\n+            data[i][0] = normalization[i];\n+        }\n         return Arrays.asList(data);\n     }\n \n \n     @Override\n     RealTransformer createRealTransformer() {\n-        if (standard) {\n-            return new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n-        } else {\n-            return new FastSineTransformer(DstNormalization.ORTHOGONAL_DST_I);\n-        }\n+        return new FastSineTransformer(normalization);\n     }\n \n     @Override\n         }\n         final double s;\n         if (type == TransformType.FORWARD) {\n-            s = standard ? 1.0 : FastMath.sqrt(2.0 / (double) n);\n-        } else if (type == TransformType.INVERSE){\n-            s = standard ? 2.0 / n : FastMath.sqrt(2.0 / (double) n);\n+            if (normalization == DstNormalization.STANDARD_DST_I) {\n+                s = 1.0;\n+            } else if (normalization == DstNormalization.ORTHOGONAL_DST_I) {\n+                s = FastMath.sqrt(2.0 / (double) n);\n+            } else {\n+                throw new MathIllegalStateException();\n+            }\n+        } else if (type == TransformType.INVERSE) {\n+            if (normalization == DstNormalization.STANDARD_DST_I) {\n+                s = 2.0 / n;\n+            } else if (normalization == DstNormalization.ORTHOGONAL_DST_I) {\n+                s = FastMath.sqrt(2.0 / (double) n);\n+            } else {\n+                throw new MathIllegalStateException();\n+            }\n         } else {\n             /*\n              * Should never occur. This clause is a safeguard in case other\n      */\n     @Test\n     public void testAdHocData() {\n-        FastSineTransformer transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n+        FastSineTransformer transformer;\n+        transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n         double result[], tolerance = 1E-12;\n \n         double x[] = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 };\n     @Test\n     public void testSinFunction() {\n         UnivariateFunction f = new SinFunction();\n-        FastSineTransformer transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n+        FastSineTransformer transformer;\n+        transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n         double min, max, result[], tolerance = 1E-12; int N = 1 << 8;\n \n         min = 0.0; max = 2.0 * FastMath.PI;\n     @Test\n     public void testParameters() throws Exception {\n         UnivariateFunction f = new SinFunction();\n-        FastSineTransformer transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n+        FastSineTransformer transformer;\n+        transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n \n         try {\n             // bad interval", "timestamp": 1329239154, "metainfo": ""}