{"sha": "2b4c1f87a73448323d21cd459f967013a41870ca", "log": "MATH-854: fill the \"throws\" clause of OpenMapRealVector.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n+import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.OpenIntToDoubleHashMap;\n import org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator;\n-import org.apache.commons.math3.util.FastMath;\n \n /**\n  * This class implements the {@link RealVector} interface with a\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealVector add(RealVector v) {\n+    public RealVector add(RealVector v)\n+        throws DimensionMismatchException {\n         checkVectorDimensions(v.getDimension());\n         if (v instanceof OpenMapRealVector) {\n             return add((OpenMapRealVector) v);\n      *\n      * @param v Vector to add.\n      * @return the sum of {@code this} and {@code v}.\n-     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n-     * if the dimensions do not match.\n-     */\n-    public OpenMapRealVector add(OpenMapRealVector v) {\n+     * @throws DimensionMismatchException if the dimensions do not match.\n+     */\n+    public OpenMapRealVector add(OpenMapRealVector v)\n+        throws DimensionMismatchException {\n         checkVectorDimensions(v.getDimension());\n         boolean copyThis = entries.size() > v.entries.size();\n         OpenMapRealVector res = copyThis ? this.copy() : v.copy();\n      *\n      * @param v Vector.\n      * @return the dot product of this vector with {@code v}.\n+     * @throws DimensionMismatchException if {@code v} is not the same size as\n+     * {@code this} vector.\n      *\n      * @deprecated as of 3.1 (to be removed in 4.0). The computation is\n      * performed by the parent class. The method must be kept to maintain\n      * backwards compatibility.\n      */\n     @Deprecated\n-    public double dotProduct(OpenMapRealVector v) {\n+    public double dotProduct(OpenMapRealVector v)\n+        throws DimensionMismatchException {\n         return dotProduct((RealVector) v);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public OpenMapRealVector ebeDivide(RealVector v) {\n+    public OpenMapRealVector ebeDivide(RealVector v)\n+        throws DimensionMismatchException {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n         /*\n \n     /** {@inheritDoc} */\n     @Override\n-    public OpenMapRealVector ebeMultiply(RealVector v) {\n+    public OpenMapRealVector ebeMultiply(RealVector v)\n+        throws DimensionMismatchException {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n         Iterator iter = entries.iterator();\n \n     /** {@inheritDoc} */\n     @Override\n-    public OpenMapRealVector getSubVector(int index, int n) {\n+    public OpenMapRealVector getSubVector(int index, int n)\n+        throws NotPositiveException, OutOfRangeException {\n         checkIndex(index);\n         if (n < 0) {\n             throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);\n      *\n      * @param v Vector to compute distance to.\n      * @return the distance from {@code this} and {@code v}.\n-     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n-     * if the dimensions do not match.\n-     */\n-    public double getDistance(OpenMapRealVector v) {\n+     * @throws DimensionMismatchException if the dimensions do not match.\n+     */\n+    public double getDistance(OpenMapRealVector v)\n+        throws DimensionMismatchException {\n+        checkVectorDimensions(v.getDimension());\n         Iterator iter = entries.iterator();\n         double res = 0;\n         while (iter.hasNext()) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getDistance(RealVector v) {\n+    public double getDistance(RealVector v) throws DimensionMismatchException {\n         checkVectorDimensions(v.getDimension());\n         if (v instanceof OpenMapRealVector) {\n             return getDistance((OpenMapRealVector) v);\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getEntry(int index) {\n+    public double getEntry(int index) throws OutOfRangeException {\n         checkIndex(index);\n         return entries.get(index);\n     }\n      *\n      * @param v Vector to which distance is requested.\n      * @return distance between this vector and {@code v}.\n-     */\n-    public double getL1Distance(OpenMapRealVector v) {\n+     * @throws DimensionMismatchException if the dimensions do not match.\n+     */\n+    public double getL1Distance(OpenMapRealVector v)\n+        throws DimensionMismatchException {\n+        checkVectorDimensions(v.getDimension());\n         double max = 0;\n         Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getL1Distance(RealVector v) {\n+    public double getL1Distance(RealVector v)\n+        throws DimensionMismatchException {\n         checkVectorDimensions(v.getDimension());\n         if (v instanceof OpenMapRealVector) {\n             return getL1Distance((OpenMapRealVector) v);\n      *\n      * @param v Vector to compute distance from.\n      * @return the LInfDistance.\n-     */\n-    private double getLInfDistance(OpenMapRealVector v) {\n+     * @throws DimensionMismatchException if the dimensions do not match.\n+     */\n+    private double getLInfDistance(OpenMapRealVector v)\n+        throws DimensionMismatchException {\n+        checkVectorDimensions(v.getDimension());\n         double max = 0;\n         Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public double getLInfDistance(RealVector v) {\n+    public double getLInfDistance(RealVector v)\n+        throws DimensionMismatchException {\n         checkVectorDimensions(v.getDimension());\n         if (v instanceof OpenMapRealVector) {\n             return getLInfDistance((OpenMapRealVector) v);\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setEntry(int index, double value) {\n+    public void setEntry(int index, double value)\n+        throws OutOfRangeException {\n         checkIndex(index);\n         if (!isDefaultValue(value)) {\n             entries.put(index, value);\n \n     /** {@inheritDoc} */\n     @Override\n-    public void setSubVector(int index, RealVector v) {\n+    public void setSubVector(int index, RealVector v)\n+        throws OutOfRangeException {\n         checkIndex(index);\n         checkIndex(index + v.getDimension() - 1);\n         for (int i = 0; i < v.getDimension(); i++) {\n      *\n      * @param v Vector to subtract from {@code this}.\n      * @return the difference of {@code this} and {@code v}.\n-     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n-     * if the dimensions do not match.\n-     */\n-    public OpenMapRealVector subtract(OpenMapRealVector v) {\n+     * @throws DimensionMismatchException if the dimensions do not match.\n+     */\n+    public OpenMapRealVector subtract(OpenMapRealVector v)\n+        throws DimensionMismatchException {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = copy();\n         Iterator iter = v.getEntries().iterator();\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealVector subtract(RealVector v) {\n+    public RealVector subtract(RealVector v)\n+        throws DimensionMismatchException {\n         checkVectorDimensions(v.getDimension());\n         if (v instanceof OpenMapRealVector) {\n             return subtract((OpenMapRealVector) v);", "timestamp": 1346960555, "metainfo": ""}