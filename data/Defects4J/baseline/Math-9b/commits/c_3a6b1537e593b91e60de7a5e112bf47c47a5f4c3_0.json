{"sha": "3a6b1537e593b91e60de7a5e112bf47c47a5f4c3", "log": "minor javadoc cleanup   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n  * Provides the ability to extend polymophically so that\n  * indiviual statistics do not need to implement these methods unless\n  * there are better algorithms for handling the calculation.\n- * @version $Revision: 1.4 $ $Date: 2003/07/09 20:04:13 $\n+ * @version $Revision: 1.5 $ $Date: 2003/07/15 03:37:10 $\n  */\n public abstract class AbstractStorelessUnivariateStatistic\n     extends AbstractUnivariateStatistic\n      * calculation off to the instantanious increment method. In most cases of\n      * StorelessUnivariateStatistic this is never really used because more \n      * efficient algorithms are available for that statistic.\n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @see org.apache.commons.math.stat.univariate.\n+     * UnivariateStatistic#evaluate(double[], int, int)\n      */\n     public double evaluate(double[] values, int begin, int length) {\n         if (this.test(values, begin, length)) {\n             this.clear();\n+            int l = begin + length;\n             for (int i = begin; i < begin + length; i++) {\n                 increment(values[i]);\n             }\n         }\n         return getResult();\n     }\n+\n }\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n  * Abstract Implementation for UnivariateStatistics.\n  * Provides the ability to extend polymophically so that\n  * indiviual statistics do not need to implement these methods. \n- * @version $Revision: 1.4 $ $Date: 2003/07/09 20:04:13 $\n+ * @version $Revision: 1.5 $ $Date: 2003/07/15 03:37:10 $\n  */\n public abstract class AbstractUnivariateStatistic\n     implements UnivariateStatistic {\n      * This implementation provides a simple wrapper around the double[]\n      * and passes the request onto the evaluate(DoubleArray da) method.\n      * \n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[])\n+     * @see org.apache.commons.math.stat.univariate.\n+     * UnivariateStatistic#evaluate(double[])\n      */\n     public double evaluate(double[] values) {\n         return evaluate(values, 0, values.length);\n \n     /**\n      * Subclasses of AbstractUnivariateStatistc need to implement this method.\n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @see org.apache.commons.math.stat.univariate.\n+     * UnivariateStatistic#evaluate(double[], int, int)\n      */\n     public abstract double evaluate(double[] values, int begin, int length);\n \n      */\n     protected boolean test(double[] values, int begin, int length) {\n \n-        if (length > values.length)\n+        if (length > values.length) {\n             throw new IllegalArgumentException(\"length > values.length\");\n+        }\n \n-        if (begin + length > values.length)\n+        if (begin + length > values.length) {\n             throw new IllegalArgumentException(\"begin + length > values.length\");\n+        }\n \n-        if (values == null)\n+        if (values == null) {\n             throw new IllegalArgumentException(\"input value array is null\");\n+        }\n \n-        if (values.length == 0 || length == 0)\n+        if (values.length == 0 || length == 0) {\n             return false;\n+        }\n \n         return true;\n \n--- a/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n package org.apache.commons.math.stat.univariate;\n \n /**\n- * StorelessUnivariate interface provides methods to increment and access\n- * the internal state of the Statistic. A StorelessUnivariateStatistic does\n- * not require that a double[] storage structure be maintained with the values\n- * in it. As such only a subset of known statistics can actually be implmented\n- * using it. If a Statistic cannot be implemented in a Storeless approach it\n- * should implement the UnivariateStatistic interface directly instead.\n- * @version $Revision: 1.5 $ $Date: 2003/07/09 20:04:13 $\n+ * Extends the capabilities of UnivariateStatistic with a statefull incremental\n+ * strategy through three methods for calculating a statistic without having to\n+ * maintain a double[] of the values. Because a StorelessUnivariateStatistic \n+ * does not require that a double[] storage structure be maintained with the \n+ * values in it, there are only a subset of known statistics can actually be \n+ * implemented using it. If a Statistic cannot be implemented in a Storeless \n+ * approach it should implement the UnivariateStatistic interface directly \n+ * instead.\n+ * @version $Revision: 1.6 $ $Date: 2003/07/15 03:37:10 $\n  */\n public interface StorelessUnivariateStatistic extends UnivariateStatistic {\n \n      * Implementation.\n      * @param d is the value to increment the state by.\n      */\n-    public void increment(double d);\n+    void increment(double d);\n \n     /**\n      * Returns the current state of the statistic after the\n      * @return value of the statistic, Double.NaN if it\n      * has been cleared or just instantiated.\n      */\n-    public double getResult();\n+    double getResult();\n \n \n     /**\n      * Clears all the internal state of the Statistic\n      */\n-    public void clear();\n+    void clear();\n \n }\n--- a/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java\n \n /**\n  * UnivariateStatistic interface provides methods to evaluate \n- * double[] based content using a particular algorithm.\n- * @version $Revision: 1.4 $ $Date: 2003/07/09 20:04:13 $\n+ * double[] based content using an implemented statistical approach. \n+ * The interface provides two \"stateless\" simple methods to calculate \n+ * a statistic from a double[] based parameter.\n+ * @version $Revision: 1.5 $ $Date: 2003/07/15 03:37:10 $\n  */\n public interface UnivariateStatistic {\n     \n      * @return the result of the evaluation or Double.NaN \n      * if the array is empty\n      */\n-    public double evaluate(double[] values);\n+    double evaluate(double[] values);\n \n     /**\n-     * Evaluates part of a double[] returning the result of the evaluation.\n+     * Evaluates part of a double[] returning the result \n+     * of the evaluation.\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length processing at this point in the array\n      * @return the result of the evaluation or Double.NaN \n      * if the array is empty\n      */\n-    public double evaluate(double[] values, int begin, int length); \n+    double evaluate(double[] values, int begin, int length); \n \n }\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n  * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n  * recursive strategy\n  * </a>. Both incremental and evaluation strategies currently use this approach.\n- * @version $Revision: 1.4 $ $Date: 2003/07/09 20:04:10 $\n+ * @version $Revision: 1.5 $ $Date: 2003/07/15 03:36:36 $\n  */\n public class FirstMoment extends AbstractStorelessUnivariateStatistic {\n \n \n     /** first moment of values that have been added */\n     protected double m1 = Double.NaN;\n-    \n-    /** temporary internal state made available for higher order moments */\n+\n+    /** \n+     * temporary internal state made available for\n+     * higher order moments \n+     */\n     protected double dev = 0.0;\n-    \n-    /** temporary internal state made available for higher order moments */\n+\n+    /** \n+     * temporary internal state made available for\n+     * higher order moments \n+     */\n     protected double v = 0.0;\n-    \n-    /** temporary internal state made available for higher order moments */\n+\n+    /** \n+     * temporary internal state made available for\n+     * higher order moments \n+     */\n     protected double n0 = 0.0;\n-    \n+\n     /**\n-     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     * @see org.apache.commons.math.stat.univariate.\n+     * StorelessUnivariateStatistic#increment(double)\n      */\n     public void increment(double d) {\n         if (n < 1) {\n-             m1 = 0.0;\n+            m1 = 0.0;\n         }\n-        \n+\n         n++;\n         dev = d - m1;\n-        n0 = (double)n;\n+        n0 = (double) n;\n         v = dev / n0;\n \n-        m1 += v;                   \n+        m1 += v;\n     }\n-    \n+\n     /**\n-     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     * @see org.apache.commons.math.stat.univariate.\n+     * StorelessUnivariateStatistic#clear()\n      */\n     public void clear() {\n         m1 = Double.NaN;\n         n = 0;\n         dev = 0.0;\n         v = 0.0;\n-        n0 = 0.0;  \n+        n0 = 0.0;\n     }\n-    \n+\n     /**\n-     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n+     * @see org.apache.commons.math.stat.univariate.\n+     * StorelessUnivariateStatistic#getValue()\n      */\n     public double getResult() {\n         return m1;\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math.stat.univariate.summary.Sum;\n \n /**\n  * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n  * arithmetic mean </a> of the available values.\n- * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $\n+ * @version $Revision: 1.7 $ $Date: 2003/07/15 03:36:36 $\n  */\n-public class Mean extends Sum {\n+public class Mean extends AbstractStorelessUnivariateStatistic {\n \n     /** first moment of values that have been added */\n     protected FirstMoment moment = null;\n     public double getResult() {\n         return moment.m1;\n     }\n+\n+    /*UnvariateStatistic Approach */\n+    Sum sum = new Sum();\n     \n     /**\n      * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n      */\n     public double evaluate(double[] values, int begin, int length) {\n         if (test(values, begin, length)) {\n-            return super.evaluate(values, begin, length) / ((double) length);\n+            return sum.evaluate(values) / ((double) length);\n         }\n         return Double.NaN;\n     }\n-\n }\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n  */\n package org.apache.commons.math.stat.univariate.moment;\n \n-import org\n-    .apache\n-    .commons\n-    .math\n-    .stat\n-    .univariate\n-    .AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n  *\n- * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $\n+ * @version $Revision: 1.7 $ $Date: 2003/07/15 03:36:36 $\n  */\n public class Variance extends AbstractStorelessUnivariateStatistic {\n \n         this.moment = m2;\n     }\n     /**\n-     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n+     * @see org.apache.commons.math.stat.univariate.\n+     * StorelessUnivariateStatistic#increment(double)\n      */\n     public void increment(double d) {\n         if (incMoment) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()\n+     * @see org.apache.commons.math.stat.univariate.\n+     * StorelessUnivariateStatistic#getValue()\n      */\n     public double getResult() {\n         if (n < moment.n) {\n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n+     * @see org.apache.commons.math.stat.univariate.\n+     * StorelessUnivariateStatistic#clear()\n      */\n     public void clear() {\n         if (incMoment) {\n     }\n \n     /*UnvariateStatistic Approach */\n-\n     Mean mean = new Mean();\n \n     /**\n      * @param length processing at this point in the array\n      * @return the result, Double.NaN if no values for an empty array \n      * or 0.0 for a single value set.  \n-     * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n+     * @see org.apache.commons.math.stat.univariate.\n+     * UnivariateStatistic#evaluate(double[], int, int)\n      */\n     public double evaluate(double[] values, int begin, int length) {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n  */\n package org.apache.commons.math.stat.univariate.summary;\n \n+import org.apache.commons.collections.primitives.DoubleIterator;\n import org\n     .apache\n     .commons\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:13 $\n+ * @version $Revision: 1.7 $ $Date: 2003/07/15 03:37:11 $\n  */\n public class Sum extends AbstractStorelessUnivariateStatistic {\n \n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n     public void increment(double d) {\n-        if (Double.isNaN(value )) {\n-            value  = d;\n+        if (Double.isNaN(value)) {\n+            value = d;\n         } else {\n-            value  += d;\n+            value += d;\n         }\n     }\n \n     public double getResult() {\n         return value;\n     }\n-    \n+\n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()\n      */\n         return sum;\n     }\n \n-\n-\n }", "timestamp": 1058240231, "metainfo": ""}