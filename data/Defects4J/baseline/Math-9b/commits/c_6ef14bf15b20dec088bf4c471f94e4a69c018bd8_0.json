{"sha": "6ef14bf15b20dec088bf4c471f94e4a69c018bd8", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=20601 Submitted by:\tbrent@worden.org   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/ContinuedFraction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+/**\n+ * <p>\n+ * Provides a generic means to evaluate continued fractions.  Subclasses simply\n+ * provided the a and b coefficients to evaluate the continued fraction.\n+ * </p>\n+ * \n+ * <p>\n+ * Reference:<br/>\n+ * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n+ * Continued Fraction</a>\n+ * </p>\n+ * \n+ * @author Brent Worden\n+ */\n+public abstract class ContinuedFraction {\n+    /** Maximum allowed numerical error. */\n+    private static final double DEFAULT_EPSILON = 10e-9;\n+    \n+\t/**\n+\t * Default constructor.\n+\t */\n+\tprotected ContinuedFraction() {\n+\t\tsuper();\n+\t}\n+    \n+    /**\n+     * Access the n-th a coefficient of the continued fraction.  Since a can be\n+     * a function of the evaluation point, x, that is passed in as well.\n+     * @param n the coefficient index to retrieve.\n+     * @param x the evaluation point.\n+     * @return the n-th a coefficient.\n+     */\n+    protected abstract double getA(int n, double x);\n+    \n+    /**\n+     * Access the n-th b coefficient of the continued fraction.  Since b can be\n+     * a function of the evaluation point, x, that is passed in as well.\n+     * @param n the coefficient index to retrieve.\n+     * @param x the evaluation point.\n+     * @return the n-th b coefficient.\n+     */\n+    protected abstract double getB(int n, double x);\n+    \n+    /**\n+     * Evaluates the continued fraction at the value x.\n+     * @param x the evaluation point.\n+     * @return the value of the continued fraction evaluated at x. \n+     */\n+    public double evaluate(double x){\n+        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+    }    \n+    \n+    /**\n+     * Evaluates the continued fraction at the value x.\n+     * @param x the evaluation point.\n+     * @param epsilon maximum error allowed.\n+     * @return the value of the continued fraction evaluated at x. \n+     */\n+    public double evaluate(double x, double epsilon){\n+        return evaluate(x, epsilon, Integer.MAX_VALUE);\n+    }    \n+    \n+    /**\n+     * Evaluates the continued fraction at the value x.\n+     * @param x the evaluation point.\n+     * @param maxIterations maximum number of convergents\n+     * @return the value of the continued fraction evaluated at x. \n+     */\n+    public double evaluate(double x, int maxIterations){\n+        return evaluate(x, DEFAULT_EPSILON, maxIterations);\n+    }    \n+    \n+    /**\n+     * <p>\n+     * Evaluates the continued fraction at the value x.\n+     * </p>\n+     * \n+     * <p>\n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li>O. E-gecio-glu, C . K. Koc, J. Rifa i Coma,\n+     * <a href=\"http://citeseer.nj.nec.com/egecioglu91fast.html\">\n+     * Fast Computation of Continued Fractions</a>, Computers Math. Applic.,\n+     * 21(2--3), 1991, 167--169.</li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param x the evaluation point.\n+     * @param epsilon maximum error allowed.\n+     * @param maxIterations maximum number of convergents\n+     * @return the value of the continued fraction evaluated at x. \n+     */\n+    public double evaluate(double x, double epsilon, int maxIterations) {\n+        double[][] f = new double[2][2];\n+        double[][] a = new double[2][2];\n+        double[][] an = new double[2][2];\n+        \n+        a[0][0] = getA(0, x);\n+        a[0][1] = 1.0;\n+        a[1][0] = 1.0;\n+        a[1][1] = 0.0;\n+\n+        return evaluate(1, x, a, an, f, epsilon, maxIterations);\n+    }\n+    \n+    /**\n+     * Evaluates the n-th convergent, fn = pn / qn, for this continued fraction at the value x.\n+     * @param n the convergent to compute.\n+     * @param x the evaluation point.\n+     * @param a (n-1)-th convergent matrix.  (Input)\n+     * @param an the n-th coefficient matrix. (Output)\n+     * @param f the n-th convergent matrix. (Output)\n+     * @param epsilon maximum error allowed.\n+     * @param maxIterations maximum number of convergents\n+     * @return the value of the the n-th convergent for this continued fraction evaluated at x. \n+     */\n+    private double evaluate(int n, double x, double[][] a, double[][] an, double[][] f, double epsilon, int maxIterations) {\n+        double ret;\n+        \n+        // create next matrix\n+        an[0][0] = getA(n, x);\n+        an[0][1] = 1.0;\n+        an[1][0] = getB(n, x);\n+        an[1][1] = 0.0;\n+        \n+        // multiply a and an, save as f\n+        f[0][0] = (a[0][0] * an[0][0]) + (a[0][1] * an[1][0]);\n+        f[0][1] = (a[0][0] * an[0][1]) + (a[0][1] * an[1][1]);\n+        f[1][0] = (a[1][0] * an[0][0]) + (a[1][1] * an[1][0]);\n+        f[1][1] = (a[1][0] * an[0][1]) + (a[1][1] * an[1][1]);\n+        \n+        // determine if we're close enough\n+        if(Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) < Math.abs(epsilon * f[1][0] * f[1][1])){\n+            ret = f[0][0] / f[1][0];\n+        } else {\n+            if(n >= maxIterations){\n+                throw new ConvergenceException(\"Continued fraction convergents failed to converge.\");\n+            }\n+            // compute next\n+            ret = evaluate(n + 1, x, f /* new a */, an /* reuse an */, a /* new f */, epsilon, maxIterations);\n+        }\n+        \n+        return ret;\n+    }\n+}\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n  * The following distributions are supported:\n  * <ul>\n  * <li>Chi-Squared</li>\n+ * <li>F</li>\n  * <li>Gamma</li>\n+ * <li>Student's t</li>\n  * </ul>\n  * </p>\n  * \n      * @return a new chi-square distribution.  \n      */\n     public abstract ChiSquaredDistribution createChiSquareDistribution(\n-        double degreesOfFreedom\n-    );\n+        double degreesOfFreedom);\n+    \n+    /**\n+     * Create a new F-distribution with the given degrees of freedom.\n+     * @param numeratorDegreesOfFreedom numerator degrees of freedom.\n+     * @param denominatorDegreesOfFreedom denominator degrees of freedom.\n+     * @return a new F-distribution.  \n+     */\n+    public abstract FDistribution createFDistribution(\n+        double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom);\n     \n     /**\n      * Create a new gamma distribution with the given alpha and beta values.\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n     public TDistribution createTDistribution(double degreesOfFreedom) {\n         return new TDistributionImpl(degreesOfFreedom);\n     }\n+    \n+    /**\n+     * Create a new F-distribution with the given degrees of freedom.\n+     * @param numeratorDegreesOfFreedom numerator degrees of freedom.\n+     * @param denominatorDegreesOfFreedom denominator degrees of freedom.\n+     * @return a new F-distribution.  \n+     */\n+\tpublic FDistribution createFDistribution(\n+\t\tdouble numeratorDegreesOfFreedom,\n+\t\tdouble denominatorDegreesOfFreedom) {\n+\t\treturn new FDistributionImpl(numeratorDegreesOfFreedom,\n+            denominatorDegreesOfFreedom);\n+\t}\n+\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/FDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * <p>\n+ * F-Distribution.\n+ * </p>\n+ * \n+ * <p>\n+ * Instances of FDistribution objects should be created using\n+ * {@link DistributionFactory#createFDistribution(double)}\n+ * </p>\n+ * \n+ * <p>\n+ * Reference:<br/>\n+ * <a href=\"http://mathworld.wolfram.com/F-Distribution.html\">\n+ * F-Distribution</a>\n+ * </p>\n+ * \n+ * @author Brent Worden\n+ */\n+public interface FDistribution extends ContinuousDistribution {\n+    /**\n+     * Modify the numerator degrees of freedom.\n+     * @param degreesOfFreedom the new numerator degrees of freedom.\n+     */\n+    void setNumeratorDegreesOfFreedom(double degreesOfFreedom);\n+    \n+    /**\n+     * Access the numerator degrees of freedom.\n+     * @return the numerator degrees of freedom.\n+     */\n+    double getNumeratorDegreesOfFreedom();\n+    \n+    /**\n+     * Modify the denominator degrees of freedom.\n+     * @param degreesOfFreedom the new denominator degrees of freedom.\n+     */\n+    void setDenominatorDegreesOfFreedom(double degreesOfFreedom);\n+    \n+    /**\n+     * Access the denominator degrees of freedom.\n+     * @return the denominator degrees of freedom.\n+     */\n+    double getDenominatorDegreesOfFreedom();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.math.special.Beta;\n+\n+/**\n+ * Default implementation of\n+ * {@link org.apache.commons.math.stat.distribution.TDistribution}.\n+ * \n+ * @author Brent Worden\n+ */\n+public class FDistributionImpl\n+    extends AbstractContinuousDistribution\n+    implements FDistribution {\n+\n+    /** The numerator degrees of freedom*/\n+    private double numeratorDegreesOfFreedom;\n+\n+    /** The numerator degrees of freedom*/\n+    private double denominatorDegreesOfFreedom;\n+    \n+    /**\n+     * Create a F distribution using the given degrees of freedom.\n+     * @param degreesOfFreedom the degrees of freedom.\n+     */\n+    public FDistributionImpl(double numeratorDegreesOfFreedom,\n+            double denominatorDegreesOfFreedom){\n+        super();\n+        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);\n+        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);\n+    }\n+    \n+    /**\n+     * <p>\n+     * For this disbution, X, this method returns P(X &lt; x).\n+     * </p>\n+     * \n+     * <p>\n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/F-Distribution.html\">\n+     * F-Distribution</a>, equation (4).</li>\n+     * </p>\n+     * \n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF for this distribution. \n+     */\n+    public double cummulativeProbability(double x) {\n+        double ret;\n+        if(x <= 0.0){\n+            ret = 0.0;\n+        } else {\n+            double n = getNumeratorDegreesOfFreedom();\n+            double m = getDenominatorDegreesOfFreedom();\n+            \n+            ret = Beta.regularizedBeta((n * x) / (m + n * x),\n+                0.5 * n,\n+                0.5 * m);\n+        }\n+        return ret;\n+    }\n+        \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected double getDomainLowerBound(double p){\n+        return 0.0;\n+    }\n+\n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected double getDomainUpperBound(double p){\n+        return Double.MAX_VALUE;\n+    }\n+\n+    /**\n+     * Access the initial domain value, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return initial domain value\n+     */\n+    protected double getInitialDomain(double p){\n+        return getDenominatorDegreesOfFreedom() / (getDenominatorDegreesOfFreedom() - 2.0);\n+    }\n+    \n+    /**\n+     * Modify the numerator degrees of freedom.\n+     * @param degreesOfFreedom the new numerator degrees of freedom.\n+     */\n+    public void setNumeratorDegreesOfFreedom(double degreesOfFreedom){\n+        if(degreesOfFreedom <= 0.0){\n+            throw new IllegalArgumentException(\n+                \"degrees of freedom must be positive.\");\n+        }\n+        this.numeratorDegreesOfFreedom = degreesOfFreedom;\n+    }\n+    \n+    /**\n+     * Access the numerator degrees of freedom.\n+     * @return the numerator degrees of freedom.\n+     */\n+    public double getNumeratorDegreesOfFreedom(){\n+        return numeratorDegreesOfFreedom;\n+    }\n+    \n+    /**\n+     * Modify the denominator degrees of freedom.\n+     * @param degreesOfFreedom the new denominator degrees of freedom.\n+     */\n+    public void setDenominatorDegreesOfFreedom(double degreesOfFreedom){\n+        if(degreesOfFreedom <= 0.0){\n+            throw new IllegalArgumentException(\n+                \"degrees of freedom must be positive.\");\n+        }\n+        this.denominatorDegreesOfFreedom = degreesOfFreedom;\n+    }\n+    \n+    /**\n+     * Access the denominator degrees of freedom.\n+     * @return the denominator degrees of freedom.\n+     */\n+    public double getDenominatorDegreesOfFreedom(){\n+        return denominatorDegreesOfFreedom;\n+    }\n+}\n--- a/src/java/org/apache/commons/math/special/Beta.java\n+++ b/src/java/org/apache/commons/math/special/Beta.java\n  */\n package org.apache.commons.math.special;\n \n+import org.apache.commons.math.ContinuedFraction;\n+\n /**\n  * This is a utility class that provides computation methods related to the\n- * Gamma family of functions.\n+ * Beta family of functions.\n  * \n  * @author Brent Worden\n  */\n      * <a href=\"http://mathworld.wolfram.com/RegularizedBetaFunction.html\">\n      * Regularized Beta Function</a>.</li>\n      * <li>\n-     * <a href=\"http://mathworld.wolfram.com/IncompleteBetaFunction.html\">\n-     * Incomplete Beta Function</a>.</li>\n+     * <a href=\"http://functions.wolfram.com/06.21.10.0001.01\">\n+     * Regularized Beta Function</a>.</li>\n      * </ul>\n      * </p>\n      * \n         } else if(x == 1.0){\n             ret = 1.0;\n         } else {\n-            double n = 0.0;\n-            double an = 1.0 / a;\n-            double s = an;\n-            while(Math.abs(an) > epsilon && n < maxIterations){\n-                n = n + 1.0;\n-                an = an * (n - b) / n * x / (a + n) * (a + n - 1);\n-                s = s + an;\n-            }\n-            ret = Math.exp(a * Math.log(x) - logBeta(a, b)) * s;\n+            ContinuedFraction fraction = new ContinuedFraction() {\n+                protected double getB(int n, double x) {\n+                    double ret;\n+                    double m;\n+                    switch (n) {\n+                        case 1 :\n+                            ret = 1.0;\n+                            break;\n+                        default :\n+                            if (n % 2 == 0) { // even\n+                                m = (n - 2.0) / 2.0;\n+                                ret =\n+                                    - ((a + m) * (a + b + m) * x)\n+                                        / ((a + (2 * m)) * (a + (2 * m) + 1.0));\n+                            } else {\n+                                m = (n - 1.0) / 2.0;\n+                                ret =\n+                                    (m * (b - m) * x)\n+                                        / ((a + (2 * m) - 1) * (a + (2 * m)));\n+                            }\n+                            break;\n+                    }\n+                    return ret;\n+                }\n+\n+                protected double getA(int n, double x) {\n+                    double ret;\n+                    switch (n) {\n+                        case 0 :\n+                            ret = 0.0;\n+                            break;\n+                        default :\n+                            ret = 1.0;\n+                            break;\n+                    }\n+                    return ret;\n+                }\n+\t\t\t};\n+            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) - Math.log(a) - logBeta(a, b, epsilon, maxIterations)) * fraction.evaluate(x, epsilon, maxIterations);\n         }\n \n         return ret;\n     }\n \n+    /**\n+     * <p>\n+     * Returns the natural logarithm of the beta function B(a, b).\n+     * </p>\n+     * \n+     * @param a ???\n+     * @param b ???\n+     * @return log(B(a, b))\n+     */\n+    public static double logBeta(double a, double b) {\n+        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+    }\n+    \n     /**\n      * <p>\n      * Returns the natural logarithm of the beta function B(a, b).\n      * </ul>\n      * </p>\n      * \n-     * @param x ???\n+     * @param a ???\n+     * @param b ???\n      * @return log(B(a, b))\n      */\n-    public static double logBeta(double a, double b) {\n+    public static double logBeta(double a, double b, double epsilon, int maxIterations) {\n         double ret;\n \n         if (a <= 0.0) {\n         } else if (b <= 0.0) {\n             throw new IllegalArgumentException(\"b must be positive\");\n         } else {\n-            ret = Gamma.logGamma(a) + Gamma.logGamma(b)\n-                - Gamma.logGamma(a + b);\n+            ret = Gamma.logGamma(a, epsilon, maxIterations) + Gamma.logGamma(b, epsilon, maxIterations)\n+                - Gamma.logGamma(a + b, epsilon, maxIterations);\n         }\n \n         return ret;\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n  * @author Brent Worden\n  */\n public class Gamma {\n-    /** Maximum number of iteration allowed for iterative methods. */\n-    // TODO: try to reduce this.  regularizedGammaP doesn't converge very\n-    // fast for large values of x.\n-    private static final int MAXIMUM_ITERATIONS = 100;\n-\n     /** Maximum allowed numerical error. */\n-    private static final double EPSILON = 10e-9;\n-\n+    private static final double DEFAULT_EPSILON = 10e-9;\n+    \n     /**\n      * Default constructor.  Prohibit instantiation.\n      */\n         super();\n     }\n \n+    /**\n+     * <p>\n+     * Returns the regularized gamma function P(a, x).\n+     * </p>\n+     * \n+     * @param a ???\n+     * @param x ???\n+     * @return the regularized gamma function P(a, x)\n+     */\n+    public static double regularizedGammaP(double a, double x) {\n+        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+    }\n+    \n     /**\n      * <p>\n      * Returns the regularized gamma function P(a, x).\n      * @param x ???\n      * @return the regularized gamma function P(a, x)\n      */\n-    public static double regularizedGammaP(double a, double x) {\n+    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n         double ret;\n \n         if (a <= 0.0) {\n             double n = 0.0; // current element index\n             double an = 1.0 / a; // n-th element in the series\n             double sum = an; // partial sum\n-            while (Math.abs(an) > EPSILON && n < MAXIMUM_ITERATIONS) {\n+            while (Math.abs(an) > epsilon && n < maxIterations) {\n                 // compute next element in the series\n                 n = n + 1.0;\n                 an = an * (x / (a + n));\n                 // update partial sum\n                 sum = sum + an;\n             }\n-            if (n >= MAXIMUM_ITERATIONS) {\n+            if (n >= maxIterations) {\n                 throw new ConvergenceException(\n                     \"maximum number of iterations reached\");\n             } else {\n-                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n+                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a, epsilon, maxIterations)) * sum;\n             }\n         }\n \n      * @param x ???\n      * @return log(&#915;(x))\n      */\n-    public static double logGamma(double x) {\n+    public static double logGamma(double x, double epsilon, int maxIterations) {\n         double ret;\n \n         if (x <= 0.0) {\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ContinuedFractionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class ContinuedFractionTest extends TestCase {\n+\t/**\n+\t * Constructor for ContinuedFractionTest.\n+\t * @param name\n+\t */\n+\tpublic ContinuedFractionTest(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void testGoldenRation(){\n+        ContinuedFraction cf = new ContinuedFraction() {\n+\t\t\tpublic double getA(int n, double x) {\n+\t\t\t\treturn 1.0;\n+\t\t\t}\n+\n+\t\t\tpublic double getB(int n, double x) {\n+\t\t\t\treturn 1.0;\n+\t\t\t}\n+\t\t};\n+        double gr = cf.evaluate(0.0, 10e-9);\n+        assertEquals(1.61803399, gr, 10e-9);\n+\t}\n+}\n--- a/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n     public void testCreateChiSquareDistributionPositive(){\n         try {\n             factory.createChiSquareDistribution(1.0);\n+        } catch (IllegalArgumentException ex) {\n+            fail(\"positive degrees of freedom.  IllegalArgumentException is not expected\");\n+        }\n+    }\n+    \n+    public void testCreateFDistributionNegativePositive(){\n+        try {\n+            factory.createFDistribution(-1.0, 1.0);\n+            fail(\"negative degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateFDistributionZeroPositive(){\n+        try {\n+            factory.createFDistribution(0.0, 1.0);\n+            fail(\"zero degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateFDistributionPositiveNegative(){\n+        try {\n+            factory.createFDistribution(1.0, -1.0);\n+            fail(\"negative degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateFDistributionPositiveZero(){\n+        try {\n+            factory.createFDistribution(1.0, 0.0);\n+            fail(\"zero degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateFDistributionPositivePositive(){\n+        try {\n+            factory.createFDistribution(1.0, 1.0);\n         } catch (IllegalArgumentException ex) {\n             fail(\"positive degrees of freedom.  IllegalArgumentException is not expected\");\n         }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class FDistributionTest extends TestCase {\n+    private FDistribution f;\n+    \n+    /**\n+     * Constructor for ChiSquareDistributionTest.\n+     * @param name\n+     */\n+    public FDistributionTest(String name) {\n+        super(name);\n+    }\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        f = DistributionFactory.newInstance().createFDistribution(5.0, 6.0);\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        f = null;\n+        super.tearDown();\n+    }\n+\n+    public void testLowerTailProbability(){\n+        testProbability(1.0 / 10.67, .010);\n+        testProbability(1.0 /  6.98, .025);\n+        testProbability(1.0 /  4.95, .050);\n+        testProbability(1.0 /  3.40, .100);\n+    }\n+\n+    public void testUpperTailProbability(){\n+        testProbability(8.75, .990);\n+        testProbability(5.99, .975);\n+        testProbability(4.39, .950);\n+        testProbability(3.11, .900);\n+    }\n+    \n+    public void testLowerTailValues(){\n+        testValue(1.0 / 10.67, .010);\n+        testValue(1.0 /  6.98, .025);\n+        testValue(1.0 /  4.95, .050);\n+        testValue(1.0 /  3.40, .100);\n+    }\n+    \n+    public void testUpperTailValues(){\n+        testValue(8.75, .990);\n+        testValue(5.99, .975);\n+        testValue(4.39, .950);\n+        testValue(3.11, .900);\n+    }\n+    \n+    private void testProbability(double x, double expected){\n+        double actual = f.cummulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 1e-3);\n+    }\n+    \n+    private void testValue(double expected, double p){\n+        double actual = f.inverseCummulativeProbability(p);\n+        assertEquals(\"value for \" + p, expected, actual, 1e-2);\n+    }\n+}", "timestamp": 1055294359, "metainfo": ""}