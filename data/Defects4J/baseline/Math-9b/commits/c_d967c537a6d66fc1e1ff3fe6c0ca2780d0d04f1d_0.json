{"sha": "d967c537a6d66fc1e1ff3fe6c0ca2780d0d04f1d", "log": "Unnecessary casts  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/FieldMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/FieldMatrixImpl.java\n      */\n     public FieldMatrixImpl(final T[][] d)\n         throws IllegalArgumentException, NullPointerException {\n-        super((Field<T>) extractField(d));\n+        super(extractField(d));\n         copyIn(d);\n     }\n \n      */\n     public FieldMatrixImpl(final T[][] d, final boolean copyArray)\n         throws IllegalArgumentException, NullPointerException {\n-        super((Field<T>) extractField(d));\n+        super(extractField(d));\n         if (copyArray) {\n             copyIn(d);\n         } else {\n      * @param v column vector holding data for new matrix\n      */\n     public FieldMatrixImpl(final T[] v) {\n-        super((Field<T>) extractField(v));\n+        super(extractField(v));\n         final int nRows = v.length;\n         data = buildArray(getField(), nRows, 1);\n         for (int row = 0; row < nRows; row++) {\n--- a/src/java/org/apache/commons/math/linear/FieldVectorImpl.java\n+++ b/src/java/org/apache/commons/math/linear/FieldVectorImpl.java\n import org.apache.commons.math.MathRuntimeException;\n \n /**\n- * This class implements the {@link FieldVector<T>} interface with a {@link FieldElement} array.\n+ * This class implements the {@link FieldVector} interface with a {@link FieldElement} array.\n  * @param <T> the type of the field elements\n  * @version $Revision$ $Date$\n  * @since 2.0\n      * Build a 0-length vector.\n      * <p>Zero-length vectors may be used to initialized construction of vectors\n      * by data gathering. We start with zero-length and use either the {@link\n-     * #FieldVectorImpl(FieldVectorImpl<T>, FieldVectorImpl<T>)} constructor\n-     * or one of the <code>append</code> method ({@link #append(double)}, {@link\n-     * #append(T[])}, {@link #append(FieldVectorImpl<T>)}) to gather data\n+     * #FieldVectorImpl(FieldVectorImpl, FieldVectorImpl)} constructor\n+     * or one of the <code>append</code> methods ({@link #append(double)}, {@link\n+     * #append(T[])}, {@link #append(FieldVectorImpl)}) to gather data\n      * into this vector.</p>\n      * @param field field to which the elements belong\n      */\n      */\n     public FieldVectorImpl<T> add(FieldVectorImpl<T> v)\n         throws IllegalArgumentException {\n-        return (FieldVectorImpl<T>) add((T[]) v.data);\n+        return (FieldVectorImpl<T>) add(v.data);\n     }\n \n     /** {@inheritDoc} */\n      */\n     public FieldVectorImpl<T> subtract(FieldVectorImpl<T> v)\n         throws IllegalArgumentException {\n-        return (FieldVectorImpl<T>) subtract((T[]) v.data);\n+        return (FieldVectorImpl<T>) subtract(v.data);\n     }\n \n     /** {@inheritDoc} */", "timestamp": 1240624844, "metainfo": ""}