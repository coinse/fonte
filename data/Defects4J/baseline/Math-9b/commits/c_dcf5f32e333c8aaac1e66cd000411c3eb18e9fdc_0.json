{"sha": "dcf5f32e333c8aaac1e66cd000411c3eb18e9fdc", "log": "Moved matrix equality tests to TestUtils.  ", "commit": "\n--- a/src/test/org/apache/commons/math/TestUtils.java\n+++ b/src/test/org/apache/commons/math/TestUtils.java\n \n import org.apache.commons.math.complex.Complex;\n import org.apache.commons.math.complex.ComplexFormat;\n+import org.apache.commons.math.linear.RealMatrix;\n \n /**\n  * @version $Revision$ $Date$\n        assertContains(null, values, x, epsilon);\n     }\n     \n+    /** verifies that two matrices are close (1-norm) */              \n+    public static void assertEquals(String msg, RealMatrix expected, RealMatrix observed,\n+        double tolerance) {\n+        \n+        if (observed == null) {\n+            Assert.fail(msg + \"\\nObserved is null\");\n+        }\n+        \n+        if (expected.getColumnDimension() != observed.getColumnDimension() || \n+                expected.getRowDimension() != observed.getRowDimension()) {\n+            StringBuffer messageBuffer = new StringBuffer(msg);\n+            messageBuffer.append(\"\\nObserved has incorrect dimensions.\"); \n+            messageBuffer.append(\"\\nobserved is \" + observed.getRowDimension() +\n+                    \" x \" + observed.getColumnDimension());\n+            messageBuffer.append(\"\\nexpected \" + expected.getRowDimension() +\n+                    \" x \" + expected.getColumnDimension());\n+            Assert.fail(messageBuffer.toString());\n+        }\n+\n+        RealMatrix delta = expected.subtract(observed);\n+        if (delta.getNorm() >= tolerance) {\n+            StringBuffer messageBuffer = new StringBuffer(msg);\n+            messageBuffer.append(\"\\nExpected: \" + expected);\n+            messageBuffer.append(\"\\nObserved: \" + observed);\n+            messageBuffer.append(\"\\nexpected - observed: \" + delta);\n+            Assert.fail(messageBuffer.toString());\n+        }\n+    }\n+    \n+    /** verifies that two arrays are close (sup norm) */\n+    public static void assertEquals(String msg, double[] m, double[] n,\n+        double tolerance) {\n+        if (m.length != n.length) {\n+            Assert.fail(\"vectors not same length\");\n+        }\n+        for (int i = 0; i < m.length; i++) {\n+            Assert.assertEquals(msg + \" \" +  i + \" elements differ\", \n+                m[i],n[i],tolerance);\n+        }\n+    }\n+    \n }\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.TestUtils;\n \n /**\n  * Test cases for the {@link RealMatrixImpl} class.\n     public void testPlusMinus() {\n         RealMatrixImpl m = new RealMatrixImpl(testData);\n         RealMatrixImpl m2 = new RealMatrixImpl(testDataInv);\n-        assertClose(\"m-n = m + -n\",m.subtract(m2),\n+        TestUtils.assertEquals(\"m-n = m + -n\",m.subtract(m2),\n             m2.scalarMultiply(-1d).add(m),entryTolerance);        \n         try {\n             m.subtract(new RealMatrixImpl(testData2));\n         RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);\n         RealMatrixImpl identity = new RealMatrixImpl(id);\n         RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n-        assertClose(\"inverse multiply\",m.multiply(mInv),\n+        TestUtils.assertEquals(\"inverse multiply\",m.multiply(mInv),\n             identity,entryTolerance);\n-        assertClose(\"inverse multiply\",mInv.multiply(m),\n+        TestUtils.assertEquals(\"inverse multiply\",mInv.multiply(m),\n             identity,entryTolerance);\n-        assertClose(\"identity multiply\",m.multiply(identity),\n+        TestUtils.assertEquals(\"identity multiply\",m.multiply(identity),\n             m,entryTolerance);\n-        assertClose(\"identity multiply\",identity.multiply(mInv),\n+        TestUtils.assertEquals(\"identity multiply\",identity.multiply(mInv),\n             mInv,entryTolerance);\n-        assertClose(\"identity multiply\",m2.multiply(identity),\n+        TestUtils.assertEquals(\"identity multiply\",m2.multiply(identity),\n             m2,entryTolerance); \n         try {\n             m.multiply(new RealMatrixImpl(bigSingular));\n        RealMatrix m3 = new RealMatrixImpl(d3);   \n        RealMatrix m4 = new RealMatrixImpl(d4);\n        RealMatrix m5 = new RealMatrixImpl(d5);\n-       assertClose(\"m3*m4=m5\", m3.multiply(m4), m5, entryTolerance);\n+       TestUtils.assertEquals(\"m3*m4=m5\", m3.multiply(m4), m5, entryTolerance);\n    }  \n         \n     /** test trace */\n     /** test sclarAdd */\n     public void testScalarAdd() {\n         RealMatrix m = new RealMatrixImpl(testData);\n-        assertClose(\"scalar add\",new RealMatrixImpl(testDataPlus2),\n+        TestUtils.assertEquals(\"scalar add\",new RealMatrixImpl(testDataPlus2),\n             m.scalarAdd(2d),entryTolerance);\n     }\n                     \n     /** test operate */\n     public void testOperate() {\n         RealMatrix m = new RealMatrixImpl(id);\n-        assertClose(\"identity operate\", testVector,\n+        TestUtils.assertEquals(\"identity operate\", testVector,\n                     m.operate(testVector), entryTolerance);\n-        assertClose(\"identity operate\", testVector,\n+        TestUtils.assertEquals(\"identity operate\", testVector,\n                     m.operate(new RealVectorImpl(testVector)).getData(), entryTolerance);\n         m = new RealMatrixImpl(bigSingular);\n         try {\n         RealMatrix m = new RealMatrixImpl(testData); \n         RealMatrix mIT = new LUDecompositionImpl(m).getSolver().getInverse().transpose();\n         RealMatrix mTI = new LUDecompositionImpl(m.transpose()).getSolver().getInverse();\n-        assertClose(\"inverse-transpose\", mIT, mTI, normTolerance);\n+        TestUtils.assertEquals(\"inverse-transpose\", mIT, mTI, normTolerance);\n         m = new RealMatrixImpl(testData2);\n         RealMatrix mt = new RealMatrixImpl(testData2T);\n-        assertClose(\"transpose\",mt,m.transpose(),normTolerance);\n+        TestUtils.assertEquals(\"transpose\",mt,m.transpose(),normTolerance);\n     }\n     \n     /** test preMultiply by vector */\n     public void testPremultiplyVector() {\n         RealMatrix m = new RealMatrixImpl(testData);\n-        assertClose(\"premultiply\", m.preMultiply(testVector),\n+        TestUtils.assertEquals(\"premultiply\", m.preMultiply(testVector),\n                     preMultTest, normTolerance);\n-        assertClose(\"premultiply\", m.preMultiply(new RealVectorImpl(testVector).getData()),\n+        TestUtils.assertEquals(\"premultiply\", m.preMultiply(new RealVectorImpl(testVector).getData()),\n                     preMultTest, normTolerance);\n         m = new RealMatrixImpl(bigSingular);\n         try {\n         RealMatrix m3 = new RealMatrixImpl(d3);   \n         RealMatrix m4 = new RealMatrixImpl(d4);\n         RealMatrix m5 = new RealMatrixImpl(d5);\n-        assertClose(\"m3*m4=m5\", m4.preMultiply(m3), m5, entryTolerance);\n+        TestUtils.assertEquals(\"m3*m4=m5\", m4.preMultiply(m3), m5, entryTolerance);\n         \n         RealMatrixImpl m = new RealMatrixImpl(testData);\n         RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);\n         RealMatrixImpl identity = new RealMatrixImpl(id);\n-        assertClose(\"inverse multiply\",m.preMultiply(mInv),\n+        TestUtils.assertEquals(\"inverse multiply\",m.preMultiply(mInv),\n                 identity,entryTolerance);\n-        assertClose(\"inverse multiply\",mInv.preMultiply(m),\n+        TestUtils.assertEquals(\"inverse multiply\",mInv.preMultiply(m),\n                 identity,entryTolerance);\n-        assertClose(\"identity multiply\",m.preMultiply(identity),\n+        TestUtils.assertEquals(\"identity multiply\",m.preMultiply(identity),\n                 m,entryTolerance);\n-        assertClose(\"identity multiply\",identity.preMultiply(mInv),\n+        TestUtils.assertEquals(\"identity multiply\",identity.preMultiply(mInv),\n                 mInv,entryTolerance);\n         try {\n             m.preMultiply(new RealMatrixImpl(bigSingular));\n     \n     public void testGetVectors() {\n         RealMatrix m = new RealMatrixImpl(testData);\n-        assertClose(\"get row\",m.getRow(0),testDataRow1,entryTolerance);\n-        assertClose(\"get col\",m.getColumn(2),testDataCol3,entryTolerance);\n+        TestUtils.assertEquals(\"get row\",m.getRow(0),testDataRow1,entryTolerance);\n+        TestUtils.assertEquals(\"get col\",m.getColumn(2),testDataCol3,entryTolerance);\n         try {\n             m.getRow(10);\n             fail(\"expecting MatrixIndexException\");\n     };\n \n     //--------------- -----------------Protected methods\n-        \n-    /** verifies that two matrices are close (1-norm) */              \n-    protected void assertClose(String msg, RealMatrix m, RealMatrix n,\n-        double tolerance) {\n-        assertTrue(msg,m.subtract(n).getNorm() < tolerance);\n-    }\n-    \n-    /** verifies that two vectors are close (sup norm) */\n-    protected void assertClose(String msg, double[] m, double[] n,\n-        double tolerance) {\n-        if (m.length != n.length) {\n-            fail(\"vectors not same length\");\n-        }\n-        for (int i = 0; i < m.length; i++) {\n-            assertEquals(msg + \" \" +  i + \" elements differ\", \n-                m[i],n[i],tolerance);\n-        }\n-    }\n     \n     /** extracts the l  and u matrices from compact lu representation */\n     protected void splitLU(RealMatrix lu, double[][] lowerData, double[][] upperData) throws InvalidMatrixException {   ", "timestamp": 1234106769, "metainfo": ""}