{"sha": "500097d32d93699b9dd3b78ab609516857f9981c", "log": "Fixed a TODO by addid a isStrictlyIncreasing method.  This can be refactored later into a more reusable location.   ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n  * <li> Let <code>j</code> be the index of the largest knot point that is less than or equal to <code>x</code>. \n  *  The value returned is <br> <code>polynomials[j](x - knot[j])</code></li></ol>\n  * \n- * @version $Revision: 1.2 $ $Date: 2004/04/03 03:05:33 $\n+ * @version $Revision: 1.3 $ $Date: 2004/04/23 18:16:06 $\n  */\n public class PolynomialSplineFunction implements UnivariateRealFunction, Serializable {\n    \n             throw new IllegalArgumentException \n             (\"Number of polynomial interpolants must match the number of segments.\");\n         }\n-        \n-        // TODO: check that knots is increasing\n+        if (!isStrictlyIncreasing(knots)) {\n+            throw new IllegalArgumentException \n+                (\"Knot values must be strictly increasing.\");\n+        }\n         \n         this.n = knots.length -1;\n         this.knots = new double[n + 1];\n         return out;  \n     }\n \n+    /**\n+     * Determines if the given array is ordered in a strictly increasing\n+     * fashion.\n+     * @param x the array to examine.\n+     * @return <code>true</code> if the elements in <code>x</code> are ordered\n+     *         in a stricly increasing manner.  <code>false</code>, otherwise.\n+     */\n+    private static boolean isStrictlyIncreasing(double[] x) {\n+        for (int i = 1; i < x.length; ++i) {\n+            if (x[i - 1] >= x[i]) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n }", "timestamp": 1082744166, "metainfo": ""}