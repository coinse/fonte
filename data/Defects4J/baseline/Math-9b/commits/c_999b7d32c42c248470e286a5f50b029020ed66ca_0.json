{"sha": "999b7d32c42c248470e286a5f50b029020ed66ca", "log": "Removed references to deprecated MathRuntimeException (MATH-677).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n  */\n package org.apache.commons.math.transform;\n \n-import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateFunction;\n import org.apache.commons.math.complex.Complex;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.NonMonotonicSequenceException;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n \n  * </p>\n  * <p>As of version 2.0 this no longer implements Serializable.</p>\n  *\n- * @version $Id: FastCosineTransformer.java 1213585 2011-12-13 07:44:52Z\n- *          celestin $\n+ * @version $Id$\n  * @since 1.2\n  */\n public class FastCosineTransformer implements RealTransformer {\n         return new FastCosineTransformer(true);\n     }\n \n-    /** {@inheritDoc} */\n-    public double[] transform(double[] f) throws IllegalArgumentException {\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws MathIllegalArgumentException if the length of the data array is\n+     * not a power of two plus one\n+     */\n+    public double[] transform(double[] f) throws MathIllegalArgumentException {\n \n         if (orthogonal) {\n             final double s = FastMath.sqrt(2.0 / (f.length - 1));\n         return fct(f);\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws NonMonotonicSequenceException if the lower bound is greater\n+     * than, or equal to the upper bound\n+     * @throws NotStrictlyPositiveException if the number of sample points is\n+     * negative\n+     * @throws MathIllegalArgumentException if the number of sample points is\n+     * not a power of two plus one\n+     */\n     public double[] transform(UnivariateFunction f,\n-        double min, double max, int n) throws IllegalArgumentException {\n+        double min, double max, int n) throws\n+        NonMonotonicSequenceException,\n+        NotStrictlyPositiveException,\n+        MathIllegalArgumentException {\n \n         final double[] data = FastFourierTransformer.sample(f, min, max, n);\n         return transform(data);\n     }\n \n-    /** {@inheritDoc} */\n-    public double[] inverseTransform(double[] f)\n-        throws IllegalArgumentException {\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws MathIllegalArgumentException if the length of the data array is\n+     * not a power of two plus one\n+     */\n+    public double[] inverseTransform(double[] f) throws\n+        MathIllegalArgumentException {\n \n         final double s2 = 2.0 / (f.length - 1);\n         final double s1 = orthogonal ? FastMath.sqrt(s2) : s2;\n         return FastFourierTransformer.scaleArray(fct(f), s1);\n     }\n \n-    /** {@inheritDoc} */\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws NonMonotonicSequenceException if the lower bound is greater\n+     * than, or equal to the upper bound\n+     * @throws NotStrictlyPositiveException if the number of sample points is\n+     * negative\n+     * @throws MathIllegalArgumentException if the number of sample points is\n+     * not a power of two plus one\n+     */\n     public double[] inverseTransform(UnivariateFunction f,\n-        double min, double max, int n) throws IllegalArgumentException {\n+        double min, double max, int n) throws\n+        NonMonotonicSequenceException,\n+        NotStrictlyPositiveException,\n+        MathIllegalArgumentException {\n \n         final double[] data = FastFourierTransformer.sample(f, min, max, n);\n         return inverseTransform(data);\n      *\n      * @param f the real data array to be transformed\n      * @return the real transformed array\n-     * @throws IllegalArgumentException if any parameters are invalid\n+     * @throws MathIllegalArgumentException if the length of the data array is\n+     * not a power of two plus one\n      */\n     protected double[] fct(double[] f)\n-        throws IllegalArgumentException {\n+        throws MathIllegalArgumentException {\n \n         final double[] transformed = new double[f.length];\n \n         final int n = f.length - 1;\n         if (!FastFourierTransformer.isPowerOf2(n)) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.NOT_POWER_OF_TWO_PLUS_ONE,\n-                    f.length);\n+            throw new MathIllegalArgumentException(\n+                LocalizedFormats.NOT_POWER_OF_TWO_PLUS_ONE,\n+                Integer.valueOf(f.length));\n         }\n         if (n == 1) {       // trivial case\n             transformed[0] = 0.5 * (f[0] + f[1]);\n--- a/src/main/java/org/apache/commons/math/transform/RealTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/RealTransformer.java\n      *\n      * @param f the real data array to be transformed (signal)\n      * @return the real transformed array (spectrum)\n-     * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    double[] transform(double[] f)\n-        throws IllegalArgumentException;\n+    double[] transform(double[] f);\n \n     /**\n      * Returns the forward transform of the specified real function, sampled on\n      * @param max the (exclusive) upper bound for the interval\n      * @param n the number of sample points\n      * @return the real transformed array\n-     * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    double[] transform(UnivariateFunction f, double min, double max, int n)\n-        throws IllegalArgumentException;\n+    double[] transform(UnivariateFunction f, double min, double max, int n);\n \n     /**\n      * Returns the inverse transform of the specified real data set.\n      *\n      * @param f the real data array to be inversely transformed\n      * @return the real inversely transformed array\n-     * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    double[] inverseTransform(double[] f)\n-        throws IllegalArgumentException;\n+    double[] inverseTransform(double[] f);\n \n     /**\n      * Returns the inverse transform of the specified real function, sampled\n      * @param max the (exclusive) upper bound for the interval\n      * @param n the number of sample points\n      * @return the real inversely transformed array\n-     * @throws IllegalArgumentException if any parameters are invalid\n      */\n-    double[] inverseTransform(UnivariateFunction f, double min, double max, int n)\n-        throws IllegalArgumentException;\n-\n+    double[] inverseTransform(UnivariateFunction f, double min, double max, int n);\n }", "timestamp": 1325488798, "metainfo": ""}