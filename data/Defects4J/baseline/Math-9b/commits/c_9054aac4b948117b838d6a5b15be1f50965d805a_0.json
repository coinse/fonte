{"sha": "9054aac4b948117b838d6a5b15be1f50965d805a", "log": "Modified NormalDistributionImpl.cumulativeProbability to return 0 or 1, respectively for values more than 40 standard deviations from the mean. For these values, the actual probability is indistinguishable from 0 or 1 as a double.  Top coding improves performance for extreme values and prevents convergence exceptions.  JIRA: MATH-414  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n \n     /**\n      * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n+     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n+     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n      *\n      * @param x Value at which the CDF is evaluated.\n      * @return CDF evaluated at {@code x}.\n-     * @throws MathException if the algorithm fails to converge; unless\n-     * {@code x} is more than 20 standard deviations from the mean, in which\n-     * case the convergence exception is caught and 0 or 1 is returned.\n+     * @throws MathException if the algorithm fails to converge\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-        try {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n+        final double dev = x - mean;\n+        if (FastMath.abs(dev) > 40 * standardDeviation) { \n+            return dev < 0 ? 0.0d : 1.0d;\n+        }\n+        return 0.5 * (1.0 + Erf.erf((dev) /\n                     (standardDeviation * FastMath.sqrt(2.0))));\n-        } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n-            }\n-        }\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java\n \n     /**\n      * Check to make sure top-coding of extreme values works correctly.\n-     * Verifies fix for JIRA MATH-167\n+     * Verifies fixes for JIRA MATH-167, MATH-414\n      */\n     public void testExtremeValues() throws Exception {\n         NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n-        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n+        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n             double lowerTail = distribution.cumulativeProbability(-i);\n             double upperTail = distribution.cumulativeProbability(i);\n-            if (i < 10) { // make sure not top-coded\n+            if (i < 9) { // make sure not top-coded \n+                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n+                // TODO: once MATH-364 is resolved, replace 9 with 30\n                 assertTrue(lowerTail > 0.0d);\n                 assertTrue(upperTail < 1.0d);\n             }\n                 assertTrue(upperTail > 0.99999);\n             }\n         }\n+        \n+        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);\n+        assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);\n+        assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);\n+        assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);\n+        \n    }\n \n     public void testMath280() throws MathException {", "timestamp": 1291118122, "metainfo": ""}