{"sha": "71e7324bae5870477d27ff61650e974c0da5a238", "log": "MATH-854: populated throws clause of AbstractFieldMatrix.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java\n \n     /** {@inheritDoc} */\n     public void setRowMatrix(final int row, final FieldMatrix<T> matrix)\n-        throws OutOfRangeException {\n+        throws OutOfRangeException, MatrixDimensionMismatchException {\n         checkRowIndex(row);\n         final int nCols = getColumnDimension();\n         if ((matrix.getRowDimension() != 1) ||\n \n     /** {@inheritDoc} */\n     public void setColumnMatrix(final int column, final FieldMatrix<T> matrix)\n-        throws OutOfRangeException {\n+        throws OutOfRangeException, MatrixDimensionMismatchException {\n         checkColumnIndex(column);\n         final int nRows = getRowDimension();\n         if ((matrix.getRowDimension() != nRows) ||\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector<T> getRowVector(final int row) {\n+    public FieldVector<T> getRowVector(final int row)\n+        throws OutOfRangeException {\n         return new ArrayFieldVector<T>(field, getRow(row), false);\n     }\n \n     /** {@inheritDoc} */\n     public void setRowVector(final int row, final FieldVector<T> vector)\n-        throws OutOfRangeException {\n+        throws OutOfRangeException, MatrixDimensionMismatchException {\n         checkRowIndex(row);\n         final int nCols = getColumnDimension();\n         if (vector.getDimension() != nCols) {\n     }\n \n     /** {@inheritDoc} */\n-    public FieldVector<T> getColumnVector(final int column) {\n+    public FieldVector<T> getColumnVector(final int column)\n+        throws OutOfRangeException {\n         return new ArrayFieldVector<T>(field, getColumn(column), false);\n     }\n \n     /** {@inheritDoc} */\n     public void setColumnVector(final int column, final FieldVector<T> vector)\n-        throws OutOfRangeException {\n+        throws OutOfRangeException, MatrixDimensionMismatchException {\n \n         checkColumnIndex(column);\n         final int nRows = getRowDimension();\n     }\n \n     /** {@inheritDoc} */\n-    public void setRow(final int row, final T[] array) throws OutOfRangeException {\n+    public void setRow(final int row, final T[] array)\n+        throws OutOfRangeException, MatrixDimensionMismatchException {\n         checkRowIndex(row);\n         final int nCols = getColumnDimension();\n         if (array.length != nCols) {\n \n     /** {@inheritDoc} */\n     public void setColumn(final int column, final T[] array)\n-        throws OutOfRangeException {\n+        throws OutOfRangeException, MatrixDimensionMismatchException {\n         checkColumnIndex(column);\n         final int nRows = getRowDimension();\n         if (array.length != nRows) {\n     /** {@inheritDoc} */\n     public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor,\n                             final int startRow, final int endRow,\n-                            final int startColumn, final int endColumn) {\n+                            final int startColumn, final int endColumn)\n+        throws NumberIsTooSmallException, OutOfRangeException {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     /** {@inheritDoc} */\n     public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor,\n                             final int startRow, final int endRow,\n-                            final int startColumn, final int endColumn) {\n+                            final int startColumn, final int endColumn)\n+        throws NumberIsTooSmallException, OutOfRangeException {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     /** {@inheritDoc} */\n     public T walkInOptimizedOrder(final FieldMatrixChangingVisitor<T> visitor,\n                                   final int startRow, final int endRow,\n-                                  final int startColumn, final int endColumn) {\n+                                  final int startColumn, final int endColumn)\n+        throws NumberIsTooSmallException, OutOfRangeException {\n         return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);\n     }\n \n     /** {@inheritDoc} */\n     public T walkInOptimizedOrder(final FieldMatrixPreservingVisitor<T> visitor,\n                                   final int startRow, final int endRow,\n-                                  final int startColumn, final int endColumn) {\n+                                  final int startColumn, final int endColumn)\n+        throws NumberIsTooSmallException, OutOfRangeException {\n         return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);\n     }\n ", "timestamp": 1349155311, "metainfo": ""}