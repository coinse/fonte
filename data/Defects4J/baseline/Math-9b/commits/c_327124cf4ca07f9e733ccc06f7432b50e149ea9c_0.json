{"sha": "327124cf4ca07f9e733ccc06f7432b50e149ea9c", "log": "fixed an error with negative constraints and unfeasible solution JIRA: MATH-290  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n     private final LinearObjectiveFunction f;\n \n     /** Linear constraints. */\n-    private final Collection<LinearConstraint> constraints;\n+    private final List<LinearConstraint> constraints;\n \n     /** Whether to restrict the variables to non-negative values. */\n     private final boolean restrictToNonNegative;\n                    final GoalType goalType, final boolean restrictToNonNegative,\n                    final double epsilon) {\n         this.f                      = f;\n-        this.constraints            = constraints;\n+        this.constraints            = normalizeConstraints(constraints);\n         this.restrictToNonNegative  = restrictToNonNegative;\n         this.epsilon                = epsilon;\n         this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);\n     protected double[][] createTableau(final boolean maximize) {\n \n         // create a matrix of the correct size\n-        List<LinearConstraint> constraints = getNormalizedConstraints();\n         int width = numDecisionVariables + numSlackVariables +\n         numArtificialVariables + getNumObjectiveFunctions() + 1; // + 1 is for RHS\n         int height = constraints.size() + getNumObjectiveFunctions();\n \n     /**\n      * Get new versions of the constraints which have positive right hand sides.\n+     * @param constraints original (not normalized) constraints\n      * @return new versions of the constraints\n      */\n-    public List<LinearConstraint> getNormalizedConstraints() {\n+    public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> constraints) {\n         List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();\n         for (LinearConstraint constraint : constraints) {\n             normalized.add(normalize(constraint));\n--- a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n package org.apache.commons.math.optimization.linear;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n \n import java.util.ArrayList;\n import java.util.Collection;\n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n         assertEquals(10.0, solution.getValue(), .0000001);\n+    }\n+\n+    @Test\n+    public void testMath290() throws OptimizationException {\n+        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 5 }, 0 );\n+        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n+        constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.GEQ, -1.0));\n+        SimplexSolver solver = new SimplexSolver();\n+        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n+        assertNotNull(solution);\n     }\n \n     @Test", "timestamp": 1251276207, "metainfo": ""}