{"sha": "d6f6b71901744f34524767875e87c3cb8689ac61", "log": "MATH-503 Step function.   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/StepFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import java.util.Arrays;\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.util.MathUtils;\n+\n+/**\n+ * <a href=\"http://en.wikipedia.org/wiki/Step_function\">\n+ *  Step function</a>.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class StepFunction implements UnivariateRealFunction {\n+    /** Abscissae. */\n+    private final double[] abscissa;\n+    /** Ordinates. */\n+    private final double[] ordinate;\n+\n+    /**\n+     * Builds a step function from a list of abscissae and the corresponding\n+     * ordinates.\n+     *\n+     * @param x Abscissae.\n+     * @param y Ordinates.\n+     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * if the {@code x} array is not sorted in strictly increasing order.\n+     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n+     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n+     */\n+    public StepFunction(double[] x,\n+                        double[] y) {\n+        if (x == null ||\n+            y == null) {\n+            throw new NullArgumentException();\n+        }\n+        if (x.length == 0 ||\n+            y.length == 0) {\n+            throw new NoDataException();\n+        }\n+        if (y.length != x.length) {\n+            throw new DimensionMismatchException(y.length, x.length);\n+        }\n+        MathUtils.checkOrder(x);\n+\n+        abscissa = MathUtils.copyOf(x);\n+        ordinate = MathUtils.copyOf(y);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        int index = Arrays.binarySearch(abscissa, x);\n+        double fx = 0;\n+\n+        if (index < -1) {\n+            // \"x\" is between \"abscissa[-index-2]\" and \"abscissa[-index-1]\".\n+            fx = ordinate[-index-2];\n+        } else if (index >= 0) {\n+            // \"x\" is exactly \"abscissa[index]\".\n+            fx = ordinate[index];\n+        } else {\n+            // Otherwise, \"x\" is smaller than the first value in \"abscissa\"\n+            // (hence the returned value should be \"ordinate[0]\").\n+            fx = ordinate[0];\n+        }\n+\n+        return fx;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/analysis/function/StepFunctionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NonMonotonousSequenceException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NoDataException;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for class {@link StepFunction}.\n+ */\n+public class StepFunctionTest {\n+    private final double EPS = Math.ulp(1d);\n+\n+    @Test\n+    public void testPreconditions() {\n+        try {\n+            final UnivariateRealFunction f = new StepFunction(null,\n+                                                              new double[] {0, -1, -2});\n+        } catch (NullArgumentException e) {\n+            // Expected.\n+        }\n+        try {\n+            final UnivariateRealFunction f = new StepFunction(new double[] {0, 1},\n+                                                              null);\n+        } catch (NullArgumentException e) {\n+            // Expected.\n+        }\n+\n+        try {\n+            final UnivariateRealFunction f = new StepFunction(new double[] {0},\n+                                                              new double[] {});\n+        } catch (NoDataException e) {\n+            // Expected.\n+        }\n+\n+        try {\n+            final UnivariateRealFunction f = new StepFunction(new double[] {},\n+                                                              new double[] {0});\n+        } catch (NoDataException e) {\n+            // Expected.\n+        }\n+\n+        try {\n+            final UnivariateRealFunction f = new StepFunction(new double[] {0, 1},\n+                                                              new double[] {0, -1, -2});\n+        } catch (DimensionMismatchException e) {\n+            // Expected.\n+        }\n+\n+        try {\n+            final UnivariateRealFunction f = new StepFunction(new double[] {1, 0, 1},\n+                                                              new double[] {0, -1, -2});\n+        } catch (NonMonotonousSequenceException e) {\n+            // Expected.\n+        }\n+    }\n+\n+    @Test\n+    public void testSomeValues() {\n+        final double[] x = { -2, -0.5, 0, 1.9, 7.4, 21.3 };\n+        final double[] y = { 4, -1, -5.5, 0.4, 5.8, 51.2 };\n+\n+        final UnivariateRealFunction f = new StepFunction(x, y);\n+\n+        Assert.assertEquals(4, f.value(Double.NEGATIVE_INFINITY), EPS);\n+        Assert.assertEquals(4, f.value(-10), EPS);\n+        Assert.assertEquals(-1, f.value(-0.4), EPS);\n+        Assert.assertEquals(-5.5, f.value(0), EPS);\n+        Assert.assertEquals(0.4, f.value(2), EPS);\n+        Assert.assertEquals(5.8, f.value(10), EPS);\n+        Assert.assertEquals(51.2, f.value(30), EPS);\n+        Assert.assertEquals(51.2, f.value(Double.POSITIVE_INFINITY), EPS);\n+    }\n+}", "timestamp": 1296561663, "metainfo": ""}