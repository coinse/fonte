{"sha": "70d2c6473024a9d26fbd96dd1cab5066dab74861", "log": "Changed evaluate method to use embedded moments instead of duplicating code.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.25 $ $Date: 2004/07/04 09:02:36 $\n+ * @version $Revision: 1.26 $ $Date: 2004/07/04 22:06:07 $\n  */\n public class Kurtosis extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n         // Initialize the kurtosis  \n         double kurt = Double.NaN;   \n         \n-        if (test(values, begin, length) && length > 3) {\n-            Mean mean = new Mean();          \n-            // Get the mean and the standard deviation\n-            double m = mean.evaluate(values, begin, length);\n+        if (test(values, begin, length) && length > 3) {       \n             \n-            // Calc the std, this is implemented here instead\n-            // of using the standardDeviation method eliminate\n-            // a duplicate pass to get the mean\n-            double accum = 0.0;\n-            double accum2 = 0.0;\n-            for (int i = begin; i < begin + length; i++) {\n-                accum += Math.pow((values[i] - m), 2.0);\n-                accum2 += (values[i] - m);\n-            }\n-            \n-            double stdDev =Math.sqrt(\n-                        (accum - (Math.pow(accum2, 2) / ((double) length))) /\n-                        (double) (length - 1));\n+            // Compute the mean and standard deviation\n+            Variance variance = new Variance();\n+            variance.incrementAll(values, begin, length);\n+            double mean = variance.moment.m1;\n+            double stdDev = Math.sqrt(variance.getResult());\n             \n             // Sum the ^4 of the distance from the mean divided by the\n             // standard deviation\n             double accum3 = 0.0;\n             for (int i = begin; i < begin + length; i++) {\n-                accum3 += Math.pow((values[i] - m), 4.0);\n+                accum3 += Math.pow((values[i] - mean), 4.0);\n             }\n             accum3 /= Math.pow(stdDev, 4.0d);\n             \n             \n             // Calculate kurtosis\n             kurt = (coefficientOne * accum3) - termTwo;\n-        }\n-        \n+        }       \n         return kurt;\n     }\n ", "timestamp": 1088978767, "metainfo": ""}