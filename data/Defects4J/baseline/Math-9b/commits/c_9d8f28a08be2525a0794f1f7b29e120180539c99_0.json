{"sha": "9d8f28a08be2525a0794f1f7b29e120180539c99", "log": "MATH-663 Removed \"getData\" method in \"RealVector\"; replaced calls with \"toArray()\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/filter/KalmanFilter.java\n+++ b/src/main/java/org/apache/commons/math/filter/KalmanFilter.java\n      * @return the state estimation vector\n      */\n     public double[] getStateEstimation() {\n-        return stateEstimation.getData();\n+        return stateEstimation.toArray();\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n         }\n     }\n \n-    /** {@inheritDoc} */\n-    @Override\n-    public double[] getData() {\n-        return data.clone();\n-    }\n-\n     /**\n      * Get a reference to the underlying data array.\n      * This method does not make a fresh copy of the underlying data.\n--- a/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n                 throw new DimensionMismatchException(b.getDimension(), m);\n             }\n \n-            final double[] x = b.getData();\n+            final double[] x = b.toArray();\n \n             // Solve LY = b\n             for (int j = 0; j < m; j++) {\n--- a/src/main/java/org/apache/commons/math/linear/InvertibleRealLinearOperator.java\n+++ b/src/main/java/org/apache/commons/math/linear/InvertibleRealLinearOperator.java\n         if (x instanceof ArrayRealVector) {\n             return ((ArrayRealVector) x).getDataRef();\n         } else {\n-            return x.getData();\n+            return x.toArray();\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n     }\n \n     /** {@inheritDoc} */\n-    @Override\n-    public double[] getData() {\n-        double[] res = new double[virtualSize];\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res[iter.key()] = iter.value();\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n     public int getDimension() {\n         return virtualSize;\n     }\n     /** {@inheritDoc} */\n     @Override\n     public double[] toArray() {\n-        return getData();\n+        double[] res = new double[virtualSize];\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            res[iter.key()] = iter.value();\n+        }\n+        return res;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVector.java\n     }\n \n     /**\n-     * Convert the vector to an array of {@code double}s.\n-     * The array is independent from this vector data: the elements\n-     * are copied.\n-     *\n-     * @return an array containing a copy of the vector elements.\n-     */\n-    public double[] getData() {\n-        return toArray();\n-    }\n-\n-    /**\n      * Creates a unit vector pointing in the direction of this vector.\n      * The instance is not changed by this method.\n      *\n         return new RealVector() {\n             /** {@inheritDoc} */\n             @Override\n-            public double[] getData() {\n-                return v.getData();\n-            }\n-\n-            /** {@inheritDoc} */\n-            @Override\n             public RealVector mapToSelf(UnivariateRealFunction function) {\n                 throw new MathUnsupportedOperationException();\n             }\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n                 }\n             }\n \n-            f = computeObjectiveValue(currentBest.getData());\n+            f = computeObjectiveValue(currentBest.toArray());\n             \n             if (!isMinimize)\n                 f = -f;\n                 }\n             }\n             \n-            final double objectiveValue = computeObjectiveValue(currentBest.getData());\n+            final double objectiveValue = computeObjectiveValue(currentBest.toArray());\n             final double f = isMinimize ? objectiveValue : -objectiveValue;\n             final int numEval = getEvaluations(); // nfm + 1\n             fval.setEntry(nfm, f);\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n         matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);\n         RealVector objectiveCoefficients =\n             maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();\n-        copyArray(objectiveCoefficients.getData(), matrix.getDataRef()[zIndex]);\n+        copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);\n         matrix.setEntry(zIndex, width - 1,\n             maximize ? f.getConstantTerm() : -1 * f.getConstantTerm());\n \n             int row = getNumObjectiveFunctions() + i;\n \n             // decision variable coefficients\n-            copyArray(constraint.getCoefficients().getData(), matrix.getDataRef()[row]);\n+            copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);\n \n             // x-\n             if (!restrictToNonNegative) {\n      */\n     protected static double getInvertedCoefficientSum(final RealVector coefficients) {\n         double sum = 0;\n-        for (double coefficient : coefficients.getData()) {\n+        for (double coefficient : coefficients.toArray()) {\n             sum -= coefficient;\n         }\n         return sum;\n--- a/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n      */\n     public double[] estimateRegressionParameters() {\n         RealVector b = calculateBeta();\n-        return b.getData();\n+        return b.toArray();\n     }\n \n     /**\n     public double[] estimateResiduals() {\n         RealVector b = calculateBeta();\n         RealVector e = Y.subtract(X.operate(b));\n-        return e.getData();\n+        return e.toArray();\n     }\n \n     /**\n      * @return Y variance\n      */\n     protected double calculateYVariance() {\n-        return new Variance().evaluate(Y.getData());\n+        return new Variance().evaluate(Y.toArray());\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n      */\n     public double calculateTotalSumOfSquares() {\n         if (isNoIntercept()) {\n-            return StatUtils.sumSq(Y.getData());\n+            return StatUtils.sumSq(Y.toArray());\n         } else {\n-            return new SecondMoment().evaluate(Y.getData());\n+            return new SecondMoment().evaluate(Y.toArray());\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java\n         TestUtils.assertEquals(\"identity operate\", testVector,\n                     m.operate(testVector), entryTolerance);\n         TestUtils.assertEquals(\"identity operate\", testVector,\n-                    m.operate(new ArrayRealVector(testVector)).getData(), entryTolerance);\n+                    m.operate(new ArrayRealVector(testVector)).toArray(), entryTolerance);\n         m = new Array2DRowRealMatrix(bigSingular);\n         try {\n             m.operate(testVector);\n         RealMatrix m = new Array2DRowRealMatrix(testData);\n         TestUtils.assertEquals(\"premultiply\", m.preMultiply(testVector),\n                     preMultTest, normTolerance);\n-        TestUtils.assertEquals(\"premultiply\", m.preMultiply(new ArrayRealVector(testVector).getData()),\n+        TestUtils.assertEquals(\"premultiply\", m.preMultiply(new ArrayRealVector(testVector).toArray()),\n                     preMultTest, normTolerance);\n         m = new Array2DRowRealMatrix(bigSingular);\n         try {\n--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n             throw unsupported();\n         }\n \n-        public double[] getData() {\n-            return data.clone();\n-        }\n-\n         public double dotProduct(RealVector v) {\n             double dot = 0;\n             for (int i = 0; i < data.length; i++) {\n         Assert.assertEquals(\"testData len\", 3, v3_bis.getDimension());\n         Assert.assertEquals(\"testData is 2.0 \", 2.0, v3_bis.getEntry(1), 0);\n         Assert.assertNotSame(v3_bis.getDataRef(), vec1);\n-        Assert.assertNotSame(v3_bis.getData(), vec1);\n+        Assert.assertNotSame(v3_bis.toArray(), vec1);\n \n         ArrayRealVector v3_ter = new ArrayRealVector(vec1, false);\n         Assert.assertEquals(\"testData len\", 3, v3_ter.getDimension());\n         Assert.assertEquals(\"testData is 2.0 \", 2.0, v3_ter.getEntry(1), 0);\n         Assert.assertSame(v3_ter.getDataRef(), vec1);\n-        Assert.assertNotSame(v3_ter.getData(), vec1);\n+        Assert.assertNotSame(v3_ter.toArray(), vec1);\n \n         ArrayRealVector v4 = new ArrayRealVector(vec4, 3, 2);\n         Assert.assertEquals(\"testData len\", 2, v4.getDimension());\n \n         RealVector v_copy = v1.copy();\n         Assert.assertEquals(\"testData len\", 3, v_copy.getDimension());\n-        Assert.assertNotSame(\"testData not same object \", v1.data, v_copy.getData());\n+        Assert.assertNotSame(\"testData not same object \", v1.data, v_copy.toArray());\n \n         double[] a_double = v1.toArray();\n         Assert.assertEquals(\"testData len\", 3, a_double.length);\n         //octave =  v1 .+ 2.0\n         RealVector v_mapAdd = v1.mapAdd(2.0d);\n         double[] result_mapAdd = {3d, 4d, 5d};\n-        assertClose(\"compare vectors\" ,result_mapAdd,v_mapAdd.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAdd,v_mapAdd.toArray(),normTolerance);\n \n         //octave =  v1 .+ 2.0\n         RealVector v_mapAddToSelf = v1.copy();\n         v_mapAddToSelf.mapAddToSelf(2.0d);\n         double[] result_mapAddToSelf = {3d, 4d, 5d};\n-        assertClose(\"compare vectors\" ,result_mapAddToSelf,v_mapAddToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAddToSelf,v_mapAddToSelf.toArray(),normTolerance);\n \n         //octave =  v1 .- 2.0\n         RealVector v_mapSubtract = v1.mapSubtract(2.0d);\n         double[] result_mapSubtract = {-1d, 0d, 1d};\n-        assertClose(\"compare vectors\" ,result_mapSubtract,v_mapSubtract.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSubtract,v_mapSubtract.toArray(),normTolerance);\n \n         //octave =  v1 .- 2.0\n         RealVector v_mapSubtractToSelf = v1.copy();\n         v_mapSubtractToSelf.mapSubtractToSelf(2.0d);\n         double[] result_mapSubtractToSelf = {-1d, 0d, 1d};\n-        assertClose(\"compare vectors\" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSubtractToSelf,v_mapSubtractToSelf.toArray(),normTolerance);\n \n         //octave =  v1 .* 2.0\n         RealVector v_mapMultiply = v1.mapMultiply(2.0d);\n         double[] result_mapMultiply = {2d, 4d, 6d};\n-        assertClose(\"compare vectors\" ,result_mapMultiply,v_mapMultiply.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapMultiply,v_mapMultiply.toArray(),normTolerance);\n \n         //octave =  v1 .* 2.0\n         RealVector v_mapMultiplyToSelf = v1.copy();\n         v_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);\n         double[] result_mapMultiplyToSelf = {2d, 4d, 6d};\n-        assertClose(\"compare vectors\" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.toArray(),normTolerance);\n \n         //octave =  v1 ./ 2.0\n         RealVector v_mapDivide = v1.mapDivide(2.0d);\n         double[] result_mapDivide = {.5d, 1d, 1.5d};\n-        assertClose(\"compare vectors\" ,result_mapDivide,v_mapDivide.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapDivide,v_mapDivide.toArray(),normTolerance);\n \n         //octave =  v1 ./ 2.0\n         RealVector v_mapDivideToSelf = v1.copy();\n         v_mapDivideToSelf.mapDivideToSelf(2.0d);\n         double[] result_mapDivideToSelf = {.5d, 1d, 1.5d};\n-        assertClose(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.toArray(),normTolerance);\n \n         //octave =  v1 .^ 2.0\n         RealVector v_mapPow = v1.map(new Power(2));\n         double[] result_mapPow = {1d, 4d, 9d};\n-        assertClose(\"compare vectors\" ,result_mapPow,v_mapPow.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapPow,v_mapPow.toArray(),normTolerance);\n \n         //octave =  v1 .^ 2.0\n         RealVector v_mapPowToSelf = v1.copy();\n         v_mapPowToSelf.mapToSelf(new Power(2));\n         double[] result_mapPowToSelf = {1d, 4d, 9d};\n-        assertClose(\"compare vectors\" ,result_mapPowToSelf,v_mapPowToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapPowToSelf,v_mapPowToSelf.toArray(),normTolerance);\n \n         //octave =  exp(v1)\n         RealVector v_mapExp = v1.map(new Exp());\n         double[] result_mapExp = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n-        assertClose(\"compare vectors\" ,result_mapExp,v_mapExp.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapExp,v_mapExp.toArray(),normTolerance);\n \n         //octave =  exp(v1)\n         RealVector v_mapExpToSelf = v1.copy();\n         v_mapExpToSelf.mapToSelf(new Exp());\n         double[] result_mapExpToSelf = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n-        assertClose(\"compare vectors\" ,result_mapExpToSelf,v_mapExpToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapExpToSelf,v_mapExpToSelf.toArray(),normTolerance);\n \n \n         //octave =  ???\n         RealVector v_mapExpm1 = v1.map(new Expm1());\n         double[] result_mapExpm1 = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n-        assertClose(\"compare vectors\" ,result_mapExpm1,v_mapExpm1.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapExpm1,v_mapExpm1.toArray(),normTolerance);\n \n         //octave =  ???\n         RealVector v_mapExpm1ToSelf = v1.copy();\n         v_mapExpm1ToSelf.mapToSelf(new Expm1());\n         double[] result_mapExpm1ToSelf = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n-        assertClose(\"compare vectors\" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.toArray(),normTolerance);\n \n         //octave =  log(v1)\n         RealVector v_mapLog = v1.map(new Log());\n         double[] result_mapLog = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n-        assertClose(\"compare vectors\" ,result_mapLog,v_mapLog.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapLog,v_mapLog.toArray(),normTolerance);\n \n         //octave =  log(v1)\n         RealVector v_mapLogToSelf = v1.copy();\n         v_mapLogToSelf.mapToSelf(new Log());\n         double[] result_mapLogToSelf = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n-        assertClose(\"compare vectors\" ,result_mapLogToSelf,v_mapLogToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapLogToSelf,v_mapLogToSelf.toArray(),normTolerance);\n \n         //octave =  log10(v1)\n         RealVector v_mapLog10 = v1.map(new Log10());\n         double[] result_mapLog10 = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n-        assertClose(\"compare vectors\" ,result_mapLog10,v_mapLog10.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapLog10,v_mapLog10.toArray(),normTolerance);\n \n         //octave =  log(v1)\n         RealVector v_mapLog10ToSelf = v1.copy();\n         v_mapLog10ToSelf.mapToSelf(new Log10());\n         double[] result_mapLog10ToSelf = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n-        assertClose(\"compare vectors\" ,result_mapLog10ToSelf,v_mapLog10ToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapLog10ToSelf,v_mapLog10ToSelf.toArray(),normTolerance);\n \n         //octave =  ???\n         RealVector v_mapLog1p = v1.map(new Log1p());\n         double[] result_mapLog1p = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n-        assertClose(\"compare vectors\" ,result_mapLog1p,v_mapLog1p.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapLog1p,v_mapLog1p.toArray(),normTolerance);\n \n         //octave =  ???\n         RealVector v_mapLog1pToSelf = v1.copy();\n         v_mapLog1pToSelf.mapToSelf(new Log1p());\n         double[] result_mapLog1pToSelf = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n-        assertClose(\"compare vectors\" ,result_mapLog1pToSelf,v_mapLog1pToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapLog1pToSelf,v_mapLog1pToSelf.toArray(),normTolerance);\n \n         //octave =  cosh(v1)\n         RealVector v_mapCosh = v1.map(new Cosh());\n         double[] result_mapCosh = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n-        assertClose(\"compare vectors\" ,result_mapCosh,v_mapCosh.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCosh,v_mapCosh.toArray(),normTolerance);\n \n         //octave =  cosh(v1)\n         RealVector v_mapCoshToSelf = v1.copy();\n         v_mapCoshToSelf.mapToSelf(new Cosh());\n         double[] result_mapCoshToSelf = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n-        assertClose(\"compare vectors\" ,result_mapCoshToSelf,v_mapCoshToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCoshToSelf,v_mapCoshToSelf.toArray(),normTolerance);\n \n         //octave =  sinh(v1)\n         RealVector v_mapSinh = v1.map(new Sinh());\n         double[] result_mapSinh = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n-        assertClose(\"compare vectors\" ,result_mapSinh,v_mapSinh.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSinh,v_mapSinh.toArray(),normTolerance);\n \n         //octave =  sinh(v1)\n         RealVector v_mapSinhToSelf = v1.copy();\n         v_mapSinhToSelf.mapToSelf(new Sinh());\n         double[] result_mapSinhToSelf = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n-        assertClose(\"compare vectors\" ,result_mapSinhToSelf,v_mapSinhToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSinhToSelf,v_mapSinhToSelf.toArray(),normTolerance);\n \n         //octave =  tanh(v1)\n         RealVector v_mapTanh = v1.map(new Tanh());\n         double[] result_mapTanh = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n-        assertClose(\"compare vectors\" ,result_mapTanh,v_mapTanh.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapTanh,v_mapTanh.toArray(),normTolerance);\n \n         //octave =  tanh(v1)\n         RealVector v_mapTanhToSelf = v1.copy();\n         v_mapTanhToSelf.mapToSelf(new Tanh());\n         double[] result_mapTanhToSelf = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n-        assertClose(\"compare vectors\" ,result_mapTanhToSelf,v_mapTanhToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapTanhToSelf,v_mapTanhToSelf.toArray(),normTolerance);\n \n         //octave =  cos(v1)\n         RealVector v_mapCos = v1.map(new Cos());\n         double[] result_mapCos = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n-        assertClose(\"compare vectors\" ,result_mapCos,v_mapCos.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCos,v_mapCos.toArray(),normTolerance);\n \n         //octave =  cos(v1)\n         RealVector v_mapCosToSelf = v1.copy();\n         v_mapCosToSelf.mapToSelf(new Cos());\n         double[] result_mapCosToSelf = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n-        assertClose(\"compare vectors\" ,result_mapCosToSelf,v_mapCosToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCosToSelf,v_mapCosToSelf.toArray(),normTolerance);\n \n         //octave =  sin(v1)\n         RealVector v_mapSin = v1.map(new Sin());\n         double[] result_mapSin = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n-        assertClose(\"compare vectors\" ,result_mapSin,v_mapSin.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSin,v_mapSin.toArray(),normTolerance);\n \n         //octave =  sin(v1)\n         RealVector v_mapSinToSelf = v1.copy();\n         v_mapSinToSelf.mapToSelf(new Sin());\n         double[] result_mapSinToSelf = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n-        assertClose(\"compare vectors\" ,result_mapSinToSelf,v_mapSinToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSinToSelf,v_mapSinToSelf.toArray(),normTolerance);\n \n         //octave =  tan(v1)\n         RealVector v_mapTan = v1.map(new Tan());\n         double[] result_mapTan = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n-        assertClose(\"compare vectors\" ,result_mapTan,v_mapTan.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapTan,v_mapTan.toArray(),normTolerance);\n \n         //octave =  tan(v1)\n         RealVector v_mapTanToSelf = v1.copy();\n         v_mapTanToSelf.mapToSelf(new Tan());\n         double[] result_mapTanToSelf = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n-        assertClose(\"compare vectors\" ,result_mapTanToSelf,v_mapTanToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapTanToSelf,v_mapTanToSelf.toArray(),normTolerance);\n \n         double[] vat_a = {0d, 0.5d, 1.0d};\n         ArrayRealVector vat = new ArrayRealVector(vat_a);\n         //octave =  acos(vat)\n         RealVector v_mapAcos = vat.map(new Acos());\n         double[] result_mapAcos = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n-        assertClose(\"compare vectors\" ,result_mapAcos,v_mapAcos.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAcos,v_mapAcos.toArray(),normTolerance);\n \n         //octave =  acos(vat)\n         RealVector v_mapAcosToSelf = vat.copy();\n         v_mapAcosToSelf.mapToSelf(new Acos());\n         double[] result_mapAcosToSelf = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n-        assertClose(\"compare vectors\" ,result_mapAcosToSelf,v_mapAcosToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAcosToSelf,v_mapAcosToSelf.toArray(),normTolerance);\n \n         //octave =  asin(vat)\n         RealVector v_mapAsin = vat.map(new Asin());\n         double[] result_mapAsin = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n-        assertClose(\"compare vectors\" ,result_mapAsin,v_mapAsin.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAsin,v_mapAsin.toArray(),normTolerance);\n \n         //octave =  asin(vat)\n         RealVector v_mapAsinToSelf = vat.copy();\n         v_mapAsinToSelf.mapToSelf(new Asin());\n         double[] result_mapAsinToSelf = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n-        assertClose(\"compare vectors\" ,result_mapAsinToSelf,v_mapAsinToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAsinToSelf,v_mapAsinToSelf.toArray(),normTolerance);\n \n         //octave =  atan(vat)\n         RealVector v_mapAtan = vat.map(new Atan());\n         double[] result_mapAtan = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n-        assertClose(\"compare vectors\" ,result_mapAtan,v_mapAtan.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAtan,v_mapAtan.toArray(),normTolerance);\n \n         //octave =  atan(vat)\n         RealVector v_mapAtanToSelf = vat.copy();\n         v_mapAtanToSelf.mapToSelf(new Atan());\n         double[] result_mapAtanToSelf = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n-        assertClose(\"compare vectors\" ,result_mapAtanToSelf,v_mapAtanToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAtanToSelf,v_mapAtanToSelf.toArray(),normTolerance);\n \n         //octave =  v1 .^-1\n         RealVector v_mapInv = v1.map(new Inverse());\n         double[] result_mapInv = {1d,0.5d,3.333333333333333e-01d};\n-        assertClose(\"compare vectors\" ,result_mapInv,v_mapInv.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapInv,v_mapInv.toArray(),normTolerance);\n \n         //octave =  v1 .^-1\n         RealVector v_mapInvToSelf = v1.copy();\n         v_mapInvToSelf.mapToSelf(new Inverse());\n         double[] result_mapInvToSelf = {1d,0.5d,3.333333333333333e-01d};\n-        assertClose(\"compare vectors\" ,result_mapInvToSelf,v_mapInvToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapInvToSelf,v_mapInvToSelf.toArray(),normTolerance);\n \n         double[] abs_a = {-1.0d, 0.0d, 1.0d};\n         ArrayRealVector abs_v = new ArrayRealVector(abs_a);\n         //octave =  abs(abs_v)\n         RealVector v_mapAbs = abs_v.map(new Abs());\n         double[] result_mapAbs = {1d,0d,1d};\n-        assertClose(\"compare vectors\" ,result_mapAbs,v_mapAbs.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAbs,v_mapAbs.toArray(),normTolerance);\n \n         //octave = abs(abs_v)\n         RealVector v_mapAbsToSelf = abs_v.copy();\n         v_mapAbsToSelf.mapToSelf(new Abs());\n         double[] result_mapAbsToSelf = {1d,0d,1d};\n-        assertClose(\"compare vectors\" ,result_mapAbsToSelf,v_mapAbsToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAbsToSelf,v_mapAbsToSelf.toArray(),normTolerance);\n \n         //octave =   sqrt(v1)\n         RealVector v_mapSqrt = v1.map(new Sqrt());\n         double[] result_mapSqrt = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n-        assertClose(\"compare vectors\" ,result_mapSqrt,v_mapSqrt.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSqrt,v_mapSqrt.toArray(),normTolerance);\n \n         //octave =  sqrt(v1)\n         RealVector v_mapSqrtToSelf = v1.copy();\n         v_mapSqrtToSelf.mapToSelf(new Sqrt());\n         double[] result_mapSqrtToSelf = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n-        assertClose(\"compare vectors\" ,result_mapSqrtToSelf,v_mapSqrtToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSqrtToSelf,v_mapSqrtToSelf.toArray(),normTolerance);\n \n         double[] cbrt_a = {-2.0d, 0.0d, 2.0d};\n         ArrayRealVector cbrt_v = new ArrayRealVector(cbrt_a);\n         //octave =  ???\n         RealVector v_mapCbrt = cbrt_v.map(new Cbrt());\n         double[] result_mapCbrt = {-1.2599210498948732d,0d,1.2599210498948732d};\n-        assertClose(\"compare vectors\" ,result_mapCbrt,v_mapCbrt.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCbrt,v_mapCbrt.toArray(),normTolerance);\n \n         //octave = ???\n         RealVector v_mapCbrtToSelf = cbrt_v.copy();\n         v_mapCbrtToSelf.mapToSelf(new Cbrt());\n         double[] result_mapCbrtToSelf =  {-1.2599210498948732d,0d,1.2599210498948732d};\n-        assertClose(\"compare vectors\" ,result_mapCbrtToSelf,v_mapCbrtToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCbrtToSelf,v_mapCbrtToSelf.toArray(),normTolerance);\n \n         double[] ceil_a = {-1.1d, 0.9d, 1.1d};\n         ArrayRealVector ceil_v = new ArrayRealVector(ceil_a);\n         //octave =  ceil(ceil_v)\n         RealVector v_mapCeil = ceil_v.map(new Ceil());\n         double[] result_mapCeil = {-1d,1d,2d};\n-        assertClose(\"compare vectors\" ,result_mapCeil,v_mapCeil.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCeil,v_mapCeil.toArray(),normTolerance);\n \n         //octave = ceil(ceil_v)\n         RealVector v_mapCeilToSelf = ceil_v.copy();\n         v_mapCeilToSelf.mapToSelf(new Ceil());\n         double[] result_mapCeilToSelf =  {-1d,1d,2d};\n-        assertClose(\"compare vectors\" ,result_mapCeilToSelf,v_mapCeilToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCeilToSelf,v_mapCeilToSelf.toArray(),normTolerance);\n \n         //octave =  floor(ceil_v)\n         RealVector v_mapFloor = ceil_v.map(new Floor());\n         double[] result_mapFloor = {-2d,0d,1d};\n-        assertClose(\"compare vectors\" ,result_mapFloor,v_mapFloor.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapFloor,v_mapFloor.toArray(),normTolerance);\n \n         //octave = floor(ceil_v)\n         RealVector v_mapFloorToSelf = ceil_v.copy();\n         v_mapFloorToSelf.mapToSelf(new Floor());\n         double[] result_mapFloorToSelf =  {-2d,0d,1d};\n-        assertClose(\"compare vectors\" ,result_mapFloorToSelf,v_mapFloorToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapFloorToSelf,v_mapFloorToSelf.toArray(),normTolerance);\n \n         //octave =  ???\n         RealVector v_mapRint = ceil_v.map(new Rint());\n         double[] result_mapRint = {-1d,1d,1d};\n-        assertClose(\"compare vectors\" ,result_mapRint,v_mapRint.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapRint,v_mapRint.toArray(),normTolerance);\n \n         //octave = ???\n         RealVector v_mapRintToSelf = ceil_v.copy();\n         v_mapRintToSelf.mapToSelf(new Rint());\n         double[] result_mapRintToSelf =  {-1d,1d,1d};\n-        assertClose(\"compare vectors\" ,result_mapRintToSelf,v_mapRintToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapRintToSelf,v_mapRintToSelf.toArray(),normTolerance);\n \n         //octave =  ???\n         RealVector v_mapSignum = ceil_v.map(new Signum());\n         double[] result_mapSignum = {-1d,1d,1d};\n-        assertClose(\"compare vectors\" ,result_mapSignum,v_mapSignum.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSignum,v_mapSignum.toArray(),normTolerance);\n \n         //octave = ???\n         RealVector v_mapSignumToSelf = ceil_v.copy();\n         v_mapSignumToSelf.mapToSelf(new Signum());\n         double[] result_mapSignumToSelf =  {-1d,1d,1d};\n-        assertClose(\"compare vectors\" ,result_mapSignumToSelf,v_mapSignumToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSignumToSelf,v_mapSignumToSelf.toArray(),normTolerance);\n \n \n         // Is with the used resolutions of limited value as test\n         //octave =  ???\n         RealVector v_mapUlp = ceil_v.map(new Ulp());\n         double[] result_mapUlp = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n-        assertClose(\"compare vectors\" ,result_mapUlp,v_mapUlp.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapUlp,v_mapUlp.toArray(),normTolerance);\n \n         //octave = ???\n         RealVector v_mapUlpToSelf = ceil_v.copy();\n         v_mapUlpToSelf.mapToSelf(new Ulp());\n         double[] result_mapUlpToSelf = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n-        assertClose(\"compare vectors\" ,result_mapUlpToSelf,v_mapUlpToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapUlpToSelf,v_mapUlpToSelf.toArray(),normTolerance);\n     }\n \n     @Test\n         //octave =  v1 + v2\n         ArrayRealVector v_add = v1.add(v2);\n         double[] result_add = {5d, 7d, 9d};\n-        assertClose(\"compare vect\" ,v_add.getData(), result_add, normTolerance);\n+        assertClose(\"compare vect\" ,v_add.toArray(), result_add, normTolerance);\n \n         RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n         RealVector v_add_i = v1.add(vt2);\n         double[] result_add_i = {5d, 7d, 9d};\n-        assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);\n+        assertClose(\"compare vect\" ,v_add_i.toArray(),result_add_i,normTolerance);\n \n         //octave =  v1 - v2\n         ArrayRealVector v_subtract = v1.subtract(v2);\n         double[] result_subtract = {-3d, -3d, -3d};\n-        assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);\n+        assertClose(\"compare vect\" ,v_subtract.toArray(),result_subtract,normTolerance);\n \n         RealVector v_subtract_i = v1.subtract(vt2);\n         double[] result_subtract_i = {-3d, -3d, -3d};\n-        assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);\n+        assertClose(\"compare vect\" ,v_subtract_i.toArray(),result_subtract_i,normTolerance);\n \n         // octave v1 .* v2\n         ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n         double[] result_ebeMultiply = {4d, 10d, 18d};\n-        assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);\n+        assertClose(\"compare vect\" ,v_ebeMultiply.toArray(),result_ebeMultiply,normTolerance);\n \n         RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n         double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n-        assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);\n+        assertClose(\"compare vect\" ,v_ebeMultiply_2.toArray(),result_ebeMultiply_2,normTolerance);\n \n         RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n         double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n-        assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);\n+        assertClose(\"compare vect\" ,v_ebeMultiply_3.toArray(),result_ebeMultiply_3,normTolerance);\n \n         // octave v1 ./ v2\n         ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n         double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n-        assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);\n+        assertClose(\"compare vect\" ,v_ebeDivide.toArray(),result_ebeDivide,normTolerance);\n \n         RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n         double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n-        assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);\n+        assertClose(\"compare vect\" ,v_ebeDivide_2.toArray(),result_ebeDivide_2,normTolerance);\n \n         RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n         double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n-        assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);\n+        assertClose(\"compare vect\" ,v_ebeDivide_3.toArray(),result_ebeDivide_3,normTolerance);\n \n         // octave  dot(v1,v2)\n         double dot =  v1.dotProduct(v2);\n \n         RealVector v_unitVector = v1.unitVector();\n         RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n-        assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);\n+        assertClose(\"compare vect\" ,v_unitVector.toArray(),v_unitVector_2.toArray(),normTolerance);\n \n         try {\n             v_null.unitVector();\n \n         ArrayRealVector v_unitize = v1.copy();\n         v_unitize.unitize();\n-        assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);\n+        assertClose(\"compare vect\" ,v_unitVector_2.toArray(),v_unitize.toArray(),normTolerance);\n         try {\n             v_null.unitize();\n             Assert.fail(\"Expecting MathArithmeticException\");\n \n         RealVector v_projection = v1.projection(v2);\n         double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n-        assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);\n+        assertClose(\"compare vect\", v_projection.toArray(), result_projection, normTolerance);\n \n         RealVector v_projection_2 = v1.projection(v2_t);\n         double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n-        assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);\n+        assertClose(\"compare vect\", v_projection_2.toArray(), result_projection_2, normTolerance);\n     }\n \n     @Test\n             y.setEntry(i, yi);\n             expected[i] = a * xi + b * yi;\n         }\n-        final double[] actual = x.combine(a, b, y).getData();\n+        final double[] actual = x.combine(a, b, y).toArray();\n         for (int i = 0; i < dim; i++) {\n             final double delta;\n             if (expected[i] == 0d) {\n             y.setEntry(i, yi);\n             expected[i] = a * xi + b * yi;\n         }\n-        final double[] actual = x.combine(a, b, y).getData();\n+        final double[] actual = x.combine(a, b, y).toArray();\n         for (int i = 0; i < dim; i++) {\n             final double delta;\n             if (expected[i] == 0d) {\n             expected[i] = a * xi + b * yi;\n         }\n         Assert.assertSame(x, x.combineToSelf(a, b, y));\n-        final double[] actual = x.getData();\n+        final double[] actual = x.toArray();\n         for (int i = 0; i < dim; i++) {\n             final double delta;\n             if (expected[i] == 0d) {\n             expected[i] = a * xi + b * yi;\n         }\n         Assert.assertSame(x, x.combineToSelf(a, b, y));\n-        final double[] actual = x.getData();\n+        final double[] actual = x.toArray();\n         for (int i = 0; i < dim; i++) {\n             final double delta;\n             if (expected[i] == 0d) {\n--- a/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java\n     public void testOperate() {\n         RealMatrix m = new BlockRealMatrix(id);\n         assertClose(testVector, m.operate(testVector), entryTolerance);\n-        assertClose(testVector, m.operate(new ArrayRealVector(testVector)).getData(), entryTolerance);\n+        assertClose(testVector, m.operate(new ArrayRealVector(testVector)).toArray(), entryTolerance);\n         m = new BlockRealMatrix(bigSingular);\n         try {\n             m.operate(testVector);\n     public void testPremultiplyVector() {\n         RealMatrix m = new BlockRealMatrix(testData);\n         assertClose(m.preMultiply(testVector), preMultTest, normTolerance);\n-        assertClose(m.preMultiply(new ArrayRealVector(testVector).getData()),\n+        assertClose(m.preMultiply(new ArrayRealVector(testVector).toArray()),\n                     preMultTest, normTolerance);\n         m = new BlockRealMatrix(bigSingular);\n         try {\n--- a/src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java\n                        false);\n         RealVector b = new ArrayRealVector(new double[] { 2,3,4,8 }, false);\n         MatrixUtils.solveLowerTriangularSystem(rm, b);\n-        TestUtils.assertEquals( new double[]{1,2,-1.66666666666667, 1.0}  , b.getData() , 1.0e-12);\n+        TestUtils.assertEquals( new double[]{1,2,-1.66666666666667, 1.0}  , b.toArray() , 1.0e-12);\n     }\n     \n      \n                        false);\n         RealVector b = new ArrayRealVector(new double[] { 8,4,2 }, false);\n         MatrixUtils.solveUpperTriangularSystem(rm, b);\n-        TestUtils.assertEquals( new double[]{-1,3,1}  , b.getData() , 1.0e-12);\n+        TestUtils.assertEquals( new double[]{-1,3,1}  , b.toArray() , 1.0e-12);\n     }\n }\n \n--- a/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java\n         assertClose(\"identity operate\", testVector, m.operate(testVector),\n                 entryTolerance);\n         assertClose(\"identity operate\", testVector, m.operate(\n-                new ArrayRealVector(testVector)).getData(), entryTolerance);\n+                new ArrayRealVector(testVector)).toArray(), entryTolerance);\n         m = createSparseMatrix(bigSingular);\n         try {\n             m.operate(testVector);\n         assertClose(\"premultiply\", m.preMultiply(testVector), preMultTest,\n             normTolerance);\n         assertClose(\"premultiply\", m.preMultiply(\n-            new ArrayRealVector(testVector).getData()), preMultTest, normTolerance);\n+            new ArrayRealVector(testVector).toArray()), preMultTest, normTolerance);\n         m = createSparseMatrix(bigSingular);\n         try {\n             m.preMultiply(testVector);\n--- a/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n         }\n \n         @Override\n-        public double[] getData() {\n-            return data.clone();\n-        }\n-\n-        @Override\n         public double dotProduct(RealVector v) {\n             double dot = 0;\n             for (int i = 0; i < data.length; i++) {\n \n         @Override\n         public double[] toArray() {\n-            throw unsupported();\n+            return data.clone();\n         }\n \n         public boolean isNaN() {\n         //octave =  v1 .+ 2.0\n         RealVector v_mapAdd = v1.mapAdd(2.0d);\n         double[] result_mapAdd = {3d, 4d, 5d};\n-        assertClose(\"compare vectors\" ,result_mapAdd,v_mapAdd.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAdd,v_mapAdd.toArray(),normTolerance);\n \n         //octave =  v1 .+ 2.0\n         RealVector v_mapAddToSelf = v1.copy();\n         v_mapAddToSelf.mapAddToSelf(2.0d);\n         double[] result_mapAddToSelf = {3d, 4d, 5d};\n-        assertClose(\"compare vectors\" ,result_mapAddToSelf,v_mapAddToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAddToSelf,v_mapAddToSelf.toArray(),normTolerance);\n \n         //octave =  v1 .- 2.0\n         RealVector v_mapSubtract = v1.mapSubtract(2.0d);\n         double[] result_mapSubtract = {-1d, 0d, 1d};\n-        assertClose(\"compare vectors\" ,result_mapSubtract,v_mapSubtract.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSubtract,v_mapSubtract.toArray(),normTolerance);\n \n         //octave =  v1 .- 2.0\n         RealVector v_mapSubtractToSelf = v1.copy();\n         v_mapSubtractToSelf.mapSubtractToSelf(2.0d);\n         double[] result_mapSubtractToSelf = {-1d, 0d, 1d};\n-        assertClose(\"compare vectors\" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSubtractToSelf,v_mapSubtractToSelf.toArray(),normTolerance);\n \n         //octave =  v1 .* 2.0\n         RealVector v_mapMultiply = v1.mapMultiply(2.0d);\n         double[] result_mapMultiply = {2d, 4d, 6d};\n-        assertClose(\"compare vectors\" ,result_mapMultiply,v_mapMultiply.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapMultiply,v_mapMultiply.toArray(),normTolerance);\n \n         //octave =  v1 .* 2.0\n         RealVector v_mapMultiplyToSelf = v1.copy();\n         v_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);\n         double[] result_mapMultiplyToSelf = {2d, 4d, 6d};\n-        assertClose(\"compare vectors\" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.toArray(),normTolerance);\n \n         //octave =  v1 ./ 2.0\n         RealVector v_mapDivide = v1.mapDivide(2.0d);\n         double[] result_mapDivide = {.5d, 1d, 1.5d};\n-        assertClose(\"compare vectors\" ,result_mapDivide,v_mapDivide.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapDivide,v_mapDivide.toArray(),normTolerance);\n \n         //octave =  v1 ./ 2.0\n         RealVector v_mapDivideToSelf = v1.copy();\n         v_mapDivideToSelf.mapDivideToSelf(2.0d);\n         double[] result_mapDivideToSelf = {.5d, 1d, 1.5d};\n-        assertClose(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.toArray(),normTolerance);\n \n         //octave =  v1 .^ 2.0\n         RealVector v_mapPow = v1.map(new Power(2));\n         double[] result_mapPow = {1d, 4d, 9d};\n-        assertClose(\"compare vectors\" ,result_mapPow,v_mapPow.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapPow,v_mapPow.toArray(),normTolerance);\n \n         //octave =  v1 .^ 2.0\n         RealVector v_mapPowToSelf = v1.copy();\n         v_mapPowToSelf.mapToSelf(new Power(2));\n         double[] result_mapPowToSelf = {1d, 4d, 9d};\n-        assertClose(\"compare vectors\" ,result_mapPowToSelf,v_mapPowToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapPowToSelf,v_mapPowToSelf.toArray(),normTolerance);\n \n         //octave =  exp(v1)\n         RealVector v_mapExp = v1.map(new Exp());\n         double[] result_mapExp = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n-        assertClose(\"compare vectors\" ,result_mapExp,v_mapExp.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapExp,v_mapExp.toArray(),normTolerance);\n \n         //octave =  exp(v1)\n         RealVector v_mapExpToSelf = v1.copy();\n         v_mapExpToSelf.mapToSelf(new Exp());\n         double[] result_mapExpToSelf = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n-        assertClose(\"compare vectors\" ,result_mapExpToSelf,v_mapExpToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapExpToSelf,v_mapExpToSelf.toArray(),normTolerance);\n \n \n         //octave =  ???\n         RealVector v_mapExpm1 = v1.map(new Expm1());\n         double[] result_mapExpm1 = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n-        assertClose(\"compare vectors\" ,result_mapExpm1,v_mapExpm1.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapExpm1,v_mapExpm1.toArray(),normTolerance);\n \n         //octave =  ???\n         RealVector v_mapExpm1ToSelf = v1.copy();\n         v_mapExpm1ToSelf.mapToSelf(new Expm1());\n         double[] result_mapExpm1ToSelf = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n-        assertClose(\"compare vectors\" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.toArray(),normTolerance);\n \n         //octave =  log(v1)\n         RealVector v_mapLog = v1.map(new Log());\n         double[] result_mapLog = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n-        assertClose(\"compare vectors\" ,result_mapLog,v_mapLog.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapLog,v_mapLog.toArray(),normTolerance);\n \n         //octave =  log(v1)\n         RealVector v_mapLogToSelf = v1.copy();\n         v_mapLogToSelf.mapToSelf(new Log());\n         double[] result_mapLogToSelf = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n-        assertClose(\"compare vectors\" ,result_mapLogToSelf,v_mapLogToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapLogToSelf,v_mapLogToSelf.toArray(),normTolerance);\n \n         //octave =  log10(v1)\n         RealVector v_mapLog10 = v1.map(new Log10());\n         double[] result_mapLog10 = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n-        assertClose(\"compare vectors\" ,result_mapLog10,v_mapLog10.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapLog10,v_mapLog10.toArray(),normTolerance);\n \n         //octave =  log(v1)\n         RealVector v_mapLog10ToSelf = v1.copy();\n         v_mapLog10ToSelf.mapToSelf(new Log10());\n         double[] result_mapLog10ToSelf = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n-        assertClose(\"compare vectors\" ,result_mapLog10ToSelf,v_mapLog10ToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapLog10ToSelf,v_mapLog10ToSelf.toArray(),normTolerance);\n \n         //octave =  ???\n         RealVector v_mapLog1p = v1.map(new Log1p());\n         double[] result_mapLog1p = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n-        assertClose(\"compare vectors\" ,result_mapLog1p,v_mapLog1p.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapLog1p,v_mapLog1p.toArray(),normTolerance);\n \n         //octave =  ???\n         RealVector v_mapLog1pToSelf = v1.copy();\n         v_mapLog1pToSelf.mapToSelf(new Log1p());\n         double[] result_mapLog1pToSelf = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n-        assertClose(\"compare vectors\" ,result_mapLog1pToSelf,v_mapLog1pToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapLog1pToSelf,v_mapLog1pToSelf.toArray(),normTolerance);\n \n         //octave =  cosh(v1)\n         RealVector v_mapCosh = v1.map(new Cosh());\n         double[] result_mapCosh = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n-        assertClose(\"compare vectors\" ,result_mapCosh,v_mapCosh.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCosh,v_mapCosh.toArray(),normTolerance);\n \n         //octave =  cosh(v1)\n         RealVector v_mapCoshToSelf = v1.copy();\n         v_mapCoshToSelf.mapToSelf(new Cosh());\n         double[] result_mapCoshToSelf = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n-        assertClose(\"compare vectors\" ,result_mapCoshToSelf,v_mapCoshToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCoshToSelf,v_mapCoshToSelf.toArray(),normTolerance);\n \n         //octave =  sinh(v1)\n         RealVector v_mapSinh = v1.map(new Sinh());\n         double[] result_mapSinh = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n-        assertClose(\"compare vectors\" ,result_mapSinh,v_mapSinh.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSinh,v_mapSinh.toArray(),normTolerance);\n \n         //octave =  sinh(v1)\n         RealVector v_mapSinhToSelf = v1.copy();\n         v_mapSinhToSelf.mapToSelf(new Sinh());\n         double[] result_mapSinhToSelf = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n-        assertClose(\"compare vectors\" ,result_mapSinhToSelf,v_mapSinhToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSinhToSelf,v_mapSinhToSelf.toArray(),normTolerance);\n \n         //octave =  tanh(v1)\n         RealVector v_mapTanh = v1.map(new Tanh());\n         double[] result_mapTanh = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n-        assertClose(\"compare vectors\" ,result_mapTanh,v_mapTanh.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapTanh,v_mapTanh.toArray(),normTolerance);\n \n         //octave =  tanh(v1)\n         RealVector v_mapTanhToSelf = v1.copy();\n         v_mapTanhToSelf.mapToSelf(new Tanh());\n         double[] result_mapTanhToSelf = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n-        assertClose(\"compare vectors\" ,result_mapTanhToSelf,v_mapTanhToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapTanhToSelf,v_mapTanhToSelf.toArray(),normTolerance);\n \n         //octave =  cos(v1)\n         RealVector v_mapCos = v1.map(new Cos());\n         double[] result_mapCos = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n-        assertClose(\"compare vectors\" ,result_mapCos,v_mapCos.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCos,v_mapCos.toArray(),normTolerance);\n \n         //octave =  cos(v1)\n         RealVector v_mapCosToSelf = v1.copy();\n         v_mapCosToSelf.mapToSelf(new Cos());\n         double[] result_mapCosToSelf = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n-        assertClose(\"compare vectors\" ,result_mapCosToSelf,v_mapCosToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCosToSelf,v_mapCosToSelf.toArray(),normTolerance);\n \n         //octave =  sin(v1)\n         RealVector v_mapSin = v1.map(new Sin());\n         double[] result_mapSin = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n-        assertClose(\"compare vectors\" ,result_mapSin,v_mapSin.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSin,v_mapSin.toArray(),normTolerance);\n \n         //octave =  sin(v1)\n         RealVector v_mapSinToSelf = v1.copy();\n         v_mapSinToSelf.mapToSelf(new Sin());\n         double[] result_mapSinToSelf = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n-        assertClose(\"compare vectors\" ,result_mapSinToSelf,v_mapSinToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSinToSelf,v_mapSinToSelf.toArray(),normTolerance);\n \n         //octave =  tan(v1)\n         RealVector v_mapTan = v1.map(new Tan());\n         double[] result_mapTan = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n-        assertClose(\"compare vectors\" ,result_mapTan,v_mapTan.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapTan,v_mapTan.toArray(),normTolerance);\n \n         //octave =  tan(v1)\n         RealVector v_mapTanToSelf = v1.copy();\n         v_mapTanToSelf.mapToSelf(new Tan());\n         double[] result_mapTanToSelf = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n-        assertClose(\"compare vectors\" ,result_mapTanToSelf,v_mapTanToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapTanToSelf,v_mapTanToSelf.toArray(),normTolerance);\n \n         double[] vat_a = {0d, 0.5d, 1.0d};\n         OpenMapRealVector vat = new OpenMapRealVector(vat_a);\n         //octave =  acos(vat)\n         RealVector v_mapAcos = vat.map(new Acos());\n         double[] result_mapAcos = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n-        assertClose(\"compare vectors\" ,result_mapAcos,v_mapAcos.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAcos,v_mapAcos.toArray(),normTolerance);\n \n         //octave =  acos(vat)\n         RealVector v_mapAcosToSelf = vat.copy();\n         v_mapAcosToSelf.mapToSelf(new Acos());\n         double[] result_mapAcosToSelf = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n-        assertClose(\"compare vectors\" ,result_mapAcosToSelf,v_mapAcosToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAcosToSelf,v_mapAcosToSelf.toArray(),normTolerance);\n \n         //octave =  asin(vat)\n         RealVector v_mapAsin = vat.map(new Asin());\n         double[] result_mapAsin = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n-        assertClose(\"compare vectors\" ,result_mapAsin,v_mapAsin.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAsin,v_mapAsin.toArray(),normTolerance);\n \n         //octave =  asin(vat)\n         RealVector v_mapAsinToSelf = vat.copy();\n         v_mapAsinToSelf.mapToSelf(new Asin());\n         double[] result_mapAsinToSelf = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n-        assertClose(\"compare vectors\" ,result_mapAsinToSelf,v_mapAsinToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAsinToSelf,v_mapAsinToSelf.toArray(),normTolerance);\n \n         //octave =  atan(vat)\n         RealVector v_mapAtan = vat.map(new Atan());\n         double[] result_mapAtan = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n-        assertClose(\"compare vectors\" ,result_mapAtan,v_mapAtan.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAtan,v_mapAtan.toArray(),normTolerance);\n \n         //octave =  atan(vat)\n         RealVector v_mapAtanToSelf = vat.copy();\n         v_mapAtanToSelf.mapToSelf(new Atan());\n         double[] result_mapAtanToSelf = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n-        assertClose(\"compare vectors\" ,result_mapAtanToSelf,v_mapAtanToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAtanToSelf,v_mapAtanToSelf.toArray(),normTolerance);\n \n         //octave =  v1 .^-1\n         RealVector v_mapInv = v1.map(new Inverse());\n         double[] result_mapInv = {1d,0.5d,3.333333333333333e-01d};\n-        assertClose(\"compare vectors\" ,result_mapInv,v_mapInv.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapInv,v_mapInv.toArray(),normTolerance);\n \n         //octave =  v1 .^-1\n         RealVector v_mapInvToSelf = v1.copy();\n         v_mapInvToSelf.mapToSelf(new Inverse());\n         double[] result_mapInvToSelf = {1d,0.5d,3.333333333333333e-01d};\n-        assertClose(\"compare vectors\" ,result_mapInvToSelf,v_mapInvToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapInvToSelf,v_mapInvToSelf.toArray(),normTolerance);\n \n         double[] abs_a = {-1.0d, 0.0d, 1.0d};\n         OpenMapRealVector abs_v = new OpenMapRealVector(abs_a);\n         //octave =  abs(abs_v)\n         RealVector v_mapAbs = abs_v.map(new Abs());\n         double[] result_mapAbs = {1d,0d,1d};\n-        assertClose(\"compare vectors\" ,result_mapAbs,v_mapAbs.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAbs,v_mapAbs.toArray(),normTolerance);\n \n         //octave = abs(abs_v)\n         RealVector v_mapAbsToSelf = abs_v.copy();\n         v_mapAbsToSelf.mapToSelf(new Abs());\n         double[] result_mapAbsToSelf = {1d,0d,1d};\n-        assertClose(\"compare vectors\" ,result_mapAbsToSelf,v_mapAbsToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapAbsToSelf,v_mapAbsToSelf.toArray(),normTolerance);\n \n         //octave =   sqrt(v1)\n         RealVector v_mapSqrt = v1.map(new Sqrt());\n         double[] result_mapSqrt = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n-        assertClose(\"compare vectors\" ,result_mapSqrt,v_mapSqrt.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSqrt,v_mapSqrt.toArray(),normTolerance);\n \n         //octave =  sqrt(v1)\n         RealVector v_mapSqrtToSelf = v1.copy();\n         v_mapSqrtToSelf.mapToSelf(new Sqrt());\n         double[] result_mapSqrtToSelf = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n-        assertClose(\"compare vectors\" ,result_mapSqrtToSelf,v_mapSqrtToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSqrtToSelf,v_mapSqrtToSelf.toArray(),normTolerance);\n \n         double[] cbrt_a = {-2.0d, 0.0d, 2.0d};\n         OpenMapRealVector cbrt_v = new OpenMapRealVector(cbrt_a);\n         //octave =  ???\n         RealVector v_mapCbrt = cbrt_v.map(new Cbrt());\n         double[] result_mapCbrt = {-1.2599210498948732d,0d,1.2599210498948732d};\n-        assertClose(\"compare vectors\" ,result_mapCbrt,v_mapCbrt.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCbrt,v_mapCbrt.toArray(),normTolerance);\n \n         //octave = ???\n         RealVector v_mapCbrtToSelf = cbrt_v.copy();\n         v_mapCbrtToSelf.mapToSelf(new Cbrt());\n         double[] result_mapCbrtToSelf =  {-1.2599210498948732d,0d,1.2599210498948732d};\n-        assertClose(\"compare vectors\" ,result_mapCbrtToSelf,v_mapCbrtToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCbrtToSelf,v_mapCbrtToSelf.toArray(),normTolerance);\n \n         double[] ceil_a = {-1.1d, 0.9d, 1.1d};\n         OpenMapRealVector ceil_v = new OpenMapRealVector(ceil_a);\n         //octave =  ceil(ceil_v)\n         RealVector v_mapCeil = ceil_v.map(new Ceil());\n         double[] result_mapCeil = {-1d,1d,2d};\n-        assertClose(\"compare vectors\" ,result_mapCeil,v_mapCeil.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCeil,v_mapCeil.toArray(),normTolerance);\n \n         //octave = ceil(ceil_v)\n         RealVector v_mapCeilToSelf = ceil_v.copy();\n         v_mapCeilToSelf.mapToSelf(new Ceil());\n         double[] result_mapCeilToSelf =  {-1d,1d,2d};\n-        assertClose(\"compare vectors\" ,result_mapCeilToSelf,v_mapCeilToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapCeilToSelf,v_mapCeilToSelf.toArray(),normTolerance);\n \n         //octave =  floor(ceil_v)\n         RealVector v_mapFloor = ceil_v.map(new Floor());\n         double[] result_mapFloor = {-2d,0d,1d};\n-        assertClose(\"compare vectors\" ,result_mapFloor,v_mapFloor.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapFloor,v_mapFloor.toArray(),normTolerance);\n \n         //octave = floor(ceil_v)\n         RealVector v_mapFloorToSelf = ceil_v.copy();\n         v_mapFloorToSelf.mapToSelf(new Floor());\n         double[] result_mapFloorToSelf =  {-2d,0d,1d};\n-        assertClose(\"compare vectors\" ,result_mapFloorToSelf,v_mapFloorToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapFloorToSelf,v_mapFloorToSelf.toArray(),normTolerance);\n \n         //octave =  ???\n         RealVector v_mapRint = ceil_v.map(new Rint());\n         double[] result_mapRint = {-1d,1d,1d};\n-        assertClose(\"compare vectors\" ,result_mapRint,v_mapRint.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapRint,v_mapRint.toArray(),normTolerance);\n \n         //octave = ???\n         RealVector v_mapRintToSelf = ceil_v.copy();\n         v_mapRintToSelf.mapToSelf(new Rint());\n         double[] result_mapRintToSelf =  {-1d,1d,1d};\n-        assertClose(\"compare vectors\" ,result_mapRintToSelf,v_mapRintToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapRintToSelf,v_mapRintToSelf.toArray(),normTolerance);\n \n         //octave =  ???\n         RealVector v_mapSignum = ceil_v.map(new Signum());\n         double[] result_mapSignum = {-1d,1d,1d};\n-        assertClose(\"compare vectors\" ,result_mapSignum,v_mapSignum.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSignum,v_mapSignum.toArray(),normTolerance);\n \n         //octave = ???\n         RealVector v_mapSignumToSelf = ceil_v.copy();\n         v_mapSignumToSelf.mapToSelf(new Signum());\n         double[] result_mapSignumToSelf =  {-1d,1d,1d};\n-        assertClose(\"compare vectors\" ,result_mapSignumToSelf,v_mapSignumToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapSignumToSelf,v_mapSignumToSelf.toArray(),normTolerance);\n \n \n         // Is with the used resolutions of limited value as test\n         //octave =  ???\n         RealVector v_mapUlp = ceil_v.map(new Ulp());\n         double[] result_mapUlp = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n-        assertClose(\"compare vectors\" ,result_mapUlp,v_mapUlp.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapUlp,v_mapUlp.toArray(),normTolerance);\n \n         //octave = ???\n         RealVector v_mapUlpToSelf = ceil_v.copy();\n         v_mapUlpToSelf.mapToSelf(new Ulp());\n         double[] result_mapUlpToSelf = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n-        assertClose(\"compare vectors\" ,result_mapUlpToSelf,v_mapUlpToSelf.getData(),normTolerance);\n+        assertClose(\"compare vectors\" ,result_mapUlpToSelf,v_mapUlpToSelf.toArray(),normTolerance);\n     }\n \n     @Test\n         //octave =  v1 + v2\n         OpenMapRealVector v_add = v1.add(v2);\n         double[] result_add = {5d, 7d, 9d};\n-        assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);\n+        assertClose(\"compare vect\" ,v_add.toArray(),result_add,normTolerance);\n \n         SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n         RealVector v_add_i = v1.add(vt2);\n         double[] result_add_i = {5d, 7d, 9d};\n-        assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);\n+        assertClose(\"compare vect\" ,v_add_i.toArray(),result_add_i,normTolerance);\n \n         //octave =  v1 - v2\n         OpenMapRealVector v_subtract = v1.subtract(v2);\n         double[] result_subtract = {-3d, -3d, -3d};\n-        assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);\n+        assertClose(\"compare vect\" ,v_subtract.toArray(),result_subtract,normTolerance);\n \n         RealVector v_subtract_i = v1.subtract(vt2);\n         double[] result_subtract_i = {-3d, -3d, -3d};\n-        assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);\n+        assertClose(\"compare vect\" ,v_subtract_i.toArray(),result_subtract_i,normTolerance);\n \n         // octave v1 .* v2\n         RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n         double[] result_ebeMultiply = {4d, 10d, 18d};\n-        assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);\n+        assertClose(\"compare vect\" ,v_ebeMultiply.toArray(),result_ebeMultiply,normTolerance);\n \n         RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n         double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n-        assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);\n+        assertClose(\"compare vect\" ,v_ebeMultiply_2.toArray(),result_ebeMultiply_2,normTolerance);\n \n         // octave v1 ./ v2\n         RealVector  v_ebeDivide = v1.ebeDivide(v2);\n         double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n-        assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);\n+        assertClose(\"compare vect\" ,v_ebeDivide.toArray(),result_ebeDivide,normTolerance);\n \n         RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n         double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n-        assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);\n+        assertClose(\"compare vect\" ,v_ebeDivide_2.toArray(),result_ebeDivide_2,normTolerance);\n \n         // octave  dot(v1,v2)\n         double dot =  v1.dotProduct(v2);\n \n         RealVector v_unitVector = v1.unitVector();\n         RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n-        assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);\n+        assertClose(\"compare vect\" ,v_unitVector.toArray(),v_unitVector_2.toArray(),normTolerance);\n \n         try {\n             v_null.unitVector();\n \n         OpenMapRealVector v_unitize = v1.copy();\n         v_unitize.unitize();\n-        assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);\n+        assertClose(\"compare vect\" ,v_unitVector_2.toArray(),v_unitize.toArray(),normTolerance);\n         try {\n             v_null.unitize();\n             Assert.fail(\"Expecting MathArithmeticException\");\n \n         RealVector v_projection = v1.projection(v2);\n         double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n-        assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);\n+        assertClose(\"compare vect\", v_projection.toArray(), result_projection, normTolerance);\n \n         RealVector v_projection_2 = v1.projection(v2_t);\n         double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n-        assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);\n+        assertClose(\"compare vect\", v_projection_2.toArray(), result_projection_2, normTolerance);\n \n     }\n \n--- a/src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java\n         glsModel.newSampleData(longley, 16, 6);\n         olsModel.newSampleData(longley, 16, 6);\n         glsModel.newCovarianceData(identityCov.getData());\n-        double[] olsBeta = olsModel.calculateBeta().getData();\n-        double[] glsBeta = glsModel.calculateBeta().getData();\n+        double[] olsBeta = olsModel.calculateBeta().toArray();\n+        double[] glsBeta = glsModel.calculateBeta().toArray();\n         // TODO:  Should have assertRelativelyEquals(double[], double[], eps) in TestUtils\n         //        Should also add RealVector and RealMatrix versions\n         for (int i = 0; i < olsBeta.length; i++) {\n             \n             // Generate y = xb + u with u cov\n             RealVector u = MatrixUtils.createRealVector(gen.nextVector());\n-            double[] y = u.add(x.operate(b)).getData();\n+            double[] y = u.add(x.operate(b)).toArray();\n             \n             // Estimate OLS parameters\n             ols.newYSampleData(y);\n--- a/src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n          */\n         double[] residuals = model.estimateResiduals();\n         RealMatrix I = MatrixUtils.createRealIdentityMatrix(10);\n-        double[] hatResiduals = I.subtract(hat).operate(model.Y).getData();\n+        double[] hatResiduals = I.subtract(hat).operate(model.Y).toArray();\n         TestUtils.assertEquals(residuals, hatResiduals, 10e-12);\n     }\n \n      */\n     protected void checkVarianceConsistency(OLSMultipleLinearRegression model) throws Exception {\n         // Check Y variance consistency\n-        TestUtils.assertEquals(StatUtils.variance(model.Y.getData()), model.calculateYVariance(), 0);\n+        TestUtils.assertEquals(StatUtils.variance(model.Y.toArray()), model.calculateYVariance(), 0);\n         \n         // Check residual variance consistency\n-        double[] residuals = model.calculateResiduals().getData();\n+        double[] residuals = model.calculateResiduals().toArray();\n         RealMatrix X = model.X;\n         TestUtils.assertEquals(\n-                StatUtils.variance(model.calculateResiduals().getData()) * (residuals.length - 1),\n+                StatUtils.variance(model.calculateResiduals().toArray()) * (residuals.length - 1),\n                 model.calculateErrorVariance() * (X.getRowDimension() - X.getColumnDimension()), 1E-20);\n         \n     }", "timestamp": 1315480502, "metainfo": ""}