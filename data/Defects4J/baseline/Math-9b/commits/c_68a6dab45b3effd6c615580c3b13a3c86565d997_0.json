{"sha": "68a6dab45b3effd6c615580c3b13a3c86565d997", "log": "Removed double[][] solve(double[][]) from LUDecompositionImpl.Solver  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n \n         /** {@inheritDoc} */\n         public RealMatrix solve(RealMatrix b) {\n-            return new Array2DRowRealMatrix(solve(b.getData()), false);\n+\n+            final int m = pivot.length;\n+            if (b.getRowDimension() != m) {\n+                throw new DimensionMismatchException(b.getRowDimension(), m);\n+            }\n+            if (singular) {\n+                throw new SingularMatrixException();\n+            }\n+\n+            final int nColB = b.getColumnDimension();\n+\n+            // Apply permutations to b\n+            final double[][] bp = new double[m][nColB];\n+            for (int row = 0; row < m; row++) {\n+                final double[] bpRow = bp[row];\n+                final int pRow = pivot[row];\n+                for (int col = 0; col < nColB; col++) {\n+                    bpRow[col] = b.getEntry(pRow, col);\n+                }\n+            }\n+\n+            // Solve LY = b\n+            for (int col = 0; col < m; col++) {\n+                final double[] bpCol = bp[col];\n+                for (int i = col + 1; i < m; i++) {\n+                    final double[] bpI = bp[i];\n+                    final double luICol = lu[i][col];\n+                    for (int j = 0; j < nColB; j++) {\n+                        bpI[j] -= bpCol[j] * luICol;\n+                    }\n+                }\n+            }\n+\n+            // Solve UX = Y\n+            for (int col = m - 1; col >= 0; col--) {\n+                final double[] bpCol = bp[col];\n+                final double luDiag = lu[col][col];\n+                for (int j = 0; j < nColB; j++) {\n+                    bpCol[j] /= luDiag;\n+                }\n+                for (int i = 0; i < col; i++) {\n+                    final double[] bpI = bp[i];\n+                    final double luICol = lu[i][col];\n+                    for (int j = 0; j < nColB; j++) {\n+                        bpI[j] -= bpCol[j] * luICol;\n+                    }\n+                }\n+            }\n+\n+            return new Array2DRowRealMatrix(bp, false);\n         }\n \n         /** {@inheritDoc} */", "timestamp": 1315534383, "metainfo": ""}