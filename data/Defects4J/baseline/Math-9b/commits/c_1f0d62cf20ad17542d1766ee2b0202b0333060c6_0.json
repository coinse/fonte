{"sha": "1f0d62cf20ad17542d1766ee2b0202b0333060c6", "log": "MATH-874 Reduced number of overridden public \"optimize\" methods (replaced by protected \"optimizeInternal\"): whenever the code is ready for 4.0, only the base class's \"optimize\" method should define the public API (subclass specifics are handled in overridden \"optimizeInternal\" which must call the base class's version to handle the common setup).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java\n      * instead.\n      */\n     @Deprecated\n-    protected PointValuePair optimizeInternal(int maxEval, MultivariateFunction f, GoalType goalType,\n+    protected PointValuePair optimizeInternal(int maxEval, FUNC f, GoalType goalType,\n                                               double[] startPoint) {\n         return optimizeInternal(maxEval, f, goalType, new InitialGuess(startPoint));\n     }\n      * evaluations is exceeded.\n      */\n     protected PointValuePair optimizeInternal(int maxEval,\n-                                              MultivariateFunction f,\n+                                              FUNC f,\n                                               GoalType goalType,\n                                               OptimizationData... optData)\n         throws TooManyEvaluationsException {\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java\n import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;\n import org.apache.commons.math3.optimization.ConvergenceChecker;\n import org.apache.commons.math3.optimization.GoalType;\n+import org.apache.commons.math3.optimization.OptimizationData;\n+import org.apache.commons.math3.optimization.InitialGuess;\n import org.apache.commons.math3.optimization.MultivariateDifferentiableOptimizer;\n import org.apache.commons.math3.optimization.PointValuePair;\n import org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;\n  * @since 3.1\n  */\n public abstract class AbstractDifferentiableOptimizer\n-    extends BaseAbstractMultivariateOptimizer<MultivariateDifferentiableFunction>\n-    implements MultivariateDifferentiableOptimizer {\n-\n+    extends BaseAbstractMultivariateOptimizer<MultivariateDifferentiableFunction> {\n     /**\n      * Objective function gradient.\n      */\n         return gradient.value(evaluationPoint);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @deprecated In 3.1. Please use\n+     * {@link #optimizeInternal(int,MultivariateDifferentiableFunction,GoalType,OptimizationData[])}\n+     * instead.\n+     */\n+    @Override@Deprecated\n+    protected PointValuePair optimizeInternal(final int maxEval,\n+                                              final MultivariateDifferentiableFunction f,\n+                                              final GoalType goalType,\n+                                              final double[] startPoint) {\n+        return optimizeInternal(maxEval, f, goalType, new InitialGuess(startPoint));\n+    }\n+\n     /** {@inheritDoc} */\n     @Override\n-    public PointValuePair optimize(final int maxEval, final MultivariateDifferentiableFunction f,\n-                                   final GoalType goalType, final double[] startPoint) {\n-\n-        // store optimization problem characteristics\n+    protected PointValuePair optimizeInternal(final int maxEval,\n+                                              final MultivariateDifferentiableFunction f,\n+                                              final GoalType goalType,\n+                                              final OptimizationData... optData) {\n+        // Store optimization problem characteristics.\n         gradient = new GradientFunction(f);\n \n-        // perform optimization\n-        return super.optimize(maxEval, f, goalType, startPoint);\n-\n+        // Perform optimization.\n+        return super.optimizeInternal(maxEval, f, goalType, optData);\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java\n \n import org.apache.commons.math3.analysis.DifferentiableMultivariateFunction;\n import org.apache.commons.math3.analysis.MultivariateVectorFunction;\n-import org.apache.commons.math3.analysis.differentiation.GradientFunction;\n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;\n import org.apache.commons.math3.optimization.DifferentiableMultivariateOptimizer;\n import org.apache.commons.math3.optimization.GoalType;\n \n     /** {@inheritDoc} */\n     @Override\n-    public PointValuePair optimize(int maxEval,\n-                                       final DifferentiableMultivariateFunction f,\n-                                       final GoalType goalType,\n-                                       final double[] startPoint) {\n+    protected PointValuePair optimizeInternal(int maxEval,\n+                                              final DifferentiableMultivariateFunction f,\n+                                              final GoalType goalType,\n+                                              final double[] startPoint) {\n         // Store optimization problem characteristics.\n         gradient = f.gradient();\n \n-        return optimizeInternal(maxEval, f, goalType, startPoint);\n+        return super.optimizeInternal(maxEval, f, goalType, startPoint);\n     }\n \n     /**\n                                    final MultivariateDifferentiableFunction f,\n                                    final GoalType goalType,\n                                    final double[] startPoint) {\n-        // Store optimization problem characteristics.\n-        gradient = new GradientFunction(f);\n-\n-        return optimizeInternal(maxEval, f, goalType, startPoint);\n+        return optimizeInternal(maxEval,\n+                                FunctionUtils.toDifferentiableMultivariateFunction(f),\n+                                goalType,\n+                                startPoint);\n     }\n }", "timestamp": 1351124424, "metainfo": ""}