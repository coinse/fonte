{"sha": "494f8bc48c13298a4a31e31ec447a9fba393a28d", "log": "Fixed AbstractIntegerDistribution cumulativeProbablility(-,-) to correctly handle double arguments. JIRA: MATH-184 Reported by Yegor Bryukhov   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         return cumulativeProbability((int) Math.floor(x));  \n+    }\n+    \n+    /**\n+     * For a random variable X whose values are distributed according\n+     * to this distribution, this method returns P(x0 &le; X &le; x1).\n+     * \n+     * @param x0 the (inclusive) lower bound\n+     * @param x1 the (inclusive) upper bound\n+     * @return the probability that a random variable with this distribution\n+     * will take a value between <code>x0</code> and <code>x1</code>,\n+     * including the endpoints.\n+     * @throws MathException if the cumulative probability can not be\n+     * computed due to convergence or other numerical errors.\n+     * @throws IllegalArgumentException if <code>x0 > x1</code>\n+     */\n+    public double cumulativeProbability(double x0, double x1)\n+        throws MathException {\n+        if (x0 > x1) {\n+            throw new IllegalArgumentException\n+            (\"lower endpoint must be less than or equal to upper endpoint\");\n+        }\n+        if (Math.floor(x0) < x0) {\n+            return cumulativeProbability(((int) Math.floor(x0)) + 1,\n+               (int) Math.floor(x1)); // don't want to count mass below x0\n+        } else { // x0 is mathematical integer, so use as is\n+            return cumulativeProbability((int) Math.floor(x0),\n+                (int) Math.floor(x1)); \n+        }\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java\n+++ b/src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java\n         }           \n     }\n     \n+    \n     /**\n      * Verifies that inverse cumulative probability density calculations match expected values\n      * using current test instance data\n      */\n     public void testCumulativeProbabilities() throws Exception {\n         verifyCumulativeProbabilities();      \n+    }\n+    \n+    /**\n+     * Verifies that floating point arguments are correctly handled by\n+     * cumulativeProbablility(-,-)\n+     * JIRA: MATH-184\n+     */\n+    public void testFloatingPointArguments() throws Exception {\n+        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n+            double arg = (double) cumulativeTestPoints[i];\n+            assertEquals(\n+                    \"Incorrect cumulative probability value returned for \" +\n+                    cumulativeTestPoints[i],\n+                    cumulativeTestValues[i], \n+                    distribution.cumulativeProbability(arg), tolerance);\n+            if (i < cumulativeTestPoints.length - 1) {\n+                double arg2 = (double) cumulativeTestPoints[i + 1];\n+                assertEquals(\"Inconsistent probability for discrete range \" +\n+                        \"[ \" + arg + \",\" + arg2 + \" ]\",\n+                   distribution.cumulativeProbability(\n+                           cumulativeTestPoints[i],\n+                           cumulativeTestPoints[i + 1]),\n+                   distribution.cumulativeProbability(arg, arg2), tolerance);\n+                arg = arg - Math.random();\n+                arg2 = arg2 + Math.random();\n+                assertEquals(\"Inconsistent probability for discrete range \" +\n+                        \"[ \" + arg + \",\" + arg2 + \" ]\",\n+                   distribution.cumulativeProbability(\n+                           cumulativeTestPoints[i],\n+                           cumulativeTestPoints[i + 1]),\n+                   distribution.cumulativeProbability(arg, arg2), tolerance);\n+            }\n+        } \n+        int one = 1;\n+        int ten = 10;\n+        int two = 2;\n+        double oned = (double) one;\n+        double twod = (double) two;\n+        double tend = (double) ten;\n+        assertEquals(distribution.cumulativeProbability(one, two), \n+                distribution.cumulativeProbability(oned, twod), tolerance);\n+        assertEquals(distribution.cumulativeProbability(one, two), \n+                distribution.cumulativeProbability(oned - tolerance,\n+                        twod + 0.9), tolerance);\n+        assertEquals(distribution.cumulativeProbability(two, ten), \n+                distribution.cumulativeProbability(twod, tend), tolerance);\n+        assertEquals(distribution.cumulativeProbability(two, ten), \n+                distribution.cumulativeProbability(twod - tolerance,\n+                        tend + 0.9), tolerance);\n     }\n     \n     /**", "timestamp": 1202691888, "metainfo": ""}