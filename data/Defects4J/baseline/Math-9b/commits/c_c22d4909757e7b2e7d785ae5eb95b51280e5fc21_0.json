{"sha": "c22d4909757e7b2e7d785ae5eb95b51280e5fc21", "log": "Merged changes from MATH_1_1 branch, r240245:r267516  ", "commit": "\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n             while ((str = inputStream.readLine()) != null) {\n                 val = Double.parseDouble(str);\n                 SummaryStatistics stats =\n-                    (SummaryStatistics) binStats.get(\n-                        Math.max((int) Math.ceil((val - min) / delta) - 1, 0));\n+                    (SummaryStatistics) binStats.get(findBin(min, val, delta));\n                 stats.addValue(val);\n             }\n \n             for (int i = 0; i < inputArray.length; i++) {\n                 SummaryStatistics stats =\n                     (SummaryStatistics) binStats.get(\n-                        Math.max((int) Math.ceil(\n-                                (inputArray[i] - min) / delta)- 1, 0));\n+                            findBin(min, inputArray[i], delta));\n                 stats.addValue(inputArray[i]);\n             }\n         }\n         }\n         upperBounds[binCount-1] = 1.0d;\n     }\n+    \n+    /**\n+     * Returns the index of the bin to which the given value belongs\n+     * \n+     * @param min  the minimum value\n+     * @param value  the value whose bin we are trying to find\n+     * @param delta  the grid size\n+     * @return\n+     */\n+    private int findBin(double min, double value, double delta) {\n+        return Math.min(\n+                Math.max((int) Math.ceil((value- min) / delta) - 1, 0), \n+                binCount - 1);\n+        }\n \n     /**\n      * Generates a random value from this distribution.\n--- a/src/java/org/apache/commons/math/random/RandomAdaptor.java\n+++ b/src/java/org/apache/commons/math/random/RandomAdaptor.java\n         return new RandomAdaptor(randomGenerator);\n     }\n     \n-    /* (non-Javadoc)\n-     * @see java.util.Random#nextBoolean()\n+    /**\n+     * Returns the next pseudorandom, uniformly distributed\n+     * <code>boolean</code> value from this random number generator's\n+     * sequence.  \n+     * \n+     * @return  the next pseudorandom, uniformly distributed\n+     * <code>boolean</code> value from this random number generator's\n+     * sequence\n      */\n     public boolean nextBoolean() {\n         return randomGenerator.nextBoolean();\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.util.Random#nextBytes(byte[])\n+     /**\n+     * Generates random bytes and places them into a user-supplied \n+     * byte array.  The number of random bytes produced is equal to \n+     * the length of the byte array.\n+     * \n+     * @param bytes the non-null byte array in which to put the \n+     * random bytes\n      */\n     public void nextBytes(byte[] bytes) {\n         randomGenerator.nextBytes(bytes);\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.util.Random#nextDouble()\n-     */\n+     /**\n+     * Returns the next pseudorandom, uniformly distributed \n+     * <code>double</code> value between <code>0.0</code> and\n+     * <code>1.0</code> from this random number generator's sequence.  \n+     *\n+     * @return  the next pseudorandom, uniformly distributed \n+     *  <code>double</code> value between <code>0.0</code> and\n+     *  <code>1.0</code> from this random number generator's sequence\n+     */  \n     public double nextDouble() {\n         return randomGenerator.nextDouble();\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.util.Random#nextFloat()\n+    /**\n+     * Returns the next pseudorandom, uniformly distributed <code>float</code>\n+     * value between <code>0.0</code> and <code>1.0</code> from this random\n+     * number generator's sequence.  \n+     *\n+     * @return  the next pseudorandom, uniformly distributed <code>float</code>\n+     * value between <code>0.0</code> and <code>1.0</code> from this\n+     * random number generator's sequence\n      */\n     public float nextFloat() {\n         return randomGenerator.nextFloat();\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.util.Random#nextGaussian()\n+    /**\n+     * Returns the next pseudorandom, Gaussian (\"normally\") distributed\n+     * <code>double</code> value with mean <code>0.0</code> and standard\n+     * deviation <code>1.0</code> from this random number generator's sequence.\n+     * \n+     * @return  the next pseudorandom, Gaussian (\"normally\") distributed\n+     * <code>double</code> value with mean <code>0.0</code> and\n+     * standard deviation <code>1.0</code> from this random number\n+     *  generator's sequence\n      */\n     public double nextGaussian() {\n         return randomGenerator.nextGaussian();\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.util.Random#nextInt()\n+     /**\n+     * Returns the next pseudorandom, uniformly distributed <code>int</code>\n+     * value from this random number generator's sequence.  \n+     * All 2<font size=\"-1\"><sup>32</sup></font> possible <tt>int</tt> values\n+     * should be produced with  (approximately) equal probability. \n+     *\n+     * @return the next pseudorandom, uniformly distributed <code>int</code>\n+     *  value from this random number generator's sequence\n      */\n     public int nextInt() {\n         return randomGenerator.nextInt();\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.util.Random#nextInt(int)\n+    /**\n+     * Returns a pseudorandom, uniformly distributed <tt>int</tt> value\n+     * between 0 (inclusive) and the specified value (exclusive), drawn from\n+     * this random number generator's sequence.   \n+     *\n+     * @param n the bound on the random number to be returned.  Must be\n+     * positive.\n+     * @return  a pseudorandom, uniformly distributed <tt>int</tt>\n+     * value between 0 (inclusive) and n (exclusive).\n+     * @throws IllegalArgumentException  if n is not positive.\n      */\n     public int nextInt(int n) {\n         return randomGenerator.nextInt(n);\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.util.Random#nextLong()\n+    /**\n+     * Returns the next pseudorandom, uniformly distributed <code>long</code>\n+     * value from this random number generator's sequence.  All \n+     * 2<font size=\"-1\"><sup>64</sup></font> possible <tt>long</tt> values \n+     * should be produced with (approximately) equal probability. \n+     *\n+     * @return  the next pseudorandom, uniformly distributed <code>long</code>\n+     *value from this random number generator's sequence\n      */\n     public long nextLong() {\n         return randomGenerator.nextLong();\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.util.Random#setSeed(long)\n+    /**\n+     * Sets the seed of the underyling random number generator using a \n+     * <code>long</code> seed.  Sequences of values generated starting with the\n+     * same seeds should be identical.\n+     *\n+     * @param seed the seed value\n      */\n     public void setSeed(long seed) {\n         if (randomGenerator != null) {  // required to avoid NPE in constructor\n--- a/src/test/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java\n             fail(\"expecting ArithmeticException but got: \" + f.toString());\n         } catch (ArithmeticException ex) {}\n     }\n+    \n+    public void testEqualsAndHashCode() {\n+        Fraction zero  = new Fraction(0,1);\n+        Fraction nullFraction = null;\n+        int zeroHash = zero.hashCode();\n+        assertTrue( zero.equals(zero));\n+        assertFalse(zero.equals(nullFraction));\n+        assertFalse(zero.equals(new Double(0)));\n+        Fraction zero2 = new Fraction(0,2);\n+        assertTrue(zero.equals(zero2));\n+        assertEquals(zero.hashCode(), zero2.hashCode());\n+        Fraction one = new Fraction(1,1);\n+        assertFalse((one.equals(zero) ||zero.equals(one)));\n+    }\n+    \n+    public void testGetReducedFraction() {\n+        Fraction threeFourths = new Fraction(3, 4);\n+        assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));\n+        assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));\n+        try {\n+            Fraction f = Fraction.getReducedFraction(1, 0);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+        assertEquals(Fraction.getReducedFraction\n+                (2, Integer.MIN_VALUE).getNumerator(),-1);\n+        assertEquals(Fraction.getReducedFraction\n+                (1, -1).getNumerator(), -1);\n+    }\n }\n--- a/src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java\n+++ b/src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.math.stat.Frequency;\n+ \n+\n /**\n  * Test cases for the AbstractRandomGenerator class\n  *\n  */\n \n public class AbstractRandomGeneratorTest extends RandomDataTest {\n+    \n+    protected TestRandomGenerator testGenerator = new TestRandomGenerator();\n+    \n     public AbstractRandomGeneratorTest(String name) {\n         super(name);\n-        randomData = new RandomDataImpl(new TestRandomGenerator());\n+        randomData = new RandomDataImpl(testGenerator);\n     } \n     \n     public static Test suite() {\n         suite.setName(\"AbstractRandomGenerator Tests\");\n         return suite;\n     }\n+    \n+    public void testNextInt() {\n+        try {\n+            int x = testGenerator.nextInt(-1);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        Frequency freq = new Frequency();\n+        int value = 0;\n+        for (int i=0; i<smallSampleSize; i++) {\n+            value = testGenerator.nextInt(4);\n+            assertTrue(\"nextInt range\",(value >= 0) && (value <= 3));\n+            freq.addValue(value);  \n+        }\n+        long[] observed = new long[4];\n+        for (int i=0; i<4; i++) {\n+            observed[i] = freq.getCount(i);\n+        } \n+        \n+        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n+         * Change to 11.34 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+                testStatistic.chiSquare(expected,observed) < 16.27);    \n+    }\n+    \n+    public void testNextLong() {\n+        long q1 = Long.MAX_VALUE/4;\n+        long q2 = 2 *  q1;\n+        long q3 = 3 * q1;\n+        \n+        Frequency freq = new Frequency();\n+        long val = 0;\n+        int value = 0;\n+        for (int i=0; i<smallSampleSize; i++) {\n+            val = testGenerator.nextLong();\n+            if (val < q1) {\n+                value = 0;\n+            } else if (val < q2) {\n+                value = 1;\n+            } else if (val < q3) {\n+                value = 2;\n+            } else {\n+                value = 3;\n+            }\n+            freq.addValue(value);  \n+        }\n+        long[] observed = new long[4];\n+        for (int i=0; i<4; i++) {\n+            observed[i] = freq.getCount(i);\n+        } \n+        \n+        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n+         * Change to 11.34 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+                testStatistic.chiSquare(expected,observed) < 16.27);    \n+    }\n+    \n+    public void testNextBoolean() {\n+        long halfSampleSize = smallSampleSize / 2; \n+        double[] expected = {halfSampleSize, halfSampleSize};\n+        long[] observed = new long[2];\n+        for (int i=0; i<smallSampleSize; i++) {\n+            if (testGenerator.nextBoolean()) {\n+                observed[0]++;\n+            } else {\n+                observed[1]++;\n+            }\n+        }\n+        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001\n+         * Change to 6.635 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+                testStatistic.chiSquare(expected,observed) < 10.828);    \n+    }\n+    \n+    public void testNextFloat() {\n+        Frequency freq = new Frequency();\n+        float val = 0;\n+        int value = 0;\n+        for (int i=0; i<smallSampleSize; i++) {\n+            val = testGenerator.nextFloat();\n+            if (val < 0.25) {\n+                value = 0;\n+            } else if (val < 0.5) {\n+                value = 1;\n+            } else if (val < 0.75) {\n+                value = 2;\n+            } else {\n+                value = 3;\n+            }\n+            freq.addValue(value);  \n+        }\n+        long[] observed = new long[4];\n+        for (int i=0; i<4; i++) {\n+            observed[i] = freq.getCount(i);\n+        } \n+        \n+        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n+         * Change to 11.34 for alpha = .01\n+         */\n+        assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n+                testStatistic.chiSquare(expected,observed) < 16.27);    \n+    }\n }\n--- a/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n         tstDoubleGen(5);           \n     }\n     \n+    /**\n+     * Test bin index overflow problem (BZ 36450)\n+     */\n+    public void testBinIndexOverflow() throws Exception {\n+        double[] x = new double[] {9474.94326071674, 2080107.8865462579};\n+        new EmpiricalDistributionImpl().load(x);\n+    }\n+    \n     public void testSerialization() {\n         // Empty\n         EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n--- a/src/test/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n         randomData = new RandomDataImpl();\n     }\n \n-    private long smallSampleSize = 1000;\n-    private double[] expected = {250,250,250,250};\n-    private int largeSampleSize = 10000;\n+    protected long smallSampleSize = 1000;\n+    protected double[] expected = {250,250,250,250};\n+    protected int largeSampleSize = 10000;\n     private int tolerance = 50;\n     private String[] hex = \n         {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"}; \n     protected RandomDataImpl randomData = null; \n-    private ChiSquareTestImpl testStatistic = new ChiSquareTestImpl();\n+    protected ChiSquareTestImpl testStatistic = new ChiSquareTestImpl();\n     \n     public void setUp() { \n     }", "timestamp": 1125794295, "metainfo": ""}