{"sha": "7852db46e2cb95024165314c452a6813809eddb2", "log": "MATH-894 Name change (\"contractionCriteria\" -> \"contractionCriterion\").   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n     /** Default value for array size modifier. */\n     private static final double DEFAULT_EXPANSION_FACTOR = 2.0;\n     /**\n-     * Default value for the difference between {@link #contractionCriteria}\n+     * Default value for the difference between {@link #contractionCriterion}\n      * and {@link #expansionFactor}.\n      */\n     private static final double DEFAULT_CONTRACTION_DELTA = 0.5;\n      * contracted to fit the number of elements contained in the element\n      *  array + 1.\n      */\n-    private double contractionCriteria = 2.5;\n+    private double contractionCriterion = 2.5;\n \n     /**\n      * The expansion factor of the array.  When the array needs to be expanded,\n      *  <li>{@code initialCapacity = 16}</li>\n      *  <li>{@code expansionMode = MULTIPLICATIVE}</li>\n      *  <li>{@code expansionFactor = 2.0}</li>\n-     *  <li>{@code contractionFactor = 2.5}</li>\n+     *  <li>{@code contractionCriterion = 2.5}</li>\n      * </ul>\n      */\n     public ResizableDoubleArray() {\n      * <ul>\n      *  <li>{@code expansionMode = MULTIPLICATIVE}</li>\n      *  <li>{@code expansionFactor = 2.0}</li>\n-     *  <li>{@code contractionFactor = 2.5}</li>\n+     *  <li>{@code contractionCriterion = 2.5}</li>\n      * </ul>\n      * @param initialCapacity Initial size of the internal storage array.\n      * @throws MathIllegalArgumentException if {@code initialCapacity <= 0}.\n      *  <li>{@code initialCapacity = 16}</li>\n      *  <li>{@code expansionMode = MULTIPLICATIVE}</li>\n      *  <li>{@code expansionFactor = 2.0}</li>\n-     *  <li>{@code contractionFactor = 2.5}</li>\n+     *  <li>{@code contractionCriterion = 2.5}</li>\n      * </ul>\n      *\n      * @param initialArray initial array\n      * The remaining properties take default values:\n      * <ul>\n      *  <li>{@code expansionMode = MULTIPLICATIVE}</li>\n-     *  <li>{@code contractionFactor = 0.5 + expansionFactor}</li>\n+     *  <li>{@code contractionCriterion = 0.5 + expansionFactor}</li>\n      * </ul>\n      * <br/>\n      * Throws IllegalArgumentException if the following conditions are\n      * The remaining properties take default values:\n      * <ul>\n      *  <li>{@code expansionMode = MULTIPLICATIVE}</li>\n-     *  <li>{@code contractionFactor = 0.5 + expansionFactor}</li>\n+     *  <li>{@code contractionCriterion = 0.5 + expansionFactor}</li>\n      * </ul>\n      * <br/>\n      * Throws IllegalArgumentException if the following conditions are\n \n     /**\n      * Creates an instance with the specified initialCapacity,\n-     * expansionFactor, and contractionCriteria.\n+     * expansionFactor, and contractionCriterion.\n      * The expansion mode will default to {@code MULTIPLICATIVE}.\n      * <br/>\n      * Throws IllegalArgumentException if the following conditions are\n      * <ul>\n      *  <li>{@code initialCapacity > 0}</li>\n      *  <li>{@code expansionFactor > 1}</li>\n-     *  <li>{@code contractionFactor >= expansionFactor}</li>\n+     *  <li>{@code contractionCriterion >= expansionFactor}</li>\n      * </ul>\n      *\n      * @param initialCapacity Initial size of the internal storage array..\n     }\n \n     /**\n-     * Creates an instance with the specified initialCapacity,\n-     * expansionFactor, and contractionCriteria.\n+     * Creates an instance with the specified initial capacity,\n+     * expansion factor, and contraction criteria.\n      * The expansion mode will default to {@code MULTIPLICATIVE}.\n      * <br/>\n      * Throws IllegalArgumentException if the following conditions are\n      * <ul>\n      *  <li>{@code initialCapacity > 0}</li>\n      *  <li>{@code expansionFactor > 1}</li>\n-     *  <li>{@code contractionFactor >= expansionFactor}</li>\n+     *  <li>{@code contractionCriterion >= expansionFactor}</li>\n      * </ul>\n      *\n      * @param initialCapacity Initial size of the internal storage array..\n      * @param expansionFactor The array will be expanded based on this\n      * parameter.\n-     * @param contractionCriteria Contraction criteria.\n-     * @throws MathIllegalArgumentException if parameters are not valid.\n+     * @param contractionCriterion Contraction criterion.\n+     * @throws MathIllegalArgumentException if the parameters are not valid.\n      */\n     public ResizableDoubleArray(int initialCapacity,\n                                 double expansionFactor,\n-                                double contractionCriteria)\n+                                double contractionCriterion)\n         throws MathIllegalArgumentException {\n         this(initialCapacity,\n              expansionFactor,\n-             contractionCriteria,\n+             contractionCriterion,\n              ExpansionMode.MULTIPLICATIVE,\n              null);\n     }\n      * <ul>\n      *  <li>{@code initialCapacity > 0}</li>\n      *  <li>{@code expansionFactor > 1}</li>\n-     *  <li>{@code contractionFactor >= expansionFactor}</li>\n+     *  <li>{@code contractionCriterion >= expansionFactor}</li>\n      * </ul>\n      *\n      * @param initialCapacity Initial size of the internal storage array.\n      * @param expansionFactor The array will be expanded based on this\n      * parameter.\n-     * @param contractionCriteria Contraction criteria.\n+     * @param contractionCriterion Contraction criteria.\n      * @param expansionMode Expansion mode.\n      * @param data Initial contents of the array.\n      * @throws MathIllegalArgumentException if the parameters are not valid.\n      */\n     public ResizableDoubleArray(int initialCapacity,\n                                 double expansionFactor,\n-                                double contractionCriteria,\n+                                double contractionCriterion,\n                                 ExpansionMode expansionMode,\n                                 double ... data)\n         throws MathIllegalArgumentException {\n             throw new NotStrictlyPositiveException(LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE,\n                                                    initialCapacity);\n         }\n-        checkContractExpand(contractionCriteria, expansionFactor);\n+        checkContractExpand(contractionCriterion, expansionFactor);\n \n         this.expansionFactor = expansionFactor;\n-        this.contractionCriteria = contractionCriteria;\n+        this.contractionCriterion = contractionCriterion;\n         this.expansionMode = expansionMode;\n         internalArray = new double[initialCapacity];\n         numElements = 0;\n         // Add the new value\n         internalArray[startIndex + (numElements - 1)] = value;\n \n-        // Check the contraction criteria\n+        // Check the contraction criterion.\n         if (shouldContract()) {\n             contract();\n         }\n     }\n \n     /**\n-     * Checks the expansion factor and the contraction criteria and throws an\n+     * Checks the expansion factor and the contraction criterion and throws an\n      * IllegalArgumentException if the contractionCriteria is less than the\n      * expansionCriteria\n      *\n     }\n \n     /**\n-     * Checks the expansion factor and the contraction criteria and throws an\n-     * IllegalArgumentException if the contractionCriteria is less than the\n-     * expansionCriteria\n-     *\n-     * @param expansion factor to be checked\n-     * @param contraction criteria to be checked\n-     * @throws MathIllegalArgumentException if the contractionCriteria is less than\n-     * the expansionCriteria.\n+     * Checks the expansion factor and the contraction criterion and raises\n+     * an exception if the contraction criterion is smaller than the\n+     * expansion criterion.\n+     *\n+     * @param contraction Criterion to be checked.\n+     * @param expansion Factor to be checked.\n+     * @throws NumberIsTooSmallException if {@code contraction < expansion}.\n+     * @throws NumberIsTooSmallException if {@code contraction <= 1}.\n+     * @throws NumberIsTooSmallException if {@code expansion <= 1 }.\n      */\n     protected void checkContractExpand(double contraction,\n                                        double expansion)\n-        throws MathIllegalArgumentException {\n+        throws NumberIsTooSmallException {\n         if (contraction < expansion) {\n             final NumberIsTooSmallException e = new NumberIsTooSmallException(contraction, 1, true);\n             e.getContext().addMessage(LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR,\n      * @return the contraction criterion used to reclaim memory.\n      */\n     public double getContractionCriterion() {\n-        return contractionCriteria;\n+        return contractionCriterion;\n     }\n \n     /**\n         throws MathIllegalArgumentException {\n         checkContractExpand(contractionCriteria, getExpansionFactor());\n         synchronized(this) {\n-            this.contractionCriteria = contractionCriteria;\n+            this.contractionCriterion = contractionCriteria;\n         }\n     }\n \n      * than contractionFactor\n      */\n     public void setExpansionFactor(float expansionFactor) throws MathIllegalArgumentException {\n-        checkContractExpand(getContractionCriteria(), expansionFactor);\n+        checkContractExpand(getContractionCriterion(), expansionFactor);\n         // The check above verifies that the expansion factor is > 1.0;\n         synchronized(this) {\n             this.expansionFactor = expansionFactor;\n      */\n     private synchronized boolean shouldContract() {\n         if (expansionMode == ExpansionMode.MULTIPLICATIVE) {\n-            return (internalArray.length / ((float) numElements)) > contractionCriteria;\n+            return (internalArray.length / ((float) numElements)) > contractionCriterion;\n         } else {\n-            return (internalArray.length - numElements) > contractionCriteria;\n+            return (internalArray.length - numElements) > contractionCriterion;\n         }\n     }\n \n         MathUtils.checkNotNull(dest);\n         synchronized(source) {\n            synchronized(dest) {\n-               dest.contractionCriteria = source.contractionCriteria;\n+               dest.contractionCriterion = source.contractionCriterion;\n                dest.expansionFactor = source.expansionFactor;\n                dest.expansionMode = source.expansionMode;\n                dest.internalArray = new double[source.internalArray.length];\n             synchronized(object) {\n                 boolean result = true;\n                 final ResizableDoubleArray other = (ResizableDoubleArray) object;\n-                result = result && (other.contractionCriteria == contractionCriteria);\n+                result = result && (other.contractionCriterion == contractionCriterion);\n                 result = result && (other.expansionFactor == expansionFactor);\n                 result = result && (other.expansionMode == expansionMode);\n                 result = result && (other.numElements == numElements);\n     public synchronized int hashCode() {\n         final int[] hashData = new int[6];\n         hashData[0] = new Float(expansionFactor).hashCode();\n-        hashData[1] = new Float(contractionCriteria).hashCode();\n+        hashData[1] = new Float(contractionCriterion).hashCode();\n         hashData[2] = expansionMode.hashCode();\n         hashData[3] = Arrays.hashCode(internalArray);\n         hashData[4] = numElements;", "timestamp": 1353114529, "metainfo": ""}