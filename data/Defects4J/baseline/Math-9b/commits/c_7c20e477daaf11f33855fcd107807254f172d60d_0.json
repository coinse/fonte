{"sha": "7c20e477daaf11f33855fcd107807254f172d60d", "log": "Remove unnecessary throws clauses  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.analysis.BivariateRealFunction;\n      * Test preconditions.\n      */\n     @Test\n-    public void testPreconditions() throws MathException {\n+    public void testPreconditions() {\n         double[] xval = new double[] {3, 4, 5, 6.5};\n         double[] yval = new double[] {-4, -3, -1, 2.5};\n         double[][] zval = new double[xval.length][yval.length];\n      * z = 2 x - 3 y + 5\n      */\n     @Test\n-    public void testPlane() throws MathException {\n+    public void testPlane() {\n         double[] xval = new double[] {3, 4, 5, 6.5};\n         double[] yval = new double[] {-4, -3, -1, 2, 2.5};\n         // Function values\n      * z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5\n      */\n     @Test\n-    public void testParaboloid() throws MathException {\n+    public void testParaboloid() {\n         double[] xval = new double[] {3, 4, 5, 6.5};\n         double[] yval = new double[] {-4, -3, -1, 2, 2.5};\n         // Function values\n      *           + 4 x<sup>2</sup> y - x y<sup>2</sup> - 3 x<sup>3</sup> + y<sup>3</sup>\n      */\n     @Test\n-    public void testMatchingPartialDerivatives() throws MathException {\n+    public void testMatchingPartialDerivatives() {\n         final int sz = 21;\n         double[] val = new double[sz];\n         // Coordinate values\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.analysis.BivariateRealFunction;\n      * Test preconditions.\n      */\n     @Test\n-    public void testPreconditions() throws MathException {\n+    public void testPreconditions() {\n         double[] xval = new double[] {3, 4, 5, 6.5};\n         double[] yval = new double[] {-4, -3, -1, 2.5};\n         double[][] zval = new double[xval.length][yval.length];\n      * z = 2 x - 3 y + 5\n      */\n     @Test\n-    public void testPlane() throws MathException {\n+    public void testPlane() {\n         BivariateRealFunction f = new BivariateRealFunction() {\n                 public double value(double x, double y) {\n                     return 2 * x - 3 * y + 5;\n      * z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5\n      */\n     @Test\n-    public void testParaboloid() throws MathException {\n+    public void testParaboloid() {\n         BivariateRealFunction f = new BivariateRealFunction() {\n                 public double value(double x, double y) {\n                     return 2 * x * x - 3 * y * y + 4 * x * y - 5;\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.NonMonotonousSequenceException;\n import org.apache.commons.math.analysis.Expm1Function;\n import org.apache.commons.math.analysis.SinFunction;\n      * <p>\n      * |sin^(n)(zeta)| <= 1.0, zeta in [0, 2*PI]\n      */\n-    public void testSinFunction() throws MathException {\n+    public void testSinFunction() {\n         UnivariateRealFunction f = new SinFunction();\n         UnivariateRealInterpolator interpolator = new DividedDifferenceInterpolator();\n         double x[], y[], z, expected, result, tolerance;\n      * <p>\n      * |expm1^(n)(zeta)| <= e, zeta in [-1, 1]\n      */\n-    public void testExpm1Function() throws MathException {\n+    public void testExpm1Function() {\n         UnivariateRealFunction f = new Expm1Function();\n         UnivariateRealInterpolator interpolator = new DividedDifferenceInterpolator();\n         double x[], y[], z, expected, result, tolerance;\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.NonMonotonousSequenceException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n     }\n \n     @Test\n-    public void testIllegalArguments() throws MathException {\n+    public void testIllegalArguments() {\n         // Data set arrays of different size.\n         UnivariateRealInterpolator i = new LinearInterpolator();\n         try {\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n      * y = 2 x<sub>1</sub> - 3 x<sub>2</sub> + 5\n      */\n     @Test\n-    public void testLinearFunction2D() throws MathException {\n+    public void testLinearFunction2D() {\n         MultivariateRealFunction f = new MultivariateRealFunction() {\n                 public double value(double[] x) {\n                     if (x.length != 2) {\n      *     + 4 x<sub>1</sub> x<sub>2</sub> - 5\n      */\n     @Test\n-    public void testParaboloid2D() throws MathException {\n+    public void testParaboloid2D() {\n         MultivariateRealFunction f = new MultivariateRealFunction() {\n                 public double value(double[] x) {\n                     if (x.length != 2) {\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.NonMonotonousSequenceException;\n import org.apache.commons.math.analysis.Expm1Function;\n import org.apache.commons.math.analysis.SinFunction;\n      * <p>\n      * |sin^(n)(zeta)| <= 1.0, zeta in [0, 2*PI]\n      */\n-    public void testSinFunction() throws MathException {\n+    public void testSinFunction() {\n         UnivariateRealFunction f = new SinFunction();\n         UnivariateRealInterpolator interpolator = new NevilleInterpolator();\n         double x[], y[], z, expected, result, tolerance;\n      * <p>\n      * |expm1^(n)(zeta)| <= e, zeta in [-1, 1]\n      */\n-    public void testExpm1Function() throws MathException {\n+    public void testExpm1Function() {\n         UnivariateRealFunction f = new Expm1Function();\n         UnivariateRealInterpolator interpolator = new NevilleInterpolator();\n         double x[], y[], z, expected, result, tolerance;\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.util.FastMath;\n      * Test preconditions.\n      */\n     @Test\n-    public void testPreconditions() throws MathException {\n+    public void testPreconditions() {\n         double[] xval = new double[] {3, 4, 5, 6.5};\n         double[] yval = new double[] {-4, -3, -1, 2.5};\n         double[][] zval = new double[xval.length][yval.length];\n      * z = 2 x - 3 y + 5\n      */\n     @Test\n-    public void testPlane() throws MathException {\n+    public void testPlane() {\n         BivariateRealFunction f = new BivariateRealFunction() {\n                 public double value(double x, double y) {\n                     return 2 * x - 3 * y + 5\n      * z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5\n      */\n     @Test\n-    public void testParaboloid() throws MathException {\n+    public void testParaboloid() {\n         BivariateRealFunction f = new BivariateRealFunction() {\n                 public double value(double x, double y) {\n                     return 2 * x * x - 3 * y * y + 4 * x * y - 5\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.NonMonotonousSequenceException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n     }\n \n     @Test\n-    public void testIllegalArguments() throws MathException {\n+    public void testIllegalArguments() {\n         // Data set arrays of different size.\n         UnivariateRealInterpolator i = new SplineInterpolator();\n         try {\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.util.FastMath;\n      * Test preconditions.\n      */\n     @Test\n-    public void testPreconditions() throws MathException {\n+    public void testPreconditions() {\n         double[] xval = new double[] {3, 4, 5, 6.5};\n         double[] yval = new double[] {-4, -3, -1, 2.5};\n         double[] zval = new double[] {-12, -8, -5.5, -3, 0, 2.5};\n      * f(x, y, z) = 2 x - 3 y - z + 5\n      */\n     @Test\n-    public void testPlane() throws MathException {\n+    public void testPlane() {\n         TrivariateRealFunction f = new TrivariateRealFunction() {\n                 public double value(double x, double y, double z) {\n                     return 2 * x - 3 * y - z + 5;\n      * with A = 0.2, &omega; = 0.5, k<sub>x</sub> = 2, k<sub>y</sub> = 1.\n      */\n     @Test\n-    public void testWave() throws MathException {\n+    public void testWave() {\n         double[] xval = new double[] {3, 4, 5, 6.5};\n         double[] yval = new double[] {-4, -3, -1, 2, 2.5};\n         double[] zval = new double[] {-12, -8, -5.5, -3, 0, 4};", "timestamp": 1296589294, "metainfo": ""}