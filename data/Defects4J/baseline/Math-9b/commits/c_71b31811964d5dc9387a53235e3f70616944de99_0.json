{"sha": "71b31811964d5dc9387a53235e3f70616944de99", "log": "added Benjamin's patch from 2009-09-07 JIRA: MATH-286  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n  */\n \n package org.apache.commons.math.optimization.linear;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.RealPointValuePair;\n      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n      * @return row with the minimum ratio\n      */\n-    private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n+    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n+        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n+        List<Integer> minRatioPositions = new ArrayList<Integer>();\n         double minRatio = Double.MAX_VALUE;\n-        Integer minRatioPos = null;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n             if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                 final double ratio = rhs / entry;\n-                if (ratio < minRatio) {\n+                if (MathUtils.equals(ratio, minRatio, epsilon)) {\n+                    minRatioPositions.add(i);\n+                } else if (ratio < minRatio) {\n                     minRatio = ratio;\n-                    minRatioPos = i;\n+                    minRatioPositions = new ArrayList<Integer>();\n+                    minRatioPositions.add(i);\n                 }\n             }\n         }\n-        return minRatioPos;\n+\n+        if (minRatioPositions.size() == 0) {\n+          return null;\n+        } else if (minRatioPositions.size() > 1) {\n+          // there's a degeneracy as indicated by a tie in the minimum ratio test\n+          // check if there's an artificial variable that can be forced out of the basis\n+          for (Integer row : minRatioPositions) {\n+            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n+              int column = i + tableau.getArtificialVariableOffset();\n+              if (MathUtils.equals(tableau.getEntry(row, column), 1, epsilon) &&\n+                  row.equals(tableau.getBasicRow(column))) {\n+                return row;\n+              }\n+            }\n+          }\n+        }\n+        return minRatioPositions.get(0);\n     }\n-\n \n     /**\n      * Runs one iteration of the Simplex method on the given model.\n         incrementIterationsCounter();\n \n         Integer pivotCol = getPivotColumn(tableau);\n-        Integer pivotRow = getPivotRow(pivotCol, tableau);\n+        Integer pivotRow = getPivotRow(tableau, pivotCol);\n         if (pivotRow == null) {\n             throw new UnboundedSolutionException();\n         }\n     }\n \n     /**\n-     * Checks whether Phase 1 is solved.\n-     * @param tableau simple tableau for the problem\n-     * @return whether Phase 1 is solved\n-     */\n-    private boolean isPhase1Solved(final SimplexTableau tableau) {\n-        if (tableau.getNumArtificialVariables() == 0) {\n-            return true;\n-        }\n-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n-            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether the problem is at an optimal state.\n-     * @param tableau simple tableau for the problem\n-     * @return whether the model has been solved\n-     */\n-    public boolean isOptimal(final SimplexTableau tableau) {\n-        if (tableau.getNumArtificialVariables() > 0) {\n-            return false;\n-        }\n-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n-            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    /**\n      * Solves Phase 1 of the Simplex method.\n      * @param tableau simple tableau for the problem\n      * @exception OptimizationException if the maximal number of iterations is\n      * exceeded, or if the problem is found not to have a bounded solution, or\n      * if there is no feasible solution\n      */\n-    protected void solvePhase1(final SimplexTableau tableau)\n-        throws OptimizationException {\n+    protected void solvePhase1(final SimplexTableau tableau) throws OptimizationException {\n+\n         // make sure we're in Phase 1\n         if (tableau.getNumArtificialVariables() == 0) {\n             return;\n         }\n \n-        while (!isPhase1Solved(tableau)) {\n+        while (!tableau.isOptimal()) {\n             doIteration(tableau);\n         }\n \n \n     /** {@inheritDoc} */\n     @Override\n-    public RealPointValuePair doOptimize()\n-        throws OptimizationException {\n+    public RealPointValuePair doOptimize() throws OptimizationException {\n         final SimplexTableau tableau =\n             new SimplexTableau(function, linearConstraints, goal, nonNegative, epsilon);\n+\n         solvePhase1(tableau);\n         tableau.discardArtificialVariables();\n-        while (!isOptimal(tableau)) {\n+\n+        while (!tableau.isOptimal()) {\n             doIteration(tableau);\n         }\n         return tableau.getSolution();\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n import java.util.List;\n import java.util.Set;\n \n+import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealMatrix;\n-import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.linear.RealVector;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.RealPointValuePair;\n         this.constraints            = normalizeConstraints(constraints);\n         this.restrictToNonNegative  = restrictToNonNegative;\n         this.epsilon                = epsilon;\n-        this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);\n+        this.numDecisionVariables   = f.getCoefficients().getDimension() +\n+                                      (restrictToNonNegative ? 0 : 1);\n         this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                       getConstraintTypeCounts(Relationship.GEQ);\n         this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n \n     }\n \n-    /** Get the number of variables.\n-     * @return number of variables\n-     */\n-    public int getNumVariables() {\n-        return f.getCoefficients().getDimension();\n-    }\n-\n     /**\n      * Get new versions of the constraints which have positive right hand sides.\n      * @param originalConstraints original (not normalized) constraints\n      * @param col index of the column to check\n      * @return the row that the variable is basic in.  null if the column is not basic\n      */\n-    private Integer getBasicRow(final int col) {\n+    Integer getBasicRow(final int col) {\n         return getBasicRow(col, true);\n     }\n \n         this.numArtificialVariables = 0;\n     }\n \n-\n     /**\n      * @param src the source array\n      * @param dest the destination array\n      */\n     private void copyArray(final double[] src, final double[] dest) {\n         System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);\n+    }\n+\n+    /**\n+     * Returns whether the problem is at an optimal state.\n+     * @return whether the model has been solved\n+     */\n+    boolean isOptimal() {\n+        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {\n+            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n \n package org.apache.commons.math.optimization.linear;\n \n-import static org.junit.Assert.assertEquals;\n+import org.junit.Assert;\n \n import java.util.ArrayList;\n import java.util.Collection;\n \n-import org.apache.commons.math.linear.RealVector;\n-import org.apache.commons.math.linear.ArrayRealVector;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.RealPointValuePair;\n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n \n-        assertEquals(0.0, solution.getPoint()[0], .0000001);\n-        assertEquals(1.0, solution.getPoint()[1], .0000001);\n-        assertEquals(1.0, solution.getPoint()[2], .0000001);\n-        assertEquals(3.0, solution.getValue(), .0000001);\n+        Assert.assertEquals(0.0, solution.getPoint()[0], .0000001);\n+        Assert.assertEquals(1.0, solution.getPoint()[1], .0000001);\n+        Assert.assertEquals(1.0, solution.getPoint()[2], .0000001);\n+        Assert.assertEquals(3.0, solution.getValue(), .0000001);\n     }\n \n     @Test\n     public void testMath286() throws OptimizationException {\n-      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );\n-      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n-      constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));\n-\n-      RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);\n-      assertEquals(6.9, solution.getValue(), .0000001);\n+        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );\n+        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n+        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));\n+\n+        SimplexSolver solver = new SimplexSolver();\n+        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n+        Assert.assertEquals(6.9, solution.getValue(), .0000001);\n+    }\n+\n+    @Test\n+    public void testDegeneracy() throws OptimizationException {\n+        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.7 }, 0 );\n+        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n+        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 18.0));\n+        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.GEQ, 10.0));\n+        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 8.0));\n+\n+        SimplexSolver solver = new SimplexSolver();\n+        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n+        Assert.assertEquals(13.6, solution.getValue(), .0000001);\n     }\n \n     @Test\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n-        assertEquals(10.0, solution.getValue(), .0000001);\n+        Assert.assertEquals(10.0, solution.getValue(), .0000001);\n     }\n \n     @Test\n         constraints.add(new LinearConstraint(new double[] { 2, 0 }, Relationship.GEQ, -1.0));\n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n-        assertEquals(0, solution.getValue(), .0000001);\n-        assertEquals(0, solution.getPoint()[0], .0000001);\n-        assertEquals(0, solution.getPoint()[1], .0000001);\n+        Assert.assertEquals(0, solution.getValue(), .0000001);\n+        Assert.assertEquals(0, solution.getPoint()[0], .0000001);\n+        Assert.assertEquals(0, solution.getPoint()[1], .0000001);\n     }\n \n     @Test(expected=NoFeasibleSolutionException.class)\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n-        assertEquals(2.0, solution.getPoint()[0], 0.0);\n-        assertEquals(2.0, solution.getPoint()[1], 0.0);\n-        assertEquals(57.0, solution.getValue(), 0.0);\n+        Assert.assertEquals(2.0, solution.getPoint()[0], 0.0);\n+        Assert.assertEquals(2.0, solution.getPoint()[1], 0.0);\n+        Assert.assertEquals(57.0, solution.getValue(), 0.0);\n     }\n \n     @Test\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n-        assertEquals(10.0, solution.getPoint()[0], 0.0);\n-        assertEquals(30.0, solution.getValue(), 0.0);\n+        Assert.assertEquals(10.0, solution.getPoint()[0], 0.0);\n+        Assert.assertEquals(30.0, solution.getValue(), 0.0);\n     }\n \n     /**\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n-        assertEquals(2.0, solution.getPoint()[0], 0.0);\n-        assertEquals(2.0, solution.getPoint()[1], 0.0);\n-        assertEquals(50.0, solution.getValue(), 0.0);\n+        Assert.assertEquals(2.0, solution.getPoint()[0], 0.0);\n+        Assert.assertEquals(2.0, solution.getPoint()[1], 0.0);\n+        Assert.assertEquals(50.0, solution.getValue(), 0.0);\n     }\n \n     @Test\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);\n-        assertEquals(4.0, solution.getPoint()[0], 0.0);\n-        assertEquals(0.0, solution.getPoint()[1], 0.0);\n-        assertEquals(-13.0, solution.getValue(), 0.0);\n+        Assert.assertEquals(4.0, solution.getPoint()[0], 0.0);\n+        Assert.assertEquals(0.0, solution.getPoint()[1], 0.0);\n+        Assert.assertEquals(-13.0, solution.getValue(), 0.0);\n     }\n \n     @Test\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n-        assertEquals(-2.0, solution.getPoint()[0], 0.0);\n-        assertEquals(8.0, solution.getPoint()[1], 0.0);\n-        assertEquals(12.0, solution.getValue(), 0.0);\n+        Assert.assertEquals(-2.0, solution.getPoint()[0], 0.0);\n+        Assert.assertEquals(8.0, solution.getPoint()[1], 0.0);\n+        Assert.assertEquals(12.0, solution.getValue(), 0.0);\n     }\n \n     @Test(expected = NoFeasibleSolutionException.class)\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n-        assertEquals(2902.92783505155, solution.getPoint()[0], .0000001);\n-        assertEquals(480.419243986254, solution.getPoint()[1], .0000001);\n-        assertEquals(0.0, solution.getPoint()[2], .0000001);\n-        assertEquals(0.0, solution.getPoint()[3], .0000001);\n-        assertEquals(0.0, solution.getPoint()[4], .0000001);\n-        assertEquals(1438556.7491409, solution.getValue(), .0000001);\n+        Assert.assertEquals(2902.92783505155, solution.getPoint()[0], .0000001);\n+        Assert.assertEquals(480.419243986254, solution.getPoint()[1], .0000001);\n+        Assert.assertEquals(0.0, solution.getPoint()[2], .0000001);\n+        Assert.assertEquals(0.0, solution.getPoint()[3], .0000001);\n+        Assert.assertEquals(0.0, solution.getPoint()[4], .0000001);\n+        Assert.assertEquals(1438556.7491409, solution.getValue(), .0000001);\n     }\n \n     @Test\n \n       SimplexSolver solver = new SimplexSolver();\n       RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n-      assertEquals(1.0, solution.getPoint()[0], 0.0);\n-      assertEquals(1.0, solution.getPoint()[1], 0.0);\n-      assertEquals(0.0, solution.getPoint()[2], 0.0);\n-      assertEquals(15.0, solution.getValue(), 0.0);\n+      Assert.assertEquals(1.0, solution.getPoint()[0], 0.0);\n+      Assert.assertEquals(1.0, solution.getPoint()[1], 0.0);\n+      Assert.assertEquals(0.0, solution.getPoint()[2], 0.0);\n+      Assert.assertEquals(15.0, solution.getValue(), 0.0);\n   }\n \n     @Test\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n-        assertEquals(0, solution.getValue(), .0000001);\n+        Assert.assertEquals(0, solution.getValue(), .0000001);\n     }\n \n     @Test\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n-        assertEquals(7518.0, solution.getValue(), .0000001);\n+        Assert.assertEquals(7518.0, solution.getValue(), .0000001);\n     }\n \n     /**\n         String[] equationParts = s.split(\"[>|<]?=\");\n         double rhs = Double.parseDouble(equationParts[1].trim());\n \n-        RealVector lhs = new ArrayRealVector(numCoefficients);\n+        double[] lhs = new double[numCoefficients];\n         String left = equationParts[0].replaceAll(\" ?x\", \"\");\n         String[] coefficients = left.split(\" \");\n         for (String coefficient : coefficients) {\n             double value = coefficient.charAt(0) == '-' ? -1 : 1;\n             int index = Integer.parseInt(coefficient.replaceFirst(\"[+|-]\", \"\").trim());\n-            lhs.setEntry(index, value);\n+            lhs[index] = value;\n         }\n         return new LinearConstraint(lhs, relationship, rhs);\n     }\n--- a/src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java\n \n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.optimization.GoalType;\n+import org.junit.Assert;\n+import org.junit.Test;\n \n-import junit.framework.TestCase;\n+public class SimplexTableauTest {\n \n-public class SimplexTableauTest extends TestCase {\n-\n+    @Test\n     public void testInitialization() {\n         LinearObjectiveFunction f = createFunction();\n         Collection<LinearConstraint> constraints = createConstraints();\n         assertMatrixEquals(expectedInitialTableau, tableau.getData());\n     }\n \n+    @Test\n     public void testdiscardArtificialVariables() {\n         LinearObjectiveFunction f = createFunction();\n         Collection<LinearConstraint> constraints = createConstraints();\n         assertMatrixEquals(expectedTableau, tableau.getData());\n     }\n \n+    @Test\n     public void testTableauWithNoArtificialVars() {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {15, 10}, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         assertMatrixEquals(initialTableau, tableau.getData());\n     }\n \n+    @Test\n     public void testSerial() {\n         LinearObjectiveFunction f = createFunction();\n         Collection<LinearConstraint> constraints = createConstraints();\n         SimplexTableau tableau =\n             new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false, 1.0e-6);\n-        assertEquals(tableau, TestUtils.serializeAndRecover(tableau));\n+        Assert.assertEquals(tableau, TestUtils.serializeAndRecover(tableau));\n     }\n+\n     private LinearObjectiveFunction createFunction() {\n         return new LinearObjectiveFunction(new double[] {15, 10}, 0);\n     }\n     }\n \n     private void assertMatrixEquals(double[][] expected, double[][] result) {\n-        assertEquals(\"Wrong number of rows.\", expected.length, result.length);\n+        Assert.assertEquals(\"Wrong number of rows.\", expected.length, result.length);\n         for (int i = 0; i < expected.length; i++) {\n-            assertEquals(\"Wrong number of columns.\", expected[i].length, result[i].length);\n+            Assert.assertEquals(\"Wrong number of columns.\", expected[i].length, result[i].length);\n             for (int j = 0; j < expected[i].length; j++) {\n-                assertEquals(\"Wrong value at position [\" + i + \",\" + j + \"]\", expected[i][j], result[i][j]);\n+                Assert.assertEquals(\"Wrong value at position [\" + i + \",\" + j + \"]\", expected[i][j], result[i][j], 1.0e-15);\n             }\n         }\n     }", "timestamp": 1252399212, "metainfo": ""}