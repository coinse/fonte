{"sha": "2082ade9029fc45bc71fbd4cc415190b22a280bd", "log": "optimized some fraction operations (mainly pow) replaced pow(BigFraction) by pow(double) as it already converted the argument to double upon entry added tests for pow  ", "commit": "\n--- a/src/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/java/org/apache/commons/math/fraction/BigFraction.java\n import java.math.BigInteger;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Representation of a rational number without any overflow. This class is\n      *             if the {@link BigInteger} is <code>null</code>.\n      */\n     public BigFraction add(final BigInteger bg) {\n-        return add(new BigFraction(bg, BigInteger.ONE));\n+        return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);\n+    }\n+\n+    /**\n+     * <p>\n+     * Adds the value of this fraction to the passed <tt>integer</tt>, returning\n+     * the result in reduced form.\n+     * </p>\n+     * \n+     * @param i\n+     *            the <tt>integer</tt> to add.\n+     * @return a <code>BigFraction</code> instance with the resulting values.\n+     */\n+    public BigFraction add(final int i) {\n+        return add(BigInteger.valueOf(i));\n+    }\n+\n+    /**\n+     * <p>\n+     * Adds the value of this fraction to the passed <tt>long</tt>, returning\n+     * the result in reduced form.\n+     * </p>\n+     * \n+     * @param l\n+     *            the <tt>long</tt> to add.\n+     * @return a <code>BigFraction</code> instance with the resulting values.\n+     */\n+    public BigFraction add(final long l) {\n+        return add(BigInteger.valueOf(l));\n     }\n \n     /**\n         }\n         return new BigFraction(num, den);\n \n-    }\n-\n-    /**\n-     * <p>\n-     * Adds the value of this fraction to the passed <tt>integer</tt>, returning\n-     * the result in reduced form.\n-     * </p>\n-     * \n-     * @param i\n-     *            the <tt>integer</tt> to add.\n-     * @return a <code>BigFraction</code> instance with the resulting values.\n-     */\n-    public BigFraction add(final int i) {\n-        return add(new BigFraction(i, 1));\n-    }\n-\n-    /**\n-     * <p>\n-     * Adds the value of this fraction to the passed <tt>long</tt>, returning\n-     * the result in reduced form.\n-     * </p>\n-     * \n-     * @param l\n-     *            the <tt>long</tt> to add.\n-     * @return a <code>BigFraction</code> instance with the resulting values.\n-     */\n-    public BigFraction add(final long l) {\n-        return add(new BigFraction(l, 1L));\n     }\n \n     /**\n      * @return a {@link BigFraction} instance with the resulting values.\n      * @throws NullPointerException\n      *             if the <code>BigInteger</code> is <code>null</code>.\n+     * @throws ArithmeticException\n+     *             if the fraction to divide by is zero.\n      */\n     public BigFraction divide(final BigInteger bg) {\n-        return divide(new BigFraction(bg, BigInteger.ONE));\n+        if (BigInteger.ZERO.equals(bg)) {\n+            throw MathRuntimeException.createArithmeticException(\"denominator must be different from 0\");\n+        }\n+        return new BigFraction(numerator, denominator.multiply(bg));\n+    }\n+\n+    /**\n+     * <p>\n+     * Divide the value of this fraction by the passed <tt>int</tt>, ie\n+     * \"this * 1 / i\", returning the result in reduced form.\n+     * </p>\n+     * \n+     * @param i\n+     *            the <tt>int</tt> to divide by.\n+     * @return a {@link BigFraction} instance with the resulting values.\n+     * @throws ArithmeticException\n+     *             if the fraction to divide by is zero.\n+     */\n+    public BigFraction divide(final int i) {\n+        return divide(BigInteger.valueOf(i));\n+    }\n+\n+    /**\n+     * <p>\n+     * Divide the value of this fraction by the passed <tt>long</tt>, ie\n+     * \"this * 1 / l\", returning the result in reduced form.\n+     * </p>\n+     * \n+     * @param l\n+     *            the <tt>long</tt> to divide by.\n+     * @return a {@link BigFraction} instance with the resulting values.\n+     * @throws ArithmeticException\n+     *             if the fraction to divide by is zero.\n+     */\n+    public BigFraction divide(final long l) {\n+        return divide(BigInteger.valueOf(l));\n     }\n \n     /**\n \n     /**\n      * <p>\n-     * Divide the value of this fraction by the passed <tt>int</tt>, ie\n-     * \"this * 1 / i\", returning the result in reduced form.\n-     * </p>\n-     * \n-     * @param i\n-     *            the <tt>int</tt> to divide by.\n-     * @return a {@link BigFraction} instance with the resulting values.\n-     */\n-    public BigFraction divide(final int i) {\n-        return divide(new BigFraction(i, 1));\n-    }\n-\n-    /**\n-     * <p>\n-     * Divide the value of this fraction by the passed <tt>long</tt>, ie\n-     * \"this * 1 / l\", returning the result in reduced form.\n-     * </p>\n-     * \n-     * @param l\n-     *            the <tt>long</tt> to divide by.\n-     * @return a {@link BigFraction} instance with the resulting values.\n-     */\n-    public BigFraction divide(final long l) {\n-        return divide(new BigFraction(l, 1L));\n-    }\n-\n-    /**\n-     * <p>\n      * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n      * the numerator divided by denominator.\n      * </p>\n \n     /**\n      * <p>\n+     * Multiply the value of this fraction by the passed <tt>int</tt>, returning\n+     * the result in reduced form.\n+     * </p>\n+     * \n+     * @param i\n+     *            the <tt>int</tt> to multiply by.\n+     * @return a {@link BigFraction} instance with the resulting values.\n+     */\n+    public BigFraction multiply(final int i) {\n+        return multiply(BigInteger.valueOf(i));\n+    }\n+\n+    /**\n+     * <p>\n+     * Multiply the value of this fraction by the passed <tt>long</tt>,\n+     * returning the result in reduced form.\n+     * </p>\n+     * \n+     * @param l\n+     *            the <tt>long</tt> to multiply by.\n+     * @return a {@link BigFraction} instance with the resulting values.\n+     */\n+    public BigFraction multiply(final long l) {\n+        return multiply(BigInteger.valueOf(l));\n+    }\n+\n+    /**\n+     * <p>\n      * Multiplies the value of this fraction by another, returning the result in\n      * reduced form.\n      * </p>\n \n     /**\n      * <p>\n-     * Multiply the value of this fraction by the passed <tt>int</tt>, returning\n-     * the result in reduced form.\n-     * </p>\n-     * \n-     * @param i\n-     *            the <tt>int</tt> to multiply by.\n-     * @return a {@link BigFraction} instance with the resulting values.\n-     */\n-    public BigFraction multiply(final int i) {\n-        return multiply(new BigFraction(i, 1));\n-    }\n-\n-    /**\n-     * <p>\n-     * Multiply the value of this fraction by the passed <tt>long</tt>,\n-     * returning the result in reduced form.\n-     * </p>\n-     * \n-     * @param l\n-     *            the <tt>long</tt> to multiply by.\n-     * @return a {@link BigFraction} instance with the resulting values.\n-     */\n-    public BigFraction multiply(final long l) {\n-        return multiply(new BigFraction(l, 1L));\n-    }\n-\n-    /**\n-     * <p>\n      * Return the additive inverse of this fraction, returning the result in\n      * reduced form.\n      * </p>\n      */\n     public double percentageValue() {\n         return (numerator.divide(denominator)).multiply(ONE_HUNDRED_DOUBLE).doubleValue();\n-    }\n-\n-    /**\n-     * <p>\n-     * Returns a <code>BigFraction</code> whose value is\n-     * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.\n-     * </p>\n-     * \n-     * @param exponent\n-     *            exponent to which this <code>BigFraction</code> is to be raised.\n-     * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.\n-     */\n-    public BigFraction pow(final BigInteger exponent) {\n-        BigFraction ret = this;\n-        if (!BigInteger.ONE.equals(exponent)) {\n-            ret = ONE;\n-            if (!BigInteger.ZERO.equals(exponent)) {\n-                for (BigInteger bg = BigInteger.ONE; bg.compareTo(exponent) < 0; bg = bg.add(BigInteger.ONE)) {\n-                    ret = ret.multiply(this);\n-                }\n-            }\n-        }\n-\n-        return ret;\n-    }\n-\n-    /**\n-     * <p>\n-     * Returns a <code>BigFraction</code> whose value is\n-     * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.\n-     * </p>\n-     * \n-     * @param exponent\n-     *            exponent to which this <code>BigFraction</code> is to be raised.\n-     * @return <tt>this<sup>exponent</sup></tt>.\n-     */\n-    public double pow(final BigFraction exponent) {\n-        return Math.pow(numerator.doubleValue(), exponent.doubleValue()) / Math.pow(denominator.doubleValue(), exponent.doubleValue());\n     }\n \n     /**\n      * @return <tt>this<sup>exponent</sup></tt>.\n      */\n     public BigFraction pow(final int exponent) {\n-        return pow(BigInteger.valueOf(exponent));\n+        if (exponent < 0) {\n+            return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));\n+        }\n+        return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));\n     }\n \n     /**\n      * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.\n      */\n     public BigFraction pow(final long exponent) {\n-        return pow(BigInteger.valueOf(exponent));\n+        if (exponent < 0) {\n+            return new BigFraction(MathUtils.pow(denominator, -exponent),\n+                                   MathUtils.pow(numerator,   -exponent));\n+        }\n+        return new BigFraction(MathUtils.pow(numerator,   exponent),\n+                               MathUtils.pow(denominator, exponent));\n+    }\n+ \n+    /**\n+     * <p>\n+     * Returns a <code>BigFraction</code> whose value is\n+     * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.\n+     * </p>\n+     * \n+     * @param exponent\n+     *            exponent to which this <code>BigFraction</code> is to be raised.\n+     * @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.\n+     */\n+    public BigFraction pow(final BigInteger exponent) {\n+        if (exponent.compareTo(BigInteger.ZERO) < 0) {\n+            final BigInteger eNeg = exponent.negate();\n+            return new BigFraction(MathUtils.pow(denominator, eNeg),\n+                                   MathUtils.pow(numerator,   eNeg));\n+        }\n+        return new BigFraction(MathUtils.pow(numerator,   exponent),\n+                               MathUtils.pow(denominator, exponent));\n+    }\n+\n+    /**\n+     * <p>\n+     * Returns a <code>double</code> whose value is\n+     * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.\n+     * </p>\n+     * \n+     * @param exponent\n+     *            exponent to which this <code>BigFraction</code> is to be raised.\n+     * @return <tt>this<sup>exponent</sup></tt>.\n+     */\n+    public double pow(final double exponent) {\n+        return Math.pow(numerator.doubleValue(),   exponent) /\n+               Math.pow(denominator.doubleValue(), exponent);\n     }\n \n     /**\n      *             if the {@link BigInteger} is <code>null</code>.\n      */\n     public BigFraction subtract(final BigInteger bg) {\n-        return subtract(new BigFraction(bg, BigInteger.valueOf(1)));\n+        return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);\n+    }\n+\n+    /**\n+     * <p>\n+     * Subtracts the value of an <tt>integer</tt> from the value of this one,\n+     * returning the result in reduced form.\n+     * </p>\n+     * \n+     * @param i\n+     *            the <tt>integer</tt> to subtract.\n+     * @return a <code>BigFraction</code> instance with the resulting values.\n+     */\n+    public BigFraction subtract(final int i) {\n+        return subtract(BigInteger.valueOf(i));\n+    }\n+\n+    /**\n+     * <p>\n+     * Subtracts the value of an <tt>integer</tt> from the value of this one,\n+     * returning the result in reduced form.\n+     * </p>\n+     * \n+     * @param l\n+     *            the <tt>long</tt> to subtract.\n+     * @return a <code>BigFraction</code> instance with the resulting values, or\n+     *         this object if the <tt>long</tt> is zero.\n+     */\n+    public BigFraction subtract(final long l) {\n+        return subtract(BigInteger.valueOf(l));\n     }\n \n     /**\n         }\n         return new BigFraction(num, den);\n \n-    }\n-\n-    /**\n-     * <p>\n-     * Subtracts the value of an <tt>integer</tt> from the value of this one,\n-     * returning the result in reduced form.\n-     * </p>\n-     * \n-     * @param i\n-     *            the <tt>integer</tt> to subtract.\n-     * @return a <code>BigFraction</code> instance with the resulting values.\n-     */\n-    public BigFraction subtract(final int i) {\n-        return subtract(new BigFraction(i, 1));\n-    }\n-\n-    /**\n-     * <p>\n-     * Subtracts the value of an <tt>integer</tt> from the value of this one,\n-     * returning the result in reduced form.\n-     * </p>\n-     * \n-     * @param l\n-     *            the <tt>long</tt> to subtract.\n-     * @return a <code>BigFraction</code> instance with the resulting values, or\n-     *         this object if the <tt>long</tt> is zero.\n-     */\n-    public BigFraction subtract(final long l) {\n-        return subtract(new BigFraction(l, 1L));\n     }\n \n     /**\n--- a/src/test/org/apache/commons/math/fraction/BigFractionTest.java\n+++ b/src/test/org/apache/commons/math/fraction/BigFractionTest.java\n         assertEquals(BigFraction.getReducedFraction(2, Integer.MIN_VALUE).getNumeratorAsInt(), -1);\n         assertEquals(BigFraction.getReducedFraction(1, -1).getNumeratorAsInt(), -1);\n     }\n+\n+    public void testPow() {\n+        assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13));\n+        assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13l));\n+        assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(BigInteger.valueOf(13l)));\n+        assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(0));\n+        assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(0l));\n+        assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(BigInteger.valueOf(0l)));\n+        assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(-13));\n+        assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(-13l));\n+        assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(BigInteger.valueOf(-13l)));\n+    }\n+\n }", "timestamp": 1238428136, "metainfo": ""}