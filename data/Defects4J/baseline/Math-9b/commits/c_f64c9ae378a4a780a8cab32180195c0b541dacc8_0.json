{"sha": "f64c9ae378a4a780a8cab32180195c0b541dacc8", "log": "updated serialization metadata as we now serialize secondary equations too  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java\n class ClassicalRungeKuttaStepInterpolator\n     extends RungeKuttaStepInterpolator {\n \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = -6576285612589783992L;\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 20110928L;\n \n     /** Simple constructor.\n      * This constructor builds an instance that is not usable yet, the\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java\n     /** Shampine (1986) Dense output, element 6. */\n     private static final double D6 =      69997945.0 /     29380423.0;\n \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 4104157279605906956L;\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 20110928L;\n \n     /** First vector for interpolation. */\n     private double[] v1;\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n class DormandPrince853StepInterpolator\n   extends RungeKuttaStepInterpolator {\n \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 7152276390558450974L;\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 20110928L;\n \n     /** Propagation weights, element 1. */\n     private static final double B_01 =         104257.0 / 1920240.0;\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java\n class EulerStepInterpolator\n   extends RungeKuttaStepInterpolator {\n \n-  /** Serializable version identifier */\n-  private static final long serialVersionUID = -7179861704951334960L;\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = 20110928L;\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java\n     /** Second Gill coefficient. */\n     private static final double TWO_PLUS_SQRT_2 = 2 + FastMath.sqrt(2.0);\n \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = -107804074496313322L;\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 20110928L;\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java\n   extends AbstractStepInterpolator {\n \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = 7320613236731409847L;\n+    private static final long serialVersionUID = 20110928L;\n \n     /** Slope at the beginning of the step. */\n     private double[] y0Dot;\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java\n   extends RungeKuttaStepInterpolator {\n \n   /** Serializable version identifier */\n-  private static final long serialVersionUID = -3583240427587318654L;\n+  private static final long serialVersionUID = 20110928L;\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java\n class MidpointStepInterpolator\n   extends RungeKuttaStepInterpolator {\n \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = -865524111506042509L;\n+  /** Serializable version identifier */\n+  private static final long serialVersionUID = 20110928L;\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java\n class ThreeEighthesStepInterpolator\n   extends RungeKuttaStepInterpolator {\n \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = -3345024435978721931L;\n+  /** Serializable version identifier */\n+  private static final long serialVersionUID = 20110928L;\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java\n         oos.writeObject(handler);\n     }\n \n-    Assert.assertTrue(bos.size () > 753000);\n-    Assert.assertTrue(bos.size () < 754000);\n+    Assert.assertTrue(bos.size () > 750000);\n+    Assert.assertTrue(bos.size () < 800000);\n \n     ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n     ObjectInputStream     ois = new ObjectInputStream(bis);\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n         oos.writeObject(handler);\n     }\n \n-    Assert.assertTrue(bos.size () > 126000);\n-    Assert.assertTrue(bos.size () < 127000);\n+    Assert.assertTrue(bos.size () > 125000);\n+    Assert.assertTrue(bos.size () < 130000);\n \n     ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n     ObjectInputStream     ois = new ObjectInputStream(bis);\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n         oos.writeObject(handler);\n     }\n \n-    Assert.assertTrue(bos.size () > 88000);\n-    Assert.assertTrue(bos.size () < 89000);\n+    Assert.assertTrue(bos.size () > 85000);\n+    Assert.assertTrue(bos.size () < 95000);\n \n     ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n     ObjectInputStream     ois = new ObjectInputStream(bis);\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java\n         oos.writeObject(handler);\n     }\n \n-    Assert.assertTrue(bos.size () > 753000);\n-    Assert.assertTrue(bos.size () < 754000);\n+    Assert.assertTrue(bos.size () > 750000);\n+    Assert.assertTrue(bos.size () < 800000);\n \n     ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n     ObjectInputStream     ois = new ObjectInputStream(bis);\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n         oos.writeObject(handler);\n     }\n \n-    Assert.assertTrue(bos.size () > 34000);\n-    Assert.assertTrue(bos.size () < 35000);\n+    Assert.assertTrue(bos.size () > 35000);\n+    Assert.assertTrue(bos.size () < 36000);\n \n     ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n     ObjectInputStream     ois = new ObjectInputStream(bis);\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n         oos.writeObject(handler);\n     }\n \n-    Assert.assertTrue(bos.size () > 167000);\n-    Assert.assertTrue(bos.size () < 168000);\n+    Assert.assertTrue(bos.size () > 170000);\n+    Assert.assertTrue(bos.size () < 175000);\n \n     ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n     ObjectInputStream     ois = new ObjectInputStream(bis);\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java\n         oos.writeObject(handler);\n     }\n \n-    Assert.assertTrue(bos.size () > 114000);\n-    Assert.assertTrue(bos.size () < 115000);\n+    Assert.assertTrue(bos.size () > 120000);\n+    Assert.assertTrue(bos.size () < 125000);\n \n     ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n     ObjectInputStream     ois = new ObjectInputStream(bis);\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java\n         oos.writeObject(handler);\n     }\n \n-    Assert.assertTrue(bos.size () > 753000);\n-    Assert.assertTrue(bos.size () < 754000);\n+    Assert.assertTrue(bos.size () > 750000);\n+    Assert.assertTrue(bos.size () < 800000);\n \n     ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n     ObjectInputStream     ois = new ObjectInputStream(bis);\n--- a/src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java\n     ObjectOutputStream    oos = new ObjectOutputStream(bos);\n     oos.writeObject(interpolator);\n \n-    Assert.assertTrue(bos.size () > 200);\n-    Assert.assertTrue(bos.size () < 300);\n+    Assert.assertTrue(bos.size () > 300);\n+    Assert.assertTrue(bos.size () < 500);\n \n     ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n     ObjectInputStream     ois = new ObjectInputStream(bis);", "timestamp": 1317190720, "metainfo": ""}