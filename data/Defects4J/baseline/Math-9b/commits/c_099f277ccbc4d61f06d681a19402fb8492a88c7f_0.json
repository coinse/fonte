{"sha": "099f277ccbc4d61f06d681a19402fb8492a88c7f", "log": "Made increment, evaluate consistent wrt NaN, improved javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n \n import java.io.Serializable;\n \n-import org\n-    .apache\n-    .commons\n-    .math\n-    .stat\n-    .univariate\n-    .AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n  * Returns the minimum of the available values.\n+ * <p>\n+ * <ul>\n+ * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n+ * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n+ * <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>, \n+ * the result is <code>Double.NEGATIVE_INFINITY.</code></li>\n+ * </ul> \n  * \n- * @version $Revision: 1.16 $ $Date: 2004/04/27 16:42:33 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/18 22:09:53 $\n  */\n public class Min extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n     public void increment(final double d) {\n-        value = Double.isNaN(value) ? d : Math.min(value, d);\n+        if (d < value || Double.isNaN(value)) {\n+            value = d;\n+        }\n         n++;\n     }\n \n      * \n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n-    public double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+    public double evaluate(final double[] values,final int begin, final int length) {\n         double min = Double.NaN;\n         if (test(values, begin, length)) {\n             min = values[begin];", "timestamp": 1087596593, "metainfo": ""}