{"sha": "1d3a7b6b83d04036d574db3a056aef10fc7b7a51", "log": "MATH-387: Allow \"null\" array arguments in \"RealPointValuePair\" and \"VectorialPointValuePair\" constructors.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java\n+++ b/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java\n  * @since 2.0\n  */\n public class RealPointValuePair implements Serializable {\n-\n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 1003888396256744753L;\n \n      * @param value value of an objective function at the point\n      */\n     public RealPointValuePair(final double[] point, final double value) {\n-        this.point = point.clone();\n+        this.point = (point == null ? null : point.clone());\n         this.value  = value;\n     }\n \n      * it will be referenced\n      */\n     public RealPointValuePair(final double[] point, final double value,\n-                                final boolean copyArray) {\n-        this.point = copyArray ? point.clone() : point;\n+                              final boolean copyArray) {\n+        this.point = (copyArray ?\n+                      (point == null ? null : point.clone()) :\n+                      point);\n         this.value  = value;\n     }\n \n      * @return a copy of the stored point\n      */\n     public double[] getPoint() {\n-        return point.clone();\n+        return (point == null ? null : point.clone());\n     }\n \n     /** Get a reference to the point.\n     public double getValue() {\n         return value;\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java\n      * @param absoluteThreshold absolute tolerance threshold\n      */\n     public SimpleScalarValueChecker(final double relativeThreshold,\n-                                 final double absoluteThreshold) {\n+                                    final double absoluteThreshold) {\n         this.relativeThreshold = relativeThreshold;\n         this.absoluteThreshold = absoluteThreshold;\n     }\n         final double size       = Math.max(Math.abs(p), Math.abs(c));\n         return (difference <= (size * relativeThreshold)) || (difference <= absoluteThreshold);\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java\n+++ b/src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java\n      * @param value value of an objective function at the point\n      */\n     public VectorialPointValuePair(final double[] point, final double[] value) {\n-        this.point = point.clone();\n-        this.value = value.clone();\n+        this.point = (point == null ? null : point.clone());\n+        this.value = (value == null ? null : value.clone());\n     }\n \n     /** Build a point/objective function value pair.\n      */\n     public VectorialPointValuePair(final double[] point, final double[] value,\n                                    final boolean copyArray) {\n-        this.point = copyArray ? point.clone() : point;\n-        this.value = copyArray ? value.clone() : value;\n+        this.point = (copyArray ?\n+                      (point == null ? null : point.clone()) :\n+                      point);\n+        this.value = (copyArray ?\n+                      (value == null ? null : value.clone()) :\n+                      value);\n     }\n \n     /** Get the point.\n      * @return a copy of the stored point\n      */\n     public double[] getPoint() {\n-        return point.clone();\n+        return (point == null ? null : point.clone());\n     }\n \n     /** Get a reference to the point.\n      * @return a copy of the stored value of the objective function\n      */\n     public double[] getValue() {\n-        return value.clone();\n+        return (value == null ? null : value.clone());\n     }\n \n     /** Get a reference to the value of the objective function.", "timestamp": 1279551084, "metainfo": ""}