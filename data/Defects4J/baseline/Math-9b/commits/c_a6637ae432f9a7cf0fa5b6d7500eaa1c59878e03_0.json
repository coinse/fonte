{"sha": "a6637ae432f9a7cf0fa5b6d7500eaa1c59878e03", "log": "Removing Product from Univariate Interface, applying sumLog changes to geomean in AbstractStoreUnivariate.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java\n+++ b/src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java\n         double n = getN();\n \n         double coefficientOne = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n-        double termTwo = ((3 * Math.pow(n - 1, 2.0)) \n-                           / ((n - 2) * (n - 3))); \n+        double termTwo = ((3 * Math.pow(n - 1, 2.0)) / ((n - 2) * (n - 3)));\n         // Calculate kurtosis\n         kurtosis = (coefficientOne * accum) - termTwo;\n \n      * @see org.apache.commons.math.stat.Univariate#getGeometricMean()\n      */\n     public double getGeometricMean() {\n-        double gMean = Math.pow(getProduct(),(1.0/getN()));\n+        double gMean = Double.NaN;\n+\n+        if (getN() > 0) {\n+            double sumLog = 0.0;\n+            for (int i = 0; i < getN(); i++) {\n+                sumLog += Math.log(getElement(i));\n+            }\n+            gMean = Math.exp(sumLog / (double)getN() );\n+        }\n+\n         return gMean;\n     }\n-\n-    /**\n-     * Returns the product for this collection of values\n-     * @see org.apache.commons.math.stat.Univariate#getProduct()\n-     */\n-    public double getProduct() {\n-        double product = Double.NaN;\n-        if( getN() > 0 ) {\n-            product = 1.0;\n-            for( int i = 0; i < getN(); i++) {\n-                product *= getElement(i);\n-            }\n-        }\n-        return product;\n-    }\n-       \n \n     /**\n      * Returns the variance for this collection of values\n \n             // Calculate the sum of the squares of the distance between each \n             // value and the mean\n-            double accum = 0.0;\t\t\n-            for (int i = 0; i < getN(); i++){\n+            double accum = 0.0;\n+            for (int i = 0; i < getN(); i++) {\n                 accum += Math.pow((getElement(i) - mean), 2.0);\n             }\n \n         }\n         return accum;\n     }\n-   \n+\n     /**\n      * @see org.apache.commons.math.stat.StoreUnivariate#getSortedValues()\n      *\n-     */ \n+     */\n     public double[] getSortedValues() {\n         double[] values = getValues();\n         Arrays.sort(values);\n         return values;\n     }\n-    \n+\n     /**\n      * Returns an estimate for the pth percentile of the stored values\n      * @see org.apache.commons.math.stat.StoreUnivariate#getPercentile(double)\n      */\n-    public double getPercentile(double p) {    \n+    public double getPercentile(double p) {\n         if ((p > 100) || (p <= 0)) {\n             throw new IllegalArgumentException(\"invalid percentile value\");\n         }\n             return Double.NaN;\n         }\n         if (n == 1) {\n-            return getElement(0);  // always return single value for n = 1\n+            return getElement(0); // always return single value for n = 1\n         }\n         double pos = p * (n + 1) / 100;\n         double fpos = Math.floor(pos);\n         }\n         double lower = sorted[intPos - 1];\n         double upper = sorted[intPos];\n-        return lower + d * (upper - lower);       \n+        return lower + d * (upper - lower);\n     }\n \n }\n--- a/src/java/org/apache/commons/math/stat/Univariate.java\n+++ b/src/java/org/apache/commons/math/stat/Univariate.java\n  * @author Phil Steitz\n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n  * @author <a href=\"mailto:mdiggory@apache.org\">Mark Diggory</a>\n- * @version $Revision: 1.3 $ $Date: 2003/06/16 21:24:30 $\n+ * @version $Revision: 1.4 $ $Date: 2003/06/21 23:38:27 $\n  * \n */\n public interface Univariate {\n      * or if the productof the available values is less than or equal to 0.\n      */\n     abstract double getGeometricMean();\n-\n-    /** \n-     * Returns the product of the available values\n-     * @return The product or Double.NaN if no values have been added.\n-     */\n-    abstract double getProduct();\n \n     /** \n      * Returns the variance of the available values.\n--- a/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n  * @author <a href=\"mailto:mdiggory@apache.org\">Mark Diggory</a>\n  * @author Brent Worden\n  * @author <a href=\"mailto:HotFusionMan@Yahoo.com\">Albert Davidson Chou</a>\n- * @version $Revision: 1.13 $ $Date: 2003/06/21 02:54:55 $\n+ * @version $Revision: 1.14 $ $Date: 2003/06/21 23:38:27 $\n  *\n */\n public class UnivariateImpl implements Univariate, Serializable {\n             return StatUtils.min(doubleArray.getElements());\n         }\n         return min;\n-    }\n-\n-    /* (non-Javadoc)\n-     * @see org.apache.commons.math.stat.Univariate#getProduct()\n-     */\n-    public double getProduct() {\n-        if (windowSize != Univariate.INFINITE_WINDOW) {\n-            return StatUtils.product(doubleArray.getElements());\n-        }\n-\n-        return sumLog;\n     }\n \n     /* (non-Javadoc)\n--- a/src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java\n  * Test cases for the {@link Univariate} class.\n  *\n  * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n- * @version $Revision: 1.2 $ $Date: 2003/06/21 23:02:51 $\n+ * @version $Revision: 1.3 $ $Date: 2003/06/21 23:38:27 $\n  */\n \n public final class ListUnivariateImplTest extends TestCase {\n         u.addValue( 3.0 );\n         u.addValue( 4.0 );\n \n-        //assertEquals( \"Product not expected\", 24.0, u.getProduct(), Double.MIN_VALUE );\n         assertEquals( \"Geometric mean not expected\", 2.213364, u.getGeometricMean(), 0.00001 );\n \n         // Now test rolling - UnivariateImpl should discount the contribution\n         }\n         // Values should be (2,3,4,5,6,7,8,9,10,11)\n         \n-        //assertEquals( \"Product not expected\", 39916800.0, u.getProduct(), 0.00001 );\n         assertEquals( \"Geometric mean not expected\", 5.755931, u.getGeometricMean(), 0.00001 );\n \n \n--- a/src/test/org/apache/commons/math/stat/UnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/UnivariateImplTest.java\n  *\n  * @author Phil Steitz\n  * @author Tim Obrien\n- * @version $Revision: 1.2 $ $Date: 2003/06/21 02:08:23 $\n+ * @version $Revision: 1.3 $ $Date: 2003/06/21 23:38:27 $\n  */\n \n public final class UnivariateImplTest extends TestCase {\n         u.addValue( 3.0 );\n         u.addValue( 4.0 );\n \n-        assertEquals( \"Product not expected\", 24.0, u.getProduct(),\n-            Double.MIN_VALUE );\n         assertEquals( \"Geometric mean not expected\", 2.213364, \n             u.getGeometricMean(), 0.00001 );\n \n         }\n         // Values should be (2,3,4,5,6,7,8,9,10,11)\n         \n-        assertEquals( \"Product not expected\", 39916800.0, \n-            u.getProduct(), 0.00001 );\n         assertEquals( \"Geometric mean not expected\", 5.755931, \n             u.getGeometricMean(), 0.00001 );\n     }", "timestamp": 1056238707, "metainfo": ""}