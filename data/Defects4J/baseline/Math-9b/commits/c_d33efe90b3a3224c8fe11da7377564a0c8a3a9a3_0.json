{"sha": "d33efe90b3a3224c8fe11da7377564a0c8a3a9a3", "log": "Raw types  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java\n     public void testMath303() {\n \n         LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n-        CurveFitter fitter = new CurveFitter(optimizer);\n+        CurveFitter<ParametricUnivariateFunction> fitter = new CurveFitter<ParametricUnivariateFunction>(optimizer);\n         fitter.addObservedPoint(2.805d, 0.6934785852953367d);\n         fitter.addObservedPoint(2.74333333333333d, 0.6306772025518496d);\n         fitter.addObservedPoint(1.655d, 0.9474675497289684);\n     public void testMath304() {\n \n         LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n-        CurveFitter fitter = new CurveFitter(optimizer);\n+        CurveFitter<ParametricUnivariateFunction> fitter = new CurveFitter<ParametricUnivariateFunction>(optimizer);\n         fitter.addObservedPoint(2.805d, 0.6934785852953367d);\n         fitter.addObservedPoint(2.74333333333333d, 0.6306772025518496d);\n         fitter.addObservedPoint(1.655d, 0.9474675497289684);\n     @Test\n     public void testMath372() {\n         LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n-        CurveFitter curveFitter = new CurveFitter(optimizer);\n+        CurveFitter<ParametricUnivariateFunction> curveFitter = new CurveFitter<ParametricUnivariateFunction>(optimizer);\n \n         curveFitter.addObservedPoint( 15,  4443);\n         curveFitter.addObservedPoint( 31,  8493);\n--- a/src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java\n import java.util.Random;\n \n import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\n+import org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric;\n import org.apache.commons.math3.exception.ConvergenceException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;\n     private double[] doMath798(DifferentiableMultivariateVectorOptimizer optimizer,\n                                int maxEval,\n                                double[] init) {\n-        final CurveFitter fitter = new CurveFitter(optimizer);\n+        final CurveFitter<Parametric> fitter = new CurveFitter<Parametric>(optimizer);\n \n         fitter.addObservedPoint(-0.2, -7.12442E-13);\n         fitter.addObservedPoint(-0.199, -4.33397E-13);\n--- a/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java\n     @Test\n     public void testSinMinWithValueChecker() {\n         final UnivariateFunction f = new SinFunction();\n-        final ConvergenceChecker checker = new SimpleUnivariateValueChecker(1e-5, 1e-14);\n+        final ConvergenceChecker<UnivariatePointValuePair> checker = new SimpleUnivariateValueChecker(1e-5, 1e-14);\n         // The default stopping criterion of Brent's algorithm should not\n         // pass, but the search will stop at the given relative tolerance\n         // for the function value.", "timestamp": 1344343353, "metainfo": ""}