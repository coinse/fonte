{"sha": "b57377e8597f0c2d0888e103b50506c3f519243b", "log": "Simplify hashCode/equals/toString methods by using appropriate methods from java.util.Arrays, similar to EuclideanDoublePoint.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/clustering/EuclideanIntegerPoint.java\n+++ b/src/main/java/org/apache/commons/math3/stat/clustering/EuclideanIntegerPoint.java\n package org.apache.commons.math3.stat.clustering;\n \n import java.io.Serializable;\n+import java.util.Arrays;\n import java.util.Collection;\n \n import org.apache.commons.math3.util.MathArrays;\n         if (!(other instanceof EuclideanIntegerPoint)) {\n             return false;\n         }\n-        final int[] otherPoint = ((EuclideanIntegerPoint) other).getPoint();\n-        if (point.length != otherPoint.length) {\n-            return false;\n-        }\n-        for (int i = 0; i < point.length; i++) {\n-            if (point[i] != otherPoint[i]) {\n-                return false;\n-            }\n-        }\n-        return true;\n+        return Arrays.equals(point, ((EuclideanIntegerPoint) other).point);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public int hashCode() {\n-        int hashCode = 0;\n-        for (Integer i : point) {\n-            hashCode += i.hashCode() * 13 + 7;\n-        }\n-        return hashCode;\n+        return Arrays.hashCode(point);\n     }\n \n     /**\n      */\n     @Override\n     public String toString() {\n-        final StringBuilder buff = new StringBuilder(\"(\");\n-        final int[] coordinates = getPoint();\n-        for (int i = 0; i < coordinates.length; i++) {\n-            buff.append(coordinates[i]);\n-            if (i < coordinates.length - 1) {\n-                buff.append(\",\");\n-            }\n-        }\n-        buff.append(\")\");\n-        return buff.toString();\n+        return Arrays.toString(point);\n     }\n \n }", "timestamp": 1353878611, "metainfo": ""}