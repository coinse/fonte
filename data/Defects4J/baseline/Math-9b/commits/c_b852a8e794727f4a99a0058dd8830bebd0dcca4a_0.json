{"sha": "b852a8e794727f4a99a0058dd8830bebd0dcca4a", "log": "use properly the top level exceptions for too specific cases which don't need a devoted exception class  ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\n    \n         if (fa * fb >= 0.0 ) {\n             throw new ConvergenceException\n-            (\"Number of iterations= \" + numIterations +\n-              \" maximum iterations= \"  + maximumIterations +\n-              \" initial= \" + initial + \" lowerBound=\" + lowerBound +\n-              \" upperBound=\" + upperBound + \" final a value=\" + a +\n-              \" final b value=\" + b + \" f(a)=\" + fa + \" f(b)=\" + fb);\n+            (\"Number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\",\n+             new Object[] { new Integer(numIterations), new Integer(maximumIterations),\n+                            new Double(initial), new Double(lowerBound), new Double(upperBound),\n+                            new Double(a), new Double(b), new Double(fa), new Double(fb) });\n         }\n         \n         return new double[]{a, b};\n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n                 try {\n                     return cumulativeProbability(x) - p;\n                 } catch (MathException ex) {\n-                    throw new FunctionEvaluationException\n-                        (x, \"Error computing cdf\", ex);\n+                    throw new FunctionEvaluationException(x, ex.getPattern(), ex.getArguments(), ex);\n                 }\n             }\n         };\n--- a/src/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/java/org/apache/commons/math/util/DefaultTransformer.java\n     public double transform(Object o) throws MathException{\n \n         if (o == null) {\n-            throw new MathException(\"Conversion Exception in Transformation, Object is null\");\n+            throw new MathException(\"Conversion Exception in Transformation, Object is null\", new Object[0]);\n         }\n \n         if (o instanceof Number) {\n         try {\n             return new Double(o.toString()).doubleValue();\n         } catch (Exception e) {\n-            throw new MathException(\"Conversion Exception in Transformation: \" + e.getMessage(), e);\n+            throw new MathException(\"Conversion Exception in Transformation: {0}\",\n+                                    new Object[] { e.getMessage() }, e);\n         }\n     }\n-}\n+}", "timestamp": 1171308959, "metainfo": ""}