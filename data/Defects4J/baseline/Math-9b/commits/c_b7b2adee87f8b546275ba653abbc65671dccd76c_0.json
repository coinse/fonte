{"sha": "b7b2adee87f8b546275ba653abbc65671dccd76c", "log": "Improved Variance calculation, test for negative variance and added some more javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n  *\n  * @author Phil Steitz\n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n- * @author Mark Diggory\n+ * @author <a href=\"mailto:mdiggory@apache.org\">Mark Diggory</a>\n  * @author Brent Worden\n- * @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:45 $\n+ * @version $Revision: 1.2 $ $Date: 2003/06/04 04:05:39 $\n  * \n */\n public class UnivariateImpl implements Univariate, Serializable {\n     private int windowSize = Univariate.INFINITE_WINDOW;\n \n     /** Just in case, the windowSize is not inifinite, we need to\n-     *   keep an array to remember values 0 to N\n+     *  keep an array to remember values 0 to N\n      */\n     private DoubleArray doubleArray;\n \n     /** product of values that have been added */\n     private double product = Double.NaN;\n \n-    /** Creates new univariate */\n+    /** Creates new univariate with an inifinite window */\n     public UnivariateImpl() {\n         clear();\n     }\n     \n-    /** Create a new univariate with a fixed window **/\n+    /** Creates a new univariate with a fixed window **/\n     public UnivariateImpl(int window) {\n         windowSize = window;\n         doubleArray = new FixedDoubleArray( window );\n     }\n \n      \n-    public void addValue(double v) {\n-\n+    /**\n+\t * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+\t */\n+\tpublic void addValue(double v) {\n         insertValue(v);\n     }\n \n     \n-    public double getMean() {\n+    /**\n+\t * @see org.apache.commons.math.stat.Univariate#getMean()\n+\t */\n+\tpublic double getMean() {\n         if (n == 0) {\n             return Double.NaN;\n         } else {\n      }\n \n      \n-    public double getGeometricMean() {\n+    /**\n+\t * @see org.apache.commons.math.stat.Univariate#getGeometricMean()\n+\t */\n+\tpublic double getGeometricMean() {\n         if ((product <= 0.0) || (n == 0)) {\n             return Double.NaN; \n         } else {\n         }\n     }\n \n-    \n-    public double getProduct() {\n+    /**\n+\t * @see org.apache.commons.math.stat.Univariate#getProduct()\n+\t */\n+\tpublic double getProduct() {\n         return product;\n     }\n \n+\t/**\n+\t * @see org.apache.commons.math.stat.Univariate#getStandardDeviation()\n+\t */\n+\tpublic double getStandardDeviation() {\n+\t\tdouble variance = getVariance();\n+\t\tif ((variance == 0.0) || (variance == Double.NaN)) {\n+\t\t\treturn variance;\n+\t\t} else {\n+\t\t\treturn Math.sqrt(variance);\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Returns the variance of the values that have been added as described by\n+\t * <a href=http://mathworld.wolfram.com/k-Statistic.html>Equation (5) for k-Statistics</a>.\n+\t * \n+\t * @return The variance of a set of values.  Double.NaN is returned for\n+\t *         an empty set of values and 0.0 is returned for a &lt;= 1 value set.\n+\t */\n+\tpublic double getVariance() {\n+\t\tdouble variance = Double.NaN;\n+\n+\t\tif( n == 1 ) {\n+\t\t\tvariance = 0.0;\n+\t\t} else if( n > 1 ) {\n+\t\t\tvariance = (((double)n)*sumsq - (sum * sum)) / (double) (n * (n - 1));\t\n+\t\t}\n+\n+\t\treturn variance < 0 ? 0.0 : variance;\n+\t}\n      \n-    public double getVariance() {\n-        double variance = Double.NaN;\n-\n-        if( n == 1 ) {\n-            variance = 0.0;\n-        } else if( n > 1 ) {\n-            double xbar = getMean();\n-            variance =  (sumsq - xbar*xbar*((double) n))/(((double) n)-1);\n-        }\n-\n-        return variance;\n-    }\n-\n-    \n-    public double getStandardDeviation() {\n-        double variance = getVariance();\n-        if ((variance == 0.0) || (variance == Double.NaN)) {\n-            return variance;\n-        } else {\n-            return Math.sqrt(variance);\n-        }\n-    }\n-   \n-   \n \t/**\n \t * Returns the skewness of the values that have been added as described by\n      * <a href=http://mathworld.wolfram.com/k-Statistic.html>Equation (6) for k-Statistics</a>.\n \t\tif( n < 1) return Double.NaN;\n \t\tif( n <= 2 ) return 0.0;                  \n \t\t\t\n-\t\treturn ( 2*Math.pow(sum,3) - 3*sum*sumsq + ((double)n)*((double)n)*sumCube ) / \n-\t\t\t   ( ((double)n)*(((double)n)-1)*(((double)n)-2));  \n+\t\treturn ( 2*Math.pow(sum,3) - 3*sum*sumsq + ((double)(n*n))*sumCube ) / \n+\t\t\t   ( (double)(n*(n-1)*(n-2)) ) ;  \n \t}\n \t\n \t/**\n \t\t\n \t\tdouble x1 = -6*Math.pow(sum,4);\n \t\tdouble x2 = 12*((double)n)*Math.pow(sum,2)*sumsq;\n-\t\tdouble x3 = -3*((double)n)*(((double)n)-1)*Math.pow(sumsq,2);\n-\t\tdouble x4 = -4*((double)n)*(((double)n)+1)*sum*sumCube;\n-\t\tdouble x5 = Math.pow(((double)n),2)*(((double)n)+1)*sumQuad;\n+\t\tdouble x3 = -3*((double)(n*(n-1)))*Math.pow(sumsq,2);\n+\t\tdouble x4 = -4*((double)(n*(n+1)))*sum*sumCube;\n+\t\tdouble x5 = Math.pow(((double)n),2)*((double)(n+1))*sumQuad;\n+\t\t\n \t\treturn (x1 + x2 + x3 + x4 + x5) / \n-\t\t       (((double)n)*(((double)n)-1)*(((double)n)-2)*(((double)n)-3));\n+\t\t\t   ( (double)(n*(n-1)*(n-2)*(n-3)) );\n \t} \n \t\n-    private void insertValue(double v) {\n+    /**\n+     * Called in \"addValue\" to insert a new value into the statistic.\n+\t * @param v The value to be added.\n+\t */\n+\tprivate void insertValue(double v) {\n \n         // The default value of product is NaN, if you\n         // try to retrieve the product for a univariate with\n         return outBuffer.toString();\n     }\n     \n-    /** Resets all sums to 0, resets min and max */\n+    /** \n+     * Resets all sums to 0, resets min and max \n+     */\n     public void clear() {\n         this.sum = this.sumsq = this.sumCube = this.sumQuad = 0.0;\n         this.n = 0;", "timestamp": 1054699539, "metainfo": ""}