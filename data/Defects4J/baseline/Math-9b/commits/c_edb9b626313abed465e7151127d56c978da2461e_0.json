{"sha": "edb9b626313abed465e7151127d56c978da2461e", "log": "applied Cyril Briquet's patch adding an observations removal feature to descriptive statistics JIRA: MATH-229  ", "commit": "\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n       \"aucun compartiment s\\u00e9lectionn\\u00e9\" },\n \n     // org.apache.commons.math.linear.EigenDecompositionImpl\n+    { \"cannot solve degree {0} equation\",\n+      \"impossible de r\\u00e9soudre une \\u00e9quation de degr\\u00e9 {0}\" },\n     { \"negative element on decomposed tridiagonal of {0}x{1} matrix\",\n       \"\\u00e9l\\u00e9ment n\\u00e9gatif dans la d\\u00e9composition tri-diagonale d''une matrice {0}x{1}\" },\n-    { \"internal error: please file a bug report at https://issues.apache.org/jira/browse/MATH\",\n-      \"erreur interne : veuillez enregistrer un rapport de bogue sur https://issues.apache.org/jira/browse/MATH\" },\n \n     // org.apache.commons.math.linear.NonSquareMatrixException\n     { \"a {0}x{1} matrix was provided instead of a square matrix\",\n      \"impossible d''extraire un \\u00e9l\\u00e9ment \\u00e0 un index n\\u00e9gatif ({0})\" },\n    { \"cannot set an element at a negative index {0}\",\n      \"impossible de mettre un \\u00e9l\\u00e9ment \\u00e0 un index n\\u00e9gatif ({0})\" },\n+   { \"cannot substitute an element from an empty array\",\n+     \"impossible de substituer un \\u00e9l\\u00e9ment dans un tableau vide\" },\n \n    // org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm\n    { \"identical abscissas x[{0}] == x[{1}] == {2} cause division by zero\",\n--- a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n         }\n     }\n \n+    /**\n+     * Removes the most recent value from the dataset.\n+     */\n+    public void removeMostRecentValue() {\n+        eDA.discardMostRecentElements(1);\n+    }\n+\n+    /**\n+     * Replaces the most recently stored value with the given value.\n+     * There must be at least one element stored to call this method.\n+     * \n+     * @param v the value to replace the most recent stored value\n+     * @return replaced value\n+     */\n+    public double replaceMostRecentValue(double v) {\n+        return eDA.substituteMostRecentElement(v);\n+    }\n+\n     /** \n      * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n      * arithmetic mean </a> of the available values \n--- a/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\n         return discarded;\n     }\n \n+    public synchronized double substituteMostRecentElement(double value) {\n+        if (numElements < 1) {\n+        \tthrow MathRuntimeException.createArrayIndexOutOfBoundsException(\"cannot substitute an element from an empty array\",\n+        \t                                                                null);\n+        }\n+\n+        double discarded = internalArray[startIndex + (numElements - 1)];\n+\n+    \tinternalArray[startIndex + (numElements - 1)] = value;\n+\n+    \treturn discarded;\n+    }\n+\n     /**\n      * Checks the expansion factor and the contraction criteria and throws an \n      * IllegalArgumentException if the contractionCriteria is less than the \n      * @throws IllegalArgumentException if i is greater than numElements.\n      */\n     public synchronized void discardFrontElements(int i) {\n+\n+    \tdiscardExtremeElements(i,true);\n+    \t\n+    }\n+\n+    /**\n+     * Discards the <code>i<code> last elements of the array.  For example,\n+     * if the array contains the elements 1,2,3,4, invoking \n+     * <code>discardMostRecentElements(2)</code> will cause the last two elements \n+     * to be discarded, leaving 1,2 in the array.  Throws illegalArgumentException\n+     * if i exceeds numElements.\n+     * \n+     * @param i  the number of elements to discard from the end of the array\n+     * @throws IllegalArgumentException if i is greater than numElements.\n+     */\n+    public synchronized void discardMostRecentElements(int i) {\n+\n+    \tdiscardExtremeElements(i,false);\n+    \t\n+    }\n+\n+    /**\n+     * Discards the <code>i<code> first or last elements of the array,\n+     * depending on the value of <code>front</code>.\n+     * For example, if the array contains the elements 1,2,3,4, invoking \n+     * <code>discardExtremeElements(2,false)</code> will cause the last two elements \n+     * to be discarded, leaving 1,2 in the array.\n+     * For example, if the array contains the elements 1,2,3,4, invoking \n+     * <code>discardExtremeElements(2,true)</code> will cause the first two elements \n+     * to be discarded, leaving 3,4 in the array.\n+     * Throws illegalArgumentException\n+     * if i exceeds numElements.\n+     * \n+     * @param i  the number of elements to discard from the front/end of the array\n+     * @param front true if elements are to be discarded from the front\n+     * of the array, false if elements are to be discarded from the end\n+     * of the array \n+     * @throws IllegalArgumentException if i is greater than numElements.\n+     */\n+    private synchronized void discardExtremeElements(int i,boolean front) {\n         if (i > numElements) {\n             String msg = \"Cannot discard more elements than are\" +\n             \"contained in this array.\";\n         } else {\n             // \"Subtract\" this number of discarded from numElements \n             numElements -= i;\n-            startIndex += i;\n+            if (front) startIndex += i;\n         }\n         if (shouldContract()) {\n             contract();\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n import junit.framework.TestSuite;\n \n import org.apache.commons.math.stat.descriptive.rank.Percentile;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Test cases for the DescriptiveStatistics class.\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n+    }\n+    public void testRemoval() {\n+\n+        final DescriptiveStatistics dstat = new DescriptiveStatistics();\n+\n+        checkremoval(dstat, 1, 6.0, 0.0, Double.NaN);\n+        checkremoval(dstat, 3, 5.0, 3.0, 4.5);\n+        checkremoval(dstat, 6, 3.5, 2.5, 3.0);\n+        checkremoval(dstat, 9, 3.5, 2.5, 3.0);\n+        checkremoval(dstat, DescriptiveStatistics.INFINITE_WINDOW, 3.5, 2.5, 3.0);\n+\n+    }\n+\n+    public void checkremoval(DescriptiveStatistics dstat, int wsize,\n+                             double mean1, double mean2, double mean3) {\n+\n+        dstat.setWindowSize(wsize);\n+        dstat.clear();\n+\n+        for (int i = 1 ; i <= 6 ; ++i) {\n+            dstat.addValue(i);\n+        }\n+\n+        assertTrue(MathUtils.equals(mean1, dstat.getMean()));\n+        dstat.replaceMostRecentValue(0);\n+        assertTrue(MathUtils.equals(mean2, dstat.getMean()));\n+        dstat.removeMostRecentValue();\n+        assertTrue(MathUtils.equals(mean3, dstat.getMean()));\n+\n     }\n     \n     // Test UnivariateStatistics impls for setter injection tests\n--- a/src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java\n+++ b/src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java\n         \n         ((ResizableDoubleArray)da).discardFrontElements(5);\n         assertEquals( \"Number of elements should be 6\", 6, da.getNumElements());\n+\n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        assertEquals( \"Number of elements should be 10\", 10, da.getNumElements());\n+\n+        ((ResizableDoubleArray)da).discardMostRecentElements(2);\n+        assertEquals( \"Number of elements should be 8\", 8, da.getNumElements());\n         \n         try {\n             ((ResizableDoubleArray)da).discardFrontElements(-1);\n             fail( \"Trying to discard a negative number of element is not allowed\");\n         } catch( Exception e ){\n         }\n-        \n+\n+        try {\n+            ((ResizableDoubleArray)da).discardMostRecentElements(-1);\n+            fail( \"Trying to discard a negative number of element is not allowed\");\n+        } catch( Exception e ){\n+        }\n+\n         try {\n             ((ResizableDoubleArray)da).discardFrontElements( 10000 );\n             fail( \"You can't discard more elements than the array contains\");\n         } catch( Exception e ){\n         }\n+\n+        try {\n+            ((ResizableDoubleArray)da).discardMostRecentElements( 10000 );\n+            fail( \"You can't discard more elements than the array contains\");\n+        } catch( Exception e ){\n+        }\n+\n+    }\n+\n+    public void testSubstitute() {\n+    \n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        da.addElement(2.0);\n+        assertEquals( \"Number of elements should be 11\", 11, da.getNumElements());\n+        \n+        ((ResizableDoubleArray)da).substituteMostRecentElement(24);\n+\n+        assertEquals( \"Number of elements should be 11\", 11, da.getNumElements());\n+\n+        try {\n+            ((ResizableDoubleArray)da).discardMostRecentElements(10);\n+        } catch( Exception e ){\n+            fail( \"Trying to discard a negative number of element is not allowed\");\n+        }\n+\n+        ((ResizableDoubleArray)da).substituteMostRecentElement(24);\n+\n+        assertEquals( \"Number of elements should be 1\", 1, da.getNumElements());\n+\n     }\n     \n     public void testMutators() {", "timestamp": 1226425805, "metainfo": ""}