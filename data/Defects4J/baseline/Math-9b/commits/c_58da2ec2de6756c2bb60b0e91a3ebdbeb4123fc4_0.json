{"sha": "58da2ec2de6756c2bb60b0e91a3ebdbeb4123fc4", "log": "Unit tests for \"DiagonalMatrix\".   ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.linear;\n+\n+import org.junit.Test;\n+import org.junit.Assert;\n+\n+import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n+import org.apache.commons.math3.TestUtils;\n+\n+/**\n+ * Test cases for the {@link DiagonalMatrix} class.\n+ */\n+public class DiagonalMatrixTest {\n+    @Test\n+    public void testConstructor1() {\n+        final int dim = 3;\n+        final DiagonalMatrix m = new DiagonalMatrix(dim);\n+        Assert.assertEquals(dim, m.getRowDimension());\n+        Assert.assertEquals(dim, m.getColumnDimension());\n+    }\n+\n+    @Test\n+    public void testConstructor2() {\n+        final double[] d = { -1.2, 3.4, 5 };\n+        final DiagonalMatrix m = new DiagonalMatrix(d);\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            for (int j = 0; j < m.getRowDimension(); j++) {\n+                if (i == j) {\n+                    Assert.assertEquals(d[i], m.getEntry(i, j), 0d);\n+                } else {\n+                    Assert.assertEquals(0d, m.getEntry(i, j), 0d);\n+                }\n+            }\n+        }\n+\n+        // Check that the underlying was copied.\n+        d[0] = 0;\n+        Assert.assertFalse(d[0] == m.getEntry(0, 0));\n+    }\n+\n+    @Test\n+    public void testConstructor3() {\n+        final double[] d = { -1.2, 3.4, 5 };\n+        final DiagonalMatrix m = new DiagonalMatrix(d, false);\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            for (int j = 0; j < m.getRowDimension(); j++) {\n+                if (i == j) {\n+                    Assert.assertEquals(d[i], m.getEntry(i, j), 0d);\n+                } else {\n+                    Assert.assertEquals(0d, m.getEntry(i, j), 0d);\n+                }\n+            }\n+        }\n+\n+        // Check that the underlying is referenced.\n+        d[0] = 0;\n+        Assert.assertTrue(d[0] == m.getEntry(0, 0));\n+\n+    }\n+\n+    @Test\n+    public void testGetData() {\n+        final double[] data = { -1.2, 3.4, 5 };\n+        final int dim = 3;\n+        final DiagonalMatrix m = new DiagonalMatrix(dim);\n+        for (int i = 0; i < dim; i++) {\n+            m.setEntry(i, i, data[i]);\n+        }\n+\n+        final double[][] out = m.getData();\n+        Assert.assertEquals(dim, out.length);\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            Assert.assertEquals(dim, out[i].length);\n+            for (int j = 0; j < m.getRowDimension(); j++) {\n+                if (i == j) {\n+                    Assert.assertEquals(data[i], out[i][j], 0d);\n+                } else {\n+                    Assert.assertEquals(0d, out[i][j], 0d);\n+                }\n+            }\n+        }        \n+    }\n+\n+    @Test\n+    public void testAdd() {\n+        final double[] data1 = { -1.2, 3.4, 5 };\n+        final DiagonalMatrix m1 = new DiagonalMatrix(data1);\n+ \n+        final double[] data2 = { 10.1, 2.3, 45 };\n+        final DiagonalMatrix m2 = new DiagonalMatrix(data2);\n+\n+        final DiagonalMatrix result = m1.add(m2);\n+        Assert.assertEquals(m1.getRowDimension(), result.getRowDimension());\n+        for (int i = 0; i < result.getRowDimension(); i++) {\n+            for (int j = 0; j < result.getRowDimension(); j++) {\n+                if (i == j) {\n+                    Assert.assertEquals(data1[i] + data2[i], result.getEntry(i, j), 0d);\n+                } else {\n+                    Assert.assertEquals(0d, result.getEntry(i, j), 0d);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testAddToEntry() {\n+        final double[] data = { -1.2, 3.4, 5 };\n+        final DiagonalMatrix m = new DiagonalMatrix(data);\n+\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            m.addToEntry(i, i, i);\n+            Assert.assertEquals(data[i] + i, m.getEntry(i, i), 0d);\n+        }\n+    }\n+\n+    @Test\n+    public void testMultiplyEntry() {\n+        final double[] data = { -1.2, 3.4, 5 };\n+        final DiagonalMatrix m = new DiagonalMatrix(data);\n+\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            m.multiplyEntry(i, i, i);\n+            Assert.assertEquals(data[i] * i, m.getEntry(i, i), 0d);\n+        }\n+    }\n+\n+    @Test\n+    public void testMultiply1() {\n+        final double[] data1 = { -1.2, 3.4, 5 };\n+        final DiagonalMatrix m1 = new DiagonalMatrix(data1);\n+        final double[] data2 = { 10.1, 2.3, 45 };\n+        final DiagonalMatrix m2 = new DiagonalMatrix(data2);\n+\n+        final DiagonalMatrix result = m1.multiply(m2);\n+        Assert.assertEquals(m1.getRowDimension(), result.getRowDimension());\n+        for (int i = 0; i < result.getRowDimension(); i++) {\n+            for (int j = 0; j < result.getRowDimension(); j++) {\n+                if (i == j) {\n+                    Assert.assertEquals(data1[i] * data2[i], result.getEntry(i, j), 0d);\n+                } else {\n+                    Assert.assertEquals(0d, result.getEntry(i, j), 0d);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMultiply2() {\n+        final double[] data1 = { -1.2, 3.4, 5 };\n+        final DiagonalMatrix diag1 = new DiagonalMatrix(data1);\n+\n+        final double[][] data2 = { { -1.2, 3.4 },\n+                                   { -5.6, 7.8 },\n+                                   {  9.1, 2.3 } };\n+        final RealMatrix dense2 = new Array2DRowRealMatrix(data2);\n+        final RealMatrix dense1 = new Array2DRowRealMatrix(diag1.getData());\n+\n+        final RealMatrix diagResult = diag1.multiply(dense2);\n+        final RealMatrix denseResult = dense1.multiply(dense2);\n+\n+        for (int i = 0; i < dense1.getRowDimension(); i++) {\n+            for (int j = 0; j < dense2.getColumnDimension(); j++) {\n+                Assert.assertEquals(denseResult.getEntry(i, j),\n+                                    diagResult.getEntry(i, j), 0d);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testOperate() {\n+        final double[] data = { -1.2, 3.4, 5 };\n+        final DiagonalMatrix diag = new DiagonalMatrix(data);\n+        final RealMatrix dense = new Array2DRowRealMatrix(diag.getData());\n+\n+        final double[] v = { 6.7, 890.1, 23.4 };\n+        final double[] diagResult = diag.operate(v);\n+        final double[] denseResult = dense.operate(v);\n+\n+        TestUtils.assertEquals(diagResult, denseResult, 0d);\n+    }\n+\n+    @Test\n+    public void testPreMultiply() {\n+        final double[] data = { -1.2, 3.4, 5 };\n+        final DiagonalMatrix diag = new DiagonalMatrix(data);\n+        final RealMatrix dense = new Array2DRowRealMatrix(diag.getData());\n+\n+        final double[] v = { 6.7, 890.1, 23.4 };\n+        final double[] diagResult = diag.preMultiply(v);\n+        final double[] denseResult = dense.preMultiply(v);\n+\n+        TestUtils.assertEquals(diagResult, denseResult, 0d);\n+    }\n+\n+    @Test(expected=MathUnsupportedOperationException.class)\n+    public void testSetNonDiagonalEntry() {\n+        final DiagonalMatrix diag = new DiagonalMatrix(3);\n+        diag.setEntry(1, 2, 3.4);\n+    }\n+\n+    @Test(expected=OutOfRangeException.class)\n+    public void testSetEntryOutOfRange() {\n+        final DiagonalMatrix diag = new DiagonalMatrix(3);\n+        diag.setEntry(3, 3, 3.4);\n+    }\n+}", "timestamp": 1357737479, "metainfo": ""}