{"sha": "6a360c77c10817ee63c99f950fa1f0f21769805b", "log": "Javadoc fixes  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java\n \n     /**\n      * Get all the optima found during the last call to {@link\n-     * #optimize(FUNC,GoalType,double[]) optimize}.\n+     * #optimize(MultivariateRealFunction,GoalType,double[]) optimize}.\n      * The optimizer stores all the optima found during a set of\n-     * restarts. The {@link #optimize(FUNC,GoalType,double[])\n+     * restarts. The {@link #optimize(MultivariateRealFunction,GoalType,double[])\n      * optimize} method returns the best point only. This method\n      * returns all the points found at the end of each starts,\n      * including the best one already returned by the {@link\n-     * #optimize(FUNC,GoalType,double[]) optimize} method.\n+     * #optimize(MultivariateRealFunction,GoalType,double[]) optimize} method.\n      * <br/>\n      * The returned array as one element for each start as specified\n      * in the constructor. It is ordered with the results from the\n      * objective value (i.e in ascending order if minimizing and in\n      * descending order if maximizing), followed by and null elements\n      * corresponding to the runs that did not converge. This means all\n-     * elements will be null if the {@link #optimize(FUNC,GoalType,double[])\n+     * elements will be null if the {@link #optimize(MultivariateRealFunction,GoalType,double[])\n      * optimize} method did throw a {@link ConvergenceException}).\n      * This also means that if the first element is not {@code null}, it\n      * is the best point found across all starts.\n      *\n      * @return an array containing the optima.\n      * @throws MathIllegalStateException if {@link\n-     * #optimize(FUNC,GoalType,double[]) optimize} has not been called.\n+     * #optimize(MultivariateRealFunction,GoalType,double[]) optimize} has not been called.\n      */\n     public RealPointValuePair[] getOptima() {\n         if (optima == null) {\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java\n \n     /**\n      * Get all the optima found during the last call to {@link\n-     * #optimize(FUNC,double[],double[],double[]) optimize}.\n+     * #optimize(MultivariateVectorialFunction,double[],double[],double[]) optimize}.\n      * The optimizer stores all the optima found during a set of\n-     * restarts. The {@link #optimize(FUNC,double[],double[],double[])\n+     * restarts. The {@link #optimize(MultivariateVectorialFunction,double[],double[],double[])\n      * optimize} method returns the best point only. This method\n      * returns all the points found at the end of each starts, including\n      * the best one already returned by the {@link\n-     * #optimize(FUNC,double[],double[],double[]) optimize} method.\n+     * #optimize(MultivariateVectorialFunction,double[],double[],double[]) optimize} method.\n      * <br/>\n      * The returned array as one element for each start as specified\n      * in the constructor. It is ordered with the results from the\n      * descending order if maximizing), followed by and null elements\n      * corresponding to the runs that did not converge. This means all\n      * elements will be null if the {@link\n-     * #optimize(FUNC,double[],double[],double[]) optimize} method did\n+     * #optimize(MultivariateVectorialFunction,double[],double[],double[]) optimize} method did\n      * throw a {@link ConvergenceException}). This also means that if\n      * the first element is not {@code null}, it is the best point found\n      * across all starts.\n      *\n      * @return array containing the optima\n      * @throws MathIllegalStateException if {@link\n-     * #optimize(FUNC,double[],double[],double[]) optimize} has not been\n+     * #optimize(MultivariateVectorialFunction,double[],double[],double[]) optimize} has not been\n      * called.\n      */\n     public VectorialPointValuePair[] getOptima() {\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n \n     /**\n      * Get all the optima found during the last call to {@link\n-     * #optimize(FUNC,GoalType,double,double) optimize}.\n+     * #optimize(UnivariateRealFunction,GoalType,double,double) optimize}.\n      * The optimizer stores all the optima found during a set of\n-     * restarts. The {@link #optimize(FUNC,GoalType,double,double) optimize}\n+     * restarts. The {@link #optimize(UnivariateRealFunction,GoalType,double,double) optimize}\n      * method returns the best point only. This method returns all the points\n      * found at the end of each starts, including the best one already\n-     * returned by the {@link #optimize(FUNC,GoalType,double,double) optimize}\n+     * returned by the {@link #optimize(UnivariateRealFunction,GoalType,double,double) optimize}\n      * method.\n      * <br/>\n      * The returned array as one element for each start as specified\n      * descending order if maximizing), followed by {@code null} elements\n      * corresponding to the runs that did not converge. This means all\n      * elements will be {@code null} if the {@link\n-     * #optimize(FUNC,GoalType,double,double) optimize} method did throw a\n+     * #optimize(UnivariateRealFunction,GoalType,double,double) optimize} method did throw a\n      * {@link ConvergenceException}). This also means that if the first\n      * element is not {@code null}, it is the best point found across all\n      * starts.\n      *\n      * @return an array containing the optima.\n      * @throws MathIllegalStateException if {@link\n-     * #optimize(FUNC,GoalType,double,double) optimize} has not been called.\n+     * #optimize(UnivariateRealFunction,GoalType,double,double) optimize} has not been called.\n      */\n     public UnivariateRealPointValuePair[] getOptima() {\n         if (optima == null) {\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n         }\n \n         /**\n-         * @throws UnsupportedOperationException.\n+         * @throws UnsupportedOperationException\n          */\n         public void remove() {\n             throw new UnsupportedOperationException();", "timestamp": 1285898128, "metainfo": ""}