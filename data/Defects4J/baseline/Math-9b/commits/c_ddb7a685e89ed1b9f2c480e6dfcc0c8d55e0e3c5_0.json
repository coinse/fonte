{"sha": "ddb7a685e89ed1b9f2c480e6dfcc0c8d55e0e3c5", "log": "Modified tests to use derivative methods.   ", "commit": "\n--- a/src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java\n+++ b/src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java\n /**\n  * Tests the PolynomialFunction implementation of a UnivariateRealFunction.\n  *\n- * @version $Revision: 1.5 $\n+ * @version $Revision: 1.6 $\n  * @author Matt Cliff <matt@mattcliff.com>\n  */\n public final class PolynomialFunctionTest extends TestCase {\n \n-    // all values are known precisely accept 15 digit precision error \n-    final double error = 1.0e-15;\n+    /** Error tolerance for tests */\n+    protected double tolerance = 1.0e-12;\n \n     /**\n      * tests the value of a constant polynomial.\n         PolynomialFunction f = new PolynomialFunction( c );\n \n         // verify that we are equal to c[0] at several (nonsymmetric) places\n-        assertEquals( f.value( 0.0), c[0], error );\n-        assertEquals( f.value( -1.0), c[0], error );\n-        assertEquals( f.value( -123.5), c[0], error );\n-        assertEquals( f.value( 3.0), c[0], error );\n-        assertEquals( f.value( 456.89), c[0], error );\n+        assertEquals( f.value( 0.0), c[0], tolerance );\n+        assertEquals( f.value( -1.0), c[0], tolerance );\n+        assertEquals( f.value( -123.5), c[0], tolerance );\n+        assertEquals( f.value( 3.0), c[0], tolerance );\n+        assertEquals( f.value( 456.89), c[0], tolerance );\n         \n         assertEquals(f.degree(), 0);\n-        assertEquals(f.firstDerivative(0), 0, error);\n+        assertEquals(f.derivative().value(0), 0, tolerance);\n         \n-        assertEquals(f.secondDerivative(0), 0, error);\n+        assertEquals(f.polynomialDerivative().derivative().value(0), 0, tolerance);\n     }\n \n     /**\n         PolynomialFunction f = new PolynomialFunction( c );\n \n         // verify that we are equal to c[0] when x=0\n-        assertEquals( f.value( 0.0), c[0], error );\n+        assertEquals( f.value( 0.0), c[0], tolerance );\n \n         // now check a few other places\n-        assertEquals( -4.5, f.value( -1.0), error );\n-        assertEquals( -9.0, f.value( -2.5), error );\n-        assertEquals( 0.0, f.value( 0.5), error );\n-        assertEquals( 3.0, f.value( 1.5), error );\n-        assertEquals( 7.5, f.value( 3.0), error );\n+        assertEquals( -4.5, f.value( -1.0), tolerance );\n+        assertEquals( -9.0, f.value( -2.5), tolerance );\n+        assertEquals( 0.0, f.value( 0.5), tolerance );\n+        assertEquals( 3.0, f.value( 1.5), tolerance );\n+        assertEquals( 7.5, f.value( 3.0), tolerance );\n         \n         assertEquals(f.degree(), 1);\n         \n-        assertEquals(f.secondDerivative(0), 0, error);\n+        assertEquals(f.polynomialDerivative().derivative().value(0), 0, tolerance);\n     \n     }\n \n         PolynomialFunction f = new PolynomialFunction( c );\n \n         // verify that we are equal to c[0] when x=0\n-        assertEquals( f.value( 0.0), c[0], error );\n+        assertEquals( f.value( 0.0), c[0], tolerance );\n \n         // now check a few other places\n-        assertEquals( 0.0, f.value( -0.5), error );\n-        assertEquals( 0.0, f.value( 2.0), error );\n-        assertEquals( -2.0, f.value( 1.5), error );\n-        assertEquals( 7.0, f.value( -1.5), error );\n-        assertEquals( 265.5312, f.value( 12.34), error );\n+        assertEquals( 0.0, f.value( -0.5), tolerance );\n+        assertEquals( 0.0, f.value( 2.0), tolerance );\n+        assertEquals( -2.0, f.value( 1.5), tolerance );\n+        assertEquals( 7.0, f.value( -1.5), tolerance );\n+        assertEquals( 265.5312, f.value( 12.34), tolerance );\n     \n     }    \n \n         PolynomialFunction f = new PolynomialFunction( c );\n \n         // verify that we are equal to c[0] when x=0\n-        assertEquals( f.value( 0.0), c[0], error );\n+        assertEquals( f.value( 0.0), c[0], tolerance );\n \n         // now check a few other places\n-        assertEquals( 0.0, f.value( 5.0), error );\n-        assertEquals( 0.0, f.value( 1.0), error );\n-        assertEquals( 0.0, f.value( -3.0), error );\n-        assertEquals( 54.84375, f.value( -1.5), error );\n-        assertEquals( -8.06637, f.value( 1.3), error );\n+        assertEquals( 0.0, f.value( 5.0), tolerance );\n+        assertEquals( 0.0, f.value( 1.0), tolerance );\n+        assertEquals( 0.0, f.value( -3.0), tolerance );\n+        assertEquals( 54.84375, f.value( -1.5), tolerance );\n+        assertEquals( -8.06637, f.value( 1.3), tolerance );\n         \n         assertEquals(f.degree(), 5);\n     \n         PolynomialFunction h = new PolynomialFunction( h_coeff );\n \n         // compare f' = g\n-        assertEquals( f.firstDerivative(0.0), g.value(0.0), error );\n-        assertEquals( f.firstDerivative(1.0), g.value(1.0), error );\n-        assertEquals( f.firstDerivative(100.0), g.value(100.0), error );\n-        assertEquals( f.firstDerivative(4.1), g.value(4.1), error );\n-        assertEquals( f.firstDerivative(-3.25), g.value(-3.25), error );\n+        assertEquals( f.derivative().value(0.0), g.value(0.0), tolerance );\n+        assertEquals( f.derivative().value(1.0), g.value(1.0), tolerance );\n+        assertEquals( f.derivative().value(100.0), g.value(100.0), tolerance );\n+        assertEquals( f.derivative().value(4.1), g.value(4.1), tolerance );\n+        assertEquals( f.derivative().value(-3.25), g.value(-3.25), tolerance );\n \n         // compare g' = h\n ", "timestamp": 1080941681, "metainfo": ""}