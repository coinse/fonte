{"sha": "c8f524fccd20a08c55c56a2caf208637e4019514", "log": "Added final modifier for parameters, minor formatting changes for stat.inference package  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java\n      * @param tiesStrategy\n      *            specifies the strategy that should be used for ties\n      */\n-    public MannWhitneyUTestImpl(NaNStrategy nanStrategy,\n-            TiesStrategy tiesStrategy) {\n+    public MannWhitneyUTestImpl(final NaNStrategy nanStrategy,\n+                                final TiesStrategy tiesStrategy) {\n         naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);\n     }\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n      * are as defined <a href=\"http://faculty.vassar.edu/lowry/ch13pt1.html\">\n      * here</a></p>\n      */\n-    public double anovaFValue(Collection<double[]> categoryData)\n+    public double anovaFValue(final Collection<double[]> categoryData)\n         throws NullArgumentException, DimensionMismatchException {\n \n         AnovaStats a = anovaStats(categoryData);\n      * where <code>F</code> is the F value and <code>cumulativeProbability</code>\n      * is the commons-math implementation of the F distribution.</p>\n      */\n-    public double anovaPValue(Collection<double[]> categoryData)\n+    public double anovaPValue(final Collection<double[]> categoryData)\n         throws NullArgumentException, DimensionMismatchException,\n         ConvergenceException, MaxCountExceededException {\n \n      * is the commons-math implementation of the F distribution.</p>\n      * <p>True is returned iff the estimated p-value is less than alpha.</p>\n      */\n-    public boolean anovaTest(Collection<double[]> categoryData, double alpha)\n-        throws NullArgumentException, DimensionMismatchException, OutOfRangeException,\n-        ConvergenceException, MaxCountExceededException {\n+    public boolean anovaTest(final Collection<double[]> categoryData,\n+                             final double alpha)\n+        throws NullArgumentException, DimensionMismatchException,\n+        OutOfRangeException, ConvergenceException, MaxCountExceededException {\n \n         if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw new OutOfRangeException(LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,\n-                                          alpha, 0, 0.5);\n+            throw new OutOfRangeException(\n+                    LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,\n+                    alpha, 0, 0.5);\n         }\n         return anovaPValue(categoryData) < alpha;\n \n      * array is less than 2 or a contained <code>double[]</code> array does not contain\n      * at least two values\n      */\n-    private AnovaStats anovaStats(Collection<double[]> categoryData)\n+    private AnovaStats anovaStats(final Collection<double[]> categoryData)\n         throws NullArgumentException, DimensionMismatchException {\n \n         if (categoryData == null) {\n \n         // check if we have enough categories\n         if (categoryData.size() < 2) {\n-            throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n-                                                 categoryData.size(), 2);\n+            throw new DimensionMismatchException(\n+                    LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n+                    categoryData.size(), 2);\n         }\n \n         // check if each category has enough data and all is double[]\n--- a/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java\n      * @param tiesStrategy\n      *            specifies the strategy that should be used for ties\n      */\n-    public WilcoxonSignedRankTestImpl(NaNStrategy nanStrategy,\n-                                      TiesStrategy tiesStrategy) {\n+    public WilcoxonSignedRankTestImpl(final NaNStrategy nanStrategy,\n+                                      final TiesStrategy tiesStrategy) {\n         naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);\n     }\n \n \n     /** {@inheritDoc} */\n     public double wilcoxonSignedRankTest(final double[] x, final double[] y,\n-                                         boolean exactPValue)\n+                                         final boolean exactPValue)\n         throws NullArgumentException, NoDataException, DimensionMismatchException,\n         NumberIsTooLargeException, ConvergenceException, MaxCountExceededException {\n ", "timestamp": 1328694040, "metainfo": ""}