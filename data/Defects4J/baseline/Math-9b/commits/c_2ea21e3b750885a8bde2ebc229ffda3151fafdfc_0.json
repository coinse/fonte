{"sha": "2ea21e3b750885a8bde2ebc229ffda3151fafdfc", "log": "MATH-795: in RealVectorAbstractTest, added unit tests for RealVector.setSubVector(int, RealVector).   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n     }\n \n     @Test\n+    public void testSetSubVectorSameType() {\n+        final double x = getPreferredEntryValue();\n+        final double[] expected = {x, x, x, 1d, x, 2d, x, x, 3d, x, x, x, 4d, x, x, x};\n+        final double[] sub = {5d, x, 6d, 7d, 8d};\n+        final RealVector actual = create(expected);\n+        final int index = 2;\n+        actual.setSubVector(index, create(sub));\n+\n+        for (int i = 0; i < sub.length; i++){\n+            expected[index + i] = sub[i];\n+        }\n+        TestUtils.assertEquals(\"\", expected, actual, 0d);\n+    }\n+\n+    @Test\n+    public void testSetSubVectorMixedType() {\n+        final double x = getPreferredEntryValue();\n+        final double[] expected = {x, x, x, 1d, x, 2d, x, x, 3d, x, x, x, 4d, x, x, x};\n+        final double[] sub = {5d, x, 6d, 7d, 8d};\n+        final RealVector actual = create(expected);\n+        final int index = 2;\n+        actual.setSubVector(index, createAlien(sub));\n+\n+        for (int i = 0; i < sub.length; i++){\n+            expected[index + i] = sub[i];\n+        }\n+        TestUtils.assertEquals(\"\", expected, actual, 0d);\n+    }\n+\n+    @Test(expected = OutOfRangeException.class)\n+    public void testSetSubVectorInvalidIndex1() {\n+        create(new double[10]).setSubVector(-1, create(new double[2]));\n+    }\n+\n+    @Test(expected = OutOfRangeException.class)\n+    public void testSetSubVectorInvalidIndex2() {\n+        create(new double[10]).setSubVector(10, create(new double[2]));\n+    }\n+\n+    @Test(expected = OutOfRangeException.class)\n+    public void testSetSubVectorInvalidIndex3() {\n+        create(new double[10]).setSubVector(9, create(new double[2]));\n+    }\n+\n+    @Test\n     public void testDataInOut() {\n         final RealVector v1 = create(vec1);\n         final RealVector v2 = create(vec2);\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n     }\n \n     @Test\n+    @Ignore(\"Abstract class RealVector does not implement setSubvector(int, RealVector)\")\n+    @Override\n+    public void testSetSubVectorSameType() {\n+        // Do nothing\n+    }\n+\n+    @Test\n+    @Ignore(\"Abstract class RealVector does not implement setSubvector(int, RealVector)\")\n+    @Override\n+    public void testSetSubVectorMixedType() {\n+        // Do nothing\n+    }\n+\n+    @Test\n+    @Ignore(\"Abstract class RealVector does not implement setSubvector(int, RealVector)\")\n+    @Override\n+    public void testSetSubVectorInvalidIndex1() {\n+        // Do nothing\n+    }\n+\n+    @Test\n+    @Ignore(\"Abstract class RealVector does not implement setSubvector(int, RealVector)\")\n+    @Override\n+    public void testSetSubVectorInvalidIndex2() {\n+        // Do nothing\n+    }\n+\n+    @Test\n+    @Ignore(\"Abstract class RealVector does not implement setSubvector(int, RealVector)\")\n+    @Override\n+    public void testSetSubVectorInvalidIndex3() {\n+        // Do nothing\n+    }\n+\n+    @Test\n     @Ignore\n     @Override\n     public void testBasicFunctions() {", "timestamp": 1339185402, "metainfo": ""}