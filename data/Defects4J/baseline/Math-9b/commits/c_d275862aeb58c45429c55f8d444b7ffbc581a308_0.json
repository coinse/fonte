{"sha": "d275862aeb58c45429c55f8d444b7ffbc581a308", "log": "Added Product and Mean to Univariate and all implementations, this patch contains contributions from Mark Diggory.  * This patch introduces Product and GeometricMean into the Univariate implementation.  * Discarding the contribution of a discarded element in a rolling UnivariateImpl requires that the product be calculated explicitly each time a value is discarded.  This is necessary because not all values will have non-zero values.  * Errors in rolling logic for ListUimpl, and UnivariateImpl were corrected, and more test cases were added to the JUnit tests for the Univariate implementations.  More rigorous test cases are needed for the entire suite of Univariate implementations   ", "commit": "\n--- a/src/java/org/apache/commons/math/AbstractStoreUnivariate.java\n+++ b/src/java/org/apache/commons/math/AbstractStoreUnivariate.java\n  * Provides univariate measures for an array of doubles.  \n  * \n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @author Mark Diggory\n  */\n public abstract class AbstractStoreUnivariate implements StoreUnivariate {\n \n         double arithMean = getSum() / getN();\n         return arithMean;\n     }\n+\n+    /**\n+     * Returns the geometric mean for this collection of values\n+     * @see org.apache.commons.math.Univariate#getGeometricMean()\n+     */\n+    public double getGeometricMean() {\n+        double gMean = Math.pow(getProduct(),(1.0/getN()));\n+        return gMean;\n+    }\n+\n+    /**\n+     * Returns the product for this collection of values\n+     * @see org.apache.commons.math.Univariate#getProduct()\n+     */\n+    public double getProduct() {\n+        double product = Double.NaN;\n+        if( getN() > 0 ) {\n+            product = 1.0;\n+            for( int i = 0; i < getN(); i++) {\n+                product *= getElement(i);\n+            }\n+        }\n+        return product;\n+    }\n+       \n \n     /**\n      * Returns the variance for this collection of values\n--- a/src/java/org/apache/commons/math/ListUnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/ListUnivariateImpl.java\n         double value = Double.NaN;\n         if (windowSize != Univariate.INIFINTE_WINDOW &&\n             windowSize < list.size()) {\n-            Number n = (Number) list.get(((list.size() - 1) - windowSize) +\n-                                          index) ;\n+\n+            int calcIndex = (list.size() - windowSize) + index;\n+\n+            Number n = (Number) list.get(calcIndex);\n             value = n.doubleValue();\n         } else {\n             Number n = (Number) list.get(index);\n             value = n.doubleValue();\n         }\n+        System.out.println( \"Returning value: \" + value );\n         return value;\n     }\n \n     /* (non-Javadoc)\n      * @see org.apache.commons.math.Univariate#getN()\n      */\n-    public double getN() {\n-        double N = 0.0;\n+    public int getN() {\n+        int N = 0;\n \n         if (windowSize != Univariate.INIFINTE_WINDOW) {\n             if (list.size() > windowSize) {\n--- a/src/java/org/apache/commons/math/StoreUnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/StoreUnivariateImpl.java\n     /* (non-Javadoc)\n      * @see org.apache.commons.math.Univariate#getN()\n      */\n-    public double getN() {\n+    public int getN() {\n         return eDA.getNumElements();\n     }\n \n--- a/src/java/org/apache/commons/math/Univariate.java\n+++ b/src/java/org/apache/commons/math/Univariate.java\n  *\n  * @author Phil Steitz\n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n- * @version $Revision: 1.4 $ $Date: 2003/05/20 18:15:29 $\n+ * @author Mark Diggory\n+ * @version $Revision: 1.5 $ $Date: 2003/05/21 17:59:19 $\n  * \n */\n public interface Univariate {\n      * @return mean value\n      */\n     public abstract double getMean();\n+\n+    /** \n+     * Returns the geometric mean of the values that have been added\n+     * @return mean value\n+     */\n+    public abstract double getGeometricMean();\n+\n+    /** \n+     * Returns the product of all values that have been added\n+     * @return product of all values\n+     */\n+    public abstract double getProduct();\n \n     /** \n      * Returns the variance of the values that have been added\n     /** Getter for property n.\n      * @return Value of property n.\n      */\n-    public abstract double getN();\n+    public abstract int getN();\n \n     /** Getter for property sum.\n      * @return Value of property sum.\n--- a/src/java/org/apache/commons/math/UnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/UnivariateImpl.java\n  * to doubles by addValue().  \n  *\n  * @author Phil Steitz\n- * @version $Revision: 1.5 $ $Date: 2003/05/20 18:15:29 $\n+ * @author Mark Diggory\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.6 $ $Date: 2003/05/21 17:59:19 $\n  * \n */\n public class UnivariateImpl implements Univariate, Serializable {\n     private double sumsq = 0.0;\n \n     /** count of values that have been added */\n-    private double n = 0.0;\n+    private int n = 0;\n \n     /** min of values that have been added */\n     private double min = Double.MAX_VALUE;\n \n     /** max of values that have been added */\n     private double max = Double.MIN_VALUE;\n+\n+    /** produce of values that have been added */\n+    private double product = Double.NaN;\n \n     /** Creates new univariate */\n     public UnivariateImpl() {\n      */\n     public double getMean() {\n         // FIXME: throw something meaningful if n = 0\n-        return sum/n;\n+        return (sum / (double) n );\n+     }\n+\n+    /** \n+     * Returns the geometric mean of the values that have been added\n+     * @return geometric mean value\n+     */\n+    public double getGeometricMean() {\n+        return Math.pow(product,( 1.0/n ) );\n+    }\n+\n+    /** \n+     * Returns the product of all values add to this Univariate\n+     * @return product value\n+     */\n+    public double getProduct() {\n+        return product;\n     }\n \n     /** \n             variance = 0.0;\n         } else if( n > 1 ) {\n             double xbar = getMean();\n-            variance =  (sumsq - xbar*xbar*n)/(n-1);\n+            variance =  (sumsq - xbar*xbar*((double) n))/(((double) n)-1);\n         }\n \n         return variance;\n      */\n     private void insertValue(double v) {\n \n+        // The default value of product is NaN, if you\n+        // try to retrieve the product for a univariate with\n+        // no values, we return NaN.\n+        //\n+        // If this is the first call to insertValue, we want\n+        // to set product to 1.0, so that our first element\n+        // is not \"cancelled\" out by the NaN.\n+        if( n == 0 ) {\n+            product = 1.0;\n+        }\n+\n         if( windowSize != Univariate.INIFINTE_WINDOW ) {\n+\n             if( windowSize == n ) {\n                 double discarded = doubleArray.addElementRolling( v );\n \n-                // Remove the influence of discarded value ONLY\n-                // if the discard value has any meaning.  In other words\n-                // don't discount until we \"roll\".\n-                if( windowSize > doubleArray.getNumElements() ) {\n-                    // Remove the influence of the discarded\n-                    sum -= discarded;\n-                    sumsq -= discarded * discarded;\n-                }\n+                // Remove the influence of the discarded\n+                sum -= discarded;\n+                sumsq -= discarded * discarded;\n \n                 // Include the influence of the new\n                 // TODO: The next two lines seems rather expensive, but\n                 max = doubleArray.getMax();\n                 sum += v;\n                 sumsq += v*v;\n+\n+                // Note that the product CANNOT be discarded\n+                // properly because one cannot discount the effect\n+                // of a zero value.  For this reason, the product\n+                // of the altered array must be calculated from the\n+                // current array elements.  Product must be recalculated\n+                // everytime the array is \"rolled\"\n+                product = 1.0;\n+                double[] elements = doubleArray.getElements();\n+                for( int i = 0; i < elements.length; i++ ) {\n+                    product *= elements[i];\n+                }\n+\n             } else {\n                 doubleArray.addElement( v );        \t\n                 n += 1.0;\n                 if (v > max) max = v;\n                 sum += v;\n                 sumsq += v*v;\n+                product *= v;\n             }\n         } else {\n             // If the windowSize is inifinite please don't take the time to\n             if (v > max) max = v;\n             sum += v;\n             sumsq += v*v;\n+            product *= v;\n         }\n     }\n \n     /** Getter for property n.\n      * @return Value of property n.\n      */\n-    public double getN() {\n+    public int getN() {\n         return n;\n     }\n \n     public void clear() {\n         this.sum = 0.0;\n         this.sumsq = 0.0;\n-        this.n = 0.0;\n+        this.n = 0;\n         this.min = Double.MAX_VALUE;\n         this.max = Double.MIN_VALUE;\n     }\n--- a/src/test/org/apache/commons/math/ListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/ListUnivariateImplTest.java\n  * Test cases for the {@link Univariate} class.\n  *\n  * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n- * @version $Revision: 1.2 $ $Date: 2003/05/15 15:38:48 $\n+ * @version $Revision: 1.3 $ $Date: 2003/05/21 17:59:20 $\n  */\n \n public final class ListUnivariateImplTest extends TestCase {\n \t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n   \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n     }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());\n+        u.setWindowSize(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Product not expected\", 24.0, u.getProduct(), Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", 2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - UnivariateImpl should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        assertEquals( \"Product not expected\", 39916800.0, u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, u.getGeometricMean(), 0.00001 );\n+\n+\n+    }\n+\n }\n \n--- a/src/test/org/apache/commons/math/StoreUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/StoreUnivariateImplTest.java\n  * Test cases for the {@link Univariate} class.\n  *\n  * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n- * @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:01 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/21 17:59:20 $\n  */\n \n public final class StoreUnivariateImplTest extends TestCase {\n \t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n   \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n     }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tStoreUnivariateImpl u = new StoreUnivariateImpl();\n+        u.setWindowSize(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Product not expected\", 24.0, u.getProduct(), Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", 2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - UnivariateImpl should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        assertEquals( \"Product not expected\", 39916800.0, u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, u.getGeometricMean(), 0.00001 );\n+\n+\n+    }\n+\n }\n \n--- a/src/test/org/apache/commons/math/UnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/UnivariateImplTest.java\n  * Test cases for the {@link Univariate} class.\n  *\n  * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n- * @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:01 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/21 17:59:20 $\n  */\n \n public final class UnivariateImplTest extends TestCase {\n \t\tassertTrue( \"Mean of n = 1 set should be zero\", u.getStandardDeviation() == 0);\n \t\tassertTrue( \"Variance of n = 1 set should be zero\", u.getVariance() == 0);\t\n     }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tUnivariateImpl u = new UnivariateImpl(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Product not expected\", 24.0, u.getProduct(), Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", 2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - UnivariateImpl should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        assertEquals( \"Product not expected\", 39916800.0, u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, u.getGeometricMean(), 0.00001 );\n+\n+\n+    }\n+\n }\n \n--- a/src/test/org/apache/commons/math/ValueServerTest.java\n+++ b/src/test/org/apache/commons/math/ValueServerTest.java\n  * Test cases for the ValueServer class.\n  *\n  * @author  Phil Steitz\n- * @version $Revision: 1.1 $\n+ * @version $Revision: 1.2 $\n  */\n \n public final class ValueServerTest extends TestCase {\n             next = vs.getNext();\n             stats.addValue(next);\n         }    \n-        assertEquals(\"mean\", stats.getMean(),5.069831575018909,tolerance);\n+        assertEquals(\"mean\", 5.069831575018909, stats.getMean(), tolerance);\n         assertEquals\n-         (\"std dev\", stats.getStandardDeviation(),1.0173699343977738,tolerance);\n+         (\"std dev\", 1.0173699343977738, stats.getStandardDeviation(), tolerance);\n     }\n     \n     /**", "timestamp": 1053539960, "metainfo": ""}