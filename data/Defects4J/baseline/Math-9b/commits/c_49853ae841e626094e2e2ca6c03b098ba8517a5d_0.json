{"sha": "49853ae841e626094e2e2ca6c03b098ba8517a5d", "log": "javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import org.apache.commons.math.stat.univariate.rank.Percentile;\n \n /**\n- * Provides univariate measures for an array of doubles. \n- * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:37 $\n+ * Extends {@link AbstractStorelessDescriptiveStatistics} to include univariate statistics\n+ * that may require access to the full set of sample values. \n+ * @version $Revision: 1.2 $ $Date: 2004/01/18 03:45:02 $\n  */\n public abstract class AbstractDescriptiveStatistics\n     extends AbstractStorelessDescriptiveStatistics {\n--- a/src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import org.apache.commons.math.stat.univariate.summary.SumOfSquares;\n \n /**\n- * Provides univariate measures for an array of doubles.\n- * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:37 $  \n+ * Provides a default {@link DescriptiveStatistics} implementation, including only statistics\n+ * that can be computed in one pass through the data without storing the full set of sample\n+ * data values.\n+ * @version $Revision: 1.2 $ $Date: 2004/01/18 03:45:02 $  \n  */\n public abstract class AbstractStorelessDescriptiveStatistics extends DescriptiveStatistics {\n \n--- a/src/java/org/apache/commons/math/stat/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/DescriptiveStatistics.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import org.apache.commons.discovery.tools.DiscoverClass;\n \n /**\n- * DescriptiveStatistics implements the Univariate interface \n- * but maintains the set of values which contribute to \n- * the values being returned.  This implementation of \n- * Univariate provides additional percentile functionality \n- * such as.  This additional functionality comes with \n- * a price of increased storage costs.\n- * @version $Revision: 1.2 $ $Date: 2003/11/19 03:28:23 $\n+ * Abstract factory class for univariate statistical summaries.\n+ * \n+ * @version $Revision: 1.3 $ $Date: 2004/01/18 03:45:02 $\n  */\n public abstract class DescriptiveStatistics implements Serializable{\n \n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * Provides the ability to extend polymophically so that\n  * indiviual statistics do not need to implement these methods unless\n  * there are better algorithms for handling the calculation.\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:21 $\n+ * @version $Revision: 1.12 $ $Date: 2004/01/18 03:45:02 $\n  */\n public abstract class AbstractStorelessUnivariateStatistic\n     extends AbstractUnivariateStatistic\n     implements StorelessUnivariateStatistic {\n \n     /**\n-     * This implements the AbstractUnivariateStatistic impl to funnel\n-     * calculation off to the instantanious increment method. In most cases of\n-     * StorelessUnivariateStatistic this is never really used because more\n-     * efficient algorithms are available for that statistic.\n+     * This default implementation just calls {@link #increment} in a loop and then {@link #getResult} to\n+     * compute the return value.  Most implementations will override this method with a more efficient implementation.\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n     public double evaluate(\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * Abstract Implementation for UnivariateStatistics.\n  * Provides the ability to extend polymophically so that\n  * indiviual statistics do not need to implement these methods.\n- * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:21 $\n+ * @version $Revision: 1.11 $ $Date: 2004/01/18 03:45:02 $\n  */\n public abstract class AbstractUnivariateStatistic\n     implements UnivariateStatistic {\n \n     /**\n-     * This implementation provides a simple wrapper around the double[]\n-     * and passes the request onto the evaluate(DoubleArray da) method.\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[])\n      */\n     public double evaluate(final double[] values) {\n     }\n \n     /**\n-     * Subclasses of AbstractUnivariateStatistc need to implement this method.\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n     public abstract double evaluate(\n         final int length);\n \n     /**\n-     * this protected test method used by all methods to verify the content\n-     * of the array and indicies are correct.\n+     * This method is used by all evaluation methods to verify that the content\n+     * of the array and indices are correct.\n+     * <p>\n+     *  It is used by an individual statistic to determine if calculation\n+     *  should continue, or return <code>Double.NaN</code> </p>\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length processing at this point in the array\n-     * @return this is used to determine if the array is of 0 length or not,\n-     * it is used by an individual statistic to determine if continuation\n-     * of a statistical calculation should continue or return NaN.\n+     * @return true if the array has postive length\n+     * @throws IllegalArgumentException if the indices are invalid or the array is null\n      */\n     protected boolean test(\n         final double[] values,\n--- a/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n package org.apache.commons.math.stat.univariate;\n \n /**\n- * Extends the capabilities of UnivariateStatistic with a statefull incremental\n- * strategy through three methods for calculating a statistic without having to\n- * maintain a double[] of the values. Because a StorelessUnivariateStatistic\n- * does not require that a double[] storage structure be maintained with the\n- * values in it, there are only a subset of known statistics can actually be\n- * implemented using it. If a Statistic cannot be implemented in a Storeless\n- * approach it should implement the UnivariateStatistic interface directly\n- * instead.\n- * @version $Revision: 1.12 $ $Date: 2003/11/19 03:28:25 $\n+ * Extends the definition of {@link UnivariateStatistic} with an {@link #increment}\n+ * method for adding values and updating internal state incrementally.  This interface\n+ * is designed to be used for calculating statistics that can be computed in one pass through\n+ * the data without storing the full array of sample values.\n+ * \n+ * @version $Revision: 1.13 $ $Date: 2004/01/18 03:45:02 $\n  */\n public interface StorelessUnivariateStatistic extends UnivariateStatistic {\n \n     /**\n-     * Increments the internal state of the Storagless\n-     * Implementation.\n-     * @param d is the value to increment the state by.\n+     * Updates the internal state of the statistic to reflect the addition of the new value.\n+     * @param d  the new value.\n      */\n     void increment(double d);\n \n     /**\n-     * Returns the current state of the statistic after the\n-     * last increment.\n-     * @return value of the statistic, Double.NaN if it\n+     * Returns the current value of the Statistic.\n+     * @return value of the statistic, <code>Double.NaN</code> if it\n      * has been cleared or just instantiated.\n      */\n     double getResult();\n \n     /**\n-     * Returns the current state of the statistic after the\n-     * last increment.\n-     * @return value of the statistic, Double.NaN if it\n-     * has been cleared or just instantiated.\n+     * Returns the number of values that have been added.\n+     * @return the number of values.\n      */\n     double getN();\n ", "timestamp": 1074397502, "metainfo": ""}