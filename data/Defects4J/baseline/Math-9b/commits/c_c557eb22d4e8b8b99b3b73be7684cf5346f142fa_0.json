{"sha": "c557eb22d4e8b8b99b3b73be7684cf5346f142fa", "log": "introduced an upper level interface for all ODE integrators  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n \n package org.apache.commons.math.ode;\n \n-import java.io.Serializable;\n-import java.util.Collection;\n-\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.sampling.StepHandler;\n \n  * @since 1.2\n  */\n \n-public interface FirstOrderIntegrator extends Serializable {\n-\n-  /** Get the name of the method.\n-   * @return name of the method\n-   */\n-  public String getName();\n-\n-  /** Add a step handler to this integrator.\n-   * <p>The handler will be called by the integrator for each accepted\n-   * step.</p>\n-   * @param handler handler for the accepted steps\n-   * @see #getStepHandlers()\n-   * @see #clearStepHandlers()\n-   * @since 2.0\n-   */\n-  public void addStepHandler (StepHandler handler);\n-\n-  /** Get all the step handlers that have been added to the integrator.\n-   * @return an unmodifiable collection of the added events handlers\n-   * @see #addStepHandler(StepHandler)\n-   * @see #clearStepHandlers()\n-   * @since 2.0\n-   */\n-  public Collection<StepHandler> getStepHandlers();\n-\n-  /** Remove all the step handlers that have been added to the integrator.\n-   * @see #addStepHandler(StepHandler)\n-   * @see #getStepHandlers()\n-   * @since 2.0\n-   */\n-  public void clearStepHandlers();\n-\n-  /** Add an event handler to the integrator.\n-   * @param handler event handler\n-   * @param maxCheckInterval maximal time interval between switching\n-   * function checks (this interval prevents missing sign changes in\n-   * case the integration steps becomes very large)\n-   * @param convergence convergence threshold in the event time search\n-   * @param maxIterationCount upper limit of the iteration count in\n-   * the event time search\n-   * @see #getEventHandlers()\n-   * @see #clearEventHandlers()\n-   */\n-  public void addEventHandler(EventHandler handler, double maxCheckInterval,\n-                              double convergence, int maxIterationCount);\n-\n-  /** Get all the event handlers that have been added to the integrator.\n-   * @return an unmodifiable collection of the added events handlers\n-   * @see #addEventHandler(EventHandler, double, double, int)\n-   * @see #clearEventHandlers()\n-   */\n-  public Collection<EventHandler> getEventHandlers();\n-\n-  /** Remove all the event handlers that have been added to the integrator.\n-   * @see #addEventHandler(EventHandler, double, double, int)\n-   * @see #getEventHandlers()\n-   */\n-  public void clearEventHandlers();\n+public interface FirstOrderIntegrator extends ODEIntegrator {\n \n   /** Integrate the differential equations up to the given time.\n    * <p>This method solves an Initial Value Problem (IVP).</p>\n                            double t, double[] y)\n     throws DerivativeException, IntegratorException;\n \n-  /** Get the current value of the step start time t<sub>i</sub>.\n-   * <p>This method can be called during integration (typically by\n-   * the object implementing the {@link FirstOrderDifferentialEquations\n-   * differential equations} problem) if the value of the current step that\n-   * is attempted is needed.</p>\n-   * <p>The result is undefined if the method is called outside of\n-   * calls to {@link #integrate}</p>\n-   * @return current value of the step start time t<sub>i</sub>\n-   */\n-  public double getCurrentStepStart();\n-\n-  /** Get the current signed value of the integration stepsize.\n-   * <p>This method can be called during integration (typically by\n-   * the object implementing the {@link FirstOrderDifferentialEquations\n-   * differential equations} problem) if the signed value of the current stepsize\n-   * that is tried is needed.</p>\n-   * <p>The result is undefined if the method is called outside of\n-   * calls to {@link #integrate}</p>\n-   * @return current signed value of the stepsize\n-   */\n-  public double getCurrentSignedStepsize();\n-\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/ode/ODEIntegrator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.ode;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+\n+import org.apache.commons.math.ode.events.EventHandler;\n+import org.apache.commons.math.ode.sampling.StepHandler;\n+\n+public interface ODEIntegrator extends Serializable {\n+\n+    /** Get the name of the method.\n+     * @return name of the method\n+     */\n+    String getName();\n+\n+    /** Add a step handler to this integrator.\n+     * <p>The handler will be called by the integrator for each accepted\n+     * step.</p>\n+     * @param handler handler for the accepted steps\n+     * @see #getStepHandlers()\n+     * @see #clearStepHandlers()\n+     * @since 2.0\n+     */\n+    void addStepHandler(StepHandler handler);\n+\n+    /** Get all the step handlers that have been added to the integrator.\n+     * @return an unmodifiable collection of the added events handlers\n+     * @see #addStepHandler(StepHandler)\n+     * @see #clearStepHandlers()\n+     * @since 2.0\n+     */\n+    Collection<StepHandler> getStepHandlers();\n+\n+    /** Remove all the step handlers that have been added to the integrator.\n+     * @see #addStepHandler(StepHandler)\n+     * @see #getStepHandlers()\n+     * @since 2.0\n+     */\n+    void clearStepHandlers();\n+\n+    /** Add an event handler to the integrator.\n+     * @param handler event handler\n+     * @param maxCheckInterval maximal time interval between switching\n+     * function checks (this interval prevents missing sign changes in\n+     * case the integration steps becomes very large)\n+     * @param convergence convergence threshold in the event time search\n+     * @param maxIterationCount upper limit of the iteration count in\n+     * the event time search\n+     * @see #getEventHandlers()\n+     * @see #clearEventHandlers()\n+     */\n+    void addEventHandler(EventHandler handler,\n+                                         double maxCheckInterval,\n+                                         double convergence,\n+                                         int maxIterationCount);\n+\n+    /** Get all the event handlers that have been added to the integrator.\n+     * @return an unmodifiable collection of the added events handlers\n+     * @see #addEventHandler(EventHandler, double, double, int)\n+     * @see #clearEventHandlers()\n+     */\n+    Collection<EventHandler> getEventHandlers();\n+\n+    /** Remove all the event handlers that have been added to the integrator.\n+     * @see #addEventHandler(EventHandler, double, double, int)\n+     * @see #getEventHandlers()\n+     */\n+    void clearEventHandlers();\n+\n+    /** Get the current value of the step start time t<sub>i</sub>.\n+     * <p>This method can be called during integration (typically by\n+     * the object implementing the {@link FirstOrderDifferentialEquations\n+     * differential equations} problem) if the value of the current step that\n+     * is attempted is needed.</p>\n+     * <p>The result is undefined if the method is called outside of\n+     * calls to {@link #integrate}</p>\n+     * @return current value of the step start time t<sub>i</sub>\n+     */\n+    double getCurrentStepStart();\n+\n+    /** Get the current signed value of the integration stepsize.\n+     * <p>This method can be called during integration (typically by\n+     * the object implementing the {@link FirstOrderDifferentialEquations\n+     * differential equations} problem) if the signed value of the current stepsize\n+     * that is tried is needed.</p>\n+     * <p>The result is undefined if the method is called outside of\n+     * calls to {@link #integrate}</p>\n+     * @return current signed value of the stepsize\n+     */\n+    double getCurrentSignedStepsize();\n+\n+}\n--- a/src/java/org/apache/commons/math/ode/SecondOrderIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/SecondOrderIntegrator.java\n \n package org.apache.commons.math.ode;\n \n-import org.apache.commons.math.ode.sampling.StepHandler;\n \n /** This interface represents a second order integrator for\n  * differential equations.\n  * @since 1.2\n  */\n \n-public interface SecondOrderIntegrator {\n-\n-  /** Get the name of the method.\n-   * @return name of the method\n-   */\n-  public String getName();\n-\n-  /** Set the step handler for this integrator.\n-   * The handler will be called by the integrator for each accepted\n-   * step.\n-   * @param handler handler for the accepted steps\n-   */\n-  public void setStepHandler (StepHandler handler);\n-\n-  /** Get the step handler for this integrator.\n-   * @return the step handler for this integrator\n-   */\n-  public StepHandler getStepHandler();\n+public interface SecondOrderIntegrator extends ODEIntegrator {\n \n   /** Integrate the differential equations up to the given time\n    * @param equations differential equations to integrate", "timestamp": 1215524229, "metainfo": ""}