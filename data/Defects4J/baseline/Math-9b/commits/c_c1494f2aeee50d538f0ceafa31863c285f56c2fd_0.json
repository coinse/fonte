{"sha": "c1494f2aeee50d538f0ceafa31863c285f56c2fd", "log": "MATH-795: factored out unit tests for RealVector.mapAdd(double), RealVector.mapSubtract(double), RealVector.mapDivide(double), RealVector.mapSubtract(double).   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n \n     }\n \n+    private void doTestMapBinaryOperation(final BinaryOperation op, final boolean inPlace) {\n+        final double x = getPreferredEntryValue();\n+        final double y = x + 1d;\n+        final double z = y + 1d;\n+        final double[] data =\n+            {\n+                Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY,\n+                0d, -0d, x, y, z, 2 * x, -x, 1 / x, x * x, x + y, x - y, y - x\n+            };\n+        final double[] expected = new double[data.length];\n+        for (int i = 0; i < data.length; i++) {\n+            final double d = data[i];\n+            for (int j = 0; j < expected.length; j++) {\n+                switch (op) {\n+                    case ADD:\n+                        expected[j] = data[j] + d;\n+                        break;\n+                    case SUB:\n+                        expected[j] = data[j] - d;\n+                        break;\n+                    case MUL:\n+                        expected[j] = data[j] * d;\n+                        break;\n+                    case DIV:\n+                        expected[j] = data[j] / d;\n+                        break;\n+                    default:\n+                        throw new AssertionError(\"unexpected value\");\n+                }\n+            }\n+            final RealVector v = create(data);\n+            final RealVector actual;\n+            if (inPlace) {\n+                switch (op) {\n+                    case ADD:\n+                        actual = v.mapAddToSelf(d);\n+                        break;\n+                    case SUB:\n+                        actual = v.mapSubtractToSelf(d);\n+                        break;\n+                    case MUL:\n+                        actual = v.mapMultiplyToSelf(d);\n+                        break;\n+                    case DIV:\n+                        actual = v.mapDivideToSelf(d);\n+                        break;\n+                    default:\n+                        throw new AssertionError(\"unexpected value\");\n+                }\n+            } else {\n+                switch (op) {\n+                    case ADD:\n+                        actual = v.mapAdd(d);\n+                        break;\n+                    case SUB:\n+                        actual = v.mapSubtract(d);\n+                        break;\n+                    case MUL:\n+                        actual = v.mapMultiply(d);\n+                        break;\n+                    case DIV:\n+                        actual = v.mapDivide(d);\n+                        break;\n+                    default:\n+                        throw new AssertionError(\"unexpected value\");\n+                }\n+            }\n+            TestUtils.assertEquals(Double.toString(d), expected, actual, 0d);\n+        }\n+    }\n+\n+    @Test\n+    public void testMapAdd() {\n+        doTestMapBinaryOperation(BinaryOperation.ADD, false);\n+    }\n+\n+    @Test\n+    public void testMapAddToSelf() {\n+        doTestMapBinaryOperation(BinaryOperation.ADD, true);\n+    }\n+\n+    @Test\n+    public void testMapSubtract() {\n+        doTestMapBinaryOperation(BinaryOperation.SUB, false);\n+    }\n+\n+    @Test\n+    public void testMapSubtractToSelf() {\n+        doTestMapBinaryOperation(BinaryOperation.SUB, true);\n+    }\n+\n+    @Test\n+    public void testMapMultiply() {\n+        doTestMapBinaryOperation(BinaryOperation.MUL, false);\n+    }\n+\n+    @Test\n+    public void testMapMultiplyToSelf() {\n+        doTestMapBinaryOperation(BinaryOperation.MUL, true);\n+    }\n+\n+    @Test\n+    public void testMapDivide() {\n+        doTestMapBinaryOperation(BinaryOperation.DIV, false);\n+    }\n+\n+    @Test\n+    public void testMapDivideToSelf() {\n+        doTestMapBinaryOperation(BinaryOperation.DIV, true);\n+    }\n+\n     @Test\n     public void testDataInOut() {\n         final RealVector v1 = create(vec1);\n     @Test\n     public void testMapFunctions() {\n         final RealVector v1 = create(vec1);\n-\n-        //octave =  v1 .+ 2.0\n-        RealVector v_mapAdd = v1.mapAdd(2.0d);\n-        double[] result_mapAdd = {3d, 4d, 5d};\n-        assertClose(\"compare vectors\" ,result_mapAdd,v_mapAdd.toArray(),normTolerance);\n-\n-        //octave =  v1 .+ 2.0\n-        RealVector v_mapAddToSelf = v1.copy();\n-        v_mapAddToSelf.mapAddToSelf(2.0d);\n-        double[] result_mapAddToSelf = {3d, 4d, 5d};\n-        assertClose(\"compare vectors\" ,result_mapAddToSelf,v_mapAddToSelf.toArray(),normTolerance);\n-\n-        //octave =  v1 .- 2.0\n-        RealVector v_mapSubtract = v1.mapSubtract(2.0d);\n-        double[] result_mapSubtract = {-1d, 0d, 1d};\n-        assertClose(\"compare vectors\" ,result_mapSubtract,v_mapSubtract.toArray(),normTolerance);\n-\n-        //octave =  v1 .- 2.0\n-        RealVector v_mapSubtractToSelf = v1.copy();\n-        v_mapSubtractToSelf.mapSubtractToSelf(2.0d);\n-        double[] result_mapSubtractToSelf = {-1d, 0d, 1d};\n-        assertClose(\"compare vectors\" ,result_mapSubtractToSelf,v_mapSubtractToSelf.toArray(),normTolerance);\n-\n-        //octave =  v1 .* 2.0\n-        RealVector v_mapMultiply = v1.mapMultiply(2.0d);\n-        double[] result_mapMultiply = {2d, 4d, 6d};\n-        assertClose(\"compare vectors\" ,result_mapMultiply,v_mapMultiply.toArray(),normTolerance);\n-\n-        //octave =  v1 .* 2.0\n-        RealVector v_mapMultiplyToSelf = v1.copy();\n-        v_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);\n-        double[] result_mapMultiplyToSelf = {2d, 4d, 6d};\n-        assertClose(\"compare vectors\" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.toArray(),normTolerance);\n-\n-        //octave =  v1 ./ 2.0\n-        RealVector v_mapDivide = v1.mapDivide(2.0d);\n-        double[] result_mapDivide = {.5d, 1d, 1.5d};\n-        assertClose(\"compare vectors\" ,result_mapDivide,v_mapDivide.toArray(),normTolerance);\n-\n-        //octave =  v1 ./ 2.0\n-        RealVector v_mapDivideToSelf = v1.copy();\n-        v_mapDivideToSelf.mapDivideToSelf(2.0d);\n-        double[] result_mapDivideToSelf = {.5d, 1d, 1.5d};\n-        assertClose(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.toArray(),normTolerance);\n-\n \n         //octave =  v1 .^ 2.0\n         RealVector v_mapPow = v1.map(new Power(2));", "timestamp": 1340689513, "metainfo": ""}