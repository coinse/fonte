{"sha": "811975e52049a6275d4b9d6587ce3af40791a9ae", "log": "The following changes were made to the Univariate implementation.  The public interface of Univariate was extracted in an interface of the same name. Univariate, an interface, is now implemented by UnivariateImpl which contains all code originally present in the original Univariate implementation.  * StoredUnivariate is an interface which extends Univariate and adds measures not available in the superinterface such as mode, kurtosis, and skew  * StoredUnivariateImpl provides an implementation which uses the ExpandableDoubleArray for internal storage.  Calculations are performed on demand *each* time a particular measure is required no state is maintained by this implementation.  * Univariate provided methods addValue(int), addValue(float), addValue(long). There functions were removed as no cast is required - all of these assignments are widening conversions - no cast required  * Removed the name property from Univariate - property not relevant to univariate statistics   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/StoreUnivariate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+/**\n+ * StoreUnivariate implements the Univariate interface but maintains the set of values \n+ * which contribute to the values being returned.  This implementation of Univariate\n+ * provides additional functionality such as skewness, kurtosis, and mode.  This additional\n+ * functionality comes with a price of increased storage costs.\n+ * \n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public interface StoreUnivariate extends Univariate {\n+\n+\t/**\n+\t * A LEPTOKURTIC set has a positive kurtosis (a high peak) \n+\t */\n+\tpublic static int LEPTOKURTIC = 1;\n+\t\n+\t/**\n+\t * A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution\n+\t */\n+\tpublic static int MESOKURTIC = 0;\n+\t\n+\t/**\n+\t * A PLATYKURTIC set has a negative kurtosis (a flat \"peak\")\n+\t */\n+\tpublic static int PLATYKURTIC = -1;\n+\n+\t/** \n+\t * Returns the mode of the values that have been added.  The mode is\n+\t * the element which occurs with the most frequency\n+\t * @return the mode\n+\t */\n+\tpublic abstract double getMode();\n+\n+\t/** \n+\t * Returns the skewness of a given distribution.  Skewness is a measure of the\n+\t * assymetry of a given distribution. \n+\t * \n+\t * @return The skewness of this distribution\n+\t */\n+\tpublic abstract double getSkewness();\n+\n+\t/** \n+\t * Kurtosis is a measure of the \"peakedness\" of a distribution\n+\t * \n+\t * @return the mode\n+\t */\n+\tpublic abstract double getKurtosis();\n+\t\n+\t/**\n+\t * Returns the Kurtosis \"classification\" a distribution can be leptokurtic (high peak), platykurtic (flat peak), \n+\t * or mesokurtic (zero kurtosis).  \n+\t * \n+\t * @return A static constant defined in this interface, StoredDeviation.LEPTOKURITC, \n+\t * \t\t\t    StoredDeviation.PLATYKURTIC, or StoredDeviation.MESOKURTIC\n+\t */\n+\tpublic abstract int getKurtosisClass();\n+\t\n+\t/**\n+\t * Returns the current set of values in an array of double primitives.  The order of addition is preserved\n+\t * \n+\t * @return returns the current set of numbers in the order in which they were added to this set\n+\t */\n+\t\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/StoreUnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+/**\n+ * Provides univariate measures for an array of doubles.  \n+ * \n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public class StoreUnivariateImpl implements StoreUnivariate {\n+\n+\tExpandableDoubleArray eDA;\n+\n+\tpublic StoreUnivariateImpl() {\n+\t\teDA = new ExpandableDoubleArray();\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.StoreUnivariate#getMode()\n+\t */\n+\tpublic double getMode() {\n+\t\t// Mode depends on a refactor Freq class\n+\t\tthrow new UnsupportedOperationException(\"getMode() is not yet implemented\");\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.StoreUnivariate#getSkewness()\n+\t */\n+\tpublic double getSkewness() {\n+\t\t// Initialize the skewness\n+\t\tdouble skewness = Double.NaN;\n+\t\t\n+\t\t// Get the mean and the standard deviation\n+\t\tdouble mean = getMean();\n+\t\tdouble stdDev = getStandardDeviation();\n+\n+\t\t// Sum the cubes of the distance from the mean divided by the standard deviation\n+\t\tdouble accum = 0.0;\n+\t\tfor( int i = 0; i < eDA.getNumElements(); i++ ) {\n+\t\t\taccum += Math.pow( (eDA.getElement(i) - mean) / stdDev, 3.0);\n+\t\t}\n+\t\t\n+\t\t// Get N\n+\t\tdouble n = getN();\n+\t\t\n+\t\t// Calculate skewness\n+\t\tskewness = ( n / ( (n-1) * (n-2) ) ) * accum;\n+\n+\t\treturn skewness;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.StoreUnivariate#getKurtosis()\n+\t */\n+\tpublic double getKurtosis() {\n+\t\t// Initialize the kurtosis\n+\t\tdouble kurtosis = Double.NaN;\n+\t\t\n+\t\t// Get the mean and the standard deviation\n+\t\tdouble mean = getMean();\n+\t\tdouble stdDev = getStandardDeviation();\n+\n+\t\t// Sum the ^4 of the distance from the mean divided by the standard deviation\n+\t\tdouble accum = 0.0;\n+\t\tfor( int i = 0; i < eDA.getNumElements(); i++ ) {\n+\t\t\taccum += Math.pow( (eDA.getElement(i) - mean) / stdDev, 4.0);\n+\t\t}\n+\t\t\n+\t\t// Get N\n+\t\tdouble n = getN();\n+\t\t\n+\t\tdouble coefficientOne = ( n * (n+1)) / ( (n-1) * (n-2) * (n-3) );\n+\t\tdouble termTwo = (  ( 3 * Math.pow( n - 1, 2.0)) /  ( (n-2) * (n-3) ) ); \n+\t\t// Calculate kurtosis\n+\t\tkurtosis = ( coefficientOne * accum ) - termTwo;\n+\n+\t\treturn kurtosis;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.StoreUnivariate#getKurtosisClass()\n+\t */\n+\tpublic int getKurtosisClass() {\n+\n+\t\tint kClass = StoreUnivariate.MESOKURTIC;\n+\t\t\n+\t\tdouble kurtosis = getKurtosis();\n+\t\tif( kurtosis > 0 ) {\n+\t\t\tkClass = StoreUnivariate.LEPTOKURTIC;\n+\t\t} else if( kurtosis < 0 ) {\n+\t\t\tkClass = StoreUnivariate.PLATYKURTIC;\n+\t\t}\n+\t\t\n+\t\treturn( kClass );\n+\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#addValue(double)\n+\t */\n+\tpublic void addValue(double v) {\n+\t\teDA.addElement( v );\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getMean()\n+\t */\n+\tpublic double getMean() {\n+\t\tdouble arithMean = getSum() / getN();\n+\t\treturn arithMean;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getVariance()\n+\t */\n+\tpublic double getVariance() {\n+\t\t// Initialize variance\n+\t\tdouble variance = Double.NaN;\n+\n+\t\tif( getN() == 1 ) {\n+\t\t\t// If this is a single value\n+\t\t\tvariance = 0;\n+\t\t} else if( getN() > 1 ) {\n+\t\t\t// Get the mean\n+\t\t\tdouble mean = getMean();\n+\n+\t\t\t// Calculate the sum of the squares of the distance between each value and the mean\n+\t\t\tdouble accum = 0.0;\t\t\n+\t\t\tfor( int i = 0; i < eDA.getNumElements(); i++ ){\n+\t\t\t\t\taccum += Math.pow( (eDA.getElement(i) - mean), 2.0 );\n+\t\t\t}\n+\t\t\n+\t\t\t// Divide the accumulator by N - Hmmm... unbiased or biased?\n+\t\t\tvariance = accum / (getN() - 1);\n+\t\t }\n+\t\t\n+\t\treturn variance;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getStandardDeviation()\n+\t */\n+\tpublic double getStandardDeviation() {\n+\t\tdouble stdDev = Double.NaN;\n+\t\tif( getN() != 0 ) {\n+\t\t\tstdDev = Math.sqrt( getVariance() );\n+\t\t}\n+\t\treturn( stdDev );\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getMax()\n+\t */\n+\tpublic double getMax() {\n+\t\t\n+\t\t// Initialize maximum to NaN\n+\t\tdouble max = Double.NaN;\n+\t\t\n+\t\tfor( int i = 0; i < eDA.getNumElements(); i++) {\n+\t\t\tif( i == 0 ) {\n+\t\t\t\tmax = eDA.getElement(i);\n+\t\t\t} else {\n+\t\t\t\tif( eDA.getElement(i) > max ) {\n+\t\t\t\t\tmax = eDA.getElement(i);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn max;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getMin()\n+\t */\n+\tpublic double getMin() {\n+\t\t// Initialize minimum to NaN\n+\t\tdouble min = Double.NaN;\n+\t\t\n+\t\tfor( int i = 0; i < eDA.getNumElements(); i++) {\n+\t\t\tif( i == 0 ) {\n+\t\t\t\tmin = eDA.getElement(i);\n+\t\t\t} else {\n+\t\t\t\tif( eDA.getElement(i) < min ) {\n+\t\t\t\t\tmin = eDA.getElement(i);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn min;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getN()\n+\t */\n+\tpublic double getN() {\n+\t\treturn eDA.getNumElements();\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getSum()\n+\t */\n+\tpublic double getSum() {\n+\t\tdouble accum = 0.0;\n+\t\tfor( int i = 0; i < eDA.getNumElements(); i++) {\n+\t\t\taccum += eDA.getElement(i);\n+\t\t}\n+\t\treturn accum;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getSumsq()\n+\t */\n+\tpublic double getSumsq() {\n+\t\tdouble accum = 0.0;\n+\t\tfor( int i = 0; i < eDA.getNumElements(); i++) {\n+\t\t\taccum += Math.pow(eDA.getElement(i), 2.0);\n+\t\t}\n+\t\treturn accum;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#clear()\n+\t */\n+\tpublic void clear() {\n+\t\teDA.clear();\n+\t}\n+\n+}\n--- a/src/java/org/apache/commons/math/Univariate.java\n+++ b/src/java/org/apache/commons/math/Univariate.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math;\n+ package org.apache.commons.math;\n \n /**\n  *\n  * Accumulates univariate statistics for values fed in \n- * through the addValue() method.  Does not store raw data values.\n- * All data (including n) are represented internally as doubles.\n- * Integers, floats and longs can be added, but will be converted\n- * to doubles by addValue().  \n+ * through the addValue() method.   This interface defines the LCD interface\n+ * which all Univariate implementations must implement.\n  *\n  * @author Phil Steitz\n- * @version $Revision: 1.1 $ $Date: 2003/05/12 19:04:10 $\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.2 $ $Date: 2003/05/15 05:39:00 $\n  * \n */\n-public class Univariate {\n+public interface Univariate {\n+\t\n+\t/**\n+\t * Adds the value to the set of numbers\n+\t * @param v the value to be added \n+\t */\n+\tpublic abstract void addValue(double v);\n+\t\n+\t/** \n+\t * Returns the mean of the values that have been added\n+\t * @return mean value\n+\t */\n+\tpublic abstract double getMean();\n \n-    /** running sum of values that have been added */\n-    private double sum = 0.0;\n+\t/** \n+\t * Returns the variance of the values that have been added\n+\t * @return variance value\n+\t */\n+\tpublic abstract double getVariance();\n \n-    /** running sum of squares that have been added */\n-    private double sumsq = 0.0;\n+\t/** \n+\t * Returns the standard deviation of the values that have been added\n+\t * @return standard deviation value\n+\t */\n+\tpublic abstract double getStandardDeviation();\n \n-    /** count of values that have been added */\n-    private double n = 0.0;\n+\t/** Getter for property max.\n+\t * @return Value of property max.\n+\t */\n+\tpublic abstract double getMax();\n \n-    /** min of values that have been added */\n-    private double min = Double.MAX_VALUE;\n+\t/** Getter for property min.\n+\t * @return Value of property min.\n+\t */\n+\tpublic abstract double getMin();\n \n-    /** max of values that have been added */\n-    private double max = Double.MIN_VALUE;\n+\t/** Getter for property n.\n+\t * @return Value of property n.\n+\t */\n+\tpublic abstract double getN();\n \n-    /** display name */\n-    private String name = \"\";\n+\t/** Getter for property sum.\n+\t * @return Value of property sum.\n+\t */\n+\tpublic abstract double getSum();\n \n-    /** Creates new univariate */\n-    public Univariate() {\n-        clear();\n-    }\n+\t/** Getter for property sumsq.\n+\t * @return Value of property sumsq.\n+\t */\n+\tpublic abstract double getSumsq();\n \n-    /** Creates a new univariate with the given name */\n-    public Univariate(java.lang.String name) {\n-        this.name = name;\n-        clear();\n-    }\n-\n-    /**\n-     * Adds the value, updating running sums.<br>\n-     * Converts value to a double before adding.\n-     * @param v the value to be added \n-     */\n-    public void addValue(int v) {\n-        double f = (new Double(v)).doubleValue();\n-        insertValue(f);\n-    }\n-\n-    /**\n-     * Adds the value, updating running sums.<br>\n-     * Converts value to a double before adding.\n-     * @param v the value to be added \n-     */\n-    public void addValue(long v) {\n-        double f = (new Double(v)).doubleValue();\n-        insertValue(f);\n-    }\n-\n-    /**\n-     * Adds the value, updating running sums.<br>\n-     * Converts value to a double before adding.\n-     * @param v the value to be added \n-     */\n-    public void addValue(float v) {\n-        insertValue(v);\n-    }\n-\n-    /**\n-     * Adds the value, updating running sums.\n-     * @param v the value to be added \n-     */\n-    public void addValue(double v) {\n-        insertValue(v);\n-    }\n-\n-    /** \n-     * Returns the mean of the values that have been added\n-     * @return mean value\n-     */\n-    public double getMean() {\n-        // FIXME: throw something meaningful if n = 0\n-        return sum/n;\n-    }\n-\n-    /** \n-     * Returns the variance of the values that have been added\n-     * @return variance value\n-     */\n-    public double getVariance() {\n-        double xbar = getMean();\n-        // FIXME: throw something meaningful if n = 0\n-        return (sumsq - xbar*xbar*n)/(n-1);\n-    }\n-\n-    /** \n-     * Returns the standard deviation of the values that have been added\n-     * @return standard deviation value\n-     */\n-    public double getStandardDeviation() {\n-        // FIXME: throw something meaningful if n = 0\n-        return (new Double(Math.sqrt\n-            ((new Double(getVariance())).doubleValue()))).doubleValue();\n-    }\n-\n-    /**\n-     * Adds the value, updating running sums.\n-     * @param v the value to be added \n-     */\n-    private void insertValue(double v) {\n-        n += 1.0;\n-        if (v < min) min = v;\n-        if (v > max) max = v;\n-        sum += v;\n-        sumsq += v*v;\n-    }\n-\n-    /** Getter for property max.\n-     * @return Value of property max.\n-     */\n-    public double getMax() {\n-        return max;\n-    }\n-\n-    /** Setter for property max.\n-     * @param max New value of property max.\n-     */\n-    public void setMax(double max) {\n-        this.max = max;\n-    }\n-\n-    /** Getter for property min.\n-     * @return Value of property min.\n-     */\n-    public double getMin() {\n-        return min;\n-    }\n-\n-    /** Getter for property n.\n-     * @return Value of property n.\n-     */\n-    public double getN() {\n-        return n;\n-    }\n-\n-    /** Getter for property sum.\n-     * @return Value of property sum.\n-     */\n-    public double getSum() {\n-        return sum;\n-    }\n-\n-    /** Getter for property sumsq.\n-     * @return Value of property sumsq.\n-     */\n-    public double getSumsq() {\n-        return sumsq;\n-    }\n-\n-    /** Getter for property name.\n-     * @return Value of property name.\n-     */\n-    public java.lang.String getName() {\n-        return name;\n-    }\n-\n-    /** Setter for property name.\n-     * @param name New value of property name.\n-     */\n-    public void setName(java.lang.String name) {\n-        this.name = name;\n-    }\n-\n-    /**\n-     * Generates a text report displaying \n-     * univariate statistics from values that\n-     * have been added.\n-     * @return String with line feeds displaying statistics\n-     */\n-    public String toString() {\n-        StringBuffer outBuffer = new StringBuffer();\n-        outBuffer.append(name + \"\\n\");\n-        outBuffer.append(\"n: \" + n + \"\\n\");\n-        outBuffer.append(\"min: \" + min + \"\\n\");\n-        outBuffer.append(\"max: \" + max + \"\\n\");\n-        outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n-        outBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n-        return outBuffer.toString();\n-    }\n-    \n-    /** Resets all sums to 0, resets min and max */\n-    public void clear() {\n-        this.sum = 0.0;\n-        this.sumsq = 0.0;\n-        this.n = 0.0;\n-        this.min = Double.MAX_VALUE;\n-        this.max = Double.MIN_VALUE;\n-    }\n-\n-}\n+\t/** Resets all sums to 0, resets min and max */\n+\tpublic abstract void clear();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/UnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+/**\n+ *\n+ * Accumulates univariate statistics for values fed in \n+ * through the addValue() method.  Does not store raw data values.\n+ * All data (including n) are represented internally as doubles.\n+ * Integers, floats and longs can be added, but will be converted\n+ * to doubles by addValue().  \n+ *\n+ * @author Phil Steitz\n+ * @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:00 $\n+ * \n+*/\n+public class UnivariateImpl implements Univariate {\n+\n+    /** running sum of values that have been added */\n+    private double sum = 0.0;\n+\n+    /** running sum of squares that have been added */\n+    private double sumsq = 0.0;\n+\n+    /** count of values that have been added */\n+    private double n = 0.0;\n+\n+    /** min of values that have been added */\n+    private double min = Double.MAX_VALUE;\n+\n+    /** max of values that have been added */\n+    private double max = Double.MIN_VALUE;\n+\n+    /** Creates new univariate */\n+    public UnivariateImpl() {\n+        clear();\n+    }\n+\n+    /**\n+     * Adds the value, updating running sums.\n+     * @param v the value to be added \n+     */\n+    public void addValue(double v) {\n+\n+        insertValue(v);\n+    }\n+\n+    /** \n+     * Returns the mean of the values that have been added\n+     * @return mean value\n+     */\n+    public double getMean() {\n+        // FIXME: throw something meaningful if n = 0\n+        return sum/n;\n+    }\n+\n+    /** \n+     * Returns the variance of the values that have been added. \n+     * @return The variance of a set of values.  Double.NaN is returned for\n+     * \t           an empty set of values and 0.0 is returned for a single value set.\n+     */\n+    public double getVariance() {\n+    \tdouble variance = Double.NaN;\n+    \t\n+    \tif( n == 1 ) {\n+\t\t\tvariance = 0.0;\n+    \t} else if( n > 1 ) {\n+\t\t\tdouble xbar = getMean();\n+\t\t\tvariance =  (sumsq - xbar*xbar*n)/(n-1);\n+    \t}\n+    \t\n+    \treturn variance;\n+    }\n+\n+    /** \n+     * Returns the standard deviation of the values that have been added\n+     * @return The standard deviation of a set of values.  Double.NaN is returned for\n+     * \t\t       an empty set of values and 0.0 is returned for a single value set.\n+     */\n+    public double getStandardDeviation() {\n+        return (new Double(Math.sqrt\n+            ((new Double(getVariance())).doubleValue()))).doubleValue();\n+    }\n+\n+    /**\n+     * Adds the value, updating running sums.\n+     * @param v the value to be added \n+     */\n+    private void insertValue(double v) {\n+        n += 1.0;\n+        if (v < min) min = v;\n+        if (v > max) max = v;\n+        sum += v;\n+        sumsq += v*v;\n+    }\n+\n+    /** Getter for property max.\n+     * @return Value of property max.\n+     */\n+    public double getMax() {\n+        return max;\n+    }\n+\n+    /** Setter for property max.\n+     * @param max New value of property max.\n+     */\n+    public void setMax(double max) {\n+        this.max = max;\n+    }\n+\n+    /** Getter for property min.\n+     * @return Value of property min.\n+     */\n+    public double getMin() {\n+        return min;\n+    }\n+\n+    /** Getter for property n.\n+     * @return Value of property n.\n+     */\n+    public double getN() {\n+        return n;\n+    }\n+\n+    /** Getter for property sum.\n+     * @return Value of property sum.\n+     */\n+    public double getSum() {\n+        return sum;\n+    }\n+\n+    /** Getter for property sumsq.\n+     * @return Value of property sumsq.\n+     */\n+    public double getSumsq() {\n+        return sumsq;\n+    }\n+\n+    /**\n+     * Generates a text report displaying \n+     * univariate statistics from values that\n+     * have been added.\n+     * @return String with line feeds displaying statistics\n+     */\n+    public String toString() {\n+        StringBuffer outBuffer = new StringBuffer();\n+        outBuffer.append(\"UnivariateImpl:\\n\");\n+        outBuffer.append(\"n: \" + n + \"\\n\");\n+        outBuffer.append(\"min: \" + min + \"\\n\");\n+        outBuffer.append(\"max: \" + max + \"\\n\");\n+        outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+        outBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+        return outBuffer.toString();\n+    }\n+    \n+    /** Resets all sums to 0, resets min and max */\n+    public void clear() {\n+        this.sum = 0.0;\n+        this.sumsq = 0.0;\n+        this.n = 0.0;\n+        this.min = Double.MAX_VALUE;\n+        this.max = Double.MIN_VALUE;\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/math/MathTestSuite.java\n+++ b/src/test/org/apache/commons/math/MathTestSuite.java\n  * Test suite for the Math package.\n  *\n  * @author Phil Steitz\n- * @version $Id: MathTestSuite.java,v 1.1 2003/05/12 19:04:38 rdonkin Exp $\n+ * @version $Id: MathTestSuite.java,v 1.2 2003/05/15 05:39:01 tobrien Exp $\n  */\n public class MathTestSuite extends TestCase {\n     \n         suite.setName(\"Commons Math Tests\");\n         suite.addTest(RealMatrixImplTest.suite());\n         suite.addTest(FreqTest.suite());\n-        suite.addTest(UnivariateTest.suite());\n+        suite.addTest(UnivariateImplTest.suite());\n         return suite;\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/StoreUnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:01 $\n+ */\n+\n+public final class StoreUnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+    \n+    public StoreUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StoreUnivariateImplTest.class);\n+        suite.setName(\"Freq Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+        StoreUnivariate u = new StoreUnivariateImpl(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \t    \t\n+\t\tassertTrue(\"Mean of n = 0 set should be NaN\", Double.isNaN( u.getMean() ) );\n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", Double.isNaN( u.getStandardDeviation() ) );\n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", Double.isNaN(u.getVariance() ) );\n+\n+\t\tu.addValue(one);\n+\n+\t\tassertTrue( \"Mean of n = 1 set should be value of single item n1\", u.getMean() == one);\n+\t\tassertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+\t\tassertTrue( \"Variance of n = 1 set should be zero\", u.getVariance() == 0);\t\n+    }\n+    \n+    public void testSkewAndKurtosis() {\n+    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \t\n+    \tdouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+  \t  \t\t\t\t\t\t\t\t\t\t 9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+  \t  \tfor( int i = 0; i < testArray.length; i++) {\n+  \t  \t\tu.addValue( testArray[i]);\n+  \t  \t}\n+  \t  \t\n+\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/UnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:01 $\n+ */\n+\n+public final class UnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float twoF = 2;\n+    private long twoL = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double tolerance = 10E-15;\n+    \n+    public UnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(UnivariateImplTest.class);\n+        suite.setName(\"Freq Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+        UnivariateImpl u = new UnivariateImpl(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(twoF);\n+        u.addValue(twoL);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tUnivariateImpl u = new UnivariateImpl();\n+    \t    \t\n+\t\tassertTrue(\"Mean of n = 0 set should be NaN\", Double.isNaN( u.getMean() ) );\n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", Double.isNaN( u.getStandardDeviation() ) );\n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", Double.isNaN(u.getVariance() ) );\n+\n+\t\tu.addValue(one);\n+\n+\t\tassertTrue( \"Mean of n = 1 set should be value of single item n1\", u.getMean() == one);\n+\t\tassertTrue( \"Mean of n = 1 set should be zero\", u.getStandardDeviation() == 0);\n+\t\tassertTrue( \"Variance of n = 1 set should be zero\", u.getVariance() == 0);\t\n+    }\n+}\n+", "timestamp": 1052977141, "metainfo": ""}