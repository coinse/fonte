{"sha": "c24c5659fe704e84a3efa4ab9842fb770982280b", "log": "Improved javadoc, added test.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/function/StepFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/StepFunction.java\n     private final double[] ordinate;\n \n     /**\n-     * Builds a step function from a list of abscissae and the corresponding\n-     * ordinates.\n+     * Builds a step function from a list of arguments and the corresponding\n+     * values. Specifically, returns the function h(x) defined by <pre></code>\n+     * h(x) = y[0] for all x < x[1]\n+     *        y[1] for x[1] <= x < x[2]\n+     *        ...\n+     *        y[y.length] for x >= x[x.length]\n+     * </pre></code>\n+     * The value of x[0] is ignored, but it must be strictly less than x[1].\n      *\n-     * @param x Abscissae.\n-     * @param y Ordinates.\n+     * @param x domain values where the function changes value.\n+     * @param y values of the function.\n      * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if the {@code x} array is not sorted in strictly increasing order.\n      * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n      * @throws NoDataException if {@code x} or {@code y} are zero-length.\n+     * @throws DimensionMismatchException if x and y do not have the same length\n      */\n     public StepFunction(double[] x,\n                         double[] y) {\n--- a/src/test/java/org/apache/commons/math/analysis/function/StepFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/function/StepFunctionTest.java\n         Assert.assertEquals(51.2, f.value(30), EPS);\n         Assert.assertEquals(51.2, f.value(Double.POSITIVE_INFINITY), EPS);\n     }\n+    \n+    @Test\n+    public void testEndpointBehavior() {\n+        final double[] x = {0, 1, 2, 3};\n+        final double[] xp = {-8, 1, 2, 3};\n+        final double[] y = {1, 2, 3, 4};\n+        final UnivariateRealFunction f = new StepFunction(x, y);\n+        final UnivariateRealFunction fp = new StepFunction(xp, y);\n+        Assert.assertEquals(f.value(-8), fp.value(-8), EPS);\n+        Assert.assertEquals(f.value(-10), fp.value(-10), EPS);\n+        Assert.assertEquals(f.value(0), fp.value(0), EPS);\n+        Assert.assertEquals(f.value(0.5), fp.value(0.5), EPS);\n+        for (int i = 0; i < x.length; i++) {\n+           Assert.assertEquals(y[i], f.value(x[i]), EPS);\n+           if (i > 0) {\n+               Assert.assertEquals(y[i - 1], f.value(x[i] - 0.5), EPS); \n+           } else {\n+               Assert.assertEquals(y[0], f.value(x[i] - 0.5), EPS); \n+           }\n+        }\n+    }\n \n     @Test\n     public void testHeaviside() {   ", "timestamp": 1317957550, "metainfo": ""}