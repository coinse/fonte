{"sha": "6ef7862f806e14486d3affa130dc65f78710a442", "log": "Fixed formatting, eliminated swallowed exceptions.   ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/multivariate/BivariateRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/multivariate/BivariateRegressionTest.java\n \n import java.util.Random;\n \n-import org.apache.commons.math.MathException;\n-\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n /**\n  * Test cases for the TestStatistic class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/04/11 21:52:28 $\n+ * @version $Revision: 1.2 $ $Date: 2004/04/25 19:38:17 $\n  */\n \n public final class BivariateRegressionTest extends TestCase {\n      * http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Norris.dat\n      * Strangely, order is {y,x}\n      */\n-    private double[][] data = { { 0.1, 0.2 }, {\n-            338.8, 337.4 }, {\n-            118.1, 118.2 }, {\n-            888.0, 884.6 }, {\n-            9.2, 10.1 }, {\n-            228.1, 226.5 }, {\n-            668.5, 666.3 }, {\n-            998.5, 996.3 }, {\n-            449.1, 448.6 }, {\n-            778.9, 777.0 }, {\n-            559.2, 558.2 }, {\n-            0.3, 0.4 }, {\n-            0.1, 0.6 }, {\n-            778.1, 775.5 }, {\n-            668.8, 666.9 }, {\n-            339.3, 338.0 }, {\n-            448.9, 447.5 }, {\n-            10.8, 11.6 }, {\n-            557.7, 556.0 }, {\n-            228.3, 228.1 }, {\n-            998.0, 995.8 }, {\n-            888.8, 887.6 }, {\n-            119.6, 120.2 }, {\n-            0.3, 0.3 }, {\n-            0.6, 0.3 }, {\n-            557.6, 556.8 }, {\n-            339.3, 339.1 }, {\n-            888.0, 887.2 }, {\n-            998.5, 999.0 }, {\n-            778.9, 779.0 }, {\n-            10.2, 11.1 }, {\n-            117.6, 118.3 }, {\n-            228.9, 229.2 }, {\n-            668.4, 669.1 }, {\n-            449.2, 448.9 }, {\n-            0.2, 0.5 }\n+    private double[][] data = { { 0.1, 0.2 }, {338.8, 337.4 }, {118.1, 118.2 }, \n+            {888.0, 884.6 }, {9.2, 10.1 }, {228.1, 226.5 }, {668.5, 666.3 }, {998.5, 996.3 }, \n+            {449.1, 448.6 }, {778.9, 777.0 }, {559.2, 558.2 }, {0.3, 0.4 }, {0.1, 0.6 }, {778.1, 775.5 }, \n+            {668.8, 666.9 }, {339.3, 338.0 }, {448.9, 447.5 }, {10.8, 11.6 }, {557.7, 556.0 }, \n+            {228.3, 228.1 }, {998.0, 995.8 }, {888.8, 887.6 }, {119.6, 120.2 }, {0.3, 0.3 }, \n+            {0.6, 0.3 }, {557.6, 556.8 }, {339.3, 339.1 }, {888.0, 887.2 }, {998.5, 999.0 }, \n+            {778.9, 779.0 }, {10.2, 11.1 }, {117.6, 118.3 }, {228.9, 229.2 }, {668.4, 669.1 }, \n+            {449.2, 448.9 }, {0.2, 0.5 }\n     };\n \n     /* \n      * Correlation example from \n      * http://www.xycoon.com/correlation.htm\n      */\n-    private double[][] corrData = { { 101.0, 99.2 }, {\n-            100.1, 99.0 }, {\n-            100.0, 100.0 }, {\n-            90.6, 111.6 }, {\n-            86.5, 122.2 }, {\n-            89.7, 117.6 }, {\n-            90.6, 121.1 }, {\n-            82.8, 136.0 }, {\n-            70.1, 154.2 }, {\n-            65.4, 153.6 }, {\n-            61.3, 158.5 }, {\n-            62.5, 140.6 }, {\n-            63.6, 136.2 }, {\n-            52.6, 168.0 }, {\n-            59.7, 154.3 }, {\n-            59.5, 149.0 }, {\n-            61.3, 165.5 }\n+    private double[][] corrData = { { 101.0, 99.2 }, {100.1, 99.0 }, {100.0, 100.0 }, \n+            {90.6, 111.6 }, {86.5, 122.2 }, {89.7, 117.6 }, {90.6, 121.1 }, {82.8, 136.0 }, \n+            {70.1, 154.2 }, {65.4, 153.6 }, {61.3, 158.5 }, {62.5, 140.6 }, {63.6, 136.2 }, \n+            {52.6, 168.0 }, {59.7, 154.3 }, {59.5, 149.0 }, {61.3, 165.5 }\n     };\n \n     /*\n      * From Moore and Mcabe, \"Introduction to the Practice of Statistics\"\n      * Example 10.3 \n      */\n-    private double[][] infData = { { 15.6, 5.2 }, {\n-            26.8, 6.1 }, {\n-            37.8, 8.7 }, {\n-            36.4, 8.5 }, {\n-            35.5, 8.8 }, {\n-            18.6, 4.9 }, {\n-            15.3, 4.5 }, {\n-            7.9, 2.5 }, {\n-            0.0, 1.1 }\n+    private double[][] infData = { { 15.6, 5.2 }, {26.8, 6.1 }, {37.8, 8.7 }, {36.4, 8.5 },\n+            {35.5, 8.8 }, {18.6, 4.9 }, {15.3, 4.5 }, {7.9, 2.5 }, {0.0, 1.1 }\n     };\n \n     /*\n      * From http://www.xycoon.com/simple_linear_regression.htm\n      */\n-    private double[][] infData2 = { { 1, 3 }, {\n-            2, 5 }, {\n-            3, 7 }, {\n-            4, 14 }, {\n-            5, 11 }\n-    };\n+    private double[][] infData2 = { { 1, 3 }, {2, 5 }, {3, 7 }, {4, 14 }, {5, 11 }};\n \n     public BivariateRegressionTest(String name) {\n         super(name);\n             regression.addData(data[i][1], data[i][0]);\n         }\n         assertEquals(\"slope\", 1.00211681802045, regression.getSlope(), 10E-12);\n-        assertEquals(\n-            \"slope std err\",\n-            0.429796848199937E-03,\n-            regression.getSlopeStdErr(),\n-            10E-12);\n+        assertEquals(\"slope std err\", 0.429796848199937E-03,\n+                regression.getSlopeStdErr(),10E-12);\n         assertEquals(\"number of observations\", 36, regression.getN());\n-        assertEquals(\n-            \"intercept\",\n-            -0.262323073774029,\n-            regression.getIntercept(),\n-            10E-12);\n-        assertEquals(\n-            \"std err intercept\",\n-            0.232818234301152,\n-            regression.getInterceptStdErr(),\n-            10E-12);\n-        assertEquals(\n-            \"r-square\",\n-            0.999993745883712,\n-            regression.getRSquare(),\n-            10E-12);\n-        assertEquals(\n-            \"SSR\",\n-            4255954.13232369,\n-            regression.getRegressionSumSquares(),\n-            10E-9);\n-        assertEquals(\n-            \"MSE\",\n-            0.782864662630069,\n-            regression.getMeanSquareError(),\n-            10E-10);\n-        assertEquals(\n-            \"SSE\",\n-            26.6173985294224,\n-            regression.getSumSquaredErrors(),\n-            10E-9);\n-        assertEquals(\n-            \"predict(0)\",\n-            -0.262323073774029,\n-            regression.predict(0),\n-            10E-12);\n-        assertEquals(\n-            \"predict(1)\",\n-            1.00211681802045 - 0.262323073774029,\n-            regression.predict(1),\n-            10E-12);\n+        assertEquals( \"intercept\", -0.262323073774029,\n+            regression.getIntercept(),10E-12);\n+        assertEquals(\"std err intercept\", 0.232818234301152,\n+            regression.getInterceptStdErr(),10E-12);\n+        assertEquals(\"r-square\", 0.999993745883712,\n+            regression.getRSquare(), 10E-12);\n+        assertEquals(\"SSR\", 4255954.13232369,\n+            regression.getRegressionSumSquares(), 10E-9);\n+        assertEquals(\"MSE\", 0.782864662630069,\n+            regression.getMeanSquareError(), 10E-10);\n+        assertEquals(\"SSE\", 26.6173985294224,\n+            regression.getSumSquaredErrors(),10E-9);\n+        assertEquals( \"predict(0)\",  -0.262323073774029,\n+            regression.predict(0), 10E-12);\n+        assertEquals(\"predict(1)\", 1.00211681802045 - 0.262323073774029,\n+            regression.predict(1), 10E-12);\n     }\n \n     public void testCorr() {\n     }\n \n     public void testNaNs() {\n-\n-        BivariateRegression regression = new BivariateRegression();\n-\n-        assertTrue(\n-            \"intercept not NaN\",\n-            Double.isNaN(regression.getIntercept()));\n+        BivariateRegression regression = new BivariateRegression();\n+        assertTrue(\"intercept not NaN\", Double.isNaN(regression.getIntercept()));\n         assertTrue(\"slope not NaN\", Double.isNaN(regression.getSlope()));\n-        assertTrue(\n-            \"slope std err not NaN\",\n-            Double.isNaN(regression.getSlopeStdErr()));\n-        assertTrue(\n-            \"intercept std err not NaN\",\n-            Double.isNaN(regression.getInterceptStdErr()));\n-        assertTrue(\n-            \"MSE not NaN\",\n-            Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"slope std err not NaN\", Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err not NaN\", Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"MSE not NaN\", Double.isNaN(regression.getMeanSquareError()));\n         assertTrue(\"e not NaN\", Double.isNaN(regression.getR()));\n         assertTrue(\"r-square not NaN\", Double.isNaN(regression.getRSquare()));\n-        assertTrue(\n-            \"RSS not NaN\",\n-            Double.isNaN(regression.getRegressionSumSquares()));\n-        assertTrue(\n-            \"SSE not NaN\",\n-            Double.isNaN(regression.getSumSquaredErrors()));\n-        assertTrue(\n-            \"SSTO not NaN\",\n-            Double.isNaN(regression.getTotalSumSquares()));\n+        assertTrue( \"RSS not NaN\", Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"SSE not NaN\",Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"SSTO not NaN\", Double.isNaN(regression.getTotalSumSquares()));\n         assertTrue(\"predict not NaN\", Double.isNaN(regression.predict(0)));\n \n         regression.addData(1, 2);\n         regression.addData(1, 3);\n \n         // No x variation, so these should still blow...\n-        assertTrue(\n-            \"intercept not NaN\",\n-            Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"intercept not NaN\", Double.isNaN(regression.getIntercept()));\n         assertTrue(\"slope not NaN\", Double.isNaN(regression.getSlope()));\n-        assertTrue(\n-            \"slope std err not NaN\",\n-            Double.isNaN(regression.getSlopeStdErr()));\n-        assertTrue(\n-            \"intercept std err not NaN\",\n-            Double.isNaN(regression.getInterceptStdErr()));\n-        assertTrue(\n-            \"MSE not NaN\",\n-            Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"slope std err not NaN\", Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err not NaN\", Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"MSE not NaN\", Double.isNaN(regression.getMeanSquareError()));\n         assertTrue(\"e not NaN\", Double.isNaN(regression.getR()));\n         assertTrue(\"r-square not NaN\", Double.isNaN(regression.getRSquare()));\n-        assertTrue(\n-            \"RSS not NaN\",\n-            Double.isNaN(regression.getRegressionSumSquares()));\n-        assertTrue(\n-            \"SSE not NaN\",\n-            Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"RSS not NaN\", Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"SSE not NaN\", Double.isNaN(regression.getSumSquaredErrors()));\n         assertTrue(\"predict not NaN\", Double.isNaN(regression.predict(0)));\n \n         // but SSTO should be OK\n         // All should be OK except MSE, s(b0), s(b1) which need one more df \n         assertTrue(\"interceptNaN\", !Double.isNaN(regression.getIntercept()));\n         assertTrue(\"slope NaN\", !Double.isNaN(regression.getSlope()));\n-        assertTrue(\n-            \"slope std err not NaN\",\n-            Double.isNaN(regression.getSlopeStdErr()));\n-        assertTrue(\n-            \"intercept std err not NaN\",\n-            Double.isNaN(regression.getInterceptStdErr()));\n-        assertTrue(\n-            \"MSE not NaN\",\n-            Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue (\"slope std err not NaN\", Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err not NaN\", Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"MSE not NaN\", Double.isNaN(regression.getMeanSquareError()));\n         assertTrue(\"r NaN\", !Double.isNaN(regression.getR()));\n         assertTrue(\"r-square NaN\", !Double.isNaN(regression.getRSquare()));\n-        assertTrue(\n-            \"RSS NaN\",\n-            !Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"RSS NaN\", !Double.isNaN(regression.getRegressionSumSquares()));\n         assertTrue(\"SSE NaN\", !Double.isNaN(regression.getSumSquaredErrors()));\n         assertTrue(\"SSTO NaN\", !Double.isNaN(regression.getTotalSumSquares()));\n         assertTrue(\"predict NaN\", !Double.isNaN(regression.predict(0)));\n \n         // MSE, MSE, s(b0), s(b1) should all be OK now\n         assertTrue(\"MSE NaN\", !Double.isNaN(regression.getMeanSquareError()));\n-        assertTrue(\n-            \"slope std err NaN\",\n-            !Double.isNaN(regression.getSlopeStdErr()));\n-        assertTrue(\n-            \"intercept std err NaN\",\n-            !Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\"slope std err NaN\", !Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\"intercept std err NaN\", !Double.isNaN(regression.getInterceptStdErr()));\n     }\n \n     public void testClear() {\n         assertEquals(\"number of observations\", 53, regression.getN());\n     }\n \n-    public void testInference() {\n+    public void testInference() throws Exception {\n \n         BivariateRegression regression = new BivariateRegression();\n         regression.addData(infData);\n-\n-        try {\n-            assertEquals(\n-                \"slope confidence interval\",\n-                0.0271,\n-                regression.getSlopeConfidenceInterval(),\n-                0.0001);\n-            assertEquals(\n-                \"slope std err\",\n-                0.01146,\n-                regression.getSlopeStdErr(),\n-                0.0001);\n-\n-            regression = new BivariateRegression();\n-            regression.addData(infData2);\n-            assertEquals(\n-                \"significance\",\n-                0.023331,\n-                regression.getSignificance(),\n-                0.0001);\n-\n-            //FIXME: get a real example to test against with alpha = .01\n-            assertTrue(\n-                \"tighter means wider\",\n-                regression.getSlopeConfidenceInterval()\n-                    < regression.getSlopeConfidenceInterval(0.01));\n-\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-\n+        \n+        assertEquals(\"slope confidence interval\",  0.0271,\n+                regression.getSlopeConfidenceInterval(), 0.0001);\n+        assertEquals(\"slope std err\",0.01146,\n+                regression.getSlopeStdErr(), 0.0001);\n+   \n+        regression = new BivariateRegression();\n+        regression.addData(infData2);\n+        assertEquals(\"significance\",0.023331,\n+                regression.getSignificance(),0.0001);\n+        \n+        //FIXME: get a real example to test against with alpha = .01\n+        assertTrue(\"tighter means wider\",\n+                regression.getSlopeConfidenceInterval() < regression.getSlopeConfidenceInterval(0.01));\n+     \n         try {\n             double x = regression.getSlopeConfidenceInterval(1);\n             fail(\"expecting IllegalArgumentException for alpha = 1\");\n         } catch (IllegalArgumentException ex) {\n             ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-\n-    }\n-\n-    public void testPerfect() {\n+        }  \n+\n+    }\n+\n+    public void testPerfect() throws Exception {\n         BivariateRegression regression = new BivariateRegression();\n         int n = 100;\n         for (int i = 0; i < n; i++) {\n             regression.addData(((double) i) / (n - 1), i);\n         }\n-\n-        try {\n-            assertEquals(0.0, regression.getSignificance(), 1.0e-5);\n-            assertTrue(regression.getSlope() > 0.0);\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    public void testPerfectNegative() {\n+        assertEquals(0.0, regression.getSignificance(), 1.0e-5);\n+        assertTrue(regression.getSlope() > 0.0);\n+    }\n+\n+    public void testPerfectNegative() throws Exception {\n         BivariateRegression regression = new BivariateRegression();\n         int n = 100;\n         for (int i = 0; i < n; i++) {\n             regression.addData(- ((double) i) / (n - 1), i);\n         }\n-        try {\n-            assertEquals(0.0, regression.getSignificance(), 1.0e-5);\n-            assertTrue(regression.getSlope() < 0.0);\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    public void testRandom() {\n+   \n+        assertEquals(0.0, regression.getSignificance(), 1.0e-5);\n+        assertTrue(regression.getSlope() < 0.0);   \n+    }\n+\n+    public void testRandom() throws Exception {\n         BivariateRegression regression = new BivariateRegression();\n         Random random = new Random(1);\n         int n = 100;\n             regression.addData(((double) i) / (n - 1), random.nextDouble());\n         }\n \n-        try {\n-            assertTrue(\n-                0.0 < regression.getSignificance()\n-                    && regression.getSignificance() < 1.0);\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+        assertTrue( 0.0 < regression.getSignificance()\n+                    && regression.getSignificance() < 1.0);       \n     }\n }", "timestamp": 1082921897, "metainfo": ""}