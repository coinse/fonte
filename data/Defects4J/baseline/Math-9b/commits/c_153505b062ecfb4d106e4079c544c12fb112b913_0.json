{"sha": "153505b062ecfb4d106e4079c544c12fb112b913", "log": "MATH-707 Class name change:   \"BaseMultivariateRealOptimizer\" -> \"BaseMultivariateOptimizer\"   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultivariateMultiStartOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateMultiStartOptimizer.java\n  * @since 3.0\n  */\n public class BaseMultivariateMultiStartOptimizer<FUNC extends MultivariateFunction>\n-    implements BaseMultivariateRealOptimizer<FUNC> {\n+    implements BaseMultivariateOptimizer<FUNC> {\n     /** Underlying classical optimizer. */\n-    private final BaseMultivariateRealOptimizer<FUNC> optimizer;\n+    private final BaseMultivariateOptimizer<FUNC> optimizer;\n     /** Maximal number of evaluations allowed. */\n     private int maxEvaluations;\n     /** Number of evaluations already performed for all starts. */\n      * is {@code null}.\n      * @throws NotStrictlyPositiveException if {@code starts < 1}.\n      */\n-    protected BaseMultivariateMultiStartOptimizer(final BaseMultivariateRealOptimizer<FUNC> optimizer,\n+    protected BaseMultivariateMultiStartOptimizer(final BaseMultivariateOptimizer<FUNC> optimizer,\n                                                       final int starts,\n                                                       final RandomVectorGenerator generator) {\n         if (optimizer == null ||\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateOptimizer.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.optimization;\n+\n+import org.apache.commons.math.analysis.MultivariateFunction;\n+\n+/**\n+ * This interface is mainly intended to enforce the internal coherence of\n+ * Commons-FastMath. Users of the API are advised to base their code on\n+ * the following interfaces:\n+ * <ul>\n+ *  <li>{@link org.apache.commons.math.optimization.MultivariateRealOptimizer}</li>\n+ *  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer}</li>\n+ * </ul>\n+ *\n+ * @param <FUNC> Type of the objective function to be optimized.\n+ *\n+ * @version $Id$\n+ * @since 3.0\n+ */\n+public interface BaseMultivariateOptimizer<FUNC extends MultivariateFunction>\n+    extends BaseOptimizer<RealPointValuePair> {\n+    /**\n+     * Optimize an objective function.\n+     *\n+     * @param f Objective function.\n+     * @param goalType Type of optimization goal: either\n+     * {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.\n+     * @param startPoint Start point for optimization.\n+     * @param maxEval Maximum number of function evaluations.\n+     * @return the point/value pair giving the optimal value for objective\n+     * function.\n+     * @throws org.apache.commons.math.exception.DimensionMismatchException\n+     * if the start point dimension is wrong.\n+     * @throws org.apache.commons.math.exception.TooManyEvaluationsException\n+     * if the maximal number of evaluations is exceeded.\n+     * @throws org.apache.commons.math.exception.NullArgumentException if\n+     * any argument is {@code null}.\n+     */\n+    RealPointValuePair optimize(int maxEval, FUNC f, GoalType goalType,\n+                                double[] startPoint);\n+}\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultivariateSimpleBoundsOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateSimpleBoundsOptimizer.java\n  * @since 3.0\n  */\n public interface BaseMultivariateSimpleBoundsOptimizer<FUNC extends MultivariateFunction>\n-    extends BaseMultivariateRealOptimizer<FUNC> {\n+    extends BaseMultivariateOptimizer<FUNC> {\n     /**\n      * Optimize an objective function.\n      *\n--- a/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java\n  * @since 2.0\n  */\n public interface DifferentiableMultivariateRealOptimizer\n-    extends BaseMultivariateRealOptimizer<DifferentiableMultivariateFunction> {}\n+    extends BaseMultivariateOptimizer<DifferentiableMultivariateFunction> {}\n--- a/src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java\n  * @since 2.0\n  */\n public interface MultivariateRealOptimizer\n-    extends BaseMultivariateRealOptimizer<MultivariateFunction> {}\n+    extends BaseMultivariateOptimizer<MultivariateFunction> {}\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer.java\n import org.apache.commons.math.exception.TooManyEvaluationsException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.analysis.MultivariateFunction;\n-import org.apache.commons.math.optimization.BaseMultivariateRealOptimizer;\n+import org.apache.commons.math.optimization.BaseMultivariateOptimizer;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.ConvergenceChecker;\n import org.apache.commons.math.optimization.RealPointValuePair;\n  * @since 2.2\n  */\n public abstract class BaseAbstractMultivariateOptimizer<FUNC extends MultivariateFunction>\n-    implements BaseMultivariateRealOptimizer<FUNC> {\n+    implements BaseMultivariateOptimizer<FUNC> {\n     /** Evaluations counter. */\n     protected final Incrementor evaluations = new Incrementor();\n     /** Convergence checker. */\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java\n package org.apache.commons.math.optimization.direct;\n \n import org.apache.commons.math.analysis.MultivariateFunction;\n-import org.apache.commons.math.optimization.BaseMultivariateRealOptimizer;\n+import org.apache.commons.math.optimization.BaseMultivariateOptimizer;\n import org.apache.commons.math.optimization.BaseMultivariateSimpleBoundsOptimizer;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.RealPointValuePair;\n  */\n public abstract class BaseAbstractMultivariateSimpleBoundsOptimizer<FUNC extends MultivariateFunction>\n     extends BaseAbstractMultivariateOptimizer<FUNC>\n-    implements BaseMultivariateRealOptimizer<FUNC>,\n+    implements BaseMultivariateOptimizer<FUNC>,\n                BaseMultivariateSimpleBoundsOptimizer<FUNC> {\n     /** Lower bounds. */\n     private double[] lowerBound;\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultivariateFunctionMappingAdapter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultivariateFunctionMappingAdapter.java\n  * user is responsible for converting his bounded point to unbounded by calling\n  * {@link #boundedToUnbounded(double[])} before providing them to the optimizer.\n  * For the same reason, the point returned by the {@link\n- * org.apache.commons.math.optimization.BaseMultivariateRealOptimizer#optimize(int,\n+ * org.apache.commons.math.optimization.BaseMultivariateOptimizer#optimize(int,\n  * MultivariateFunction, org.apache.commons.math.optimization.GoalType, double[])}\n  * method is unbounded. So to convert this point to bounded, users must call\n  * {@link #unboundedToBounded(double[])} by themselves!</p>", "timestamp": 1323434137, "metainfo": ""}