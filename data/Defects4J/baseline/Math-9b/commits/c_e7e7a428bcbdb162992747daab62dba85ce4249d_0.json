{"sha": "e7e7a428bcbdb162992747daab62dba85ce4249d", "log": "Added @Retry annotations for tests using secure generators, changed permutation test to use TestUtils Chisquare.  JIRA: MATH-598.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/random/RandomDataTest.java\n+++ b/src/test/java/org/apache/commons/math3/random/RandomDataTest.java\n             // ignored\n         }\n     }\n-    @Test\n+    \n+    @Test\n+    @Retry(3)\n     public void testNextSecureLongNegativeToPositiveRange() throws Exception {\n         for (int i = 0; i < 5; i++) {\n             checkNextSecureLongUniform(-3, 5);\n         }\n     }\n     \n-    @Test \n+    @Test\n+    @Retry(3)\n     public void testNextSecureLongNegativeRange() throws Exception {\n         for (int i = 0; i < 5; i++) {\n             checkNextSecureLongUniform(-7, -4);\n         }\n     }\n     \n-    @Test \n+    @Test\n+    @Retry(3)\n     public void testNextSecureLongPositiveRange() throws Exception {\n         for (int i = 0; i < 5; i++) {\n             checkNextSecureLongUniform(0, 3);\n     }\n     \n     @Test\n+    @Retry(3)\n     public void testNextSecureIntNegativeToPositiveRange() throws Exception {\n         for (int i = 0; i < 5; i++) {\n             checkNextSecureIntUniform(-3, 5);\n         }\n     }\n     \n-    @Test \n+    @Test\n+    @Retry(3)\n     public void testNextSecureIntNegativeRange() throws Exception {\n         for (int i = 0; i < 5; i++) {\n             checkNextSecureIntUniform(-7, -4);\n     }\n     \n     @Test \n+    @Retry(3)\n     public void testNextSecureIntPositiveRange() throws Exception {\n         for (int i = 0; i < 5; i++) {\n             checkNextSecureIntUniform(0, 3);\n \n     /** test dispersion and failure modes for nextHex() */\n     @Test\n+    @Retry(3)\n     public void testNextSecureHex() throws Exception {\n         try {\n             randomData.nextSecureHexString(-1);\n \n     /** tests for nextPermutation */\n     @Test\n-    public void testNextPermutation() {\n+    public void testNextPermutation() throws Exception {\n         int[][] p = { { 0, 1, 2 }, { 0, 2, 1 }, { 1, 0, 2 }, { 1, 2, 0 },\n                 { 2, 0, 1 }, { 2, 1, 0 } };\n         long[] observed = { 0, 0, 0, 0, 0, 0 };\n             int[] perm = randomData.nextPermutation(3, 3);\n             observed[findPerm(p, perm)]++;\n         }\n-\n-        /*\n-         * Use ChiSquare dist with df = 6-1 = 5, alpha = .001 Change to 15.09\n-         * for alpha = .01\n-         */\n-        Assert.assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n-                testStatistic.chiSquare(expected, observed) < 20.52);\n+        \n+        String[] labels = {\"{0, 1, 2}\", \"{ 0, 2, 1 }\", \"{ 1, 0, 2 }\",\n+        \t\t\"{ 1, 2, 0 }\", \"{ 2, 0, 1 }\", \"{ 2, 1, 0 }\"};\n+        TestUtils.assertChiSquareAccept(labels, expected, observed, 0.001);\n \n         // Check size = 1 boundary case\n         int[] perm = randomData.nextPermutation(1, 1);", "timestamp": 1338235182, "metainfo": ""}