{"sha": "e703a2cb78692922f7c08576bfd1ecdcc0b350a5", "log": "Changed return type for FirstOrderIntegrator.integrate() to double in order to retrieve exact stop time. This allows to handle properly integration interruption due to an EventHandler instance asking to stop the integration when its associated event is triggered. The state was already set to the current state at interruption time, but it was difficult to get the corresponding time (it involved setting a step handler monitoring the last step specially).  JIRA: MATH-213   ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java\n   }\n \n   /** {@inheritDoc} */\n-  public abstract void integrate (FirstOrderDifferentialEquations equations,\n-                                  double t0, double[] y0,\n-                                  double t, double[] y)\n+  public abstract double integrate (FirstOrderDifferentialEquations equations,\n+                                    double t0, double[] y0,\n+                                    double t, double[] y)\n     throws DerivativeException, IntegratorException;\n \n   /** {@inheritDoc} */\n--- a/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n    * (can be set to a value smaller than <code>t0</code> for backward integration)\n    * @param y placeholder where to put the state vector at each successful\n    *  step (and hence at the end of integration), can be the same object as y0\n+   * @return stop time, will be the same as target time if integration reached its\n+   * target, but may be different if some {@link EventHandler} stops it at some point.\n    * @throws IntegratorException if the integrator cannot perform integration\n    * @throws DerivativeException this exception is propagated to the caller if\n    * the underlying user function triggers one\n    */\n-  public void integrate (FirstOrderDifferentialEquations equations,\n-                         double t0, double[] y0,\n-                         double t, double[] y)\n+  public double integrate (FirstOrderDifferentialEquations equations,\n+                           double t0, double[] y0,\n+                           double t, double[] y)\n     throws DerivativeException, IntegratorException;\n \n   /** Get the current value of the step start time t<sub>i</sub>.\n--- a/src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n   }\n \n   /** {@inheritDoc} */\n-  public void integrate(final FirstOrderDifferentialEquations equations,\n-                        final double t0, final double[] y0,\n-                        final double t, final double[] y)\n+  public double integrate(final FirstOrderDifferentialEquations equations,\n+                          final double t0, final double[] y0,\n+                          final double t, final double[] y)\n   throws DerivativeException, IntegratorException {\n \n     sanityChecks(equations, t0, y0, t, y);\n \n     } while (! lastStep);\n \n+    final double stopTime = stepStart;\n     resetInternalState();\n+    return stopTime;\n \n   }\n \n--- a/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n   }\n \n   /** {@inheritDoc} */\n-  public void integrate(final FirstOrderDifferentialEquations equations,\n-                        final double t0, final double[] y0, final double t, final double[] y)\n+  public double integrate(final FirstOrderDifferentialEquations equations,\n+                          final double t0, final double[] y0, final double t, final double[] y)\n   throws DerivativeException, IntegratorException {\n \n     sanityChecks(equations, t0, y0, t, y);\n \n     }\n \n+    return stepStart;\n+\n   }\n \n   /** maximal order. */\n--- a/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n   }\n \n   /** {@inheritDoc} */\n-  public void integrate(final FirstOrderDifferentialEquations equations,\n-                        final double t0, final double[] y0,\n-                        final double t, final double[] y)\n+  public double integrate(final FirstOrderDifferentialEquations equations,\n+                          final double t0, final double[] y0,\n+                          final double t, final double[] y)\n   throws DerivativeException, IntegratorException {\n \n     sanityChecks(equations, t0, y0, t, y);\n \n     }\n \n+    final double stopTime = stepStart;\n     resetInternalState();\n+    return stopTime;\n \n   }\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n       for (int i = 4; i < 10; ++i) {\n \n         TestProblemAbstract pb = (TestProblemAbstract) problems[k].clone();\n-        double step = (pb.getFinalTime() - pb.getInitialTime())\n-          * Math.pow(2.0, -i);\n+        double step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);\n \n         FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n         TestProblemHandler handler = new TestProblemHandler(pb, integ);\n                                      Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);\n         }\n         assertEquals(functions.length, integ.getEventsHandlers().size());\n-        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n-                        pb.getFinalTime(), new double[pb.getDimension()]);\n+        double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                                          pb.getFinalTime(), new double[pb.getDimension()]);\n+        if (functions.length == 0) {\n+            assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);\n+        }\n \n         double error = handler.getMaximalValueError();\n         if (i > 4) {\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n                                                                scalAbsoluteTolerance,\n                                                                scalRelativeTolerance);\n     integ.setStepHandler(new VariableHandler());\n-    integ.integrate(pb,\n-                    pb.getInitialTime(), pb.getInitialState(),\n-                    pb.getFinalTime(), new double[pb.getDimension()]);\n+    double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                                      pb.getFinalTime(), new double[pb.getDimension()]);\n+    assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);\n   }\n \n   private static class KeplerHandler implements StepHandler {\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n                                                                scalAbsoluteTolerance,\n                                                                scalRelativeTolerance);\n     integ.setStepHandler(new VariableHandler());\n-    integ.integrate(pb,\n-                    pb.getInitialTime(), pb.getInitialState(),\n-                    pb.getFinalTime(), new double[pb.getDimension()]);\n+    double stopTime = integ.integrate(pb,\n+                                      pb.getInitialTime(), pb.getInitialState(),\n+                                      pb.getFinalTime(), new double[pb.getDimension()]);\n+    assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);\n     assertEquals(\"Dormand-Prince 8 (5, 3)\", integ.getName());\n   }\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n           integ.addEventHandler(functions[l],\n                                      Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);\n         }\n-        integ.integrate(pb,\n-                        pb.getInitialTime(), pb.getInitialState(),\n-                        pb.getFinalTime(), new double[pb.getDimension()]);\n+        double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                                          pb.getFinalTime(), new double[pb.getDimension()]);\n+        if (functions.length == 0) {\n+            assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);\n+        }\n \n         double error = handler.getMaximalValueError();\n         if (i > 4) {\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n           integ.addEventHandler(functions[l],\n                                      Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);\n         }\n-        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n-                        pb.getFinalTime(), new double[pb.getDimension()]);\n+        double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                                          pb.getFinalTime(), new double[pb.getDimension()]);\n+        if (functions.length == 0) {\n+            assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);\n+        }\n \n         double error = handler.getMaximalValueError();\n         if (i > 5) {\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n       new GraggBulirschStoerIntegrator(minStep, maxStep,\n                                        absTolerance, relTolerance);\n     integ.setStepHandler(new VariableStepHandler());\n-    integ.integrate(pb,\n-                    pb.getInitialTime(), pb.getInitialState(),\n-                    pb.getFinalTime(), new double[pb.getDimension()]);\n+    double stopTime = integ.integrate(pb,\n+                                      pb.getInitialTime(), pb.getInitialState(),\n+                                      pb.getFinalTime(), new double[pb.getDimension()]);\n+    assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);\n     assertEquals(\"Gragg-Bulirsch-Stoer\", integ.getName());\n   }\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n           integ.addEventHandler(functions[l],\n                                      Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);\n         }\n-        integ.integrate(pb,\n-                        pb.getInitialTime(), pb.getInitialState(),\n-                        pb.getFinalTime(), new double[pb.getDimension()]);\n+        double stopTime = integ.integrate(pb,\n+                                          pb.getInitialTime(), pb.getInitialState(),\n+                                          pb.getFinalTime(), new double[pb.getDimension()]);\n+        if (functions.length == 0) {\n+            assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);\n+        }\n \n         double error = handler.getMaximalValueError();\n         if (i > 4) {\n--- a/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n           integ.addEventHandler(functions[l],\n                                      Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);\n         }\n-        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n-                        pb.getFinalTime(), new double[pb.getDimension()]);\n+        double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                                          pb.getFinalTime(), new double[pb.getDimension()]);\n+        if (functions.length == 0) {\n+            assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);\n+        }\n \n         double error = handler.getMaximalValueError();\n         if (i > 4) {", "timestamp": 1214314708, "metainfo": ""}