{"sha": "6442d50c8189f2f86fd75f6e5863d9471d9a7e2a", "log": "Refactoring following the promotion of embedded class o.a.c.m.transform.FastFourierTransformer.RootsOfUnity to standalone class o.a.c.m.complex.RootsOfUnity - computeOmega(int n) now computes exp(2 * pi * i * k / n), k = 0, ..., n - 1, instead of exp(-2 * pi * i * k / n) (which was more natural for FFT). - isForward() does not mean anything outside the FFT context. It has been renamed isCounterClockwise(), which refers to the way the roots of unity are ordered. See MATH-677.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/complex/RootsOfUnity.java\n+++ b/src/main/java/org/apache/commons/math/complex/RootsOfUnity.java\n import org.apache.commons.math.util.FastMath;\n \n /**\n- * A helper class for the computation and caching of the {@code n}<sup>th</sup>\n- * roots of unity.\n+ * A helper class for the computation and caching of the {@code n}-th roots of\n+ * unity.\n  *\n  * @version $Id$\n  * @since 3.0\n     /** Real part of the roots. */\n     private double[] omegaReal;\n \n-    /** Imaginary part of the roots for forward transform. */\n-    private double[] omegaImaginaryForward;\n-\n-    /** Imaginary part of the roots for reverse transform. */\n-    private double[] omegaImaginaryInverse;\n-\n-    /** Forward/reverse indicator. */\n-    private boolean isForward;\n-\n-    /**\n-     * Build an engine for computing the {@code n}<sup>th</sup> roots of\n-     * unity.\n+    /**\n+     * Imaginary part of the {@code n}-th roots of unity, for positive values\n+     * of {@code n}. In this array, the roots are stored in counter-clockwise\n+     * order.\n+     */\n+    private double[] omegaImaginaryCounterClockwise;\n+\n+    /**\n+     * Imaginary part of the {@code n}-th roots of unity, for negative values\n+     * of {@code n}. In this array, the roots are stored in clockwise order.\n+     */\n+    private double[] omegaImaginaryClockwise;\n+\n+    /**\n+     * {@code true} if {@link #computeOmega(int)} was called with a positive\n+     * value of its argument {@code n}. In this case, counter-clockwise ordering\n+     * of the roots of unity should be used.\n+     */\n+    private boolean isCounterClockWise;\n+\n+    /**\n+     * Build an engine for computing the {@code n}-th roots of unity.\n      */\n     public RootsOfUnity() {\n \n         omegaCount = 0;\n         omegaReal = null;\n-        omegaImaginaryForward = null;\n-        omegaImaginaryInverse = null;\n-        isForward = true;\n-    }\n-\n-    /**\n-     * Check if computation has been done for forward or reverse transform.\n-     *\n-     * @return {@code true} if computation has been done for forward transform\n+        omegaImaginaryCounterClockwise = null;\n+        omegaImaginaryClockwise = null;\n+        isCounterClockWise = true;\n+    }\n+\n+    /**\n+     * Returns {@code true} if {@link #computeOmega(int)} was called with a\n+     * positive value of its argument {@code n}. If {@code true}, then\n+     * counter-clockwise ordering of the roots of unity should be used.\n+     *\n+     * @return {@code true} if the roots of unity are stored in\n+     * counter-clockwise order\n      * @throws MathIllegalStateException if no roots of unity have been computed\n      * yet\n      */\n-    public synchronized boolean isForward()\n+    public synchronized boolean isCounterClockWise()\n             throws MathIllegalStateException {\n \n         if (omegaCount == 0) {\n             throw new MathIllegalStateException(\n                     LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n         }\n-        return isForward;\n+        return isCounterClockWise;\n     }\n \n     /**\n      * <p>\n-     * Computes the {@code n}<sup>th</sup> roots of unity. The roots are\n-     * stored in {@code omega[]}, such that {@code omega[k] = w ^ k}, where\n-     * {@code k = 0, ..., n - 1}, {@code w = exp(-2 &pi; i / n)} and\n+     * Computes the {@code n}-th roots of unity. The roots are stored in\n+     * {@code omega[]}, such that {@code omega[k] = w ^ k}, where\n+     * {@code k = 0, ..., n - 1}, {@code w = exp(2 * pi * i / n)} and\n      * {@code i = sqrt(-1)}.\n      * </p>\n      * <p>\n-     * Note that {@code n} is positive for forward transform and negative\n-     * for inverse transform.\n+     * Note that {@code n} can be positive of negative\n      * </p>\n-     *\n-     * @param n number of roots of unity to compute, positive for forward\n-     * transform, negative for inverse transform\n+     * <ul>\n+     * <li>{@code abs(n)} is always the number of roots of unity.</li>\n+     * <li>If {@code n > 0}, then the roots are stored in counter-clockwise order.</li>\n+     * <li>If {@code n < 0}, then the roots are stored in clockwise order.</p>\n+     * </ul>\n+     *\n+     * @param n the (signed) number of roots of unity to be computed\n      * @throws ZeroException if {@code n = 0}\n      */\n     public synchronized void computeOmega(int n) throws ZeroException {\n                     LocalizedFormats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY);\n         }\n \n-        isForward = n > 0;\n+        isCounterClockWise = n > 0;\n \n         // avoid repetitive calculations\n         final int absN = FastMath.abs(n);\n             return;\n         }\n \n-        // calculate everything from scratch, for both forward and inverse\n-        // versions\n+        // calculate everything from scratch\n         final double t = 2.0 * FastMath.PI / absN;\n         final double cosT = FastMath.cos(t);\n         final double sinT = FastMath.sin(t);\n         omegaReal = new double[absN];\n-        omegaImaginaryForward = new double[absN];\n-        omegaImaginaryInverse = new double[absN];\n+        omegaImaginaryCounterClockwise = new double[absN];\n+        omegaImaginaryClockwise = new double[absN];\n         omegaReal[0] = 1.0;\n-        omegaImaginaryForward[0] = 0.0;\n-        omegaImaginaryInverse[0] = 0.0;\n+        omegaImaginaryCounterClockwise[0] = 0.0;\n+        omegaImaginaryClockwise[0] = 0.0;\n         for (int i = 1; i < absN; i++) {\n-            omegaReal[i] = omegaReal[i - 1] * cosT +\n-                    omegaImaginaryForward[i - 1] * sinT;\n-            omegaImaginaryForward[i] = omegaImaginaryForward[i - 1] * cosT -\n-                    omegaReal[i - 1] * sinT;\n-            omegaImaginaryInverse[i] = -omegaImaginaryForward[i];\n+            omegaReal[i] = omegaReal[i - 1] * cosT -\n+                    omegaImaginaryCounterClockwise[i - 1] * sinT;\n+            omegaImaginaryCounterClockwise[i] = omegaReal[i - 1] * sinT +\n+                    omegaImaginaryCounterClockwise[i - 1] * cosT;\n+            omegaImaginaryClockwise[i] = -omegaImaginaryCounterClockwise[i];\n         }\n         omegaCount = absN;\n     }\n \n     /**\n-     * Get the real part of the {@code k}<sup>th</sup>\n-     * {@code n}<sup>th</sup> root of unity.\n-     *\n-     * @param k index of the {@code n}<sup>th</sup> root of unity\n-     * @return real part of the {@code k}<sup>th</sup>\n-     * {@code n}<sup>th</sup> root of unity\n+     * Get the real part of the {@code k}-th {@code n}-th root of unity.\n+     *\n+     * @param k index of the {@code n}-th root of unity\n+     * @return real part of the {@code k}-th {@code n}-th root of unity\n      * @throws MathIllegalStateException if no roots of unity have been\n      * computed yet\n      * @throws MathIllegalArgumentException if {@code k} is out of range\n     }\n \n     /**\n-     * Get the imaginary part of the {@code k}<sup>th</sup>\n-     * {@code n}<sup>th</sup> root of unity.\n-     *\n-     * @param k index of the {@code n}<sup>th</sup> root of unity\n-     * @return imaginary part of the {@code k}<sup>th</sup>\n-     * {@code n}<sup>th</sup> root of unity\n+     * Get the imaginary part of the {@code k}-th {@code n}-th root of unity.\n+     *\n+     * @param k index of the {@code n}-th root of unity\n+     * @return imaginary part of the {@code k}-th {@code n}-th root of unity\n      * @throws MathIllegalStateException if no roots of unity have been\n      * computed yet\n      * @throws OutOfRangeException if {@code k} is out of range\n                     Integer.valueOf(omegaCount - 1));\n         }\n \n-        return isForward ? omegaImaginaryForward[k] :\n-            omegaImaginaryInverse[k];\n-    }\n-}\n+        return isCounterClockWise ? omegaImaginaryCounterClockwise[k] :\n+            omegaImaginaryClockwise[k];\n+    }\n+}", "timestamp": 1327993263, "metainfo": ""}