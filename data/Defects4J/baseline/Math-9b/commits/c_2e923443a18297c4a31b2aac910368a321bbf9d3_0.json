{"sha": "2e923443a18297c4a31b2aac910368a321bbf9d3", "log": "MATH-832 Unit test (showing that the report is invalid).   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java\n import org.apache.commons.math3.optimization.GoalType;\n import org.apache.commons.math3.optimization.ConvergenceChecker;\n import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\n+import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n \n         result = optimizer.optimize(50, f, GoalType.MINIMIZE, 4, 3 * Math.PI / 2).getPoint();\n         Assert.assertEquals(3 * Math.PI / 2, result, 1e-6);\n     }\n+\n+    @Test\n+    public void testMath832() {\n+        final UnivariateFunction f = new UnivariateFunction() {\n+                public double value(double x) {\n+                    final double sqrtX = FastMath.sqrt(x);\n+                    final double a = 1e2 * sqrtX;\n+                    final double b = 1e6 / x;\n+                    final double c = 1e4 / sqrtX;\n+\n+                    return a + b + c;\n+                }\n+            };\n+\n+        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-8);\n+        final double result = optimizer.optimize(1483,\n+                                                 f,\n+                                                 GoalType.MINIMIZE,\n+                                                 Double.MIN_VALUE,\n+                                                 Double.MAX_VALUE).getPoint();\n+\n+        Assert.assertEquals(804.9355825, result, 1e-6);\n+    }\n }", "timestamp": 1343305506, "metainfo": ""}