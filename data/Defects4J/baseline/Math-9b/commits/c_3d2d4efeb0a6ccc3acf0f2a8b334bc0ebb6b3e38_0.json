{"sha": "3d2d4efeb0a6ccc3acf0f2a8b334bc0ebb6b3e38", "log": "Javadoc only.  Made it clear that increment-getResult uses a different, less accurate, computing formula than evaluate for Variance. JIRA: MATH-163   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n      * statistic.  Its side effects are the same as invoking {@link #clear} and\n      * then {@link #incrementAll(double[])}.\n      * <p>\n-     * Implementations may override this method with a more efficient \n-     * implementation that works directly with the input array.\n+     * Implementations may override this method with a more efficient and\n+     * possibly more accurate implementation that works directly with the\n+     * input array.\n      * <p>\n      * If the array is null, an IllegalArgumentException is thrown.\n      * \n      * statistic.  Its side effects are the same as invoking {@link #clear} and\n      * then {@link #incrementAll(double[], int, int)}.\n      * <p>\n-     * Implementations may override this method with a more efficient \n-     * implementation that works directly with the input array.\n+     * Implementations may override this method with a more efficient and\n+     * possibly more accurate implementation that works directly with the\n+     * input array.\n      * <p>\n      * If the array is null or the index parameters are not valid, an \n      * IllegalArgumentException is thrown.\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n \n /**\n- * Computes the variance of the available values.   By default, the unbiased\n+ * Computes the variance of the available values.  By default, the unbiased\n  * \"sample variance\" definitional formula is used: \n  * <p>\n  * variance = sum((x_i - mean)^2) / (n - 1)\n  * of sample observations.  \n  * <p>\n  * The definitional formula does not have good numerical properties, so\n- * this implementation uses updating formulas based on West's algorithm\n- * as described in <a href=\"http://doi.acm.org/10.1145/359146.359152\">\n- * Chan, T. F. and J. G. Lewis 1979, <i>Communications of the ACM</i>,\n- * vol. 22 no. 9, pp. 526-531.</a>.\n+ * this implementation does not compute the statistic using the definitional\n+ * formula. <ul>\n+ * <li> The <code>getResult</code> method computes the variance using \n+ * updating formulas based on West's algorithm, as described in\n+ * <a href=\"http://doi.acm.org/10.1145/359146.359152\"> Chan, T. F. and\n+ * J. G. Lewis 1979, <i>Communications of the ACM</i>,\n+ * vol. 22 no. 9, pp. 526-531.</a></li>\n+ * <li> The <code>evaluate</code> methods leverage the fact that they have the\n+ * full array of values in memory to execute a two-pass algorithm. \n+ * Specifically, these methods use the \"corrected two-pass algorithm\" from\n+ * Chan, Golub, Levesque, <i>Algorithms for Computing the Sample Variance</i>,\n+ * American Statistician, August 1983.</li></ul>\n+ * Note that adding values using <code>increment</code> or \n+ * <code>incrementAll</code> and then executing <code>getResult</code> will\n+ * sometimes give a different, less accurate, result than executing \n+ * <code>evaluate</code> with the full array of values. The former approach\n+ * should only be used when the full array of values is not available.\n  * <p>\n  * The \"population variance\"  ( sum((x_i - mean)^2) / n ) can also\n  * be computed using this statistic.  The <code>isBiasCorrected</code>\n  * property determines whether the \"population\" or \"sample\" value is\n  * returned by the <code>evaluate</code> and <code>getResult</code> methods.\n  * To compute population variances, set this property to <code>false.</code>\n- *\n+ * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If \n  * multiple threads access an instance of this class concurrently, and at least\n  * one of the threads invokes the <code>increment()</code> or \n- * <code>clear()</code> method, it must be synchronized externally.\n+ * <code>clear()</code> method, it must be synchronized externally.</p>\n  * \n  * @version $Revision$ $Date$\n  */\n     }\n    \n     /**\n-     * @see org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic#increment(double)\n+     * {@inheritDoc}  \n+     * <p>If all values are available, it is more accurate to use \n+     * {@link #evaluate(double[])} rather than adding values one at a time\n+     * using this method and then executing {@link #getResult}, since\n+     * <code>evaluate</code> leverages the fact that is has the full \n+     * list of values together to execute a two-pass algorithm.  \n+     * See {@link Variance}.</p>\n      */\n     public void increment(final double d) {\n         if (incMoment) {", "timestamp": 1181536976, "metainfo": ""}