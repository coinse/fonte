{"sha": "bfaa68f8360698e08918f7db82f904ca18212b2a", "log": "various javadoc fixes  ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java\n      * @throws FunctionEvaluationException if an error occurs evaluating the\n      * function \n      * @throws IllegalArgumentException if any parameters are invalid\n-     * @deprecated replaced by {@link #solve2(UnivariateRealFunction, double, double)\n+     * @deprecated replaced by {@link #solve2(UnivariateRealFunction, double, double)}\n      * since 2.0\n      */\n     @Deprecated\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java\n      * function\n      * @throws IllegalArgumentException if min > max or the endpoints do not\n      * satisfy the requirements specified by the solver\n-     * @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double)\n+     * @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double)}\n      * since 2.0\n      */\n     @Deprecated\n      * function\n      * @throws IllegalArgumentException if min > max or the arguments do not\n      * satisfy the requirements specified by the solver\n-     * @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double, double)\n+     * @deprecated replaced by {@link #solve(UnivariateRealFunction, double, double, double)}\n      * since 2.0\n      */\n     @Deprecated\n--- a/src/java/org/apache/commons/math/linear/EigenDecomposition.java\n+++ b/src/java/org/apache/commons/math/linear/EigenDecomposition.java\n      * <p>Real eigenvalues are on the diagonal while complex values are on\n      * 2x2 blocks { {real +imaginary}, {-imaginary, real} }.</p>\n      * @return the D matrix\n-     * @see #getEigenValues()\n+     * @see #getRealEigenvalues()\n+     * @see #getImagEigenvalues()\n      */\n     RealMatrix getD();\n \n--- a/src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n  * the upper part of the matrix, the part below the diagonal is not accessed at all.</p>\n  * <p>Eigenvalues are computed as soon as the matrix is decomposed, but eigenvectors\n  * are computed only when required, i.e. only when one of the {@link #getEigenvector(int)},\n- * {@link #getV()}, {@link #getVT()}, {@link #getInverse()}, {@link #solve(double[])},\n- * {@link #solve(RealMatrix)}, {@link #solve(RealVector)} or {@link #solve(RealVectorImpl)}\n- * methods is called.</p>\n+ * {@link #getV()}, {@link #getVT()}, {@link #getSolver()} methods is called.</p>\n  * <p>This implementation is based on Inderjit Singh Dhillon thesis\n  * <a href=\"http://www.cs.utexas.edu/users/inderjit/public_papers/thesis.pdf\">A\n  * New O(n<sup>2</sup>) Algorithm for the Symmetric Tridiagonal Eigenvalue/Eigenvector\n \n     /**\n      * Calculates the eigen decomposition of the given symmetric matrix. \n-     * <p>Calling this constructor is equivalent to first call the no-arguments\n-     * constructor and then call {@link #decompose(RealMatrix)}.</p>\n      * @param matrix The <strong>symmetric</strong> matrix to decompose.\n      * @param splitTolerance tolerance on the off-diagonal elements relative to the\n      * geometric mean to split the tridiagonal matrix (a suggested value is\n \n     /**\n      * Calculates the eigen decomposition of the given tridiagonal symmetric matrix. \n-     * <p>Calling this constructor is equivalent to first call the no-arguments\n-     * constructor and then call {@link #decompose(double[], double[])}.</p>\n      * @param main the main diagonal of the matrix (will be copied)\n      * @param secondary the secondary diagonal of the matrix (will be copied)\n      * @param splitTolerance tolerance on the off-diagonal elements relative to the\n     /**\n      * Return the determinant of the matrix\n      * @return determinant of the matrix\n-     * @see #isNonSingular()\n      */\n     public double getDeterminant() {\n         double determinant = 1;\n--- a/src/java/org/apache/commons/math/linear/LUDecomposition.java\n+++ b/src/java/org/apache/commons/math/linear/LUDecomposition.java\n     /**\n      * Returns the pivot permutation vector.\n      * @return the pivot permutation vector\n-     * @see #getPermutation()\n+     * @see #getP()\n      */\n     int[] getPivot();\n \n--- a/src/java/org/apache/commons/math/linear/QRDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/QRDecompositionImpl.java\n \n     /**\n      * Calculates the QR-decomposition of the given matrix. \n-     * <p>Calling this constructor is equivalent to first call the no-arguments\n-     * constructor and then call {@link #decompose(RealMatrix)}.</p>\n      * @param matrix The matrix to decompose.\n      */\n     public QRDecompositionImpl(RealMatrix matrix) {\n--- a/src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n \n     /**\n      * Calculates the Singular Value Decomposition of the given matrix. \n-     * <p>Calling this constructor is equivalent to first call the no-arguments\n-     * constructor and then call {@link #decompose(RealMatrix)}.</p>\n      * @param matrix The matrix to decompose.\n      * @exception InvalidMatrixException (wrapping a {@link ConvergenceException}\n      * if algorithm fails to converge\n--- a/src/java/org/apache/commons/math/ode/ODEIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/ODEIntegrator.java\n      * differential equations} problem) if the value of the current step that\n      * is attempted is needed.</p>\n      * <p>The result is undefined if the method is called outside of\n-     * calls to {@link #integrate}</p>\n+     * calls to <code>integrate</code>.</p>\n      * @return current value of the step start time t<sub>i</sub>\n      */\n     double getCurrentStepStart();\n      * differential equations} problem) if the signed value of the current stepsize\n      * that is tried is needed.</p>\n      * <p>The result is undefined if the method is called outside of\n-     * calls to {@link #integrate}</p>\n+     * calls to <code>integrate</code>.</p>\n      * @return current signed value of the stepsize\n      */\n     double getCurrentSignedStepsize();\n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n  * provided by the {@link AdamsMoultonIntegrator AdamsMoultonIntegrator} class.</p>\n  *\n  * @see AdamsMoultonIntegrator\n- * @see BDFIntegrator\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n  * provided by the {@link AdamsBashforthIntegrator AdamsBashforthIntegrator} class.</p>\n  *\n  * @see AdamsBashforthIntegrator\n- * @see BDFIntegrator\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n--- a/src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/MultistepIntegrator.java\n  *\n  * @see AdamsBashforthIntegrator\n  * @see AdamsMoultonIntegrator\n- * @see BDFIntegrator\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n     private QRDecomposition qr = null;\n \n     /**\n-     * {@inheritDoc}\n+     * Loads model x and y sample data, overriding any previous sample.\n      * \n      * Computes and caches QR decomposition of the X matrix.\n+     * @param y the [n,1] array representing the y sample\n+     * @param x the [n,k] array representing the x sample\n+     * @throws IllegalArgumentException if the x and y array data are not\n+     *             compatible for the regression\n      */\n     public void newSampleData(double[] y, double[][] x) {\n         validateSampleData(x, y);", "timestamp": 1232739272, "metainfo": ""}