{"sha": "7ad214374c3e6008f47fead7ba907a63cc12819d", "log": "added test cases to increase test coverage.  ", "commit": "\n--- a/src/test/org/apache/commons/math/fraction/FractionFormatTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionFormatTest.java\n \n package org.apache.commons.math.fraction;\n \n+import java.text.NumberFormat;\n import java.text.ParseException;\n import java.util.Locale;\n \n         }\n     }\n     \n+    public void testParseInteger() {\n+\t\tString source = \"10\";\n+    \ttry {\n+            Fraction c = properFormat.parse(source);\n+            assertNotNull(c);\n+            assertEquals(10, c.getNumerator());\n+            assertEquals(1, c.getDenominator());\n+        } catch (ParseException ex) {\n+            fail(ex.getMessage());\n+        }\n+    \ttry {\n+            Fraction c = improperFormat.parse(source);\n+            assertNotNull(c);\n+            assertEquals(10, c.getNumerator());\n+            assertEquals(1, c.getDenominator());\n+        } catch (ParseException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }\n+    \n+    public void testParseInvalid() {\n+\t\tString source = \"a\";\n+        String msg = \"should not be able to parse '10 / a'.\";\n+    \ttry {\n+            properFormat.parse(source);\n+\t\t\tfail(msg);\n+        } catch (ParseException ex) {\n+        \t// success\n+        }\n+    \ttry {\n+            improperFormat.parse(source);\n+\t\t\tfail(msg);\n+        } catch (ParseException ex) {\n+        \t// success\n+        }\n+    }\n+    \n+    public void testParseInvalidDenominator() {\n+\t\tString source = \"10 / a\";\n+        String msg = \"should not be able to parse '10 / a'.\";\n+    \ttry {\n+            properFormat.parse(source);\n+\t\t\tfail(msg);\n+        } catch (ParseException ex) {\n+        \t// success\n+        }\n+    \ttry {\n+            improperFormat.parse(source);\n+\t\t\tfail(msg);\n+        } catch (ParseException ex) {\n+        \t// success\n+        }\n+    }\n+    \n     public void testParseNegative() {\n \n         try {\n             // success\n         }\n     }\n+    \n+    public void testNumeratorFormat() {\n+    \tNumberFormat old = properFormat.getNumeratorFormat();\n+    \tNumberFormat nf = NumberFormat.getIntegerInstance();\n+    \tproperFormat.setNumeratorFormat(nf);\n+    \tassertEquals(nf, properFormat.getNumeratorFormat());\n+    \tproperFormat.setNumeratorFormat(old);\n+\n+    \told = improperFormat.getNumeratorFormat();\n+    \tnf = NumberFormat.getIntegerInstance();\n+    \timproperFormat.setNumeratorFormat(nf);\n+    \tassertEquals(nf, improperFormat.getNumeratorFormat());\n+    \timproperFormat.setNumeratorFormat(old);\n+    }\n+    \n+    public void testDenominatorFormat() {\n+    \tNumberFormat old = properFormat.getDenominatorFormat();\n+    \tNumberFormat nf = NumberFormat.getIntegerInstance();\n+    \tproperFormat.setDenominatorFormat(nf);\n+    \tassertEquals(nf, properFormat.getDenominatorFormat());\n+    \tproperFormat.setDenominatorFormat(old);\n+\n+    \told = improperFormat.getDenominatorFormat();\n+    \tnf = NumberFormat.getIntegerInstance();\n+    \timproperFormat.setDenominatorFormat(nf);\n+    \tassertEquals(nf, improperFormat.getDenominatorFormat());\n+    \timproperFormat.setDenominatorFormat(old);\n+    }\n+    \n+    public void testWholeFormat() {\n+    \tProperFractionFormat format = (ProperFractionFormat)properFormat;\n+    \t\n+    \tNumberFormat old = format.getWholeFormat();\n+    \tNumberFormat nf = NumberFormat.getIntegerInstance();\n+    \tformat.setWholeFormat(nf);\n+    \tassertEquals(nf, format.getWholeFormat());\n+    \tformat.setWholeFormat(old);\n+    }\n }", "timestamp": 1125113500, "metainfo": ""}