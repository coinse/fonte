{"sha": "3dd44176dcf2d2d5a5d4d4acbf325612744c62d7", "log": "Serialization changes for stats  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n             return ((Comparable<Object>)o1).compareTo(o2);\n         }\n     }\n+\n+    /* (non-Javadoc)\n+     * @see java.lang.Object#hashCode()\n+     */\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result\n+                + ((freqTable == null) ? 0 : freqTable.hashCode());\n+        return result;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see java.lang.Object#equals(java.lang.Object)\n+     */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (!(obj instanceof Frequency))\n+            return false;\n+        Frequency other = (Frequency) obj;\n+        if (freqTable == null) {\n+            if (other.freqTable != null)\n+                return false;\n+        } else if (!freqTable.equals(other.freqTable))\n+            return false;\n+        return true;\n+    }\n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n  */\n public abstract class AbstractStorelessUnivariateStatistic\n     extends AbstractUnivariateStatistic\n-    implements StorelessUnivariateStatistic, Serializable {\n-\n-    /** Serialization UID */\n-    private static final long serialVersionUID = -44915725420072521L;\n+    implements StorelessUnivariateStatistic {\n     \n     /**\n      * This default implementation calls {@link #clear}, then invokes \n--- a/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n  */\n package org.apache.commons.math.stat.descriptive;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.MathRuntimeException;\n \n /**\n  * @version $Revision$ $Date$\n  */\n public abstract class AbstractUnivariateStatistic\n-    implements UnivariateStatistic, Serializable {\n-    \n-    /** Serialization UID */\n-    private static final long serialVersionUID = -8007759382851708045L;\n+    implements UnivariateStatistic {\n \n     /**\n      * {@inheritDoc}\n--- a/src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java\n public class AggregateSummaryStatistics implements StatisticalSummary,\n         Serializable {\n \n-    /**\n-     * The serialization version of this class\n-     */\n-    private static final long serialVersionUID = 1L;\n+ \n+    /** Serializable version identifier */\n+   private static final long serialVersionUID = -8207112444016386906L;\n \n     /**\n      * A SummaryStatistics serving as a prototype for creating SummaryStatistics\n--- a/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java\n  */\n package org.apache.commons.math.stat.descriptive;\n \n-import java.io.Serializable;\n \n /**\n  * Base interface implemented by all statistics.\n  * \n  * @version $Revision$ $Date$\n  */\n-public interface UnivariateStatistic extends Serializable {\n+public interface UnivariateStatistic {\n \n     /**\n      * Returns the result of evaluating the statistic over the input array.\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n     implements Serializable {\n \n     /** Serializable version identifier */\n-    private static final long serialVersionUID = -803343206421984070L; \n+    private static final long serialVersionUID = 6112755307178490473L;\n+\n     \n     /** Count of values that have been added */\n     protected long n;\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.stat.descriptive.moment;\n+\n+import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class GeometricMean extends AbstractStorelessUnivariateStatistic {\n+public class GeometricMean extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -8178734905303459453L;  \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.stat.descriptive.moment;\n+\n+import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n  * \n  * @version $Revision$ $Date$\n  */\n-public class Kurtosis extends AbstractStorelessUnivariateStatistic  {\n+public class Kurtosis extends AbstractStorelessUnivariateStatistic  implements Serializable {\n \n     /** Serializable version identifier */\n     private static final long serialVersionUID = 2784465764798260919L;  \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n         Arrays.fill(productsSums, 0.0);\n     }\n \n+    /** @inheritDoc{} */\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + (isBiasCorrected ? 1231 : 1237);\n+        result = prime * result + (int) (n ^ (n >>> 32));\n+        result = prime * result + Arrays.hashCode(productsSums);\n+        result = prime * result + Arrays.hashCode(sums);\n+        return result;\n+    }\n+\n+    /** @inheritDoc{} */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (!(obj instanceof VectorialCovariance))\n+            return false;\n+        VectorialCovariance other = (VectorialCovariance) obj;\n+        if (isBiasCorrected != other.isBiasCorrected)\n+            return false;\n+        if (n != other.n)\n+            return false;\n+        if (!Arrays.equals(productsSums, other.productsSums))\n+            return false;\n+        if (!Arrays.equals(sums, other.sums))\n+            return false;\n+        return true;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java\n package org.apache.commons.math.stat.descriptive.moment;\n \n import java.io.Serializable;\n+import java.util.Arrays;\n \n import org.apache.commons.math.DimensionMismatchException;\n \n         return (means.length == 0) ? 0 : means[0].getN();\n     }\n \n+    /* @inheritDocs{} */\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + Arrays.hashCode(means);\n+        return result;\n+    }\n+\n+    /* @inheritDocs{} */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (!(obj instanceof VectorialMean))\n+            return false;\n+        VectorialMean other = (VectorialMean) obj;\n+        if (!Arrays.equals(means, other.means))\n+            return false;\n+        return true;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.stat.descriptive.rank;\n+\n+import java.io.Serializable;\n \n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n \n  * \n  * @version $Revision$ $Date$\n  */\n-public class Max extends AbstractStorelessUnivariateStatistic {\n+public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -5593383832225844641L;    \n--- a/src/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/java/org/apache/commons/math/transform/FastCosineTransformer.java\n  * Different from FFT and FST, FCT requires the length of data set to be\n  * power of 2 plus one. Users should especially pay attention to the\n  * function transformation on how this affects the sampling.</p>\n+ * <p>As of version 2.0 this no longer implements Serializable</p>\n  *\n  * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n  * @since 1.2\n  */\n public class FastCosineTransformer implements RealTransformer {\n-\n-    /** serializable version identifier */\n-    private static final long serialVersionUID = -831323620109865380L;\n \n     /**\n      * Construct a default transformer.\n--- a/src/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n+++ b/src/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n  * @since 2.0\n  */\n public class FastHadamardTransformer implements RealTransformer {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -720498949613305350L;\n \n     /** {@inheritDoc} */\n     public double[] transform(double f[])\n--- a/src/java/org/apache/commons/math/transform/FastSineTransformer.java\n+++ b/src/java/org/apache/commons/math/transform/FastSineTransformer.java\n  * Similar to FFT, we also require the length of data set to be power of 2.\n  * In addition, the first element must be 0 and it's enforced in function\n  * transformation after sampling.</p>\n- *\n+ * <p>As of version 2.0 this no longer implements Serializable</p>\n+ * \n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n public class FastSineTransformer implements RealTransformer {\n-\n-    /** serializable version identifier */\n-    private static final long serialVersionUID = -7557024407476823001L;\n \n     /**\n      * Construct a default transformer.\n--- a/src/java/org/apache/commons/math/transform/RealTransformer.java\n+++ b/src/java/org/apache/commons/math/transform/RealTransformer.java\n  */\n package org.apache.commons.math.transform;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.complex.Complex;\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface RealTransformer extends Serializable {\n+public interface RealTransformer  {\n \n     /**\n      * Transform the given real data set.\n--- a/src/test/org/apache/commons/math/stat/FrequencyTest.java\n+++ b/src/test/org/apache/commons/math/stat/FrequencyTest.java\n             assertTrue(it.next() instanceof Long);\n         }     \n     }\n+    \n+    public void testSerial() {\n+        f.addValue(oneL);\n+        f.addValue(twoL);\n+        f.addValue(oneI);\n+        f.addValue(twoI);\n+        assertEquals(f, TestUtils.serializeAndRecover(f));\n+    }\n }\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n      * A new way to compute the mean \n      */\n     static class deepMean implements UnivariateStatistic {\n-        private static final long serialVersionUID = 9108665370122541953L;\n \n         public double evaluate(double[] values, int begin, int length) {\n             return 42;\n      * Test percentile implementation - wraps a Percentile\n      */\n     static class goodPercentile implements UnivariateStatistic {\n-        private static final long serialVersionUID = 801005145532790795L;\n         private Percentile percentile = new Percentile();\n         public void setQuantile(double quantile) {\n             percentile.setQuantile(quantile);\n      * \"Bad\" test percentile implementation - no setQuantile\n      */\n     static class badPercentile implements UnivariateStatistic {\n-        private static final long serialVersionUID = -707437653388052183L;\n         private Percentile percentile = new Percentile();\n         public double evaluate(double[] values, int begin, int length) {\n             return percentile.evaluate(values, begin, length);\n--- a/src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java\n      * Returns the sum instead of the mean.\n      */\n     static class sumMean implements StorelessUnivariateStatistic {   \n-        private static final long serialVersionUID = 6492471391340853423L;\n         private double sum = 0;\n         private long n = 0;\n         public double evaluate(double[] values, int begin, int length) {\n--- a/src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n         assertTrue(master.equals(replica));\n     }\n     \n+    public void testSerial() {\n+        StorelessUnivariateStatistic s =\n+            (StorelessUnivariateStatistic) getUnivariateStatistic();\n+        assertEquals(s, TestUtils.serializeAndRecover(s));\n+    }\n }\n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java\n package org.apache.commons.math.stat.descriptive.moment;\n \n import org.apache.commons.math.DimensionMismatchException;\n+import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.linear.RealMatrix;\n \n import junit.framework.Test;\n \n     }\n \n+    public void testSerial(){\n+        VectorialCovariance stat = new VectorialCovariance(points[0].length, true);\n+        assertEquals(stat, TestUtils.serializeAndRecover(stat));\n+    }\n+    \n     @Override\n     public void setUp() {\n         points = new double[][] {\n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java\n package org.apache.commons.math.stat.descriptive.moment;\n \n import org.apache.commons.math.DimensionMismatchException;\n+import org.apache.commons.math.TestUtils;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n \n     }\n \n+    public void testSerial() throws DimensionMismatchException {\n+        VectorialMean stat = new VectorialMean(points[0].length);\n+        for (int i = 0; i < points.length; ++i) {\n+            stat.increment(points[i]);\n+        }\n+        assertEquals(stat, TestUtils.serializeAndRecover(stat));\n+    }\n     @Override\n     public void setUp() {\n         points = new double[][] {", "timestamp": 1243817222, "metainfo": ""}