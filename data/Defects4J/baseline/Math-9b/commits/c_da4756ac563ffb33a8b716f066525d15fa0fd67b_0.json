{"sha": "da4756ac563ffb33a8b716f066525d15fa0fd67b", "log": "fixed handling of the time-derivatives of jacobians simplified copy and serialization  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java\n+++ b/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java\n         /** State array. */\n         private double[] y;\n \n-        /** State derivative array. */\n-        private double[] yDot;\n-\n         /** Jacobian with respect to initial state dy/dy0. */\n         private double[][] dydy0;\n \n         /** Jacobian with respect to parameters dy/dp. */\n         private double[][] dydp;\n+\n+        /** Time derivative of the state array. */\n+        private double[] yDot;\n+\n+        /** Time derivative of the sacobian with respect to initial state dy/dy0. */\n+        private double[][] dydy0Dot;\n+\n+        /** Time derivative of the jacobian with respect to parameters dy/dp. */\n+        private double[][] dydpDot;\n \n         /** Simple constructor.\n          * @param interpolator wrapped interpolator\n         public StepInterpolatorWrapper(final StepInterpolator interpolator,\n                                        final int n, final int k) {\n             this.interpolator = interpolator;\n-            y     = new double[n];\n-            yDot  = new double[n];\n-            dydy0 = new double[n][n];\n-            dydp  = new double[n][k];\n+            y        = new double[n];\n+            dydy0    = new double[n][n];\n+            dydp     = new double[n][k];\n+            yDot     = new double[n];\n+            dydy0Dot = new double[n][n];\n+            dydpDot  = new double[n][k];\n         }\n \n         /** {@inheritDoc} */\n             final int n = y.length;\n             int start = n;\n             for (int i = 0; i < n; ++i) {\n-                System.arraycopy(extendedDerivatives, start, dydy0[i], 0, n);\n+                System.arraycopy(extendedDerivatives, start, dydy0Dot[i], 0, n);\n                 start += n;\n             }\n-            return dydy0;\n+            return dydy0Dot;\n         }\n \n         /** {@inheritDoc} */\n         public double[][] getInterpolatedDyDpDot() throws DerivativeException {\n             double[] extendedDerivatives = interpolator.getInterpolatedDerivatives();\n             final int n = y.length;\n-            final int k = dydp[0].length;\n+            final int k = dydpDot[0].length;\n             int start = n * (n + 1);\n             for (int i = 0; i < n; ++i) {\n-                System.arraycopy(extendedDerivatives, start, dydp[i], 0, k);\n+                System.arraycopy(extendedDerivatives, start, dydpDot[i], 0, k);\n                 start += k;\n             }\n-            return dydp;\n+            return dydpDot;\n         }\n \n         /** {@inheritDoc} */\n             final int k = dydp[0].length;\n             StepInterpolatorWrapper copied =\n                 new StepInterpolatorWrapper(interpolator.copy(), n, k);\n-            System.arraycopy(y,    0, copied.y,    0, n);\n-            System.arraycopy(yDot, 0, copied.yDot, 0, n);\n-            for (int i = 0; i < n; ++i) {\n-                System.arraycopy(dydy0[i], 0, copied.dydy0[i], 0, n);\n-            }\n-            for (int i = 0; i < n; ++i) {\n-                System.arraycopy(dydp[i], 0, copied.dydp[i], 0, k);\n-            }\n+            copyArray(y,        copied.y);\n+            copyArray(dydy0,    copied.dydy0);\n+            copyArray(dydp,     copied.dydp);\n+            copyArray(yDot,     copied.yDot);\n+            copyArray(dydy0Dot, copied.dydy0Dot);\n+            copyArray(dydpDot,  copied.dydpDot);\n             return copied;\n         }\n \n         /** {@inheritDoc} */\n         public void writeExternal(ObjectOutput out) throws IOException {\n             out.writeObject(interpolator);\n-            final int n = y.length;\n-            final int k = dydp[0].length;\n-            out.writeInt(n);\n-            out.writeInt(k);\n-            for (int i = 0; i < n; ++i) {\n-                out.writeDouble(y[i]);\n-            }\n-            for (int i = 0; i < n; ++i) {\n-                out.writeDouble(yDot[i]);\n-            }\n-            for (int i = 0; i < n; ++i) {\n-                for (int j = 0; j < n; ++j) {\n-                    out.writeDouble(dydy0[i][j]);\n-                }\n-            }\n-            for (int i = 0; i < n; ++i) {\n-                for (int j = 0; j < k; ++j) {\n-                    out.writeDouble(dydp[i][j]);\n-                }\n-            }\n+            out.writeInt(y.length);\n+            out.writeInt(dydp[0].length);\n+            writeArray(out, y);\n+            writeArray(out, dydy0);\n+            writeArray(out, dydp);\n+            writeArray(out, yDot);\n+            writeArray(out, dydy0Dot);\n+            writeArray(out, dydpDot);\n         }\n \n         /** {@inheritDoc} */\n             interpolator = (StepInterpolator) in.readObject();\n             final int n = in.readInt();\n             final int k = in.readInt();\n-            y = new double[n];\n-            dydy0 = new double[n][n];\n-            dydp = new double[n][k];\n-            for (int i = 0; i < n; ++i) {\n-                y[i] = in.readDouble();\n-            }\n-            for (int i = 0; i < n; ++i) {\n-                yDot[i] = in.readDouble();\n-            }\n-            for (int i = 0; i < n; ++i) {\n-                for (int j = 0; j < n; ++j) {\n-                    dydy0[i][j] = in.readDouble();\n-                }\n-            }\n-            for (int i = 0; i < n; ++i) {\n-                for (int j = 0; j < k; ++j) {\n-                    dydp[i][j] = in.readDouble();\n-                }\n+            y        = new double[n];\n+            dydy0    = new double[n][n];\n+            dydp     = new double[n][k];\n+            yDot     = new double[n];\n+            dydy0Dot = new double[n][n];\n+            dydpDot  = new double[n][k];\n+            readArray(in, y);\n+            readArray(in, dydy0);\n+            readArray(in, dydp);\n+            readArray(in, yDot);\n+            readArray(in, dydy0Dot);\n+            readArray(in, dydpDot);\n+        }\n+\n+        /** Copy an array.\n+         * @param src source array\n+         * @param dest destination array\n+         */\n+        private static void copyArray(final double[] src, final double[] dest) {\n+            System.arraycopy(src, 0, dest, 0, src.length);\n+        }\n+\n+        /** Copy an array.\n+         * @param src source array\n+         * @param dest destination array\n+         */\n+        private static void copyArray(final double[][] src, final double[][] dest) {\n+            for (int i = 0; i < src.length; ++i) {\n+                copyArray(src[i], dest[i]);\n+            }\n+        }\n+\n+        /** Write an array.\n+         * @param out output stream\n+         * @param array array to write\n+         * @exception IOException if array cannot be read\n+         */\n+        private static void writeArray(final ObjectOutput out, final double[] array)\n+            throws IOException {\n+            for (int i = 0; i < array.length; ++i) {\n+                out.writeDouble(array[i]);\n+            }\n+        }\n+\n+        /** Write an array.\n+         * @param out output stream\n+         * @param array array to write\n+         * @exception IOException if array cannot be read\n+         */\n+        private static void writeArray(final ObjectOutput out, final double[][] array)\n+            throws IOException {\n+            for (int i = 0; i < array.length; ++i) {\n+                writeArray(out, array[i]);\n+            }\n+        }\n+\n+        /** Read an array.\n+         * @param in input stream\n+         * @param array array to read\n+         * @exception IOException if array cannot be read\n+         */\n+        private static void readArray(final ObjectInput in, final double[] array)\n+            throws IOException {\n+            for (int i = 0; i < array.length; ++i) {\n+                array[i] = in.readDouble();\n+            }\n+        }\n+\n+        /** Read an array.\n+         * @param in input stream\n+         * @param array array to read\n+         * @exception IOException if array cannot be read\n+         */\n+        private static void readArray(final ObjectInput in, final double[][] array)\n+            throws IOException {\n+            for (int i = 0; i < array.length; ++i) {\n+                readArray(in, array[i]);\n             }\n         }\n ", "timestamp": 1267807082, "metainfo": ""}