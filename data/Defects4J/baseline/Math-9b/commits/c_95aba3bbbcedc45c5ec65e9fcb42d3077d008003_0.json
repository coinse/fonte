{"sha": "95aba3bbbcedc45c5ec65e9fcb42d3077d008003", "log": "Added Pascal distribution contributed in BZ #38766.  ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n  * <li>Normal</li>\n  * <li>Student's t</li>\n  * <li>Weibull</li>\n+ * <li>Pascal</li>\n  * </ul>\n  *\n  * Common usage:<pre>\n         int numberOfTrials, double probabilityOfSuccess);\n     \n     /**\n+     * Create a Pascal distribution with the given number of successes and\n+     * probability of success.\n+     * \n+     * @param numberOfSuccesses the number of successes.\n+     * @param probabilityOfSuccess the probability of success\n+     * @return a new Pascal distribution\n+     */\n+    public abstract PascalDistribution createPascalDistribution(\n+        int numberOfSuccesses, double probabilityOfSuccess);\n+    \n+    /**\n      * Create a new cauchy distribution with the given median and scale.\n      * @param median the median of the distribution\n      * @param scale the scale\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n         return new PoissonDistributionImpl(lambda);\n     }\n \n+    /**\n+     * Create a Pascal distribution with the given number of successes and\n+     * probability of success.\n+     * \n+     * @param numberOfSuccesses the number of successes.\n+     * @param probabilityOfSuccess the probability of success\n+     * @return a new Pascal distribution\n+     */\n+    public PascalDistribution createPascalDistribution(int numberOfSuccesses, double probabilityOfSuccess) {\n+        return new PascalDistributionImpl(numberOfSuccesses, probabilityOfSuccess);\n+    }\n+\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/PascalDistribution.java\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.distribution;\n+\n+/**\n+ * The Pascal Distribution.\n+ *\n+ * Instances of PascalDistribution objects should be created using\n+ * {@link DistributionFactory#createPascalDistribution(int, double)}.\n+ *\n+ * <p>\n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/NegativeBinomialDistribution.html\">\n+ * Negative Binomial Distribution</a></li>\n+ * </ul>\n+ * </p>\n+ *\n+ * @version $Revision:$\n+ */\n+public interface PascalDistribution extends IntegerDistribution {\n+    /**\n+     * Access the number of successes for this distribution.\n+     * \n+     * @return the number of successes\n+     */\n+    int getNumberOfSuccesses();\n+    \n+    /**\n+     * Access the probability of success for this distribution.\n+     * \n+     * @return the probability of success\n+     */\n+    double getProbabilityOfSuccess();\n+    \n+    /**\n+     * Change the number of successes for this distribution.\n+     * \n+     * @param successes the new number of successes\n+     */\n+    void setNumberOfSuccesses(int successes);\n+    \n+    /**\n+     * Change the probability of success for this distribution.\n+     * \n+     * @param p the new probability of success\n+     */\n+    void setProbabilityOfSuccess(double p);\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/PascalDistributionTest.java\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.distribution;\n+\n+/**\n+ * Test cases for PascalDistribution.\n+ * Extends IntegerDistributionAbstractTest.  See class javadoc for\n+ * IntegerDistributionAbstractTest for details.\n+ * \n+ * @version $Revision:$ $Date:$\n+ */\n+public class PascalDistributionTest extends IntegerDistributionAbstractTest {\n+    \n+    /**\n+     * Constructor for PascalDistributionTest.\n+     * @param name\n+     */\n+    public PascalDistributionTest(String name) {\n+        super(name);\n+    }\n+    \n+    //-------------- Implementations for abstract methods -----------------------\n+    \n+    /** Creates the default discrete distribution instance to use in tests. */\n+    public IntegerDistribution makeDistribution() {\n+        return DistributionFactory.newInstance().createPascalDistribution(10,0.70);\n+    }\n+    \n+    /** Creates the default probability density test input values */\n+    public int[] makeDensityTestPoints() {\n+      return new int[] {-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n+    }\n+    \n+    /** Creates the default probability density test expected values */\n+    public double[] makeDensityTestValues() {\n+      return new double[] {0d, 0.02824d, 0.08474d, 0.13982d, \n+          0.16779d, 0.16359d, 0.1374d, 0.10306d, 0.070673d, 0.04505d, 0.02703d, 0.01540d, 0.0084};\n+    }\n+    \n+    /** Creates the default cumulative probability density test input values */\n+    public int[] makeCumulativeTestPoints() {\n+      return makeDensityTestPoints();\n+    }\n+    \n+    /** Creates the default cumulative probability density test expected values */\n+    public double[] makeCumulativeTestValues() {\n+      return new double[] {0d, 0.02824d, 0.11299d, 0.25281d, 0.42060d, 0.58420d,\n+          0.72162d, 0.82468d, 0.89535d, 0.94041d, 0.967446d, 0.98285, 0.99125d};\n+        }\n+    \n+    /** Creates the default inverse cumulative probability test input values */\n+    public double[] makeInverseCumulativeTestPoints() {\n+      return new double[] {0, 0.001d, 0.010d, 0.025d, 0.050d, 0.100d, 0.999d,\n+          0.990d, 0.975d, 0.950d, 0.900d, 1}; \n+        }\n+    \n+    /** Creates the default inverse cumulative probability density test expected values */\n+    public int[] makeInverseCumulativeTestValues() {\n+      return new int[] {-1, -1, -1, -1, 0, 0, 13, 10, 9, 8, 7, Integer.MAX_VALUE};\n+    }\n+\n+    //----------------- Additional test cases ---------------------------------\n+   \n+    /** Test degenerate case p = 0   */\n+    public void testDegenerate0() throws Exception {\n+        setDistribution(DistributionFactory.newInstance().createPascalDistribution(5,0.0d));\n+        setCumulativeTestPoints(new int[] {-1, 0, 1, 5, 10 });\n+        setCumulativeTestValues(new double[] {0d, 0d, 0d, 0d, 0d});\n+        setDensityTestPoints(new int[] {-1, 0, 1, 10, 11});\n+        setDensityTestValues(new double[] {0d, 0d, 0d, 0d, 0d});\n+        setInverseCumulativeTestPoints(new double[] {0.1d, 0.5d});\n+        setInverseCumulativeTestValues(new int[] {Integer.MAX_VALUE - 1, Integer.MAX_VALUE - 1});\n+        verifyDensities();\n+        verifyCumulativeProbabilities();\n+        verifyInverseCumulativeProbabilities();     \n+    }\n+    \n+    /** Test degenerate case p = 1   */\n+    public void testDegenerate1() throws Exception {\n+        setDistribution(DistributionFactory.newInstance().createPascalDistribution(5,1.0d));\n+        setCumulativeTestPoints(new int[] {-1, 0, 1, 2, 5, 10 });\n+        setCumulativeTestValues(new double[] {0d, 1d, 1d, 1d, 1d, 1d});\n+        setDensityTestPoints(new int[] {-1, 0, 1, 2, 5, 10});\n+        setDensityTestValues(new double[] {0d, 1d, 0d, 0d, 0d, 0d});\n+        setInverseCumulativeTestPoints(new double[] {0.1d, 0.5d});\n+        setInverseCumulativeTestValues(new int[] {-1, -1});\n+        verifyDensities();\n+        verifyCumulativeProbabilities();\n+        verifyInverseCumulativeProbabilities();     \n+    }\n+}", "timestamp": 1140970443, "metainfo": ""}