{"sha": "a1d1658a69abf1beb7b7a45e32ae99f48c29872b", "log": "Polynomials now implement the new UnivariateDifferentiable interface.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.MathUtils;\n \n  *\n  * @version $Id$\n  */\n-public class PolynomialFunction implements DifferentiableUnivariateFunction, Serializable {\n+public class PolynomialFunction implements UnivariateDifferentiable, DifferentiableUnivariateFunction, Serializable {\n     /**\n      * Serialization identifier\n      */\n         double result = coefficients[n - 1];\n         for (int j = n - 2; j >= 0; j--) {\n             result = argument * result + coefficients[j];\n+        }\n+        return result;\n+    }\n+\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     * @throws NoDataException if {@code coefficients} is empty.\n+     * @throws NullArgumentException if {@code coefficients} is {@code null}.\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t)\n+        throws NullArgumentException, NoDataException {\n+        MathUtils.checkNotNull(coefficients);\n+        int n = coefficients.length;\n+        if (n == 0) {\n+            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n+        }\n+        DerivativeStructure result =\n+                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);\n+        for (int j = n - 2; j >= 0; j--) {\n+            result = result.multiply(t).add(coefficients[j]);\n         }\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java\n import org.apache.commons.math3.util.MathArrays;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n  *\n  * @version $Id$\n  */\n-public class PolynomialSplineFunction implements DifferentiableUnivariateFunction {\n+public class PolynomialSplineFunction implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /**\n      * Spline segment interval delimiters (knots).\n      * Size is n + 1 for n segments.\n         return new PolynomialSplineFunction(knots, derivativePolynomials);\n     }\n \n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        final double t0 = t.getValue();\n+        if (t0 < knots[0] || t0 > knots[n]) {\n+            throw new OutOfRangeException(t0, knots[0], knots[n]);\n+        }\n+        int i = Arrays.binarySearch(knots, t0);\n+        if (i < 0) {\n+            i = -i - 2;\n+        }\n+        // This will handle the case where t is the last knot value\n+        // There are only n-1 polynomials, so if t is the last knot\n+        // then we will use the last polynomial to calculate the value.\n+        if ( i >= polynomials.length ) {\n+            i--;\n+        }\n+        return polynomials[i].value(t.subtract(knots[i]));\n+    }\n+\n     /**\n      * Get the number of spline segments.\n      * It is also the number of polynomials and the number of knot points - 1.", "timestamp": 1345313385, "metainfo": ""}