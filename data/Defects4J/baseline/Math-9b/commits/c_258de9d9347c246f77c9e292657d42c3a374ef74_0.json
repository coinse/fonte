{"sha": "258de9d9347c246f77c9e292657d42c3a374ef74", "log": "Bit of code cleanup in MullerUpdatingRegression.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/regression/MillerUpdatingRegression.java\n+++ b/src/main/java/org/apache/commons/math3/stat/regression/MillerUpdatingRegression.java\n      */\n     @SuppressWarnings(\"unused\")\n     private MillerUpdatingRegression() {\n-        this.d = null;\n-        this.hasIntercept = false;\n-        this.lindep = null;\n-        this.nobs = -1;\n-        this.nvars = -1;\n-        this.r = null;\n-        this.rhs = null;\n-        this.rss = null;\n-        this.rss_set = false;\n-        this.sserr = Double.NaN;\n-        this.sumsqy = Double.NaN;\n-        this.sumy = Double.NaN;\n-        this.tol = null;\n-        this.tol_set = false;\n-        this.vorder = null;\n-        this.work_sing = null;\n-        this.work_tolset = null;\n-        this.x_sing = null;\n-        this.epsilon = Double.NaN;\n-    }\n-\n-    /**\n-     * This is the augmented constructor for the MillerUpdatingRegression class\n+        this(-1, false, Double.NaN);\n+    }\n+\n+    /**\n+     * This is the augmented constructor for the MillerUpdatingRegression class.\n      *\n      * @param numberOfVariables number of regressors to expect, not including constant\n      * @param includeConstant include a constant automatically\n     }\n \n     /**\n-     * Primary constructor for the MillerUpdatingRegression\n+     * Primary constructor for the MillerUpdatingRegression.\n      *\n      * @param numberOfVariables maximum number of potential regressors\n      * @param includeConstant include a constant automatically\n     }\n \n     /**\n-     * A getter method which determines whether a constant is included\n+     * A getter method which determines whether a constant is included.\n      * @return true regression has an intercept, false no intercept\n      */\n     public boolean hasIntercept() {\n     }\n \n     /**\n-     * Gets the number of observations added to the regression model\n+     * Gets the number of observations added to the regression model.\n      * @return number of observations\n      */\n     public long getN() {\n     }\n \n     /**\n-     * Adds an observation to the regression model\n+     * Adds an observation to the regression model.\n      * @param x the array with regressor values\n      * @param y  the value of dependent variable given these regressors\n      * @exception ModelSpecificationException if the length of {@code x} does not equal\n     }\n \n     /**\n-     * Adds multiple observations to the model\n+     * Adds multiple observations to the model.\n      * @param x observations on the regressors\n      * @param y observations on the regressand\n      * @throws ModelSpecificationException if {@code x} is not rectangular, does not match\n                   x.length, x[0].length);\n         }\n         for (int i = 0; i < x.length; i++) {\n-            this.addObservation(x[i], y[i]);\n+            addObservation(x[i], y[i]);\n         }\n     }\n \n \n     /**\n      * Adds to number a and b such that the contamination due to\n-     * numerical smallness of one addend does not corrupt the sum\n+     * numerical smallness of one addend does not corrupt the sum.\n      * @param a - an addend\n      * @param b - an addend\n      * @return the sum of the a and b\n     }\n \n     /**\n-     * <p>In the original algorithm only the partial correlations of the regressors\n+     * In the original algorithm only the partial correlations of the regressors\n      * is returned to the user. In this implementation, we have <pre>\n      * corr =\n      * {\n      *   corrxy - bottom row of the matrix\n      * }\n      * Replaces subroutines PCORR and COR of:\n-     * ALGORITHM AS274  APPL. STATIST. (1992) VOL.41, NO. 2 </pre></p>\n+     * ALGORITHM AS274  APPL. STATIST. (1992) VOL.41, NO. 2 </pre>\n      *\n      * <p>Calculate partial correlations after the variables in rows\n      * 1, 2, ..., IN have been forced into the regression.\n     }\n \n     /**\n-     * <p>ALGORITHM AS274  APPL. STATIST. (1992) VOL.41, NO. 2</p>\n+     * ALGORITHM AS274  APPL. STATIST. (1992) VOL.41, NO. 2\n      *\n      * <p> Re-order the variables in an orthogonal reduction produced by\n      * AS75.1 so that the N variables in LIST start at position POS1,\n             throw new ModelSpecificationException(\n                     LocalizedFormats.TOO_MANY_REGRESSORS, numberOfRegressors, this.nvars);\n         }\n-        this.tolset();\n-\n-        this.singcheck();\n+\n+        tolset();\n+        singcheck();\n \n         double[] beta = this.regcf(numberOfRegressors);\n \n-        this.ss();\n+        ss();\n \n         double[] cov = this.cov(numberOfRegressors);\n \n             series = variablesToInclude;\n         }\n \n-        this.reorderRegressors(series, 0);\n-\n-        this.tolset();\n-\n-        this.singcheck();\n+        reorderRegressors(series, 0);\n+        tolset();\n+        singcheck();\n \n         double[] beta = this.regcf(series.length);\n \n-        this.ss();\n+        ss();\n \n         double[] cov = this.cov(series.length);\n ", "timestamp": 1342986833, "metainfo": ""}