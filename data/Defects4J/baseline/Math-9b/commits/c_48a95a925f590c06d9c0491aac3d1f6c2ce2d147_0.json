{"sha": "48a95a925f590c06d9c0491aac3d1f6c2ce2d147", "log": "MATH-795: factored out unit test of RealMatrix RealVector.outerProduct(RealVector) This test fails with the default implementation provided by the abstract class RealMatrix.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n         }\n     }\n \n+    private void doTestOuterProduct(final boolean mixed) {\n+        final double[] dataU = values;\n+        final RealVector u = create(dataU);\n+        final double[] dataV = new double[values.length + 3];\n+        System.arraycopy(values, 0, dataV, 0, values.length);\n+        dataV[values.length] = 1d;\n+        dataV[values.length] = -2d;\n+        dataV[values.length] = 3d;\n+        final RealVector v;\n+        if (mixed) {\n+            v = createAlien(dataV);\n+        } else {\n+            v = create(dataV);\n+        }\n+        final RealMatrix uv = u.outerProduct(v);\n+        Assert.assertEquals(\"number of rows\", dataU.length, uv\n+            .getRowDimension());\n+        Assert.assertEquals(\"number of columns\", dataV.length, uv\n+            .getColumnDimension());\n+        for (int i = 0; i < dataU.length; i++) {\n+            for (int j = 0; j < dataV.length; j++) {\n+                final double expected = dataU[i] * dataV[j];\n+                final double actual = uv.getEntry(i, j);\n+                Assert.assertEquals(\"[\" + i + \"][\" + j + \"]\", expected, actual,\n+                    0d);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testOuterProductSameType() {\n+        doTestOuterProduct(false);\n+    }\n+\n+    @Test\n+    public void testOuterProductMixedTypes() {\n+        doTestOuterProduct(true);\n+    }\n+\n     @Test\n     public void testDataInOut() {\n         final RealVector v1 = create(vec1);\n         double dot_2 = v1.dotProduct(v2_t);\n         Assert.assertEquals(\"compare val \", 32d, dot_2, normTolerance);\n \n-        RealMatrix m_outerProduct = v1.outerProduct(v2);\n-        Assert.assertEquals(\"compare val \", 4d, m_outerProduct.getEntry(0, 0),\n-                            normTolerance);\n-\n-        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n-        Assert.assertEquals(\"compare val \", 4d,\n-                            m_outerProduct_2.getEntry(0, 0), normTolerance);\n-\n         RealVector v_unitVector = v1.unitVector();\n         RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n         assertClose(\"compare vect\", v_unitVector.toArray(),\n         RealVector v_projection_2 = v1.projection(v2_t);\n         double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n         assertClose(\"compare vect\", v_projection_2.toArray(), result_projection_2, normTolerance);\n-    }\n-\n-    @Test\n-    public void testOuterProduct() {\n-        final RealVector u = create(new double[] {1, 2, -3});\n-        final RealVector v = create(new double[] {4, -2});\n-\n-        final RealMatrix uv = u.outerProduct(v);\n-\n-        final double tol = Math.ulp(1d);\n-        Assert.assertEquals(4, uv.getEntry(0, 0), tol);\n-        Assert.assertEquals(-2, uv.getEntry(0, 1), tol);\n-        Assert.assertEquals(8, uv.getEntry(1, 0), tol);\n-        Assert.assertEquals(-4, uv.getEntry(1, 1), tol);\n-        Assert.assertEquals(-12, uv.getEntry(2, 0), tol);\n-        Assert.assertEquals(6, uv.getEntry(2, 1), tol);\n     }\n \n     @Test", "timestamp": 1340776389, "metainfo": ""}