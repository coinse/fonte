{"sha": "186e98326119df27b2f70db5534856a98a7eca53", "log": "Added \"derivative\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/function/Sinc.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sinc.java\n package org.apache.commons.math.analysis.function;\n \n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.util.FastMath;\n \n /**\n  * @version $Id$\n  * @since 3.0\n  */\n-public class Sinc implements UnivariateRealFunction {\n+public class Sinc implements DifferentiableUnivariateRealFunction {\n+    /**\n+     * Value below which the result of the computation will not change\n+     * anymore due to the finite precision of the \"double\" representation\n+     * of real numbers.\n+     */\n+    private static final double SHORTCUT = 1e-9;\n     /** For normalized sinc function. */\n     private final boolean normalized;\n \n         }\n     }\n \n+    /** {@inheritDoc} */\n+    public UnivariateRealFunction derivative() {\n+        if (normalized) {\n+            return new UnivariateRealFunction() {\n+                /** {@inheritDoc} */\n+                public double value(double x) {\n+                    final double piTimesX = Math.PI * x;\n+                    return sincDerivative(piTimesX);\n+                }\n+            };\n+        } else {\n+            return new UnivariateRealFunction() {\n+                /** {@inheritDoc} */\n+                public double value(double x) {\n+                    return sincDerivative(x);\n+                }\n+            };\n+        }\n+    }\n+\n     /**\n      * @param x Argument.\n      * @return {@code sin(x) / x}.\n         // optimization on the ground that the result of the full computation\n         // is indistinguishable from 1 due to the limited accuracy of the\n         // floating point representation.\n-        return FastMath.abs(x) < 1e-9 ? 1 : FastMath.sin(x) / x;\n+        return FastMath.abs(x) < SHORTCUT ? 1 :\n+            FastMath.sin(x) / x;\n+    }\n+\n+    /**\n+     * @param x Argument.\n+     * @return {@code (cos(x) - sin(x) / x) / x}.\n+     */\n+    private static double sincDerivative(double x) {\n+        // The direct assignment to 0 for values below 1e-9 is an efficiency\n+        // optimization on the ground that the result of the full computation\n+        // is indistinguishable from 1 due to the limited accuracy of the\n+        // floating point representation.\n+        return FastMath.abs(x) < SHORTCUT ? 0 :\n+            (FastMath.cos(x) - FastMath.sin(x) / x) / x;\n     }\n }\n--- a/src/test/java/org/apache/commons/math/analysis/function/SincTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/function/SincTest.java\n                }\n            };\n \n-       for (double x = 1e-30; x < 1e10; x *= 5) {\n+       for (double x = 1e-30; x < 1e10; x *= 2) {\n            final double fX = f.value(x);\n            final double sX = s.value(x);\n            Assert.assertEquals(\"x=\" + x, fX, sX, 0);\n        }\n        Assert.assertEquals(prod, s.value(x), 1e-13);\n    }\n+\n+   @Test\n+   public void testDerivativeZero() {\n+       final UnivariateRealFunction sPrime = (new Sinc(true)).derivative();\n+\n+       Assert.assertEquals(0, sPrime.value(0), 0);\n+   }\n+\n+   @Test\n+   public void testDerivativeShortcut() {\n+       final UnivariateRealFunction sPrime = (new Sinc()).derivative();\n+       final UnivariateRealFunction f = new UnivariateRealFunction() {\n+               public double value(double x) {\n+                   return (FastMath.cos(x) - FastMath.sin(x) / x) / x;\n+               }\n+           };\n+\n+       for (double x = 1e-30; x < 1e10; x *= 2) {\n+           final double fX = f.value(x);\n+           final double sX = sPrime.value(x);\n+           Assert.assertEquals(\"x=\" + x, fX, sX, 0);\n+       }\n+   }\n }", "timestamp": 1318603838, "metainfo": ""}