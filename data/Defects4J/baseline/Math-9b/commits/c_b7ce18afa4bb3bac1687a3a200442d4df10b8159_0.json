{"sha": "b7ce18afa4bb3bac1687a3a200442d4df10b8159", "log": "Added two-sample (binned comparison) ChiSquare test JIRA: MATH-160 Thanks to: Matthias Hummel    ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n      */\n     boolean chiSquareTest(long[][] counts, double alpha) \n     throws IllegalArgumentException, MathException;\n+\n+    /**\n+     * <p>Computes a \n+     * <a href=\"http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/chi2samp.htm\">\n+     * Chi-Square two sample test statistic</a> comparing bin frequency counts\n+     * in <code>observed1</code> and <code>observed2</code>.  The\n+     * sums of frequency counts in the two samples are not required to be the\n+     * same.  The formula used to compute the test statistic is</p>\n+     * <code>\n+     * &sum;[(K * observed1[i] - observed2[i]/K)<sup>2</sup> / (observed1[i] + observed2[i])]\n+     * </code> where \n+     * <br/><code>K = &sqrt;[&sum(observed2 / &sum;(observed1)]</code>\n+     * </p>\n+     * <p>This statistic can be used to perform a Chi-Square test evaluating the null hypothesis that\n+     * both observed counts follow the same distribution.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Observed counts must be non-negative.\n+     * </li>\n+     * <li>Observed counts for a specific bin must not both be zero.\n+     * </li>\n+     * <li>Observed counts for a specific sample must not all be 0.\n+     * </li>\n+     * <li>The arrays <code>observed1</code> and <code>observed2</code> must have the same length and\n+     * their common length must be at least 2.\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an\n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed1 array of observed frequency counts of the first data set\n+     * @param observed2 array of observed frequency counts of the second data set\n+     * @return chiSquare statistic\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n+    \tthrows IllegalArgumentException;\n+\n+    /**\n+     * <p>Returns the <i>observed significance level</i>, or <a href=\n+     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n+     * p-value</a>, associated with a Chi-Square two sample test comparing\n+     * bin frequency counts in <code>observed1</code> and \n+     * <code>observed2</code>.\n+     * </p>\n+     * <p>The number returned is the smallest significance level at which one\n+     * can reject the null hypothesis that the observed counts conform to the\n+     * same distribution.\n+     * </p>\n+     * <p>See {@link #chiSquareDataSetsComparison(long[], long[]) for details\n+     * on the formula used to compute the test statistic. The degrees of\n+     * of freedom used to perform the test is one less than the common length\n+     * of the input observed count arrays.\n+     * </p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Observed counts must be non-negative.\n+     * </li>\n+     * <li>Observed counts for a specific bin must not both be zero.\n+     * </li>\n+     * <li>Observed counts for a specific sample must not all be 0.\n+     * </li>\n+     * <li>The arrays <code>observed1</code> and <code>observed2</code> must\n+     * have the same length and\n+     * their common length must be at least 2.\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an\n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed1 array of observed frequency counts of the first data set\n+     * @param observed2 array of observed frequency counts of the second data set\n+     * @return p-value\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n+    \tthrows IllegalArgumentException, MathException;\n+\n+    /**\n+     * <p>Performs a Chi-Square two sample test comparing two binned data\n+     * sets. The test evaluates the null hypothesis that the two lists of\n+     * observed counts conform to the same frequency distribution, with\n+     * significance level <code>alpha</code>.  Returns true iff the null\n+     * hypothesis can be rejected with 100 * (1 - alpha) percent confidence.\n+     * </p>\n+     * <p>See {@link #chiSquareDataSetsComparison(double[], double[])} for \n+     * details on the forumla used to compute the Chisquare statistic used\n+     * in the test. The degrees of of freedom used to perform the test is\n+     * one less than the common length of the input observed count arrays.\n+     * </p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>Observed counts must be non-negative.\n+     * </li>\n+     * <li>Observed counts for a specific bin must not both be zero.\n+     * </li>\n+     * <li>Observed counts for a specific sample must not all be 0.\n+     * </li>\n+     * <li>The arrays <code>observed1</code> and <code>observed2</code> must\n+     * have the same length and their common length must be at least 2.\n+     * </li>\n+     * <li> <code> 0 < alpha < 0.5 </code>\n+     * </li></ul><p>\n+     * If any of the preconditions are not met, an\n+     * <code>IllegalArgumentException</code> is thrown.\n+     *\n+     * @param observed1 array of observed frequency counts of the first data set\n+     * @param observed2 array of observed frequency counts of the second data set\n+     * @param alpha significance level of the test\n+     * @return true iff null hypothesis can be rejected with confidence\n+     * 1 - alpha\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha)\n+    \tthrows IllegalArgumentException, MathException;\n+\n }\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n     }\n     \n     /**\n+     * @param observed1 array of observed frequency counts of the first data set\n+     * @param observed2 array of observed frequency counts of the second data set\n+     * @return chi-square test statistic\n+     * @throws IllegalArgumentException if preconditions are not met\n+     */\n+    public double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n+        throws IllegalArgumentException {\n+        \n+        // Make sure lengths are same\n+        if ((observed1.length < 2) || (observed1.length != observed2.length)) {\n+            throw new IllegalArgumentException(\n+                    \"oberved1, observed2 array lengths incorrect\");\n+        }\n+        // Ensure non-negative counts\n+        if (!isNonNegative(observed1) || !isNonNegative(observed2)) {\n+            throw new IllegalArgumentException(\n+                \"observed counts must be non-negative\");\n+        }\n+        // Compute and compare count sums\n+        long countSum1 = 0;\n+        long countSum2 = 0;\n+        boolean unequalCounts = false;\n+        double weight = 0.0;\n+        for (int i = 0; i < observed1.length; i++) {\n+            countSum1 += observed1[i];\n+            countSum2 += observed2[i];   \n+        }\n+        // Ensure neither sample is uniformly 0\n+        if (countSum1 * countSum2 == 0) {\n+            throw new IllegalArgumentException(\n+             \"observed counts cannot all be 0\"); \n+        }\n+        // Compare and compute weight only if different\n+        unequalCounts = (countSum1 != countSum2);\n+        if (unequalCounts) {\n+            weight = Math.sqrt((double) countSum1 / (double) countSum2);\n+        }\n+        // Compute ChiSquare statistic\n+        double sumSq = 0.0d;\n+        double dev = 0.0d;\n+        double obs1 = 0.0d;\n+        double obs2 = 0.0d;\n+        for (int i = 0; i < observed1.length; i++) {\n+            if (observed1[i] == 0 && observed2[i] == 0) {\n+                throw new IllegalArgumentException(\n+                        \"observed counts must not both be zero\");\n+            } else {\n+                obs1 = (double) observed1[i];\n+                obs2 = (double) observed2[i];\n+                if (unequalCounts) { // apply weights\n+                    dev = obs1/weight - obs2 * weight;\n+                } else {\n+                    dev = obs1 - obs2;\n+                }\n+                sumSq += (dev * dev) / (obs1 + obs2);\n+            }\n+        }\n+        return sumSq;\n+    }\n+\n+    /**\n+     * @param observed1 array of observed frequency counts of the first data set\n+     * @param observed2 array of observed frequency counts of the second data set\n+     * @return p-value\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs computing the p-value\n+     */\n+    public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n+        throws IllegalArgumentException, MathException {\n+        distribution.setDegreesOfFreedom((double) observed1.length - 1);\n+        return 1 - distribution.cumulativeProbability(\n+                chiSquareDataSetsComparison(observed1, observed2));\n+    }\n+\n+    /**\n+     * @param observed1 array of observed frequency counts of the first data set\n+     * @param observed2 array of observed frequency counts of the second data set\n+     * @param alpha significance level of the test\n+     * @return true iff null hypothesis can be rejected with confidence\n+     * 1 - alpha\n+     * @throws IllegalArgumentException if preconditions are not met\n+     * @throws MathException if an error occurs performing the test\n+     */\n+    public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2,\n+            double alpha) throws IllegalArgumentException, MathException {\n+        if ((alpha <= 0) || (alpha > 0.5)) {\n+            throw new IllegalArgumentException(\n+                    \"bad significance level: \" + alpha);\n+        }\n+        return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);\n+    }\n+\n+    /**\n      * Checks to make sure that the input long[][] array is rectangular,\n      * has at least 2 rows and 2 columns, and has all non-negative entries,\n      * throwing IllegalArgumentException if any of these checks fail.\n         }\n         return true;\n     }\n-    \n+ \n     /**\n      * Modify the distribution used to compute inference statistics.\n-     * @param value the new distribution\n+     * \n+     * @param value\n+     *            the new distribution\n      * @since 1.2\n      */\n     public void setDistribution(ChiSquaredDistribution value) {\n--- a/src/java/org/apache/commons/math/stat/inference/TestUtils.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TestUtils.java\n         return chiSquareTest. chiSquareTest(counts);\n     }\n \n+    /**\n+     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareDataSetsComparison(double[], double[])\n+     */\n+    public static double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n+        throws IllegalArgumentException {\n+        return chiSquareTest.chiSquareDataSetsComparison(observed1, observed2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTestDataSetsComparison(double[], double[])\n+     */\n+    public static double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n+        throws IllegalArgumentException, MathException {\n+        return chiSquareTest.chiSquareTestDataSetsComparison(observed1, observed2);\n+    }\n+\n+\n+    /**\n+     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTestDataSetsComparison(double[], double[], double)\n+     */\n+    public static boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2,\n+        double alpha)\n+        throws IllegalArgumentException, MathException {\n+        return chiSquareTest.chiSquareTestDataSetsComparison(observed1, observed2, alpha);\n+    }\n+\n+\n }\n--- a/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n         assertEquals(\"chi-square p-value\", 0.0462835770603,\n                 testStatistic.chiSquareTest(counts), 1E-9);       \n     }\n+    \n+    /** Target values verified using DATAPLOT version 2006.3 */\n+    public void testChiSquareDataSetsComparisonEqualCounts()\n+    throws Exception {\n+        long[] observed1 = {10, 12, 12, 10};\n+        long[] observed2 = {5, 15, 14, 10};    \n+        assertEquals(\"chi-square p value\", 0.541096, \n+                testStatistic.chiSquareTestDataSetsComparison(\n+                observed1, observed2), 1E-6);\n+        assertEquals(\"chi-square test statistic\", 2.153846,\n+                testStatistic.chiSquareDataSetsComparison(\n+                observed1, observed2), 1E-6);\n+        assertFalse(\"chi-square test result\", \n+                testStatistic.chiSquareTestDataSetsComparison(\n+                observed1, observed2, 0.4));\n+    }\n+    \n+    /** Target values verified using DATAPLOT version 2006.3 */\n+    public void testChiSquareDataSetsComparisonUnEqualCounts()\n+    throws Exception {\n+        long[] observed1 = {10, 12, 12, 10, 15};\n+        long[] observed2 = {15, 10, 10, 15, 5};    \n+        assertEquals(\"chi-square p value\", 0.124115, \n+                testStatistic.chiSquareTestDataSetsComparison(\n+                observed1, observed2), 1E-6);\n+        assertEquals(\"chi-square test statistic\", 7.232189,\n+                testStatistic.chiSquareDataSetsComparison(\n+                observed1, observed2), 1E-6);\n+        assertTrue(\"chi-square test result\", \n+                testStatistic.chiSquareTestDataSetsComparison(\n+                observed1, observed2, 0.13));\n+        assertFalse(\"chi-square test result\", \n+                testStatistic.chiSquareTestDataSetsComparison(\n+                observed1, observed2, 0.12));\n+    }\n+    \n+    public void testChiSquareDataSetsComparisonBadCounts()\n+    throws Exception {\n+        long[] observed1 = {10, -1, 12, 10, 15};\n+        long[] observed2 = {15, 10, 10, 15, 5};\n+        try {\n+            testStatistic.chiSquareTestDataSetsComparison(\n+                    observed1, observed2);\n+            fail(\"Expecting IllegalArgumentException - negative count\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        long[] observed3 = {10, 0, 12, 10, 15};\n+        long[] observed4 = {15, 0, 10, 15, 5};\n+        try {\n+            testStatistic.chiSquareTestDataSetsComparison(\n+                    observed3, observed4);\n+            fail(\"Expecting IllegalArgumentException - double 0's\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        long[] observed5 = {10, 10, 12, 10, 15};\n+        long[] observed6 = {0, 0, 0, 0, 0};\n+        try {\n+            testStatistic.chiSquareTestDataSetsComparison(\n+                    observed5, observed6);\n+            fail(\"Expecting IllegalArgumentException - vanishing counts\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n }", "timestamp": 1182719419, "metainfo": ""}