{"sha": "ec145be03350c6b29b2f59078f374dbdb28ffb66", "log": "MATH-854 Fill \"throw\" clauses.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.java\n      * @param x0 Lower bound for the interval.\n      * @param x1 Upper bound for the interval.\n      * @return a value where the function is zero.\n-     * @throws IllegalArgumentException if f is null or the endpoints do not\n-     * specify a valid interval.\n+     * @throws NoBracketingException if the function has the same sign at the\n+     * endpoints.\n+     * @throws NullArgumentException if {@code function} is {@code null}.\n      */\n     public static double solve(UnivariateFunction function, double x0, double x1)\n-        throws NullArgumentException {\n+        throws NullArgumentException,\n+               NoBracketingException {\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n      * @param x1 Upper bound for the interval.\n      * @param absoluteAccuracy Accuracy to be used by the solver.\n      * @return a value where the function is zero.\n-     * @throws IllegalArgumentException if {@code function} is {@code null},\n-     * the endpoints do not specify a valid interval, or the absolute accuracy\n-     * is not valid for the default solver.\n+     * @throws NoBracketingException if the function has the same sign at the\n+     * endpoints.\n+     * @throws NullArgumentException if {@code function} is {@code null}.\n      */\n     public static double solve(UnivariateFunction function,\n                                double x0, double x1,\n                                double absoluteAccuracy)\n-        throws NullArgumentException {\n+        throws NullArgumentException,\n+               NoBracketingException {\n         if (function == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n      * @param allowedSolution the kind of solutions that the root-finding algorithm may\n      * accept as solutions.\n      * @return a root approximation, on the specified side of the exact root\n+     * @throws NoBracketingException if the function has the same sign at the\n+     * endpoints.\n      */\n     public static double forceSide(final int maxEval, final UnivariateFunction f,\n                                    final BracketedUnivariateSolver<UnivariateFunction> bracketing,\n      * value).\n      * @return a two-element array holding a and b.\n      * @throws NoBracketingException if a root cannot be bracketted.\n-     * @throws IllegalArgumentException if function is null, maximumIterations\n-     * is not positive, or initial is not between lowerBound and upperBound.\n+     * @throws NotStrictlyPositiveException if {@code maximumIterations <= 0}.\n+     * @throws NullArgumentException if {@code function} is {@code null}.\n      */\n     public static double[] bracket(UnivariateFunction function,\n                                    double initial,\n      * @return a two element array holding a and b.\n      * @throws NoBracketingException if the algorithm fails to find a and b\n      * satisfying the desired conditions.\n-     * @throws IllegalArgumentException if function is null, maximumIterations\n-     * is not positive, or initial is not between lowerBound and upperBound.\n+     * @throws NotStrictlyPositiveException if {@code maximumIterations <= 0}.\n+     * @throws NullArgumentException if {@code function} is {@code null}.\n      */\n     public static double[] bracket(UnivariateFunction function,\n                                    double initial,\n      * @param upper Upper endpoint.\n      * @return {@code true} if the function values have opposite signs at the\n      * given points.\n+     * @throws NullArgumentException if {@code function} is {@code null}.\n      */\n     public static boolean isBracketing(UnivariateFunction function,\n                                        final double lower,\n      * @param function Function.\n      * @param lower Lower endpoint.\n      * @param upper Upper endpoint.\n-     * @throws NoBracketingException if function has the same sign at the\n+     * @throws NoBracketingException if the function has the same sign at the\n      * endpoints.\n+     * @throws NullArgumentException if {@code function} is {@code null}.\n      */\n     public static void verifyBracketing(UnivariateFunction function,\n                                         final double lower,", "timestamp": 1350907037, "metainfo": ""}