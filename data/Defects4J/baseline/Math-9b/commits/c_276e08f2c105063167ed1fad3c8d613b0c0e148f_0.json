{"sha": "276e08f2c105063167ed1fad3c8d613b0c0e148f", "log": "More correction of Javadoc errors that end up propigating into UnivarImpl and other implementations.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/Univariate.java\n+++ b/src/java/org/apache/commons/math/stat/Univariate.java\n  *\n  * @author Phil Steitz\n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n- * @author Mark Diggory\n- * @version $Revision: 1.2 $ $Date: 2003/06/16 20:58:53 $\n+ * @author <a href=\"mailto:mdiggory@apache.org\">Mark Diggory</a>\n+ * @version $Revision: 1.3 $ $Date: 2003/06/16 21:24:30 $\n  * \n */\n public interface Univariate {\n     /** \n      * Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>\n      * arithmetic mean </a> of the available values \n-     * @return mean value, Double.NaN if no values have been added.\n+     * @return The mean or Double.NaN if no values have been added.\n      */\n     abstract double getMean();\n \n     /** \n      * Returns the <a href=http://www.xycoon.com/geometric_mean.htm>\n      * geometric mean </a> of the available values\n-     * @return The mean value, Double.NaN if no values have been added, or the product\n-     * of the available values is less than or equal to 0.\n+     * @return The geometricMean, Double.NaN if no values have been added, \n+     * or if the productof the available values is less than or equal to 0.\n      */\n     abstract double getGeometricMean();\n \n     /** \n      * Returns the product of the available values\n-     * @return product of all values or Double.NaN if no values have been added.\n+     * @return The product or Double.NaN if no values have been added.\n      */\n     abstract double getProduct();\n \n     /** \n      * Returns the variance of the available values.\n-     * @return The variance of a set of values, an empty set of values and 0.0 is \n-     * returned for a single value set, or Double.NaN if no values have been added.  \n+     * @return The variance, Double.NaN if no values have been added \n+     * or 0.0 for a single value set.  \n      */\n     abstract double getVariance();\n \n     /** \n-     * Returns the variance of the available values.\n-     * @return standard deviation value, Double.NaN is returned for an empty set \n-     * of values and 0.0 is returned for a single value set. \n+     * Returns the standard deviation of the available values.\n+     * @return The standard deviation, Double.NaN if no values have been added \n+     * or 0.0 for a single value set. \n      */\n     abstract double getStandardDeviation();\n \n \t/**\n-     * Returns the skewness of a given distribution.  Skewness is a \n+     * Returns the skewness of the available values. Skewness is a \n      * measure of the assymetry of a given distribution.\n-\t * @return skewness, Double.NaN is returned for an empty set of values \n-     * and 0.0 is returned for a value set &lt;=2. \n+\t * @return The skewness, Double.NaN if no values have been added \n+     * or 0.0 for a value set &lt;=2. \n \t */\n \tabstract double getSkewness();\n \t\n \t/**\n      * Returns the Kurtosis of the available values. Kurtosis is a \n      * measure of the \"peakedness\" of a distribution\n-     * @return kurtosis, Double.NaN is returned in no values have been added, and 0.0 is \n-     * returned for a value set &lt;=3. \n+     * @return The kurtosis, Double.NaN if no values have been added, or 0.0 \n+     * for a value set &lt;=3. \n \t */\n \tabstract double getKurtosis();\n \t\t\n     /** \n      * Returns the maximum of the available values\n-     * @return Value of property max, Double.NaN is returned in no values have been added.\n+     * @return The max or Double.NaN if no values have been added.\n      */\n     abstract double getMax();\n \n      /** \n      * Returns the minimum of the available values\n-     * @return Value of property min, Double.NaN is returned in no values have been added.\n+     * @return The min or Double.NaN if no values have been added.\n      */\n     abstract double getMin();\n \n     /** \n      * Returns the number of available values\n-     * @return the number of available values\n+     * @return The number of available values\n      */\n     abstract int getN();\n \n     /**\n      * Returns the sum of the values that have been added to Univariate.\n-     * @return the sum of the available values or Double.NaN if no values have been added\n+     * @return The sum or Double.NaN if no values have been added\n      */\n     abstract double getSum();\n \n     /**\n      * Returns the sum of the squares of the available values.\n-     * Returns 0 if no values have been added.\n-     * @return the sum of the squares of the available values.\n+     * @return The sum of the squares or Double.NaN if no \n+     * values have been added.\n      */\n     abstract double getSumsq();\n \n-    /** Resets all statistics */\n+    /** \n+     * Resets all statistics and storage\n+     */\n     abstract void clear();\n \n     /**\n \n     /**\n      * Univariate has the ability to return only measures for the\n-     * last N elements added to the set of values.  This function returns\n-     */\n+     * last N elements added to the set of values.\n+\t * @return The current window size or -1 if its Infinite.\n+\t */\n+\n     abstract int getWindowSize();\n \n     /**\n-     * Sets the window.  windowSize controls the number of value\n-     * which contribute to the values returned by Univariate.  \n-     * For example, a window value of 10 means that getMean()\n-     * will return the mean of the last 10 values added.\n-     */\n+     * WindowSize controls the number of values which contribute \n+     * to the values returned by Univariate.  For example, if \n+     * windowSize is set to 3 and the values {1,2,3,4,5} \n+     * have been added <strong> in that order</strong> \n+     * then the <i>available values</i> are {3,4,5} and all\n+     * reported statistics will be based on these values\n+\t * @param windowSize sets the size of the window.\n+\t */\n     abstract void setWindowSize(int windowSize);\n }\n--- a/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n  * @author <a href=\"mailto:mdiggory@apache.org\">Mark Diggory</a>\n  * @author Brent Worden\n  * @author <a href=\"mailto:HotFusionMan@Yahoo.com\">Albert Davidson Chou</a>\n- * @version $Revision: 1.6 $ $Date: 2003/06/16 20:42:24 $\n+ * @version $Revision: 1.7 $ $Date: 2003/06/16 21:24:30 $\n  *\n */\n public class UnivariateImpl\n \t\tsetWindowSize(window);\n \t}\n \n-\t/** Getter for property n.\n-\t * @return Value of property n.\n-\t */\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.Univariate#getN()\n+     */\n \tpublic int getN() {\n \t\treturn n;\n \t}\n \n-\t/**\n-\t * Returns the sum of all values contained herein\n-\t * @see org.apache.commons.math.stat.Univariate#getSum()\n-\t */\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.Univariate#getSum()\n+     */\n \tpublic double getSum() {\n \t\tif (windowSize != Univariate.INFINITE_WINDOW) {\n \t\t\treturn super.getSum();\n \t\treturn sum;\n \t}\n \n-\t/**\n-\t * Returns the sun of the squares of all values contained herein\n-\t * @see org.apache.commons.math.stat.Univariate#getSumsq()\n-\t */\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.Univariate#getSumsq()\n+     */\n \tpublic double getSumsq() {\n \t\tif (windowSize != Univariate.INFINITE_WINDOW) {\n \t\t\treturn super.getSumsq();\n \t\treturn sumsq;\n \t}\n \n-\t/**\n-\t * @see org.apache.commons.math.stat.Univariate#getMean()\n-\t */\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.Univariate#getMean()\n+     */\n \tpublic double getMean() {\n \t\tif (windowSize != Univariate.INFINITE_WINDOW) {\n \t\t\treturn super.getMean();\n \t\t}\n \t}\n \n-\t/** Getter for property max.\n-\t * @return Value of property max.\n-\t */\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.Univariate#getMax()\n+     */\n \tpublic double getMax() {\n \t\tif (windowSize != Univariate.INFINITE_WINDOW) {\n \t\t\treturn super.getMax();\n \t\treturn max;\n \t}\n \n-\t/** Getter for property min.\n-\t * @return Value of property min.\n-\t */\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.stat.Univariate#getMin()\n+     */\n \tpublic double getMin() {\n \t\tif (windowSize != Univariate.INFINITE_WINDOW) {\n \t\t\treturn super.getMin();\n \t\treturn min;\n \t}\n \n-\t/**\n+    /* (non-Javadoc)\n \t * @see org.apache.commons.math.stat.Univariate#getProduct()\n \t */\n \tpublic double getProduct() {\n \t\treturn product;\n \t}\n \n-\t/**\n+    /* (non-Javadoc)\n \t* @see org.apache.commons.math.stat.Univariate#getGeometricMean()\n \t*/\n \tpublic double getGeometricMean() {\n \n \t}\n \n-\t/**\n+    /* (non-Javadoc)\n \t * @see org.apache.commons.math.stat.Univariate#addValue(double)\n \t */\n \tpublic void addValue(double v) {\n \t\treturn outBuffer.toString();\n \t}\n \n-\t/**\n-\t * Resets all stats to NaN. Reinitializes the Double Array\n-\t */\n+\t/* (non-Javadoc)\n+     * @see org.apache.commons.math.Univariate#clear()\n+     */\n \tpublic void clear() {\n \t\tthis.n = 0;\n \t\tthis.min = this.max = Double.NaN;", "timestamp": 1055798670, "metainfo": ""}