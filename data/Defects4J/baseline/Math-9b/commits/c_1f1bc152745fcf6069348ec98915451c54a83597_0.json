{"sha": "1f1bc152745fcf6069348ec98915451c54a83597", "log": "fixed checkstyle warnings  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n-import java.util.ArrayList;\n import java.util.Map;\n-import java.util.HashMap;\n \n import org.apache.commons.math.DimensionMismatchException;\n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n+import org.apache.commons.math.linear.ArrayRealVector;\n import org.apache.commons.math.linear.RealVector;\n-import org.apache.commons.math.linear.ArrayRealVector;\n import org.apache.commons.math.random.UnitSphereRandomVectorGenerator;\n \n /**\n      * @param point Interpolation point.\n      * @return the interpolated value.\n      */\n-    public double value(double[] point)\n-        throws FunctionEvaluationException {\n+    public double value(double[] point) {\n \n         final RealVector p = new ArrayRealVector(point);\n \n      *\n      * @param v Vector.\n      * @param w Vector.\n+     * @return cosine of the angle\n      */\n     private double cosAngle(final RealVector v, final RealVector w) {\n         return v.dotProduct(w) / (v.getNorm() * w.getNorm());\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java\n \n     /**\n      * Set the number of microsphere elements.\n-     * @param microsphereElements Number of surface elements of the microsphere.\n+     * @param elements Number of surface elements of the microsphere.\n      * @throws IllegalArgumentException if {@code microsphereElements <= 0}.\n      */\n-    public void setMicropshereElements(final int microsphereElements) {\n+    public void setMicropshereElements(final int elements) {\n         if (microsphereElements < 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                 \"number of microsphere elements must be positive, but got {0}\",\n                 microsphereElements);\n         }\n-        this.microsphereElements = microsphereElements;\n+        this.microsphereElements = elements;\n     }\n \n }\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java\n \n /**\n  * Interface representing a univariate real interpolating function.\n- *  \n+ *\n  * @version $Revision$ $Date$\n  */\n public interface MultivariateRealInterpolator {\n      *         interpolation algorithm or some dimension mismatch occurs\n      * @throws IllegalArgumentException if there are no data (xval null or zero length)\n      */\n-    public MultivariateRealFunction interpolate(double[][] xval,\n-                                                double[] yval)\n+    MultivariateRealFunction interpolate(double[][] xval, double[] yval)\n         throws MathException, IllegalArgumentException;\n }", "timestamp": 1255441732, "metainfo": ""}