{"sha": "dada2f9432b6e13b5af81266b7cb38b0afe00e8a", "log": "Fixed exceptions for OneWayAnova interface and impl, removed never thrown MathException. JIRA: MATH-488 MATH-459  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java\n  */\n package org.apache.commons.math.stat.inference;\n \n-import org.apache.commons.math.MathException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n+\n import java.util.Collection;\n \n /**\n      * @param categoryData <code>Collection</code> of <code>double[]</code>\n      * arrays each containing data for one category\n      * @return Fvalue\n-     * @throws IllegalArgumentException if the preconditions are not met\n-     * @throws MathException if the statistic can not be computed do to a\n-     *         convergence or other numerical error.\n+     * @throws NullArgumentException if <code>categoryData</code> is <code>null</code>\n+     * @throws DimensionMismatchException if the length of the <code>categoryData</code>\n+     * array is less than 2 or a contained <code>double[]</code> array does not have\n+     * at least two values\n      */\n     double anovaFValue(Collection<double[]> categoryData)\n-        throws IllegalArgumentException, MathException;\n+        throws NullArgumentException, DimensionMismatchException;\n \n     /**\n      * Computes the ANOVA P-value for a collection of <code>double[]</code>\n      * @param categoryData <code>Collection</code> of <code>double[]</code>\n      * arrays each containing data for one category\n      * @return Pvalue\n-     * @throws IllegalArgumentException if the preconditions are not met\n-     * @throws MathException if the statistic can not be computed do to a\n-     *         convergence or other numerical error.\n+     * @throws NullArgumentException if <code>categoryData</code> is <code>null</code>\n+     * @throws DimensionMismatchException if the length of the <code>categoryData</code>\n+     * array is less than 2 or a contained <code>double[]</code> array does not have\n+     * at least two values\n      */\n     double anovaPValue(Collection<double[]> categoryData)\n-        throws IllegalArgumentException, MathException;\n+        throws NullArgumentException, DimensionMismatchException;\n \n     /**\n      * Performs an ANOVA test, evaluating the null hypothesis that there\n      * @param alpha significance level of the test\n      * @return true if the null hypothesis can be rejected with\n      * confidence 1 - alpha\n-     * @throws IllegalArgumentException if the preconditions are not met\n-     * @throws MathException if the statistic can not be computed do to a\n-     *         convergence or other numerical error.\n+     * @throws NullArgumentException if <code>categoryData</code> is <code>null</code>\n+     * @throws DimensionMismatchException if the length of the <code>categoryData</code>\n+     * array is less than 2 or a contained <code>double[]</code> array does not have\n+     * at least two values\n+     * @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]\n      */\n     boolean anovaTest(Collection<double[]> categoryData, double alpha)\n-        throws IllegalArgumentException, MathException;\n+        throws NullArgumentException, DimensionMismatchException, OutOfRangeException;\n \n }\n--- a/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n \n import java.util.Collection;\n \n-import org.apache.commons.math.MathException;\n-import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.distribution.FDistribution;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.summary.Sum;\n import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;\n      * here</a></p>\n      */\n     public double anovaFValue(Collection<double[]> categoryData)\n-        throws IllegalArgumentException, MathException {\n+        throws MathIllegalArgumentException {\n         AnovaStats a = anovaStats(categoryData);\n         return a.F;\n     }\n      * is the commons-math implementation of the F distribution.</p>\n      */\n     public double anovaPValue(Collection<double[]> categoryData)\n-        throws IllegalArgumentException, MathException {\n+        throws NullArgumentException, DimensionMismatchException {\n         AnovaStats a = anovaStats(categoryData);\n         FDistribution fdist = new FDistribution(a.dfbg, a.dfwg);\n         return 1.0 - fdist.cumulativeProbability(a.F);\n      * <p>True is returned iff the estimated p-value is less than alpha.</p>\n      */\n     public boolean anovaTest(Collection<double[]> categoryData, double alpha)\n-        throws IllegalArgumentException, MathException {\n+        throws NullArgumentException, DimensionMismatchException, OutOfRangeException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,\n-                  alpha, 0, 0.5);\n+            throw new OutOfRangeException(LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,\n+                                          alpha, 0, 0.5);\n         }\n         return anovaPValue(categoryData) < alpha;\n     }\n      * @param categoryData <code>Collection</code> of <code>double[]</code>\n      * arrays each containing data for one category\n      * @return computed AnovaStats\n-     * @throws IllegalArgumentException if categoryData does not meet\n-     * preconditions specified in the interface definition\n-     * @throws MathException if an error occurs computing the Anova stats\n+     * @throws NullArgumentException if <code>categoryData</code> is <code>null</code>\n+     * @throws DimensionMismatchException if the length of the <code>categoryData</code>\n+     * array is less than 2 or a contained <code>double[]</code> array does not contain\n+     * at least two values\n      */\n     private AnovaStats anovaStats(Collection<double[]> categoryData)\n-        throws IllegalArgumentException, MathException {\n+        throws NullArgumentException, DimensionMismatchException {\n+\n+        if (categoryData == null) {\n+            throw new NullArgumentException();\n+        }\n \n         // check if we have enough categories\n         if (categoryData.size() < 2) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n-                  categoryData.size());\n+            throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n+                                                 categoryData.size(), 2);\n         }\n \n         // check if each category has enough data and all is double[]\n         for (double[] array : categoryData) {\n             if (array.length <= 1) {\n-                throw MathRuntimeException.createIllegalArgumentException(\n-                      LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n-                      array.length);\n+                throw new DimensionMismatchException(\n+                        LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n+                        array.length, 2);\n             }\n         }\n ", "timestamp": 1328297329, "metainfo": ""}