{"sha": "cc9b8967b717d73f57944a10a9a1dd35c1aec0a6", "log": "Merged TTest implementation and interface, removed use of MathException. JIRA: MATH-488, MATH-739  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/inference/TTest.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/TTest.java\n  */\n package org.apache.commons.math.stat.inference;\n \n-import org.apache.commons.math.MathException;\n+import org.apache.commons.math.distribution.TDistribution;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.stat.StatUtils;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n+import org.apache.commons.math.util.FastMath;\n \n /**\n- * An interface for Student's t-tests.\n+ * An implementation for Student's t-tests.\n  * <p>\n  * Tests can be:<ul>\n  * <li>One-sample or two-sample</li>\n  * (e.g. tests at the 95% level  use <code>alpha=0.05</code>).</p>\n  * <p>\n  * Input to tests can be either <code>double[]</code> arrays or\n- * {@link StatisticalSummary} instances.</p>\n- *\n+ * {@link StatisticalSummary} instances.</p><p>\n+ * Uses commons-math {@link org.apache.commons.math.distribution.TDistribution}\n+ * implementation to estimate exact p-values.</p>\n  *\n  * @version $Id$\n  */\n-public interface TTest {\n+public class TTest {\n     /**\n      * Computes a paired, 2-sample t-statistic based on the data in the input\n      * arrays.  The t-statistic returned is equivalent to what would be returned by\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * @return t statistic\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if the statistic can not be computed do to a\n-     *         convergence or other numerical error.\n-     */\n-    double pairedT(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the arrays are <code>null</code>\n+     * @throws NoDataException if the arrays are empty\n+     * @throws DimensionMismatchException if the length of the arrays is not equal\n+     * @throws NumberIsTooSmallException if the length of the arrays is &lt; 2\n+     */\n+    public double pairedT(final double[] sample1, final double[] sample2)\n+        throws NullArgumentException, NoDataException,\n+        DimensionMismatchException, NumberIsTooSmallException {\n+\n+        checkSampleData(sample1);\n+        checkSampleData(sample2);\n+        double meanDifference = StatUtils.meanDifference(sample1, sample2);\n+        return t(meanDifference, 0,\n+                 StatUtils.varianceDifference(sample1, sample2, meanDifference),\n+                 sample1.length);\n+\n+    }\n+\n     /**\n      * Returns the <i>observed significance level</i>, or\n      * <i> p-value</i>, associated with a paired, two-sample, two-tailed t-test\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * @return p-value for t-test\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    double pairedTTest(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the arrays are <code>null</code>\n+     * @throws NoDataException if the arrays are empty\n+     * @throws DimensionMismatchException if the length of the arrays is not equal\n+     * @throws NumberIsTooSmallException if the length of the arrays is &lt; 2\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public double pairedTTest(final double[] sample1, final double[] sample2)\n+        throws NullArgumentException, NoDataException, DimensionMismatchException,\n+        NumberIsTooSmallException, MaxCountExceededException {\n+\n+        double meanDifference = StatUtils.meanDifference(sample1, sample2);\n+        return tTest(meanDifference, 0,\n+                StatUtils.varianceDifference(sample1, sample2, meanDifference),\n+                sample1.length);\n+\n+    }\n+\n     /**\n      * Performs a paired t-test evaluating the null hypothesis that the\n      * mean of the paired differences between <code>sample1</code> and\n      * <li>The input array lengths must be the same and their common length\n      * must be at least 2.\n      * </li>\n-     * <li> <code> 0 < alpha < 0.5 </code>\n+     * <li> <code> 0 &lt; alpha &lt; 0.5 </code>\n      * </li></ul></p>\n      *\n      * @param sample1 array of sample data values\n      * @param alpha significance level of the test\n      * @return true if the null hypothesis can be rejected with\n      * confidence 1 - alpha\n-     * @throws IllegalArgumentException if the preconditions are not met\n-     * @throws MathException if an error occurs performing the test\n-     */\n-    boolean pairedTTest(\n-        double[] sample1,\n-        double[] sample2,\n-        double alpha)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the arrays are <code>null</code>\n+     * @throws NoDataException if the arrays are empty\n+     * @throws DimensionMismatchException if the length of the arrays is not equal\n+     * @throws NumberIsTooSmallException if the length of the arrays is &lt; 2\n+     * @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public boolean pairedTTest(final double[] sample1, final double[] sample2,\n+                               final double alpha)\n+        throws NullArgumentException, NoDataException, DimensionMismatchException,\n+        NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException {\n+\n+        checkSignificanceLevel(alpha);\n+        return pairedTTest(sample1, sample2) < alpha;\n+\n+    }\n+\n     /**\n      * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula\">\n      * t statistic </a> given observed values and a comparison constant.\n      * @param mu comparison constant\n      * @param observed array of values\n      * @return t statistic\n-     * @throws IllegalArgumentException if input array length is less than 2\n-     */\n-    double t(double mu, double[] observed)\n-        throws IllegalArgumentException;\n+     * @throws NullArgumentException if <code>observed</code> is <code>null</code>\n+     * @throws NumberIsTooSmallException if the length of <code>observed</code> is &lt; 2\n+     */\n+    public double t(final double mu, final double[] observed)\n+        throws NullArgumentException, NumberIsTooSmallException {\n+\n+        checkSampleData(observed);\n+        return t(StatUtils.mean(observed), mu, StatUtils.variance(observed),\n+                observed.length);\n+\n+    }\n+\n     /**\n      * Computes a <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula\">\n      * t statistic </a> to use in comparing the mean of the dataset described by\n      * This statistic can be used to perform a one sample t-test for the mean.\n      * </p><p>\n      * <strong>Preconditions</strong>: <ul>\n-     * <li><code>observed.getN() > = 2</code>.\n+     * <li><code>observed.getN() &ge; 2</code>.\n      * </li></ul></p>\n      *\n      * @param mu comparison constant\n      * @param sampleStats DescriptiveStatistics holding sample summary statitstics\n      * @return t statistic\n-     * @throws IllegalArgumentException if the precondition is not met\n-     */\n-    double t(double mu, StatisticalSummary sampleStats)\n-        throws IllegalArgumentException;\n+     * @throws NullArgumentException if <code>sampleStats</code> is <code>null</code>\n+     * @throws NumberIsTooSmallException if the number of samples is &lt; 2\n+     */\n+    public double t(final double mu, final StatisticalSummary sampleStats)\n+        throws NullArgumentException, NumberIsTooSmallException {\n+\n+        checkSampleData(sampleStats);\n+        return t(sampleStats.getMean(), mu, sampleStats.getVariance(),\n+                 sampleStats.getN());\n+\n+    }\n+\n     /**\n      * Computes a 2-sample t statistic,  under the hypothesis of equal\n      * subpopulation variances.  To compute a t-statistic without the\n      * This statistic can be used to perform a (homoscedastic) two-sample\n      * t-test to compare sample means.</p>\n      * <p>\n-     * The t-statisitc is</p>\n+     * The t-statistic is</p>\n      * <p>\n      * &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n      * </p><p>\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * @return t statistic\n-     * @throws IllegalArgumentException if the precondition is not met\n-     */\n-    double homoscedasticT(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException;\n+     * @throws NullArgumentException if the arrays are <code>null</code>\n+     * @throws NumberIsTooSmallException if the length of the arrays is &lt; 2\n+     */\n+    public double homoscedasticT(final double[] sample1, final double[] sample2)\n+        throws NullArgumentException, NumberIsTooSmallException {\n+\n+        checkSampleData(sample1);\n+        checkSampleData(sample2);\n+        return homoscedasticT(StatUtils.mean(sample1), StatUtils.mean(sample2),\n+                              StatUtils.variance(sample1), StatUtils.variance(sample2),\n+                              sample1.length, sample2.length);\n+\n+    }\n+\n     /**\n      * Computes a 2-sample t statistic, without the hypothesis of equal\n      * subpopulation variances.  To compute a t-statistic assuming equal\n      * This statistic can be used to perform a two-sample t-test to compare\n      * sample means.</p>\n      * <p>\n-     * The t-statisitc is</p>\n+     * The t-statistic is</p>\n      * <p>\n      * &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n      * </p><p>\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * @return t statistic\n-     * @throws IllegalArgumentException if the precondition is not met\n-     */\n-    double t(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException;\n+     * @throws NullArgumentException if the arrays are <code>null</code>\n+     * @throws NumberIsTooSmallException if the length of the arrays is &lt; 2\n+     */\n+    public double t(final double[] sample1, final double[] sample2)\n+        throws NullArgumentException, NumberIsTooSmallException {\n+\n+        checkSampleData(sample1);\n+        checkSampleData(sample2);\n+        return t(StatUtils.mean(sample1), StatUtils.mean(sample2),\n+                 StatUtils.variance(sample1), StatUtils.variance(sample2),\n+                 sample1.length, sample2.length);\n+\n+    }\n+\n     /**\n      * Computes a 2-sample t statistic </a>, comparing the means of the datasets\n      * described by two {@link StatisticalSummary} instances, without the\n      * This statistic can be used to perform a two-sample t-test to compare\n      * sample means.</p>\n      * <p>\n-      * The returned  t-statisitc is</p>\n+      * The returned  t-statistic is</p>\n      * <p>\n      * &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>\n      * </p><p>\n      * @param sampleStats1 StatisticalSummary describing data from the first sample\n      * @param sampleStats2 StatisticalSummary describing data from the second sample\n      * @return t statistic\n-     * @throws IllegalArgumentException if the precondition is not met\n-     */\n-    double t(\n-        StatisticalSummary sampleStats1,\n-        StatisticalSummary sampleStats2)\n-        throws IllegalArgumentException;\n+     * @throws NullArgumentException if the sample statistics are <code>null</code>\n+     * @throws NumberIsTooSmallException if the number of samples is &lt; 2\n+     */\n+    public double t(final StatisticalSummary sampleStats1,\n+                    final StatisticalSummary sampleStats2)\n+        throws NullArgumentException, NumberIsTooSmallException {\n+\n+        checkSampleData(sampleStats1);\n+        checkSampleData(sampleStats2);\n+        return t(sampleStats1.getMean(), sampleStats2.getMean(),\n+                 sampleStats1.getVariance(), sampleStats2.getVariance(),\n+                 sampleStats1.getN(), sampleStats2.getN());\n+\n+    }\n+\n     /**\n      * Computes a 2-sample t statistic, comparing the means of the datasets\n      * described by two {@link StatisticalSummary} instances, under the\n      * This statistic can be used to perform a (homoscedastic) two-sample\n      * t-test to compare sample means.</p>\n      * <p>\n-     * The t-statisitc returned is</p>\n+     * The t-statistic returned is</p>\n      * <p>\n      * &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>\n      * </p><p>\n      * @param sampleStats1 StatisticalSummary describing data from the first sample\n      * @param sampleStats2 StatisticalSummary describing data from the second sample\n      * @return t statistic\n-     * @throws IllegalArgumentException if the precondition is not met\n-     */\n-    double homoscedasticT(\n-        StatisticalSummary sampleStats1,\n-        StatisticalSummary sampleStats2)\n-        throws IllegalArgumentException;\n+     * @throws NullArgumentException if the sample statistics are <code>null</code>\n+     * @throws NumberIsTooSmallException if the number of samples is &lt; 2\n+     */\n+    public double homoscedasticT(final StatisticalSummary sampleStats1,\n+                                 final StatisticalSummary sampleStats2)\n+        throws NullArgumentException, NumberIsTooSmallException {\n+\n+        checkSampleData(sampleStats1);\n+        checkSampleData(sampleStats2);\n+        return homoscedasticT(sampleStats1.getMean(), sampleStats2.getMean(),\n+                              sampleStats1.getVariance(), sampleStats2.getVariance(),\n+                              sampleStats1.getN(), sampleStats2.getN());\n+\n+    }\n+\n     /**\n      * Returns the <i>observed significance level</i>, or\n      * <i>p-value</i>, associated with a one-sample, two-tailed t-test\n      * @param mu constant value to compare sample mean against\n      * @param sample array of sample data values\n      * @return p-value\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    double tTest(double mu, double[] sample)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the sample array is <code>null</code>\n+     * @throws NumberIsTooSmallException if the length of the array is &lt; 2\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public double tTest(final double mu, final double[] sample)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        MaxCountExceededException {\n+\n+        checkSampleData(sample);\n+        return tTest(StatUtils.mean(sample), mu, StatUtils.variance(sample),\n+                     sample.length);\n+\n+    }\n+\n     /**\n      * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n      * two-sided t-test</a> evaluating the null hypothesis that the mean of the population from\n      * @param sample array of sample data values\n      * @param alpha significance level of the test\n      * @return p-value\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error computing the p-value\n-     */\n-    boolean tTest(double mu, double[] sample, double alpha)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the sample array is <code>null</code>\n+     * @throws NumberIsTooSmallException if the length of the array is &lt; 2\n+     * @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]\n+     * @throws MaxCountExceededException if an error computing the p-value\n+     */\n+    public boolean tTest(final double mu, final double[] sample, final double alpha)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        OutOfRangeException, MaxCountExceededException {\n+\n+        checkSignificanceLevel(alpha);\n+        return tTest(mu, sample) < alpha;\n+\n+    }\n+\n     /**\n      * Returns the <i>observed significance level</i>, or\n      * <i>p-value</i>, associated with a one-sample, two-tailed t-test\n      * @param mu constant value to compare sample mean against\n      * @param sampleStats StatisticalSummary describing sample data\n      * @return p-value\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    double tTest(double mu, StatisticalSummary sampleStats)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if <code>sampleStats</code> is <code>null</code>\n+     * @throws NumberIsTooSmallException if the number of samples is &lt; 2\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public double tTest(final double mu, final StatisticalSummary sampleStats)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        MaxCountExceededException {\n+\n+        checkSampleData(sampleStats);\n+        return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(),\n+                     sampleStats.getN());\n+\n+    }\n+\n     /**\n      * Performs a <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n      * two-sided t-test</a> evaluating the null hypothesis that the mean of the\n      * @param sampleStats StatisticalSummary describing sample data values\n      * @param alpha significance level of the test\n      * @return p-value\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    boolean tTest(\n-        double mu,\n-        StatisticalSummary sampleStats,\n-        double alpha)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if <code>sampleStats</code> is <code>null</code>\n+     * @throws NumberIsTooSmallException if the number of samples is &lt; 2\n+     * @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public boolean tTest(final double mu, final StatisticalSummary sampleStats,\n+                         final double alpha)\n+    throws NullArgumentException, NumberIsTooSmallException,\n+    OutOfRangeException, MaxCountExceededException {\n+\n+        checkSignificanceLevel(alpha);\n+        return tTest(mu, sampleStats) < alpha;\n+\n+    }\n+\n     /**\n      * Returns the <i>observed significance level</i>, or\n      * <i>p-value</i>, associated with a two-sample, two-tailed t-test\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * @return p-value for t-test\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    double tTest(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the arrays are <code>null</code>\n+     * @throws NumberIsTooSmallException if the length of the arrays is &lt; 2\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public double tTest(final double[] sample1, final double[] sample2)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        MaxCountExceededException {\n+\n+        checkSampleData(sample1);\n+        checkSampleData(sample2);\n+        return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2),\n+                     StatUtils.variance(sample1), StatUtils.variance(sample2),\n+                     sample1.length, sample2.length);\n+\n+    }\n+\n     /**\n      * Returns the <i>observed significance level</i>, or\n      * <i>p-value</i>, associated with a two-sample, two-tailed t-test\n      * @param sample1 array of sample data values\n      * @param sample2 array of sample data values\n      * @return p-value for t-test\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    double homoscedasticTTest(\n-        double[] sample1,\n-        double[] sample2)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the arrays are <code>null</code>\n+     * @throws NumberIsTooSmallException if the length of the arrays is &lt; 2\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public double homoscedasticTTest(final double[] sample1, final double[] sample2)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        MaxCountExceededException {\n+\n+        checkSampleData(sample1);\n+        checkSampleData(sample2);\n+        return homoscedasticTTest(StatUtils.mean(sample1),\n+                                  StatUtils.mean(sample2),\n+                                  StatUtils.variance(sample1),\n+                                  StatUtils.variance(sample2),\n+                                  sample1.length, sample2.length);\n+\n+    }\n+\n     /**\n      * Performs a\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n      * @param alpha significance level of the test\n      * @return true if the null hypothesis can be rejected with\n      * confidence 1 - alpha\n-     * @throws IllegalArgumentException if the preconditions are not met\n-     * @throws MathException if an error occurs performing the test\n-     */\n-    boolean tTest(\n-        double[] sample1,\n-        double[] sample2,\n-        double alpha)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the arrays are <code>null</code>\n+     * @throws NumberIsTooSmallException if the length of the arrays is &lt; 2\n+     * @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public boolean tTest(final double[] sample1, final double[] sample2,\n+                         final double alpha)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        OutOfRangeException, MaxCountExceededException {\n+\n+        checkSignificanceLevel(alpha);\n+        return tTest(sample1, sample2) < alpha;\n+\n+    }\n+\n     /**\n      * Performs a\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n      * @param alpha significance level of the test\n      * @return true if the null hypothesis can be rejected with\n      * confidence 1 - alpha\n-     * @throws IllegalArgumentException if the preconditions are not met\n-     * @throws MathException if an error occurs performing the test\n-     */\n-    boolean homoscedasticTTest(\n-        double[] sample1,\n-        double[] sample2,\n-        double alpha)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the arrays are <code>null</code>\n+     * @throws NumberIsTooSmallException if the length of the arrays is &lt; 2\n+     * @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public boolean homoscedasticTTest(final double[] sample1, final double[] sample2,\n+                                      final double alpha)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        OutOfRangeException, MaxCountExceededException {\n+\n+        checkSignificanceLevel(alpha);\n+        return homoscedasticTTest(sample1, sample2) < alpha;\n+\n+    }\n+\n     /**\n      * Returns the <i>observed significance level</i>, or\n      * <i>p-value</i>, associated with a two-sample, two-tailed t-test\n      * equal in favor of the two-sided alternative that they are different.\n      * For a one-sided test, divide the returned value by 2.</p>\n      * <p>\n-     * The test does not assume that the underlying popuation variances are\n+     * The test does not assume that the underlying population variances are\n      * equal  and it uses approximated degrees of freedom computed from the\n      * sample data to compute the p-value.   To perform the test assuming\n      * equal variances, use\n      * @param sampleStats1  StatisticalSummary describing data from the first sample\n      * @param sampleStats2  StatisticalSummary describing data from the second sample\n      * @return p-value for t-test\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    double tTest(\n-        StatisticalSummary sampleStats1,\n-        StatisticalSummary sampleStats2)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the sample statistics are <code>null</code>\n+     * @throws NumberIsTooSmallException if the number of samples is &lt; 2\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public double tTest(final StatisticalSummary sampleStats1,\n+                        final StatisticalSummary sampleStats2)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        MaxCountExceededException {\n+\n+        checkSampleData(sampleStats1);\n+        checkSampleData(sampleStats2);\n+        return tTest(sampleStats1.getMean(), sampleStats2.getMean(),\n+                     sampleStats1.getVariance(), sampleStats2.getVariance(),\n+                     sampleStats1.getN(), sampleStats2.getN());\n+\n+    }\n+\n     /**\n      * Returns the <i>observed significance level</i>, or\n      * <i>p-value</i>, associated with a two-sample, two-tailed t-test\n      * @param sampleStats1  StatisticalSummary describing data from the first sample\n      * @param sampleStats2  StatisticalSummary describing data from the second sample\n      * @return p-value for t-test\n-     * @throws IllegalArgumentException if the precondition is not met\n-     * @throws MathException if an error occurs computing the p-value\n-     */\n-    double homoscedasticTTest(\n-        StatisticalSummary sampleStats1,\n-        StatisticalSummary sampleStats2)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the sample statistics are <code>null</code>\n+     * @throws NumberIsTooSmallException if the number of samples is &lt; 2\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public double homoscedasticTTest(final StatisticalSummary sampleStats1,\n+                                     final StatisticalSummary sampleStats2)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        MaxCountExceededException {\n+\n+        checkSampleData(sampleStats1);\n+        checkSampleData(sampleStats2);\n+        return homoscedasticTTest(sampleStats1.getMean(),\n+                                  sampleStats2.getMean(),\n+                                  sampleStats1.getVariance(),\n+                                  sampleStats2.getVariance(),\n+                                  sampleStats1.getN(), sampleStats2.getN());\n+\n+    }\n+\n     /**\n      * Performs a\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm\">\n      * @param alpha significance level of the test\n      * @return true if the null hypothesis can be rejected with\n      * confidence 1 - alpha\n-     * @throws IllegalArgumentException if the preconditions are not met\n-     * @throws MathException if an error occurs performing the test\n-     */\n-    boolean tTest(\n-        StatisticalSummary sampleStats1,\n-        StatisticalSummary sampleStats2,\n-        double alpha)\n-        throws IllegalArgumentException, MathException;\n+     * @throws NullArgumentException if the sample statistics are <code>null</code>\n+     * @throws NumberIsTooSmallException if the number of samples is &lt; 2\n+     * @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    public boolean tTest(final StatisticalSummary sampleStats1,\n+                         final StatisticalSummary sampleStats2,\n+                         final double alpha)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        OutOfRangeException, MaxCountExceededException {\n+\n+        checkSignificanceLevel(alpha);\n+        return tTest(sampleStats1, sampleStats2) < alpha;\n+\n+    }\n+\n+    //----------------------------------------------- Protected methods\n+\n+    /**\n+     * Computes approximate degrees of freedom for 2-sample t-test.\n+     *\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return approximate degrees of freedom\n+     */\n+    protected double df(double v1, double v2, double n1, double n2) {\n+        return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /\n+        ((v1 * v1) / (n1 * n1 * (n1 - 1d)) + (v2 * v2) /\n+                (n2 * n2 * (n2 - 1d)));\n+    }\n+\n+    /**\n+     * Computes t test statistic for 1-sample t-test.\n+     *\n+     * @param m sample mean\n+     * @param mu constant to test against\n+     * @param v sample variance\n+     * @param n sample n\n+     * @return t test statistic\n+     */\n+    protected double t(final double m, final double mu,\n+                       final double v, final double n) {\n+        return (m - mu) / FastMath.sqrt(v / n);\n+    }\n+\n+    /**\n+     * Computes t test statistic for 2-sample t-test.\n+     * <p>\n+     * Does not assume that subpopulation variances are equal.</p>\n+     *\n+     * @param m1 first sample mean\n+     * @param m2 second sample mean\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return t test statistic\n+     */\n+    protected double t(final double m1, final double m2,\n+                       final double v1, final double v2,\n+                       final double n1, final double n2)  {\n+        return (m1 - m2) / FastMath.sqrt((v1 / n1) + (v2 / n2));\n+    }\n+\n+    /**\n+     * Computes t test statistic for 2-sample t-test under the hypothesis\n+     * of equal subpopulation variances.\n+     *\n+     * @param m1 first sample mean\n+     * @param m2 second sample mean\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return t test statistic\n+     */\n+    protected double homoscedasticT(final double m1, final double m2,\n+                                    final double v1, final double v2,\n+                                    final double n1, final double n2)  {\n+        final double pooledVariance = ((n1  - 1) * v1 + (n2 -1) * v2 ) / (n1 + n2 - 2);\n+        return (m1 - m2) / FastMath.sqrt(pooledVariance * (1d / n1 + 1d / n2));\n+    }\n+\n+    /**\n+     * Computes p-value for 2-sided, 1-sample t-test.\n+     *\n+     * @param m sample mean\n+     * @param mu constant to test against\n+     * @param v sample variance\n+     * @param n sample n\n+     * @return p-value\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    protected double tTest(final double m, final double mu,\n+                           final double v, final double n)\n+        throws MaxCountExceededException {\n+\n+        double t = FastMath.abs(t(m, mu, v, n));\n+        TDistribution distribution = new TDistribution(n - 1);\n+        return 2.0 * distribution.cumulativeProbability(-t);\n+\n+    }\n+\n+    /**\n+     * Computes p-value for 2-sided, 2-sample t-test.\n+     * <p>\n+     * Does not assume subpopulation variances are equal. Degrees of freedom\n+     * are estimated from the data.</p>\n+     *\n+     * @param m1 first sample mean\n+     * @param m2 second sample mean\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return p-value\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    protected double tTest(final double m1, final double m2,\n+                           final double v1, final double v2,\n+                           final double n1, final double n2)\n+        throws MaxCountExceededException {\n+\n+        final double t = FastMath.abs(t(m1, m2, v1, v2, n1, n2));\n+        final double degreesOfFreedom = df(v1, v2, n1, n2);\n+        TDistribution distribution = new TDistribution(degreesOfFreedom);\n+        return 2.0 * distribution.cumulativeProbability(-t);\n+\n+    }\n+\n+    /**\n+     * Computes p-value for 2-sided, 2-sample t-test, under the assumption\n+     * of equal subpopulation variances.\n+     * <p>\n+     * The sum of the sample sizes minus 2 is used as degrees of freedom.</p>\n+     *\n+     * @param m1 first sample mean\n+     * @param m2 second sample mean\n+     * @param v1 first sample variance\n+     * @param v2 second sample variance\n+     * @param n1 first sample n\n+     * @param n2 second sample n\n+     * @return p-value\n+     * @throws MaxCountExceededException if an error occurs computing the p-value\n+     */\n+    protected double homoscedasticTTest(double m1, double m2,\n+                                        double v1, double v2,\n+                                        double n1, double n2)\n+        throws MaxCountExceededException {\n+\n+        final double t = FastMath.abs(homoscedasticT(m1, m2, v1, v2, n1, n2));\n+        final double degreesOfFreedom = n1 + n2 - 2;\n+        TDistribution distribution = new TDistribution(degreesOfFreedom);\n+        return 2.0 * distribution.cumulativeProbability(-t);\n+\n+    }\n+\n+    /**\n+     * Check significance level.\n+     *\n+     * @param alpha significance level\n+     * @throws OutOfRangeException if the significance level is out of bounds.\n+     */\n+    private void checkSignificanceLevel(final double alpha)\n+        throws OutOfRangeException {\n+\n+        if (alpha <= 0 || alpha > 0.5) {\n+            throw new OutOfRangeException(LocalizedFormats.SIGNIFICANCE_LEVEL,\n+                                          alpha, 0.0, 0.5);\n+        }\n+\n+    }\n+\n+    /**\n+     * Check sample data.\n+     *\n+     * @param data Sample data.\n+     * @throws NullArgumentException if {@code data} is {@code null}.\n+     * @throws NumberIsTooSmallException if there is not enough sample data.\n+     */\n+    private void checkSampleData(final double[] data)\n+        throws NullArgumentException, NumberIsTooSmallException {\n+\n+        if (data == null) {\n+            throw new NullArgumentException();\n+        }\n+        if (data.length < 2) {\n+            throw new NumberIsTooSmallException(\n+                    LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC,\n+                    data.length, 2, true);\n+        }\n+\n+    }\n+\n+    /**\n+     * Check sample data.\n+     *\n+     * @param stat Statistical summary.\n+     * @throws NullArgumentException if {@code data} is {@code null}.\n+     * @throws NumberIsTooSmallException if there is not enough sample data.\n+     */\n+    private void checkSampleData(final StatisticalSummary stat)\n+        throws NullArgumentException, NumberIsTooSmallException {\n+\n+        if (stat == null) {\n+            throw new NullArgumentException();\n+        }\n+        if (stat.getN() < 2) {\n+            throw new NumberIsTooSmallException(\n+                    LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC,\n+                    stat.getN(), 2, true);\n+        }\n+\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math/stat/inference/TestUtils.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/TestUtils.java\n package org.apache.commons.math.stat.inference;\n \n import java.util.Collection;\n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.ZeroException;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n public class TestUtils  {\n \n     /** Singleton TTest instance. */\n-    private static final TTest T_TEST = new TTestImpl();\n+    private static final TTest T_TEST = new TTest();\n \n     /** Singleton ChiSquareTest instance. */\n     private static final ChiSquareTest CHI_SQUARE_TEST = new ChiSquareTest();\n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#homoscedasticT(double[], double[])\n      */\n-    public static double homoscedasticT(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException {\n+    public static double homoscedasticT(final double[] sample1, final double[] sample2)\n+        throws NullArgumentException, NumberIsTooSmallException {\n         return T_TEST.homoscedasticT(sample1, sample2);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#homoscedasticT(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary)\n      */\n-    public static double homoscedasticT(StatisticalSummary sampleStats1,\n-        StatisticalSummary sampleStats2)\n-        throws IllegalArgumentException {\n+    public static double homoscedasticT(final StatisticalSummary sampleStats1,\n+                                        final StatisticalSummary sampleStats2)\n+        throws NullArgumentException, NumberIsTooSmallException {\n         return T_TEST.homoscedasticT(sampleStats1, sampleStats2);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#homoscedasticTTest(double[], double[], double)\n      */\n-    public static boolean homoscedasticTTest(double[] sample1, double[] sample2,\n-            double alpha)\n-        throws IllegalArgumentException, MathException {\n+    public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2,\n+                                             final double alpha)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        OutOfRangeException, MaxCountExceededException {\n         return T_TEST.homoscedasticTTest(sample1, sample2, alpha);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#homoscedasticTTest(double[], double[])\n      */\n-    public static double homoscedasticTTest(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException, MathException {\n+    public static double homoscedasticTTest(final double[] sample1, final double[] sample2)\n+        throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException {\n         return T_TEST.homoscedasticTTest(sample1, sample2);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#homoscedasticTTest(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary)\n      */\n-    public static double homoscedasticTTest(StatisticalSummary sampleStats1,\n-        StatisticalSummary sampleStats2)\n-        throws IllegalArgumentException, MathException {\n+    public static double homoscedasticTTest(final StatisticalSummary sampleStats1,\n+                                            final StatisticalSummary sampleStats2)\n+        throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException {\n         return T_TEST.homoscedasticTTest(sampleStats1, sampleStats2);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#pairedT(double[], double[])\n      */\n-    public static double pairedT(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException, MathException {\n+    public static double pairedT(final double[] sample1, final double[] sample2)\n+        throws NullArgumentException, NoDataException,\n+        DimensionMismatchException, NumberIsTooSmallException {\n         return T_TEST.pairedT(sample1, sample2);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#pairedTTest(double[], double[], double)\n      */\n-    public static boolean pairedTTest(double[] sample1, double[] sample2,\n-        double alpha)\n-        throws IllegalArgumentException, MathException {\n+    public static boolean pairedTTest(final double[] sample1, final double[] sample2,\n+                                      final double alpha)\n+        throws NullArgumentException, NoDataException, DimensionMismatchException,\n+        NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException {\n         return T_TEST.pairedTTest(sample1, sample2, alpha);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#pairedTTest(double[], double[])\n      */\n-    public static double pairedTTest(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException, MathException {\n+    public static double pairedTTest(final double[] sample1, final double[] sample2)\n+        throws NullArgumentException, NoDataException, DimensionMismatchException,\n+        NumberIsTooSmallException, MaxCountExceededException {\n         return T_TEST.pairedTTest(sample1, sample2);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#t(double, double[])\n      */\n-    public static double t(double mu, double[] observed)\n-        throws IllegalArgumentException {\n+    public static double t(final double mu, final double[] observed)\n+        throws NullArgumentException, NumberIsTooSmallException {\n         return T_TEST.t(mu, observed);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#t(double, org.apache.commons.math.stat.descriptive.StatisticalSummary)\n      */\n-    public static double t(double mu, StatisticalSummary sampleStats)\n-        throws IllegalArgumentException {\n+    public static double t(final double mu, final StatisticalSummary sampleStats)\n+        throws NullArgumentException, NumberIsTooSmallException {\n         return T_TEST.t(mu, sampleStats);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#t(double[], double[])\n      */\n-    public static double t(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException {\n+    public static double t(final double[] sample1, final double[] sample2)\n+        throws NullArgumentException, NumberIsTooSmallException {\n         return T_TEST.t(sample1, sample2);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#t(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary)\n      */\n-    public static double t(StatisticalSummary sampleStats1,\n-            StatisticalSummary sampleStats2)\n-        throws IllegalArgumentException {\n+    public static double t(final StatisticalSummary sampleStats1,\n+                           final StatisticalSummary sampleStats2)\n+        throws NullArgumentException, NumberIsTooSmallException {\n         return T_TEST.t(sampleStats1, sampleStats2);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#tTest(double, double[], double)\n      */\n-    public static boolean tTest(double mu, double[] sample, double alpha)\n-        throws IllegalArgumentException, MathException {\n+    public static boolean tTest(final double mu, final double[] sample, final double alpha)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        OutOfRangeException, MaxCountExceededException {\n         return T_TEST.tTest(mu, sample, alpha);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#tTest(double, double[])\n      */\n-    public static double tTest(double mu, double[] sample)\n-        throws IllegalArgumentException, MathException {\n+    public static double tTest(final double mu, final double[] sample)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        MaxCountExceededException {\n         return T_TEST.tTest(mu, sample);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#tTest(double, org.apache.commons.math.stat.descriptive.StatisticalSummary, double)\n      */\n-    public static boolean tTest(double mu, StatisticalSummary sampleStats,\n-        double alpha)\n-        throws IllegalArgumentException, MathException {\n+    public static boolean tTest(final double mu, final StatisticalSummary sampleStats,\n+                                final double alpha)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        OutOfRangeException, MaxCountExceededException {\n         return T_TEST.tTest(mu, sampleStats, alpha);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#tTest(double, org.apache.commons.math.stat.descriptive.StatisticalSummary)\n      */\n-    public static double tTest(double mu, StatisticalSummary sampleStats)\n-        throws IllegalArgumentException, MathException {\n+    public static double tTest(final double mu, final StatisticalSummary sampleStats)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        MaxCountExceededException {\n         return T_TEST.tTest(mu, sampleStats);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#tTest(double[], double[], double)\n      */\n-    public static boolean tTest(double[] sample1, double[] sample2, double alpha)\n-        throws IllegalArgumentException, MathException {\n+    public static boolean tTest(final double[] sample1, final double[] sample2,\n+                                final double alpha)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        OutOfRangeException, MaxCountExceededException {\n         return T_TEST.tTest(sample1, sample2, alpha);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#tTest(double[], double[])\n      */\n-    public static double tTest(double[] sample1, double[] sample2)\n-        throws IllegalArgumentException, MathException {\n+    public static double tTest(final double[] sample1, final double[] sample2)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        MaxCountExceededException {\n         return T_TEST.tTest(sample1, sample2);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#tTest(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary, double)\n      */\n-    public static boolean tTest(StatisticalSummary sampleStats1,\n-        StatisticalSummary sampleStats2, double alpha)\n-        throws IllegalArgumentException, MathException {\n+    public static boolean tTest(final StatisticalSummary sampleStats1,\n+                                final StatisticalSummary sampleStats2,\n+                                final double alpha)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        OutOfRangeException, MaxCountExceededException {\n         return T_TEST.tTest(sampleStats1, sampleStats2, alpha);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.inference.TTest#tTest(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary)\n      */\n-    public static double tTest(StatisticalSummary sampleStats1,\n-        StatisticalSummary sampleStats2)\n-        throws IllegalArgumentException, MathException {\n+    public static double tTest(final StatisticalSummary sampleStats1,\n+                               final StatisticalSummary sampleStats2)\n+        throws NullArgumentException, NumberIsTooSmallException,\n+        MaxCountExceededException {\n         return T_TEST.tTest(sampleStats1, sampleStats2);\n     }\n \n--- a/src/test/java/org/apache/commons/math/stat/inference/TTestTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/TTestTest.java\n package org.apache.commons.math.stat.inference;\n \n \n-import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.junit.Assert;\n import org.junit.Before;\n  */\n public class TTestTest {\n \n-    protected TTest testStatistic = new TTestImpl();\n+    protected TTest testStatistic = new TTest();\n \n     private double[] tooShortObs = { 1.0 };\n     private double[] emptyObs = {};\n \n         try {\n             testStatistic.t(mu, (double[]) null);\n-            Assert.fail(\"arguments too short, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"arguments too short, NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.t(mu, (SummaryStatistics) null);\n-            Assert.fail(\"arguments too short, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"arguments too short, NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.t(mu, emptyObs);\n-            Assert.fail(\"arguments too short, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"arguments too short, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.t(mu, emptyStats);\n-            Assert.fail(\"arguments too short, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"arguments too short, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.t(mu, tooShortObs);\n-            Assert.fail(\"insufficient data to compute t statistic, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data to compute t statistic, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n         try {\n             testStatistic.tTest(mu, tooShortObs);\n-            Assert.fail(\"insufficient data to perform t test, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data to perform t test, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n            // expected\n         }\n \n         try {\n             testStatistic.t(mu, tooShortStats);\n-            Assert.fail(\"insufficient data to compute t statistic, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data to compute t statistic, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n         try {\n             testStatistic.tTest(mu, tooShortStats);\n-            Assert.fail(\"insufficient data to perform t test, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data to perform t test, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n     }\n \n         try {\n             testStatistic.tTest(0d, oneSidedP, 95);\n-            Assert.fail(\"alpha out of range, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"alpha out of range, OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.tTest(0d, oneSidedPStats, 95);\n-            Assert.fail(\"alpha out of range, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"alpha out of range, OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n             // expected\n         }\n \n \n         try {\n             testStatistic.tTest(sample1, sample2, .95);\n-            Assert.fail(\"alpha out of range, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"alpha out of range, OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.tTest(sampleStats1, sampleStats2, .95);\n-            Assert.fail(\"alpha out of range, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"alpha out of range, OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.tTest(sample1, tooShortObs, .01);\n-            Assert.fail(\"insufficient data, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.tTest(sampleStats1, tooShortStats, .01);\n-            Assert.fail(\"insufficient data, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.tTest(sample1, tooShortObs);\n-            Assert.fail(\"insufficient data, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n            // expected\n         }\n \n         try {\n             testStatistic.tTest(sampleStats1, tooShortStats);\n-            Assert.fail(\"insufficient data, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.t(sample1, tooShortObs);\n-            Assert.fail(\"insufficient data, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.t(sampleStats1, tooShortStats);\n-            Assert.fail(\"insufficient data, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n            // expected\n         }\n     }\n--- a/src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java\n import java.util.List;\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.junit.Assert;\n \n         try {\n             TestUtils.t(mu, (double[]) null);\n-            Assert.fail(\"arguments too short, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"arguments too short, NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.t(mu, (SummaryStatistics) null);\n-            Assert.fail(\"arguments too short, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"arguments too short, NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.t(mu, emptyObs);\n-            Assert.fail(\"arguments too short, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"arguments too short, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.t(mu, emptyStats);\n-            Assert.fail(\"arguments too short, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"arguments too short, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.t(mu, tooShortObs);\n-            Assert.fail(\"insufficient data to compute t statistic, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data to compute t statistic, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n         try {\n             TestUtils.tTest(mu, tooShortObs);\n-            Assert.fail(\"insufficient data to perform t test, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data to perform t test, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.t(mu, (SummaryStatistics) null);\n-            Assert.fail(\"insufficient data to compute t statistic, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data to compute t statistic, NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         try {\n             TestUtils.tTest(mu, (SummaryStatistics) null);\n-            Assert.fail(\"insufficient data to perform t test, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data to perform t test, NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n     }\n \n         try {\n             TestUtils.tTest(0d, oneSidedP, 95);\n-            Assert.fail(\"alpha out of range, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"alpha out of range, OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.tTest(0d, oneSidedPStats, 95);\n-            Assert.fail(\"alpha out of range, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"alpha out of range, OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n             // expected\n         }\n \n \n         try {\n             TestUtils.tTest(sample1, sample2, .95);\n-            Assert.fail(\"alpha out of range, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"alpha out of range, OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.tTest(sampleStats1, sampleStats2, .95);\n-            Assert.fail(\"alpha out of range, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"alpha out of range, OutOfRangeException expected\");\n+        } catch (OutOfRangeException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.tTest(sample1, tooShortObs, .01);\n-            Assert.fail(\"insufficient data, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.tTest(sampleStats1, (SummaryStatistics) null, .01);\n-            Assert.fail(\"insufficient data, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data, NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.tTest(sample1, tooShortObs);\n-            Assert.fail(\"insufficient data, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.tTest(sampleStats1, (SummaryStatistics) null);\n-            Assert.fail(\"insufficient data, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data, NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.t(sample1, tooShortObs);\n-            Assert.fail(\"insufficient data, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data, NumberIsTooSmallException expected\");\n+        } catch (NumberIsTooSmallException ex) {\n             // expected\n         }\n \n         try {\n             TestUtils.t(sampleStats1, (SummaryStatistics) null);\n-            Assert.fail(\"insufficient data, MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n+            Assert.fail(\"insufficient data, NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n     }", "timestamp": 1329075861, "metainfo": ""}