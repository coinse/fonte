{"sha": "076a21a02a93855080a9212002b16a4e09cbc209", "log": "removed deprecated methods this does not belong to commons-math yet, but will probably be merged some day  ", "commit": "\n--- a/src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java\n+++ b/src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java\n                         Estimator estimator) {\n     super(coefficients, estimator);\n     firstGuessNeeded = false;\n-  }\n-\n-  /**\n-   * Simple constructor.\n-   * @param maxIterations maximum number of iterations allowed\n-   * @param convergence criterion threshold below which we do not need\n-   * to improve the criterion anymore\n-   * @param steadyStateThreshold steady state detection threshold, the\n-   * problem has reached a steady state (read converged) if\n-   * <code>Math.abs (Jn - Jn-1) < Jn * convergence</code>, where\n-   * <code>Jn</code> and <code>Jn-1</code> are the current and\n-   * preceding criterion value (square sum of the weighted residuals\n-   * of considered measurements).\n-   * @param epsilon threshold under which the matrix of the linearized\n-   * problem is considered singular (see {@link\n-   * org.spaceroots.mantissa.linalg.SquareMatrix#solve(\n-   * org.spaceroots.mantissa.linalg.Matrix,double) SquareMatrix.solve}).\n-   * @deprecated replaced by {@link #HarmonicFitter(Estimator)}\n-   * as of version 7.0\n-   */\n-  public HarmonicFitter(int maxIterations, double convergence,\n-                        double steadyStateThreshold, double epsilon) {\n-    this(new GaussNewtonEstimator(maxIterations, convergence,\n-                                   steadyStateThreshold, epsilon));\n-  }\n-\n-  /**\n-   * Simple constructor.\n-\n-   * <p>This constructor can be used when a first estimate of the\n-   * coefficients is already known.</p>\n-\n-   * @param coefficients first estimate of the coefficients.\n-   * A reference to this array is hold by the newly created\n-   * object. Its elements will be adjusted during the fitting process\n-   * and they will be set to the adjusted coefficients at the end.\n-   * @param maxIterations maximum number of iterations allowed\n-   * @param convergence criterion threshold below which we do not need\n-   * to improve the criterion anymore\n-   * @param steadyStateThreshold steady state detection threshold, the\n-   * problem has reached a steady state (read converged) if\n-   * <code>Math.abs (Jn - Jn-1) < Jn * convergence</code>, where\n-   * <code>Jn</code> and <code>Jn-1</code> are the current and\n-   * preceding criterion value (square sum of the weighted residuals\n-   * of considered measurements).\n-   * @param epsilon threshold under which the matrix of the linearized\n-   * problem is considered singular (see {@link\n-   * org.spaceroots.mantissa.linalg.SquareMatrix#solve(\n-   * org.spaceroots.mantissa.linalg.Matrix,double) SquareMatrix.solve}).\n-\n-   * @deprecated replaced by {@link #HarmonicFitter(EstimatedParameter[],\n-   * Estimator)} as of version 7.0\n-   */\n-  public HarmonicFitter(EstimatedParameter[] coefficients,\n-                        int maxIterations, double convergence,\n-                        double steadyStateThreshold, double epsilon) {\n-    this(coefficients,\n-          new GaussNewtonEstimator(maxIterations, convergence,\n-                                   steadyStateThreshold, epsilon));\n   }\n \n   public double[] fit()\n--- a/src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java\n+++ b/src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java\n     super(coefficients, estimator);\n   }\n \n-  /** Simple constructor.\n-\n-   * <p>The polynomial fitter built this way are complete polynoms,\n-   * ie. a n-degree polynom has n+1 coefficients. In order to build\n-   * fitter for sparse polynoms (for example <code>a x^20 - b\n-   * x^30</code>, on should first build the coefficients array and\n-   * provide it to {@link\n-   * #PolynomialFitter(PolynomialCoefficient[], int, double, double,\n-   * double)}.</p>\n-   * @param degree maximal degree of the polynom\n-   * @param maxIterations maximum number of iterations allowed\n-   * @param convergence criterion threshold below which we do not need\n-   * to improve the criterion anymore\n-   * @param steadyStateThreshold steady state detection threshold, the\n-   * problem has reached a steady state (read converged) if\n-   * <code>Math.abs (Jn - Jn-1) < Jn * convergence</code>, where\n-   * <code>Jn</code> and <code>Jn-1</code> are the current and\n-   * preceding criterion value (square sum of the weighted residuals\n-   * of considered measurements).\n-   * @param epsilon threshold under which the matrix of the linearized\n-   * problem is considered singular (see {@link\n-   * org.spaceroots.mantissa.linalg.SquareMatrix#solve(\n-   * org.spaceroots.mantissa.linalg.Matrix,double) SquareMatrix.solve}).\n- \n-   * @deprecated replaced by {@link #PolynomialFitter(int,Estimator)}\n-   * as of version 7.0\n-   */\n-  public PolynomialFitter(int degree,\n-                          int maxIterations, double convergence,\n-                          double steadyStateThreshold, double epsilon) {\n-    this(degree,\n-         new GaussNewtonEstimator(maxIterations, steadyStateThreshold,\n-                                  convergence, epsilon));\n-  }\n-\n-  /** Simple constructor.\n-\n-   * <p>This constructor can be used either when a first estimate of\n-   * the coefficients is already known (which is of little interest\n-   * because the fit cost is the same whether a first guess is known or\n-   * not) or when one needs to handle sparse polynoms like <code>a\n-   * x^20 - b x^30</code>.</p>\n-\n-   * @param coefficients first estimate of the coefficients.\n-   * A reference to this array is hold by the newly created\n-   * object. Its elements will be adjusted during the fitting process\n-   * and they will be set to the adjusted coefficients at the end.\n-   * @param maxIterations maximum number of iterations allowed\n-   * @param convergence criterion threshold below which we do not need\n-   * to improve the criterion anymore\n-   * @param steadyStateThreshold steady state detection threshold, the\n-   * problem has reached a steady state (read converged) if\n-   * <code>Math.abs (Jn - Jn-1) < Jn * convergence</code>, where\n-   * <code>Jn</code> and <code>Jn-1</code> are the current and\n-   * preceding criterion value (square sum of the weighted residuals\n-   * of considered measurements).\n-   * @param epsilon threshold under which the matrix of the linearized\n-   * problem is considered singular (see {@link\n-   * org.spaceroots.mantissa.linalg.SquareMatrix#solve(\n-   * org.spaceroots.mantissa.linalg.Matrix,double) SquareMatrix.solve}).\n-\n-   * @deprecated replaced by {@link #PolynomialFitter(PolynomialCoefficient[],\n-   * Estimator)} as of version 7.0\n-   */\n-  public PolynomialFitter(PolynomialCoefficient[] coefficients,\n-                          int maxIterations, double convergence,\n-                          double steadyStateThreshold, double epsilon) {\n-    this(coefficients,\n-         new GaussNewtonEstimator(maxIterations, steadyStateThreshold,\n-                                  convergence, epsilon));\n-  }\n-\n   /** Get the value of the function at x according to the current parameters value.\n    * @param x abscissa at which the theoretical value is requested\n    * @return theoretical value at x", "timestamp": 1209043506, "metainfo": ""}