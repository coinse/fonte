{"sha": "8f7a24947517068bd76ccefc6f9e878d2f6ecd91", "log": "removed characters needing a specific encoding  ", "commit": "\n--- a/src/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/java/org/apache/commons/math/transform/FastFourierTransformer.java\n  */\n package org.apache.commons.math.transform;\n \n+import java.io.Serializable;\n import java.lang.reflect.Array;\n-import java.io.Serializable;\n-import java.util.Arrays;\n-import org.apache.commons.math.analysis.*;\n-import org.apache.commons.math.complex.*;\n+\n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.complex.Complex;\n \n /**\n  * Implements the <a href=\"http://mathworld.wolfram.com/FastFourierTransform.html\">\n      * Performs a multi-dimensional Fourier transform on a given\n      * array, using {@link #inversetransform2(Complex[])} and\n      * {@link #transform2(Complex[])} in a row-column implementation\n-     * in any number of dimensions with \u0398(N\u00d7log(N)) complexity with\n-     * N=n_1\u00d7n_2\u00d7n_3\u00d7\u22ef\u00d7n_d, n_x=number of elements in dimension x,\n+     * in any number of dimensions with O(N&times;log(N)) complexity with\n+     * N=n<sub>1</sub>&times;n<sub>2</sub>&times;n<sub>3</sub>&times;...&times;n<sub>d</sub>,\n+     * n<sub>x</sub>=number of elements in dimension x,\n      * and d=total number of dimensions.\n      *\n      * @param forward inverseTransform2 is preformed if this is false", "timestamp": 1228684598, "metainfo": ""}