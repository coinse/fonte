{"sha": "5873d5046420ae9127cb6410c42c390607f1f26d", "log": "Enabled reseeding of the random generators used by EmpiricalDistributionImpl and ValueServer.  Modified ValueServer to pass its RandomData instance to the EmpiricalDistributionImpl that it creates when used in DIGEST_MODE, so reseeding ValueServer works as expected.  Changed EmpiricalDistributionImpl constructor to take a RandomDataImpl instead of just RandomData (so the instance member could be reseeded.)  JIRA: MATH-654 Reported by David James  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n  */\n public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n+    /** Default bin count */\n+    public static final int DEFAULT_BIN_COUNT = 1000;\n+\n     /** Serializable version identifier */\n     private static final long serialVersionUID = 5729073523949762654L;\n \n     /** upper bounds of subintervals in (0,1) \"belonging\" to the bins */\n     private double[] upperBounds = null;\n \n-    /** RandomData instance to use in repeated calls to getNext() */\n+    /** RandomDataImpl instance to use in repeated calls to getNext() */\n     private final RandomDataImpl randomData;\n \n     /**\n      * Creates a new EmpiricalDistribution with the default bin count.\n      */\n     public EmpiricalDistributionImpl() {\n-        this(1000, null);\n+        this(DEFAULT_BIN_COUNT, new RandomDataImpl());\n     }\n \n     /**\n      * @param binCount number of bins\n      */\n     public EmpiricalDistributionImpl(int binCount) {\n-        this(binCount, null);\n+        this(binCount, new RandomDataImpl());\n     }\n \n     /**\n         this.binCount = binCount;\n         randomData = new RandomDataImpl(generator);\n         binStats = new ArrayList<SummaryStatistics>();\n+    }\n+\n+    /**\n+     * Creates a new EmpiricalDistribution with default bin count using the\n+     * provided {@link RandomGenerator} as the source of random data.\n+     *\n+     * @param generator random data generator (may be null, resulting in default JDK generator)\n+     * @since 3.0\n+     */\n+    public EmpiricalDistributionImpl(RandomGenerator generator) {\n+        this(DEFAULT_BIN_COUNT, generator);\n+    }\n+\n+    /**\n+     * Creates a new EmpiricalDistribution with the specified bin count using the\n+     * provided {@link RandomDataImpl} instance as the source of random data.\n+     *\n+     * @param binCount number of bins\n+     * @param randomData random data generator (may be null, resulting in default JDK generator)\n+     * @since 3.0\n+     */\n+    public EmpiricalDistributionImpl(int binCount, RandomDataImpl randomData) {\n+        this.binCount = binCount;\n+        this.randomData = randomData;\n+        binStats = new ArrayList<SummaryStatistics>();\n+    }\n+\n+    /**\n+     * Creates a new EmpiricalDistribution with default bin count using the\n+     * provided {@link RandomDataImpl} as the source of random data.\n+     *\n+     * @param randomData random data generator (may be null, resulting in default JDK generator)\n+     * @since 3.0\n+     */\n+    public EmpiricalDistributionImpl(RandomDataImpl randomData) {\n+        this(DEFAULT_BIN_COUNT, randomData);\n     }\n \n      /**\n--- a/src/main/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/main/java/org/apache/commons/math/random/ValueServer.java\n     private BufferedReader filePointer = null;\n \n     /** RandomDataImpl to use for random data generation. */\n-    private final RandomData randomData;\n+    private final RandomDataImpl randomData;\n \n     // Data generation modes ======================================\n \n     }\n \n     /**\n-     * Construct a ValueServer instance using a RandomData as its source\n+     * Construct a ValueServer instance using a RandomDataImpl as its source\n      * of random data.\n      *\n-     * @param randomData the RandomData instance used to source random data\n-     * @since 1.1\n-     */\n-    public ValueServer(RandomData randomData) {\n+     * @param randomData the RandomDataImpl instance used to source random data\n+     * @since 3.0\n+     */\n+    public ValueServer(RandomDataImpl randomData) {\n         this.randomData = randomData;\n     }\n \n      * @throws IOException if an I/O error occurs reading the input file\n      */\n     public void computeDistribution() throws IOException {\n-        empiricalDistribution = new EmpiricalDistributionImpl();\n-        empiricalDistribution.load(valuesFileURL);\n+        computeDistribution(EmpiricalDistributionImpl.DEFAULT_BIN_COUNT);\n     }\n \n     /**\n      */\n     public void computeDistribution(int binCount)\n             throws IOException {\n-        empiricalDistribution = new EmpiricalDistributionImpl(binCount);\n+        empiricalDistribution = new EmpiricalDistributionImpl(binCount, randomData);\n         empiricalDistribution.load(valuesFileURL);\n         mu = empiricalDistribution.getSampleStats().getMean();\n         sigma = empiricalDistribution.getSampleStats().getStandardDeviation();\n         this.sigma = sigma;\n     }\n \n+    /**\n+     * Reseeds the random data generator.\n+     *\n+     * @param seed Value with which to reseed the {@link RandomDataImpl}\n+     * used to generate random data.\n+     */\n+    public void reSeed(long seed) {\n+        randomData.reSeed(seed);\n+    }\n+\n     //------------- private methods ---------------------------------\n \n     /**\n--- a/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java\n         }\n         \n         // Verify no NPE with null generator argument\n-        dist = new EmpiricalDistributionImpl(5, null);\n+        dist = new EmpiricalDistributionImpl(5, (RandomGenerator) null);\n         dist.load(testData);\n         dist.getNextValue();\n     }\n--- a/src/test/java/org/apache/commons/math/random/ValueServerTest.java\n+++ b/src/test/java/org/apache/commons/math/random/ValueServerTest.java\n \n import java.io.EOFException;\n import java.net.URL;\n+import java.util.Arrays;\n \n import org.apache.commons.math.RetryRunner;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n       * these tests will fail even if the code is working as designed.\n       */\n     @Test\n-    public void testNextDigest() throws Exception{\n+    public void testNextDigest() throws Exception {\n         double next = 0.0;\n         double tolerance = 0.1;\n         vs.computeDistribution();\n         Assert.assertEquals(\"mean\", 5.069831575018909, stats.getMean(), tolerance);\n         Assert.assertEquals(\"std dev\", 1.0173699343977738, stats.getStandardDeviation(),\n             tolerance);\n-\n+    }\n+    \n+    /**\n+     * Verify that when provided with fixed seeds, stochastic modes\n+     * generate fixed sequences.  Verifies the fix for MATH-654.\n+     */\n+    @Test \n+    public void testFixedSeed() throws Exception {\n+        ValueServer valueServer = new ValueServer();\n+        URL url = getClass().getResource(\"testData.txt\");\n+        valueServer.setValuesFileURL(url);\n+        valueServer.computeDistribution();\n+        checkFixedSeed(valueServer, ValueServer.DIGEST_MODE);\n+        checkFixedSeed(valueServer, ValueServer.EXPONENTIAL_MODE);\n+        checkFixedSeed(valueServer, ValueServer.GAUSSIAN_MODE);\n+        checkFixedSeed(valueServer, ValueServer.UNIFORM_MODE);\n+    }\n+    \n+    /**\n+     * Do the check for {@link #testFixedSeed()}\n+     * @param mode ValueServer mode\n+     */\n+    private void checkFixedSeed(ValueServer valueServer, int mode) throws Exception {\n+        valueServer.reSeed(1000);\n+        valueServer.setMode(mode);\n+        double[][] values = new double[2][100];\n+        for (int i = 0; i < 100; i++) {\n+            values[0][i] = valueServer.getNext();\n+        }\n+        valueServer.reSeed(1000);\n+        for (int i = 0; i < 100; i++) {\n+            values[1][i] = valueServer.getNext();\n+        }\n+        Assert.assertTrue(Arrays.equals(values[0], values[1])); \n     }\n \n     /**", "timestamp": 1314834590, "metainfo": ""}