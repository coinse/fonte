{"sha": "f2b574e1717969df425412a5ecd679969f6f7c35", "log": "Made long conversion conistent. Improved test coverage. JIRA: MATH-224.  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java\n             }\n             sum += current.getSum();\n             final double oldN = n;\n-            final long curN = current.getN();\n+            final double curN = current.getN();\n             n += curN;\n             final double meanDiff = current.getMean() - mean;\n             mean = sum / n;\n--- a/src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java\n         assertEquals(\"Wrong aggregate sum\", 42.0, aggregate.getSum());\n     }\n     \n+    /**\n+     * Test aggregate function by randomly generating a dataset of 10-100 values\n+     * from [-100, 100], dividing it into 2-5 partitions, computing stats for each\n+     * partition and comparing the result of aggregate(...) applied to the collection\n+     * of per-partition SummaryStatistics with a single SummaryStatistics computed\n+     * over the full sample.\n+     * \n+     * @throws Exception\n+     */\n     public void testAggregate() throws Exception {\n         \n         // Generate a random sample and random partition\n         // Compare values\n         StatisticalSummaryValues aggregatedStats = AggregateSummaryStatistics.aggregate(aggregate);\n         assertEquals(totalStats.getSummary(), aggregatedStats, 10E-12);\n+    }\n+    \n+    \n+    public void testAggregateDegenerate() throws Exception {\n+        double[] totalSample = {1, 2, 3, 4, 5};\n+        double[][] subSamples = {{1}, {2}, {3}, {4}, {5}};\n+        \n+        // Compute combined stats directly\n+        SummaryStatistics totalStats = new SummaryStatistics();\n+        for (int i = 0; i < totalSample.length; i++) {\n+            totalStats.addValue(totalSample[i]);\n+        }\n+        \n+        // Now compute subsample stats individually and aggregate\n+        SummaryStatistics[] subSampleStats = new SummaryStatistics[5];\n+        for (int i = 0; i < 5; i++) {\n+            subSampleStats[i] = new SummaryStatistics();\n+        }\n+        Collection<SummaryStatistics> aggregate = new ArrayList<SummaryStatistics>();\n+        for (int i = 0; i < 5; i++) {\n+            for (int j = 0; j < subSamples[i].length; j++) { \n+                subSampleStats[i].addValue(subSamples[i][j]);\n+            }\n+            aggregate.add(subSampleStats[i]);\n+        }\n+        \n+        // Compare values\n+        StatisticalSummaryValues aggregatedStats = AggregateSummaryStatistics.aggregate(aggregate);\n+        assertEquals(totalStats.getSummary(), aggregatedStats, 10E-12);\n+    }\n+    \n+    public void testAggregateSpecialValues() throws Exception {\n+        double[] totalSample = {Double.POSITIVE_INFINITY, 2, 3, Double.NaN, 5};\n+        double[][] subSamples = {{Double.POSITIVE_INFINITY, 2}, {3}, {Double.NaN}, {5}};\n+        \n+        // Compute combined stats directly\n+        SummaryStatistics totalStats = new SummaryStatistics();\n+        for (int i = 0; i < totalSample.length; i++) {\n+            totalStats.addValue(totalSample[i]);\n+        }\n+        \n+        // Now compute subsample stats individually and aggregate\n+        SummaryStatistics[] subSampleStats = new SummaryStatistics[5];\n+        for (int i = 0; i < 4; i++) {\n+            subSampleStats[i] = new SummaryStatistics();\n+        }\n+        Collection<SummaryStatistics> aggregate = new ArrayList<SummaryStatistics>();\n+        for (int i = 0; i < 4; i++) {\n+            for (int j = 0; j < subSamples[i].length; j++) { \n+                subSampleStats[i].addValue(subSamples[i][j]);\n+            }\n+            aggregate.add(subSampleStats[i]);\n+        }\n+        \n+        // Compare values\n+        StatisticalSummaryValues aggregatedStats = AggregateSummaryStatistics.aggregate(aggregate);\n+        assertEquals(totalStats.getSummary(), aggregatedStats, 10E-12);\n+        \n     }\n     \n     /**", "timestamp": 1246991348, "metainfo": ""}