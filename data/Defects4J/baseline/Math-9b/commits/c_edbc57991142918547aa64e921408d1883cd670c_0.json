{"sha": "edbc57991142918547aa64e921408d1883cd670c", "log": "Adding tests for kurtosis and skew to UnivariateImpl testcase. Correcting initialization of moments in UnivariateImpl.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n  * @author <a href=\"mailto:mdiggory@apache.org\">Mark Diggory</a>\n  * @author Brent Worden\n  * @author <a href=\"mailto:HotFusionMan@Yahoo.com\">Albert Davidson Chou</a>\n- * @version $Revision: 1.11 $ $Date: 2003/06/18 13:57:24 $\n+ * @version $Revision: 1.12 $ $Date: 2003/06/21 02:08:23 $\n  *\n */\n public class UnivariateImpl implements Univariate, Serializable {\n     private double mean = Double.NaN;\n \n     /** second moment of values that have been added */\n-    private double s2 = Double.NaN;\n+    private double m2 = Double.NaN;\n \n     /** third moment of values that have been added */\n-    private double s3 = Double.NaN;\n+    private double m3 = Double.NaN;\n \n     /** fourth moment of values that have been added */\n-    private double s4 = Double.NaN;\n+    private double m4 = Double.NaN;\n \n     /** variance of values that have been added */\n     private double variance = Double.NaN;\n                 sumLog = 0.0;\n                 sum = min = max = mean = value;\n                 sumsq = Math.pow(value, 2);\n-                variance = s2 = 0.0;\n+                variance = m2 = 0.0;\n                 skewness = kurtosis = 0.0;\n-\n+                m2 = m3 = m4 = 0.0;\n             } else {\n                 /* otherwise calc these values */\n                 sumLog += Math.log(value);\n                 double dev = value - mean;\n                 double v = dev / ((double) n);\n                 double v2 = Math.pow(v, 2);\n-                double n1 = ((double) n - 1);\n-\n-                s4 += v\n-                    * (\n-                        - 4.0 * s3\n-                        + v\n-                            * (6.0 * s2\n-                                + n1 * (1 + Math.pow((double) n, 3)) * v2));\n-\n-                s3 += v\n-                    * (-3.0 * s2 + (double) n * n1 * (n - 2) * Math.pow(v, 2));\n-                s2 += n1 * dev * v;\n+\n+                double n0 = (double) n;\n+                double n1 = (double) (n - 1);\n+                double n2 = (double) (n - 2);\n+                double n3 = (double) (n - 3);\n+\n+                m4 =\n+                    m4\n+                        - (4.0 * v * m3)\n+                        + (6.0 * v2 * m2)\n+                        + ((n0 * n0) - 3 * n1) * (v2 * v2 * n1 * n0);\n+\n+                m3 = m3 - (3.0 * v * m2) + (n0 * n1 * n2 * v2 * v);\n+\n+                m2 += n1 * dev * v;\n \n                 mean += v;\n-                variance = (n <= 1) ? 0.0 : s2 / n1;\n+\n+                variance = (n <= 1) ? 0.0 : m2 / n1;\n+\n                 skewness =\n-                    (n <= 2)\n+                    (n <= 2 || variance < 10E-20)\n                         ? 0.0\n-                        : s3 / ((double) n * Math.sqrt(variance) * variance);\n+                        : (n0 * m3) / (n1 * n2 * Math.sqrt(variance) * variance);\n+\n                 kurtosis =\n-                    (n <= 3)\n+                    (n <= 3 || variance < 10E-20)\n                         ? 0.0\n-                        : s4 / ((double) n * Math.pow(variance, 2)) - 3;\n+                        : (n0 * (n0 + 1) * m4 - 3 * m2 * m2 * n1)\n+                            / (n1 * n2 * n3 * variance * variance);\n             }\n         }\n     }\n         this.min = this.max = Double.NaN;\n         this.sumLog = this.mean = Double.NaN;\n         this.variance = this.skewness = this.kurtosis = Double.NaN;\n-        this.s2 = this.s3 = this.s4 = Double.NaN;\n+        this.m2 = this.m3 = this.m4 = Double.NaN;\n         if (doubleArray != null)\n             doubleArray = new FixedDoubleArray(windowSize);\n     }\n--- a/src/test/org/apache/commons/math/stat/UnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/UnivariateImplTest.java\n  *\n  * @author Phil Steitz\n  * @author Tim Obrien\n- * @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/06/21 02:08:23 $\n  */\n \n public final class UnivariateImplTest extends TestCase {\n         //FiXME: test all other NaN contract specs\n     }\n \n+    public void testSkewAndKurtosis() {\n+        Univariate u = new UnivariateImpl();\n+        \n+        double[] testArray = \n+        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+        for( int i = 0; i < testArray.length; i++) {\n+            u.addValue( testArray[i]);\n+        }\n+        \n+        assertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+        assertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+        assertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+        assertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n }", "timestamp": 1056161303, "metainfo": ""}