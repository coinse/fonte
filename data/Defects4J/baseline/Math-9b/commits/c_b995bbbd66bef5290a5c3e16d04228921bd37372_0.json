{"sha": "b995bbbd66bef5290a5c3e16d04228921bd37372", "log": "new approach to testing against certified data sets.  PR: 27692 Obtained from: Brent Worden Submitted by: Brent Worden   ", "commit": "\n--- a/src/test/org/apache/commons/math/TestUtils.java\n+++ b/src/test/org/apache/commons/math/TestUtils.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n-import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n+import junit.framework.Assert;\n+\n import org.apache.commons.math.complex.Complex;\n \n-import junit.framework.Assert;\n-\n /**\n- * @version $Revision: 1.10 $ $Date: 2004/02/21 21:35:16 $\n+ * @version $Revision: 1.11 $ $Date: 2004/03/18 05:52:37 $\n  */\n public class TestUtils {\n     /**\n     }\n \n     public static void assertEquals(double expected, double actual, double delta) {\n-        // check for NaN\n-        if(Double.isNaN(expected)){\n-            Assert.assertTrue(Double.isNaN(actual));\n-        } else {\n-            Assert.assertEquals(expected, actual, delta);\n-        }\n+    \tassertEquals(null, expected, actual, delta);\n     }\n \n+    public static void assertEquals(String msg, double expected, double actual, double delta) {\n+    \t// check for NaN\n+    \tif(Double.isNaN(expected)){\n+    \t\tAssert.assertTrue(msg, Double.isNaN(actual));\n+    \t} else {\n+    \t\tAssert.assertEquals(msg, expected, actual, delta);\n+    \t}\n+    }\n+    \n     /**\n      * \n      */\n--- a/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n+++ b/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n import java.io.InputStreamReader;\n import org.apache.commons.logging.LogFactory;\n import org.apache.commons.logging.Log;\n+\n /**\n  * Test cases for the {@link DescriptiveStatistics} class.\n- * @version $Revision: 1.15 $ $Date: 2004/02/21 21:35:17 $\n+ * @version $Revision: 1.16 $ $Date: 2004/03/18 05:52:36 $\n  */\n public class CertifiedDataTest extends TestCase  {\n \n \t\t\te.printStackTrace();\n \t\t}\n \n-\t\tloadStats(\"data/Lew.txt\", u);\n-\t\tassertEquals(\"Lew: std\", std, u.getStandardDeviation(), .000000000001);\n-\t\tassertEquals(\"Lew: mean\", mean, u.getMean(), .000000000001);\n-\t\t\n-\t\tloadStats(\"data/Lottery.txt\", u);\n-\t\tassertEquals(\"Lottery: std\", std, u.getStandardDeviation(), .000000000001);\n-\t\tassertEquals(\"Lottery: mean\", mean, u.getMean(), .000000000001);\t\n-\t\t\n \t\tloadStats(\"data/PiDigits.txt\", u);\n \t\tassertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .0000000000001);\n \t\tassertEquals(\"PiDigits: mean\", mean, u.getMean(), .0000000000001);\t\n \n \t\tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n \t\t\n-\t\tloadStats(\"data/Lew.txt\", u);\n-\t\tassertEquals(\"Lew: std\", std, u.getStandardDeviation(), .000000000001);\n-\t\tassertEquals(\"Lew: mean\", mean, u.getMean(), .000000000001);\n-\t\t\n-\t\tloadStats(\"data/Lottery.txt\", u);\n-\t\tassertEquals(\"Lottery: std\", std, u.getStandardDeviation(), .000000000001);\n-\t\tassertEquals(\"Lottery: mean\", mean, u.getMean(), .000000000001);\t\t\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n \t\tloadStats(\"data/PiDigits.txt\", u);\n \t\tassertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .0000000000001);\n \t\tassertEquals(\"PiDigits: mean\", mean, u.getMean(), .0000000000001);\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.stat.data;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.commons.beanutils.PropertyUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.stat.DescriptiveStatistics;\n+import org.apache.commons.math.stat.SummaryStatistics;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2004/03/18 05:52:37 $\n+ */\n+public abstract class CertifiedDataAbstractTest extends TestCase {\n+\t\n+\tprivate DescriptiveStatistics descriptives;\n+\t\n+\tprivate SummaryStatistics summaries;\n+\t\n+\tprivate Map certifiedValues;\n+\t\n+\tprotected void setUp() throws Exception {\n+\t\tdescriptives = DescriptiveStatistics.newInstance();\n+\t\tsummaries = SummaryStatistics.newInstance();\n+\t\tcertifiedValues = new HashMap();\n+\t\t\n+\t\tloadData();\n+\t}\n+\n+\tprivate void loadData() throws IOException {\n+\t\tBufferedReader in = null;\n+\n+\t\ttry {\n+\t\t\tURL resourceURL = getClass().getClassLoader().getResource(getResourceName());\n+\t\t\tin = new BufferedReader(new InputStreamReader(resourceURL.openStream()));\n+\t\t\t\n+\t\t\tString line = in.readLine();\n+\t\t\twhile (line != null) {\n+\t\t\t\tline = StringUtils.trimToNull(line);\n+\t\t\t\tif (line == null) {\n+\t\t\t\t\t// empty line\n+\t\t\t\t} else if (line.startsWith(\"#\")) {\n+\t\t\t\t\t// comment\n+\t\t\t\t} else {\n+\t\t\t\t\tint n = line.indexOf('=');\n+\t\t\t\t\tif (n == -1) {\n+\t\t\t\t\t\t// data value\n+\t\t\t\t\t\tdouble value = Double.parseDouble(line);\n+\t\t\t\t\t\tdescriptives.addValue(value);\n+\t\t\t\t\t\tsummaries.addValue(value);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t// certified value\n+\t\t\t\t\t\tString name = line.substring(0, n).trim();\n+\t\t\t\t\t\tString valueString = line.substring(n + 1).trim();\n+\t\t\t\t\t\tDouble value = new Double(valueString);\n+\t\t\t\t\t\tcertifiedValues.put(name, value);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tline = in.readLine();\n+\t\t\t}\n+\t\t} finally {\n+\t\t\tif (in != null) {\n+\t\t\t\tin.close();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * @return\n+\t */\n+\tprotected abstract String getResourceName();\n+\n+\tprotected double getMaximumAbsoluteError() {\n+\t\treturn 1.0e-5;\n+\t}\n+\t\n+\tprotected void tearDown() throws Exception {\n+\t\tdescriptives.clear();\n+\t\tdescriptives = null;\n+\t\t\n+\t\tsummaries.clear();\n+\t\tsummaries = null;\n+\t\t\n+\t\tcertifiedValues.clear();\n+\t\tcertifiedValues = null;\n+\t}\n+\t\n+\tpublic void testCertifiedValues() throws Exception {\n+\t\tIterator iter = certifiedValues.keySet().iterator();\n+\t\twhile (iter.hasNext()) {\n+\t\t\tString name = iter.next().toString();\n+\t\t\tDouble expectedValue = (Double)certifiedValues.get(name);\n+\t\t\ttry {\n+\t\t\t\tDouble summariesValue = (Double)PropertyUtils.getProperty(summaries, name);\n+\t\t\t\tTestUtils.assertEquals(\"summary value for \" + name + \" is incorrect.\",\n+\t\t\t\t\t\tsummariesValue.doubleValue(), expectedValue.doubleValue(), getMaximumAbsoluteError());\n+\t\t\t} catch (Exception ex) {\n+\t\t\t}\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\tDouble descriptivesValue = (Double)PropertyUtils.getProperty(descriptives, name);\n+\t\t\t\tTestUtils.assertEquals(\"descriptive value for \" + name + \" is incorrect.\",\n+\t\t\t\t\t\tdescriptivesValue.doubleValue(), expectedValue.doubleValue(), getMaximumAbsoluteError());\n+\t\t\t} catch (Exception ex) {\n+\t\t\t}\n+\t\t}\n+ \t}\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/data/LewTest.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.stat.data;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2004/03/18 05:52:37 $\n+ */\n+public class LewTest extends CertifiedDataAbstractTest {\n+\n+\tprotected String getResourceName() {\n+\t\treturn \"org/apache/commons/math/stat/data/Lew.txt\";\n+\t}\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/data/LotteryTest.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.stat.data;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2004/03/18 05:52:37 $\n+ */\n+public class LotteryTest extends CertifiedDataAbstractTest {\n+\n+\tprotected String getResourceName() {\n+\t\treturn \"org/apache/commons/math/stat/data/Lottery.txt\";\n+\t}\n+}", "timestamp": 1079589157, "metainfo": ""}