{"sha": "1a46b43aed7d8ee2541e294ed6c11c178de3241e", "log": "Adding serialversionUID to control versioning and allow for implementations that would like to maintain serialization.   ", "commit": "\n--- a/src/java/org/apache/commons/math/ConvergenceException.java\n+++ b/src/java/org/apache/commons/math/ConvergenceException.java\n  * Error thrown when a numerical computation can not be performed because the\n  * numerical result failed to converge to a finite value.\n  * \n- * @version $Revision: 1.12 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.13 $ $Date: 2004/06/02 00:05:28 $\n  */\n public class ConvergenceException extends MathException implements Serializable{\n+    \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -3657394299929217890L;\n+    \n     /**\n      * Default constructor.\n      */\n--- a/src/java/org/apache/commons/math/MathConfigurationException.java\n+++ b/src/java/org/apache/commons/math/MathConfigurationException.java\n \n /**\n  * Signals a configuration problem with any of the factory methods.\n- * @version $Revision: 1.16 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/02 00:05:28 $\n  */\n public class MathConfigurationException extends MathException implements Serializable {\n+    \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -7958299004965931723L;\n \n     /**\n      * Default constructor.\n--- a/src/java/org/apache/commons/math/MathException.java\n+++ b/src/java/org/apache/commons/math/MathException.java\n \n /**\n  * A generic exception indicating problems in the math package.\n- * @version $Revision: 1.15 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.16 $ $Date: 2004/06/02 00:05:28 $\n  */\n public class MathException extends NestableException implements Serializable {\n \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -8594613561393443827L;\n+    \n     /**\n      * Constructs a MathException\n      */\n--- a/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n  * Implements the <a href=\"http://mathworld.wolfram.com/Bisection.html\">bisection algorithm</a>\n  *  for finding zeros of univariate real functions.  This algorithm will find only one zero in the given interval.\n  * The function should be continuous but not necessarily smooth.\n- * @version $Revision: 1.15 $ $Date: 2004/04/27 16:42:33 $\n+ * @version $Revision: 1.16 $ $Date: 2004/06/02 00:11:08 $\n  */\n public class BisectionSolver extends UnivariateRealSolverImpl implements Serializable {\n+    \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 7137520585963699578L;\n     \n     /**\n      * Construct a solver for the given function.\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n  * functions. This algorithm will find only one zero in the given interval. \n  * The function should be continuous but not necessarily smooth.\n  *  \n- * @version $Revision: 1.14 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.15 $ $Date: 2004/06/02 00:11:08 $\n  */\n public class BrentSolver extends UnivariateRealSolverImpl implements Serializable {\n+    \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 3350616277306882875L;\n+\n     /**\n      * Construct a solver for the given function.\n      * @param f function to solve.\n--- a/src/java/org/apache/commons/math/analysis/NewtonSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/NewtonSolver.java\n  * algorithm will find only one zero in the given interval.  The function should\n  * be continuous but not necessarily smooth.\n  *\n- * @version $Revision: 1.3 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.4 $ $Date: 2004/06/02 00:11:08 $\n  */\n public class NewtonSolver extends UnivariateRealSolverImpl implements Serializable {\n+    \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 2606474895443431607L;\n     \n     /** The first derivative of the target function. */\n     private UnivariateRealFunction derivative;\n--- a/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n  * <a href=\"http://mathworld.wolfram.com/HornersMethod.html\">Horner's Method</a>\n  *  is used to evaluate the function.   \n  * \n- * @version $Revision: 1.9 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.10 $ $Date: 2004/06/02 00:11:08 $\n  */\n public class PolynomialFunction implements DifferentiableUnivariateRealFunction, Serializable {\n \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 3322454535052136809L;\n+    \n     /**\n      * The coefficients of the polynomial, ordered by degree -- i.e.,  coefficients[0] is the constant term\n      * and coefficients[n] is the coefficient of x^n where n is the degree of the polynomial.\n--- a/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n  * <li> Let <code>j</code> be the index of the largest knot point that is less than or equal to <code>x</code>. \n  *  The value returned is <br> <code>polynomials[j](x - knot[j])</code></li></ol>\n  * \n- * @version $Revision: 1.4 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.5 $ $Date: 2004/06/02 00:11:08 $\n  */\n public class PolynomialSplineFunction implements UnivariateRealFunction, Serializable {\n    \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 7011031166416885789L;\n+    \n     /** Spline segment interval delimiters (knots).   Size is n+1 for n segments. */\n     private double knots[];\n \n--- a/src/java/org/apache/commons/math/analysis/SecantSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/SecantSolver.java\n  * <p>\n  * The function is supposed to be continuous but not necessarily smooth.\n  *  \n- * @version $Revision: 1.14 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.15 $ $Date: 2004/06/02 00:11:08 $\n  */\n public class SecantSolver extends UnivariateRealSolverImpl implements Serializable {\n+    \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 1984971194738974867L;\n+    \n     /**\n      * Construct a solver for the given function.\n      * @param f function to solve.\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n  * Provide a default implementation for several functions useful to generic\n  * solvers.\n  *  \n- * @version $Revision: 1.12 $ $Date: 2004/04/27 16:42:33 $\n+ * @version $Revision: 1.13 $ $Date: 2004/06/02 00:11:08 $\n  */\n-public abstract class UnivariateRealSolverImpl\n-    implements UnivariateRealSolver, Serializable {\n-\n+public abstract class UnivariateRealSolverImpl implements UnivariateRealSolver, Serializable {\n+\n+    static final long serialVersionUID = 1112491292565386596L;\n+    \n     /** Maximum absolute error. */\n     protected double absoluteAccuracy;\n \n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n  * real and imaginary part.\n  * \n  * @author Apache Software Foundation\n- * @version $Revision: 1.7 $ $Date: 2004/02/29 19:52:01 $\n+ * @version $Revision: 1.8 $ $Date: 2004/06/02 00:07:01 $\n  */\n public class Complex implements Serializable  {\n \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -6530173849413811929L;\n+    \n     /** The square root of -1. A number representing \"0.0 + 1.0i\".*/    \n     public static final Complex I = new Complex(0.0, 1.0);\n     \n--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java\n \n package org.apache.commons.math.complex;\n \n+import java.io.Serializable;\n import java.text.FieldPosition;\n import java.text.Format;\n import java.text.NumberFormat;\n  * can be configured.\n  *\n  * @author Apache Software Foundation\n- * @version $Revision: 1.7 $ $Date: 2004/06/01 13:47:17 $\n+ * @version $Revision: 1.8 $ $Date: 2004/06/02 00:07:01 $\n  */\n-public class ComplexFormat extends Format {\n+public class ComplexFormat extends Format implements Serializable {\n+    \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -6337346779577272306L;\n     \n     /** The default complex format. */ \n \tprivate static final ComplexFormat DEFAULT = new ComplexFormat();\n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n  */\n package org.apache.commons.math.distribution;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealSolverUtils;\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.22 $ $Date: 2004/05/30 01:24:02 $\n+ * @version $Revision: 1.23 $ $Date: 2004/06/02 00:15:16 $\n  */\n public abstract class AbstractContinuousDistribution\n-    implements ContinuousDistribution {\n+    implements ContinuousDistribution, Serializable {\n \n+    static final long serialVersionUID = -38038050983108802L;\n+    \n     /**\n      * Default constructor.\n      */\n--- a/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n  */\n package org.apache.commons.math.distribution;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.MathException;\n \n \n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.15 $ $Date: 2004/05/19 14:16:31 $\n+ * @version $Revision: 1.16 $ $Date: 2004/06/02 00:15:16 $\n  */\n public abstract class AbstractDiscreteDistribution\n-    implements DiscreteDistribution {\n+    implements DiscreteDistribution, Serializable {\n         \n+    static final long serialVersionUID = -1146319659338487221L;\n+    \n     /**\n      * Default constructor.\n      */\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n /**\n  * The default implementation of {@link BinomialDistribution}.\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/05/19 14:16:31 $\n+ * @version $Revision: 1.15 $ $Date: 2004/06/02 00:15:16 $\n  */\n public class BinomialDistributionImpl\n     extends AbstractDiscreteDistribution\n     implements BinomialDistribution, Serializable {\n+\n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 6751309484392813623L;\n \n     /** The number of trials. */\n     private int numberOfTrials;\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n /**\n  * The default implementation of {@link ChiSquaredDistribution}\n  * \n- * @version $Revision: 1.16 $ $Date: 2004/05/19 14:16:31 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/02 00:15:16 $\n  */\n public class ChiSquaredDistributionImpl\n     extends AbstractContinuousDistribution\n     implements ChiSquaredDistribution, Serializable  {\n     \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -8352658048349159782L;\n+\n     /** Internal Gamma distribution. */    \n     private GammaDistribution gamma;\n     \n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n /**\n  * The default implementation of {@link ExponentialDistribution}\n  * \n- * @version $Revision: 1.15 $ $Date: 2004/05/19 14:16:31 $\n+ * @version $Revision: 1.16 $ $Date: 2004/06/02 00:15:16 $\n  */\n public class ExponentialDistributionImpl\n     implements ExponentialDistribution, Serializable  {\n \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 2401296428283614780L;\n+    \n     /** The mean of this distribution. */\n     private double mean;\n     \n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.FDistribution}.\n  * \n- * @version $Revision: 1.16 $ $Date: 2004/05/19 14:16:31 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/02 00:15:16 $\n  */\n public class FDistributionImpl\n     extends AbstractContinuousDistribution\n     implements FDistribution, Serializable  {\n+\n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -8516354193418641566L;\n \n     /** The numerator degrees of freedom*/\n     private double numeratorDegreesOfFreedom;\n--- a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n /**\n  * The default implementation of {@link GammaDistribution}\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/05/19 14:16:31 $\n+ * @version $Revision: 1.20 $ $Date: 2004/06/02 00:15:16 $\n  */\n public class GammaDistributionImpl extends AbstractContinuousDistribution\n     implements GammaDistribution, Serializable  {\n+\n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -3239549463135430361L;\n \n     /** The shape parameter. */\n     private double alpha;\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n /**\n  * The default implementation of {@link HypergeometricDistribution}.\n  * \n- * @version $Revision: 1.13 $ $Date: 2004/05/19 14:16:31 $\n+ * @version $Revision: 1.14 $ $Date: 2004/06/02 00:15:16 $\n  */\n public class HypergeometricDistributionImpl extends AbstractDiscreteDistribution\n     implements HypergeometricDistribution, Serializable \n {\n+\n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -436928820673516179L;\n \n     /** The number of successes in the population. */\n     private int numberOfSuccesses;\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.NormalDistribution}.\n  * \n- * @version $Revision: 1.10 $ $Date: 2004/05/19 15:06:44 $\n+ * @version $Revision: 1.11 $ $Date: 2004/06/02 00:15:16 $\n  */\n public class NormalDistributionImpl extends AbstractContinuousDistribution \n \t\timplements NormalDistribution, Serializable {\n     \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 8589540077390120676L;\n+\n     /** The mean of this distribution. */\n \tprivate double mean = 0;\n     \n--- a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.TDistribution}.\n  * \n- * @version $Revision: 1.16 $ $Date: 2004/05/19 14:16:31 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/02 00:15:16 $\n  */\n public class TDistributionImpl\n     extends AbstractContinuousDistribution\n     implements TDistribution, Serializable  {\n \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -5852615386664158222L;\n+    \n     /** The degrees of freedom*/\n     private double degreesOfFreedom;\n \n--- a/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\n+++ b/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\n  * Thrown when a system attempts an operation on a matrix, and\n  * that matrix does not satisfy the preconditions for the\n  * aforementioned operation.\n- * @version $Revision: 1.4 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.5 $ $Date: 2004/06/02 00:06:18 $\n  */\n public class InvalidMatrixException extends NestableRuntimeException {\n+    \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 5318837237354354107L;\n+    \n     /**\n      * Default constructor.\n      */\n--- a/src/java/org/apache/commons/math/linear/MatrixIndexException.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixIndexException.java\n /**\n  * Thrown when an operation addresses a matrix coordinate (row,col)\n  * which is outside of the dimensions of a matrix.\n- * @version $Revision: 1.4 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.5 $ $Date: 2004/06/02 00:06:18 $\n  */\n public class MatrixIndexException extends NestableRuntimeException {\n+    \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -1341109412864309526L;\n+    \n     /**\n      * Default constructor.\n      */\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n  * before using any of the methods above.\n  *\n- * @version $Revision: 1.20 $ $Date: 2004/05/19 14:16:32 $\n+ * @version $Revision: 1.21 $ $Date: 2004/06/02 00:06:18 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 4237564493130426188L;\n+    \n \t/** Entries of the matrix */\n \tprivate double data[][] = null;\n \n--- a/src/java/org/apache/commons/math/util/ContinuedFraction.java\n+++ b/src/java/org/apache/commons/math/util/ContinuedFraction.java\n  * </ul>\n  * </p>\n  * \n- * @version $Revision: 1.12 $ $Date: 2004/04/26 20:47:07 $\n+ * @version $Revision: 1.13 $ $Date: 2004/06/02 00:04:11 $\n  */\n public abstract class ContinuedFraction implements Serializable {\n+    \n+    /** Serialization UID */\n+    static final long serialVersionUID = 1768555336266158242L;\n+    \n     /** Maximum allowed numerical error. */\n     private static final double DEFAULT_EPSILON = 10e-9;\n ", "timestamp": 1086135316, "metainfo": ""}