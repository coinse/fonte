{"sha": "aa6149b287a69c64fa513bc4cf987a75dc727876", "log": "added a test derived from an invalid issue  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java\n \n     }\n \n+    @Test\n+    public void testMath372()\n+    throws OptimizationException, FunctionEvaluationException {\n+        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n+        CurveFitter curveFitter = new CurveFitter(optimizer);\n+\n+        curveFitter.addObservedPoint( 15,  4443);\n+        curveFitter.addObservedPoint( 31,  8493);\n+        curveFitter.addObservedPoint( 62, 17586);\n+        curveFitter.addObservedPoint(125, 30582);\n+        curveFitter.addObservedPoint(250, 45087);\n+        curveFitter.addObservedPoint(500, 50683);\n+\n+        ParametricRealFunction f = new ParametricRealFunction() {\n+\n+            public double value(double x, double[] parameters) {\n+\n+                double a = parameters[0];\n+                double b = parameters[1];\n+                double c = parameters[2];\n+                double d = parameters[3];\n+\n+                return d + ((a - d) / (1 + Math.pow(x / c, b)));\n+            }\n+\n+            public double[] gradient(double x, double[] parameters) {\n+\n+                double a = parameters[0];\n+                double b = parameters[1];\n+                double c = parameters[2];\n+                double d = parameters[3];\n+\n+                double[] gradients = new double[4];\n+                double den = 1 + Math.pow(x / c, b);\n+\n+                // derivative with respect to a\n+                gradients[0] = 1 / den;\n+\n+                // derivative with respect to b\n+                // in the reported (invalid) issue, there was a sign error here\n+                gradients[1] = -((a - d) * Math.pow(x / c, b) * Math.log(x / c)) / (den * den);\n+\n+                // derivative with respect to c\n+                gradients[2] = (b * Math.pow(x / c, b - 1) * (x / (c * c)) * (a - d)) / (den * den);\n+\n+                // derivative with respect to d\n+                gradients[3] = 1 - (1 / den);\n+\n+                return gradients;\n+\n+            }\n+        };\n+\n+        double[] initialGuess = new double[] { 1500, 0.95, 65, 35000 };\n+        double[] estimatedParameters = curveFitter.fit(f, initialGuess);\n+\n+        Assert.assertEquals( 2411.00, estimatedParameters[0], 500.00);\n+        Assert.assertEquals(    1.62, estimatedParameters[1],   0.04);\n+        Assert.assertEquals(  111.22, estimatedParameters[2],   0.30);\n+        Assert.assertEquals(55347.47, estimatedParameters[3], 300.00);\n+        Assert.assertTrue(optimizer.getRMS() < 600.0);\n+\n+    }\n+\n     private static class SimpleInverseFunction implements ParametricRealFunction {\n \n         public double value(double x, double[] parameters) {", "timestamp": 1275832746, "metainfo": ""}