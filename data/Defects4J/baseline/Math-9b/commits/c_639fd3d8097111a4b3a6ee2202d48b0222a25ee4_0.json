{"sha": "639fd3d8097111a4b3a6ee2202d48b0222a25ee4", "log": "Added G-test to TestUtils. JIRA: MATH-878  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/inference/TestUtils.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/TestUtils.java\n     /** Singleton OneWayAnova instance. */\n     private static final OneWayAnova ONE_WAY_ANANOVA = new OneWayAnova();\n \n+    /** Singleton G-Test instance. */\n+    private static final GTest G_TEST = new GTest();\n+\n     /**\n      * Prevent instantiation.\n      */\n         return ONE_WAY_ANANOVA.anovaTest(categoryData, alpha);\n     }\n \n+     /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#g(double[], long[])\n+     */\n+    public static double g(final double[] expected, final long[] observed)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException {\n+        return G_TEST.g(expected, observed);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#gTest( double[],  long[] )\n+     */\n+    public static double gTest(final double[] expected, final long[] observed)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException, MaxCountExceededException {\n+        return G_TEST.gTest(expected, observed);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#gTestIntrinsic(double[], long[] )\n+     */\n+    public static double gTestIntrinsic(final double[] expected, final long[] observed)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException, MaxCountExceededException {\n+        return G_TEST.gTestIntrinsic(expected, observed);\n+    }\n+\n+     /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#gTest( double[],long[],double)\n+     */\n+    public static boolean gTest(final double[] expected, final long[] observed,\n+                                final double alpha)\n+        throws NotPositiveException, NotStrictlyPositiveException,\n+        DimensionMismatchException, OutOfRangeException, MaxCountExceededException {\n+        return G_TEST.gTest(expected, observed, alpha);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#gDataSetsComparison(long[], long[])\n+     */\n+    public static double gDataSetsComparison(final long[] observed1,\n+                                                  final long[] observed2)\n+        throws DimensionMismatchException, NotPositiveException, ZeroException {\n+        return G_TEST.gDataSetsComparison(observed1, observed2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#rootLogLikelihoodRatio(long, long, long, long)\n+     */\n+    public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22)\n+        throws DimensionMismatchException, NotPositiveException, ZeroException {\n+        return G_TEST.rootLogLikelihoodRatio(k11, k12, k21, k22);\n+    }\n+\n+\n+    /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#gTestDataSetsComparison(long[], long[])\n+     *\n+     */\n+    public static double gTestDataSetsComparison(final long[] observed1,\n+                                                        final long[] observed2)\n+        throws DimensionMismatchException, NotPositiveException, ZeroException,\n+        MaxCountExceededException {\n+        return G_TEST.gTestDataSetsComparison(observed1, observed2);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math3.stat.inference.GTest#gTestDataSetsComparison(double[],long[],double)\n+     */\n+    public static boolean gTestDataSetsComparison(final long[] observed1,\n+                                                  final long[] observed2,\n+                                                  final double alpha)\n+        throws DimensionMismatchException, NotPositiveException,\n+        ZeroException, OutOfRangeException, MaxCountExceededException {\n+        return G_TEST.gTestDataSetsComparison(observed1, observed2, alpha);\n+    }\n+\n     // CHECKSTYLE: resume JavadocMethodCheck\n \n }\n--- a/src/test/java/org/apache/commons/math3/stat/inference/TestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/inference/TestUtilsTest.java\n         Assert.assertEquals(oneWayAnova.anovaTest(classes, 0.01),\n                 TestUtils.oneWayAnovaTest(classes, 0.01));\n     }\n+    @Test\n+    public void testGTestGoodnesOfFit() throws Exception {\n+        double[] exp = new double[]{\n+            0.54d, 0.40d, 0.05d, 0.01d\n+        };\n+\n+        long[] obs = new long[]{\n+            70, 79, 3, 4\n+        };\n+        Assert.assertEquals(\"G test statistic\",\n+                13.144799, TestUtils.g(exp, obs), 1E-5);\n+        double p_gtgf = TestUtils.gTest(exp, obs);\n+        Assert.assertEquals(\"g-Test p-value\", 0.004333, p_gtgf, 1E-5);\n+\n+        Assert.assertTrue(TestUtils.gTest(exp, obs, 0.05));\n }\n+\n+    @Test\n+    public void testGTestIndependance() throws Exception {\n+        long[] obs1 = new long[]{\n+            268, 199, 42\n+        };\n+\n+        long[] obs2 = new long[]{\n+            807, 759, 184\n+        };\n+\n+        double g = TestUtils.gDataSetsComparison(obs1, obs2);\n+\n+        Assert.assertEquals(\"G test statistic\",\n+                7.3008170, g, 1E-4);\n+        double p_gti = TestUtils.gTestDataSetsComparison(obs1, obs2);\n+\n+        Assert.assertEquals(\"g-Test p-value\", 0.0259805, p_gti, 1E-4);\n+        Assert.assertTrue(TestUtils.gTestDataSetsComparison(obs1, obs2, 0.05));\n+    }\n+\n+    @Test\n+    public void testRootLogLikelihood() {\n+        // positive where k11 is bigger than expected.\n+        Assert.assertTrue(TestUtils.rootLogLikelihoodRatio(904, 21060, 1144, 283012) > 0.0);\n+\n+        // negative because k11 is lower than expected\n+        Assert.assertTrue(TestUtils.rootLogLikelihoodRatio(36, 21928, 60280, 623876) < 0.0);\n+\n+        Assert.assertEquals(Math.sqrt(2.772589), TestUtils.rootLogLikelihoodRatio(1, 0, 0, 1), 0.000001);\n+        Assert.assertEquals(-Math.sqrt(2.772589), TestUtils.rootLogLikelihoodRatio(0, 1, 1, 0), 0.000001);\n+        Assert.assertEquals(Math.sqrt(27.72589), TestUtils.rootLogLikelihoodRatio(10, 0, 0, 10), 0.00001);\n+\n+        Assert.assertEquals(Math.sqrt(39.33052), TestUtils.rootLogLikelihoodRatio(5, 1995, 0, 100000), 0.00001);\n+        Assert.assertEquals(-Math.sqrt(39.33052), TestUtils.rootLogLikelihoodRatio(0, 100000, 5, 1995), 0.00001);\n+\n+        Assert.assertEquals(Math.sqrt(4730.737), TestUtils.rootLogLikelihoodRatio(1000, 1995, 1000, 100000), 0.001);\n+        Assert.assertEquals(-Math.sqrt(4730.737), TestUtils.rootLogLikelihoodRatio(1000, 100000, 1000, 1995), 0.001);\n+\n+        Assert.assertEquals(Math.sqrt(5734.343), TestUtils.rootLogLikelihoodRatio(1000, 1000, 1000, 100000), 0.001);\n+        Assert.assertEquals(Math.sqrt(5714.932), TestUtils.rootLogLikelihoodRatio(1000, 1000, 1000, 99000), 0.001);\n+    }\n+}", "timestamp": 1352694722, "metainfo": ""}