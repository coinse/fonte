{"sha": "b22056ad99528113348e9240fcf718d3c2ca6bd8", "log": "Widened the scope of tests for transform.FastSineTransformer (MATH-677).  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java\n  */\n package org.apache.commons.math.transform;\n \n-import org.apache.commons.math.analysis.*;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.apache.commons.math.analysis.SinFunction;\n+import org.apache.commons.math.analysis.UnivariateFunction;\n+import org.apache.commons.math.analysis.function.Sinc;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n \n /**\n  * Test case for fast sine transformer.\n  *\n  * @version $Id$\n  */\n-public final class FastSineTransformerTest {\n+@RunWith(value = Parameterized.class)\n+public final class FastSineTransformerTest extends RealTransformerAbstractTest {\n+\n+    private final boolean standard;\n+\n+    private final int[] invalidDataSize;\n+\n+    private final double[] relativeTolerance;\n+\n+    private final int[] validDataSize;\n+\n+    public FastSineTransformerTest(final boolean standard) {\n+        this.standard = standard;\n+        this.validDataSize = new int[] {\n+            1, 2, 4, 8, 16, 32, 64, 128\n+        };\n+        this.invalidDataSize = new int[] {\n+            129\n+        };\n+        this.relativeTolerance = new double[] {\n+            1E-15, 1E-15, 1E-14, 1E-14, 1E-13, 1E-12, 1E-11, 1E-11\n+        };\n+    }\n+\n+    /**\n+     * Returns an array containing {@code true, false} in order to check both\n+     * standard and orthogonal DSTs.\n+     *\n+     * @return an array of parameters for this parameterized test\n+     */\n+    @Parameters\n+    public static Collection<Object[]> data() {\n+        final Object[][] data = new Boolean[][] {\n+            {\n+                Boolean.TRUE\n+            }, {\n+                Boolean.FALSE\n+            }\n+        };\n+        return Arrays.asList(data);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * Overriding the default implementation allows to ensure that the first\n+     * element of the data set is zero.\n+     */\n+    @Override\n+    double[] createRealData(final int n) {\n+        final double[] data = super.createRealData(n);\n+        data[0] = 0.0;\n+        return data;\n+    }\n+\n+    @Override\n+    RealTransformer createRealTransformer() {\n+        if (standard) {\n+            return FastSineTransformer.create();\n+        } else {\n+            return FastSineTransformer.createOrthogonal();\n+        }\n+    }\n+\n+    @Override\n+    int getInvalidDataSize(final int i) {\n+        return invalidDataSize[i];\n+    }\n+\n+    @Override\n+    int getNumberOfInvalidDataSizes() {\n+        return invalidDataSize.length;\n+    }\n+\n+    @Override\n+    int getNumberOfValidDataSizes() {\n+        return validDataSize.length;\n+    }\n+\n+    @Override\n+    double getRelativeTolerance(final int i) {\n+        return relativeTolerance[i];\n+    }\n+\n+    @Override\n+    int getValidDataSize(final int i) {\n+        return validDataSize[i];\n+    }\n+\n+    @Override\n+    UnivariateFunction getValidFunction() {\n+        return new Sinc();\n+    }\n+\n+    @Override\n+    double getValidLowerBound() {\n+        return 0.0;\n+    }\n+\n+    @Override\n+    double getValidUpperBound() {\n+        return FastMath.PI;\n+    }\n+\n+    @Override\n+    double[] transform(final double[] x, final boolean forward) {\n+        final int n = x.length;\n+        final double[] y = new double[n];\n+        final double[] sin = new double[2 * n];\n+        for (int i = 0; i < sin.length; i++) {\n+            sin[i] = FastMath.sin(FastMath.PI * i / (double) n);\n+        }\n+        for (int j = 0; j < n; j++) {\n+            double yj = 0.0;\n+            for (int i = 0; i < n; i++) {\n+                yj += x[i] * sin[(i * j) % sin.length];\n+            }\n+            y[j] = yj;\n+        }\n+        final double s;\n+        if (forward) {\n+            s = standard ? 1.0 : FastMath.sqrt(2.0 / (double) n);\n+        } else {\n+            s = standard ? 2.0 / n : FastMath.sqrt(2.0 / (double) n);\n+        }\n+        TransformUtils.scaleArray(y, s);\n+        return y;\n+    }\n+\n+    /*\n+     * Additional tests.\n+     */\n+    @Test(expected = MathIllegalArgumentException.class)\n+    public void testTransformRealFirstElementNotZero() {\n+        final double[] data = new double[] {\n+            1.0, 1.0, 1.0, 1.0\n+        };\n+        final RealTransformer transformer = createRealTransformer();\n+        transformer.transform(data);\n+    }\n+\n+    @Test(expected = MathIllegalArgumentException.class)\n+    public void testInverseTransformRealFirstElementNotZero() {\n+        final double[] data = new double[] {\n+            1.0, 1.0, 1.0, 1.0\n+        };\n+        final RealTransformer transformer = createRealTransformer();\n+        transformer.inverseTransform(data);\n+    }\n+\n+    /*\n+     * Additional (legacy) tests.\n+     */\n \n     /**\n      * Test of transformer for the ad hoc data.\n--- a/src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java\n     private final static long SEED = 20110119L;\n \n     /**\n-     * Returns a random array of doubles. Random generator always uses the same\n-     * seed.\n-     *\n-     * @param n the size of the array to be returned\n-     * @return a random array of specified size\n-     */\n-    static double[] createRealData(final int n) {\n-        final Random random = new Random(SEED);\n-        final double[] data = new double[n];\n-        for (int i = 0; i < n; i++) {\n-            data[i] = 2.0 * random.nextDouble() - 1.0;\n-        }\n-        return data;\n-    }\n-\n-    /**\n      * Returns a new instance of the {@link RealTransformer} to be tested.\n      *\n      * @return a the transformer to be tested\n     }\n \n     /*\n+     * Utility methods.\n+     */\n+\n+    /**\n+     * Returns a random array of doubles. Random generator always uses the same\n+     * seed.\n+     *\n+     * @param n the size of the array to be returned\n+     * @return a random array of specified size\n+     */\n+    double[] createRealData(final int n) {\n+        final Random random = new Random(SEED);\n+        final double[] data = new double[n];\n+        for (int i = 0; i < n; i++) {\n+            data[i] = 2.0 * random.nextDouble() - 1.0;\n+        }\n+        return data;\n+    }\n+\n+    /*\n      * The tests per se.\n      */\n ", "timestamp": 1327301248, "metainfo": ""}