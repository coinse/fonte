{"sha": "7cd3d822b65b7acdd1f6e1c82b291cd994f4fe05", "log": "Fixed error in factorial accuracy.  JIRA: MATH-240.  ", "commit": "\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n         }\n         return true;\n     }\n+    \n+    /** All long-representable factorials */\n+    private static final long[] factorials = new long[] \n+       {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800,\n+        479001600, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l,\n+        355687428096000l, 6402373705728000l, 121645100408832000l,\n+        2432902008176640000l};\n \n     /**\n      * Returns n!. Shorthand for <code>n</code> <a\n      * @throws IllegalArgumentException if n < 0\n      */\n     public static long factorial(final int n) {\n-        long result = Math.round(factorialDouble(n));\n-        if (result == Long.MAX_VALUE) {\n+        if (n < 0) {\n+            throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+        }\n+        if (n > 20) {\n             throw new ArithmeticException(\n-                \"result too large to represent in a long integer\");\n-        }\n-        return result;\n+                    \"factorial value is too large to fit in a long\");\n+        }\n+        return factorials[n];\n     }\n \n     /**\n         if (n < 0) {\n             throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n         }\n+        if (n < 21) {\n+            return factorial(n);\n+        }\n         return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n     }\n \n     public static double factorialLog(final int n) {\n         if (n < 0) {\n             throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        }\n+        if (n < 21) {\n+            return Math.log(factorial(n));\n         }\n         double logSum = 0;\n         for (int i = 2; i <= n; i++) {\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n     }\n \n     public void testFactorial() {\n-        for (int i = 1; i < 10; i++) {\n+        for (int i = 1; i < 21; i++) {\n             assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));\n             assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);\n             assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);\n         }\n+        \n         assertEquals(\"0\", 1, MathUtils.factorial(0));\n         assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);\n         assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);", "timestamp": 1232394181, "metainfo": ""}