{"sha": "29c3b75e2d5120771ca85ffcbffc9b7cb5d45c58", "log": "Fixed a missing bracketing check of initial interval in Brent solver JIRA: MATH-343  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n  * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n  */\n public class BrentSolver extends UnivariateRealSolverImpl {\n+\n+    /** Error message for non-bracketing interval. */\n+    private static final String NON_BRACKETING_MESSAGE =\n+        \"function values at endpoints do not have different signs.  \" +\n+        \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\";\n \n     /** Serializable version identifier */\n     private static final long serialVersionUID = 7694577816772532779L;\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        if (yMin * yMax > 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+        }\n+\n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n             } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw MathRuntimeException.createIllegalArgumentException(\n-                        \"function values at endpoints do not have different signs.  \" +\n-                        \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n-                        min, max, yMin, yMax);\n+                        NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n             }\n         } else if (sign < 0){\n             // solve using only the first endpoint as initial guess\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n+        try {  // no bracket\n+            solver.solve(f, 1, 1.5, 1.2);\n+            fail(\"Expecting IllegalArgumentException - non-bracketing\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n     }\n \n     public void testInitialGuess() throws MathException {", "timestamp": 1266958898, "metainfo": ""}