{"sha": "443985578c0d7c1d26bb4431f546a3c50dadcf53", "log": "moved the binding of the underlying exception from ExceptionContextProvider to ExceptionContext, as diccussed on the dev list  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/MathArithmeticException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathArithmeticException.java\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n     /** Context. */\n-    private final ExceptionContext context = new ExceptionContext();\n+    private final ExceptionContext context;\n \n     /**\n      * Default constructor.\n      */\n     public MathArithmeticException() {\n+        context = new ExceptionContext(this);\n         context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);\n     }\n \n      */\n     public MathArithmeticException(Localizable pattern,\n                                    Object ... args) {\n+        context = new ExceptionContext(this);\n         context.addMessage(pattern, args);\n     }\n \n     /** {@inheritDoc} */\n     public ExceptionContext getContext() {\n         return context;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public Throwable getException() {\n-        return this;\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n     /** Context. */\n-    private final ExceptionContext context = new ExceptionContext();\n+    private final ExceptionContext context;\n \n     /**\n      * @param pattern Message pattern explaining the cause of the error.\n      */\n     public MathIllegalArgumentException(Localizable pattern,\n                                         Object ... args) {\n+        context = new ExceptionContext(this);\n         context.addMessage(pattern, args);\n     }\n \n     /** {@inheritDoc} */\n     public ExceptionContext getContext() {\n         return context;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public Throwable getException() {\n-        return this;\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n     /** Context. */\n-    private final ExceptionContext context = new ExceptionContext();\n+    private final ExceptionContext context;\n \n     /**\n      * Simple constructor.\n      */\n     public MathIllegalStateException(Localizable pattern,\n                                      Object ... args) {\n+        context = new ExceptionContext(this);\n         context.addMessage(pattern, args);\n     }\n \n                                      Localizable pattern,\n                                      Object ... args) {\n         super(cause);\n+        context = new ExceptionContext(this);\n         context.addMessage(pattern, args);\n     }\n \n     }\n \n     /** {@inheritDoc} */\n-    public Throwable getException() {\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n         return context.getMessage();\n--- a/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n     /** Context. */\n-    private final ExceptionContext context = new ExceptionContext();\n+    private final ExceptionContext context;\n \n     /**\n      * Default constructor.\n      */\n     public MathUnsupportedOperationException(Localizable pattern,\n                                              Object ... args) {\n+        context = new ExceptionContext(this);\n         context.addMessage(pattern, args);\n     }\n \n     /** {@inheritDoc} */\n     public ExceptionContext getContext() {\n         return context;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public Throwable getException() {\n-        return this;\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/exception/MathUserException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUserException.java\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n     /** Context. */\n-    private final ExceptionContext context = new ExceptionContext();\n+    private final ExceptionContext context;\n \n     /**\n      * Build an exception with a default message.\n      */\n     public MathUserException() {\n+        context = new ExceptionContext(this);\n         context.addMessage(LocalizedFormats.USER_EXCEPTION);\n     }\n \n      */\n     public MathUserException(final Throwable cause) {\n         super(cause);\n+        context = new ExceptionContext(this);\n         context.addMessage(LocalizedFormats.USER_EXCEPTION);\n     }\n \n      */\n     public MathUserException(final Localizable pattern,\n                              final Object ... arguments) {\n+        context = new ExceptionContext(this);\n         context.addMessage(pattern, arguments);\n     }\n \n                              final Localizable pattern,\n                              final Object ... arguments) {\n         super(cause);\n+        context = new ExceptionContext(this);\n         context.addMessage(pattern, arguments);\n     }\n \n     /** {@inheritDoc} */\n     public ExceptionContext getContext() {\n         return context;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public Throwable getException() {\n-        return this;\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/ExceptionContext.java\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n     /**\n+     * The throwable to which this context refers to.\n+     */\n+    private Throwable throwable;\n+    /**\n      * Various informations that enrich the informative message.\n      */\n-    private List<Localizable> msgPatterns = new ArrayList<Localizable>();\n+    private List<Localizable> msgPatterns;\n     /**\n      * Various informations that enrich the informative message.\n      * The arguments will replace the corresponding place-holders in\n      * {@link #msgPatterns}.\n      */\n-    private List<Object[]> msgArguments = new ArrayList<Object[]>();\n+    private List<Object[]> msgArguments;\n     /**\n      * Arbitrary context information.\n      */\n-    private Map<String, Object> context = new HashMap<String, Object>();\n+    private Map<String, Object> context;\n+\n+    /** Simple constructor.\n+     * @param throwable the exception this context refers too\n+     */\n+    public ExceptionContext(final Throwable throwable) {\n+        this.throwable = throwable;\n+        msgPatterns    = new ArrayList<Localizable>();\n+        msgArguments   = new ArrayList<Object[]>();\n+        context        = new HashMap<String, Object>();\n+    }\n+\n+    /** Get a reference to the exception to which the context relates.\n+     * @return a reference to the exception to which the context relates\n+     */\n+    public Throwable getThrowable() {\n+        return throwable;\n+    }\n \n     /**\n      * Adds a message.\n      */\n     private void writeObject(ObjectOutputStream out)\n         throws IOException {\n+        out.writeObject(throwable);\n         serializeMessages(out);\n         serializeContext(out);\n     }\n     private void readObject(ObjectInputStream in)\n         throws IOException,\n                ClassNotFoundException {\n+        throwable = (Throwable) in.readObject();\n         deSerializeMessages(in);\n         deSerializeContext(in);\n     }\n--- a/src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java\n      */\n     ExceptionContext getContext();\n \n-    /** Get a reference to the exception to which the context relates.\n-     * @return a reference to the exception to which the context relates\n-     */\n-    Throwable getException();\n-\n }\n--- a/src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/util/ExceptionContextTest.java\n public class ExceptionContextTest {\n     @Test\n     public void testMessageChain() {\n-        final ExceptionContext c = new ExceptionContext();\n+        final ExceptionContext c = new ExceptionContext(new Exception(\"oops\"));\n         final String sep = \" | \"; // Non-default separator.\n         final String m1 = \"column index (0)\";\n         c.addMessage(LocalizedFormats.COLUMN_INDEX, 0);\n \n     @Test\n     public void testNoArgAddMessage() {\n-        final ExceptionContext c = new ExceptionContext();\n+        final ExceptionContext c = new ExceptionContext(new Exception(\"hello\"));\n         c.addMessage(LocalizedFormats.SIMPLE_MESSAGE);\n         Assert.assertEquals(c.getMessage(), \"{0}\");\n     }\n \n     @Test\n     public void testContext() {\n-        final ExceptionContext c = new ExceptionContext();\n+        final ExceptionContext c = new ExceptionContext(new Exception(\"bye\"));\n \n         final String[] keys = {\"Key 1\", \"Key 2\"};\n         final Object[] values = {\"Value 1\", Integer.valueOf(2)};\n     public void testSerialize()\n         throws IOException,\n                ClassNotFoundException {\n-        final ExceptionContext cOut = new ExceptionContext();\n+        final ExceptionContext cOut = new ExceptionContext(new Exception(\"Apache\"));\n         cOut.addMessage(LocalizedFormats.COLUMN_INDEX, 0);\n         cOut.setValue(\"Key 1\", Integer.valueOf(0));\n \n \n     @Test\n     public void testSerializeUnserializable() {\n-        final ExceptionContext cOut = new ExceptionContext();\n+        final ExceptionContext cOut = new ExceptionContext(new Exception(\"Apache Commons Math\"));\n         cOut.addMessage(LocalizedFormats.SIMPLE_MESSAGE, \"OK\");\n         cOut.addMessage(LocalizedFormats.SIMPLE_MESSAGE, new Unserializable());\n         String key = \"Key 1\";", "timestamp": 1315147120, "metainfo": ""}