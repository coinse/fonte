{"sha": "3266e8c661bfba288095e77ccd30603039afc98c", "log": "Javadoc formatting.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVector.java\n     /**\n      * Returns the size of the vector.\n      *\n-     * @return size\n+     * @return the size of this vector.\n      */\n     public abstract int getDimension();\n \n      * Construct a new vector by appending a vector to this vector.\n      *\n      * @param v vector to append to this one.\n-     * @return a new vector\n+     * @return a new vector.\n      */\n     public abstract RealVector append(RealVector v);\n \n      * Construct a new vector by appending a double to this vector.\n      *\n      * @param d double to append.\n-     * @return a new vector\n+     * @return a new vector.\n      */\n     public abstract RealVector append(double d);\n \n      * Construct a new vector by appending a double array to this vector.\n      *\n      * @param a double array to append.\n-     * @return a new vector\n+     * @return a new vector.\n      */\n     public abstract RealVector append(double[] a);\n \n     /**\n      * Compute the dot product of this vector with {@code v}.\n      *\n-     * @param v vector with which dot product should be computed\n-     * @return the scalar dot product between instance and v\n+     * @param v Vector with which dot product should be computed\n+     * @return the scalar dot product between this instance and {@code v}.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      */\n     /**\n      * Element-by-element division.\n      *\n-     * @param v vector by which instance elements must be divided\n-     * @return a vector containing this[i] / v[i] for all i\n+     * @param v Vector by which instance elements must be divided.\n+     * @return a vector containing this[i] / v[i] for all i.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      */\n      * Element-by-element division.\n      * Returns a new vector. Does not change instance data.\n      *\n-     * @param v vector by which instance elements must be divided\n-     * @return a vector containing this[i] / v[i] for all i\n+     * @param v Vector by which instance elements must be divided\n+     * @return a vector containing this[i] / v[i] for all i.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      */\n     /**\n      * Element-by-element multiplication.\n      *\n-     * @param v vector by which instance elements must be multiplied\n-     * @return a vector containing this[i] * v[i] for all i\n+     * @param v Vector by which instance elements must be multiplied\n+     * @return a vector containing this[i] * v[i] for all i.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      */\n      * Element-by-element multiplication.\n      * Returns a new vector. Does not change instance data.\n      *\n-     * @param v vector by which instance elements must be multiplied\n-     * @return a vector containing this[i] * v[i] for all i\n+     * @param v Vector by which instance elements must be multiplied\n+     * @return a vector containing this[i] * v[i] for all i.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      */\n      * L<sub>2</sub> norm, i.e. the square root of the sum of\n      * element differences, or Euclidian distance.</p>\n      *\n-     * @param v vector to which distance is requested\n-     * @return distance between two vectors.\n+     * @param v Vector to which distance is requested.\n+     * @return the distance between two vectors.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      * @see #getL1Distance(RealVector)\n      * L<sub>2</sub> norm, i.e. the square root of the sum of\n      * element differences, or Euclidian distance.</p>\n      *\n-     * @param v vector to which distance is requested\n-     * @return distance between two vectors.\n+     * @param v Vector to which distance is requested.\n+     * @return the distance between two vectors.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      * @see #getL1Distance(double[])\n      * <p>The L<sub>2</sub> norm is the root of the sum of\n      * the squared elements.</p>\n      *\n-     * @return norm\n+     * @return the norm.\n      * @see #getL1Norm()\n      * @see #getLInfNorm()\n      * @see #getDistance(RealVector)\n      * <p>The L<sub>1</sub> norm is the sum of the absolute\n      * values of the elements.</p>\n      *\n-     * @return norm\n+     * @return the norm.\n      * @see #getNorm()\n      * @see #getLInfNorm()\n      * @see #getL1Distance(RealVector)\n      * <p>The L<sub>&infin;</sub> norm is the max of the absolute\n      * values of the elements.</p>\n      *\n-     * @return norm\n+     * @return the norm.\n      * @see #getNorm()\n      * @see #getL1Norm()\n      * @see #getLInfDistance(RealVector)\n      * L<sub>1</sub> norm, i.e. the sum of the absolute values of\n      * the elements differences.</p>\n      *\n-     * @param v vector to which distance is requested\n-     * @return distance between two vectors.\n+     * @param v Vector to which distance is requested.\n+     * @return the distance between two vectors.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      * @see #getDistance(double[])\n      * L<sub>1</sub> norm, i.e. the sum of the absolute values of\n      * element differences.</p>\n      *\n-     * @param v vector to which distance is requested\n-     * @return distance between two vectors.\n+     * @param v Vector to which distance is requested.\n+     * @return the distance between two vectors.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      * @see #getDistance(double[])\n      * L<sub>&infin;</sub> norm, i.e. the max of the absolute values of\n      * element differences.</p>\n      *\n-     * @param v vector to which distance is requested\n-     * @return distance between two vectors.\n+     * @param v Vector to which distance is requested.\n+     * @return the distance between two vectors.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      * @see #getDistance(RealVector)\n      * L<sub>&infin;</sub> norm, i.e. the max of the absolute values of\n      * elements differences.</p>\n      *\n-     * @param v vector to which distance is requested\n-     * @return distance between two vectors.\n+     * @param v Vector to which distance is requested.\n+     * @return Distance between two vectors.\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      * @see #getDistance(double[])\n     /**\n      * Get the index of the minimum entry.\n      *\n-     * @return index of the minimum entry or -1 if vector length is 0 or\n-     * or all entries are {@code NaN}\n+     * @return the index of the minimum entry or -1 if vector length is 0\n+     * or all entries are {@code NaN}.\n      */\n     public int getMinIndex() {\n         int minIndex    = -1;\n     /**\n      * Get the value of the minimum entry.\n      *\n-     * @return value of the minimum entry or {@code NaN} if all entries are {@code NaN}\n+     * @return the value of the minimum entry or {@code NaN} if all\n+     * entries are {@code NaN}.\n      */\n     public double getMinValue() {\n         final int minIndex = getMinIndex();\n     /**\n      * Get the index of the maximum entry.\n      *\n-     * @return index of the maximum entry or -1 if vector length is 0\n+     * @return the index of the maximum entry or -1 if vector length is 0\n      * or all entries are {@code NaN}\n      */\n     public int getMaxIndex() {\n     /**\n      * Get the value of the maximum entry.\n      *\n-     * @return value of the maximum entry or {@code NaN} if all entries are {@code NaN}\n+     * @return the value of the maximum entry or {@code NaN} if all\n+     * entries are {@code NaN}.\n      */\n     public double getMaxValue() {\n         final int maxIndex = getMaxIndex();\n     /**\n      * Compute the outer product.\n      *\n-     * @param v vector with which outer product should be computed\n-     * @return the matrix outer product between instance and v\n+     * @param v Vector with which outer product should be computed.\n+     * @return the matrix outer product between this instance and {@code v}.\n      */\n     public RealMatrix outerProduct(RealVector v) {\n         RealMatrix product;\n     /**\n      * Compute the outer product.\n      *\n-     * @param v vector with which outer product should be computed\n-     * @return the matrix outer product between instance and v\n+     * @param v Vector with which outer product should be computed\n+     * @return the matrix outer product between instance and {@code v}.\n      */\n     public RealMatrix outerProduct(double[] v) {\n         return outerProduct(new ArrayRealVector(v, false));\n     /**\n      * Find the orthogonal projection of this vector onto another vector.\n      *\n-     * @param v vector onto which instance must be projected.\n-     * @return projection of the instance onto v.\n+     * @param v Vector onto which instance must be projected.\n+     * @return the projection of the instance onto {@code v.}\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      */\n     /**\n      * Set all elements to a single value.\n      *\n-     * @param value single value to set for all elements\n+     * @param value Single value to set for all elements.\n      */\n     public void set(double value) {\n         Iterator<Entry> it = iterator();\n      * <p>The array is independent from vector data, it's elements\n      * are copied.</p>\n      *\n-     * @return array containing a copy of vector elements\n+     * @return an array containing a copy of vector elements.\n      */\n     public double[] toArray() {\n         int dim = getDimension();\n      * <p>The array is independent from vector data, it's elements\n      * are copied.</p>\n      *\n-     * @return double array of entries.\n+     * @return a {@code double} array of entries.\n      */\n     public double[] getData() {\n         return toArray();\n      * Creates a unit vector pointing in the direction of this vector.\n      * The instance is not changed by this method.\n      *\n-     * @return a unit vector pointing in direction of this vector\n-     * @exception ArithmeticException if the norm is null\n+     * @return a unit vector pointing in direction of this vector.\n+     * @throws ArithmeticException if the norm is {@code null}.\n      */\n     public RealVector unitVector() {\n         RealVector copy = copy();\n     }\n \n     /**\n-     * Returns a new vector representing {@code a*this + b*y}, the linear\n+     * Returns a new vector representing {@code a * this + b * y}, the linear\n      * combination of {@code this} and {@code y}.\n      * Returns a new vector. Does not change instance data.\n      *", "timestamp": 1314571229, "metainfo": ""}