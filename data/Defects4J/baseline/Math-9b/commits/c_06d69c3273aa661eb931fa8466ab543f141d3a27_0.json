{"sha": "06d69c3273aa661eb931fa8466ab543f141d3a27", "log": "use a single set of consistent functions definitions in the analysis package instead of one set in the analysis and another one in optimization   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+/** \n+ * Extension of {@link MultivariateRealFunction} representing a differentiable\n+ * multivariate real function.\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public interface DifferentiableMultivariateRealFunction extends MultivariateRealFunction {\n+\n+    /**\n+     * Returns the partial derivative of the function with respect to a point coordinate.\n+     * <p>\n+     * The partial derivative is defined with respect to point coordinate\n+     * x<sub>k</sub>. If the partial derivatives with respect to all coordinates are\n+     * needed, it may be more efficient to use the {@link #gradient()} method which will\n+     * compute them all at once.\n+     * </p>\n+     * @param k index of the coordinate with respect to which the partial\n+     * derivative is computed\n+     * @return the partial derivative function with respect to k<sup>th</sup> point coordinate\n+     */\n+    MultivariateRealFunction partialDerivative(int k);\n+\n+    /**\n+     * Returns the gradient function.\n+     * <p>If only one partial derivative with respect to a specific coordinate is\n+     * needed, it may be more efficient to use the {@link #partialDerivative(int)} method\n+     * which will compute only the specified component.</p>\n+     * @return the gradient function\n+     */\n+    MultivariateVectorialFunction gradient();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+\n+/** \n+ * Extension of {@link MultivariateVectorialFunction} representing a differentiable\n+ * multivariate vectorial function.\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public interface DifferentiableMultivariateVectorialFunction\n+    extends MultivariateVectorialFunction {\n+\n+    /**\n+     * Returns the partial derivative of the function with respect to point\n+     * coordinate x<sub>j</sub>.\n+     * <p>\n+     * The partial derivative basically represents column j of the jacobian\n+     * matrix. If the partial derivatives with respect to all coordinates are\n+     * needed, it may be more efficient to use the {@link #jacobian()} method\n+     * which will compute the complete matrix at once.\n+     * </p>\n+     * @param j index of the coordinate with respect to which the partial\n+     * derivative is computed\n+     * @return the partial derivative function with respect to point coordinate\n+     * x<sub>i</sub>\n+     */\n+    MultivariateVectorialFunction partialDerivative(int j);\n+\n+    /**\n+     * Returns the gradient function of the i<sup>th</sup> component of\n+     * the vectorial function.\n+     * \n+     * <p>\n+     * The i<sup>th</sup> gradient basically represents row i of the jacobian\n+     * matrix. If all gradients are needed, it may be more efficient to use the\n+     * {@link #jacobian()} method which will compute the complete matrix at once.\n+     * </p>\n+     * @param i index of the function component for which the gradient is requested\n+     * @return the gradient function of the i<sup>th</sup> component of\n+     * the vectorial function\n+     */\n+    MultivariateVectorialFunction gradient(int i);\n+\n+    /**\n+     * Returns the jacobian function.\n+     * <p>\n+     * If only one column of the jacobian is needed, it may be more efficient to\n+     * use the {@link #partialDerivative(int)} method which will compute only the\n+     * specified column. If only one row of the jacobian is needed, it may be more\n+     * efficient to use the {@link #gradient(int)} method which will compute only the\n+     * specified row.\n+     * </p>\n+     * @return the jacobian function\n+     */\n+    MultivariateMatrixFunction jacobian();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+/**\n+ * Extension of {@link UnivariateMatrixFunction} representing a differentiable univariate matrix function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public interface DifferentiableUnivariateMatrixFunction\n+    extends UnivariateMatrixFunction {\n+ \n+    /**\n+     * Returns the derivative of the function\n+     * \n+     * @return  the derivative function\n+     */\n+    public UnivariateMatrixFunction derivative();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+/**\n+ * Extension of {@link UnivariateVectorialFunction} representing a differentiable univariate vectorial function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public interface DifferentiableUnivariateVectorialFunction\n+    extends UnivariateVectorialFunction {\n+ \n+    /**\n+     * Returns the derivative of the function\n+     * \n+     * @return  the derivative function\n+     */\n+    public UnivariateVectorialFunction derivative();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.FunctionEvaluationException;\n+\n+/** \n+ * An interface representing a multivariate matrix function.\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public interface MultivariateMatrixFunction extends Serializable {\n+\n+    /** \n+     * Compute the value for the function at the given point.\n+     * @param point point at which the function must be evaluated\n+     * @return function value for the given point\n+     * @exception FunctionEvaluationException if the function evaluation fails\n+     * @exception IllegalArgumentException if points dimension is wrong\n+     */\n+    double[][] value(double[] point)\n+        throws FunctionEvaluationException, IllegalArgumentException;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.FunctionEvaluationException;\n+\n+/** \n+ * An interface representing a multivariate real function.\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public interface MultivariateRealFunction extends Serializable {\n+\n+    /** \n+     * Compute the value for the function at the given point.\n+     * @param point point at which the function must be evaluated\n+     * @return function value for the given point\n+     * @exception FunctionEvaluationException if the function evaluation fails\n+     * @exception IllegalArgumentException if points dimension is wrong\n+     */\n+    double value(double[] point)\n+        throws FunctionEvaluationException, IllegalArgumentException;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.FunctionEvaluationException;\n+\n+/** \n+ * An interface representing a multivariate vectorial function.\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public interface MultivariateVectorialFunction extends Serializable {\n+\n+    /** \n+     * Compute the value for the function at the given point.\n+     * @param point point at which the function must be evaluated\n+     * @return function value for the given point\n+     * @exception FunctionEvaluationException if the function evaluation fails\n+     * @exception IllegalArgumentException if points dimension is wrong\n+     */\n+    double[] value(double[] point)\n+        throws FunctionEvaluationException, IllegalArgumentException;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.FunctionEvaluationException;\n+\n+/**\n+ * An interface representing a univariate matrix function.\n+ *  \n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public interface UnivariateMatrixFunction extends Serializable {\n+    /**\n+     * Compute the value for the function.\n+     * @param x the point for which the function value should be computed\n+     * @return the value\n+     * @throws FunctionEvaluationException if the function evaluation fails\n+     */\n+    public double[][] value(double x) throws FunctionEvaluationException;\n+\n+}\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n  */\n package org.apache.commons.math.analysis;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.FunctionEvaluationException;\n \n /**\n  *  \n  * @version $Revision$ $Date$\n  */\n-public interface UnivariateRealFunction {\n+public interface UnivariateRealFunction extends Serializable {\n     /**\n      * Compute the value for the function.\n      * @param x the point for which the function value should be computed\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.FunctionEvaluationException;\n+\n+/**\n+ * An interface representing a univariate vectorial function.\n+ *  \n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public interface UnivariateVectorialFunction extends Serializable {\n+    /**\n+     * Compute the value for the function.\n+     * @param x the point for which the function value should be computed\n+     * @return the value\n+     * @throws FunctionEvaluationException if the function evaluation fails\n+     */\n+    public double[] value(double x) throws FunctionEvaluationException;\n+\n+}", "timestamp": 1237932313, "metainfo": ""}