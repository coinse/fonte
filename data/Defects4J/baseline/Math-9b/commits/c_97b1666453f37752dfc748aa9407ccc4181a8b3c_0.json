{"sha": "97b1666453f37752dfc748aa9407ccc4181a8b3c", "log": "Consolidated AbstractDescriptiveStatistics into DescriptiveStatistics. Added Serialization interfaces where required.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java\n  */\n package org.apache.commons.math.stat.univariate;\n \n+import java.io.Serializable;\n+\n /**\n  *\n  * Abstract Implementation for the {@link StorelessUnivariateStatistic} interface.\n  * <p>\n  * Provides a default <code>evaluate()</code> implementation.\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/03/21 21:57:18 $\n+ * @version $Revision: 1.15 $ $Date: 2004/06/01 21:34:35 $\n  */\n public abstract class AbstractStorelessUnivariateStatistic\n     extends AbstractUnivariateStatistic\n-    implements StorelessUnivariateStatistic {\n+    implements StorelessUnivariateStatistic, Serializable {\n \n+    /** Serialization UID */\n+    static final long serialVersionUID = -44915725420072521L;\n+    \n     /**\n      * This default implementation just calls {@link #increment} in a loop over the input array and \n      * then {@link #getResult} to compute the return value.  \n--- a/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java\n  */\n package org.apache.commons.math.stat.univariate;\n \n+import java.io.Serializable;\n+\n /**\n  * Abstract Implementation for UnivariateStatistics.\n  * Provides the ability to extend polymophically so that\n  * indiviual statistics do not need to implement these methods.\n- * @version $Revision: 1.16 $ $Date: 2004/04/27 16:42:34 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/01 21:34:35 $\n  */\n public abstract class AbstractUnivariateStatistic\n-    implements UnivariateStatistic {\n+    implements UnivariateStatistic, Serializable {\n+    \n+    /** Serialization UID */\n+    static final long serialVersionUID = -8007759382851708045L;\n \n     /**\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[])\n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n package org.apache.commons.math.stat.univariate;\n \n import java.io.Serializable;\n+import java.util.Arrays;\n \n import org.apache.commons.discovery.tools.DiscoverClass;\n+import org.apache.commons.math.stat.univariate.moment.GeometricMean;\n+import org.apache.commons.math.stat.univariate.moment.Kurtosis;\n+import org.apache.commons.math.stat.univariate.moment.Mean;\n+import org.apache.commons.math.stat.univariate.moment.Skewness;\n+import org.apache.commons.math.stat.univariate.moment.Variance;\n+import org.apache.commons.math.stat.univariate.rank.Max;\n+import org.apache.commons.math.stat.univariate.rank.Min;\n+import org.apache.commons.math.stat.univariate.rank.Percentile;\n+import org.apache.commons.math.stat.univariate.summary.Sum;\n+import org.apache.commons.math.stat.univariate.summary.SumOfSquares;\n \n \n /**\n  * Abstract factory class for univariate statistical summaries.\n  * \n- * @version $Revision: 1.5 $ $Date: 2004/05/23 00:56:15 $\n+ * @version $Revision: 1.6 $ $Date: 2004/06/01 21:34:35 $\n  */\n-public abstract class DescriptiveStatistics implements Serializable, StatisticalSummary {\n-\n+public abstract class DescriptiveStatistics implements StatisticalSummary, Serializable {\n+    \n+    /** Serialization UID */\n+    static final long serialVersionUID = 5188298269533339922L;\n+    \n \t/**\n \t * Create an instance of a <code>DescriptiveStatistics</code>\n      * @param cls the type of <code>DescriptiveStatistics</code> object to\n \t * arithmetic mean </a> of the available values \n \t * @return The mean or Double.NaN if no values have been added.\n \t */\n-\tpublic abstract double getMean();\n+    public double getMean() {\n+    \treturn apply(new Mean());\n+    }\n \n \t/** \n \t * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n \t * @return The geometricMean, Double.NaN if no values have been added, \n \t * or if the productof the available values is less than or equal to 0.\n \t */\n-\tpublic abstract double getGeometricMean();\n+    public double getGeometricMean() {\n+    \treturn apply(new GeometricMean());\n+    }\n \n \t/** \n \t * Returns the variance of the available values.\n \t * @return The variance, Double.NaN if no values have been added \n \t * or 0.0 for a single value set.  \n \t */\n-\tpublic abstract double getVariance();\n+    public double getVariance() {\n+    \treturn apply(new Variance());\n+    }\n \n \t/** \n \t * Returns the standard deviation of the available values.\n \t * @return The standard deviation, Double.NaN if no values have been added \n \t * or 0.0 for a single value set. \n \t */\n-\tpublic abstract double getStandardDeviation();\n+    public double getStandardDeviation() {\n+    \tdouble stdDev = Double.NaN;\n+    \tif (getN() > 0) {\n+    \t\tif (getN() > 1) {\n+    \t\t\tstdDev = Math.sqrt(getVariance());\n+    \t\t} else {\n+    \t\t\tstdDev = 0.0;\n+    \t\t}\n+    \t}\n+    \treturn (stdDev);\n+    }\n \n \t/**\n \t * Returns the skewness of the available values. Skewness is a \n \t * @return The skewness, Double.NaN if no values have been added \n \t * or 0.0 for a value set &lt;=2. \n \t */\n-\tpublic abstract double getSkewness();\n+    public double getSkewness() {\n+    \treturn apply(new Skewness());\n+    }\n \n \t/**\n \t * Returns the Kurtosis of the available values. Kurtosis is a \n \t * @return The kurtosis, Double.NaN if no values have been added, or 0.0 \n \t * for a value set &lt;=3. \n \t */\n-\tpublic abstract double getKurtosis();\n+    public double getKurtosis() {\n+    \treturn apply(new Kurtosis());\n+    }\n \n \t/** \n \t * Returns the maximum of the available values\n \t * @return The max or Double.NaN if no values have been added.\n \t */\n-\tpublic abstract double getMax();\n+    public double getMax() {\n+    \treturn apply(new Max());\n+    }\n \n \t/** \n \t* Returns the minimum of the available values\n \t* @return The min or Double.NaN if no values have been added.\n \t*/\n-\tpublic abstract double getMin();\n+    public double getMin() {\n+    \treturn apply(new Min());\n+    }\n \n \t/** \n \t * Returns the number of available values\n \t * Returns the sum of the values that have been added to Univariate.\n \t * @return The sum or Double.NaN if no values have been added\n \t */\n-\tpublic abstract double getSum();\n+    public double getSum() {\n+    \treturn apply(new Sum());\n+    }\n \n \t/**\n \t * Returns the sum of the squares of the available values.\n \t * @return The sum of the squares or Double.NaN if no \n \t * values have been added.\n \t */\n-\tpublic abstract double getSumsq();\n+    public double getSumsq() {\n+    \treturn apply(new SumOfSquares());\n+    }\n \n \t/** \n \t * Resets all statistics and storage\n      * @return returns the current set of \n      * numbers sorted in ascending order        \n      */\n-\tpublic abstract double[] getSortedValues();\n+    public double[] getSortedValues() {\n+        double[] sort = getValues();\n+        Arrays.sort(sort);\n+        return sort;\n+    }\n \n     /**\n      * Returns the element at the specified index\n      * @return An estimate for the pth percentile of the stored data \n      * values\n      */\n-\tpublic abstract double getPercentile(double p);\n+    public double getPercentile(double p) {\n+    \treturn apply(new Percentile(p));\n+    }\n \t\n+    /**\n+     * Generates a text report displaying\n+     * univariate statistics from values that\n+     * have been added.\n+     * @return String with line feeds displaying statistics\n+     */\n+    public String toString() {\n+    \tStringBuffer outBuffer = new StringBuffer();\n+    \toutBuffer.append(\"UnivariateImpl:\\n\");\n+    \toutBuffer.append(\"n: \" + getN() + \"\\n\");\n+    \toutBuffer.append(\"min: \" + getMin() + \"\\n\");\n+    \toutBuffer.append(\"max: \" + getMax() + \"\\n\");\n+    \toutBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+    \toutBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+    \toutBuffer.append(\"skewness: \" + getSkewness() + \"\\n\");\n+    \toutBuffer.append(\"kurtosis: \" + getKurtosis() + \"\\n\");\n+    \treturn outBuffer.toString();\n+    }\n+    \n \t/**\n \t * Apply the given statistic to the data associated with this set of statistics.\n \t * @param stat the statistic to apply\n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.stat.univariate.DescriptiveStatistics}.\n  * \n- * @version $Revision: 1.5 $ $Date: 2004/05/23 00:30:01 $\n+ * @version $Revision: 1.6 $ $Date: 2004/06/01 21:34:35 $\n  */\n-public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics implements Serializable {\n+public class DescriptiveStatisticsImpl extends DescriptiveStatistics implements Serializable {\n \n+    /** Serializable version identifier */\n+    static final long serialVersionUID = -1868088725461221010L;\n+    \n \t/** hold the window size **/\n \tprotected int windowSize;\n     \n--- a/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n /**\n  * Abstract factory class for univariate statistical summaries.\n  * \n- * @version $Revision: 1.5 $ $Date: 2004/05/19 14:16:31 $\n+ * @version $Revision: 1.6 $ $Date: 2004/06/01 21:34:35 $\n  */\n-public abstract class SummaryStatistics implements Serializable, StatisticalSummary {\n+public abstract class SummaryStatistics implements StatisticalSummary, Serializable {\n \n+    /** Serialization UID */\n+    static final long serialVersionUID = -6400596334135654825L;\n+    \n \t/**\n \t * Create an instance of a <code>SummaryStatistics</code>\n      * @param cls the type of <code>SummaryStatistics</code> object to\n--- a/src/java/org/apache/commons/math/stat/univariate/SummaryStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/SummaryStatisticsImpl.java\n  */\n package org.apache.commons.math.stat.univariate;\n \n+import java.io.Serializable;\n import org.apache.commons.math.stat.univariate.moment.SecondMoment;\n import org.apache.commons.math.stat.univariate.moment.GeometricMean;\n import org.apache.commons.math.stat.univariate.moment.Mean;\n /**\n  * Provides a default {@link SummaryStatistics} implementation.\n  * \n- * @version $Revision: 1.2 $ $Date: 2004/04/27 04:37:59 $  \n+ * @version $Revision: 1.3 $ $Date: 2004/06/01 21:34:35 $  \n  */\n-public class SummaryStatisticsImpl extends SummaryStatistics {\n+public class SummaryStatisticsImpl extends SummaryStatistics implements Serializable {\n+\n+    /** Serializable version identifier */\n+    static final long serialVersionUID = 8787174276883311692L;\n \n     /** count of values that have been added */\n     protected long n = 0;", "timestamp": 1086125675, "metainfo": ""}