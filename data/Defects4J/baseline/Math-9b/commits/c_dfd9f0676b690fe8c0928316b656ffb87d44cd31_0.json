{"sha": "dfd9f0676b690fe8c0928316b656ffb87d44cd31", "log": "Added distance1, distance and distanceInf utility methods for double and int arrays in MathUtils JIRA: MATH-265  ", "commit": "\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n \n     }\n \n+    /**\n+     * Calculates the L<sub>1</sub> (sum of abs) distance between two points.\n+     *\n+     * @param p1 the first point\n+     * @param p2 the second point\n+     * @return the L<sub>1</sub> distance between the two points\n+     */\n+    public static final double distance1(double[] p1, double[] p2) {\n+        double sum = 0;\n+        for (int i = 0; i < p1.length; i++) {\n+            sum += Math.abs(p1[i] - p2[i]);\n+        }\n+        return sum;\n+    }\n+    \n+    /**\n+     * Calculates the L<sub>1</sub> (sum of abs) distance between two points.\n+     *\n+     * @param p1 the first point\n+     * @param p2 the second point\n+     * @return the L<sub>1</sub> distance between the two points\n+     */\n+    public static final int distance1(int[] p1, int[] p2) {\n+      int sum = 0;\n+      for (int i = 0; i < p1.length; i++) {\n+          sum += Math.abs(p1[i] - p2[i]);\n+      }\n+      return sum;\n+    }\n+\n+    /**\n+     * Calculates the L<sub>2</sub> (Euclidean) distance between two points.\n+     *\n+     * @param p1 the first point\n+     * @param p2 the second point\n+     * @return the L<sub>2</sub> distance between the two points\n+     */\n+    public static final double distance(double[] p1, double[] p2) {\n+        double sum = 0;\n+        for (int i = 0; i < p1.length; i++) {\n+            final double dp = p1[i] - p2[i];\n+            sum += dp * dp;\n+        }\n+        return Math.sqrt(sum);\n+    }\n+    \n+    /**\n+     * Calculates the L<sub>2</sub> (Euclidean) distance between two points.\n+     *\n+     * @param p1 the first point\n+     * @param p2 the second point\n+     * @return the L<sub>2</sub> distance between the two points\n+     */\n+    public static final double distance(int[] p1, int[] p2) {\n+      int sum = 0;\n+      for (int i = 0; i < p1.length; i++) {\n+          final int dp = p1[i] - p2[i];\n+          sum += dp * dp;\n+      }\n+      return Math.sqrt(sum);\n+    }\n+    \n+    /**\n+     * Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.\n+     *\n+     * @param p1 the first point\n+     * @param p2 the second point\n+     * @return the L<sub>&infin;</sub> distance between the two points\n+     */\n+    public static final double distanceInf(double[] p1, double[] p2) {\n+        double max = 0;\n+        for (int i = 0; i < p1.length; i++) {\n+            max = Math.max(max, Math.abs(p1[i] - p2[i]));\n+        }\n+        return max;\n+    }\n+    \n+    /**\n+     * Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.\n+     *\n+     * @param p1 the first point\n+     * @param p2 the second point\n+     * @return the L<sub>&infin;</sub> distance between the two points\n+     */\n+    public static final int distanceInf(int[] p1, int[] p2) {\n+        int max = 0;\n+        for (int i = 0; i < p1.length; i++) {\n+            max = Math.max(max, Math.abs(p1[i] - p2[i]));\n+        }\n+        return max;\n+    }\n+\n+    \n }\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n         assertEquals(bigOne, MathUtils.pow(twentyOne, BigInteger.valueOf(103l)));\n         \n     }\n-}\n+\n+    public void testL1DistanceDouble() {\n+        double[] p1 = { 2.5,  0.0 };\n+        double[] p2 = { -0.5, 4.0 };\n+        assertEquals(7.0, MathUtils.distance1(p1, p2));\n+    }\n+\n+    public void testL1DistanceInt() {\n+        int[] p1 = { 3, 0 };\n+        int[] p2 = { 0, 4 };\n+        assertEquals(7, MathUtils.distance1(p1, p2));\n+    }\n+\n+    public void testL2DistanceDouble() {\n+        double[] p1 = { 2.5,  0.0 };\n+        double[] p2 = { -0.5, 4.0 };\n+        assertEquals(5.0, MathUtils.distance(p1, p2));\n+    }\n+\n+    public void testL2DistanceInt() {\n+        int[] p1 = { 3, 0 };\n+        int[] p2 = { 0, 4 };\n+        assertEquals(5.0, MathUtils.distance(p1, p2));\n+    }\n+\n+    public void testLInfDistanceDouble() {\n+        double[] p1 = { 2.5,  0.0 };\n+        double[] p2 = { -0.5, 4.0 };\n+        assertEquals(4.0, MathUtils.distanceInf(p1, p2));\n+    }\n+\n+    public void testLInfDistanceInt() {\n+        int[] p1 = { 3, 0 };\n+        int[] p2 = { 0, 4 };\n+        assertEquals(4, MathUtils.distanceInf(p1, p2));\n+    }\n+\n+}", "timestamp": 1241206184, "metainfo": ""}