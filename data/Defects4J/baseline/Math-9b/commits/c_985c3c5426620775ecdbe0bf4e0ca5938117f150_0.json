{"sha": "985c3c5426620775ecdbe0bf4e0ca5938117f150", "log": "Cosmetic changes to transform.FastFourierTransformer (MATH-677).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n     /** Serializable version identifier. */\n     static final long serialVersionUID = 5138259215438106000L;\n \n-\n-    /**\n-     * {@code true} if the orthogonal version of the FFT should be used.\n+    /**\n+     * {@code true} if the unitary version of the DFT should be used.\n      *\n      * @see #create()\n      * @see #createUnitary()\n     /** The roots of unity. */\n     private RootsOfUnity roots = new RootsOfUnity();\n \n-    /** Construct a default transformer. */\n-    private FastFourierTransformer() {\n-        super();\n-        this.unitary = false;\n-    }\n-\n     /**\n      * Creates a new instance of this class, with various normalization\n      * conventions.\n      *\n-     * @param unitary {@code false} if the direct Fourier transform is\n-     * <em>not</em> to be scaled, {@code true} if it is to be scaled so as to\n-     * make the transform unitary.\n+     * @param unitary {@code false} if the DFT is <em>not</em> to be scaled,\n+     * {@code true} if it is to be scaled so as to make the transform unitary.\n      * @see #create()\n      * @see #createUnitary()\n      */\n      * <p>\n      * Returns a new instance of this class. The returned transformer uses the\n      * normalizing conventions described below.\n-     * </p>\n      * <ul>\n      * <li>Forward transform:\n      * y<sub>n</sub> = &sum;<sub>k=0</sub><sup>N-1</sup>\n      * x<sub>k</sub> exp(-2&pi;i n k / N),</li>\n      * <li>Inverse transform:\n      * x<sub>k</sub> = N<sup>-1</sup> &sum;<sub>n=0</sub><sup>N-1</sup>\n-     * y<sub>n</sub> exp(2&pi;i n k / N).</li>\n+     * y<sub>n</sub> exp(2&pi;i n k / N),</li>\n      * </ul>\n-     *\n-     * @return a new FFT transformer, with \"standard\" normalizing conventions\n+     * where N is the size of the data sample.\n+     * </p>\n+     *\n+     * @return a new DFT transformer, with \"standard\" normalizing conventions\n      */\n     public static FastFourierTransformer create() {\n         return new FastFourierTransformer(false);\n      * x<sub>k</sub> = N<sup>-1/2</sup> &sum;<sub>n=0</sub><sup>N-1</sup>\n      * y<sub>n</sub> exp(2&pi;i n k / N),</li>\n      * </ul>\n-     * which make the transform unitary.\n+     * which make the transform unitary. N is the size of the data sample.\n      * </p>\n      *\n      * @return a new FFT transformer, with unitary normalizing conventions", "timestamp": 1323413109, "metainfo": ""}