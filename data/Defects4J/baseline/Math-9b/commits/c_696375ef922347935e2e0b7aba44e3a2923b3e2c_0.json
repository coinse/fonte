{"sha": "696375ef922347935e2e0b7aba44e3a2923b3e2c", "log": "Fix a problem with the default sparseIterator when an array has exactly one non-zero element Submitted by: Albert Huang (with some style tweeks) Issue: MATH-367   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n package org.apache.commons.math.linear;\n \n import java.util.Iterator;\n+import java.util.NoSuchElementException;\n \n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n         /** Dimension of the vector. */\n         private final int dim;\n \n-        /** Temporary entry (reused on each call to {@link #next()}. */\n-        private EntryImpl tmp = new EntryImpl();\n-\n-        /** Current entry. */\n+        /** last entry returned by {@link #next()} */\n         private EntryImpl current;\n \n-        /** Next entry. */\n+        /** Next entry for {@link #next()} to return. */\n         private EntryImpl next;\n \n         /** Simple constructor. */\n         protected SparseEntryIterator() {\n             dim = getDimension();\n             current = new EntryImpl();\n-            if (current.getValue() == 0) {\n-                advance(current);\n+            next = new EntryImpl();\n+            if(next.getValue() == 0){\n+            \tadvance(next);\n             }\n-            if(current.getIndex() >= 0){\n-                // There is at least one non-zero entry\n-                next = new EntryImpl();\n-                next.setIndex(current.getIndex());\n-                advance(next);\n-            } else {\n-                // The vector consists of only zero entries, so deny having a next\n-                current = null;\n-            }\n-        }\n-\n-        /** Advance an entry up to the next non null one.\n+        }\n+\n+        /** Advance an entry up to the next nonzero one.\n          * @param e entry to advance\n          */\n         protected void advance(EntryImpl e) {\n \n         /** {@inheritDoc} */\n         public boolean hasNext() {\n-            return current != null;\n+            return next.getIndex() >= 0;\n         }\n \n         /** {@inheritDoc} */\n         public Entry next() {\n-            tmp.setIndex(current.getIndex());\n-            if (next != null) {\n-                current.setIndex(next.getIndex());\n-                advance(next);\n-                if (next.getIndex() < 0) {\n-                    next = null;\n-                }\n-            } else {\n-                current = null;\n-            }\n-            return tmp;\n+        \tint index = next.getIndex();\n+        \tif(index < 0){\n+        \t\tthrow new NoSuchElementException();\n+        \t}\n+        \tcurrent.setIndex(index);\n+        \tadvance(next);\n+        \treturn current;\n         }\n \n         /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java\n         for(Iterator<Entry> it = v.sparseIterator(); it.hasNext() && (e = it.next()) != null; i++) {\n             assertEquals(nonDefaultV2[i], e.getValue());\n         }\n+        double [] onlyOne = {0d, 1.0, 0d};\n+        v = new TestVectorImpl(onlyOne);\n+        for(Iterator<Entry> it = v.sparseIterator(); it.hasNext() && (e = it.next()) != null; ) {\n+            assertEquals(onlyOne[1], e.getValue());\n+        }\n+        \n     }\n \n     public void testClone() throws Exception {", "timestamp": 1273453895, "metainfo": ""}