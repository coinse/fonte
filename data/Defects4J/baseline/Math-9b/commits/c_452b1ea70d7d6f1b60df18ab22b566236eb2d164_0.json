{"sha": "452b1ea70d7d6f1b60df18ab22b566236eb2d164", "log": "improved test coverage  ", "commit": "\n--- a/src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/DummyStepInterpolatorTest.java\n   }\n \n   public void testSerialization()\n-    throws DerivativeException, IntegratorException,\n-           IOException, ClassNotFoundException {\n+  throws DerivativeException, IntegratorException,\n+         IOException, ClassNotFoundException {\n \n-      double[]   y    =   { 0.0, 1.0, -2.0 };\n-      DummyStepInterpolator interpolator = new DummyStepInterpolator(y, true);\n-      interpolator.storeTime(0);\n-      interpolator.shift();\n-      interpolator.storeTime(1);\n+    double[]   y    =   { 0.0, 1.0, -2.0 };\n+    DummyStepInterpolator interpolator = new DummyStepInterpolator(y, true);\n+    interpolator.storeTime(0);\n+    interpolator.shift();\n+    interpolator.storeTime(1);\n \n-      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-      ObjectOutputStream    oos = new ObjectOutputStream(bos);\n-      oos.writeObject(interpolator);\n+    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+    ObjectOutputStream    oos = new ObjectOutputStream(bos);\n+    oos.writeObject(interpolator);\n \n-      assertTrue(bos.size () > 150);\n-      assertTrue(bos.size () < 250);\n+    assertTrue(bos.size () > 150);\n+    assertTrue(bos.size () < 250);\n \n-      ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n-      ObjectInputStream     ois = new ObjectInputStream(bis);\n-      DummyStepInterpolator dsi = (DummyStepInterpolator) ois.readObject();\n+    ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n+    ObjectInputStream     ois = new ObjectInputStream(bis);\n+    DummyStepInterpolator dsi = (DummyStepInterpolator) ois.readObject();\n \n-      dsi.setInterpolatedTime(0.5);\n-      double[] result = dsi.getInterpolatedState();\n-      for (int i = 0; i < result.length; ++i) {\n-          assertTrue(Math.abs(result[i] - y[i]) < 1.0e-10);\n+    dsi.setInterpolatedTime(0.5);\n+    double[] result = dsi.getInterpolatedState();\n+    for (int i = 0; i < result.length; ++i) {\n+        assertTrue(Math.abs(result[i] - y[i]) < 1.0e-10);\n+    }\n+\n+  }\n+\n+  public void testSerializationError()\n+  throws DerivativeException, IntegratorException,\n+         IOException, ClassNotFoundException {\n+\n+    double[] y = { 0.0, 1.0, -2.0 };\n+    ErrorGeneratingInterpolator interpolator =\n+        new ErrorGeneratingInterpolator(y, true);\n+    interpolator.storeTime(0);\n+    interpolator.shift();\n+    interpolator.storeTime(1);\n+\n+    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+    ObjectOutputStream    oos = new ObjectOutputStream(bos);\n+    oos.writeObject(interpolator);\n+\n+    assertTrue(bos.size () > 250);\n+    assertTrue(bos.size () < 300);\n+\n+    ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n+    ObjectInputStream     ois = new ObjectInputStream(bis);\n+    try {\n+        ois.readObject();\n+        fail(\"an exception should have been thrown\");\n+    } catch (IOException ioe) {\n+        // expected behavior\n+        assertNull(ioe.getMessage());\n+    } catch (Exception e) {\n+        fail(\"wrong exception caught\");\n+    }\n+\n+  }\n+\n+  private static class ErrorGeneratingInterpolator extends DummyStepInterpolator {\n+      public ErrorGeneratingInterpolator() {\n+          super();\n       }\n-\n+      protected ErrorGeneratingInterpolator(double[] y, boolean forward) {\n+          super(y, forward);\n+      }\n+      public void computeInterpolatedState(double theta, double oneMinusThetaH)\n+      throws DerivativeException {\n+          throw new DerivativeException(null);\n+      }\n+      private static final long serialVersionUID = 0x3f6ab636f0c93571L;\n   }\n \n   public static Test suite() {", "timestamp": 1193410163, "metainfo": ""}