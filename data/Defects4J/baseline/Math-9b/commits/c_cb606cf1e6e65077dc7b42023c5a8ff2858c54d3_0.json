{"sha": "cb606cf1e6e65077dc7b42023c5a8ff2858c54d3", "log": "Stopped swallowing MathExceptions, cleaned up formatting.   ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/TestStatisticTest.java\n+++ b/src/test/org/apache/commons/math/stat/TestStatisticTest.java\n /**\n  * Test cases for the TestStatistic class.\n  *\n- * @version $Revision: 1.11 $ $Date: 2004/02/21 21:35:17 $\n+ * @version $Revision: 1.12 $ $Date: 2004/03/07 20:47:06 $\n  */\n \n public final class TestStatisticTest extends TestCase {\n         return suite;\n     }\n \n-    public void testChiSquare() {\n+    public void testChiSquare() throws MathException {\n         double[] observed = { 11, 24, 69, 96 };\n         double[] expected = { 8.2, 25.2, 65.8, 100.8 };\n-        assertEquals(\n-            \"chi-square statistic\",\n-            1.39743495,\n-            testStatistic.chiSquare(expected, observed),\n-            10E-5);\n+        assertEquals(\"chi-square statistic\", 1.39743495, testStatistic.chiSquare(expected, observed), 10E-5);\n \n         double[] tooShortObs = { 0 };\n         double[] tooShortEx = { 1 };\n             testStatistic.chiSquare(tooShortObs, tooShortEx);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // expected\n         }\n \n         try {\n             testStatistic.chiSquareTest(tooShortObs, tooShortEx);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+            // expected\n+        }  \n \n         double[] unMatchedObs = { 0, 1, 2, 3 };\n         double[] unMatchedEx = { 1, 1, 2 };\n         try {\n             testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n-            fail(\n-                \"arrays have different lengths,\"\n-                    + \" IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n+            fail(\"arrays have different lengths, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n         }\n         expected[0] = 0;\n         try {\n             testStatistic.chiSquareTest(expected, observed, .01);\n             fail(\"bad expected count, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+            // expected\n+        }  \n+        \n         /** from http://www.vsenvirginia.org/stat/classpractice/Voter_Preferences_CP.pdf */\n         double[] observed1 = { 504, 523, 72, 70, 31 };\n         double[] expected1 = { 480, 540, 84, 60, 36 };\n-\n-        try {\n-            assertEquals(\n-                \"chi-square test statistic\",\n-                5.81,\n-                testStatistic.chiSquare(expected1, observed1),\n-                10E-2);\n-            assertEquals(\n-                \"chi-square p-value\",\n-                0.21,\n-                testStatistic.chiSquareTest(expected1, observed1),\n-                10E-2);\n-            assertTrue(\n-                \"chi-square test reject\",\n-                testStatistic.chiSquareTest(expected1, observed1, 0.3));\n-            assertTrue(\n-                \"chi-square test accept\",\n-                !testStatistic.chiSquareTest(expected1, observed1, 0.1));\n-\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+        assertEquals( \"chi-square test statistic\", 5.81, testStatistic.chiSquare(expected1, observed1), 10E-2);\n+        assertEquals(\"chi-square p-value\", 0.21, testStatistic.chiSquareTest(expected1, observed1), 10E-2);\n+        assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.3));\n+        assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.1));\n \n         try {\n             testStatistic.chiSquareTest(expected1, observed1, 95);\n             fail(\"alpha out of range, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    public void testT() {\n+            // expected\n+        }\n+    }\n+\n+    public void testT() throws Exception {\n         double[] observed =\n-            {\n-                93.0,\n-                103.0,\n-                95.0,\n-                101.0,\n-                91.0,\n-                105.0,\n-                96.0,\n-                94.0,\n-                101.0,\n-                88.0,\n-                98.0,\n-                94.0,\n-                101.0,\n-                92.0,\n-                95.0 };\n+            {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0,  88.0, 98.0, 94.0, 101.0, 92.0, 95.0 };\n         double mu = 100.0;\n         SummaryStatistics sampleStats = null;\n-        try {\n-            sampleStats =\n-                SummaryStatistics.newInstance(\n-                    SummaryStatisticsImpl.class);\n-        } catch (InstantiationException e5) {\n-            // TODO Auto-generated catch block\n-            e5.printStackTrace();\n-        } catch (IllegalAccessException e5) {\n-            // TODO Auto-generated catch block\n-            e5.printStackTrace();\n-        }\n+        sampleStats = SummaryStatistics.newInstance();\n         for (int i = 0; i < observed.length; i++) {\n             sampleStats.addValue(observed[i]);\n         }\n \n-        assertEquals(\n-            \"t statistic\",\n-            -2.82,\n-            testStatistic.t(mu, observed),\n-            10E-3);\n-        assertEquals(\n-            \"t statistic\",\n-            -2.82,\n-            testStatistic.t(mu, sampleStats),\n-            10E-3);\n+        assertEquals(\"t statistic\", -2.82, testStatistic.t(mu, observed), 10E-3);\n+        assertEquals(\"t statistic\", -2.82, testStatistic.t(mu, sampleStats), 10E-3);\n \n         double[] nullObserved = null;\n         try {\n             testStatistic.t(mu, nullObserved);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-\n-        SummaryStatistics nullStats = SummaryStatistics.newInstance();\n-         \n+            // expected\n+        }\n+\n+        SummaryStatistics nullStats = null;   \n         try {\n             testStatistic.t(mu, nullStats);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-\n-        double[] emptyObs = {\n-        };\n+            // expected\n+        }\n+\n+        double[] emptyObs = {};\n         try {\n             testStatistic.t(mu, emptyObs);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-\n-        SummaryStatistics emptyStats =SummaryStatistics.newInstance();\n-        \n+            // expected\n+        }\n+\n+        SummaryStatistics emptyStats =SummaryStatistics.newInstance();   \n         try {\n             testStatistic.t(mu, emptyStats);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // expected\n         }\n \n         double[] tooShortObs = { 1.0 };\n             testStatistic.t(mu, tooShortObs);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // exptected\n         }\n         try {\n             testStatistic.tTest(mu, tooShortObs);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-\n-        SummaryStatistics tooShortStats = SummaryStatistics.newInstance();\n-        \n+           // expected\n+        }  \n+\n+        SummaryStatistics tooShortStats = SummaryStatistics.newInstance();     \n         tooShortStats.addValue(0d);\n         tooShortStats.addValue(2d);\n         try {\n             testStatistic.t(mu, tooShortStats);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+            // exptected\n         }\n         try {\n             testStatistic.tTest(mu, tooShortStats);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+            // exptected\n+        }  \n \n         /** Moore and McCabe Example 8.3, p 516 */\n         double[] oneSidedP =\n-            {\n-                2d,\n-                0d,\n-                6d,\n-                6d,\n-                3d,\n-                3d,\n-                2d,\n-                3d,\n-                -6d,\n-                6d,\n-                6d,\n-                6d,\n-                3d,\n-                0d,\n-                1d,\n-                1d,\n-                0d,\n-                2d,\n-                3d,\n-                3d };\n-\n-        SummaryStatistics oneSidedPStats = SummaryStatistics.newInstance();;\n-        \n+            {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, 6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d };\n+        SummaryStatistics oneSidedPStats = SummaryStatistics.newInstance();    \n         for (int i = 0; i < oneSidedP.length; i++) {\n             oneSidedPStats.addValue(oneSidedP[i]);\n         }\n-\n-        try {\n-            assertEquals(\n-                \"one sample t stat\",\n-                3.86,\n-                testStatistic.t(0d, oneSidedP),\n-                0.01);\n-            assertEquals(\n-                \"one sample t stat\",\n-                3.86,\n-                testStatistic.t(0d, oneSidedPStats),\n-                0.01);\n-            assertEquals(\n-                \"one sample p value\",\n-                0.00052,\n-                testStatistic.tTest(0d, oneSidedP) / 2d,\n-                10E-5);\n-            assertEquals(\n-                \"one sample p value\",\n-                0.00052,\n-                testStatistic.tTest(0d, oneSidedPStats) / 2d,\n-                10E-5);\n-            assertTrue(\n-                \"one sample t-test reject\",\n-                testStatistic.tTest(0d, oneSidedP, 0.01));\n-            assertTrue(\n-                \"one sample t-test reject\",\n-                testStatistic.tTest(0d, oneSidedPStats, 0.01));\n-            assertTrue(\n-                \"one sample t-test accept\",\n-                !testStatistic.tTest(0d, oneSidedP, 0.0001));\n-            assertTrue(\n-                \"one sample t-test accept\",\n-                !testStatistic.tTest(0d, oneSidedPStats, 0.0001));\n-\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-\n+        assertEquals(\"one sample t stat\", 3.86, testStatistic.t(0d, oneSidedP), 0.01);\n+        assertEquals(\"one sample t stat\", 3.86, testStatistic.t(0d, oneSidedPStats), 0.01);\n+        assertEquals(\"one sample p value\", 0.00052, testStatistic.tTest(0d, oneSidedP) / 2d, 10E-5);\n+        assertEquals(\"one sample p value\", 0.00052, testStatistic.tTest(0d, oneSidedPStats) / 2d, 10E-5);\n+        assertTrue(\"one sample t-test reject\", testStatistic.tTest(0d, oneSidedP, 0.01));\n+        assertTrue(\"one sample t-test reject\", testStatistic.tTest(0d, oneSidedPStats, 0.01));\n+        assertTrue(\"one sample t-test accept\", !testStatistic.tTest(0d, oneSidedP, 0.0001));\n+        assertTrue(\"one sample t-test accept\", !testStatistic.tTest(0d, oneSidedPStats, 0.0001));\n+         \n         try {\n             testStatistic.tTest(0d, oneSidedP, 95);\n             fail(\"alpha out of range, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+            // exptected\n+        }  \n+        \n         try {\n             testStatistic.tTest(0d, oneSidedPStats, 95);\n             fail(\"alpha out of range, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+            // expected\n+        }  \n \n         /** Moore and McCabe Example 8.12, p 552 */\n         double[] sample1 = { 7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d };\n-        double[] sample2 =\n-            { -1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d };\n-\n-        SummaryStatistics sampleStats1 = SummaryStatistics.newInstance();\n-        \n+        double[] sample2 = { -1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d };\n+        SummaryStatistics sampleStats1 = SummaryStatistics.newInstance();  \n         for (int i = 0; i < sample1.length; i++) {\n             sampleStats1.addValue(sample1[i]);\n         }\n-\n-        SummaryStatistics sampleStats2 = SummaryStatistics.newInstance();\n-        \n+        SummaryStatistics sampleStats2 = SummaryStatistics.newInstance();    \n         for (int i = 0; i < sample2.length; i++) {\n             sampleStats2.addValue(sample2[i]);\n         }\n-        try {\n-            //FIXME: textbook example reported t stat uses pooled variance\n-            // should replace with R-verified example\n-            assertEquals(\n-                \"two sample t stat\",\n-                1.634,\n-                testStatistic.t(sample1, sample2),\n-                0.1);\n-            assertEquals(\n-                \"two sample t stat\",\n-                1.634,\n-                testStatistic.t(sampleStats1, sampleStats2),\n-                0.1);\n-            // This test is OK, since book reports non-pooled exact p-value\n-            assertEquals(\n-                \"two sample p value\",\n-                0.059,\n-                testStatistic.tTest(sample1, sample2) / 2d,\n-                10E-3);\n-            assertEquals(\n-                \"two sample p value\",\n-                0.059,\n-                testStatistic.tTest(sampleStats1, sampleStats2) / 2d,\n-                10E-3);\n-            assertTrue(\n-                \"two sample t-test reject\",\n-                testStatistic.tTest(sample1, sample2, 0.2));\n-            assertTrue(\n-                \"two sample t-test reject\",\n-                testStatistic.tTest(sampleStats1, sampleStats2, 0.2));\n-            assertTrue(\n-                \"two sample t-test accept\",\n-                !testStatistic.tTest(sample1, sample2, 0.1));\n-            assertTrue(\n-                \"two sample t-test accept\",\n-                !testStatistic.tTest(sampleStats1, sampleStats2, 0.1));\n-\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+        //FIXME: textbook example reported t stat uses pooled variance\n+        // should replace the following two tests  with R-verified example\n+        assertEquals(\"two sample t stat\", 1.634, testStatistic.t(sample1, sample2), 0.1);\n+        assertEquals(\"two sample t stat\", 1.634, testStatistic.t(sampleStats1, sampleStats2), 0.1);\n+        \n+        // These tests are OK, since book reports non-pooled exact p-value\n+        assertEquals(\"two sample p value\", 0.059, testStatistic.tTest(sample1, sample2) / 2d, 10E-3);\n+        assertEquals(\"two sample p value\", 0.059, testStatistic.tTest(sampleStats1, sampleStats2) / 2d, 10E-3);\n+        assertTrue(\"two sample t-test reject\", testStatistic.tTest(sample1, sample2, 0.2));\n+        assertTrue(\"two sample t-test reject\", testStatistic.tTest(sampleStats1, sampleStats2, 0.2));\n+        assertTrue(\"two sample t-test accept\", !testStatistic.tTest(sample1, sample2, 0.1));\n+        assertTrue(\"two sample t-test accept\", !testStatistic.tTest(sampleStats1, sampleStats2, 0.1));\n+     \n         try {\n             testStatistic.tTest(sample1, sample2, 95);\n             fail(\"alpha out of range, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+            // exptected\n+        } \n+        \n         try {\n             testStatistic.tTest(sampleStats1, sampleStats2, 95);\n             fail(\"alpha out of range, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+            // expected \n+        }  \n+        \n         try {\n             testStatistic.tTest(sample1, tooShortObs, .01);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+            // expected\n+        }  \n+        \n         try {\n             testStatistic.tTest(sampleStats1, tooShortStats, .01);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+            // expected\n+        }  \n+        \n         try {\n             testStatistic.tTest(sample1, tooShortObs);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+           // expected\n+        }  \n+        \n         try {\n             testStatistic.tTest(sampleStats1, tooShortStats);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n+            // expected\n+        }  \n+        \n         try {\n             testStatistic.t(sample1, tooShortObs);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n+            // expected\n+        }\n+        \n         try {\n             testStatistic.t(sampleStats1, tooShortStats);\n             fail(\"insufficient data, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n-            ;\n+           // exptected\n         }\n     }\n }", "timestamp": 1078692426, "metainfo": ""}