{"sha": "e914fd722764851e2abdacb3ac41079d8269b649", "log": "In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/SymmLQ.java\n+++ b/src/main/java/org/apache/commons/math3/linear/SymmLQ.java\n             }\n             hasConverged = (cgnorm <= epsx) || (cgnorm <= epsr);\n         }\n+\n+        /**\n+         * Returns {@code true} if the default stopping criterion is fulfilled.\n+         *\n+         * @return {@code true} if convergence of the iterations has occured\n+         */\n+        public boolean hasConverged() {\n+            return hasConverged;\n+        }\n     }\n \n     /**\n         }\n         /* Cause termination if beta is essentially zero. */\n         final boolean earlyStop;\n-        earlyStop = (state.beta < MACH_PREC) || (state.hasConverged);\n+        earlyStop = (state.beta < MACH_PREC) || (state.hasConverged());\n         manager.fireInitializationEvent(event);\n         if (!earlyStop) {\n             do {\n                 manager.fireIterationStartedEvent(event);\n                 state.update();\n                 manager.fireIterationPerformedEvent(event);\n-            } while (!state.hasConverged);\n+            } while (!state.hasConverged());\n         }\n         state.refine(x);\n         /*", "timestamp": 1332227045, "metainfo": ""}