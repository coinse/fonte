{"sha": "9a4116d03cfe98cbb857b717e4e693c700256dd9", "log": "MATH-874 New API allows to pass the simplex as an argument to \"optimize\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/AbstractSimplex.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/AbstractSimplex.java\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.optimization.PointValuePair;\n+import org.apache.commons.math3.optimization.OptimizationData;\n \n /**\n  * This class implements the simplex concept.\n  * @version $Id$\n  * @since 3.0\n  */\n-public abstract class AbstractSimplex {\n+public abstract class AbstractSimplex implements OptimizationData {\n     /** Simplex. */\n     private PointValuePair[] simplex;\n     /** Start simplex configuration. */\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/SimplexOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/SimplexOptimizer.java\n import org.apache.commons.math3.optimization.PointValuePair;\n import org.apache.commons.math3.optimization.SimpleValueChecker;\n import org.apache.commons.math3.optimization.MultivariateOptimizer;\n+import org.apache.commons.math3.optimization.OptimizationData;\n \n /**\n  * This class implements simplex-based direct search optimization.\n      * Set the simplex algorithm.\n      *\n      * @param simplex Simplex.\n-     */\n+     * @deprecated As of 3.1. The initial simplex can now be passed as an\n+     * argument of the {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])}\n+     * method.\n+     */\n+    @Deprecated\n     public void setSimplex(AbstractSimplex simplex) {\n-        this.simplex = simplex;\n+        parseOptimizationData(simplex);\n+    }\n+\n+    /**\n+     * Optimize an objective function.\n+     *\n+     * @param maxEval Allowed number of evaluations of the objective function.\n+     * @param f Objective function.\n+     * @param goalType Optimization type.\n+     * @param optData Optimization data. The following data will be looked for:\n+     * <ul>\n+     *  <li>{@link org.apache.commons.math3.optimization.InitialGuess InitialGuess}</li>\n+     *  <li>{@link AbstractSimplex}</li>\n+     * </ul>\n+     * @return the point/value pair giving the optimal value for objective\n+     * function.\n+     */\n+    @Override\n+    protected PointValuePair optimizeInternal(int maxEval, MultivariateFunction f,\n+                                              GoalType goalType,\n+                                              OptimizationData... optData) {\n+        // Scan \"optData\" for the input specific to this optimizer.\n+        parseOptimizationData(optData);\n+\n+        // The parent's method will retrieve the common parameters from\n+        // \"optData\" and call \"doOptimize\".\n+        return super.optimizeInternal(maxEval, f, goalType, optData);\n+    }\n+\n+    /**\n+     * Scans the list of (required and optional) optimization data that\n+     * characterize the problem.\n+     *\n+     * @param optData Optimization data. The following data will be looked for:\n+     * <ul>\n+     *  <li>{@link AbstractSimplex}</li>\n+     * </ul>\n+     */\n+    private void parseOptimizationData(OptimizationData... optData) {\n+        // The existing values (as set by the previous call) are reused if\n+        // not provided in the argument list.\n+        for (OptimizationData data : optData) {\n+            if (data instanceof AbstractSimplex) {\n+                simplex = (AbstractSimplex) data;\n+                continue;\n+            }\n+        }\n     }\n \n     /** {@inheritDoc} */", "timestamp": 1350090778, "metainfo": ""}