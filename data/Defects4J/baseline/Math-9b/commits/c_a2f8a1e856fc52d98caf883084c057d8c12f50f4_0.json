{"sha": "a2f8a1e856fc52d98caf883084c057d8c12f50f4", "log": "MATH-422 Made \"MicrosphereInterpolator\" immutable.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java\n     private double cosAngle(final RealVector v, final RealVector w) {\n         return v.dotProduct(w) / (v.getNorm() * w.getNorm());\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java\n  */\n public class MicrosphereInterpolator\n     implements MultivariateRealInterpolator {\n-\n     /**\n      * Default number of surface elements that composes the microsphere.\n      */\n     public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;\n-\n     /**\n      * Default exponent used the weights calculation.\n      */\n     public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;\n-\n     /**\n      * Number of surface elements of the microsphere.\n      */\n-    private int microsphereElements;\n-\n+    private final int microsphereElements;\n     /**\n      * Exponent used in the power law that computes the weights of the\n      * sample data.\n      */\n-    private int brightnessExponent;\n+    private final int brightnessExponent;\n \n-    /** Create a microsphere interpolator with default settings.\n-     * <p>Calling this constructor is equivalent to call {@link\n+    /**\n+     * Create a microsphere interpolator with default settings.\n+     * Calling this constructor is equivalent to call {@link\n      * #MicrosphereInterpolator(int, int)\n      * MicrosphereInterpolator(MicrosphereInterpolator.DEFAULT_MICROSPHERE_ELEMENTS,\n-     * MicrosphereInterpolator.DEFAULT_BRIGHTNESS_EXPONENT)}.</p>\n+     * MicrosphereInterpolator.DEFAULT_BRIGHTNESS_EXPONENT)}.\n      */\n     public MicrosphereInterpolator() {\n         this(DEFAULT_MICROSPHERE_ELEMENTS, DEFAULT_BRIGHTNESS_EXPONENT);\n     }\n \n     /** Create a microsphere interpolator.\n-     * @param microsphereElements number of surface elements of the microsphere.\n-     * @param brightnessExponent exponent used in the power law that computes the\n-     * weights of the sample data.\n-     * @throws NotPositiveException if {@code microsphereElements <= 0}\n-     * or {@code brightnessExponent < 0}.\n+     * @param elements Number of surface elements of the microsphere.\n+     * @param exponent Exponent used in the power law that computes the\n+     * weights (distance dimming factor) of the sample data.\n+     * @throws NotPositiveException if {@code exponent < 0}.\n+     * @throws NotStrictlyPositiveException if {@code elements <= 0}.\n      */\n-    public MicrosphereInterpolator(final int microsphereElements,\n-                                   final int brightnessExponent) {\n-        setMicropshereElements(microsphereElements);\n-        setBrightnessExponent(brightnessExponent);\n+    public MicrosphereInterpolator(final int elements,\n+                                   final int exponent) {\n+        if (exponent < 0) {\n+            throw new NotPositiveException(exponent);\n+        }\n+        if (elements <= 0) {\n+            throw new NotStrictlyPositiveException(elements);\n+        }\n+\n+        microsphereElements = elements;\n+        brightnessExponent = exponent;\n     }\n \n     /**\n                                                     microsphereElements,\n                                                     rand);\n     }\n-\n-    /**\n-     * Set the brightness exponent.\n-     * @param exponent Exponent for computing the distance dimming\n-     * factor.\n-     * @throws NotPositiveException if {@code exponent < 0}.\n-     */\n-    public void setBrightnessExponent(final int exponent) {\n-        if (exponent < 0) {\n-            throw new NotPositiveException(exponent);\n-        }\n-        brightnessExponent = exponent;\n-    }\n-\n-    /**\n-     * Set the number of microsphere elements.\n-     * @param elements Number of surface elements of the microsphere.\n-     * @throws NotStrictlyPositiveException if {@code elements <= 0}.\n-     */\n-    public void setMicropshereElements(final int elements) {\n-        if (elements <= 0) {\n-            throw new NotStrictlyPositiveException(elements);\n-        }\n-        microsphereElements = elements;\n-    }\n }", "timestamp": 1285937767, "metainfo": ""}