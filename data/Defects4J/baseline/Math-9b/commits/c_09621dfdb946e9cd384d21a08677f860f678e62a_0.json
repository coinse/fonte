{"sha": "09621dfdb946e9cd384d21a08677f860f678e62a", "log": "Added geometric mean to StatUtils.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/java/org/apache/commons/math/stat/StatUtils.java\n package org.apache.commons.math.stat;\n \n import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.moment.GeometricMean;\n import org.apache.commons.math.stat.univariate.moment.Mean;\n import org.apache.commons.math.stat.univariate.moment.Variance;\n import org.apache.commons.math.stat.univariate.rank.Max;\n  * StatUtils provides static methods for computing statistics based on data\n  * stored in double[] arrays. \n  * \n- * @version $Revision: 1.30 $ $Date: 2004/07/11 18:41:19 $\n+ * @version $Revision: 1.31 $ $Date: 2004/07/17 22:01:39 $\n  */\n public final class StatUtils {\n \n     /** variance */\n     private static Variance variance = new Variance();\n \n-    /** variance */\n+    /** percentile */\n     private static Percentile percentile = new Percentile();\n+    \n+    /** geometric mean */\n+    private static GeometricMean geometricMean = new GeometricMean();\n \n     /**\n      * Private Constructor\n             final int length) {\n         return mean.evaluate(values, begin, length);\n     }\n+    \n+    /**\n+     * Returns the geometric mean of the entries in the input array, or \n+     * <code>Double.NaN</code> if the array is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.univariate.moment.GeometricMean}\n+     * for details on the computing algorithm.\n+     * \n+     * @param values the input array\n+     * @return the geometric mean of the values or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if the array is null\n+     */\n+    public static double geometricMean(final double[] values) {\n+        return geometricMean.evaluate(values);\n+    }\n+\n+    /**\n+     * Returns the geometric mean of the entries in the specified portion of\n+     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * is empty.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * See {@link org.apache.commons.math.stat.univariate.moment.GeometricMean}\n+     * for details on the computing algorithm.\n+     * \n+     * @param values the input array\n+     * @param begin index of the first array element to include\n+     * @param length the number of elements to include\n+     * @return the geometric mean of the values or Double.NaN if length = 0\n+     * @throws IllegalArgumentException if the array is null or the array index\n+     * parameters are not valid\n+     */\n+    public static double geometricMean(final double[] values, final int begin,\n+            final int length) {\n+        return geometricMean.evaluate(values, begin, length);\n+    }\n+    \n \n     /**\n      * Returns the variance of the entries in the input array, or \n--- a/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n+++ b/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n \n /**\n  * Test cases for the {@link StatUtils} class.\n- * @version $Revision: 1.18 $ $Date: 2004/07/11 18:42:07 $\n+ * @version $Revision: 1.19 $ $Date: 2004/07/17 22:01:39 $\n  */\n \n public final class StatUtilsTest extends TestCase {\n             // expected\n         }\n     }\n+    \n+    public void testGeometricMean() throws Exception {\n+        double[] test = null;\n+        try {\n+            double x = StatUtils.geometricMean(test);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        test = new double[] {2, 4, 6, 8};\n+        assertEquals(Math.exp(0.25d * StatUtils.sumLog(test)), \n+                StatUtils.geometricMean(test), Double.MIN_VALUE);\n+    }\n }", "timestamp": 1090101699, "metainfo": ""}