{"sha": "f53649744ccade10e90d359610c25723b51b9e89", "log": "MATH-908 Added constructor to enable independent settings of the line search tolerances. Updated unit tests.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java\n     /**\n      * This constructor allows to specify a user-defined convergence checker,\n      * in addition to the parameters that control the default convergence\n-     * checking procedure and the line search tolerances.\n+     * checking procedure.\n+     * <br/>\n+     * The internal line search tolerances are set to the square-root of their\n+     * corresponding value in the multivariate optimizer.\n      *\n      * @param rel Relative threshold.\n      * @param abs Absolute threshold.\n     public PowellOptimizer(double rel,\n                            double abs,\n                            ConvergenceChecker<PointValuePair> checker) {\n+        this(rel, abs, FastMath.sqrt(rel), FastMath.sqrt(abs), checker);\n+    }\n+\n+    /**\n+     * This constructor allows to specify a user-defined convergence checker,\n+     * in addition to the parameters that control the default convergence\n+     * checking procedure and the line search tolerances.\n+     *\n+     * @param rel Relative threshold for this optimizer.\n+     * @param abs Absolute threshold for this optimizer.\n+     * @param lineRel Relative threshold for the internal line search optimizer.\n+     * @param lineAbs Absolute threshold for the internal line search optimizer.\n+     * @param checker Convergence checker.\n+     * @throws NotStrictlyPositiveException if {@code abs <= 0}.\n+     * @throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.\n+     */\n+    public PowellOptimizer(double rel,\n+                           double abs,\n+                           double lineRel,\n+                           double lineAbs,\n+                           ConvergenceChecker<PointValuePair> checker) {\n         super(checker);\n \n         if (rel < MIN_RELATIVE_TOLERANCE) {\n         relativeThreshold = rel;\n         absoluteThreshold = abs;\n \n-        // Line search tolerances can be much less stringent than the tolerances\n-        // required for the optimizer itself.\n-        line = new LineSearch(FastMath.sqrt(rel),\n-                              FastMath.sqrt(abs));\n-    }\n-\n-    /**\n-     * The parameters control the default convergence checking procedure, and\n-     * the line search tolerances.\n+        // Create the line search optimizer.\n+        line = new LineSearch(lineRel,\n+                              lineAbs);\n+    }\n+\n+    /**\n+     * The parameters control the default convergence checking procedure.\n+     * <br/>\n+     * The internal line search tolerances are set to the square-root of their\n+     * corresponding value in the multivariate optimizer.\n      *\n      * @param rel Relative threshold.\n      * @param abs Absolute threshold.\n--- a/src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java\n         for (int i = 0; i < dim; i++) {\n             init[i] = minPoint[i];\n         }\n-        doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-9, 1e-7);\n+        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);\n \n         // Initial is far from minimum.\n         for (int i = 0; i < dim; i++) {\n             init[i] = minPoint[i] + 3;\n         }\n-        doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-9, 1e-5);\n+        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);\n+        // More stringent line search tolerance enhances the precision\n+        // of the result.\n+        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);\n     }\n \n     @Test\n                                 optimum[i], point[i], pointTol);\n         }\n     }\n+\n+    /**\n+     * @param func Function to optimize.\n+     * @param optimum Expected optimum.\n+     * @param init Starting point.\n+     * @param goal Minimization or maximization.\n+     * @param fTol Tolerance (relative error on the objective function) for\n+     * \"Powell\" algorithm.\n+     * @param fLineTol Tolerance (relative error on the objective function)\n+     * for the internal line search algorithm.\n+     * @param pointTol Tolerance for checking that the optimum is correct.\n+     */\n+    private void doTest(MultivariateFunction func,\n+                        double[] optimum,\n+                        double[] init,\n+                        GoalType goal,\n+                        double fTol,\n+                        double fLineTol,\n+                        double pointTol) {\n+        final MultivariateOptimizer optim = new PowellOptimizer(fTol, Math.ulp(1d),\n+                                                                fLineTol, Math.ulp(1d), null);\n+\n+        final PointValuePair result = optim.optimize(1000, func, goal, init);\n+        final double[] point = result.getPoint();\n+\n+        for (int i = 0, dim = optimum.length; i < dim; i++) {\n+            Assert.assertEquals(\"found[\" + i + \"]=\" + point[i] + \" value=\" + result.getValue(),\n+                                optimum[i], point[i], pointTol);\n+        }\n+    }\n }", "timestamp": 1353708655, "metainfo": ""}