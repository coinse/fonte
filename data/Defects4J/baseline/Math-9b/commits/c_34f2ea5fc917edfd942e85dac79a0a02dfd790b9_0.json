{"sha": "34f2ea5fc917edfd942e85dac79a0a02dfd790b9", "log": "MATH-933 Throw exception when bounds are passed to an algorithm that does not support them.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\n     CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(\"the closest orthogonal matrix has a negative determinant {0}\"),\n     COLUMN_INDEX_OUT_OF_RANGE(\"column index {0} out of allowed range [{1}, {2}]\"),\n     COLUMN_INDEX(\"column index ({0})\"), /* keep */\n+    CONSTRAINT(\"constraint\"), /* keep */\n     CONTINUED_FRACTION_INFINITY_DIVERGENCE(\"Continued fraction convergents diverged to +/- infinity for value {0}\"),\n     CONTINUED_FRACTION_NAN_DIVERGENCE(\"Continued fraction diverged to NaN for value {0}\"),\n     CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(\"contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.\"),\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java\n import org.apache.commons.math3.exception.ConvergenceException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.MathInternalError;\n+import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.linear.ArrayRealVector;\n import org.apache.commons.math3.linear.BlockRealMatrix;\n \n /**\n  * Gauss-Newton least-squares solver.\n+ * <br/>\n+ * Constraints are not supported: the call to\n+ * {@link #optimize(OptimizationData[]) optimize} will throw\n+ * {@link MathUnsupportedOperationException} if bounds are passed to it.\n+ *\n  * <p>\n  * This class solve a least-square problem by solving the normal equations\n  * of the linearized problem at each iteration. Either LU decomposition or\n     /** {@inheritDoc} */\n     @Override\n     public PointVectorValuePair doOptimize() {\n+        checkParameters();\n+\n         final ConvergenceChecker<PointVectorValuePair> checker\n             = getConvergenceChecker();\n \n         // Must never happen.\n         throw new MathInternalError();\n     }\n+\n+    /**\n+     * @throws MathUnsupportedOperationException if bounds were passed to the\n+     * {@link #optimize(OptimizationData[]) optimize} method.\n+     */\n+    private void checkParameters() {\n+        if (getLowerBound() != null ||\n+            getUpperBound() != null) {\n+            throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);\n+        }\n+    }\n }\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\n \n import java.util.Arrays;\n import org.apache.commons.math3.exception.ConvergenceException;\n+import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.optim.PointVectorValuePair;\n import org.apache.commons.math3.optim.ConvergenceChecker;\n \n \n /**\n- * This class solves a least-squares problem using the Levenberg-Marquardt algorithm.\n+ * This class solves a least-squares problem using the Levenberg-Marquardt\n+ * algorithm.\n+ * <br/>\n+ * Constraints are not supported: the call to\n+ * {@link #optimize(OptimizationData[]) optimize} will throw\n+ * {@link MathUnsupportedOperationException} if bounds are passed to it.\n  *\n  * <p>This implementation <em>should</em> work even for over-determined systems\n  * (i.e. systems having more point than equations). Over-determined systems\n     /** {@inheritDoc} */\n     @Override\n     protected PointVectorValuePair doOptimize() {\n+        checkParameters();\n+\n         final int nR = getTarget().length; // Number of observed data.\n         final double[] currentPoint = getStartPoint();\n         final int nC = currentPoint.length; // Number of parameters.\n             }\n         }\n     }\n+\n+    /**\n+     * @throws MathUnsupportedOperationException if bounds were passed to the\n+     * {@link #optimize(OptimizationData[]) optimize} method.\n+     */\n+    private void checkParameters() {\n+        if (getLowerBound() != null ||\n+            getUpperBound() != null) {\n+            throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/exception/util/LocalizedFormatsTest.java\n+++ b/src/test/java/org/apache/commons/math3/exception/util/LocalizedFormatsTest.java\n \n     @Test\n     public void testMessageNumber() {\n-        Assert.assertEquals(312, LocalizedFormats.values().length);\n+        Assert.assertEquals(313, LocalizedFormats.values().length);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java\n import java.io.IOException;\n import org.apache.commons.math3.exception.ConvergenceException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n import org.apache.commons.math3.optim.SimpleVectorValueChecker;\n import org.apache.commons.math3.optim.InitialGuess;\n import org.apache.commons.math3.optim.MaxEval;\n+import org.apache.commons.math3.optim.SimpleBounds;\n import org.apache.commons.math3.optim.nonlinear.vector.Target;\n import org.apache.commons.math3.optim.nonlinear.vector.Weight;\n import org.apache.commons.math3.optim.nonlinear.vector.ModelFunction;\n         return new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-6, 1.0e-6));\n     }\n \n+    @Test(expected=MathUnsupportedOperationException.class)\n+    public void testConstraintsUnsupported() {\n+        createOptimizer().optimize(new MaxEval(100),\n+                                   new Target(new double[] { 2 }),\n+                                   new Weight(new double[] { 1 }),\n+                                   new InitialGuess(new double[] { 1, 2 }),\n+                                   new SimpleBounds(new double[] { -10, 0 },\n+                                                    new double[] { 20, 30 }));\n+    }\n+\n     @Override\n     @Test(expected = ConvergenceException.class)\n     public void testMoreEstimatedParametersSimple() {\n--- a/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java\n import org.apache.commons.math3.optim.PointVectorValuePair;\n import org.apache.commons.math3.optim.InitialGuess;\n import org.apache.commons.math3.optim.MaxEval;\n+import org.apache.commons.math3.optim.SimpleBounds;\n import org.apache.commons.math3.optim.nonlinear.vector.Target;\n import org.apache.commons.math3.optim.nonlinear.vector.Weight;\n import org.apache.commons.math3.optim.nonlinear.vector.ModelFunction;\n import org.apache.commons.math3.exception.ConvergenceException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;\n import org.apache.commons.math3.linear.SingularMatrixException;\n import org.apache.commons.math3.util.FastMath;\n         return new LevenbergMarquardtOptimizer();\n     }\n \n+    @Test(expected=MathUnsupportedOperationException.class)\n+    public void testConstraintsUnsupported() {\n+        createOptimizer().optimize(new MaxEval(100),\n+                                   new Target(new double[] { 2 }),\n+                                   new Weight(new double[] { 1 }),\n+                                   new InitialGuess(new double[] { 1, 2 }),\n+                                   new SimpleBounds(new double[] { -10, 0 },\n+                                                    new double[] { 20, 30 }));\n+    }\n+\n     @Override\n     @Test(expected=SingularMatrixException.class)\n     public void testNonInvertible() {", "timestamp": 1360013502, "metainfo": ""}