{"sha": "c263976f221d9b8aabb712f6c2b729ef19abead0", "log": "Fixed BigFraction percentage method which did not work at all.  JIRA: MATH-709  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n     private static final long serialVersionUID = -5630213147331578515L;\n \n     /** <code>BigInteger</code> representation of 100. */\n-    private static final BigInteger ONE_HUNDRED_DOUBLE = BigInteger.valueOf(100);\n+    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);\n \n     /** The numerator. */\n     private final BigInteger numerator;\n      * @return the fraction percentage as a <tt>double</tt>.\n      */\n     public double percentageValue() {\n-        return (numerator.divide(denominator)).multiply(ONE_HUNDRED_DOUBLE).doubleValue();\n+        return multiply(ONE_HUNDRED).doubleValue();\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/Fraction.java\n     }\n \n     /**\n+     * <p>\n+     * Gets the fraction percentage as a <tt>double</tt>. This calculates the\n+     * fraction as the numerator divided by denominator multiplied by 100.\n+     * </p>\n+     *\n+     * @return the fraction percentage as a <tt>double</tt>.\n+     */\n+    public double percentageValue() {\n+        return multiply(100).doubleValue();\n+    }\n+\n+    /**\n      * <p>Creates a {@code Fraction} instance with the 2 parts\n      * of a fraction Y/Z.</p>\n      *\n--- a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java\n+++ b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java\n     }\n \n     @Test\n+    public void testPercentage() {\n+        Assert.assertEquals(50.0, new BigFraction(1, 2).percentageValue(), 1.0e-15);\n+    }\n+\n+    @Test\n     public void testPow() {\n         Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13));\n         Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13l));\n--- a/src/test/java/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/java/org/apache/commons/math/fraction/FractionTest.java\n     }\n \n     @Test\n+    public void testPercentage() {\n+        Assert.assertEquals(50.0, new Fraction(1, 2).percentageValue(), 1.0e-15);\n+    }\n+\n+    @Test\n     public void testReciprocal() {\n         Fraction f = null;\n ", "timestamp": 1321602132, "metainfo": ""}