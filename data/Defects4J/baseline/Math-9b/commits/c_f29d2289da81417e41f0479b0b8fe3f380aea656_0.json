{"sha": "f29d2289da81417e41f0479b0b8fe3f380aea656", "log": "Addressed exception \"swallowing\" in test coverage.  From Phil's recent email: \"If the test case throws an unexpected exception, the test  should fail.  ....[fix] these by changing the test method signature to  throws Exception.  This also eliminates the need to import  MathException everywhere.\"   ", "commit": "\n--- a/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n \n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.math.MathException;\n-\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.13 $ $Date: 2004/02/21 21:35:17 $\n+ * @version $Revision: 1.14 $ $Date: 2004/05/23 21:34:19 $\n  */\n public class ChiSquareDistributionTest extends TestCase {\n     private ChiSquaredDistribution chiSquare;\n \t\tsuper.tearDown();\n \t}\n \n-    public void testLowerTailProbability(){\n+    public void testLowerTailProbability() throws Exception {\n         testProbability( .210, .001);\n         testProbability( .554, .010);\n         testProbability( .831, .025);\n         testProbability(1.610, .100);\n     }\n \n-    public void testUpperTailProbability(){\n+    public void testUpperTailProbability() throws Exception {\n         testProbability(20.515, .999);\n         testProbability(15.086, .990);\n         testProbability(12.833, .975);\n         testProbability( 9.236, .900);\n     }\n     \n-    public void testLowerTailValues(){\n+    public void testLowerTailValues() throws Exception {\n         testValue(.001,  .210);\n         testValue(.010,  .554);\n         testValue(.025,  .831);\n         testValue(.100, 1.610);\n     }\n     \n-    public void testUpperTailValues(){\n+    public void testUpperTailValues() throws Exception {\n         testValue(.999, 20.515);\n         testValue(.990, 15.086);\n         testValue(.975, 12.833);\n         testValue(.900,  9.236);\n     }\n     \n-    private void testProbability(double x, double expected){\n-        try {\n-            double actual = chiSquare.cumulativeProbability(x);\n-            assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n-        } catch (MathException e) {\n-            e.printStackTrace();\n-        }\n-        \n+    private void testProbability(double x, double expected) throws Exception {\n+        double actual = chiSquare.cumulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n     }\n     \n-    private void testValue(double p, double expected){\n-        try {\n-            double actual = chiSquare.inverseCumulativeProbability(p);\n-            assertEquals(\"value for \" + p, expected, actual, 10e-4);\n-        } catch (MathException e) {\n-            e.printStackTrace();\n-        }\n-        \n+    private void testValue(double p, double expected) throws Exception {\n+        double actual = chiSquare.inverseCumulativeProbability(p);\n+        assertEquals(\"value for \" + p, expected, actual, 10e-4);\n     }\n }\n--- a/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n  */\n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.TestUtils;\n \n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.13 $ $Date: 2004/05/23 00:33:40 $\n+ * @version $Revision: 1.14 $ $Date: 2004/05/23 21:34:19 $\n  */\n public class ExponentialDistributionTest extends TestCase {\n     private ExponentialDistribution exp;\n         super.tearDown();\n     }\n \n-    public void testInverseCumulativeProbability001() {\n+    public void testInverseCumulativeProbability001() throws Exception {\n         testValue(.005003, .001);\n     }\n \n-    public void testInverseCumulativeProbability010() {\n+    public void testInverseCumulativeProbability010() throws Exception {\n         testValue(0.050252, .010);\n     }\n \n-    public void testInverseCumulativeProbability025() {\n+    public void testInverseCumulativeProbability025() throws Exception {\n         testValue(0.126589, .025);\n     }\n \n-    public void testInverseCumulativeProbability050() {\n+    public void testInverseCumulativeProbability050() throws Exception {\n         testValue(0.256566, .050);\n     }\n \n-    public void testInverseCumulativeProbability100() {\n+    public void testInverseCumulativeProbability100() throws Exception {\n         testValue(0.526803, .100);\n     }\n \n-    public void testInverseCumulativeProbability999() {\n+    public void testInverseCumulativeProbability999() throws Exception {\n         testValue(34.5388, .999);\n     }\n \n-    public void testInverseCumulativeProbability990() {\n+    public void testInverseCumulativeProbability990() throws Exception {\n         testValue(23.0259, .990);\n     }\n \n-    public void testInverseCumulativeProbability975() {\n+    public void testInverseCumulativeProbability975() throws Exception {\n         testValue(18.4444, .975);\n     }\n \n-    public void testInverseCumulativeProbability950() {\n+    public void testInverseCumulativeProbability950() throws Exception {\n         testValue(14.9787, .950);\n     }\n \n-    public void testInverseCumulativeProbability900() {\n+    public void testInverseCumulativeProbability900() throws Exception {\n         testValue(11.5129, .900);\n     }\n \n-    public void testCumulativeProbability001() {\n+    public void testCumulativeProbability001() throws Exception {\n         testProbability(0.005003, .001);\n     }\n \n-    public void testCumulativeProbability010() {\n+    public void testCumulativeProbability010() throws Exception {\n         testProbability(0.050252, .010);\n     }\n \n-    public void testCumulativeProbability025() {\n+    public void testCumulativeProbability025() throws Exception {\n         testProbability(0.126589, .025);\n     }\n \n-    public void testCumulativeProbability050() {\n+    public void testCumulativeProbability050() throws Exception {\n         testProbability(0.256566, .050);\n     }\n \n-    public void testCumulativeProbability100() {\n+    public void testCumulativeProbability100() throws Exception {\n         testProbability(0.526803, .100);\n     }\n \n-    public void testCumulativeProbability999() {\n+    public void testCumulativeProbability999() throws Exception {\n         testProbability(34.5388, .999);\n     }\n \n-    public void testCumulativeProbability990() {\n+    public void testCumulativeProbability990() throws Exception {\n         testProbability(23.0259, .990);\n     }\n \n-    public void testCumulativeProbability975() {\n+    public void testCumulativeProbability975() throws Exception {\n         testProbability(18.4444, .975);\n     }\n \n-    public void testCumulativeProbability950() {\n+    public void testCumulativeProbability950() throws Exception {\n         testProbability(14.9787, .950);\n     }\n \n-    public void testCumulativeProbability900() {\n+    public void testCumulativeProbability900() throws Exception {\n         testProbability(11.5129, .900);\n     }\n \n-    public void testCumulativeProbabilityNegative() {\n+    public void testCumulativeProbabilityNegative() throws Exception {\n         testProbability(-1.0, 0.0);\n     }\n \n-    public void testCumulativeProbabilityZero() {\n+    public void testCumulativeProbabilityZero() throws Exception {\n         testProbability(0.0, 0.0);\n     }\n \n-    public void testInverseCumulativeProbabilityNegative() {\n+    public void testInverseCumulativeProbabilityNegative() throws Exception {\n         testValue(Double.NaN, -1.0);\n     }\n \n-    public void testInverseCumulativeProbabilityZero() {\n+    public void testInverseCumulativeProbabilityZero() throws Exception {\n         testValue(0.0, 0.0);\n     }\n \n-    public void testInverseCumulativeProbabilityOne() {\n+    public void testInverseCumulativeProbabilityOne() throws Exception {\n         testValue(Double.POSITIVE_INFINITY, 1.0);\n     }\n \n-    public void testInverseCumulativeProbabilityPositive() {\n+    public void testInverseCumulativeProbabilityPositive() throws Exception {\n         testValue(Double.NaN, 2.0);\n     }\n \n-    public void testCumulativeProbability2() {\n-        try {\n-            double actual = exp.cumulativeProbability(0.25, 0.75);\n-            assertEquals(0.0905214, actual, 10e-4);\n-        } catch (MathException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testCumulativeProbability2() throws Exception {\n+        double actual = exp.cumulativeProbability(0.25, 0.75);\n+        assertEquals(0.0905214, actual, 10e-4);\n     }\n \n-    private void testProbability(double x, double expected) {\n-        try {\n-            double actual = exp.cumulativeProbability(x);\n-            TestUtils.assertEquals(expected, actual, 10e-4);\n-        } catch (MathException e) {\n-            e.printStackTrace();\n-        }\n+    private void testProbability(double x, double expected) throws Exception {\n+        double actual = exp.cumulativeProbability(x);\n+        TestUtils.assertEquals(expected, actual, 10e-4);\n     }\n \n-    private void testValue(double expected, double p) {\n-        try {\n-            double actual = exp.inverseCumulativeProbability(p);\n-            TestUtils.assertEquals(expected, actual, 10e-4);\n-        } catch (MathException e) {\n-            e.printStackTrace();\n-        }\n+    private void testValue(double expected, double p) throws Exception {\n+        double actual = exp.inverseCumulativeProbability(p);\n+        TestUtils.assertEquals(expected, actual, 10e-4);\n     }\n }\n--- a/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n  */\n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.math.MathException;\n-\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.12 $ $Date: 2004/05/23 00:33:40 $\n+ * @version $Revision: 1.13 $ $Date: 2004/05/23 21:34:19 $\n  */\n public class FDistributionTest extends TestCase {\n     private FDistribution f;\n         super.tearDown();\n     }\n \n-    public void testLowerTailProbability() {\n+    public void testLowerTailProbability() throws Exception {\n         testProbability(1.0 / 10.67, .010);\n         testProbability(1.0 / 6.98, .025);\n         testProbability(1.0 / 4.95, .050);\n         testProbability(1.0 / 3.40, .100);\n     }\n \n-    public void testUpperTailProbability() {\n+    public void testUpperTailProbability() throws Exception {\n         testProbability(8.75, .990);\n         testProbability(5.99, .975);\n         testProbability(4.39, .950);\n         testProbability(3.11, .900);\n     }\n \n-    public void testLowerTailValues() {\n+    public void testLowerTailValues() throws Exception {\n         testValue(1.0 / 10.67, .010);\n         testValue(1.0 / 6.98, .025);\n         testValue(1.0 / 4.95, .050);\n         testValue(1.0 / 3.40, .100);\n     }\n \n-    public void testUpperTailValues() {\n+    public void testUpperTailValues() throws Exception {\n         testValue(8.75, .990);\n         testValue(5.99, .975);\n         testValue(4.39, .950);\n         testValue(3.11, .900);\n     }\n \n-    private void testProbability(double x, double expected) {\n-        try {\n-            double actual = f.cumulativeProbability(x);\n-            assertEquals(\"probability for \" + x, expected, actual, 1e-3);\n-        } catch (MathException e) {\n-            e.printStackTrace();\n-        }\n+    private void testProbability(double x, double expected) throws Exception {\n+\t\tdouble actual = f.cumulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 1e-3);\n     }\n \n-    private void testValue(double expected, double p) {\n-        try {\n-            double actual = f.inverseCumulativeProbability(p);\n-            assertEquals(\"value for \" + p, expected, actual, 1e-2);\n-        } catch (MathException e) {\n-            e.printStackTrace();\n-        }\n+    private void testValue(double expected, double p) throws Exception {\n+        double actual = f.inverseCumulativeProbability(p);\n+        assertEquals(\"value for \" + p, expected, actual, 1e-2);\n     }\n }\n--- a/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n \n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.math.MathException;\n-\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.15 $ $Date: 2004/05/23 00:33:40 $\n+ * @version $Revision: 1.16 $ $Date: 2004/05/23 21:34:19 $\n  */\n public class GammaDistributionTest extends TestCase {\n-    public void testProbabilities() {\n+    public void testProbabilities() throws Exception {\n         testProbability(-1.000, 4.0, 2.0, .0000);\n         testProbability(15.501, 4.0, 2.0, .9499);\n         testProbability(0.504, 4.0, 1.0, .0018);\n         testProbability(5.000, 2.0, 2.0, .7127);\n     }\n \n-    public void testValues() {\n+    public void testValues() throws Exception {\n         testValue(15.501, 4.0, 2.0, .9499);\n         testValue(0.504, 4.0, 1.0, .0018);\n         testValue(10.011, 1.0, 2.0, .9933);\n         testValue(5.000, 2.0, 2.0, .7127);\n     }\n \n-    private void testProbability(\n-        double x,\n-        double a,\n-        double b,\n-        double expected) {\n-        try {\n-            double actual =\n-                DistributionFactory\n-                    .newInstance()\n-                    .createGammaDistribution(a, b)\n-                    .cumulativeProbability(x);\n-            assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n-        } catch (MathException e) {\n-            e.printStackTrace();\n-        }\n+    private void testProbability(double x, double a, double b, double expected) throws Exception {\n+        DistributionFactory factory = DistributionFactory.newInstance();\n+\t\tGammaDistribution distribution = factory.createGammaDistribution( a, b );\n+        double actual = distribution.cumulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n     }\n \n-    private void testValue(double expected, double a, double b, double p) {\n-        try {\n-            double actual =\n-                DistributionFactory\n-                    .newInstance()\n-                    .createGammaDistribution(a, b)\n-                    .inverseCumulativeProbability(p);\n-            assertEquals(\"critical value for \" + p, expected, actual, 10e-4);\n-        } catch (MathException e) {\n-            e.printStackTrace();\n-        }\n+    private void testValue(double expected, double a, double b, double p) throws Exception {\n+\t\tDistributionFactory factory = DistributionFactory.newInstance();\n+\t\tGammaDistribution distribution = factory.createGammaDistribution( a, b );\n+        double actual = distribution.inverseCumulativeProbability(p);\n+        assertEquals(\"critical value for \" + p, expected, actual, 10e-4);\n     }\n }\n--- a/src/test/org/apache/commons/math/util/BeanTransformerTest.java\n+++ b/src/test/org/apache/commons/math/util/BeanTransformerTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.10 $ $Date: 2004/05/23 00:33:41 $\n+ * @version $Revision: 1.11 $ $Date: 2004/05/23 21:34:19 $\n  */\n public class BeanTransformerTest extends TestCase {\n     \n     /**\n      * \n      */\n-    public void testTransform() {\n+    public void testTransform() throws Exception {\n         BeanTransformer b = new BeanTransformer(\"x\");\n         TestBean target = new TestBean();\n \t\tdouble value = Double.NaN;\n-\t\ttry {\n-\t\t\tvalue = b.transform(target);\n-\t\t} catch (MathException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n+\t\tvalue = b.transform(target);\n \t\tTestUtils.assertEquals(1.0, value, 1.0e-2);\n     }\n     \n     /**\n      * \n      */\n-    public void testTransformInvalidType(){\n+    public void testTransformInvalidType() throws Exception {\n         BeanTransformer b = new BeanTransformer(\"y\");\n         TestBean target = new TestBean();\n         try {\n-            try {\n-\t\t\t\tb.transform(target);\n-\t\t\t} catch (MathException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n+\t\t\tb.transform(target);\n             fail(\"Expecting ClassCastException\");\n         } catch(ClassCastException ex){\n             // success\n--- a/src/test/org/apache/commons/math/util/DefaultTransformerTest.java\n+++ b/src/test/org/apache/commons/math/util/DefaultTransformerTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.11 $ $Date: 2004/05/23 00:33:41 $\n+ * @version $Revision: 1.12 $ $Date: 2004/05/23 21:34:19 $\n  */\n public class DefaultTransformerTest extends TestCase {\n     /**\n      * \n      */\n-    public void testTransformDouble(){\n+    public void testTransformDouble() throws Exception {\n         double expected = 1.0;\n         Double input = new Double(expected);\n         DefaultTransformer t = new DefaultTransformer();\n-        try {\n-\t\t\tassertEquals(expected, t.transform(input), 1.0e-4);\n-\t\t} catch (MathException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n+\t\tassertEquals(expected, t.transform(input), 1.0e-4);\n     }\n     \n     /**\n     /**\n      * \n      */\n-    public void testTransformInteger(){\n+    public void testTransformInteger() throws Exception {\n         double expected = 1.0;\n         Integer input = new Integer(1);\n         DefaultTransformer t = new DefaultTransformer();\n-        try {\n-\t\t\tassertEquals(expected, t.transform(input), 1.0e-4);\n-\t\t} catch (MathException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n+\t\tassertEquals(expected, t.transform(input), 1.0e-4);\n     }        \n     \n     /**\n      * \n      */\n-    public void testTransformBigDecimal(){\n+    public void testTransformBigDecimal() throws Exception {\n         double expected = 1.0;\n         BigDecimal input = new BigDecimal(\"1.0\");\n         DefaultTransformer t = new DefaultTransformer();\n-        try {\n-\t\t\tassertEquals(expected, t.transform(input), 1.0e-4);\n-\t\t} catch (MathException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n+\t\tassertEquals(expected, t.transform(input), 1.0e-4);\n     }        \n     \n     /**\n      * \n      */\n-    public void testTransformString(){\n+    public void testTransformString() throws Exception {\n         double expected = 1.0;\n         String input = \"1.0\";\n         DefaultTransformer t = new DefaultTransformer();\n-        try {\n-\t\t\tassertEquals(expected, t.transform(input), 1.0e-4);\n-\t\t} catch (MathException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n+\t\tassertEquals(expected, t.transform(input), 1.0e-4);\n     }\n     \n     /**", "timestamp": 1085348059, "metainfo": ""}