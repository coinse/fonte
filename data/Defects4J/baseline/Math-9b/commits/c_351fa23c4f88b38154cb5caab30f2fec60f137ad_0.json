{"sha": "351fa23c4f88b38154cb5caab30f2fec60f137ad", "log": "Refactored file handling methods to eliminate use of URL.toFile(). Addressing PR #25972, reported by Bill Barker.   ", "commit": "\n--- a/src/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/java/org/apache/commons/math/random/ValueServer.java\n \n package org.apache.commons.math.random;\n import java.io.BufferedReader;\n-import java.io.FileReader;\n-import java.io.File;\n+import java.io.InputStreamReader;\n+import java.io.IOException;\n import java.io.Serializable;\n import java.net.URL;\n-import java.io.IOException;\n import java.net.MalformedURLException;\n \n /**\n  * <p> \n  * Supported <code>mode</code> values are: <ul>\n  * <li> DIGEST_MODE -- uses an empirical distribution </li>\n- * <li> REPLAY_MODE -- replays data from <code>valuesFile</code></li> \n+ * <li> REPLAY_MODE -- replays data from <code>valuesFileURL</code></li> \n  * <li> UNIFORM_MODE -- generates uniformly distributed random values with\n  *                      mean = <code>mu</code> </li>\n  * <li> EXPONENTIAL_MODE -- generates exponentially distributed random values\n  *                       standard deviation = <code>sigma</code></li>\n  * <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul> \n  *\n- * @version $Revision: 1.8 $ $Date: 2003/11/19 03:28:24 $\n+ * @version $Revision: 1.9 $ $Date: 2004/01/11 07:24:30 $\n  *\n  */\n public class ValueServer implements Serializable {\n     \n     /** \n      * Computes the empirical distribution using values from the file\n-     * in <code>valuesFilePath</code>, using the default number of bins.\n+     * in <code>valuesFileURL</code>, using the default number of bins.\n      * <p>\n      * <code>valuesFileURL</code> must exist and be\n      * readable by *this at runtime.\n      */\n     public void computeDistribution() throws IOException {\n         empiricalDistribution = new EmpiricalDistributionImpl();\n-        empiricalDistribution.load(valuesFileURL.getFile());\n+        empiricalDistribution.load(valuesFileURL);\n     }\n     \n     /** \n      * Computes the empirical distribution using values from the file\n-     * in <code>valuesFilePath</code> and <code>binCount</code> bins.\n+     * in <code>valuesFileURL</code> and <code>binCount</code> bins.\n      * <p>\n      * <code>valuesFileURL</code> must exist and be\n      * readable by *this at runtime.\n     public void computeDistribution(int binCount) \n             throws IOException {\n         empiricalDistribution = new EmpiricalDistributionImpl(binCount);\n-        empiricalDistribution.load(valuesFileURL.getFile());\n+        empiricalDistribution.load(valuesFileURL);\n         mu = empiricalDistribution.getSampleStats().getMean();\n         sigma = empiricalDistribution.getSampleStats().getStandardDeviation();\n     }\n         this.mode = mode;\n     }\n     \n-    /** Getter for property valuesFilePath.\n-     * @return Value of property valuesFilePath.\n-     */\n-    public String getValuesFileURL() {\n-        return valuesFileURL.toString();\n-    }\n-    \n-    /** Setter for property valuesFilePath.\n-     * @param url New value of property valuesFilePath.\n+    /**\n+     * Getter for <code>valuesFileURL<code>\n+     * @return Value of property valuesFileURL.\n+     */\n+    public URL getValuesFileURL() {\n+        return valuesFileURL;\n+    }\n+    \n+    /**\n+     * Sets the <code>valuesFileURL</code> using a string URL representation\n+     * @param url String representation for new valuesFileURL.\n      * @throws MalformedURLException if url is not well formed\n+     * @deprecated use {@link #setValuesFileURL(URL)} to be removed before 0.1 release\n      */\n     public void setValuesFileURL(String url) throws MalformedURLException {\n         this.valuesFileURL = new URL(url);\n+    }\n+    \n+    /**\n+     * Sets the <code>valuesFileURL</code>\n+     * @param url New value of property valuesFileURL.\n+     */\n+    public void setValuesFileURL(URL url) {\n+        this.valuesFileURL = url;\n     }\n     \n     /** Getter for property empiricalDistribution.\n     }    \n     \n     /**  \n-     * Opens <code>valuesFilePath</code> to use in REPLAY_MODE.\n+     * Opens <code>valuesFileURL</code> to use in REPLAY_MODE.\n      *\n      * @throws IOException if an error occurs opening the file\n+     * @deprecated use {@link #resetReplayFile} to be removed before 0.1 release\n      */\n     public void openReplayFile() throws IOException {\n-        filePointer = new BufferedReader(new FileReader\n-                            (new File(valuesFileURL.getFile())));\n-    }\n-    \n-    /** \n-     * Closes <code>valuesFilePath</code> after use in REPLAY_MODE.\n+        resetReplayFile();\n+    }\n+    \n+    /**  \n+     * Resets REPLAY_MODE file pointer to the beginning of the <code>valuesFileURL</code>.\n+     *\n+     * @throws IOException if an error occurs opening the file\n+     */\n+    public void resetReplayFile() throws IOException {\n+        if (filePointer != null) {\n+            try {\n+                filePointer.close();\n+                filePointer = null;\n+            } catch (IOException ex) {}\n+        }\n+        filePointer = new BufferedReader(new InputStreamReader(valuesFileURL.openStream()));\n+    }\n+    \n+    /** \n+     * Closes <code>valuesFileURL</code> after use in REPLAY_MODE.\n      *\n      * @throws IOException if an error occurs closing the file\n      */\n     }\n     \n     /**\n-     * Gets next sequential value from the <code>valuesFilePath</code> \n-     * opened by <code>openReplayFile()</code>.\n-     * <p>\n-     * Throws an IOException if <code>filePointer</code> is null or read fails.\n-     * Will wrap around to BOF is EOF is encountered.\n-     * <p>\n-     * <strong>Preconditions</strong>: <ul>\n-     * <li> openReplayfile() must have completed successfully before \n-     * invoking this method; otherwise an <code>IlleglaStateException</code>\n-     * will be thrown</li></ul>\n+     * Gets next sequential value from the <code>valuesFileURL</code>.\n+     * <p>\n+     * Throws an IOException if the read fails.\n+     * <p>\n+     * This method will open the <code>valuesFileURL</code> if there is no \n+     * replay file open.\n+     * <p>\n+     * The <code>valuesFileURL</code> will be closed and reopened to wrap around \n+     * from EOF to BOF if EOF is encountered.\n      *\n      * @return next value from the replay file\n      * @throws IOException if there is a problem reading from the file\n     private double getNextReplay() throws IOException {\n         String str = null;\n         if (filePointer == null) {\n-            throw new IllegalStateException(\"replay file not open\");\n+            resetReplayFile();\n         }\n         if ((str = filePointer.readLine()) == null) {\n             closeReplayFile();\n-            openReplayFile();\n+            resetReplayFile();\n             str = filePointer.readLine();\n         }         \n         return new Double(str).doubleValue();", "timestamp": 1073805870, "metainfo": ""}