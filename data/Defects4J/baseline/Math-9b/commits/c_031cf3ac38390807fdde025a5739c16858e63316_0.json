{"sha": "031cf3ac38390807fdde025a5739c16858e63316", "log": "Added tests for equals and hashcode.   ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.12 $ $Date: 2004/04/27 16:42:32 $\n+ * @version $Revision: 1.13 $ $Date: 2004/06/17 22:33:23 $\n  */\n public abstract class StorelessUnivariateStatisticAbstractTest\n     extends UnivariateStatisticAbstractTest {\n         super(name);\n     }\n \n+    /** Return a new instance of the statistic */\n     public abstract UnivariateStatistic getUnivariateStatistic();\n \n+    /**Expected value for  the testArray defined in UnivariateStatisticAbstractTest */\n     public abstract double expectedValue();\n     \n+    /** Verify that calling increment() in a loop over testArray results in correct state */\n     public void testIncrementation() throws Exception {\n \n         StorelessUnivariateStatistic statistic =\n         }\n \n         assertEquals(expectedValue(), statistic.getResult(), getTolerance());\n+        //TODO:  add test for getN() once type is fixed\n \n         statistic.clear();\n \n \n         StorelessUnivariateStatistic statistic =\n             (StorelessUnivariateStatistic) getUnivariateStatistic();\n+        \n+        TestUtils.checkSerializedEquality(statistic);\n \n         statistic.clear();\n \n                 statistic = (StorelessUnivariateStatistic)TestUtils.serializeAndRecover(statistic); \n         }\n         \n+        TestUtils.checkSerializedEquality(statistic);\n+        \n         assertEquals(expectedValue(), statistic.getResult(), getTolerance());\n \n         statistic.clear();\n         assertTrue(Double.isNaN(statistic.getResult()));\n \n     }\n+    \n+    public void testEqualsAndHashCode() {\n+        StorelessUnivariateStatistic statistic =\n+            (StorelessUnivariateStatistic) getUnivariateStatistic();\n+        StorelessUnivariateStatistic statistic2 = null;\n+        \n+        assertTrue(\"non-null, compared to null\", !statistic.equals(statistic2));\n+        assertTrue(\"reflexive, non-null\", statistic.equals(statistic));\n+        \n+        int emptyHash = statistic.hashCode();\n+        statistic2 = (StorelessUnivariateStatistic) getUnivariateStatistic();\n+        assertTrue(\"empty stats should be equal\", statistic.equals(statistic2));\n+        assertEquals(\"empty stats should have the same hashcode\", \n+                emptyHash, statistic2.hashCode());\n+        \n+        statistic.increment(1d);\n+        assertTrue(\"reflexive, non-empty\", statistic.equals(statistic));\n+        assertTrue(\"non-empty, compared to empty\", !statistic.equals(statistic2));\n+        assertTrue(\"non-empty, compared to empty\", !statistic2.equals(statistic));\n+        assertTrue(\"non-empty stat should have different hashcode from empty stat\",\n+                statistic.hashCode() != emptyHash);\n+        \n+        statistic2.increment(1d);\n+        assertTrue(\"stats with same data should be equal\", statistic.equals(statistic2));\n+        assertEquals(\"stats with same data should have the same hashcode\", \n+                statistic.hashCode(), statistic2.hashCode());\n+        \n+        statistic.increment(Double.POSITIVE_INFINITY);\n+        assertTrue(\"stats with different n's should not be equal\", !statistic2.equals(statistic));\n+        assertTrue(\"stats with different n's should have different hashcodes\",\n+                statistic.hashCode() != statistic2.hashCode());\n+        \n+        statistic2.increment(Double.POSITIVE_INFINITY);\n+        assertTrue(\"stats with same data should be equal\", statistic.equals(statistic2));\n+        assertEquals(\"stats with same data should have the same hashcode\", \n+                statistic.hashCode(), statistic2.hashCode()); \n+        \n+        statistic.clear();\n+        statistic2.clear();\n+        assertTrue(\"cleared stats should be equal\", statistic.equals(statistic2));\n+        assertEquals(\"cleared stats should have thashcode of empty stat\", \n+                emptyHash, statistic2.hashCode());\n+        assertEquals(\"cleared stats should have thashcode of empty stat\", \n+                emptyHash, statistic.hashCode());\n+        \n+    }\n \n }", "timestamp": 1087511603, "metainfo": ""}