{"sha": "e6212e7d1802d4d0133fd545f1190594aa69b09f", "log": "Added serveral javadoc comments.  Added constructors to the matrix exception classes to mimic the existing math exceptions.   ", "commit": "\n--- a/src/java/org/apache/commons/math/ConvergenceException.java\n+++ b/src/java/org/apache/commons/math/ConvergenceException.java\n  * Error thrown when a numerical computation can not be performed because the\n  * numerical result failed to converge to a finite value.\n  * \n- * @version $Revision: 1.10 $ $Date: 2004/02/18 03:24:19 $\n+ * @version $Revision: 1.11 $ $Date: 2004/04/08 20:46:00 $\n  */\n public class ConvergenceException extends MathException implements Serializable{\n     /**\n     public ConvergenceException(Throwable throwable) {\n         this(null, throwable);\n     }\n-\n }\n--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java\n  * can be configured.\n  *\n  * @author Apache Software Foundation\n- * @version $Revision: 1.3 $\n+ * @version $Revision: 1.4 $\n  */\n public class ComplexFormat {\n \n+    /** The default complex format. */ \n \tprivate static final ComplexFormat DEFAULT = new ComplexFormat();\n \n \t// @TODO This class only allows for max fraction digits, we might want to allow other parameters\n+    \n+    /** The notation used to signify the imaginary part of the complex number. */\n     private String imaginaryCharacter = \"i\";\n \n+    /** The maximum number of decimal digits in the formatted output. */ \n     private int fractionDigits = 2;\n \n     /**\n     /**\n      * Create an instance with a custom imaginary character, and the default number\n      * of decimal places - 2.\n+     * @param imaginaryCharacter The custom imaginary character.\n      */\n     public ComplexFormat(String imaginaryCharacter) {\n         this.imaginaryCharacter = imaginaryCharacter;\n     /**\n      * Create an instance with a custom imaginary character, and a custom number of\n      * decimal places.\n+     * @param imaginaryCharacter The custom imaginary character.\n+     * @param fractionDigits The custom number of decimal places.\n      */\n     public ComplexFormat(String imaginaryCharacter, int fractionDigits) {\n         this.imaginaryCharacter = imaginaryCharacter;\n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.19 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.20 $ $Date: 2004/04/08 20:45:59 $\n  */\n public abstract class AbstractContinuousDistribution\n     implements ContinuousDistribution {\n      * @param x0 the lower bound\n      * @param x1 the upper bound\n      * @return the cumulative probability. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x0, double x1)\n         throws MathException {\n      *\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n+     * @exception MathException if the inverse cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public double inverseCumulativeProbability(final double p)\n         throws MathException {\n--- a/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.11 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.12 $ $Date: 2004/04/08 20:45:59 $\n  */\n public abstract class AbstractDiscreteDistribution\n     implements DiscreteDistribution {\n      * @param x0 the inclusive, lower bound\n      * @param x1 the inclusive, upper bound\n      * @return the cumulative probability. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(int x0, int x1) throws MathException{\n         return cumulativeProbability(x1) - \n      *\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n+     * @exception MathException if the inverse cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public int inverseCumulativeProbability(final double p) throws MathException{\n         if (p < 0.0 || p > 1.0) {\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n /**\n  * The default implementation of {@link BinomialDistribution}.\n  * \n- * @version $Revision: 1.11 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.12 $ $Date: 2004/04/08 20:45:59 $\n  */\n public class BinomialDistributionImpl\n     extends AbstractDiscreteDistribution\n      * For this disbution, X, this method returns P(X &le; x).\n      * @param x the value at which the PDF is evaluated.\n      * @return PDF for this distribution. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(int x) throws MathException {\n         double ret;\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n /**\n  * The default implementation of {@link ChiSquaredDistribution}\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.15 $ $Date: 2004/04/08 20:45:59 $\n  */\n public class ChiSquaredDistributionImpl\n     extends AbstractContinuousDistribution\n      * For this disbution, X, this method returns P(X &lt; x).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF for this distribution. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         return getGamma().cumulativeProbability(x);\n--- a/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n /**\n  * Base interface for various continuous distributions.\n  * \n- * @version $Revision: 1.12 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.13 $ $Date: 2004/04/08 20:45:59 $\n  */\n public interface ContinuousDistribution {\n     /**\n      * For this disbution, X, this method returns P(X &lt; x).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF for this distribution. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     double cumulativeProbability(double x) throws MathException;\n \n      * @param x0 the lower bound\n      * @param x1 the upper bound\n      * @return the cumulative probability. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     double cumulativeProbability(double x0, double x1) throws MathException;\n     \n      * For this disbution, X, this method returns x such that P(X &lt; x) = p.\n      * @param p the cumulative probability.\n      * @return x. \n+     * @exception MathException if the inverse cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     double inverseCumulativeProbability(double p) throws MathException;\n }\n--- a/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n /**\n  * Base interface for various discrete distributions.\n  * \n- * @version $Revision: 1.10 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.11 $ $Date: 2004/04/08 20:45:59 $\n  */\n public interface DiscreteDistribution {\n     /**\n      * For this disbution, X, this method returns P(X &le; x).\n      * @param x the value at which the PDF is evaluated.\n      * @return PDF for this distribution. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     double cumulativeProbability(int x) throws MathException;\n \n      * @param x0 the inclusive, lower bound\n      * @param x1 the inclusive, upper bound\n      * @return the cumulative probability. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     double cumulativeProbability(int x0, int x1) throws MathException;\n     \n      * For this disbution, X, this method returns x such that P(X &le; x) <= p.\n      * @param p the cumulative probability.\n      * @return x. \n+     * @exception MathException if the inverse cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     int inverseCumulativeProbability(double p) throws MathException;\n }\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n /**\n  * The default implementation of {@link ExponentialDistribution}\n  * \n- * @version $Revision: 1.13 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.14 $ $Date: 2004/04/08 20:45:59 $\n  */\n public class ExponentialDistributionImpl\n     implements ExponentialDistribution, Serializable  {\n      * \n      * @param x the value at which the CDF is evaluated.\n      * @return CDF for this distribution.\n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x) throws MathException{\n         double ret;\n      *\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n+     * @exception MathException if the inverse cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public double inverseCumulativeProbability(double p) throws MathException{\n         double ret;\n      * @param x0 the lower bound\n      * @param x1 the upper bound\n      * @return the cumulative probability. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x0, double x1) throws MathException{\n         return cumulativeProbability(x1) - cumulativeProbability(x0);\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.FDistribution}.\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.15 $ $Date: 2004/04/08 20:45:59 $\n  */\n public class FDistributionImpl\n     extends AbstractContinuousDistribution\n      * \n      * @param x the value at which the CDF is evaluated.\n      * @return CDF for this distribution. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n         double ret;\n--- a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n /**\n  * The default implementation of {@link GammaDistribution}\n  * \n- * @version $Revision: 1.17 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.18 $ $Date: 2004/04/08 20:45:59 $\n  */\n public class GammaDistributionImpl extends AbstractContinuousDistribution\n     implements GammaDistribution, Serializable  {\n      * \n      * @param x the value at which the CDF is evaluated.\n      * @return CDF for this distribution. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x) throws MathException{\n         double ret;\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n /**\n  * The default implementation of {@link HypergeometricDistribution}.\n  * \n- * @version $Revision: 1.10 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.11 $ $Date: 2004/04/08 20:45:59 $\n  */\n public class HypergeometricDistributionImpl extends AbstractDiscreteDistribution\n     implements HypergeometricDistribution, Serializable \n      * For this disbution, X, this method returns P(X &le; x).\n      * @param x the value at which the PDF is evaluated.\n      * @return PDF for this distribution. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(int x) throws MathException{\n         double ret;\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n  */\n public class NormalDistributionImpl extends AbstractContinuousDistribution \n \t\timplements NormalDistribution, Serializable {\n+    \n+    /** The mean of this distribution. */\n \tprivate double mean = 0;\n+    \n+    /** The standard deviation of this distribution. */\n \tprivate double standardDeviation = 1;\n+    \n+    /** The algorithm used to compute cumulative probabilities. */\n \tprivate NormalCDFAlgorithm cdfAlgorithm = new NormalCDFPreciseAlgorithm();\n \t\n \t/**\n--- a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.TDistribution}.\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.15 $ $Date: 2004/04/08 20:45:59 $\n  */\n public class TDistributionImpl\n     extends AbstractContinuousDistribution\n      * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF evaluted at <code>x</code>. \n+     * @exception MathException if the cumulative probability can not be\n+     *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x) throws MathException{\n         double ret;\n--- a/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\n+++ b/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\n \n package org.apache.commons.math.linear;\n \n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+\n /**\n  * Thrown when a system attempts an operation on a matrix, and\n  * that matrix does not satisfy the preconditions for the\n  * aforementioned operation.\n- * @version $Revision: 1.2 $ $Date: 2004/01/29 16:48:49 $\n+ * @version $Revision: 1.3 $ $Date: 2004/04/08 20:46:01 $\n  */\n-public class InvalidMatrixException extends RuntimeException {\n-\n-    public InvalidMatrixException(String s) {\n-        super( s );\n+public class InvalidMatrixException extends NestableRuntimeException {\n+    /**\n+     * Default constructor.\n+     */\n+    public InvalidMatrixException() {\n+        this(null, null);\n+    }\n+    \n+    /**\n+     * Construct an exception with the given message.\n+     * @param message descriptive error message. \n+     */\n+    public InvalidMatrixException(String message) {\n+        this(message, null);\n     }\n \n+    /**\n+     * Construct an exception with the given message and root cause.\n+     * @param message descriptive error message.\n+     * @param cause root cause.\n+     */\n+    public InvalidMatrixException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    /**\n+     * Create an exception with a given root cause.\n+     * @param throwable caught exception causing this problem\n+     */\n+    public InvalidMatrixException(Throwable throwable) {\n+        this(null, throwable);\n+    }\n }\n--- a/src/java/org/apache/commons/math/linear/MatrixIndexException.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixIndexException.java\n \n package org.apache.commons.math.linear;\n \n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+\n /**\n  * Thrown when an operation addresses a matrix coordinate (row,col)\n  * which is outside of the dimensions of a matrix.\n- * @version $Revision: 1.2 $ $Date: 2004/01/29 16:48:49 $\n+ * @version $Revision: 1.3 $ $Date: 2004/04/08 20:46:01 $\n  */\n-public class MatrixIndexException extends RuntimeException {\n-\n-    public MatrixIndexException(String s) {\n-        super( s );\n+public class MatrixIndexException extends NestableRuntimeException {\n+    /**\n+     * Default constructor.\n+     */\n+    public MatrixIndexException() {\n+        this(null, null);\n+    }\n+    \n+    /**\n+     * Construct an exception with the given message.\n+     * @param message descriptive error message. \n+     */\n+    public MatrixIndexException(String message) {\n+        this(message, null);\n     }\n \n+    /**\n+     * Construct an exception with the given message and root cause.\n+     * @param message descriptive error message.\n+     * @param cause root cause.\n+     */\n+    public MatrixIndexException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    /**\n+     * Create an exception with a given root cause.\n+     * @param throwable caught exception causing this problem\n+     */\n+    public MatrixIndexException(Throwable throwable) {\n+        this(null, throwable);\n+    }\n }\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n  * before using any of the methods above.\n  *\n- * @version $Revision: 1.16 $ $Date: 2004/04/08 07:01:17 $\n+ * @version $Revision: 1.17 $ $Date: 2004/04/08 20:46:01 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n \n \n \t/**\n \t * @return determinant\n-\t * @throws IllegalArgumentException if matrix is not square\n+\t * @throws InvalidMatrixException if matrix is not square\n \t */\n \tpublic double getDeterminant() throws InvalidMatrixException {\n \t\tif (!isSquare()) {\n--- a/src/java/org/apache/commons/math/stat/TestStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/TestStatistic.java\n /**\n  * A collection of commonly used test statistics and statistical tests.\n  * \n- * @version $Revision: 1.13 $ $Date: 2004/03/08 04:22:12 $ \n+ * @version $Revision: 1.14 $ $Date: 2004/04/08 20:46:00 $ \n  */\n public interface TestStatistic {\n     \n      * @param sample2 array of sample data values\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n+     * @throws MathException if the statistic can not be computed do to a\n+     *         convergence or other numerical error.\n      */\n     double t(double[] sample1, double[] sample2) \n         throws IllegalArgumentException, MathException;\n--- a/src/java/org/apache/commons/math/stat/TestStatisticImpl.java\n+++ b/src/java/org/apache/commons/math/stat/TestStatisticImpl.java\n /**\n  * Implements test statistics defined in the TestStatistic interface.\n  *\n- * @version $Revision: 1.14 $ $Date: 2004/03/08 04:22:12 $\n+ * @version $Revision: 1.15 $ $Date: 2004/04/08 20:46:00 $\n  */\n public class TestStatisticImpl implements TestStatistic, Serializable {\n \n      * @param n1 first sample n\n      * @param n2 second sample n\n      * @return p-value\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     private double tTest(double m1, double m2, double v1, double v2, double n1, double n2)\n         throws MathException {\n      * @param v sample variance\n      * @param n sample n\n      * @return p-value\n+     * @throws MathException if an error occurs computing the p-value\n      */\n     private double tTest(double m, double mu, double v, double n)\n         throws MathException {\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n /**\n  * Some useful additions to the built-in functions in {@link Math}.\n  *\n- * @version $Revision: 1.13 $ $Date: 2004/04/05 03:47:49 $\n+ * @version $Revision: 1.14 $ $Date: 2004/04/08 20:46:01 $\n  */\n public final class MathUtils {\n     \n+    /** 0.0 cast as a byte. */\n     private static final byte ZB = (byte) 0;\n     \n+    /** -1.0 cast as a byte. */\n     private static final byte NB = (byte) -1;\n     \n+    /** 1.0 cast as a byte. */\n     private static final byte PB = (byte) 1;\n     \n+    /** 0.0 cast as a short. */\n     private static final short ZS = (short) 0;\n     \n+    /** -1.0 cast as a short. */\n     private static final short NS = (short) -1;\n     \n+    /** 1.0 cast as a short. */\n     private static final short PS = (short) 1;\n     \n     /**", "timestamp": 1081457161, "metainfo": ""}