{"sha": "c73fad0a0d42103b5e13a68317ea95b1090263ba", "log": "MATH-865 Early detection that overflow will occur in the variables normalization procedure (\"encode\" method). Warning mentioned in the documentation.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n import org.apache.commons.math3.analysis.MultivariateFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n-import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n  *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n  * </ul>\n  *\n+ * When simple constraints (boundaries) are used, care must be taken that the\n+ * difference between the upper and lower bounds does not overflow; should it\n+ * be the case, a {@link NumberIsTooLargeException} will be thrown by the\n+ * {@link BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,\n+ * MultivariateFunction,GoalType,double[],double[],double[]) optimize} method.\n+ *\n  * @version $Id$\n  * @since 3.0\n  */\n                 boundaries = new double[2][];\n                 boundaries[0] = lB;\n                 boundaries[1] = uB;\n+\n+                // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                for (int i = 0; i < lB.length; i++) {\n+                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n+                        final double max = Double.MAX_VALUE + boundaries[0][i];\n+                        final NumberIsTooLargeException e\n+                            = new NumberIsTooLargeException(boundaries[1][i],\n+                                                            max,\n+                                                            true);\n+                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n+                        e.getContext().addMessage(LocalizedFormats.INDEX, i);\n+\n+                        throw e;\n+                    }\n+                }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.\n--- a/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n+import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.optimization.GoalType;\n import org.apache.commons.math3.optimization.PointValuePair;\n import org.apache.commons.math3.random.MersenneTwister;\n+import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n     public void testMath864() {\n         final CMAESOptimizer optimizer = new CMAESOptimizer();\n         final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n-                @Override\n                 public double value(double[] parameters) {\n                     final double target = 1;\n                     final double error = target - parameters[0];\n                                                    start, lower, upper).getPoint();\n         Assert.assertTrue(\"Out of bounds (\" + result[0] + \" > \" + upper[0] + \")\",\n                           result[0] <= upper[0]);\n+    }\n+\n+    /**\n+     * Cf. MATH-865\n+     */\n+    @Test(expected=NumberIsTooLargeException.class)\n+    public void testBoundaryRangeTooLarge() {\n+        final CMAESOptimizer optimizer = new CMAESOptimizer();\n+        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n+                public double value(double[] parameters) {\n+                    if (Double.isNaN(parameters[0])) {\n+                        throw new MathIllegalStateException();\n+                    }\n+                    final double target = 1;\n+                    final double error = target - parameters[0];\n+                    return error * error;\n+                }\n+            };\n+\n+        final double[] start = { 0 };\n+\n+        // The difference between upper and lower bounds is used to used\n+        // normalize the variables: In case of overflow, NaN is produced.\n+        final double max = Double.MAX_VALUE / 2;\n+        final double tooLarge = FastMath.nextUp(max);\n+        final double[] lower = { -tooLarge };\n+        final double[] upper = { tooLarge };\n+        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,\n+                                                   start, lower, upper).getPoint();\n     }\n \n     /**", "timestamp": 1348241538, "metainfo": ""}