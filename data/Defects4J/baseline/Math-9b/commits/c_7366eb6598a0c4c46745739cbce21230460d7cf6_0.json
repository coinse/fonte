{"sha": "7366eb6598a0c4c46745739cbce21230460d7cf6", "log": "Added a wrapper class to compute gradient from differentiable function.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/GradientFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.analysis.differentiation;\n+\n+import org.apache.commons.math3.analysis.MultivariateVectorFunction;\n+\n+/** Class representing the gradient of a multivariate function.\n+ * <p>\n+ * The vectorial components of the function represent the derivatives\n+ * with respect to each function parameters.\n+ * </p>\n+ * @version $Id$\n+ * @since 3.1\n+ */\n+public class GradientFunction implements MultivariateVectorFunction {\n+\n+    /** Underlying real-valued function. */\n+    private final MultivariateDifferentiableFunction f;\n+\n+    /** Simple constructor.\n+     * @param f underlying real-valued function\n+     */\n+    public GradientFunction(final MultivariateDifferentiableFunction f) {\n+        this.f = f;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double[] value(double[] point)\n+        throws IllegalArgumentException {\n+\n+        // set up parameters\n+        final DerivativeStructure[] dsX = new DerivativeStructure[point.length];\n+        for (int i = 0; i < point.length; ++i) {\n+            dsX[i] = new DerivativeStructure(point.length, 1, i, point[i]);\n+        }\n+\n+        // compute the derivatives\n+        final DerivativeStructure dsY = f.value(dsX);\n+\n+        // extract the gradient\n+        final double[] y = new double[point.length];\n+        final int[] orders = new int[point.length];\n+        for (int i = 0; i < point.length; ++i) {\n+            orders[i] = 1;\n+            y[i] = dsY.getPartialDerivative(orders);\n+            orders[i] = 0;\n+        }\n+\n+        return y;\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/GradientFunctionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math3.analysis.differentiation;\n+\n+import org.apache.commons.math3.TestUtils;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.util.FastMath;\n+import org.junit.Test;\n+\n+\n+/**\n+ * Test for class {@link GradientFunction}.\n+ */\n+public class GradientFunctionTest {\n+\n+    @Test\n+    public void test2DDistance() {\n+        EuclideanDistance f = new EuclideanDistance();\n+        GradientFunction g = new GradientFunction(f);\n+        for (double x = -10; x < 10; x += 0.5) {\n+            for (double y = -10; y < 10; y += 0.5) {\n+                double[] point = new double[] { x, y };\n+                TestUtils.assertEquals(f.gradient(point), g.value(point), 1.0e-15);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void test3DDistance() {\n+        EuclideanDistance f = new EuclideanDistance();\n+        GradientFunction g = new GradientFunction(f);\n+        for (double x = -10; x < 10; x += 0.5) {\n+            for (double y = -10; y < 10; y += 0.5) {\n+                for (double z = -10; z < 10; z += 0.5) {\n+                    double[] point = new double[] { x, y, z };\n+                    TestUtils.assertEquals(f.gradient(point), g.value(point), 1.0e-15);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static class EuclideanDistance implements MultivariateDifferentiableFunction {\n+        \n+        public double value(double[] point) {\n+            double d2 = 0;\n+            for (double x : point) {\n+                d2 += x * x;\n+            }\n+            return FastMath.sqrt(d2);\n+        }\n+        \n+        public DerivativeStructure value(DerivativeStructure[] point)\n+            throws DimensionMismatchException, MathIllegalArgumentException {\n+            DerivativeStructure d2 = point[0].getField().getZero();\n+            for (DerivativeStructure x : point) {\n+                d2 = d2.add(x.multiply(x));\n+            }\n+            return d2.sqrt();\n+        }\n+\n+        public double[] gradient(double[] point) {\n+            double[] gradient = new double[point.length];\n+            double d = value(point);\n+            for (int i = 0; i < point.length; ++i) {\n+                gradient[i] = point[i] / d;\n+            }\n+            return gradient;\n+        }\n+\n+    }\n+\n+}", "timestamp": 1347448976, "metainfo": ""}