{"sha": "bb8e14458a2ed360819e37e07f538073064ceaba", "log": "Made increment and evaluate methods consistent wrt NaN values, improved javadoc, formatting.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n \n import java.io.Serializable;\n \n-import org\n-    .apache\n-    .commons\n-    .math\n-    .stat\n-    .univariate\n-    .AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n  * Returns the maximum of the available values.\n+ * <p>\n+ * <ul>\n+ * <li>The result is <code>NaN</code> iff all values are <code>NaN</code> \n+ * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>\n+ * <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>, \n+ * the result is <code>Double.POSITIVE_INFINITY.</code></li>\n+ * </ul>\n  * \n- * @version $Revision: 1.16 $ $Date: 2004/04/27 16:42:33 $\n+ * @version $Revision: 1.17 $ $Date: 2004/06/18 13:24:06 $\n  */\n public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n     static final long serialVersionUID = -5593383832225844641L;    \n     \n-    /** */\n+    /** Number of values that have been added */\n     private long n = 0;\n         \n-    /** */\n+    /** Current value of the statistic */\n     private double value = Double.NaN;\n \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n     public void increment(final double d) {\n-        value = Double.isNaN(value) ? d : Math.max(value, d);\n+        if (d > value || Double.isNaN(value)) {\n+            value = d;\n+        }\n         n++;\n     }\n \n      * \n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n-    public double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+    public double evaluate(final double[] values, final int begin, final int length) {\n         double max = Double.NaN;\n         if (test(values, begin, length)) {\n             max = values[begin];", "timestamp": 1087565046, "metainfo": ""}