{"sha": "2bb96a82964c04c9cdbb18f8b01eeb2bcee9ab4d", "log": "Added methods to create BigMatrix instances.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/MatrixUtils.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixUtils.java\n \n package org.apache.commons.math.linear;\n \n+import java.math.BigDecimal;\n+\n /**\n  * A collection of static methods that operate on or return matrices.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/12 06:27:44 $\n+ * @version $Revision: 1.2 $ $Date: 2004/10/25 05:36:15 $\n  */\n public class MatrixUtils {\n \n     }\n     \n     /**\n+     * Returns a {@link BigMatrix} whose entries are the the values in the\n+     * the input array.  The input array is copied, not referenced.\n+     * \n+     * @param data input array\n+     * @return  RealMatrix containing the values of the array\n+     * @throws IllegalArgumentException if <code>data</code> is not rectangular\n+     *  (not all rows have the same length) or empty\n+     * @throws NullPointerException if data is null\n+     */\n+    public static BigMatrix createBigMatrix(double[][] data) {\n+        return new BigMatrixImpl(data);\n+    }\n+    \n+    /**\n+     * Returns a {@link BigMatrix} whose entries are the the values in the\n+     * the input array.  The input array is copied, not referenced.\n+     * \n+     * @param data input array\n+     * @return  RealMatrix containing the values of the array\n+     * @throws IllegalArgumentException if <code>data</code> is not rectangular\n+     *  (not all rows have the same length) or empty\n+     * @throws NullPointerException if data is null\n+     */\n+    public static BigMatrix createBigMatrix(BigDecimal[][] data) {\n+        return new BigMatrixImpl(data);\n+    }\n+    \n+    /**\n+     * Returns a {@link BigMatrix} whose entries are the the values in the\n+     * the input array.  The input array is copied, not referenced.\n+     * \n+     * @param data input array\n+     * @return  RealMatrix containing the values of the array\n+     * @throws IllegalArgumentException if <code>data</code> is not rectangular\n+     *  (not all rows have the same length) or empty\n+     * @throws NullPointerException if data is null\n+     */\n+    public static BigMatrix createBigMatrix(String[][] data) {\n+        return new BigMatrixImpl(data);\n+    }\n+    \n+    /**\n      * Creates a row {@link RealMatrix} using the data from the input\n      * array. \n      * \n     }\n     \n     /**\n+     * Creates a row {@link BigMatrix} using the data from the input\n+     * array. \n+     * \n+     * @param rowData the input row data\n+     * @return a 1 x rowData.length BigMatrix\n+     * @throws IllegalArgumentException if <code>rowData</code> is empty\n+     * @throws NullPointerException if <code>rowData</code>is null\n+     */\n+    public static BigMatrix createRowBigMatrix(double[] rowData) {\n+        int nCols = rowData.length;\n+        double[][] data = new double[1][nCols];\n+        System.arraycopy(rowData, 0, data[0], 0, nCols);\n+        return new BigMatrixImpl(data);\n+    }\n+    \n+    /**\n+     * Creates a row {@link BigMatrix} using the data from the input\n+     * array. \n+     * \n+     * @param rowData the input row data\n+     * @return a 1 x rowData.length BigMatrix\n+     * @throws IllegalArgumentException if <code>rowData</code> is empty\n+     * @throws NullPointerException if <code>rowData</code>is null\n+     */\n+    public static BigMatrix createRowBigMatrix(BigDecimal[] rowData) {\n+        int nCols = rowData.length;\n+        BigDecimal[][] data = new BigDecimal[1][nCols];\n+        System.arraycopy(rowData, 0, data[0], 0, nCols);\n+        return new BigMatrixImpl(data);\n+    }\n+    \n+    /**\n+     * Creates a row {@link BigMatrix} using the data from the input\n+     * array. \n+     * \n+     * @param rowData the input row data\n+     * @return a 1 x rowData.length BigMatrix\n+     * @throws IllegalArgumentException if <code>rowData</code> is empty\n+     * @throws NullPointerException if <code>rowData</code>is null\n+     */\n+    public static BigMatrix createRowBigMatrix(String[] rowData) {\n+        int nCols = rowData.length;\n+        String[][] data = new String[1][nCols];\n+        System.arraycopy(rowData, 0, data[0], 0, nCols);\n+        return new BigMatrixImpl(data);\n+    }\n+    \n+    /**\n      * Creates a column {@link RealMatrix} using the data from the input\n      * array.\n      * \n         return new RealMatrixImpl(data);\n     }\n     \n+    /**\n+     * Creates a column {@link BigMatrix} using the data from the input\n+     * array.\n+     * \n+     * @param columnData  the input column data\n+     * @return a columnData x 1 BigMatrix\n+     * @throws IllegalArgumentException if <code>columnData</code> is empty\n+     * @throws NullPointerException if <code>columnData</code>is null\n+     */\n+    public static BigMatrix createColumnBigMatrix(double[] columnData) {\n+        int nRows = columnData.length;\n+        double[][] data = new double[nRows][1];\n+        for (int row = 0; row < nRows; row++) {\n+            data[row][0] = columnData[row];\n+        }\n+        return new BigMatrixImpl(data);\n+    }\n+    \n+    /**\n+     * Creates a column {@link BigMatrix} using the data from the input\n+     * array.\n+     * \n+     * @param columnData  the input column data\n+     * @return a columnData x 1 BigMatrix\n+     * @throws IllegalArgumentException if <code>columnData</code> is empty\n+     * @throws NullPointerException if <code>columnData</code>is null\n+     */\n+    public static BigMatrix createColumnBigMatrix(BigDecimal[] columnData) {\n+        int nRows = columnData.length;\n+        BigDecimal[][] data = new BigDecimal[nRows][1];\n+        for (int row = 0; row < nRows; row++) {\n+            data[row][0] = columnData[row];\n+        }\n+        return new BigMatrixImpl(data);\n+    }\n+    \n+    /**\n+     * Creates a column {@link BigMatrix} using the data from the input\n+     * array.\n+     * \n+     * @param columnData  the input column data\n+     * @return a columnData x 1 BigMatrix\n+     * @throws IllegalArgumentException if <code>columnData</code> is empty\n+     * @throws NullPointerException if <code>columnData</code>is null\n+     */\n+    public static BigMatrix createColumnBigMatrix(String[] columnData) {\n+        int nRows = columnData.length;\n+        String[][] data = new String[nRows][1];\n+        for (int row = 0; row < nRows; row++) {\n+            data[row][0] = columnData[row];\n+        }\n+        return new BigMatrixImpl(data);\n+    }\n+    \n }\n \n--- a/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n+++ b/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n  */\n package org.apache.commons.math.linear;\n \n+import java.math.BigDecimal;\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n /**\n  * Test cases for the {@link MatrixUtils} class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/12 06:27:44 $\n+ * @version $Revision: 1.2 $ $Date: 2004/10/25 05:36:15 $\n  */\n \n public final class MatrixUtilsTest extends TestCase {\n     \n     protected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };\n+    protected double[][] nullMatrix = null;\n     protected double[] row = {1,2,3};\n+    protected BigDecimal[] bigRow = \n+        {new BigDecimal(1),new BigDecimal(2),new BigDecimal(3)};\n+    protected String[] stringRow = {\"1\", \"2\", \"3\"};\n     protected double[][] rowMatrix = {{1,2,3}};\n+    protected BigDecimal[][] bigRowMatrix = \n+        {{new BigDecimal(1), new BigDecimal(2), new BigDecimal(3)}};\n+    protected String[][] stringRowMatrix = {{\"1\", \"2\", \"3\"}};\n     protected double[] col = {0,4,6};\n+    protected BigDecimal[] bigCol = \n+        {new BigDecimal(0),new BigDecimal(4),new BigDecimal(6)};\n+    protected String[] stringCol = {\"0\",\"4\",\"6\"};\n+    protected double[] nullDoubleArray = null;\n     protected double[][] colMatrix = {{0},{4},{6}};\n+    protected BigDecimal[][] bigColMatrix = \n+        {{new BigDecimal(0)},{new BigDecimal(4)},{new BigDecimal(6)}};\n+    protected String[][] stringColMatrix = {{\"0\"}, {\"4\"}, {\"6\"}};\n     \n     public MatrixUtilsTest(String name) {\n         super(name);\n+        for (int i = 0; i < row.length; i++) {\n+            \n+        }\n     }\n     \n     public void setUp() {     \n             // expected\n         } \n     }\n+    \n+    public void testCreateBigMatrix() {\n+        assertEquals(new BigMatrixImpl(testData), \n+                MatrixUtils.createBigMatrix(testData));\n+        assertEquals(new BigMatrixImpl(bigColMatrix), \n+                MatrixUtils.createBigMatrix(bigColMatrix));\n+        assertEquals(new BigMatrixImpl(stringColMatrix), \n+                MatrixUtils.createBigMatrix(stringColMatrix));\n+        try {\n+            MatrixUtils.createBigMatrix(new double[][] {{1}, {1,2}});  // ragged\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        try {\n+            MatrixUtils.createBigMatrix(new double[][] {{}, {}});  // no columns\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            MatrixUtils.createBigMatrix(nullMatrix);  // null\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        } \n+    }\n         \n     public void testCreateRowRealMatrix() {\n         assertEquals((RealMatrixImpl) MatrixUtils.createRowRealMatrix(row),\n         }\n         try {\n             MatrixUtils.createRowRealMatrix(null);  // null\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        } \n+    }\n+    \n+    public void testCreateRowBigMatrix() {\n+        assertEquals((BigMatrixImpl) MatrixUtils.createRowBigMatrix(row),\n+                new BigMatrixImpl(rowMatrix));\n+        assertEquals((BigMatrixImpl) MatrixUtils.createRowBigMatrix(bigRow),\n+                new BigMatrixImpl(bigRowMatrix));\n+        assertEquals((BigMatrixImpl) MatrixUtils.createRowBigMatrix(stringRow),\n+                new BigMatrixImpl(stringRowMatrix));\n+        try {\n+            MatrixUtils.createRowBigMatrix(new double[] {});  // empty\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            MatrixUtils.createRowBigMatrix(nullDoubleArray);  // null\n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // expected\n             // expected\n         } \n     }\n+    \n+    public void testCreateColumnBigMatrix() {\n+        assertEquals((BigMatrixImpl) MatrixUtils.createColumnBigMatrix(col),\n+                new BigMatrixImpl(colMatrix));\n+        assertEquals((BigMatrixImpl) MatrixUtils.createColumnBigMatrix(bigCol),\n+                new BigMatrixImpl(bigColMatrix));\n+        assertEquals((BigMatrixImpl) MatrixUtils.createColumnBigMatrix(stringCol),\n+                new BigMatrixImpl(stringColMatrix));   \n+       \n+        try {\n+            MatrixUtils.createColumnBigMatrix(new double[] {});  // empty\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            MatrixUtils.createColumnBigMatrix(nullDoubleArray);  // null\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        } \n+    }\n         \n }\n ", "timestamp": 1098682575, "metainfo": ""}