{"sha": "e4d49aa0ed81bfffa943d346d404adad452b72da", "log": "Fix PMD warnings by suppressing or removing unused imports.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\n                 return bundle.getString(toString());\n             }\n \n-        } catch (MissingResourceException mre) {\n+        } catch (MissingResourceException mre) { // NOPMD\n             // do nothing here\n         }\n \n--- a/src/main/java/org/apache/commons/math3/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math3/fitting/GaussianFitter.java\n                     double v = Double.POSITIVE_INFINITY;\n                     try {\n                         v = super.value(x, p);\n-                    } catch (NotStrictlyPositiveException e) {\n+                    } catch (NotStrictlyPositiveException e) { // NOPMD\n                         // Do nothing.\n                     }\n                     return v;\n                                    Double.POSITIVE_INFINITY };\n                     try {\n                         v = super.gradient(x, p);\n-                    } catch (NotStrictlyPositiveException e) {\n+                    } catch (NotStrictlyPositiveException e) { // NOPMD\n                         // Do nothing.\n                     }\n                     return v;\n--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane.java\n package org.apache.commons.math3.geometry.partitioning;\n \n import org.apache.commons.math3.geometry.Space;\n-import org.apache.commons.math3.geometry.partitioning.SubHyperplane;\n \n /** This class implements the dimension-independent parts of {@link SubHyperplane}.\n \n--- a/src/main/java/org/apache/commons/math3/ode/MultistepIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/MultistepIntegrator.java\n         try {\n             starter.integrate(new CountingDifferentialEquations(y0.length),\n                               t0, y0, t, new double[y0.length]);\n-        } catch (InitializationCompletedMarkerException icme) {\n+        } catch (InitializationCompletedMarkerException icme) { // NOPMD\n             // this is the expected nominal interruption of the start integrator\n         }\n \n--- a/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java\n package org.apache.commons.math3.optim;\n \n import org.apache.commons.math3.util.Incrementor;\n-import org.apache.commons.math3.optim.OptimizationData;\n-import org.apache.commons.math3.optim.ConvergenceChecker;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.exception.TooManyIterationsException;\n \n--- a/src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;\n-import org.apache.commons.math3.optimization.fitting.CurveFitter;\n-import org.apache.commons.math3.optimization.fitting.WeightedObservedPoint;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n                     double v = Double.POSITIVE_INFINITY;\n                     try {\n                         v = super.value(x, p);\n-                    } catch (NotStrictlyPositiveException e) {\n+                    } catch (NotStrictlyPositiveException e) { // NOPMD\n                         // Do nothing.\n                     }\n                     return v;\n                                    Double.POSITIVE_INFINITY };\n                     try {\n                         v = super.gradient(x, p);\n-                    } catch (NotStrictlyPositiveException e) {\n+                    } catch (NotStrictlyPositiveException e) { // NOPMD\n                         // Do nothing.\n                     }\n                     return v;\n--- a/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java\n         } finally {\n            try {\n                in.close();\n-           } catch (IOException ex) {\n+           } catch (IOException ex) { // NOPMD\n                // ignore\n            }\n         }\n         } finally {\n             try {\n                 in.close();\n-            } catch (IOException ex) {\n+            } catch (IOException ex) { // NOPMD\n                 // ignore\n             }\n         }\n--- a/src/main/java/org/apache/commons/math3/random/ValueServer.java\n+++ b/src/main/java/org/apache/commons/math3/random/ValueServer.java\n             try {\n                 filePointer.close();\n                 filePointer = null;\n-            } catch (IOException ex) {\n+            } catch (IOException ex) { // NOPMD\n                 // ignore\n             }\n         }\n--- a/src/main/java/org/apache/commons/math3/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math3/stat/Frequency.java\n             if (count != null) {\n                 result = count.longValue();\n             }\n-        } catch (ClassCastException ex) {\n+        } catch (ClassCastException ex) { // NOPMD\n             // ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n         }\n         return result;\n--- a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java\n+++ b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java\n             next = -1;\n             try {\n                 advance();\n-            } catch (NoSuchElementException nsee) {\n+            } catch (NoSuchElementException nsee) { // NOPMD\n                 // ignored\n             }\n \n \n             // prepare next step\n             try {\n-                while (states[++next] != FULL) {\n+                while (states[++next] != FULL) { // NOPMD\n                     // nothing to do\n                 }\n             } catch (ArrayIndexOutOfBoundsException e) {\n--- a/src/main/java/org/apache/commons/math3/util/OpenIntToFieldHashMap.java\n+++ b/src/main/java/org/apache/commons/math3/util/OpenIntToFieldHashMap.java\n             next = -1;\n             try {\n                 advance();\n-            } catch (NoSuchElementException nsee) {\n+            } catch (NoSuchElementException nsee) { // NOPMD\n                 // ignored\n             }\n \n \n             // prepare next step\n             try {\n-                while (states[++next] != FULL) {\n+                while (states[++next] != FULL) { // NOPMD\n                     // nothing to do\n                 }\n             } catch (ArrayIndexOutOfBoundsException e) {", "timestamp": 1355427957, "metainfo": ""}