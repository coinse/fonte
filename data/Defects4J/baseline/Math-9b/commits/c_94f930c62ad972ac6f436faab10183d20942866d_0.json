{"sha": "94f930c62ad972ac6f436faab10183d20942866d", "log": "Javadoc.  ", "commit": "\n--- a/src/test/org/apache/commons/math/TestUtils.java\n+++ b/src/test/org/apache/commons/math/TestUtils.java\n /*\n- * Copyright 2003-2004 The Apache Software Foundation.\n+ * Copyright 2003-2005 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  */\n public class TestUtils {\n     /**\n-     * \n+     * Collection of static methods used in math unit tests.\n      */\n     private TestUtils() {\n         super();\n     }\n \n+    /**\n+     * Verifies that expected and actual are within delta, or are both NaN or\n+     * infinities of the same sign.\n+     */\n     public static void assertEquals(double expected, double actual, double delta) {\n         assertEquals(null, expected, actual, delta);\n     }\n         }\n     }\n     \n-    /*\n+    /**\n      * Verifies that the two arguments are exactly the same, either\n      * both NaN or infinities of same sign, or identical floating point values.\n      */\n         }\n     }\n     \n+    /**\n+     * Serializes an object to a temp file and then recovers the object from the file.\n+     * Returns the deserialized object.\n+     * \n+     * @param o  object to serialize and recover\n+     * @return  the recovered, deseriailized object\n+     */\n     public static Object serializeAndRecover(Object o){\n         \n         Object result = null;\n     }\n     \n     /**\n-     * Verifies that serialization preserves equals and hashCode\n-     * \n-     * @param object\n+     * Verifies that serialization preserves equals and hashCode.\n+     * Serializes the object, then recovers it and checks equals and hash code.\n+     * \n+     * @param object  the object to serialize and recover\n      */\n     public static void checkSerializedEquality(Object object) {\n         Object object2 = serializeAndRecover(object);\n         Assert.assertEquals(\"HashCode check\", object.hashCode(), object2.hashCode());\n     }\n \n-    public static void assertRelativelyEquals(double expected, double actual, double relativeError) {\n+    /**\n+     * Verifies that the relative error in actual vs. expected is less than or\n+     * equal to relativeError.  If expected is infinite or NaN, actual must be\n+     * the same (NaN or infinity of the same sign).\n+     * \n+     * @param expected expected value\n+     * @param actual  observed value\n+     * @param relativeError  maximum allowable relative error\n+     */\n+    public static void assertRelativelyEquals(double expected, double actual,\n+            double relativeError) {\n         assertRelativelyEquals(null, expected, actual, relativeError);\n     }\n     \n-    public static void assertRelativelyEquals(String msg, double expected, double actual, double relativeError) {\n+    /**\n+     * Verifies that the relative error in actual vs. expected is less than or\n+     * equal to relativeError.  If expected is infinite or NaN, actual must be\n+     * the same (NaN or infinity of the same sign).\n+     * \n+     * @param msg  message to return with failure\n+     * @param expected expected value\n+     * @param actual  observed value\n+     * @param relativeError  maximum allowable relative error\n+     */\n+    public static void assertRelativelyEquals(String msg, double expected,\n+            double actual, double relativeError) {\n         if (Double.isNaN(expected)) {\n             Assert.assertTrue(msg, Double.isNaN(actual));\n         } else if (Double.isNaN(actual)) {", "timestamp": 1135659935, "metainfo": ""}