{"sha": "8de3eb542b2be80ba309b2c91ae1dba75bdb5063", "log": "MATH-413 (point 13) Selecting a random start value (instead of interval bounds).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n                                                  final GoalType goal,\n                                                  final double min, final double max)\n         throws FunctionEvaluationException {\n-\n+        return optimize(f, goal, min, max, min + 0.5 * (max - min));\n+    }\n+\n+    /** {@inheritDoc} */\n+    public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,\n+                                                 final double min, final double max,\n+                                                 final double startValue)\n+        throws FunctionEvaluationException {\n         optima = new UnivariateRealPointValuePair[starts];\n         totalEvaluations = 0;\n \n         // Multi-start loop.\n         for (int i = 0; i < starts; ++i) {\n             try {\n-                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\n-                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\n-                optima[i] = optimizer.optimize(f, goal,\n-                                               FastMath.min(bound1, bound2),\n-                                               FastMath.max(bound1, bound2));\n+                final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);\n+                optima[i] = optimizer.optimize(f, goal, min, max, s);\n             } catch (FunctionEvaluationException fee) {\n                 optima[i] = null;\n             } catch (ConvergenceException ce) {\n \n         // Return the point with the best objective function value.\n         return optima[0];\n-    }\n-\n-    /** {@inheritDoc} */\n-    public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goalType,\n-                                                 final double min, final double max,\n-                                                 final double startValue)\n-            throws FunctionEvaluationException {\n-        // XXX Main code should be here, using \"startValue\" for the first start.\n-        // XXX This method should set \"startValue\" to min + 0.5 * (max - min)\n-        return optimize(f, goalType, min, max);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java\n             assertEquals(-1.0, f.value(optima[i].getPoint()), 1.0e-10);\n             assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1.0e-10);\n         }\n-        assertTrue(optimizer.getEvaluations() > 150);\n-        assertTrue(optimizer.getEvaluations() < 250);\n+        assertTrue(optimizer.getEvaluations() > 200);\n+        assertTrue(optimizer.getEvaluations() < 300);\n     }\n \n     @Test\n \n         UnivariateRealPointValuePair optimum\n             = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n-        assertEquals(-0.2719561271, optimum.getPoint(), 1e-9);\n+        assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);\n         assertEquals(-0.0443342695, optimum.getValue(), 1e-9);\n \n         UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n         for (int i = 0; i < optima.length; ++i) {\n             assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);\n         }\n-        assertTrue(optimizer.getEvaluations() >= 110);\n-        assertTrue(optimizer.getEvaluations() <= 150);\n+        assertTrue(optimizer.getEvaluations() >= 50);\n+        assertTrue(optimizer.getEvaluations() <= 100);\n     }\n }", "timestamp": 1285243916, "metainfo": ""}