{"sha": "3d76b1e6be73fe75019bdf4773dcb0eeb4469984", "log": "Fixed javadoc warnings.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n  * DerivativeStructure}-based instances. This method is simpler but may be limited in\n  * the accuracy and derivation orders and may be computationally intensive (this is\n  * typically the case for {@link FiniteDifferencesDifferentiator finite differences\n- * differentiator).</p>\n+ * differentiator}.</p>\n  * <p>Instances of this class are guaranteed to be immutable.</p>\n  * @see DSCompiler\n  * @version $Id$\n \n     /** Compute the signum of the instance.\n      * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise\n-     * @param a number on which evaluation is done\n      * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a\n      */\n     public DerivativeStructure signum() {\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java\n  * <p>\n  *   This package holds the main interfaces and basic building block classes\n  *   dealing with differentiation.\n- *   The core class is {@link DerivativeStructure} which holds the value and\n- *   the differentials of a function. This class handles some arbitrary number\n- *   of free parameters and arbitrary derivation order. It is used both as\n- *   the input and the output type for the {@link UnivariateDifferentiableFunction}\n- *   interface. Any differentiable function should implement this interface.\n+ *   The core class is {@link org.apache.commons.math3.analysis.differentiation.DerivativeStructure\n+ *   DerivativeStructure} which holds the value and the differentials of a function. This class\n+ *   handles some arbitrary number of free parameters and arbitrary derivation order. It is used\n+ *   both as the input and the output type for the {@link\n+ *   org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction\n+ *   UnivariateDifferentiableFunction} interface. Any differentiable function should implement this\n+ *   interface.\n  * </p>\n  * <p>\n- *   The {@link UnivariateFunctionDifferentiator} interface defines a way to differentiation\n- *   a simple {@link org.apache.commons.math3.analysis.UnivariateFunction\n- *   univariate function} and get a {@link differential function}.\n+ *   The {@link org.apache.commons.math3.analysis.differentiation.UnivariateFunctionDifferentiator\n+ *   UnivariateFunctionDifferentiator} interface defines a way to differentiation a simple {@link\n+ *   org.apache.commons.math3.analysis.UnivariateFunction UnivariateFunction} and get a {@link\n+ *   org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction\n+ *   UnivariateDifferentiableFunction}.\n  * </p>\n  * <p>\n- *   Similar interfaces also exist for multivariate functions and for vector or\n- *   matrix valued functions.\n+ *   Similar interfaces also exist for multivariate functions and for vector or matrix valued functions.\n  * </p>\n  *\n  */\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonSolver.java\n  * <p>\n  * The function should be continuous but not necessarily smooth.</p>\n  *\n- * @deprecated as of 3.1, replaced by {@link NewtonRaphsonSolverTest}\n+ * @deprecated as of 3.1, replaced by {@link NewtonRaphsonSolver}\n  * @version $Id$\n  */\n @Deprecated\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n  *\n  * When simple constraints (boundaries) are used, care must be taken that the\n  * difference between the upper and lower bounds does not overflow; should it\n- * be the case, a {@link NumberIsTooLargeException} will be thrown by the\n+ * be the case, a {@link org.apache.commons.math3.exception.NumberIsTooLargeException\n+ * NumberIsTooLargeException} will be thrown by the\n  * {@link BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,\n  * MultivariateFunction,GoalType,double[],double[],double[]) optimize} method.\n  *\n--- a/src/main/java/org/apache/commons/math3/optimization/package-info.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/package-info.java\n  *      multivariate real functions}</li>\n  *  <li>{@link org.apache.commons.math3.optimization.MultivariateDifferentiableOptimizer\n  *      MultivariateDifferentiableOptimizer} for {@link\n- *      org.apache.commons.math3.analysis.MultivariateDifferentiableFunction\n- *      differentiable multivariate real functions}</li>\n- *  <li>{@link org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer\n+ *      org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction\n+ *      multivariate differentiable real functions}</li>\n+ *  <li>{@link org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer\n  *      MultivariateDifferentiableVectorOptimizer} for {@link\n- *      org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction\n- *      differentiable multivariate vectorial functions}</li>\n+ *      org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction\n+ *      multivariate differentiable vectorial functions}</li>\n  * </ul>\n  * </p>\n  *\n  *\n  */\n package org.apache.commons.math3.optimization;\n+import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;\n+\n--- a/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java\n     }\n \n     /**\n-     * Generates a random value from the {@link BetaDistribution Beta Distribution}.\n+     * Generates a random value from the {@link org.apache.commons.math3.distribution.BetaDistribution Beta Distribution}.\n      * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}\n      * to generate random values.\n      *\n     }\n \n     /**\n-     * Generates a random value from the {@link BinomialDistribution Binomial Distribution}.\n+     * Generates a random value from the {@link org.apache.commons.math3.distribution.BinomialDistribution Binomial Distribution}.\n      * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}\n      * to generate random values.\n      *\n     }\n \n     /**\n-     * Generates a random value from the {@link CauchyDistribution Cauchy Distribution}.\n+     * Generates a random value from the {@link org.apache.commons.math3.distribution.CauchyDistribution Cauchy Distribution}.\n      * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}\n      * to generate random values.\n      *\n     }\n \n     /**\n-     * Generates a random value from the {@link ChiSquaredDistribution ChiSquare Distribution}.\n+     * Generates a random value from the {@link org.apache.commons.math3.distribution.ChiSquaredDistribution ChiSquare Distribution}.\n      * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}\n      * to generate random values.\n      *\n     }\n \n     /**\n-     * Generates a random value from the {@link FDistribution F Distribution}.\n+     * Generates a random value from the {@link org.apache.commons.math3.distribution.FDistribution F Distribution}.\n      * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}\n      * to generate random values.\n      *\n     }\n \n     /**\n-     * Generates a random value from the {@link HypergeometricDistribution Hypergeometric Distribution}.\n+     * Generates a random value from the {@link org.apache.commons.math3.distribution.HypergeometricDistribution Hypergeometric Distribution}.\n      * This implementation uses {@link #nextInversionDeviate(IntegerDistribution) inversion}\n      * to generate random values.\n      *\n     }\n \n     /**\n-     * Generates a random value from the {@link PascalDistribution Pascal Distribution}.\n+     * Generates a random value from the {@link org.apache.commons.math3.distribution.PascalDistribution Pascal Distribution}.\n      * This implementation uses {@link #nextInversionDeviate(IntegerDistribution) inversion}\n      * to generate random values.\n      *\n     }\n \n     /**\n-     * Generates a random value from the {@link TDistribution T Distribution}.\n+     * Generates a random value from the {@link org.apache.commons.math3.distribution.TDistribution T Distribution}.\n      * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}\n      * to generate random values.\n      *\n     }\n \n     /**\n-     * Generates a random value from the {@link WeibullDistribution Weibull Distribution}.\n+     * Generates a random value from the {@link org.apache.commons.math3.distribution.WeibullDistribution Weibull Distribution}.\n      * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}\n      * to generate random values.\n      *\n     }\n \n     /**\n-     * Generates a random value from the {@link ZipfDistribution Zipf Distribution}.\n+     * Generates a random value from the {@link org.apache.commons.math3.distribution.ZipfDistribution Zipf Distribution}.\n      * This implementation uses {@link #nextInversionDeviate(IntegerDistribution) inversion}\n      * to generate random values.\n      *\n--- a/src/main/java/org/apache/commons/math3/special/Gamma.java\n+++ b/src/main/java/org/apache/commons/math3/special/Gamma.java\n      * {@code gamma(x) = sqrt(2 * pi) / x * (x + g + 0.5) ^ (x + 0.5)\n      *                   * exp(-x - g - 0.5) * lanczos(x)},\n      * </center>\n-     * where {@code g} is a constant, returned by {@link #getLanczosG()}.\n+     * where {@code g} is the Lanczos constant.\n      * </p>\n      *\n      * @param x Argument.", "timestamp": 1349777076, "metainfo": ""}