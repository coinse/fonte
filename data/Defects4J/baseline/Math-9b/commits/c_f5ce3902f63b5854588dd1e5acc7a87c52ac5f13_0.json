{"sha": "f5ce3902f63b5854588dd1e5acc7a87c52ac5f13", "log": "(MATH-649) SimpleRegression needs the ability to suppress the intercept \t\t\t\t\t\t  This commit pushes changes to allow the estimation of the a regression in which the intercept is constrained to be zero. I am also pushing two unit tests.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n     /** mean of accumulated y values, used in updating formulas */\n     private double ybar = 0;\n \n+    /** include an intercept or not */\n+    private final boolean hasIntercept;\n     // ---------------------Public methods--------------------------------------\n \n     /**\n      * Create an empty SimpleRegression instance\n      */\n     public SimpleRegression() {\n+        this(true);\n+    }\n+    /**\n+    * Secondary constructor which allows the user the ability to include/exclude const\n+    * @param includeIntercept boolean flag, true includes an intercept\n+    */\n+    public SimpleRegression(boolean includeIntercept){\n         super();\n+        hasIntercept = includeIntercept;\n     }\n \n     /**\n      * @param x independent variable value\n      * @param y dependent variable value\n      */\n-    public void addData(double x, double y) {\n+    public void addData(final double x, final double y){\n         if (n == 0) {\n             xbar = x;\n             ybar = y;\n         } else {\n-            double dx = x - xbar;\n-            double dy = y - ybar;\n-            sumXX += dx * dx * (double) n / (n + 1d);\n-            sumYY += dy * dy * (double) n / (n + 1d);\n-            sumXY += dx * dy * (double) n / (n + 1d);\n-            xbar += dx / (n + 1.0);\n-            ybar += dy / (n + 1.0);\n+            if( hasIntercept ){\n+                final double fact1 = 1.0 + (double) n;\n+                final double fact2 = ((double) n) / (1.0 + (double) n);\n+                final double dx = x - xbar;\n+                final double dy = y - ybar;\n+                sumXX += dx * dx * fact2;\n+                sumYY += dy * dy * fact2;\n+                sumXY += dx * dy * fact2;\n+                xbar += dx / fact1;\n+                ybar += dy / fact1;\n+            }\n+         }\n+        if( !hasIntercept ){\n+            sumXX += x * x ;\n+            sumYY += y * y ;\n+            sumXY += x * y ;\n         }\n         sumX += x;\n         sumY += y;\n         n++;\n+        return;\n     }\n \n \n      */\n     public void removeData(double x, double y) {\n         if (n > 0) {\n-            double dx = x - xbar;\n-            double dy = y - ybar;\n-            sumXX -= dx * dx * (double) n / (n - 1d);\n-            sumYY -= dy * dy * (double) n / (n - 1d);\n-            sumXY -= dx * dy * (double) n / (n - 1d);\n-            xbar -= dx / (n - 1.0);\n-            ybar -= dy / (n - 1.0);\n-            sumX -= x;\n-            sumY -= y;\n-            n--;\n-        }\n+            if (hasIntercept) {\n+                final double fact1 = (double) n - 1.0;\n+                final double fact2 = ((double) n) / ((double) n - 1.0);\n+                final double dx = x - xbar;\n+                final double dy = y - ybar;\n+                sumXX -= dx * dx * fact2;\n+                sumYY -= dy * dy * fact2;\n+                sumXY -= dx * dy * fact2;\n+                xbar -= dx / fact1;\n+                ybar -= dy / fact1;\n+            } else {\n+                final double fact1 = (double) n - 1.0;\n+                sumXX -= x * x;\n+                sumYY -= y * y;\n+                sumXY -= x * y;\n+                xbar -= x / fact1;\n+                ybar -= y / fact1;\n+            }\n+             sumX -= x;\n+             sumY -= y;\n+             n--;\n+        }\n+        return;\n     }\n \n     /**\n      */\n     public double predict(double x) {\n         double b1 = getSlope();\n-        return getIntercept(b1) + b1 * x;\n+        if (hasIntercept) {\n+            return getIntercept(b1) + b1 * x;\n+        }\n+        return b1 * x;\n     }\n \n     /**\n      * @return the intercept of the regression line\n      */\n     public double getIntercept() {\n-        return getIntercept(getSlope());\n+        return hasIntercept ? getIntercept(getSlope()) : 0.0;\n+    }\n+\n+    /**\n+     * Returns true if a constant has been included false otherwise.\n+     *\n+     * @return true if constant exists, false otherwise\n+     */\n+    public boolean hasIntercept(){\n+        return hasIntercept;\n     }\n \n     /**\n         if (n < 3) {\n             return Double.NaN;\n         }\n-        return getSumSquaredErrors() / (n - 2);\n+        return hasIntercept ? (getSumSquaredErrors() / (n - 2)) : (getSumSquaredErrors() / (n - 1));\n     }\n \n     /**\n      * <p>\n      * If there are fewer that <strong>three</strong> observations in the\n      * model, or if there is no variation in x, this returns\n-     * <code>Double.NaN</code>.</p>\n+     * <code>Double.NaN</code>.</p> Additionally, a <code>Double.NaN</code> is\n+     * returned when the intercept is constrained to be zero\n      *\n      * @return standard error associated with intercept estimate\n      */\n     public double getInterceptStdErr() {\n+        if( !hasIntercept ){\n+            return Double.NaN;\n+        }\n         return FastMath.sqrt(\n             getMeanSquareError() * ((1d / (double) n) + (xbar * xbar) / sumXX));\n     }\n     * @param slope current slope\n     * @return the intercept of the regression line\n     */\n-    private double getIntercept(double slope) {\n+    private double getIntercept(double slope){\n+      if( hasIntercept){\n         return (sumY - slope * sumX) / n;\n+      }\n+      return 0.0;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n             {5, -1 }, {6, 12 }\n     };\n \n+    \n+    /*\n+     * Data from NIST NOINT1 \n+     */\n+    private double[][] noint1 = {\n+        {130.0,60.0},\n+        {131.0,61.0},\n+        {132.0,62.0},\n+        {133.0,63.0},\n+        {134.0,64.0},\n+        {135.0,65.0},\n+        {136.0,66.0},\n+        {137.0,67.0},\n+        {138.0,68.0},\n+        {139.0,69.0},\n+        {140.0,70.0}        \n+    };\n+    \n+    /*\n+     * Data from NIST NOINT2 \n+     * \n+     */\n+    private double[][] noint2 = {\n+        {3.0,4},\n+        {4,5},\n+        {4,6}\n+    };\n+    \n+    @Test\n+    public void testNoInterceot_noint2(){\n+         SimpleRegression regression = new SimpleRegression(false);\n+         regression.addData(noint2[0][1], noint2[0][0]);\n+         regression.addData(noint2[1][1], noint2[1][0]);\n+         regression.addData(noint2[2][1], noint2[2][0]);\n+         Assert.assertEquals(\"slope\", 0.727272727272727, \n+                 regression.getSlope(), 10E-12);\n+         Assert.assertEquals(\"slope std err\", 0.420827318078432E-01,\n+                regression.getSlopeStdErr(),10E-12);\n+        Assert.assertEquals(\"number of observations\", 3, regression.getN());\n+        Assert.assertEquals(\"r-square\", 0.993348115299335,\n+            regression.getRSquare(), 10E-12);\n+        Assert.assertEquals(\"SSR\", 40.7272727272727,\n+            regression.getRegressionSumSquares(), 10E-9);\n+        Assert.assertEquals(\"MSE\", 0.136363636363636,\n+            regression.getMeanSquareError(), 10E-10);\n+        Assert.assertEquals(\"SSE\", 0.272727272727273,\n+            regression.getSumSquaredErrors(),10E-9);\n+    }\n+    \n+    @Test \n+    public void testNoIntercept_noint1(){\n+        SimpleRegression regression = new SimpleRegression(false);\n+        for (int i = 0; i < noint1.length; i++) {\n+            regression.addData(noint1[i][1], noint1[i][0]);\n+        }\n+        Assert.assertEquals(\"slope\", 2.07438016528926, regression.getSlope(), 10E-12);\n+        Assert.assertEquals(\"slope std err\", 0.165289256198347E-01,\n+                regression.getSlopeStdErr(),10E-12);\n+        Assert.assertEquals(\"number of observations\", 11, regression.getN());\n+        Assert.assertEquals(\"r-square\", 0.999365492298663,\n+            regression.getRSquare(), 10E-12);\n+        Assert.assertEquals(\"SSR\", 200457.727272727,\n+            regression.getRegressionSumSquares(), 10E-9);\n+        Assert.assertEquals(\"MSE\", 12.7272727272727,\n+            regression.getMeanSquareError(), 10E-10);\n+        Assert.assertEquals(\"SSE\", 127.272727272727,\n+            regression.getSumSquaredErrors(),10E-9);\n+            \n+    }  \n+    \n     @Test\n     public void testNorris() {\n         SimpleRegression regression = new SimpleRegression();", "timestamp": 1315628311, "metainfo": ""}