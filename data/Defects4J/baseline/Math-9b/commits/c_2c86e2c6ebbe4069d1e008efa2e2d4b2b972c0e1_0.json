{"sha": "2c86e2c6ebbe4069d1e008efa2e2d4b2b972c0e1", "log": "Eliminated extraneous constructor and private field from SimpleRegression.  JIRA: MATH-648.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n     /** Serializable version identifier */\n     private static final long serialVersionUID = -3004689053607543335L;\n \n-    /** the distribution used to compute inference statistics. */\n-    private TDistribution distribution;\n-\n     /** sum of x values */\n     private double sumX = 0d;\n \n      * Create an empty SimpleRegression instance\n      */\n     public SimpleRegression() {\n-        this(1);\n-    }\n-\n-    /**\n-     * Create an empty SimpleRegression using the given distribution object to\n-     * compute inference statistics.\n-     *\n-     * @param degrees Number of degrees of freedom of the distribution used\n-     * to compute inference statistics.\n-     * @since 2.2\n-     */\n-    public SimpleRegression(int degrees) {\n-        distribution = new TDistributionImpl(degrees);\n+        super();\n     }\n \n     /**\n         sumX += x;\n         sumY += y;\n         n++;\n-\n-        if (n > 2) {\n-            distribution = new TDistributionImpl(n - 2);\n-        }\n     }\n \n \n             sumX -= x;\n             sumY -= y;\n             n--;\n-\n-            if (n > 2) {\n-                distribution = new TDistributionImpl(n - 2);\n-            }\n         }\n     }\n \n             throw new OutOfRangeException(LocalizedFormats.SIGNIFICANCE_LEVEL,\n                                           alpha, 0, 1);\n         }\n+        TDistribution distribution = new TDistributionImpl(n - 2);\n         return getSlopeStdErr() *\n             distribution.inverseCumulativeProbability(1d - alpha / 2d);\n     }\n      * @throws MathException if the significance level can not be computed.\n      */\n     public double getSignificance() throws MathException {\n+        TDistribution distribution = new TDistributionImpl(n - 2);\n         return 2d * (1.0 - distribution.cumulativeProbability(\n                     FastMath.abs(getSlope()) / getSlopeStdErr()));\n     }", "timestamp": 1313876753, "metainfo": ""}