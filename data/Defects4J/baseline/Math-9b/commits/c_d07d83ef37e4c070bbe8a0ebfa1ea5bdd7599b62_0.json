{"sha": "d07d83ef37e4c070bbe8a0ebfa1ea5bdd7599b62", "log": "Added ModelSpecificationException and changed UpdatingRegression impls to use it.  JIRA: MATH-607.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     INVALID_ITERATIONS_LIMITS(\"invalid iteration limits: min={0}, max={1}\"),\n     INVALID_MAX_ITERATIONS(\"bad value for maximum iterations number: {0}\"),\n     INVALID_REGRESSION_ARRAY(\"input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}\"),\n+    INVALID_REGRESSION_OBSERVATION(\"length of regressor array = {0} does not match the number of variables = {1} in the model\"),\n     INVALID_ROUNDING_METHOD(\"invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})\"),\n     ITERATOR_EXHAUSTED(\"iterator exhausted\"),\n     LCM_OVERFLOW_32_BITS(\"overflow: lcm({0}, {1}) is 2^31\"),\n     NO_DENSITY_FOR_THIS_DISTRIBUTION(\"This distribution does not have a density function implemented\"),\n     NO_FEASIBLE_SOLUTION(\"no feasible solution\"),\n     NO_OPTIMUM_COMPUTED_YET(\"no optimum computed yet\"), /* keep */\n+    NO_REGRESSORS(\"Regression model must include at least one regressor\"),\n     NO_RESULT_AVAILABLE(\"no result available\"),\n     NO_SUCH_MATRIX_ENTRY(\"no entry at indices ({0}, {1}) in a {2}x{3} matrix\"),\n     NULL_NOT_ALLOWED(\"null is not allowed\"), /* keep */\n     SUBARRAY_ENDS_AFTER_ARRAY_END(\"subarray ends after array end\"),\n     TOO_LARGE_CUTOFF_SINGULAR_VALUE(\"cutoff singular value is {0}, should be at most {1}\"),\n     TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(\"cannot discard {0} elements from a {1} elements array\"),\n+    TOO_MANY_REGRESSORS(\"too many regressors ({0}) specified, only {1} in the model\"),\n     TOO_SMALL_COST_RELATIVE_TOLERANCE(\"cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible\"),\n     TOO_SMALL_INTEGRATION_INTERVAL(\"too small integration interval: length = {0}\"),\n     TOO_SMALL_ORTHOGONALITY_TOLERANCE(\"orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian\"),\n--- a/src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java\n \n import java.util.Arrays;\n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.util.DummyLocalizable;\n import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.util.MathUtils;\n \n     private boolean hasIntercept;\n     /** zero tolerance */\n     private final double epsilon;\n-    /** error message */\n-    private String nvarsMessage = \"Attempting to include more variables in regression than exist in model\";\n-    /** error message */\n-    private String nobsVsNvarsMessage = \"Number of observations not greater than the number of number of variables\";\n-\n     /**\n      *  Set the default constructor to private access\n      *  to prevent inadvertent instantiation\n      */\n     public MillerUpdatingRegression(int numberOfVariables, boolean includeConstant, double errorTolerance) {\n         if (numberOfVariables < 1) {\n-            throw new IllegalArgumentException(\"NumberOfVariables must be greater than or equal to one\");\n+            throw new ModelSpecificationException(LocalizedFormats.NO_REGRESSORS);\n         }\n         if (includeConstant) {\n             this.nvars = numberOfVariables + 1;\n      * Adds an observation to the regression model\n      * @param x the array with regressor values\n      * @param y  the value of dependent variable given these regressors\n+     * @exception ModelSpecificationException if the length of {@code x} does not equal\n+     * the number of independent variables in the model\n      */\n     public void addObservation(final double[] x, final double y) {\n \n         if ((!this.hasIntercept && x.length != nvars) ||\n                (this.hasIntercept && x.length + 1 != nvars)) {\n-            throw new IllegalArgumentException(\"Length of regressor list is less that numberOfVariables\");\n+            throw new ModelSpecificationException(LocalizedFormats.INVALID_REGRESSION_OBSERVATION,\n+                    x.length, nvars);\n         }\n         if (!this.hasIntercept) {\n             include(MathUtils.copyOf(x, x.length), 1.0, y);\n     }\n \n     /**\n-     * Adds multiplier observations to the model\n+     * Adds multiple observations to the model\n      * @param x observations on the regressors\n      * @param y observations on the regressand\n+     * @throws ModelSpecificationException if {@code x} is not rectangular, does not match\n+     * the length of {@code y} or does not contain sufficient data to estimate the model\n      */\n     public void addObservations(double[][] x, double[] y) {\n-        if (x.length != y.length) {\n-            throw new IllegalArgumentException(\"Lengths of x and y matrices must be equal\");\n+        if ((x == null) || (y == null) || (x.length != y.length)) {\n+            throw new ModelSpecificationException(\n+                  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,\n+                  (x == null) ? 0 : x.length,\n+                  (y == null) ? 0 : y.length);\n+        }\n+        if (x.length == 0) {  // Must be no y data either\n+            throw new ModelSpecificationException(\n+                    LocalizedFormats.NO_DATA);\n+        }\n+        if (x[0].length + 1 > x.length) {\n+            throw new ModelSpecificationException(\n+                  LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS,\n+                  x.length, x[0].length);\n         }\n         for (int i = 0; i < x.length; i++) {\n             this.addObservation(x[i], y[i]);\n      */\n     private double[] regcf(int nreq) {\n         int nextr;\n-        if (nreq < 1 || nreq > this.nvars) {\n-            throw new IllegalArgumentException(\"Number of regressors not correct\");\n+        if (nreq < 1) {\n+            throw new ModelSpecificationException(LocalizedFormats.NO_REGRESSORS);\n+        }\n+        if (nreq > this.nvars) {\n+            throw new ModelSpecificationException(\n+                    LocalizedFormats.TOO_MANY_REGRESSORS, nreq, this.nvars);\n         }\n         if (!this.tol_set) {\n             tolset();\n      * Conducts a regression on the data in the model, using all regressors.\n      *\n      * @return RegressionResults the structure holding all regression results\n-     * @exception  MathException - thrown if number of observations is\n+     * @exception  ModelSpecificationException - thrown if number of observations is\n      * less than the number of variables\n      */\n-    public RegressionResults regress() throws MathException {\n+    public RegressionResults regress() throws ModelSpecificationException {\n         return regress(this.nvars);\n     }\n \n      * @param numberOfRegressors many of the regressors to include (either in canonical\n      * order, or in the current reordered state)\n      * @return RegressionResults the structure holding all regression results\n-     * @exception  MathException - thrown if number of observations is\n+     * @exception  ModelSpecificationException - thrown if number of observations is\n      * less than the number of variables or number of regressors requested\n      * is greater than the regressors in the model\n      */\n-    public RegressionResults regress(int numberOfRegressors) throws MathException{\n+    public RegressionResults regress(int numberOfRegressors) throws ModelSpecificationException {\n         if (this.nobs <= numberOfRegressors) {\n-            Localizable outMsg = new DummyLocalizable(nobsVsNvarsMessage);\n-            throw new MathException(outMsg, (Object) null);\n+           throw new ModelSpecificationException(\n+                   LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS,\n+                   this.nobs, numberOfRegressors);\n         }\n         if( numberOfRegressors > this.nvars ){\n-            Localizable outMsg = new DummyLocalizable(nvarsMessage);\n-            throw new MathException(outMsg, (Object) null);\n+            throw new ModelSpecificationException(\n+                    LocalizedFormats.TOO_MANY_REGRESSORS, numberOfRegressors, this.nvars);\n         }\n         this.tolset();\n \n      *\n      * @param  variablesToInclude array of variables to include in regression\n      * @return RegressionResults the structure holding all regression results\n-     * @exception  MathException - thrown if number of observations is\n-     * less than the number of variables or\n-     * number of regressors requested\n-     * is greater than the regressors in the model or\n-     * a regress or index in regressor array does not exist\n-     */\n-    public RegressionResults regress(int[] variablesToInclude) throws MathException {\n+     * @exception  ModelSpecificationException - thrown if number of observations is\n+     * less than the number of variables, the number of regressors requested\n+     * is greater than the regressors in the model or a regressor index in\n+     * regressor array does not exist\n+     */\n+    public RegressionResults regress(int[] variablesToInclude) throws ModelSpecificationException {\n         if (variablesToInclude.length > this.nvars) {\n-            Localizable outMsg = new DummyLocalizable(nvarsMessage);\n-            throw new MathException(outMsg, (Object) null);\n+            throw new ModelSpecificationException(\n+                    LocalizedFormats.TOO_MANY_REGRESSORS, variablesToInclude.length, this.nvars);\n         }\n         if (this.nobs <= this.nvars) {\n-            Localizable outMsg = new DummyLocalizable(nobsVsNvarsMessage);\n-            throw new MathException(outMsg, (Object) null);\n+            throw new ModelSpecificationException(\n+                    LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS,\n+                    this.nobs, this.nvars);\n         }\n         Arrays.sort(variablesToInclude);\n         int iExclude = 0;\n         for (int i = 0; i < variablesToInclude.length; i++) {\n             if (i >= this.nvars) {\n-                Localizable outMsg = new DummyLocalizable(\"Requesting variable for inclusion \" +\n-                        \"which does not exist in data supplied\");\n-                throw new MathException(outMsg, (Object) null);\n+                throw new ModelSpecificationException(\n+                        LocalizedFormats.INDEX_LARGER_THAN_MAX, i, this.nvars);\n             }\n             if (i > 0 && variablesToInclude[i] == variablesToInclude[i - 1]) {\n                 variablesToInclude[i] = -1;\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/stat/regression/ModelSpecificationException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.regression;\n+\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.util.Localizable;\n+\n+/**\n+ * Exception thrown when a regression model is not correctly specified.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class ModelSpecificationException extends MathIllegalArgumentException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = 4206514456095401070L;\n+\n+    /**\n+     * @param pattern message pattern describing the specification error.\n+     * \n+     * @param args arguments.\n+     */\n+    public ModelSpecificationException(Localizable pattern,\n+                                        Object ... args) {\n+        super(pattern, args);\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/stat/regression/UpdatingMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/UpdatingMultipleLinearRegression.java\n      *\n      * @param x the independent variables which form the design matrix\n      * @param y the dependent or response variable\n+     * @throws ModelSpecificationException if the length of {@code x} does not equal\n+     * the number of independent variables in the model\n      */\n-    void addObservation(double[] x, double y);\n+    void addObservation(double[] x, double y) throws ModelSpecificationException;\n \n     /**\n      * Adds a series of observations to the regression model. The lengths of\n      * @param x a series of observations on the independent variables\n      * @param y a series of observations on the dependent variable\n      * The length of x and y must be the same\n+     * @throws ModelSpecificationException if {@code x} is not rectangular, does not match\n+     * the length of {@code y} or does not contain sufficient data to estimate the model\n      */\n     void addObservations(double[][] x, double[] y);\n \n     /**\n      * Performs a regression on data present in buffers and outputs a RegressionResults object\n      * @return RegressionResults acts as a container of regression output\n-     * @throws MathException a wide variety of exception cases are possible, check message\n+     * @throws ModelSpecificationException if the model is not correctly specified\n      */\n-    RegressionResults regress() throws MathException;\n+    RegressionResults regress() throws ModelSpecificationException;\n \n     /**\n      * Performs a regression on data present in buffers including only regressors\n      * indexed in variablesToInclude and outputs a RegressionResults object\n      * @param variablesToInclude an array of indices of regressors to include\n      * @return RegressionResults acts as a container of regression output\n-     * @throws MathException a wide variety of exception cases are possible, check message\n+     * @throws ModelSpecificationException if the model is not correctly specified\n      */\n-    RegressionResults regress(int[] variablesToInclude) throws MathException;\n+    RegressionResults regress(int[] variablesToInclude) throws ModelSpecificationException;\n }", "timestamp": 1311629644, "metainfo": ""}