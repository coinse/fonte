{"sha": "c52275ef9b7dc50d5afda235fc4a835521224c03", "log": "removed evenPermutation and isSingular for consistency with other decomposition solvers  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/LUDecomposition.java\n+++ b/src/java/org/apache/commons/math/linear/LUDecomposition.java\n  * <p>This interface is based on the class with similar name from the now defunct\n  * <a href=\"http://math.nist.gov/javanumerics/jama/\">JAMA</a> library.</p>\n  * <ul>\n- *   <li>a {@link #getSolver() getSolver} method has been added.</li>\n- *   <li>the <code>det</code> method has been renamed as {@link #getDeterminant() getDeterminant}.</li>\n+ *   <li>a {@link #getP() getP} method has been added,</li>\n+ *   <li>the <code>det</code> method has been renamed as {@link #getDeterminant()\n+ *   getDeterminant},</li>\n+ *   <li>the <code>getDoublePivot</code> method has been removed (but the int based\n+ *   {@link #getPivot() getPivot} method has been kept),</li>\n+ *   <li>the <code>solve</code> and <code>isNonSingular</code> methods have been replaced\n+ *   by a {@link #getSolver() getSolver} method and the equivalent methods provided by\n+ *   the returned {@link DecompositionSolver}.</li>\n  * </ul>\n  *   \n  * @see <a href=\"http://mathworld.wolfram.com/LUDecomposition.html\">MathWorld</a>\n     int[] getPivot();\n \n     /**\n-     * Get permutation parity.\n-     * @return true if there was an even number of permutations\n-     */\n-    boolean evenPermutation();\n-\n-    /**\n-     * Get the singularity indicator.\n-     * @return singularity indicator\n-     */\n-    boolean isSingular();\n-\n-    /**\n      * Return the determinant of the matrix\n      * @return determinant of the matrix\n      */\n     double getDeterminant();\n \n     /**\n-     * Get a solver for A &times; X = B.\n+     * Get a solver for finding the A &times; X = B solution in exact linear sense.\n      * @return a solver\n      */\n     DecompositionSolver getSolver();\n--- a/src/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n     }\n \n     /** {@inheritDoc} */\n-    public boolean isSingular() {\n-        return singular;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public boolean evenPermutation() {\n-        return even;\n-    }\n-\n-    /** {@inheritDoc} */\n     public DecompositionSolver getSolver() {\n         return new Solver(lu, pivot, singular);\n     }\n--- a/src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java\n \n         matrix = MatrixUtils.createRealMatrix(singular);\n         lu = new LUDecompositionImpl(matrix);\n-        assertTrue(lu.isSingular());\n+        assertFalse(lu.getSolver().isNonSingular());\n         assertNull(lu.getL());\n         assertNull(lu.getU());\n         assertNull(lu.getP());\n \n         matrix = MatrixUtils.createRealMatrix(bigSingular);\n         lu = new LUDecompositionImpl(matrix);\n-        assertTrue(lu.isSingular());\n+        assertFalse(lu.getSolver().isNonSingular());\n         assertNull(lu.getL());\n         assertNull(lu.getU());\n         assertNull(lu.getP());\n     public void testSingular() {\n         LUDecomposition lu =\n             new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData));\n-        assertFalse(lu.isSingular());\n+        assertTrue(lu.getSolver().isNonSingular());\n         lu = new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular));\n-        assertTrue(lu.isSingular());\n+        assertFalse(lu.getSolver().isNonSingular());\n         lu = new LUDecompositionImpl(MatrixUtils.createRealMatrix(bigSingular));\n-        assertTrue(lu.isSingular());\n+        assertFalse(lu.getSolver().isNonSingular());\n     }\n \n     /** test matrices values */", "timestamp": 1230027431, "metainfo": ""}