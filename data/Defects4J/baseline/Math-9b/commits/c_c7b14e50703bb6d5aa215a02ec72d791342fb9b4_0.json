{"sha": "c7b14e50703bb6d5aa215a02ec72d791342fb9b4", "log": "MATH-738: in class o.a.c.m3.special.Gamma, implemented function logGammaMinusLogGammaSum(double, double), which computes accurately log(Gamma(b)) - log(Gamma(a + b)) for a >= 0 and b >= 8. Based on the NSWC library.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/special/Gamma.java\n+++ b/src/main/java/org/apache/commons/math3/special/Gamma.java\n \n     /** The constant {@code C13} defined in {@code DGAM1}. */\n     private static final double INV_GAMMA1P_M1_C13 = -.205633841697760710345015413002057E-06;\n+\n+    /**\n+     * <p>\n+     * The d<sub>0</sub> coefficient of the minimax approximation of the \u0394\n+     * function. This function is defined as follows\n+     * </p>\n+     * <center>\u0394(x) = log \u0393(x) - (x - 0.5) log a + a - 0.5 log 2\u03c0,</center>\n+     * <p>\n+     * The minimax approximation is defined by the following sum\n+     * </p>\n+     * <pre>\n+     *             5\n+     *            ====\n+     *            \\         - 2 n - 1\n+     *     \u0394(x) =  >    d  x\n+     *            /      n\n+     *            ====\n+     *            n = 0\n+     * <pre>\n+     * <p>\n+     * see equationS (23) and (25) in Didonato and Morris (1992).\n+     * </p>\n+     */\n+    private static final double D0 = .833333333333333E-01;\n+\n+    /**\n+     * The d<sub>1</sub> coefficent of the minimax approximation of the \u0394\n+     * function (see {@link #D0}).\n+     */\n+    private static final double D1 = -.277777777760991E-02;\n+\n+    /**\n+     * The d<sub>2</sub> coefficent of the minimax approximation of the \u0394\n+     * function (see {@link #D0}).\n+     */\n+    private static final double D2 = .793650666825390E-03;\n+\n+    /**\n+     * The d<sub>3</sub> coefficent of the minimax approximation of the \u0394\n+     * function (see {@link #D0}).\n+     */\n+    private static final double D3 = -.595202931351870E-03;\n+\n+    /**\n+     * The d<sub>4</sub> coefficent of the minimax approximation of the \u0394\n+     * function (see {@link #D0}).\n+     */\n+    private static final double D4 = .837308034031215E-03;\n+\n+    /**\n+     * The d<sub>5</sub> coefficent of the minimax approximation of the \u0394\n+     * function (see {@link #D0}).\n+     */\n+    private static final double D5 = -.165322962780713E-02;\n+    /*\n+     * NOTA: the value of d0 published in Didonato and Morris (1992), eq. (25)\n+     * and the value implemented in the NSWC library are NOT EQUAL\n+     *   - in Didonato and Morris (1992) D5 = -.125322962780713E-02,\n+     *   - while in the NSWC library     D5 = -.165322962780713E-02.\n+     * Checking the value of algdiv(1.0, 8.0)}, it seems that the second value\n+     * leads to the smallest error. This is the one which is implemented here.\n+     */\n \n     /**\n      * Default constructor.  Prohibit instantiation.\n             return Gamma.logGamma1p(x - 1.0) + FastMath.log(x * (1.0 + x));\n         }\n     }\n+\n+    /**\n+     * Returns the value of log[\u0393(b) / \u0393(a + b)] for a \u2265 0 and b \u2265 8. The\n+     * present implementation is based on the double precision implementation in\n+     * the <em>NSWC Library of Mathematics Subroutines</em>, {@code ALGDIV}.\n+     *\n+     * @param a First argument.\n+     * @param b Second argument.\n+     * @return the value of {@code log(Gamma(b) / Gamma(a + b))}.\n+     * @throws NumberIsTooSmallException if {@code a < 0.0} or {@code b < 8.0}.\n+     */\n+    public static final double logGammaMinusLogGammaSum(final double a,\n+                                                        final double b)\n+        throws NumberIsTooSmallException {\n+\n+        if (a < 0.0) {\n+            throw new NumberIsTooSmallException(a, 0.0, true);\n+        }\n+        if (b < 8.0) {\n+            throw new NumberIsTooSmallException(b, 8.0, true);\n+        }\n+\n+        /*\n+         * p = a / (a + b), q = b / (a + b), d = a + b - 0.5\n+         */\n+        final double p;\n+        final double q;\n+        final double d;\n+        if (a <= b) {\n+            final double h = a / b;\n+            p = h / (1.0 + h);\n+            q = 1.0 / (1.0 + h);\n+            d = b + (a - 0.5);\n+        } else {\n+            final double h = b / a;\n+            p = 1.0 / (1.0 + h);\n+            q = h / (1.0 + h);\n+            d = a + (b - 0.5);\n+        }\n+        /*\n+         * s_n = 1 + q + ... + q^(n - 1)\n+         */\n+        final double q2 = q * q;\n+        final double s3 = 1.0 + (q + q2);\n+        final double s5 = 1.0 + (q + q2 * s3);\n+        final double s7 = 1.0 + (q + q2 * s5);\n+        final double s9 = 1.0 + (q + q2 * s7);\n+        final double s11 = 1.0 + (q + q2 * s9);\n+        /*\n+         * w = \u0394(b) - \u0394(a + b)\n+         */\n+        final double tmp = 1.0 / b;\n+        final double t = tmp * tmp;\n+        double w = D5 * s11;\n+        w = D4 * s9 + t * w;\n+        w = D3 * s7 + t * w;\n+        w = D2 * s5 + t * w;\n+        w = D1 * s3 + t * w;\n+        w = D0 + t * w;\n+        w *= p / b;\n+\n+        final double u = d * FastMath.log1p(a / b);\n+        final double v = a * (FastMath.log(b) - 1.0);\n+\n+        return u <= v ? (w - u) - v : (w - v) - u;\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/special/GammaTest.java\n+++ b/src/test/java/org/apache/commons/math3/special/GammaTest.java\n         }\n     }\n \n+    private static final double[][] LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF = {\n+        { 0.0 , 8.0 , 0.0 },\n+        { 0.0 , 9.0 , 0.0 },\n+        { 0.0 , 10.0 , 0.0 },\n+        { 0.0 , 11.0 , 0.0 },\n+        { 0.0 , 12.0 , 0.0 },\n+        { 0.0 , 13.0 , 0.0 },\n+        { 0.0 , 14.0 , 0.0 },\n+        { 0.0 , 15.0 , 0.0 },\n+        { 0.0 , 16.0 , 0.0 },\n+        { 0.0 , 17.0 , 0.0 },\n+        { 0.0 , 18.0 , 0.0 },\n+        { 1.0 , 8.0 , - 2.079441541679836 },\n+        { 1.0 , 9.0 , - 2.19722457733622 },\n+        { 1.0 , 10.0 , - 2.302585092994046 },\n+        { 1.0 , 11.0 , - 2.397895272798371 },\n+        { 1.0 , 12.0 , - 2.484906649788 },\n+        { 1.0 , 13.0 , - 2.564949357461537 },\n+        { 1.0 , 14.0 , - 2.639057329615258 },\n+        { 1.0 , 15.0 , - 2.70805020110221 },\n+        { 1.0 , 16.0 , - 2.772588722239781 },\n+        { 1.0 , 17.0 , - 2.833213344056216 },\n+        { 1.0 , 18.0 , - 2.890371757896165 },\n+        { 2.0 , 8.0 , - 4.276666119016055 },\n+        { 2.0 , 9.0 , - 4.499809670330265 },\n+        { 2.0 , 10.0 , - 4.700480365792417 },\n+        { 2.0 , 11.0 , - 4.882801922586371 },\n+        { 2.0 , 12.0 , - 5.049856007249537 },\n+        { 2.0 , 13.0 , - 5.204006687076795 },\n+        { 2.0 , 14.0 , - 5.347107530717468 },\n+        { 2.0 , 15.0 , - 5.480638923341991 },\n+        { 2.0 , 16.0 , - 5.605802066295998 },\n+        { 2.0 , 17.0 , - 5.723585101952381 },\n+        { 2.0 , 18.0 , - 5.834810737062605 },\n+        { 3.0 , 8.0 , - 6.579251212010101 },\n+        { 3.0 , 9.0 , - 6.897704943128636 },\n+        { 3.0 , 10.0 , - 7.185387015580416 },\n+        { 3.0 , 11.0 , - 7.447751280047908 },\n+        { 3.0 , 12.0 , - 7.688913336864796 },\n+        { 3.0 , 13.0 , - 7.912056888179006 },\n+        { 3.0 , 14.0 , - 8.11969625295725 },\n+        { 3.0 , 15.0 , - 8.313852267398207 },\n+        { 3.0 , 16.0 , - 8.496173824192162 },\n+        { 3.0 , 17.0 , - 8.668024081118821 },\n+        { 3.0 , 18.0 , - 8.830543010616596 },\n+        { 4.0 , 8.0 , - 8.977146484808472 },\n+        { 4.0 , 9.0 , - 9.382611592916636 },\n+        { 4.0 , 10.0 , - 9.750336373041954 },\n+        { 4.0 , 11.0 , - 10.08680860966317 },\n+        { 4.0 , 12.0 , - 10.39696353796701 },\n+        { 4.0 , 13.0 , - 10.68464561041879 },\n+        { 4.0 , 14.0 , - 10.95290959701347 },\n+        { 4.0 , 15.0 , - 11.20422402529437 },\n+        { 4.0 , 16.0 , - 11.4406128033586 },\n+        { 4.0 , 17.0 , - 11.66375635467281 },\n+        { 4.0 , 18.0 , - 11.87506544834002 },\n+        { 5.0 , 8.0 , - 11.46205313459647 },\n+        { 5.0 , 9.0 , - 11.94756095037817 },\n+        { 5.0 , 10.0 , - 12.38939370265721 },\n+        { 5.0 , 11.0 , - 12.79485881076538 },\n+        { 5.0 , 12.0 , - 13.16955226020679 },\n+        { 5.0 , 13.0 , - 13.517858954475 },\n+        { 5.0 , 14.0 , - 13.84328135490963 },\n+        { 5.0 , 15.0 , - 14.14866300446081 },\n+        { 5.0 , 16.0 , - 14.43634507691259 },\n+        { 5.0 , 17.0 , - 14.70827879239624 },\n+        { 5.0 , 18.0 , - 14.96610790169833 },\n+        { 6.0 , 8.0 , - 14.02700249205801 },\n+        { 6.0 , 9.0 , - 14.58661827999343 },\n+        { 6.0 , 10.0 , - 15.09744390375942 },\n+        { 6.0 , 11.0 , - 15.56744753300516 },\n+        { 6.0 , 12.0 , - 16.002765604263 },\n+        { 6.0 , 13.0 , - 16.40823071237117 },\n+        { 6.0 , 14.0 , - 16.78772033407607 },\n+        { 6.0 , 15.0 , - 17.14439527801481 },\n+        { 6.0 , 16.0 , - 17.48086751463602 },\n+        { 6.0 , 17.0 , - 17.79932124575455 },\n+        { 6.0 , 18.0 , - 18.10160211762749 },\n+        { 7.0 , 8.0 , - 16.66605982167327 },\n+        { 7.0 , 9.0 , - 17.29466848109564 },\n+        { 7.0 , 10.0 , - 17.8700326259992 },\n+        { 7.0 , 11.0 , - 18.40066087706137 },\n+        { 7.0 , 12.0 , - 18.89313736215917 },\n+        { 7.0 , 13.0 , - 19.35266969153761 },\n+        { 7.0 , 14.0 , - 19.78345260763006 },\n+        { 7.0 , 15.0 , - 20.18891771573823 },\n+        { 7.0 , 16.0 , - 20.57190996799433 },\n+        { 7.0 , 17.0 , - 20.9348154616837 },\n+        { 7.0 , 18.0 , - 21.27965594797543 },\n+        { 8.0 , 8.0 , - 19.37411002277548 },\n+        { 8.0 , 9.0 , - 20.06725720333542 },\n+        { 8.0 , 10.0 , - 20.70324597005542 },\n+        { 8.0 , 11.0 , - 21.29103263495754 },\n+        { 8.0 , 12.0 , - 21.83757634132561 },\n+        { 8.0 , 13.0 , - 22.3484019650916 },\n+        { 8.0 , 14.0 , - 22.82797504535349 },\n+        { 8.0 , 15.0 , - 23.27996016909654 },\n+        { 8.0 , 16.0 , - 23.70740418392348 },\n+        { 8.0 , 17.0 , - 24.11286929203165 },\n+        { 8.0 , 18.0 , - 24.49853177284363 },\n+        { 9.0 , 8.0 , - 22.14669874501526 },\n+        { 9.0 , 9.0 , - 22.90047054739164 },\n+        { 9.0 , 10.0 , - 23.59361772795159 },\n+        { 9.0 , 11.0 , - 24.23547161412398 },\n+        { 9.0 , 12.0 , - 24.8333086148796 },\n+        { 9.0 , 13.0 , - 25.39292440281502 },\n+        { 9.0 , 14.0 , - 25.9190174987118 },\n+        { 9.0 , 15.0 , - 26.41545438502569 },\n+        { 9.0 , 16.0 , - 26.88545801427143 },\n+        { 9.0 , 17.0 , - 27.33174511689985 },\n+        { 9.0 , 18.0 , - 27.75662831086511 },\n+        { 10.0 , 8.0 , - 24.97991208907148 },\n+        { 10.0 , 9.0 , - 25.7908423052878 },\n+        { 10.0 , 10.0 , - 26.53805670711802 },\n+        { 10.0 , 11.0 , - 27.23120388767797 },\n+        { 10.0 , 12.0 , - 27.87783105260302 },\n+        { 10.0 , 13.0 , - 28.48396685617334 },\n+        { 10.0 , 14.0 , - 29.05451171464095 },\n+        { 10.0 , 15.0 , - 29.59350821537364 },\n+        { 10.0 , 16.0 , - 30.10433383913963 },\n+        { 10.0 , 17.0 , - 30.58984165492133 },\n+        { 10.0 , 18.0 , - 31.05246517686944 },\n+    };\n+\n+    @Test\n+    public void testLogGammaMinusLogGammaSum() {\n+        final int ulps = 4;\n+        for (int i = 0; i < LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF.length; i++) {\n+            final double[] ref = LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF[i];\n+            final double a = ref[0];\n+            final double b = ref[1];\n+            final double expected = ref[2];\n+            final double actual = Gamma.logGammaMinusLogGammaSum(a, b);\n+            final double tol = ulps * FastMath.ulp(expected);\n+            final StringBuilder builder = new StringBuilder();\n+            builder.append(a).append(\", \").append(b);\n+            Assert.assertEquals(builder.toString(), expected, actual, tol);\n+        }\n+    }\n+\n+    @Test(expected = NumberIsTooSmallException.class)\n+    public void testLogGammaMinusLogGammaSumPrecondition1() {\n+        Gamma.logGammaMinusLogGammaSum(-1.0, 8.0);\n+    }\n+\n+    @Test(expected = NumberIsTooSmallException.class)\n+    public void testLogGammaMinusLogGammaSumPrecondition2() {\n+        Gamma.logGammaMinusLogGammaSum(1.0, 7.0);\n+    }\n+\n     private void checkRelativeError(String msg, double expected, double actual, double tolerance) {\n         Assert.assertEquals(msg, expected, actual, FastMath.abs(tolerance * actual));\n     }", "timestamp": 1353859243, "metainfo": ""}