{"sha": "c2da421878f5df7c60305f07c874652107b47ec3", "log": "Updates to FastFourierTransformer, following changes to RootsOfUnity in r1238179. See MATH-677.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n      * not a power of two\n      */\n     public Complex[] transform(Complex[] f) {\n-        // TODO Is this necessary?\n-        roots.computeOmega(f.length);\n+        roots.computeOmega(-f.length);\n         if (unitary) {\n             final double s = 1.0 / FastMath.sqrt(f.length);\n             return TransformUtils.scaleArray(fft(f), s);\n      * not a power of two\n      */\n     public Complex[] inverseTransform(Complex[] f) {\n-        roots.computeOmega(-f.length);    // pass negative argument\n+        roots.computeOmega(f.length);\n         final double s = 1.0 / (unitary ? FastMath.sqrt(f.length) : f.length);\n         return TransformUtils.scaleArray(fft(f), s);\n     }\n         for (int i = 0; i < n; i++) {\n             repacked[i] = new Complex(f[2 * i], f[2 * i + 1]);\n         }\n-        roots.computeOmega(isInverse ? -n : n);\n+        roots.computeOmega(isInverse ? n : -n);\n         Complex[] z = fft(repacked);\n \n         // reconstruct the FFT result for the original array\n-        roots.computeOmega(isInverse ? -2 * n : 2 * n);\n+        roots.computeOmega(isInverse ? 2 * n : -2 * n);\n         transformed[0] = new Complex(2 * (z[0].getReal() + z[0].getImaginary()), 0.0);\n         transformed[n] = new Complex(2 * (z[0].getReal() - z[0].getImaginary()), 0.0);\n         for (int i = 1; i < n; i++) {\n             f[i] = a.add(b);\n             f[i + 2] = a.subtract(b);\n             // omegaCount indicates forward or inverse transform\n-            f[i + 1] = roots.isForward() ? e2 : e1;\n-            f[i + 3] = roots.isForward() ? e1 : e2;\n+            f[i + 1] = roots.isCounterClockWise() ? e1 : e2;\n+            f[i + 3] = roots.isCounterClockWise() ? e2 : e1;\n         }\n \n         // iterations from bottom to top take O(N*logN) time", "timestamp": 1327993378, "metainfo": ""}