{"sha": "ed2d9a65f1b2ff54957fbc2035f7ffd2c5f7a7b8", "log": "Eliminated the \"mutation requirement\" in nextGeneration method. Added algorithm description in javadoc. JIRA: MATH-207 Reported and patched by David Stefka     ", "commit": "\n--- a/src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java\n+++ b/src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java\n /**\n  * Implementation of a genetic algorithm. All factors that govern the operation\n  * of the algorithm can be configured for a specific problem.\n+ * \n  * @version $Revision$ $Date$\n  */\n public class GeneticAlgorithm {\n     }\n \n     /**\n-     * Evolve the given population into the next generation.\n+     * <p>Evolve the given population into the next generation.</p>\n+     * <p><ol>\n+     *    <li>Get nextGeneration polulation to fill from <code>current</code>\n+     *        generation, using its nextGeneration method</li>\n+     *    <li>Loop until new generation is filled:</li>\n+     *    <ul><li>Apply configured SelectionPolicy to select a pair of parents\n+     *            from <code>current</code></li>\n+     *        <li>With probability = {@link #getCrossoverRate()}, apply\n+     *            configured {@link CrossoverPolicy} to parents</li>\n+     *        <li>With probability = {@link #getMutationRate()}, apply\n+     *            configured {@link MutationPolicy} to each parent</li>\n+     *        <li>Add resulting chromosomes individually to nextGeneration,\n+     *            space permitting</li>\n+     *    </ul>\n+     *    <li>Return nextGeneration</li>\n+     *    </ol>\n+     * </p>\n+     * \n      * \n      * @param current the current population.\n      * @return the population for the next generation.\n             // select parent chromosomes\n             ChromosomePair pair = getSelectionPolicy().select(current);\n \n-            // apply crossover policy to create two offspring\n+            // crossover?\n             if (Math.random() < getCrossoverRate()) {\n+                // apply crossover policy to create two offspring\n                 pair = getCrossoverPolicy().crossover(pair.getFirst(),\n                         pair.getSecond());\n             }\n \n-            // apply mutation policy to first offspring\n+            // mutation?\n             if (Math.random() < getMutationRate()) {\n-                nextGeneration.addChromosome(getMutationPolicy().mutate(\n-                        pair.getFirst()));\n-\n-                if (nextGeneration.getPopulationSize() < nextGeneration\n-                        .getPopulationLimit()) {\n-                    // apply mutation policy to second offspring\n-                    nextGeneration.addChromosome(getMutationPolicy().mutate(\n-                            pair.getSecond()));\n-                }\n+                // apply mutation policy to the chromosomes\n+                pair = new ChromosomePair(\n+                              getMutationPolicy().mutate(pair.getFirst()),\n+                              getMutationPolicy().mutate(pair.getSecond())\n+                           );\n+            }\n+\n+            // add the first chromosome to the population\n+            nextGeneration.addChromosome(pair.getFirst());\n+            // is there still a place for the second chromosome?\n+            if (nextGeneration.getPopulationSize() < nextGeneration\n+                    .getPopulationLimit()) {\n+                // add the second chromosome to the population\n+                nextGeneration.addChromosome(pair.getSecond());\n             }\n         }\n ", "timestamp": 1222538719, "metainfo": ""}