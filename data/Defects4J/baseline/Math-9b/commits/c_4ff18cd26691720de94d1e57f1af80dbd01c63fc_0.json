{"sha": "4ff18cd26691720de94d1e57f1af80dbd01c63fc", "log": "fixed an index error in dy/dy0 computation  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java\n+++ b/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java\n                     final double[] dFdYi = dFdY[i];\n                     for (int j = 0; j < n; ++j) {\n                         double s = 0;\n-                        int zIndex = n + j;\n+                        final int startIndex = n + j;\n+                        int zIndex = startIndex;\n                         for (int l = 0; l < n; ++l) {\n                             s += dFdYi[l] * z[zIndex];\n-                            zIndex += l;\n+                            zIndex += n;\n                         }\n-                        zDot[n + i * n + j] = s;\n+                        zDot[startIndex + i * n] = s;\n                     }\n                 }\n \n-                // variational equations: d[dy/dt]/dy0 and d[dy/dt]/dp to d[dy/dp]/dt\n+                // variational equations: from d[dy/dt]/dy0 and d[dy/dt]/dp to d[dy/dp]/dt\n                 for (int i = 0; i < n; ++i) {\n                     final double[] dFdYi = dFdY[i];\n                     final double[] dFdPi = dFdP[i];\n                     for (int j = 0; j < k; ++j) {\n                         double s = dFdPi[j];\n-                        int zIndex = n * (n + 1)+ j;\n+                        final int startIndex = n * (n + 1) + j;\n+                        int zIndex = startIndex;\n                         for (int l = 0; l < n; ++l) {\n                             s += dFdYi[l] * z[zIndex];\n                             zIndex += k;\n                         }\n-                        zDot[n * (n + 1) + i * k + j] = s;\n+                        zDot[startIndex + i * k] = s;\n                     }\n                 }\n \n \n         /** {@inheritDoc} */\n         public StepInterpolatorWithJacobians copy() throws DerivativeException {\n-            return new StepInterpolatorWrapper(interpolator.copy(),\n-                                               y.length, dydy0[0].length);\n+            final int n = y.length;\n+            final int k = dydp[0].length;\n+            StepInterpolatorWrapper copied =\n+                new StepInterpolatorWrapper(interpolator.copy(), n, k);\n+            System.arraycopy(y,    0, copied.y,    0, n);\n+            System.arraycopy(yDot, 0, copied.yDot, 0, n);\n+            for (int i = 0; i < n; ++i) {\n+                System.arraycopy(dydy0[i], 0, copied.dydy0[i], 0, n);\n+            }\n+            for (int i = 0; i < n; ++i) {\n+                System.arraycopy(dydp[i], 0, copied.dydp[i], 0, k);\n+            }\n+            return copied;\n         }\n \n         /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n-import org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;\n-import org.apache.commons.math.ode.jacobians.ParameterizedODEWithJacobians;\n import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;\n+import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n import org.junit.Assert;\n import org.junit.Test;\n         FirstOrderIntegrator integ =\n             new DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-4, 1.0e-4);\n         double hP = 1.0e-12;\n-        SummaryStatistics residuals0 = new SummaryStatistics();\n-        SummaryStatistics residuals1 = new SummaryStatistics();\n+        SummaryStatistics residualsP0 = new SummaryStatistics();\n+        SummaryStatistics residualsP1 = new SummaryStatistics();\n         for (double b = 2.88; b < 3.08; b += 0.001) {\n             Brusselator brusselator = new Brusselator(b);\n             double[] y = { 1.3, b };\n             double[] yP = { 1.3, b + hP };\n             brusselator.setParameter(0, b + hP);\n             integ.integrate(brusselator, 0, yP, 20.0, yP);\n-            residuals0.addValue((yP[0] - y[0]) / hP - brusselator.dYdP0());\n-            residuals1.addValue((yP[1] - y[1]) / hP - brusselator.dYdP1());\n+            residualsP0.addValue((yP[0] - y[0]) / hP - brusselator.dYdP0());\n+            residualsP1.addValue((yP[1] - y[1]) / hP - brusselator.dYdP1());\n         }\n-        Assert.assertTrue((residuals0.getMax() - residuals0.getMin()) > 600);\n-        Assert.assertTrue(residuals0.getStandardDeviation() > 30);\n-        Assert.assertTrue((residuals1.getMax() - residuals1.getMin()) > 800);\n-        Assert.assertTrue(residuals1.getStandardDeviation() > 50);\n+        Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) > 600);\n+        Assert.assertTrue(residualsP0.getStandardDeviation() > 30);\n+        Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) > 800);\n+        Assert.assertTrue(residualsP1.getStandardDeviation() > 50);\n     }\n \n     @Test\n         FirstOrderIntegrator integ =\n             new DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-10, 1.0e-10);\n         double hP = 1.0e-12;\n-        SummaryStatistics residuals0 = new SummaryStatistics();\n-        SummaryStatistics residuals1 = new SummaryStatistics();\n+        SummaryStatistics residualsP0 = new SummaryStatistics();\n+        SummaryStatistics residualsP1 = new SummaryStatistics();\n         for (double b = 2.88; b < 3.08; b += 0.001) {\n             Brusselator brusselator = new Brusselator(b);\n             double[] y = { 1.3, b };\n             double[] yP = { 1.3, b + hP };\n             brusselator.setParameter(0, b + hP);\n             integ.integrate(brusselator, 0, yP, 20.0, yP);\n-            residuals0.addValue((yP[0] - y[0]) / hP - brusselator.dYdP0());\n-            residuals1.addValue((yP[1] - y[1]) / hP - brusselator.dYdP1());\n+            residualsP0.addValue((yP[0] - y[0]) / hP - brusselator.dYdP0());\n+            residualsP1.addValue((yP[1] - y[1]) / hP - brusselator.dYdP1());\n         }\n-        Assert.assertTrue((residuals0.getMax() - residuals0.getMin()) > 0.02);\n-        Assert.assertTrue((residuals0.getMax() - residuals0.getMin()) < 0.03);\n-        Assert.assertTrue(residuals0.getStandardDeviation() > 0.003);\n-        Assert.assertTrue(residuals0.getStandardDeviation() < 0.004);\n-        Assert.assertTrue((residuals1.getMax() - residuals1.getMin()) > 0.04);\n-        Assert.assertTrue((residuals1.getMax() - residuals1.getMin()) < 0.05);\n-        Assert.assertTrue(residuals1.getStandardDeviation() > 0.006);\n-        Assert.assertTrue(residuals1.getStandardDeviation() < 0.007);\n+        Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) > 0.02);\n+        Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.03);\n+        Assert.assertTrue(residualsP0.getStandardDeviation() > 0.003);\n+        Assert.assertTrue(residualsP0.getStandardDeviation() < 0.004);\n+        Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) > 0.04);\n+        Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.05);\n+        Assert.assertTrue(residualsP1.getStandardDeviation() > 0.006);\n+        Assert.assertTrue(residualsP1.getStandardDeviation() < 0.007);\n     }\n \n     @Test\n         FirstOrderIntegrator integ =\n             new DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-4, 1.0e-4);\n         double hP = 1.0e-12;\n-        SummaryStatistics residuals0 = new SummaryStatistics();\n-        SummaryStatistics residuals1 = new SummaryStatistics();\n+        SummaryStatistics residualsP0 = new SummaryStatistics();\n+        SummaryStatistics residualsP1 = new SummaryStatistics();\n         for (double b = 2.88; b < 3.08; b += 0.001) {\n             Brusselator brusselator = new Brusselator(b);\n             brusselator.setParameter(0, b);\n                 new FirstOrderIntegratorWithJacobians(integ, brusselator, new double[] { b },\n                                                  new double[] { hY, hY }, new double[] { hP });\n             extInt.integrate(0, z, new double[][] { { 0.0 }, { 1.0 } }, 20.0, z, dZdZ0, dZdP);\n-            residuals0.addValue(dZdP[0][0] - brusselator.dYdP0());\n-            residuals1.addValue(dZdP[1][0] - brusselator.dYdP1());\n+            residualsP0.addValue(dZdP[0][0] - brusselator.dYdP0());\n+            residualsP1.addValue(dZdP[1][0] - brusselator.dYdP1());\n         }\n-        Assert.assertTrue((residuals0.getMax() - residuals0.getMin()) < 0.006);\n-        Assert.assertTrue(residuals0.getStandardDeviation() < 0.0009);\n-        Assert.assertTrue((residuals1.getMax() - residuals1.getMin()) < 0.006);\n-        Assert.assertTrue(residuals1.getStandardDeviation() < 0.0012);\n+        Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.006);\n+        Assert.assertTrue(residualsP0.getStandardDeviation() < 0.0009);\n+        Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.009);\n+        Assert.assertTrue(residualsP1.getStandardDeviation() < 0.0014);\n     }\n \n     @Test\n     public void testAnalyticalDifferentiation()\n-        throws IntegratorException, DerivativeException {\n+        throws IntegratorException, DerivativeException, OptimizationException {\n         FirstOrderIntegrator integ =\n-            new DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-4, 1.0e-4);\n-        SummaryStatistics residuals0 = new SummaryStatistics();\n-        SummaryStatistics residuals1 = new SummaryStatistics();\n+            new DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-10, 1.0e-10);\n+        SummaryStatistics residualsP0 = new SummaryStatistics();\n+        SummaryStatistics residualsP1 = new SummaryStatistics();\n         for (double b = 2.88; b < 3.08; b += 0.001) {\n             Brusselator brusselator = new Brusselator(b);\n             brusselator.setParameter(0, b);\n             FirstOrderIntegratorWithJacobians extInt =\n                 new FirstOrderIntegratorWithJacobians(integ, brusselator);\n             extInt.integrate(0, z, new double[][] { { 0.0 }, { 1.0 } }, 20.0, z, dZdZ0, dZdP);\n-            residuals0.addValue(dZdP[0][0] - brusselator.dYdP0());\n-            residuals1.addValue(dZdP[1][0] - brusselator.dYdP1());\n-       }\n-        Assert.assertTrue((residuals0.getMax() - residuals0.getMin()) < 0.004);\n-        Assert.assertTrue(residuals0.getStandardDeviation() < 0.001);\n-        Assert.assertTrue((residuals1.getMax() - residuals1.getMin()) < 0.005);\n-        Assert.assertTrue(residuals1.getStandardDeviation() < 0.001);\n+            residualsP0.addValue(dZdP[0][0] - brusselator.dYdP0());\n+            residualsP1.addValue(dZdP[1][0] - brusselator.dYdP1());\n+        }\n+        Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.004);\n+        Assert.assertTrue(residualsP0.getStandardDeviation() < 0.0008);\n+        Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.005);\n+        Assert.assertTrue(residualsP1.getStandardDeviation() < 0.0010);\n     }\n \n     private static class Brusselator implements ParameterizedODEWithJacobians {\n         }\n \n         public double dYdP0() {\n-            return -1087.8787631970476 + (1050.4387741821572 + (-338.90621620263096 + 36.51793006801084 * b) * b) * b;\n+            return -1088.232716447743 + (1050.775747149553 + (-339.012934631828 + 36.52917025056327 * b) * b) * b;\n         }\n \n         public double dYdP1() {\n-            return 1499.0904666097015 + (-1434.9574631810726 + (459.71079478756945 - 49.29949940968588 * b) * b) * b;\n+            return 1502.824469929139 + (-1438.6974831849952 + (460.959476642384 - 49.43847385647082 * b) * b) * b;\n         }\n \n     };", "timestamp": 1267735249, "metainfo": ""}