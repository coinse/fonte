{"sha": "8581b76a7e3481095bd967873127920272d72eaf", "log": "Use the refactored exceptions framework for ODE.  The IntegratorException and EvenException classes have been removed. The uses of the checked ConvergenceException have been replaced by the unchecked one from the exception package. Sanity checks now use the nes DimensionMismatchException. Step size underflows now trigger NumberIsTooSmallException.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     MAX_COUNT_EXCEEDED(\"maximal count ({0}) exceeded\"), /* keep */\n     MAX_EVALUATIONS_EXCEEDED(\"maximal number of evaluations ({0}) exceeded\"),\n     MAX_ITERATIONS_EXCEEDED(\"maximal number of iterations ({0}) exceeded\"),\n-    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(\"minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}\"),\n+    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(\"minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}\"),\n     MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(\"Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae\"),\n     NAN_ELEMENT_AT_INDEX(\"element {0} is NaN\"),\n     NAN_VALUE_CONVERSION(\"cannot convert NaN value\"),\n--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n import java.util.SortedSet;\n import java.util.TreeSet;\n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MaxEvaluationsExceededException;\n import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;\n import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n-import org.apache.commons.math.ode.events.EventException;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.events.EventState;\n import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n      * @param yDot placeholder array where to put the time derivative of the state vector\n      * @param tEnd final integration time\n      * @return time at end of step\n-     * @exception IntegratorException if the value of one event state cannot be evaluated\n+     * @exception MathIllegalStateException if the value of one event state cannot be evaluated\n      * @since 2.2\n      */\n     protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                 final double[] y, final double[] yDot, final double tEnd)\n-        throws IntegratorException {\n-\n-        try {\n+        throws MathIllegalStateException {\n+\n             double previousT = interpolator.getGlobalPreviousTime();\n             final double currentT = interpolator.getGlobalCurrentTime();\n             resetOccurred = false;\n             }\n \n             return currentT;\n-        } catch (EventException se) {\n-            final Throwable cause = se.getCause();\n-            if ((cause != null) && (cause instanceof MathUserException)) {\n-                throw (MathUserException) cause;\n-            }\n-            throw new IntegratorException(se);\n-        } catch (ConvergenceException ce) {\n-            throw new IntegratorException(ce);\n-        }\n \n     }\n \n      * @param y0 state vector at t0\n      * @param t target time for the integration\n      * @param y placeholder where to put the state vector\n-     * @exception IntegratorException if some inconsistency is detected\n+     * @exception DimensionMismatchException if some inconsistency is detected\n+     * @exception NumberIsTooSmallException if integration span is too small\n      */\n     protected void sanityChecks(final FirstOrderDifferentialEquations ode,\n                                 final double t0, final double[] y0,\n                                 final double t, final double[] y)\n-        throws IntegratorException {\n+        throws DimensionMismatchException, NumberIsTooSmallException {\n \n         if (ode.getDimension() != y0.length) {\n-            throw new IntegratorException(\n-                    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, ode.getDimension(), y0.length);\n+            throw new DimensionMismatchException(ode.getDimension(), y0.length);\n         }\n \n         if (ode.getDimension() != y.length) {\n-            throw new IntegratorException(\n-                    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, ode.getDimension(), y.length);\n+            throw new DimensionMismatchException(ode.getDimension(), y.length);\n         }\n \n         if (FastMath.abs(t - t0) <= 1.0e-12 * FastMath.max(FastMath.abs(t0), FastMath.abs(t))) {\n-            throw new IntegratorException(\n-                    LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL,\n-                    FastMath.abs(t - t0));\n+            throw new NumberIsTooSmallException(LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL,\n+                                                FastMath.abs(t - t0),\n+                                                1.0e-12 * FastMath.max(FastMath.abs(t0), FastMath.abs(t)),\n+                                                false);\n         }\n \n     }\n--- a/src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n \n package org.apache.commons.math.ode;\n \n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n \n /** This interface represents a first order integrator for\n  * differential equations.\n    * @return stop time, will be the same as target time if integration reached its\n    * target, but may be different if some {@link\n    * org.apache.commons.math.ode.events.EventHandler} stops it at some point.\n-   * @throws IntegratorException if the integrator cannot perform integration\n-   * @throws MathUserException this exception is propagated to the caller if\n-   * the underlying user function triggers one\n+   * @throws MathIllegalStateException if the integrator cannot perform integration\n+   * @throws MathIllegalArgumentException if integration parameters are wrong (typically\n+   * too small integration span)\n    */\n   double integrate (FirstOrderDifferentialEquations equations,\n-                    double t0, double[] y0,\n-                    double t, double[] y) throws MathUserException, IntegratorException;\n+                    double t0, double[] y0, double t, double[] y)\n+      throws MathIllegalStateException, MathIllegalArgumentException;\n \n }\n--- a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java\n package org.apache.commons.math.ode;\n \n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n      * @param y0 initial value of the state vector at t0\n      * @param t target time for the integration\n      * (can be set to a value smaller than <code>t0</code> for backward integration)\n-     * @throws IntegratorException if the integrator cannot perform integration\n-     * @throws MathUserException this exception is propagated to the caller if\n-     * the underlying user function triggers one\n+     * @throws MathIllegalStateException if the integrator cannot perform integration\n      */\n     protected void start(final double t0, final double[] y0, final double t)\n-        throws MathUserException, IntegratorException {\n+        throws MathIllegalStateException {\n \n         // make sure NO user event nor user step handler is triggered,\n         // this is the task of the top level integrator, not the task\n--- a/src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java\n \n package org.apache.commons.math.ode;\n \n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n \n \n /** This interface represents a second order integrator for\n    * same object as y0\n    * @param yDot placeholder where to put the first derivative of\n    * the state vector at time t, can be the same object as yDot0\n-   * @throws IntegratorException if the integrator cannot perform integration\n-   * @throws MathUserException this exception is propagated to the caller if the\n-   * underlying user function triggers one\n+   * @throws MathIllegalStateException if the integrator cannot perform integration\n+   * @throws MathIllegalArgumentException if integration parameters are wrong (typically\n+   * too small integration span)\n    */\n   void integrate(SecondOrderDifferentialEquations equations,\n                  double t0, double[] y0, double[] yDot0,\n                  double t, double[] y, double[] yDot)\n-      throws MathUserException, IntegratorException;\n+      throws MathIllegalStateException, MathIllegalArgumentException;\n \n }\n--- a/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n    * @param t current value of the independent <i>time</i> variable\n    * @param y array containing the current value of the state vector\n    * @return value of the g switching function\n-   * @exception EventException if the switching function cannot be evaluated\n    */\n-  double g(double t, double[] y) throws EventException;\n+  double g(double t, double[] y);\n \n   /** Handle an event and choose what to do next.\n \n    * @return indication of what the integrator should do next, this\n    * value must be one of {@link #STOP}, {@link #RESET_STATE},\n    * {@link #RESET_DERIVATIVES} or {@link #CONTINUE}\n-   * @exception EventException if the event occurrence triggers an error\n    */\n-  int eventOccurred(double t, double[] y, boolean increasing) throws EventException;\n+  int eventOccurred(double t, double[] y, boolean increasing);\n \n   /** Reset the state prior to continue the integration.\n \n    * @param t current value of the independent <i>time</i> variable\n    * @param y array containing the current value of the state vector\n    * the new state should be put in the same array\n-   * @exception EventException if the state cannot be reseted\n    */\n-  void resetState(double t, double[] y) throws EventException;\n+  void resetState(double t, double[] y);\n \n }\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n \n package org.apache.commons.math.ode.events;\n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.solvers.AllowedSolution;\n import org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver;\n import org.apache.commons.math.analysis.solvers.PegasusSolver;\n import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;\n import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;\n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n \n \n     /** Reinitialize the beginning of the step.\n      * @param interpolator valid for the current step\n-     * @exception EventException if the event handler\n-     * value cannot be evaluated at the beginning of the step\n-     */\n-    public void reinitializeBegin(final StepInterpolator interpolator)\n-        throws EventException {\n-        try {\n-\n-            t0 = interpolator.getPreviousTime();\n-            interpolator.setInterpolatedTime(t0);\n-            g0 = handler.g(t0, interpolator.getInterpolatedState());\n-            if (g0 == 0) {\n-                // excerpt from MATH-421 issue:\n-                // If an ODE solver is setup with an EventHandler that return STOP\n-                // when the even is triggered, the integrator stops (which is exactly\n-                // the expected behavior). If however the user wants to restart the\n-                // solver from the final state reached at the event with the same\n-                // configuration (expecting the event to be triggered again at a\n-                // later time), then the integrator may fail to start. It can get stuck\n-                // at the previous event. The use case for the bug MATH-421 is fairly\n-                // general, so events occurring exactly at start in the first step should\n-                // be ignored.\n-\n-                // extremely rare case: there is a zero EXACTLY at interval start\n-                // we will use the sign slightly after step beginning to force ignoring this zero\n-                final double epsilon = FastMath.max(solver.getAbsoluteAccuracy(),\n-                                                    FastMath.abs(solver.getRelativeAccuracy() * t0));\n-                final double tStart = t0 + 0.5 * epsilon;\n-                interpolator.setInterpolatedTime(tStart);\n-                g0 = handler.g(tStart, interpolator.getInterpolatedState());\n-            }\n-            g0Positive = g0 >= 0;\n-\n-        } catch (MathUserException mue) {\n-            throw new EventException(mue);\n+     */\n+    public void reinitializeBegin(final StepInterpolator interpolator) {\n+\n+        t0 = interpolator.getPreviousTime();\n+        interpolator.setInterpolatedTime(t0);\n+        g0 = handler.g(t0, interpolator.getInterpolatedState());\n+        if (g0 == 0) {\n+            // excerpt from MATH-421 issue:\n+            // If an ODE solver is setup with an EventHandler that return STOP\n+            // when the even is triggered, the integrator stops (which is exactly\n+            // the expected behavior). If however the user wants to restart the\n+            // solver from the final state reached at the event with the same\n+            // configuration (expecting the event to be triggered again at a\n+            // later time), then the integrator may fail to start. It can get stuck\n+            // at the previous event. The use case for the bug MATH-421 is fairly\n+            // general, so events occurring exactly at start in the first step should\n+            // be ignored.\n+\n+            // extremely rare case: there is a zero EXACTLY at interval start\n+            // we will use the sign slightly after step beginning to force ignoring this zero\n+            final double epsilon = FastMath.max(solver.getAbsoluteAccuracy(),\n+                                                FastMath.abs(solver.getRelativeAccuracy() * t0));\n+            final double tStart = t0 + 0.5 * epsilon;\n+            interpolator.setInterpolatedTime(tStart);\n+            g0 = handler.g(tStart, interpolator.getInterpolatedState());\n         }\n+        g0Positive = g0 >= 0;\n+\n     }\n \n     /** Evaluate the impact of the proposed step on the event handler.\n      * @param interpolator step interpolator for the proposed step\n      * @return true if the event handler triggers an event before\n      * the end of the proposed step\n-     * @exception MathUserException if the interpolator fails to\n-     * compute the switching function somewhere within the step\n-     * @exception EventException if the switching function\n-     * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n     public boolean evaluateStep(final StepInterpolator interpolator)\n-        throws MathUserException, EventException, ConvergenceException {\n-\n-        try {\n+        throws ConvergenceException {\n \n             forward = interpolator.isForward();\n             final double t1 = interpolator.getCurrentTime();\n \n             final UnivariateRealFunction f = new UnivariateRealFunction() {\n                 public double value(final double t) {\n-                    try {\n-                        interpolator.setInterpolatedTime(t);\n-                        return handler.g(t, interpolator.getInterpolatedState());\n-                    } catch (EventException e) {\n-                        throw new ConveyedException(e);\n-                    }\n+                    interpolator.setInterpolatedTime(t);\n+                    return handler.g(t, interpolator.getInterpolatedState());\n                 }\n             };\n \n             pendingEventTime = Double.NaN;\n             return false;\n \n-        } catch (ConveyedException ce) {\n-            throw ce.getConveyedException();\n-        }\n-\n     }\n \n     /** Get the occurrence time of the event triggered in the current step.\n      * end of the step\n      * @param y array containing the current value of the state vector\n      * at the end of the step\n-     * @exception EventException if the value of the event\n-     * handler cannot be evaluated\n-     */\n-    public void stepAccepted(final double t, final double[] y)\n-        throws EventException {\n+     */\n+    public void stepAccepted(final double t, final double[] y) {\n \n         t0 = t;\n         g0 = handler.g(t, y);\n      * @param y array were to put the desired state vector at the beginning\n      * of the next step\n      * @return true if the integrator should reset the derivatives too\n-     * @exception EventException if the state cannot be reseted by the event\n-     * handler\n-     */\n-    public boolean reset(final double t, final double[] y)\n-        throws EventException {\n+     */\n+    public boolean reset(final double t, final double[] y) {\n \n         if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {\n             return false;\n \n     }\n \n-    /** Local exception to convey EventException instances through root finding algorithms. */\n-    private static class ConveyedException extends RuntimeException {\n-\n-        /** Serializable uid. */\n-        private static final long serialVersionUID = 2668348550531980574L;\n-\n-        /** Conveyed exception. */\n-        private final EventException conveyedException;\n-\n-        /** Simple constructor.\n-         * @param conveyedException conveyed exception\n-         */\n-        public ConveyedException(final EventException conveyedException) {\n-            this.conveyedException = conveyedException;\n-        }\n-\n-        /** Get the conveyed exception.\n-         * @return conveyed exception\n-         */\n-        public EventException getConveyedException() {\n-            return conveyedException;\n-        }\n-\n-    }\n-\n }\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.sampling.NordsieckStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n     public double integrate(final FirstOrderDifferentialEquations equations,\n                             final double t0, final double[] y0,\n                             final double t, final double[] y)\n-        throws MathUserException, IntegratorException {\n+        throws MathIllegalStateException, MathIllegalArgumentException {\n \n         final int n = y0.length;\n         sanityChecks(equations, t0, y0, t, y);\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.MultistepIntegrator;\n \n \n     public abstract double integrate(final FirstOrderDifferentialEquations equations,\n                                      final double t0, final double[] y0,\n                                      final double t, final double[] y)\n-        throws MathUserException, IntegratorException;\n+        throws MathIllegalStateException, MathIllegalArgumentException;\n \n     /** {@inheritDoc} */\n     @Override\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n \n import java.util.Arrays;\n \n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.linear.RealMatrixPreservingVisitor;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.sampling.NordsieckStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n     public double integrate(final FirstOrderDifferentialEquations equations,\n                             final double t0, final double[] y0,\n                             final double t, final double[] y)\n-        throws MathUserException, IntegratorException {\n+        throws MathIllegalStateException, MathIllegalArgumentException {\n \n         final int n = y0.length;\n         sanityChecks(equations, t0, y0, t, y);\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.ode.AbstractIntegrator;\n import org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.util.FastMath;\n \n /**\n    * @param y0 state vector at t0\n    * @param t target time for the integration\n    * @param y placeholder where to put the state vector\n-   * @exception IntegratorException if some inconsistency is detected\n+   * @exception DimensionMismatchException if some inconsistency is detected\n+   * @exception NumberIsTooSmallException if integration span is too small\n    */\n   @Override\n   protected void sanityChecks(final FirstOrderDifferentialEquations equations,\n                               final double t0, final double[] y0,\n                               final double t, final double[] y)\n-      throws IntegratorException {\n+      throws DimensionMismatchException, NumberIsTooSmallException {\n \n       super.sanityChecks(equations, t0, y0, t, y);\n \n       }\n \n       if ((vecAbsoluteTolerance != null) && (vecAbsoluteTolerance.length != mainSetDimension)) {\n-          throw new IntegratorException(\n-                  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, mainSetDimension, vecAbsoluteTolerance.length);\n+          throw new DimensionMismatchException(mainSetDimension, vecAbsoluteTolerance.length);\n       }\n \n       if ((vecRelativeTolerance != null) && (vecRelativeTolerance.length != mainSetDimension)) {\n-          throw new IntegratorException(\n-                  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, mainSetDimension, vecRelativeTolerance.length);\n+          throw new DimensionMismatchException(mainSetDimension, vecRelativeTolerance.length);\n       }\n \n   }\n    * are silently increased up to this value, if false such small\n    * steps generate an exception\n    * @return a bounded integration step (h if no bound is reach, or a bounded value)\n-   * @exception IntegratorException if the step is too small and acceptSmall is false\n+   * @exception NumberIsTooSmallException if the step is too small and acceptSmall is false\n    */\n   protected double filterStep(final double h, final boolean forward, final boolean acceptSmall)\n-    throws IntegratorException {\n+    throws MathIllegalArgumentException {\n \n       double filteredH = h;\n       if (FastMath.abs(h) < minStep) {\n           if (acceptSmall) {\n               filteredH = forward ? minStep : -minStep;\n           } else {\n-              throw new IntegratorException(\n-                      LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION,\n-                      minStep, FastMath.abs(h));\n+              throw new NumberIsTooSmallException(LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION,\n+                                                  minStep, FastMath.abs(h), true);\n           }\n       }\n \n   public abstract double integrate (FirstOrderDifferentialEquations equations,\n                                     double t0, double[] y0,\n                                     double t, double[] y)\n-    throws MathUserException, IntegratorException;\n+    throws MathIllegalStateException, MathIllegalArgumentException;\n \n   /** {@inheritDoc} */\n   @Override\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n \n   public double integrate(final FirstOrderDifferentialEquations equations,\n                           final double t0, final double[] y0,\n                           final double t, final double[] y)\n-  throws MathUserException, IntegratorException {\n+      throws MathIllegalStateException, MathIllegalArgumentException {\n \n     sanityChecks(equations, t0, y0, t, y);\n     setEquations(equations);\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n package org.apache.commons.math.ode.nonstiff;\n \n import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n   @Override\n   public double integrate(final FirstOrderDifferentialEquations equations,\n                           final double t0, final double[] y0, final double t, final double[] y)\n-      throws MathUserException, IntegratorException {\n+      throws MathIllegalStateException, MathIllegalArgumentException {\n \n     sanityChecks(equations, t0, y0, t, y);\n     setEquations(equations);\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n package org.apache.commons.math.ode.nonstiff;\n \n \n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.ode.AbstractIntegrator;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n \n   public double integrate(final FirstOrderDifferentialEquations equations,\n                           final double t0, final double[] y0,\n                           final double t, final double[] y)\n-  throws MathUserException, IntegratorException {\n+      throws MathIllegalStateException, MathIllegalArgumentException {\n \n     sanityChecks(equations, t0, y0, t, y);\n     setEquations(equations);\n--- a/src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n import java.util.Random;\n \n import org.apache.commons.math.exception.MathUserException;\n-import org.apache.commons.math.ode.ContinuousOutputModel;\n-import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;\n import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;\n import org.apache.commons.math.ode.sampling.DummyStepInterpolator;\n   }\n \n   @Test\n-  public void testBoundaries()\n-    throws MathUserException, IntegratorException {\n+  public void testBoundaries() {\n     integ.addStepHandler(new ContinuousOutputModel());\n     integ.integrate(pb,\n                     pb.getInitialTime(), pb.getInitialState(),\n   }\n \n   @Test\n-  public void testRandomAccess()\n-    throws MathUserException, IntegratorException {\n+  public void testRandomAccess() {\n \n     ContinuousOutputModel cm = new ContinuousOutputModel();\n     integ.addStepHandler(cm);\n   }\n \n   @Test\n-  public void testModelsMerging()\n-    throws MathUserException, IntegratorException {\n+  public void testModelsMerging() {\n \n       // theoretical solution: y[0] = cos(t), y[1] = sin(t)\n       FirstOrderDifferentialEquations problem =\n--- a/src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java\n \n package org.apache.commons.math.ode;\n \n-import org.apache.commons.math.exception.MathUserException;\n-import org.apache.commons.math.ode.FirstOrderConverter;\n-import org.apache.commons.math.ode.IntegratorException;\n-import org.apache.commons.math.ode.SecondOrderDifferentialEquations;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n   }\n \n   @Test\n-  public void testDecreasingSteps()\n-    throws MathUserException, IntegratorException {\n+  public void testDecreasingSteps() {\n \n     double previousError = Double.NaN;\n     for (int i = 0; i < 10; ++i) {\n   }\n \n   @Test\n-  public void testSmallStep()\n-    throws MathUserException, IntegratorException {\n+  public void testSmallStep() {\n     double error = integrateWithSpecifiedStep(4.0, 0.0, 1.0, 1.0e-4)\n                    - FastMath.sin(4.0);\n     Assert.assertTrue(FastMath.abs(error) < 1.0e-10);\n   }\n \n   @Test\n-  public void testBigStep()\n-    throws MathUserException, IntegratorException {\n+  public void testBigStep() {\n     double error = integrateWithSpecifiedStep(4.0, 0.0, 1.0, 0.5)\n                    - FastMath.sin(4.0);\n     Assert.assertTrue(FastMath.abs(error) > 0.1);\n   private double integrateWithSpecifiedStep(double omega,\n                                             double t0, double t,\n                                             double step)\n-  throws MathUserException, IntegratorException {\n+  throws MathIllegalStateException, MathIllegalArgumentException {\n     double[] y0 = new double[2];\n     y0[0] = FastMath.sin(omega * t0);\n     y0[1] = omega * FastMath.cos(omega * t0);\n--- a/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java\n package org.apache.commons.math.ode.events;\n \n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.analysis.solvers.BrentSolver;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.DummyStepInterpolator;\n import org.junit.Assert;\n \n     // JIRA: MATH-322\n     @Test\n-    public void closeEvents()\n-        throws EventException, ConvergenceException, MathUserException {\n+    public void closeEvents() {\n \n         final double r1  = 90.0;\n         final double r2  = 135.0;\n--- a/src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;\n import org.junit.Assert;\n import org.junit.Test;\n      * calculations occur very close together instead. Uses event type 0. See\n      * {@link org.apache.commons.math.ode.events.EventHandler#g(double, double[])\n      * EventHandler.g(double, double[])}.\n-     * @throws EventException in case of event evaluation failure\n-     * @throws IntegratorException in case of integration failure\n-     * @throws MathUserException in case of derivative evaluation failure\n      */\n     @Test\n-    public void testOverlappingEvents0() throws MathUserException, IntegratorException, EventException {\n+    public void testOverlappingEvents0() {\n         test(0);\n     }\n \n      * calculations occur very close together instead. Uses event type 1. See\n      * {@link org.apache.commons.math.ode.events.EventHandler#g(double, double[])\n      * EventHandler.g(double, double[])}.\n-     * @throws EventException in case of event evaluation failure\n-     * @throws IntegratorException in case of integration failure\n-     * @throws MathUserException in case of derivative evaluation failure\n      */\n     @Test\n-    public void testOverlappingEvents1() throws MathUserException, IntegratorException, EventException {\n+    public void testOverlappingEvents1() {\n         test(1);\n     }\n \n      * @param eventType the type of events to use. See\n      * {@link org.apache.commons.math.ode.events.EventHandler#g(double, double[])\n      * EventHandler.g(double, double[])}.\n-     * @throws EventException in case of event evaluation failure\n-     * @throws IntegratorException in case of integration failure\n-     * @throws MathUserException in case of derivative evaluation failure\n      */\n-    public void test(int eventType) throws MathUserException, IntegratorException, EventException {\n+    public void test(int eventType) {\n         double e = 1e-15;\n         FirstOrderIntegrator integrator = new DormandPrince853Integrator(e, 100.0, 1e-7, 1e-7);\n         BaseSecantSolver rootSolver = new PegasusSolver(e, e);\n         }\n \n         /** {@inheritDoc} */\n-        public double g(double t, double[] y) throws EventException {\n+        public double g(double t, double[] y) {\n             return (eventType == 0) ? y[idx] >= 1.0 ? 1.0 : -1.0\n                                     : y[idx] - 1.0;\n         }\n \n         /** {@inheritDoc} */\n-        public int eventOccurred(double t, double[] y, boolean increasing) throws EventException {\n+        public int eventOccurred(double t, double[] y, boolean increasing) {\n             return STOP;\n         }\n \n         /** {@inheritDoc} */\n-        public void resetState(double t, double[] y) throws EventException {\n+        public void resetState(double t, double[] y) {\n             // Never called.\n         }\n     }\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem5;\n import org.apache.commons.math.ode.TestProblem6;\n \n public class AdamsBashforthIntegratorTest {\n \n-    @Test(expected=IntegratorException.class)\n-    public void dimensionCheck() throws MathUserException, IntegratorException {\n+    @Test(expected=DimensionMismatchException.class)\n+    public void dimensionCheck() {\n         TestProblem1 pb = new TestProblem1();\n         FirstOrderIntegrator integ =\n             new AdamsBashforthIntegrator(2, 0.0, 1.0, 1.0e-10, 1.0e-10);\n                         1.0, new double[pb.getDimension()+10]);\n     }\n \n-    @Test(expected=IntegratorException.class)\n-    public void testMinStep() throws MathUserException, IntegratorException {\n+    @Test(expected=NumberIsTooSmallException.class)\n+    public void testMinStep() {\n \n           TestProblem1 pb = new TestProblem1();\n           double minStep = 0.1 * (pb.getFinalTime() - pb.getInitialTime());\n \n     @Test\n     public void testIncreasingTolerance()\n-        throws MathUserException, IntegratorException {\n+        {\n \n         int previousCalls = Integer.MAX_VALUE;\n         for (int i = -12; i < -5; ++i) {\n     }\n \n     @Test(expected = MathUserException.class)\n-    public void exceedMaxEvaluations() throws MathUserException, IntegratorException {\n+    public void exceedMaxEvaluations() {\n \n         TestProblem1 pb  = new TestProblem1();\n         double range = pb.getFinalTime() - pb.getInitialTime();\n     }\n \n     @Test\n-    public void backward() throws MathUserException, IntegratorException {\n+    public void backward() {\n \n         TestProblem5 pb = new TestProblem5();\n         double range = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());\n     }\n \n     @Test\n-    public void polynomial() throws MathUserException, IntegratorException {\n+    public void polynomial() {\n         TestProblem6 pb = new TestProblem6();\n         double range = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());\n \n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem5;\n import org.apache.commons.math.ode.TestProblem6;\n \n public class AdamsMoultonIntegratorTest {\n \n-    @Test(expected=IntegratorException.class)\n-    public void dimensionCheck() throws MathUserException, IntegratorException {\n+    @Test(expected=DimensionMismatchException.class)\n+    public void dimensionCheck() {\n         TestProblem1 pb = new TestProblem1();\n         FirstOrderIntegrator integ =\n             new AdamsMoultonIntegrator(2, 0.0, 1.0, 1.0e-10, 1.0e-10);\n                         1.0, new double[pb.getDimension()+10]);\n     }\n \n-    @Test(expected=IntegratorException.class)\n-    public void testMinStep() throws MathUserException, IntegratorException {\n+    @Test(expected=NumberIsTooSmallException.class)\n+    public void testMinStep() {\n \n           TestProblem1 pb = new TestProblem1();\n           double minStep = 0.1 * (pb.getFinalTime() - pb.getInitialTime());\n \n     @Test\n     public void testIncreasingTolerance()\n-        throws MathUserException, IntegratorException {\n+        {\n \n         int previousCalls = Integer.MAX_VALUE;\n         for (int i = -12; i < -2; ++i) {\n     }\n \n     @Test(expected = MathUserException.class)\n-    public void exceedMaxEvaluations() throws MathUserException, IntegratorException {\n+    public void exceedMaxEvaluations() {\n \n         TestProblem1 pb  = new TestProblem1();\n         double range = pb.getFinalTime() - pb.getInitialTime();\n     }\n \n     @Test\n-    public void backward() throws MathUserException, IntegratorException {\n+    public void backward() {\n \n         TestProblem5 pb = new TestProblem5();\n         double range = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());\n     }\n \n     @Test\n-    public void polynomial() throws MathUserException, IntegratorException {\n+    public void polynomial() {\n         TestProblem6 pb = new TestProblem6();\n         double range = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());\n \n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.TestProblem5;\n import org.apache.commons.math.ode.TestProblemFactory;\n import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n-import org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n public class ClassicalRungeKuttaIntegratorTest {\n \n   @Test\n-  public void testMissedEndEvent() throws IntegratorException, MathUserException {\n+  public void testMissedEndEvent() {\n       final double   t0     = 1878250320.0000029;\n       final double   tEvent = 1878250379.9999986;\n       final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n                                                         0.0, new double[pb.getDimension()+10],\n                                                         1.0, new double[pb.getDimension()]);\n         Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n+    } catch(DimensionMismatchException ie) {\n     }\n     try  {\n         TestProblem1 pb = new TestProblem1();\n                                                           0.0, new double[pb.getDimension()],\n                                                           1.0, new double[pb.getDimension()+10]);\n           Assert.fail(\"an exception should have been thrown\");\n-      } catch(MathUserException de) {\n-        Assert.fail(\"wrong exception caught\");\n-      } catch(IntegratorException ie) {\n+      } catch(DimensionMismatchException ie) {\n       }\n     try  {\n       TestProblem1 pb = new TestProblem1();\n                                                         0.0, new double[pb.getDimension()],\n                                                         0.0, new double[pb.getDimension()]);\n         Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n+    } catch(NumberIsTooSmallException ie) {\n     }\n   }\n \n   @Test\n   public void testDecreasingSteps()\n-    throws MathUserException, IntegratorException  {\n+     {\n \n     TestProblemAbstract[] problems = TestProblemFactory.getProblems();\n     for (int k = 0; k < problems.length; ++k) {\n \n   @Test\n   public void testSmallStep()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem1 pb = new TestProblem1();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n \n   @Test\n   public void testBigStep()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem1 pb = new TestProblem1();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;\n \n   @Test\n   public void testBackward()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem5 pb = new TestProblem5();\n     double step = FastMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n \n   @Test\n   public void testKepler()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     final TestProblem3 pb  = new TestProblem3(0.9);\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.0003;\n \n   @Test\n   public void testStepSize()\n-    throws MathUserException, IntegratorException {\n+    {\n       final double step = 1.23456;\n       FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n       integ.addStepHandler(new StepHandler() {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n \n   @Test\n   public void derivativesConsistency()\n-  throws MathUserException, IntegratorException {\n+  {\n     TestProblem3 pb = new TestProblem3();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n     ClassicalRungeKuttaIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n \n   @Test\n   public void serialization()\n-    throws MathUserException, IntegratorException,\n-           IOException, ClassNotFoundException {\n+    throws IOException, ClassNotFoundException {\n \n     TestProblem3 pb = new TestProblem3(0.9);\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.0003;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.TestProblem4;\n import org.apache.commons.math.ode.TestProblemAbstract;\n import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n-import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;\n-import org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n \n public class DormandPrince54IntegratorTest {\n \n-  @Test\n+  @Test(expected=DimensionMismatchException.class)\n   public void testDimensionCheck() {\n-    try  {\n       TestProblem1 pb = new TestProblem1();\n       DormandPrince54Integrator integrator = new DormandPrince54Integrator(0.0, 1.0,\n                                                                            1.0e-10, 1.0e-10);\n       integrator.integrate(pb,\n                            0.0, new double[pb.getDimension()+10],\n                            1.0, new double[pb.getDimension()+10]);\n-      Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n-  }\n-\n-  @Test\n+  }\n+\n+  @Test(expected=NumberIsTooSmallException.class)\n   public void testMinStep() {\n \n-    try {\n       TestProblem1 pb = new TestProblem1();\n       double minStep = 0.1 * (pb.getFinalTime() - pb.getInitialTime());\n       double maxStep = pb.getFinalTime() - pb.getInitialTime();\n                       pb.getInitialTime(), pb.getInitialState(),\n                       pb.getFinalTime(), new double[pb.getDimension()]);\n       Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n \n   }\n \n   @Test\n   public void testSmallLastStep()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblemAbstract pb = new TestProblem5();\n     double minStep = 1.25;\n \n   @Test\n   public void testBackward()\n-      throws MathUserException, IntegratorException {\n+      {\n \n       TestProblem5 pb = new TestProblem5();\n       double minStep = 0;\n \n   @Test\n   public void testIncreasingTolerance()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     int previousCalls = Integer.MAX_VALUE;\n     for (int i = -12; i < -2; ++i) {\n \n   @Test\n   public void testEvents()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem4 pb = new TestProblem4();\n     double minStep = 0;\n \n   @Test\n   public void testKepler()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     final TestProblem3 pb  = new TestProblem3(0.9);\n     double minStep = 0;\n \n   @Test\n   public void testVariableSteps()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     final TestProblem3 pb  = new TestProblem3(0.9);\n     double minStep = 0;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n \n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n   @Test\n   public void derivativesConsistency()\n-  throws MathUserException, IntegratorException {\n+  {\n     TestProblem3 pb = new TestProblem3(0.1);\n     double minStep = 0;\n     double maxStep = pb.getFinalTime() - pb.getInitialTime();\n \n   @Test\n   public void serialization()\n-    throws MathUserException, IntegratorException,\n-           IOException, ClassNotFoundException {\n+    throws IOException, ClassNotFoundException {\n \n     TestProblem3 pb = new TestProblem3(0.9);\n     double minStep = 0;\n \n   @Test\n   public void checkClone()\n-    throws MathUserException, IntegratorException {\n+    {\n       TestProblem3 pb = new TestProblem3(0.9);\n       double minStep = 0;\n       double maxStep = pb.getFinalTime() - pb.getInitialTime();\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.TestProblem4;\n public class DormandPrince853IntegratorTest {\n \n   @Test\n-  public void testMissedEndEvent() throws IntegratorException, MathUserException {\n+  public void testMissedEndEvent() {\n       final double   t0     = 1878250320.0000029;\n       final double   tEvent = 1878250379.9999986;\n       final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n \n   }\n \n-  @Test\n+  @Test(expected=DimensionMismatchException.class)\n   public void testDimensionCheck() {\n-    try  {\n       TestProblem1 pb = new TestProblem1();\n       DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 1.0,\n                                                                              1.0e-10, 1.0e-10);\n                            0.0, new double[pb.getDimension()+10],\n                            1.0, new double[pb.getDimension()+10]);\n       Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n-  }\n-\n-  @Test\n+  }\n+\n+  @Test(expected=NumberIsTooSmallException.class)\n   public void testNullIntervalCheck() {\n-    try  {\n       TestProblem1 pb = new TestProblem1();\n       DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 1.0,\n                                                                              1.0e-10, 1.0e-10);\n                            0.0, new double[pb.getDimension()],\n                            0.0, new double[pb.getDimension()]);\n       Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n-  }\n-\n-  @Test\n+  }\n+\n+  @Test(expected=NumberIsTooSmallException.class)\n   public void testMinStep() {\n \n-    try {\n       TestProblem1 pb = new TestProblem1();\n       double minStep = 0.1 * (pb.getFinalTime() - pb.getInitialTime());\n       double maxStep = pb.getFinalTime() - pb.getInitialTime();\n                       pb.getInitialTime(), pb.getInitialState(),\n                       pb.getFinalTime(), new double[pb.getDimension()]);\n       Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n \n   }\n \n   @Test\n   public void testIncreasingTolerance()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     int previousCalls = Integer.MAX_VALUE;\n     AdaptiveStepsizeIntegrator integ =\n \n   @Test\n   public void testBackward()\n-      throws MathUserException, IntegratorException {\n+      {\n \n       TestProblem5 pb = new TestProblem5();\n       double minStep = 0;\n \n   @Test\n   public void testEvents()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem4 pb = new TestProblem4();\n     double minStep = 0;\n \n   @Test\n   public void testKepler()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     final TestProblem3 pb  = new TestProblem3(0.9);\n     double minStep = 0;\n \n   @Test\n   public void testVariableSteps()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     final TestProblem3 pb  = new TestProblem3(0.9);\n     double minStep = 0;\n \n   @Test\n   public void testUnstableDerivative()\n-  throws MathUserException, IntegratorException {\n+  {\n     final StepProblem stepProblem = new StepProblem(0.0, 1.0, 2.0);\n     FirstOrderIntegrator integ =\n       new DormandPrince853Integrator(0.1, 10, 1.0e-12, 0.0);\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n \n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n   @Test\n   public void derivativesConsistency()\n-  throws MathUserException, IntegratorException {\n+  {\n     TestProblem3 pb = new TestProblem3(0.1);\n     double minStep = 0;\n     double maxStep = pb.getFinalTime() - pb.getInitialTime();\n \n   @Test\n   public void serialization()\n-    throws MathUserException, IntegratorException,\n-           IOException, ClassNotFoundException {\n+    throws IOException, ClassNotFoundException {\n \n     TestProblem3 pb = new TestProblem3(0.9);\n     double minStep = 0;\n \n   @Test\n   public void checklone()\n-  throws MathUserException, IntegratorException {\n+  {\n     TestProblem3 pb = new TestProblem3(0.9);\n     double minStep = 0;\n     double maxStep = pb.getFinalTime() - pb.getInitialTime();\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n \n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem5;\n import org.apache.commons.math.ode.TestProblemAbstract;\n import org.apache.commons.math.ode.TestProblemFactory;\n import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n-import org.apache.commons.math.ode.nonstiff.EulerIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n \n public class EulerIntegratorTest {\n \n-  @Test\n+  @Test(expected=DimensionMismatchException.class)\n   public void testDimensionCheck() {\n-    try  {\n       TestProblem1 pb = new TestProblem1();\n       new EulerIntegrator(0.01).integrate(pb,\n                                           0.0, new double[pb.getDimension()+10],\n                                           1.0, new double[pb.getDimension()+10]);\n         Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n   }\n \n   @Test\n   public void testDecreasingSteps()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblemAbstract[] problems = TestProblemFactory.getProblems();\n     for (int k = 0; k < problems.length; ++k) {\n \n   @Test\n   public void testSmallStep()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem1 pb  = new TestProblem1();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n \n   @Test\n   public void testBigStep()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem1 pb  = new TestProblem1();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;\n \n   @Test\n   public void testBackward()\n-      throws MathUserException, IntegratorException {\n+      {\n \n       TestProblem5 pb = new TestProblem5();\n       double step = FastMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n \n   @Test\n   public void testStepSize()\n-    throws MathUserException, IntegratorException {\n+    {\n       final double step = 1.23456;\n       FirstOrderIntegrator integ = new EulerIntegrator(step);\n       integ.addStepHandler(new StepHandler() {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java\n \n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n public class EulerStepInterpolatorTest {\n \n   @Test\n-  public void noReset() throws MathUserException {\n+  public void noReset() {\n \n     double[]   y    =   { 0.0, 1.0, -2.0 };\n     double[][] yDot = { { 1.0, 2.0, -2.0 } };\n \n   @Test\n   public void derivativesConsistency()\n-  throws MathUserException, IntegratorException {\n+  {\n     TestProblem3 pb = new TestProblem3();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n     EulerIntegrator integ = new EulerIntegrator(step);\n \n   @Test\n   public void serialization()\n-    throws MathUserException, IntegratorException,\n-           IOException, ClassNotFoundException {\n+    throws IOException, ClassNotFoundException {\n \n     TestProblem1 pb = new TestProblem1();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.TestProblem5;\n import org.apache.commons.math.ode.TestProblemFactory;\n import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n-import org.apache.commons.math.ode.nonstiff.GillIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n \n public class GillIntegratorTest {\n \n-  @Test\n+  @Test(expected=DimensionMismatchException.class)\n   public void testDimensionCheck() {\n-    try  {\n       TestProblem1 pb = new TestProblem1();\n       new GillIntegrator(0.01).integrate(pb,\n                                          0.0, new double[pb.getDimension()+10],\n                                          1.0, new double[pb.getDimension()+10]);\n         Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n   }\n \n   @Test\n   public void testDecreasingSteps()\n-    throws MathUserException, IntegratorException  {\n+     {\n \n     TestProblemAbstract[] problems = TestProblemFactory.getProblems();\n     for (int k = 0; k < problems.length; ++k) {\n \n   @Test\n   public void testSmallStep()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem1 pb = new TestProblem1();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n \n   @Test\n   public void testBigStep()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem1 pb = new TestProblem1();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;\n \n   @Test\n   public void testBackward()\n-      throws MathUserException, IntegratorException {\n+      {\n \n       TestProblem5 pb = new TestProblem5();\n       double step = FastMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n \n   @Test\n   public void testKepler()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     final TestProblem3 pb  = new TestProblem3(0.9);\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.0003;\n \n   @Test\n   public void testUnstableDerivative()\n-  throws MathUserException, IntegratorException {\n+  {\n     final StepProblem stepProblem = new StepProblem(0.0, 1.0, 2.0);\n     FirstOrderIntegrator integ = new GillIntegrator(0.3);\n     integ.addEventHandler(stepProblem, 1.0, 1.0e-12, 1000);\n \n   @Test\n   public void testStepSize()\n-    throws MathUserException, IntegratorException {\n+    {\n       final double step = 1.23456;\n       FirstOrderIntegrator integ = new GillIntegrator(step);\n       integ.addStepHandler(new StepHandler() {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.util.Random;\n-import java.io.ByteArrayOutputStream;\n-import java.io.ByteArrayInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.IOException;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem3;\n-import org.apache.commons.math.ode.nonstiff.GillIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n import org.junit.Assert;\n \n   @Test\n   public void testDerivativesConsistency()\n-  throws MathUserException, IntegratorException {\n+  {\n     TestProblem3 pb = new TestProblem3();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n     GillIntegrator integ = new GillIntegrator(step);\n \n   @Test\n   public void serialization()\n-    throws MathUserException, IntegratorException,\n-           IOException, ClassNotFoundException {\n+    throws IOException, ClassNotFoundException {\n \n     TestProblem3 pb = new TestProblem3(0.9);\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.0003;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.TestProblem4;\n import org.apache.commons.math.ode.TestProblemAbstract;\n import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n-import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n \n public class GraggBulirschStoerIntegratorTest {\n \n-  @Test\n+  @Test(expected=DimensionMismatchException.class)\n   public void testDimensionCheck() {\n-    try  {\n       TestProblem1 pb = new TestProblem1();\n       AdaptiveStepsizeIntegrator integrator =\n         new GraggBulirschStoerIntegrator(0.0, 1.0, 1.0e-10, 1.0e-10);\n       integrator.integrate(pb,\n                            0.0, new double[pb.getDimension()+10],\n                            1.0, new double[pb.getDimension()+10]);\n-      Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n-  }\n-\n-  @Test\n+  }\n+\n+  @Test(expected=NumberIsTooSmallException.class)\n   public void testNullIntervalCheck() {\n-    try  {\n       TestProblem1 pb = new TestProblem1();\n       GraggBulirschStoerIntegrator integrator =\n         new GraggBulirschStoerIntegrator(0.0, 1.0, 1.0e-10, 1.0e-10);\n       integrator.integrate(pb,\n                            0.0, new double[pb.getDimension()],\n                            0.0, new double[pb.getDimension()]);\n-      Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n-  }\n-\n-  @Test\n+  }\n+\n+  @Test(expected=NumberIsTooSmallException.class)\n   public void testMinStep() {\n \n-    try {\n       TestProblem5 pb  = new TestProblem5();\n       double minStep   = 0.1 * FastMath.abs(pb.getFinalTime() - pb.getInitialTime());\n       double maxStep   = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());\n       integ.integrate(pb,\n                       pb.getInitialTime(), pb.getInitialState(),\n                       pb.getFinalTime(), new double[pb.getDimension()]);\n-      Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n \n   }\n \n   @Test\n   public void testBackward()\n-      throws MathUserException, IntegratorException {\n+      {\n \n       TestProblem5 pb = new TestProblem5();\n       double minStep = 0;\n \n   @Test\n   public void testIncreasingTolerance()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     int previousCalls = Integer.MAX_VALUE;\n     for (int i = -12; i < -4; ++i) {\n \n   @Test\n   public void testIntegratorControls()\n-  throws MathUserException, IntegratorException {\n+  {\n \n     TestProblem3 pb = new TestProblem3(0.999);\n     GraggBulirschStoerIntegrator integ =\n   }\n \n   private double getMaxError(FirstOrderIntegrator integrator, TestProblemAbstract pb)\n-    throws MathUserException, IntegratorException {\n+    {\n       TestProblemHandler handler = new TestProblemHandler(pb, integrator);\n       integrator.addStepHandler(handler);\n       integrator.integrate(pb,\n \n   @Test\n   public void testEvents()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem4 pb = new TestProblem4();\n     double minStep = 0;\n \n   @Test\n   public void testKepler()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     final TestProblem3 pb = new TestProblem3(0.9);\n     double minStep        = 0;\n \n   @Test\n   public void testVariableSteps()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     final TestProblem3 pb = new TestProblem3(0.9);\n     double minStep        = 0;\n \n   @Test\n   public void testUnstableDerivative()\n-    throws MathUserException, IntegratorException {\n+    {\n     final StepProblem stepProblem = new StepProblem(0.0, 1.0, 2.0);\n     FirstOrderIntegrator integ =\n       new GraggBulirschStoerIntegrator(0.1, 10, 1.0e-12, 0.0);\n   }\n \n   @Test\n-  public void testIssue596() throws MathUserException, IntegratorException {\n+  public void testIssue596() {\n     FirstOrderIntegrator integ = new GraggBulirschStoerIntegrator(1e-10, 100.0, 1e-7, 1e-7);\n       integ.addStepHandler(new StepHandler() {\n \n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n \n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n   @Test\n   public void derivativesConsistency()\n-  throws MathUserException, IntegratorException {\n+  {\n     TestProblem3 pb = new TestProblem3(0.9);\n     double minStep   = 0;\n     double maxStep   = pb.getFinalTime() - pb.getInitialTime();\n \n   @Test\n   public void serialization()\n-    throws MathUserException, IntegratorException,\n-           IOException, ClassNotFoundException {\n+    throws IOException, ClassNotFoundException {\n \n     TestProblem3 pb  = new TestProblem3(0.9);\n     double minStep   = 0;\n \n   @Test\n   public void checklone()\n-  throws MathUserException, IntegratorException {\n+  {\n     TestProblem3 pb = new TestProblem3(0.9);\n     double minStep = 0;\n     double maxStep = pb.getFinalTime() - pb.getInitialTime();\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n+import org.apache.commons.math.exception.TooManyEvaluationsException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n-import org.apache.commons.math.exception.TooManyEvaluationsException;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.TestProblem4;\n import org.apache.commons.math.ode.TestProblem5;\n import org.apache.commons.math.ode.TestProblemHandler;\n-import org.apache.commons.math.ode.events.EventException;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n \n   }\n \n-  @Test\n+  @Test(expected=NumberIsTooSmallException.class)\n   public void testMinStep() {\n \n-    try {\n       TestProblem1 pb = new TestProblem1();\n       double minStep = 0.1 * (pb.getFinalTime() - pb.getInitialTime());\n       double maxStep = pb.getFinalTime() - pb.getInitialTime();\n                       pb.getInitialTime(), pb.getInitialState(),\n                       pb.getFinalTime(), new double[pb.getDimension()]);\n       Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n \n   }\n \n   @Test\n   public void testIncreasingTolerance()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     int previousCalls = Integer.MAX_VALUE;\n     for (int i = -12; i < -2; ++i) {\n \n   @Test\n   public void testBackward()\n-      throws MathUserException, IntegratorException {\n+      {\n \n       TestProblem5 pb = new TestProblem5();\n       double minStep = 0;\n \n   @Test\n   public void testEvents()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem4 pb = new TestProblem4();\n     double minStep = 0;\n         public int eventOccurred(double t, double[] y, boolean increasing) {\n           return EventHandler.CONTINUE;\n         }\n-        public double g(double t, double[] y) throws EventException {\n+        public double g(double t, double[] y) {\n           double middle = (pb.getInitialTime() + pb.getFinalTime()) / 2;\n           double offset = t - middle;\n           if (offset > 0) {\n-            throw new EventException(LocalizedFormats.EVALUATION_FAILED, t);\n+            throw new MathUserException(LocalizedFormats.EVALUATION_FAILED, t);\n           }\n           return offset;\n         }\n                         pb.getInitialTime(), pb.getInitialState(),\n                         pb.getFinalTime(), new double[pb.getDimension()]);\n         Assert.fail(\"an exception should have been thrown\");\n-      } catch (IntegratorException ie) {\n+      } catch (MathUserException ie) {\n         // expected behavior\n       }\n \n         integ.integrate(pb, pb.getInitialTime(), new double[6],\n                         pb.getFinalTime(), new double[pb.getDimension()]);\n         Assert.fail(\"an exception should have been thrown\");\n-      } catch (IntegratorException ie) {\n+      } catch (DimensionMismatchException ie) {\n         // expected behavior\n       }\n \n         integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                         pb.getFinalTime(), new double[6]);\n         Assert.fail(\"an exception should have been thrown\");\n-      } catch (IntegratorException ie) {\n+      } catch (DimensionMismatchException ie) {\n         // expected behavior\n       }\n \n         integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                         pb.getFinalTime(), new double[pb.getDimension()]);\n         Assert.fail(\"an exception should have been thrown\");\n-      } catch (IntegratorException ie) {\n+      } catch (DimensionMismatchException ie) {\n         // expected behavior\n       }\n \n         integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                         pb.getFinalTime(), new double[pb.getDimension()]);\n         Assert.fail(\"an exception should have been thrown\");\n-      } catch (IntegratorException ie) {\n+      } catch (DimensionMismatchException ie) {\n         // expected behavior\n       }\n \n         integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                         pb.getInitialTime(), new double[pb.getDimension()]);\n         Assert.fail(\"an exception should have been thrown\");\n-      } catch (IntegratorException ie) {\n+      } catch (NumberIsTooSmallException ie) {\n         // expected behavior\n       }\n \n \n   @Test\n   public void testKepler()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     final TestProblem3 pb  = new TestProblem3(0.9);\n     double minStep = 0;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n \n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n   @Test\n   public void derivativesConsistency()\n-  throws MathUserException, IntegratorException {\n+  {\n     TestProblem3 pb = new TestProblem3(0.1);\n     double minStep = 0;\n     double maxStep = pb.getFinalTime() - pb.getInitialTime();\n \n   @Test\n   public void serialization()\n-    throws MathUserException, IntegratorException,\n-           IOException, ClassNotFoundException {\n+    throws IOException, ClassNotFoundException {\n \n     TestProblem3 pb = new TestProblem3(0.9);\n     double minStep = 0;\n \n   @Test\n   public void checkClone()\n-  throws MathUserException, IntegratorException {\n+  {\n     TestProblem3 pb = new TestProblem3(0.9);\n     double minStep = 0;\n     double maxStep = pb.getFinalTime() - pb.getInitialTime();\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n \n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem5;\n import org.apache.commons.math.ode.TestProblemAbstract;\n import org.apache.commons.math.ode.TestProblemFactory;\n import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n-import org.apache.commons.math.ode.nonstiff.MidpointIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n \n public class MidpointIntegratorTest {\n \n-  @Test\n+  @Test(expected=DimensionMismatchException.class)\n   public void testDimensionCheck() {\n-    try  {\n       TestProblem1 pb = new TestProblem1();\n       new MidpointIntegrator(0.01).integrate(pb,\n                                              0.0, new double[pb.getDimension()+10],\n                                              1.0, new double[pb.getDimension()+10]);\n         Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n   }\n \n   @Test\n   public void testDecreasingSteps()\n-    throws MathUserException, IntegratorException  {\n+     {\n \n     TestProblemAbstract[] problems = TestProblemFactory.getProblems();\n     for (int k = 0; k < problems.length; ++k) {\n \n   @Test\n   public void testSmallStep()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem1 pb  = new TestProblem1();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n \n   @Test\n   public void testBigStep()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem1 pb  = new TestProblem1();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;\n \n   @Test\n   public void testBackward()\n-      throws MathUserException, IntegratorException {\n+      {\n \n       TestProblem5 pb = new TestProblem5();\n       double step = FastMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n \n   @Test\n   public void testStepSize()\n-    throws MathUserException, IntegratorException {\n+    {\n       final double step = 1.23456;\n       FirstOrderIntegrator integ = new MidpointIntegrator(step);\n       integ.addStepHandler(new StepHandler() {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n \n   @Test\n   public void testDerivativesConsistency()\n-  throws MathUserException, IntegratorException {\n+  {\n     TestProblem3 pb = new TestProblem3();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n     MidpointIntegrator integ = new MidpointIntegrator(step);\n \n   @Test\n   public void serialization()\n-    throws MathUserException, IntegratorException,\n-           IOException, ClassNotFoundException {\n+    throws IOException, ClassNotFoundException {\n \n     TestProblem1 pb = new TestProblem1();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.TestProblem5;\n import org.apache.commons.math.ode.TestProblemFactory;\n import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n-import org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n \n public class ThreeEighthesIntegratorTest {\n \n-  @Test\n+  @Test(expected=DimensionMismatchException.class)\n   public void testDimensionCheck() {\n-    try  {\n       TestProblem1 pb = new TestProblem1();\n       new ThreeEighthesIntegrator(0.01).integrate(pb,\n                                                   0.0, new double[pb.getDimension()+10],\n                                                   1.0, new double[pb.getDimension()+10]);\n         Assert.fail(\"an exception should have been thrown\");\n-    } catch(MathUserException de) {\n-      Assert.fail(\"wrong exception caught\");\n-    } catch(IntegratorException ie) {\n-    }\n   }\n \n   @Test\n   public void testDecreasingSteps()\n-    throws MathUserException, IntegratorException  {\n+     {\n \n     TestProblemAbstract[] problems = TestProblemFactory.getProblems();\n     for (int k = 0; k < problems.length; ++k) {\n \n  @Test\n  public void testSmallStep()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem1 pb = new TestProblem1();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n \n   @Test\n   public void testBigStep()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     TestProblem1 pb = new TestProblem1();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;\n \n   @Test\n   public void testBackward()\n-      throws MathUserException, IntegratorException {\n+      {\n \n       TestProblem5 pb = new TestProblem5();\n       double step = FastMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n \n   @Test\n   public void testKepler()\n-    throws MathUserException, IntegratorException {\n+    {\n \n     final TestProblem3 pb  = new TestProblem3(0.9);\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.0003;\n \n   @Test\n   public void testStepSize()\n-    throws MathUserException, IntegratorException {\n+    {\n       final double step = 1.23456;\n       FirstOrderIntegrator integ = new ThreeEighthesIntegrator(step);\n       integ.addStepHandler(new StepHandler() {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n \n   @Test\n   public void derivativesConsistency()\n-  throws MathUserException, IntegratorException {\n+  {\n     TestProblem3 pb = new TestProblem3();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n     ThreeEighthesIntegrator integ = new ThreeEighthesIntegrator(step);\n \n   @Test\n   public void serialization()\n-    throws MathUserException, IntegratorException,\n-           IOException, ClassNotFoundException {\n+    throws IOException, ClassNotFoundException {\n \n     TestProblem3 pb = new TestProblem3(0.9);\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.0003;\n--- a/src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator;\n public class NordsieckStepInterpolatorTest {\n \n     @Test\n-    public void derivativesConsistency()\n-    throws MathUserException, IntegratorException {\n+    public void derivativesConsistency() {\n         TestProblem3 pb = new TestProblem3();\n         AdamsBashforthIntegrator integ = new AdamsBashforthIntegrator(4, 0.0, 1.0, 1.0e-10, 1.0e-10);\n         StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 5e-9);\n \n     @Test\n     public void serialization()\n-    throws MathUserException, IntegratorException,\n-    IOException, ClassNotFoundException {\n+    throws IOException, ClassNotFoundException {\n \n         TestProblem1 pb = new TestProblem1();\n         AdamsBashforthIntegrator integ = new AdamsBashforthIntegrator(4, 0.0, 1.0, 1.0e-10, 1.0e-10);\n--- a/src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n \n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblemAbstract;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n \n     public static void checkDerivativesConsistency(final FirstOrderIntegrator integrator,\n                                                    final TestProblemAbstract problem,\n-                                                   final double threshold)\n-        throws MathUserException, IntegratorException {\n+                                                   final double threshold) {\n         integrator.addStepHandler(new StepHandler() {\n \n             public void handleStep(StepInterpolator interpolator, boolean isLast)\n--- a/src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;\n import org.junit.Test;\n \n     }\n \n     @Test\n-    public void testIncNeither() throws MathUserException, IntegratorException {\n+    public void testIncNeither() {\n         double[] exp = getArray(getExpInc(), getO()[0][0], getO()[0][1]);\n         doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.NEITHER, exp, false);\n     }\n \n     @Test\n-    public void testIncNeitherRev() throws MathUserException, IntegratorException {\n+    public void testIncNeitherRev() {\n         double[] exp = getArray(getExpIncRev(), getO()[1][0], getO()[1][1]);\n         doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.NEITHER, exp, true);\n     }\n \n     @Test\n-    public void testIncFirst() throws MathUserException, IntegratorException {\n+    public void testIncFirst() {\n         double[] exp = getArray(getExpInc(), getO()[2][0], getO()[2][1]);\n         doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.FIRST, exp, false);\n     }\n \n     @Test\n-    public void testIncFirstRev() throws MathUserException, IntegratorException {\n+    public void testIncFirstRev() {\n         double[] exp = getArray(getExpIncRev(), getO()[3][0], getO()[3][1]);\n         doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.FIRST, exp, true);\n     }\n \n     @Test\n-    public void testIncLast() throws MathUserException, IntegratorException {\n+    public void testIncLast() {\n         double[] exp = getArray(getExpInc(), getO()[4][0], getO()[4][1]);\n         doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.LAST, exp, false);\n     }\n \n     @Test\n-    public void testIncLastRev() throws MathUserException, IntegratorException {\n+    public void testIncLastRev() {\n         double[] exp = getArray(getExpIncRev(), getO()[5][0], getO()[5][1]);\n         doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.LAST, exp, true);\n     }\n \n     @Test\n-    public void testIncBoth() throws MathUserException, IntegratorException {\n+    public void testIncBoth() {\n         double[] exp = getArray(getExpInc(), getO()[6][0], getO()[6][1]);\n         doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.BOTH, exp, false);\n     }\n \n     @Test\n-    public void testIncBothRev() throws MathUserException, IntegratorException {\n+    public void testIncBothRev() {\n         double[] exp = getArray(getExpIncRev(), getO()[7][0], getO()[7][1]);\n         doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.BOTH, exp, true);\n     }\n \n     @Test\n-    public void testMulNeither() throws MathUserException, IntegratorException {\n+    public void testMulNeither() {\n         double[] exp = getArray(getExpMul(), getO()[8][0], getO()[8][1]);\n         doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.NEITHER, exp, false);\n     }\n \n     @Test\n-    public void testMulNeitherRev() throws MathUserException, IntegratorException {\n+    public void testMulNeitherRev() {\n         double[] exp = getArray(getExpMulRev(), getO()[9][0], getO()[9][1]);\n         doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.NEITHER, exp, true);\n     }\n \n     @Test\n-    public void testMulFirst() throws MathUserException, IntegratorException {\n+    public void testMulFirst() {\n         double[] exp = getArray(getExpMul(), getO()[10][0], getO()[10][1]);\n         doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.FIRST, exp, false);\n     }\n \n     @Test\n-    public void testMulFirstRev() throws MathUserException, IntegratorException {\n+    public void testMulFirstRev() {\n         double[] exp = getArray(getExpMulRev(), getO()[11][0], getO()[11][1]);\n         doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.FIRST, exp, true);\n     }\n \n     @Test\n-    public void testMulLast() throws MathUserException, IntegratorException {\n+    public void testMulLast() {\n         double[] exp = getArray(getExpMul(), getO()[12][0], getO()[12][1]);\n         doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.LAST, exp, false);\n     }\n \n     @Test\n-    public void testMulLastRev() throws MathUserException, IntegratorException {\n+    public void testMulLastRev() {\n         double[] exp = getArray(getExpMulRev(), getO()[13][0], getO()[13][1]);\n         doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.LAST, exp, true);\n     }\n \n     @Test\n-    public void testMulBoth() throws MathUserException, IntegratorException {\n+    public void testMulBoth() {\n         double[] exp = getArray(getExpMul(), getO()[14][0], getO()[14][1]);\n         doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.BOTH, exp, false);\n     }\n \n     @Test\n-    public void testMulBothRev() throws MathUserException, IntegratorException {\n+    public void testMulBothRev() {\n         double[] exp = getArray(getExpMulRev(), getO()[15][0], getO()[15][1]);\n         doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.BOTH, exp, true);\n     }\n      * @param reverse whether to reverse the integration direction\n      */\n     private void doTest(StepNormalizerMode mode, StepNormalizerBounds bounds,\n-                        double[] expected, boolean reverse)\n-        throws MathUserException, IntegratorException\n-    {\n+                        double[] expected, boolean reverse) {\n         // Forward test.\n         FirstOrderIntegrator integ = new GraggBulirschStoerIntegrator(\n                                                         1e-8, 1.0, 1e-5, 1e-5);\n--- a/src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java\n \n package org.apache.commons.math.ode.sampling;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;\n-import org.apache.commons.math.ode.sampling.FixedStepHandler;\n-import org.apache.commons.math.ode.sampling.StepNormalizer;\n import org.apache.commons.math.util.FastMath;\n import org.junit.After;\n import org.junit.Assert;\n \n   @Test\n   public void testBoundaries()\n-    throws MathUserException, IntegratorException {\n+    {\n     double range = pb.getFinalTime() - pb.getInitialTime();\n     setLastSeen(false);\n     integ.addStepHandler(new StepNormalizer(range / 10.0,\n \n   @Test\n   public void testBeforeEnd()\n-    throws MathUserException, IntegratorException {\n+    {\n     final double range = pb.getFinalTime() - pb.getInitialTime();\n     setLastSeen(false);\n     integ.addStepHandler(new StepNormalizer(range / 10.5,", "timestamp": 1314976291, "metainfo": ""}