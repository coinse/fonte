{"sha": "3771c80880835b4e294a67eab962686d8386dc74", "log": "Changed getN() to return long. Changed evalutate() to return NaN if sample size is less than 3 (consistent w/ getResult()).   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.24 $ $Date: 2004/07/04 09:02:36 $\n+ * @version $Revision: 1.25 $ $Date: 2004/07/10 17:02:43 $\n  */\n public class Skewness extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getN()\n      */\n-    public double getN() {\n+    public long getN() {\n         return moment.getN();\n     }\n     \n         // Initialize the skewness\n         double skew = Double.NaN;\n \n-        if (test(values, begin, length)) {\n+        if (test(values, begin, length) && length > 2 ){\n             Mean mean = new Mean();\n-            if (length <= 2) {\n-                skew = 0.0;\n-            } else {\n-                // Get the mean and the standard deviation\n-                double m = mean.evaluate(values, begin, length);\n-\n-                // Calc the std, this is implemented here instead\n-                // of using the standardDeviation method eliminate\n-                // a duplicate pass to get the mean\n-                double accum = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    accum += Math.pow((values[i] - m), 2.0);\n-                    accum2 += (values[i] - m);\n-                }\n-                double stdDev = Math.sqrt((accum - (Math.pow(accum2, 2) / ((double) length))) /\n-                        (double) (length - 1));\n-\n-                double accum3 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    accum3 += Math.pow(values[i] - m, 3.0d);\n-                }\n-                accum3 /= Math.pow(stdDev, 3.0d);\n-\n-                // Get N\n-                double n0 = length;\n-\n-                // Calculate skewness\n-                skew = (n0 / ((n0 - 1) * (n0 - 2))) * accum3;\n+            // Get the mean and the standard deviation\n+            double m = mean.evaluate(values, begin, length);\n+            \n+            // Calc the std, this is implemented here instead\n+            // of using the standardDeviation method eliminate\n+            // a duplicate pass to get the mean\n+            double accum = 0.0;\n+            double accum2 = 0.0;\n+            for (int i = begin; i < begin + length; i++) {\n+                accum += Math.pow((values[i] - m), 2.0);\n+                accum2 += (values[i] - m);\n             }\n+            double stdDev = Math.sqrt((accum - (Math.pow(accum2, 2) / ((double) length))) /\n+                    (double) (length - 1));\n+            \n+            double accum3 = 0.0;\n+            for (int i = begin; i < begin + length; i++) {\n+                accum3 += Math.pow(values[i] - m, 3.0d);\n+            }\n+            accum3 /= Math.pow(stdDev, 3.0d);\n+            \n+            // Get N\n+            double n0 = length;\n+            \n+            // Calculate skewness\n+            skew = (n0 / ((n0 - 1) * (n0 - 2))) * accum3;\n         }\n-\n         return skew;\n     }\n-\n }", "timestamp": 1089478963, "metainfo": ""}