{"sha": "82074a733ad19a6e8c3ea15b9556a46d9c597b33", "log": "Addition of sumLog method (natural) to get the sum of the Logs. Altered GeometricMean to calculate the geometricMean from the sum of logs.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/java/org/apache/commons/math/stat/StatUtils.java\n      * Returns the product for this collection of values\n      * @param values Is a double[] containing the values\n      * @return the product values or Double.NaN if the array is empty\n-\t */\n+     */\n     public static double product(double[] values) {\n         double product = Double.NaN;\n         if( values.length > 0 ) {\n     }\n     \n     /**\n+     * Returns the sum of the natural logs for this collection of values\n+     * @param values Is a double[] containing the values\n+     * @return the sumLog value or Double.NaN if the array is empty\n+\t */\n+    public static double sumLog(double[] values) {\n+        double sumLog = Double.NaN;\n+        if( values.length > 0 ) {\n+            sumLog = 0.0;\n+            for( int i = 0; i < values.length; i++) {\n+                sumLog += Math.log(values[i]);\n+            }\n+        }\n+        return sumLog;\n+    }\n+    \n+    /**\n      * Returns the geometric mean for this collection of values\n      * @param values Is a double[] containing the values\n      * @return the geometric mean or Double.NaN if the array is empty or\n      * any of the values are &lt;= 0.\n \t */\n     public static double geometricMean(double[] values) {\n-        return Math.pow(product(values),(1.0/values.length));\n+        return Math.exp(sumLog(values) / (double)values.length);\n     }\n \n \t/**\n      * @return the mean of the values or Double.NaN if the array is empty\n \t */\n \tpublic static double mean(double[] values) {\n-\t\treturn sum(values) / values.length;\n+\t\treturn sum(values) / (double)values.length;\n \t}\n \n     /**\n \t\t\tfor (int i = 0; i < values.length; i++) {\n \t\t\t\taccum += Math.pow((values[i] - mean), 2.0);\n \t\t\t}\n-\t\t\tvariance = accum / (values.length - 1);\n+\t\t\tvariance = accum / (double)(values.length - 1);\n \t\t}\n \t\treturn variance;\n \t}", "timestamp": 1055901363, "metainfo": ""}