{"sha": "89153e715c6b22bff7f837bf553c5095028a6621", "log": "Moved o.a.c.m.transform.FastFourierTransformer.isPowerOf2 to o.a.c.m.util.ArithmeticUtils.isPowerOfTwo (MATH-677).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n import org.apache.commons.math.exception.NonMonotonicSequenceException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.util.ArithmeticUtils;\n import org.apache.commons.math.util.FastMath;\n \n /**\n         final double[] transformed = new double[f.length];\n \n         final int n = f.length - 1;\n-        if (!FastFourierTransformer.isPowerOf2(n)) {\n+        if (!ArithmeticUtils.isPowerOfTwo(n)) {\n             throw new MathIllegalArgumentException(\n                 LocalizedFormats.NOT_POWER_OF_TWO_PLUS_ONE,\n                 Integer.valueOf(f.length));\n--- a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.ZeroException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.util.ArithmeticUtils;\n import org.apache.commons.math.util.FastMath;\n \n /**\n     }\n \n     /**\n-     * Returns true if the argument is a power of 2.\n-     *\n-     * @param n the number to test\n-     * @return true if the argument is a power of 2\n-     */\n-    public static boolean isPowerOf2(long n) {\n-        return (n > 0) && ((n & (n - 1)) == 0);\n-    }\n-\n-    /**\n      * Verifies that the data set has length of power of 2.\n      *\n      * @param d the data array\n     public static void verifyDataSet(double[] d)\n         throws MathIllegalArgumentException {\n \n-        if (!isPowerOf2(d.length)) {\n+        if (!ArithmeticUtils.isPowerOfTwo(d.length)) {\n             throw new MathIllegalArgumentException(\n                     LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING,\n                     Integer.valueOf(d.length));\n     public static void verifyDataSet(Object[] o)\n         throws MathIllegalArgumentException {\n \n-        if (!isPowerOf2(o.length)) {\n+        if (!ArithmeticUtils.isPowerOfTwo(o.length)) {\n             throw new MathIllegalArgumentException(\n                     LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING,\n                     Integer.valueOf(o.length));\n--- a/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n import org.apache.commons.math.exception.NonMonotonicSequenceException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.util.ArithmeticUtils;\n \n /**\n  * Implements the <a href=\"http://www.archive.chipcenter.com/dsp/DSP000517F1.html\">Fast Hadamard Transform</a> (FHT).\n         final int n     = x.length;\n         final int halfN = n / 2;\n \n-        if (!FastFourierTransformer.isPowerOf2(n)) {\n+        if (!ArithmeticUtils.isPowerOfTwo(n)) {\n             throw new MathIllegalArgumentException(\n                     LocalizedFormats.NOT_POWER_OF_TWO,\n                     Integer.valueOf(n));\n         final int n     = x.length;\n         final int halfN = n / 2;\n \n-        if (!FastFourierTransformer.isPowerOf2(n)) {\n+        if (!ArithmeticUtils.isPowerOfTwo(n)) {\n             throw new MathIllegalArgumentException(\n                     LocalizedFormats.NOT_POWER_OF_TWO,\n                     Integer.valueOf(n));\n--- a/src/main/java/org/apache/commons/math/util/ArithmeticUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/ArithmeticUtils.java\n \n import java.math.BigInteger;\n import org.apache.commons.math.exception.MathArithmeticException;\n-import org.apache.commons.math.exception.MathIllegalNumberException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.NumberIsTooLargeException;\n import org.apache.commons.math.exception.util.Localizable;\n             throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);\n         }\n     }\n+\n+    /**\n+     * Returns true if the argument is a power of two.\n+     *\n+     * @param n the number to test\n+     * @return true if the argument is a power of two\n+     */\n+    public static boolean isPowerOfTwo(long n) {\n+        return (n > 0) && ((n & (n - 1)) == 0);\n+    }\n }\n--- a/src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java\n package org.apache.commons.math.util;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n     }\n \n+    @Test\n+    public void testIsPowerOfTwo() {\n+        final int n = 1025;\n+        final boolean[] expected = new boolean[n];\n+        Arrays.fill(expected, false);\n+        for (int i = 1; i < expected.length; i *= 2) {\n+            expected[i] = true;\n+        }\n+        for (int i = 0; i < expected.length; i++) {\n+            final boolean actual = ArithmeticUtils.isPowerOfTwo(i);\n+            Assert.assertTrue(Integer.toString(i), actual == expected[i]);\n+        }\n+    }\n+\n     /**\n      * Exact (caching) recursive implementation to test against\n      */\n         } catch (MathArithmeticException ex) {\n             // success\n         }\n-\n     }\n }", "timestamp": 1325648866, "metainfo": ""}