{"sha": "f0563209e6bb47cdb70e3b98287fe57d56b415a2", "log": "MATH-854: populated throws clause of FieldMatrix.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/FieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/FieldMatrix.java\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n-import org.apache.commons.math3.exception.ZeroException;\n \n /**\n  * Interface defining field-valued matrix with basic algebraic operations.\n   throws MatrixDimensionMismatchException, NoDataException, NullArgumentException,\n   OutOfRangeException;\n \n-   /**\n-    * Replace the submatrix starting at {@code (row, column)} using data in\n-    * the input {@code subMatrix} array. Indexes are 0-based.\n-    * <p>\n-    * Example:<br>\n-    * Starting with <pre>\n-    * 1  2  3  4\n-    * 5  6  7  8\n-    * 9  0  1  2\n-    * </pre>\n-    * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking\n-    * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>\n-    * 1  2  3  4\n-    * 5  3  4  8\n-    * 9  5  6  2\n-    * </pre></p>\n-    *\n-    * @param subMatrix Array containing the submatrix replacement data.\n-    * @param row Row coordinate of the top-left element to be replaced.\n-    * @param column Column coordinate of the top-left element to be replaced.\n-    * @throws MatrixDimensionMismatchException\n-    * if {@code subMatrix} does not fit into this matrix from element in\n-    * {@code (row, column)}.\n-    * @throws org.apache.commons.math3.exception.ZeroException if a row or column\n-    * of {@code subMatrix} is empty.\n-    * @throws org.apache.commons.math3.exception.DimensionMismatchException\n-    * if {@code subMatrix} is not rectangular (not all rows have the same\n-    * length).\n-    * @throws org.apache.commons.math3.exception.NullArgumentException\n-    * if {@code subMatrix} is {@code null}.\n-    * @since 2.0\n-    */\n+    /**\n+     * Replace the submatrix starting at {@code (row, column)} using data in the\n+     * input {@code subMatrix} array. Indexes are 0-based.\n+     * <p>\n+     * Example:<br>\n+     * Starting with\n+     *\n+     * <pre>\n+     * 1  2  3  4\n+     * 5  6  7  8\n+     * 9  0  1  2\n+     * </pre>\n+     *\n+     * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking\n+     * <code>setSubMatrix(subMatrix,1,1))</code> will result in\n+     *\n+     * <pre>\n+     * 1  2  3  4\n+     * 5  3  4  8\n+     * 9  5  6  2\n+     * </pre>\n+     *\n+     * </p>\n+     *\n+     * @param subMatrix Array containing the submatrix replacement data.\n+     * @param row Row coordinate of the top-left element to be replaced.\n+     * @param column Column coordinate of the top-left element to be replaced.\n+     * @throws OutOfRangeException if {@code subMatrix} does not fit into this\n+     * matrix from element in {@code (row, column)}.\n+     * @throws NoDataException if a row or column of {@code subMatrix} is empty.\n+     * @throws DimensionMismatchException if {@code subMatrix} is not\n+     * rectangular (not all rows have the same length).\n+     * @throws NullArgumentException if {@code subMatrix} is {@code null}.\n+     * @since 2.0\n+     */\n     void setSubMatrix(T[][] subMatrix, int row, int column)\n-    throws DimensionMismatchException, MatrixDimensionMismatchException,\n-           NullArgumentException, ZeroException;\n+        throws DimensionMismatchException, OutOfRangeException,\n+        NullArgumentException, NoDataException;\n \n    /**\n     * Get the entries in row number {@code row}\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n      * @throws OutOfRangeException if the indices are not valid.\n+     * @throws NumberIsTooSmallException if {@code endRow < startRow} or\n+     * {@code endColumn < startColumn}.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)\n      */\n     T walkInRowOrder(FieldMatrixChangingVisitor<T> visitor,\n                      int startRow, int endRow, int startColumn, int endColumn)\n-    throws OutOfRangeException;\n+    throws OutOfRangeException, NumberIsTooSmallException;\n \n     /**\n      * Visit (but don't change) some matrix entries in row order.\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n      * @throws OutOfRangeException if the indices are not valid.\n+     * @throws NumberIsTooSmallException if {@code endRow < startRow} or\n+     * {@code endColumn < startColumn}.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      */\n     T walkInRowOrder(FieldMatrixPreservingVisitor<T> visitor,\n                      int startRow, int endRow, int startColumn, int endColumn)\n-    throws OutOfRangeException;\n+    throws OutOfRangeException, NumberIsTooSmallException;\n \n     /**\n      * Visit (and possibly change) all matrix entries in column order.", "timestamp": 1349154878, "metainfo": ""}