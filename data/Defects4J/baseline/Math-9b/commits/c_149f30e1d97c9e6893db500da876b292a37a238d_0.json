{"sha": "149f30e1d97c9e6893db500da876b292a37a238d", "log": "Modified to extent ContinuousDistrbutionAbstractTest. Improved coverage.   ", "commit": "\n--- a/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n  */\n package org.apache.commons.math.distribution;\n \n-import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.13 $ $Date: 2004/05/23 21:34:19 $\n+ * Test cases for FDistribution.\n+ * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n+ * ContinuousDistributionAbstractTest for details.\n+ * \n+ * @version $Revision: 1.14 $ $Date: 2004/05/30 01:39:33 $\n  */\n-public class FDistributionTest extends TestCase {\n-    private FDistribution f;\n+public class FDistributionTest extends ContinuousDistributionAbstractTest {\n \n     /**\n-     * Constructor for ChiSquareDistributionTest.\n+     * Constructor for FDistributionTest.\n      * @param name\n      */\n     public FDistributionTest(String name) {\n         super(name);\n     }\n \n-    /*\n-     * @see TestCase#setUp()\n-     */\n-    protected void setUp() throws Exception {\n+    //-------------- Implementations for abstract methods -----------------------\n+    \n+    /** Creates the default continuous distribution instance to use in tests. */\n+    public ContinuousDistribution makeDistribution() {\n+        return DistributionFactory.newInstance().createFDistribution(5.0, 6.0);\n+    }   \n+    \n+    /** Creates the default cumulative probability distribution test input values */\n+    public double[] makeCumulativeTestPoints() {\n+        // quantiles computed using R version 1.8.1 (linux version)\n+        return new double[] {0.03468084d ,0.09370091d, 0.1433137d,\n+            0.2020084d, 0.2937283d, 20.80266d, 8.745895d, 5.987565d, \n+            4.387374d, 3.107512d};\n+    }\n+    \n+    /** Creates the default cumulative probability density test expected values */\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n+                0.990d, 0.975d, 0.950d, 0.900d}; \n+    }\n+    \n+    // --------------------- Override tolerance  --------------\n+    protected void setup() throws Exception {\n         super.setUp();\n-        f = DistributionFactory.newInstance().createFDistribution(5.0, 6.0);\n+        setTolerance(1E-6);\n     }\n \n-    /*\n-     * @see TestCase#tearDown()\n-     */\n-    protected void tearDown() throws Exception {\n-        f = null;\n-        super.tearDown();\n+    //---------------------------- Additional test cases -------------------------\n+\n+    public void testCumulativeProbabilityExtremes() throws Exception {\n+        setCumulativeTestPoints(new double[] {-2, 0});\n+        setCumulativeTestValues(new double[] {0, 0});\n+        verifyCumulativeProbabilities();\n     }\n \n-    public void testLowerTailProbability() throws Exception {\n-        testProbability(1.0 / 10.67, .010);\n-        testProbability(1.0 / 6.98, .025);\n-        testProbability(1.0 / 4.95, .050);\n-        testProbability(1.0 / 3.40, .100);\n+    public void testInverseCumulativeProbabilityExtremes() throws Exception {\n+        //TODO: decide what to do about p = 1.  This currently blows up the solver.\n+        setInverseCumulativeTestPoints(new double[] {0});\n+        setInverseCumulativeTestValues(new double[] {0});\n+        verifyInverseCumulativeProbabilities();\n     }\n+    \n+    public void testDfAccessors() {\n+        FDistribution distribution = (FDistribution) getDistribution();\n+        assertEquals(5d, distribution.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE);\n+        distribution.setNumeratorDegreesOfFreedom(4d);\n+        assertEquals(4d, distribution.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE);\n+        assertEquals(6d, distribution.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE);\n+        distribution.setDenominatorDegreesOfFreedom(4d);\n+        assertEquals(4d, distribution.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE);\n+        try {\n+            distribution.setNumeratorDegreesOfFreedom(0d);\n+            fail(\"Expecting IllegalArgumentException for df = 0\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            distribution.setDenominatorDegreesOfFreedom(0d);\n+            fail(\"Expecting IllegalArgumentException for df = 0\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    } \n \n-    public void testUpperTailProbability() throws Exception {\n-        testProbability(8.75, .990);\n-        testProbability(5.99, .975);\n-        testProbability(4.39, .950);\n-        testProbability(3.11, .900);\n-    }\n-\n-    public void testLowerTailValues() throws Exception {\n-        testValue(1.0 / 10.67, .010);\n-        testValue(1.0 / 6.98, .025);\n-        testValue(1.0 / 4.95, .050);\n-        testValue(1.0 / 3.40, .100);\n-    }\n-\n-    public void testUpperTailValues() throws Exception {\n-        testValue(8.75, .990);\n-        testValue(5.99, .975);\n-        testValue(4.39, .950);\n-        testValue(3.11, .900);\n-    }\n-\n-    private void testProbability(double x, double expected) throws Exception {\n-\t\tdouble actual = f.cumulativeProbability(x);\n-        assertEquals(\"probability for \" + x, expected, actual, 1e-3);\n-    }\n-\n-    private void testValue(double expected, double p) throws Exception {\n-        double actual = f.inverseCumulativeProbability(p);\n-        assertEquals(\"value for \" + p, expected, actual, 1e-2);\n-    }\n }", "timestamp": 1085881173, "metainfo": ""}