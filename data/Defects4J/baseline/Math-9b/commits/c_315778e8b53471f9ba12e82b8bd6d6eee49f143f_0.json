{"sha": "315778e8b53471f9ba12e82b8bd6d6eee49f143f", "log": "improved consistency between solvers/integrators by providing the integrand function as a parameter to integrate rather that at construction, thus allowing reuse of a configured integrator Jira: MATH-218  ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n+++ b/src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n  */\n public class RombergIntegrator extends UnivariateRealIntegratorImpl {\n \n-    /** serializable version identifier */\n-    private static final long serialVersionUID = -1058849527738180243L;\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 4616482344304576900L;\n \n     /**\n      * Construct an integrator for the given function.\n      * \n      * @param f function to integrate\n+     * @deprecated as of 2.0 the integrand function is passed as an argument\n+     * to the {@link #integrate(UnivariateRealFunction, double, double)}method.\n      */\n+    @Deprecated\n     public RombergIntegrator(UnivariateRealFunction f) {\n         super(f, 32);\n     }\n \n+    /**\n+     * Construct an integrator.\n+     */\n+    public RombergIntegrator() {\n+        super(32);\n+    }\n+\n     /** {@inheritDoc} */\n-   public double integrate(double min, double max) throws MaxIterationsExceededException,\n-        FunctionEvaluationException, IllegalArgumentException {\n+    @Deprecated\n+    public double integrate(final double min, final double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException, IllegalArgumentException {\n+        return integrate(f, min, max);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double integrate(final UnivariateRealFunction f,\n+                            final double min, final double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException, IllegalArgumentException {\n         \n         int i = 1, j, m = maximalIterationCount + 1;\n         // Array structure here can be improved for better space\n         verifyInterval(min, max);\n         verifyIterationCount();\n \n-        TrapezoidIntegrator qtrap = new TrapezoidIntegrator(this.f);\n-        t[0][0] = qtrap.stage(min, max, 0);\n+        TrapezoidIntegrator qtrap = new TrapezoidIntegrator();\n+        t[0][0] = qtrap.stage(f, min, max, 0);\n         olds = t[0][0];\n         while (i <= maximalIterationCount) {\n-            t[i][0] = qtrap.stage(min, max, i);\n+            t[i][0] = qtrap.stage(f, min, max, i);\n             for (j = 1; j <= i; j++) {\n                 // Richardson extrapolation coefficient\n                 r = (1L << (2 * j)) -1;\n--- a/src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n+++ b/src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n  */\n public class SimpsonIntegrator extends UnivariateRealIntegratorImpl {\n \n-    /** serializable version identifier */\n-    private static final long serialVersionUID = 3405465123320678216L;\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 2535890386567281329L;\n \n     /**\n      * Construct an integrator for the given function.\n      * \n      * @param f function to integrate\n+     * @deprecated as of 2.0 the integrand function is passed as an argument\n+     * to the {@link #integrate(UnivariateRealFunction, double, double)}method.\n      */\n+    @Deprecated\n     public SimpsonIntegrator(UnivariateRealFunction f) {\n         super(f, 64);\n     }\n \n+    /**\n+     * Construct an integrator.\n+     */\n+    public SimpsonIntegrator() {\n+        super(64);\n+    }\n+\n     /** {@inheritDoc} */\n-    public double integrate(double min, double max) throws MaxIterationsExceededException,\n-        FunctionEvaluationException, IllegalArgumentException {\n+    @Deprecated\n+    public double integrate(final double min, final double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException, IllegalArgumentException {\n+        return integrate(f, min, max);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double integrate(final UnivariateRealFunction f,\n+                            final double min, final double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException, IllegalArgumentException {\n         \n         int i = 1;\n         double s, olds, t, oldt;\n         verifyInterval(min, max);\n         verifyIterationCount();\n \n-        TrapezoidIntegrator qtrap = new TrapezoidIntegrator(this.f);\n+        TrapezoidIntegrator qtrap = new TrapezoidIntegrator();\n         if (minimalIterationCount == 1) {\n-            s = (4 * qtrap.stage(min, max, 1) - qtrap.stage(min, max, 0)) / 3.0;\n+            s = (4 * qtrap.stage(f, min, max, 1) - qtrap.stage(f, min, max, 0)) / 3.0;\n             setResult(s, 1);\n             return result;\n         }\n         // Simpson's rule requires at least two trapezoid stages.\n         olds = 0;\n-        oldt = qtrap.stage(min, max, 0);\n+        oldt = qtrap.stage(f, min, max, 0);\n         while (i <= maximalIterationCount) {\n-            t = qtrap.stage(min, max, i);\n+            t = qtrap.stage(f, min, max, i);\n             s = (4 * t - oldt) / 3.0;\n             if (i >= minimalIterationCount) {\n                 final double delta = Math.abs(s - olds);\n--- a/src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n+++ b/src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n  */\n public class TrapezoidIntegrator extends UnivariateRealIntegratorImpl {\n \n-    /** serializable version identifier */\n-    private static final long serialVersionUID = 4978222553983172543L;\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 6963842845860399200L;\n \n-    /** intermediate result */\n+    /** Intermediate result. */\n     private double s;\n \n     /**\n      * Construct an integrator for the given function.\n      * \n      * @param f function to integrate\n+     * @deprecated as of 2.0 the integrand function is passed as an argument\n+     * to the {@link #integrate(UnivariateRealFunction, double, double)}method.\n      */\n+    @Deprecated\n     public TrapezoidIntegrator(UnivariateRealFunction f) {\n         super(f, 64);\n+    }\n+\n+    /**\n+     * Construct an integrator.\n+     */\n+    public TrapezoidIntegrator() {\n+        super(64);\n     }\n \n     /**\n      * arbitrary m sections because this configuration can best utilize the\n      * alrealy computed values.</p>\n      *\n+     * @param f the integrand function\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * @param n the stage of 1/2 refinement, n = 0 is no refinement\n      * @throws FunctionEvaluationException if an error occurs evaluating the\n      * function\n      */\n-    double stage(double min, double max, int n) throws\n-        FunctionEvaluationException {\n+    double stage(final UnivariateRealFunction f,\n+                 final double min, final double max, final int n)\n+        throws FunctionEvaluationException {\n         \n         long i, np;\n         double x, spacing, sum = 0;\n     }\n \n     /** {@inheritDoc} */\n-    public double integrate(double min, double max) throws MaxIterationsExceededException,\n-        FunctionEvaluationException, IllegalArgumentException {\n+    @Deprecated\n+    public double integrate(final double min, final double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException, IllegalArgumentException {\n+        return integrate(f, min, max);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double integrate(final UnivariateRealFunction f,\n+                            final double min, final double max)\n+        throws MaxIterationsExceededException, FunctionEvaluationException, IllegalArgumentException {\n         \n         int i = 1;\n         double t, oldt;\n         verifyInterval(min, max);\n         verifyIterationCount();\n \n-        oldt = stage(min, max, 0);\n+        oldt = stage(f, min, max, 0);\n         while (i <= maximalIterationCount) {\n-            t = stage(min, max, i);\n+            t = stage(f, min, max, i);\n             if (i >= minimalIterationCount) {\n                 final double delta = Math.abs(t - oldt);\n                 final double rLimit =\n--- a/src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java\n+++ b/src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java\n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.ConvergingAlgorithm;\n import org.apache.commons.math.FunctionEvaluationException;\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n \n /**\n  * Interface for univariate real integration algorithms.\n      * function\n      * @throws IllegalArgumentException if min > max or the endpoints do not\n      * satisfy the requirements specified by the integrator\n+     * @deprecated replaced by {@link #integrate(UnivariateRealFunction, double, double)}\n+     * since 2.0\n      */\n+    @Deprecated\n     double integrate(double min, double max) throws ConvergenceException, \n+        FunctionEvaluationException, IllegalArgumentException;\n+\n+    /**\n+     * Integrate the function in the given interval.\n+     * \n+     * @param min the lower bound for the interval\n+     * @param max the upper bound for the interval\n+     * @return the value of integral\n+     * @throws ConvergenceException if the maximum iteration count is exceeded\n+     * or the integrator detects convergence problems otherwise\n+     * @throws FunctionEvaluationException if an error occurs evaluating the\n+     * function\n+     * @throws IllegalArgumentException if min > max or the endpoints do not\n+     * satisfy the requirements specified by the integrator\n+     */\n+    double integrate(UnivariateRealFunction f, double min, double max) throws ConvergenceException, \n         FunctionEvaluationException, IllegalArgumentException;\n \n     /**\n--- a/src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n     /** the last computed integral */\n     protected double result;\n \n-    /** the integrand function */\n+    /** The integrand functione.\n+     * @deprecated as of 2.0 the integrand function is passed as an argument\n+     * to the {@link #integrate(UnivariateRealFunction, double, double)}method. */\n+    @Deprecated\n     protected UnivariateRealFunction f;\n \n     /**\n      * @param defaultMaximalIterationCount maximum number of iterations\n      * @throws IllegalArgumentException if f is null or the iteration\n      * limits are not valid\n+     * @deprecated as of 2.0 the integrand function is passed as an argument\n+     * to the {@link #integrate(UnivariateRealFunction, double, double)}method.\n      */\n+    @Deprecated\n     protected UnivariateRealIntegratorImpl(final UnivariateRealFunction f,\n                                            final int defaultMaximalIterationCount)\n         throws IllegalArgumentException {\n         }\n \n         this.f = f;\n+\n+        // parameters that are problem specific\n+        setRelativeAccuracy(1.0e-6);\n+        this.defaultMinimalIterationCount = 3;\n+        this.minimalIterationCount = defaultMinimalIterationCount;\n+        \n+        verifyIterationCount();\n+    }\n+\n+    /**\n+     * Construct an integrator with given iteration count and accuracy.\n+     * \n+     * @param defaultMaximalIterationCount maximum number of iterations\n+     * @throws IllegalArgumentException if f is null or the iteration\n+     * limits are not valid\n+     */\n+    protected UnivariateRealIntegratorImpl(final int defaultMaximalIterationCount)\n+        throws IllegalArgumentException {\n+        super(defaultMaximalIterationCount, 1.0e-15);\n \n         // parameters that are problem specific\n         setRelativeAccuracy(1.0e-6);\n--- a/src/test/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java\n      */\n     public void testSinFunction() throws MathException {\n         UnivariateRealFunction f = new SinFunction();\n-        UnivariateRealIntegrator integrator = new RombergIntegrator(f);\n+        UnivariateRealIntegrator integrator = new RombergIntegrator();\n         double min, max, expected, result, tolerance;\n \n         min = 0; max = Math.PI; expected = 2;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n \n         min = -Math.PI/3; max = 0; expected = -0.5;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n     }\n \n      */\n     public void testQuinticFunction() throws MathException {\n         UnivariateRealFunction f = new QuinticFunction();\n-        UnivariateRealIntegrator integrator = new RombergIntegrator(f);\n+        UnivariateRealIntegrator integrator = new RombergIntegrator();\n         double min, max, expected, result, tolerance;\n \n         min = 0; max = 1; expected = -1.0/48;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n \n         min = 0; max = 0.5; expected = 11.0/768;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n \n         min = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n     }\n \n      */\n     public void testParameters() throws Exception {\n         UnivariateRealFunction f = new SinFunction();\n-        UnivariateRealIntegrator integrator = new RombergIntegrator(f);\n+        UnivariateRealIntegrator integrator = new RombergIntegrator();\n \n         try {\n             // bad interval\n-            integrator.integrate(1, -1);\n+            integrator.integrate(f, 1, -1);\n             fail(\"Expecting IllegalArgumentException - bad interval\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n             // bad iteration limits\n             integrator.setMinimalIterationCount(5);\n             integrator.setMaximalIterationCount(4);\n-            integrator.integrate(-1, 1);\n+            integrator.integrate(f, -1, 1);\n             fail(\"Expecting IllegalArgumentException - bad iteration limits\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n             // bad iteration limits\n             integrator.setMinimalIterationCount(10);\n             integrator.setMaximalIterationCount(50);\n-            integrator.integrate(-1, 1);\n+            integrator.integrate(f, -1, 1);\n             fail(\"Expecting IllegalArgumentException - bad iteration limits\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n--- a/src/test/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java\n      */\n     public void testSinFunction() throws MathException {\n         UnivariateRealFunction f = new SinFunction();\n-        UnivariateRealIntegrator integrator = new SimpsonIntegrator(f);\n+        UnivariateRealIntegrator integrator = new SimpsonIntegrator();\n         double min, max, expected, result, tolerance;\n \n         min = 0; max = Math.PI; expected = 2;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n \n         min = -Math.PI/3; max = 0; expected = -0.5;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n     }\n \n      */\n     public void testQuinticFunction() throws MathException {\n         UnivariateRealFunction f = new QuinticFunction();\n-        UnivariateRealIntegrator integrator = new SimpsonIntegrator(f);\n+        UnivariateRealIntegrator integrator = new SimpsonIntegrator();\n         double min, max, expected, result, tolerance;\n \n         min = 0; max = 1; expected = -1.0/48;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n \n         min = 0; max = 0.5; expected = 11.0/768;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n \n         min = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n     }\n \n      */\n     public void testParameters() throws Exception {\n         UnivariateRealFunction f = new SinFunction();\n-        UnivariateRealIntegrator integrator = new SimpsonIntegrator(f);\n+        UnivariateRealIntegrator integrator = new SimpsonIntegrator();\n \n         try {\n             // bad interval\n-            integrator.integrate(1, -1);\n+            integrator.integrate(f, 1, -1);\n             fail(\"Expecting IllegalArgumentException - bad interval\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n             // bad iteration limits\n             integrator.setMinimalIterationCount(5);\n             integrator.setMaximalIterationCount(4);\n-            integrator.integrate(-1, 1);\n+            integrator.integrate(f, -1, 1);\n             fail(\"Expecting IllegalArgumentException - bad iteration limits\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n             // bad iteration limits\n             integrator.setMinimalIterationCount(10);\n             integrator.setMaximalIterationCount(99);\n-            integrator.integrate(-1, 1);\n+            integrator.integrate(f, -1, 1);\n             fail(\"Expecting IllegalArgumentException - bad iteration limits\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n--- a/src/test/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java\n      */\n     public void testSinFunction() throws MathException {\n         UnivariateRealFunction f = new SinFunction();\n-        UnivariateRealIntegrator integrator = new TrapezoidIntegrator(f);\n+        UnivariateRealIntegrator integrator = new TrapezoidIntegrator();\n         double min, max, expected, result, tolerance;\n \n         min = 0; max = Math.PI; expected = 2;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n \n         min = -Math.PI/3; max = 0; expected = -0.5;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n     }\n \n      */\n     public void testQuinticFunction() throws MathException {\n         UnivariateRealFunction f = new QuinticFunction();\n-        UnivariateRealIntegrator integrator = new TrapezoidIntegrator(f);\n+        UnivariateRealIntegrator integrator = new TrapezoidIntegrator();\n         double min, max, expected, result, tolerance;\n \n         min = 0; max = 1; expected = -1.0/48;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n \n         min = 0; max = 0.5; expected = 11.0/768;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n \n         min = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;\n         tolerance = Math.abs(expected * integrator.getRelativeAccuracy());\n-        result = integrator.integrate(min, max);\n+        result = integrator.integrate(f, min, max);\n         assertEquals(expected, result, tolerance);\n     }\n \n      */\n     public void testParameters() throws Exception {\n         UnivariateRealFunction f = new SinFunction();\n-        UnivariateRealIntegrator integrator = new TrapezoidIntegrator(f);\n+        UnivariateRealIntegrator integrator = new TrapezoidIntegrator();\n \n         try {\n             // bad interval\n-            integrator.integrate(1, -1);\n+            integrator.integrate(f, 1, -1);\n             fail(\"Expecting IllegalArgumentException - bad interval\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n             // bad iteration limits\n             integrator.setMinimalIterationCount(5);\n             integrator.setMaximalIterationCount(4);\n-            integrator.integrate(-1, 1);\n+            integrator.integrate(f, -1, 1);\n             fail(\"Expecting IllegalArgumentException - bad iteration limits\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n             // bad iteration limits\n             integrator.setMinimalIterationCount(10);\n             integrator.setMaximalIterationCount(99);\n-            integrator.integrate(-1, 1);\n+            integrator.integrate(f, -1, 1);\n             fail(\"Expecting IllegalArgumentException - bad iteration limits\");\n         } catch (IllegalArgumentException ex) {\n             // expected", "timestamp": 1232312775, "metainfo": ""}