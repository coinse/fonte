{"sha": "b30bff0126e1a0301a8b86b40a0b532f1d0ae28f", "log": "fixed checkstyle warnings  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/ComposableFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/ComposableFunction.java\n             return 1/d;\n         }\n     };\n-    \n+\n     /** The {@code Math.sin} method wrapped as a {@link ComposableFunction}. */\n     public static final ComposableFunction SIN = new ComposableFunction() {\n         /** {@inheritDoc} */\n             return Math.log10(d);\n         }\n     };\n-    \n+\n     /** The {@code Math.log1p} method wrapped as a {@link ComposableFunction}. */\n     public static final ComposableFunction LOG1P = new ComposableFunction () {\n         public double value(double d){\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n             throw new IllegalArgumentException(e);\n         }\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public RealVector mapExp() {\n         return copy().mapExpToSelf();\n             throw new IllegalArgumentException(e);\n         }\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public RealVector mapExpm1() {\n         return copy().mapExpm1ToSelf();\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public RealVector mapExpm1ToSelf() {\n         try {\n             throw new IllegalArgumentException(e);\n         }\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public RealVector mapFloor() {\n         return copy().mapFloorToSelf();\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public RealVector mapFloorToSelf() {\n         try {\n             throw new IllegalArgumentException(e);\n         }\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public RealVector mapInv() {\n         return copy().mapInvToSelf();\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public RealVector mapInvToSelf() {\n         try {\n     public RealVector mapMultiply(double d) {\n         return copy().mapMultiplyToSelf(d);\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public RealVector mapMultiplyToSelf(double d){\n         try {\n     public RealVector mapPow(double d) {\n         return copy().mapPowToSelf(d);\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public RealVector mapPowToSelf(double d){\n         try {\n     public RealVector mapSubtract(double d) {\n         return copy().mapSubtractToSelf(d);\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public RealVector mapSubtractToSelf(double d){\n         return mapAddToSelf(-d);\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n      * Construct a (dimension)-length vector of zeros, specifying zero tolerance.\n      * @param dimension Size of the vector\n      * @param epsilon The tolerance for having a value considered zero\n-     * @param defaultValue value for non-specified entries\n      */\n     public OpenMapRealVector(int dimension, double epsilon) {\n         virtualSize = dimension;\n         }\n         return d;\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public double dotProduct(RealVector v) throws IllegalArgumentException {\n         if(v instanceof OpenMapRealVector) {\n         return false;\n     }\n \n- \n     /** {@inheritDoc} */\n     public OpenMapRealVector mapAdd(double d) {\n         return copy().mapAddToSelf(d);\n--- a/src/main/java/org/apache/commons/math/util/BigReal.java\n+++ b/src/main/java/org/apache/commons/math/util/BigReal.java\n \n     /** Rounding mode for divisions. **/\n     private RoundingMode roundingMode = RoundingMode.HALF_UP;\n-    \n+\n     /*** BigDecimal scale ***/\n     private int scale = 64;\n \n      * Gets the rounding mode for division operations\n      * The default is {@code RoundingMode.HALF_UP}\n      * @return the rounding mode.\n-     */ \n+     */\n     public RoundingMode getRoundingMode() {\n         return roundingMode;\n     }\n-    \n+\n     /***\n      * Sets the rounding mode for decimal divisions.\n      * @param roundingMode rounding mode for decimal divisions\n     public void setRoundingMode(RoundingMode roundingMode) {\n         this.roundingMode = roundingMode;\n     }\n-    \n+\n     /***\n      * Sets the scale for division operations.\n      * The default is 64\n     public int getScale() {\n         return scale;\n     }\n-    \n+\n     /***\n      * Sets the scale for division operations.\n      * @param scale scale for division operations\n     public void setScale(int scale) {\n         this.scale = scale;\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public BigReal add(BigReal a) {\n         return new BigReal(d.add(a.d));", "timestamp": 1262014203, "metainfo": ""}