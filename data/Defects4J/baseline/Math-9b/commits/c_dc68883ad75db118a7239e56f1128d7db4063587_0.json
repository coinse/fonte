{"sha": "dc68883ad75db118a7239e56f1128d7db4063587", "log": "MATH-854 Populate \"throws\" clause.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java\n import java.util.TreeMap;\n import org.apache.commons.math3.util.Pair;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n \n /**\n  * Base class for rules that determines the integration nodes and their\n         = new TreeMap<Integer, Pair<double[], double[]>>();\n \n     /**\n-     * Gets a copy of the quadrature rule with given number of integration points.\n+     * Gets a copy of the quadrature rule with the given number of integration\n+     * points.\n      *\n      * @param numberOfPoints Number of integration points.\n      * @return a copy of the integration rule.\n+     * @throws NotStrictlyPositiveException if {@code numberOfPoints < 1}.\n      */\n-    public Pair<double[], double[]> getRule(int numberOfPoints) {\n+    public Pair<double[], double[]> getRule(int numberOfPoints)\n+        throws NotStrictlyPositiveException {\n         // Try to obtain the rule from the cache.\n         Pair<double[], double[]> cached = pointsAndWeightsDouble.get(numberOfPoints);\n \n      *\n      * @param numberOfPoints Order of the rule to be retrieved.\n      * @return the points and weights corresponding to the given order.\n+     * @throws NotStrictlyPositiveException if {@code numberOfPoints < 1}.\n      */\n-    protected synchronized Pair<T[], T[]> getRuleInternal(int numberOfPoints) {\n+    protected synchronized Pair<T[], T[]> getRuleInternal(int numberOfPoints)\n+        throws NotStrictlyPositiveException {\n         final Pair<T[], T[]> rule = pointsAndWeights.get(numberOfPoints);\n         if (rule == null) {\n             addRule(computeRule(numberOfPoints));\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NonMonotonicSequenceException;\n import org.apache.commons.math3.util.MathArrays;\n import org.apache.commons.math3.util.Pair;\n \n      *\n      * @param points Integration points.\n      * @param weights Weights of the corresponding integration nodes.\n-     * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException\n-     * if the {@code points} are not sorted in increasing order.\n+     * @throws NonMonotonicSequenceException if the {@code points} are not\n+     * sorted in increasing order.\n      */\n     public GaussIntegrator(double[] points,\n-                           double[] weights) {\n+                           double[] weights)\n+        throws NonMonotonicSequenceException {\n         if (points.length != weights.length) {\n             throw new DimensionMismatchException(points.length,\n                                                  weights.length);\n      * the pair) and weights (second element of the pair.\n      *\n      * @param pointsAndWeights Integration points and corresponding weights.\n-     * @throws org.apache.commons.math3.exception.NonMonotonicSequenceException\n-     * if the {@code points} are not sorted in increasing order.\n+     * @throws NonMonotonicSequenceException if the {@code points} are not\n+     * sorted in increasing order.\n      *\n      * @see #GaussIntegrator(double[], double[])\n      */\n-    public GaussIntegrator(Pair<double[], double[]> pointsAndWeights) {\n+    public GaussIntegrator(Pair<double[], double[]> pointsAndWeights)\n+        throws NonMonotonicSequenceException {\n         this(pointsAndWeights.getFirst(), pointsAndWeights.getSecond());\n     }\n \n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java\n public class LegendreRuleFactory extends BaseRuleFactory<Double> {\n     /**\n      * {@inheritDoc}\n-     *\n-     * @throws NotStrictlyPositiveException if {@code numberOfPoints < 1}.\n      */\n     @Override\n-    protected Pair<Double[], Double[]> computeRule(int numberOfPoints) {\n+    protected Pair<Double[], Double[]> computeRule(int numberOfPoints)\n+        throws NotStrictlyPositiveException {\n         if (numberOfPoints <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                    numberOfPoints);", "timestamp": 1347057301, "metainfo": ""}