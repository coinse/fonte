{"sha": "2d69367fab142b626ce36d418272f99ad8fc3dc1", "log": "javadoc, error message cleanup.   ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n import org.apache.commons.math.MathException;\n \n /**\n- * Provide the bisection algorithm for solving for zeros of real univariate\n- * functions.  It will only search for one zero in the given interval.  The\n- * function is supposed to be continuous but not necessarily smooth.\n- * @version $Revision: 1.11 $ $Date: 2004/02/18 03:24:19 $\n+ * Implements the <a href=\"http://mathworld.wolfram.com/Bisection.html\">bisection algorithm</a>\n+ *  for finding zeros of univariate real functions.  This algorithm will find only one zero in the given interval.\n+ * The function should be continuous but not necessarily smooth.\n+ * @version $Revision: 1.12 $ $Date: 2004/02/20 06:22:39 $\n  */\n public class BisectionSolver extends UnivariateRealSolverImpl implements Serializable {\n     /**\n     }\n \n     /**\n-     * Solve for a zero in the given interval.\n+     * Find a zero in the given interval.\n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n      * @param initial the start value to use (ignored).\n     }\n     \n     /**\n-     * Solve for a zero root in the given interval.\n+     * Find a zero root in the given interval.\n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n      * @return the value where the function is zero\n             ++i;\n         }\n         \n-        throw new MathException(\"Maximal iteration number exceeded\");\n+        throw new MathException(\"Maximum number of iterations exceeded\");\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n import org.apache.commons.math.MathException;\n \n /**\n- * Provide the Brent algorithm for solving for zeros of real univariate\n- * functions.\n- * It will only search for one zero in the given interval.\n- * The function is supposed to be continuous but not necessarily smooth.\n+ * Implements the <a href=\"http://mathworld.wolfram.com/BrentsMethod.html\">Brent algorithm</a>\n+ * for  finding zeros of real univariate\n+ * functions. This algorithm will find only one zero in the given interval. \n+ * The function should be continuous but not necessarily smooth.\n  *  \n- * @version $Revision: 1.12 $ $Date: 2004/02/18 03:24:19 $\n+ * @version $Revision: 1.13 $ $Date: 2004/02/20 06:22:39 $\n  */\n public class BrentSolver extends UnivariateRealSolverImpl implements Serializable {\n     /**\n     }\n \n     /**\n-     * Solve for a zero in the given interval.\n+     * Find a zero in the given interval.\n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n      * @param initial the start value to use (ignored).\n     }\n     \n     /**\n-     * Solve for a zero root in the given interval.\n+     * Find a zero in the given interval.\n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n      * @return the value where the function is zero\n             }\n             i++;\n         }\n-        throw new MathException(\"Maximal iteration number exceeded.\");\n+        throw new MathException(\"Maximum number of iterations exceeded.\");\n     }\n }\n--- a/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java\n import org.apache.commons.math.MathException;\n \n /**\n- * Represents a cubic spline function.\n- * Spline functions map a certain interval of real numbers to real numbers.\n- * A cubic spline consists of segments of cubic functions. For this class,\n- * polynominal coefficents are used.\n- * Arguments outside of the domain cause an IllegalArgumentException.\n+ * Represents a <a href=\"http://mathworld.wolfram.com/CubicSpline.html\">cubic spline function</a>.\n+ * Arguments outside of the domain determined by the x values array passed to the constructor\n+ * cause an IllegalArgumentException.\n  * \n- * @version $Revision: 1.12 $ $Date: 2004/02/18 03:24:19 $\n+ * @version $Revision: 1.13 $ $Date: 2004/02/20 06:22:39 $\n  */\n public class CubicSplineFunction implements UnivariateRealFunction, Serializable {\n     /** Spline segment interval delimiters. Size is N+1 for N segments. */\n     public CubicSplineFunction(double xval[], double c[][]) {\n         super();\n         // TODO: should copy the arguments here, for safety. This could be a major overhead.\n+        // Should also verify that xval[] is in correct order, and arrays have correct lengths\n         this.xval = xval;\n         this.c = c;\n     }\n \n     /**\n      * Compute the value for the first derivative of the function.\n-     * It is recommended to provide this method only if the first derivative is\n-     * analytical. Numerical derivatives may be acceptable in some cases.\n-     * An implementation should throw an UnsupportedOperationException if\n-     * this method is not implemented.\n      * @param x the point for which the first derivative should be computed\n      * @return the value\n      * @throws MathException if the derivative couldn't be computed.\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n import org.apache.commons.math.MathException;\n \n /**\n- * Provide an interface univariate real functions.\n- * The object may held temporary data which is shared between calculations\n- * of the value and the derivatives for the same argument. It is not guaranteed\n- * that derivatives are evaluated after the value, the evaluation algorithm\n- * should throw an InvalidStateException if it can't cope with this.\n+ * An interface representing a univariate real function.\n  *  \n- * @version $Revision: 1.10 $ $Date: 2004/01/29 00:49:00 $\n+ * @version $Revision: 1.11 $ $Date: 2004/02/20 06:22:39 $\n  */\n public interface UnivariateRealFunction {\n     /**\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java\n import org.apache.commons.math.MathException;\n \n /**\n- * Interface for interpolating a data set.\n+ * Interface representing a univariate real interpolating function.\n  *  \n- * @version $Revision: 1.8 $ $Date: 2004/01/29 00:49:00 $\n+ * @version $Revision: 1.9 $ $Date: 2004/02/20 06:22:39 $\n  */\n public interface UnivariateRealInterpolator {\n \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n import org.apache.commons.math.MathException;\n \n /**\n- * Provide an interface to algorithms for solving for zeros of real univariate\n- * functions.\n- * An implementation will only search for one zero in the given interval.\n+ * Interface for (univariate real) rootfinding algorithms.\n+ * <p>\n+ * Implementations will search for only one zero in the given interval.\n  *  \n- * @version $Revision: 1.9 $ $Date: 2004/01/29 00:49:00 $\n+ * @version $Revision: 1.10 $ $Date: 2004/02/20 06:22:39 $\n  */\n public interface UnivariateRealSolver {\n \n      * Set the upper limit for the number of iterations.\n      * \n      * Usually a high iteration count indicates convergence problems. However,\n-     * the \"reasonable value\" varies widely for different solvers, users are\n+     * the \"reasonable value\" varies widely for different solvers.  Users are\n      * advised to use the default value supplied by the solver.\n      *  \n      * An exception will be thrown if the number is exceeded.\n     /**\n      * Set the absolute accuracy.\n      * \n-     * The default is usually choosen so taht roots in the interval\n-     * -10..-0.1 and +0.1..+10 can be found wit a reasonable accuracy. If the\n+     * The default is usually choosen so that roots in the interval\n+     * -10..-0.1 and +0.1..+10 can be found with a reasonable accuracy. If the\n      * expected absolute value of your roots is of much smaller magnitude, set\n      * this to a smaller value.\n      * ", "timestamp": 1077258159, "metainfo": ""}