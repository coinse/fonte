{"sha": "794f8fb4805f2f4c9ec2604d8b9b23ece1453aa8", "log": "renamed SimpleValueChecker into SimpleScalarValueChecker for consistency with the vectorial checker name  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.optimization;\n+\n+import org.apache.commons.math.util.MathUtils;\n+\n+/** \n+ * Simple implementation of the {@link ScalarConvergenceChecker} interface using\n+ * only objective function values.\n+ * <p>\n+ * Convergence is considered to have been reached if either the relative\n+ * difference between the objective function values is smaller than a\n+ * threshold or if either the absolute difference between the objective\n+ * function values is smaller than another threshold.\n+ * </p>\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public class SimpleScalarValueChecker implements ScalarConvergenceChecker {\n+\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 2490271385513842607L;\n+\n+    /** Default relative threshold. */\n+    private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;\n+\n+    /** Default absolute threshold. */\n+    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;\n+\n+    /** Relative tolerance threshold. */\n+    private final double relativeThreshold;\n+\n+    /** Absolute tolerance threshold. */\n+    private final double absoluteThreshold;\n+\n+   /** Build an instance with default threshold.\n+     */\n+    public SimpleScalarValueChecker() {\n+        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;\n+        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;\n+    }\n+\n+    /** Build an instance with a specified threshold.\n+     * <p>\n+     * In order to perform only relative checks, the absolute tolerance\n+     * must be set to a negative value. In order to perform only absolute\n+     * checks, the relative tolerance must be set to a negative value.\n+     * </p>\n+     * @param relativeThreshold relative tolerance threshold\n+     * @param absoluteThreshold absolute tolerance threshold\n+     */\n+    public SimpleScalarValueChecker(final double relativeThreshold,\n+                                 final double absoluteThreshold) {\n+        this.relativeThreshold = relativeThreshold;\n+        this.absoluteThreshold = absoluteThreshold;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public boolean converged(final int iteration,\n+                             final ScalarPointValuePair previous,\n+                             final ScalarPointValuePair current) {\n+        final double p          = previous.getValue();\n+        final double c          = current.getValue();\n+        final double difference = Math.abs(p - c);\n+        final double size       = Math.max(Math.abs(p), Math.abs(c));\n+        return (difference <= (size * relativeThreshold)) || (difference <= absoluteThreshold);\n+    }\n+\n+}", "timestamp": 1237726485, "metainfo": ""}