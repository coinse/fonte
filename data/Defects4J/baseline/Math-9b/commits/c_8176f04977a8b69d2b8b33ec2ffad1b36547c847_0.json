{"sha": "8176f04977a8b69d2b8b33ec2ffad1b36547c847", "log": "Renamed UnivariateDifferentiable into UnivariateDifferentiableFunction.  The \"Function\" part of the name was forgotten when this new interface was created a few weeks ago, for replacing the older DifferentiableUnivariateFunction.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n package org.apache.commons.math3.analysis;\n \n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.analysis.function.Identity;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n      * @return the composite function.\n      * @since 3.1\n      */\n-    public static UnivariateDifferentiable compose(final UnivariateDifferentiable ... f) {\n-        return new UnivariateDifferentiable() {\n+    public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction ... f) {\n+        return new UnivariateDifferentiableFunction() {\n \n             /** {@inheritDoc} */\n             public double value(final double t) {\n      * @return a function that computes the sum of the functions.\n      * @since 3.1\n      */\n-    public static UnivariateDifferentiable add(final UnivariateDifferentiable ... f) {\n-        return new UnivariateDifferentiable() {\n+    public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction ... f) {\n+        return new UnivariateDifferentiableFunction() {\n \n             /** {@inheritDoc} */\n             public double value(final double t) {\n      * @return a function that computes the product of the functions.\n      * @since 3.1\n      */\n-    public static UnivariateDifferentiable multiply(final UnivariateDifferentiable ... f) {\n-        return new UnivariateDifferentiable() {\n+    public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction ... f) {\n+        return new UnivariateDifferentiableFunction() {\n \n             /** {@inheritDoc} */\n             public double value(final double t) {\n         return s;\n     }\n \n-    /** Convert a {@link UnivariateDifferentiable} into a {@link DifferentiableUnivariateFunction}.\n+    /** Convert a {@link UnivariateDifferentiableFunction} into a {@link DifferentiableUnivariateFunction}.\n      * @param f function to convert\n      * @return converted function\n      * @deprecated this conversion method is temporary in version 3.1, as the {@link\n      * DifferentiableUnivariateFunction} interface itself is deprecated\n      */\n     @Deprecated\n-    public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiable f) {\n+    public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f) {\n         return new DifferentiableUnivariateFunction() {\n \n             /** {@inheritDoc} */\n         };\n     }\n \n-    /** Convert a {@link DifferentiableUnivariateFunction} into a {@link UnivariateDifferentiable}.\n+    /** Convert a {@link DifferentiableUnivariateFunction} into a {@link UnivariateDifferentiableFunction}.\n      * <p>\n      * Note that the converted function is able to handle {@link DerivativeStructure} with\n      * <em>only</em> one parameter and up to order one. If the function is called with\n      * DifferentiableUnivariateFunction} interface itself is deprecated\n      */\n     @Deprecated\n-    public static UnivariateDifferentiable toUnivariateDifferential(final DifferentiableUnivariateFunction f) {\n-        return new UnivariateDifferentiable() {\n+    public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f) {\n+        return new UnivariateDifferentiableFunction() {\n \n             /** {@inheritDoc} */\n             public double value(final double x) {\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiableFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.analysis.differentiation;\n+\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+\n+/** Interface for univariate functions derivatives.\n+ * <p>This interface represents a simple function which computes\n+ * both the value and the first derivative of a mathematical function.\n+ * The derivative is computed with respect to the input variable.</p>\n+ * @see UnivariateDifferentiableFunction\n+ * @see UnivariateDifferentiator\n+ * @since 3.1\n+ * @version $Id$\n+ */\n+public interface UnivariateDifferentiableFunction extends UnivariateFunction {\n+\n+    /** Simple mathematical function.\n+     * <p>{@link UnivariateDifferentiableFunction} classes compute both the\n+     * value and the first derivative of the function.</p>\n+     * @param t function input value\n+     * @return function result\n+     */\n+    DerivativeStructure value(DerivativeStructure t);\n+\n+}\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java\n public interface UnivariateDifferentiator {\n \n     /** Create an implementation of a differential for a\n-     * {@link UnivariateDifferentiable differentiable function}.\n+     * {@link UnivariateDifferentiableFunction differentiable function}.\n      * @param function function to differentiate\n      * @return differential function\n      */\n-    UnivariateDifferentiable differentiate(UnivariateFunction function);\n+    UnivariateDifferentiableFunction differentiate(UnivariateFunction function);\n \n }\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java\n  *   The core class is {@link DerivativeStructure} which holds the value and\n  *   the differentials of a function. This class handles some arbitrary number\n  *   of free parameters and arbitrary derivation order. It is used both as\n- *   the input and the output type for the {@link UnivariateDifferentiable}\n+ *   the input and the output type for the {@link UnivariateDifferentiableFunction}\n  *   interface. Any differentiable function should implement this interface.\n  * </p>\n  * <p>\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Acos.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Acos.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Acos implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Acos implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.acos(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Acosh.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Acosh.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Acosh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Acosh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.acosh(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Asin.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Asin.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Asin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Asin implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.asin(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Asinh.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Asinh.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Asinh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Asinh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.asinh(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Atan.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Atan.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Atan implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Atan implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.atan(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Atanh.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Atanh.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Atanh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Atanh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.atanh(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Cbrt implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Cbrt implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.cbrt(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Constant.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Constant.java\n import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n \n /**\n  * Constant function.\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Constant implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Constant implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** Constant. */\n     private final double c;\n \n--- a/src/main/java/org/apache/commons/math3/analysis/function/Cos.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Cos.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Cos implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Cos implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.cos(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Cosh.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Cosh.java\n import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Cosh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Cosh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.cosh(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Exp.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Exp.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Exp implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Exp implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.exp(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Expm1.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Expm1.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Expm1 implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Expm1 implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.expm1(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Gaussian implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Gaussian implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** Mean. */\n     private final double mean;\n     /** Inverse of the standard deviation. */\n--- a/src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java\n import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.util.FastMath;\n  * @since 3.0\n  * @version $Id$\n  */\n-public class HarmonicOscillator implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class HarmonicOscillator implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** Amplitude. */\n     private final double amplitude;\n     /** Angular frequency. */\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Identity.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Identity.java\n import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n \n /**\n  * Identity function.\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Identity implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Identity implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return x;\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Inverse.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Inverse.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n \n /**\n  * Inverse function.\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Inverse implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Inverse implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return 1 / x;\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Log.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Log.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Log implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Log implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.log(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Log10.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Log10.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Log10 implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Log10 implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n \n     /** {@inheritDoc} */\n     public double value(double x) {\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Log1p.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Log1p.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Log1p implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Log1p implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.log1p(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Logistic implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Logistic implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** Lower asymptote. */\n     private final double a;\n     /** Upper asymptote. */\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Logit.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Logit.java\n import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Logit implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Logit implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** Lower bound. */\n     private final double lo;\n     /** Higher bound. */\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Minus.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Minus.java\n import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n \n /**\n  * Minus function.\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Minus implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Minus implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return -x;\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Power.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Power.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Power implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Power implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** Power. */\n     private final double p;\n \n--- a/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.util.FastMath;\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Sigmoid implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Sigmoid implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** Lower asymptote. */\n     private final double lo;\n     /** Higher asymptote. */\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Sin.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sin.java\n import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Sin implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.sin(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Sinc.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sinc.java\n import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Sinc implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Sinc implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /**\n      * Value below which the computations are done using Taylor series.\n      * <p>\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Sinh.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sinh.java\n import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Sinh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Sinh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.sinh(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Sqrt implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Sqrt implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.sqrt(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Tan.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Tan.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Tan implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Tan implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.tan(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Tanh.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Tanh.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Tanh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class Tanh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.tanh(x);\n--- a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.MathUtils;\n \n  *\n  * @version $Id$\n  */\n-public class PolynomialFunction implements UnivariateDifferentiable, DifferentiableUnivariateFunction, Serializable {\n+public class PolynomialFunction implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction, Serializable {\n     /**\n      * Serialization identifier\n      */\n--- a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java\n package org.apache.commons.math3.analysis.polynomials;\n \n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NoDataException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n  * @version $Id$\n  * @since 1.2\n  */\n-public class PolynomialFunctionNewtonForm implements UnivariateDifferentiable {\n+public class PolynomialFunctionNewtonForm implements UnivariateDifferentiableFunction {\n \n     /**\n      * The coefficients of the polynomial, ordered by degree -- i.e.\n--- a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n  *\n  * @version $Id$\n  */\n-public class PolynomialSplineFunction implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n+public class PolynomialSplineFunction implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {\n     /**\n      * Spline segment interval delimiters (knots).\n      * Size is n + 1 for n segments.\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java\n package org.apache.commons.math3.analysis.solvers;\n \n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n \n /**\n  * Provide a default implementation for several functions useful to generic\n  * @version $Id$\n  */\n public abstract class AbstractUnivariateDifferentiableSolver\n-    extends BaseAbstractUnivariateSolver<UnivariateDifferentiable>\n+    extends BaseAbstractUnivariateSolver<UnivariateDifferentiableFunction>\n     implements UnivariateDifferentiableSolver {\n \n     /** Function to solve. */\n-    private UnivariateDifferentiable function;\n+    private UnivariateDifferentiableFunction function;\n \n     /**\n      * Construct a solver with given absolute accuracy.\n      * {@inheritDoc}\n      */\n     @Override\n-    protected void setup(int maxEval, UnivariateDifferentiable f,\n+    protected void setup(int maxEval, UnivariateDifferentiableFunction f,\n                          double min, double max, double startValue) {\n         super.setup(maxEval, f, min, max, startValue);\n         function = f;\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java\n package org.apache.commons.math3.analysis.solvers;\n \n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n \n      * if {@code min >= max}.\n      */\n     @Override\n-    public double solve(int maxEval, final UnivariateDifferentiable f,\n+    public double solve(int maxEval, final UnivariateDifferentiableFunction f,\n                         final double min, final double max)\n         throws TooManyEvaluationsException {\n         return super.solve(maxEval, f, UnivariateSolverUtils.midpoint(min, max));\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java\n  */\n package org.apache.commons.math3.analysis.solvers;\n \n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n \n \n /**\n  * @version $Id$\n  */\n public interface UnivariateDifferentiableSolver\n-    extends BaseUnivariateSolver<UnivariateDifferentiable> {}\n+    extends BaseUnivariateSolver<UnivariateDifferentiableFunction> {}\n--- a/src/test/java/org/apache/commons/math3/analysis/QuinticFunction.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/QuinticFunction.java\n package org.apache.commons.math3.analysis;\n \n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n \n /**\n  * Auxiliary class for testing solvers.\n  *\n  * @version $Id$\n  */\n-public class QuinticFunction implements UnivariateDifferentiable {\n+public class QuinticFunction implements UnivariateDifferentiableFunction {\n \n     /* Evaluate quintic.\n      * @see org.apache.commons.math3.UnivariateFunction#value(double)\n--- a/src/test/java/org/apache/commons/math3/analysis/XMinus5Function.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/XMinus5Function.java\n package org.apache.commons.math3.analysis;\n \n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n \n /**\n  * Auxiliary class for testing solvers.\n  *\n  * @version $Id$\n  */\n-public class XMinus5Function implements UnivariateDifferentiable {\n+public class XMinus5Function implements UnivariateDifferentiableFunction {\n \n     /* Evaluate x - 5 fuction.\n      * @see org.apache.commons.math3.UnivariateFunction#value(double)\n--- a/src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n \n     @Test\n     public void testDerivatives() {\n-        final UnivariateDifferentiable gaussian = new Gaussian(2.0, 0.9, 3.0);\n+        final UnivariateDifferentiableFunction gaussian = new Gaussian(2.0, 0.9, 3.0);\n         final DerivativeStructure dsX = new DerivativeStructure(1, 4, 0, 1.1);\n         final DerivativeStructure dsY = gaussian.value(dsX);\n         Assert.assertEquals( 1.9955604901712128349,   dsY.getValue(),              EPS);\n--- a/src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n         final Logit f = new Logit(lo, hi);\n         final Sigmoid g = new Sigmoid(lo, hi);\n         RandomGenerator random = new Well1024a(0x49914cdd9f0b8db5l);\n-        final UnivariateDifferentiable id = FunctionUtils.compose((UnivariateDifferentiable) g,\n-                                                                (UnivariateDifferentiable) f);\n+        final UnivariateDifferentiableFunction id = FunctionUtils.compose((UnivariateDifferentiableFunction) g,\n+                                                                (UnivariateDifferentiableFunction) f);\n \n         for (int i = 0; i < 10; i++) {\n             final double x = lo + random.nextDouble() * (hi - lo);\n         final Logit f = new Logit(lo, hi);\n         final Sigmoid g = new Sigmoid(lo, hi);\n         RandomGenerator random = new Well1024a(0x96885e9c1f81cea5l);\n-        final UnivariateDifferentiable id =\n-                FunctionUtils.compose((UnivariateDifferentiable) g, (UnivariateDifferentiable) f);\n+        final UnivariateDifferentiableFunction id =\n+                FunctionUtils.compose((UnivariateDifferentiableFunction) g, (UnivariateDifferentiableFunction) f);\n         for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n             double max = 0;\n             for (int i = 0; i < 10; i++) {\n--- a/src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.util.FastMath;\n \n import org.junit.Test;\n \n    @Test\n    public void testDerivativeComparison() {\n-       final UnivariateDifferentiable sPrime = new Sqrt();\n+       final UnivariateDifferentiableFunction sPrime = new Sqrt();\n        final UnivariateFunction f = new UnivariateFunction() {\n                public double value(double x) {\n                    return 1 / (2 * Math.sqrt(x));\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java\n import org.apache.commons.math3.analysis.QuinticFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.junit.Assert;\n         compare(f, f.getRoot(), f.getMin(), f.getMax());\n     }\n \n-    private void compare(final UnivariateDifferentiable f,\n+    private void compare(final UnivariateDifferentiableFunction f,\n                          double root, double min, double max) {\n         NewtonRaphsonSolver newton = new NewtonRaphsonSolver(1.0e-12);\n         BracketingNthOrderBrentSolver bracketing =\n \n     }\n \n-    private static abstract class TestFunction implements UnivariateDifferentiable {\n+    private static abstract class TestFunction implements UnivariateDifferentiableFunction {\n \n         private final double root;\n         private final double min;\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java\n package org.apache.commons.math3.analysis.solvers;\n \n import org.apache.commons.math3.analysis.QuinticFunction;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n      */\n     @Test\n     public void testSinZero() {\n-        UnivariateDifferentiable f = new Sin();\n+        UnivariateDifferentiableFunction f = new Sin();\n         double result;\n \n         NewtonRaphsonSolver solver = new NewtonRaphsonSolver();\n      */\n     @Test\n     public void testQuinticZero() {\n-        final UnivariateDifferentiable f = new QuinticFunction();\n+        final UnivariateDifferentiableFunction f = new QuinticFunction();\n         double result;\n \n         NewtonRaphsonSolver solver = new NewtonRaphsonSolver();\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/NewtonSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/NewtonSolverTest.java\n import org.apache.commons.math3.analysis.QuinticFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;\n import org.apache.commons.math3.analysis.function.Sin;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n      */\n     @Test\n     public void testQuinticZero() {\n-        final UnivariateDifferentiable q = new QuinticFunction();\n+        final UnivariateDifferentiableFunction q = new QuinticFunction();\n         DifferentiableUnivariateFunction f = new DifferentiableUnivariateFunction() {\n \n             public double value(double x) {", "timestamp": 1347375399, "metainfo": ""}