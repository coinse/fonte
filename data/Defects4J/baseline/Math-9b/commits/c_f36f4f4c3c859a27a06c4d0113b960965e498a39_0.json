{"sha": "f36f4f4c3c859a27a06c4d0113b960965e498a39", "log": "Javadoc formatting and fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java\n      * @param y Sample values of the y-coordinate, in increasing order.\n      * @param z Sample values of the y-coordinate, in increasing order.\n      * @param f Values of the function on every grid point.\n-     * @param dFdX Values of the partial derivative of function with respect\n-     * to x on every grid point.\n-     * @param dFdY Values of the partial derivative of function with respect\n-     * to y on every grid point.\n-     * @param dFdZ Values of the partial derivative of function with respect\n-     * to z on every grid point.\n-     * @param d2FdXdY Values of the cross partial derivative of function on\n-     * every grid point.\n-     * @param d2FdXdZ Values of the cross partial derivative of function on\n-     * every grid point.\n-     * @param d2FdYdZ Values of the cross partial derivative of function on\n-     * every grid point.\n-     * @param d3FdXdYdZ Values of the cross partial derivative of function on\n-     * every grid point.\n+     * @param dFdX Values of the partial derivative of function with respect to x on every grid point.\n+     * @param dFdY Values of the partial derivative of function with respect to y on every grid point.\n+     * @param dFdZ Values of the partial derivative of function with respect to z on every grid point.\n+     * @param d2FdXdY Values of the cross partial derivative of function on every grid point.\n+     * @param d2FdXdZ Values of the cross partial derivative of function on every grid point.\n+     * @param d2FdYdZ Values of the cross partial derivative of function on every grid point.\n+     * @param d3FdXdYdZ Values of the cross partial derivative of function on every grid point.\n      * @throws NoDataException if any of the arrays has zero length.\n-     * @throws DimensionMismatchException if the various arrays do not contain\n-     * the expected number of elements.\n-     * @throws Exception if {@code x}, {@code y} or {@code z}\n-     * are not strictly increasing.\n+     * @throws DimensionMismatchException if the various arrays do not contain the expected number of elements.\n+     * @throws NonMonotonicSequenceException if {@code x}, {@code y} or {@code z} are not strictly increasing.\n      */\n     public TricubicSplineInterpolatingFunction(double[] x,\n                                                double[] y,\n     /**\n      * {@inheritDoc}\n      *\n-     * @throws OutOfRangeException if any of the variables is outside its\n-     * interpolation range.\n+     * @throws OutOfRangeException if any of the variables is outside its interpolation range.\n      */\n     public double value(double x, double y, double z)\n         throws OutOfRangeException {\n     /**\n      * @param c Coordinate.\n      * @param val Coordinate samples.\n-     * @return the index in {@code val} corresponding to the interval\n-     * containing {@code c}, or {@code -1} if {@code c} is out of the\n-     * range defined by the end values of {@code val}.\n+     * @return the index in {@code val} corresponding to the interval containing {@code c}, or {@code -1}\n+     *   if {@code c} is out of the range defined by the end values of {@code val}.\n      */\n     private int searchIndex(double c, double[] val) {\n         if (c < val[0]) {\n      * where the subscripts indicate the partial derivative with respect to\n      * the corresponding variable(s).\n      *\n-     * @param beta List of function values and function partial derivatives\n-     * values.\n+     * @param beta List of function values and function partial derivatives values.\n      * @return the spline coefficients.\n      */\n     private double[] computeSplineCoefficients(double[] beta) {", "timestamp": 1347813349, "metainfo": ""}