{"sha": "f967fc2003db4ca26bc0b2f9038c20759011f855", "log": "added dimension checks removed findbugs warnings about internal representation exposition  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n      */\n     public void addValue(double[] value)\n       throws DimensionMismatchException {\n-        if (value.length != k) {\n-            throw new DimensionMismatchException(value.length, k);\n-        }\n-\n+        checkDimension(value.length);\n         for (int i = 0; i < k; ++i) {\n             double v = value[i];\n             sumImpl[i].increment(v);\n \n     // Getters and setters for statistics implementations\n     /**\n+     * Sets statistics implementations.\n+     * @param newImpl new implementations for statistics\n+     * @param oldImpl old implementations for statistics\n+     * @throws DimensionMismatchException if the array dimension\n+     * does not match the one used at construction\n+     * @throws IllegalStateException if data has already been added\n+     *  (i.e if n > 0)\n+     */\n+    private void setImpl(StorelessUnivariateStatistic[] newImpl,\n+                         StorelessUnivariateStatistic[] oldImpl)\n+       throws DimensionMismatchException, IllegalStateException {\n+        checkEmpty();\n+        checkDimension(newImpl.length);\n+        System.arraycopy(newImpl, 0, oldImpl, 0, newImpl.length);\n+    }\n+\n+    /**\n      * Returns the currently configured Sum implementation\n      * \n      * @return the StorelessUnivariateStatistic implementing the sum\n      */\n     public StorelessUnivariateStatistic[] getSumImpl() {\n-        return sumImpl;\n+        return (StorelessUnivariateStatistic[]) sumImpl.clone();\n     }\n \n     /**\n      * \n      * @param sumImpl the StorelessUnivariateStatistic instance to use\n      * for computing the Sum\n-     * @throws IllegalArgumentException if the array dimension\n+     * @throws DimensionMismatchException if the array dimension\n      * does not match the one used at construction\n      * @throws IllegalStateException if data has already been added\n      *  (i.e if n > 0)\n      */\n-    public void setSumImpl(StorelessUnivariateStatistic[] sumImpl) {\n-        checkEmpty();\n-        this.sumImpl = sumImpl;\n+    public void setSumImpl(StorelessUnivariateStatistic[] sumImpl)\n+      throws DimensionMismatchException {\n+        setImpl(sumImpl, this.sumImpl);\n     }\n \n     /**\n      * @return the StorelessUnivariateStatistic implementing the sum of squares\n      */\n     public StorelessUnivariateStatistic[] getSumsqImpl() {\n-        return sumSqImpl;\n+        return (StorelessUnivariateStatistic[]) sumSqImpl.clone();\n     }\n \n     /**\n      * \n      * @param sumsqImpl the StorelessUnivariateStatistic instance to use\n      * for computing the sum of squares\n+     * @throws DimensionMismatchException if the array dimension\n+     * does not match the one used at construction\n      * @throws IllegalStateException if data has already been added\n      *  (i.e if n > 0)\n      */\n-    public void setSumsqImpl(StorelessUnivariateStatistic[] sumsqImpl) {\n-        checkEmpty();\n-        this.sumSqImpl = sumsqImpl;\n+    public void setSumsqImpl(StorelessUnivariateStatistic[] sumsqImpl)\n+      throws DimensionMismatchException {\n+        setImpl(sumsqImpl, this.sumSqImpl);\n     }\n \n     /**\n      * @return the StorelessUnivariateStatistic implementing the minimum\n      */\n     public StorelessUnivariateStatistic[] getMinImpl() {\n-        return minImpl;\n+        return (StorelessUnivariateStatistic[]) minImpl.clone();\n     }\n \n     /**\n      * \n      * @param minImpl the StorelessUnivariateStatistic instance to use\n      * for computing the minimum\n+     * @throws DimensionMismatchException if the array dimension\n+     * does not match the one used at construction\n      * @throws IllegalStateException if data has already been added\n      *  (i.e if n > 0)\n      */\n-    public void setMinImpl(StorelessUnivariateStatistic[] minImpl) {\n-        checkEmpty();\n-        this.minImpl = minImpl;\n+    public void setMinImpl(StorelessUnivariateStatistic[] minImpl)\n+      throws DimensionMismatchException {\n+        setImpl(minImpl, this.minImpl);\n     }\n \n     /**\n      * @return the StorelessUnivariateStatistic implementing the maximum\n      */\n     public StorelessUnivariateStatistic[] getMaxImpl() {\n-        return maxImpl;\n+        return (StorelessUnivariateStatistic[]) maxImpl.clone();\n     }\n \n     /**\n      * \n      * @param maxImpl the StorelessUnivariateStatistic instance to use\n      * for computing the maximum\n+     * @throws DimensionMismatchException if the array dimension\n+     * does not match the one used at construction\n      * @throws IllegalStateException if data has already been added\n      *  (i.e if n > 0)\n      */\n-    public void setMaxImpl(StorelessUnivariateStatistic[] maxImpl) {\n-        checkEmpty();\n-        this.maxImpl = maxImpl;\n+    public void setMaxImpl(StorelessUnivariateStatistic[] maxImpl)\n+      throws DimensionMismatchException {\n+        setImpl(maxImpl, this.maxImpl);\n     }\n \n     /**\n      * @return the StorelessUnivariateStatistic implementing the log sum\n      */\n     public StorelessUnivariateStatistic[] getSumLogImpl() {\n-        return sumLogImpl;\n+        return (StorelessUnivariateStatistic[]) sumLogImpl.clone();\n     }\n \n     /**\n      * \n      * @param sumLogImpl the StorelessUnivariateStatistic instance to use\n      * for computing the log sum\n+     * @throws DimensionMismatchException if the array dimension\n+     * does not match the one used at construction\n      * @throws IllegalStateException if data has already been added \n      *  (i.e if n > 0)\n      */\n-    public void setSumLogImpl(StorelessUnivariateStatistic[] sumLogImpl) {\n-        checkEmpty();\n-        this.sumLogImpl = sumLogImpl;\n+    public void setSumLogImpl(StorelessUnivariateStatistic[] sumLogImpl)\n+      throws DimensionMismatchException {\n+        setImpl(sumLogImpl, this.sumLogImpl);\n     }\n \n     /**\n      * @return the StorelessUnivariateStatistic implementing the geometric mean\n      */\n     public StorelessUnivariateStatistic[] getGeoMeanImpl() {\n-        return geoMeanImpl;\n+        return (StorelessUnivariateStatistic[]) geoMeanImpl.clone();\n     }\n \n     /**\n      * \n      * @param geoMeanImpl the StorelessUnivariateStatistic instance to use\n      * for computing the geometric mean\n+     * @throws DimensionMismatchException if the array dimension\n+     * does not match the one used at construction\n      * @throws IllegalStateException if data has already been added\n      *  (i.e if n > 0)\n      */\n-    public void setGeoMeanImpl(StorelessUnivariateStatistic[] geoMeanImpl) {\n-        checkEmpty();\n-        this.geoMeanImpl = geoMeanImpl;\n+    public void setGeoMeanImpl(StorelessUnivariateStatistic[] geoMeanImpl)\n+      throws DimensionMismatchException {\n+        setImpl(geoMeanImpl, this.geoMeanImpl);\n     }\n \n     /**\n      * @return the StorelessUnivariateStatistic implementing the mean\n      */\n     public StorelessUnivariateStatistic[] getMeanImpl() {\n-        return meanImpl;\n+        return (StorelessUnivariateStatistic[]) meanImpl.clone();\n     }\n \n     /**\n      * \n      * @param meanImpl the StorelessUnivariateStatistic instance to use\n      * for computing the mean\n+     * @throws DimensionMismatchException if the array dimension\n+     * does not match the one used at construction\n      * @throws IllegalStateException if data has already been added\n      *  (i.e if n > 0)\n      */\n-    public void setMeanImpl(StorelessUnivariateStatistic[] meanImpl) {\n-        checkEmpty();\n-        this.meanImpl = meanImpl;\n+    public void setMeanImpl(StorelessUnivariateStatistic[] meanImpl)\n+      throws DimensionMismatchException {\n+        setImpl(meanImpl, this.meanImpl);\n     }\n \n     /**\n         }\n     }\n \n+    /**\n+     * Throws DimensionMismatchException if dimension != k.\n+     * @param dimension dimension to check\n+     * @throws DimensionMismatchException if dimension != k\n+     */\n+    private void checkDimension(int dimension)\n+      throws DimensionMismatchException {\n+        if (dimension != k) {\n+            throw new DimensionMismatchException(dimension, k);\n+        }\n+    }\n+\n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java\n                                                 double[] sum, double[] sumSq, double[] sumLog) {\n         super();\n         this.k = k;\n-        this.mean = mean;\n+        this.mean = (double[]) mean.clone();\n         this.covariance = covariance;\n-        this.stdev = stdev;\n+        this.stdev = (double[]) stdev.clone();\n         this.n = n;\n-        this.max = max;\n-        this.min = min;\n-        this.sum = sum;\n-        this.sumSq = sumSq;\n-        this.sumLog = sumLog;\n+        this.max = (double[]) max.clone();\n+        this.min = (double[]) min.clone();\n+        this.sum = (double[]) sum.clone();\n+        this.sumSq = (double[]) sumSq.clone();\n+        this.sumLog = (double[]) sumLog.clone();\n     }\n \n     /** \n      * @return Returns the max.\n      */\n     public double[] getMax() {\n-        return max;\n+        return (double[]) max.clone();\n     }\n \n     /**\n      * @return Returns the mean.\n      */\n     public double[] getMean() {\n-        return mean;\n+        return (double[]) mean.clone();\n     }\n \n     /**\n      * @return Returns the min.\n      */\n     public double[] getMin() {\n-        return min;\n+        return (double[]) min.clone();\n     }\n \n     /**\n      * @return Returns the sum.\n      */\n     public double[] getSum() {\n-        return sum;\n+        return (double[]) sum.clone();\n     }\n     \n     /**\n      * @return Returns the sum of the squares.\n      */\n     public double[] getSumSq() {\n-        return sumSq;\n+        return (double[]) sumSq.clone();\n     }\n     \n     /**\n      * @return Returns the sum of the logarithms.\n      */\n     public double[] getSumLog() {\n-        return sumLog;\n+        return (double[]) sumLog.clone();\n     }\n     \n     /**\n      * @return Returns the standard deviation (roots of the diagonal elements)\n      */\n     public double[] getStandardDeviation() {\n-        return stdev; \n+        return (double[]) stdev.clone(); \n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java\n     /**\n      * @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setSumImpl(StorelessUnivariateStatistic[])\n      */\n-    public synchronized void setSumImpl(StorelessUnivariateStatistic[] sumImpl) {\n+    public synchronized void setSumImpl(StorelessUnivariateStatistic[] sumImpl)\n+      throws DimensionMismatchException {\n         super.setSumImpl(sumImpl);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setSumsqImpl(StorelessUnivariateStatistic[])\n      */\n-    public synchronized void setSumsqImpl(StorelessUnivariateStatistic[] sumsqImpl) {\n+    public synchronized void setSumsqImpl(StorelessUnivariateStatistic[] sumsqImpl)\n+      throws DimensionMismatchException {\n         super.setSumsqImpl(sumsqImpl);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setMinImpl(StorelessUnivariateStatistic[])\n      */\n-    public synchronized void setMinImpl(StorelessUnivariateStatistic[] minImpl) {\n+    public synchronized void setMinImpl(StorelessUnivariateStatistic[] minImpl)\n+      throws DimensionMismatchException {\n         super.setMinImpl(minImpl);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setMaxImpl(StorelessUnivariateStatistic[])\n      */\n-    public synchronized void setMaxImpl(StorelessUnivariateStatistic[] maxImpl) {\n+    public synchronized void setMaxImpl(StorelessUnivariateStatistic[] maxImpl)\n+      throws DimensionMismatchException {\n         super.setMaxImpl(maxImpl);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setSumLogImpl(StorelessUnivariateStatistic[])\n      */\n-    public synchronized void setSumLogImpl(StorelessUnivariateStatistic[] sumLogImpl) {\n+    public synchronized void setSumLogImpl(StorelessUnivariateStatistic[] sumLogImpl)\n+      throws DimensionMismatchException {\n         super.setSumLogImpl(sumLogImpl);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setGeoMeanImpl(StorelessUnivariateStatistic[])\n      */\n-    public synchronized void setGeoMeanImpl(StorelessUnivariateStatistic[] geoMeanImpl) {\n+    public synchronized void setGeoMeanImpl(StorelessUnivariateStatistic[] geoMeanImpl)\n+      throws DimensionMismatchException {\n         super.setGeoMeanImpl(geoMeanImpl);\n     }\n \n     /**\n      * @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setMeanImpl(StorelessUnivariateStatistic[])\n      */\n-    public synchronized void setMeanImpl(StorelessUnivariateStatistic[] meanImpl) {\n+    public synchronized void setMeanImpl(StorelessUnivariateStatistic[] meanImpl)\n+      throws DimensionMismatchException {\n         super.setMeanImpl(meanImpl);\n     }\n ", "timestamp": 1202505398, "metainfo": ""}