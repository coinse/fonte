{"sha": "9b6224b2d4c5c34e349d582dc105daec48411659", "log": "added UnivariateRealFunction type implementations of the java.lang.Math methods  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+\n+/**\n+ * Set of {@link UnivariateRealFunction} classes wrapping methods from\n+ * the standard Math class.\n+ *\n+ * @version $Revision$ $Date$\n+ */\n+public class UnivariateRealFunctions {\n+\n+    /** The {@code Math.abs} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction ABS = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.abs(d);\n+        }\n+    };\n+\n+    /** The - operator wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction NEGATE = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return -d;\n+        }\n+    };\n+\n+    /** The {@code Math.sin} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction SIN = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.sin(d);\n+        }\n+    };\n+\n+    /** The {@code Math.sqrt} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction SQRT = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.sqrt(d);\n+        }\n+    };\n+\n+    /** The {@code Math.sinh} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction SINH = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.sinh(d);\n+        }\n+    };\n+\n+    /** The {@code Math.exp} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction EXP = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.exp(d);\n+        }\n+    };\n+\n+    /** The {@code Math.expm1} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction EXP1M = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.expm1(d);\n+        }\n+    };\n+\n+    /** The {@code Math.asin} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction ASIN = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.asin(d);\n+        }\n+    };\n+\n+    /** The {@code Math.atan} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction ATAN = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.atan(d);\n+        }\n+    };\n+\n+    /** The {@code Math.tan} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction TAN = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.tan(d);\n+        }\n+    };\n+\n+    /** The {@code Math.tanh} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction TANH = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.tanh(d);\n+        }\n+    };\n+\n+    /** The {@code Math.cbrt} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction CBRT = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.cbrt(d);\n+        }\n+    };\n+\n+    /** The {@code Math.ceil} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction CEIL = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.ceil(d);\n+        }\n+    };\n+\n+    /** The {@code Math.floor} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction FLOOR = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.floor(d);\n+        }\n+    };\n+\n+    /** The {@code Math.log} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction LOG = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.log(d);\n+        }\n+    };\n+\n+    /** The {@code Math.log10} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction LOG10 = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.log10(d);\n+        }\n+    };\n+\n+    /** The {@code Math.cos} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction COS = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.cos(d);\n+        }\n+    };\n+\n+    /** The {@code Math.abs} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction ACOS = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.acos(d);\n+        }\n+    };\n+\n+    /** The {@code Math.cosh} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction COSH = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.cosh(d);\n+        }\n+    };\n+\n+    /** The {@code Math.rint} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction RINT = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.rint(d);\n+        }\n+    };\n+\n+    /** The {@code Math.signum} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction SIGNUM = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.signum(d);\n+        }\n+    };\n+\n+    /** The {@code Math.ulp} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static final UnivariateRealFunction ULP = new UnivariateRealFunction() {\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.ulp(d);\n+        }\n+    };\n+\n+    /** The {@code Math.pow} method wrapped as a {@link UnivariateRealFunction}. */\n+    public static class Pow implements UnivariateRealFunction {\n+\n+        /** The power to which the value should be raised. */\n+        private final double pow;\n+\n+        /** Simple constructor.\n+         * @param pow the power to which the value should be raised\n+         */\n+        public Pow(double pow) {\n+            this.pow = pow;\n+        }\n+\n+        /** {@inheritDoc} */\n+        public double value(double d) {\n+            return Math.pow(d, pow);\n+        }\n+\n+    }\n+\n+}", "timestamp": 1260398964, "metainfo": ""}