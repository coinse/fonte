{"sha": "6dde208f33e4fec50df2b2fb1e6ce28e912cee44", "log": "Math-707 Renamed \"TrivariateRealFunction\" to \"TrivariateFunction\".   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/TrivariateFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+/**\n+ * An interface representing a trivariate real function.\n+ *\n+ * @since 2.2\n+ * @version $Id$\n+ */\n+public interface TrivariateFunction {\n+    /**\n+     * Compute the value for the function.\n+     *\n+     * @param x x-coordinate for which the function value should be computed.\n+     * @param y y-coordinate for which the function value should be computed.\n+     * @param z z-coordinate for which the function value should be computed.\n+     * @return the value.\n+     */\n+    double value(double x, double y, double z);\n+}\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.analysis.TrivariateRealFunction;\n+import org.apache.commons.math.analysis.TrivariateFunction;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.OutOfRangeException;\n  * @since 2.2\n  */\n public class TricubicSplineInterpolatingFunction\n-    implements TrivariateRealFunction {\n+    implements TrivariateFunction {\n     /**\n      * Matrix to compute the spline coefficients from the function values\n      * and function derivatives values\n  * @version $Id$\n  */\n class TricubicSplineFunction\n-    implements TrivariateRealFunction {\n+    implements TrivariateFunction {\n     /** Number of points. */\n     private static final short N = 4;\n     /** Coefficients */\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.analysis.TrivariateRealFunction;\n+import org.apache.commons.math.analysis.TrivariateFunction;\n \n /**\n  * Interface representing a trivariate real interpolating function where the\n      * @throws org.apache.commons.math.exception.DimensionMismatchException\n      * if the array lengths are inconsistent.\n      */\n-    TrivariateRealFunction interpolate(double[] xval, double[] yval, double[] zval,\n+    TrivariateFunction interpolate(double[] xval, double[] yval, double[] zval,\n                                        double[][][] fval);\n }\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.util.FastMath;\n-import org.apache.commons.math.analysis.TrivariateRealFunction;\n+import org.apache.commons.math.analysis.TrivariateFunction;\n import org.junit.Assert;\n import org.junit.Test;\n \n         double[][][] fval = new double[xval.length][yval.length][zval.length];\n \n         @SuppressWarnings(\"unused\")\n-        TrivariateRealFunction tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval,\n+        TrivariateFunction tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval,\n                                                                              fval, fval, fval, fval,\n                                                                              fval, fval, fval, fval);\n         \n         double[] zval = new double[] {-12, -8, -5.5, -3, 0, 2.5};\n \n         // Function values\n-        TrivariateRealFunction f = new TrivariateRealFunction() {\n+        TrivariateFunction f = new TrivariateFunction() {\n                 public double value(double x, double y, double z) {\n                     return 2 * x - 3 * y - 4 * z + 5;\n                 }\n             }\n         }\n \n-        TrivariateRealFunction tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval,\n+        TrivariateFunction tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval,\n                                                                              fval, dFdX, dFdY, dFdZ,\n                                                                              d2FdXdY, d2FdXdZ, d2FdYdZ,\n                                                                              d3FdXdYdZ);\n         final double ky = 1;\n         \n         // Function values\n-        TrivariateRealFunction f = new TrivariateRealFunction() {\n+        TrivariateFunction f = new TrivariateFunction() {\n                 public double value(double x, double y, double z) {\n                     return a * FastMath.cos(omega * z - kx * x - ky * y);\n                 }\n         \n         // Partial derivatives with respect to x\n         double[][][] dFdX = new double[xval.length][yval.length][zval.length];\n-        TrivariateRealFunction dFdX_f = new TrivariateRealFunction() {\n+        TrivariateFunction dFdX_f = new TrivariateFunction() {\n                 public double value(double x, double y, double z) {\n                     return a * FastMath.sin(omega * z - kx * x - ky * y) * kx;\n                 }\n             \n         // Partial derivatives with respect to y\n         double[][][] dFdY = new double[xval.length][yval.length][zval.length];\n-        TrivariateRealFunction dFdY_f = new TrivariateRealFunction() {\n+        TrivariateFunction dFdY_f = new TrivariateFunction() {\n                 public double value(double x, double y, double z) {\n                     return a * FastMath.sin(omega * z - kx * x - ky * y) * ky;\n                 }\n \n         // Partial derivatives with respect to z\n         double[][][] dFdZ = new double[xval.length][yval.length][zval.length];\n-        TrivariateRealFunction dFdZ_f = new TrivariateRealFunction() {\n+        TrivariateFunction dFdZ_f = new TrivariateFunction() {\n                 public double value(double x, double y, double z) {\n                     return -a * FastMath.sin(omega * z - kx * x - ky * y) * omega;\n                 }\n \n         // Partial second derivatives w.r.t. (x, y)\n         double[][][] d2FdXdY = new double[xval.length][yval.length][zval.length];\n-        TrivariateRealFunction d2FdXdY_f = new TrivariateRealFunction() {\n+        TrivariateFunction d2FdXdY_f = new TrivariateFunction() {\n                 public double value(double x, double y, double z) {\n                     return -a * FastMath.cos(omega * z - kx * x - ky * y) * kx * ky;\n                 }\n \n         // Partial second derivatives w.r.t. (x, z)\n         double[][][] d2FdXdZ = new double[xval.length][yval.length][zval.length];\n-        TrivariateRealFunction d2FdXdZ_f = new TrivariateRealFunction() {\n+        TrivariateFunction d2FdXdZ_f = new TrivariateFunction() {\n                 public double value(double x, double y, double z) {\n                     return a * FastMath.cos(omega * z - kx * x - ky * y) * kx * omega;\n                 }\n \n         // Partial second derivatives w.r.t. (y, z)\n         double[][][] d2FdYdZ = new double[xval.length][yval.length][zval.length];\n-        TrivariateRealFunction d2FdYdZ_f = new TrivariateRealFunction() {\n+        TrivariateFunction d2FdYdZ_f = new TrivariateFunction() {\n                 public double value(double x, double y, double z) {\n                     return a * FastMath.cos(omega * z - kx * x - ky * y) * ky * omega;\n                 }\n \n         // Partial third derivatives\n         double[][][] d3FdXdYdZ = new double[xval.length][yval.length][zval.length];\n-        TrivariateRealFunction d3FdXdYdZ_f = new TrivariateRealFunction() {\n+        TrivariateFunction d3FdXdYdZ_f = new TrivariateFunction() {\n                 public double value(double x, double y, double z) {\n                     return a * FastMath.sin(omega * z - kx * x - ky * y) * kx * ky * omega;\n                 }\n             }\n         }\n \n-        TrivariateRealFunction tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval,\n+        TrivariateFunction tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval,\n                                                                              fval, dFdX, dFdY, dFdZ,\n                                                                              d2FdXdY, d2FdXdZ, d2FdYdZ,\n                                                                              d3FdXdYdZ);\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.util.FastMath;\n-import org.apache.commons.math.analysis.TrivariateRealFunction;\n+import org.apache.commons.math.analysis.TrivariateFunction;\n import org.junit.Assert;\n import org.junit.Test;\n \n         TrivariateRealGridInterpolator interpolator = new TricubicSplineInterpolator();\n         \n         @SuppressWarnings(\"unused\")\n-        TrivariateRealFunction p = interpolator.interpolate(xval, yval, zval, fval);\n+        TrivariateFunction p = interpolator.interpolate(xval, yval, zval, fval);\n         \n         double[] wxval = new double[] {3, 2, 5, 6.5};\n         try {\n      */\n     @Test\n     public void testPlane() {\n-        TrivariateRealFunction f = new TrivariateRealFunction() {\n+        TrivariateFunction f = new TrivariateFunction() {\n                 public double value(double x, double y, double z) {\n                     return 2 * x - 3 * y - z + 5;\n                 }\n             }\n         }\n \n-        TrivariateRealFunction p = interpolator.interpolate(xval, yval, zval, fval);\n+        TrivariateFunction p = interpolator.interpolate(xval, yval, zval, fval);\n         double x, y, z;\n         double expected, result;\n         \n         final double ky = 1;\n \n         // Function values\n-        TrivariateRealFunction f = new TrivariateRealFunction() {\n+        TrivariateFunction f = new TrivariateFunction() {\n                 public double value(double x, double y, double z) {\n                     return a * FastMath.cos(omega * z - kx * x - ky * y);\n                 }\n \n         TrivariateRealGridInterpolator interpolator = new TricubicSplineInterpolator();\n \n-        TrivariateRealFunction p = interpolator.interpolate(xval, yval, zval, fval);\n+        TrivariateFunction p = interpolator.interpolate(xval, yval, zval, fval);\n         double x, y, z;\n         double expected, result;\n         ", "timestamp": 1327709181, "metainfo": ""}