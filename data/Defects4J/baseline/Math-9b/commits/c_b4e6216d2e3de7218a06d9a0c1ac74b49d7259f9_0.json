{"sha": "b4e6216d2e3de7218a06d9a0c1ac74b49d7259f9", "log": "Another change to the stored Univariates.  The calculations are now abstracted into an AbstractStoreUnivariate class which take responsibility for all statistical calculations.  AbstractStoreUnivariate is implemented by two classes:  * StoreUnivariateImpl - This class uses a ExpandableDoubleArray for internal storage.  This class is a more efficient class in terms of storage and cycles for users who are interested in gathering statistics not available in the UnivariateImpl implementation.  * ListUnivariateImpl - This class is for a situation where a user might wish to maintain a List of numeric objects outside of a StoreUnivariate instance.  We still need to add serious error checking in the absence of 1.5's generics, but this implementation will work with any list that contains Number objects - (BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, Short).  This implementation ultimately transforms all numeric objects into double primitives via Number.doubleValue().  Becuase AbstractStoreUnivariate does not hold on to any state, a user can add values through the Univariate.addValue() function OR one can directly manipulate the contents of the List directly.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/AbstractStoreUnivariate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+/**\n+ * Provides univariate measures for an array of doubles.  \n+ * \n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public abstract class AbstractStoreUnivariate implements StoreUnivariate {\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.StoreUnivariate#getMode()\n+\t */\n+\tpublic double getMode() {\n+\t\t// Mode depends on a refactor Freq class\n+\t\tthrow new UnsupportedOperationException(\"getMode() is not yet implemented\");\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.StoreUnivariate#getSkewness()\n+\t */\n+\tpublic double getSkewness() {\n+\t\t// Initialize the skewness\n+\t\tdouble skewness = Double.NaN;\n+\t\t\n+\t\t// Get the mean and the standard deviation\n+\t\tdouble mean = getMean();\n+\t\tdouble stdDev = getStandardDeviation();\n+\n+\t\t// Sum the cubes of the distance from the mean divided by the standard deviation\n+\t\tdouble accum = 0.0;\n+\t\tfor( int i = 0; i < getN(); i++ ) {\n+\t\t\taccum += Math.pow( (getElement(i) - mean) / stdDev, 3.0);\n+\t\t}\n+\t\t\n+\t\t// Get N\n+\t\tdouble n = getN();\n+\t\t\n+\t\t// Calculate skewness\n+\t\tskewness = ( n / ( (n-1) * (n-2) ) ) * accum;\n+\n+\t\treturn skewness;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.StoreUnivariate#getKurtosis()\n+\t */\n+\tpublic double getKurtosis() {\n+\t\t// Initialize the kurtosis\n+\t\tdouble kurtosis = Double.NaN;\n+\t\t\n+\t\t// Get the mean and the standard deviation\n+\t\tdouble mean = getMean();\n+\t\tdouble stdDev = getStandardDeviation();\n+\n+\t\t// Sum the ^4 of the distance from the mean divided by the standard deviation\n+\t\tdouble accum = 0.0;\n+\t\tfor( int i = 0; i < getN(); i++ ) {\n+\t\t\taccum += Math.pow( (getElement(i) - mean) / stdDev, 4.0);\n+\t\t}\n+\t\t\n+\t\t// Get N\n+\t\tdouble n = getN();\n+\t\t\n+\t\tdouble coefficientOne = ( n * (n+1)) / ( (n-1) * (n-2) * (n-3) );\n+\t\tdouble termTwo = (  ( 3 * Math.pow( n - 1, 2.0)) /  ( (n-2) * (n-3) ) ); \n+\t\t// Calculate kurtosis\n+\t\tkurtosis = ( coefficientOne * accum ) - termTwo;\n+\n+\t\treturn kurtosis;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.StoreUnivariate#getKurtosisClass()\n+\t */\n+\tpublic int getKurtosisClass() {\n+\n+\t\tint kClass = StoreUnivariate.MESOKURTIC;\n+\t\t\n+\t\tdouble kurtosis = getKurtosis();\n+\t\tif( kurtosis > 0 ) {\n+\t\t\tkClass = StoreUnivariate.LEPTOKURTIC;\n+\t\t} else if( kurtosis < 0 ) {\n+\t\t\tkClass = StoreUnivariate.PLATYKURTIC;\n+\t\t}\n+\t\t\n+\t\treturn( kClass );\n+\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getMean()\n+\t */\n+\tpublic double getMean() {\n+\t\tdouble arithMean = getSum() / getN();\n+\t\treturn arithMean;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getVariance()\n+\t */\n+\tpublic double getVariance() {\n+\t\t// Initialize variance\n+\t\tdouble variance = Double.NaN;\n+\n+\t\tif( getN() == 1 ) {\n+\t\t\t// If this is a single value\n+\t\t\tvariance = 0;\n+\t\t} else if( getN() > 1 ) {\n+\t\t\t// Get the mean\n+\t\t\tdouble mean = getMean();\n+\n+\t\t\t// Calculate the sum of the squares of the distance between each value and the mean\n+\t\t\tdouble accum = 0.0;\t\t\n+\t\t\tfor( int i = 0; i < getN(); i++ ){\n+\t\t\t\t\taccum += Math.pow( (getElement(i) - mean), 2.0 );\n+\t\t\t}\n+\t\t\n+\t\t\t// Divide the accumulator by N - Hmmm... unbiased or biased?\n+\t\t\tvariance = accum / (getN() - 1);\n+\t\t }\n+\t\t\n+\t\treturn variance;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getStandardDeviation()\n+\t */\n+\tpublic double getStandardDeviation() {\n+\t\tdouble stdDev = Double.NaN;\n+\t\tif( getN() != 0 ) {\n+\t\t\tstdDev = Math.sqrt( getVariance() );\n+\t\t}\n+\t\treturn( stdDev );\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getMax()\n+\t */\n+\tpublic double getMax() {\n+\t\t\n+\t\t// Initialize maximum to NaN\n+\t\tdouble max = Double.NaN;\n+\t\t\n+\t\tfor( int i = 0; i < getN(); i++) {\n+\t\t\tif( i == 0 ) {\n+\t\t\t\tmax = getElement(i);\n+\t\t\t} else {\n+\t\t\t\tif( getElement(i) > max ) {\n+\t\t\t\t\tmax = getElement(i);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn max;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getMin()\n+\t */\n+\tpublic double getMin() {\n+\t\t// Initialize minimum to NaN\n+\t\tdouble min = Double.NaN;\n+\t\t\n+\t\tfor( int i = 0; i < getN(); i++) {\n+\t\t\tif( i == 0 ) {\n+\t\t\t\tmin = getElement(i);\n+\t\t\t} else {\n+\t\t\t\tif( getElement(i) < min ) {\n+\t\t\t\t\tmin = getElement(i);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn min;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getSum()\n+\t */\n+\tpublic double getSum() {\n+\t\tdouble accum = 0.0;\n+\t\tfor( int i = 0; i < getN(); i++) {\n+\t\t\taccum += getElement(i);\n+\t\t}\n+\t\treturn accum;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getSumsq()\n+\t */\n+\tpublic double getSumsq() {\n+\t\tdouble accum = 0.0;\n+\t\tfor( int i = 0; i < getN(); i++) {\n+\t\t\taccum += Math.pow(getElement(i), 2.0);\n+\t\t}\n+\t\treturn accum;\n+\t}\n+\n+}\n--- a/src/java/org/apache/commons/math/ExpandableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/ExpandableDoubleArray.java\n  */\n package org.apache.commons.math;\n \n+import java.io.Serializable;\n import java.util.NoSuchElementException;\n \n /**\n  * \n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n  */\n-public class ExpandableDoubleArray {\n+public class ExpandableDoubleArray implements Serializable {\n \n \t// This is the internal storage array.\n \tprivate double[] internalArray;\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/ListUnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public class ListUnivariateImpl extends AbstractStoreUnivariate {\n+\n+\t// Holds a reference to a list - GENERICs are going to make\n+\t// out lives easier here as we could only accept List<Number>\n+\tList list;\n+\n+\tpublic ListUnivariateImpl( List list ) {\n+\t\tthis.list = list;\n+\t}\n+\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.StoreUnivariate#getValues()\n+\t */\n+\tpublic double[] getValues() {\n+\n+\t\tdouble[] copiedArray = new double[list.size()];\n+\n+\t\tint i = 0;\n+\t\tIterator it = list.iterator();\n+\t\twhile( it.hasNext() ) {\n+\t\t\tNumber n = (Number) it.next();\n+\t\t\tcopiedArray[i] = n.doubleValue();\n+\t\t\ti++;\n+\t\t}\n+\n+\t\treturn copiedArray;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.StoreUnivariate#getElement(int)\n+\t */\n+\tpublic double getElement(int index) {\n+\t\tNumber n = (Number) list.get(index);\n+\t\treturn n.doubleValue();\n+\t}\n+\t\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#getN()\n+\t */\n+\tpublic double getN() {\n+\t\treturn list.size();\n+\t}\n+\t\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#addValue(double)\n+\t */\n+\tpublic void addValue(double v) {\n+\t\tlist.add( new Double(v));\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.Univariate#clear()\n+\t */\n+\tpublic void clear() {\n+\t\tlist.clear();\n+\t}\n+\n+}\n--- a/src/java/org/apache/commons/math/StoreUnivariate.java\n+++ b/src/java/org/apache/commons/math/StoreUnivariate.java\n \t * \n \t * @return returns the current set of numbers in the order in which they were added to this set\n \t */\n+\tpublic abstract double[] getValues();\n \t\n+\t/**\n+\t * Returns the element at the specified index\n+\t * \n+\t * @return return the element at the specified index\n+\t */\n+\tpublic abstract double getElement(int index);\n+\n }\n--- a/src/java/org/apache/commons/math/StoreUnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/StoreUnivariateImpl.java\n package org.apache.commons.math;\n \n /**\n- * Provides univariate measures for an array of doubles.  \n- * \n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n  */\n-public class StoreUnivariateImpl implements StoreUnivariate {\n+public class StoreUnivariateImpl extends AbstractStoreUnivariate {\n \n \tExpandableDoubleArray eDA;\n \n \t\teDA = new ExpandableDoubleArray();\n \t}\n \n+\n \t/* (non-Javadoc)\n-\t * @see org.apache.commons.math.StoreUnivariate#getMode()\n+\t * @see org.apache.commons.math.StoreUnivariate#getValues()\n \t */\n-\tpublic double getMode() {\n-\t\t// Mode depends on a refactor Freq class\n-\t\tthrow new UnsupportedOperationException(\"getMode() is not yet implemented\");\n+\tpublic double[] getValues() {\n+\n+\t\tdouble[] copiedArray = new double[ eDA.getNumElements() ];\n+\t\tSystem.arraycopy( eDA.getValues(), 0, copiedArray, 0, eDA.getNumElements());\n+\t\treturn copiedArray;\n \t}\n \n \t/* (non-Javadoc)\n-\t * @see org.apache.commons.math.StoreUnivariate#getSkewness()\n+\t * @see org.apache.commons.math.StoreUnivariate#getElement(int)\n \t */\n-\tpublic double getSkewness() {\n-\t\t// Initialize the skewness\n-\t\tdouble skewness = Double.NaN;\n-\t\t\n-\t\t// Get the mean and the standard deviation\n-\t\tdouble mean = getMean();\n-\t\tdouble stdDev = getStandardDeviation();\n-\n-\t\t// Sum the cubes of the distance from the mean divided by the standard deviation\n-\t\tdouble accum = 0.0;\n-\t\tfor( int i = 0; i < eDA.getNumElements(); i++ ) {\n-\t\t\taccum += Math.pow( (eDA.getElement(i) - mean) / stdDev, 3.0);\n-\t\t}\n-\t\t\n-\t\t// Get N\n-\t\tdouble n = getN();\n-\t\t\n-\t\t// Calculate skewness\n-\t\tskewness = ( n / ( (n-1) * (n-2) ) ) * accum;\n-\n-\t\treturn skewness;\n+\tpublic double getElement(int index) {\n+\t\treturn eDA.getElement(index);\n \t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.math.StoreUnivariate#getKurtosis()\n-\t */\n-\tpublic double getKurtosis() {\n-\t\t// Initialize the kurtosis\n-\t\tdouble kurtosis = Double.NaN;\n-\t\t\n-\t\t// Get the mean and the standard deviation\n-\t\tdouble mean = getMean();\n-\t\tdouble stdDev = getStandardDeviation();\n-\n-\t\t// Sum the ^4 of the distance from the mean divided by the standard deviation\n-\t\tdouble accum = 0.0;\n-\t\tfor( int i = 0; i < eDA.getNumElements(); i++ ) {\n-\t\t\taccum += Math.pow( (eDA.getElement(i) - mean) / stdDev, 4.0);\n-\t\t}\n-\t\t\n-\t\t// Get N\n-\t\tdouble n = getN();\n-\t\t\n-\t\tdouble coefficientOne = ( n * (n+1)) / ( (n-1) * (n-2) * (n-3) );\n-\t\tdouble termTwo = (  ( 3 * Math.pow( n - 1, 2.0)) /  ( (n-2) * (n-3) ) ); \n-\t\t// Calculate kurtosis\n-\t\tkurtosis = ( coefficientOne * accum ) - termTwo;\n-\n-\t\treturn kurtosis;\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.math.StoreUnivariate#getKurtosisClass()\n-\t */\n-\tpublic int getKurtosisClass() {\n-\n-\t\tint kClass = StoreUnivariate.MESOKURTIC;\n-\t\t\n-\t\tdouble kurtosis = getKurtosis();\n-\t\tif( kurtosis > 0 ) {\n-\t\t\tkClass = StoreUnivariate.LEPTOKURTIC;\n-\t\t} else if( kurtosis < 0 ) {\n-\t\t\tkClass = StoreUnivariate.PLATYKURTIC;\n-\t\t}\n-\t\t\n-\t\treturn( kClass );\n-\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.math.Univariate#addValue(double)\n-\t */\n-\tpublic void addValue(double v) {\n-\t\teDA.addElement( v );\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.math.Univariate#getMean()\n-\t */\n-\tpublic double getMean() {\n-\t\tdouble arithMean = getSum() / getN();\n-\t\treturn arithMean;\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.math.Univariate#getVariance()\n-\t */\n-\tpublic double getVariance() {\n-\t\t// Initialize variance\n-\t\tdouble variance = Double.NaN;\n-\n-\t\tif( getN() == 1 ) {\n-\t\t\t// If this is a single value\n-\t\t\tvariance = 0;\n-\t\t} else if( getN() > 1 ) {\n-\t\t\t// Get the mean\n-\t\t\tdouble mean = getMean();\n-\n-\t\t\t// Calculate the sum of the squares of the distance between each value and the mean\n-\t\t\tdouble accum = 0.0;\t\t\n-\t\t\tfor( int i = 0; i < eDA.getNumElements(); i++ ){\n-\t\t\t\t\taccum += Math.pow( (eDA.getElement(i) - mean), 2.0 );\n-\t\t\t}\n-\t\t\n-\t\t\t// Divide the accumulator by N - Hmmm... unbiased or biased?\n-\t\t\tvariance = accum / (getN() - 1);\n-\t\t }\n-\t\t\n-\t\treturn variance;\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.math.Univariate#getStandardDeviation()\n-\t */\n-\tpublic double getStandardDeviation() {\n-\t\tdouble stdDev = Double.NaN;\n-\t\tif( getN() != 0 ) {\n-\t\t\tstdDev = Math.sqrt( getVariance() );\n-\t\t}\n-\t\treturn( stdDev );\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.math.Univariate#getMax()\n-\t */\n-\tpublic double getMax() {\n-\t\t\n-\t\t// Initialize maximum to NaN\n-\t\tdouble max = Double.NaN;\n-\t\t\n-\t\tfor( int i = 0; i < eDA.getNumElements(); i++) {\n-\t\t\tif( i == 0 ) {\n-\t\t\t\tmax = eDA.getElement(i);\n-\t\t\t} else {\n-\t\t\t\tif( eDA.getElement(i) > max ) {\n-\t\t\t\t\tmax = eDA.getElement(i);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn max;\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.math.Univariate#getMin()\n-\t */\n-\tpublic double getMin() {\n-\t\t// Initialize minimum to NaN\n-\t\tdouble min = Double.NaN;\n-\t\t\n-\t\tfor( int i = 0; i < eDA.getNumElements(); i++) {\n-\t\t\tif( i == 0 ) {\n-\t\t\t\tmin = eDA.getElement(i);\n-\t\t\t} else {\n-\t\t\t\tif( eDA.getElement(i) < min ) {\n-\t\t\t\t\tmin = eDA.getElement(i);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn min;\n-\t}\n-\n+\t\n \t/* (non-Javadoc)\n \t * @see org.apache.commons.math.Univariate#getN()\n \t */\n \tpublic double getN() {\n \t\treturn eDA.getNumElements();\n \t}\n-\n+\t\n \t/* (non-Javadoc)\n-\t * @see org.apache.commons.math.Univariate#getSum()\n+\t * @see org.apache.commons.math.Univariate#addValue(double)\n \t */\n-\tpublic double getSum() {\n-\t\tdouble accum = 0.0;\n-\t\tfor( int i = 0; i < eDA.getNumElements(); i++) {\n-\t\t\taccum += eDA.getElement(i);\n-\t\t}\n-\t\treturn accum;\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.math.Univariate#getSumsq()\n-\t */\n-\tpublic double getSumsq() {\n-\t\tdouble accum = 0.0;\n-\t\tfor( int i = 0; i < eDA.getNumElements(); i++) {\n-\t\t\taccum += Math.pow(eDA.getElement(i), 2.0);\n-\t\t}\n-\t\treturn accum;\n+\tpublic void addValue(double v) {\n+\t\teDA.addElement( v );\n \t}\n \n \t/* (non-Javadoc)\n--- a/src/java/org/apache/commons/math/UnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/UnivariateImpl.java\n  */\n package org.apache.commons.math;\n \n+import java.io.Serializable;\n+\n /**\n  *\n  * Accumulates univariate statistics for values fed in \n  * to doubles by addValue().  \n  *\n  * @author Phil Steitz\n- * @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:00 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/15 06:33:19 $\n  * \n */\n-public class UnivariateImpl implements Univariate {\n+public class UnivariateImpl implements Univariate, Serializable {\n \n     /** running sum of values that have been added */\n     private double sum = 0.0;\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ListUnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/05/15 06:33:19 $\n+ */\n+\n+public final class ListUnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+    \n+    public ListUnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(ListUnivariateImplTest.class);\n+        suite.setName(\"Freq Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+    \tList externalList = new ArrayList();\n+    \t\n+        StoreUnivariate u = new ListUnivariateImpl( externalList ); \n+\n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tList list = new ArrayList();\n+    \t\n+    \tStoreUnivariate u = new ListUnivariateImpl( list );\n+    \t    \t\n+\t\tassertTrue(\"Mean of n = 0 set should be NaN\", Double.isNaN( u.getMean() ) );\n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", Double.isNaN( u.getStandardDeviation() ) );\n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", Double.isNaN(u.getVariance() ) );\n+\n+\t\tlist.add( new Double(one));\n+\n+\t\tassertTrue( \"Mean of n = 1 set should be value of single item n1\", u.getMean() == one);\n+\t\tassertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+\t\tassertTrue( \"Variance of n = 1 set should be zero\", u.getVariance() == 0);\t\n+    }\n+    \n+    public void testSkewAndKurtosis() {\n+    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \t\n+    \tdouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+  \t  \t\t\t\t\t\t\t\t\t\t 9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+  \t  \tfor( int i = 0; i < testArray.length; i++) {\n+  \t  \t\tu.addValue( testArray[i]);\n+  \t  \t}\n+  \t  \t\n+\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+}\n+", "timestamp": 1052980399, "metainfo": ""}