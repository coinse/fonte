{"sha": "8d075ba387df002d76cbdfdc9a9b0016079d0660", "log": "Documented and fixed NaN handling.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n \n import java.io.Serializable;\n \n-import org\n-    .apache\n-    .commons\n-    .math\n-    .stat\n-    .univariate\n-    .AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- * Returns the product for this collection of values.\n- *\n- * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $\n+ * Returns the product of the available values.\n+ * <p>\n+ * If there are no values in the dataset, or any of the values are \n+ * <code>NaN</code>, then <code>NaN</code> is returned.  \n+ * \n+ * @version $Revision: 1.19 $ $Date: 2004/06/29 06:06:13 $\n  */\n public class Product extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     /** Serializable version identifier */\n     static final long serialVersionUID = 2824226005990582538L;   \n      \n-    /** */\n-    private int n = 0;\n+    /**The number of values that have been added */\n+    private long n = 0;\n     \n     /**\n      * The current Running Product.\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n     public void increment(final double d) {\n-        if (Double.isNaN(value)) {\n+        if (n == 0) {\n             value = d;\n         } else {\n             value *= d;\n \n     /**\n      * Returns the product for this collection of values\n+     * \n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length the number of elements to include\n      * @return the product values or Double.NaN if the array is empty\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n-    public double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+    public double evaluate(final double[] values, final int begin, final int length) {\n         double product = Double.NaN;\n         if (test(values, begin, length)) {\n             product = 1.0;", "timestamp": 1088489173, "metainfo": ""}