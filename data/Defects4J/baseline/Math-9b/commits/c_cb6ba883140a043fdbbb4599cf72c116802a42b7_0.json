{"sha": "cb6ba883140a043fdbbb4599cf72c116802a42b7", "log": "added new tests  ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.optimization;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.FunctionEvaluationException;\n+import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.MultivariateMatrixFunction;\n+import org.apache.commons.math.linear.BlockRealMatrix;\n+import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.optimization.general.GaussNewtonOptimizer;\n+import org.apache.commons.math.random.GaussianRandomGenerator;\n+import org.apache.commons.math.random.JDKRandomGenerator;\n+import org.apache.commons.math.random.RandomVectorGenerator;\n+import org.apache.commons.math.random.UncorrelatedRandomVectorGenerator;\n+import org.junit.Test;\n+\n+/**\n+ * <p>Some of the unit tests are re-implementations of the MINPACK <a\n+ * href=\"http://www.netlib.org/minpack/ex/file17\">file17</a> and <a\n+ * href=\"http://www.netlib.org/minpack/ex/file22\">file22</a> test files. \n+ * The redistribution policy for MINPACK is available <a\n+ * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for\n+ * convenience, it is reproduced below.</p>\n+\n+ * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n+ * <tr><td>\n+ *    Minpack Copyright Notice (1999) University of Chicago.\n+ *    All rights reserved\n+ * </td></tr>\n+ * <tr><td>\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * <ol>\n+ *  <li>Redistributions of source code must retain the above copyright\n+ *      notice, this list of conditions and the following disclaimer.</li>\n+ * <li>Redistributions in binary form must reproduce the above\n+ *     copyright notice, this list of conditions and the following\n+ *     disclaimer in the documentation and/or other materials provided\n+ *     with the distribution.</li>\n+ * <li>The end-user documentation included with the redistribution, if any,\n+ *     must include the following acknowledgment:\n+ *     <code>This product includes software developed by the University of\n+ *           Chicago, as Operator of Argonne National Laboratory.</code>\n+ *     Alternately, this acknowledgment may appear in the software itself,\n+ *     if and wherever such third-party acknowledgments normally appear.</li>\n+ * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n+ *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n+ *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n+ *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n+ *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n+ *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n+ *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n+ *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n+ *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n+ *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n+ *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n+ *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n+ *     BE CORRECTED.</strong></li>\n+ * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n+ *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n+ *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n+ *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n+ *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n+ *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n+ *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n+ *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n+ *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n+ *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n+ * <ol></td></tr>\n+ * </table>\n+\n+ * @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)\n+ * @author Burton S. Garbow (original fortran minpack tests)\n+ * @author Kenneth E. Hillstrom (original fortran minpack tests)\n+ * @author Jorge J. More (original fortran minpack tests)\n+ * @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)\n+ */\n+public class MultiStartDifferentiableMultivariateVectorialOptimizerTest {\n+\n+    @Test\n+    public void testTrivial() throws FunctionEvaluationException, OptimizationException {\n+        LinearProblem problem =\n+            new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });\n+        DifferentiableMultivariateVectorialOptimizer underlyingOptimizer =\n+            new GaussNewtonOptimizer(true);\n+        JDKRandomGenerator g = new JDKRandomGenerator();\n+        g.setSeed(16069223052l);\n+        RandomVectorGenerator generator =\n+            new UncorrelatedRandomVectorGenerator(1, new GaussianRandomGenerator(g));\n+        MultiStartDifferentiableMultivariateVectorialOptimizer optimizer =\n+            new MultiStartDifferentiableMultivariateVectorialOptimizer(underlyingOptimizer,\n+                                                                       10, generator);\n+        optimizer.setMaxIterations(100);\n+        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+\n+        // no optima before first optimization attempt\n+        try {\n+            optimizer.getOptima();\n+            fail(\"an exception should have been thrown\");\n+        } catch (IllegalStateException ise) {\n+            // expected\n+        }\n+        VectorialPointValuePair optimum =\n+            optimizer.optimize(problem, problem.target, new double[] { 1 }, new double[] { 0 });\n+        assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);\n+        assertEquals(3.0, optimum.getValue()[0], 1.0e-10);\n+        VectorialPointValuePair[] optima = optimizer.getOptima();\n+        assertEquals(10, optima.length);\n+        for (int i = 0; i < optima.length; ++i) {\n+            assertEquals(1.5, optima[i].getPoint()[0], 1.0e-10);\n+            assertEquals(3.0, optima[i].getValue()[0], 1.0e-10);\n+        }\n+        assertTrue(optimizer.getEvaluations() > 20);\n+        assertTrue(optimizer.getEvaluations() < 50);\n+        assertTrue(optimizer.getIterations() > 20);\n+        assertTrue(optimizer.getIterations() < 50);\n+        assertTrue(optimizer.getJacobianEvaluations() > 20);\n+        assertTrue(optimizer.getJacobianEvaluations() < 50);\n+        assertEquals(100, optimizer.getMaxIterations());\n+    }\n+\n+    @Test(expected = OptimizationException.class)\n+    public void testNoOptimum() throws FunctionEvaluationException, OptimizationException {\n+        DifferentiableMultivariateVectorialOptimizer underlyingOptimizer =\n+            new GaussNewtonOptimizer(true);\n+        JDKRandomGenerator g = new JDKRandomGenerator();\n+        g.setSeed(12373523445l);\n+        RandomVectorGenerator generator =\n+            new UncorrelatedRandomVectorGenerator(1, new GaussianRandomGenerator(g));\n+        MultiStartDifferentiableMultivariateVectorialOptimizer optimizer =\n+            new MultiStartDifferentiableMultivariateVectorialOptimizer(underlyingOptimizer,\n+                                                                       10, generator);\n+        optimizer.setMaxIterations(100);\n+        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-6, 1.0e-6));\n+        optimizer.optimize(new DifferentiableMultivariateVectorialFunction() {\n+                public MultivariateMatrixFunction jacobian() {\n+                    return null;\n+                }\n+                public double[] value(double[] point) throws FunctionEvaluationException {\n+                    throw new FunctionEvaluationException(point[0]);\n+                }\n+            }, new double[] { 2 }, new double[] { 1 }, new double[] { 0 });\n+    }\n+\n+    private static class LinearProblem implements DifferentiableMultivariateVectorialFunction, Serializable {\n+\n+        private static final long serialVersionUID = -8804268799379350190L;\n+        final RealMatrix factors;\n+        final double[] target;\n+        public LinearProblem(double[][] factors, double[] target) {\n+            this.factors = new BlockRealMatrix(factors);\n+            this.target  = target;\n+        }\n+\n+        public double[] value(double[] variables) {\n+            return factors.operate(variables);\n+        }\n+\n+        public MultivariateMatrixFunction jacobian() {\n+            return new MultivariateMatrixFunction() {\n+                private static final long serialVersionUID = -8387467946663627585L;\n+                public double[][] value(double[] point) {\n+                    return factors.getData();\n+                }\n+            };\n+        }\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.optimization;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.FunctionEvaluationException;\n+import org.apache.commons.math.analysis.MultivariateRealFunction;\n+import org.apache.commons.math.optimization.direct.NelderMead;\n+import org.apache.commons.math.random.GaussianRandomGenerator;\n+import org.apache.commons.math.random.JDKRandomGenerator;\n+import org.apache.commons.math.random.RandomVectorGenerator;\n+import org.apache.commons.math.random.UncorrelatedRandomVectorGenerator;\n+import org.junit.Test;\n+\n+public class MultiStartMultivariateRealOptimizerTest {\n+\n+  @Test\n+  public void testRosenbrock()\n+    throws FunctionEvaluationException, ConvergenceException {\n+\n+    Rosenbrock rosenbrock = new Rosenbrock();\n+    NelderMead underlying = new NelderMead();\n+    underlying.setStartConfiguration(new double[][] {\n+                                         { -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }\n+                                     });\n+    JDKRandomGenerator g = new JDKRandomGenerator();\n+    g.setSeed(16069223052l);\n+    RandomVectorGenerator generator =\n+        new UncorrelatedRandomVectorGenerator(2, new GaussianRandomGenerator(g));\n+    MultiStartMultivariateRealOptimizer optimizer =\n+        new MultiStartMultivariateRealOptimizer(underlying, 10, generator);\n+    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1, 1.0e-3));\n+    optimizer.setMaxIterations(100);\n+    RealPointValuePair optimum =\n+        optimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1.0 });\n+\n+    assertEquals(rosenbrock.getCount(), optimizer.getEvaluations());\n+    assertTrue(optimizer.getEvaluations() > 20);\n+    assertTrue(optimizer.getEvaluations() < 250);\n+    assertTrue(optimum.getValue() < 8.0e-4);\n+\n+  }\n+\n+  private class Rosenbrock implements MultivariateRealFunction {\n+\n+      private int count;\n+\n+      public Rosenbrock() {\n+          count = 0;\n+      }\n+\n+      public double value(double[] x) throws FunctionEvaluationException {\n+          ++count;\n+          double a = x[1] - x[0] * x[0];\n+          double b = 1.0 - x[0];\n+          return 100 * a * a + b * b;\n+      }\n+\n+      public int getCount() {\n+          return count;\n+      }\n+\n+  }\n+\n+}", "timestamp": 1245413041, "metainfo": ""}