{"sha": "4a5f72049c95483fc8f420227d40d22f7cbdd728", "log": "the regular function objects (Acos, Sqrt, ...) now implement the new UnivariateDifferentiable interface.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Acos.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Acos.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Acos implements DifferentiableUnivariateFunction {\n+public class Acos implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.acos(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return -1 / FastMath.sqrt(1 - x * x);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.acos();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Acosh.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Acosh.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Acosh implements DifferentiableUnivariateFunction {\n+public class Acosh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.acosh(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return 1 / FastMath.sqrt(x * x - 1);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.acosh();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Asin.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Asin.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Asin implements DifferentiableUnivariateFunction {\n+public class Asin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.asin(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return 1 / FastMath.sqrt(1 - x * x);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.asin();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Asinh.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Asinh.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Asinh implements DifferentiableUnivariateFunction {\n+public class Asinh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.asinh(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return 1 / FastMath.sqrt(1 + x * x);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.asinh();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Atan.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Atan.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Atan implements DifferentiableUnivariateFunction {\n+public class Atan implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.atan(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return 1 / (1 + x * x);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.atan();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Atanh.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Atanh.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Atanh implements DifferentiableUnivariateFunction {\n+public class Atanh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.atanh(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return 1 / (1 - x * x);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.atanh();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Cbrt implements DifferentiableUnivariateFunction {\n+public class Cbrt implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.cbrt(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return 1 / (3 * FastMath.cbrt(x * x));\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.cbrt();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Constant.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Constant.java\n package org.apache.commons.math3.analysis.function;\n \n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.FunctionUtils;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n \n /**\n  * Constant function.\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Constant implements DifferentiableUnivariateFunction {\n+public class Constant implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** Constant. */\n     private final double c;\n \n         return c;\n     }\n \n-    /** {@inheritDoc} */\n-    public DifferentiableUnivariateFunction derivative() {\n-        return new Constant(0);\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n+    public UnivariateFunction derivative() {\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return new DerivativeStructure(t.getFreeParameters(), t.getOrder(), c);\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Cos.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Cos.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Cos implements DifferentiableUnivariateFunction {\n+public class Cos implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.cos(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return -FastMath.sin(x);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.cos();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Cosh.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Cosh.java\n package org.apache.commons.math3.analysis.function;\n \n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.FunctionUtils;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Cosh implements DifferentiableUnivariateFunction {\n+public class Cosh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.cosh(x);\n     }\n \n-    /** {@inheritDoc} */\n-    public DifferentiableUnivariateFunction derivative() {\n-        return new Sinh();\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n+    public UnivariateFunction derivative() {\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.cosh();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Exp.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Exp.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Exp implements DifferentiableUnivariateFunction {\n+public class Exp implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.exp(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return FastMath.exp(x);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.exp();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Expm1.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Expm1.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Expm1 implements DifferentiableUnivariateFunction {\n+public class Expm1 implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.expm1(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return FastMath.exp(x);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.expm1();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import java.util.Arrays;\n+\n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.Precision;\n \n /**\n  * <a href=\"http://en.wikipedia.org/wiki/Gaussian_function\">\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Gaussian implements DifferentiableUnivariateFunction {\n+public class Gaussian implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** Mean. */\n     private final double mean;\n+    /** Inverse of the standard deviation. */\n+    private final double is;\n     /** Inverse of twice the square of the standard deviation. */\n     private final double i2s2;\n     /** Normalization factor. */\n \n         this.norm = norm;\n         this.mean = mean;\n-        this.i2s2 = 1 / (2 * sigma * sigma);\n+        this.is   = 1 / sigma;\n+        this.i2s2 = 0.5 * is * is;\n     }\n \n     /**\n         return value(x - mean, norm, i2s2);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                final double diff = x - mean;\n-                final double g = Gaussian.value(diff, norm, i2s2);\n-\n-                if (g == 0) {\n-                    // Avoid returning NaN in case of overflow.\n-                    return 0;\n-                } else {\n-                    return -2 * diff * i2s2 * g;\n-                }\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n \n     /**\n                                 double i2s2) {\n         return norm * FastMath.exp(-xMinusMean * xMinusMean * i2s2);\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+\n+        final double u = is * (t.getValue() - mean);\n+        double[] f = new double[t.getOrder() + 1];\n+\n+        // the nth order derivative of the Gaussian has the form:\n+        // dn(g(x)/dxn = (norm / s^n) P_n(u) exp(-u^2/2) with u=(x-m)/s\n+        // where P_n(u) is a degree n polynomial with same parity as n\n+        // P_0(u) = 1, P_1(u) = -u, P_2(u) = u^2 - 1, P_3(u) = -u^3 + 3 u...\n+        // the general recurrence relation for P_n is:\n+        // P_n(u) = P_(n-1)'(u) - u P_(n-1)(u)\n+        // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n+        final double[] p = new double[f.length];\n+        p[0] = 1;\n+        final double u2 = u * u;\n+        double coeff = norm * FastMath.exp(-0.5 * u2);\n+        if (coeff <= Precision.SAFE_MIN) {\n+            Arrays.fill(f, 0.0);\n+        } else {\n+            f[0] = coeff;\n+            for (int n = 1; n < f.length; ++n) {\n+\n+                // update and evaluate polynomial P_n(x)\n+                double v = 0;\n+                p[n] = -p[n - 1];\n+                for (int k = n; k >= 0; k -= 2) {\n+                    v = v * u2 + p[k];\n+                    if (k > 2) {\n+                        p[k - 2] = (k - 1) * p[k - 1] - p[k - 3];\n+                    } else if (k == 2) {\n+                        p[0] = p[1];\n+                    }\n+                }\n+                if ((n & 0x1) == 1) {\n+                    v *= u;\n+                }\n+\n+                coeff *= is;\n+                f[n] = coeff * v;\n+\n+            }\n+        }\n+\n+        return t.compose(f);\n+\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.FunctionUtils;\n+import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n-import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n-import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NullArgumentException;\n-import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class HarmonicOscillator implements DifferentiableUnivariateFunction {\n+public class HarmonicOscillator implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** Amplitude. */\n     private final double amplitude;\n     /** Angular frequency. */\n         return value(omega * x + phase, amplitude);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return -amplitude * omega * FastMath.sin(omega * x + phase);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n \n     /**\n                                 double amplitude) {\n         return amplitude * FastMath.cos(xTimesOmegaPlusPhase);\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        final double x = t.getValue();\n+        double[] f = new double[t.getOrder() + 1];\n+\n+        final double alpha = omega * x + phase;\n+        f[0] = amplitude * FastMath.cos(alpha);\n+        if (f.length > 1) {\n+            f[1] = -amplitude * omega * FastMath.sin(alpha);\n+            final double mo2 = - omega * omega;\n+            for (int i = 2; i < f.length; ++i) {\n+                f[i] = mo2 * f[i - 2];\n+            }\n+        }\n+\n+        return t.compose(f);\n+\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Identity.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Identity.java\n package org.apache.commons.math3.analysis.function;\n \n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.FunctionUtils;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n \n /**\n  * Identity function.\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Identity implements DifferentiableUnivariateFunction {\n+public class Identity implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return x;\n     }\n \n-    /** {@inheritDoc} */\n-    public DifferentiableUnivariateFunction derivative() {\n-        return new Constant(1);\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n+    public UnivariateFunction derivative() {\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t;\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Inverse.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Inverse.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n \n /**\n  * Inverse function.\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Inverse implements DifferentiableUnivariateFunction {\n+public class Inverse implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return 1 / x;\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return -1 / (x * x);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.reciprocal();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Log.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Log.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Log implements DifferentiableUnivariateFunction {\n+public class Log implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.log(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return 1 / x;\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.log();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Log10.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Log10.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Log10 implements DifferentiableUnivariateFunction {\n-    /** ln(10) = {@value}.*/\n-    private static final double LN_10 = FastMath.log(10);\n+public class Log10 implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n \n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.log10(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return 1 / (x * LN_10);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.log10();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Log1p.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Log1p.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Log1p implements DifferentiableUnivariateFunction {\n+public class Log1p implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.log1p(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return 1 / (1 + x);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.log1p();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Logistic implements DifferentiableUnivariateFunction {\n+public class Logistic implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** Lower asymptote. */\n     private final double a;\n     /** Upper asymptote. */\n         return value(m - x, k, b, q, a, oneOverN);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                final double exp = q * FastMath.exp(b * (m - x));\n-                if (Double.isInfinite(exp)) {\n-                    // Avoid returning NaN in case of overflow.\n-                    return 0;\n-                }\n-                final double exp1 = exp + 1;\n-                return b * oneOverN * exp / FastMath.pow(exp1, oneOverN + 1);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n \n     /**\n                                 double oneOverN) {\n         return a + (k - a) / FastMath.pow(1 + q * FastMath.exp(b * mMinusX), oneOverN);\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.negate().add(m).multiply(b).exp().multiply(q).add(1).pow(oneOverN).reciprocal().multiply(k - a).add(a);\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Logit.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Logit.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.FunctionUtils;\n+import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n-import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n-import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NullArgumentException;\n-import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.util.FastMath;\n \n  * @since 3.0\n  * @version $Id$\n  */\n-public class Logit implements DifferentiableUnivariateFunction {\n+public class Logit implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** Lower bound. */\n     private final double lo;\n     /** Higher bound. */\n         return value(x, lo, hi);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return (hi - lo) / ((x - lo) * (hi - x));\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n \n     /**\n         }\n         return FastMath.log((x - lo) / (hi - x));\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     * @exception OutOfRangeException if parameter is outside of function domain\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t)\n+        throws OutOfRangeException {\n+        final double x = t.getValue();\n+        if (x < lo || x > hi) {\n+            throw new OutOfRangeException(x, lo, hi);\n+        }\n+        double[] f = new double[t.getOrder() + 1];\n+\n+        // function value\n+        f[0] = FastMath.log((x - lo) / (hi - x));\n+\n+        if (Double.isInfinite(f[0])) {\n+\n+            if (f.length > 1) {\n+                f[1] = Double.POSITIVE_INFINITY;\n+            }\n+            // fill the array with infinities\n+            // (for x close to lo the signs will flip between -inf and +inf,\n+            //  for x close to hi the signs will always be +inf)\n+            // this is probably overkill, since the call to compose at the end\n+            // of the method will transform most infinities into NaN ...\n+            for (int i = 2; i < f.length; ++i) {\n+                f[i] = f[i - 2];\n+            }\n+\n+        } else {\n+\n+            // function derivatives\n+            final double invL = 1.0 / (x - lo);\n+            double xL = invL;\n+            final double invH = 1.0 / (hi - x);\n+            double xH = invH;\n+            for (int i = 1; i < f.length; ++i) {\n+                f[i] = xL + xH;\n+                xL  *= -i * invL;\n+                xH  *=  i * invH;\n+            }\n+        }\n+        \n+        return t.compose(f);\n+\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Minus.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Minus.java\n package org.apache.commons.math3.analysis.function;\n \n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.FunctionUtils;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n \n /**\n  * Minus function.\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Minus implements DifferentiableUnivariateFunction {\n+public class Minus implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return -x;\n     }\n \n-    /** {@inheritDoc} */\n-    public DifferentiableUnivariateFunction derivative() {\n-        return new Constant(-1);\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n+    public UnivariateFunction derivative() {\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.negate();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Power.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Power.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Power implements DifferentiableUnivariateFunction {\n+public class Power implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** Power. */\n     private final double p;\n \n         return FastMath.pow(x, p);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return p * FastMath.pow(x, p - 1);\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.pow(p);\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import java.util.Arrays;\n+\n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n import org.apache.commons.math3.analysis.ParametricUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.util.FastMath;\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Sigmoid implements DifferentiableUnivariateFunction {\n+public class Sigmoid implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** Lower asymptote. */\n     private final double lo;\n     /** Higher asymptote. */\n         this.hi = hi;\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                final double exp = FastMath.exp(-x);\n-                if (Double.isInfinite(exp)) {\n-                    // Avoid returning NaN in case of overflow.\n-                    return 0;\n-                }\n-                final double exp1 = 1 + exp;\n-                return (hi - lo) * exp / (exp1 * exp1);\n-            }\n-        };\n-    }\n-\n-    /** {@inheritDoc} */\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n+    }\n+\n     public double value(double x) {\n         return value(x, lo, hi);\n     }\n                                 double hi) {\n         return lo + (hi - lo) / (1 + FastMath.exp(-x));\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+\n+        double[] f = new double[t.getOrder() + 1];\n+        final double exp = FastMath.exp(-t.getValue());\n+        if (Double.isInfinite(exp)) {\n+\n+            // special handling near lower boundary, to avoid NaN\n+            f[0] = lo;\n+            Arrays.fill(f, 1, f.length, 0.0);\n+\n+        } else {\n+\n+            // the nth order derivative of sigmoid has the form:\n+            // dn(sigmoid(x)/dxn = P_n(exp(-x)) / (1+exp(-x))^(n+1)\n+            // where P_n(t) is a degree n polynomial with normalized higher term\n+            // P_0(t) = 1, P_1(t) = t, P_2(t) = t^2 - t, P_3(t) = t^3 - 4 t^2 + t...\n+            // the general recurrence relation for P_n is:\n+            // P_n(x) = n t P_(n-1)(t) - t (1 + t) P_(n-1)'(t)\n+            final double[] p = new double[f.length];\n+\n+            final double inv   = 1 / (1 + exp);\n+            double coeff = hi - lo;\n+            for (int n = 0; n < f.length; ++n) {\n+\n+                // update and evaluate polynomial P_n(t)\n+                double v = 0;\n+                p[n] = 1;\n+                for (int k = n; k >= 0; --k) {\n+                    v = v * exp + p[k];\n+                    if (k > 1) {\n+                        p[k - 1] = (n - k + 2) * p[k - 2] - (k - 1) * p[k - 1];\n+                    } else {\n+                        p[0] = 0;\n+                    }\n+                }\n+\n+                coeff *= inv;\n+                f[n]   = coeff * v;\n+\n+            }\n+\n+            // fix function value\n+            f[0] += lo;\n+\n+        }\n+\n+        return t.compose(f);\n+\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Sin.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sin.java\n package org.apache.commons.math3.analysis.function;\n \n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.FunctionUtils;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Sin implements DifferentiableUnivariateFunction {\n+public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.sin(x);\n     }\n \n-    /** {@inheritDoc} */\n-    public DifferentiableUnivariateFunction derivative() {\n-        return new Cos();\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n+    public UnivariateFunction derivative() {\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.sin();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Sinc.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sinc.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n-import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Sinc implements DifferentiableUnivariateFunction {\n+public class Sinc implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /**\n-     * Value below which the result of the computation will not change\n-     * anymore due to the finite precision of the \"double\" representation\n-     * of real numbers.\n-     */\n-    private static final double SHORTCUT = 1e-9;\n+     * Value below which the computations are done using Taylor series.\n+     * <p>\n+     * The Taylor series for sinc even order derivatives are:\n+     * <pre>\n+     * d^(2n)sinc/dx^(2n)     = Sum_(k>=0) (-1)^(n+k) / ((2k)!(2n+2k+1)) x^(2k)\n+     *                        = (-1)^n     [ 1/(2n+1) - x^2/(4n+6) + x^4/(48n+120) - x^6/(1440n+5040) + O(x^8) ]\n+     * </pre>\n+     * </p>\n+     * <p>\n+     * The Taylor series for sinc odd order derivatives are:\n+     * <pre>\n+     * d^(2n+1)sinc/dx^(2n+1) = Sum_(k>=0) (-1)^(n+k+1) / ((2k+1)!(2n+2k+3)) x^(2k+1)\n+     *                        = (-1)^(n+1) [ x/(2n+3) - x^3/(12n+30) + x^5/(240n+840) - x^7/(10080n+45360) + O(x^9) ]\n+     * </pre>\n+     * </p>\n+     * <p>\n+     * So the ratio of the fourth term with respect to the first term\n+     * is always smaller than x^6/720, for all derivative orders.\n+     * This implies that neglecting this term and using only the first three terms induces\n+     * a relative error bounded by x^6/720. The SHORTCUT value is chosen such that this\n+     * relative error is below double precision accuracy when |x| <= SHORTCUT.\n+     * </p>\n+     */\n+    private static final double SHORTCUT = 6.0e-3;\n     /** For normalized sinc function. */\n     private final boolean normalized;\n \n     }\n \n     /** {@inheritDoc} */\n-    public double value(double x) {\n+    public double value(final double x) {\n+        final double scaledX = normalized ? FastMath.PI * x : x;\n+        if (FastMath.abs(scaledX) <= SHORTCUT) {\n+            // use Taylor series\n+            final double scaledX2 = scaledX * scaledX;\n+            return ((scaledX2 - 20) * scaledX2 + 120) / 120;\n+        } else {\n+            // use definition expression\n+            return FastMath.sin(scaledX) / scaledX;\n+        }\n+    }\n+\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n+    public UnivariateFunction derivative() {\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n+    }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+\n+        final double scaledX  = (normalized ? FastMath.PI : 1) * t.getValue();\n+        final double scaledX2 = scaledX * scaledX;\n+\n+        double[] f = new double[t.getOrder() + 1];\n+\n+        if (FastMath.abs(scaledX) <= SHORTCUT) {\n+\n+            for (int i = 0; i < f.length; ++i) {\n+                final int k = i / 2;\n+                if ((i & 0x1) == 0) {\n+                    // even derivation order\n+                    f[i] = (((k & 0x1) == 0) ? 1 : -1) *\n+                           (1.0 / (i + 1) - scaledX2 * (1.0 / (2 * i + 6) - scaledX2 / (24 * i + 120)));\n+                } else {\n+                    // odd derivation order\n+                    f[i] = (((k & 0x1) == 0) ? -scaledX : scaledX) *\n+                           (1.0 / (i + 2) - scaledX2 * (1.0 / (6 * i + 24) - scaledX2 / (120 * i + 720)));\n+                }\n+            }\n+\n+        } else {\n+\n+            final double inv = 1 / scaledX;\n+            final double cos = FastMath.cos(scaledX);\n+            final double sin = FastMath.sin(scaledX);\n+\n+            f[0] = inv * sin;\n+\n+            // the nth order derivative of sinc has the form:\n+            // dn(sinc(x)/dxn = [S_n(x) sin(x) + C_n(x) cos(x)] / x^(n+1)\n+            // where S_n(x) is an even polynomial with degree n-1 or n (depending on parity)\n+            // and C_n(x) is an odd polynomial with degree n-1 or n (depending on parity)\n+            // S_0(x) = 1, S_1(x) = -1, S_2(x) = -x^2 + 2, S_3(x) = 3x^2 - 6...\n+            // C_0(x) = 0, C_1(x) = x, C_2(x) = -2x, C_3(x) = -x^3 + 6x...\n+            // the general recurrence relations for S_n and C_n are:\n+            // S_n(x) = x S_(n-1)'(x) - n S_(n-1)(x) - x C_(n-1)(x)\n+            // C_n(x) = x C_(n-1)'(x) - n C_(n-1)(x) + x S_(n-1)(x)\n+            // as per polynomials parity, we can store both S_n and C_n in the same array\n+            final double[] sc = new double[f.length];\n+            sc[0] = 1;\n+\n+            double coeff = inv;\n+            for (int n = 1; n < f.length; ++n) {\n+\n+                double s = 0;\n+                double c = 0;\n+\n+                // update and evaluate polynomials S_n(x) and C_n(x)\n+                final int kStart;\n+                if ((n & 0x1) == 0) {\n+                    // even derivation order, S_n is degree n and C_n is degree n-1\n+                    sc[n] = 0;\n+                    kStart = n;\n+                } else {\n+                    // odd derivation order, S_n is degree n-1 and C_n is degree n\n+                    sc[n] = sc[n - 1];\n+                    c = sc[n];\n+                    kStart = n - 1;\n+                }\n+\n+                // in this loop, k is always even\n+                for (int k = kStart; k > 1; k -= 2) {\n+\n+                    // sine part\n+                    sc[k]     = (k - n) * sc[k] - sc[k - 1];\n+                    s         = s * scaledX2 + sc[k];\n+\n+                    // cosine part\n+                    sc[k - 1] = (k - 1 - n) * sc[k - 1] + sc[k -2];\n+                    c         = c * scaledX2 + sc[k - 1];\n+\n+                }\n+                sc[0] *= -n;\n+                s      = s * scaledX2 + sc[0];\n+\n+                coeff *= inv;\n+                f[n]   = coeff * (s * sin + c * scaledX * cos);\n+\n+            }\n+\n+        }\n+\n         if (normalized) {\n-            final double piTimesX = Math.PI * x;\n-            return sinc(piTimesX);\n-        } else {\n-            return sinc(x);\n+            double scale = FastMath.PI;\n+            for (int i = 1; i < f.length; ++i) {\n+                f[i]  *= scale;\n+                scale *= FastMath.PI;\n+            }\n         }\n-    }\n-\n-    /** {@inheritDoc} */\n-    public UnivariateFunction derivative() {\n-        if (normalized) {\n-            return new UnivariateFunction() {\n-                /** {@inheritDoc} */\n-                public double value(double x) {\n-                    final double piTimesX = Math.PI * x;\n-                    return sincDerivative(piTimesX);\n-                }\n-            };\n-        } else {\n-            return new UnivariateFunction() {\n-                /** {@inheritDoc} */\n-                public double value(double x) {\n-                    return sincDerivative(x);\n-                }\n-            };\n-        }\n-    }\n-\n-    /**\n-     * @param x Argument.\n-     * @return {@code sin(x) / x}.\n-     */\n-    private static double sinc(double x) {\n-        // The direct assignment to 1 for values below 1e-9 is an efficiency\n-        // optimization on the ground that the result of the full computation\n-        // is indistinguishable from 1 due to the limited accuracy of the\n-        // floating point representation.\n-        return FastMath.abs(x) < SHORTCUT ? 1 :\n-            FastMath.sin(x) / x;\n-    }\n-\n-    /**\n-     * @param x Argument.\n-     * @return {@code (cos(x) - sin(x) / x) / x}.\n-     */\n-    private static double sincDerivative(double x) {\n-        // The direct assignment to 0 for values below 1e-9 is an efficiency\n-        // optimization on the ground that the result of the full computation\n-        // is indistinguishable from 1 due to the limited accuracy of the\n-        // floating point representation.\n-        return FastMath.abs(x) < SHORTCUT ? 0 :\n-            (FastMath.cos(x) - FastMath.sin(x) / x) / x;\n-    }\n+\n+        return t.compose(f);\n+\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Sinh.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sinh.java\n package org.apache.commons.math3.analysis.function;\n \n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.FunctionUtils;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Sinh implements DifferentiableUnivariateFunction {\n+public class Sinh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.sinh(x);\n     }\n \n-    /** {@inheritDoc} */\n-    public DifferentiableUnivariateFunction derivative() {\n-        return new Cosh();\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n+    public UnivariateFunction derivative() {\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.sinh();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Sqrt implements DifferentiableUnivariateFunction {\n+public class Sqrt implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.sqrt(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                return 1 / (2 * FastMath.sqrt(x));\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.sqrt();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Tan.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Tan.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Tan implements DifferentiableUnivariateFunction {\n+public class Tan implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.tan(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                final double tanX = FastMath.tan(x);\n-                return 1 + tanX * tanX;\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.tan();\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/math3/analysis/function/Tanh.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/function/Tanh.java\n \n package org.apache.commons.math3.analysis.function;\n \n+import org.apache.commons.math3.analysis.FunctionUtils;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class Tanh implements DifferentiableUnivariateFunction {\n+public class Tanh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {\n     /** {@inheritDoc} */\n     public double value(double x) {\n         return FastMath.tanh(x);\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}\n+     */\n+    @Deprecated\n     public UnivariateFunction derivative() {\n-        return new UnivariateFunction() {\n-            /** {@inheritDoc} */\n-            public double value(double x) {\n-                final double tanhX = FastMath.tanh(x);\n-                return 1 - tanhX * tanhX;\n-            }\n-        };\n+        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();\n     }\n+\n+    /** {@inheritDoc}\n+     * @since 3.1\n+     */\n+    public DerivativeStructure value(final DerivativeStructure t) {\n+        return t.tanh();\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java\n package org.apache.commons.math3.analysis.function;\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n-import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.util.FastMath;\n-\n import org.junit.Assert;\n import org.junit.Test;\n \n     }\n \n     @Test\n-    public void testDerivative() {\n-        final Gaussian f = new Gaussian();\n-        final UnivariateFunction dfdx = f.derivative();\n-\n-        Assert.assertEquals(0, dfdx.value(0), 0);\n+    public void testDerivatives() {\n+        final UnivariateDifferentiable gaussian = new Gaussian(2.0, 0.9, 3.0);\n+        final DerivativeStructure dsX = new DerivativeStructure(1, 4, 0, 1.1);\n+        final DerivativeStructure dsY = gaussian.value(dsX);\n+        Assert.assertEquals( 1.9955604901712128349,   dsY.getValue(),              EPS);\n+        Assert.assertEquals(-0.044345788670471396332, dsY.getPartialDerivative(1), EPS);\n+        Assert.assertEquals(-0.22074348138190206174,  dsY.getPartialDerivative(2), EPS);\n+        Assert.assertEquals( 0.014760030401924800557, dsY.getPartialDerivative(3), EPS);\n+        Assert.assertEquals( 0.073253159785035691678, dsY.getPartialDerivative(4), EPS);\n     }\n \n     @Test\n     public void testDerivativeLargeArguments() {\n         final Gaussian f = new Gaussian(0, 1e-50);\n-        final UnivariateFunction dfdx = f.derivative();\n \n-        Assert.assertEquals(0, dfdx.value(Double.NEGATIVE_INFINITY), 0);\n-        Assert.assertEquals(0, dfdx.value(-Double.MAX_VALUE), 0);\n-        Assert.assertEquals(0, dfdx.value(-1e50), 0);\n-        Assert.assertEquals(0, dfdx.value(-1e2), 0);\n-        Assert.assertEquals(0, dfdx.value(1e2), 0);\n-        Assert.assertEquals(0, dfdx.value(1e50), 0);\n-        Assert.assertEquals(0, dfdx.value(Double.MAX_VALUE), 0);\n-        Assert.assertEquals(0, dfdx.value(Double.POSITIVE_INFINITY), 0);        \n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, Double.NEGATIVE_INFINITY)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, -Double.MAX_VALUE)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, -1e50)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, -1e2)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, 1e2)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, 1e50)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, Double.MAX_VALUE)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, Double.POSITIVE_INFINITY)).getPartialDerivative(1), 0);        \n     }\n \n     @Test\n-    public void testDerivativeNaN() {\n+    public void testDerivativesNaN() {\n         final Gaussian f = new Gaussian(0, 1e-50);\n-        final UnivariateFunction dfdx = f.derivative();\n-\n-        Assert.assertTrue(Double.isNaN(dfdx.value(Double.NaN)));\n+        final DerivativeStructure fx = f.value(new DerivativeStructure(1, 5, 0, Double.NaN));\n+        for (int i = 0; i <= fx.getOrder(); ++i) {\n+            Assert.assertTrue(Double.isNaN(fx.getPartialDerivative(i)));\n+        }\n     }\n \n     @Test(expected=NullArgumentException.class)\n--- a/src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java\n package org.apache.commons.math3.analysis.function;\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NullArgumentException;\n-import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.util.FastMath;\n-\n+import org.apache.commons.math3.util.Precision;\n import org.junit.Assert;\n import org.junit.Test;\n \n         final double w = 0.34;\n         final double p = 5.6;\n         final HarmonicOscillator f = new HarmonicOscillator(a, w, p);\n-        final UnivariateFunction dfdx = f.derivative();\n \n-        final double d = 0.12345;\n-        for (int i = 0; i < 10; i++) {\n-            final double v = i * d;\n-            Assert.assertEquals(-a * w * FastMath.sin(w * v + p), dfdx.value(v), 0);\n+        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n+            final double d = 0.12345;\n+            for (int i = 0; i < 10; i++) {\n+                final double v = i * d;\n+                final DerivativeStructure h = f.value(new DerivativeStructure(1, maxOrder, 0, v));\n+                for (int k = 0; k <= maxOrder; ++k) {\n+                    final double trigo;\n+                    switch (k % 4) {\n+                        case 0:\n+                            trigo = +FastMath.cos(w * v + p);\n+                            break;\n+                        case 1:\n+                            trigo = -FastMath.sin(w * v + p);\n+                            break;\n+                        case 2:\n+                            trigo = -FastMath.cos(w * v + p);\n+                            break;\n+                        default:\n+                            trigo = +FastMath.sin(w * v + p);\n+                            break;\n+                    }\n+                    Assert.assertEquals(a * FastMath.pow(w, k) * trigo,\n+                                        h.getPartialDerivative(k),\n+                                        Precision.EPSILON);\n+                }\n+            }\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java\n package org.apache.commons.math3.analysis.function;\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n         final Logistic f = new Logistic(k, 0, 1, 1, a, 1);\n         final Sigmoid g = new Sigmoid(a, k);\n         \n-        final UnivariateFunction dfdx = f.derivative();\n-        final UnivariateFunction dgdx = g.derivative();\n-\n         final double min = -10;\n         final double max = 10;\n         final double n = 20;\n         final double delta = (max - min) / n;\n         for (int i = 0; i < n; i++) {\n-            final double x = min + i * delta;\n-            Assert.assertEquals(\"x=\" + x, dgdx.value(x), dfdx.value(x), EPS);\n+            final DerivativeStructure x = new DerivativeStructure(1, 5, 0, min + i * delta);\n+            for (int order = 0; order <= x.getOrder(); ++order) {\n+                Assert.assertEquals(\"x=\" + x.getValue(),\n+                                    g.value(x).getPartialDerivative(order),\n+                                    f.value(x).getPartialDerivative(order),\n+                                    3.0e-15);\n+            }\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n import org.apache.commons.math3.analysis.FunctionUtils;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n+import org.apache.commons.math3.random.RandomGenerator;\n+import org.apache.commons.math3.random.Well1024a;\n+import org.apache.commons.math3.util.FastMath;\n \n import org.junit.Assert;\n import org.junit.Test;\n \n         f.value(lo - 1);\n     }\n+\n     @Test(expected=OutOfRangeException.class)\n     public void testPreconditions2() {\n         final double lo = -1;\n         final double lo = 1;\n         final double hi = 2;\n         final Logit f = new Logit(lo, hi);\n-        final UnivariateFunction dfdx = f.derivative();\n-\n-        Assert.assertEquals(4, dfdx.value(1.5), EPS);\n+        final DerivativeStructure f15 = f.value(new DerivativeStructure(1, 1, 0, 1.5));\n+\n+        Assert.assertEquals(4, f15.getPartialDerivative(1), EPS);\n     }\n \n     @Test\n     public void testDerivativeLargeArguments() {\n         final Logit f = new Logit(1, 2);\n-        final UnivariateFunction dfdx = f.derivative();\n-\n-        Assert.assertEquals(0, dfdx.value(Double.NEGATIVE_INFINITY), 0);\n-        Assert.assertEquals(0, dfdx.value(-Double.MAX_VALUE), 0);\n-        Assert.assertEquals(0, dfdx.value(-1e155), 0);\n-        Assert.assertEquals(0, dfdx.value(1e155), 0);\n-        Assert.assertEquals(0, dfdx.value(Double.MAX_VALUE), 0);\n-        Assert.assertEquals(0, dfdx.value(Double.POSITIVE_INFINITY), 0);        \n+\n+        for (double arg : new double[] {\n+            Double.NEGATIVE_INFINITY, -Double.MAX_VALUE, -1e155, 1e155, Double.MAX_VALUE, Double.POSITIVE_INFINITY\n+            }) {\n+            try {\n+                f.value(new DerivativeStructure(1, 1, 0, arg));\n+                Assert.fail(\"an exception should have been thrown\");\n+            } catch (OutOfRangeException ore) {\n+                // expected\n+            } catch (Exception e) {\n+                Assert.fail(\"wrong exception caught: \" + e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testDerivativesHighOrder() {\n+        DerivativeStructure l = new Logit(1, 3).value(new DerivativeStructure(1, 5, 0, 1.2));\n+        Assert.assertEquals(-2.1972245773362193828, l.getPartialDerivative(0), 1.0e-16);\n+        Assert.assertEquals(5.5555555555555555555,  l.getPartialDerivative(1), 9.0e-16);\n+        Assert.assertEquals(-24.691358024691358025, l.getPartialDerivative(2), 2.0e-14);\n+        Assert.assertEquals(250.34293552812071331,  l.getPartialDerivative(3), 2.0e-13);\n+        Assert.assertEquals(-3749.4284407864654778, l.getPartialDerivative(4), 4.0e-12);\n+        Assert.assertEquals(75001.270131585632282,  l.getPartialDerivative(5), 8.0e-11);\n     }\n \n     @Test(expected=NullArgumentException.class)\n         final double hi = 3;\n         final Logit f = new Logit(lo, hi);\n         final Sigmoid g = new Sigmoid(lo, hi);\n-        final UnivariateFunction id = FunctionUtils.compose(g, f);\n-        \n+        RandomGenerator random = new Well1024a(0x49914cdd9f0b8db5l);\n+        final UnivariateDifferentiable id = FunctionUtils.compose((UnivariateDifferentiable) g,\n+                                                                (UnivariateDifferentiable) f);\n+\n         for (int i = 0; i < 10; i++) {\n-            final double x = lo + Math.random() * (hi - lo);\n-            Assert.assertEquals(x, id.value(x), EPS);\n+            final double x = lo + random.nextDouble() * (hi - lo);\n+            Assert.assertEquals(x, id.value(new DerivativeStructure(1, 1, 0, x)).getValue(), EPS);\n         }\n \n-        Assert.assertEquals(lo, id.value(lo), EPS);\n-        Assert.assertEquals(hi, id.value(hi), EPS);\n-    }\n-\n-    @Test\n-    public void testDerivativeWithInverseFunction() {\n+        Assert.assertEquals(lo, id.value(new DerivativeStructure(1, 1, 0, lo)).getValue(), EPS);\n+        Assert.assertEquals(hi, id.value(new DerivativeStructure(1, 1, 0, hi)).getValue(), EPS);\n+    }\n+\n+    @Test\n+    public void testDerivativesWithInverseFunction() {\n+        double[] epsilon = new double[] { 1.0e-20, 4.0e-16, 3.0e-15, 2.0e-11, 3.0e-9, 1.0e-6 };\n         final double lo = 2;\n         final double hi = 3;\n         final Logit f = new Logit(lo, hi);\n-        final UnivariateFunction dfdx = f.derivative();\n         final Sigmoid g = new Sigmoid(lo, hi);\n-        final UnivariateFunction dgdx = g.derivative();\n-        final UnivariateFunction chain\n-            = FunctionUtils.compose(new Inverse(), FunctionUtils.compose(dgdx, f));\n-        \n-        for (int i = 0; i < 10; i++) {\n-            final double x = lo + Math.random() * (hi - lo);\n-            final double r = dfdx.value(x);\n-            Assert.assertEquals(r, chain.value(x), r * 1e-15);\n+        RandomGenerator random = new Well1024a(0x96885e9c1f81cea5l);\n+        final UnivariateDifferentiable id =\n+                FunctionUtils.compose((UnivariateDifferentiable) g, (UnivariateDifferentiable) f);\n+        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n+            double max = 0;\n+            for (int i = 0; i < 10; i++) {\n+                final double x = lo + random.nextDouble() * (hi - lo);\n+                final DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n+                max = FastMath.max(max, FastMath.abs(dsX.getPartialDerivative(maxOrder) -\n+                                                     id.value(dsX).getPartialDerivative(maxOrder)));\n+                Assert.assertEquals(dsX.getPartialDerivative(maxOrder),\n+                                    id.value(dsX).getPartialDerivative(maxOrder),\n+                                    epsilon[maxOrder]);\n+            }\n+\n+            // each function evaluates correctly near boundaries,\n+            // but combination leads to NaN as some intermediate point is infinite\n+            final DerivativeStructure dsLo = new DerivativeStructure(1, maxOrder, 0, lo);\n+            if (maxOrder == 0) {\n+                Assert.assertTrue(Double.isInfinite(f.value(dsLo).getPartialDerivative(maxOrder)));\n+                Assert.assertEquals(lo, id.value(dsLo).getPartialDerivative(maxOrder), epsilon[maxOrder]);\n+            } else if (maxOrder == 1) {\n+                Assert.assertTrue(Double.isInfinite(f.value(dsLo).getPartialDerivative(maxOrder)));\n+                Assert.assertTrue(Double.isNaN(id.value(dsLo).getPartialDerivative(maxOrder)));\n+            } else {\n+                Assert.assertTrue(Double.isNaN(f.value(dsLo).getPartialDerivative(maxOrder)));\n+                Assert.assertTrue(Double.isNaN(id.value(dsLo).getPartialDerivative(maxOrder)));\n+            }\n+\n+            final DerivativeStructure dsHi = new DerivativeStructure(1, maxOrder, 0, hi);\n+            if (maxOrder == 0) {\n+                Assert.assertTrue(Double.isInfinite(f.value(dsHi).getPartialDerivative(maxOrder)));\n+                Assert.assertEquals(hi, id.value(dsHi).getPartialDerivative(maxOrder), epsilon[maxOrder]);\n+            } else if (maxOrder == 1) {\n+                Assert.assertTrue(Double.isInfinite(f.value(dsHi).getPartialDerivative(maxOrder)));\n+                Assert.assertTrue(Double.isNaN(id.value(dsHi).getPartialDerivative(maxOrder)));\n+            } else {\n+                Assert.assertTrue(Double.isNaN(f.value(dsHi).getPartialDerivative(maxOrder)));\n+                Assert.assertTrue(Double.isNaN(id.value(dsHi).getPartialDerivative(maxOrder)));\n+            }\n+\n         }\n-\n-        Assert.assertEquals(dfdx.value(lo), chain.value(lo), 0); // -inf\n-        Assert.assertEquals(dfdx.value(hi), chain.value(hi), 0); // +inf\n     }\n }\n--- a/src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java\n package org.apache.commons.math3.analysis.function;\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n \n     @Test\n     public void testDerivative() {\n         final Sigmoid f = new Sigmoid();\n-        final UnivariateFunction dfdx = f.derivative();\n+        final DerivativeStructure f0 = f.value(new DerivativeStructure(1, 1, 0, 0.0));\n \n-        Assert.assertEquals(0.25, dfdx.value(0), 0);\n+        Assert.assertEquals(0.25, f0.getPartialDerivative(1), 0);\n+    }\n+\n+    @Test\n+    public void testDerivativesHighOrder() {\n+        DerivativeStructure s = new Sigmoid(1, 3).value(new DerivativeStructure(1, 5, 0, 1.2));\n+        Assert.assertEquals(2.5370495669980352859, s.getPartialDerivative(0), 5.0e-16);\n+        Assert.assertEquals(0.35578888129361140441, s.getPartialDerivative(1), 6.0e-17);\n+        Assert.assertEquals(-0.19107626464144938116,  s.getPartialDerivative(2), 6.0e-17);\n+        Assert.assertEquals(-0.02396830286286711696,  s.getPartialDerivative(3), 4.0e-17);\n+        Assert.assertEquals(0.21682059798981049049,   s.getPartialDerivative(4), 3.0e-17);\n+        Assert.assertEquals(-0.19186320234632658055,  s.getPartialDerivative(5), 2.0e-16);\n     }\n \n     @Test\n     public void testDerivativeLargeArguments() {\n         final Sigmoid f = new Sigmoid(1, 2);\n-        final UnivariateFunction dfdx = f.derivative();\n \n-        Assert.assertEquals(0, dfdx.value(Double.NEGATIVE_INFINITY), 0);\n-        Assert.assertEquals(0, dfdx.value(-Double.MAX_VALUE), 0);\n-        Assert.assertEquals(0, dfdx.value(-1e50), 0);\n-        Assert.assertEquals(0, dfdx.value(-1e3), 0);\n-        Assert.assertEquals(0, dfdx.value(1e3), 0);\n-        Assert.assertEquals(0, dfdx.value(1e50), 0);\n-        Assert.assertEquals(0, dfdx.value(Double.MAX_VALUE), 0);\n-        Assert.assertEquals(0, dfdx.value(Double.POSITIVE_INFINITY), 0);        \n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, Double.NEGATIVE_INFINITY)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, -Double.MAX_VALUE)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, -1e50)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, -1e3)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, 1e3)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, 1e50)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, Double.MAX_VALUE)).getPartialDerivative(1), 0);\n+        Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, Double.POSITIVE_INFINITY)).getPartialDerivative(1), 0);        \n     }\n \n     @Test(expected=NullArgumentException.class)\n--- a/src/test/java/org/apache/commons/math3/analysis/function/SincTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/function/SincTest.java\n package org.apache.commons.math3.analysis.function;\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.dfp.Dfp;\n+import org.apache.commons.math3.dfp.DfpField;\n+import org.apache.commons.math3.dfp.DfpMath;\n import org.apache.commons.math3.util.FastMath;\n+import org.junit.Assert;\n import org.junit.Test;\n-import org.junit.Assert;\n \n public class SincTest {\n \n    public void testShortcut() {\n        final Sinc s = new Sinc();\n        final UnivariateFunction f = new UnivariateFunction() {\n-               public double value(double x) {\n-                   return FastMath.sin(x) / x;\n-               }\n-           };\n+           public double value(double x) {\n+               Dfp dfpX = new DfpField(25).newDfp(x);\n+               return DfpMath.sin(dfpX).divide(dfpX).toDouble();\n+           }\n+       };\n \n        for (double x = 1e-30; x < 1e10; x *= 2) {\n            final double fX = f.value(x);\n            final double sX = s.value(x);\n-           Assert.assertEquals(\"x=\" + x, fX, sX, 0);\n+           Assert.assertEquals(\"x=\" + x, fX, sX, 2.0e-16);\n        }\n    }\n \n \n    @Test\n    public void testDerivativeZero() {\n-       final UnivariateFunction sPrime = (new Sinc(true)).derivative();\n+       final DerivativeStructure s0 = new Sinc(true).value(new DerivativeStructure(1, 1, 0, 0.0));\n+       Assert.assertEquals(0, s0.getPartialDerivative(1), 0);\n+   }\n \n-       Assert.assertEquals(0, sPrime.value(0), 0);\n+   @Test\n+   public void testDerivatives1Dot2Unnormalized() {\n+       DerivativeStructure s = new Sinc(false).value(new DerivativeStructure(1, 5, 0, 1.2));\n+       Assert.assertEquals( 0.77669923830602195806, s.getPartialDerivative(0), 1.0e-16);\n+       Assert.assertEquals(-0.34528456985779031701, s.getPartialDerivative(1), 1.0e-16);\n+       Assert.assertEquals(-0.2012249552097047631,  s.getPartialDerivative(2), 1.0e-16);\n+       Assert.assertEquals( 0.2010975926270339262,  s.getPartialDerivative(3), 4.0e-16);\n+       Assert.assertEquals( 0.106373929549242204,   s.getPartialDerivative(4), 1.0e-15);\n+       Assert.assertEquals(-0.1412599110579478695,  s.getPartialDerivative(5), 3.0e-15);\n+   }\n+\n+   @Test\n+   public void testDerivatives1Dot2Normalized() {\n+       DerivativeStructure s = new Sinc(true).value(new DerivativeStructure(1, 5, 0, 1.2));\n+       Assert.assertEquals(-0.15591488063143983888, s.getPartialDerivative(0), 6.0e-17);\n+       Assert.assertEquals(-0.54425176145292298767, s.getPartialDerivative(1), 2.0e-16);\n+       Assert.assertEquals(2.4459044611635856107,   s.getPartialDerivative(2), 9.0e-16);\n+       Assert.assertEquals(0.5391369206235909586,   s.getPartialDerivative(3), 7.0e-16);\n+       Assert.assertEquals(-16.984649869728849865,  s.getPartialDerivative(4), 8.0e-15);\n+       Assert.assertEquals(5.0980327462666316586,   s.getPartialDerivative(5), 9.0e-15);\n    }\n \n    @Test\n    public void testDerivativeShortcut() {\n-       final UnivariateFunction sPrime = (new Sinc()).derivative();\n+       final Sinc sinc = new Sinc();\n        final UnivariateFunction f = new UnivariateFunction() {\n                public double value(double x) {\n-                   return (FastMath.cos(x) - FastMath.sin(x) / x) / x;\n+                   Dfp dfpX = new DfpField(25).newDfp(x);\n+                   return DfpMath.cos(dfpX).subtract(DfpMath.sin(dfpX).divide(dfpX)).divide(dfpX).toDouble();\n                }\n            };\n \n        for (double x = 1e-30; x < 1e10; x *= 2) {\n            final double fX = f.value(x);\n-           final double sX = sPrime.value(x);\n-           Assert.assertEquals(\"x=\" + x, fX, sX, 0);\n+           final DerivativeStructure sX = sinc.value(new DerivativeStructure(1, 1, 0, x));\n+           Assert.assertEquals(\"x=\" + x, fX, sX.getPartialDerivative(1), 3.0e-13);\n        }\n    }\n }\n--- a/src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java\n package org.apache.commons.math3.analysis.function;\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n+import org.apache.commons.math3.util.FastMath;\n \n import org.junit.Test;\n import org.junit.Assert;\n \n    @Test\n    public void testDerivativeComparison() {\n-       final UnivariateFunction sPrime = (new Sqrt()).derivative();\n+       final UnivariateDifferentiable sPrime = new Sqrt();\n        final UnivariateFunction f = new UnivariateFunction() {\n                public double value(double x) {\n                    return 1 / (2 * Math.sqrt(x));\n \n        for (double x = 1e-30; x < 1e10; x *= 2) {\n            final double fX = f.value(x);\n-           final double sX = sPrime.value(x);\n-           Assert.assertEquals(\"x=\" + x, fX, sX, 0);\n+           final double sX = sPrime.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1);\n+           Assert.assertEquals(\"x=\" + x, fX, sX, FastMath.ulp(fX));\n        }\n    }\n+\n+   @Test\n+   public void testDerivativesHighOrder() {\n+       DerivativeStructure s = new Sqrt().value(new DerivativeStructure(1, 5, 0, 1.2));\n+       Assert.assertEquals(1.0954451150103322269, s.getPartialDerivative(0), 1.0e-16);\n+       Assert.assertEquals(0.45643546458763842789, s.getPartialDerivative(1), 1.0e-16);\n+       Assert.assertEquals(-0.1901814435781826783,  s.getPartialDerivative(2), 1.0e-16);\n+       Assert.assertEquals(0.23772680447272834785,  s.getPartialDerivative(3), 1.0e-16);\n+       Assert.assertEquals(-0.49526417598485072465,   s.getPartialDerivative(4), 1.0e-16);\n+       Assert.assertEquals(1.4445205132891479465,  s.getPartialDerivative(5), 3.0e-16);\n+   }\n+\n }", "timestamp": 1345313434, "metainfo": ""}