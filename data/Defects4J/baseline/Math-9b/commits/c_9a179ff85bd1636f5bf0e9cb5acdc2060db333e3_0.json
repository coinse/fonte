{"sha": "9a179ff85bd1636f5bf0e9cb5acdc2060db333e3", "log": "Added the graceful handling of invalid and NaN domain values.  Created test cases to verify the graceful handling.  Issue #: 20774 Submitted By: Brent Worden Reviewed By: Tim O'Brien   ", "commit": "\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n     public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n         double ret;\n \n-        if (a <= 0.0) {\n-            throw new IllegalArgumentException(\"a must be positive\");\n-        } else if (x <= 0.0) {\n-            throw new IllegalArgumentException(\"x must be non-negative\");\n+        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n+            ret = Double.NaN;\n+        } else if (x == 0.0) {\n+            ret = 0.0;\n         } else {\n             // calculate series\n             double n = 0.0; // current element index\n     public static double logGamma(double x, double epsilon, int maxIterations) {\n         double ret;\n \n-        if (x <= 0.0) {\n-            throw new IllegalArgumentException(\n-                \"x must be non-negative\");\n+        if (Double.isNaN(x) || (x <= 0.0)) {\n+            ret = Double.NaN;\n         } else {\n             double g = 607.0 / 128.0;\n \n         return ret;\n     }\n }\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/special/GammaTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.special;\n+\n+import org.apache.commons.math.TestUtils;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class GammaTest extends TestCase {\n+    /**\n+     * Constructor for BetaTest.\n+     * @param name\n+     */\n+    public GammaTest(String name) {\n+        super(name);\n+    }\n+\n+    private void testRegularizedGamma(double expected, double a, double x) {\n+        double actual = Gamma.regularizedGammaP(a, x);\n+        TestUtils.assertEquals(expected, actual, 10e-5);\n+    }\n+\n+    private void testLogGamma(double expected, double x) {\n+        double actual = Gamma.logGamma(x, 10e-5, Integer.MAX_VALUE);\n+        TestUtils.assertEquals(expected, actual, 10e-5);\n+    }\n+\n+    public void testRegularizedGammaNanPositive() {\n+        testRegularizedGamma(Double.NaN, Double.NaN, 1.0);\n+    }\n+\n+    public void testRegularizedGammaPositiveNan() {\n+        testRegularizedGamma(Double.NaN, 1.0, Double.NaN);\n+    }\n+    \n+    public void testRegularizedGammaNegativePositive() {\n+        testRegularizedGamma(Double.NaN, -1.5, 1.0);\n+    }\n+    \n+    public void testRegularizedGammaPositiveNegative() {\n+        testRegularizedGamma(Double.NaN, 1.0, -1.0);\n+    }\n+    \n+    public void testRegularizedGammaZeroPositive() {\n+        testRegularizedGamma(Double.NaN, 0.0, 1.0);\n+    }\n+    \n+    public void testRegularizedGammaPositiveZero() {\n+        testRegularizedGamma(0.0, 1.0, 0.0);\n+    }\n+    \n+    public void testRegularizedGammaPositivePositive() {\n+        testRegularizedGamma(0.632121, 1.0, 1.0);\n+    }\n+    \n+    public void testLogGammaNan() {\n+        testLogGamma(Double.NaN, Double.NaN);\n+    }\n+    \n+    public void testLogGammaNegative() {\n+        testLogGamma(Double.NaN, -1.0);\n+    }\n+    \n+    public void testLogGammaZero() {\n+        testLogGamma(Double.NaN, 0.0);\n+    }\n+    \n+    public void testLogGammaPositive() {\n+        testLogGamma(0.693147, 3.0);\n+    }\n+}", "timestamp": 1055794423, "metainfo": ""}