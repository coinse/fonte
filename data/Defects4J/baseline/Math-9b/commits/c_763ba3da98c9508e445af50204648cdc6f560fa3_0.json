{"sha": "763ba3da98c9508e445af50204648cdc6f560fa3", "log": "Added paired difference stats necessary to support paired t-test computations efficiently. PR #29049   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/java/org/apache/commons/math/stat/StatUtils.java\n  * StatUtils provides static implementations of common double[] based\n  * statistical methods. These return a single result value or in some cases, as\n  * identified in the javadoc for each method, <code>Double.NaN.</code>\n- * @version $Revision: 1.26 $ $Date: 2004/04/11 19:00:45 $\n+ * @version $Revision: 1.27 $ $Date: 2004/05/24 05:30:33 $\n  */\n public final class StatUtils {\n \n             final int length, \n             final double p) {\n             return percentile.evaluate(values, begin, length, p);\n-    }    \n+    }   \n+    \n+    /**\n+     * Returns the sum of the (signed) differences between corresponding elements of the\n+     * input arrays -- i.e., sum(sample1[i] - sample2[i]).\n+     * \n+     * @param sample1  the first array\n+     * @param sample2  the second array\n+     * @return sum of paired differences\n+     * @throws IllegalArgumentException if the arrays do not have the same\n+     * (positive) length\n+     */\n+    public static double sumDifference(final double[] sample1, final double[] sample2)\n+    \tthrows IllegalArgumentException {\n+        int n = sample1.length;\n+        if (n  != sample2.length || n < 1) {\n+            throw new IllegalArgumentException \n+            \t(\"Input arrays must have the same (positive) length.\");\n+        }\n+        double result = 0;\n+        for (int i = 0; i < n; i++) {\n+            result += sample1[i] - sample2[i];\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * Returns the mean of the (signed) differences between corresponding elements of the\n+     * input arrays -- i.e., sum(sample1[i] - sample2[i]) / sample1.length.\n+     * \n+     * @param sample1  the first array\n+     * @param sample2  the second array\n+     * @return mean of paired differences\n+     * @throws IllegalArgumentException if the arrays do not have the same\n+     * (positive) length\n+     */\n+    public static double meanDifference(final double[] sample1, final double[] sample2)\n+    throws IllegalArgumentException {\n+        return sumDifference(sample1, sample2) / (double) sample1.length;\n+    }\n+    \n+    /**\n+     * Returns the variance of the (signed) differences between corresponding elements of the\n+     * input arrays -- i.e., var(sample1[i] - sample2[i]).\n+     * \n+     * @param sample1  the first array\n+     * @param sample2  the second array\n+     * @param meanDifference   the mean difference between corresponding entries \n+     * @see #meanDifference(double[],double[])\n+     * @return variance of paired differences\n+     * @throws IllegalArgumentException if the arrays do not have the same\n+     * length or their common length is less than 2.\n+     */\n+    public static double varianceDifference(final double[] sample1, final double[] sample2, \n+            double meanDifference)  throws IllegalArgumentException {\n+        double sum1 = 0d;\n+        double sum2 = 0d;\n+        double diff = 0d;\n+        int n = sample1.length;\n+        if (n < 2) {\n+            throw new IllegalArgumentException(\"Input array lengths must be at least 2.\");\n+        }\n+        for (int i = 0; i < n; i++) {\n+            diff = sample1[i] - sample2[i];\n+            sum1 += (diff - meanDifference) *(diff - meanDifference);\n+            sum2 += diff - meanDifference;\n+        }\n+        return (sum1 - (sum2 * sum2 / (double) n)) / (double) (n - 1);\n+    }      \n+    \n }\n--- a/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n+++ b/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n \n /**\n  * Test cases for the {@link StatUtils} class.\n- * @version $Revision: 1.16 $ $Date: 2004/05/23 00:56:15 $\n+ * @version $Revision: 1.17 $ $Date: 2004/05/24 05:33:42 $\n  */\n \n public final class StatUtilsTest extends TestCase {\n         TestUtils.assertEquals(2.5, StatUtils.percentile(x, 70), tolerance);\n         TestUtils.assertEquals(2.5, StatUtils.percentile(x, 1, 3, 62.5), tolerance);\n     }\n+    \n+    public void testDifferenceStats() throws Exception {\n+        double sample1[] = {1d, 2d, 3d, 4d};\n+        double sample2[] = {1d, 3d, 4d, 2d};\n+        double diff[] = {0d, -1d, -1d, 2d};\n+        double small[] = {1d, 4d};\n+        double meanDifference = StatUtils.meanDifference(sample1, sample2);\n+        assertEquals(StatUtils.sumDifference(sample1, sample2), StatUtils.sum(diff), tolerance);\n+        assertEquals(meanDifference, StatUtils.mean(diff), tolerance);\n+        assertEquals(StatUtils.varianceDifference(sample1, sample2, meanDifference), \n+                StatUtils.variance(diff), tolerance);\n+        try {\n+            StatUtils.meanDifference(sample1, small);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n }", "timestamp": 1085376822, "metainfo": ""}