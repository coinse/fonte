{"sha": "567f081a13c551dc4ae9c9c61389ece993b566d0", "log": "Fixed CheckStyle warnings.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java\n public class IterativeLegendreGaussIntegrator\n     extends BaseAbstractUnivariateIntegrator {\n     /** Factory that computes the points and weights. */\n-    private static final GaussIntegratorFactory factory\n+    private static final GaussIntegratorFactory FACTORY\n         = new GaussIntegratorFactory();\n     /** Number of integration points (per interval). */\n     private final int numberOfPoints;\n                              getRelativeAccuracy() * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5);\n \n             // check convergence\n-            if (iterations.getCount() + 1 >= getMinimalIterationCount() && \n+            if (iterations.getCount() + 1 >= getMinimalIterationCount() &&\n                 delta <= limit) {\n                 return t;\n             }\n                     return computeObjectiveValue(x);\n                 }\n             };\n-        \n+\n         final double min = getMin();\n         final double max = getMax();\n         final double step = (max - min) / n;\n             // Integrate over each sub-interval [a, b].\n             final double a = min + i * step;\n             final double b = a + step;\n-            final GaussIntegrator g = factory.legendreHighPrecision(numberOfPoints, a, b);\n+            final GaussIntegrator g = FACTORY.legendreHighPrecision(numberOfPoints, a, b);\n             sum += g.integrate(f);\n         }\n ", "timestamp": 1342997115, "metainfo": ""}