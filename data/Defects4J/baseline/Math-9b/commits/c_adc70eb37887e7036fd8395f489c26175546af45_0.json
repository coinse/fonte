{"sha": "adc70eb37887e7036fd8395f489c26175546af45", "log": "Formatting only, Eliminated tabs and trailing spaces.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\n+++ b/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Thrown when a system attempts an operation on a matrix, and\n  * that matrix does not satisfy the preconditions for the\n  * aforementioned operation.\n- * @version $Revision: 1.5 $ $Date: 2004/06/02 00:06:18 $\n+ * @version $Revision: 1.6 $ $Date: 2004/06/07 03:26:31 $\n  */\n public class InvalidMatrixException extends NestableRuntimeException {\n-    \n+\n     /** Serializable version identifier */\n     static final long serialVersionUID = 5318837237354354107L;\n-    \n+\n     /**\n      * Default constructor.\n      */\n     public InvalidMatrixException() {\n         this(null, null);\n     }\n-    \n+\n     /**\n      * Construct an exception with the given message.\n-     * @param message descriptive error message. \n+     * @param message descriptive error message.\n      */\n     public InvalidMatrixException(String message) {\n         this(message, null);\n--- a/src/java/org/apache/commons/math/linear/MatrixIndexException.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixIndexException.java\n /*\n  * Copyright 2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Thrown when an operation addresses a matrix coordinate (row,col)\n  * which is outside of the dimensions of a matrix.\n- * @version $Revision: 1.5 $ $Date: 2004/06/02 00:06:18 $\n+ * @version $Revision: 1.6 $ $Date: 2004/06/07 03:26:31 $\n  */\n public class MatrixIndexException extends NestableRuntimeException {\n-    \n+\n     /** Serializable version identifier */\n     static final long serialVersionUID = -1341109412864309526L;\n-    \n+\n     /**\n      * Default constructor.\n      */\n     public MatrixIndexException() {\n         this(null, null);\n     }\n-    \n+\n     /**\n      * Construct an exception with the given message.\n-     * @param message descriptive error message. \n+     * @param message descriptive error message.\n      */\n     public MatrixIndexException(String message) {\n         this(message, null);\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Interface defining a real-valued matrix with basic algebraic operations\n- * @version $Revision: 1.18 $ $Date: 2004/06/05 22:28:10 $\n+ * @version $Revision: 1.19 $ $Date: 2004/06/07 03:26:31 $\n  */\n public interface RealMatrix {\n \n      * @return matrix copy\n      */\n     RealMatrix copy();\n-    \n+\n     /**\n      * Compute the sum of this and m.\n      *\n      * @return     this + m\n      * @throws  IllegalArgumentException if m is not the same size as this\n      */\n-    RealMatrix add(RealMatrix m) throws IllegalArgumentException;   \n-    \n+    RealMatrix add(RealMatrix m) throws IllegalArgumentException;\n+\n     /**\n      * Compute this minus m.\n      *\n      * @return     this + m\n      * @throws  IllegalArgumentException if m is not the same size as this\n      */\n-    RealMatrix subtract(RealMatrix m) throws IllegalArgumentException;   \n-    \n+    RealMatrix subtract(RealMatrix m) throws IllegalArgumentException;\n+\n      /**\n      * Returns the result of adding d to each entry of this.\n      *\n      * @return     d + this\n      */\n     RealMatrix scalarAdd(double d);\n-    \n+\n     /**\n      * Returns the result multiplying each entry of this by d.\n      *\n      * @return     d * this\n      */\n     RealMatrix scalarMultiply(double d);\n-    \n+\n     /**\n      * Returns the result postmultiplying this by m.\n      *\n      * @param m    matrix to postmultiply by\n      * @return     this * m\n-     * @throws     IllegalArgumentException \n+     * @throws     IllegalArgumentException\n      *             if columnDimension(this) != rowDimension(m)\n      */\n     RealMatrix multiply(RealMatrix m) throws IllegalArgumentException;\n-    \n+\n     /**\n      * Returns the result premultiplying this by <code>m</code>.\n      * @param m    matrix to premultiply by\n      *             if rowDimension(this) != columnDimension(m)\n      */\n     public RealMatrix preMultiply(RealMatrix m) throws IllegalArgumentException;\n-    \n+\n     /**\n      * Returns matrix entries as a two-dimensional array.\n      *\n      * @return    2-dimensional array of entries\n      */\n     double[][] getData();\n-    \n+\n     /**\n      * Overwrites the underlying data for the matrix with\n      * a fresh copy of <code>data</code>.\n      * @param  data  2-dimensional array of entries\n      */\n     void setData(double[][] data);\n-    \n+\n     /**\n      * Returns the <a href=\"http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html\">\n      * maximum absolute row sum norm</a> of the matrix.\n      * @return norm\n      */\n     double getNorm();\n-    \n+\n     /**\n      * Returns the entries in row number <code>row</code> as an array.\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n-     * @throws MatrixIndexException if the specified row is greater \n+     * @throws MatrixIndexException if the specified row is greater\n      *                              than the number of rows in this matrix\n      */\n     double[] getRow(int row) throws MatrixIndexException;\n-    \n+\n     /**\n      * Returns the entries in column number <code>col</code> as an array.\n      *\n      *                              than the number of columns in this matrix\n      */\n     double[] getColumn(int col) throws MatrixIndexException;\n-    \n+\n     /**\n      * Returns the entry in the specified row and column.\n      *\n-     * @param row  row location of entry to be fetched  \n+     * @param row  row location of entry to be fetched\n      * @param column  column location of entry to be fetched\n      * @return matrix entry in row,column\n-     * @throws MatrixIndexException if the specified coordinate is outside \n+     * @throws MatrixIndexException if the specified coordinate is outside\n      *                              the dimensions of this matrix\n      */\n     double getEntry(int row, int column) throws MatrixIndexException;\n-    \n+\n     /**\n      * Sets the entry in the specified row and column to the specified value.\n      *\n-     * @param row    row location of entry to be set \n+     * @param row    row location of entry to be set\n      * @param column    column location of entry to be set\n-     * @param value  value to set \n+     * @param value  value to set\n      * @throws MatrixIndexException if the specified coordinate is outside\n      *                              he dimensions of this matrix\n      */\n-    void setEntry(int row, int column, double value) \n+    void setEntry(int row, int column, double value)\n         throws MatrixIndexException;\n-    \n+\n     /**\n      * Returns the transpose of this matrix.\n      *\n      * @return transpose matrix\n      */\n     RealMatrix transpose();\n-    \n+\n     /**\n      * Returns the inverse of this matrix.\n      *\n      * @throws InvalidMatrixException if  this is not invertible\n      */\n     RealMatrix inverse() throws InvalidMatrixException;\n-    \n+\n     /**\n      * Returns the determinant of this matrix.\n      *\n      * @return determinant\n      */\n     double getDeterminant();\n-    \n+\n     /**\n      * Is this a square matrix?\n      * @return true if the matrix is square (rowDimension = columnDimension)\n      */\n     boolean isSquare();\n-    \n+\n     /**\n      * Is this a singular matrix?\n      * @return true if the matrix is singular\n      */\n     boolean isSingular();\n-    \n+\n     /**\n      * Returns the number of rows in the matrix.\n      *\n      * @return rowDimension\n      */\n     int getRowDimension();\n-    \n+\n     /**\n      * Returns the number of columns in the matrix.\n      *\n      * @return columnDimension\n      */\n     int getColumnDimension();\n-    \n+\n     /**\n      * Returns the <a href=\"http://mathworld.wolfram.com/MatrixTrace.html\">\n      * trace</a> of the matrix (the sum of the elements on the main diagonal).\n      * @return trace\n      */\n     double getTrace();\n-    \n+\n     /**\n      * Returns the result of multiplying this by the vector <code>v</code>.\n      *\n      * @throws IllegalArgumentException if columnDimension != v.size()\n      */\n     double[] operate(double[] v) throws IllegalArgumentException;\n-    \n+\n     /**\n      * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n      *\n      * @return v*this\n      * @throws IllegalArgumentException if rowDimension != v.size()\n      */\n-    double[] preMultiply(double[] v) throws IllegalArgumentException;  \n-    \n+    double[] preMultiply(double[] v) throws IllegalArgumentException;\n+\n     /**\n      * Returns the solution vector for a linear system with coefficient\n      * matrix = this and constant vector = <code>b</code>.\n      *\n      * @param b  constant vector\n      * @return vector of solution values to AX = b, where A is *this\n-     * @throws IllegalArgumentException if this.rowDimension != b.length \n+     * @throws IllegalArgumentException if this.rowDimension != b.length\n      * @throws InvalidMatrixException if this matrix is not square or is singular\n      */\n     double[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException;\n-    \n+\n     /**\n      * Returns a matrix of (column) solution vectors for linear systems with\n      * coefficient matrix = this and constant vectors = columns of\n-     * <code>b</code>. \n+     * <code>b</code>.\n      *\n      * @param b  matrix of constant vectors forming RHS of linear systems to\n      * to solve\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n /*\n  * Copyright 2003-2004 The Apache Software Foundation.\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Implementation for RealMatrix using a double[][] array to store entries\n  * and <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n- * LU decompostion</a> to support linear system \n+ * LU decompostion</a> to support linear system\n  * solution and inverse.\n  * <p>\n  * The LU decompostion is performed as needed, to support the following operations: <ul>\n  * <p>\n  * <strong>Usage note</strong>:<br>\n  * The LU decomposition is stored and reused on subsequent calls.  If matrix\n- * data are modified using any of the public setXxx methods, the saved \n+ * data are modified using any of the public setXxx methods, the saved\n  * decomposition is discarded.  If data are modified via references to the\n  * underlying array obtained using <code>getDataRef()</code>, then the stored\n- * LU decomposition will not be discarded.  In this case, you need to \n+ * LU decomposition will not be discarded.  In this case, you need to\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n  * before using any of the methods above.\n  *\n- * @version $Revision: 1.23 $ $Date: 2004/06/05 22:31:16 $\n+ * @version $Revision: 1.24 $ $Date: 2004/06/07 03:26:31 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n \n     /** Serializable version identifier */\n     static final long serialVersionUID = 4237564493130426188L;\n-    \n+\n     /** Entries of the matrix */\n     private double data[][] = null;\n \n     /** Bound to determine effective singularity in LU decomposition */\n     protected static double TOO_SMALL = 10E-12;\n \n-    /** \n+    /**\n      * Creates a matrix with no data\n      */\n     public RealMatrixImpl() {\n     }\n \n     /**\n-     * Create a new (column) RealMatrix using <code>v</code> as the \n-     * data for the unique column of the <code>v.length x 1</code> matrix \n+     * Create a new (column) RealMatrix using <code>v</code> as the\n+     * data for the unique column of the <code>v.length x 1</code> matrix\n      * created.\n      * <p>\n      * The input array is copied, not referenced.\n         }\n         return new RealMatrixImpl(outData);\n     }\n-    \n+\n     /**\n      * Returns the result premultiplying this by <code>m</code>.\n      * @param m    matrix to premultiply by\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n-     * @throws MatrixIndexException if the specified row is greater \n+     * @throws MatrixIndexException if the specified row is greater\n      *                              than the number of rows in this matrix\n      */\n     public double[] getRow(int row) throws MatrixIndexException {\n     /**\n      * Returns the entry in the specified row and column.\n      *\n-     * @param row  row location of entry to be fetched  \n+     * @param row  row location of entry to be fetched\n      * @param column  column location of entry to be fetched\n      * @return matrix entry in row,column\n-     * @throws MatrixIndexException if the specified coordinate is outside \n+     * @throws MatrixIndexException if the specified coordinate is outside\n      *                              the dimensions of this matrix\n      */\n     public double getEntry(int row, int column)\n     /**\n      * Sets the entry in the specified row and column to the specified value.\n      *\n-     * @param row    row location of entry to be set \n+     * @param row    row location of entry to be set\n      * @param column    column location of entry to be set\n-     * @param value  value to set \n+     * @param value  value to set\n      * @throws MatrixIndexException if the specified coordinate is outside\n      *                              he dimensions of this matrix\n      */\n \n     /**\n      * Returns the inverse matrix if this matrix is invertible.\n-     * \n+     *\n      * @return inverse matrix\n      * @throws InvalidMatrixException if this is not invertible\n      */\n             throw new InvalidMatrixException(\"matrix is not square\");\n         }\n         if (isSingular()) {   // note: this has side effect of attempting LU decomp if lu == null\n-            return 0d;  \n+            return 0d;\n         } else {\n             double det = (double) parity;\n             for (int i = 0; i < this.getRowDimension(); i++) {\n             return det;\n         }\n     }\n-    \n+\n     /**\n      * @return true if the matrix is square (rowDimension = columnDimension)\n      */\n     /**\n      * Returns a matrix of (column) solution vectors for linear systems with\n      * coefficient matrix = this and constant vectors = columns of\n-     * <code>b</code>. \n+     * <code>b</code>.\n      *\n      * @param b  array of constant forming RHS of linear systems to\n      * to solve\n     /**\n      * Returns a matrix of (column) solution vectors for linear systems with\n      * coefficient matrix = this and constant vectors = columns of\n-     * <code>b</code>. \n+     * <code>b</code>.\n      *\n      * @param b  matrix of constant vectors forming RHS of linear systems to\n      * to solve\n     }\n \n     /**\n-     * Computes a new \n+     * Computes a new\n      * <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n-     * LU decompostion</a> for this matrix, storing the result for use by other methods. \n+     * LU decompostion</a> for this matrix, storing the result for use by other methods.\n      * <p>\n      * <strong>Implementation Note</strong>:<br>\n      * Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\">\n      * @throws InvalidMatrixException if the matrix is non-square or singular.\n      */\n     public void luDecompose() throws InvalidMatrixException {\n-         \n+\n         int nRows = this.getRowDimension();\n         int nCols = this.getColumnDimension();\n         if (nRows != nCols) {\n     }\n \n     /**\n-     * \n+     *\n      * @see java.lang.Object#toString()\n      */\n     public String toString() {\n         }\n         return out;\n     }\n-    \n+\n     /**\n      *  Returns the LU decomposition as a RealMatrix.\n-     *  Returns a fresh copy of the cached LU matrix if this has been computed; \n-     *  otherwise the composition is computed and cached for use by other methods.   \n-     *  Since a copy is returned in either case, changes to the returned matrix do not \n-     *  affect the LU decomposition property. \n-     * <p>\n-     * The matrix returned is a compact representation of the LU decomposition. \n-     * Elements below the main diagonal correspond to entries of the \"L\" matrix;   \n+     *  Returns a fresh copy of the cached LU matrix if this has been computed;\n+     *  otherwise the composition is computed and cached for use by other methods.\n+     *  Since a copy is returned in either case, changes to the returned matrix do not\n+     *  affect the LU decomposition property.\n+     * <p>\n+     * The matrix returned is a compact representation of the LU decomposition.\n+     * Elements below the main diagonal correspond to entries of the \"L\" matrix;\n      * elements on and above the main diagonal correspond to entries of the \"U\"\n      * matrix.\n      * <p>\n      * Example: <pre>\n-     * \n+     *\n      *     Returned matrix                L                  U\n-     *         2  3  1                   1  0  0            2  3  1          \n+     *         2  3  1                   1  0  0            2  3  1\n      *         5  4  6                   5  1  0            0  4  6\n-     *         1  7  8                   1  7  1            0  0  8          \n+     *         1  7  8                   1  7  1            0  0  8\n      * </pre>\n-     * \n+     *\n      * The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>\n      *  where permuteRows reorders the rows of the matrix to follow the order determined\n      *  by the <a href=#getPermutation()>permutation</a> property.\n-     * \n+     *\n      * @return LU decomposition matrix\n      * @throws InvalidMatrixException if the matrix is non-square or singular.\n      */\n         if (lu == null) {\n             luDecompose();\n         }\n-        return new RealMatrixImpl(lu);   \n-    }\n-    \n+        return new RealMatrixImpl(lu);\n+    }\n+\n     /**\n      * Returns the permutation associated with the lu decomposition.\n      * The entries of the array represent a permutation of the numbers 0, ... , nRows - 1.\n      * and current first row is last.\n      * <p>\n      * Returns a fresh copy of the array.\n-     * \n+     *\n      * @return the permutation\n      */\n     protected int[] getPermutation() {\n \n         return !(row < 1 || row > nRows || col < 1 || col > nCols);\n     }\n-    \n+\n }", "timestamp": 1086578791, "metainfo": ""}