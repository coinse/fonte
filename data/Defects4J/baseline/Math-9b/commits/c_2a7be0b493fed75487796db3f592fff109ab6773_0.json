{"sha": "2a7be0b493fed75487796db3f592fff109ab6773", "log": "streamlined deserialization of DerivativeStructure  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n          * @return replacement {@link DerivativeStructure}\n          */\n         private Object readResolve() {\n-            final DerivativeStructure ds = new DerivativeStructure(variables, order);\n-            System.arraycopy(data, 0, ds.data, 0, ds.data.length);\n-            return ds;\n+            return new DerivativeStructure(variables, order, data);\n         }\n \n     }\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n         TestUtils.assertEquals(derivatives, xRef.add(yRef.subtract(zRef)).getAllDerivatives(), 1.0e-15);\n     }\n \n+    @Test\n+    public void testSerialization() {\n+        DerivativeStructure a = new DerivativeStructure(3, 2, 0, 1.3);\n+        DerivativeStructure b = (DerivativeStructure) TestUtils.serializeAndRecover(a);\n+        Assert.assertEquals(a.getFreeParameters(), b.getFreeParameters());\n+        Assert.assertEquals(a.getOrder(), b.getOrder());\n+        checkEquals(a, b, 1.0e-15);\n+    }\n+\n     private void checkF0F1(DerivativeStructure ds, double value, double...derivatives) {\n \n         // check dimension", "timestamp": 1351590729, "metainfo": ""}