{"sha": "72fcac42163b9aa29c2fb640e582bf7527860af0", "log": "MATH-658 Dead code in FastMath.pow(double, double) and some improvement in test coverage  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n                     return Double.NEGATIVE_INFINITY;\n                 }\n \n-                if (y < 0 && y == yi && (yi & 1) == 1) {\n-                    return -0.0;\n-                }\n-\n                 if (y > 0 && y == yi && (yi & 1) == 1) {\n                     return -0.0;\n                 }\n--- a/src/test/java/org/apache/commons/math/util/FastMathTest.java\n+++ b/src/test/java/org/apache/commons/math/util/FastMathTest.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.util;\n+\n+import static org.junit.Assert.*;\n \n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n     }\n \n     @Test\n+    public void testLog1pSpecialCases() {\n+        double x;\n+\n+    \tx = FastMath.log1p(-1.0);\n+        if (x != Double.NEGATIVE_INFINITY)\n+            throw new RuntimeException(\"Log1p of -1 should be -infinity\");\n+    }\n+\n+    @Test\n     public void testLogSpecialCases() {\n         double x;\n \n         x = FastMath.pow(-2.0, 3.5);\n         if (x == x)\n             throw new RuntimeException(\"pow(-2.0, 3.5) should be NaN\");\n+\n+        // Added tests for a 100% coverage\n+\n+        x = FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN);\n+        if (x == x)\n+            throw new RuntimeException(\"pow(+Inf, NaN) should be NaN\");\n+\n+        x = FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN);\n+        if (x == x)\n+            throw new RuntimeException(\"pow(+Inf, NaN) should be NaN\");\n+\n+        x = FastMath.pow(1.0, Double.POSITIVE_INFINITY);\n+        if (x == x)\n+            throw new RuntimeException(\"pow(1.0, +Inf) should be NaN\");\n+\n+        x = FastMath.pow(Double.NEGATIVE_INFINITY, Double.NaN);\n+        if (x == x)\n+            throw new RuntimeException(\"pow(-Inf, NaN) should be NaN\");\n+\n+        x = FastMath.pow(Double.NEGATIVE_INFINITY, -1.0);\n+        if (x != -0.0)\n+            throw new RuntimeException(\"pow(-Inf, -1.0) should be 0.0\");\n+\n+        x = FastMath.pow(Double.NEGATIVE_INFINITY, -2.0);\n+        if (x != 0.0)\n+            throw new RuntimeException(\"pow(-Inf, -2.0) should be 0.0\");\n+\n+        x = FastMath.pow(Double.NEGATIVE_INFINITY, 1.0);\n+        if (x != Double.NEGATIVE_INFINITY)\n+            throw new RuntimeException(\"pow(-Inf, 1.0) should be -Inf\");\n+\n+        x = FastMath.pow(Double.NEGATIVE_INFINITY, 2.0);\n+        if (x != Double.POSITIVE_INFINITY)\n+            throw new RuntimeException(\"pow(-Inf, 2.0) should be +Inf\");\n+\n+        x = FastMath.pow(1.0, Double.NEGATIVE_INFINITY);\n+        if (x == x)\n+            throw new RuntimeException(\"pow(1.0, -Inf) should be NaN\");\n+\n     }\n \n     @Test\n         }\n \n         Assert.assertTrue(\"acos() had errors in excess of \" + MAX_ERROR_ULP + \" ULP\", maxerrulp < MAX_ERROR_ULP);\n+    }\n+\n+    /**\n+     * Added tests for a 100% coverage of acos().\n+     */\n+    @Test\n+    public void testAcosSpecialCases() {\n+    \tdouble x;\n+\n+    \tx = FastMath.acos(Double.NaN);\n+    \tif (x == x)\n+    \t\tthrow new RuntimeException(\"acos(NaN) should NaN\");\n+\n+    \tx = FastMath.acos(-1.1);\n+    \tif (x == x)\n+    \t\tthrow new RuntimeException(\"acos(-1.1) should NaN\");\n+    \t\n+    \tx = FastMath.acos(1.1);\n+    \tif (x == x)\n+    \t\tthrow new RuntimeException(\"acos(-1.1) should NaN\");\n+\n+    \tassertEquals(FastMath.acos(-1.0), FastMath.PI, Double.MIN_VALUE);\n+\n+    \tassertEquals(FastMath.acos(1.0), 0.0, Double.MIN_VALUE);\n+\n+    \tassertEquals(FastMath.acos(0.0), FastMath.PI / 2.0, Double.MIN_VALUE);\n+    }\n+\n+    /**\n+     * Added tests for a 100% coverage of asin().\n+     */\n+    @Test\n+    public void testAsinSpecialCases() {\n+    \tdouble x;\n+\n+    \tx = FastMath.asin(Double.NaN);\n+    \tif (x == x)\n+    \t\tthrow new RuntimeException(\"asin(NaN) should NaN\");\n+\n+    \tx = FastMath.asin(-1.1);\n+    \tif (x == x)\n+    \t\tthrow new RuntimeException(\"asin(-1.1) should NaN\");\n+    \t\n+    \tx = FastMath.asin(1.1);\n+    \tif (x == x)\n+    \t\tthrow new RuntimeException(\"asin(-1.1) should NaN\");\n+\n+    \tassertEquals(FastMath.asin(1.0), FastMath.PI / 2.0, Double.MIN_VALUE);\n+\n+    \tassertEquals(FastMath.asin(-1.0), -FastMath.PI / 2.0, Double.MIN_VALUE);\n+\n+    \tassertEquals(FastMath.asin(0.0), 0.0, Double.MIN_VALUE);\n     }\n \n     private Dfp cosh(Dfp x) {", "timestamp": 1315497551, "metainfo": ""}