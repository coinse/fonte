{"sha": "1dfa65b4bdb90dfae2bbf644b71cc346327db89a", "log": "Moved BivariateRegression to multivariate subpackage.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.stat.multivariate;\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.distribution.DistributionFactory;\n+import org.apache.commons.math.distribution.TDistribution;\n+\n+/**\n+ * Estimates an ordinary least squares regression model\n+ * with one independent variable.\n+ * <p>\n+ * <code> y = intercept + slope * x  </code>\n+ * <p>\n+ * Standard errors for <code>intercept</code> and <code>slope</code> are \n+ * available as well as ANOVA, r-square and Pearson's r statistics.\n+ * <p>\n+ * Observations (x,y pairs) can be added to the model one at a time or they \n+ * can be provided in a 2-dimensional array.  The observations are not stored\n+ * in memory, so there is no limit to the number of observations that can be\n+ * added to the model. \n+ * <p>\n+ * <strong>Usage Notes</strong>: <ul>\n+ * <li> When there are fewer than two observations in the model, or when\n+ * there is no variation in the x values (i.e. all x values are the same) \n+ * all statistics return <code>NaN</code>. At least two observations with\n+ * different x coordinates are requred to estimate a bivariate regression \n+ * model.\n+ * </li>\n+ * <li> getters for the statistics always compute values based on the current\n+ * set of observations -- i.e., you can get statistics, then add more data\n+ * and get updated statistics without using a new instance.  There is no \n+ * \"compute\" method that updates all statistics.  Each of the getters performs\n+ * the necessary computations to return the requested statistic.</li>\n+ * </ul>\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/04/11 21:52:28 $\n+ */\n+public class BivariateRegression implements Serializable {\n+\n+    static final long serialVersionUID = -3004689053607543335L;\n+\n+    /** sum of x values */\n+    private double sumX = 0d;\n+\n+    /** total variation in x (sum of squared deviations from xbar) */\n+    private double sumXX = 0d;\n+\n+    /** sum of y values */\n+    private double sumY = 0d;\n+\n+    /** total variation in y (sum of squared deviations from ybar) */\n+    private double sumYY = 0d;\n+\n+    /** sum of products */\n+    private double sumXY = 0d;\n+\n+    /** number of observations */\n+    private long n = 0;\n+\n+    /** mean of accumulated x values, used in updating formulas */\n+    private double xbar = 0;\n+\n+    /** mean of accumulated y values, used in updating formulas */\n+    private double ybar = 0;\n+\n+    // ---------------------Public methods--------------------------------------\n+\n+    /**\n+     * Adds the observation (x,y) to the regression data set.\n+     * <p>\n+     * Uses updating formulas for means and sums of squares defined in \n+     * \"Algorithms for Computing the Sample Variance: Analysis and\n+     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n+     * 1983, American Statistician, vol. 37, pp. 242-247, referenced in\n+     * Weisberg, S. \"Applied Linear Regression\". 2nd Ed. 1985\n+     *\n+     *\n+     * @param x independent variable value\n+     * @param y dependent variable value\n+     */\n+    public void addData(double x, double y) {\n+        if (n == 0) {\n+            xbar = x;\n+            ybar = y;\n+        } else {\n+            double dx = x - xbar;\n+            double dy = y - ybar;\n+            sumXX += dx * dx * (double) n / (double) (n + 1.0);\n+            sumYY += dy * dy * (double) n / (double) (n + 1.0);\n+            sumXY += dx * dy * (double) n / (double) (n + 1.0);\n+            xbar += dx / (double) (n + 1.0);\n+            ybar += dy / (double) (n + 1.0);\n+        }\n+        sumX += x;\n+        sumY += y;\n+        n++;\n+    }\n+\n+    /**\n+     * Adds the observations represented by the elements in \n+     * <code>data</code>.\n+     * <p>\n+     * <code>(data[0][0],data[0][1])</code> will be the first observation, then\n+     * <code>(data[1][0],data[1][1])</code>, etc. \n+     * <p> \n+     * This method does not replace data that has already been added.  The\n+     * observations represented by <code>data</code> are added to the existing\n+     * dataset.\n+     * <p> \n+     * To replace all data, use <code>clear()</code> before adding the new \n+     * data.\n+     * \n+     * @param data array of observations to be added\n+     */\n+    public void addData(double[][] data) {\n+        for (int i = 0; i < data.length; i++) {\n+            addData(data[i][0], data[i][1]);\n+        }\n+    }\n+\n+    /**\n+     * Clears all data from the model.\n+     */\n+    public void clear() {\n+        sumX = 0d;\n+        sumXX = 0d;\n+        sumY = 0d;\n+        sumYY = 0d;\n+        sumXY = 0d;\n+        n = 0;\n+    }\n+\n+    /**\n+     * Returns the number of observations that have been added to the model.\n+     *\n+     * @return n number of observations that have been added.\n+     */\n+    public long getN() {\n+        return n;\n+    }\n+\n+    /**\n+     * Returns the \"predicted\" <code>y</code> value associated with the \n+     * supplied <code>x</code> value,  based on the data that has been\n+     * added to the model when this method is activated.\n+     * <p>\n+     * <code> predict(x) = intercept + slope * x </code>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     * </li></ul>\n+     *\n+     * @param x input <code>x</code> value\n+     * @return predicted <code>y</code> value\n+     */\n+    public double predict(double x) {\n+        double b1 = getSlope();\n+        return getIntercept(b1) + b1 * x;\n+    }\n+\n+    /**\n+     * Returns the intercept of the estimated regression line.\n+     * <p>\n+     * The least squares estimate of the intercept is computed using the \n+     * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n+     * The intercept is sometimes denoted b0. \n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     * </li></ul>\n+     *\n+     * @return the intercept of the regression line\n+     */\n+    public double getIntercept() {\n+        return getIntercept(getSlope());\n+    }\n+\n+    /**\n+    * Returns the slope of the estimated regression line.  \n+    * <p>\n+    * The least squares estimate of the slope is computed using the \n+    * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n+    * The slope is sometimes denoted b1. \n+    * <p>\n+    * <strong>Preconditions</strong>: <ul>\n+    * <li>At least two observations (with at least two different x values)\n+    * must have been added before invoking this method. If this method is \n+    * invoked before a model can be estimated, <code>Double.NaN</code> is\n+    * returned.\n+    * </li></ul>\n+    *\n+    * @return the slope of the regression line\n+    */\n+    public double getSlope() {\n+        if (n < 2) {\n+            return Double.NaN; //not enough data \n+        }\n+        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {\n+            return Double.NaN; //not enough variation in x\n+        }\n+        return sumXY / sumXX;\n+    }\n+\n+    /**\n+     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n+     * sum of squared errors</a> (SSE) associated with the regression \n+     * model.\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     * </li></ul>\n+     *\n+     * @return sum of squared errors associated with the regression model\n+     */\n+    public double getSumSquaredErrors() {\n+        return getSumSquaredErrors(getSlope());\n+    }\n+\n+    /**\n+     * Returns the sum of squared deviations of the y values about their mean.\n+     * <p>\n+     * This is defined as SSTO \n+     * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a>.\n+     * <p>\n+     * If <code>n < 2</code>, this returns <code>Double.NaN</code>.\n+     *\n+     * @return sum of squared deviations of y values\n+     */\n+    public double getTotalSumSquares() {\n+        if (n < 2) {\n+            return Double.NaN;\n+        }\n+        return sumYY;\n+    }\n+\n+    /**\n+     * Returns the sum of squared deviations of the predicted y values about \n+     * their mean (which equals the mean of y).\n+     * <p>\n+     * This is usually abbreviated SSR or SSM.  It is defined as SSM \n+     * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a>\n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double.NaN</code> is\n+     * returned.\n+     * </li></ul>\n+     *\n+     * @return sum of squared deviations of predicted y values\n+     */\n+    public double getRegressionSumSquares() {\n+        return getRegressionSumSquares(getSlope());\n+    }\n+\n+    /**\n+     * Returns the sum of squared errors divided by the degrees of freedom,\n+     * usually abbreviated MSE. \n+     * <p>\n+     * If there are fewer than <strong>three</strong> data pairs in the model,\n+     * or if there is no variation in <code>x</code>, this returns \n+     * <code>Double.NaN</code>.\n+     *\n+     * @return sum of squared deviations of y values\n+     */\n+    public double getMeanSquareError() {\n+        if (n < 3) {\n+            return Double.NaN;\n+        }\n+        return getSumSquaredErrors() / (double) (n - 2);\n+    }\n+\n+    /**\n+     * Returns <a href=\"http://mathworld.wolfram.com/CorrelationCoefficient.html\">\n+     * Pearson's product moment correlation coefficient</a>,\n+     * usually denoted r. \n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     * </li></ul>\n+     *\n+     * @return Pearson's r\n+     */\n+    public double getR() {\n+        double b1 = getSlope();\n+        double result = Math.sqrt(getRSquare(b1));\n+        if (b1 < 0) {\n+            result = -result;\n+        }\n+        return result;\n+    }\n+\n+    /** \n+     * Returns the <a href=\"http://www.xycoon.com/coefficient1.htm\"> \n+     * coefficient of determination</a>,\n+     * usually denoted r-square. \n+     * <p>\n+     * <strong>Preconditions</strong>: <ul>\n+     * <li>At least two observations (with at least two different x values)\n+     * must have been added before invoking this method. If this method is \n+     * invoked before a model can be estimated, <code>Double,NaN</code> is\n+     * returned.\n+     * </li></ul>\n+     *\n+     * @return r-square\n+     */\n+    public double getRSquare() {\n+        return getRSquare(getSlope());\n+    }\n+\n+    /**\n+     * Returns the <a href=\"http://www.xycoon.com/standarderrorb0.htm\">\n+     * standard error of the intercept estimate</a>, \n+     * usually denoted s(b0). \n+     * <p>\n+     * If there are fewer that <strong>three</strong> observations in the \n+     * model, or if there is no variation in x, this returns \n+     * <code>Double.NaN</code>.\n+     *\n+     * @return standard error associated with intercept estimate\n+     */\n+    public double getInterceptStdErr() {\n+        return Math.sqrt(\n+            getMeanSquareError() * ((1d / (double) n) + (xbar * xbar) / sumXX));\n+    }\n+\n+    /**\n+     * Returns the <a href=\"http://www.xycoon.com/standerrorb(1).htm\">standard\n+     * error of the slope estimate</a>,\n+     * usually denoted s(b1). \n+     * <p>\n+     * If there are fewer that <strong>three</strong> data pairs in the model,\n+     * or if there is no variation in x, this returns <code>Double.NaN</code>.\n+     *\n+     * @return standard error associated with slope estimate\n+     */\n+    public double getSlopeStdErr() {\n+        return Math.sqrt(getMeanSquareError() / sumXX);\n+    }\n+\n+    /**\n+     * Returns the half-width of a 95% confidence interval for the slope\n+     * estimate.\n+     * <p>\n+     * The 95% confidence interval is \n+     * <p>\n+     * <code>(getSlope() - getSlopeConfidenceInterval(), \n+     * getSlope() + getSlopeConfidenceInterval())</code>\n+     * <p>\n+     * If there are fewer that <strong>three</strong> observations in the \n+     * model, or if there is no variation in x, this returns \n+     * <code>Double.NaN</code>.\n+     * <p>\n+     * <strong>Usage Note</strong>:<br>\n+     * The validity of this statistic depends on the assumption that the \n+     * observations included in the model are drawn from a\n+     * <a href=\"http://mathworld.wolfram.com/BivariateNormalDistribution.html\">\n+     * Bivariate Normal Distribution</a>.\n+     *\n+     * @return half-width of 95% confidence interval for the slope estimate\n+     */\n+    public double getSlopeConfidenceInterval() throws MathException {\n+        return getSlopeConfidenceInterval(0.05d);\n+    }\n+\n+    /**\n+     * Returns the half-width of a (100-100*alpha)% confidence interval for \n+     * the slope estimate.\n+     * <p>\n+     * The (100-100*alpha)% confidence interval is \n+     * <p>\n+     * <code>(getSlope() - getSlopeConfidenceInterval(), \n+     * getSlope() + getSlopeConfidenceInterval())</code>\n+     * <p>\n+     * To request, for example, a 99% confidence interval, use \n+     * <code>alpha = .01</code>\n+     * <p>\n+     * <strong>Usage Note</strong>:<br>\n+     * The validity of this statistic depends on the assumption that the \n+     * observations included in the model are drawn from a\n+     * <a href=\"http://mathworld.wolfram.com/BivariateNormalDistribution.html\">\n+     * Bivariate Normal Distribution</a>.\n+     * <p>\n+     * <strong> Preconditions:</strong><ul>\n+     * <li>If there are fewer that <strong>three</strong> observations in the \n+     * model, or if there is no variation in x, this returns \n+     * <code>Double.NaN</code>. \n+     * </li>\n+     * <li><code>(0 < alpha < 1)</code>; otherwise an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     * </li></ul>    \n+     *\n+     * @param alpha the desired significance level \n+     * @return half-width of 95% confidence interval for the slope estimate\n+     */\n+    public double getSlopeConfidenceInterval(double alpha)\n+        throws MathException {\n+        if (alpha >= 1 || alpha <= 0) {\n+            throw new IllegalArgumentException();\n+        }\n+        return getSlopeStdErr()\n+            * getTDistribution().inverseCumulativeProbability(1d - alpha / 2d);\n+    }\n+\n+    /**\n+     * Returns the significance level of the slope (equiv) correlation. \n+     * <p>\n+     * Specifically, the returned value is the smallest <code>alpha</code>\n+     * such that the slope confidence interval with significance level\n+     * equal to <code>alpha</code> does not include <code>0</code>.\n+     * On regression output, this is often denoted <code>Prob(|t| > 0)</code>\n+     * <p>\n+     * <strong>Usage Note</strong>:<br>\n+     * The validity of this statistic depends on the assumption that the \n+     * observations included in the model are drawn from a\n+     * <a href=\"http://mathworld.wolfram.com/BivariateNormalDistribution.html\">\n+     * Bivariate Normal Distribution</a>.\n+     * <p>\n+     * If there are fewer that <strong>three</strong> observations in the \n+     * model, or if there is no variation in x, this returns \n+     * <code>Double.NaN</code>.\n+     *\n+     * @return significance level for slope/correlation\n+     */\n+    public double getSignificance() throws MathException {\n+        return (\n+            1d\n+                - getTDistribution().cumulativeProbability(\n+                    Math.abs(getSlope()) / getSlopeStdErr()));\n+    }\n+\n+    // ---------------------Private methods-----------------------------------\n+\n+    /**\n+    * Returns the intercept of the estimated regression line, given the slope.\n+    * <p>\n+    * Will return <code>NaN</code> if slope is <code>NaN</code>.\n+    *\n+    * @param slope current slope\n+    * @return the intercept of the regression line\n+    */\n+    private double getIntercept(double slope) {\n+        return (sumY - slope * sumX) / ((double) n);\n+    }\n+\n+    /**\n+     * Returns the sum of squared errors associated with the regression \n+     * model, using the slope of the regression line. \n+     * <p> \n+     * Returns NaN if the slope is NaN.\n+     * \n+     * @param b1 current slope\n+     * @return sum of squared errors associated with the regression model\n+     */\n+    private double getSumSquaredErrors(double b1) {\n+        return sumYY - sumXY * sumXY / sumXX;\n+    }\n+\n+    /** \n+     * Computes r-square from the slope.\n+     * <p>\n+     * will return NaN if slope is Nan.\n+     *\n+     * @param b1 current slope\n+     * @return r-square\n+     */\n+    private double getRSquare(double b1) {\n+        double ssto = getTotalSumSquares();\n+        return (ssto - getSumSquaredErrors(b1)) / ssto;\n+    }\n+\n+    /**\n+     * Computes SSR from b1.\n+     * \n+     * @param slope regression slope estimate\n+     * @return sum of squared deviations of predicted y values\n+     */\n+    private double getRegressionSumSquares(double slope) {\n+        return slope * slope * sumXX;\n+    }\n+\n+    /**\n+     * Uses distribution framework to get a t distribution instance \n+     * with df = n - 2\n+     *\n+     * @return t distribution with df = n - 2\n+     */\n+    private TDistribution getTDistribution() {\n+        return DistributionFactory.newInstance().createTDistribution(n - 2);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/multivariate/BivariateRegressionTest.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.multivariate;\n+\n+import java.util.Random;\n+\n+import org.apache.commons.math.MathException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the TestStatistic class.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/04/11 21:52:28 $\n+ */\n+\n+public final class BivariateRegressionTest extends TestCase {\n+\n+    /* \n+     * NIST \"Norris\" refernce data set from \n+     * http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Norris.dat\n+     * Strangely, order is {y,x}\n+     */\n+    private double[][] data = { { 0.1, 0.2 }, {\n+            338.8, 337.4 }, {\n+            118.1, 118.2 }, {\n+            888.0, 884.6 }, {\n+            9.2, 10.1 }, {\n+            228.1, 226.5 }, {\n+            668.5, 666.3 }, {\n+            998.5, 996.3 }, {\n+            449.1, 448.6 }, {\n+            778.9, 777.0 }, {\n+            559.2, 558.2 }, {\n+            0.3, 0.4 }, {\n+            0.1, 0.6 }, {\n+            778.1, 775.5 }, {\n+            668.8, 666.9 }, {\n+            339.3, 338.0 }, {\n+            448.9, 447.5 }, {\n+            10.8, 11.6 }, {\n+            557.7, 556.0 }, {\n+            228.3, 228.1 }, {\n+            998.0, 995.8 }, {\n+            888.8, 887.6 }, {\n+            119.6, 120.2 }, {\n+            0.3, 0.3 }, {\n+            0.6, 0.3 }, {\n+            557.6, 556.8 }, {\n+            339.3, 339.1 }, {\n+            888.0, 887.2 }, {\n+            998.5, 999.0 }, {\n+            778.9, 779.0 }, {\n+            10.2, 11.1 }, {\n+            117.6, 118.3 }, {\n+            228.9, 229.2 }, {\n+            668.4, 669.1 }, {\n+            449.2, 448.9 }, {\n+            0.2, 0.5 }\n+    };\n+\n+    /* \n+     * Correlation example from \n+     * http://www.xycoon.com/correlation.htm\n+     */\n+    private double[][] corrData = { { 101.0, 99.2 }, {\n+            100.1, 99.0 }, {\n+            100.0, 100.0 }, {\n+            90.6, 111.6 }, {\n+            86.5, 122.2 }, {\n+            89.7, 117.6 }, {\n+            90.6, 121.1 }, {\n+            82.8, 136.0 }, {\n+            70.1, 154.2 }, {\n+            65.4, 153.6 }, {\n+            61.3, 158.5 }, {\n+            62.5, 140.6 }, {\n+            63.6, 136.2 }, {\n+            52.6, 168.0 }, {\n+            59.7, 154.3 }, {\n+            59.5, 149.0 }, {\n+            61.3, 165.5 }\n+    };\n+\n+    /*\n+     * From Moore and Mcabe, \"Introduction to the Practice of Statistics\"\n+     * Example 10.3 \n+     */\n+    private double[][] infData = { { 15.6, 5.2 }, {\n+            26.8, 6.1 }, {\n+            37.8, 8.7 }, {\n+            36.4, 8.5 }, {\n+            35.5, 8.8 }, {\n+            18.6, 4.9 }, {\n+            15.3, 4.5 }, {\n+            7.9, 2.5 }, {\n+            0.0, 1.1 }\n+    };\n+\n+    /*\n+     * From http://www.xycoon.com/simple_linear_regression.htm\n+     */\n+    private double[][] infData2 = { { 1, 3 }, {\n+            2, 5 }, {\n+            3, 7 }, {\n+            4, 14 }, {\n+            5, 11 }\n+    };\n+\n+    public BivariateRegressionTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(BivariateRegressionTest.class);\n+        suite.setName(\"BivariateRegression Tests\");\n+        return suite;\n+    }\n+\n+    public void testNorris() {\n+        BivariateRegression regression = new BivariateRegression();\n+        for (int i = 0; i < data.length; i++) {\n+            regression.addData(data[i][1], data[i][0]);\n+        }\n+        assertEquals(\"slope\", 1.00211681802045, regression.getSlope(), 10E-12);\n+        assertEquals(\n+            \"slope std err\",\n+            0.429796848199937E-03,\n+            regression.getSlopeStdErr(),\n+            10E-12);\n+        assertEquals(\"number of observations\", 36, regression.getN());\n+        assertEquals(\n+            \"intercept\",\n+            -0.262323073774029,\n+            regression.getIntercept(),\n+            10E-12);\n+        assertEquals(\n+            \"std err intercept\",\n+            0.232818234301152,\n+            regression.getInterceptStdErr(),\n+            10E-12);\n+        assertEquals(\n+            \"r-square\",\n+            0.999993745883712,\n+            regression.getRSquare(),\n+            10E-12);\n+        assertEquals(\n+            \"SSR\",\n+            4255954.13232369,\n+            regression.getRegressionSumSquares(),\n+            10E-9);\n+        assertEquals(\n+            \"MSE\",\n+            0.782864662630069,\n+            regression.getMeanSquareError(),\n+            10E-10);\n+        assertEquals(\n+            \"SSE\",\n+            26.6173985294224,\n+            regression.getSumSquaredErrors(),\n+            10E-9);\n+        assertEquals(\n+            \"predict(0)\",\n+            -0.262323073774029,\n+            regression.predict(0),\n+            10E-12);\n+        assertEquals(\n+            \"predict(1)\",\n+            1.00211681802045 - 0.262323073774029,\n+            regression.predict(1),\n+            10E-12);\n+    }\n+\n+    public void testCorr() {\n+        BivariateRegression regression = new BivariateRegression();\n+        regression.addData(corrData);\n+        assertEquals(\"number of observations\", 17, regression.getN());\n+        assertEquals(\"r-square\", .896123, regression.getRSquare(), 10E-6);\n+        assertEquals(\"r\", -.946638, regression.getR(), 10E-6);\n+    }\n+\n+    public void testNaNs() {\n+\n+        BivariateRegression regression = new BivariateRegression();\n+\n+        assertTrue(\n+            \"intercept not NaN\",\n+            Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"slope not NaN\", Double.isNaN(regression.getSlope()));\n+        assertTrue(\n+            \"slope std err not NaN\",\n+            Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\n+            \"intercept std err not NaN\",\n+            Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\n+            \"MSE not NaN\",\n+            Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"e not NaN\", Double.isNaN(regression.getR()));\n+        assertTrue(\"r-square not NaN\", Double.isNaN(regression.getRSquare()));\n+        assertTrue(\n+            \"RSS not NaN\",\n+            Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\n+            \"SSE not NaN\",\n+            Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\n+            \"SSTO not NaN\",\n+            Double.isNaN(regression.getTotalSumSquares()));\n+        assertTrue(\"predict not NaN\", Double.isNaN(regression.predict(0)));\n+\n+        regression.addData(1, 2);\n+        regression.addData(1, 3);\n+\n+        // No x variation, so these should still blow...\n+        assertTrue(\n+            \"intercept not NaN\",\n+            Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"slope not NaN\", Double.isNaN(regression.getSlope()));\n+        assertTrue(\n+            \"slope std err not NaN\",\n+            Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\n+            \"intercept std err not NaN\",\n+            Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\n+            \"MSE not NaN\",\n+            Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"e not NaN\", Double.isNaN(regression.getR()));\n+        assertTrue(\"r-square not NaN\", Double.isNaN(regression.getRSquare()));\n+        assertTrue(\n+            \"RSS not NaN\",\n+            Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\n+            \"SSE not NaN\",\n+            Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"predict not NaN\", Double.isNaN(regression.predict(0)));\n+\n+        // but SSTO should be OK\n+        assertTrue(\"SSTO NaN\", !Double.isNaN(regression.getTotalSumSquares()));\n+\n+        regression = new BivariateRegression();\n+\n+        regression.addData(1, 2);\n+        regression.addData(3, 3);\n+\n+        // All should be OK except MSE, s(b0), s(b1) which need one more df \n+        assertTrue(\"interceptNaN\", !Double.isNaN(regression.getIntercept()));\n+        assertTrue(\"slope NaN\", !Double.isNaN(regression.getSlope()));\n+        assertTrue(\n+            \"slope std err not NaN\",\n+            Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\n+            \"intercept std err not NaN\",\n+            Double.isNaN(regression.getInterceptStdErr()));\n+        assertTrue(\n+            \"MSE not NaN\",\n+            Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\"r NaN\", !Double.isNaN(regression.getR()));\n+        assertTrue(\"r-square NaN\", !Double.isNaN(regression.getRSquare()));\n+        assertTrue(\n+            \"RSS NaN\",\n+            !Double.isNaN(regression.getRegressionSumSquares()));\n+        assertTrue(\"SSE NaN\", !Double.isNaN(regression.getSumSquaredErrors()));\n+        assertTrue(\"SSTO NaN\", !Double.isNaN(regression.getTotalSumSquares()));\n+        assertTrue(\"predict NaN\", !Double.isNaN(regression.predict(0)));\n+\n+        regression.addData(1, 4);\n+\n+        // MSE, MSE, s(b0), s(b1) should all be OK now\n+        assertTrue(\"MSE NaN\", !Double.isNaN(regression.getMeanSquareError()));\n+        assertTrue(\n+            \"slope std err NaN\",\n+            !Double.isNaN(regression.getSlopeStdErr()));\n+        assertTrue(\n+            \"intercept std err NaN\",\n+            !Double.isNaN(regression.getInterceptStdErr()));\n+    }\n+\n+    public void testClear() {\n+        BivariateRegression regression = new BivariateRegression();\n+        regression.addData(corrData);\n+        assertEquals(\"number of observations\", 17, regression.getN());\n+        regression.clear();\n+        assertEquals(\"number of observations\", 0, regression.getN());\n+        regression.addData(corrData);\n+        assertEquals(\"r-square\", .896123, regression.getRSquare(), 10E-6);\n+        regression.addData(data);\n+        assertEquals(\"number of observations\", 53, regression.getN());\n+    }\n+\n+    public void testInference() {\n+\n+        BivariateRegression regression = new BivariateRegression();\n+        regression.addData(infData);\n+\n+        try {\n+            assertEquals(\n+                \"slope confidence interval\",\n+                0.0271,\n+                regression.getSlopeConfidenceInterval(),\n+                0.0001);\n+            assertEquals(\n+                \"slope std err\",\n+                0.01146,\n+                regression.getSlopeStdErr(),\n+                0.0001);\n+\n+            regression = new BivariateRegression();\n+            regression.addData(infData2);\n+            assertEquals(\n+                \"significance\",\n+                0.023331,\n+                regression.getSignificance(),\n+                0.0001);\n+\n+            //FIXME: get a real example to test against with alpha = .01\n+            assertTrue(\n+                \"tighter means wider\",\n+                regression.getSlopeConfidenceInterval()\n+                    < regression.getSlopeConfidenceInterval(0.01));\n+\n+        } catch (MathException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+\n+        try {\n+            double x = regression.getSlopeConfidenceInterval(1);\n+            fail(\"expecting IllegalArgumentException for alpha = 1\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        } catch (MathException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    public void testPerfect() {\n+        BivariateRegression regression = new BivariateRegression();\n+        int n = 100;\n+        for (int i = 0; i < n; i++) {\n+            regression.addData(((double) i) / (n - 1), i);\n+        }\n+\n+        try {\n+            assertEquals(0.0, regression.getSignificance(), 1.0e-5);\n+            assertTrue(regression.getSlope() > 0.0);\n+        } catch (MathException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testPerfectNegative() {\n+        BivariateRegression regression = new BivariateRegression();\n+        int n = 100;\n+        for (int i = 0; i < n; i++) {\n+            regression.addData(- ((double) i) / (n - 1), i);\n+        }\n+        try {\n+            assertEquals(0.0, regression.getSignificance(), 1.0e-5);\n+            assertTrue(regression.getSlope() < 0.0);\n+        } catch (MathException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testRandom() {\n+        BivariateRegression regression = new BivariateRegression();\n+        Random random = new Random(1);\n+        int n = 100;\n+        for (int i = 0; i < n; i++) {\n+            regression.addData(((double) i) / (n - 1), random.nextDouble());\n+        }\n+\n+        try {\n+            assertTrue(\n+                0.0 < regression.getSignificance()\n+                    && regression.getSignificance() < 1.0);\n+        } catch (MathException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+    }\n+}", "timestamp": 1081720348, "metainfo": ""}