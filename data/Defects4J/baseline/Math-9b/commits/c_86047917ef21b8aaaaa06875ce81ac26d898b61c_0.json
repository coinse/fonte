{"sha": "86047917ef21b8aaaaa06875ce81ac26d898b61c", "log": "MATH-581 Framework for iterative solvers.   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/linear/InvertibleRealLinearOperator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.linear;\n+\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+\n+/**\n+ * This interface defines a {@link RealLinearOperator} which can be inverted.\n+ * Preconditioners typically fall into this category.\n+ *\n+ * @version $Id$\n+ */\n+public abstract class InvertibleRealLinearOperator extends RealLinearOperator {\n+    /**\n+     * Creates a new instance of this class with the specified dimension.\n+     *\n+     * @param dim Common dimension of the domain and codomain.\n+     */\n+    public InvertibleRealLinearOperator(final int dim) {\n+        super(dim, dim);\n+    }\n+\n+    /**\n+     * Computes the matrix-vector product of the inverse of this instance\n+     * with {@code b} and returns the result.\n+     *\n+     * @param b Right-hand side vector.\n+     * @return the left-hand side vector.\n+     */\n+    public double[] solve(final double[] b) {\n+        if (b.length != getRowDimension()) {\n+            throw new DimensionMismatchException(b.length,\n+                                                 getRowDimension());\n+        }\n+        final RealVector x = solve(new ArrayRealVector(b, false));\n+        if (x instanceof ArrayRealVector) {\n+            return ((ArrayRealVector) x).getDataRef();\n+        } else {\n+            return x.getData();\n+        }\n+    }\n+\n+    /**\n+     * Computes the matrix-vector product of the inverse of this instance\n+     * with {@code b} and returns the result.\n+     *\n+     * @param b Right-hand side vector.\n+     * @return the left-hand side vector.\n+     */\n+    public abstract RealVector solve(final RealVector b);\n+}", "timestamp": 1310506474, "metainfo": ""}