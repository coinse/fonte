{"sha": "23beda6ef46c374b90d712e801ed71f07d90fed8", "log": "MATH-843 Corrected documentation for \"Precision.EPSILON\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/Precision.java\n+++ b/src/main/java/org/apache/commons/math3/util/Precision.java\n  */\n public class Precision {\n     /**\n-     * Smallest positive number such that {@code 1 - EPSILON} is not\n-     * numerically equal to 1.\n+     * Largest double-precision floating-point number such that\n+     * {@code 1 + EPSILON} is numerically equal to 1.\n      * <br/>\n      * In IEEE 754 arithmetic, this is 2<sup>-53</sup>.\n      */\n--- a/src/test/java/org/apache/commons/math3/util/PrecisionTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/PrecisionTest.java\n \n         Assert.assertTrue(nonRepresentableCount / (double) numTrials > 0.9);\n     }\n+\n+    @Test\n+    public void testMath843() {\n+        final double afterEpsilon = FastMath.nextAfter(Precision.EPSILON,\n+                                                       Double.POSITIVE_INFINITY);\n+\n+        // a) 1 + EPSILON is equal to 1.\n+        Assert.assertTrue(1 + Precision.EPSILON == 1);\n+\n+        // b) 1 + \"the number after EPSILON\" is not equal to 1.\n+        Assert.assertFalse(1 + afterEpsilon == 1);\n+    }\n }", "timestamp": 1344375538, "metainfo": ""}