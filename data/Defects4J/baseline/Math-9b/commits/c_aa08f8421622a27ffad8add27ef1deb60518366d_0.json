{"sha": "aa08f8421622a27ffad8add27ef1deb60518366d", "log": "allow chained IOExceptions even before Java 6  ", "commit": "\n--- a/src/java/org/apache/commons/math/MathRuntimeException.java\n+++ b/src/java/org/apache/commons/math/MathRuntimeException.java\n package org.apache.commons.math;\n \n import java.io.EOFException;\n+import java.io.IOException;\n import java.io.PrintStream;\n import java.io.PrintWriter;\n import java.text.MessageFormat;\n     }\n \n     /**\n+     * Constructs a new <code>IOException</code> with specified nested\n+     * <code>Throwable</code> root cause.\n+     * <p>This factory method allows chaining of other exceptions within an\n+     * <code>IOException</code> even for Java 5. The constructor for\n+     * <code>IOException</code> with a cause parameter was introduced only\n+     * with Java 6.</p>\n+     * @param rootCause the exception or error that caused this exception\n+     * to be thrown.\n+     */\n+    public static IOException createIOException(final Throwable rootCause) {\n+        IOException ioe = new IOException(rootCause.getLocalizedMessage());\n+        ioe.initCause(rootCause);\n+        return ioe;\n+    }\n+\n+    /**\n      * Constructs a new <code>IllegalArgumentException</code> with specified formatted detail message.\n      * Message formatting is delegated to {@link java.text.MessageFormat}.\n      * @param pattern format specifier\n--- a/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n       // save the local attributes\n       finalizeStep();\n     } catch (DerivativeException e) {\n-      throw new IOException(e.getMessage());\n+      throw MathRuntimeException.createIOException(e);\n     }\n     out.writeInt(currentState.length);\n     for (int i = 0; i < currentState.length; ++i) {\n--- a/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java\n import java.io.ObjectOutput;\n import java.io.IOException;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n       // we can now set the interpolated time and state\n       setInterpolatedTime(t);\n     } catch (DerivativeException e) {\n-      throw new IOException(e.getMessage());\n+      throw MathRuntimeException.createIOException(e);\n     }\n \n   }\n--- a/src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/MultistepStepInterpolator.java\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n \n             // we can now set the interpolated time and state\n             setInterpolatedTime(t);\n         } catch (DerivativeException e) {\n-            throw new IOException(e.getMessage());\n+            throw MathRuntimeException.createIOException(e);\n         }\n \n     }\n--- a/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java\n import java.io.ObjectOutput;\n import java.io.IOException;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n       // we can now set the interpolated time and state\n       setInterpolatedTime(t);\n     } catch (DerivativeException e) {\n-      throw new IOException(e.getMessage());\n+      throw MathRuntimeException.createIOException(e);\n     }\n \n   }\n--- a/src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java\n import java.io.ObjectOutput;\n import java.io.IOException;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.SecondOrderIntegrator;\n     try {\n       finalizeStep();\n     } catch (DerivativeException e) {\n-      throw new IOException(e.getMessage());\n+      throw MathRuntimeException.createIOException(e);\n     }\n \n   }\n--- a/src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java\n import java.io.ObjectOutput;\n import java.io.IOException;\n \n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;\n \n       // we can now set the interpolated time and state\n       setInterpolatedTime(t);\n     } catch (DerivativeException e) {\n-      throw new IOException(e.getMessage());\n+      throw MathRuntimeException.createIOException(e);\n     }\n \n   }\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n                 // don't wrap RuntimeExceptions\n                 throw rte;\n             } catch (Exception e) {\n-                throw new IOException(e.getMessage());\n+                throw MathRuntimeException.createIOException(e);\n             }\n             if (sampleStats.getN() == 0) {\n                 throw MathRuntimeException.createEOFException(\"URL {0} contains no data\",\n                 // don't wrap RuntimeExceptions\n                 throw rte;\n             } catch (Exception e) {\n-                throw new IOException(e.getMessage());\n+                throw MathRuntimeException.createIOException(e);\n             }\n             in = new BufferedReader(new FileReader(file));\n             fillBinStats(in);\n             // don't wrap RuntimeExceptions\n             throw rte;\n         } catch (Exception e) {\n-            throw new IOException(e.getMessage());\n+            throw MathRuntimeException.createIOException(e);\n         }\n \n         // Assign upperBounds based on bin counts\n--- a/src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java\n         fail(\"an exception should have been thrown\");\n     } catch (IOException ioe) {\n         // expected behavior\n-        assertNull(ioe.getMessage());\n+        assertEquals(0, ioe.getMessage().length());\n     } catch (Exception e) {\n         fail(\"wrong exception caught\");\n     }\n         fail(\"an exception should have been thrown\");\n     } catch (IOException ioe) {\n         // expected behavior\n-        assertNull(ioe.getMessage());\n+        assertEquals(0, ioe.getMessage().length());\n     } catch (Exception e) {\n         fail(\"wrong exception caught\");\n     }", "timestamp": 1226075518, "metainfo": ""}