{"sha": "45d0ed8cf9de00c60a8af605c615a5818c2cdf33", "log": "Added signum to DerivativeStructure.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n         return FastMath.round(data[0]);\n     }\n \n+    /** Compute the signum of the instance.\n+     * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise\n+     * @param a number on which evaluation is done\n+     * @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a\n+     */\n+    public DerivativeStructure signum() {\n+        return new DerivativeStructure(compiler.getFreeParameters(),\n+                                       compiler.getOrder(),\n+                                       FastMath.signum(data[0]));\n+    }\n+\n     /**\n      * Returns the instance with the sign of the argument.\n      * A NaN {@code sign} argument is treated as positive.\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n     }\n \n     @Test\n+    public void testSignum() {\n+\n+        DerivativeStructure minusOne = new DerivativeStructure(1, 1, 0, -1.0);\n+        Assert.assertEquals(-1.0, minusOne.signum().getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals( 0.0, minusOne.signum().getPartialDerivative(1), 1.0e-15);\n+\n+        DerivativeStructure plusOne = new DerivativeStructure(1, 1, 0, +1.0);\n+        Assert.assertEquals(+1.0, plusOne.signum().getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals( 0.0, plusOne.signum().getPartialDerivative(1), 1.0e-15);\n+\n+        DerivativeStructure minusZero = new DerivativeStructure(1, 1, 0, -0.0);\n+        Assert.assertEquals(-0.0, minusZero.signum().getPartialDerivative(0), 1.0e-15);\n+        Assert.assertTrue(Double.doubleToLongBits(minusZero.signum().getValue()) < 0);\n+        Assert.assertEquals( 0.0, minusZero.signum().getPartialDerivative(1), 1.0e-15);\n+\n+        DerivativeStructure plusZero = new DerivativeStructure(1, 1, 0, +0.0);\n+        Assert.assertEquals(+0.0, plusZero.signum().getPartialDerivative(0), 1.0e-15);\n+        Assert.assertTrue(Double.doubleToLongBits(plusZero.signum().getValue()) == 0);\n+        Assert.assertEquals( 0.0, plusZero.signum().getPartialDerivative(1), 1.0e-15);\n+\n+    }\n+\n+    @Test\n     public void testCeilFloorRintLong() {\n \n         DerivativeStructure x = new DerivativeStructure(1, 1, 0, -1.5);", "timestamp": 1345111679, "metainfo": ""}