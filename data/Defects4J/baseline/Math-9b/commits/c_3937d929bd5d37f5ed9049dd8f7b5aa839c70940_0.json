{"sha": "3937d929bd5d37f5ed9049dd8f7b5aa839c70940", "log": "MATH-795: factored out testMinMax().   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n     }\n \n     @Test\n-    public void testMinMax()  {\n-        ArrayRealVector v1 = new ArrayRealVector(new double[] { 0, -6, 4, 12, 7 });\n-        Assert.assertEquals(1,  v1.getMinIndex());\n-        Assert.assertEquals(-6, v1.getMinValue(), 1.0e-12);\n-        Assert.assertEquals(3,  v1.getMaxIndex());\n-        Assert.assertEquals(12, v1.getMaxValue(), 1.0e-12);\n-        ArrayRealVector v2 = new ArrayRealVector(new double[] { Double.NaN, 3, Double.NaN, -2 });\n-        Assert.assertEquals(3,  v2.getMinIndex());\n-        Assert.assertEquals(-2, v2.getMinValue(), 1.0e-12);\n-        Assert.assertEquals(1,  v2.getMaxIndex());\n-        Assert.assertEquals(3, v2.getMaxValue(), 1.0e-12);\n-        ArrayRealVector v3 = new ArrayRealVector(new double[] { Double.NaN, Double.NaN });\n-        Assert.assertEquals(-1,  v3.getMinIndex());\n-        Assert.assertTrue(Double.isNaN(v3.getMinValue()));\n-        Assert.assertEquals(-1,  v3.getMaxIndex());\n-        Assert.assertTrue(Double.isNaN(v3.getMaxValue()));\n-        ArrayRealVector v4 = new ArrayRealVector(new double[0]);\n-        Assert.assertEquals(-1,  v4.getMinIndex());\n-        Assert.assertTrue(Double.isNaN(v4.getMinValue()));\n-        Assert.assertEquals(-1,  v4.getMaxIndex());\n-        Assert.assertTrue(Double.isNaN(v4.getMaxValue()));\n-    }\n-\n-    @Test\n     public void testCosine() {\n         final ArrayRealVector v = new ArrayRealVector(new double[] {1, 0, 0});\n \n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n         Assert.assertEquals(v,TestUtils.serializeAndRecover(v));\n     }\n \n-\n     @Test\n     public void testAddToEntry() {\n         final double[] v = new double[] { 1, 2, 3 };\n         }\n     }\n \n+    @Test\n+    public void testMinMax() {\n+        final RealVector v1 = create(new double[] {0, -6, 4, 12, 7});\n+        Assert.assertEquals(1, v1.getMinIndex());\n+        Assert.assertEquals(-6, v1.getMinValue(), 1.0e-12);\n+        Assert.assertEquals(3, v1.getMaxIndex());\n+        Assert.assertEquals(12, v1.getMaxValue(), 1.0e-12);\n+        final RealVector v2 = create(new double[] {Double.NaN, 3, Double.NaN, -2});\n+        Assert.assertEquals(3, v2.getMinIndex());\n+        Assert.assertEquals(-2, v2.getMinValue(), 1.0e-12);\n+        Assert.assertEquals(1, v2.getMaxIndex());\n+        Assert.assertEquals(3, v2.getMaxValue(), 1.0e-12);\n+        final RealVector v3 = create(new double[] {Double.NaN, Double.NaN});\n+        Assert.assertEquals(-1, v3.getMinIndex());\n+        Assert.assertTrue(Double.isNaN(v3.getMinValue()));\n+        Assert.assertEquals(-1, v3.getMaxIndex());\n+        Assert.assertTrue(Double.isNaN(v3.getMaxValue()));\n+        final RealVector v4 = create(new double[0]);\n+        Assert.assertEquals(-1, v4.getMinIndex());\n+        Assert.assertTrue(Double.isNaN(v4.getMinValue()));\n+        Assert.assertEquals(-1, v4.getMaxIndex());\n+        Assert.assertTrue(Double.isNaN(v4.getMaxValue()));\n+    }\n+\n     /*\n      * TESTS OF THE VISITOR PATTERN\n      */", "timestamp": 1338915717, "metainfo": ""}