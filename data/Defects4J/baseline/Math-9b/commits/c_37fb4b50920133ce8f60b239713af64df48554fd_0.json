{"sha": "37fb4b50920133ce8f60b239713af64df48554fd", "log": "removed lots of serialization in ODE the only classes/interfaces for which serialization is really important in this package are the step interpolators. The reason for that is that the ContinuousOutputModel is explicitly serializable and contains step interpolators. This allows users to perform integration of any complex model and to save the result of the integration for all integration range by serializing a ContinuousOutputModel instance. This feature is a major one.  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/AbstractIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/AbstractIntegrator.java\n \n package org.apache.commons.math.ode;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public abstract class AbstractIntegrator implements FirstOrderIntegrator, Serializable {\n+public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n \n     \n-    /**\n-     * Serialization UID\n-     */\n-    private static final long serialVersionUID = 1L;\n-\n     /** Name of the method. */\n     private final String name;\n \n     /** Specialized event handler to stop integration. */\n     private static class EndTimeChecker implements EventHandler {\n \n-        /** Serializable version identifier. */\n-        private static final long serialVersionUID = -7029115498939113263L;\n-\n         /** Desired end time. */\n         private final double endTime;\n \n--- a/src/java/org/apache/commons/math/ode/FirstOrderConverter.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderConverter.java\n  * @since 1.2\n  */\n \n-public class FirstOrderConverter\n-  implements FirstOrderDifferentialEquations {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = -8233657110042144146L;\n+public class FirstOrderConverter implements FirstOrderDifferentialEquations {\n \n   /** Simple constructor.\n    * Build a converter around a second order equations set.\n--- a/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n \n package org.apache.commons.math.ode;\n \n-import java.io.Serializable;\n \n /** This interface represents a first order differential equations set.\n  *\n  * @since 1.2\n  */\n \n-public interface FirstOrderDifferentialEquations extends Serializable {\n+public interface FirstOrderDifferentialEquations {\n     \n     /** Get the dimension of the problem.\n      * @return dimension of the problem\n--- a/src/java/org/apache/commons/math/ode/MultistepIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/MultistepIntegrator.java\n  */\n public abstract class MultistepIntegrator extends AdaptiveStepsizeIntegrator {\n \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 1L;\n-\n     /** Transformer. */\n     protected final transient NordsieckTransformer transformer;\n \n     /** Specialized step handler storing the first step. */\n     private class NordsieckInitializer implements StepHandler {\n \n-        /** Serializable version identifier. */\n-        private static final long serialVersionUID = 4452937833660410413L;\n-\n         /** Problem dimension. */\n         private final int n;\n \n     /** Wrapper for differential equations, ensuring start evaluations are counted. */\n     private class CountingDifferentialEquations implements FirstOrderDifferentialEquations {\n \n-        /** Serializable uid. */\n-        private static final long serialVersionUID = -6329212616396607764L;\n-\n         /** Dimension of the problem. */\n         private final int dimension;\n \n--- a/src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java\n+++ b/src/java/org/apache/commons/math/ode/events/CombinedEventsManager.java\n \n package org.apache.commons.math.ode.events;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n  * @since 1.2\n  */\n \n-public class CombinedEventsManager implements Serializable {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -4151965151236441261L;\n+public class CombinedEventsManager {\n \n     /** Events states. */\n     private final List<EventState> states;\n--- a/src/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/java/org/apache/commons/math/ode/events/EventState.java\n \n package org.apache.commons.math.ode.events;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-public class EventState implements Serializable {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -216176055159247559L;\n+public class EventState {\n \n     /** Event handler. */\n     private final EventHandler handler;\n                     increasing = (gb >= ga);\n \n                     final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        private static final long serialVersionUID = 620905575148456915L;\n                         public double value(final double t) throws FunctionEvaluationException {\n                             try {\n                                 interpolator.setInterpolatedTime(t);\n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n  */\n \n package org.apache.commons.math.ode.nonstiff;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.ode.DerivativeException;\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class AdamsBashforthIntegrator extends MultistepIntegrator implements Serializable {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 67792782787082199L;\n+public class AdamsBashforthIntegrator extends MultistepIntegrator {\n \n     /**\n      * Build an Adams-Bashforth with the given order and step size.\n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import java.io.Serializable;\n import java.util.Arrays;\n \n import org.apache.commons.math.linear.MatrixVisitorException;\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class AdamsMoultonIntegrator extends MultistepIntegrator implements Serializable {\n-\n-    /**\n-     * Serial identification Number\n-     */\n-    private static final long serialVersionUID = 3624292432281962886L;\n+public class AdamsMoultonIntegrator extends MultistepIntegrator {\n \n     /**\n      * Build an Adams-Moulton integrator with the given order and step size.\n--- a/src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import java.io.Serializable;\n \n /**\n  * This class implements the classical fourth order Runge-Kutta\n  * @since 1.2\n  */\n \n-public class ClassicalRungeKuttaIntegrator\n-  extends RungeKuttaIntegrator implements Serializable {\n-\n-  /** Serializable version identifier. */\n-    private static final long serialVersionUID = 3710070023793519840L;\n+public class ClassicalRungeKuttaIntegrator extends RungeKuttaIntegrator {\n \n   /** Time steps Butcher array. */\n   private static final double[] c = {\n--- a/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import java.io.Serializable;\n \n /**\n  * This class implements the 5(4) Dormand-Prince integrator for Ordinary\n  * @since 1.2\n  */\n \n-public class DormandPrince54Integrator\n-  extends EmbeddedRungeKuttaIntegrator implements Serializable {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = -7932553613600031791L;\n+public class DormandPrince54Integrator extends EmbeddedRungeKuttaIntegrator {\n \n   /** Integrator method name. */\n   private static final String METHOD_NAME = \"Dormand-Prince 5(4)\";\n--- a/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import java.io.Serializable;\n \n /**\n  * This class implements the 8(5,3) Dormand-Prince integrator for Ordinary\n  * @since 1.2\n  */\n \n-public class DormandPrince853Integrator\n-  extends EmbeddedRungeKuttaIntegrator implements Serializable {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = -8627142100635188441L;\n+public class DormandPrince853Integrator extends EmbeddedRungeKuttaIntegrator {\n \n   /** Integrator method name. */\n   private static final String METHOD_NAME = \"Dormand-Prince 8 (5, 3)\";\n--- a/src/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import java.io.Serializable;\n \n /**\n  * This class implements a simple Euler integrator for Ordinary\n  * @since 1.2\n  */\n \n-public class EulerIntegrator\n-  extends RungeKuttaIntegrator implements Serializable {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = 1828811360890387657L;\n+public class EulerIntegrator extends RungeKuttaIntegrator {\n \n   /** Time steps Butcher array. */\n   private static final double[] c = {\n--- a/src/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import java.io.Serializable;\n \n /**\n  * This class implements the Gill fourth order Runge-Kutta\n  * @since 1.2\n  */\n \n-public class GillIntegrator\n-  extends RungeKuttaIntegrator implements Serializable {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = 5566682259665027132L;\n+public class GillIntegrator extends RungeKuttaIntegrator {\n \n   /** Time steps Butcher array. */\n   private static final double[] c = {\n--- a/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n  */\n \n package org.apache.commons.math.ode.nonstiff;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n  * @since 1.2\n  */\n \n-public class GraggBulirschStoerIntegrator\n-  extends AdaptiveStepsizeIntegrator implements Serializable {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = 7364884082146325264L;\n+public class GraggBulirschStoerIntegrator extends AdaptiveStepsizeIntegrator {\n \n   /** Integrator method name. */\n   private static final String METHOD_NAME = \"Gragg-Bulirsch-Stoer\";\n--- a/src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import java.io.Serializable;\n \n /**\n  * This class implements the 5(4) Higham and Hall integrator for\n  * @since 1.2\n  */\n \n-public class HighamHall54Integrator\n-  extends EmbeddedRungeKuttaIntegrator implements Serializable {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = 1462328766749870097L;\n+public class HighamHall54Integrator extends EmbeddedRungeKuttaIntegrator {\n \n   /** Integrator method name. */\n   private static final String METHOD_NAME = \"Higham-Hall 5(4)\";\n--- a/src/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import java.io.Serializable;\n \n /**\n  * This class implements a second order Runge-Kutta integrator for\n  * @since 1.2\n  */\n \n-public class MidpointIntegrator\n-  extends RungeKuttaIntegrator implements Serializable {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = -7690774342890000483L;\n+public class MidpointIntegrator extends RungeKuttaIntegrator {\n \n   /** Time steps Butcher array. */\n   private static final double[] c = {\n--- a/src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import java.io.Serializable;\n \n /**\n  * This class implements the 3/8 fourth order Runge-Kutta\n  * @since 1.2\n  */\n \n-public class ThreeEighthesIntegrator\n-  extends RungeKuttaIntegrator implements Serializable {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = -2480984691453028021L;\n+public class ThreeEighthesIntegrator extends RungeKuttaIntegrator {\n \n   /** Time steps Butcher array. */\n   private static final double[] c = {\n--- a/src/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java\n+++ b/src/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java\n \n package org.apache.commons.math.ode.sampling;\n \n-import java.io.Serializable;\n \n /**\n  * This class is a step handler that does nothing.\n  * @since 1.2\n  */\n \n-public class DummyStepHandler\n-  implements StepHandler, Serializable {\n+public class DummyStepHandler implements StepHandler {\n \n   /** Private constructor.\n    * The constructor is private to prevent users from creating\n   /** The only instance. */\n   private static final DummyStepHandler instance = new DummyStepHandler();\n \n-  /** Serializable version identifier */\n-  private static final long serialVersionUID = 2731635121223090252L;\n-\n }\n--- a/src/java/org/apache/commons/math/ode/sampling/StepHandler.java\n+++ b/src/java/org/apache/commons/math/ode/sampling/StepHandler.java\n  */\n \n package org.apache.commons.math.ode.sampling;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n  * @since 1.2\n  */\n \n-public interface StepHandler extends Serializable {\n+public interface StepHandler {\n \n   /** Determines whether this handler needs dense output.\n    * <p>This method allows the integrator to avoid performing extra\n--- a/src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n+++ b/src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n  */\n \n public class StepNormalizer implements StepHandler {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -789699939659144654L;\n \n     /** Fixed time step. */\n     private double h;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n \n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n \n     }\n \n-    @Test\n-    public void serialization()\n-        throws IntegratorException, DerivativeException,\n-               IOException, ClassNotFoundException {\n-\n-        TestProblem6 pb = new TestProblem6();\n-        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n-\n-        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-        ObjectOutputStream    oos = new ObjectOutputStream(bos);\n-        oos.writeObject(new AdamsBashforthIntegrator(5, 0, range, 1.0e-12, 1.0e-12));\n-        assertTrue(bos.size() > 2800);\n-        assertTrue(bos.size() < 3000);\n-\n-        ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n-        ObjectInputStream     ois = new ObjectInputStream(bis);\n-        FirstOrderIntegrator integ  = (AdamsBashforthIntegrator) ois.readObject();\n-        assertEquals(\"Adams-Bashforth\", integ.getName());\n-        TestProblemHandler handler = new TestProblemHandler(pb, integ);\n-        integ.addStepHandler(handler);\n-        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n-                        pb.getFinalTime(), new double[pb.getDimension()]);\n-        assertTrue(handler.getMaximalValueError() < 2.0e-11);\n-\n-    }\n-\n }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n \n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n \n     }\n \n-    @Test\n-    public void serialization()\n-        throws IntegratorException, DerivativeException,\n-               IOException, ClassNotFoundException {\n-\n-        TestProblem6 pb = new TestProblem6();\n-        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n-\n-        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-        ObjectOutputStream    oos = new ObjectOutputStream(bos);\n-        oos.writeObject(new AdamsMoultonIntegrator(5, 0, range, 1.0e-12, 1.0e-12));\n-        assertTrue(bos.size() > 2800);\n-        assertTrue(bos.size() < 3000);\n-\n-        ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());\n-        ObjectInputStream     ois = new ObjectInputStream(bis);\n-        FirstOrderIntegrator integ  = (AdamsMoultonIntegrator) ois.readObject();\n-        assertEquals(\"Adams-Moulton\", integ.getName());\n-        TestProblemHandler handler = new TestProblemHandler(pb, integ);\n-        integ.addStepHandler(handler);\n-        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n-                        pb.getFinalTime(), new double[pb.getDimension()]);\n-        assertTrue(handler.getMaximalValueError() < 8.0e-11);\n-\n-    }\n-\n }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n   }\n \n   private static class KeplerHandler implements StepHandler {\n-    private static final long serialVersionUID = 7510061424396717277L;\n     public KeplerHandler(TestProblem3 pb) {\n       this.pb = pb;\n       reset();\n       final double step = 1.23456;\n       FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n       integ.addStepHandler(new StepHandler() {\n-          private static final long serialVersionUID = 0L;\n           public void handleStep(StepInterpolator interpolator, boolean isLast) {\n               if (! isLast) {\n                   assertEquals(step,\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n \n   private static class DP54SmallLastHandler implements StepHandler {\n \n-    private static final long serialVersionUID = -8168590945325629799L;\n-\n     public DP54SmallLastHandler(double minStep) {\n       lastSeen = false;\n       this.minStep = minStep;\n   }\n \n   private static class KeplerHandler implements StepHandler {\n-    private static final long serialVersionUID = -1645853847806655456L;\n-\n     public KeplerHandler(TestProblem3 pb) {\n       this.pb = pb;\n       reset();\n   }\n \n   private static class VariableHandler implements StepHandler {\n-    private static final long serialVersionUID = -5196650833828379228L;\n     public VariableHandler() {\n       firstTime = true;\n       minStep = 0;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n                                                                       scalAbsoluteTolerance,\n                                                                       scalRelativeTolerance);\n       integ.addStepHandler(new StepHandler() {\n-        private static final long serialVersionUID = -6768136169276197L;\n         public void handleStep(StepInterpolator interpolator, boolean isLast)\n           throws DerivativeException {\n               StepInterpolator cloned = interpolator.copy();\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n   }\n \n   private static class KeplerHandler implements StepHandler {\n-    private static final long serialVersionUID = -1752092987112788459L;\n     public KeplerHandler(TestProblem3 pb) {\n       this.pb = pb;\n       reset();\n   }\n \n   private static class VariableHandler implements StepHandler {\n-    private static final long serialVersionUID = 5542665697103383623L;\n     public VariableHandler() {\n       reset();\n     }\n   }\n \n   private static class InterpolatingStepHandler implements StepHandler {\n-    private static final long serialVersionUID = -5272695044664350727L;\n     public boolean requiresDenseOutput() {\n       return true;\n     }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n                                                                       scalAbsoluteTolerance,\n                                                                       scalRelativeTolerance);\n     integ.addStepHandler(new StepHandler() {\n-        private static final long serialVersionUID = 2209212559670665268L;\n         public void handleStep(StepInterpolator interpolator, boolean isLast)\n         throws DerivativeException {\n             StepInterpolator cloned = interpolator.copy();\n--- a/src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n       final double step = 1.23456;\n       FirstOrderIntegrator integ = new EulerIntegrator(step);\n       integ.addStepHandler(new StepHandler() {\n-        private static final long serialVersionUID = 0L;\n         public void handleStep(StepInterpolator interpolator, boolean isLast) {\n             if (! isLast) {\n                 assertEquals(step,\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n   }\n \n   private static class KeplerStepHandler implements StepHandler {\n-    private static final long serialVersionUID = 1250933165809631538L;\n     public KeplerStepHandler(TestProblem3 pb) {\n       this.pb = pb;\n       reset();\n       final double step = 1.23456;\n       FirstOrderIntegrator integ = new GillIntegrator(step);\n       integ.addStepHandler(new StepHandler() {\n-          private static final long serialVersionUID = 0L;\n           public void handleStep(StepInterpolator interpolator, boolean isLast) {\n               if (! isLast) {\n                   assertEquals(step,\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n   }\n \n   private static class KeplerStepHandler implements StepHandler {\n-    private static final long serialVersionUID = -8231434585284002546L;\n     public KeplerStepHandler(TestProblem3 pb) {\n       this.pb = pb;\n       reset();\n   }\n \n   public static class VariableStepHandler implements StepHandler {\n-    private static final long serialVersionUID = -5955452449048688985L;\n     public VariableStepHandler() {\n       reset();\n     }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n                                                                           scalAbsoluteTolerance,\n                                                                           scalRelativeTolerance);\n     integ.addStepHandler(new StepHandler() {\n-        private static final long serialVersionUID = -5947183291381232297L;\n         public void handleStep(StepInterpolator interpolator, boolean isLast)\n         throws DerivativeException {\n             StepInterpolator cloned = interpolator.copy();\n--- a/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n   }\n \n   private static class KeplerHandler implements StepHandler {\n-    private static final long serialVersionUID = 3200246026175251943L;\n     public KeplerHandler(TestProblem3 pb) {\n       this.pb = pb;\n       nbSteps = 0;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n                                                               scalAbsoluteTolerance,\n                                                               scalRelativeTolerance);\n     integ.addStepHandler(new StepHandler() {\n-        private static final long serialVersionUID = 9111679755950880352L;\n         public void handleStep(StepInterpolator interpolator, boolean isLast)\n         throws DerivativeException {\n             StepInterpolator cloned = interpolator.copy();\n--- a/src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n       final double step = 1.23456;\n       FirstOrderIntegrator integ = new MidpointIntegrator(step);\n       integ.addStepHandler(new StepHandler() {\n-          private static final long serialVersionUID = 0L;\n           public void handleStep(StepInterpolator interpolator, boolean isLast) {\n               if (! isLast) {\n                   assertEquals(step,\n--- a/src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/TestProblemHandler.java\n  */\n class TestProblemHandler\n   implements StepHandler {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = 3589490480549900461L;\n \n   /** Associated problem. */\n   private TestProblemAbstract problem;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n \n   private static class KeplerHandler implements StepHandler {\n \n-    private static final long serialVersionUID = 4400497468419540899L;\n-\n     public KeplerHandler(TestProblem3 pb) {\n       this.pb = pb;\n       maxError = 0;\n       final double step = 1.23456;\n       FirstOrderIntegrator integ = new ThreeEighthesIntegrator(step);\n       integ.addStepHandler(new StepHandler() {\n-          private static final long serialVersionUID = 0L;\n           public void handleStep(StepInterpolator interpolator, boolean isLast) {\n               if (! isLast) {\n                   assertEquals(step,\n           }          \n       });\n       integ.integrate(new FirstOrderDifferentialEquations() {\n-          private static final long serialVersionUID = 0L;\n           public void computeDerivatives(double t, double[] y, double[] dot) {\n               dot[0] = 1.0;\n           }\n--- a/src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n+++ b/src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n                                                    final double threshold)\n         throws DerivativeException, IntegratorException {\n         integrator.addStepHandler(new StepHandler() {\n-\n-            private static final long serialVersionUID = 2462564234755682953L;\n \n             public boolean requiresDenseOutput() {\n                 return true;", "timestamp": 1245523988, "metainfo": ""}