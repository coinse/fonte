{"sha": "2b3dc10f6d00116e626e26d235eed9291657cde9", "log": "Enhanced formatting of the results printed to stdout.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math/PerfTestUtils.java\n+++ b/src/test/java/org/apache/commons/math/PerfTestUtils.java\n                                                      boolean runGC,\n                                                      RunTest ... methods) {\n         // Header format.\n-        final String hFormat = \"%s (calls per timed block: %d, timed blocks: %d)\";\n+        final String hFormat = \"%s (calls per timed block: %d, timed blocks: %d, time unit: ms)\";\n+\n+        // Width of the longest name.\n+        int nameLength = 0;\n+        for (RunTest m : methods) {\n+            int len = m.getName().length();\n+            if (len > nameLength) {\n+                nameLength = len;\n+            }\n+        }\n+        final String nameLengthFormat = \"%\" + nameLength + \"s\";\n+\n+        // Column format.\n+        final String cFormat = nameLengthFormat + \" %14s %14s %10s %10s %15s\";\n         // Result format.\n-        final String format = \"%15s: %e (%e) ms\";\n+        final String format = nameLengthFormat + \" %.8e %.8e %.4e %.4e % .8e\";\n \n         System.out.println(String.format(hFormat,\n                                          title,\n                                          repeatChunk,\n                                          repeatStat));\n+        System.out.println(String.format(cFormat,\n+                                         \"name\",\n+                                         \"time/call\",\n+                                         \"std error\",\n+                                         \"total time\",\n+                                         \"ratio\",\n+                                         \"difference\"));\n         final StatisticalSummary[] time = time(repeatChunk,\n                                                repeatStat,\n                                                runGC,\n                                                methods);\n+        final double refSum = time[0].getSum();\n         for (int i = 0, max = time.length; i < max; i++) {\n             final StatisticalSummary s = time[i];\n+            final double sum = s.getSum();\n             System.out.println(String.format(format,\n                                              methods[i].getName(),\n                                              s.getMean(),\n-                                             s.getStandardDeviation()));\n+                                             s.getStandardDeviation(),\n+                                             sum,\n+                                             sum / refSum,\n+                                             sum - refSum));\n         }\n \n         return time;", "timestamp": 1316015768, "metainfo": ""}