{"sha": "c0f3bdaed8cccc8ca76e8d060e96a657fa0f2476", "log": "Added trigamma, javadoc fixes for digamma.  JIRA: MATH-267.  Patched by Ted Dunning.  ", "commit": "\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n \n     // limits for switching algorithm in digamma\n     /** C limit */\n-    private static final double C_LIMIT = 49;\n-    /** S limit */\n-    private static final double S_LIMIT = 1e-5;\n-\n-    /**\n-     * <p>Computes the <a href=\"http://en.wikipedia.org/wiki/Digamma_function\">digamma function</a>\n-     * using the algorithm defined in <br/>\n+     private static final double C_LIMIT = 49;\n+     /** S limit */\n+     private static final double S_LIMIT = 1e-5;\n+\n+    /**\n+     * <p>Computes the digamma function of x.</p>\n+     * \n+     * <p>This is an independently written implementation of the algorithm described in\n      * Jose Bernardo, Algorithm AS 103: Psi (Digamma) Function, Applied Statistics, 1976.</p>\n      * \n      * <p>Some of the constants have been changed to increase accuracy at the moderate expense\n-     * of run-time performance.  The result should be accurate to within 10^-8 absolute tolerance for\n+     * of run-time.  The result should be accurate to within 10^-8 absolute tolerance for\n      * x >= 10^-5 and within 10^-8 relative tolerance for x > 0.</p>\n      * \n-     * <p> Performance for large negative values of x will be quite expensive (proportional to\n+     * <p>Performance for large negative values of x will be quite expensive (proportional to\n      * |x|).  Accuracy for negative values of x should be about 10^-8 absolute for results\n-     * less than 10^5 and 10^-8 relative for results larger than that.\n-     * \n-     * @param x argument\n-     * @return value of the digamma function\n+     * less than 10^5 and 10^-8 relative for results larger than that.</p>\n+     * \n+     * @param x  the argument\n+     * @return   digamma(x) to within 10-8 relative or absolute error whichever is smaller\n+     * @see <a href=\"http://en.wikipedia.org/wiki/Digamma_function\"> Digamma at wikipedia </a>\n+     * @see <a href=\"http://www.uv.es/~bernardo/1976AppStatist.pdf\"> Bernardo's original article </a>\n      * @since 2.0\n      */\n     public static double digamma(double x) {\n             // use method 4 (accurate to O(1/x^8)\n             double inv = 1 / (x * x);\n             //            1       1        1         1\n-            // log(x) -  --- - ------ - ------- - -------\n+            // log(x) -  --- - ------ + ------- - -------\n             //           2 x   12 x^2   120 x^4   252 x^6\n             return Math.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));\n         }\n \n         return digamma(x + 1) - 1 / x;\n     }\n+\n+    /**\n+     * <p>Computes the trigamma function of x.  This function is derived by taking the derivative of\n+     * the implementation of digamma.</p>\n+     * \n+     * @param x  the argument\n+     * @return   trigamma(x) to within 10-8 relative or absolute error whichever is smaller\n+     * @see <a href=\"http://en.wikipedia.org/wiki/Trigamma_function\"> Trigamma at wikipedia </a>\n+     * @see Gamma#digamma(double)\n+     * @since 2.0\n+     */\n+    public static double trigamma(double x) {\n+        if (x > 0 && x <= S_LIMIT) {\n+            return 1 / (x * x);\n+        }\n+\n+        if (x >= C_LIMIT) {\n+            double inv = 1 / (x * x);\n+            //  1    1      1       1       1\n+            //  - + ---- + ---- - ----- + -----\n+            //  x      2      3       5       7\n+            //      2 x    6 x    30 x    42 x\n+            return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));\n+        }\n+\n+        return trigamma(x + 1) + 1 / (x * x);\n+    }\n }\n--- a/src/test/org/apache/commons/math/special/GammaTest.java\n+++ b/src/test/org/apache/commons/math/special/GammaTest.java\n         }\n     }\n \n+    public void testTrigamma() {\n+        double eps = 1e-8;\n+        // computed using webMathematica.  For example, to compute trigamma($i) = Polygamma(1, $i), use\n+        //\n+        // http://functions.wolfram.com/webMathematica/Evaluated.jsp?name=PolyGamma2&plottype=0&vars={%221%22,%22$i%22}&digits=20\n+        double[] data = {\n+                1e-4, 1.0000000164469368793e8,\n+                1e-3, 1.0000016425331958690e6,\n+                1e-2, 10001.621213528313220,\n+                1e-1, 101.43329915079275882,\n+                1, 1.6449340668482264365,\n+                2, 0.64493406684822643647,\n+                3, 0.39493406684822643647,\n+                4, 0.28382295573711532536,\n+                5, 0.22132295573711532536,\n+                10, 0.10516633568168574612,\n+                20, 0.051270822935203119832,\n+                50, 0.020201333226697125806,\n+                100, 0.010050166663333571395\n+        };\n+        for (int i = data.length - 2; i >= 0; i -= 2) {\n+            assertEquals(String.format(\"trigamma %.0f\", data[i]), data[i + 1], Gamma.trigamma(data[i]), eps);\n+        }\n+    }\n+\n     private void checkRelativeError(String msg, double expected, double actual, double tolerance) {\n         assertEquals(msg, expected, actual, Math.abs(tolerance * actual));\n     }", "timestamp": 1243257607, "metainfo": ""}