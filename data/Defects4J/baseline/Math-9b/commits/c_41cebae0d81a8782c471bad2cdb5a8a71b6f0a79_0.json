{"sha": "41cebae0d81a8782c471bad2cdb5a8a71b6f0a79", "log": "Corrected javadoc, minor improvment to computation.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java\n \n import java.io.Serializable;\n \n-import org\n-    .apache\n-    .commons\n-    .math\n-    .stat\n-    .univariate\n-    .AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.17 $ $Date: 2004/03/04 04:25:09 $\n+ * Computes <a href=\"http://en.wikipedia.org/wiki/Kurtosis\">Kurtosis</a>.\n+ * <p>\n+ * We use the following (unbiased) formula to define kurtosis:\n+ *  <p>\n+ *  kurtosis = { [n(n+1) / (n -1)(n - 2)(n-3)] sum[(x_i - mean)^4] / std^4 } - [3(n-1)^2 / (n-2)(n-3)]\n+ *  <p>\n+ *  where n is the number of values, mean is the {@link Mean} and std is the {@link StandardDeviation}\n+ * \n+ * @version $Revision: 1.18 $ $Date: 2004/03/21 00:22:26 $\n  */\n public class Kurtosis extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     Mean mean = new Mean();\n \n     /**\n-     * Returns the kurtosis for this collection of values. Kurtosis is a\n-     * measure of the \"peakedness\" of a distribution.  This algorithm uses a\n-     * corrected two pass algorithm of the following\n-     * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n-     * corrected two pass formula (14.1.8)</a>, and also referenced in:\n+     * Returns the kurtosis for this collection of values.  \n      * <p>\n-     * \"Algorithms for Computing the Sample Variance: Analysis and\n-     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J.\n-     * 1983, American Statistician, vol. 37, pp. 242?247.\n-     * </p>\n+     * See {@link Kurtosis} for the definition used in the computation.\n+     * \n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length the number of elements to include\n                 // standard deviation\n                 double accum3 = 0.0;\n                 for (int i = begin; i < begin + length; i++) {\n-                    accum3 += Math.pow((values[i] - m) / stdDev, 4.0);\n+                    accum3 += Math.pow((values[i] - m), 4.0);\n                 }\n+                accum3 /= Math.pow(stdDev, 4.0d);\n \n                 // Get N\n                 double n0 = length;", "timestamp": 1079828546, "metainfo": ""}