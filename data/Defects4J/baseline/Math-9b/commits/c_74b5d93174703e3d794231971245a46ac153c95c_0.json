{"sha": "74b5d93174703e3d794231971245a46ac153c95c", "log": "Added more random data tests for HessenbergTransformer.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java\n \n package org.apache.commons.math3.linear;\n \n+import java.util.Random;\n+\n+import org.apache.commons.math3.distribution.NormalDistribution;\n import org.junit.Test;\n import org.junit.Assert;\n \n         checkAEqualPHPt(MatrixUtils.createRealMatrix(testRandom));\n    }\n \n-    private void checkAEqualPHPt(RealMatrix matrix) {\n+    @Test\n+    public void testPOrthogonal() {\n+        checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getP());\n+        checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getP());\n+    }\n+\n+    @Test\n+    public void testPTOrthogonal() {\n+        checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getPT());\n+        checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getPT());\n+    }\n+\n+    @Test\n+    public void testHessenbergForm() {\n+        checkHessenbergForm(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getH());\n+        checkHessenbergForm(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getH());\n+    }\n+\n+    @Test\n+    public void testRandomData() {\n+        for (int run = 0; run < 100; run++) {\n+            Random r = new Random(System.currentTimeMillis());\n+\n+            // matrix size\n+            int size = r.nextInt(20) + 4;\n+\n+            double[][] data = new double[size][size];\n+            for (int i = 0; i < size; i++) {\n+                for (int j = 0; j < size; j++) {\n+                    data[i][j] = r.nextInt(100);\n+                }\n+            }\n+\n+            RealMatrix m = MatrixUtils.createRealMatrix(data);\n+            RealMatrix h = checkAEqualPHPt(m);\n+            checkHessenbergForm(h);\n+        }\n+    }\n+\n+    @Test\n+    public void testRandomDataNormalDistribution() {\n+        for (int run = 0; run < 100; run++) {\n+            Random r = new Random(System.currentTimeMillis());\n+            NormalDistribution dist = new NormalDistribution(0.0, r.nextDouble() * 5);\n+\n+            // matrix size\n+            int size = r.nextInt(20) + 4;\n+\n+            double[][] data = new double[size][size];\n+            for (int i = 0; i < size; i++) {\n+                for (int j = 0; j < size; j++) {\n+                    data[i][j] = dist.sample();\n+                }\n+            }\n+\n+            RealMatrix m = MatrixUtils.createRealMatrix(data);\n+            RealMatrix h = checkAEqualPHPt(m);\n+            checkHessenbergForm(h);\n+        }\n+    }\n+\n+    @Test\n+    public void testMatricesValues5() {\n+        checkMatricesValues(testSquare5,\n+                            new double[][] {\n+                                { 1.0,  0.0,                0.0,                0.0,                0.0               },\n+                                { 0.0, -0.182574185835055,  0.784218758628863,  0.395029040913988, -0.442289115981669 },\n+                                { 0.0, -0.365148371670111, -0.337950625265477, -0.374110794088820, -0.782621974707823 },\n+                                { 0.0, -0.547722557505166,  0.402941130124223, -0.626468266309003,  0.381019628053472 },\n+                                { 0.0, -0.730296743340221, -0.329285224617644,  0.558149336547665,  0.216118545309225 }\n+                            },\n+                            new double[][] {\n+                                {  5.0,              -3.65148371670111,  2.59962019434982, -0.237003414680848, -3.13886458663398  },\n+                                { -5.47722557505166,  6.9,              -2.29164066120599,  0.207283564429169,  0.703858369151728 },\n+                                {  0.0,              -4.21386600008432,  2.30555659846067,  2.74935928725112,   0.857569835914113 },\n+                                {  0.0,               0.0,               2.86406180891882, -1.11582249161595,   0.817995267184158 },\n+                                {  0.0,               0.0,               0.0,               0.683518597386085,  1.91026589315528  }\n+                            });\n+    }\n+\n+    @Test\n+    public void testMatricesValues3() {\n+        checkMatricesValues(testSquare3,\n+                            new double[][] {\n+                                {  1.0,  0.0,               0.0               },\n+                                {  0.0, -0.707106781186547, 0.707106781186547 },\n+                                {  0.0,  0.707106781186547, 0.707106781186548 },\n+                            },\n+                            new double[][] {\n+                                {  2.0,              1.41421356237309,  0.0 },\n+                                {  1.41421356237310, 2.0,              -1.0 },\n+                                {  0.0,              1.0,               2.0 },\n+                            });\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////\n+    // Test helpers\n+    ///////////////////////////////////////////////////////////////////////////\n+    \n+    private RealMatrix checkAEqualPHPt(RealMatrix matrix) {\n         HessenbergTransformer transformer = new HessenbergTransformer(matrix);\n         RealMatrix p  = transformer.getP();\n         RealMatrix pT = transformer.getPT();\n         RealMatrix h  = transformer.getH();\n-        double norm = p.multiply(h).multiply(pT).subtract(matrix).getNorm();\n-        Assert.assertEquals(0, norm, 4.0e-14);\n-    }\n-\n-    @Test\n-    public void testPOrthogonal() {\n-        checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getP());\n-        checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getP());\n-    }\n-\n-    @Test\n-    public void testPTOrthogonal() {\n-        checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getPT());\n-        checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getPT());\n+        \n+        RealMatrix result = p.multiply(h).multiply(pT);\n+        double norm = result.subtract(matrix).getNorm();\n+        Assert.assertEquals(0, norm, 1.0e-10);\n+        \n+        for (int i = 0; i < matrix.getRowDimension(); ++i) {\n+            for (int j = 0; j < matrix.getColumnDimension(); ++j) {\n+                if (i > j + 1) {\n+                    Assert.assertEquals(matrix.getEntry(i, j), result.getEntry(i, j), 1.0e-12);\n+                }\n+            }\n+        }\n+        \n+        return transformer.getH();\n     }\n \n     private void checkOrthogonal(RealMatrix m) {\n         RealMatrix mTm = m.transpose().multiply(m);\n         RealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());\n         Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);\n-    }\n-\n-    @Test\n-    public void testHessenbergForm() {\n-        checkHessenbergForm(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getH());\n-        checkHessenbergForm(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getH());\n     }\n \n     private void checkHessenbergForm(RealMatrix m) {\n             }\n         }\n     }\n-\n-    @Test\n-    public void testMatricesValues5() {\n-        checkMatricesValues(testSquare5,\n-                            new double[][] {\n-                                { 1.0,  0.0,                0.0,                0.0,                0.0               },\n-                                { 0.0, -0.182574185835055,  0.784218758628863,  0.395029040913988, -0.442289115981669 },\n-                                { 0.0, -0.365148371670111, -0.337950625265477, -0.374110794088820, -0.782621974707823 },\n-                                { 0.0, -0.547722557505166,  0.402941130124223, -0.626468266309003,  0.381019628053472 },\n-                                { 0.0, -0.730296743340221, -0.329285224617644,  0.558149336547665,  0.216118545309225 }\n-                            },\n-                            new double[][] {\n-                                {  5.0,              -3.65148371670111,  2.59962019434982, -0.237003414680848, -3.13886458663398  },\n-                                { -5.47722557505166,  6.9,              -2.29164066120599,  0.207283564429169,  0.703858369151728 },\n-                                {  0.0,              -4.21386600008432,  2.30555659846067,  2.74935928725112,   0.857569835914113 },\n-                                {  0.0,               0.0,               2.86406180891882, -1.11582249161595,   0.817995267184158 },\n-                                {  0.0,               0.0,               0.0,               0.683518597386085,  1.91026589315528  }\n-                            });\n-    }\n-\n-    @Test\n-    public void testMatricesValues3() {\n-        checkMatricesValues(testSquare3,\n-                            new double[][] {\n-                                {  1.0,  0.0,               0.0               },\n-                                {  0.0, -0.707106781186547, 0.707106781186547 },\n-                                {  0.0,  0.707106781186547, 0.707106781186548 },\n-                            },\n-                            new double[][] {\n-                                {  2.0,              1.41421356237309,  0.0 },\n-                                {  1.41421356237310, 2.0,              -1.0 },\n-                                {  0.0,              1.0,               2.0 },\n-                            });\n-    }\n-\n+    \n     private void checkMatricesValues(double[][] matrix, double[][] pRef, double[][] hRef) {\n-\n         HessenbergTransformer transformer =\n             new HessenbergTransformer(MatrixUtils.createRealMatrix(matrix));\n ", "timestamp": 1342559228, "metainfo": ""}