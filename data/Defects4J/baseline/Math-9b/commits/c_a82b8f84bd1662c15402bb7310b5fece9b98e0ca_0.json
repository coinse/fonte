{"sha": "a82b8f84bd1662c15402bb7310b5fece9b98e0ca", "log": "MATH-423 The \"@Retry\" annotation allows to select the number of retries of a Junit test method (provided that the test class is itself annotated with \"@RunWith(RetryRunner.class).   ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/Retry.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math;\n+\n+import java.lang.annotation.*;\n+\n+/**\n+ * Annotation that enables test retries.\n+ * @version $Id$\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.METHOD})\n+public @interface Retry {\n+    int value() default 2;\n+}\n--- a/src/test/java/org/apache/commons/math/RetryRunner.java\n+++ b/src/test/java/org/apache/commons/math/RetryRunner.java\n  * @version $Revision$ $Date$\n  */\n public class RetryRunner extends BlockJUnit4ClassRunner {\n-\n-    /** Maximal number of test run attempts. */\n-    private static final int MAX_ATTEMPTS = 3;\n-\n-    /** Simple constructor.\n-     * @param testClass class to test\n-     * @throws InitializationError if default runner cannot be built\n+    /**\n+     * Simple constructor.\n+     *\n+     * @param testClass Class to test.\n+     * @throws InitializationError if default runner cannot be built.\n      */\n     public RetryRunner(final Class<?> testClass)\n         throws InitializationError {\n     }\n \n     @Override\n-    public Statement methodInvoker(FrameworkMethod method, Object test) {\n+    public Statement methodInvoker(final FrameworkMethod method,\n+                                   Object test) {\n         final Statement singleTryStatement = super.methodInvoker(method, test);\n         return new Statement() {\n-\n-            /** Evaluate the statement.\n+            /**\n+             * Evaluate the statement.\n              * We attempt several runs for the test, at most MAX_ATTEMPTS.\n              * if one attempt succeeds, we succeed, if all attempts fail, we\n              * fail with the reason corresponding to the last attempt\n              */\n             public void evaluate() throws Throwable {\n                 Throwable failureReason = null;\n-                for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n-                    try {\n \n-                        // do one test run attempt\n-                        singleTryStatement.evaluate();\n+                final Retry retry = method.getAnnotation(Retry.class);\n+                if (retry == null) {\n+                    // Do a single test run attempt.\n+                    singleTryStatement.evaluate();\n+                } else {\n+                    final int numRetries = retry.value();\n \n-                        // attempt succeeded, stop evaluation here\n-                        return;\n+                    for (int i = 0; i < numRetries; ++i) {\n+                        try {\n+                            // Do a single test run attempt.\n+                            singleTryStatement.evaluate();\n+                            // Attempt succeeded, stop evaluation here.\n+                            return;\n+                        } catch (Throwable t) {\n+                            // Attempt failed, store the reason.\n+                            failureReason = t;\n+                        }\n+                    }\n \n-                    } catch (Throwable t) {\n-                        // attempt failed, store the reason why\n-                        failureReason = t;\n-                    }\n+                    // All attempts failed.\n+                    throw failureReason;\n                 }\n-\n-                // all attempts failed\n-                throw failureReason;\n-\n             }\n         };\n     }\n-\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/RetryRunnerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math;\n+\n+import java.util.Random;\n+\n+import org.apache.commons.math.exception.MathRuntimeException;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Test for the \"Retry\" functionality (retrying Junit test methods).\n+ */\n+@RunWith(RetryRunner.class)\n+public class RetryRunnerTest {\n+    final Random rng = new Random();\n+\n+    /**\n+     * Shows that an always failing test will fail even if it is retried.\n+     */\n+    @Test(expected=MathRuntimeException.class)\n+    @Retry\n+    public void testRetryFailAlways() {\n+        throw new MathRuntimeException();\n+    }\n+\n+    /**\n+     * Shows that a test that sometimes fail might succeed if it is retried.\n+     * In this case the high number of retries makes it quite unlikely that\n+     * the exception will be thrown by all of the calls.\n+     */\n+    @Test\n+    @Retry(100)\n+    public void testRetryFailSometimes() {\n+        if (rng.nextBoolean()) {\n+            throw new MathRuntimeException();\n+        }\n+    }\n+}", "timestamp": 1301394517, "metainfo": ""}