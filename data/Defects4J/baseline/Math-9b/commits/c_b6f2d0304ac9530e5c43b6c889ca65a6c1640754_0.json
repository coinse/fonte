{"sha": "b6f2d0304ac9530e5c43b6c889ca65a6c1640754", "log": "MATH-838 Moved the \"probability(double)\" method to the parent class.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java\n         }\n         return out;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @return zero.\n+     */\n+    public double probability(double x) {\n+        return 0d;\n+    }\n }\n \n--- a/src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java\n         }\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * For this distribution {@code P(X = x)} always evaluates to 0.\n-     *\n-     * @return 0\n-     */\n-    public double probability(double x) {\n-        return 0.0;\n-    }\n-\n     /** {@inheritDoc} */\n     public double density(double x) {\n         recomputeZ();\n--- a/src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java\n         return scale;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * For this distribution {@code P(X = x)} always evaluates to 0.\n-     *\n-     * @return 0\n-     */\n-    public double probability(double x) {\n-        return 0.0;\n-    }\n-\n     /** {@inheritDoc} */\n     public double density(double x) {\n         final double dev = x - median;\n--- a/src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java\n         return gamma.getAlpha() * 2.0;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * For this distribution {@code P(X = x)} always evaluates to 0.\n-     *\n-     * @return zero.\n-     */\n-    public double probability(double x) {\n-        return 0;\n-    }\n-\n     /** {@inheritDoc} */\n     public double density(double x) {\n         return gamma.density(x);\n--- a/src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java\n         return mean;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * For this distribution {@code P(X = x)} always evaluates to 0.\n-     *\n-     * @return 0\n-     */\n-    public double probability(double x) {\n-        return 0.0;\n-    }\n-\n     /** {@inheritDoc} */\n     public double density(double x) {\n         if (x < 0) {\n--- a/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\n     /**\n      * {@inheritDoc}\n      *\n-     * For this distribution {@code P(X = x)} always evaluates to 0.\n-     *\n-     * @return 0\n-     */\n-    public double probability(double x) {\n-        return 0.0;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     *\n      * @since 2.1\n      */\n     public double density(double x) {\n--- a/src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java\n         return scale;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * For this distribution {@code P(X = x)} always evaluates to 0.\n-     *\n-     * @return 0\n-     */\n-    public double probability(double x) {\n-        return 0.0;\n-    }\n-\n     /** {@inheritDoc} */\n     public double density(double x) {\n        /* The present method must return the value of\n--- a/src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java\n     /**\n      * {@inheritDoc}\n      *\n-     * For this distribution {@code P(X = x)} always evaluates to 0.\n-     *\n-     * @return 0\n-     */\n-    public double probability(double x) {\n-        return 0.0;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     *\n      * For scale {@code m}, and shape {@code s} of this distribution, the PDF\n      * is given by\n      * <ul>\n--- a/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java\n         return standardDeviation;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * For this distribution {@code P(X = x)} always evaluates to 0.\n-     *\n-     * @return zero.\n-     */\n-    public double probability(double x) {\n-        return 0;\n-    }\n-\n     /** {@inheritDoc} */\n     public double density(double x) {\n         final double x0 = x - mean;\n--- a/src/main/java/org/apache/commons/math3/distribution/TDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/TDistribution.java\n         return degreesOfFreedom;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * For this distribution {@code P(X = x)} always evaluates to 0.\n-     *\n-     * @return 0\n-     */\n-    public double probability(double x) {\n-        return 0.0;\n-    }\n-\n     /** {@inheritDoc} */\n     public double density(double x) {\n         final double n = degreesOfFreedom;\n--- a/src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java\n     /**\n      * {@inheritDoc}\n      *\n-     * For this distribution {@code P(X = x)} always evaluates to 0.\n-     *\n-     * @return 0\n-     */\n-    public double probability(double x) {\n-        return 0;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     *\n      * For lower limit {@code a}, upper limit {@code b} and mode {@code c}, the\n      * PDF is given by\n      * <ul>\n--- a/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\n         solverAbsoluteAccuracy = inverseCumAccuracy;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * For this distribution {@code P(X = x)} always evaluates to 0.\n-     *\n-     * @return 0\n-     */\n-    public double probability(double x) {\n-        return 0.0;\n-    }\n-\n     /** {@inheritDoc} */\n     public double density(double x) {\n         if (x < lower || x > upper) {\n--- a/src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java\n         return scale;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * For this distribution {@code P(X = x)} always evaluates to 0.\n-     *\n-     * @return 0\n-     */\n-    public double probability(double x) {\n-        return 0.0;\n-    }\n-\n     /** {@inheritDoc} */\n     public double density(double x) {\n         if (x < 0) {", "timestamp": 1344027033, "metainfo": ""}