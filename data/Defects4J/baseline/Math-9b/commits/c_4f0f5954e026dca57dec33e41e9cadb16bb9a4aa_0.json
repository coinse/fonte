{"sha": "4f0f5954e026dca57dec33e41e9cadb16bb9a4aa", "log": "Javadoc fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/CompositeFormat.java\n+++ b/src/main/java/org/apache/commons/math3/util/CompositeFormat.java\n     /**\n      * Create a default number format.  The default number format is based on\n      * {@link NumberFormat#getInstance()} with the only customizing that the\n-     * maximum number of fraction digits is set to 2.\n+     * maximum number of fraction digits is set to 10.\n      * @return the default number format.\n      */\n     public static NumberFormat getDefaultNumberFormat() {\n     /**\n      * Create a default number format.  The default number format is based on\n      * {@link NumberFormat#getInstance(java.util.Locale)} with the only\n-     * customizing that the maximum number of fraction digits is set to 2.\n+     * customizing that the maximum number of fraction digits is set to 10.\n      * @param locale the specific locale used by the format.\n      * @return the default number format specific to the given locale.\n      */\n      * Parses <code>source</code> until a non-whitespace character is found.\n      *\n      * @param source the string to parse\n-     * @param pos input/ouput parsing parameter.  On output, <code>pos</code>\n+     * @param pos input/output parsing parameter.  On output, <code>pos</code>\n      *        holds the index of the next non-whitespace character.\n      */\n     public static void parseAndIgnoreWhitespace(final String source,\n      * Parses <code>source</code> until a non-whitespace character is found.\n      *\n      * @param source the string to parse\n-     * @param pos input/ouput parsing parameter.\n+     * @param pos input/output parsing parameter.\n      * @return the first non-whitespace character.\n      */\n     public static char parseNextCharacter(final String source,\n      *\n      * @param source the string to parse\n      * @param value the special value to parse.\n-     * @param pos input/ouput parsing parameter.\n+     * @param pos input/output parsing parameter.\n      * @return the special number.\n      */\n     private static Number parseNumber(final String source, final double value,\n      *\n      * @param source the string to parse\n      * @param format the number format used to parse normal, numeric values.\n-     * @param pos input/ouput parsing parameter.\n+     * @param pos input/output parsing parameter.\n      * @return the parsed number.\n      */\n     public static Number parseNumber(final String source, final NumberFormat format,\n      * Parse <code>source</code> for an expected fixed string.\n      * @param source the string to parse\n      * @param expected expected string\n-     * @param pos input/ouput parsing parameter.\n+     * @param pos input/output parsing parameter.\n      * @return true if the expected string was there\n      */\n     public static boolean parseFixedstring(final String source,", "timestamp": 1344970253, "metainfo": ""}