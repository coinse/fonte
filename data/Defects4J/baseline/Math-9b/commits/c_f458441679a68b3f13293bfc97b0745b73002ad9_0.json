{"sha": "f458441679a68b3f13293bfc97b0745b73002ad9", "log": "Added row and column matrix accessors. Pr #30897.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n  * Matrix element indexing is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.\n  * \n- * @version $Revision: 1.23 $ $Date: 2004/10/09 21:15:56 $\n+ * @version $Revision: 1.24 $ $Date: 2004/10/09 22:39:22 $\n  */\n public interface RealMatrix {\n \n     * Gets a submatrix. Rows and columns are indicated\n     * counting from 0 to n-1.\n     *\n-    * @param rows Array of row indices.\n-    * @param columns Array of column indices.\n+    * @param selectedRows Array of row indices.\n+    * @param selectedColumns Array of column indices.\n     * @return The subMatrix containing the data in the\n     *         specified rows and columns\n     * @exception MatrixIndexException if row or column selections are not valid\n     */\n    RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)\n    throws MatrixIndexException;\n-             \n+   \n+   /**\n+    * Returns the entries in row number <code>row</code>\n+    * as a row matrix.  Row indices start at 0.\n+    *\n+    * @param row the row to be fetched\n+    * @return row matrix\n+    * @throws MatrixIndexException if the specified row index is invalid\n+    */\n+   RealMatrix getRowMatrix(int row) throws MatrixIndexException;\n+   \n+   /**\n+    * Returns the entries in column number <code>column</code>\n+    * as a column matrix.  Column indices start at 0.\n+    *\n+    * @param column the column to be fetched\n+    * @return column matrix\n+    * @throws MatrixIndexException if the specified column index is invalid\n+    */\n+   RealMatrix getColumnMatrix(int column) throws MatrixIndexException;\n+    \n     /**\n      * Returns the entries in row number <code>row</code> as an array.\n      * <p>\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.</li></ul>\n  *\n- * @version $Revision: 1.29 $ $Date: 2004/10/09 21:15:56 $\n+ * @version $Revision: 1.30 $ $Date: 2004/10/09 22:39:22 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n \n      * Gets a submatrix. Rows and columns are indicated\n      * counting from 0 to n-1.\n      *\n-     * @param rows Array of row indices must be non-empty\n-     * @param columns Array of column indices must be non-empty\n+     * @param selectedRows Array of row indices must be non-empty\n+     * @param selectedColumns Array of column indices must be non-empty\n      * @return The subMatrix containing the data in the\n      *     specified rows and columns\n      * @exception MatrixIndexException  if supplied row or column index arrays\n         }\n         return subMatrix;\n     } \n+    \n+    /**\n+     * Returns the entries in row number <code>row</code>\n+     * as a row matrix.  Row indices start at 0.\n+     *\n+     * @param row the row to be fetched\n+     * @return row matrix\n+     * @throws MatrixIndexException if the specified row index is invalid\n+     */\n+    public RealMatrix getRowMatrix(int row) throws MatrixIndexException {\n+        if ( !isValidCoordinate( row, 0)) {\n+            throw new MatrixIndexException(\"illegal row argument\");\n+        }\n+        int ncols = this.getColumnDimension();\n+        double[][] out = new double[1][ncols]; \n+        System.arraycopy(data[row], 0, out[0], 0, ncols);\n+        return new RealMatrixImpl(out);\n+    }\n+    \n+    /**\n+     * Returns the entries in column number <code>column</code>\n+     * as a column matrix.  Column indices start at 0.\n+     *\n+     * @param column the column to be fetched\n+     * @return column matrix\n+     * @throws MatrixIndexException if the specified column index is invalid\n+     */\n+    public RealMatrix getColumnMatrix(int column) throws MatrixIndexException {\n+        if ( !isValidCoordinate( 0, column)) {\n+            throw new MatrixIndexException(\"illegal column argument\");\n+        }\n+        int nRows = this.getRowDimension();\n+        double[][] out = new double[nRows][1]; \n+        for (int row = 0; row < nRows; row++) {\n+            out[row][0] = data[row][column];\n+        }\n+        return new RealMatrixImpl(out);\n+    }\n \n      /**\n      * Returns the entries in row number <code>row</code> as an array.\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n /**\n  * Test cases for the {@link RealMatrixImpl} class.\n  *\n- * @version $Revision: 1.16 $ $Date: 2004/10/09 21:15:56 $\n+ * @version $Revision: 1.17 $ $Date: 2004/10/09 22:39:22 $\n  */\n \n public final class RealMatrixImplTest extends TestCase {\n     protected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};\n     protected double[][] subRows23Cols00 = {{2} , {4}};\n     protected double[][] subRows00Cols33 = {{4}};\n+    // row matrices\n+    protected double[][] subRow0 = {{1,2,3,4}};\n+    protected double[][] subRow3 = {{4,5,6,7}};\n+    // column matrices\n+    protected double[][] subColumn1 = {{2}, {2.5}, {4}, {5}};\n+    protected double[][] subColumn3 = {{4}, {4.5}, {8}, {7}};\n     \n     // tolerances\n     protected double entryTolerance = 10E-16;\n         }\n     }\n     \n+    public void testGetRowMatrix() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        RealMatrix mRow0 = new RealMatrixImpl(subRow0);\n+        RealMatrix mRow3 = new RealMatrixImpl(subRow3);\n+        assertClose(\"Row0\", mRow0, \n+                m.getRowMatrix(0), normTolerance );\n+        assertClose(\"Row3\", mRow3, \n+                m.getRowMatrix(3), normTolerance );\n+        try {\n+            m.getRowMatrix(-1);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getRowMatrix(4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testGetColumnMatrix() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        RealMatrix mColumn1 = new RealMatrixImpl(subColumn1);\n+        RealMatrix mColumn3 = new RealMatrixImpl(subColumn3);\n+        assertClose(\"Column1\", mColumn1, \n+                m.getColumnMatrix(1), normTolerance );\n+        assertClose(\"Column3\", mColumn3, \n+                m.getColumnMatrix(3), normTolerance );\n+        try {\n+            m.getColumnMatrix(-1);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getColumnMatrix(4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+    }\n+    \n     //--------------- -----------------Protected methods\n         \n     /** verifies that two matrices are close (1-norm) */              ", "timestamp": 1097361562, "metainfo": ""}