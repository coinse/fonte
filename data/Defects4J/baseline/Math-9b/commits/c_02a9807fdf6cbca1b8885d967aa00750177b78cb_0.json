{"sha": "02a9807fdf6cbca1b8885d967aa00750177b78cb", "log": "checked serialization of BigReal and added a tests suite for the class  ", "commit": "\n--- a/src/java/org/apache/commons/math/util/BigReal.java\n+++ b/src/java/org/apache/commons/math/util/BigReal.java\n  * @version $Revision$ $Date$\n  */\n public class BigReal implements FieldElement<BigReal>, Comparable<BigReal>, Serializable {\n-    // TODO: Add Serializable documentation\n-    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 7887631840434052850L;\n     /** {@inheritDoc} */\n     public int compareTo(BigReal a) {\n         return d.compareTo(a.d);\n+    }\n+\n+    /** Get the double value corresponding to the instance.\n+     * @return double value corresponding to the instance\n+     */\n+    public double doubleValue() {\n+        return d.doubleValue();\n+    }\n+\n+    /** Get the BigDecimal value corresponding to the instance.\n+     * @return BigDecimal value corresponding to the instance\n+     */\n+    public BigDecimal bigDecimalValue() {\n+        return d;\n     }\n \n     /** {@inheritDoc} */\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/BigRealTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.util;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.math.MathContext;\n+\n+import org.apache.commons.math.TestUtils;\n+import org.junit.Test;\n+\n+public class BigRealTest {\n+\n+    @Test\n+    public void testConstructor() {\n+        assertEquals(1.625, new BigReal(new BigDecimal(\"1.625\")).doubleValue(), 1.0e-15);\n+        assertEquals(-5.0, new BigReal(new BigInteger(\"-5\")).doubleValue(), 1.0e-15);\n+        assertEquals(-5.0, new BigReal(new BigInteger(\"-5\"), MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        assertEquals(0.125, new BigReal(new BigInteger(\"125\"), 3).doubleValue(), 1.0e-15);\n+        assertEquals(0.125, new BigReal(new BigInteger(\"125\"), 3, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        assertEquals(1.625, new BigReal(new char[] { '1', '.', '6', '2', '5' }).doubleValue(), 1.0e-15);\n+        assertEquals(1.625, new BigReal(new char[] { 'A', 'A', '1', '.', '6', '2', '5', '9' }, 2, 5).doubleValue(), 1.0e-15);\n+        assertEquals(1.625, new BigReal(new char[] { 'A', 'A', '1', '.', '6', '2', '5', '9' }, 2, 5, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        assertEquals(1.625, new BigReal(new char[] { '1', '.', '6', '2', '5' }, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        assertEquals(1.625, new BigReal(1.625).doubleValue(), 1.0e-15);\n+        assertEquals(1.625, new BigReal(1.625, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        assertEquals(-5.0, new BigReal(-5).doubleValue(), 1.0e-15);\n+        assertEquals(-5.0, new BigReal(-5, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        assertEquals(-5.0, new BigReal(-5l).doubleValue(), 1.0e-15);\n+        assertEquals(-5.0, new BigReal(-5l, MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+        assertEquals(1.625, new BigReal(\"1.625\").doubleValue(), 1.0e-15);\n+        assertEquals(1.625, new BigReal(\"1.625\", MathContext.DECIMAL64).doubleValue(), 1.0e-15);\n+    }\n+\n+    @Test\n+    public void testCompareTo() {\n+        BigReal first = new BigReal(1.0 / 2.0);\n+        BigReal second = new BigReal(1.0 / 3.0);\n+        BigReal third = new BigReal(1.0 / 2.0);\n+\n+        assertEquals(0, first.compareTo(first));\n+        assertEquals(0, first.compareTo(third));\n+        assertEquals(1, first.compareTo(second));\n+        assertEquals(-1, second.compareTo(first));\n+\n+    }\n+\n+    public void testAdd() {\n+        BigReal a = new BigReal(\"1.2345678\");\n+        BigReal b = new BigReal(\"8.7654321\");\n+        assertEquals(9.9999999, a.add(b).doubleValue(), 1.0e-15);\n+    }\n+\n+    public void testSubtract() {\n+        BigReal a = new BigReal(\"1.2345678\");\n+        BigReal b = new BigReal(\"8.7654321\");\n+        assertEquals( -7.5308643, a.subtract(b).doubleValue(), 1.0e-15);\n+    }\n+\n+    public void testDivide() {\n+        BigReal a = new BigReal(\"1.0000000000\");\n+        BigReal b = new BigReal(\"0.0009765625\");\n+        assertEquals(1024.0, a.divide(b).doubleValue(), 1.0e-15);\n+    }\n+\n+    public void testMultiply() {\n+        BigReal a = new BigReal(\"1024.0\");\n+        BigReal b = new BigReal(\"0.0009765625\");\n+        assertEquals(1.0, a.multiply(b).doubleValue(), 1.0e-15);\n+    }\n+\n+    @Test\n+    public void testDoubleValue() {\n+        assertEquals(0.5, new BigReal(0.5).doubleValue(), 1.0e-15);\n+    }\n+\n+    @Test\n+    public void testBigDecimalValue() {\n+        BigDecimal pi = new BigDecimal(\"3.1415926535897932384626433832795028841971693993751\");\n+        assertEquals(pi, new BigReal(pi).bigDecimalValue());\n+        assertEquals(new BigDecimal(0.5), new BigReal(1.0 / 2.0).bigDecimalValue());\n+    }\n+\n+    @Test\n+    public void testEqualsAndHashCode() {\n+        BigReal zero = new BigReal(0.0);\n+        BigReal nullReal = null;\n+        assertTrue(zero.equals(zero));\n+        assertFalse(zero.equals(nullReal));\n+        assertFalse(zero.equals(Double.valueOf(0)));\n+        BigReal zero2 = new BigReal(0.0);\n+        assertTrue(zero.equals(zero2));\n+        assertEquals(zero.hashCode(), zero2.hashCode());\n+        BigReal one = new BigReal(1.0);\n+        assertFalse((one.equals(zero) || zero.equals(one)));\n+        assertTrue(one.equals(BigReal.ONE));\n+    }\n+\n+    public void testSerial() {\n+        BigReal[] Reals = {\n+            new BigReal(3.0), BigReal.ONE, BigReal.ZERO,\n+            new BigReal(17), new BigReal(Math.PI),\n+            new BigReal(-2.5)\n+        };\n+        for (BigReal Real : Reals) {\n+            assertEquals(Real, TestUtils.serializeAndRecover(Real));\n+        }\n+    }\n+\n+}", "timestamp": 1248117823, "metainfo": ""}