{"sha": "921b72335944cbbdaed6fdaac89882466c36e230", "log": "Added digamma function. JIRA: MATH-267 Contributed by Ted Dunning   ", "commit": "\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;\n \n+    /** <a href=\"http://en.wikipedia.org/wiki/Euler-Mascheroni_constant\">Euler-Mascheroni constant</a> */\n+    public static final double GAMMA = 0.577215664901532860606512090082;\n+\n     /** Maximum allowed numerical error. */\n     private static final double DEFAULT_EPSILON = 10e-15;\n \n     /** Avoid repeated computation of log of 2 PI in logGamma */\n     private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);\n \n-    \n+\n     /**\n      * Default constructor.  Prohibit instantiation.\n      */\n \n         return ret;\n     }\n+\n+\n+    // limits for switching algorithm in digamma\n+    /** C limit */\n+    private static final double C_LIMIT = 49;\n+    /** S limit */\n+    private static final double S_LIMIT = 1e-5;\n+\n+    /**\n+     * <p>Computes the <a href=\"http://en.wikipedia.org/wiki/Digamma_function\">digamma function</a>\n+     * using the algorithm defined in <br/>\n+     * Jose Bernardo, Algorithm AS 103: Psi (Digamma) Function, Applied Statistics, 1976.</p>\n+     * \n+     * <p>Some of the constants have been changed to increase accuracy at the moderate expense\n+     * of run-time performance.  The result should be accurate to within 10^-8 absolute tolerance for\n+     * x >= 10^-5 and within 10^-8 relative tolerance for x > 0.</p>\n+     * \n+     * <p> Performance for large negative values of x will be quite expensive (proportional to\n+     * |x|).  Accuracy for negative values of x should be about 10^-8 absolute for results\n+     * less than 10^5 and 10^-8 relative for results larger than that.\n+     * @param x argument\n+     * @return value of the digamma function\n+     */\n+    public static double digamma(double x) {\n+        if (x > 0 && x <= S_LIMIT) {\n+            // use method 5 from Bernardo AS103\n+            // accurate to O(x)\n+            return -GAMMA - 1 / x;\n+        }\n+\n+        if (x >= C_LIMIT) {\n+            // use method 4 (accurate to O(1/x^8)\n+            double inv = 1 / (x * x);\n+            //            1       1        1         1\n+            // log(x) -  --- - ------ - ------- - -------\n+            //           2 x   12 x^2   120 x^4   252 x^6\n+            return Math.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));\n+        }\n+\n+        return digamma(x + 1) - 1 / x;\n+    }\n }\n--- a/src/test/org/apache/commons/math/special/GammaTest.java\n+++ b/src/test/org/apache/commons/math/special/GammaTest.java\n  * @version $Revision$ $Date$\n  */\n public class GammaTest extends TestCase {\n-    /**\n-     * Constructor for BetaTest.\n-     * @param name\n-     */\n+     \n     public GammaTest(String name) {\n         super(name);\n     }\n     public void testLogGammaPositive() {\n         testLogGamma(0.6931471805599457, 3.0);\n     }\n+\n+    public void testDigammaLargeArgs() {\n+        double eps = 1e-8;\n+        assertEquals(4.6001618527380874002, Gamma.digamma(100), eps);\n+        assertEquals(3.9019896734278921970, Gamma.digamma(50), eps);\n+        assertEquals(2.9705239922421490509, Gamma.digamma(20), eps);\n+        assertEquals(2.9958363947076465821, Gamma.digamma(20.5), eps);\n+        assertEquals(2.2622143570941481605, Gamma.digamma(10.1), eps);\n+        assertEquals(2.1168588189004379233, Gamma.digamma(8.8), eps);\n+        assertEquals(1.8727843350984671394, Gamma.digamma(7), eps);\n+        assertEquals(0.42278433509846713939, Gamma.digamma(2), eps);\n+        assertEquals(-100.56088545786867450, Gamma.digamma(0.01), eps);\n+        assertEquals(-4.0390398965921882955, Gamma.digamma(-0.8), eps);\n+        assertEquals(4.2003210041401844726, Gamma.digamma(-6.3), eps);\n+    }\n+\n+    public void testDigammaSmallArgs() {\n+        // values for negative powers of 10 from 1 to 30 as computed by webMathematica with 20 digits\n+        // see functions.wolfram.com\n+        double[] expected = {-10.423754940411076795, -100.56088545786867450, -1000.5755719318103005,\n+                -10000.577051183514335, -100000.57719921568107, -1.0000005772140199687e6, -1.0000000577215500408e7,\n+                -1.0000000057721564845e8, -1.0000000005772156633e9, -1.0000000000577215665e10, -1.0000000000057721566e11,\n+                -1.0000000000005772157e12, -1.0000000000000577216e13, -1.0000000000000057722e14, -1.0000000000000005772e15, -1e+16,\n+                -1e+17, -1e+18, -1e+19, -1e+20, -1e+21, -1e+22, -1e+23, -1e+24, -1e+25, -1e+26,\n+                -1e+27, -1e+28, -1e+29, -1e+30};\n+        for (double n = 1; n < 30; n++) {\n+            checkRelativeError(String.format(\"Test %.0f: \", n), expected[(int) (n - 1)], Gamma.digamma(Math.pow(10.0, -n)), 1e-8);\n+        }\n+    }\n+\n+    private void checkRelativeError(String msg, double expected, double actual, double tolerance) {\n+        assertEquals(msg, expected, actual, Math.abs(tolerance * actual));\n+    }\n }", "timestamp": 1243144999, "metainfo": ""}