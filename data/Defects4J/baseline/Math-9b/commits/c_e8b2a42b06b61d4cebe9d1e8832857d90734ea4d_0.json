{"sha": "e8b2a42b06b61d4cebe9d1e8832857d90734ea4d", "log": "In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/SymmLQ.java\n+++ b/src/main/java/org/apache/commons/math3/linear/SymmLQ.java\n      * </p>\n      */\n     private static class State {\n+        /** The cubic root of {@link #MACH_PREC}. */\n+        static final double CBRT_MACH_PREC;\n+\n+        /** The machine precision. */\n+        static final double MACH_PREC;\n \n         /** Reference to the linear operator. */\n         private final RealLinearOperator a;\n \n         /** The value of zeta[1]^2 + ... + zeta[k-1]^2. */\n         private double ynorm2;\n+\n+        /** The value of {@code b == 0} (exact floating-point equality). */\n+        private boolean bIsNull;\n+\n+        static {\n+            MACH_PREC = Math.ulp(1.);\n+            CBRT_MACH_PREC = Math.cbrt(MACH_PREC);\n+        }\n \n         /**\n          * Creates and inits to k = 1 a new instance of this class.\n             throws NonSelfAdjointOperatorException {\n             final double s = y.dotProduct(y);\n             final double t = x.dotProduct(z);\n-            final double epsa = (s + SymmLQ.MACH_PREC) * SymmLQ.CBRT_MACH_PREC;\n+            final double epsa = (s + MACH_PREC) * CBRT_MACH_PREC;\n             if (FastMath.abs(s - t) > epsa) {\n                 final NonSelfAdjointOperatorException e;\n                 e = new NonSelfAdjointOperatorException();\n             }\n             if (this.beta1 == 0.) {\n                 /* If b = 0 exactly, stop with x = 0. */\n+                this.bIsNull = true;\n                 return;\n             }\n+            this.bIsNull = false;\n             this.beta1 = FastMath.sqrt(this.beta1);\n             /* At this point\n              *   r1 = b,\n         public boolean hasConverged() {\n             return hasConverged;\n         }\n+\n+        /**\n+         * Returns {@code true} if the right-hand side vector is zero exactly.\n+         *\n+         * @return the boolean value of {@code b == 0}\n+         */\n+        public boolean bEqualsNullVector() {\n+            return bIsNull;\n+        }\n+\n+        /**\n+         * Returns {@code true} if {@code beta} is essentially zero. This method\n+         * is used to check for early stop of the iterations.\n+         *\n+         * @return {@code true} if {@code beta < }{@link #MACH_PREC}\n+         */\n+        public boolean betaEqualsZero() {\n+            return beta < MACH_PREC;\n+        }\n     }\n \n     /**\n         }\n     }\n \n-    /** The cubic root of {@link #MACH_PREC}. */\n-    static final double CBRT_MACH_PREC;\n-\n-    /** The machine precision. */\n-    static final double MACH_PREC;\n-\n     /** Key for the exception context. */\n     private static final String OPERATOR = \"operator\";\n \n         super(manager);\n         this.delta = delta;\n         this.check = check;\n-    }\n-\n-    static {\n-        MACH_PREC = Math.ulp(1.);\n-        CBRT_MACH_PREC = Math.cbrt(MACH_PREC);\n     }\n \n     /**\n \n         final State state = new State(a, minv, b, x, goodb, shift, delta, check);\n         final IterativeLinearSolverEvent event = new SymmLQEvent(this, state);\n-        if (state.beta1 == 0.) {\n+        if (state.bEqualsNullVector()) {\n             /* If b = 0 exactly, stop with x = 0. */\n             manager.fireTerminationEvent(event);\n             return x;\n         }\n         /* Cause termination if beta is essentially zero. */\n         final boolean earlyStop;\n-        earlyStop = (state.beta < MACH_PREC) || (state.hasConverged());\n+        earlyStop = state.betaEqualsZero() || state.hasConverged();\n         manager.fireInitializationEvent(event);\n         if (!earlyStop) {\n             do {", "timestamp": 1332307605, "metainfo": ""}