{"sha": "ae3292ab788996698b05207c72eb112c62fd36ea", "log": "Made use of system identity hashcode explicit in seed computation.  JIRA: MATH-701.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n      * Returns the RandomGenerator used to generate non-secure random data.\n      * <p>\n      * Creates and initializes a default generator if null. Uses a {@link Well19937c}\n-     * generator with {@code System.currentTimeMillis() + hashCode()} as the default seed.\n+     * generator with {@code System.currentTimeMillis() + System.identityHashCode(this))} as the default seed.\n      * </p>\n      *\n      * @return the Random used to generate random data\n      */\n     private RandomGenerator getRan() {\n         if (rand == null) {\n-            rand = new Well19937c(System.currentTimeMillis() + hashCode());\n+            rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));\n         }\n         return rand;\n     }\n      * Returns the SecureRandom used to generate secure random data.\n      * <p>\n      * Creates and initializes if null.  Uses \n-     * {@code System.currentTimeMillis() + hashCode()} as the default seed.\n+     * {@code System.currentTimeMillis() + System.identityHashCode(this)} as the default seed.\n      * </p>\n      *\n      * @return the SecureRandom used to generate secure random data\n     private SecureRandom getSecRan() {\n         if (secRand == null) {\n             secRand = new SecureRandom();\n-            secRand.setSeed(System.currentTimeMillis() + hashCode());\n+            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n         }\n         return secRand;\n     }", "timestamp": 1320433727, "metainfo": ""}