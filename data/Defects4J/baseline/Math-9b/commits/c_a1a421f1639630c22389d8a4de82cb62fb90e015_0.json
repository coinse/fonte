{"sha": "a1a421f1639630c22389d8a4de82cb62fb90e015", "log": "Code cleanup.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java\n         return a + b;\n     }\n \n-    /** Compute log(1 + x).\n-     * @param x a number\n-     * @return log(1 + x)\n+    /**\n+     * Computes log(1 + x).\n+     *\n+     * @param x Number.\n+     * @return {@code log(1 + x)}.\n      */\n     public static double log1p(final double x) {\n-\n         if (x == -1) {\n-            return x/0.0;   // -Infinity\n-        }\n-\n-        if (x > 0 && 1/x == 0) { // x = Infinity\n-            return x;\n-        }\n-\n-        if (x>1e-6 || x<-1e-6) {\n-            double xpa = 1.0 + x;\n-            double xpb = -(xpa - 1.0 - x);\n-\n-            double hiPrec[] = new double[2];\n-\n+            return Double.NEGATIVE_INFINITY;\n+        }\n+\n+        if (x == Double.POSITIVE_INFINITY) {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+\n+        if (x > 1e-6 ||\n+            x < -1e-6) {\n+            final double xpa = 1 + x;\n+            final double xpb = -(xpa - 1 - x);\n+\n+            final double[] hiPrec = new double[2];\n             final double lores = log(xpa, hiPrec);\n-            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN\n+            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN\n                 return lores;\n             }\n \n-            /* Do a taylor series expansion around xpa */\n-            /* f(x+y) = f(x) + f'(x)*y + f''(x)/2 y^2 */\n-            double fx1 = xpb/xpa;\n-\n-            double epsilon = 0.5 * fx1 + 1.0;\n-            epsilon = epsilon * fx1;\n-\n-            return epsilon + hiPrec[1] + hiPrec[0];\n-        }\n-\n-        /* Value is small |x| < 1e6, do a Taylor series centered on 1.0 */\n-        double y = x * F_1_3 - F_1_2;\n-        y = y * x + 1.0;\n-        y = y * x;\n-\n-        return y;\n+            // Do a taylor series expansion around xpa:\n+            //   f(x+y) = f(x) + f'(x) y + f''(x)/2 y^2\n+            final double fx1 = xpb / xpa;\n+            final double epsilon = 0.5 * fx1 + 1;\n+            return epsilon * fx1 + hiPrec[1] + hiPrec[0];\n+        } else {\n+            // Value is small |x| < 1e6, do a Taylor series centered on 1.\n+            final double y = (x * F_1_3 - F_1_2) * x + 1;\n+            return y * x;\n+        }\n     }\n \n     /** Compute the base 10 logarithm.", "timestamp": 1344806578, "metainfo": ""}