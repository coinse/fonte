{"sha": "9c9ac3945e1825a9766ff38a3e9d2ca4f87c7234", "log": "Changed o.a.c.m3.linear.JacobiPreconditioner according to MATH-771.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java\n+++ b/src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java\n /**\n  * This class implements the standard Jacobi (diagonal) preconditioner. For a\n  * matrix A<sub>ij</sub>, this preconditioner is\n- * M = diag(A<sub>11</sub>, A<sub>22</sub>, &hellip;).\n- * {@link #create(RealLinearOperator)} returns the <em>inverse</em> of this\n- * preconditioner,\n- * M<sup>-1</sup> = diag(1 / A<sub>11</sub>, 1 / A<sub>22</sub>, &hellip;)\n+ * M = diag(1 / A<sub>11</sub>, 1 / A<sub>22</sub>, &hellip;).\n  *\n  * @version $Id$\n  * @since 3.0\n      * some time). With matrices, direct entry access is carried out.\n      *\n      * @param a the linear operator for which the preconditioner should be built\n-     * @return the inverse of the preconditioner made of the inverse of the\n-     * diagonal coefficients of the specified linear operator\n+     * @return the diagonal preconditioner made of the inverse of the diagonal\n+     * coefficients of the specified linear operator\n      * @throws NonSquareOperatorException if {@code a} is not square\n      */\n     public static JacobiPreconditioner create(final RealLinearOperator a)\n     /** {@inheritDoc} */\n     @Override\n     public RealVector operate(final RealVector x) {\n-        // Dimension check is carried out by ebeMultiply\n+        // Dimension check is carried out by ebeDivide\n         return x.ebeDivide(diag);\n     }\n \n      * precisely, this method returns\n      * P = diag(1 / &radic;A<sub>11</sub>, 1 / &radic;A<sub>22</sub>, &hellip;).\n      *\n-     * @return the square root of {@code this} operator\n+     * @return the square root of {@code this} preconditioner\n      */\n     public RealLinearOperator sqrt(){\n         final RealVector sqrtDiag = diag.map(new Sqrt());", "timestamp": 1332907559, "metainfo": ""}