{"sha": "8cc888a8f66dc7132b97745339b64a9f840bf057", "log": "Restore Serializable to PolynomialFunction  ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n  */\n package org.apache.commons.math.analysis.polynomials;\n \n+import java.io.Serializable;\n+import java.util.Arrays;\n+\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class PolynomialFunction implements DifferentiableUnivariateRealFunction {\n-\n+public class PolynomialFunction implements DifferentiableUnivariateRealFunction, Serializable {\n+\n+    /**\n+     * Serializtion identifier\n+     */\n+    private static final long serialVersionUID = -7726511984200295583L;\n+    \n     /**\n      * The coefficients of the polynomial, ordered by degree -- i.e.,  \n      * coefficients[0] is the constant term and coefficients[n] is the \n \n      }\n \n+    /** {@inheritDoc} */\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + Arrays.hashCode(coefficients);\n+        return result;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (!(obj instanceof PolynomialFunction))\n+            return false;\n+        PolynomialFunction other = (PolynomialFunction) obj;\n+        if (!Arrays.equals(coefficients, other.coefficients))\n+            return false;\n+        return true;\n+    }\n+\n }\n--- a/src/test/org/apache/commons/math/analysis/SinFunction.java\n+++ b/src/test/org/apache/commons/math/analysis/SinFunction.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.analysis;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.FunctionEvaluationException;\n \n--- a/src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java\n+++ b/src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java\n \n // commons-math\n import org.apache.commons.math.MathException;\n-\n+import org.apache.commons.math.TestUtils;\n // junit\n import junit.framework.TestCase;\n \n \n     }\n \n+    public void testSerial() {\n+        PolynomialFunction p2 = new PolynomialFunction(new double[] { 3.0, 2.0, 1.0 });\n+        assertEquals(p2, TestUtils.serializeAndRecover(p2));\n+    }\n+    \n     public void checkPolynomial(PolynomialFunction p, String reference) {\n         assertEquals(reference, p.toString());\n     }", "timestamp": 1245546742, "metainfo": ""}