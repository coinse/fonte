{"sha": "1e75292c0bd314860a543a1d7a7154e056ed107c", "log": "Changed default seeding for MersenneTwister, WELL generators to add system identity hash code.  JIRA: MATH-701.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/AbstractWell.java\n+++ b/src/main/java/org/apache/commons/math/random/AbstractWell.java\n     protected final int[] i3;\n \n     /** Creates a new random number generator.\n-     * <p>The instance is initialized using the current time as the\n-     * seed.</p>\n+     * <p>The instance is initialized using the current time plus the\n+     * system identity hash code of this instance as the seed.</p>\n      * @param k number of bits in the pool (not necessarily a multiple of 32)\n      * @param m1 first parameter of the algorithm\n      * @param m2 second parameter of the algorithm\n      * @param m3 third parameter of the algorithm\n      */\n     protected AbstractWell(final int k, final int m1, final int m2, final int m3) {\n-        this(k, m1, m2, m3, System.currentTimeMillis());\n+        this(k, m1, m2, m3, null);\n     }\n \n     /** Creates a new random number generator using a single int seed.\n     /** Reinitialize the generator as if just built with the given int array seed.\n      * <p>The state of the generator is exactly the same as a new\n      * generator built with the same seed.</p>\n-     * @param seed the initial seed (32 bits integers array), if null\n-     * the seed of the generator will be related to the current time\n+     * @param seed the initial seed (32 bits integers array). If null\n+     * the seed of the generator will be the system time plus the system identity\n+     * hash code of the instance.\n      */\n     @Override\n     public void setSeed(final int[] seed) {\n \n         if (seed == null) {\n-            setSeed(System.currentTimeMillis());\n+            setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n             return;\n         }\n \n--- a/src/main/java/org/apache/commons/math/random/MersenneTwister.java\n+++ b/src/main/java/org/apache/commons/math/random/MersenneTwister.java\n     private int   mti;\n \n     /** Creates a new random number generator.\n-     * <p>The instance is initialized using the current time as the\n-     * seed.</p>\n+     * <p>The instance is initialized using the current time plus the\n+     * system identity hash code of this instance as the seed.</p>\n      */\n     public MersenneTwister() {\n         mt = new int[N];\n-        setSeed(System.currentTimeMillis());\n+        setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n     }\n \n     /** Creates a new random number generator using a single int seed.\n      * <p>The state of the generator is exactly the same as a new\n      * generator built with the same seed.</p>\n      * @param seed the initial seed (32 bits integers array), if null\n-     * the seed of the generator will be related to the current time\n+     * the seed of the generator will be the current system time plus the\n+     * system identity hash code of this instance\n      */\n     @Override\n     public void setSeed(int[] seed) {\n \n         if (seed == null) {\n-            setSeed(System.currentTimeMillis());\n+            setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n             return;\n         }\n ", "timestamp": 1320475692, "metainfo": ""}