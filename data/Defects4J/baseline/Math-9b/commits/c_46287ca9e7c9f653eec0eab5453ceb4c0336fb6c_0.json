{"sha": "46287ca9e7c9f653eec0eab5453ceb4c0336fb6c", "log": "removed deprecated functions that have been moved to the Complex class itself  ", "commit": "\n--- a/src/java/org/apache/commons/math/complex/ComplexUtils.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexUtils.java\n \n package org.apache.commons.math.complex;\n \n-import org.apache.commons.math.util.MathUtils;\n-\n /**\n  * Static implementations of common \n- * {@link org.apache.commons.math.complex.Complex}-valued functions.  Included\n- * are trigonometric, exponential, log, power and square root functions.\n- *<p>\n- * Reference:\n- * <ul>\n- * <li><a href=\"http://myweb.lmu.edu/dmsmith/ZMLIB.pdf\">\n- * Multiple Precision Complex Arithmetic and Functions</a></li>\n- * </ul>\n- * See individual method javadocs for the computational formulas used.\n- * In general, NaN values in either real or imaginary parts of input arguments\n- * result in {@link Complex#NaN} returned.  Otherwise, infinite or NaN values\n- * are returned as they arise in computing the real functions specified in the\n- * computational formulas.  Null arguments result in NullPointerExceptions.\n+ * {@link org.apache.commons.math.complex.Complex} utilities functions.\n  *\n  * @version $Revision$ $Date$\n  */\n      */\n     private ComplexUtils() {\n         super();\n-    }\n-    \n-    /**\n-     * Compute the \n-     * <a href=\"http://mathworld.wolfram.com/InverseCosine.html\" TARGET=\"_top\">\n-     * inverse cosine</a> for the given complex argument.\n-     * <p>\n-     * Implements the formula: <pre>\n-     * <code> acos(z) = -i (log(z + i (sqrt(1 - z<sup>2</sup>))))</code></pre>\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code> or infinite.\n-     * \n-     * @param z the value whose inverse cosine is to be returned\n-     * @return the inverse cosine of <code>z</code>\n-     * @throws NullPointerException if <code>z</code> is null\n-     * @deprecated use Complex.acos()\n-     */\n-    public static Complex acos(Complex z) {\n-        return z.acos();\n-    }\n-    \n-    /**\n-     * Compute the \n-     * <a href=\"http://mathworld.wolfram.com/InverseSine.html\" TARGET=\"_top\">\n-     * inverse sine</a> for the given complex argument.\n-     * <p>\n-     * Implements the formula: <pre>\n-     * <code> asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz)) </code></pre>\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code> or infinite.\n-     * \n-     * @param z the value whose inverse sine is to be returned.\n-     * @return the inverse sine of <code>z</code>.\n-     * @throws NullPointerException if <code>z</code> is null\n-     * @deprecated use Complex.asin()\n-     */\n-    public static Complex asin(Complex z) {\n-        return z.asin();\n-    }\n-    \n-    /**\n-     * Compute the \n-     * <a href=\"http://mathworld.wolfram.com/InverseTangent.html\" TARGET=\"_top\">\n-     * inverse tangent</a> for the given complex argument.\n-     * <p>\n-     * Implements the formula: <pre>\n-     * <code> atan(z) = (i/2) log((i + z)/(i - z)) </code></pre>\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code> or infinite. \n-     * \n-     * @param z the value whose inverse tangent is to be returned\n-     * @return the inverse tangent of <code>z</code>\n-     * @throws NullPointerException if <code>z</code> is null\n-     * @deprecated use Complex.atan()\n-     */\n-    public static Complex atan(Complex z) {\n-        return z.atan();\n-    }\n-    \n-    /**\n-     * Compute the \n-     * <a href=\"http://mathworld.wolfram.com/Cosine.html\" TARGET=\"_top\">\n-     * cosine</a>\n-     * for the given complex argument.\n-     * <p>\n-     * Implements the formula: <pre>\n-     * <code> cos(a + bi) = cos(a)cosh(b) - sin(a)sinh(b)i</code></pre>\n-     * where the (real) functions on the right-hand side are\n-     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos}, \n-     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code>.\n-     * <p>\n-     * Infinite values in real or imaginary parts of the input may result in\n-     * infinite or NaN values returned in parts of the result.<pre>\n-     * Examples: \n-     * <code>\n-     * cos(1 &plusmn; INFINITY i) = 1 &#x2213; INFINITY i\n-     * cos(&plusmn;INFINITY + i) = NaN + NaN i\n-     * cos(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>\n-     * \n-     * @param z the value whose cosine is to be returned\n-     * @return the cosine of <code>z</code>\n-     * @throws NullPointerException if <code>z</code> is null\n-     * @deprecated use Complex.cos()\n-     */\n-    public static Complex cos(Complex z) {\n-        return z.cos();\n-    }\n-    \n-    /**\n-     * Compute the \n-     * <a href=\"http://mathworld.wolfram.com/HyperbolicCosine.html\" TARGET=\"_top\">\n-     * hyperbolic cosine</a> for the given complex argument.\n-     * <p>\n-     * Implements the formula: <pre>\n-     * <code> cosh(a + bi) = cosh(a)cos(b) + sinh(a)sin(b)i</code></pre>\n-     * where the (real) functions on the right-hand side are\n-     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos}, \n-     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code>.\n-     * <p>\n-     * Infinite values in real or imaginary parts of the input may result in\n-     * infinite or NaN values returned in parts of the result.<pre>\n-     * Examples: \n-     * <code>\n-     * cosh(1 &plusmn; INFINITY i) = NaN + NaN i\n-     * cosh(&plusmn;INFINITY + i) = INFINITY &plusmn; INFINITY i\n-     * cosh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>\n-     * <p>\n-     * Throws <code>NullPointerException</code> if z is null.\n-     * \n-     * @param z the value whose hyperbolic cosine is to be returned.\n-     * @return the hyperbolic cosine of <code>z</code>.\n-     * @deprecated use Complex.cosh()\n-     */\n-    public static Complex cosh(Complex z) {\n-        return z.cosh();\n-    }\n-    \n-    /**\n-     * Compute the\n-     * <a href=\"http://mathworld.wolfram.com/ExponentialFunction.html\" TARGET=\"_top\">\n-     * exponential function</a> for the given complex argument.\n-     * <p>\n-     * Implements the formula: <pre>\n-     * <code> exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i</code></pre>\n-     * where the (real) functions on the right-hand side are\n-     * {@link java.lang.Math#exp}, {@link java.lang.Math#cos}, and\n-     * {@link java.lang.Math#sin}.\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code>.\n-     * <p>\n-     * Infinite values in real or imaginary parts of the input may result in\n-     * infinite or NaN values returned in parts of the result.<pre>\n-     * Examples: \n-     * <code>\n-     * exp(1 &plusmn; INFINITY i) = NaN + NaN i\n-     * exp(INFINITY + i) = INFINITY + INFINITY i\n-     * exp(-INFINITY + i) = 0 + 0i\n-     * exp(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>\n-     * <p>\n-     * Throws <code>NullPointerException</code> if z is null.\n-     * \n-     * @param z the value\n-     * @return <i>e</i><sup><code>z</code></sup>\n-     * @deprecated use Complex.exp()\n-     */\n-    public static Complex exp(Complex z) {\n-        return z.exp();\n-    }\n-    \n-    /**\n-     * Compute the \n-     * <a href=\"http://mathworld.wolfram.com/NaturalLogarithm.html\" TARGET=\"_top\">\n-     * natural logarithm</a> for the given complex argument.\n-     * <p>\n-     * Implements the formula: <pre>\n-     * <code> log(a + bi) = ln(|a + bi|) + arg(a + bi)i</code></pre>\n-     * where ln on the right hand side is {@link java.lang.Math#log},\n-     * <code>|a + bi|</code> is the modulus, {@link Complex#abs},  and\n-     * <code>arg(a + bi) = {@link java.lang.Math#atan2}(b, a)</code>\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code>.\n-     * <p>\n-     * Infinite (or critical) values in real or imaginary parts of the input may\n-     * result in infinite or NaN values returned in parts of the result.<pre>\n-     * Examples: \n-     * <code>\n-     * log(1 &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/2)i\n-     * log(INFINITY + i) = INFINITY + 0i\n-     * log(-INFINITY + i) = INFINITY + &pi;i\n-     * log(INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/4)i\n-     * log(-INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (3&pi;/4)i\n-     * log(0 + 0i) = -INFINITY + 0i\n-     * </code></pre>\n-     * Throws <code>NullPointerException</code> if z is null.\n-     * \n-     * @param z the value.\n-     * @return ln <code>z</code>.\n-     * @deprecated use Complex.log()\n-     */\n-    public static Complex log(Complex z) {\n-        return z.log();\n     }\n     \n     /**\n         return new Complex(r * Math.cos(theta), r * Math.sin(theta));\n     }\n     \n-    /**\n-     * Returns of value of <code>y</code> raised to the power of <code>x</code>.\n-     * <p>\n-     * Implements the formula: <pre>\n-     * <code> y<sup>x</sup> = exp(x&middot;log(y))</code></pre> \n-     * where <code>exp</code> and <code>log</code> are {@link #exp} and\n-     * {@link #log}, respectively.\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code> or infinite, or if <code>y</code>\n-     * equals {@link Complex#ZERO}.\n-     * \n-     * @param y the base.\n-     * @param x the exponent.\n-     * @return <code>y</code><sup><code>x</code></sup>\n-     * @throws NullPointerException if either x or y is null\n-     * @deprecated use Complex.pow(x)\n-     */\n-    public static Complex pow(Complex y, Complex x) {\n-        return y.pow(x);\n-    }\n-    \n-    /**\n-     * Compute the \n-     * <a href=\"http://mathworld.wolfram.com/Sine.html\" TARGET=\"_top\">\n-     * sine</a>\n-     * for the given complex argument.\n-     * <p>\n-      * Implements the formula: <pre>\n-     * <code> sin(a + bi) = sin(a)cosh(b) - cos(a)sinh(b)i</code></pre>\n-     * where the (real) functions on the right-hand side are\n-     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos}, \n-     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code>.\n-     * <p>\n-     * Infinite values in real or imaginary parts of the input may result in\n-     * infinite or NaN values returned in parts of the result.<pre>\n-     * Examples: \n-     * <code>\n-     * sin(1 &plusmn; INFINITY i) = 1 &plusmn; INFINITY i\n-     * sin(&plusmn;INFINITY + i) = NaN + NaN i\n-     * sin(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>\n-     * \n-     * Throws <code>NullPointerException</code> if z is null. \n-     * \n-     * @param z the value whose sine is to be returned.\n-     * @return the sine of <code>z</code>.\n-     * @deprecated use Complex.sin()\n-     */\n-    public static Complex sin(Complex z) {\n-        return z.sin();\n-    }\n-    \n-    /**\n-     * Compute the \n-     * <a href=\"http://mathworld.wolfram.com/HyperbolicSine.html\" TARGET=\"_top\">\n-     * hyperbolic sine</a> for the given complex argument.\n-     * <p>\n-     * Implements the formula: <pre>\n-     * <code> sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i</code></pre>\n-     * where the (real) functions on the right-hand side are\n-     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos}, \n-     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code>.\n-     * <p>\n-     * Infinite values in real or imaginary parts of the input may result in\n-     * infinite or NaN values returned in parts of the result.<pre>\n-     * Examples: \n-     * <code>\n-     * sinh(1 &plusmn; INFINITY i) = NaN + NaN i\n-     * sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i\n-     * sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre\n-     * \n-     * @param z the value whose hyperbolic sine is to be returned\n-     * @return the hyperbolic sine of <code>z</code>\n-     * @throws NullPointerException if <code>z</code> is null\n-     * @deprecated use Complex.sinh()\n-     */\n-    public static Complex sinh(Complex z) {\n-        return z.sinh();\n-    }\n-    \n-    /**\n-     * Compute the \n-     * <a href=\"http://mathworld.wolfram.com/SquareRoot.html\" TARGET=\"_top\">\n-     * square root</a> for the given complex argument.\n-     * <p>\n-     * Implements the following algorithm to compute <code>sqrt(a + bi)</code>: \n-     * <ol><li>Let <code>t = sqrt((|a| + |a + bi|) / 2)</code></li>\n-     * <li><pre>if <code> a &#8805; 0</code> return <code>t + (b/2t)i</code>\n-     *  else return <code>|b|/2t + sign(b)t i </code></pre></li>\n-     * </ol>\n-     * where <ul>\n-     * <li><code>|a| = {@link Math#abs}(a)</code></li>\n-     * <li><code>|a + bi| = {@link Complex#abs}(a + bi) </code></li>\n-     * <li><code>sign(b) =  {@link MathUtils#indicator}(b) </code>\n-     * </ul>\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code>.\n-     * <p>\n-     * Infinite values in real or imaginary parts of the input may result in\n-     * infinite or NaN values returned in parts of the result.<pre>\n-     * Examples: \n-     * <code>\n-     * sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i\n-     * sqrt(INFINITY + i) = INFINITY + 0i\n-     * sqrt(-INFINITY + i) = 0 + INFINITY i\n-     * sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i\n-     * sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i\n-     * </code></pre>\n-     * \n-     * @param z the value whose square root is to be returned\n-     * @return the square root of <code>z</code>\n-     * @throws NullPointerException if <code>z</code> is null\n-     * @deprecated use Complex.sqrt()\n-     */\n-    public static Complex sqrt(Complex z) {\n-        return z.sqrt();\n-    }\n-    \n-    /**\n-     * Compute the \n-     * <a href=\"http://mathworld.wolfram.com/SquareRoot.html\" TARGET=\"_top\">\n-     * square root</a> of 1 - <code>z</code><sup>2</sup> for the given complex\n-     * argument.\n-     * <p>\n-     * Computes the result directly as \n-     * <code>sqrt(Complex.ONE.subtract(z.multiply(z)))</code>.\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code>.\n-     * <p>\n-     * Infinite values in real or imaginary parts of the input may result in\n-     * infinite or NaN values returned in parts of the result. \n-     * \n-     * @param z the value\n-     * @return the square root of 1 - <code>z</code><sup>2</sup>\n-     * @throws NullPointerException if <code>z</code> is null\n-     * @deprecated use Complex.sqrt1z()\n-     */\n-    public static Complex sqrt1z(Complex z) {\n-        return z.sqrt1z();\n-    }\n-    \n-    /**\n-     * Compute the \n-     * <a href=\"http://mathworld.wolfram.com/Tangent.html\" TARGET=\"_top\">\n-     * tangent</a> for the given complex argument.\n-     * <p>\n-     * Implements the formula: <pre>\n-     * <code>tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i</code></pre>\n-     * where the (real) functions on the right-hand side are\n-     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos}, \n-     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code>.\n-     * <p>\n-     * Infinite (or critical) values in real or imaginary parts of the input may\n-     * result in infinite or NaN values returned in parts of the result.<pre>\n-     * Examples: \n-     * <code>\n-     * tan(1 &plusmn; INFINITY i) = 0 + NaN i\n-     * tan(&plusmn;INFINITY + i) = NaN + NaN i\n-     * tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n-     * tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i</code></pre>\n-     * \n-     * @param z the value whose tangent is to be returned\n-     * @return the tangent of <code>z</code>\n-     * @throws NullPointerException if <code>z</code> is null\n-     * @deprecated use Complex.tan()\n-     */\n-    public static Complex tan(Complex z) {\n-        return z.tan();\n-    }\n-    \n-    /**\n-     * Compute the\n-     * <a href=\"http://mathworld.wolfram.com/HyperbolicTangent.html\" TARGET=\"_top\">\n-     * hyperbolic tangent</a> for the given complex argument.\n-    * <p>\n-     * Implements the formula: <pre>\n-     * <code>tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i</code></pre>\n-     * where the (real) functions on the right-hand side are\n-     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos}, \n-     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n-     * <p>\n-     * Returns {@link Complex#NaN} if either real or imaginary part of the \n-     * input argument is <code>NaN</code>.\n-     * <p>\n-     * Infinite values in real or imaginary parts of the input may result in\n-     * infinite or NaN values returned in parts of the result.<pre>\n-     * Examples: \n-     * <code>\n-     * tanh(1 &plusmn; INFINITY i) = NaN + NaN i\n-     * tanh(&plusmn;INFINITY + i) = NaN + 0 i\n-     * tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n-     * tanh(0 + (&pi;/2)i) = NaN + INFINITY i</code></pre>\n-     *\n-     * @param z the value whose hyperbolic tangent is to be returned\n-     * @return the hyperbolic tangent of <code>z</code>\n-     * @throws NullPointerException if <code>z</code> is null\n-     * @deprecated use Complex.tanh()\n-     */\n-    public static Complex tanh(Complex z) {\n-        return z.tanh();\n-    }\n }", "timestamp": 1209041837, "metainfo": ""}