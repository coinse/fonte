{"sha": "ef7a59e739b91907fe70543504b21812ee759bfc", "log": "1. Gamma.logGamma was expecting epsilon and maxIterations but these parameters were not being referenced in that function.  These parameters has been removed.  2. Also, the Lanczos coefficients are now a private static member variable of the Gamma class.   ", "commit": "\n--- a/src/java/org/apache/commons/math/special/Beta.java\n+++ b/src/java/org/apache/commons/math/special/Beta.java\n         if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {\n             ret = Double.NaN;\n         } else {\n-            ret = Gamma.logGamma(a, epsilon, maxIterations) + Gamma.logGamma(b, epsilon, maxIterations)\n-                - Gamma.logGamma(a + b, epsilon, maxIterations);\n+            ret = Gamma.logGamma(a) + Gamma.logGamma(b)\n+                - Gamma.logGamma(a + b);\n         }\n \n         return ret;\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n public class Gamma {\n     /** Maximum allowed numerical error. */\n     private static final double DEFAULT_EPSILON = 10e-9;\n+\n+    /** Lanczos coefficients */\n+    private static double[] lanczos =\n+    {\n+        0.99999999999999709182,\n+        57.156235665862923517,\n+        -59.597960355475491248,\n+        14.136097974741747174,\n+        -0.49191381609762019978,\n+        .33994649984811888699e-4,\n+        .46523628927048575665e-4,\n+        -.98374475304879564677e-4,\n+        .15808870322491248884e-3,\n+        -.21026444172410488319e-3,\n+        .21743961811521264320e-3,\n+        -.16431810653676389022e-3,\n+        .84418223983852743293e-4,\n+        -.26190838401581408670e-4,\n+        .36899182659531622704e-5,\n+    };\n+\n     \n     /**\n      * Default constructor.  Prohibit instantiation.\n      * \n      * @param a ???\n      * @param x ???\n+     * @param epsilon When the absolute value of the nth item in the\n+     *                series is less than epsilon the approximation ceases\n+     *                to calculate further elements in the series.\n+     * @param maxIterations Maximum number of \"iterations\" to complete. \n      * @return the regularized gamma function P(a, x)\n      */\n-    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    public static double regularizedGammaP(double a, \n+                                           double x, \n+                                           double epsilon, \n+                                           int maxIterations) {\n         double ret;\n \n         if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n                 throw new ConvergenceException(\n                     \"maximum number of iterations reached\");\n             } else {\n-                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a, epsilon, maxIterations)) * sum;\n+                ret = Math.exp(-x + \n+                               (a * Math.log(x)) - \n+                               logGamma(a)) \n+                    * sum;\n             }\n         }\n \n      * @param x ???\n      * @return log(&#915;(x))\n      */\n-    public static double logGamma(double x, double epsilon, int maxIterations) {\n+    public static double logGamma(double x) {\n         double ret;\n \n         if (Double.isNaN(x) || (x <= 0.0)) {\n         } else {\n             double g = 607.0 / 128.0;\n \n-            // Lanczos coefficients\n-            double[] c =\n-                {\n-                    0.99999999999999709182,\n-                    57.156235665862923517,\n-                    -59.597960355475491248,\n-                    14.136097974741747174,\n-                    -0.49191381609762019978,\n-                    .33994649984811888699e-4,\n-                    .46523628927048575665e-4,\n-                    -.98374475304879564677e-4,\n-                    .15808870322491248884e-3,\n-                    -.21026444172410488319e-3,\n-                    .21743961811521264320e-3,\n-                    -.16431810653676389022e-3,\n-                    .84418223983852743293e-4,\n-                    -.26190838401581408670e-4,\n-                    .36899182659531622704e-5,\n-                    };\n-\n             double sum = 0.0;\n-            for (int i = 1; i < c.length; ++i) {\n-                sum = sum + (c[i] / (x + i));\n+            for (int i = 1; i < lanczos.length; ++i) {\n+                sum = sum + (lanczos[i] / (x + i));\n             }\n-            sum = sum + c[0];\n+            sum = sum + lanczos[0];\n \n             double tmp = x + g + .5;\n             ret = ((x + .5) * Math.log(tmp)) - tmp\n--- a/src/test/org/apache/commons/math/special/GammaTest.java\n+++ b/src/test/org/apache/commons/math/special/GammaTest.java\n     }\n \n     private void testLogGamma(double expected, double x) {\n-        double actual = Gamma.logGamma(x, 10e-5, Integer.MAX_VALUE);\n+        double actual = Gamma.logGamma(x);\n         TestUtils.assertEquals(expected, actual, 10e-5);\n     }\n ", "timestamp": 1055966547, "metainfo": ""}