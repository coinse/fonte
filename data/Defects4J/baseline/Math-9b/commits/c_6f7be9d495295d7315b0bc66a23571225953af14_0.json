{"sha": "6f7be9d495295d7315b0bc66a23571225953af14", "log": "Improved javadoc and added infinite/NaN argument tests for reduce.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n      }\n \n     /**\n-     * Reduce to the primary interval {@code [0 period)}.\n+     * <p>Reduce {@code |a - offset|} to the primary interval \n+     * {@code [0, |period|)}.</p>\n+     * \n+     * <p>Specifically, the value returned is <br/>\n+     * {@code a - |period| * floor((a - offset) / |period|) - offset}.</p>\n+     * \n+     * <p>If any of the parameters are {@code NaN} or infinite, the result is\n+     * {@code NaN}.</p>\n      *\n      * @param a Value to reduce.\n      * @param period Period.\n      * @param offset Value that will be mapped to {@code 0}.\n-     * @return the value, within the interval {@code [0 period)},\n+     * @return the value, within the interval {@code [0 |period|)},\n      * that corresponds to {@code a}.\n      */\n     public static double reduce(double a,\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n         Assert.assertEquals(expected,\n                             MathUtils.reduce(orig, -period, offset),\n                             1e-6);\n+        \n+        Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig, Double.NaN, offset)));\n+        Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.NaN, period, offset)));\n+        Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig, period, Double.NaN)));\n+        Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig, period,\n+                Double.POSITIVE_INFINITY)));\n+        Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,\n+                period, offset)));\n+        Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig,\n+                Double.POSITIVE_INFINITY, offset)));   \n+        Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig,\n+                Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY)));\n+        Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,\n+                period, Double.POSITIVE_INFINITY)));\n+        Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,\n+                Double.POSITIVE_INFINITY, offset))); \n+        Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,\n+                Double.POSITIVE_INFINITY,  Double.POSITIVE_INFINITY)));\n     }\n \n     @Test", "timestamp": 1305399086, "metainfo": ""}