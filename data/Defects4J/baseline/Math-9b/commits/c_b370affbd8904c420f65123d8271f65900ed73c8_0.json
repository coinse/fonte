{"sha": "b370affbd8904c420f65123d8271f65900ed73c8", "log": "Replaced obsolete exceptions.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/ZeroException.java\n+++ b/src/main/java/org/apache/commons/math/exception/ZeroException.java\n      * Construct the exception with a specific context.\n      *\n      * @param specific Specific context pattern.\n+     * @param arguments Arguments.\n      */\n-    public ZeroException(Localizable specific) {\n-        super(specific, 0);\n+    public ZeroException(Localizable specific, Object ... arguments) {\n+        super(specific, 0, arguments);\n     }\n }\n--- a/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java\n+++ b/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n     /**\n      * {@inheritDoc}\n      *\n-     * @throws IllegalArgumentException if <code>original</code> is not a\n+     * @throws MathIllegalArgumentException if <code>original</code> is not a\n      * {@link RandomKey} instance\n      */\n     public Chromosome mutate(Chromosome original) {\n         if (!(original instanceof RandomKey<?>)) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n+            throw new MathIllegalArgumentException(\n                     LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS,\n                     original.getClass().getSimpleName());\n         }\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n-import org.apache.commons.math.exception.MathInternalError;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.ZeroException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.StatisticalSummary;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n             da.computeStats();\n             fillBinStats(in);\n         } catch (IOException e) {\n-            throw new MathRuntimeException(e);\n+            throw new MathIllegalStateException(e, LocalizedFormats.SIMPLE_MESSAGE, e.getLocalizedMessage());\n         }\n         loaded = true;\n \n             DataAdapter da = new StreamDataAdapter(in);\n             da.computeStats();\n             if (sampleStats.getN() == 0) {\n-                throw MathRuntimeException.createEOFException(LocalizedFormats.URL_CONTAINS_NO_DATA,\n-                                                              url);\n+                throw new ZeroException(LocalizedFormats.URL_CONTAINS_NO_DATA, url);\n             }\n             in = new BufferedReader(new InputStreamReader(url.openStream()));\n             fillBinStats(in);\n                 double[] inputArray = (double[]) in;\n                 return new ArrayDataAdapter(inputArray);\n             } else {\n-                throw MathRuntimeException.createIllegalArgumentException(\n+                throw new MathIllegalArgumentException(\n                       LocalizedFormats.INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE,\n                       in.getClass().getName(),\n                       BufferedReader.class.getName(), double[].class.getName());\n      * Generates a random value from this distribution.\n      *\n      * @return the random value.\n-     * @throws IllegalStateException if the distribution has not been loaded\n+     * @throws MathIllegalStateException if the distribution has not been loaded\n      */\n     public double getNextValue() throws IllegalStateException {\n \n         if (!loaded) {\n-            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.DISTRIBUTION_NOT_LOADED);\n+            throw new MathIllegalStateException(LocalizedFormats.DISTRIBUTION_NOT_LOADED);\n         }\n \n         // Start with a uniformly distributed random number in (0,1)\n                }\n            }\n         }\n-        throw new MathRuntimeException(LocalizedFormats.NO_BIN_SELECTED);\n+        throw new MathIllegalStateException(LocalizedFormats.NO_BIN_SELECTED);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/main/java/org/apache/commons/math/random/ValueServer.java\n import java.net.MalformedURLException;\n import java.net.URL;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n             case EXPONENTIAL_MODE: return getNextExponential();\n             case GAUSSIAN_MODE: return getNextGaussian();\n             case CONSTANT_MODE: return mu;\n-            default: throw MathRuntimeException.createIllegalStateException(\n+            default: throw new MathIllegalStateException(\n                     LocalizedFormats.UNKNOWN_MODE,\n                     mode,\n                     \"DIGEST_MODE\",   DIGEST_MODE,   \"REPLAY_MODE\",      REPLAY_MODE,\n     private double getNextDigest() {\n         if ((empiricalDistribution == null) ||\n             (empiricalDistribution.getBinStats().size() == 0)) {\n-            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.DIGEST_NOT_INITIALIZED);\n+            throw new MathIllegalStateException(LocalizedFormats.DIGEST_NOT_INITIALIZED);\n         }\n         return empiricalDistribution.getNextValue();\n     }\n             closeReplayFile();\n             resetReplayFile();\n             if ((str = filePointer.readLine()) == null) {\n-                throw MathRuntimeException.createEOFException(LocalizedFormats.URL_CONTAINS_NO_DATA,\n-                                                              valuesFileURL);\n+                throw new MathIllegalStateException(LocalizedFormats.URL_CONTAINS_NO_DATA,\n+                                                    valuesFileURL);\n             }\n         }\n         return Double.valueOf(str).doubleValue();", "timestamp": 1317737642, "metainfo": ""}