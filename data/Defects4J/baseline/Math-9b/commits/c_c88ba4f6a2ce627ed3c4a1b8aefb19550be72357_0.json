{"sha": "c88ba4f6a2ce627ed3c4a1b8aefb19550be72357", "log": "Unnecessary casts  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java\n                 final Plane    oPlane = (Plane) original;\n                 final Plane    tPlane = (Plane) transformed;\n                 final Vector3D p00    = oPlane.getOrigin();\n-                final Vector3D p10    = (Vector3D) oPlane.toSpace(new Vector2D(1.0, 0.0));\n-                final Vector3D p01    = (Vector3D) oPlane.toSpace(new Vector2D(0.0, 1.0));\n-                final Vector2D  tP00   = (Vector2D) tPlane.toSubSpace(apply(p00));\n-                final Vector2D  tP10   = (Vector2D) tPlane.toSubSpace(apply(p10));\n-                final Vector2D  tP01   = (Vector2D) tPlane.toSubSpace(apply(p01));\n+                final Vector3D p10    = oPlane.toSpace(new Vector2D(1.0, 0.0));\n+                final Vector3D p01    = oPlane.toSpace(new Vector2D(0.0, 1.0));\n+                final Vector2D  tP00   = tPlane.toSubSpace(apply(p00));\n+                final Vector2D  tP10   = tPlane.toSubSpace(apply(p10));\n+                final Vector2D  tP01   = tPlane.toSubSpace(apply(p01));\n                 final AffineTransform at =\n                     new AffineTransform(tP10.getX() - tP00.getX(), tP10.getY() - tP00.getY(),\n                                         tP01.getX() - tP00.getX(), tP01.getY() - tP00.getY(),\n \n                 final Plane   oPlane = (Plane) original;\n                 final Plane   tPlane = (Plane) transformed;\n-                final Vector2D shift  = (Vector2D) tPlane.toSubSpace(apply(oPlane.getOrigin()));\n+                final Vector2D shift  = tPlane.toSubSpace(apply(oPlane.getOrigin()));\n                 final AffineTransform at =\n                     AffineTransform.getTranslateInstance(shift.getX(), shift.getY());\n \n--- a/src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java\n+++ b/src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java\n         Vector3D p2  = new Vector3D (3.4, -5.8, 1.2);\n         Plane    pA  = new Plane(p1, p2, new Vector3D (-2.0, 4.3, 0.7));\n         Plane    pB  = new Plane(p1, new Vector3D (11.4, -3.8, 5.1), p2);\n-        Line     l   = (Line) pA.intersection(pB);\n+        Line     l   = pA.intersection(pB);\n         Assert.assertTrue(l.contains(p1));\n         Assert.assertTrue(l.contains(p2));\n         Assert.assertNull(pA.intersection(pA));\n--- a/src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java\n+++ b/src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java\n                          1.0, c,\n                          1.0, r.applyTo(barycenter.subtract(c)));\n         Assert.assertEquals(0.0,\n-                            newB.subtract((Vector3D) tree.getBarycenter()).getNorm(),\n+                            newB.subtract(tree.getBarycenter()).getNorm(),\n                             1.0e-10);\n \n         final Vector3D[] expectedV = new Vector3D[] {\n                     ((PolygonsSet) facet.getRemainingRegion()).getVertices();\n                 Assert.assertEquals(1, vertices.length);\n                 for (int i = 0; i < vertices[0].length; ++i) {\n-                    Vector3D v = (Vector3D) plane.toSpace(vertices[0][i]);\n+                    Vector3D v = plane.toSpace(vertices[0][i]);\n                     double d = Double.POSITIVE_INFINITY;\n                     for (int k = 0; k < expectedV.length; ++k) {\n                         d = FastMath.min(d, v.subtract(expectedV[k]).getNorm());\n--- a/src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java\n+++ b/src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java\n     public void testAbscissa() {\n         Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2));\n         Assert.assertEquals(0.0,\n-                            ((Vector1D) l.toSubSpace(new Vector2D(-3,  4))).getX(),\n+                            (l.toSubSpace(new Vector2D(-3,  4))).getX(),\n                             1.0e-10);\n         Assert.assertEquals(0.0,\n-                            ((Vector1D) l.toSubSpace(new Vector2D( 3, -4))).getX(),\n+                            (l.toSubSpace(new Vector2D( 3, -4))).getX(),\n                             1.0e-10);\n         Assert.assertEquals(-5.0,\n-                            ((Vector1D) l.toSubSpace(new Vector2D( 7, -1))).getX(),\n+                            (l.toSubSpace(new Vector2D( 7, -1))).getX(),\n                             1.0e-10);\n         Assert.assertEquals( 5.0,\n-                             ((Vector1D) l.toSubSpace(new Vector2D(-1, -7))).getX(),\n+                             (l.toSubSpace(new Vector2D(-1, -7))).getX(),\n                              1.0e-10);\n     }\n \n         Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2));\n         for (double a = -2.0; a < 2.0; a += 0.2) {\n             Vector1D pA = new Vector1D(a);\n-            Vector2D point = (Vector2D) l.toSpace(pA);\n-            Assert.assertEquals(a, ((Vector1D) l.toSubSpace(point)).getX(), 1.0e-10);\n+            Vector2D point = l.toSpace(pA);\n+            Assert.assertEquals(a, (l.toSubSpace(point)).getX(), 1.0e-10);\n             Assert.assertEquals(0.0, l.getOffset(point),   1.0e-10);\n             for (double o = -2.0; o < 2.0; o += 0.2) {\n                 point = l.getPointAt(pA, o);\n-                Assert.assertEquals(a, ((Vector1D) l.toSubSpace(point)).getX(), 1.0e-10);\n+                Assert.assertEquals(a, (l.toSubSpace(point)).getX(), 1.0e-10);\n                 Assert.assertEquals(o, l.getOffset(point),   1.0e-10);\n             }\n         }\n     public void testIntersection() {\n         Line    l1 = new Line(new Vector2D( 0, 1), new Vector2D(1, 2));\n         Line    l2 = new Line(new Vector2D(-1, 2), new Vector2D(2, 1));\n-        Vector2D p  = (Vector2D) l1.intersection(l2);\n+        Vector2D p  = l1.intersection(l2);\n         Assert.assertEquals(0.5, p.getX(), 1.0e-10);\n         Assert.assertEquals(1.5, p.getY(), 1.0e-10);\n     }\n--- a/src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java\n+++ b/src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java\n         SubLine s1 = (SubLine) set.intersection(l1.wholeHyperplane());\n         List<Interval> i1 = ((IntervalsSet) s1.getRemainingRegion()).asList();\n         Assert.assertEquals(2, i1.size());\n-        Interval v10 = (Interval) i1.get(0);\n-        Vector2D p10Lower = (Vector2D) l1.toSpace(new Vector1D(v10.getLower()));\n+        Interval v10 = i1.get(0);\n+        Vector2D p10Lower = l1.toSpace(new Vector1D(v10.getLower()));\n         Assert.assertEquals(0.0, p10Lower.getX(), 1.0e-10);\n         Assert.assertEquals(1.5, p10Lower.getY(), 1.0e-10);\n-        Vector2D p10Upper = (Vector2D) l1.toSpace(new Vector1D(v10.getUpper()));\n+        Vector2D p10Upper = l1.toSpace(new Vector1D(v10.getUpper()));\n         Assert.assertEquals(0.5, p10Upper.getX(), 1.0e-10);\n         Assert.assertEquals(2.0, p10Upper.getY(), 1.0e-10);\n-        Interval v11 = (Interval) i1.get(1);\n-        Vector2D p11Lower = (Vector2D) l1.toSpace(new Vector1D(v11.getLower()));\n+        Interval v11 = i1.get(1);\n+        Vector2D p11Lower = l1.toSpace(new Vector1D(v11.getLower()));\n         Assert.assertEquals(1.0, p11Lower.getX(), 1.0e-10);\n         Assert.assertEquals(2.5, p11Lower.getY(), 1.0e-10);\n-        Vector2D p11Upper = (Vector2D) l1.toSpace(new Vector1D(v11.getUpper()));\n+        Vector2D p11Upper = l1.toSpace(new Vector1D(v11.getUpper()));\n         Assert.assertEquals(1.5, p11Upper.getX(), 1.0e-10);\n         Assert.assertEquals(3.0, p11Upper.getY(), 1.0e-10);\n \n         SubLine s2 = (SubLine) set.intersection(l2.wholeHyperplane());\n         List<Interval> i2 = ((IntervalsSet) s2.getRemainingRegion()).asList();\n         Assert.assertEquals(1, i2.size());\n-        Interval v20 = (Interval) i2.get(0);\n-        Vector2D p20Lower = (Vector2D) l2.toSpace(new Vector1D(v20.getLower()));\n+        Interval v20 = i2.get(0);\n+        Vector2D p20Lower = l2.toSpace(new Vector1D(v20.getLower()));\n         Assert.assertEquals(1.0, p20Lower.getX(), 1.0e-10);\n         Assert.assertEquals(2.0, p20Lower.getY(), 1.0e-10);\n-        Vector2D p20Upper = (Vector2D) l2.toSpace(new Vector1D(v20.getUpper()));\n+        Vector2D p20Upper = l2.toSpace(new Vector1D(v20.getUpper()));\n         Assert.assertEquals(3.0, p20Upper.getX(), 1.0e-10);\n         Assert.assertEquals(2.0, p20Upper.getY(), 1.0e-10);\n \n     }\n \n     private double intersectionAbscissa(Line l0, Line l1) {\n-        Vector2D p = (Vector2D) l0.intersection(l1);\n-        return ((Vector1D) l0.toSubSpace(p)).getX();\n+        Vector2D p = l0.intersection(l1);\n+        return (l0.toSubSpace(p)).getX();\n     }\n \n     private SubHyperplane<Euclidean2D> buildHalfLine(Vector2D start, Vector2D end,\n         Line   line  = new Line(start, end);\n         double lower = startIsVirtual\n         ? Double.NEGATIVE_INFINITY\n-        : ((Vector1D) line.toSubSpace(start)).getX();\n+        : (line.toSubSpace(start)).getX();\n         double upper = startIsVirtual\n-        ? ((Vector1D) line.toSubSpace(end)).getX()\n+        ? (line.toSubSpace(end)).getX()\n         : Double.POSITIVE_INFINITY;\n         return new SubLine(line, new IntervalsSet(lower, upper));\n     }\n \n     private SubHyperplane<Euclidean2D> buildSegment(Vector2D start, Vector2D end) {\n         Line   line  = new Line(start, end);\n-        double lower = ((Vector1D) line.toSubSpace(start)).getX();\n-        double upper = ((Vector1D) line.toSubSpace(end)).getX();\n+        double lower = (line.toSubSpace(start)).getX();\n+        double upper = (line.toSubSpace(end)).getX();\n         return new SubLine(line, new IntervalsSet(lower, upper));\n     }\n \n                                    double tolerance) {\n         Line line = new Line(p1, p2);\n         if (line.getOffset(p) < tolerance) {\n-            double x  = ((Vector1D) line.toSubSpace(p)).getX();\n-            double x1 = ((Vector1D) line.toSubSpace(p1)).getX();\n-            double x2 = ((Vector1D) line.toSubSpace(p2)).getX();\n+            double x  = (line.toSubSpace(p)).getX();\n+            double x1 = (line.toSubSpace(p1)).getX();\n+            double x2 = (line.toSubSpace(p2)).getX();\n             return (((x - x1) * (x - x2) <= 0.0)\n                     || (p1.distance(p) < tolerance)\n                     || (p2.distance(p) < tolerance));\n--- a/src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java\n+++ b/src/test/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTreeTest.java\n     }\n \n     private int value(AVLTree<Integer>.Node node) {\n-        return ((Integer) node.getElement()).intValue();\n+        return node.getElement().intValue();\n     }\n \n     private void checkOrder(AVLTree<Integer> tree) {", "timestamp": 1311517912, "metainfo": ""}