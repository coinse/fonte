{"sha": "4e21bb6f6c4bc7380dc58bd8d23c99ea8f4ef5bd", "log": "Added density - cdf consistency test.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java\n package org.apache.commons.math3.distribution;\n \n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+\n import org.apache.commons.math3.TestUtils;\n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;\n+import org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.junit.After;\n         }\n         TestUtils.assertChiSquareAccept(expected, counts, 0.001);\n     }\n+    \n+    /**\n+     * Verify that density integrals match the distribution.\n+     * The (filtered, sorted) cumulativeTestPoints array is used to source\n+     * integration limits. The integral of the density (estimated using a\n+     * Legendre-Gauss integrator) is compared with the cdf over the same\n+     * interval. Test points outside of the domain of the density function\n+     * are discarded.\n+     */\n+    @Test\n+    public void testDensityIntegrals() {\n+        final double tol = 1.0e-9;\n+        final BaseAbstractUnivariateIntegrator integrator =\n+            new IterativeLegendreGaussIntegrator(5, 1.0e-12, 1.0e-10);\n+        final UnivariateFunction d = new UnivariateFunction() {\n+            public double value(double x) {\n+                return distribution.density(x);\n+            }\n+        };\n+        final ArrayList<Double> integrationTestPoints = new ArrayList<Double>();\n+        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n+            if (Double.isNaN(cumulativeTestValues[i]) ||\n+                    cumulativeTestValues[i] < 1.0e-5 ||\n+                    cumulativeTestValues[i] > 1 - 1.0e-5) {\n+                continue; // exclude integrals outside domain.\n+            }\n+            integrationTestPoints.add(cumulativeTestPoints[i]);\n+        }\n+        Collections.sort(integrationTestPoints);\n+        for (int i = 1; i < integrationTestPoints.size(); i++) {\n+            Assert.assertEquals(\n+                    distribution.cumulativeProbability(  // FIXME @4.0 when rename happens\n+                            integrationTestPoints.get(0), integrationTestPoints.get(i)),\n+                            integrator.integrate(\n+                                    1000000, // Triangle integrals are very slow to converge\n+                                    d, integrationTestPoints.get(0),\n+                                    integrationTestPoints.get(i)), tol);\n+        }\n+    }\n \n     //------------------ Getters / Setters for test instance data -----------\n     /**", "timestamp": 1346828025, "metainfo": ""}