{"sha": "e98ce060fc9561fef321caa64f40224c0305bd11", "log": "Javadoc, test improvements, user guide update.  JIRA: MATH-649.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n  * different x coordinates are required to estimate a bivariate regression\n  * model.\n  * </li>\n- * <li> getters for the statistics always compute values based on the current\n+ * <li> Getters for the statistics always compute values based on the current\n  * set of observations -- i.e., you can get statistics, then add more data\n  * and get updated statistics without using a new instance.  There is no\n  * \"compute\" method that updates all statistics.  Each of the getters performs\n- * the necessary computations to return the requested statistic.</li>\n+ * the necessary computations to return the requested statistic.\n+ * </li>\n+ * <li> The intercept term may be suppressed by passing {@code false} to\n+ * the {@link #SimpleRegression(boolean)} constructor.  When the\n+ * {@code hasIntercept} property is false, the model is estimated without a\n+ * constant term and {@link #getIntercept()} returns {@code 0}.</li>\n  * </ul></p>\n  *\n  * @version $Id$\n         this(true);\n     }\n     /**\n-    * Secondary constructor which allows the user the ability to include/exclude const\n-    * @param includeIntercept boolean flag, true includes an intercept\n+    * Create a SimpleRegression instance, specifying whether or not to estimate\n+    * an intercept.\n+    *\n+    * <p>Use {@code false} to estimate a model with no intercept.  When the\n+    * {@code hasIntercept} property is false, the model is estimated without a\n+    * constant term and {@link #getIntercept()} returns {@code 0}.</p>\n+    *\n+    * @param includeIntercept whether or not to include an intercept term in\n+    * the regression model\n     */\n     public SimpleRegression(boolean includeIntercept) {\n         super();\n     }\n \n     /**\n-     * Returns the intercept of the estimated regression line.\n+     * Returns the intercept of the estimated regression line, if\n+     * {@link #hasIntercept()} is true; otherwise 0.\n      * <p>\n      * The least squares estimate of the intercept is computed using the\n      * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n      * returned.\n      * </li></ul></p>\n      *\n-     * @return the intercept of the regression line\n+     * @return the intercept of the regression line if the model includes an\n+     * intercept; 0 otherwise\n+     * @see #SimpleRegression(boolean)\n      */\n     public double getIntercept() {\n         return hasIntercept ? getIntercept(getSlope()) : 0.0;\n     }\n \n     /**\n-     * Returns true if a constant has been included false otherwise.\n-     *\n-     * @return true if constant exists, false otherwise\n+     * Returns true if the model includes an intercept term.\n+     *\n+     * @return true if the regression includes an intercept; false otherwise\n+     * @see #SimpleRegression(boolean)\n      */\n     public boolean hasIntercept() {\n         return hasIntercept;\n--- a/src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n          regression.addData(noint2[0][1], noint2[0][0]);\n          regression.addData(noint2[1][1], noint2[1][0]);\n          regression.addData(noint2[2][1], noint2[2][0]);\n+         Assert.assertEquals(\"intercept\", 0, regression.getIntercept(), 0);\n          Assert.assertEquals(\"slope\", 0.727272727272727,\n                  regression.getSlope(), 10E-12);\n          Assert.assertEquals(\"slope std err\", 0.420827318078432E-01,\n         for (int i = 0; i < noint1.length; i++) {\n             regression.addData(noint1[i][1], noint1[i][0]);\n         }\n+        Assert.assertEquals(\"intercept\", 0, regression.getIntercept(), 0);\n         Assert.assertEquals(\"slope\", 2.07438016528926, regression.getSlope(), 10E-12);\n         Assert.assertEquals(\"slope std err\", 0.165289256198347E-01,\n                 regression.getSlopeStdErr(),10E-12);", "timestamp": 1322426116, "metainfo": ""}