{"sha": "65b65f88b74de6b3462b04b2cf2a69f064a77557", "log": "svn:keywords correction  ", "commit": "\n--- a/src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java\n+++ b/src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionProxy.java\n \n /**\n  * @todo add javadoc comment\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class UnivariateRealFunctionProxy\n     implements UnivariateRealFunction {\n--- a/src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java\n+++ b/src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtils.java\n \n /**\n  * @todo add javadoc comment\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $\n+ * @version $Revision$ $Date$\n  */\n public class UnivariateRealFunctionUtils {\n \n--- a/src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java\n+++ b/src/experimental/org/apache/commons/math/analysis/UnivariateRealFunctionUtilsTest.java\n \n /**\n  * @todo add javadoc comment\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $\n+ * @version $Revision$ $Date$\n  */\n public class UnivariateRealFunctionUtilsTest extends TestCase {\n     /**\n--- a/src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java\n+++ b/src/experimental/org/apache/commons/math/analysis/derivative/AbstractDifferenceDerivative.java\n \n /**\n  * @todo add javadoc comment\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class AbstractDifferenceDerivative extends UnivariateRealFunctionProxy implements UnivariateRealFunction {\n     /** */\n--- a/src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java\n+++ b/src/experimental/org/apache/commons/math/analysis/derivative/BackwardDifferenceDerivative.java\n \n /**\n  * @todo add javadoc comment\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $\n+ * @version $Revision$ $Date$\n  */\n public class BackwardDifferenceDerivative extends AbstractDifferenceDerivative {\n \n--- a/src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java\n+++ b/src/experimental/org/apache/commons/math/analysis/derivative/CenterDifferenceDerivative.java\n \n /**\n  * @todo add javadoc comment\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $\n+ * @version $Revision$ $Date$\n  */\n public class CenterDifferenceDerivative extends AbstractDifferenceDerivative {\n     \n--- a/src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java\n+++ b/src/experimental/org/apache/commons/math/analysis/derivative/ForwardDifferenceDerivative.java\n \n /**\n  * @todo add javadoc comment\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 03:24:19 $\n+ * @version $Revision$ $Date$\n  */\n public class ForwardDifferenceDerivative extends AbstractDifferenceDerivative {\n     \n--- a/src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java\n+++ b/src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java\n  * univariate statistics for a List of Java Beans by property.  This \n  * implementation uses beanutils' PropertyUtils to get a simple, nested,\n  * indexed, mapped, or combined property from an element of a List.\n- * @version $Revision: 1.1 $ $Date: 2004/06/01 21:28:06 $\n+ * @version $Revision$ $Date$\n  */\n public class BeanListUnivariateImpl extends ListUnivariateImpl implements Serializable {\n \n--- a/src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java\n+++ b/src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImplTest.java\n /**\n  * Test cases for the {@link BeanListUnivariateImpl} class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/06/01 21:28:06 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class BeanListUnivariateImplTest extends TestCase {\n--- a/src/experimental/org/apache/commons/math/util/BeanTransformer.java\n+++ b/src/experimental/org/apache/commons/math/util/BeanTransformer.java\n \n /**\n  * Uses PropertyUtils to map a Bean getter to a double value.\n- * @version $Revision: 1.3 $ $Date: 2004/12/06 05:40:48 $\n+ * @version $Revision$ $Date$\n  */\n public class BeanTransformer implements NumberTransformer {\n \n--- a/src/experimental/org/apache/commons/math/util/BeanTransformerTest.java\n+++ b/src/experimental/org/apache/commons/math/util/BeanTransformerTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2004/12/06 05:40:48 $\n+ * @version $Revision$ $Date$\n  */\n public class BeanTransformerTest extends TestCase {\n     \n--- a/src/java/org/apache/commons/math/ConvergenceException.java\n+++ b/src/java/org/apache/commons/math/ConvergenceException.java\n  * Error thrown when a numerical computation can not be performed because the\n  * numerical result failed to converge to a finite value.\n  *\n- * @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:16 $\n+ * @version $Revision$ $Date$\n  */\n public class ConvergenceException extends MathException implements Serializable{\n     \n--- a/src/java/org/apache/commons/math/FunctionEvaluationException.java\n+++ b/src/java/org/apache/commons/math/FunctionEvaluationException.java\n  * Maintains an <code>argument</code> property holding the input value that\n  * caused the function evaluation to fail.\n  * \n- * @version $Revision: 1.2 $ $Date: 2004/07/17 21:12:52 $\n+ * @version $Revision$ $Date$\n  */\n public class FunctionEvaluationException extends MathException  {\n     \n--- a/src/java/org/apache/commons/math/MathConfigurationException.java\n+++ b/src/java/org/apache/commons/math/MathConfigurationException.java\n \n /**\n  * Signals a configuration problem with any of the factory methods.\n- * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $\n+ * @version $Revision$ $Date$\n  */\n public class MathConfigurationException extends MathException implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/MathException.java\n+++ b/src/java/org/apache/commons/math/MathException.java\n * <p>\n * Adapted from {@link org.apache.commons.collections.FunctorException}.\n * \n-* @version $Revision: 1.20 $ $Date: 2004/11/07 02:17:56 $\n+* @version $Revision$ $Date$\n */\n public class MathException extends Exception {\n     \n--- a/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BisectionSolver.java\n  * <p>\n  * The function should be continuous but not necessarily smooth.\n  * \n- * @version $Revision: 1.18 $ $Date: 2004/07/17 21:19:39 $\n+ * @version $Revision$ $Date$\n  */\n public class BisectionSolver extends UnivariateRealSolverImpl {\n     \n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n  * <p>\n  * The function should be continuous but not necessarily smooth.\n  *  \n- * @version $Revision: 1.18 $ $Date: 2004/11/07 02:17:56 $\n+ * @version $Revision$ $Date$\n  */\n public class BrentSolver extends UnivariateRealSolverImpl {\n     \n--- a/src/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java\n /**\n  * Extension of {@link UnivariateRealFunction} representing a differentiable univariate real function.\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:14 $\n+ * @version $Revision$ $Date$\n  */\n public interface DifferentiableUnivariateRealFunction\n     extends UnivariateRealFunction {\n--- a/src/java/org/apache/commons/math/analysis/NewtonSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/NewtonSolver.java\n  * <p> \n  * The function should be continuous but not necessarily smooth.\n  *\n- * @version $Revision: 1.6 $ $Date: 2004/07/17 21:19:39 $\n+ * @version $Revision$ $Date$\n  */\n public class NewtonSolver extends UnivariateRealSolverImpl {\n     \n--- a/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialFunction.java\n  * <a href=\"http://mathworld.wolfram.com/HornersMethod.html\">Horner's Method</a>\n  *  is used to evaluate the function.   \n  *\n- * @version $Revision: 1.12 $ $Date: 2004/07/20 12:55:01 $\n+ * @version $Revision$ $Date$\n  */\n public class PolynomialFunction implements DifferentiableUnivariateRealFunction, Serializable {\n \n--- a/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java\n  * than or equal to <code>x</code>.  The value returned is <br>\n  * <code>polynomials[j](x - knot[j])</code></li></ol>\n  *\n- * @version $Revision: 1.9 $ $Date: 2004/07/22 02:34:25 $\n+ * @version $Revision$ $Date$\n  */\n public class PolynomialSplineFunction implements UnivariateRealFunction, Serializable {\n    \n--- a/src/java/org/apache/commons/math/analysis/SecantSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/SecantSolver.java\n  * <p>\n  * The function is assumed to be continuous but not necessarily smooth.\n  *  \n- * @version $Revision: 1.17 $ $Date: 2004/07/17 21:19:39 $\n+ * @version $Revision$ $Date$\n  */\n public class SecantSolver extends UnivariateRealSolverImpl implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/analysis/SplineInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/SplineInterpolator.java\n  * The cubic spline interpolation algorithm implemented is as described in R.L. Burden, J.D. Faires, \n  * <u>Numerical Analysis</u>, 4th Ed., 1989, PWS-Kent, ISBN 0-53491-585-X, pp 126-131.\n  *\n- * @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:14 $\n+ * @version $Revision$ $Date$\n  *\n  */\n public class SplineInterpolator implements UnivariateRealInterpolator {\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n /**\n  * An interface representing a univariate real function.\n  *  \n- * @version $Revision: 1.14 $ $Date: 2004/07/17 21:19:39 $\n+ * @version $Revision$ $Date$\n  */\n public interface UnivariateRealFunction {\n     /**\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java\n /**\n  * Interface representing a univariate real interpolating function.\n  *  \n- * @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:14 $\n+ * @version $Revision$ $Date$\n  */\n public interface UnivariateRealInterpolator {\n \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java\n  * <p>\n  * Implementations will search for only one zero in the given interval.\n  *  \n- * @version $Revision: 1.14 $ $Date: 2004/07/17 21:19:39 $\n+ * @version $Revision$ $Date$\n  */\n public interface UnivariateRealSolver {\n \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java\n  * <code>UnivariateRealSolverFactory.newInstance().</code>  The default is\n  * {@link UnivariateRealSolverFactoryImpl}.\n  *\n- * @version $Revision: 1.16 $ $Date: 2004/07/10 15:59:14 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class UnivariateRealSolverFactory {\n     /**\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\n  * <p>\n  * The default solver returned by this factory is a {@link BrentSolver}.\n  *\n- * @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:14 $\n+ * @version $Revision$ $Date$\n  */\n public class UnivariateRealSolverFactoryImpl extends UnivariateRealSolverFactory {\n         \n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java\n  * Provide a default implementation for several functions useful to generic\n  * solvers.\n  *  \n- * @version $Revision: 1.15 $ $Date: 2004/07/17 21:19:39 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class UnivariateRealSolverImpl implements UnivariateRealSolver,\n     Serializable {\n--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\n /**\n  * Utility routines for {@link UnivariateRealSolver} objects.\n  * \n- * @version $Revision: 1.10 $ $Date: 2004/07/17 21:19:39 $\n+ * @version $Revision$ $Date$\n  */\n public class UnivariateRealSolverUtils {\n     /**\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n  * real and imaginary part.\n  *\n  * @author Apache Software Foundation\n- * @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $\n+ * @version $Revision$ $Date$\n  */\n public class Complex implements Serializable  {\n \n--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java\n  * can be configured.\n  *\n  * @author Apache Software Foundation\n- * @version $Revision: 1.10 $ $Date: 2004/09/21 04:45:55 $\n+ * @version $Revision$ $Date$\n  */\n public class ComplexFormat extends Format implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/complex/ComplexUtils.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexUtils.java\n  * Multiple Precision Complex Arithmetic and Functions</a></li>\n  * </ul>\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/07/12 00:27:09 $\n+ * @version $Revision$ $Date$\n  */\n public class ComplexUtils {\n     \n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n  * provided for some of the methods that do not vary from distribution to\n  * distribution.\n  *  \n- * @version $Revision: 1.26 $ $Date: 2004/11/07 03:32:48 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class AbstractContinuousDistribution\n     extends AbstractDistribution\n--- a/src/java/org/apache/commons/math/distribution/AbstractDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDistribution.java\n /**\n  * Base class for probability distributions.   \n  *  \n- * @version $Revision: 1.2 $ $Date: 2004/11/07 20:39:15 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class AbstractDistribution\n     implements Distribution, Serializable {\n--- a/src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n  * implementations are provided for some of the methods that do not vary\n  * from distribution to distribution.\n  *  \n- * @version $Revision: 1.1 $ $Date: 2004/11/07 03:32:48 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class AbstractIntegerDistribution extends AbstractDistribution\n     implements IntegerDistribution, Serializable {\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision: 1.12 $ $Date: 2004/11/07 03:32:48 $\n+ * @version $Revision$ $Date$\n  */\n public interface BinomialDistribution extends IntegerDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n /**\n  * The default implementation of {@link BinomialDistribution}.\n  *\n- * @version $Revision: 1.19 $ $Date: 2004/11/07 03:32:48 $\n+ * @version $Revision$ $Date$\n  */\n public class BinomialDistributionImpl\n     extends AbstractIntegerDistribution\n--- a/src/java/org/apache/commons/math/distribution/CauchyDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/CauchyDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision: 1.8 $ $Date: 2004-06-23 11:26:18 -0500 (Wed, 23 Jun 2004) $\n+ * @version $Revision$ $Date$\n  */\n public interface CauchyDistribution extends ContinuousDistribution {\n     \n--- a/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.CauchyDistribution}.\n  *\n- * @version $Revision: 1.13 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $\n+ * @version $Revision$ $Date$\n  */\n public class CauchyDistributionImpl extends AbstractContinuousDistribution \n \t\timplements CauchyDistribution, Serializable {\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision$ $Date$\n  */\n public interface ChiSquaredDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n /**\n  * The default implementation of {@link ChiSquaredDistribution}\n  *\n- * @version $Revision: 1.19 $ $Date: 2004/07/24 20:43:29 $\n+ * @version $Revision$ $Date$\n  */\n public class ChiSquaredDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n /**\n  * Base interface for continuous distributions.\n  *\n- * @version $Revision: 1.16 $ $Date: 2004/11/07 03:32:48 $\n+ * @version $Revision$ $Date$\n  */\n public interface ContinuousDistribution extends Distribution {\n     \n--- a/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n /**\n  * Base interface for discrete distributions.\n  *\n- * @version $Revision: 1.17 $ $Date: 2004/11/07 03:32:48 $\n+ * @version $Revision$ $Date$\n  */\n public interface DiscreteDistribution extends Distribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/Distribution.java\n+++ b/src/java/org/apache/commons/math/distribution/Distribution.java\n /**\n  * Base interface for probability distributions.\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/11/07 20:39:15 $\n+ * @version $Revision$ $Date$\n  */\n public interface Distribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n  * ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);\n  * </pre>\n  *\n- * @version $Revision: 1.22 $ $Date$\n+ * @version $Revision$ $Date$\n  */\n public abstract class DistributionFactory {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n  * A concrete distribution factory.  This is the default factory used by\n  * Commons-Math.\n  *  \n- * @version $Revision: 1.21 $ $Date: 2004/11/07 03:32:48 $\n+ * @version $Revision$ $Date$\n  */\n public class DistributionFactoryImpl extends DistributionFactory {\n \n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision: 1.12 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision$ $Date$\n  */\n public interface ExponentialDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n /**\n  * The default implementation of {@link ExponentialDistribution}\n  *\n- * @version $Revision: 1.19 $ $Date: 2004/07/24 21:41:36 $\n+ * @version $Revision$ $Date$\n  */\n public class ExponentialDistributionImpl extends AbstractContinuousDistribution\n     implements ExponentialDistribution, Serializable {\n--- a/src/java/org/apache/commons/math/distribution/FDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision$ $Date$\n  */\n public interface FDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.FDistribution}.\n  *\n- * @version $Revision: 1.19 $ $Date: 2004/07/24 21:41:36 $\n+ * @version $Revision$ $Date$\n  */\n public class FDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision$ $Date$\n  */\n public interface GammaDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n /**\n  * The default implementation of {@link GammaDistribution}\n  *\n- * @version $Revision: 1.22 $ $Date: 2004/07/24 21:41:36 $\n+ * @version $Revision$ $Date$\n  */\n public class GammaDistributionImpl extends AbstractContinuousDistribution\n     implements GammaDistribution, Serializable  {\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision: 1.11 $ $Date: 2004/11/07 03:32:48 $\n+ * @version $Revision$ $Date$\n  */\n public interface HypergeometricDistribution extends IntegerDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n /**\n  * The default implementation of {@link HypergeometricDistribution}.\n  *\n- * @version $Revision: 1.16 $ $Date: 2004/11/07 03:32:48 $\n+ * @version $Revision$ $Date$\n  */\n public class HypergeometricDistributionImpl extends AbstractIntegerDistribution\n     implements HypergeometricDistribution, Serializable \n--- a/src/java/org/apache/commons/math/distribution/IntegerDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/IntegerDistribution.java\n /**\n  * Interface for discrete distributions of integer-valued random variables.\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/11/07 20:39:15 $\n+ * @version $Revision$ $Date$\n  */\n public interface IntegerDistribution extends DiscreteDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/NormalDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision: 1.8 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision$ $Date$\n  */\n public interface NormalDistribution extends ContinuousDistribution {\n \t/**\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.NormalDistribution}.\n  *\n- * @version $Revision: 1.13 $ $Date: 2004/07/24 21:41:36 $\n+ * @version $Revision$ $Date$\n  */\n public class NormalDistributionImpl extends AbstractContinuousDistribution \n \t\timplements NormalDistribution, Serializable {\n--- a/src/java/org/apache/commons/math/distribution/PoissonDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/PoissonDistribution.java\n  * </ul>\n  * </p>\n  * \n- * @version $Revision: 1.2 $ $Date: 2004/11/07 20:39:15 $\n+ * @version $Revision$ $Date$\n  */\n public interface PoissonDistribution extends IntegerDistribution {\n \n--- a/src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n /**\n  * Implementation for the @link{PoissonDistribution}\n  * \n- * @version $Revision: 1.2 $ $Date: 2004/11/07 20:39:15 $\n+ * @version $Revision$ $Date$\n  */\n public class PoissonDistributionImpl extends AbstractIntegerDistribution\n         implements PoissonDistribution, Serializable {\n--- a/src/java/org/apache/commons/math/distribution/TDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision: 1.12 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision$ $Date$\n  */\n public interface TDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.TDistribution}.\n  *\n- * @version $Revision: 1.19 $ $Date: 2004/07/24 21:41:36 $\n+ * @version $Revision$ $Date$\n  */\n public class TDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n  * Representation of a rational number.\n  *\n  * @author Apache Software Foundation\n- * @version $Revision: $ $Date: $\n+ * @version $Revision$ $Date$\n  */\n public class Fraction extends Number implements Comparable {\n \n--- a/src/java/org/apache/commons/math/fraction/FractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/FractionFormat.java\n  * configured.\n  *\n  * @author Apache Software Foundation\n- * @version $Revision: 1.10 $ $Date: 2004-09-20 23:45:55 -0500 (Mon, 20 Sep 2004) $\n+ * @version $Revision$ $Date$\n  */\n public class FractionFormat extends Format implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n  * the whole number, numerator and, denominator can be configured.\n  * \n  * @author Apache Software Foundation\n- * @version $Revision: $ $Date: $\n+ * @version $Revision$ $Date$\n  */\n public class ProperFractionFormat extends FractionFormat {\n     \n--- a/src/java/org/apache/commons/math/linear/BigMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrix.java\n  * Matrix element indexing is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.\n  *\n- * @version $Revision: 1.9 $ $Date: 2004/10/25 03:12:28 $\n+ * @version $Revision$ $Date$\n  */\n public interface BigMatrix {\n \n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n  * As specified in the {@link BigMatrix} interface, matrix element indexing\n  * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.</li></ul>\n- * @version $Revision: 1.10 $ $Date: 2004/11/07 20:19:22 $\n+ * @version $Revision$ $Date$\n  */\n public class BigMatrixImpl implements BigMatrix, Serializable {\n     \n--- a/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\n+++ b/src/java/org/apache/commons/math/linear/InvalidMatrixException.java\n  * Thrown when a system attempts an operation on a matrix, and\n  * that matrix does not satisfy the preconditions for the\n  * aforementioned operation.\n- * @version $Revision: 1.8 $ $Date: 2004/12/06 05:49:44 $\n+ * @version $Revision$ $Date$\n  */\n public class InvalidMatrixException extends RuntimeException {\n \n--- a/src/java/org/apache/commons/math/linear/MatrixIndexException.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixIndexException.java\n /**\n  * Thrown when an operation addresses a matrix coordinate (row,col)\n  * which is outside of the dimensions of a matrix.\n- * @version $Revision: 1.8 $ $Date: 2004/12/06 05:49:44 $\n+ * @version $Revision$ $Date$\n  */\n public class MatrixIndexException extends RuntimeException {\n \n--- a/src/java/org/apache/commons/math/linear/MatrixUtils.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixUtils.java\n /**\n  * A collection of static methods that operate on or return matrices.\n  * \n- * @version $Revision: 1.2 $ $Date: 2004/10/25 05:36:15 $\n+ * @version $Revision$ $Date$\n  */\n public class MatrixUtils {\n \n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n  * Matrix element indexing is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.\n  * \n- * @version $Revision: 1.25 $ $Date: 2004/10/12 06:19:50 $\n+ * @version $Revision$ $Date$\n  */\n public interface RealMatrix {\n \n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.</li></ul>\n  *\n- * @version $Revision: 1.35 $ $Date: 2004/11/07 20:19:22 $\n+ * @version $Revision$ $Date$\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n     \n--- a/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n  * generate random values \"like\" those in the input file -- i.e., the values\n  * generated will follow the distribution of the values in the file.\n  * \n- * @version $Revision: 1.23 $ $Date: 2004/10/08 05:08:16 $\n+ * @version $Revision$ $Date$\n  */\n public interface EmpiricalDistribution {\n \n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n  *    entry per line.</li>\n  * </ul></p>\n  *\n- * @version $Revision: 1.30 $ $Date: 2004/10/08 05:08:16 $\n+ * @version $Revision$ $Date$\n  */\n public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n--- a/src/java/org/apache/commons/math/random/RandomData.java\n+++ b/src/java/org/apache/commons/math/random/RandomData.java\n \n /**\n  * Random data generation utilities\n- * @version $Revision: 1.10 $ $Date: 2004/06/14 23:15:15 $\n+ * @version $Revision$ $Date$\n  */\n public interface RandomData {\n     /**\n--- a/src/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/java/org/apache/commons/math/random/RandomDataImpl.java\n  * This implementation is not synchronized.\n  * </ul>\n  *\n- * @version $Revision: 1.16 $ $Date: 2004/07/22 02:34:25 $\n+ * @version $Revision$ $Date$\n  */\n public class RandomDataImpl implements RandomData, Serializable {\n \n--- a/src/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/java/org/apache/commons/math/random/ValueServer.java\n  *                       standard deviation = <code>sigma</code></li>\n  * <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul>\n  *\n- * @version $Revision: 1.17 $ $Date: 2004/08/22 01:41:30 $\n+ * @version $Revision$ $Date$\n  *\n  */\n public class ValueServer {\n--- a/src/java/org/apache/commons/math/special/Beta.java\n+++ b/src/java/org/apache/commons/math/special/Beta.java\n  * This is a utility class that provides computation methods related to the\n  * Beta family of functions.\n  *\n- * @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:17 $\n+ * @version $Revision$ $Date$\n  */\n public class Beta implements Serializable {\n     /** Maximum allowed numerical error. */\n--- a/src/java/org/apache/commons/math/special/Erf.java\n+++ b/src/java/org/apache/commons/math/special/Erf.java\n  * This is a utility class that provides computation methods related to the\n  * error functions.\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:17 $\n+ * @version $Revision$ $Date$\n  */\n public class Erf implements Serializable {\n \n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n  * This is a utility class that provides computation methods related to the\n  * Gamma family of functions.\n  *\n- * @version $Revision: 1.22 $ $Date: 2004/10/08 05:53:18 $\n+ * @version $Revision$ $Date$\n  */\n public class Gamma implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n  * The values are ordered using the default (natural order), unless a  \n  * <code>Comparator</code> is supplied in the constructor.\n  *\n- * @version $Revision: 1.29 $ $Date: 2004/09/21 03:02:34 $\n+ * @version $Revision$ $Date$\n  */\n public class Frequency implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/java/org/apache/commons/math/stat/StatUtils.java\n  * StatUtils provides static methods for computing statistics based on data\n  * stored in double[] arrays. \n  * \n- * @version $Revision: 1.33 $ $Date: 2004/10/08 05:08:16 $\n+ * @version $Revision$ $Date$\n  */\n public final class StatUtils {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n  * <p>\n  * <strong>Note that these implementations are not synchronized.</strong>\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class AbstractStorelessUnivariateStatistic\n     extends AbstractUnivariateStatistic\n--- a/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n  * validation for the <code>evaluate</code> methods.\n  * <p>\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class AbstractUnivariateStatistic\n     implements UnivariateStatistic, Serializable {\n--- a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n /**\n  * Abstract factory class for univariate statistical summaries.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class DescriptiveStatistics implements StatisticalSummary, Serializable {\n     \n--- a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.stat.descriptive.DescriptiveStatistics}.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class DescriptiveStatisticsImpl extends DescriptiveStatistics implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java\n /**\n  *  Reporting interface for basic univariate statistics.\n  *\n-  * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+  * @version $Revision$ $Date$\n  */\n public interface StatisticalSummary {\n     /** \n--- a/src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java\n /**\n  *  Value object representing the results of a univariate statistical summary.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class StatisticalSummaryValues implements Serializable, \n     StatisticalSummary {\n--- a/src/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java\n  * This interface is designed to be used for calculating statistics that can be computed in \n  * one pass through the data without storing the full array of sample values.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public interface StorelessUnivariateStatistic extends UnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n /**\n  * Abstract factory class for univariate statistical summaries.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class SummaryStatistics implements StatisticalSummary, Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java\n /**\n  * Provides a default {@link SummaryStatistics} implementation.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $  \n+ * @version $Revision$ $Date$  \n  */\n public class SummaryStatisticsImpl extends SummaryStatistics implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java\n  * <code>double[]</code> arrays as input and return the value of the statistic\n  * applied to the input values.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public interface UnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class FirstMoment extends AbstractStorelessUnivariateStatistic \n     implements Serializable {\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class FourthMoment extends ThirdMoment implements Serializable{\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class GeometricMean extends AbstractStorelessUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class Kurtosis extends AbstractStorelessUnivariateStatistic  {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class Mean extends AbstractStorelessUnivariateStatistic \n     implements Serializable {\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class SecondMoment extends FirstMoment implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class Skewness extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.2 $ $Date: 2004/10/11 06:54:05 $\n+ * @version $Revision$ $Date$\n  */\n public class StandardDeviation extends AbstractStorelessUnivariateStatistic\n     implements Serializable {\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class ThirdMoment extends SecondMoment implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.4 $ $Date: 2004/10/11 06:52:39 $\n+ * @version $Revision$ $Date$\n  */\n public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.2 $ $Date: 2004/11/07 02:44:45 $\n+ * @version $Revision$ $Date$\n  */\n public class Max extends AbstractStorelessUnivariateStatistic {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Median.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Median.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class Median extends Percentile implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class Min extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $\n+ * @version $Revision$ $Date$\n  */\n public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:18 $\n+ * @version $Revision$ $Date$\n  */\n public class Product extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:18 $\n+ * @version $Revision$ $Date$\n  */\n public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:18 $\n+ * @version $Revision$ $Date$\n  */\n public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:18 $\n+ * @version $Revision$ $Date$\n  */\n public class SumOfSquares extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n /**\n  * An interface for Chi-Square tests.\n  *\n- * @version $Revision: 1.3 $ $Date: 2004/06/23 16:26:14 $ \n+ * @version $Revision$ $Date$ \n  */\n public interface ChiSquareTest {\n      \n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n /**\n  * Implements Chi-Square test statistics defined in the {@link ChiSquareTest} interface.\n  *\n- * @version $Revision: 1.11 $ $Date: 2004/12/04 20:47:46 $\n+ * @version $Revision$ $Date$\n  */\n public class ChiSquareTestImpl implements ChiSquareTest {\n     \n--- a/src/java/org/apache/commons/math/stat/inference/TTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTest.java\n  * {@link StatisticalSummary} instances.\n  * \n  *\n- * @version $Revision: 1.8 $ $Date: 2004/10/08 05:08:18 $ \n+ * @version $Revision$ $Date$ \n  */\n public interface TTest {\n     /**\n--- a/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n  * Uses commons-math {@link org.apache.commons.math.distribution.TDistribution}\n  * implementation to estimate exact p-values.\n  *\n- * @version $Revision: 1.10 $ $Date: 2004/10/08 05:08:18 $\n+ * @version $Revision$ $Date$\n  */\n public class TTestImpl implements TTest  {\n \n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n  * the necessary computations to return the requested statistic.</li>\n  * </ul>\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/10/24 06:27:14 $\n+ * @version $Revision$ $Date$\n  */\n public class SimpleRegression implements Serializable {\n \n--- a/src/java/org/apache/commons/math/util/ContinuedFraction.java\n+++ b/src/java/org/apache/commons/math/util/ContinuedFraction.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:16 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class ContinuedFraction implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/java/org/apache/commons/math/util/DefaultTransformer.java\n  * into a primitive double or to turn a String representation of a Number into \n  * a double.\n  *\n- * @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision$ $Date$\n  */\n public class DefaultTransformer implements NumberTransformer, Serializable {\n     \n--- a/src/java/org/apache/commons/math/util/DoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/DoubleArray.java\n  * array implementations to support various storage mechanisms\n  * such as automatic expansion, contraction, and array \"rolling\".\n  *\n- * @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:16 $\n+ * @version $Revision$ $Date$\n  */\n public interface DoubleArray {\n \n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n /**\n  * Some useful additions to the built-in functions in {@link Math}.\n  *\n- * @version $Revision: 1.20 $ $Date$\n+ * @version $Revision$ $Date$\n  */\n public final class MathUtils {\n     \n--- a/src/java/org/apache/commons/math/util/NumberTransformer.java\n+++ b/src/java/org/apache/commons/math/util/NumberTransformer.java\n \n /**\n  * Subclasses implementing this interface can transform Objects to doubles.\n- * @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision$ $Date$\n  */\n public interface NumberTransformer {\n     \n--- a/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/ResizableDoubleArray.java\n  * is violated.\n  * </p>\n  * <p>\n- * @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:16 $\n+ * @version $Revision$ $Date$\n  */\n public class ResizableDoubleArray implements DoubleArray, Serializable {\n     \n--- a/src/java/org/apache/commons/math/util/TransformerMap.java\n+++ b/src/java/org/apache/commons/math/util/TransformerMap.java\n  * It provides a means to set NumberTransformers that will be selected \n  * based on the Class of the object handed to the Maps\n  * <code>double transform(Object o)</code> method.\n- * @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $\n+ * @version $Revision$ $Date$\n  */\n public class TransformerMap implements NumberTransformer, Serializable {\n \n--- a/src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java\n+++ b/src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2004/07/17 19:41:05 $\n+ * @version $Revision$ $Date$\n  */\n public class FunctionEvaluationExceptionTest extends TestCase {\n     \n--- a/src/test/org/apache/commons/math/MathConfigurationExceptionTest.java\n+++ b/src/test/org/apache/commons/math/MathConfigurationExceptionTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2004/02/21 21:35:16 $\n+ * @version $Revision$ $Date$\n  */\n public class MathConfigurationExceptionTest extends TestCase {\n     /**\n--- a/src/test/org/apache/commons/math/MathExceptionTest.java\n+++ b/src/test/org/apache/commons/math/MathExceptionTest.java\n import java.io.PrintWriter;\n \n /**\n- * @version $Revision: 1.8 $ $Date: 2004/07/10 22:23:14 $\n+ * @version $Revision$ $Date$\n  */\n public class MathExceptionTest extends TestCase {\n     /**\n--- a/src/test/org/apache/commons/math/RetryTestCase.java\n+++ b/src/test/org/apache/commons/math/RetryTestCase.java\n  * <p>\n  * Errors or exceptions other than AssertionFailedError do not lead to retries.\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/03/07 16:39:38 $\n+ * @version $Revision$ $Date$\n  */\n public class RetryTestCase extends TestCase {\n \n--- a/src/test/org/apache/commons/math/TestUtils.java\n+++ b/src/test/org/apache/commons/math/TestUtils.java\n import org.apache.commons.math.complex.Complex;\n \n /**\n- * @version $Revision: 1.14 $ $Date: 2004/06/17 21:41:56 $\n+ * @version $Revision$ $Date$\n  */\n public class TestUtils {\n     /**\n--- a/src/test/org/apache/commons/math/analysis/BisectionSolverTest.java\n+++ b/src/test/org/apache/commons/math/analysis/BisectionSolverTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.12 $ $Date: 2004/07/17 21:19:39 $\n+ * @version $Revision$ $Date$\n  */\n public final class BisectionSolverTest extends TestCase {\n     /**\n--- a/src/test/org/apache/commons/math/analysis/BrentSolverTest.java\n+++ b/src/test/org/apache/commons/math/analysis/BrentSolverTest.java\n  * default absolute accuracy of 10E-8 for sinus and the quintic function around\n  * zero, and 5..10 iterations for the other zeros.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/07/17 19:49:02 $ \n+ * @version $Revision$ $Date$ \n  */\n public final class BrentSolverTest extends TestCase {\n \n--- a/src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java\n+++ b/src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.8 $ $Date: 2004/02/18 03:24:20 $\n+ * @version $Revision$ $Date$\n  */\n public class ConvergenceExceptionTest extends TestCase {\n     /**\n--- a/src/test/org/apache/commons/math/analysis/NewtonSolverTest.java\n+++ b/src/test/org/apache/commons/math/analysis/NewtonSolverTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2004/07/17 21:19:39 $\n+ * @version $Revision$ $Date$\n  */\n public final class NewtonSolverTest extends TestCase {\n     /**\n--- a/src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java\n+++ b/src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java\n /**\n  * Tests the PolynomialFunction implementation of a UnivariateRealFunction.\n  *\n- * @version $Revision: 1.6 $\n+ * @version $Revision$\n  * @author Matt Cliff <matt@mattcliff.com>\n  */\n public final class PolynomialFunctionTest extends TestCase {\n--- a/src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java\n+++ b/src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java\n /**\n  * Tests the PolynomialSplineFunction implementation.\n  *\n- * @version $Revision: 1.2 $\n+ * @version $Revision$\n  */\n public class PolynomialSplineFunctionTest extends TestCase {\n \n--- a/src/test/org/apache/commons/math/analysis/QuinticFunction.java\n+++ b/src/test/org/apache/commons/math/analysis/QuinticFunction.java\n /**\n  * Auxillary class for testing solvers.\n  *\n- * @version $Revision: 1.14 $ $Date: 2004/07/17 21:19:39 $ \n+ * @version $Revision$ $Date$ \n  */\n public class QuinticFunction implements DifferentiableUnivariateRealFunction, Serializable {\n \n--- a/src/test/org/apache/commons/math/analysis/SinFunction.java\n+++ b/src/test/org/apache/commons/math/analysis/SinFunction.java\n  * which means linear approximation (Regula Falsi) will converge\n  * quadratically.\n  * \n- * @version $Revision: 1.13 $ $Date: 2004/07/17 21:19:39 $\n+ * @version $Revision$ $Date$\n  */\n public class SinFunction implements DifferentiableUnivariateRealFunction {\n \n--- a/src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java\n /**\n  * Test the SplineInterpolator.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/04/02 20:58:59 $ \n+ * @version $Revision$ $Date$ \n  */\n public class SplineInterpolatorTest extends TestCase {\n     \n--- a/src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java\n+++ b/src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2004/04/27 16:42:32 $\n+ * @version $Revision$ $Date$\n  */\n public class UnivariateRealSolverFactoryImplTest extends TestCase {\n     \n--- a/src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java\n+++ b/src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.8 $ $Date: 2004/07/17 21:19:39 $\n+ * @version $Revision$ $Date$\n  */\n public class UnivariateRealSolverUtilsTest extends TestCase {\n     \n--- a/src/test/org/apache/commons/math/complex/ComplexTest.java\n+++ b/src/test/org/apache/commons/math/complex/ComplexTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2004/02/21 21:35:16 $\n+ * @version $Revision$ $Date$\n  */\n public class ComplexTest extends TestCase {\n     \n--- a/src/test/org/apache/commons/math/complex/ComplexUtilsTest.java\n+++ b/src/test/org/apache/commons/math/complex/ComplexUtilsTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2004/07/12 00:27:09 $\n+ * @version $Revision$ $Date$\n  */\n public class ComplexUtilsTest extends TestCase {\n     \n--- a/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n  * Extends IntegerDistributionAbstractTest.  See class javadoc for\n  * IntegerDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.16 $ $Date: 2004/11/07 03:32:49 $\n+ * @version $Revision$ $Date$\n  */\n public class BinomialDistributionTest extends IntegerDistributionAbstractTest {\n     \n--- a/src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.8 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $\n+ * @version $Revision$ $Date$\n  */\n public class CauchyDistributionTest extends ContinuousDistributionAbstractTest  {\n     \n--- a/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.16 $ $Date: 2004/07/24 20:43:29 $\n+ * @version $Revision$ $Date$\n  */\n public class ChiSquareDistributionTest extends ContinuousDistributionAbstractTest {\n     \n--- a/src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n  * <p>\n  * Error tolerance can be overriden by implementing getTolerance().\n  * \n- * @version $Revision: 1.2 $ $Date: 2004/05/30 03:08:00 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class ContinuousDistributionAbstractTest extends TestCase {\n     \n--- a/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.16 $ $Date$\n+ * @version $Revision$ $Date$\n  */\n public class DistributionFactoryImplTest extends TestCase {\n     /** */\n--- a/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.16 $ $Date: 2004/12/10 05:16:52 $\n+ * @version $Revision$ $Date$\n  */\n public class ExponentialDistributionTest extends ContinuousDistributionAbstractTest {\n \n--- a/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.16 $ $Date: 2004/07/24 21:41:37 $\n+ * @version $Revision$ $Date$\n  */\n public class FDistributionTest extends ContinuousDistributionAbstractTest {\n \n--- a/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.18 $ $Date: 2004/07/24 21:41:37 $\n+ * @version $Revision$ $Date$\n  */\n public class GammaDistributionTest extends ContinuousDistributionAbstractTest {\n     \n--- a/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n  * Extends IntegerDistributionAbstractTest.  See class javadoc for\n  * IntegerDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.13 $ $Date$\n+ * @version $Revision$ $Date$\n  */\n public class HypergeometricDistributionTest extends IntegerDistributionAbstractTest {\n \n--- a/src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java\n+++ b/src/test/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java\n  *  use the setXxx methods for the instance data in test cases and call the verifyXxx methods\n  *  to verify results. \n  * \n- * @version $Revision: 1.1 $ $Date: 2004/11/07 03:32:49 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class IntegerDistributionAbstractTest extends TestCase {\n     \n--- a/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  * \n- * @version $Revision: 1.8 $ $Date: 2004/07/24 21:41:37 $\n+ * @version $Revision$ $Date$\n  */\n public class NormalDistributionTest extends ContinuousDistributionAbstractTest  {\n     \n--- a/src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java\n /**\n  * <code>PoissonDistributionTest</code>\n  * \n- * @version $Revision: 1.2 $ $Date$\n+ * @version $Revision$ $Date$\n  */\n public class PoissonDistributionTest extends IntegerDistributionAbstractTest {\n \n--- a/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  *\n- * @version $Revision: 1.15 $ $Date$\n+ * @version $Revision$ $Date$\n  */\n public class TDistributionTest extends ContinuousDistributionAbstractTest {\n \n--- a/src/test/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: $ $Date: $\n+ * @version $Revision$ $Date$\n  */\n public class FractionTest extends TestCase {\n \n--- a/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java\n-/*\n- * Copyright 2004 The Apache Software Foundation.\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.math.linear;\n-\n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n-import java.math.BigDecimal;\n-\n-/**\n- * Test cases for the {@link BigMatrixImpl} class.\n- *\n- * @version $Revision: 1.5 $ $Date: 2004/10/25 03:13:31 $\n- */\n-\n-public final class BigMatrixImplTest extends TestCase {\n-    \n-    // Test data for String constructors\n-    protected  String[][] testDataString = { {\"1\",\"2\",\"3\"}, {\"2\",\"5\",\"3\"}, {\"1\",\"0\",\"8\"} };\n-    \n-    // 3 x 3 identity matrix\n-    protected double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };\n-    \n-    // Test data for group operations\n-    protected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };\n-    protected double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};\n-    protected double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };\n-    protected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d}, \n-            {-1d,0d,-8d} };\n-    protected double[] testDataRow1 = {1d,2d,3d};\n-    protected double[] testDataCol3 = {3d,3d,8d};\n-    protected double[][] testDataInv = \n-        { {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };\n-    protected double[] preMultTest = {8,12,33};\n-    protected double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};\n-    protected double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};\n-    protected double[][] testDataPlusInv = \n-        { {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };\n-    \n-    // lu decomposition tests\n-    protected double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };\n-    protected double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d},\n-            {0.33333333333333,0d,0.33333333333333} };\n-    \n-    // singular matrices\n-    protected double[][] singular = { {2d,3d}, {2d,3d} };\n-    protected double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},\n-            {7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd\n-    protected double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };\n-    protected double[][] detData2 = { {1d, 3d}, {2d, 4d}};\n-    \n-    // vectors\n-    protected double[] testVector = {1,2,3};\n-    protected double[] testVector2 = {1,2,3,4};\n-    \n-    // submatrix accessor tests\n-    protected double[][] subTestData = {{1, 2, 3, 4}, {1.5, 2.5, 3.5, 4.5},\n-            {2, 4, 6, 8}, {4, 5, 6, 7}}; \n-    // array selections\n-    protected double[][] subRows02Cols13 = { {2, 4}, {4, 8}};\n-    protected double[][] subRows03Cols12 = { {2, 3}, {5, 6}};\n-    protected double[][] subRows03Cols123 = { {2, 3, 4} , {5, 6, 7}};\n-    // effective permutations\n-    protected double[][] subRows20Cols123 = { {4, 6, 8} , {2, 3, 4}};\n-    protected double[][] subRows31Cols31 = {{7, 5}, {4.5, 2.5}};\n-    // contiguous ranges\n-    protected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};\n-    protected double[][] subRows23Cols00 = {{2} , {4}};\n-    protected double[][] subRows00Cols33 = {{4}};\n-    // row matrices\n-    protected double[][] subRow0 = {{1,2,3,4}};\n-    protected double[][] subRow3 = {{4,5,6,7}};\n-    // column matrices\n-    protected double[][] subColumn1 = {{2}, {2.5}, {4}, {5}};\n-    protected double[][] subColumn3 = {{4}, {4.5}, {8}, {7}};\n-    \n-    // tolerances\n-    protected double entryTolerance = 10E-16;\n-    protected double normTolerance = 10E-14;\n-    \n-    public BigMatrixImplTest(String name) {\n-        super(name);\n-    }\n-    \n-    public void setUp() {\n-        \n-    }\n-    \n-    public static Test suite() {\n-        TestSuite suite = new TestSuite(BigMatrixImplTest.class);\n-        suite.setName(\"BigMatrixImpl Tests\");\n-        return suite;\n-    }\n-\n-    public static final double[] asDouble(BigDecimal[] data) {\n-        double d[] = new double[data.length];\n-        for (int i=0;i<d.length;i++) {\n-            d[i] = data[i].doubleValue();\n-        }\n-        return d;\n-    }\n-\n-    public static final double[][] asDouble(BigDecimal[][] data) {\n-        double d[][] = new double[data.length][data[0].length];\n-        for (int i=0;i<d.length;i++) {\n-            for (int j=0;j<d[i].length;j++)\n-            d[i][j] = data[i][j].doubleValue();\n-        }\n-        return d;\n-    }\n-\n-    public static final BigDecimal[] asBigDecimal(double [] data) {\n-        BigDecimal d[] = new BigDecimal[data.length];\n-        for (int i=0;i<d.length;i++) {\n-            d[i] = new BigDecimal(data[i]);\n-        }\n-        return d;\n-    }\n-\n-    public static final BigDecimal[][] asBigDecimal(double [][] data) {\n-        BigDecimal d[][] = new BigDecimal[data.length][data[0].length];\n-        for (int i=0;i<d.length;i++) {\n-            for (int j=0;j<data[i].length;j++) {\n-                d[i][j] = new BigDecimal(data[i][j]);\n-            }\n-        }\n-        return d;\n-    }\n-\n-    /** test dimensions */\n-    public void testDimensions() {\n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n-        assertEquals(\"testData row dimension\",3,m.getRowDimension());\n-        assertEquals(\"testData column dimension\",3,m.getColumnDimension());\n-        assertTrue(\"testData is square\",m.isSquare());\n-        assertEquals(\"testData2 row dimension\",m2.getRowDimension(),2);\n-        assertEquals(\"testData2 column dimension\",m2.getColumnDimension(),3);\n-        assertTrue(\"testData2 is not square\",!m2.isSquare());\n-    } \n-    \n-    /** test copy functions */\n-    public void testCopyFunctions() {\n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        BigMatrixImpl m2 = new BigMatrixImpl(m.getData());\n-        assertEquals(m2,m);\n-    }\n-    \n-    /** test constructors */\n-    public void testConstructors() {\n-        BigMatrix m1 = new BigMatrixImpl(testData);\n-        BigMatrix m2 = new BigMatrixImpl(testDataString);\n-        BigMatrix m3 = new BigMatrixImpl(asBigDecimal(testData));\n-        assertClose(\"double, string\", m1, m2, Double.MIN_VALUE);\n-        assertClose(\"double, BigDecimal\", m1, m3, Double.MIN_VALUE);\n-        assertClose(\"string, BigDecimal\", m2, m3, Double.MIN_VALUE);\n-        try {\n-            BigMatrix m4 = new BigMatrixImpl(new String[][] {{\"0\", \"hello\", \"1\"}});\n-            fail(\"Expecting NumberFormatException\");\n-        } catch (NumberFormatException ex) {\n-            // expected\n-        }\n-    }\n-    \n-    /** test add */\n-    public void testAdd() {\n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);\n-        BigMatrixImpl mPlusMInv = (BigMatrixImpl)m.add(mInv);\n-        double[][] sumEntries = asDouble(mPlusMInv.getData());\n-        for (int row = 0; row < m.getRowDimension(); row++) {\n-            for (int col = 0; col < m.getColumnDimension(); col++) {\n-                assertEquals(\"sum entry entry\",\n-                    testDataPlusInv[row][col],sumEntries[row][col],\n-                        entryTolerance);\n-            }\n-        }    \n-    }\n-    \n-    /** test add failure */\n-    public void testAddFail() {\n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n-        try {\n-            BigMatrixImpl mPlusMInv = (BigMatrixImpl)m.add(m2);\n-            fail(\"IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-    }\n-    \n-    /** test norm */\n-    public void testNorm() {\n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n-        assertEquals(\"testData norm\",14d,m.getNorm().doubleValue(),entryTolerance);\n-        assertEquals(\"testData2 norm\",7d,m2.getNorm().doubleValue(),entryTolerance);\n-    }\n-    \n-     /** test m-n = m + -n */\n-    public void testPlusMinus() {\n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        BigMatrixImpl m2 = new BigMatrixImpl(testDataInv);\n-        assertClose(\"m-n = m + -n\",m.subtract(m2),\n-            m2.scalarMultiply(new BigDecimal(-1d)).add(m),entryTolerance);\n-        try {\n-            BigMatrix a = m.subtract(new BigMatrixImpl(testData2));\n-            fail(\"Expecting illegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }      \n-    }\n-   \n-    /** test multiply */\n-     public void testMultiply() {\n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);\n-        BigMatrixImpl identity = new BigMatrixImpl(id);\n-        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n-        assertClose(\"inverse multiply\",m.multiply(mInv),\n-            identity,entryTolerance);\n-        assertClose(\"inverse multiply\",mInv.multiply(m),\n-            identity,entryTolerance);\n-        assertClose(\"identity multiply\",m.multiply(identity),\n-            m,entryTolerance);\n-        assertClose(\"identity multiply\",identity.multiply(mInv),\n-            mInv,entryTolerance);\n-        assertClose(\"identity multiply\",m2.multiply(identity),\n-            m2,entryTolerance); \n-        try {\n-            BigMatrix a = m.multiply(new BigMatrixImpl(bigSingular));\n-            fail(\"Expecting illegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }      \n-    }   \n-    \n-    //Additional Test for BigMatrixImplTest.testMultiply\n-\n-    private double[][] d3 = new double[][] {{1,2,3,4},{5,6,7,8}};\n-    private double[][] d4 = new double[][] {{1},{2},{3},{4}};\n-    private double[][] d5 = new double[][] {{30},{70}};\n-     \n-    public void testMultiply2() { \n-       BigMatrix m3 = new BigMatrixImpl(d3);\n-       BigMatrix m4 = new BigMatrixImpl(d4);\n-       BigMatrix m5 = new BigMatrixImpl(d5);\n-       assertClose(\"m3*m4=m5\", m3.multiply(m4), m5, entryTolerance);\n-   }  \n-        \n-    /** test isSingular */\n-    public void testIsSingular() {\n-        BigMatrixImpl m = new BigMatrixImpl(singular);\n-        assertTrue(\"singular\",m.isSingular());\n-        m = new BigMatrixImpl(bigSingular);\n-        assertTrue(\"big singular\",m.isSingular());\n-        m = new BigMatrixImpl(id);\n-        assertTrue(\"identity nonsingular\",!m.isSingular());\n-        m = new BigMatrixImpl(testData);\n-        assertTrue(\"testData nonsingular\",!m.isSingular());\n-    }\n-        \n-    /** test inverse */\n-    public void testInverse() {\n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        BigMatrix mInv = new BigMatrixImpl(testDataInv);\n-        assertClose(\"inverse\",mInv,m.inverse(),normTolerance);\n-        assertClose(\"inverse^2\",m,m.inverse().inverse(),10E-12);\n-        \n-        // Not square\n-        m = new BigMatrixImpl(testData2);\n-        try {\n-            m.inverse();\n-            fail(\"Expecting InvalidMatrixException\");\n-        } catch (InvalidMatrixException ex) {\n-            // expected\n-        }\n-        \n-        // Singular\n-        m = new BigMatrixImpl(singular);\n-        try {\n-            m.inverse();\n-            fail(\"Expecting InvalidMatrixException\");\n-        } catch (InvalidMatrixException ex) {\n-            // expected\n-        }\n-    }\n-    \n-    /** test solve */\n-    public void testSolve() {\n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        BigMatrix mInv = new BigMatrixImpl(testDataInv);\n-        // being a bit slothful here -- actually testing that X = A^-1 * B\n-        assertClose(\"inverse-operate\",\n-                    asDouble(mInv.operate(asBigDecimal(testVector))),\n-                    asDouble(m.solve(asBigDecimal(testVector))),\n-                    normTolerance);\n-        try {\n-            double[] x = asDouble(m.solve(asBigDecimal(testVector2)));\n-            fail(\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }       \n-        BigMatrix bs = new BigMatrixImpl(bigSingular);\n-        try {\n-            BigMatrix a = bs.solve(bs);\n-            fail(\"Expecting InvalidMatrixException\");\n-        } catch (InvalidMatrixException ex) {\n-            ;\n-        }\n-        try {\n-            BigMatrix a = m.solve(bs);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-        try {\n-            BigMatrix a = (new BigMatrixImpl(testData2)).solve(bs);\n-            fail(\"Expecting illegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        } \n-        try {\n-            (new BigMatrixImpl(testData2)).luDecompose();\n-            fail(\"Expecting InvalidMatrixException\");\n-        } catch (InvalidMatrixException ex) {\n-            ;\n-        }  \n-    }\n-    \n-    /** test determinant */\n-    public void testDeterminant() {       \n-        BigMatrix m = new BigMatrixImpl(bigSingular);\n-        assertEquals(\"singular determinant\",0,m.getDeterminant().doubleValue(),0);\n-        m = new BigMatrixImpl(detData);\n-        assertEquals(\"nonsingular test\",-3d,m.getDeterminant().doubleValue(),normTolerance);\n-        \n-        // Examples verified against R (version 1.8.1, Red Hat Linux 9)\n-        m = new BigMatrixImpl(detData2);\n-        assertEquals(\"nonsingular R test 1\",-2d,m.getDeterminant().doubleValue(),normTolerance);\n-        m = new BigMatrixImpl(testData);\n-        assertEquals(\"nonsingular  R test 2\",-1d,m.getDeterminant().doubleValue(),normTolerance);\n-\n-        try {\n-            double a = new BigMatrixImpl(testData2).getDeterminant().doubleValue();\n-            fail(\"Expecting InvalidMatrixException\");\n-        } catch (InvalidMatrixException ex) {\n-            ;\n-        }      \n-    }\n-    \n-    /** test trace */\n-    public void testTrace() {\n-        BigMatrix m = new BigMatrixImpl(id);\n-        assertEquals(\"identity trace\",3d,m.getTrace().doubleValue(),entryTolerance);\n-        m = new BigMatrixImpl(testData2);\n-        try {\n-            double x = m.getTrace().doubleValue();\n-            fail(\"Expecting illegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }      \n-    }\n-    \n-    /** test sclarAdd */\n-    public void testScalarAdd() {\n-        BigMatrix m = new BigMatrixImpl(testData);\n-        assertClose(\"scalar add\",new BigMatrixImpl(testDataPlus2),\n-            m.scalarAdd(new BigDecimal(2d)),entryTolerance);\n-    }\n-                    \n-    /** test operate */\n-    public void testOperate() {\n-        BigMatrix m = new BigMatrixImpl(id);\n-        double[] x = asDouble(m.operate(asBigDecimal(testVector)));\n-        assertClose(\"identity operate\",testVector,x,entryTolerance);\n-        m = new BigMatrixImpl(bigSingular);\n-        try {\n-            x = asDouble(m.operate(asBigDecimal(testVector)));\n-            fail(\"Expecting illegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }      \n-    }\n-    \n-    /** test transpose */\n-    public void testTranspose() {\n-        BigMatrix m = new BigMatrixImpl(testData);\n-        assertClose(\"inverse-transpose\",m.inverse().transpose(),\n-            m.transpose().inverse(),normTolerance);\n-        m = new BigMatrixImpl(testData2);\n-        BigMatrix mt = new BigMatrixImpl(testData2T);\n-        assertClose(\"transpose\",mt,m.transpose(),normTolerance);\n-    }\n-    \n-    /** test preMultiply by vector */\n-    public void testPremultiplyVector() {\n-        BigMatrix m = new BigMatrixImpl(testData);\n-        assertClose(\"premultiply\",asDouble(m.preMultiply(asBigDecimal(testVector))),preMultTest,normTolerance);\n-        m = new BigMatrixImpl(bigSingular);\n-        try {\n-            m.preMultiply(asBigDecimal(testVector));\n-            fail(\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }\n-    }\n-    \n-    public void testPremultiply() {\n-        BigMatrix m3 = new BigMatrixImpl(d3);\n-        BigMatrix m4 = new BigMatrixImpl(d4);\n-        BigMatrix m5 = new BigMatrixImpl(d5);\n-        assertClose(\"m3*m4=m5\", m4.preMultiply(m3), m5, entryTolerance);\n-        \n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);\n-        BigMatrixImpl identity = new BigMatrixImpl(id);\n-        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n-        assertClose(\"inverse multiply\",m.preMultiply(mInv),\n-                identity,entryTolerance);\n-        assertClose(\"inverse multiply\",mInv.preMultiply(m),\n-                identity,entryTolerance);\n-        assertClose(\"identity multiply\",m.preMultiply(identity),\n-                m,entryTolerance);\n-        assertClose(\"identity multiply\",identity.preMultiply(mInv),\n-                mInv,entryTolerance);\n-        try {\n-            BigMatrix a = m.preMultiply(new BigMatrixImpl(bigSingular));\n-            fail(\"Expecting illegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            ;\n-        }      \n-    }\n-    \n-    public void testGetVectors() {\n-        BigMatrix m = new BigMatrixImpl(testData);\n-        assertClose(\"get row\",m.getRowAsDoubleArray(0),testDataRow1,entryTolerance);\n-        assertClose(\"get col\",m.getColumnAsDoubleArray(2),testDataCol3,entryTolerance);\n-        try {\n-            double[] x = m.getRowAsDoubleArray(10);\n-            fail(\"expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            ;\n-        }\n-        try {\n-            double[] x = m.getColumnAsDoubleArray(-1);\n-            fail(\"expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            ;\n-        }\n-    }\n-      \n-    public void testLUDecomposition() throws Exception {\n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        BigMatrix lu = m.getLUMatrix();\n-        assertClose(\"LU decomposition\", lu, (BigMatrix) new BigMatrixImpl(testDataLU), normTolerance);\n-        verifyDecomposition(m, lu);\n-        m = new BigMatrixImpl(luData);\n-        lu = m.getLUMatrix();\n-        assertClose(\"LU decomposition\", lu, (BigMatrix) new BigMatrixImpl(luDataLUDecomposition), normTolerance);\n-        verifyDecomposition(m, lu);\n-        m = new BigMatrixImpl(testDataMinus);\n-        lu = m.getLUMatrix();\n-        verifyDecomposition(m, lu);\n-        m = new BigMatrixImpl(id);\n-        lu = m.getLUMatrix();\n-        verifyDecomposition(m, lu);\n-        try {\n-            m = new BigMatrixImpl(bigSingular); // singular\n-            lu = m.getLUMatrix();\n-            fail(\"Expecting InvalidMatrixException\");\n-        } catch (InvalidMatrixException ex) {\n-            // expected\n-        }\n-        try {\n-            m = new BigMatrixImpl(testData2);  // not square\n-            lu = m.getLUMatrix();\n-            fail(\"Expecting InvalidMatrixException\");\n-        } catch (InvalidMatrixException ex) {\n-            // expected\n-        }\n-    }\n-    \n-   /**\n-    * test submatrix accessors\n-    */\n-    public void testSubMatrix() {\n-        BigMatrix m = new BigMatrixImpl(subTestData);\n-        BigMatrix mRows23Cols00 = new BigMatrixImpl(subRows23Cols00);\n-        BigMatrix mRows00Cols33 = new BigMatrixImpl(subRows00Cols33);\n-        BigMatrix mRows01Cols23 = new BigMatrixImpl(subRows01Cols23);\n-        BigMatrix mRows02Cols13 = new BigMatrixImpl(subRows02Cols13);\n-        BigMatrix mRows03Cols12 = new BigMatrixImpl(subRows03Cols12);\n-        BigMatrix mRows03Cols123 = new BigMatrixImpl(subRows03Cols123);\n-        BigMatrix mRows20Cols123 = new BigMatrixImpl(subRows20Cols123);\n-        BigMatrix mRows31Cols31 = new BigMatrixImpl(subRows31Cols31);\n-        assertEquals(\"Rows23Cols00\", mRows23Cols00, \n-                m.getSubMatrix(2 , 3 , 0, 0));\n-        assertEquals(\"Rows00Cols33\", mRows00Cols33, \n-                m.getSubMatrix(0 , 0 , 3, 3));\n-        assertEquals(\"Rows01Cols23\", mRows01Cols23,\n-                m.getSubMatrix(0 , 1 , 2, 3));   \n-        assertEquals(\"Rows02Cols13\", mRows02Cols13,\n-                m.getSubMatrix(new int[] {0,2}, new int[] {1,3}));  \n-        assertEquals(\"Rows03Cols12\", mRows03Cols12,\n-                m.getSubMatrix(new int[] {0,3}, new int[] {1,2}));  \n-        assertEquals(\"Rows03Cols123\", mRows03Cols123,\n-                m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3})); \n-        assertEquals(\"Rows20Cols123\", mRows20Cols123,\n-                m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3})); \n-        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n-                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n-        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n-                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n-        \n-        try {\n-            m.getSubMatrix(1,0,2,4);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(-1,1,2,2);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(1,0,2,2);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(1,0,2,4);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(new int[] {}, new int[] {0});\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getSubMatrix(new int[] {0}, new int[] {4});\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-    }\n-    \n-    public void testGetColumnMatrix() {\n-        BigMatrix m = new BigMatrixImpl(subTestData);\n-        BigMatrix mColumn1 = new BigMatrixImpl(subColumn1);\n-        BigMatrix mColumn3 = new BigMatrixImpl(subColumn3);\n-        assertEquals(\"Column1\", mColumn1, \n-                m.getColumnMatrix(1));\n-        assertEquals(\"Column3\", mColumn3, \n-                m.getColumnMatrix(3));\n-        try {\n-            m.getColumnMatrix(-1);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getColumnMatrix(4);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-    }\n-    \n-    public void testGetRowMatrix() {\n-        BigMatrix m = new BigMatrixImpl(subTestData);\n-        BigMatrix mRow0 = new BigMatrixImpl(subRow0);\n-        BigMatrix mRow3 = new BigMatrixImpl(subRow3);\n-        assertEquals(\"Row0\", mRow0, \n-                m.getRowMatrix(0));\n-        assertEquals(\"Row3\", mRow3, \n-                m.getRowMatrix(3));\n-        try {\n-            m.getRowMatrix(-1);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-        try {\n-            m.getRowMatrix(4);\n-            fail(\"Expecting MatrixIndexException\");\n-        } catch (MatrixIndexException ex) {\n-            // expected\n-        }\n-    }\n-    \n-    public void testEqualsAndHashCode() {\n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        BigMatrixImpl m1 = (BigMatrixImpl) m.copy();\n-        BigMatrixImpl mt = (BigMatrixImpl) m.transpose();\n-        assertTrue(m.hashCode() != mt.hashCode());\n-        assertEquals(m.hashCode(), m1.hashCode());\n-        assertEquals(m, m);\n-        assertEquals(m, m1);\n-        assertFalse(m.equals(null));\n-        assertFalse(m.equals(mt));\n-        assertFalse(m.equals(new BigMatrixImpl(bigSingular)));\n-        // Different scales make BigDecimals, so matrices unequal\n-        m = new BigMatrixImpl(new String[][] {{\"2.0\"}});\n-        m1 = new BigMatrixImpl(new String[][] {{\"2.00\"}});\n-        assertTrue(m.hashCode() != m1.hashCode());\n-        assertFalse(m.equals(m1));\n-    }\n-    \n-    public void testToString() {\n-        BigMatrixImpl m = new BigMatrixImpl(testData);\n-        assertEquals(\"BigMatrixImpl{{1,2,3},{2,5,3},{1,0,8}}\",\n-                m.toString());\n-        m = new BigMatrixImpl();\n-        assertEquals(\"BigMatrixImpl{}\",\n-                m.toString());\n-    }\n-    \n-    //--------------- -----------------Protected methods\n-        \n-    /** verifies that two matrices are close (1-norm) */              \n-    protected void assertClose(String msg, BigMatrix m, BigMatrix n,\n-        double tolerance) {\n-        assertTrue(msg,m.subtract(n).getNorm().doubleValue() < tolerance);\n-    }\n-    \n-    /** verifies that two vectors are close (sup norm) */\n-    protected void assertClose(String msg, double[] m, double[] n,\n-        double tolerance) {\n-        if (m.length != n.length) {\n-            fail(\"vectors not same length\");\n-        }\n-        for (int i = 0; i < m.length; i++) {\n-            assertEquals(msg + \" \" +  i + \" elements differ\", \n-                m[i],n[i],tolerance);\n-        }\n-    }\n-    \n-    /** extracts the l  and u matrices from compact lu representation */\n-    protected void splitLU(BigMatrix lu, BigDecimal[][] lowerData, BigDecimal[][] upperData) throws InvalidMatrixException {\n-        if (!lu.isSquare() || lowerData.length != lowerData[0].length || upperData.length != upperData[0].length ||\n-                lowerData.length != upperData.length\n-                || lowerData.length != lu.getRowDimension()) {\n-            throw new InvalidMatrixException(\"incorrect dimensions\");\n-        }    \n-        int n = lu.getRowDimension();\n-        for (int i = 0; i < n; i++) {\n-            for (int j = 0; j < n; j++) {\n-                if (j < i) {\n-                    lowerData[i][j] = lu.getEntry(i, j);\n-                    upperData[i][j] = new BigDecimal(0);\n-                } else if (i == j) {\n-                    lowerData[i][j] = new BigDecimal(1);\n-                    upperData[i][j] = lu.getEntry(i, j);\n-                } else {\n-                    lowerData[i][j] = new BigDecimal(0);\n-                    upperData[i][j] = lu.getEntry(i, j);\n-                }   \n-            }\n-        }\n-    }\n-    \n-    /** Returns the result of applying the given row permutation to the matrix */\n-    protected BigMatrix permuteRows(BigMatrix matrix, int[] permutation) {\n-        if (!matrix.isSquare() || matrix.getRowDimension() != permutation.length) {\n-            throw new IllegalArgumentException(\"dimension mismatch\");\n-        }\n-        int n = matrix.getRowDimension();\n-        int m = matrix.getColumnDimension();\n-        BigDecimal out[][] = new BigDecimal[m][n];\n-        for (int i = 0; i < n; i++) {\n-            for (int j = 0; j < m; j++) {\n-                out[i][j] = matrix.getEntry(permutation[i], j);\n-            }\n-        }\n-        return new BigMatrixImpl(out);\n-    }\n-    \n-    /** Extracts l and u matrices from lu and verifies that matrix = l times u modulo permutation */\n-    protected void verifyDecomposition(BigMatrix matrix, BigMatrix lu) throws Exception{\n-        int n = matrix.getRowDimension();\n-        BigDecimal[][] lowerData = new BigDecimal[n][n];\n-        BigDecimal[][] upperData = new BigDecimal[n][n];\n-        splitLU(lu, lowerData, upperData);\n-        BigMatrix lower =new BigMatrixImpl(lowerData);\n-        BigMatrix upper = new BigMatrixImpl(upperData);\n-        int[] permutation = ((BigMatrixImpl) matrix).getPermutation();\n-        BigMatrix permuted = permuteRows(matrix, permutation);\n-        assertClose(\"lu decomposition does not work\", permuted,\n-                lower.multiply(upper), normTolerance);\n-    }\n-         \n-    /** Useful for debugging */\n-    private void dumpMatrix(BigMatrix m) {\n-          for (int i = 0; i < m.getRowDimension(); i++) {\n-              String os = \"\";\n-              for (int j = 0; j < m.getColumnDimension(); j++) {\n-                  os += m.getEntry(i, j) + \" \";\n-              }\n-              System.out.println(os);\n-          }\n-    }\n-        \n-}\n-\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.linear;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import java.math.BigDecimal;\n+\n+/**\n+ * Test cases for the {@link BigMatrixImpl} class.\n+ *\n+ * @version $Revision$ $Date$\n+ */\n+\n+public final class BigMatrixImplTest extends TestCase {\n+    \n+    // Test data for String constructors\n+    protected  String[][] testDataString = { {\"1\",\"2\",\"3\"}, {\"2\",\"5\",\"3\"}, {\"1\",\"0\",\"8\"} };\n+    \n+    // 3 x 3 identity matrix\n+    protected double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };\n+    \n+    // Test data for group operations\n+    protected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };\n+    protected double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};\n+    protected double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };\n+    protected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d}, \n+            {-1d,0d,-8d} };\n+    protected double[] testDataRow1 = {1d,2d,3d};\n+    protected double[] testDataCol3 = {3d,3d,8d};\n+    protected double[][] testDataInv = \n+        { {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };\n+    protected double[] preMultTest = {8,12,33};\n+    protected double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};\n+    protected double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};\n+    protected double[][] testDataPlusInv = \n+        { {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };\n+    \n+    // lu decomposition tests\n+    protected double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };\n+    protected double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d},\n+            {0.33333333333333,0d,0.33333333333333} };\n+    \n+    // singular matrices\n+    protected double[][] singular = { {2d,3d}, {2d,3d} };\n+    protected double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},\n+            {7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd\n+    protected double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };\n+    protected double[][] detData2 = { {1d, 3d}, {2d, 4d}};\n+    \n+    // vectors\n+    protected double[] testVector = {1,2,3};\n+    protected double[] testVector2 = {1,2,3,4};\n+    \n+    // submatrix accessor tests\n+    protected double[][] subTestData = {{1, 2, 3, 4}, {1.5, 2.5, 3.5, 4.5},\n+            {2, 4, 6, 8}, {4, 5, 6, 7}}; \n+    // array selections\n+    protected double[][] subRows02Cols13 = { {2, 4}, {4, 8}};\n+    protected double[][] subRows03Cols12 = { {2, 3}, {5, 6}};\n+    protected double[][] subRows03Cols123 = { {2, 3, 4} , {5, 6, 7}};\n+    // effective permutations\n+    protected double[][] subRows20Cols123 = { {4, 6, 8} , {2, 3, 4}};\n+    protected double[][] subRows31Cols31 = {{7, 5}, {4.5, 2.5}};\n+    // contiguous ranges\n+    protected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};\n+    protected double[][] subRows23Cols00 = {{2} , {4}};\n+    protected double[][] subRows00Cols33 = {{4}};\n+    // row matrices\n+    protected double[][] subRow0 = {{1,2,3,4}};\n+    protected double[][] subRow3 = {{4,5,6,7}};\n+    // column matrices\n+    protected double[][] subColumn1 = {{2}, {2.5}, {4}, {5}};\n+    protected double[][] subColumn3 = {{4}, {4.5}, {8}, {7}};\n+    \n+    // tolerances\n+    protected double entryTolerance = 10E-16;\n+    protected double normTolerance = 10E-14;\n+    \n+    public BigMatrixImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {\n+        \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(BigMatrixImplTest.class);\n+        suite.setName(\"BigMatrixImpl Tests\");\n+        return suite;\n+    }\n+\n+    public static final double[] asDouble(BigDecimal[] data) {\n+        double d[] = new double[data.length];\n+        for (int i=0;i<d.length;i++) {\n+            d[i] = data[i].doubleValue();\n+        }\n+        return d;\n+    }\n+\n+    public static final double[][] asDouble(BigDecimal[][] data) {\n+        double d[][] = new double[data.length][data[0].length];\n+        for (int i=0;i<d.length;i++) {\n+            for (int j=0;j<d[i].length;j++)\n+            d[i][j] = data[i][j].doubleValue();\n+        }\n+        return d;\n+    }\n+\n+    public static final BigDecimal[] asBigDecimal(double [] data) {\n+        BigDecimal d[] = new BigDecimal[data.length];\n+        for (int i=0;i<d.length;i++) {\n+            d[i] = new BigDecimal(data[i]);\n+        }\n+        return d;\n+    }\n+\n+    public static final BigDecimal[][] asBigDecimal(double [][] data) {\n+        BigDecimal d[][] = new BigDecimal[data.length][data[0].length];\n+        for (int i=0;i<d.length;i++) {\n+            for (int j=0;j<data[i].length;j++) {\n+                d[i][j] = new BigDecimal(data[i][j]);\n+            }\n+        }\n+        return d;\n+    }\n+\n+    /** test dimensions */\n+    public void testDimensions() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n+        assertEquals(\"testData row dimension\",3,m.getRowDimension());\n+        assertEquals(\"testData column dimension\",3,m.getColumnDimension());\n+        assertTrue(\"testData is square\",m.isSquare());\n+        assertEquals(\"testData2 row dimension\",m2.getRowDimension(),2);\n+        assertEquals(\"testData2 column dimension\",m2.getColumnDimension(),3);\n+        assertTrue(\"testData2 is not square\",!m2.isSquare());\n+    } \n+    \n+    /** test copy functions */\n+    public void testCopyFunctions() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrixImpl m2 = new BigMatrixImpl(m.getData());\n+        assertEquals(m2,m);\n+    }\n+    \n+    /** test constructors */\n+    public void testConstructors() {\n+        BigMatrix m1 = new BigMatrixImpl(testData);\n+        BigMatrix m2 = new BigMatrixImpl(testDataString);\n+        BigMatrix m3 = new BigMatrixImpl(asBigDecimal(testData));\n+        assertClose(\"double, string\", m1, m2, Double.MIN_VALUE);\n+        assertClose(\"double, BigDecimal\", m1, m3, Double.MIN_VALUE);\n+        assertClose(\"string, BigDecimal\", m2, m3, Double.MIN_VALUE);\n+        try {\n+            BigMatrix m4 = new BigMatrixImpl(new String[][] {{\"0\", \"hello\", \"1\"}});\n+            fail(\"Expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    /** test add */\n+    public void testAdd() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);\n+        BigMatrixImpl mPlusMInv = (BigMatrixImpl)m.add(mInv);\n+        double[][] sumEntries = asDouble(mPlusMInv.getData());\n+        for (int row = 0; row < m.getRowDimension(); row++) {\n+            for (int col = 0; col < m.getColumnDimension(); col++) {\n+                assertEquals(\"sum entry entry\",\n+                    testDataPlusInv[row][col],sumEntries[row][col],\n+                        entryTolerance);\n+            }\n+        }    \n+    }\n+    \n+    /** test add failure */\n+    public void testAddFail() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n+        try {\n+            BigMatrixImpl mPlusMInv = (BigMatrixImpl)m.add(m2);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    /** test norm */\n+    public void testNorm() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n+        assertEquals(\"testData norm\",14d,m.getNorm().doubleValue(),entryTolerance);\n+        assertEquals(\"testData2 norm\",7d,m2.getNorm().doubleValue(),entryTolerance);\n+    }\n+    \n+     /** test m-n = m + -n */\n+    public void testPlusMinus() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrixImpl m2 = new BigMatrixImpl(testDataInv);\n+        assertClose(\"m-n = m + -n\",m.subtract(m2),\n+            m2.scalarMultiply(new BigDecimal(-1d)).add(m),entryTolerance);\n+        try {\n+            BigMatrix a = m.subtract(new BigMatrixImpl(testData2));\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }      \n+    }\n+   \n+    /** test multiply */\n+     public void testMultiply() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);\n+        BigMatrixImpl identity = new BigMatrixImpl(id);\n+        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n+        assertClose(\"inverse multiply\",m.multiply(mInv),\n+            identity,entryTolerance);\n+        assertClose(\"inverse multiply\",mInv.multiply(m),\n+            identity,entryTolerance);\n+        assertClose(\"identity multiply\",m.multiply(identity),\n+            m,entryTolerance);\n+        assertClose(\"identity multiply\",identity.multiply(mInv),\n+            mInv,entryTolerance);\n+        assertClose(\"identity multiply\",m2.multiply(identity),\n+            m2,entryTolerance); \n+        try {\n+            BigMatrix a = m.multiply(new BigMatrixImpl(bigSingular));\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }      \n+    }   \n+    \n+    //Additional Test for BigMatrixImplTest.testMultiply\n+\n+    private double[][] d3 = new double[][] {{1,2,3,4},{5,6,7,8}};\n+    private double[][] d4 = new double[][] {{1},{2},{3},{4}};\n+    private double[][] d5 = new double[][] {{30},{70}};\n+     \n+    public void testMultiply2() { \n+       BigMatrix m3 = new BigMatrixImpl(d3);\n+       BigMatrix m4 = new BigMatrixImpl(d4);\n+       BigMatrix m5 = new BigMatrixImpl(d5);\n+       assertClose(\"m3*m4=m5\", m3.multiply(m4), m5, entryTolerance);\n+   }  \n+        \n+    /** test isSingular */\n+    public void testIsSingular() {\n+        BigMatrixImpl m = new BigMatrixImpl(singular);\n+        assertTrue(\"singular\",m.isSingular());\n+        m = new BigMatrixImpl(bigSingular);\n+        assertTrue(\"big singular\",m.isSingular());\n+        m = new BigMatrixImpl(id);\n+        assertTrue(\"identity nonsingular\",!m.isSingular());\n+        m = new BigMatrixImpl(testData);\n+        assertTrue(\"testData nonsingular\",!m.isSingular());\n+    }\n+        \n+    /** test inverse */\n+    public void testInverse() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrix mInv = new BigMatrixImpl(testDataInv);\n+        assertClose(\"inverse\",mInv,m.inverse(),normTolerance);\n+        assertClose(\"inverse^2\",m,m.inverse().inverse(),10E-12);\n+        \n+        // Not square\n+        m = new BigMatrixImpl(testData2);\n+        try {\n+            m.inverse();\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            // expected\n+        }\n+        \n+        // Singular\n+        m = new BigMatrixImpl(singular);\n+        try {\n+            m.inverse();\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    /** test solve */\n+    public void testSolve() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrix mInv = new BigMatrixImpl(testDataInv);\n+        // being a bit slothful here -- actually testing that X = A^-1 * B\n+        assertClose(\"inverse-operate\",\n+                    asDouble(mInv.operate(asBigDecimal(testVector))),\n+                    asDouble(m.solve(asBigDecimal(testVector))),\n+                    normTolerance);\n+        try {\n+            double[] x = asDouble(m.solve(asBigDecimal(testVector2)));\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }       \n+        BigMatrix bs = new BigMatrixImpl(bigSingular);\n+        try {\n+            BigMatrix a = bs.solve(bs);\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            ;\n+        }\n+        try {\n+            BigMatrix a = m.solve(bs);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            BigMatrix a = (new BigMatrixImpl(testData2)).solve(bs);\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        } \n+        try {\n+            (new BigMatrixImpl(testData2)).luDecompose();\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            ;\n+        }  \n+    }\n+    \n+    /** test determinant */\n+    public void testDeterminant() {       \n+        BigMatrix m = new BigMatrixImpl(bigSingular);\n+        assertEquals(\"singular determinant\",0,m.getDeterminant().doubleValue(),0);\n+        m = new BigMatrixImpl(detData);\n+        assertEquals(\"nonsingular test\",-3d,m.getDeterminant().doubleValue(),normTolerance);\n+        \n+        // Examples verified against R (version 1.8.1, Red Hat Linux 9)\n+        m = new BigMatrixImpl(detData2);\n+        assertEquals(\"nonsingular R test 1\",-2d,m.getDeterminant().doubleValue(),normTolerance);\n+        m = new BigMatrixImpl(testData);\n+        assertEquals(\"nonsingular  R test 2\",-1d,m.getDeterminant().doubleValue(),normTolerance);\n+\n+        try {\n+            double a = new BigMatrixImpl(testData2).getDeterminant().doubleValue();\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            ;\n+        }      \n+    }\n+    \n+    /** test trace */\n+    public void testTrace() {\n+        BigMatrix m = new BigMatrixImpl(id);\n+        assertEquals(\"identity trace\",3d,m.getTrace().doubleValue(),entryTolerance);\n+        m = new BigMatrixImpl(testData2);\n+        try {\n+            double x = m.getTrace().doubleValue();\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }      \n+    }\n+    \n+    /** test sclarAdd */\n+    public void testScalarAdd() {\n+        BigMatrix m = new BigMatrixImpl(testData);\n+        assertClose(\"scalar add\",new BigMatrixImpl(testDataPlus2),\n+            m.scalarAdd(new BigDecimal(2d)),entryTolerance);\n+    }\n+                    \n+    /** test operate */\n+    public void testOperate() {\n+        BigMatrix m = new BigMatrixImpl(id);\n+        double[] x = asDouble(m.operate(asBigDecimal(testVector)));\n+        assertClose(\"identity operate\",testVector,x,entryTolerance);\n+        m = new BigMatrixImpl(bigSingular);\n+        try {\n+            x = asDouble(m.operate(asBigDecimal(testVector)));\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }      \n+    }\n+    \n+    /** test transpose */\n+    public void testTranspose() {\n+        BigMatrix m = new BigMatrixImpl(testData);\n+        assertClose(\"inverse-transpose\",m.inverse().transpose(),\n+            m.transpose().inverse(),normTolerance);\n+        m = new BigMatrixImpl(testData2);\n+        BigMatrix mt = new BigMatrixImpl(testData2T);\n+        assertClose(\"transpose\",mt,m.transpose(),normTolerance);\n+    }\n+    \n+    /** test preMultiply by vector */\n+    public void testPremultiplyVector() {\n+        BigMatrix m = new BigMatrixImpl(testData);\n+        assertClose(\"premultiply\",asDouble(m.preMultiply(asBigDecimal(testVector))),preMultTest,normTolerance);\n+        m = new BigMatrixImpl(bigSingular);\n+        try {\n+            m.preMultiply(asBigDecimal(testVector));\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testPremultiply() {\n+        BigMatrix m3 = new BigMatrixImpl(d3);\n+        BigMatrix m4 = new BigMatrixImpl(d4);\n+        BigMatrix m5 = new BigMatrixImpl(d5);\n+        assertClose(\"m3*m4=m5\", m4.preMultiply(m3), m5, entryTolerance);\n+        \n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);\n+        BigMatrixImpl identity = new BigMatrixImpl(id);\n+        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n+        assertClose(\"inverse multiply\",m.preMultiply(mInv),\n+                identity,entryTolerance);\n+        assertClose(\"inverse multiply\",mInv.preMultiply(m),\n+                identity,entryTolerance);\n+        assertClose(\"identity multiply\",m.preMultiply(identity),\n+                m,entryTolerance);\n+        assertClose(\"identity multiply\",identity.preMultiply(mInv),\n+                mInv,entryTolerance);\n+        try {\n+            BigMatrix a = m.preMultiply(new BigMatrixImpl(bigSingular));\n+            fail(\"Expecting illegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }      \n+    }\n+    \n+    public void testGetVectors() {\n+        BigMatrix m = new BigMatrixImpl(testData);\n+        assertClose(\"get row\",m.getRowAsDoubleArray(0),testDataRow1,entryTolerance);\n+        assertClose(\"get col\",m.getColumnAsDoubleArray(2),testDataCol3,entryTolerance);\n+        try {\n+            double[] x = m.getRowAsDoubleArray(10);\n+            fail(\"expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            ;\n+        }\n+        try {\n+            double[] x = m.getColumnAsDoubleArray(-1);\n+            fail(\"expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            ;\n+        }\n+    }\n+      \n+    public void testLUDecomposition() throws Exception {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrix lu = m.getLUMatrix();\n+        assertClose(\"LU decomposition\", lu, (BigMatrix) new BigMatrixImpl(testDataLU), normTolerance);\n+        verifyDecomposition(m, lu);\n+        m = new BigMatrixImpl(luData);\n+        lu = m.getLUMatrix();\n+        assertClose(\"LU decomposition\", lu, (BigMatrix) new BigMatrixImpl(luDataLUDecomposition), normTolerance);\n+        verifyDecomposition(m, lu);\n+        m = new BigMatrixImpl(testDataMinus);\n+        lu = m.getLUMatrix();\n+        verifyDecomposition(m, lu);\n+        m = new BigMatrixImpl(id);\n+        lu = m.getLUMatrix();\n+        verifyDecomposition(m, lu);\n+        try {\n+            m = new BigMatrixImpl(bigSingular); // singular\n+            lu = m.getLUMatrix();\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            // expected\n+        }\n+        try {\n+            m = new BigMatrixImpl(testData2);  // not square\n+            lu = m.getLUMatrix();\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            // expected\n+        }\n+    }\n+    \n+   /**\n+    * test submatrix accessors\n+    */\n+    public void testSubMatrix() {\n+        BigMatrix m = new BigMatrixImpl(subTestData);\n+        BigMatrix mRows23Cols00 = new BigMatrixImpl(subRows23Cols00);\n+        BigMatrix mRows00Cols33 = new BigMatrixImpl(subRows00Cols33);\n+        BigMatrix mRows01Cols23 = new BigMatrixImpl(subRows01Cols23);\n+        BigMatrix mRows02Cols13 = new BigMatrixImpl(subRows02Cols13);\n+        BigMatrix mRows03Cols12 = new BigMatrixImpl(subRows03Cols12);\n+        BigMatrix mRows03Cols123 = new BigMatrixImpl(subRows03Cols123);\n+        BigMatrix mRows20Cols123 = new BigMatrixImpl(subRows20Cols123);\n+        BigMatrix mRows31Cols31 = new BigMatrixImpl(subRows31Cols31);\n+        assertEquals(\"Rows23Cols00\", mRows23Cols00, \n+                m.getSubMatrix(2 , 3 , 0, 0));\n+        assertEquals(\"Rows00Cols33\", mRows00Cols33, \n+                m.getSubMatrix(0 , 0 , 3, 3));\n+        assertEquals(\"Rows01Cols23\", mRows01Cols23,\n+                m.getSubMatrix(0 , 1 , 2, 3));   \n+        assertEquals(\"Rows02Cols13\", mRows02Cols13,\n+                m.getSubMatrix(new int[] {0,2}, new int[] {1,3}));  \n+        assertEquals(\"Rows03Cols12\", mRows03Cols12,\n+                m.getSubMatrix(new int[] {0,3}, new int[] {1,2}));  \n+        assertEquals(\"Rows03Cols123\", mRows03Cols123,\n+                m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3})); \n+        assertEquals(\"Rows20Cols123\", mRows20Cols123,\n+                m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3})); \n+        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n+                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n+        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n+                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n+        \n+        try {\n+            m.getSubMatrix(1,0,2,4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(-1,1,2,2);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(1,0,2,2);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(1,0,2,4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(new int[] {}, new int[] {0});\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(new int[] {0}, new int[] {4});\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testGetColumnMatrix() {\n+        BigMatrix m = new BigMatrixImpl(subTestData);\n+        BigMatrix mColumn1 = new BigMatrixImpl(subColumn1);\n+        BigMatrix mColumn3 = new BigMatrixImpl(subColumn3);\n+        assertEquals(\"Column1\", mColumn1, \n+                m.getColumnMatrix(1));\n+        assertEquals(\"Column3\", mColumn3, \n+                m.getColumnMatrix(3));\n+        try {\n+            m.getColumnMatrix(-1);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getColumnMatrix(4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testGetRowMatrix() {\n+        BigMatrix m = new BigMatrixImpl(subTestData);\n+        BigMatrix mRow0 = new BigMatrixImpl(subRow0);\n+        BigMatrix mRow3 = new BigMatrixImpl(subRow3);\n+        assertEquals(\"Row0\", mRow0, \n+                m.getRowMatrix(0));\n+        assertEquals(\"Row3\", mRow3, \n+                m.getRowMatrix(3));\n+        try {\n+            m.getRowMatrix(-1);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getRowMatrix(4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testEqualsAndHashCode() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        BigMatrixImpl m1 = (BigMatrixImpl) m.copy();\n+        BigMatrixImpl mt = (BigMatrixImpl) m.transpose();\n+        assertTrue(m.hashCode() != mt.hashCode());\n+        assertEquals(m.hashCode(), m1.hashCode());\n+        assertEquals(m, m);\n+        assertEquals(m, m1);\n+        assertFalse(m.equals(null));\n+        assertFalse(m.equals(mt));\n+        assertFalse(m.equals(new BigMatrixImpl(bigSingular)));\n+        // Different scales make BigDecimals, so matrices unequal\n+        m = new BigMatrixImpl(new String[][] {{\"2.0\"}});\n+        m1 = new BigMatrixImpl(new String[][] {{\"2.00\"}});\n+        assertTrue(m.hashCode() != m1.hashCode());\n+        assertFalse(m.equals(m1));\n+    }\n+    \n+    public void testToString() {\n+        BigMatrixImpl m = new BigMatrixImpl(testData);\n+        assertEquals(\"BigMatrixImpl{{1,2,3},{2,5,3},{1,0,8}}\",\n+                m.toString());\n+        m = new BigMatrixImpl();\n+        assertEquals(\"BigMatrixImpl{}\",\n+                m.toString());\n+    }\n+    \n+    //--------------- -----------------Protected methods\n+        \n+    /** verifies that two matrices are close (1-norm) */              \n+    protected void assertClose(String msg, BigMatrix m, BigMatrix n,\n+        double tolerance) {\n+        assertTrue(msg,m.subtract(n).getNorm().doubleValue() < tolerance);\n+    }\n+    \n+    /** verifies that two vectors are close (sup norm) */\n+    protected void assertClose(String msg, double[] m, double[] n,\n+        double tolerance) {\n+        if (m.length != n.length) {\n+            fail(\"vectors not same length\");\n+        }\n+        for (int i = 0; i < m.length; i++) {\n+            assertEquals(msg + \" \" +  i + \" elements differ\", \n+                m[i],n[i],tolerance);\n+        }\n+    }\n+    \n+    /** extracts the l  and u matrices from compact lu representation */\n+    protected void splitLU(BigMatrix lu, BigDecimal[][] lowerData, BigDecimal[][] upperData) throws InvalidMatrixException {\n+        if (!lu.isSquare() || lowerData.length != lowerData[0].length || upperData.length != upperData[0].length ||\n+                lowerData.length != upperData.length\n+                || lowerData.length != lu.getRowDimension()) {\n+            throw new InvalidMatrixException(\"incorrect dimensions\");\n+        }    \n+        int n = lu.getRowDimension();\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                if (j < i) {\n+                    lowerData[i][j] = lu.getEntry(i, j);\n+                    upperData[i][j] = new BigDecimal(0);\n+                } else if (i == j) {\n+                    lowerData[i][j] = new BigDecimal(1);\n+                    upperData[i][j] = lu.getEntry(i, j);\n+                } else {\n+                    lowerData[i][j] = new BigDecimal(0);\n+                    upperData[i][j] = lu.getEntry(i, j);\n+                }   \n+            }\n+        }\n+    }\n+    \n+    /** Returns the result of applying the given row permutation to the matrix */\n+    protected BigMatrix permuteRows(BigMatrix matrix, int[] permutation) {\n+        if (!matrix.isSquare() || matrix.getRowDimension() != permutation.length) {\n+            throw new IllegalArgumentException(\"dimension mismatch\");\n+        }\n+        int n = matrix.getRowDimension();\n+        int m = matrix.getColumnDimension();\n+        BigDecimal out[][] = new BigDecimal[m][n];\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < m; j++) {\n+                out[i][j] = matrix.getEntry(permutation[i], j);\n+            }\n+        }\n+        return new BigMatrixImpl(out);\n+    }\n+    \n+    /** Extracts l and u matrices from lu and verifies that matrix = l times u modulo permutation */\n+    protected void verifyDecomposition(BigMatrix matrix, BigMatrix lu) throws Exception{\n+        int n = matrix.getRowDimension();\n+        BigDecimal[][] lowerData = new BigDecimal[n][n];\n+        BigDecimal[][] upperData = new BigDecimal[n][n];\n+        splitLU(lu, lowerData, upperData);\n+        BigMatrix lower =new BigMatrixImpl(lowerData);\n+        BigMatrix upper = new BigMatrixImpl(upperData);\n+        int[] permutation = ((BigMatrixImpl) matrix).getPermutation();\n+        BigMatrix permuted = permuteRows(matrix, permutation);\n+        assertClose(\"lu decomposition does not work\", permuted,\n+                lower.multiply(upper), normTolerance);\n+    }\n+         \n+    /** Useful for debugging */\n+    private void dumpMatrix(BigMatrix m) {\n+          for (int i = 0; i < m.getRowDimension(); i++) {\n+              String os = \"\";\n+              for (int j = 0; j < m.getColumnDimension(); j++) {\n+                  os += m.getEntry(i, j) + \" \";\n+              }\n+              System.out.println(os);\n+          }\n+    }\n+        \n+}\n+\n--- a/src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java\n+++ b/src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2004/12/06 05:49:44 $\n+ * @version $Revision$ $Date$\n  */\n public class InvalidMatrixExceptionTest extends TestCase {\n     /**\n--- a/src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java\n+++ b/src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2004/12/06 05:49:44 $\n+ * @version $Revision$ $Date$\n  */\n public class MatrixIndexExceptionTest extends TestCase {\n     /**\n--- a/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n+++ b/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n /**\n  * Test cases for the {@link MatrixUtils} class.\n  *\n- * @version $Revision: 1.3 $ $Date: 2004/10/28 03:02:34 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class MatrixUtilsTest extends TestCase {\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n /**\n  * Test cases for the {@link RealMatrixImpl} class.\n  *\n- * @version $Revision: 1.20 $ $Date: 2004/10/12 06:19:50 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class RealMatrixImplTest extends TestCase {\n--- a/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n /**\n  * Test cases for the EmpiricalDistribution class\n  *\n- * @version $Revision: 1.19 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class EmpiricalDistributionTest extends RetryTestCase {\n--- a/src/test/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n /**\n  * Test cases for the RandomData class.\n  *\n- * @version $Revision: 1.17 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class RandomDataTest extends RetryTestCase {\n--- a/src/test/org/apache/commons/math/random/ValueServerTest.java\n+++ b/src/test/org/apache/commons/math/random/ValueServerTest.java\n /**\n  * Test cases for the ValueServer class.\n  *\n- * @version $Revision: 1.17 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class ValueServerTest extends RetryTestCase {\n--- a/src/test/org/apache/commons/math/special/BetaTest.java\n+++ b/src/test/org/apache/commons/math/special/BetaTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.8 $ $Date: 2004/02/21 21:35:17 $\n+ * @version $Revision$ $Date$\n  */\n public class BetaTest extends TestCase {\n     /**\n--- a/src/test/org/apache/commons/math/special/ErfTest.java\n+++ b/src/test/org/apache/commons/math/special/ErfTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2004/05/05 19:54:58 $\n+ * @version $Revision$ $Date$\n  */\n public class ErfTest extends TestCase {\n \n--- a/src/test/org/apache/commons/math/special/GammaTest.java\n+++ b/src/test/org/apache/commons/math/special/GammaTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.10 $ $Date: 2004/06/07 20:30:16 $\n+ * @version $Revision$ $Date$\n  */\n public class GammaTest extends TestCase {\n     /**\n--- a/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n+++ b/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n \n /**\n  * Certified data test cases.\n- * @version $Revision: 1.19 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n public class CertifiedDataTest extends TestCase  {\n \n--- a/src/test/org/apache/commons/math/stat/FrequencyTest.java\n+++ b/src/test/org/apache/commons/math/stat/FrequencyTest.java\n /**\n  * Test cases for the {@link Frequency} class.\n  *\n- * @version $Revision: 1.15 $ $Date: 2004/09/21 03:03:54 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class FrequencyTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n+++ b/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n \n /**\n  * Test cases for the {@link StatUtils} class.\n- * @version $Revision: 1.19 $ $Date: 2004/07/17 22:01:39 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class StatUtilsTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.8 $ $Date: 2004/12/06 05:49:44 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class CertifiedDataAbstractTest extends TestCase {\n \t\n--- a/src/test/org/apache/commons/math/stat/data/LewTest.java\n+++ b/src/test/org/apache/commons/math/stat/data/LewTest.java\n package org.apache.commons.math.stat.data;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2004/03/18 05:52:37 $\n+ * @version $Revision$ $Date$\n  */\n public class LewTest extends CertifiedDataAbstractTest {\n \n--- a/src/test/org/apache/commons/math/stat/data/LotteryTest.java\n+++ b/src/test/org/apache/commons/math/stat/data/LotteryTest.java\n package org.apache.commons.math.stat.data;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2004/03/18 05:52:37 $\n+ * @version $Revision$ $Date$\n  */\n public class LotteryTest extends CertifiedDataAbstractTest {\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java\n /**\n  * Tests for AbstractUnivariateStatistic \n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n public class AbstractUnivariateStatisticTest extends TestCase {\n     \n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java\n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class DescriptiveStatisticsImplTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class DescriptiveStatisticsTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/descriptive/InteractionTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/InteractionTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n public class InteractionTest extends TestCase {\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java\n import org.apache.commons.math.util.NumberTransformer;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n public class ListUnivariateImpl extends DescriptiveStatistics implements Serializable {\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java\n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class ListUnivariateImplTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java\n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class MixedListUnivariateImplTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java\n /**\n  * Test cases for the {@link StatisticalSummaryValues} class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class StatisticalSummaryValuesTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n \n /**\n  * Test cases for {@link StorelessUnivariateStatistic} classes.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class StorelessUnivariateStatisticAbstractTest\n     extends UnivariateStatisticAbstractTest {\n--- a/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java\n /**\n  * Test cases for the {@link DescriptiveStatistics} class.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class SummaryStatisticsImplTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:19 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class UnivariateStatisticAbstractTest extends TestCase {\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java\n \n /**\n  * Test cases for the {@link FirstMoment} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class FirstMomentTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java\n \n /**\n  * Test cases for the {@link FourthMoment} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class FourthMomentTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class GeometricMeanTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class KurtosisTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/MeanTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/MeanTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class MeanTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java\n \n /**\n  * Test cases for the {@link SecondMoment} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class SecondMomentTest extends StorelessUnivariateStatisticAbstractTest {\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java\n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class SkewnessTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java\n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n  * \n- * @version $Revision: 1.2 $ $Date: 2004/10/11 06:54:05 $\n+ * @version $Revision$ $Date$\n  */\n public class StandardDeviationTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java\n \n /**\n  * Test cases for the {@link ThirdMoment} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class ThirdMomentTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java\n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n  * \n- * @version $Revision: 1.3 $ $Date: 2004/10/11 04:54:09 $\n+ * @version $Revision$ $Date$\n  */\n public class VarianceTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class MaxTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/rank/MedianTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/rank/MedianTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class MedianTest extends UnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class MinTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class PercentileTest extends UnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/summary/ProductTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/summary/ProductTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class ProductTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class SumLogTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java\n /**\n  * Test cases for the {@link SumOfSquares} class.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class SumSqTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/descriptive/summary/SumTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/summary/SumTest.java\n \n /**\n  * Test cases for the {@link Sum} class.\n- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n public class SumTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n /**\n  * Test cases for the ChiSquareTestImpl class.\n  *\n- * @version $Revision: 1.5 $ $Date: 2004/12/10 05:18:16 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class ChiSquareTestTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/inference/TTestTest.java\n+++ b/src/test/org/apache/commons/math/stat/inference/TTestTest.java\n /**\n  * Test cases for the TTestImpl class.\n  *\n- * @version $Revision: 1.7 $ $Date: 2004/10/08 05:08:20 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class TTestTest extends TestCase {\n--- a/src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n /**\n  * Test cases for the TestStatistic class.\n  *\n- * @version $Revision: 1.4 $ $Date: 2004/12/10 05:18:16 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class SimpleRegressionTest extends TestCase {\n--- a/src/test/org/apache/commons/math/util/ContinuedFractionTest.java\n+++ b/src/test/org/apache/commons/math/util/ContinuedFractionTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.8 $ $Date: 2004/02/21 21:35:18 $\n+ * @version $Revision$ $Date$\n  */\n public class ContinuedFractionTest extends TestCase {\n \t/**\n--- a/src/test/org/apache/commons/math/util/DefaultTransformerTest.java\n+++ b/src/test/org/apache/commons/math/util/DefaultTransformerTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.12 $ $Date: 2004/05/23 21:34:19 $\n+ * @version $Revision$ $Date$\n  */\n public class DefaultTransformerTest extends TestCase {\n     /**\n--- a/src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java\n+++ b/src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java\n /**\n  * This class contains test cases for the ExpandableDoubleArray.\n  * \n- * @version $Revision: 1.9 $ $Date: 2004/02/21 21:35:18 $\n+ * @version $Revision$ $Date$\n  */\n public abstract class DoubleArrayAbstractTest extends TestCase {\n \n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n /**\n  * Test cases for the MathUtils class.\n  *\n- * @version $Revision: 1.15 $ $Date$\n+ * @version $Revision$ $Date$\n  */\n public final class MathUtilsTest extends TestCase {\n \n--- a/src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java\n+++ b/src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java\n /**\n  * This class contains test cases for the ResizableDoubleArray.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/06/14 21:41:33 $\n+ * @version $Revision$ $Date$\n  */\n public class ResizableDoubleArrayTest extends DoubleArrayAbstractTest {\n     \n--- a/src/test/org/apache/commons/math/util/TestBean.java\n+++ b/src/test/org/apache/commons/math/util/TestBean.java\n package org.apache.commons.math.util;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2004/02/21 21:35:18 $\n+ * @version $Revision$ $Date$\n  */\n public class TestBean {\n     private Double x = new Double(1.0);\n--- a/src/test/org/apache/commons/math/util/TransformerMapTest.java\n+++ b/src/test/org/apache/commons/math/util/TransformerMapTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2004/02/21 21:35:18 $\n+ * @version $Revision$ $Date$\n  */\n public class TransformerMapTest extends TestCase {\n     /**", "timestamp": 1109423512, "metainfo": ""}