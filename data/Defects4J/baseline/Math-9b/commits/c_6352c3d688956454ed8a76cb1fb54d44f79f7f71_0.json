{"sha": "6352c3d688956454ed8a76cb1fb54d44f79f7f71", "log": "MATH-795:   - Added default implementation to RealVector RealVector.projection(RealVector)   - Removed implementation in concrete classes (to avoid code duplication).   - Created unit tests accordingly.     ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealVector projection(RealVector v) {\n-        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));\n-    }\n-\n-    /** {@inheritDoc} */\n-    @Override\n     public RealMatrix outerProduct(RealVector v) {\n         if (v instanceof ArrayRealVector) {\n             final double[] vData = ((ArrayRealVector) v).data;\n--- a/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealVector projection(RealVector v) {\n-        checkVectorDimensions(v.getDimension());\n-        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));\n-    }\n-\n-    /** {@inheritDoc} */\n-    @Override\n     public void setEntry(int index, double value) {\n         checkIndex(index);\n         if (!isDefaultValue(value)) {\n--- a/src/main/java/org/apache/commons/math3/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RealVector.java\n      *\n      * @param v vector onto which instance must be projected.\n      * @return projection of the instance onto {@code v}.\n+     * @throws MathArithmeticException if {@code this} or {@code v} is the null\n+     * vector\n      * @throws org.apache.commons.math3.exception.DimensionMismatchException\n      * if {@code v} is not the same size as this vector.\n      */\n-    public abstract RealVector projection(RealVector v);\n+    public RealVector projection(final RealVector v) {\n+        final double norm2 = v.dotProduct(v);\n+        if (norm2 == 0.0) {\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n+        }\n+        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));\n+    }\n \n     /**\n      * Set all elements to a single value.\n \n             /** {@inheritDoc} */\n             @Override\n-            public RealVector projection(RealVector w) {\n-                return v.projection(w);\n-            }\n-\n-            /** {@inheritDoc} */\n-            @Override\n             public RealMatrix outerProduct(RealVector w) {\n                 return v.outerProduct(w);\n             }\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n             throw unsupported();\n         }\n \n-        @Override\n-        public RealVector projection(RealVector v) {\n-            throw unsupported();\n-        }\n-\n         public RealVector projection(double[] v) {\n             throw unsupported();\n         }\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n         doTestOuterProduct(true);\n     }\n \n+    private void doTestProjection(final boolean mixed) {\n+        final double x = getPreferredEntryValue();\n+        final double[] data1 = {\n+            x, 1d, x, x, 2d, x, x, x, 3d, x, x, x, x\n+        };\n+        final double[] data2 = {\n+            5d, -6d, 7d, x, x, -8d, -9d, 10d, 11d, x, 12d, 13d, -15d\n+        };\n+        double dotProduct = 0d;\n+        double norm2 = 0d;\n+        for (int i = 0; i < data1.length; i++){\n+            dotProduct += data1[i] * data2[i];\n+            norm2 += data2[i] * data2[i];\n+        }\n+        final double s = dotProduct / norm2;\n+        final double[] expected = new double[data1.length];\n+        for (int i = 0; i < data2.length; i++) {\n+            expected[i] = s * data2[i];\n+        }\n+        final RealVector v1 = create(data1);\n+        final RealVector v2;\n+        if (mixed) {\n+            v2 = createAlien(data2);\n+        } else {\n+            v2 = create(data2);\n+        }\n+        final RealVector actual = v1.projection(v2);\n+        TestUtils.assertEquals(\"\", expected, actual, 0d);\n+    }\n+\n+    @Test\n+    public void testProjectionSameType() {\n+        doTestProjection(false);\n+    }\n+\n+    @Test\n+    public void testProjectionMixedTypes() {\n+        doTestProjection(true);\n+    }\n+\n+    @Test(expected = MathArithmeticException.class)\n+    public void testProjectionNullVector() {\n+        create(new double[4]).projection(create(new double[4]));\n+    }\n+\n+    @Test(expected = DimensionMismatchException.class)\n+    public void testProjectionDimensionMismatch() {\n+        final RealVector v1 = create(new double[4]);\n+        final RealVector v2 = create(new double[5]);\n+        v2.set(1.0);\n+        v1.projection(v2);\n+    }\n+\n     @Test\n     public void testSet() {\n         for (int i = 0; i < values.length; i++) {\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n         }\n \n         @Override\n-        public RealVector projection(RealVector v) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n         public double getEntry(int index) {\n             try {\n                 return values[index];\n--- a/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n         }\n \n         @Override\n-        public RealVector projection(RealVector v) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n         public RealMatrix outerProduct(RealVector v) {\n             throw unsupported();\n         }", "timestamp": 1341551919, "metainfo": ""}