{"sha": "f498cdfcb442facecddefc9eaa9f21322e3f9565", "log": "Added constructor.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  *\n- * @version $Revision: 1.19 $ $Date: 2004/07/10 17:09:08 $\n+ * @version $Revision: 1.20 $ $Date: 2004/07/18 05:39:30 $\n  */\n public class FirstMoment extends AbstractStorelessUnivariateStatistic \n     implements Serializable {\n     static final long serialVersionUID = -803343206421984070L; \n     \n     /** Count of values that have been added */\n-    protected long n = 0;\n+    protected long n;\n \n     /** First moment of values that have been added */\n-    protected double m1 = Double.NaN;\n+    protected double m1;\n     \n     /** \n      * Deviation of most recently added value from previous first moment.\n      * Retained to prevent repeated computation in higher order moments.\n      */\n-    protected double dev = Double.NaN;\n+    protected double dev;\n     \n     /**\n      * Deviation of most recently added value from previous first moment,\n      * normalized by previous sample size.  Retained to prevent repeated\n      * computation in higher order moments\n      */\n-    protected double nDev = Double.NaN;\n+    protected double nDev;\n \n+    /**\n+     * Create a FirstMoment instance\n+     */\n+    public FirstMoment() {\n+        n = 0;\n+        m1 = Double.NaN;\n+        dev = Double.NaN;\n+        nDev = Double.NaN;\n+    }\n+    \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n     public long getN() {\n         return n;\n     }\n-\n }\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.20 $ $Date: 2004/07/04 09:02:36 $\n+ * @version $Revision: 1.21 $ $Date: 2004/07/18 05:39:30 $\n  */\n public class FourthMoment extends ThirdMoment implements Serializable{\n \n     static final long serialVersionUID = 4763990447117157611L;\n         \n     /** fourth moment of values that have been added */\n-    protected double m4 = Double.NaN;\n+    protected double m4;\n \n+    /**\n+     * Create a FourthMoment instance\n+     */\n+    public FourthMoment() {\n+        super();\n+        m4 = Double.NaN;\n+    }\n+    \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/07/04 09:02:36 $\n+ * @version $Revision: 1.20 $ $Date: 2004/07/18 05:39:30 $\n  */\n public class SecondMoment extends FirstMoment implements Serializable {\n \n     static final long serialVersionUID = 3942403127395076445L;  \n       \n     /** second moment of values that have been added */\n-    protected double m2 = Double.NaN;\n+    protected double m2;\n \n+    /**\n+     * Create a SecondMoment instance\n+     */\n+    public SecondMoment() {\n+        super();\n+        m2 = Double.NaN;\n+    }\n+    \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/07/04 09:02:36 $\n+ * @version $Revision: 1.20 $ $Date: 2004/07/18 05:39:30 $\n  */\n public class ThirdMoment extends SecondMoment implements Serializable {\n \n     static final long serialVersionUID = -7818711964045118679L;  \n       \n     /** third moment of values that have been added */\n-    protected double m3 = Double.NaN;\n+    protected double m3;\n \n      /**\n      * Square of deviation of most recently added value from previous first \n      * moment, normalized by previous sample size.  Retained to prevent \n      * repeated computation in higher order moments.  nDevSq = nDev * nDev.\n      */\n-    protected double nDevSq = Double.NaN;\n+    protected double nDevSq;\n \n+    /**\n+     * Create a FourthMoment instance\n+     */\n+    public ThirdMoment() {\n+        super();\n+        m3 = Double.NaN;\n+        nDevSq = Double.NaN;\n+    }\n \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.21 $ $Date: 2004/07/11 18:39:08 $\n+ * @version $Revision: 1.22 $ $Date: 2004/07/18 05:39:30 $\n  */\n-public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {\n+public class Max extends AbstractStorelessUnivariateStatistic {\n \n     /** Serializable version identifier */\n     static final long serialVersionUID = -5593383832225844641L;    \n     \n     /** Number of values that have been added */\n-    private long n = 0;\n+    private long n;\n         \n     /** Current value of the statistic */\n-    private double value = Double.NaN;\n+    private double value;\n \n+    /**\n+     * Create a Max instance\n+     */\n+    public Max() {\n+        n = 0;\n+        value = Double.NaN;\n+    }\n+    \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.22 $ $Date: 2004/07/11 18:39:08 $\n+ * @version $Revision: 1.23 $ $Date: 2004/07/18 05:39:30 $\n  */\n public class Min extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     static final long serialVersionUID = -2941995784909003131L;  \n       \n     /**Number of values that have been added */\n-    private long n = 0;\n+    private long n;\n     \n     /**Current value of the statistic */\n-    private double value = Double.NaN;\n+    private double value;\n \n+    /**\n+     * Create a Min instance\n+     */\n+    public Min() {\n+        n = 0;\n+        value = Double.NaN;\n+    }\n+    \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.21 $ $Date: 2004/07/10 17:09:08 $\n+ * @version $Revision: 1.22 $ $Date: 2004/07/18 05:39:30 $\n  */\n public class Product extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     static final long serialVersionUID = 2824226005990582538L;   \n      \n     /**The number of values that have been added */\n-    private long n = 0;\n+    private long n;\n     \n     /**\n      * The current Running Product.\n      */\n-    private double value = Double.NaN;\n+    private double value;\n \n+    /**\n+     * Create a Product instance\n+     */\n+    public Product() {\n+        n = 0;\n+        value = Double.NaN;\n+    }\n+    \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.24 $ $Date: 2004/07/10 17:09:08 $\n+ * @version $Revision: 1.25 $ $Date: 2004/07/18 05:39:30 $\n  */\n public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     static final long serialVersionUID = -8231831954703408316L;  \n       \n     /** */\n-    private long n = 0;\n+    private long n;\n     \n     /**\n      * The currently running sum.\n      */\n-    private double value = Double.NaN;\n+    private double value;\n \n+    /**\n+     * Create a Sum instance\n+     */\n+    public Sum() {\n+        n = 0;\n+        value = Double.NaN;\n+    }\n+    \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n  * Uses {@link java.lang.Math#log(double)} to compute the logs.  Therefore,\n  * <ul>\n  * <li>If any of values are < 0, the result is <code>NaN.</code></li>\n- * <li>If all values are non-negative and less than <code>Double.POSITIVE_INFINITY</code>, \n- * but at least one value is 0, the result is <code>Double.NEGATIVE_INFINITY.</code></li>\n+ * <li>If all values are non-negative and less than \n+ * <code>Double.POSITIVE_INFINITY</code>,  but at least one value is 0, the\n+ * result is <code>Double.NEGATIVE_INFINITY.</code></li>\n  * <li>If both <code>Double.POSITIVE_INFINITY</code> and \n  * <code>Double.NEGATIVE_INFINITY</code> are among the values, the result is\n  * <code>NaN.</code></li>\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.21 $ $Date: 2004/07/10 17:09:08 $\n+ * @version $Revision: 1.22 $ $Date: 2004/07/18 05:39:30 $\n  */\n public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     static final long serialVersionUID = -370076995648386763L;    \n \n     /**Number of values that have been added */\n-    private int n = 0;\n+    private int n;\n     \n     /**\n      * The currently running value\n      */\n-    private double value = 0d;\n+    private double value;\n+    \n+    /**\n+     * Create a SumOfLogs instance\n+     */\n+    public SumOfLogs() {\n+       value = 0d;\n+       n = 0;\n+    }\n \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.21 $ $Date: 2004/07/10 17:09:08 $\n+ * @version $Revision: 1.22 $ $Date: 2004/07/18 05:39:30 $\n  */\n public class SumOfSquares extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     static final long serialVersionUID = 1460986908574398008L;  \n       \n     /** */\n-    private long n = 0;\n+    private long n;\n     \n     /**\n      * The currently running sumSq\n      */\n-    private double value = Double.NaN;\n+    private double value;\n \n+    /**\n+     * Create a SumOfSquares instance\n+     */\n+    public SumOfSquares() {\n+        n = 0;\n+        value = Double.NaN;\n+    }\n+    \n     /**\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */", "timestamp": 1090129170, "metainfo": ""}