{"sha": "57e9718cb6e277d9e40229a48113fd4484745861", "log": "\"add\", \"multiply\", \"compose\" instances of \"DifferentiableUnivariateRealFunction\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/FunctionUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/FunctionUtils.java\n     }\n \n     /**\n+     * Compose functions.  The functions in the argument list are composed\n+     * sequentially, in the order given.  For example, compose(f1,f2,f3)\n+     * acts like f1(f2(f3(x))).\n+     *\n+     * @param f List of functions.\n+     * @return the composite function.\n+     */\n+    public static DifferentiableUnivariateRealFunction compose(final DifferentiableUnivariateRealFunction ... f) {\n+        return new DifferentiableUnivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double x) {\n+                double r = x;\n+                for (int i = f.length - 1; i >= 0; i--) {\n+                    r = f[i].value(r);\n+                }\n+                return r;\n+            }\n+\n+            /** {@inheritDoc} */\n+            public UnivariateRealFunction derivative() {\n+                return new UnivariateRealFunction() {\n+                    /** {@inheritDoc} */\n+                    public double value(double x) {\n+                        double p = 1;\n+                        double r = x;\n+                        for (int i = f.length - 1; i >= 0; i--) {\n+                            p *= f[i].derivative().value(r);\n+                            r = f[i].value(r);\n+                        }\n+                        return p;\n+                    }\n+                };\n+            }\n+        };\n+    }\n+\n+    /**\n      * Add functions.\n      *\n      * @param f List of functions.\n     }\n \n     /**\n+     * Add functions.\n+     *\n+     * @param f List of functions.\n+     * @return a function that computes the sum of the functions.\n+     */\n+    public static DifferentiableUnivariateRealFunction add(final DifferentiableUnivariateRealFunction ... f) {\n+        return new DifferentiableUnivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double x) {\n+                double r = f[0].value(x);\n+                for (int i = 1; i < f.length; i++) {\n+                    r += f[i].value(x);\n+                }\n+                return r;\n+            }\n+\n+            /** {@inheritDoc} */\n+            public UnivariateRealFunction derivative() {\n+                return new UnivariateRealFunction() {\n+                    /** {@inheritDoc} */\n+                    public double value(double x) {\n+                        double r = f[0].derivative().value(x);\n+                        for (int i = 1; i < f.length; i++) {\n+                            r += f[i].derivative().value(x);\n+                        }\n+                        return r;\n+                    }\n+                };\n+            }\n+        };\n+    }\n+\n+    /**\n      * Multiply functions.\n      *\n      * @param f List of functions.\n                     r *= f[i].value(x);\n                 }\n                 return r;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Multiply functions.\n+     *\n+     * @param f List of functions.\n+     * @return a function that computes the product of the functions.\n+     */\n+    public static DifferentiableUnivariateRealFunction multiply(final DifferentiableUnivariateRealFunction ... f) {\n+        return new DifferentiableUnivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double x) {\n+                double r = f[0].value(x);\n+                for (int i = 1; i < f.length; i++) {\n+                    r *= f[i].value(x);\n+                }\n+                return r;\n+            }\n+\n+            /** {@inheritDoc} */\n+            public UnivariateRealFunction derivative() {\n+                return new UnivariateRealFunction() {\n+                    /** {@inheritDoc} */\n+                    public double value(double x) {\n+                        double sum = 0;\n+                        for (int i = 0; i < f.length; i++) {\n+                            double prod = f[i].derivative().value(x);\n+                            for (int j = 0; j < f.length; j++) {\n+                                if (i != j) {\n+                                    prod *= f[j].value(x);\n+                                }\n+                            }\n+                            sum += prod;\n+                        }\n+                        return sum;\n+                    }\n+                };\n             }\n         };\n     }\n--- a/src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java\n import org.apache.commons.math.analysis.function.Power;\n import org.apache.commons.math.analysis.function.Sin;\n import org.apache.commons.math.analysis.function.Sinc;\n+import org.apache.commons.math.analysis.function.Cos;\n+import org.apache.commons.math.analysis.function.Cosh;\n import org.apache.commons.math.analysis.BivariateRealFunction;\n import org.apache.commons.math.analysis.function.Add;\n import org.apache.commons.math.analysis.function.Multiply;\n import org.apache.commons.math.analysis.function.Min;\n import org.apache.commons.math.analysis.function.Max;\n import org.apache.commons.math.analysis.function.Pow;\n+import org.apache.commons.math.analysis.function.Log;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n \n import org.junit.Assert;\n     }\n \n     @Test\n+    public void testComposeDifferentiable() {\n+        DifferentiableUnivariateRealFunction id = new Identity();\n+        Assert.assertEquals(1, FunctionUtils.compose(id, id, id).derivative().value(3), EPS);\n+\n+        DifferentiableUnivariateRealFunction c = new Constant(4);\n+        Assert.assertEquals(0, FunctionUtils.compose(id, c).derivative().value(3), EPS);\n+        Assert.assertEquals(0, FunctionUtils.compose(c, id).derivative().value(3), EPS);\n+\n+        DifferentiableUnivariateRealFunction m = new Minus();\n+        Assert.assertEquals(-1, FunctionUtils.compose(m).derivative().value(3), EPS);\n+        Assert.assertEquals(1, FunctionUtils.compose(m, m).derivative().value(3), EPS);\n+\n+        DifferentiableUnivariateRealFunction inv = new Inverse();\n+        Assert.assertEquals(0.25, FunctionUtils.compose(inv, m, id).derivative().value(2), EPS);\n+\n+        DifferentiableUnivariateRealFunction pow = new Power(2);\n+        Assert.assertEquals(108, FunctionUtils.compose(pow, pow).derivative().value(3), EPS);\n+\n+        DifferentiableUnivariateRealFunction log = new Log();\n+        double a = 9876.54321;\n+        Assert.assertEquals(pow.derivative().value(a) / pow.value(a),\n+                            FunctionUtils.compose(log, pow).derivative().value(a), EPS);\n+    }\n+\n+    @Test\n     public void testAdd() {\n         UnivariateRealFunction id = new Identity();\n         UnivariateRealFunction c = new Constant(4);\n     }\n \n     @Test\n+    public void testAddDifferentiable() {\n+        DifferentiableUnivariateRealFunction sin = new Sin();\n+        DifferentiableUnivariateRealFunction c = new Constant(4);\n+        DifferentiableUnivariateRealFunction m = new Minus();\n+        DifferentiableUnivariateRealFunction inv = new Inverse();\n+\n+        final double a = 123.456;\n+        Assert.assertEquals(- 1 / (a * a) -1 + Math.cos(a),\n+                            FunctionUtils.add(inv, m, c, sin).derivative().value(a),\n+                            EPS);\n+    }\n+\n+    @Test\n     public void testMultiply() {\n         UnivariateRealFunction c = new Constant(4);\n         Assert.assertEquals(16, FunctionUtils.multiply(c, c).value(12345), EPS);\n         UnivariateRealFunction inv = new Inverse();\n         UnivariateRealFunction pow = new Power(2);\n         Assert.assertEquals(1, FunctionUtils.multiply(FunctionUtils.compose(inv, pow), pow).value(3.5), EPS);\n+    }\n+\n+    @Test\n+    public void testMultiplyDifferentiable() {\n+        DifferentiableUnivariateRealFunction c = new Constant(4);\n+        DifferentiableUnivariateRealFunction id = new Identity();\n+        final double a = 1.2345678;\n+        Assert.assertEquals(8 * a, FunctionUtils.multiply(c, id, id).derivative().value(a), EPS);\n+\n+        DifferentiableUnivariateRealFunction inv = new Inverse();\n+        DifferentiableUnivariateRealFunction pow = new Power(2.5);\n+        DifferentiableUnivariateRealFunction cos = new Cos();\n+        Assert.assertEquals(1.5 * Math.sqrt(a) * Math.cos(a) - Math.pow(a, 1.5) * Math.sin(a),\n+                            FunctionUtils.multiply(inv, pow, cos).derivative().value(a), EPS);\n+\n+        DifferentiableUnivariateRealFunction cosh = new Cosh();\n+        Assert.assertEquals(1.5 * Math.sqrt(a) * Math.cosh(a) + Math.pow(a, 1.5) * Math.sinh(a),\n+                            FunctionUtils.multiply(inv, pow, cosh).derivative().value(a), 8 * EPS);\n     }\n \n     @Test", "timestamp": 1318881830, "metainfo": ""}