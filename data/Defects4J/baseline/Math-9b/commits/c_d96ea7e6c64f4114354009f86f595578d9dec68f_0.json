{"sha": "d96ea7e6c64f4114354009f86f595578d9dec68f", "log": "MATH-361   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when two dimensions differ.\n+ *\n+ * @since 2.2\n+ * @version $Revision$ $Date$\n+ */\n+public class DimensionMismatchException extends MathIllegalArgumentException {\n+    /** First dimension. */\n+    private final int dimension1;\n+\n+    /** Second dimension. */\n+    private final int dimension2;\n+\n+    /**\n+     * Construct an exception from the mismatched dimensions.\n+     *\n+     * @param dimension1 First dimension.\n+     * @param dimension2 Second dimension.\n+     */\n+    public DimensionMismatchException(int dimension1,\n+                                      int dimension2) {\n+        super(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, dimension1, dimension2);\n+\n+        this.dimension1 = dimension1;\n+        this.dimension2 = dimension2;\n+    }\n+\n+    /**\n+     * @return the first dimension.\n+     */\n+    public int getDimension1() {\n+        return dimension1;\n+    }\n+    /**\n+     * @return the second dimension.\n+     */\n+    public int getDimension2() {\n+        return dimension2;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import java.util.Locale;\n+import org.apache.commons.math.util.Localizable;\n+\n+/**\n+ * Base class for all preconditions violation exceptions.\n+ * This class is not intended to be instantiated directly in most case: it\n+ * should serve as a base class to create all the exceptions that share the\n+ * semantics of the standard {@link IllegalArgumentException}, but must also\n+ * provide a localized message.\n+ *\n+ * @since 2.2\n+ * @version $Revision$ $Date$\n+ */\n+public class MathIllegalArgumentException extends IllegalArgumentException {\n+    /**\n+     * Pattern used to build the message.\n+     */\n+    private final Localizable pattern;\n+    /**\n+     * Arguments used to build the message.\n+     */\n+    private final Object[] arguments;\n+    \n+    /**\n+     * @param pattern Message pattern.\n+     * @param arguments Arguments.\n+     */\n+    protected MathIllegalArgumentException(Localizable pattern,\n+                                           Object ... arguments) {\n+        this.pattern = pattern;\n+        this.arguments = arguments.clone();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String getMessage() {\n+        return MessageFactory.buildMessage(Locale.US, pattern, arguments);\n+    }\n+    \n+    /** {@inheritDoc} */\n+    @Override\n+    public String getLocalizedMessage() {\n+        return MessageFactory.buildMessage(Locale.getDefault(), pattern, arguments);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/MessageFactory.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import java.text.MessageFormat;\n+import java.util.Locale;\n+import org.apache.commons.math.util.Localizable;\n+\n+/**\n+ * Class for constructing localized messages.\n+ *\n+ * @since 2.2\n+ * @version $Revision$ $Date$\n+ */\n+public class MessageFactory {\n+    /**\n+     * Class contains only static methods.\n+     */\n+    private MessageFactory() {}\n+\n+    /**\n+     * Builds a message string by from a pattern and its arguments.\n+     *\n+     * @param locale Locale in which the message should be translated.\n+     * @param pattern Format specifier.\n+     * @param arguments Format arguments.\n+     * @return a message string.\n+     * @since 2.2\n+     */\n+    public static String buildMessage(Locale locale,\n+                                      Localizable pattern,\n+                                      Object ... arguments) {\n+        return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/OutOfRangeException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when some argument is out of range.\n+ *\n+ * @since 2.2\n+ * @version $Revision$ $Date$\n+ */\n+public class OutOfRangeException extends MathIllegalArgumentException {\n+    /** Lower bound. */\n+    private final Number lo;\n+    /** Higher bound. */\n+    private final Number hi;\n+    /** Requested. */\n+    private final Number requested;\n+\n+    /**\n+     * Construct an exception from the mismatched dimensions.\n+     *\n+     * @param requested Requested value.\n+     * @param lo Lower bound.\n+     * @param hi Higher bound.\n+     */\n+    public OutOfRangeException(Number requested,\n+                               Number lo,\n+                               Number hi) {\n+        super(LocalizedFormats.OUT_OF_RANGE_SIMPLE, requested, lo, hi);\n+\n+        this.requested = requested;\n+        this.lo = lo;\n+        this.hi = hi;\n+    }\n+\n+    /**\n+     * @return the requested value.\n+     */\n+    public Number getRequested() {\n+        return requested;\n+    }\n+    /**\n+     * @return the lower bound.\n+     */\n+    public Number getLo() {\n+        return lo;\n+    }\n+    /**\n+     * @return the higher bound.\n+     */\n+    public Number getHi() {\n+        return hi;\n+    }\n+}", "timestamp": 1277381354, "metainfo": ""}