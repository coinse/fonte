{"sha": "50747ca40587bc29710c263a9cf164002fd26c78", "log": "simplified signature of intersection method  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java\n     }\n \n     /** Copy constructor.\n-     * <p>The created instance is completely independant from the\n+     * <p>The created instance is completely independent from the\n      * original instance, it is a deep copy.</p>\n      * @param line line to copy\n      */\n     /** Get the intersection point of the instance and another line.\n      * @param other other line\n      * @return intersection point of the instance and the other line\n-     * (really a {@link Vector2D Vector2D} instance)\n-     */\n-    public Vector2D intersection(final Hyperplane<Euclidean2D> other) {\n-        final Line otherL = (Line) other;\n-        final double d = sin * otherL.cos - otherL.sin * cos;\n+     * or null if there are no intersection points\n+     */\n+    public Vector2D intersection(final Line other) {\n+        final double d = sin * other.cos - other.sin * cos;\n         if (FastMath.abs(d) < 1.0e-10) {\n             return null;\n         }\n-        return new Vector2D((cos * otherL.originOffset - otherL.cos * originOffset) / d,\n-                           (sin * otherL.originOffset - otherL.sin * originOffset) / d);\n+        return new Vector2D((cos * other.originOffset - other.cos * originOffset) / d,\n+                            (sin * other.originOffset - other.sin * originOffset) / d);\n     }\n \n     /** {@inheritDoc} */", "timestamp": 1313400752, "metainfo": ""}