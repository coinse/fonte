{"sha": "db089f4547f1b10990af0e4821ba5378f3f92c56", "log": "changing multistart behaviour to rely on search domain boundary rather than on start point the only implementation of the raw minimizer ignores the start point so the multistart optimizer always found the same point before the change  ", "commit": "\n--- a/src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java\n                            final double min, final double max)\n         throws ConvergenceException,\n             FunctionEvaluationException {\n-        return optimize(f, goalType, min, max, min + generator.nextDouble() * (max - min));\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n-                           final double min, final double max, final double startValue)\n-            throws ConvergenceException, FunctionEvaluationException {\n \n         optima           = new double[starts];\n         totalIterations  = 0;\n             try {\n                 optimizer.setMaximalIterationCount(maxIterations - totalIterations);\n                 optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);\n-                optima[i] = optimizer.optimize(f, goalType, min, max,\n-                                               (i == 0) ? startValue : generator.nextDouble() * (max - min));\n+                final double bound1 = min + generator.nextDouble() * (max - min);\n+                final double bound2 = min + generator.nextDouble() * (max - min);\n+                optima[i] = optimizer.optimize(f, goalType,\n+                                               Math.min(bound1, bound2),\n+                                               Math.max(bound1, bound2));\n             } catch (FunctionEvaluationException fee) {\n                 optima[i] = Double.NaN;\n             } catch (ConvergenceException ce) {\n \n     }\n \n+    /** {@inheritDoc} */\n+    public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n+                           final double min, final double max, final double startValue)\n+            throws ConvergenceException, FunctionEvaluationException {\n+        return optimize(f, goalType, min, max);\n+    }\n+\n }", "timestamp": 1248033896, "metainfo": ""}