{"sha": "3fb72699d911f4b9a4a18a30a75e9d9c4bb7305f", "log": "Java 1.5 does not allow @Override for method implementations, only true overrides  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n      * @return {@code this + addend}.\n      * @throws NullArgumentException if {@code factor} is {@code null}.\n      */\n-    @Override\n     public Complex add(Complex addend) throws NullArgumentException {\n         MathUtils.checkNotNull(addend);\n         if (isNaN || addend.isNaN) {\n      * @return {@code this / divisor}.\n      * @throws NullArgumentException if {@code divisor} is {@code null}.\n      */\n-    @Override\n     public Complex divide(Complex divisor)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(divisor);\n      * @return {@code this * factor}.\n      * @throws NullArgumentException if {@code factor} is {@code null}.\n      */\n-    @Override\n     public Complex multiply(Complex factor)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(factor);\n      * @return {@code this - subtrahend}.\n      * @throws NullArgumentException if {@code factor} is {@code null}.\n      */\n-    @Override\n     public Complex subtract(Complex subtrahend)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(subtrahend);\n     }\n \n     /** {@inheritDoc} */\n-    @Override\n     public ComplexField getField() {\n         return ComplexField.getInstance();\n     }", "timestamp": 1311517451, "metainfo": ""}