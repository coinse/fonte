{"sha": "5519ebe31ef6510ef95834968fda1162be8e9eec", "log": "MATH-797 Performance: synchronization should ensure that the computation of each rule will be performed once, even if the factory is accessed from multiple threads.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java\n \n     /**\n      * Gets a rule.\n-     * Rules are computed once, and cached.\n+     * Synchronization ensures that rules will be computed and added to the\n+     * cache at most once.\n      * The returned rule is a reference into the cache.\n      *\n      * @param numberOfPoints Order of the rule to be retrieved.\n      * @return the points and weights corresponding to the given order.\n      */\n-    protected Pair<T[], T[]> getRuleInternal(int numberOfPoints) {\n+    protected synchronized Pair<T[], T[]> getRuleInternal(int numberOfPoints) {\n         final Pair<T[], T[]> rule = pointsAndWeights.get(numberOfPoints);\n         if (rule == null) {\n             addRule(computeRule(numberOfPoints));", "timestamp": 1342829298, "metainfo": ""}