{"sha": "be74c45fbcb9ccaad84c4bc69c7b4635d4edfbcf", "log": "Eliminated unecessary copying of external operand's data array in arithmetic operations. PR #31713   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n  * As specified in the {@link BigMatrix} interface, matrix element indexing\n  * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.</li></ul>\n- * @version $Revision: 1.9 $ $Date: 2004/10/25 05:33:24 $\n+ * @version $Revision: 1.10 $ $Date: 2004/11/07 20:19:22 $\n  */\n public class BigMatrixImpl implements BigMatrix, Serializable {\n     \n         int rowCount = this.getRowDimension();\n         int columnCount = this.getColumnDimension();\n         BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n-        BigDecimal[][] mData = m.getData();\n         for (int row = 0; row < rowCount; row++) {\n             for (int col = 0; col < columnCount; col++) {\n-                outData[row][col] = data[row][col].add(mData[row][col]);\n+                outData[row][col] = data[row][col].add(m.getEntry(row, col));\n             }\n         }\n         return new BigMatrixImpl(outData);\n         int rowCount = this.getRowDimension();\n         int columnCount = this.getColumnDimension();\n         BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n-        BigDecimal[][] mData = m.getData();\n         for (int row = 0; row < rowCount; row++) {\n             for (int col = 0; col < columnCount; col++) {\n-                outData[row][col] = data[row][col].subtract(mData[row][col]);\n+                outData[row][col] = data[row][col].subtract(m.getEntry(row, col));\n             }\n         }\n         return new BigMatrixImpl(outData);\n         int nRows = this.getRowDimension();\n         int nCols = m.getColumnDimension();\n         int nSum = this.getColumnDimension();\n-        BigDecimal[][] mData = m.getData();\n         BigDecimal[][] outData = new BigDecimal[nRows][nCols];\n         BigDecimal sum = ZERO;\n         for (int row = 0; row < nRows; row++) {\n             for (int col = 0; col < nCols; col++) {\n                 sum = ZERO;\n                 for (int i = 0; i < nSum; i++) {\n-                    sum = sum.add(data[row][i].multiply(mData[i][col]));\n+                    sum = sum.add(data[row][i].multiply(m.getEntry(i, col)));\n                 }\n                 outData[row][col] = sum;\n             }\n         int nRowB = b.getRowDimension();\n         \n         // Apply permutations to b\n-        BigDecimal[][] bv = b.getData();\n         BigDecimal[][] bp = new BigDecimal[nRowB][nColB];\n         for (int row = 0; row < nRowB; row++) {\n             for (int col = 0; col < nColB; col++) {\n-                bp[row][col] = bv[permutation[row]][col];\n-            }\n-        }\n-        bv = null;\n+                bp[row][col] = b.getEntry(permutation[row], col);\n+            }\n+        }\n         \n         // Solve LY = b\n         for (int col = 0; col < nCol; col++) {\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.</li></ul>\n  *\n- * @version $Revision: 1.34 $ $Date: 2004/10/25 02:13:22 $\n+ * @version $Revision: 1.35 $ $Date: 2004/11/07 20:19:22 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n     \n         int rowCount = this.getRowDimension();\n         int columnCount = this.getColumnDimension();\n         double[][] outData = new double[rowCount][columnCount];\n-        double[][] mData = m.getData();\n         for (int row = 0; row < rowCount; row++) {\n             for (int col = 0; col < columnCount; col++) {\n-                outData[row][col] = data[row][col] + mData[row][col];\n-            }\n+                outData[row][col] = data[row][col] + m.getEntry(row, col);\n+            }  \n         }\n         return new RealMatrixImpl(outData);\n     }\n         int rowCount = this.getRowDimension();\n         int columnCount = this.getColumnDimension();\n         double[][] outData = new double[rowCount][columnCount];\n-        double[][] mData = m.getData();\n         for (int row = 0; row < rowCount; row++) {\n             for (int col = 0; col < columnCount; col++) {\n-                outData[row][col] = data[row][col] - mData[row][col];\n+                outData[row][col] = data[row][col] - m.getEntry(row, col);\n             }\n         }\n         return new RealMatrixImpl(outData);\n         int nRows = this.getRowDimension();\n         int nCols = m.getColumnDimension();\n         int nSum = this.getColumnDimension();\n-        double[][] mData = m.getData();\n         double[][] outData = new double[nRows][nCols];\n         double sum = 0;\n         for (int row = 0; row < nRows; row++) {\n             for (int col = 0; col < nCols; col++) {\n                 sum = 0;\n                 for (int i = 0; i < nSum; i++) {\n-                    sum += data[row][i] * mData[i][col];\n+                    sum += data[row][i] * m.getEntry(i, col);\n                 }\n                 outData[row][col] = sum;\n             }\n         int nRowB = b.getRowDimension();\n \n         // Apply permutations to b\n-        double[][] bv = b.getData();\n         double[][] bp = new double[nRowB][nColB];\n         for (int row = 0; row < nRowB; row++) {\n             for (int col = 0; col < nColB; col++) {\n-                bp[row][col] = bv[permutation[row]][col];\n-            }\n-        }\n-        bv = null;\n+                bp[row][col] = b.getEntry(permutation[row], col);\n+            }\n+        }\n \n         // Solve LY = b\n         for (int col = 0; col < nCol; col++) {", "timestamp": 1099858762, "metainfo": ""}