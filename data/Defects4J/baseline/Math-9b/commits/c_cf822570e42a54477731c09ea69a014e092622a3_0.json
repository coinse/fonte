{"sha": "cf822570e42a54477731c09ea69a014e092622a3", "log": "Use getter instead of direct array reference  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayFieldVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayFieldVectorTest.java\n         ArrayFieldVector<Fraction> v8 = new ArrayFieldVector<Fraction>(v1, true);\n         Assert.assertEquals(7, v8.getDimension());\n         Assert.assertEquals(new Fraction(0), v8.getEntry(6));\n-        Assert.assertNotSame(\"testData not same object \", v1.data, v8.data);\n+        Assert.assertNotSame(\"testData not same object \", v1.getDataRef(), v8.getDataRef());\n \n         ArrayFieldVector<Fraction> v8_2 = new ArrayFieldVector<Fraction>(v1, false);\n         Assert.assertEquals(7, v8_2.getDimension());\n         Assert.assertEquals(new Fraction(0), v8_2.getEntry(6));\n-        Assert.assertArrayEquals(v1.data, v8_2.data);\n+        Assert.assertArrayEquals(v1.getDataRef(), v8_2.getDataRef());\n \n         ArrayFieldVector<Fraction> v9 = new ArrayFieldVector<Fraction>(v1, v3);\n         Assert.assertEquals(10, v9.getDimension());\n \n         FieldVector<Fraction> v_copy = v1.copy();\n         Assert.assertEquals(3, v_copy.getDimension());\n-        Assert.assertNotSame(\"testData not same object \", v1.data, v_copy.getData());\n+        Assert.assertNotSame(\"testData not same object \", v1.getDataRef(), v_copy.getData());\n \n         Fraction[] a_frac = v1.toArray();\n         Assert.assertEquals(3, a_frac.length);\n-        Assert.assertNotSame(\"testData not same object \", v1.data, a_frac);\n+        Assert.assertNotSame(\"testData not same object \", v1.getDataRef(), a_frac);\n \n \n //      ArrayFieldVector<Fraction> vout4 = (ArrayFieldVector<Fraction>) v1.clone();\n //      Assert.assertEquals(3, vout4.getDimension());\n-//      Assert.assertEquals(v1.data, vout4.data);\n+//      Assert.assertEquals(v1.getDataRef(), vout4.getDataRef());\n \n \n         FieldVector<Fraction> vout5 = v4.getSubVector(3, 3);\n         /*\n          Fraction[] dout1 = v1.copyOut();\n         Assert.assertEquals(3, dout1.length);\n-        assertNotSame(\"testData not same object \", v1.data, dout1);\n+        assertNotSame(\"testData not same object \", v1.getDataRef(), dout1);\n          */\n         try {\n             v1.checkVectorDimensions(2);\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n         ArrayRealVector v8 = new ArrayRealVector(v1, true);\n         Assert.assertEquals(\"testData len\", 7, v8.getDimension());\n         Assert.assertEquals(\"testData is 0.0 \", 0.0, v8.getEntry(6), 0);\n-        Assert.assertNotSame(\"testData not same object \", v1.data, v8.data);\n+        Assert.assertNotSame(\"testData not same object \", v1.getDataRef(), v8.getDataRef());\n \n         ArrayRealVector v8_2 = new ArrayRealVector(v1, false);\n         Assert.assertEquals(\"testData len\", 7, v8_2.getDimension());\n         Assert.assertEquals(\"testData is 0.0 \", 0.0, v8_2.getEntry(6), 0);\n-        Assert.assertEquals(\"testData same object \", v1.data, v8_2.data);\n+        Assert.assertEquals(\"testData same object \", v1.getDataRef(), v8_2.getDataRef());\n \n         ArrayRealVector v9 = new ArrayRealVector(v1, v3);\n         Assert.assertEquals(\"testData len\", 10, v9.getDimension());\n \n         RealVector v_copy = v1.copy();\n         Assert.assertEquals(\"testData len\", 3, v_copy.getDimension());\n-        Assert.assertNotSame(\"testData not same object \", v1.data, v_copy.toArray());\n+        Assert.assertNotSame(\"testData not same object \", v1.getDataRef(), v_copy.toArray());\n \n         double[] a_double = v1.toArray();\n         Assert.assertEquals(\"testData len\", 3, a_double.length);\n-        Assert.assertNotSame(\"testData not same object \", v1.data, a_double);\n+        Assert.assertNotSame(\"testData not same object \", v1.getDataRef(), a_double);\n \n \n //      ArrayRealVector vout4 = (ArrayRealVector) v1.clone();\n //      Assert.assertEquals(\"testData len\", 3, vout4.getDimension());\n-//      Assert.assertEquals(\"testData not same object \", v1.data, vout4.data);\n+//      Assert.assertEquals(\"testData not same object \", v1.getDataRef(), vout4.getDataRef());\n \n \n         RealVector vout5 = v4.getSubVector(3, 3);\n         /*\n          double[] dout1 = v1.copyOut();\n         Assert.assertEquals(\"testData len\", 3, dout1.length);\n-        Assert.assertNotSame(\"testData not same object \", v1.data, dout1);\n+        Assert.assertNotSame(\"testData not same object \", v1.getDataRef(), dout1);\n          */\n         try {\n             v1.checkVectorDimensions(2);", "timestamp": 1330736117, "metainfo": ""}