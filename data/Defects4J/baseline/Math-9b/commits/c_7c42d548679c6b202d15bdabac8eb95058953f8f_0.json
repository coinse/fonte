{"sha": "7c42d548679c6b202d15bdabac8eb95058953f8f", "log": "MATH-500 Temporarily moved \"ConvergingAlgorithm\" and \"ConvergingAlgorithmImpl\" to package \"analysis.integration\". See MATH-501.   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/ConvergingAlgorithm.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.analysis.integration;\n+\n+\n+/**\n+ * Interface for algorithms handling convergence settings.\n+ * <p>\n+ * This interface only deals with convergence parameters setting, not\n+ * execution of the algorithms per se.\n+ * </p>\n+ * @see ConvergenceException\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ * @deprecated in 2.2 (to be removed in 3.0).\n+ */\n+@Deprecated\n+public interface ConvergingAlgorithm {\n+\n+    /**\n+     * Set the upper limit for the number of iterations.\n+     * <p>\n+     * Usually a high iteration count indicates convergence problems. However,\n+     * the \"reasonable value\" varies widely for different algorithms. Users are\n+     * advised to use the default value supplied by the algorithm.</p>\n+     * <p>\n+     * A {@link ConvergenceException} will be thrown if this number\n+     * is exceeded.</p>\n+     *\n+     * @param count maximum number of iterations\n+     */\n+    void setMaximalIterationCount(int count);\n+\n+    /**\n+     * Get the upper limit for the number of iterations.\n+     *\n+     * @return the actual upper limit\n+     */\n+    int getMaximalIterationCount();\n+\n+    /**\n+     * Reset the upper limit for the number of iterations to the default.\n+     * <p>\n+     * The default value is supplied by the algorithm implementation.</p>\n+     *\n+     * @see #setMaximalIterationCount(int)\n+     */\n+    void resetMaximalIterationCount();\n+\n+    /**\n+     * Set the absolute accuracy.\n+     * <p>\n+     * The default is usually chosen so that results in the interval\n+     * -10..-0.1 and +0.1..+10 can be found with a reasonable accuracy. If the\n+     * expected absolute value of your results is of much smaller magnitude, set\n+     * this to a smaller value.</p>\n+     * <p>\n+     * Algorithms are advised to do a plausibility check with the relative\n+     * accuracy, but clients should not rely on this.</p>\n+     *\n+     * @param accuracy the accuracy.\n+     * @throws IllegalArgumentException if the accuracy can't be achieved by\n+     * the solver or is otherwise deemed unreasonable.\n+     */\n+    void setAbsoluteAccuracy(double accuracy);\n+\n+    /**\n+     * Get the actual absolute accuracy.\n+     *\n+     * @return the accuracy\n+     */\n+    double getAbsoluteAccuracy();\n+\n+    /**\n+     * Reset the absolute accuracy to the default.\n+     * <p>\n+     * The default value is provided by the algorithm implementation.</p>\n+     */\n+    void resetAbsoluteAccuracy();\n+\n+    /**\n+     * Set the relative accuracy.\n+     * <p>\n+     * This is used to stop iterations if the absolute accuracy can't be\n+     * achieved due to large values or short mantissa length.</p>\n+     * <p>\n+     * If this should be the primary criterion for convergence rather then a\n+     * safety measure, set the absolute accuracy to a ridiculously small value,\n+     * like {@link org.apache.commons.math.util.MathUtils#SAFE_MIN MathUtils.SAFE_MIN}.</p>\n+     *\n+     * @param accuracy the relative accuracy.\n+     * @throws IllegalArgumentException if the accuracy can't be achieved by\n+     *  the algorithm or is otherwise deemed unreasonable.\n+     */\n+    void setRelativeAccuracy(double accuracy);\n+\n+    /**\n+     * Get the actual relative accuracy.\n+     * @return the accuracy\n+     */\n+    double getRelativeAccuracy();\n+\n+    /**\n+     * Reset the relative accuracy to the default.\n+     * The default value is provided by the algorithm implementation.\n+     */\n+    void resetRelativeAccuracy();\n+\n+    /**\n+     * Get the number of iterations in the last run of the algorithm.\n+     * <p>\n+     * This is mainly meant for testing purposes. It may occasionally\n+     * help track down performance problems: if the iteration count\n+     * is notoriously high, check whether the problem is evaluated\n+     * properly, and whether another algorithm is more amenable to the\n+     * problem.</p>\n+     *\n+     * @return the last iteration count.\n+     * @throws IllegalStateException if there is no result available, either\n+     * because no result was yet computed or the last attempt failed.\n+     */\n+    int getIterationCount();\n+\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/ConvergingAlgorithmImpl.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.integration;\n+\n+import org.apache.commons.math.exception.MaxCountExceededException;\n+\n+/**\n+ * Provide a default implementation for several functions useful to generic\n+ * converging algorithms.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ * @deprecated in 2.2 (to be removed in 3.0).\n+ */\n+@Deprecated\n+public abstract class ConvergingAlgorithmImpl implements ConvergingAlgorithm {\n+    /** Maximum absolute error. */\n+    protected double absoluteAccuracy;\n+    /** Maximum relative error. */\n+    protected double relativeAccuracy;\n+    /** Maximum number of iterations. */\n+    protected int maximalIterationCount;\n+    /** Default maximum absolute error. */\n+    protected double defaultAbsoluteAccuracy;\n+    /** Default maximum relative error. */\n+    protected double defaultRelativeAccuracy;\n+    /** Default maximum number of iterations. */\n+    protected int defaultMaximalIterationCount;\n+    /** The last iteration count. */\n+    protected int iterationCount;\n+\n+    /** {@inheritDoc} */\n+    public int getIterationCount() {\n+        return iterationCount;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void setAbsoluteAccuracy(double accuracy) {\n+        absoluteAccuracy = accuracy;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getAbsoluteAccuracy() {\n+        return absoluteAccuracy;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void resetAbsoluteAccuracy() {\n+        absoluteAccuracy = defaultAbsoluteAccuracy;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void setMaximalIterationCount(int count) {\n+        maximalIterationCount = count;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public int getMaximalIterationCount() {\n+        return maximalIterationCount;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void resetMaximalIterationCount() {\n+        maximalIterationCount = defaultMaximalIterationCount;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void setRelativeAccuracy(double accuracy) {\n+        relativeAccuracy = accuracy;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getRelativeAccuracy() {\n+        return relativeAccuracy;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void resetRelativeAccuracy() {\n+        relativeAccuracy = defaultRelativeAccuracy;\n+    }\n+\n+    /**\n+     * Reset the iterations counter to 0.\n+     *\n+     * @since 2.2\n+     */\n+    protected void resetIterationsCounter() {\n+        iterationCount = 0;\n+    }\n+\n+    /**\n+     * Increment the iterations counter by 1.\n+     *\n+     * @throws MaxCountExceededException if the maximal number\n+     * of iterations is exceeded.\n+     * @since 2.2\n+     */\n+    protected void incrementIterationsCounter() {\n+        if (++iterationCount > maximalIterationCount) {\n+            throw new MaxCountExceededException(maximalIterationCount);\n+        }\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java\n package org.apache.commons.math.analysis.integration;\n \n import org.apache.commons.math.ConvergenceException;\n-import org.apache.commons.math.ConvergingAlgorithm;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n \n     /**\n      * Integrate the function in the given interval.\n      *\n-     * @param min the lower bound for the interval\n-     * @param max the upper bound for the interval\n-     * @return the value of integral\n-     * @throws ConvergenceException if the maximum iteration count is exceeded\n-     * or the integrator detects convergence problems otherwise\n-     * @throws MathUserException if an error occurs evaluating the\n-     * function\n-     * @throws IllegalArgumentException if min > max or the endpoints do not\n-     * satisfy the requirements specified by the integrator\n-     * @deprecated replaced by {@link #integrate(UnivariateRealFunction, double, double)}\n-     * since 2.0\n-     */\n-    @Deprecated\n-    double integrate(double min, double max)\n-        throws ConvergenceException, MathUserException, IllegalArgumentException;\n-\n-    /**\n-     * Integrate the function in the given interval.\n-     *\n      * @param f the integrand function\n      * @param min the lower bound for the interval\n      * @param max the upper bound for the interval\n      * because no result was yet computed or the last attempt failed\n      */\n     double getResult() throws IllegalStateException;\n-\n }\n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n  */\n package org.apache.commons.math.analysis.integration;\n \n-import org.apache.commons.math.ConvergingAlgorithmImpl;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n  */\n public abstract class UnivariateRealIntegratorImpl\n     extends ConvergingAlgorithmImpl implements UnivariateRealIntegrator {\n-\n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 6248808456637441533L;\n-\n     /** minimum number of iterations */\n     protected int minimalIterationCount;\n-\n     /** default minimum number of iterations */\n     protected int defaultMinimalIterationCount;\n-\n     /** indicates whether an integral has been computed */\n     protected boolean resultComputed = false;\n-\n     /** the last computed integral */\n     protected double result;\n-\n     /** The integrand functione.\n      * @deprecated as of 2.0 the integrand function is passed as an argument\n      * to the {@link #integrate(UnivariateRealFunction, double, double)}method. */\n     @Deprecated\n     protected UnivariateRealFunction f;\n \n-    /**\n-     * Construct an integrator with given iteration count and accuracy.\n-     *\n-     * @param f the integrand function\n-     * @param defaultMaximalIterationCount maximum number of iterations\n-     * @throws IllegalArgumentException if f is null or the iteration\n-     * limits are not valid\n-     * @deprecated as of 2.0 the integrand function is passed as an argument\n-     * to the {@link #integrate(UnivariateRealFunction, double, double)}method.\n-     */\n+     /**\n+      * Construct an integrator with given iteration count and accuracy.\n+      *\n+      * @param f the integrand function\n+      * @param defaultMaximalIterationCount maximum number of iterations\n+      * @throws IllegalArgumentException if f is null or the iteration\n+      * limits are not valid\n+      * @deprecated as of 2.0 the integrand function is passed as an argument\n+      * to the {@link #integrate(UnivariateRealFunction, double, double)}method.\n+      */\n     @Deprecated\n     protected UnivariateRealIntegratorImpl(final UnivariateRealFunction f,\n                                            final int defaultMaximalIterationCount)\n         throws IllegalArgumentException {\n-        super(defaultMaximalIterationCount, 1.0e-15);\n+\n+        setMaximalIterationCount(defaultMaximalIterationCount);\n+        setAbsoluteAccuracy(1.0e-15);\n+\n         if (f == null) {\n             throw new NullArgumentException(LocalizedFormats.FUNCTION);\n         }\n      */\n     protected UnivariateRealIntegratorImpl(final int defaultMaximalIterationCount)\n         throws IllegalArgumentException {\n-        super(defaultMaximalIterationCount, 1.0e-15);\n \n+        setMaximalIterationCount(defaultMaximalIterationCount);\n+        setAbsoluteAccuracy(1.0e-15);\n         // parameters that are problem specific\n         setRelativeAccuracy(1.0e-6);\n         this.defaultMinimalIterationCount = 3;", "timestamp": 1295862519, "metainfo": ""}