{"sha": "9283a8ae9db16e08e9447139bc95f7b7aab82a37", "log": "throw EOFException when using empty files with ValueServer in replay and digest modes JIRA: MATH-185  ", "commit": "\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n \n package org.apache.commons.math.random;\n \n+import java.io.EOFException;\n import java.io.Serializable;\n import java.io.BufferedReader;\n import java.io.FileReader;\n             } catch (Exception e) {\n                 throw new IOException(e.getMessage());\n             }\n+            if (sampleStats.getN() == 0) {\n+                throw new EOFException(\"URL \" + url + \" contains no data\");\n+            }\n             in = new BufferedReader(new InputStreamReader(url.openStream()));\n             fillBinStats(in);\n             loaded = true;\n--- a/src/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/java/org/apache/commons/math/random/ValueServer.java\n \n package org.apache.commons.math.random;\n import java.io.BufferedReader;\n+import java.io.EOFException;\n import java.io.InputStreamReader;\n import java.io.IOException;\n import java.net.URL;\n      * replay file open.</p>\n      * <p>\n      * The <code>valuesFileURL</code> will be closed and reopened to wrap around\n-     * from EOF to BOF if EOF is encountered.</p>\n+     * from EOF to BOF if EOF is encountered. EOFException (which is a kind of\n+     * IOException) may still be thrown if the <code>valuesFileURL</code> is\n+     * empty.</p>\n      *\n      * @return next value from the replay file\n      * @throws IOException if there is a problem reading from the file\n             resetReplayFile();\n         }\n         if ((str = filePointer.readLine()) == null) {\n+            // we have probably reached end of file, wrap around from EOF to BOF\n             closeReplayFile();\n             resetReplayFile();\n-            str = filePointer.readLine();\n+            if ((str = filePointer.readLine()) == null) {\n+                throw new EOFException(\"URL \" + valuesFileURL + \" contains no data\");\n+            }\n         }\n         return Double.valueOf(str).doubleValue();\n     }\n--- a/src/test/org/apache/commons/math/random/ValueServerTest.java\n+++ b/src/test/org/apache/commons/math/random/ValueServerTest.java\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+\n+import java.io.EOFException;\n import java.net.URL;\n \n import org.apache.commons.math.RetryTestCase;\n             fail(\"Expecting IllegalStateException\");\n         } catch (IllegalStateException ex) {;}\n     }\n-    \n+\n+    public void testEmptyReplayFile() {\n+        try {\n+            URL url = getClass().getResource(\"emptyFile.txt\");\n+            vs.setMode(ValueServer.REPLAY_MODE);\n+            vs.setValuesFileURL(url);\n+            vs.getNext();\n+            fail(\"an exception should have been thrown\");\n+        } catch (EOFException eof) {\n+            // expected behavior\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n+        }\n+    }\n+\n+    public void testEmptyDigestFile() {\n+        try {\n+            URL url = getClass().getResource(\"emptyFile.txt\");\n+            vs.setMode(ValueServer.DIGEST_MODE);\n+            vs.setValuesFileURL(url);\n+            vs.computeDistribution();\n+            fail(\"an exception should have been thrown\");\n+        } catch (EOFException eof) {\n+            // expected behavior\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n+        }\n+    }\n+\n     /**\n      * Test ValueServer REPLAY_MODE using values in testData file.<br> \n      * Check that the values 1,2,1001,1002 match data file values 1 and 2.", "timestamp": 1201975289, "metainfo": ""}