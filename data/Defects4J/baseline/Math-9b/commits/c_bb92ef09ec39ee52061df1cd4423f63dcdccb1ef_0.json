{"sha": "bb92ef09ec39ee52061df1cd4423f63dcdccb1ef", "log": "Raw types documentation  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n      *\n      * @param comparator Comparator used to order values\n      */\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings(\"unchecked\") // TODO is the cast OK?\n     public Frequency(Comparator<?> comparator) {\n         freqTable = new TreeMap<Comparable<?>, Long>((Comparator<? super Comparable<?>>) comparator);\n     }\n      * @param v the value to lookup.\n      * @return the proportion of values equal to v\n      */\n-    @SuppressWarnings(\"unchecked\")\n-        public long getCumFreq(Comparable<?> v) {\n+    public long getCumFreq(Comparable<?> v) {\n         if (getSumFreq() == 0) {\n             return 0;\n         }\n         if (v instanceof Integer) {\n             return getCumFreq(((Integer) v).longValue());\n         }\n+        @SuppressWarnings(\"unchecked\") // OK, freqTable is Comparable<?>\n         Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();\n         if (c == null) {\n             c = new NaturalComparator();\n          * @throws ClassCastException when <i>o1</i> is not a {@link Comparable Comparable},\n          *         or when <code>((Comparable)o1).compareTo(o2)</code> does\n          */\n-        @SuppressWarnings(\"unchecked\")\n+        @SuppressWarnings(\"unchecked\") // cast to (T) may throw ClassCastException, see Javadoc\n         public int compare(Comparable<T> o1, Comparable<T> o2) {\n             return o1.compareTo((T) o2);\n         }\n     public boolean equals(Object obj) {\n         if (this == obj)\n             return true;\n-        if (obj == null)\n-            return false;\n         if (!(obj instanceof Frequency))\n             return false;\n         Frequency other = (Frequency) obj;", "timestamp": 1268532901, "metainfo": ""}