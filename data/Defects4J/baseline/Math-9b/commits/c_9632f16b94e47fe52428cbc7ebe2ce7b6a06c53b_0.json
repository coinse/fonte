{"sha": "9632f16b94e47fe52428cbc7ebe2ce7b6a06c53b", "log": "MATH-795: factored out testCosinePrecondition1(), testCosinePrecondition2() and testCosinePrecondition3().   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n         Assert.assertEquals(0, new ArrayRealVector(new double[0], false).getDimension());\n     }\n \n-    @Test(expected=MathArithmeticException.class)\n-    public void testCosinePrecondition1() {\n-        final ArrayRealVector v = new ArrayRealVector(new double[] {0, 0, 0});\n-        final ArrayRealVector w = new ArrayRealVector(new double[] {1, 0, 0});\n-        v.cosine(w);\n-    }\n-    @Test(expected=MathArithmeticException.class)\n-    public void testCosinePrecondition2() {\n-        final ArrayRealVector v = new ArrayRealVector(new double[] {0, 0, 0});\n-        final ArrayRealVector w = new ArrayRealVector(new double[] {1, 0, 0});\n-        w.cosine(v);\n-    }\n-    @Test(expected=DimensionMismatchException.class)\n-    public void testCosinePrecondition3() {\n-        final ArrayRealVector v = new ArrayRealVector(new double[] {1, 2, 3});\n-        final ArrayRealVector w = new ArrayRealVector(new double[] {1, 2, 3, 4});\n-        v.cosine(w);\n-    }\n-\n     @Test(expected=DimensionMismatchException.class)\n     public void testCombinePreconditionSameType() {\n         final double a = 1d;\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n import org.apache.commons.math3.analysis.function.Tan;\n import org.apache.commons.math3.analysis.function.Tanh;\n import org.apache.commons.math3.analysis.function.Ulp;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n         Assert.assertEquals(-1, v.cosine(w), normTolerance);\n     }\n \n+    @Test(expected=MathArithmeticException.class)\n+    public void testCosinePrecondition1() {\n+        final RealVector v = create(new double[] {0, 0, 0});\n+        final RealVector w = create(new double[] {1, 0, 0});\n+        v.cosine(w);\n+    }\n+\n+    @Test(expected=MathArithmeticException.class)\n+    public void testCosinePrecondition2() {\n+        final RealVector v = create(new double[] {0, 0, 0});\n+        final RealVector w = create(new double[] {1, 0, 0});\n+        w.cosine(v);\n+    }\n+\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testCosinePrecondition3() {\n+        final RealVector v = create(new double[] {1, 2, 3});\n+        final RealVector w = create(new double[] {1, 2, 3, 4});\n+        v.cosine(w);\n+    }\n+\n     /*\n      * TESTS OF THE VISITOR PATTERN\n      */", "timestamp": 1338916275, "metainfo": ""}