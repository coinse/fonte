{"sha": "e96ed8c914c0139c89cdbe88c86b539ac2b96303", "log": "Removed double[][] solve(double[][]) from CholeskyDecompositionImpl.Solver  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n             return new ArrayRealVector(x, false);\n         }\n \n-        /** Solve the linear equation A &times; X = B for matrices A.\n-         * <p>The A matrix is implicit, it is provided by the underlying\n-         * decomposition algorithm.</p>\n-         * @param b right-hand side of the equation A &times; X = B\n-         * @param reuseB if true, the b array will be reused and returned,\n-         * instead of being copied\n-         * @return a matrix X that minimizes the two norm of A &times; X - B\n-         * @throws org.apache.commons.math.exception.DimensionMismatchException\n-         * if the matrices dimensions do not match.\n-         * @throws SingularMatrixException\n-         * if the decomposed matrix is singular.\n-         */\n-        private double[][] solve(double[][] b, boolean reuseB) {\n+        /** {@inheritDoc} */\n+        public RealMatrix solve(RealMatrix b) {\n             final int m = lTData.length;\n-            if (b.length != m) {\n-                throw new DimensionMismatchException(b.length, m);\n-            }\n-\n-            final int nColB = b[0].length;\n-            final double[][] x;\n-            if (reuseB) {\n-                x = b;\n-            } else {\n-                x = new double[b.length][nColB];\n-                for (int i = 0; i < b.length; ++i) {\n-                    System.arraycopy(b[i], 0, x[i], 0, nColB);\n-                }\n-            }\n+            if (b.getRowDimension() != m) {\n+                throw new DimensionMismatchException(b.getRowDimension(), m);\n+            }\n+\n+            final int nColB = b.getColumnDimension();\n+            final double[][] x = b.getData();\n \n             // Solve LY = b\n             for (int j = 0; j < m; j++) {\n                 }\n             }\n \n-            return x;\n-\n-        }\n-\n-        /** {@inheritDoc} */\n-        public double[][] solve(double[][] b) {\n-            return solve(b, false);\n-        }\n-\n-        /** {@inheritDoc} */\n-        public RealMatrix solve(RealMatrix b) {\n-            return new Array2DRowRealMatrix(solve(b.getData(), true), false);\n+            return new Array2DRowRealMatrix(x);\n         }\n \n         /** {@inheritDoc} */", "timestamp": 1315534287, "metainfo": ""}