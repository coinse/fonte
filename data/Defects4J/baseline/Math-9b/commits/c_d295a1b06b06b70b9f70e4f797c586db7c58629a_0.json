{"sha": "d295a1b06b06b70b9f70e4f797c586db7c58629a", "log": "MATH-795: factored out testCosine().   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n         Assert.assertEquals(0, new ArrayRealVector(new double[0], false).getDimension());\n     }\n \n-    @Test\n-    public void testCosine() {\n-        final ArrayRealVector v = new ArrayRealVector(new double[] {1, 0, 0});\n-\n-        double[] wData = new double[] {1, 1, 0};\n-        RealVector w = new ArrayRealVector(wData);\n-        Assert.assertEquals(FastMath.sqrt(2) / 2, v.cosine(w), normTolerance);\n-\n-        wData = new double[] {1, 0, 0};\n-        w = new ArrayRealVector(wData);\n-        Assert.assertEquals(1, v.cosine(w), normTolerance);\n-\n-        wData = new double[] {0, 1, 0};\n-        w = new ArrayRealVector(wData);\n-        Assert.assertEquals(0, v.cosine(w), 0);\n-\n-        wData = new double[] {-1, 0, 0};\n-        w = new ArrayRealVector(wData);\n-        Assert.assertEquals(-1, v.cosine(w), normTolerance);\n-    }\n-\n     @Test(expected=MathArithmeticException.class)\n     public void testCosinePrecondition1() {\n         final ArrayRealVector v = new ArrayRealVector(new double[] {0, 0, 0});\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n         Assert.assertTrue(Double.isNaN(v4.getMaxValue()));\n     }\n \n+    @Test\n+    public void testCosine() {\n+        final RealVector v = create(new double[] {1, 0, 0});\n+\n+        double[] wData = new double[] {1, 1, 0};\n+        RealVector w = create(wData);\n+        Assert.assertEquals(FastMath.sqrt(2) / 2, v.cosine(w), normTolerance);\n+\n+        wData = new double[] {1, 0, 0};\n+        w = create(wData);\n+        Assert.assertEquals(1, v.cosine(w), normTolerance);\n+\n+        wData = new double[] {0, 1, 0};\n+        w = create(wData);\n+        Assert.assertEquals(0, v.cosine(w), 0);\n+\n+        wData = new double[] {-1, 0, 0};\n+        w = create(wData);\n+        Assert.assertEquals(-1, v.cosine(w), normTolerance);\n+    }\n+\n     /*\n      * TESTS OF THE VISITOR PATTERN\n      */\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n         }\n \n         @Override\n-        public double dotProduct(RealVector v) {\n-            throw unsupported();\n-        }\n-\n-        @Override\n-        public double getNorm() {\n-            throw unsupported();\n-        }\n-\n-        @Override\n         public double getL1Norm() {\n             throw unsupported();\n         }", "timestamp": 1338916100, "metainfo": ""}