{"sha": "09743354a6cbde7d5c2b927512fa0273e3ead804", "log": "added support for generation and analysis of random vectors  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/random/GaussianRandomGenerator.java\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+// \n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.commons.math.random;\n+\n+/** This class is a gaussian normalized random generator for scalars.\n+ * <p>This class is a simple wrapper around the {@link\n+ * RandomGenerator#nextGaussian} method.</p>\n+ * @version $Revision:$ $Date$\n+ */\n+\n+public class GaussianRandomGenerator implements NormalizedRandomGenerator {\n+\n+    /** Create a new generator.\n+     * @param generator underlying random generator to use\n+     */\n+    public GaussianRandomGenerator(RandomGenerator generator) {\n+        this.generator = generator;\n+    }\n+\n+    /** Generate a random scalar with null mean and unit standard deviation.\n+     * @return a random scalar with null mean and unit standard deviation\n+     */\n+    public double nextNormalizedDouble() {\n+        return generator.nextGaussian();\n+    }\n+\n+    /** Underlying generator. */\n+    private RandomGenerator generator;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+// \n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.commons.math.random;\n+\n+/** This interface represent a normalized random generator for\n+ * scalars.\n+ * Normalized generator provide null mean and unit standard deviation scalars.\n+ * @version $Revision:$ $Date$\n+ */\n+public interface NormalizedRandomGenerator {\n+\n+  /** Generate a random scalar with null mean and unit standard deviation.\n+   * <p>This method does <strong>not</strong> specify the shape of the\n+   * distribution, it is the implementing class that provides it. The\n+   * only contract here is to generate numbers with null mean and unit\n+   * standard deviation.</p>\n+   * @return a random scalar with null mean and unit standard deviation\n+   */\n+  public double nextNormalizedDouble();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+// \n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.commons.math.random;\n+\n+import org.apache.commons.math.MathException;\n+\n+/** This class represents exceptions thrown by the correlated random\n+ * vector generator.\n+ * @version $Revision:$ $Date$\n+ */\n+\n+public class NotPositiveDefiniteMatrixException extends MathException {\n+\n+    /** Serializable version identifier */\n+    private static final long serialVersionUID = 4122929125438624648L;\n+\n+    /** Simple constructor.\n+     * build an exception with a default message.\n+     */\n+    public NotPositiveDefiniteMatrixException() {\n+        super(\"not positive definite matrix\", new Object[0]);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/random/RandomVectorGenerator.java\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+// \n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.commons.math.random;\n+\n+/** This interface represent a random generator for whole vectors.\n+\n+ * @version $Id: RandomVectorGenerator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @author L. Maisonobe\n+\n+ */\n+\n+public interface RandomVectorGenerator {\n+\n+  /** Generate a random vector.\n+   * @return a random vector as an array of double.\n+   */\n+  public double[] nextVector();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+// \n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.commons.math.random;\n+\n+import java.util.Arrays;\n+\n+/** This class allows to generate random vectors with uncorrelated components.\n+ * @version $Id:$\n+ */\n+\n+public class UncorrelatedRandomVectorGenerator\n+  implements RandomVectorGenerator {\n+\n+  /** Simple constructor.\n+   * <p>Build an uncorrelated random vector generator from\n+   * its mean and standard deviation vectors.</p>\n+   * @param mean expected mean values for each component\n+   * @param standardDeviation standard deviation for each component\n+   * @param generator underlying generator for uncorrelated normalized\n+   * components\n+   */\n+  public UncorrelatedRandomVectorGenerator(double[] mean,\n+                                           double[] standardDeviation,\n+                                           NormalizedRandomGenerator generator) {\n+    if (mean.length != standardDeviation.length) {\n+      throw new IllegalArgumentException(\"dimension mismatch\");\n+    }\n+    this.mean              = (double[]) mean.clone();\n+    this.standardDeviation = (double[]) standardDeviation.clone();\n+    this.generator = generator;\n+  }\n+\n+  /** Simple constructor.\n+   * <p>Build a null mean random and unit standard deviation\n+   * uncorrelated vector generator</p>\n+   * @param dimension dimension of the vectors to generate\n+   * @param generator underlying generator for uncorrelated normalized\n+   * components\n+   */\n+  public UncorrelatedRandomVectorGenerator(int dimension,\n+                                           NormalizedRandomGenerator generator) {\n+    mean              = new double[dimension];\n+    standardDeviation = new double[dimension];\n+    Arrays.fill(standardDeviation, 1.0);\n+    this.generator = generator;\n+  }\n+\n+  /** Generate a correlated random vector.\n+   * @return a random vector as a newly built array of double\n+   */\n+  public double[] nextVector() {\n+\n+    double[] random = new double[mean.length]; \n+    for (int i = 0; i < random.length; ++i) {\n+      random[i] = mean[i] + standardDeviation[i] * generator.nextNormalizedDouble();\n+    }\n+\n+    return random;\n+\n+  }\n+\n+  /** Mean vector. */\n+  private double[] mean;\n+\n+  /** Standard deviation vector. */\n+  private double[] standardDeviation;\n+\n+  /** Underlying scalar generator. */\n+  private NormalizedRandomGenerator generator;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/random/UniformRandomGenerator.java\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+// \n+//   http://www.apache.org/licenses/LICENSE-2.0\n+// \n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.commons.math.random;\n+\n+/** This class implements a normalized uniform random generator.\n+ * <p>Since it is a normalized random generator, it has a null mean\n+ * and a unit standard deviation. Being also a uniform\n+ * generator, it produces numbers in the range [-&sqrt;(3) ; +&sqrt;(3)].</p>\n+ * @version $Revision:$ $Date$\n+ */\n+\n+public class UniformRandomGenerator implements NormalizedRandomGenerator {\n+\n+    /** Create a new generator.\n+     * @param generator underlying random generator to use\n+     */\n+    public UniformRandomGenerator(RandomGenerator generator) {\n+        this.generator = generator;\n+    }\n+\n+    /** Generate a random scalar with null mean and unit standard deviation.\n+     * <p>The number generated is uniformly distributed between -&sqrt;(3)\n+     * and +&sqrt;(3).</p>\n+     * @return a random scalar with null mean and unit standard deviation\n+     */\n+    public double nextNormalizedDouble() {\n+        return SQRT3 * (2 * generator.nextDouble() - 1.0);\n+    }\n+\n+    /** Underlying generator. */\n+    private RandomGenerator generator;\n+\n+    private static final double SQRT3 = Math.sqrt(3.0);\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.descriptive.moment;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.DimensionMismatchException;\n+import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.linear.RealMatrixImpl;\n+\n+/**\n+ * Returns the covariance matrix of the available vectors.\n+ * @version $Revision:$\n+ */\n+public class VectorialCovariance implements Serializable {\n+\n+    /** Serializable version identifier */\n+    private static final long serialVersionUID = 4118372414238930270L;\n+\n+    /** Sums for each component. */\n+    private double[] sums;\n+\n+    /** Sums of products for each component. */\n+    private double[] productsSums;\n+\n+    /** Number of vectors in the sample. */\n+    private long n;\n+\n+    /** Constructs a VectorialMean.\n+     * @param dimension vectors dimension\n+     */\n+    public VectorialCovariance(int dimension) {\n+        sums         = new double[dimension];\n+        productsSums = new double[dimension * (dimension + 1) / 2];\n+        n            = 0;\n+    }\n+\n+    /**\n+     * Add a new vector to the sample.\n+     * @param vector vector to add\n+     * @exception DimensionMismatchException if the vector does not have the right dimension\n+     */\n+    public void increment(double[] v) throws DimensionMismatchException {\n+        if (v.length != sums.length) {\n+            throw new DimensionMismatchException(v.length, sums.length);\n+        }\n+        int k = 0;\n+        for (int i = 0; i < v.length; ++i) {\n+            sums[i] += v[i];\n+            for (int j = 0; j <= i; ++j) {\n+                productsSums[k++] += v[i] * v[j];\n+            }\n+        }\n+        n++;\n+    }\n+\n+    /**\n+     * Get the covariance matrix.\n+     * @return covariance matrix\n+     */\n+    public RealMatrix getResult() {\n+\n+        int dimension = sums.length;\n+        RealMatrixImpl result = new RealMatrixImpl(dimension, dimension);\n+\n+        if (n > 1) {\n+            double[][] resultData = result.getDataRef();\n+            double c = 1.0 / (n * (n - 1));\n+            int k = 0;\n+            for (int i = 0; i < dimension; ++i) {\n+                for (int j = 0; j <= i; ++j) {\n+                    double e = c * (n * productsSums[k++] - sums[i] * sums[j]);\n+                    resultData[i][j] = e;\n+                    resultData[j][i] = e;\n+                }\n+            }\n+        }\n+\n+        return result;\n+\n+    }\n+\n+    /**\n+     * Get the number of vectors in the sample.\n+     * @return number of vectors in the sample\n+     */\n+    public long getN() {\n+        return n;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.descriptive.moment;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.DimensionMismatchException;\n+\n+/**\n+ * Returns the arithmetic mean of the available vectors.\n+ * @version $Revision:$\n+ */\n+public class VectorialMean implements Serializable {\n+\n+    /** Serializable version identifier */\n+    private static final long serialVersionUID = 8223009086481006892L;\n+\n+    /** Means for each component. */\n+    private Mean[] means;\n+\n+    /** Constructs a VectorialMean.\n+     * @param dimension vectors dimension\n+     */\n+    public VectorialMean(int dimension) {\n+        means = new Mean[dimension];\n+        for (int i = 0; i < dimension; ++i) {\n+            means[i] = new Mean();\n+        }\n+    }\n+\n+    /**\n+     * Add a new vector to the sample.\n+     * @param vector vector to add\n+     * @exception DimensionMismatchException if the vector does not have the right dimension\n+     */\n+    public void increment(double[] v) throws DimensionMismatchException {\n+        if (v.length != means.length) {\n+            throw new DimensionMismatchException(v.length, means.length);\n+        }\n+        for (int i = 0; i < v.length; ++i) {\n+            means[i].increment(v[i]);\n+        }\n+    }\n+\n+    /**\n+     * Get the mean vector.\n+     * @return mean vector\n+     */\n+    public double[] getResult() {\n+        double[] result = new double[means.length];\n+        for (int i = 0; i < result.length; ++i) {\n+            result[i] = means[i].getResult();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get the number of vectors in the sample.\n+     * @return number of vectors in the sample\n+     */\n+    public long getN() {\n+        return (means.length == 0) ? 0 : means[0].getN();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+\n+//http://www.apache.org/licenses/LICENSE-2.0\n+\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+\n+package org.apache.commons.math.random;\n+\n+import org.apache.commons.math.stat.StatUtils;\n+\n+import junit.framework.*;\n+\n+public class GaussianRandomGeneratorTest\n+extends TestCase {\n+\n+    public GaussianRandomGeneratorTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testMeanAndStandardDeviation() {\n+        RandomGenerator rg = new JDKRandomGenerator();\n+        rg.setSeed(17399225432l);\n+        GaussianRandomGenerator generator = new GaussianRandomGenerator(rg);\n+        double[] sample = new double[10000];\n+        for (int i = 0; i < sample.length; ++i) {\n+            sample[i] = generator.nextNormalizedDouble();\n+        }\n+        assertEquals(0.0, StatUtils.mean(sample), 0.012);\n+        assertEquals(1.0, StatUtils.variance(sample), 0.01);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(GaussianRandomGeneratorTest.class);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+\n+//http://www.apache.org/licenses/LICENSE-2.0\n+\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+\n+package org.apache.commons.math.random;\n+\n+import org.apache.commons.math.DimensionMismatchException;\n+import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.stat.descriptive.moment.VectorialCovariance;\n+import org.apache.commons.math.stat.descriptive.moment.VectorialMean;\n+\n+import junit.framework.*;\n+\n+public class UncorrelatedRandomVectorGeneratorTest\n+extends TestCase {\n+\n+    public UncorrelatedRandomVectorGeneratorTest(String name) {\n+        super(name);\n+        mean = null;\n+        standardDeviation = null;\n+        generator = null;\n+    }\n+\n+    public void testMeanAndCorrelation() throws DimensionMismatchException {\n+\n+        VectorialMean meanStat = new VectorialMean(mean.length);\n+        VectorialCovariance covStat = new VectorialCovariance(mean.length);\n+        for (int i = 0; i < 10000; ++i) {\n+            double[] v = generator.nextVector();\n+            meanStat.increment(v);\n+            covStat.increment(v);\n+        }\n+\n+        double[] estimatedMean = meanStat.getResult();\n+        double scale;\n+        RealMatrix estimatedCorrelation = covStat.getResult();\n+        for (int i = 0; i < estimatedMean.length; ++i) {\n+            assertEquals(mean[i], estimatedMean[i], 0.07);\n+            for (int j = 0; j < i; ++j) {\n+                scale = standardDeviation[i] * standardDeviation[j];\n+                assertEquals(0, estimatedCorrelation.getEntry(i, j) / scale, 0.03);\n+            }\n+            scale = standardDeviation[i] * standardDeviation[i];\n+            assertEquals(1, estimatedCorrelation.getEntry(i, i) / scale, 0.025);\n+        }\n+\n+    }\n+\n+    public void setUp() {\n+        mean              = new double[] {0.0, 1.0, -3.0, 2.3};\n+        standardDeviation = new double[] {1.0, 2.0, 10.0, 0.1};\n+        RandomGenerator rg = new JDKRandomGenerator();\n+        rg.setSeed(17399225432l);\n+        generator =\n+            new UncorrelatedRandomVectorGenerator(mean, standardDeviation,\n+                    new GaussianRandomGenerator(rg));\n+    }\n+\n+    public void tearDown() {\n+        mean = null;\n+        standardDeviation = null;\n+        generator = null;\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(UncorrelatedRandomVectorGeneratorTest.class);\n+    }\n+\n+    private double[] mean;\n+    private double[] standardDeviation;\n+    private UncorrelatedRandomVectorGenerator generator;\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+\n+//http://www.apache.org/licenses/LICENSE-2.0\n+\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+\n+package org.apache.commons.math.random;\n+\n+import org.apache.commons.math.stat.StatUtils;\n+\n+import junit.framework.*;\n+\n+public class UniformRandomGeneratorTest\n+extends TestCase {\n+\n+    public UniformRandomGeneratorTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testMeanAndStandardDeviation() {\n+        RandomGenerator rg = new JDKRandomGenerator();\n+        rg.setSeed(17399225432l);\n+        UniformRandomGenerator generator = new UniformRandomGenerator(rg);\n+        double[] sample = new double[10000];\n+        for (int i = 0; i < sample.length; ++i) {\n+            sample[i] = generator.nextNormalizedDouble();\n+        }\n+        assertEquals(0.0, StatUtils.mean(sample), 0.07);\n+        assertEquals(1.0, StatUtils.variance(sample), 0.02);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(UniformRandomGeneratorTest.class);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+\n+//http://www.apache.org/licenses/LICENSE-2.0\n+\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+\n+package org.apache.commons.math.stat.descriptive.moment;\n+\n+import org.apache.commons.math.DimensionMismatchException;\n+import org.apache.commons.math.linear.RealMatrix;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+public class VectorialCovarianceTest\n+extends TestCase {\n+\n+    public VectorialCovarianceTest(String name) {\n+        super(name);\n+        points = null;\n+    }\n+\n+    public void testMismatch() {\n+        try {\n+            new VectorialCovariance(8).increment(new double[5]);\n+            fail(\"an exception should have been thrown\");\n+        } catch (DimensionMismatchException dme) {\n+            assertEquals(5, dme.getDimension1());\n+            assertEquals(8, dme.getDimension2());\n+        } catch (Exception e) {\n+            fail(\"wrong exception type caught: \" + e.getClass().getName());\n+        }\n+    }\n+\n+    public void testSimplistic() throws DimensionMismatchException {\n+        VectorialCovariance stat = new VectorialCovariance(2);\n+        stat.increment(new double[] {-1.0,  1.0});\n+        stat.increment(new double[] { 1.0, -1.0});\n+        RealMatrix c = stat.getResult();\n+        assertEquals( 2.0, c.getEntry(0, 0), 1.0e-12);\n+        assertEquals(-2.0, c.getEntry(1, 0), 1.0e-12);\n+        assertEquals( 2.0, c.getEntry(1, 1), 1.0e-12);\n+    }\n+\n+    public void testBasicStats() throws DimensionMismatchException {\n+\n+        VectorialCovariance stat = new VectorialCovariance(points[0].length);\n+        for (int i = 0; i < points.length; ++i) {\n+            stat.increment(points[i]);\n+        }\n+\n+        assertEquals(points.length, stat.getN());\n+\n+        RealMatrix c = stat.getResult();\n+        double[][] refC    = new double[][] {\n+                { 8.0470, -1.9195, -3.4445},\n+                {-1.9195,  1.0470,  3.2795},\n+                {-3.4445,  3.2795, 12.2070}\n+        };\n+\n+        for (int i = 0; i < c.getRowDimension(); ++i) {\n+            for (int j = 0; j <= i; ++j) {\n+                assertEquals(refC[i][j], c.getEntry(i, j), 1.0e-12);\n+            }\n+        }\n+\n+    }\n+\n+    public void setUp() {\n+        points = new double[][] {\n+                { 1.2, 2.3,  4.5},\n+                {-0.7, 2.3,  5.0},\n+                { 3.1, 0.0, -3.1},\n+                { 6.0, 1.2,  4.2},\n+                {-0.7, 2.3,  5.0}\n+        };\n+    }\n+\n+    public void tearDown() {\n+        points = null;\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(VectorialCovarianceTest.class);\n+    }\n+\n+    private double [][] points;\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java\n+//Licensed to the Apache Software Foundation (ASF) under one\n+//or more contributor license agreements.  See the NOTICE file\n+//distributed with this work for additional information\n+//regarding copyright ownership.  The ASF licenses this file\n+//to you under the Apache License, Version 2.0 (the\n+//\"License\"); you may not use this file except in compliance\n+//with the License.  You may obtain a copy of the License at\n+\n+//http://www.apache.org/licenses/LICENSE-2.0\n+\n+//Unless required by applicable law or agreed to in writing,\n+//software distributed under the License is distributed on an\n+//\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+//KIND, either express or implied.  See the License for the\n+//specific language governing permissions and limitations\n+//under the License.\n+\n+package org.apache.commons.math.stat.descriptive.moment;\n+\n+import org.apache.commons.math.DimensionMismatchException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+public class VectorialMeanTest\n+extends TestCase {\n+\n+    public VectorialMeanTest(String name) {\n+        super(name);\n+        points = null;\n+    }\n+\n+    public void testMismatch() {\n+        try {\n+            new VectorialMean(8).increment(new double[5]);\n+            fail(\"an exception should have been thrown\");\n+        } catch (DimensionMismatchException dme) {\n+            assertEquals(5, dme.getDimension1());\n+            assertEquals(8, dme.getDimension2());\n+        } catch (Exception e) {\n+            fail(\"wrong exception type caught: \" + e.getClass().getName());\n+        }\n+    }\n+\n+    public void testSimplistic() throws DimensionMismatchException {\n+        VectorialMean stat = new VectorialMean(2);\n+        stat.increment(new double[] {-1.0,  1.0});\n+        stat.increment(new double[] { 1.0, -1.0});\n+        double[] mean = stat.getResult();\n+        assertEquals(0.0, mean[0], 1.0e-12);\n+        assertEquals(0.0, mean[1], 1.0e-12);\n+    }\n+\n+    public void testBasicStats() throws DimensionMismatchException {\n+\n+        VectorialMean stat = new VectorialMean(points[0].length);\n+        for (int i = 0; i < points.length; ++i) {\n+            stat.increment(points[i]);\n+        }\n+\n+        assertEquals(points.length, stat.getN());\n+\n+        double[] mean = stat.getResult();\n+        double[]   refMean = new double[] { 1.78, 1.62,  3.12};\n+\n+        for (int i = 0; i < mean.length; ++i) {\n+            assertEquals(refMean[i], mean[i], 1.0e-12);\n+        }\n+\n+    }\n+\n+    public void setUp() {\n+        points = new double[][] {\n+                { 1.2, 2.3,  4.5},\n+                {-0.7, 2.3,  5.0},\n+                { 3.1, 0.0, -3.1},\n+                { 6.0, 1.2,  4.2},\n+                {-0.7, 2.3,  5.0}\n+        };\n+    }\n+\n+    public void tearDown() {\n+        points = null;\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(VectorialMeanTest.class);\n+    }\n+\n+    private double [][] points;\n+\n+}", "timestamp": 1172528573, "metainfo": ""}