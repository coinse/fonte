{"sha": "a033d9de31063ea51860a46d56c4e343b99eb43a", "log": "Serializable changes for RealMatrix  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public abstract class AbstractRealMatrix implements RealMatrix, Serializable {\n-    \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -3665653040524315561L;\n-\n+public abstract class AbstractRealMatrix implements RealMatrix {\n+    \n+    \n     /** Cached LU solver.\n      * @deprecated as of release 2.0, since all methods using this are deprecated\n      */\n--- a/src/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n \n package org.apache.commons.math.linear;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.util.OpenIntToDoubleHashMap;\n \n /**\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class OpenMapRealMatrix extends AbstractRealMatrix implements SparseRealMatrix {\n+public class OpenMapRealMatrix extends AbstractRealMatrix implements SparseRealMatrix, Serializable {\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = -5962461716457143437L;\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n  * \n  * @version $Revision$ $Date$\n  */\n-public interface RealMatrix extends AnyMatrix, Serializable {\n+public interface RealMatrix extends AnyMatrix {\n \n     /**\n      * Create a new RealMatrix of the same type as the instance with the supplied\n--- a/src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java\n  */\n package org.apache.commons.math.linear;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.util.Arrays;\n import java.util.Random;\n \n \n     }\n     \n+    public void testSerial()  {\n+        try {\n+            File test = File.createTempFile(\"DRM\",\".ser\");\n+            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n+            DenseRealMatrix m = new DenseRealMatrix(testData);\n+            out.writeObject(m);\n+            out.close();\n+            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n+            DenseRealMatrix nm = (DenseRealMatrix)in.readObject();\n+            in.close();\n+            test.delete();\n+            assertEquals(m,nm);\n+            \n+        } catch (IOException e) {\n+            fail(\"IOException: \"+e);\n+        } catch (ClassNotFoundException e) {\n+            fail(\"Can't happen: \"+e);\n+        }\n+    }\n+        \n     private static class SetVisitor extends DefaultRealMatrixChangingVisitor {\n         private static final long serialVersionUID = 1773444180892369386L;\n         @Override\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.linear;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n         }\n \n     }\n+\n+    public void testSerial()  {\n+        try {\n+            File test = File.createTempFile(\"RMI\",\".ser\");\n+            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n+            RealMatrixImpl m = new RealMatrixImpl(testData);\n+            out.writeObject(m);\n+            out.close();\n+            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n+            RealMatrixImpl nm = (RealMatrixImpl)in.readObject();\n+            in.close();\n+            test.delete();\n+            assertEquals(m,nm);\n+            \n+        } catch (IOException e) {\n+            fail(\"IOException: \"+e);\n+        } catch (ClassNotFoundException e) {\n+            fail(\"Can't happen: \"+e);\n+        }\n+    }\n+    \n     \n     private static class SetVisitor extends DefaultRealMatrixChangingVisitor {\n         private static final long serialVersionUID = -5082825244208703349L;\n--- a/src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java\n  * limitations under the License.\n  */\n package org.apache.commons.math.linear;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n \n     }\n \n+    public void testSerial()  {\n+        try {\n+            File test = File.createTempFile(\"OMRM\",\".ser\");\n+            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n+            OpenMapRealMatrix m = createSparseMatrix(testData);\n+            out.writeObject(m);\n+            out.close();\n+            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n+            OpenMapRealMatrix nm = (OpenMapRealMatrix)in.readObject();\n+            in.close();\n+            test.delete();\n+            assertEquals(m,nm);\n+\n+        } catch (IOException e) {\n+            fail(\"IOException: \"+e);\n+        } catch (ClassNotFoundException e) {\n+            fail(\"Can't happen: \"+e);\n+        }\n+    }\n+\n     // --------------- -----------------Protected methods\n \n     /** verifies that two matrices are close (1-norm) */\n         }\n         return matrix;\n     }\n+\n+\n }", "timestamp": 1243123374, "metainfo": ""}