{"sha": "771776a53e0daba963f8f933ffd13506020de1df", "log": "Javadoc: @value only works for compile-time constants  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/Precision.java\n+++ b/src/main/java/org/apache/commons/math3/util/Precision.java\n \n     /**\n      * Smallest positive number such that {@code 1 - EPSILON} is not\n-     * numerically equal to 1: {@value}.\n-     * In IEEE 754 arithmetic, this is 2<sup>-53</sup>: {@value}.\n+     * numerically equal to 1.\n+     * <br/>\n+     * In IEEE 754 arithmetic, this is 2<sup>-53</sup>.\n      */\n     public static final double EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);\n     //This was previously expressed as = 0x1.0p-53;\n \n     /**\n      * Safe minimum, such that {@code 1 / SAFE_MIN} does not overflow.\n+     * <br/>\n      * In IEEE 754 arithmetic, this is also the smallest normalized\n-     * number 2<sup>-1022</sup>: {@value}.\n+     * number 2<sup>-1022</sup>.\n      */\n     public static final double SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);\n     // This was previously expressed as = 0x1.0p-1022;", "timestamp": 1335402196, "metainfo": ""}