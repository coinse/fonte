{"sha": "4c2341482b6828b68525b2c4890972b018eff0c2", "log": "Made scalar division consistent with complex division wrt infinite arguments, improved tests.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n         if (isNaN || Double.isNaN(divisor)) {\n             return NaN;\n         }\n-        if (divisor == 0.0) {\n-            return NaN;\n-        }\n-        if (Double.isInfinite(divisor) && !isInfinite()) {\n-            return ZERO;\n-        }\n-\n+        if (divisor == 0d) {\n+            return NaN;\n+        }\n+        if (Double.isInfinite(divisor)) {\n+            return !isInfinite() ? ZERO : NaN;     \n+        }\n         return createComplex(real / divisor,\n                              imaginary  / divisor);\n     }\n--- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n+++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n         Complex x = new Complex(1,1);\n         double yDouble = Double.POSITIVE_INFINITY;\n         Complex yComplex = new Complex(yDouble);\n-        Assert.assertEquals(x.divide(yComplex), x.divide(yDouble));\n+        TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);\n \n         yDouble = Double.NEGATIVE_INFINITY;\n         yComplex = new Complex(yDouble);\n-        Assert.assertEquals(x.divide(yComplex), x.divide(yDouble));\n+        TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);\n+        \n+        x = new Complex(1, Double.NEGATIVE_INFINITY);\n+        TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0);\n+    }\n+    \n+    @Test\n+    public void testScalarDivideZero() {\n+        Complex x = new Complex(1,1);\n+        TestUtils.assertEquals(x.divide(Complex.ZERO), x.divide(0), 0);\n     }\n \n     @Test", "timestamp": 1311525906, "metainfo": ""}