{"sha": "01ae040fcd4f09b154c4237fef3650ada07f4a08", "log": "Remove unread variable  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java\n     }\n \n     public void testPreconditions() {\n-        CauchyDistribution dist;\n         try {\n-            dist = new CauchyDistributionImpl(0, 0);\n+            new CauchyDistributionImpl(0, 0);\n             fail(\"Cannot have zero scale\");\n         } catch (NotStrictlyPositiveException ex) {\n             // Expected.\n         }\n         try {\n-            dist = new CauchyDistributionImpl(0, -1);\n+            new CauchyDistributionImpl(0, -1);\n             fail(\"Cannot have negative scale\");\n         } catch (NotStrictlyPositiveException ex) {\n             // Expected.\n--- a/src/test/java/org/apache/commons/math/distribution/FDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/FDistributionTest.java\n     }\n \n     public void testPreconditions() {\n-        FDistribution dist;\n         try {\n-            dist = new FDistributionImpl(0, 1);\n+            new FDistributionImpl(0, 1);\n             fail(\"Expecting NotStrictlyPositiveException for df = 0\");\n         } catch (NotStrictlyPositiveException ex) {\n             // Expected.\n         }\n         try {\n-            dist = new FDistributionImpl(1, 0);\n+            new FDistributionImpl(1, 0);\n             fail(\"Expecting NotStrictlyPositiveException for df = 0\");\n         } catch (NotStrictlyPositiveException ex) {\n             // Expected.\n--- a/src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java\n \n     public void testPreconditions() {\n         try {\n-            GammaDistribution distribution = new GammaDistributionImpl(0, 1);\n+            new GammaDistributionImpl(0, 1);\n             fail(\"Expecting NotStrictlyPositiveException for alpha = 0\");\n         } catch (NotStrictlyPositiveException ex) {\n             // Expected.\n         }\n         try {\n-            GammaDistribution distribution = new GammaDistributionImpl(1, 0);\n+            new GammaDistributionImpl(1, 0);\n             fail(\"Expecting NotStrictlyPositiveException for alpha = 0\");\n         } catch (NotStrictlyPositiveException ex) {\n             // Expected.\n--- a/src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n     }\n \n     public void testPreconditions() {\n-        HypergeometricDistribution dist;\n-        try {\n-            dist = new HypergeometricDistributionImpl(0, 3, 5);\n+        try {\n+            new HypergeometricDistributionImpl(0, 3, 5);\n             fail(\"negative population size. NotStrictlyPositiveException expected\");\n         } catch(NotStrictlyPositiveException ex) {\n             // Expected.\n         }\n         try {\n-            dist = new HypergeometricDistributionImpl(5, -1, 5);\n+            new HypergeometricDistributionImpl(5, -1, 5);\n             fail(\"negative number of successes. NotPositiveException expected\");\n         } catch(NotPositiveException ex) {\n             // Expected.\n         }\n         try {\n-            dist = new HypergeometricDistributionImpl(5, 3, -1);\n+            new HypergeometricDistributionImpl(5, 3, -1);\n             fail(\"negative sample size. NotPositiveException expected\");\n         } catch(NotPositiveException ex) {\n             // Expected.\n         }\n         try {\n-            dist = new HypergeometricDistributionImpl(5, 6, 5);\n+            new HypergeometricDistributionImpl(5, 6, 5);\n             fail(\"numberOfSuccesses > populationSize. NumberIsTooLargeException expected\");\n         } catch(NumberIsTooLargeException ex) {\n             // Expected.\n         }\n         try {\n-            dist = new HypergeometricDistributionImpl(5, 3, 6);\n+            new HypergeometricDistributionImpl(5, 3, 6);\n             fail(\"sampleSize > populationSize. NumberIsTooLargeException expected\");\n         } catch(NumberIsTooLargeException ex) {\n             // Expected.\n--- a/src/test/java/org/apache/commons/math/distribution/TDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/TDistributionTest.java\n \n     public void testPreconditions() {\n         try {\n-            TDistribution dist = new TDistributionImpl(0);\n+            new TDistributionImpl(0);\n             fail(\"Expecting NotStrictlyPositiveException for df = 0\");\n         } catch (NotStrictlyPositiveException ex) {\n             // expected\n--- a/src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java\n     }\n \n     public void testPreconditions() {\n-        ZipfDistribution dist;\n         try {\n-            dist = new ZipfDistributionImpl(0, 1);\n+            new ZipfDistributionImpl(0, 1);\n             fail(\"NotStrictlyPositiveException expected\");\n         } catch (NotStrictlyPositiveException e) {\n             // Expected.\n         }\n         try {\n-            dist = new ZipfDistributionImpl(1, 0);\n+            new ZipfDistributionImpl(1, 0);\n             fail(\"NotStrictlyPositiveException expected\");\n         } catch (NotStrictlyPositiveException e) {\n             // Expected.", "timestamp": 1285940559, "metainfo": ""}