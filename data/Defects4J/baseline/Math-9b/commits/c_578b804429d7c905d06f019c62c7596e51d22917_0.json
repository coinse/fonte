{"sha": "578b804429d7c905d06f019c62c7596e51d22917", "log": "Bugzilla #22002 from Brent W's patch - refactoring of UnivariateRealSolver   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+\n+/**\n+ * A factory to easily get a default solver and some convenience\n+ * functions.\n+ * Because solvers are easily reusable, the factory does not\n+ * store configuration data and creates preconfigured solvers\n+ * (this may be controversial, because the configuration data\n+ * may also be used for the default solver used by the static\n+ * solve() method). \n+ * @version $Revision: 1.1 $ $Date: 2003/07/30 22:06:37 $\n+ */\n+public class UnivariateRealSolverFactoryImpl\n+    extends UnivariateRealSolverFactory {\n+        \n+    /**\n+     * Default constructor.\n+     */\n+    UnivariateRealSolverFactoryImpl() {\n+    }\n+\n+    /**\n+     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * actual solver returned is determined by the underlying factory.\n+     * \n+     * This factory returns a {@link BrentSolver} instance.\n+     *\n+     * @param f the function.\n+     * @return the new solver.\n+     */\n+    public UnivariateRealSolver newDefaultSolver(UnivariateRealFunction f) {\n+        return newBrentSolver(f);\n+    }\n+    \n+    /**\n+     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * solver is an implementation of the bisection method.\n+     * @param f the function.\n+     * @return the new solver.\n+     */\n+    public UnivariateRealSolver newBisectionSolver(UnivariateRealFunction f) {\n+        return new BisectionSolver(f);\n+    }\n+\n+    /**\n+     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * solver is an implementation of the Brent method.\n+     * @param f the function.\n+     * @return the new solver.\n+     */\n+    public UnivariateRealSolver newBrentSolver(UnivariateRealFunction f) {\n+        return new BrentSolver(f);\n+    }\n+\n+    /**\n+     * Create a new {@link UnivariateRealSolver} for the given function.  The\n+     * solver is an implementation of the secant method.\n+     * @param f the function.\n+     * @return the new solver.\n+     */\n+    public UnivariateRealSolver newSecantSolver(UnivariateRealFunction f) {\n+        return new SecantSolver(f);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/07/30 22:06:37 $\n+ * @todo add comment\n+ */\n+public class UnivariateRealSolverUtil {\n+    /**\n+     * Default constructor.\n+     */\n+    private UnivariateRealSolverUtil() {\n+        super();\n+    }\n+\n+    /**\n+     * Method to solve for zeros of real univariate functions.  A\n+     * default solver is created and used for solving. \n+     * @param f the function.\n+     * @param x0 the lower bound for the interval.\n+     * @param x1 the upper bound for the interval.\n+     * @return a value where the function is zero.\n+     * @throws MathException if the iteration count was exceeded or the\n+     *         solver detects convergence problems otherwise.\n+     */\n+    public static double solve(UnivariateRealFunction f, double x0, double x1)\n+        throws MathException {\n+            \n+        return UnivariateRealSolverFactory.newInstance().newDefaultSolver(f)\n+            .solve(x0, x1);\n+    }\n+\n+    /**\n+     * Convience method to solve for zeros of real univariate functions.  A\n+     * default solver is created and used for solving. \n+     * @param f the function.\n+     * @param x0 the lower bound for the interval.\n+     * @param x1 the upper bound for the interval.\n+     * @param absoluteAccuracy the accuracy to be used by the solver.\n+     * @return a value where the function is zero.\n+     * @throws MathException if the iteration count was exceeded or the\n+     *         solver detects convergence problems otherwise.\n+     */\n+    public static double solve(\n+        UnivariateRealFunction f,\n+        double x0,\n+        double x1,\n+        double absoluteAccuracy)\n+        throws MathException {\n+            \n+        UnivariateRealSolver solver = UnivariateRealSolverFactory.newInstance()\n+            .newDefaultSolver(f);\n+        solver.setAbsoluteAccuracy(absoluteAccuracy);\n+        return solver.solve(x0, x1);\n+    }\n+}", "timestamp": 1059602797, "metainfo": ""}