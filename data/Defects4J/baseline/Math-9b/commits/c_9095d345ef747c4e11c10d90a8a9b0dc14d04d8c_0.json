{"sha": "9095d345ef747c4e11c10d90a8a9b0dc14d04d8c", "log": "Test Example for serialization of Solvers and Functions.   ", "commit": "\n--- a/src/test/org/apache/commons/math/analysis/BisectionSolverTest.java\n+++ b/src/test/org/apache/commons/math/analysis/BisectionSolverTest.java\n package org.apache.commons.math.analysis;\n \n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.stat.univariate.DescriptiveStatistics;\n \n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.10 $ $Date: 2004/02/18 03:24:20 $\n+ * @version $Revision: 1.11 $ $Date: 2004/06/02 00:11:53 $\n  */\n public final class BisectionSolverTest extends TestCase {\n     /**\n             fail(ex.getMessage());\n         }\n     }        \n+    \n+    /**\n+     * Test Serialization and Recovery\n+     */\n+   public void testSerialization() {\n+\n+       \n+       try {\n+           UnivariateRealFunction f = (UnivariateRealFunction)TestUtils.serializeAndRecover(new QuinticFunction());\n+           double result;\n+           \n+           BisectionSolver solver = new BisectionSolver(f);\n+           UnivariateRealSolver solver2 = (UnivariateRealSolver)TestUtils.serializeAndRecover(solver);\n+           \n+           result = solver.solve(-0.2, 0.2);\n+           assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+           assertEquals(solver2.solve(-0.2, 0.2), result, solver2.getAbsoluteAccuracy());\n+           \n+           result = solver.solve(-0.1, 0.3);\n+           assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+           assertEquals(solver2.solve(-0.1, 0.3), result, solver2.getAbsoluteAccuracy());\n+           \n+           result = solver.solve(-0.3, 0.45);\n+           assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+           assertEquals(solver2.solve(-0.3, 0.45), result, solver2.getAbsoluteAccuracy());\n+           \n+           result = solver.solve(0.3, 0.7);\n+           assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+           assertEquals(solver2.solve(0.3, 0.7), result, solver2.getAbsoluteAccuracy());\n+           \n+           result = solver.solve(0.2, 0.6);\n+           assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+           assertEquals(solver2.solve(0.2, 0.6), result, solver2.getAbsoluteAccuracy());\n+           \n+           result = solver.solve(0.05, 0.95);\n+           assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n+           assertEquals(solver2.solve(0.05, 0.95), result, solver2.getAbsoluteAccuracy());\n+           \n+           result = solver.solve(0.85, 1.25);\n+           assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+           assertEquals(solver2.solve(0.85, 1.25), result, solver2.getAbsoluteAccuracy());\n+           \n+           result = solver.solve(0.8, 1.2);\n+           assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+           assertEquals(solver2.solve(0.8, 1.2), result, solver2.getAbsoluteAccuracy());\n+           \n+           result = solver.solve(0.85, 1.75);\n+           assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+           assertEquals(solver2.solve(0.85, 1.75), result, solver2.getAbsoluteAccuracy());\n+           \n+           result = solver.solve(0.55, 1.45);\n+           assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+           assertEquals(solver2.solve(0.55, 1.45), result, solver2.getAbsoluteAccuracy());\n+           \n+           result = solver.solve(0.85, 5);\n+           assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n+           assertEquals(solver2.solve(0.85, 5), result, solver2.getAbsoluteAccuracy());\n+           \n+       } catch(MathException ex){\n+           fail(ex.getMessage());\n+       }\n+       \n+       /* Test Reset */\n+       try{ \n+           double newValue = 1.0e-2;\n+           UnivariateRealFunction f = (UnivariateRealFunction)TestUtils.serializeAndRecover(new QuinticFunction());\n+           UnivariateRealSolver solver = new BisectionSolver(f);\n+\n+           double oldValue = solver.getRelativeAccuracy();\n+           solver.setRelativeAccuracy(newValue);\n+           solver.resetRelativeAccuracy();\n+           assertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);\n+       \n+           UnivariateRealSolver  solver2 = (UnivariateRealSolver)TestUtils.serializeAndRecover(solver); \n+       \n+           assertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);\n+       \n+           solver2.setRelativeAccuracy(newValue);\n+           solver2.resetRelativeAccuracy();\n+       \n+           assertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);\n+       \n+       } catch(MathException ex){\n+           fail(ex.getMessage());\n+       }\n+    \n+   }\n+    \n }\n--- a/src/test/org/apache/commons/math/analysis/QuinticFunction.java\n+++ b/src/test/org/apache/commons/math/analysis/QuinticFunction.java\n  */\n package org.apache.commons.math.analysis;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.math.MathException;\n \n /**\n  * Auxillary class for testing solvers.\n  *\n- * @version $Revision: 1.12 $ $Date: 2004/04/08 21:19:17 $ \n+ * @version $Revision: 1.13 $ $Date: 2004/06/02 00:12:01 $ \n  */\n-public class QuinticFunction implements DifferentiableUnivariateRealFunction {\n+public class QuinticFunction implements DifferentiableUnivariateRealFunction, Serializable {\n+\n+    static final long serialVersionUID = -8866263034920607152L;\n \n     /* Evaluate quintic.\n      * @see org.apache.commons.math.UnivariateRealFunction#value(double)", "timestamp": 1086135121, "metainfo": ""}