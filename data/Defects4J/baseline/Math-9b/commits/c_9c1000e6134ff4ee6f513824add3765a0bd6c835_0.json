{"sha": "9c1000e6134ff4ee6f513824add3765a0bd6c835", "log": "tabs -> spaces. No functional change  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n         final double[] values,\n         final int begin,\n         final int length) {\n-    \treturn test(values, begin, length, false);\n-    }\n-    \n+        return test(values, begin, length, false);\n+    }\n+\n     /**\n      * This method is used by <code>evaluate(double[], int, int)</code> methods\n      * to verify that the input parameters designate a subarray of positive length.\n      */\n     protected boolean test(final double[] values, final int begin, final int length, final boolean allowEmpty){\n \n-    \tif (values == null) {\n-    \t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n-    \t}\n-\n-    \tif (begin < 0) {\n-    \t\tthrow new NotPositiveException(LocalizedFormats.START_POSITION, begin);\n-    \t}\n-\n-    \tif (length < 0) {\n-    \t\tthrow new NotPositiveException(LocalizedFormats.LENGTH, length);\n-    \t}\n-\n-    \tif (begin + length > values.length) {\n-    \t\tthrow MathRuntimeException.createIllegalArgumentException(\n-    \t\t\t\tLocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END);\n-    \t}\n-\n-    \tif (length == 0 && !allowEmpty) {\n-    \t\treturn false;\n-    \t}\n-\n-    \treturn true;\n+        if (values == null) {\n+            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+        }\n+\n+        if (begin < 0) {\n+            throw new NotPositiveException(LocalizedFormats.START_POSITION, begin);\n+        }\n+\n+        if (length < 0) {\n+            throw new NotPositiveException(LocalizedFormats.LENGTH, length);\n+        }\n+\n+        if (begin + length > values.length) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END);\n+        }\n+\n+        if (length == 0 && !allowEmpty) {\n+            return false;\n+        }\n+\n+        return true;\n \n     }\n \n         final double[] weights,\n         final int begin,\n         final int length) {\n-    \treturn test(values, weights, begin, length, false);\n-    }\n-    \n+        return test(values, weights, begin, length, false);\n+    }\n+\n     /**\n      * This method is used by <code>evaluate(double[], double[], int, int)</code> methods\n      * to verify that the begin and length parameters designate a subarray of positive length\n             }\n             if (weights[i] < 0) {\n                 throw MathRuntimeException.createIllegalArgumentException(\n-                      LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX, i, weights[i]);\n+                        LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX, i, weights[i]);\n             }\n             if (!containsPositiveWeight && weights[i] > 0.0) {\n                 containsPositiveWeight = true;\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n     }\n \n     protected void checkClearValue(StorelessUnivariateStatistic statistic){\n-    \tassertTrue(Double.isNaN(statistic.getResult()));\n+        assertTrue(Double.isNaN(statistic.getResult()));\n     }\n     \n     public void testSerialization() throws Exception {\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java\n     }\n     \n     protected void checkClearValue(StorelessUnivariateStatistic statistic){\n-    \tassertEquals(1, statistic.getResult(), 0);\n+        assertEquals(1, statistic.getResult(), 0);\n     }\n-    \n+\n \n }\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java\n     }\n     \n     protected void checkClearValue(StorelessUnivariateStatistic statistic){\n-    \tassertEquals(0, statistic.getResult(), 0);\n+        assertEquals(0, statistic.getResult(), 0);\n     }\n     \n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java\n     }\n     \n     protected void checkClearValue(StorelessUnivariateStatistic statistic){\n-    \tassertEquals(0, statistic.getResult(), 0);\n+        assertEquals(0, statistic.getResult(), 0);\n     }\n-    \n+\n \n }\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java\n     }\n     \n     protected void checkClearValue(StorelessUnivariateStatistic statistic){\n-    \tassertEquals(0, statistic.getResult(), 0);\n+        assertEquals(0, statistic.getResult(), 0);\n     }\n-    \n+\n \n }", "timestamp": 1283485613, "metainfo": ""}