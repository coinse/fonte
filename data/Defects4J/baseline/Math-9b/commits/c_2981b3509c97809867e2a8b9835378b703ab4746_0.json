{"sha": "2981b3509c97809867e2a8b9835378b703ab4746", "log": "[MATH-897] Add DBSCAN clustering algorithm, thanks to Reid Hochstedler.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.stat.clustering;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.NullArgumentException;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+/**\n+ * DBSCAN (density-based spatial clustering of applications with noise) algorithm.\n+ * <p>\n+ * The DBSCAN algorithm forms clusters based on the idea of density connectivity, i.e.\n+ * a point p is density connected to another point q, if there exists a chain of\n+ * points p<sub>i</sub>, with i = 1 .. n and p<sub>1</sub> = p and p<sub>n</sub> = q,\n+ * such that each pair &lt;p<sub>i</sub>, p<sub>i+1</sub>&gt; is directly density-reachable.\n+ * A point q is directly density-reachable from point p if it is in the &epsilon;-neighborhood\n+ * of this point.\n+ * <p>\n+ * Any point that is not density-reachable from a formed cluster is treated as noise, and\n+ * will thus not be present in the result.\n+ * <p>\n+ * The algorithm requires two parameters:\n+ * <ul>\n+ *   <li>eps: the distance that defines the &epsilon;-neighborhood of a point\n+ *   <li>minPoints: the minimum number of density-connected points required to form a cluster\n+ * </ul>\n+ * <p>\n+ * <b>Note:</b> as DBSCAN is not a centroid-based clustering algorithm, the resulting\n+ * {@link Cluster} objects will have no defined center, i.e. {@link Cluster#getCenter()} will\n+ * return {@code null}.\n+ *\n+ * @param <T> type of the points to cluster\n+ * @see <a href=\"http://en.wikipedia.org/wiki/DBSCAN\">DBSCAN (wikipedia)</a>\n+ * @see <a href=\"http://www.dbs.ifi.lmu.de/Publikationen/Papers/KDD-96.final.frame.pdf\">\n+ * A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise</a>\n+ * @version $Id$\n+ * @since 3.1\n+ */\n+public class DBSCANClusterer<T extends Clusterable<T>> {\n+\n+    /** Maximum radius of the neighborhood to be considered. */\n+    private final double              eps;\n+\n+    /** Minimum number of points needed for a cluster. */\n+    private final int                 minPts;\n+\n+    /** Status of a point during the clustering process. */\n+    private enum PointStatus {\n+        /** The point has is considered to be noise. */\n+        NOISE,\n+        /** The point is already part of a cluster. */\n+        PART_OF_CLUSTER\n+    }\n+\n+    /**\n+     * Creates a new instance of a DBSCANClusterer.\n+     *\n+     * @param eps maximum radius of the neighborhood to be considered\n+     * @param minPts minimum number of points needed for a cluster\n+     * @throws NotPositiveException if {@code eps < 0.0} or {@code minPts < 0}\n+     */\n+    public DBSCANClusterer(final double eps, final int minPts)\n+        throws NotPositiveException {\n+        if (eps < 0.0d) {\n+            throw new NotPositiveException(eps);\n+        }\n+        if (minPts < 0) {\n+            throw new NotPositiveException(minPts);\n+        }\n+        this.eps = eps;\n+        this.minPts = minPts;\n+    }\n+\n+    /**\n+     * Returns the maximum radius of the neighborhood to be considered.\n+     *\n+     * @return maximum radius of the neighborhood\n+     */\n+    public double getEps() {\n+        return eps;\n+    }\n+\n+    /**\n+     * Returns the minimum number of points needed for a cluster.\n+     *\n+     * @return minimum number of points needed for a cluster\n+     */\n+    public int getMinPts() {\n+        return minPts;\n+    }\n+\n+    /**\n+     * Performs DBSCAN cluster analysis.\n+     * <p>\n+     * <b>Note:</b> as DBSCAN is not a centroid-based clustering algorithm, the resulting\n+     * {@link Cluster} objects will have no defined center, i.e. {@link Cluster#getCenter()} will\n+     * return {@code null}.\n+     *\n+     * @param points the points to cluster\n+     * @return the list of clusters\n+     * @throws NullArgumentException if the data points are null\n+     */\n+    public List<Cluster<T>> cluster(final Collection<T> points) throws NullArgumentException {\n+\n+        // sanity checks\n+        MathUtils.checkNotNull(points);\n+\n+        final List<Cluster<T>> clusters = new ArrayList<Cluster<T>>();\n+        final Map<Clusterable<T>, PointStatus> visited = new HashMap<Clusterable<T>, PointStatus>();\n+\n+        for (final T point : points) {\n+            if (visited.get(point) != null) {\n+                continue;\n+            }\n+            final List<T> neighbors = getNeighbors(point, points);\n+            if (neighbors.size() >= minPts) {\n+                // DBSCAN does not care about center points\n+                final Cluster<T> cluster = new Cluster<T>(null);\n+                clusters.add(expandCluster(cluster, point, neighbors, points, visited));\n+            } else {\n+                visited.put(point, PointStatus.NOISE);\n+            }\n+        }\n+\n+        return clusters;\n+    }\n+\n+    /**\n+     * Expands the cluster to include density-reachable items.\n+     *\n+     * @param cluster Cluster to expand\n+     * @param point Point to add to cluster\n+     * @param neighbors List of neighbors\n+     * @param points the data set\n+     * @param visited the set of already visited points\n+     * @return the expanded cluster\n+     */\n+    private Cluster<T> expandCluster(final Cluster<T> cluster,\n+                                     final T point,\n+                                     final List<T> neighbors,\n+                                     final Collection<T> points,\n+                                     final Map<Clusterable<T>, PointStatus> visited) {\n+        cluster.addPoint(point);\n+        visited.put(point, PointStatus.PART_OF_CLUSTER);\n+\n+        List<T> seeds = new ArrayList<T>(neighbors);\n+        int index = 0;\n+        while (index < seeds.size()) {\n+            final T current = seeds.get(index);\n+            PointStatus pStatus = visited.get(current);\n+            // only check non-visited points\n+            if (pStatus == null) {\n+                final List<T> currentNeighbors = getNeighbors(current, points);\n+                if (currentNeighbors.size() >= minPts) {\n+                    seeds = merge(seeds, currentNeighbors);\n+                }\n+            }\n+\n+            if (pStatus != PointStatus.PART_OF_CLUSTER) {\n+                visited.put(current, PointStatus.PART_OF_CLUSTER);\n+                cluster.addPoint(current);\n+            }\n+\n+            index++;\n+        }\n+        return cluster;\n+    }\n+\n+    /**\n+     * Returns a list of density-reachable neighbors of a {@code point}.\n+     *\n+     * @param point the point to look for\n+     * @param points possible neighbors\n+     * @return the List of neighbors\n+     */\n+    private List<T> getNeighbors(final T point, final Collection<T> points) {\n+        final List<T> neighbors = new ArrayList<T>();\n+        for (final T neighbor : points) {\n+            if (point != neighbor && neighbor.distanceFrom(point) <= eps) {\n+                neighbors.add(neighbor);\n+            }\n+        }\n+        return neighbors;\n+    }\n+\n+    /**\n+     * Merges two lists together.\n+     *\n+     * @param one first list\n+     * @param two second list\n+     * @return merged lists\n+     */\n+    private List<T> merge(final List<T> one, final List<T> two) {\n+        final Set<T> oneSet = new HashSet<T>(one);\n+        for (T item : two) {\n+            if (!oneSet.contains(item)) {\n+                one.add(item);\n+            }\n+        }\n+        return one;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java\n+package org.apache.commons.math3.stat.clustering;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+\n+import org.apache.commons.math3.util.MathArrays;\n+\n+/**\n+ * A simple implementation of {@link Clusterable} for points with double coordinates.\n+ * @version $Id$\n+ * @since 3.1\n+ */\n+public class EuclideanDoublePoint implements Clusterable<EuclideanDoublePoint>, Serializable {\n+\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 8026472786091227632L;\n+\n+    /** Point coordinates. */\n+    private final double[] point;\n+\n+    /**\n+     * Build an instance wrapping an integer array.\n+     * <p>\n+     * The wrapped array is referenced, it is <em>not</em> copied.\n+     *\n+     * @param point the n-dimensional point in integer space\n+     */\n+    public EuclideanDoublePoint(final double[] point) {\n+        this.point = point;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public EuclideanDoublePoint centroidOf(final Collection<EuclideanDoublePoint> points) {\n+        final double[] centroid = new double[getPoint().length];\n+        for (final EuclideanDoublePoint p : points) {\n+            for (int i = 0; i < centroid.length; i++) {\n+                centroid[i] += p.getPoint()[i];\n+            }\n+        }\n+        for (int i = 0; i < centroid.length; i++) {\n+            centroid[i] /= points.size();\n+        }\n+        return new EuclideanDoublePoint(centroid);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double distanceFrom(final EuclideanDoublePoint p) {\n+        return MathArrays.distance(point, p.getPoint());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public boolean equals(final Object other) {\n+        if (!(other instanceof EuclideanDoublePoint)) {\n+            return false;\n+        }\n+        final double[] otherPoint = ((EuclideanDoublePoint) other).getPoint();\n+        if (point.length != otherPoint.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < point.length; i++) {\n+            if (point[i] != otherPoint[i]) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Get the n-dimensional point in integer space.\n+     *\n+     * @return a reference (not a copy!) to the wrapped array\n+     */\n+    public double[] getPoint() {\n+        return point;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public int hashCode() {\n+        int hashCode = 0;\n+        for (final Double i : point) {\n+            hashCode += i.hashCode() * 13 + 7;\n+        }\n+        return hashCode;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public String toString() {\n+        final StringBuilder buff = new StringBuilder(\"(\");\n+        final double[] coordinates = getPoint();\n+        for (int i = 0; i < coordinates.length; i++) {\n+            buff.append(coordinates[i]);\n+            if (i < coordinates.length - 1) {\n+                buff.append(',');\n+            }\n+        }\n+        buff.append(')');\n+        return buff.toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.stat.clustering;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.exception.NullArgumentException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class DBSCANClustererTest {\n+\n+    @Test\n+    public void testCluster() {\n+        // Test data generated using: http://people.cs.nctu.edu.tw/~rsliang/dbscan/testdatagen.html\n+        final EuclideanDoublePoint[] points = new EuclideanDoublePoint[] {\n+                new EuclideanDoublePoint(new double[] { 83.08303244924173, 58.83387754182331 }),\n+                new EuclideanDoublePoint(new double[] { 45.05445510940626, 23.469642649637535 }),\n+                new EuclideanDoublePoint(new double[] { 14.96417921432294, 69.0264096390456 }),\n+                new EuclideanDoublePoint(new double[] { 73.53189604333602, 34.896145021310076 }),\n+                new EuclideanDoublePoint(new double[] { 73.28498173551634, 33.96860806993209 }),\n+                new EuclideanDoublePoint(new double[] { 73.45828098873608, 33.92584423092194 }),\n+                new EuclideanDoublePoint(new double[] { 73.9657889183145, 35.73191006924026 }),\n+                new EuclideanDoublePoint(new double[] { 74.0074097183533, 36.81735596177168 }),\n+                new EuclideanDoublePoint(new double[] { 73.41247541410848, 34.27314856695011 }),\n+                new EuclideanDoublePoint(new double[] { 73.9156256353017, 36.83206791547127 }),\n+                new EuclideanDoublePoint(new double[] { 74.81499205809087, 37.15682749846019 }),\n+                new EuclideanDoublePoint(new double[] { 74.03144880081527, 37.57399178552441 }),\n+                new EuclideanDoublePoint(new double[] { 74.51870941207744, 38.674258946906775 }),\n+                new EuclideanDoublePoint(new double[] { 74.50754595105536, 35.58903978415765 }),\n+                new EuclideanDoublePoint(new double[] { 74.51322752749547, 36.030572259100154 }),\n+                new EuclideanDoublePoint(new double[] { 59.27900996617973, 46.41091720294207 }),\n+                new EuclideanDoublePoint(new double[] { 59.73744793841615, 46.20015558367595 }),\n+                new EuclideanDoublePoint(new double[] { 58.81134076672606, 45.71150126331486 }),\n+                new EuclideanDoublePoint(new double[] { 58.52225539437495, 47.416083617601544 }),\n+                new EuclideanDoublePoint(new double[] { 58.218626647023484, 47.36228902172297 }),\n+                new EuclideanDoublePoint(new double[] { 60.27139669447206, 46.606106348801404 }),\n+                new EuclideanDoublePoint(new double[] { 60.894962462363765, 46.976924697402865 }),\n+                new EuclideanDoublePoint(new double[] { 62.29048673878424, 47.66970563563518 }),\n+                new EuclideanDoublePoint(new double[] { 61.03857608977705, 46.212924720020965 }),\n+                new EuclideanDoublePoint(new double[] { 60.16916214139201, 45.18193661351688 }),\n+                new EuclideanDoublePoint(new double[] { 59.90036905976012, 47.555364347063005 }),\n+                new EuclideanDoublePoint(new double[] { 62.33003634144552, 47.83941489877179 }),\n+                new EuclideanDoublePoint(new double[] { 57.86035536718555, 47.31117930193432 }),\n+                new EuclideanDoublePoint(new double[] { 58.13715479685925, 48.985960494028404 }),\n+                new EuclideanDoublePoint(new double[] { 56.131923963548616, 46.8508904252667 }),\n+                new EuclideanDoublePoint(new double[] { 55.976329887053, 47.46384037658572 }),\n+                new EuclideanDoublePoint(new double[] { 56.23245975235477, 47.940035191131756 }),\n+                new EuclideanDoublePoint(new double[] { 58.51687048212625, 46.622885352699086 }),\n+                new EuclideanDoublePoint(new double[] { 57.85411081905477, 45.95394361577928 }),\n+                new EuclideanDoublePoint(new double[] { 56.445776311447844, 45.162093662656844 }),\n+                new EuclideanDoublePoint(new double[] { 57.36691949656233, 47.50097194337286 }),\n+                new EuclideanDoublePoint(new double[] { 58.243626387557015, 46.114052729681134 }),\n+                new EuclideanDoublePoint(new double[] { 56.27224595635198, 44.799080066150054 }),\n+                new EuclideanDoublePoint(new double[] { 57.606924816500396, 46.94291057763621 }),\n+                new EuclideanDoublePoint(new double[] { 30.18714230041951, 13.877149710431695 }),\n+                new EuclideanDoublePoint(new double[] { 30.449448810657486, 13.490778346545994 }),\n+                new EuclideanDoublePoint(new double[] { 30.295018390286714, 13.264889000216499 }),\n+                new EuclideanDoublePoint(new double[] { 30.160201832884923, 11.89278262341395 }),\n+                new EuclideanDoublePoint(new double[] { 31.341509791789576, 15.282655921997502 }),\n+                new EuclideanDoublePoint(new double[] { 31.68601630325429, 14.756873246748 }),\n+                new EuclideanDoublePoint(new double[] { 29.325963742565364, 12.097849250072613 }),\n+                new EuclideanDoublePoint(new double[] { 29.54820742388256, 13.613295356975868 }),\n+                new EuclideanDoublePoint(new double[] { 28.79359608888626, 10.36352064087987 }),\n+                new EuclideanDoublePoint(new double[] { 31.01284597092308, 12.788479208014905 }),\n+                new EuclideanDoublePoint(new double[] { 27.58509216737002, 11.47570110601373 }),\n+                new EuclideanDoublePoint(new double[] { 28.593799561727792, 10.780998203903437 }),\n+                new EuclideanDoublePoint(new double[] { 31.356105766724795, 15.080316198524088 }),\n+                new EuclideanDoublePoint(new double[] { 31.25948503636755, 13.674329151166603 }),\n+                new EuclideanDoublePoint(new double[] { 32.31590076372959, 14.95261758659035 }),\n+                new EuclideanDoublePoint(new double[] { 30.460413702763617, 15.88402809202671 }),\n+                new EuclideanDoublePoint(new double[] { 32.56178203062154, 14.586076852632686 }),\n+                new EuclideanDoublePoint(new double[] { 32.76138648530468, 16.239837325178087 }),\n+                new EuclideanDoublePoint(new double[] { 30.1829453331884, 14.709592407103628 }),\n+                new EuclideanDoublePoint(new double[] { 29.55088173528202, 15.0651247180067 }),\n+                new EuclideanDoublePoint(new double[] { 29.004155302187428, 14.089665298582986 }),\n+                new EuclideanDoublePoint(new double[] { 29.339624439831823, 13.29096065578051 }),\n+                new EuclideanDoublePoint(new double[] { 30.997460327576846, 14.551914158277214 }),\n+                new EuclideanDoublePoint(new double[] { 30.66784126125276, 16.269703107886016 })\n+        };\n+\n+        final DBSCANClusterer<EuclideanDoublePoint> transformer =\n+                new DBSCANClusterer<EuclideanDoublePoint>(2.0, 5);\n+        final List<Cluster<EuclideanDoublePoint>> clusters = transformer.cluster(Arrays.asList(points));\n+\n+        final List<EuclideanDoublePoint> clusterOne =\n+                Arrays.asList(points[3], points[4], points[5], points[6], points[7], points[8], points[9], points[10],\n+                              points[11], points[12], points[13], points[14]);\n+        final List<EuclideanDoublePoint> clusterTwo =\n+                Arrays.asList(points[15], points[16], points[17], points[18], points[19], points[20], points[21],\n+                              points[22], points[23], points[24], points[25], points[26], points[27], points[28],\n+                              points[29], points[30], points[31], points[32], points[33], points[34], points[35],\n+                              points[36], points[37], points[38]);\n+        final List<EuclideanDoublePoint> clusterThree =\n+                Arrays.asList(points[39], points[40], points[41], points[42], points[43], points[44], points[45],\n+                              points[46], points[47], points[48], points[49], points[50], points[51], points[52],\n+                              points[53], points[54], points[55], points[56], points[57], points[58], points[59],\n+                              points[60], points[61], points[62]);\n+\n+        boolean cluster1Found = false;\n+        boolean cluster2Found = false;\n+        boolean cluster3Found = false;\n+        Assert.assertEquals(3, clusters.size());\n+        for (final Cluster<EuclideanDoublePoint> cluster : clusters) {\n+            if (cluster.getPoints().containsAll(clusterOne)) {\n+                cluster1Found = true;\n+            }\n+            if (cluster.getPoints().containsAll(clusterTwo)) {\n+                cluster2Found = true;\n+            }\n+            if (cluster.getPoints().containsAll(clusterThree)) {\n+                cluster3Found = true;\n+            }\n+        }\n+        Assert.assertTrue(cluster1Found);\n+        Assert.assertTrue(cluster2Found);\n+        Assert.assertTrue(cluster3Found);\n+    }\n+\n+    @Test\n+    public void testSingleLink() {\n+        final EuclideanIntegerPoint[] points = {\n+                new EuclideanIntegerPoint(new int[] {10, 10}), // A\n+                new EuclideanIntegerPoint(new int[] {12, 9}),\n+                new EuclideanIntegerPoint(new int[] {10, 8}),\n+                new EuclideanIntegerPoint(new int[] {8, 8}),\n+                new EuclideanIntegerPoint(new int[] {8, 6}),\n+                new EuclideanIntegerPoint(new int[] {7, 7}),\n+                new EuclideanIntegerPoint(new int[] {5, 6}),  // B\n+                new EuclideanIntegerPoint(new int[] {14, 8}), // C\n+                new EuclideanIntegerPoint(new int[] {7, 15}), // N - Noise, should not be present\n+                new EuclideanIntegerPoint(new int[] {17, 8}), // D - single-link connected to C should not be present\n+                \n+        };\n+        \n+        final DBSCANClusterer<EuclideanIntegerPoint> clusterer = new DBSCANClusterer<EuclideanIntegerPoint>(3, 3);\n+        List<Cluster<EuclideanIntegerPoint>> clusters = clusterer.cluster(Arrays.asList(points));\n+        \n+        Assert.assertEquals(1, clusters.size());\n+        \n+        final List<EuclideanIntegerPoint> clusterOne =\n+                Arrays.asList(points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]);\n+        Assert.assertTrue(clusters.get(0).getPoints().containsAll(clusterOne));\n+    }\n+    \n+    @Test\n+    public void testGetEps() {\n+        final DBSCANClusterer<EuclideanDoublePoint> transformer = new DBSCANClusterer<EuclideanDoublePoint>(2.0, 5);\n+        Assert.assertEquals(2.0, transformer.getEps(), 0.0);\n+    }\n+\n+    @Test\n+    public void testGetMinPts() {\n+        final DBSCANClusterer<EuclideanDoublePoint> transformer = new DBSCANClusterer<EuclideanDoublePoint>(2.0, 5);\n+        Assert.assertEquals(5, transformer.getMinPts());\n+    }\n+\n+    @Test(expected = MathIllegalArgumentException.class)\n+    public void testNegativeEps() {\n+        new DBSCANClusterer<EuclideanDoublePoint>(-2.0, 5);\n+    }\n+\n+    @Test(expected = MathIllegalArgumentException.class)\n+    public void testNegativeMinPts() {\n+        new DBSCANClusterer<EuclideanDoublePoint>(2.0, -5);\n+    }\n+\n+    @Test(expected = NullArgumentException.class)\n+    public void testNullDataset() {\n+        DBSCANClusterer<EuclideanDoublePoint> clusterer = new DBSCANClusterer<EuclideanDoublePoint>(2.0, 5);\n+        clusterer.cluster(null);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.stat.clustering;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.math3.TestUtils;\n+import org.apache.commons.math3.util.FastMath;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class EuclideanDoublePointTest {\n+\n+    @Test\n+    public void testArrayIsReference() {\n+        final double[] array = { -3.0, -2.0, -1.0, 0.0, 1.0 };\n+        Assert.assertArrayEquals(array, new EuclideanDoublePoint(array).getPoint(), 1.0e-15);\n+    }\n+\n+    @Test\n+    public void testDistance() {\n+        final EuclideanDoublePoint e1 = new EuclideanDoublePoint(new double[] { -3.0, -2.0, -1.0, 0.0, 1.0 });\n+        final EuclideanDoublePoint e2 = new EuclideanDoublePoint(new double[] { 1.0, 0.0, -1.0, 1.0, 1.0 });\n+        Assert.assertEquals(FastMath.sqrt(21.0), e1.distanceFrom(e2), 1.0e-15);\n+        Assert.assertEquals(0.0, e1.distanceFrom(e1), 1.0e-15);\n+        Assert.assertEquals(0.0, e2.distanceFrom(e2), 1.0e-15);\n+    }\n+\n+    @Test\n+    public void testCentroid() {\n+        final List<EuclideanDoublePoint> list = new ArrayList<EuclideanDoublePoint>();\n+        list.add(new EuclideanDoublePoint(new double[] { 1.0, 3.0 }));\n+        list.add(new EuclideanDoublePoint(new double[] { 2.0, 2.0 }));\n+        list.add(new EuclideanDoublePoint(new double[] { 3.0, 3.0 }));\n+        list.add(new EuclideanDoublePoint(new double[] { 2.0, 4.0 }));\n+        final EuclideanDoublePoint c = list.get(0).centroidOf(list);\n+        Assert.assertEquals(2.0, c.getPoint()[0], 1.0e-15);\n+        Assert.assertEquals(3.0, c.getPoint()[1], 1.0e-15);\n+    }\n+\n+    @Test\n+    public void testSerial() {\n+        final EuclideanDoublePoint p = new EuclideanDoublePoint(new double[] { -3.0, -2.0, -1.0, 0.0, 1.0 });\n+        Assert.assertEquals(p, TestUtils.serializeAndRecover(p));\n+    }\n+\n+}", "timestamp": 1353242989, "metainfo": ""}