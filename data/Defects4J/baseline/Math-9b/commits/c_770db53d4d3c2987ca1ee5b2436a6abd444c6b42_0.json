{"sha": "770db53d4d3c2987ca1ee5b2436a6abd444c6b42", "log": "Eliminated [lang] dependency.   ", "commit": "\n--- a/src/java/org/apache/commons/math/MathException.java\n+++ b/src/java/org/apache/commons/math/MathException.java\n package org.apache.commons.math;\n \n import java.io.Serializable;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n \n-import org.apache.commons.lang.exception.NestableException;\n \n /**\n- * A generic exception indicating problems in the math package.\n- * @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:16 $\n- */\n-public class MathException extends NestableException implements Serializable {\n-\n+* Base exception class for commons-math.\n+* <p>\n+* Supports nesting, emulating JDK 1.4 behavior if necessary.  \n+* <p>\n+* Adapted from {@link org.apache.commons.collections.FunctorException}.\n+* \n+* @version $Revision: 1.18 $ $Date: 2004/07/10 22:21:36 $\n+*/\n+public class MathException extends Exception {\n+    \n     /** Serializable version identifier */\n     static final long serialVersionUID = -8594613561393443827L;\n     \n     /**\n-     * Constructs a MathException\n+     * Does JDK support nested exceptions?\n+     */\n+    private static final boolean JDK_SUPPORTS_NESTED;\n+    \n+    static {\n+        boolean flag = false;\n+        try {\n+            Throwable.class.getDeclaredMethod(\"getCause\", new Class[0]);\n+            flag = true;\n+        } catch (NoSuchMethodException ex) {\n+            flag = false;\n+        }\n+        JDK_SUPPORTS_NESTED = flag;\n+    }\n+    \n+    /**\n+     * Root cause of the exception\n+     */\n+    private final Throwable rootCause;\n+    \n+    /**\n+     * Constructs a new <code>MathException</code> with no\n+     * detail message.\n      */\n     public MathException() {\n-        this(null, null);\n+        super();\n+        this.rootCause = null;\n+    }\n+    \n+    /**\n+     * Constructs a new <code>MathException</code> with specified\n+     * detail message.\n+     *\n+     * @param msg  the error message.\n+     */\n+    public MathException(String msg) {\n+        super(msg);\n+        this.rootCause = null;\n+    }\n+    \n+    /**\n+     * Constructs a new <code>MathException</code> with specified\n+     * nested <code>Throwable</code> root cause.\n+     *\n+     * @param rootCause  the exception or error that caused this exception\n+     *                   to be thrown.\n+     */\n+    public MathException(Throwable rootCause) {\n+        super((rootCause == null ? null : rootCause.getMessage()));\n+        this.rootCause = rootCause;\n+    }\n+    \n+    /**\n+     * Constructs a new <code>MathException</code> with specified\n+     * detail message and nested <code>Throwable</code> root cause.\n+     *\n+     * @param msg  the error message.\n+     * @param rootCause  the exception or error that caused this exception\n+     *                   to be thrown.\n+     */\n+    public MathException(String msg, Throwable rootCause) {\n+        super(msg);\n+        this.rootCause = rootCause;\n+    }\n+    \n+    /**\n+     * Gets the cause of this throwable.\n+     * \n+     * @return  the cause of this throwable, or <code>null</code>\n+     */\n+    public Throwable getCause() {\n+        return rootCause;\n+    }\n+    \n+    /**\n+     * Prints the stack trace of this exception to the standard error stream.\n+     */\n+    public void printStackTrace() {\n+        printStackTrace(System.err);\n+    }\n+    \n+    /**\n+     * Prints the stack trace of this exception to the specified stream.\n+     *\n+     * @param out  the <code>PrintStream</code> to use for output\n+     */\n+    public void printStackTrace(PrintStream out) {\n+        synchronized (out) {\n+            PrintWriter pw = new PrintWriter(out, false);\n+            printStackTrace(pw);\n+            // Flush the PrintWriter before it's GC'ed.\n+            pw.flush();\n+        }\n+    }\n+    \n+    /**\n+     * Prints the stack trace of this exception to the specified writer.\n+     *\n+     * @param out  the <code>PrintWriter</code> to use for output\n+     */\n+    public void printStackTrace(PrintWriter out) {\n+        synchronized (out) {\n+            super.printStackTrace(out);\n+            if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n+                out.print(\"Caused by: \");\n+                rootCause.printStackTrace(out);\n+            }\n+        }\n     }\n \n-    /**\n-     * Create an exception with a given error message.\n-     * @param message message describing the problem\n-     */\n-    public MathException(final String message) {\n-        this(message, null);\n-    }\n-\n-    /**\n-     * Create an exception with a given error message and root cause.\n-     * @param message message describing the problem\n-     * @param throwable caught exception causing this problem\n-     */\n-    public MathException(final String message, final Throwable throwable) {\n-        super(message, throwable);\n-    }\n-\n-    /**\n-     * Create an exception with a given root cause.\n-     * @param throwable caught exception causing this problem\n-     */\n-    public MathException(final Throwable throwable) {\n-        this(null, throwable);\n-    }\n }", "timestamp": 1089498096, "metainfo": ""}