{"sha": "e7407783ba18000ae9d4c62aa64a86c8170167ec", "log": "removed tab characters that crept in at r776939  ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java\n+++ b/src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java\n  */\n public class NaturalRankingTest extends TestCase {\n \n-\tprivate final double[] exampleData = { 20, 17, 30, 42.3, 17, 50,\n-\t\t\tDouble.NaN, Double.NEGATIVE_INFINITY, 17 };\n-\tprivate final double[] tiesFirst = { 0, 0, 2, 1, 4 };\n-\tprivate final double[] tiesLast = { 4, 4, 1, 0 };\n-\tprivate final double[] multipleNaNs = { 0, 1, Double.NaN, Double.NaN };\n-\tprivate final double[] multipleTies = { 3, 2, 5, 5, 6, 6, 1 };\n-\tprivate final double[] allSame = { 0, 0, 0, 0 };\n-\n-\tpublic NaturalRankingTest(String arg0) {\n-\t\tsuper(arg0);\n-\t}\n-\n-\t@Override\n-\tprotected void setUp() throws Exception {\n-\t\tsuper.setUp();\n-\t}\n-\n-\t@Override\n-\tprotected void tearDown() throws Exception {\n-\t\tsuper.tearDown();\n-\t}\n-\n-\tpublic void testDefault() { // Ties averaged, NaNs maximal\n-\t\tNaturalRanking ranking = new NaturalRanking();\n-\t\tdouble[] ranks = ranking.rank(exampleData);\n-\t\tdouble[] correctRanks = { 5, 3, 6, 7, 3, 8, 9, 1, 3 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(tiesFirst);\n-\t\tcorrectRanks = new double[] { 1.5, 1.5, 4, 3, 5 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(tiesLast);\n-\t\tcorrectRanks = new double[] { 3.5, 3.5, 2, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(multipleNaNs);\n-\t\tcorrectRanks = new double[] { 1, 2, 3.5, 3.5 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(multipleTies);\n-\t\tcorrectRanks = new double[] { 3, 2, 4.5, 4.5, 6.5, 6.5, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(allSame);\n-\t\tcorrectRanks = new double[] { 2.5, 2.5, 2.5, 2.5 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t}\n-\n-\tpublic void testNaNsMaximalTiesMinimum() {\n-\t\tNaturalRanking ranking = new NaturalRanking(TiesStrategy.MINIMUM);\n-\t\tdouble[] ranks = ranking.rank(exampleData);\n-\t\tdouble[] correctRanks = { 5, 2, 6, 7, 2, 8, 9, 1, 2 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(tiesFirst);\n-\t\tcorrectRanks = new double[] { 1, 1, 4, 3, 5 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(tiesLast);\n-\t\tcorrectRanks = new double[] { 3, 3, 2, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(multipleNaNs);\n-\t\tcorrectRanks = new double[] { 1, 2, 3, 3 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(multipleTies);\n-\t\tcorrectRanks = new double[] { 3, 2, 4, 4, 6, 6, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(allSame);\n-\t\tcorrectRanks = new double[] { 1, 1, 1, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t}\n-\n-\tpublic void testNaNsRemovedTiesSequential() {\n-\t\tNaturalRanking ranking = new NaturalRanking(NaNStrategy.REMOVED,\n-\t\t\t\tTiesStrategy.SEQUENTIAL);\n-\t\tdouble[] ranks = ranking.rank(exampleData);\n-\t\tdouble[] correctRanks = { 5, 2, 6, 7, 3, 8, 1, 4 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(tiesFirst);\n-\t\tcorrectRanks = new double[] { 1, 2, 4, 3, 5 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(tiesLast);\n-\t\tcorrectRanks = new double[] { 3, 4, 2, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(multipleNaNs);\n-\t\tcorrectRanks = new double[] { 1, 2 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(multipleTies);\n-\t\tcorrectRanks = new double[] { 3, 2, 4, 5, 6, 7, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(allSame);\n-\t\tcorrectRanks = new double[] { 1, 2, 3, 4 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t}\n-\n-\tpublic void testNaNsMinimalTiesMaximum() {\n-\t\tNaturalRanking ranking = new NaturalRanking(NaNStrategy.MINIMAL,\n-\t\t\t\tTiesStrategy.MAXIMUM);\n-\t\tdouble[] ranks = ranking.rank(exampleData);\n-\t\tdouble[] correctRanks = { 6, 5, 7, 8, 5, 9, 2, 2, 5 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(tiesFirst);\n-\t\tcorrectRanks = new double[] { 2, 2, 4, 3, 5 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(tiesLast);\n-\t\tcorrectRanks = new double[] { 4, 4, 2, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(multipleNaNs);\n-\t\tcorrectRanks = new double[] { 3, 4, 2, 2 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(multipleTies);\n-\t\tcorrectRanks = new double[] { 3, 2, 5, 5, 7, 7, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(allSame);\n-\t\tcorrectRanks = new double[] { 4, 4, 4, 4 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t}\n-\n-\tpublic void testNaNsMinimalTiesAverage() {\n-\t\tNaturalRanking ranking = new NaturalRanking(NaNStrategy.MINIMAL);\n-\t\tdouble[] ranks = ranking.rank(exampleData);\n-\t\tdouble[] correctRanks = { 6, 4, 7, 8, 4, 9, 1.5, 1.5, 4 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(tiesFirst);\n-\t\tcorrectRanks = new double[] { 1.5, 1.5, 4, 3, 5 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(tiesLast);\n-\t\tcorrectRanks = new double[] { 3.5, 3.5, 2, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(multipleNaNs);\n-\t\tcorrectRanks = new double[] { 3, 4, 1.5, 1.5 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(multipleTies);\n-\t\tcorrectRanks = new double[] { 3, 2, 4.5, 4.5, 6.5, 6.5, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(allSame);\n-\t\tcorrectRanks = new double[] { 2.5, 2.5, 2.5, 2.5 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t}\n-\n-\tpublic void testNaNsFixedTiesRandom() {\n-\t\tRandomGenerator randomGenerator = new JDKRandomGenerator();\n-\t\trandomGenerator.setSeed(1000);\n-\t\tNaturalRanking ranking = new NaturalRanking(NaNStrategy.FIXED,\n-\t\t\t\trandomGenerator);\n-\t\tdouble[] ranks = ranking.rank(exampleData);\n-\t\tdouble[] correctRanks = { 5, 4, 6, 7, 3, 8, Double.NaN, 1, 4 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(tiesFirst);\n-\t\tcorrectRanks = new double[] { 1, 1, 4, 3, 5 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(tiesLast);\n-\t\tcorrectRanks = new double[] { 3, 4, 2, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(multipleNaNs);\n-\t\tcorrectRanks = new double[] { 1, 2, Double.NaN, Double.NaN };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(multipleTies);\n-\t\tcorrectRanks = new double[] { 3, 2, 5, 5, 7, 6, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranks = ranking.rank(allSame);\n-\t\tcorrectRanks = new double[] { 1, 3, 4, 4 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t}\n-\n-\tpublic void testNaNsAndInfs() {\n-\t\tdouble[] data = { 0, Double.POSITIVE_INFINITY, Double.NaN,\n-\t\t\t\tDouble.NEGATIVE_INFINITY };\n-\t\tNaturalRanking ranking = new NaturalRanking(NaNStrategy.MAXIMAL);\n-\t\tdouble[] ranks = ranking.rank(data);\n-\t\tdouble[] correctRanks = new double[] { 2, 3.5, 3.5, 1 };\n-\t\tTestUtils.assertEquals(correctRanks, ranks, 0d);\n-\t\tranking = new NaturalRanking(NaNStrategy.MINIMAL);\n-\t\tranks = ranking.rank(data);\n-\t\tcorrectRanks = new double[] { 3, 4, 1.5, 1.5 };\n-\t}\n+    private final double[] exampleData = { 20, 17, 30, 42.3, 17, 50,\n+            Double.NaN, Double.NEGATIVE_INFINITY, 17 };\n+    private final double[] tiesFirst = { 0, 0, 2, 1, 4 };\n+    private final double[] tiesLast = { 4, 4, 1, 0 };\n+    private final double[] multipleNaNs = { 0, 1, Double.NaN, Double.NaN };\n+    private final double[] multipleTies = { 3, 2, 5, 5, 6, 6, 1 };\n+    private final double[] allSame = { 0, 0, 0, 0 };\n+\n+    public NaturalRankingTest(String arg0) {\n+        super(arg0);\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    public void testDefault() { // Ties averaged, NaNs maximal\n+        NaturalRanking ranking = new NaturalRanking();\n+        double[] ranks = ranking.rank(exampleData);\n+        double[] correctRanks = { 5, 3, 6, 7, 3, 8, 9, 1, 3 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(tiesFirst);\n+        correctRanks = new double[] { 1.5, 1.5, 4, 3, 5 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(tiesLast);\n+        correctRanks = new double[] { 3.5, 3.5, 2, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(multipleNaNs);\n+        correctRanks = new double[] { 1, 2, 3.5, 3.5 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(multipleTies);\n+        correctRanks = new double[] { 3, 2, 4.5, 4.5, 6.5, 6.5, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(allSame);\n+        correctRanks = new double[] { 2.5, 2.5, 2.5, 2.5 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+    }\n+\n+    public void testNaNsMaximalTiesMinimum() {\n+        NaturalRanking ranking = new NaturalRanking(TiesStrategy.MINIMUM);\n+        double[] ranks = ranking.rank(exampleData);\n+        double[] correctRanks = { 5, 2, 6, 7, 2, 8, 9, 1, 2 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(tiesFirst);\n+        correctRanks = new double[] { 1, 1, 4, 3, 5 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(tiesLast);\n+        correctRanks = new double[] { 3, 3, 2, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(multipleNaNs);\n+        correctRanks = new double[] { 1, 2, 3, 3 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(multipleTies);\n+        correctRanks = new double[] { 3, 2, 4, 4, 6, 6, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(allSame);\n+        correctRanks = new double[] { 1, 1, 1, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+    }\n+\n+    public void testNaNsRemovedTiesSequential() {\n+        NaturalRanking ranking = new NaturalRanking(NaNStrategy.REMOVED,\n+                TiesStrategy.SEQUENTIAL);\n+        double[] ranks = ranking.rank(exampleData);\n+        double[] correctRanks = { 5, 2, 6, 7, 3, 8, 1, 4 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(tiesFirst);\n+        correctRanks = new double[] { 1, 2, 4, 3, 5 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(tiesLast);\n+        correctRanks = new double[] { 3, 4, 2, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(multipleNaNs);\n+        correctRanks = new double[] { 1, 2 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(multipleTies);\n+        correctRanks = new double[] { 3, 2, 4, 5, 6, 7, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(allSame);\n+        correctRanks = new double[] { 1, 2, 3, 4 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+    }\n+\n+    public void testNaNsMinimalTiesMaximum() {\n+        NaturalRanking ranking = new NaturalRanking(NaNStrategy.MINIMAL,\n+                TiesStrategy.MAXIMUM);\n+        double[] ranks = ranking.rank(exampleData);\n+        double[] correctRanks = { 6, 5, 7, 8, 5, 9, 2, 2, 5 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(tiesFirst);\n+        correctRanks = new double[] { 2, 2, 4, 3, 5 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(tiesLast);\n+        correctRanks = new double[] { 4, 4, 2, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(multipleNaNs);\n+        correctRanks = new double[] { 3, 4, 2, 2 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(multipleTies);\n+        correctRanks = new double[] { 3, 2, 5, 5, 7, 7, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(allSame);\n+        correctRanks = new double[] { 4, 4, 4, 4 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+    }\n+\n+    public void testNaNsMinimalTiesAverage() {\n+        NaturalRanking ranking = new NaturalRanking(NaNStrategy.MINIMAL);\n+        double[] ranks = ranking.rank(exampleData);\n+        double[] correctRanks = { 6, 4, 7, 8, 4, 9, 1.5, 1.5, 4 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(tiesFirst);\n+        correctRanks = new double[] { 1.5, 1.5, 4, 3, 5 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(tiesLast);\n+        correctRanks = new double[] { 3.5, 3.5, 2, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(multipleNaNs);\n+        correctRanks = new double[] { 3, 4, 1.5, 1.5 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(multipleTies);\n+        correctRanks = new double[] { 3, 2, 4.5, 4.5, 6.5, 6.5, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(allSame);\n+        correctRanks = new double[] { 2.5, 2.5, 2.5, 2.5 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+    }\n+\n+    public void testNaNsFixedTiesRandom() {\n+        RandomGenerator randomGenerator = new JDKRandomGenerator();\n+        randomGenerator.setSeed(1000);\n+        NaturalRanking ranking = new NaturalRanking(NaNStrategy.FIXED,\n+                randomGenerator);\n+        double[] ranks = ranking.rank(exampleData);\n+        double[] correctRanks = { 5, 4, 6, 7, 3, 8, Double.NaN, 1, 4 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(tiesFirst);\n+        correctRanks = new double[] { 1, 1, 4, 3, 5 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(tiesLast);\n+        correctRanks = new double[] { 3, 4, 2, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(multipleNaNs);\n+        correctRanks = new double[] { 1, 2, Double.NaN, Double.NaN };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(multipleTies);\n+        correctRanks = new double[] { 3, 2, 5, 5, 7, 6, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranks = ranking.rank(allSame);\n+        correctRanks = new double[] { 1, 3, 4, 4 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+    }\n+\n+    public void testNaNsAndInfs() {\n+        double[] data = { 0, Double.POSITIVE_INFINITY, Double.NaN,\n+                Double.NEGATIVE_INFINITY };\n+        NaturalRanking ranking = new NaturalRanking(NaNStrategy.MAXIMAL);\n+        double[] ranks = ranking.rank(data);\n+        double[] correctRanks = new double[] { 2, 3.5, 3.5, 1 };\n+        TestUtils.assertEquals(correctRanks, ranks, 0d);\n+        ranking = new NaturalRanking(NaNStrategy.MINIMAL);\n+        ranks = ranking.rank(data);\n+        correctRanks = new double[] { 3, 4, 1.5, 1.5 };\n+    }\n }", "timestamp": 1243182293, "metainfo": ""}