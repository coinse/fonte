{"sha": "cbdb53d5bb30f5da97cfcbc860857186147837de", "log": "added a general test utility for checking derivatives consistency across all step interpolators  ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.ode.sampling;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.apache.commons.math.ode.DerivativeException;\n+import org.apache.commons.math.ode.FirstOrderIntegrator;\n+import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.nonstiff.TestProblemAbstract;\n+\n+public class StepInterpolatorTestUtils {\n+\n+    public static void checkDerivativesConsistency(final FirstOrderIntegrator integrator,\n+                                                   final TestProblemAbstract problem,\n+                                                   final double threshold)\n+        throws DerivativeException, IntegratorException {\n+        integrator.addStepHandler(new StepHandler() {\n+\n+            private static final long serialVersionUID = 2462564234755682953L;\n+\n+            public boolean requiresDenseOutput() {\n+                return true;\n+            }\n+\n+            public void handleStep(StepInterpolator interpolator, boolean isLast)\n+                throws DerivativeException {\n+\n+                final double h = 0.001 * (interpolator.getCurrentTime() - interpolator.getPreviousTime());\n+                final double t = interpolator.getCurrentTime() - 300 * h;\n+\n+                if (Math.abs(h) < 10 * Math.ulp(t)) {\n+                    return;\n+                }\n+\n+                interpolator.setInterpolatedTime(t - 4 * h);\n+                final double[] yM4h = interpolator.getInterpolatedState().clone();\n+                interpolator.setInterpolatedTime(t - 3 * h);\n+                final double[] yM3h = interpolator.getInterpolatedState().clone();\n+                interpolator.setInterpolatedTime(t - 2 * h);\n+                final double[] yM2h = interpolator.getInterpolatedState().clone();\n+                interpolator.setInterpolatedTime(t - h);\n+                final double[] yM1h = interpolator.getInterpolatedState().clone();\n+                interpolator.setInterpolatedTime(t + h);\n+                final double[] yP1h = interpolator.getInterpolatedState().clone();\n+                interpolator.setInterpolatedTime(t + 2 * h);\n+                final double[] yP2h = interpolator.getInterpolatedState().clone();\n+                interpolator.setInterpolatedTime(t + 3 * h);\n+                final double[] yP3h = interpolator.getInterpolatedState().clone();\n+                interpolator.setInterpolatedTime(t + 4 * h);\n+                final double[] yP4h = interpolator.getInterpolatedState().clone();\n+\n+                interpolator.setInterpolatedTime(t);\n+                final double[] yDot = interpolator.getInterpolatedDerivatives();\n+\n+                for (int i = 0; i < yDot.length; ++i) {\n+                    final double approYDot = ( -3 * (yP4h[i] - yM4h[i]) +\n+                                               32 * (yP3h[i] - yM3h[i]) +\n+                                             -168 * (yP2h[i] - yM2h[i]) +\n+                                              672 * (yP1h[i] - yM1h[i])) / (840 * h);\n+                    assertEquals(approYDot, yDot[i], threshold);\n+                }\n+\n+            }\n+\n+            public void reset() {\n+            }\n+\n+        });\n+\n+        integrator.integrate(problem,\n+                             problem.getInitialTime(), problem.getInitialState(),\n+                             problem.getFinalTime(), new double[problem.getDimension()]);\n+\n+    }\n+}\n+", "timestamp": 1243807143, "metainfo": ""}