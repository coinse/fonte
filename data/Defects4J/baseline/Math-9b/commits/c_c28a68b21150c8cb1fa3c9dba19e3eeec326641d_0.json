{"sha": "c28a68b21150c8cb1fa3c9dba19e3eeec326641d", "log": "Variable visibility: \"protected\" -> \"private\". Added getter methods.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\n package org.apache.commons.math3.optimization.linear;\n \n import java.util.Collection;\n+import java.util.Collections;\n \n import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.MaxCountExceededException;\n      * Linear objective function.\n      * @since 2.1\n      */\n-    protected LinearObjectiveFunction function;\n+    private LinearObjectiveFunction function;\n \n     /**\n      * Linear constraints.\n      * @since 2.1\n      */\n-    protected Collection<LinearConstraint> linearConstraints;\n+    private Collection<LinearConstraint> linearConstraints;\n \n     /**\n      * Type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.\n      * @since 2.1\n      */\n-    protected GoalType goal;\n+    private GoalType goal;\n \n     /**\n      * Whether to restrict the variables to non-negative values.\n      * @since 2.1\n      */\n-    protected boolean nonNegative;\n+    private boolean nonNegative;\n \n     /** Maximal number of iterations allowed. */\n     private int maxIterations;\n      */\n     protected AbstractLinearOptimizer() {\n         setMaxIterations(DEFAULT_MAX_ITERATIONS);\n+    }\n+\n+    /**\n+     * @return {@code true} if the variables are restricted to non-negative values.\n+     */\n+    protected boolean restrictToNonNegative() {\n+        return nonNegative;\n+    }\n+\n+    /**\n+     * @return the optimization type.\n+     */\n+    protected GoalType getGoalType() {\n+        return goal;\n+    }\n+\n+    /**\n+     * @return the optimization type.\n+     */\n+    protected LinearObjectiveFunction getFunction() {\n+        return function;\n+    }\n+\n+    /**\n+     * @return the optimization type.\n+     */\n+    protected Collection<LinearConstraint> getConstraints() {\n+        return Collections.unmodifiableCollection(linearConstraints);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n     public PointValuePair doOptimize()\n         throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {\n         final SimplexTableau tableau =\n-            new SimplexTableau(function, linearConstraints, goal, nonNegative,\n-                               epsilon, maxUlps);\n+            new SimplexTableau(getFunction(),\n+                               getConstraints(),\n+                               getGoalType(),\n+                               restrictToNonNegative(),\n+                               epsilon,\n+                               maxUlps);\n \n         solvePhase1(tableau);\n         tableau.dropPhase1Objective();", "timestamp": 1330739526, "metainfo": ""}