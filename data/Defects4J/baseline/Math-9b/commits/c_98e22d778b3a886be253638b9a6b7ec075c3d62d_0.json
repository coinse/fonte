{"sha": "98e22d778b3a886be253638b9a6b7ec075c3d62d", "log": "replaced @version tag by $Id$  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ConvergenceException.java\n+++ b/src/main/java/org/apache/commons/math/ConvergenceException.java\n  * Error thrown when a numerical computation can not be performed because the\n  * numerical result failed to converge to a finite value.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ConvergenceException extends MathException {\n \n--- a/src/main/java/org/apache/commons/math/Field.java\n+++ b/src/main/java/org/apache/commons/math/Field.java\n  * </p>\n  * @param <T> the type of the field elements\n  * @see FieldElement\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface Field<T> {\n--- a/src/main/java/org/apache/commons/math/FieldElement.java\n+++ b/src/main/java/org/apache/commons/math/FieldElement.java\n  * Interface representing <a href=\"http://mathworld.wolfram.com/Field.html\">field</a> elements.\n  * @param <T> the type of the field elements\n  * @see Field\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface FieldElement<T> {\n--- a/src/main/java/org/apache/commons/math/MathConfigurationException.java\n+++ b/src/main/java/org/apache/commons/math/MathConfigurationException.java\n \n /**\n  * Signals a configuration problem with any of the factory methods.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MathConfigurationException extends MathException implements Serializable{\n \n--- a/src/main/java/org/apache/commons/math/MathException.java\n+++ b/src/main/java/org/apache/commons/math/MathException.java\n * <p>\n * Adapted from <a href=\"http://commons.apache.org/collections/api-release/org/apache/commons/collections/FunctorException.html\"/>.</p>\n *\n-* @version $Revision$ $Date$\n+* @version $Id$\n */\n public class MathException extends Exception implements MathThrowable {\n \n--- a/src/main/java/org/apache/commons/math/MathRuntimeException.java\n+++ b/src/main/java/org/apache/commons/math/MathRuntimeException.java\n /**\n * Base class for commons-math unchecked exceptions.\n *\n-* @version $Revision$ $Date$\n+* @version $Id$\n * @since 2.0\n */\n public class MathRuntimeException extends RuntimeException implements MathThrowable {\n--- a/src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java\n+++ b/src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java\n  * Error thrown when a numerical computation exceeds its allowed\n  * number of functions evaluations.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class MaxEvaluationsExceededException extends ConvergenceException {\n--- a/src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java\n  * An interface representing a bivariate real function.\n  *\n  * @since 2.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface BivariateRealFunction {\n     /**\n--- a/src/main/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java\n /**\n  * Extension of {@link MultivariateRealFunction} representing a differentiable\n  * multivariate real function.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface DifferentiableMultivariateRealFunction extends MultivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java\n /**\n  * Extension of {@link MultivariateVectorialFunction} representing a differentiable\n  * multivariate vectorial function.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface DifferentiableMultivariateVectorialFunction\n--- a/src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java\n /**\n  * Extension of {@link UnivariateMatrixFunction} representing a differentiable univariate matrix function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface DifferentiableUnivariateMatrixFunction\n--- a/src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java\n /**\n  * Extension of {@link UnivariateRealFunction} representing a differentiable univariate real function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface DifferentiableUnivariateRealFunction\n     extends UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java\n /**\n  * Extension of {@link UnivariateVectorialFunction} representing a differentiable univariate vectorial function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface DifferentiableUnivariateVectorialFunction\n--- a/src/main/java/org/apache/commons/math/analysis/FunctionUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/FunctionUtils.java\n /**\n  * Utilities for manipulating function objects.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class FunctionUtils {\n--- a/src/main/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java\n \n /**\n  * An interface representing a multivariate matrix function.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface MultivariateMatrixFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/MultivariateRealFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/MultivariateRealFunction.java\n /**\n  * An interface representing a multivariate real function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface MultivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java\n \n /**\n  * An interface representing a multivariate vectorial function.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface MultivariateVectorialFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/ParametricUnivariateRealFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/ParametricUnivariateRealFunction.java\n  * An interface representing a real function that depends on one independent\n  * variable plus some extra parameters.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface ParametricUnivariateRealFunction {\n     /**\n--- a/src/main/java/org/apache/commons/math/analysis/TrivariateRealFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/TrivariateRealFunction.java\n  * An interface representing a trivariate real function.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface TrivariateRealFunction {\n     /**\n--- a/src/main/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java\n /**\n  * An interface representing a univariate matrix function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface UnivariateMatrixFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/UnivariateRealFunction.java\n /**\n  * An interface representing a univariate real function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface UnivariateRealFunction {\n     /**\n--- a/src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java\n /**\n  * An interface representing a univariate vectorial function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface UnivariateVectorialFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Abs.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Abs.java\n /**\n  * Absolute value function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Abs implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Acos.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Acos.java\n /**\n  * Arc-cosine function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Acos implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Acosh.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Acosh.java\n /**\n  * Hyperbolic arc-cosine function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Acosh implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Add.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Add.java\n /**\n  * Add the two operands.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Add implements BivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Asin.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Asin.java\n /**\n  * Arc-sine function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Asin implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Asinh.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Asinh.java\n /**\n  * Hyperbolic arc-sine function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Asinh implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Atan.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Atan.java\n /**\n  * Arc-tangent function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Atan implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Atan2.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Atan2.java\n /**\n  * Arc-tangent function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Atan2 implements BivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Atanh.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Atanh.java\n /**\n  * Hyperbolic arc-tangent function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Atanh implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Cbrt.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Cbrt.java\n /**\n  * Cubic-root function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Cbrt implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Ceil.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Ceil.java\n /**\n  * {@code ceil} function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Ceil implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Constant.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Constant.java\n /**\n  * Constant function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Constant implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Cos.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Cos.java\n /**\n  * Cosine function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Cos implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Cosh.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Cosh.java\n /**\n  * Hyperbolic cosine function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Cosh implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Divide.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Divide.java\n /**\n  * Divide the first operand by the second.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Divide implements BivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Exp.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Exp.java\n /**\n  * Exponential function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Exp implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Expm1.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Expm1.java\n /**\n  * <code>e<sup>x</sup>-1</code> function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Expm1 implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Floor.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Floor.java\n /**\n  * {@code floor} function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Floor implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\n  * <a href=\"http://en.wikipedia.org/wiki/Gaussian_function\">\n  *  Gaussian</a> function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Gaussian implements DifferentiableUnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/HarmonicOscillator.java\n  * <a href=\"http://en.wikipedia.org/wiki/Harmonic_oscillator\">\n  *  simple harmonic oscillator</a> function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class HarmonicOscillator implements DifferentiableUnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Identity.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Identity.java\n /**\n  * Identity function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Identity implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Inverse.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Inverse.java\n /**\n  * Inverse function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Inverse implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Log.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Log.java\n /**\n  * Natural logarithm function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Log implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Log10.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Log10.java\n /**\n  * Base 10 logarithm function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Log10 implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Log1p.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Log1p.java\n /**\n  * <code>log(1 + p)</code> function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Log1p implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Logistic.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Logistic.java\n  * <a href=\"http://en.wikipedia.org/wiki/Generalised_logistic_function\">\n  *  Generalised logistic</a> function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Logistic implements DifferentiableUnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Logit.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Logit.java\n  *  Logit</a> function.\n  * It is the inverse of the {@link Sigmoid sigmoid} function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Logit implements DifferentiableUnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Max.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Max.java\n /**\n  * Maximum function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Max implements BivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Min.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Min.java\n /**\n  * Minimum function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Min implements BivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Minus.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Minus.java\n /**\n  * Minus function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Minus implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Multiply.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Multiply.java\n /**\n  * Multiply the two operands.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Multiply implements BivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Pow.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Pow.java\n /**\n  * Power function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Pow implements BivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Power.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Power.java\n /**\n  * Power function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Power implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Rint.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Rint.java\n /**\n  * {@code rint} function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Rint implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sigmoid.java\n  * A more flexible version, the generalised logistic, is implemented\n  * by the {@link Logistic} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Sigmoid implements DifferentiableUnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Signum.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Signum.java\n /**\n  * {@code signum} function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Signum implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Sin.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sin.java\n /**\n  * Sine function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Sin implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Sinc.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sinc.java\n /**\n  * Sinc function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Sinc implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Sinh.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sinh.java\n /**\n  * Hyperbolic sine function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Sinh implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Sqrt.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sqrt.java\n /**\n  * Square-root function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Sqrt implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/StepFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/StepFunction.java\n  * <a href=\"http://en.wikipedia.org/wiki/Step_function\">\n  *  Step function</a>.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class StepFunction implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Subtract.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Subtract.java\n /**\n  * Subtract the second operand from the first.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Subtract implements BivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Tan.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Tan.java\n /**\n  * Tangent function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Tan implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Tanh.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Tanh.java\n /**\n  * Hyperbolic tangent function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Tanh implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/function/Ulp.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Ulp.java\n /**\n  * {@code ulp} function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Ulp implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java\n  * &prod; (x-x<sub>k</sub>)/(x<sub>i</sub>-x<sub>k</sub>) for k != i.\n  * </p>\n  * <p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java\n  * rule to remove error terms less than order O(N^(-2k)). Simpson's rule\n  * is a special case of k = 2.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class RombergIntegrator extends UnivariateRealIntegratorImpl {\n--- a/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java\n  * This implementation employs basic trapezoid rule as building blocks to\n  * calculate the Simpson's rule of alternating 2/3 and 4/3.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class SimpsonIntegrator extends UnivariateRealIntegratorImpl {\n--- a/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java\n  * <p>\n  * The function should be integrable.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class TrapezoidIntegrator extends UnivariateRealIntegratorImpl {\n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java\n /**\n  * Interface for univariate real integration algorithms.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public interface UnivariateRealIntegrator {\n--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java\n /**\n  * Provide a default implementation for several generic functions.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public abstract class UnivariateRealIntegratorImpl implements UnivariateRealIntegrator {\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n  * <a href=\"http://en.wikipedia.org/wiki/Bicubic_interpolation\">\n  * bicubic spline interpolation</a>.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.1\n  */\n public class BicubicSplineInterpolatingFunction\n /**\n  * 2D-spline function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n class BicubicSplineFunction\n     implements BivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java\n /**\n  * Generates a bicubic interpolating function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class BicubicSplineInterpolator\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java\n  * Interface representing a bivariate real interpolating function where the\n  * sample points must be specified on a regular grid.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface BivariateRealGridInterpolator {\n     /**\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java\n  * The actual code of Neville's evaluation is in PolynomialFunctionLagrangeForm,\n  * this class provides an easy-to-use interface to it.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class DividedDifferenceInterpolator\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java\n \n /**\n  * Implements a linear function for interpolation of real univariate functions.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class LinearInterpolator implements UnivariateRealInterpolator {\n     /**\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n  * This class implements both the loess method and serves as an interpolation\n  * adapter to it, allowing to build a spline on the obtained loess fit.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class LoessInterpolator\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java\n  * Interpolating function that implements the\n  * <a href=\"http://www.dudziak.com/microsphere.php\">Microsphere Projection</a>.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MicrosphereInterpolatingFunction\n     implements MultivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java\n  * <a href=\"http://www.dudziak.com/microsphere.pdf\">MS thesis</a>.\n  * @since 2.1\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MicrosphereInterpolator\n     implements MultivariateRealInterpolator {\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java\n  * Interface representing a univariate real interpolating function.\n  *\n  * @since 2.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface MultivariateRealInterpolator {\n \n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolator.java\n  * The actual code of Neville's evalution is in PolynomialFunctionLagrangeForm,\n  * this class provides an easy-to-use interface to it.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class NevilleInterpolator implements UnivariateRealInterpolator,\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java\n  * Prior to generating the interpolating function, the input is smoothed using\n  * polynomial fitting.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class SmoothingPolynomialBicubicSplineInterpolator\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n  * <u>Numerical Analysis</u>, 4th Ed., 1989, PWS-Kent, ISBN 0-53491-585-X, pp 126-131.\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  *\n  */\n public class SplineInterpolator implements UnivariateRealInterpolator {\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java\n  *  <em>Int. J. Numer. Meth. Engng</em> 2005; <b>63</b>:455-471\n  * </quote>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class TricubicSplineInterpolatingFunction\n /**\n  * 3D-spline function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n class TricubicSplineFunction\n     implements TrivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java\n /**\n  * Generates a tricubic interpolating function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class TricubicSplineInterpolator\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java\n  * Interface representing a trivariate real interpolating function where the\n  * sample points must be specified on a regular grid.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public interface TrivariateRealGridInterpolator {\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealInterpolator.java\n /**\n  * Interface representing a univariate real interpolating function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface UnivariateRealInterpolator {\n     /**\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n  * <a href=\"http://mathworld.wolfram.com/HornersMethod.html\">Horner's Method</a>\n  * is used to evaluate the function.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class PolynomialFunction implements DifferentiableUnivariateRealFunction, Serializable {\n     /**\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n  * The approximated function should be smooth enough for Lagrange polynomial\n  * to work well. Otherwise, consider using splines instead.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class PolynomialFunctionLagrangeForm implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java\n  *            a[n](x-c[0])(x-c[1])...(x-c[n-1])\n  * Note that the length of a[] is one more than the length of c[]</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class PolynomialFunctionNewtonForm implements UnivariateRealFunction {\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\n  * than or equal to <code>x</code>.  The value returned is <br>\n  * <code>polynomials[j](x - knot[j])</code></li></ol></p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class PolynomialSplineFunction implements DifferentiableUnivariateRealFunction {\n     /**\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java\n /**\n  * A collection of static methods that operate on or return polynomials.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class PolynomialsUtils {\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java\n  * Provide a default implementation for several functions useful to generic\n  * solvers.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public abstract class AbstractDifferentiableUnivariateRealSolver\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java\n /**\n  * Base class for solvers.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public abstract class AbstractPolynomialSolver\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java\n /**\n  * Base class for solvers.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public abstract class AbstractUnivariateRealSolver\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java\n  *\n  * @param <FUNC> Type of function to solve.\n  *\n- * @version $Revision: 1030464 $ $Date: 2010-11-03 14:46:04 +0100 (Wed, 03 Nov 2010) $\n+ * @version $Id$\n  * @since 2.0\n  */\n public abstract class BaseAbstractUnivariateRealSolver<FUNC extends UnivariateRealFunction>\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java\n  *\n  * @param <FUNC> Type of function to solve.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public interface BaseUnivariateRealSolver<FUNC extends UnivariateRealFunction> {\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n  * <p>\n  * The function should be continuous but not necessarily smooth.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class BisectionSolver extends AbstractUnivariateRealSolver {\n     /** Default absolute accuracy. */\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n  * {@code t} is the absolute accuracy.\n  * The given interval must bracket the root.\n  *\n- * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n+ * @version $Id$\n  */\n public class BrentSolver extends AbstractUnivariateRealSolver {\n     /** Serializable version identifier */\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java\n  * Interface for (univariate real) rootfinding algorithms.\n  * Implementations will search for only one zero in the given interval.\n  *\n- * @version $Revision: 1034896 $ $Date: 2010-11-13 23:27:34 +0100 (Sat, 13 Nov 2010) $\n+ * @version $Id$\n  */\n public interface DifferentiableUnivariateRealSolver\n     extends BaseUnivariateRealSolver<DifferentiableUnivariateRealFunction> {}\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java\n  * approximation and be able to solve all roots from that point.\n  * The algorithm requires a bracketing condition.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class LaguerreSolver extends AbstractPolynomialSolver {\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java\n  * <p>\n  * The formulas here use divided differences directly.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  * @see MullerSolver2\n  */\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java\n  * <p>\n  * The formulas here do not use divided differences directly.</p>\n  *\n- * @version $Revision: 1034896 $ $Date: 2010-11-13 23:27:34 +0100 (Sat, 13 Nov 2010) $\n+ * @version $Id$\n  * @since 1.2\n  * @see MullerSolver\n  */\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java\n  * <p>\n  * The function should be continuous but not necessarily smooth.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NewtonSolver extends AbstractDifferentiableUnivariateRealSolver {\n     /** Default absolute accuracy. */\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java\n  * Interface for (polynomial) root-finding algorithms.\n  * Implementations will search for only one zero in the given interval.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public interface PolynomialSolver\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java\n  * <p>\n  * The function should be continuous but not necessarily smooth.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class RiddersSolver extends AbstractUnivariateRealSolver {\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n  * <p>\n  * The function is assumed to be continuous but not necessarily smooth.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SecantSolver extends AbstractUnivariateRealSolver {\n     /** Default absolute accuracy. */\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java\n  * Interface for (univariate real) root-finding algorithms.\n  * Implementations will search for only one zero in the given interval.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface UnivariateRealSolver\n     extends BaseUnivariateRealSolver<UnivariateRealFunction> {}\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n /**\n  * Utility routines for {@link UnivariateRealSolver} objects.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class UnivariateRealSolverUtils {\n     /**\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n  *\n  * implements Serializable since 2.0\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Complex implements FieldElement<Complex>, Serializable  {\n \n--- a/src/main/java/org/apache/commons/math/complex/ComplexField.java\n+++ b/src/main/java/org/apache/commons/math/complex/ComplexField.java\n  * This class is a singleton.\n  * </p>\n  * @see Complex\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class ComplexField implements Field<Complex>, Serializable  {\n--- a/src/main/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/main/java/org/apache/commons/math/complex/ComplexFormat.java\n  * be replaced with 'j' (or anything else), and the number format for both real\n  * and imaginary parts can be configured.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ComplexFormat {\n     /** Serializable version identifier */\n--- a/src/main/java/org/apache/commons/math/complex/ComplexUtils.java\n+++ b/src/main/java/org/apache/commons/math/complex/ComplexUtils.java\n  * Static implementations of common\n  * {@link org.apache.commons.math.complex.Complex} utilities functions.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ComplexUtils {\n \n--- a/src/main/java/org/apache/commons/math/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math/dfp/Dfp.java\n  *  detail and is really only a matter of definition.  Any side effects of\n  *  this can be rendered invisible by a subclass.</p>\n  * @see DfpField\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class Dfp implements FieldElement<Dfp> {\n--- a/src/main/java/org/apache/commons/math/dfp/DfpDec.java\n+++ b/src/main/java/org/apache/commons/math/dfp/DfpDec.java\n  * This should give outward appearances of being a decimal number with DIGITS*4-3\n  * decimal digits. This class can be subclassed to appear to be an arbitrary number\n  * of decimal digits less than DIGITS*4-3.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class DfpDec extends Dfp {\n--- a/src/main/java/org/apache/commons/math/dfp/DfpField.java\n+++ b/src/main/java/org/apache/commons/math/dfp/DfpField.java\n import org.apache.commons.math.Field;\n \n /** Field for Decimal floating point instances.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class DfpField implements Field<Dfp> {\n--- a/src/main/java/org/apache/commons/math/dfp/DfpMath.java\n+++ b/src/main/java/org/apache/commons/math/dfp/DfpMath.java\n \n /** Mathematical routines for use with {@link Dfp}.\n  * The constants are defined in {@link DfpField}\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class DfpMath {\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n  * provided for some of the methods that do not vary from distribution to\n  * distribution.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class AbstractContinuousDistribution\n     extends AbstractDistribution\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java\n /**\n  * Base class for probability distributions.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class AbstractDistribution\n     implements Distribution, Serializable {\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n  * implementations are provided for some of the methods that do not vary\n  * from distribution to distribution.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class AbstractIntegerDistribution extends AbstractDistribution\n     implements IntegerDistribution, Serializable {\n--- a/src/main/java/org/apache/commons/math/distribution/BetaDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistribution.java\n  * Computes the cumulative, inverse cumulative and density functions for the beta distribuiton.\n  *\n  * @see <a href=\"http://en.wikipedia.org/wiki/Beta_distribution\">Beta_distribution</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface BetaDistribution extends ContinuousDistribution {\n--- a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n  * Beta distribution</a></li>\n  * </ul>\n  * </p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class BetaDistributionImpl\n--- a/src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface BinomialDistribution extends IntegerDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n /**\n  * The default implementation of {@link BinomialDistribution}.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class BinomialDistributionImpl extends AbstractIntegerDistribution\n         implements BinomialDistribution, Serializable {\n--- a/src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java\n  * </p>\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface CauchyDistribution extends ContinuousDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java\n  * {@link org.apache.commons.math.distribution.CauchyDistribution}.\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class CauchyDistributionImpl extends AbstractContinuousDistribution\n     implements CauchyDistribution, Serializable {\n--- a/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface ChiSquaredDistribution extends ContinuousDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n /**\n  * The default implementation of {@link ChiSquaredDistribution}\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ChiSquaredDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n /**\n  * Base interface for continuous distributions.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface ContinuousDistribution extends Distribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n /**\n  * Base interface for discrete distributions.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface DiscreteDistribution extends Distribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/Distribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/Distribution.java\n /**\n  * Base interface for probability distributions.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface Distribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface ExponentialDistribution extends ContinuousDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n /**\n  * The default implementation of {@link ExponentialDistribution}.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ExponentialDistributionImpl extends AbstractContinuousDistribution\n     implements ExponentialDistribution, Serializable {\n--- a/src/main/java/org/apache/commons/math/distribution/FDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/FDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface FDistribution extends ContinuousDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.FDistribution}.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class FDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/main/java/org/apache/commons/math/distribution/GammaDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/GammaDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface GammaDistribution extends ContinuousDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n /**\n  * The default implementation of {@link GammaDistribution}.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class GammaDistributionImpl extends AbstractContinuousDistribution\n     implements GammaDistribution, Serializable  {\n--- a/src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface HypergeometricDistribution extends IntegerDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n /**\n  * The default implementation of {@link HypergeometricDistribution}.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class HypergeometricDistributionImpl extends AbstractIntegerDistribution\n     implements HypergeometricDistribution, Serializable {\n--- a/src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java\n /**\n  * Interface for discrete distributions of integer-valued random variables.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface IntegerDistribution extends DiscreteDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java\n  * where {@code D}<sub>{@code n}</sub>{@code = sup_x | G(x) - Gn (x) |} for the\n  * theoretical cdf G and the emperical cdf Gn.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface KolmogorovSmirnovDistribution {\n \n--- a/src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java\n  * <a href=\"https://issues.apache.org/jira/browse/MATH-437\">MATH-437</a> for details.\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class KolmogorovSmirnovDistributionImpl implements KolmogorovSmirnovDistribution, Serializable {\n \n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface NormalDistribution extends ContinuousDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.NormalDistribution}.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NormalDistributionImpl extends AbstractContinuousDistribution\n         implements NormalDistribution, Serializable {\n--- a/src/main/java/org/apache/commons/math/distribution/PascalDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PascalDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public interface PascalDistribution extends IntegerDistribution {\n--- a/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java\n \n /**\n  * The default implementation of {@link PascalDistribution}.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class PascalDistributionImpl extends AbstractIntegerDistribution\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface PoissonDistribution extends IntegerDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n /**\n  * Implementation for the {@link PoissonDistribution}.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class PoissonDistributionImpl extends AbstractIntegerDistribution\n     implements PoissonDistribution, Serializable {\n--- a/src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java\n+++ b/src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java\n  * </p>\n  *\n  * @since 2.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n final class SaddlePointExpansion {\n \n--- a/src/main/java/org/apache/commons/math/distribution/TDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/TDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface TDistribution extends ContinuousDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.TDistribution}.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java\n  * </p>\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface WeibullDistribution extends ContinuousDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n  * {@link org.apache.commons.math.distribution.WeibullDistribution}.\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class WeibullDistributionImpl extends AbstractContinuousDistribution\n     implements WeibullDistribution, Serializable {\n--- a/src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface ZipfDistribution extends IntegerDistribution {\n     /**\n--- a/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java\n /**\n  * Implementation for the {@link ZipfDistribution}.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ZipfDistributionImpl extends AbstractIntegerDistribution\n     implements ZipfDistribution, Serializable {\n--- a/src/main/java/org/apache/commons/math/exception/ConvergenceException.java\n+++ b/src/main/java/org/apache/commons/math/exception/ConvergenceException.java\n  * numerical result failed to converge to a finite value.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ConvergenceException extends MathIllegalStateException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java\n+++ b/src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java\n  * Exception to be thrown when two dimensions differ.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class DimensionMismatchException extends MathIllegalNumberException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/MathArithmeticException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathArithmeticException.java\n  * message.\n  *\n  * @since 3.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MathArithmeticException extends ArithmeticException\n     implements ExceptionContextProvider {\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n  * of the standard {@link IllegalArgumentException}.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MathIllegalArgumentException extends IllegalArgumentException\n     implements ExceptionContextProvider {\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java\n  * precondition is violated by a number argument.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MathIllegalNumberException extends MathIllegalArgumentException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\n  * current state and the user's expectations.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MathIllegalStateException extends IllegalStateException\n     implements ExceptionContextProvider {\n--- a/src/main/java/org/apache/commons/math/exception/MathInternalError.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathInternalError.java\n  * Exception triggered when something that shouldn't happen does happen.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MathInternalError extends MathIllegalStateException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/MathParseException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathParseException.java\n  * Class to signal parse failures.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MathParseException extends MathIllegalStateException\n     implements ExceptionContextProvider {\n--- a/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\n  * This class is the base class for all exceptions.\n  *\n  * @since 3.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MathRuntimeException extends RuntimeException\n     implements MathThrowable {\n--- a/src/main/java/org/apache/commons/math/exception/MathThrowable.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathThrowable.java\n /**\n * Interface for commons-math throwables.\n *\n-* @version $Revision$ $Date$\n+* @version $Id$\n * @since 2.2\n */\n public interface MathThrowable {\n--- a/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n  * message.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MathUnsupportedOperationException extends UnsupportedOperationException\n     implements ExceptionContextProvider {\n--- a/src/main/java/org/apache/commons/math/exception/MathUserException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUserException.java\n  * The Commons-Math code will never catch such an exception.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MathUserException extends RuntimeException\n     implements ExceptionContextProvider {\n--- a/src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java\n  * Exception to be thrown when some counter maximum value is exceeded.\n  *\n  * @since 3.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MaxCountExceededException extends MathIllegalStateException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MultiDimensionMismatchException.java\n  * Exception to be thrown when two sets of dimensions differ.\n  *\n  * @since 3.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MultiDimensionMismatchException extends MathIllegalArgumentException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/NoBracketingException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NoBracketingException.java\n  * ends of an interval.\n  *\n  * @since 3.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NoBracketingException extends MathIllegalArgumentException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/NoDataException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NoDataException.java\n  * Exception to be thrown when the required data is missing.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NoDataException extends MathIllegalArgumentException {\n \n--- a/src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java\n  * increasing or decreasing.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NonMonotonousSequenceException extends MathIllegalNumberException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/NotFiniteNumberException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NotFiniteNumberException.java\n  * Exception to be thrown when a number is not finite.\n  *\n  * @since 3.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NotFiniteNumberException extends MathIllegalNumberException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/NotPositiveException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NotPositiveException.java\n  * Exception to be thrown when the argument is negative.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NotPositiveException extends NumberIsTooSmallException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java\n  * Exception to be thrown when the argument is negative.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NotStrictlyPositiveException extends NumberIsTooSmallException {\n \n--- a/src/main/java/org/apache/commons/math/exception/NullArgumentException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NullArgumentException.java\n  * construed to be a bug.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NullArgumentException extends MathIllegalArgumentException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java\n  * Exception to be thrown when a number is too large.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NumberIsTooLargeException extends MathIllegalNumberException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java\n  * Exception to be thrown when a number is too small.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NumberIsTooSmallException extends MathIllegalNumberException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/OutOfRangeException.java\n+++ b/src/main/java/org/apache/commons/math/exception/OutOfRangeException.java\n  * Exception to be thrown when some argument is out of range.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class OutOfRangeException extends MathIllegalNumberException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/TooManyEvaluationsException.java\n+++ b/src/main/java/org/apache/commons/math/exception/TooManyEvaluationsException.java\n  * Exception to be thrown when the maximal number of evaluations is exceeded.\n  *\n  * @since 3.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TooManyEvaluationsException extends MaxCountExceededException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/exception/ZeroException.java\n+++ b/src/main/java/org/apache/commons/math/exception/ZeroException.java\n  * Exception to be thrown when zero is provided where it is not allowed.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ZeroException extends MathIllegalNumberException {\n \n--- a/src/main/java/org/apache/commons/math/exception/util/ArgUtils.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/ArgUtils.java\n  * Utility class for transforming the list of arguments passed to\n  * constructors of exceptions.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ArgUtils {\n     /**\n--- a/src/main/java/org/apache/commons/math/exception/util/DummyLocalizable.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/DummyLocalizable.java\n /**\n  * Dummy implementation of the {@link Localizable} interface, without localization.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class DummyLocalizable implements Localizable {\n--- a/src/main/java/org/apache/commons/math/exception/util/Localizable.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/Localizable.java\n /**\n  * Interface for localizable strings.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public interface Localizable extends Serializable {\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n  * translation is missing.\n  * </p>\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public enum LocalizedFormats implements Localizable {\n \n--- a/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java\n \n /**\n  * Common part shared by both {@link FractionFormat} and {@link BigFractionFormat}.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public abstract class AbstractFormat extends NumberFormat implements Serializable {\n--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n  * Representation of a rational number without any overflow. This class is\n  * immutable.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class BigFraction\n--- a/src/main/java/org/apache/commons/math/fraction/BigFractionField.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFractionField.java\n  * This class is a singleton.\n  * </p>\n  * @see Fraction\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class BigFractionField implements Field<BigFraction>, Serializable  {\n--- a/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java\n  * </p>\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class BigFractionFormat extends AbstractFormat implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/Fraction.java\n  * implements Serializable since 2.0\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Fraction\n     extends Number\n--- a/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java\n+++ b/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java\n  * Error thrown when a double value cannot be converted to a fraction\n  * in the allowed number of iterations.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class FractionConversionException extends ConvergenceException {\n--- a/src/main/java/org/apache/commons/math/fraction/FractionField.java\n+++ b/src/main/java/org/apache/commons/math/fraction/FractionField.java\n  * This class is a singleton.\n  * </p>\n  * @see Fraction\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class FractionField implements Field<Fraction>, Serializable  {\n--- a/src/main/java/org/apache/commons/math/fraction/FractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/FractionFormat.java\n  * configured.\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class FractionFormat extends AbstractFormat {\n \n--- a/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java\n  * will result in a <code>ParseException</code>.</p>\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ProperBigFractionFormat extends BigFractionFormat {\n \n--- a/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n  * will result in a <code>ParseException</code>.</p>\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ProperFractionFormat extends FractionFormat {\n \n--- a/src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java\n+++ b/src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java\n  * Chromosome represented by an immutable list of a fixed length.\n  *\n  * @param <T> type of the representation list\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public abstract class AbstractListChromosome<T> extends Chromosome {\n--- a/src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java\n+++ b/src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java\n /**\n  * Chromosome represented by a vector of 0s and 1s.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public abstract class BinaryChromosome extends AbstractListChromosome<Integer> {\n--- a/src/main/java/org/apache/commons/math/genetics/BinaryMutation.java\n+++ b/src/main/java/org/apache/commons/math/genetics/BinaryMutation.java\n /**\n  * Mutation for {@link BinaryChromosome}s. Randomly changes one gene.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class BinaryMutation implements MutationPolicy {\n--- a/src/main/java/org/apache/commons/math/genetics/Chromosome.java\n+++ b/src/main/java/org/apache/commons/math/genetics/Chromosome.java\n  * therefore it can be cached.\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class Chromosome implements Comparable<Chromosome>,Fitness {\n \n--- a/src/main/java/org/apache/commons/math/genetics/ChromosomePair.java\n+++ b/src/main/java/org/apache/commons/math/genetics/ChromosomePair.java\n  * A pair of {@link Chromosome} objects.\n  * @since 2.0\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ChromosomePair {\n     /** the first chromosome in the pair. */\n--- a/src/main/java/org/apache/commons/math/genetics/CrossoverPolicy.java\n+++ b/src/main/java/org/apache/commons/math/genetics/CrossoverPolicy.java\n  * operation on a source pair of chromosomes.\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface CrossoverPolicy {\n     /**\n--- a/src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java\n+++ b/src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java\n  * Population of chromosomes which uses elitism (certain percentace of the best\n  * chromosomes is directly copied to the next generation).\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class ElitisticListPopulation extends ListPopulation {\n--- a/src/main/java/org/apache/commons/math/genetics/Fitness.java\n+++ b/src/main/java/org/apache/commons/math/genetics/Fitness.java\n /**\n  * Fitness of a chromosome.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface Fitness {\n--- a/src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java\n+++ b/src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java\n  * <code>maxGenerations</code> value, {@link #isSatisfied(Population)} returns\n  * true.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class FixedGenerationCount implements StoppingCondition {\n--- a/src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java\n+++ b/src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java\n  * of the algorithm can be configured for a specific problem.\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class GeneticAlgorithm {\n \n--- a/src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java\n+++ b/src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java\n /**\n  * Exception indicating that the representation of a chromosome is not valid.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class InvalidRepresentationException extends Exception {\n--- a/src/main/java/org/apache/commons/math/genetics/ListPopulation.java\n+++ b/src/main/java/org/apache/commons/math/genetics/ListPopulation.java\n  * Population of chromosomes represented by a {@link List}.\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class ListPopulation implements Population {\n \n--- a/src/main/java/org/apache/commons/math/genetics/MutationPolicy.java\n+++ b/src/main/java/org/apache/commons/math/genetics/MutationPolicy.java\n  * Algorithm used to mutate a chrommosome.\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface MutationPolicy {\n \n--- a/src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java\n+++ b/src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java\n  *\n  * @param <T> generic type of the {@link AbstractListChromosome}s for crossover\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  *\n  */\n public class OnePointCrossover<T> implements CrossoverPolicy {\n--- a/src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java\n+++ b/src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java\n  * @param <T>\n  *            type of the permuted objects\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface PermutationChromosome<T> {\n \n--- a/src/main/java/org/apache/commons/math/genetics/Population.java\n+++ b/src/main/java/org/apache/commons/math/genetics/Population.java\n  * A collection of chromosomes that facilitates generational evolution.\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface Population extends Iterable<Chromosome> {\n     /**\n--- a/src/main/java/org/apache/commons/math/genetics/RandomKey.java\n+++ b/src/main/java/org/apache/commons/math/genetics/RandomKey.java\n  * @param <T>\n  *            type of the permuted objects\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class RandomKey<T> extends AbstractListChromosome<Double> implements PermutationChromosome<T> {\n \n--- a/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java\n+++ b/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java\n  * of the array representation to a random value uniformly distributed in [0,1].\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class RandomKeyMutation implements MutationPolicy {\n \n--- a/src/main/java/org/apache/commons/math/genetics/SelectionPolicy.java\n+++ b/src/main/java/org/apache/commons/math/genetics/SelectionPolicy.java\n  * Algorithm used to select a chromosome pair from a population.\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface SelectionPolicy {\n     /**\n--- a/src/main/java/org/apache/commons/math/genetics/StoppingCondition.java\n+++ b/src/main/java/org/apache/commons/math/genetics/StoppingCondition.java\n  * Algorithm used to determine when to stop evolution.\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface StoppingCondition {\n     /**\n--- a/src/main/java/org/apache/commons/math/genetics/TournamentSelection.java\n+++ b/src/main/java/org/apache/commons/math/genetics/TournamentSelection.java\n  * fittest chromosome among them.\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TournamentSelection implements SelectionPolicy {\n \n--- a/src/main/java/org/apache/commons/math/geometry/Space.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Space.java\n import java.io.Serializable;\n \n /** This interface represents a generic space, with affine and vectorial counterparts.\n- * @version $Id:$\n+ * @version $Id$\n  * @see Vector\n  * @since 3.0\n  */\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java\n \n /**\n  * This class implements a one-dimensional space.\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Euclidean1D implements Serializable, Space {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/oned/Interval.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/oned/Interval.java\n \n /** This class represents a 1D interval.\n  * @see IntervalsSet\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Interval {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java\n  * returned. In the second case, however, the parse position after parsing will be\n  * just after the closing curly brace, i.e. just before the trailing space.</p>\n  *\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Vector1DFormat extends VectorFormat<Euclidean1D> {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/CardanEulerSingularityException.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/CardanEulerSingularityException.java\n /** This class represents exceptions thrown while extractiong Cardan\n  * or Euler angles from a rotation.\n \n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class CardanEulerSingularityException\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java\n \n /**\n  * This class implements a three-dimensional space.\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Euclidean3D implements Serializable, Space {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java\n  * which is closest to the origin. Abscissa increases in the line\n  * direction.</p>\n \n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/NotARotationMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/NotARotationMatrixException.java\n  * This class represents exceptions thrown while building rotations\n  * from matrices.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java\n /** Extractor for {@link PolygonsSet polyhedrons sets} outlines.\n  * <p>This class extracts the 2D outlines from {{@link PolygonsSet\n  * polyhedrons sets} in a specified projection plane.</p>\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class OutlineExtractor {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java\n import org.apache.commons.math.util.FastMath;\n \n /** The class represent planes in a three dimensional space.\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Plane implements Hyperplane<Euclidean3D>, Embedding<Euclidean3D, Euclidean2D> {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java\n import org.apache.commons.math.util.FastMath;\n \n /** This class represents a 3D region: a set of polyhedrons.\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class PolyhedronsSet extends AbstractRegion<Euclidean3D, Euclidean2D> {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n  *\n  * <p>Rotations are guaranteed to be immutable objects.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @see Vector3D\n  * @see RotationOrder\n  * @since 1.2\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/RotationOrder.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/RotationOrder.java\n  * the {@link Rotation#Rotation(RotationOrder,double,double,double)}\n  * constructor or the {@link Rotation#getAngles} method.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public final class RotationOrder {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java\n import org.apache.commons.math.geometry.partitioning.SubHyperplane;\n \n /** This class represents a sub-hyperplane for {@link Plane}.\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class SubPlane extends AbstractSubHyperplane<Euclidean3D, Euclidean2D> {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java\n  * returned. In the second case, however, the parse position after parsing will be\n  * just after the closing curly brace, i.e. just before the trailing space.</p>\n  *\n- * @version $Id:$\n+ * @version $Id$\n  */\n public class Vector3DFormat extends VectorFormat<Euclidean3D> {\n \n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java\n \n /**\n  * This class implements a three-dimensional space.\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Euclidean2D implements Serializable, Space {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java\n import org.apache.commons.math.geometry.partitioning.utilities.OrderedTuple;\n \n /** This class holds segments information before they are connected.\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n class Segment implements Comparable<Segment> {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java\n import org.apache.commons.math.geometry.partitioning.utilities.AVLTree;\n \n /** Visitor building segments.\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n class SegmentsBuilder implements BSPTreeVisitor<Euclidean2D> {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java\n import org.apache.commons.math.util.FastMath;\n \n /** This class represents a sub-hyperplane for {@link Line}.\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class SubLine extends AbstractSubHyperplane<Euclidean2D, Euclidean1D> {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java\n  * returned. In the second case, however, the parse position after parsing will be\n  * just after the closing curly brace, i.e. just before the trailing space.</p>\n  *\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Vector2DFormat extends VectorFormat<Euclidean2D> {\n--- a/src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java\n+++ b/src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java\n  * @param <S> Type of the embedding space.\n  * @param <T> Type of the embedded sub-space.\n \n- * @version $Revision$\n+ * @version $Id$\n  * @since 3.0\n  */\n public abstract class AbstractSubHyperplane<S extends Space, T extends Space>\n--- a/src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java\n+++ b/src/main/java/org/apache/commons/math/geometry/partitioning/Characterization.java\n \n /** Characterization of a sub-hyperplane.\n  * @param <S> Type of the space.\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n class Characterization<S extends Space> {\n--- a/src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java\n+++ b/src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java\n  * @param <T> Type of the embedded sub-space.\n \n  * @see Hyperplane\n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public interface Embedding<S extends Space, T extends Space> {\n--- a/src/main/java/org/apache/commons/math/geometry/partitioning/RegionFactory.java\n+++ b/src/main/java/org/apache/commons/math/geometry/partitioning/RegionFactory.java\n \n  * @param <S> Type of the space.\n \n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class RegionFactory<S extends Space> {\n--- a/src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java\n+++ b/src/main/java/org/apache/commons/math/geometry/partitioning/Transform.java\n  * @param <S> Type of the embedding space.\n  * @param <T> Type of the embedded sub-space.\n \n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public interface Transform<S extends Space, T extends Space> {\n--- a/src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java\n+++ b/src/main/java/org/apache/commons/math/geometry/partitioning/utilities/AVLTree.java\n \n  * @param <T> the type of the elements\n \n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class AVLTree<T extends Comparable<T>> {\n--- a/src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java\n+++ b/src/main/java/org/apache/commons/math/geometry/partitioning/utilities/OrderedTuple.java\n  * components</li>\n  * </ul>\n \n- * @version $Id:$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class OrderedTuple implements Comparable<OrderedTuple> {\n--- a/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n  *\n  * @param <T> Type of the field elements.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public abstract class AbstractFieldMatrix<T extends FieldElement<T>>\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n  * <p>All the methods implemented here use {@link #getEntry(int, int)} to access\n  * matrix elements. Derived class can provide faster implementations. </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public abstract class AbstractRealMatrix implements RealMatrix {\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n  * This class provides default basic implementations for many methods in the\n  * {@link RealVector} interface.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.1\n  */\n public abstract class AbstractRealVector implements RealVector {\n--- a/src/main/java/org/apache/commons/math/linear/AnyMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/AnyMatrix.java\n \n /**\n  * Interface defining very basic matrix operations.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface AnyMatrix {\n--- a/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java\n  * </p>\n  *\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Array2DRowFieldMatrix<T extends FieldElement<T>>\n     extends AbstractFieldMatrix<T>\n--- a/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n  * returns the element in the first row, first column of the matrix.</li></ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Array2DRowRealMatrix extends AbstractRealMatrix implements Serializable {\n     /** Serializable version identifier. */\n--- a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n /**\n  * This class implements the {@link FieldVector} interface with a {@link FieldElement} array.\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class ArrayFieldVector<T extends FieldElement<T>> implements FieldVector<T>, Serializable {\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n \n /**\n  * This class implements the {@link RealVector} interface with a double array.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class ArrayRealVector extends AbstractRealVector implements Serializable {\n--- a/src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java\n+++ b/src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java\n  * intended for internal use by the library and is not public. As a consequence of\n  * this explicitly limited scope, many methods directly returns references to\n  * internal arrays, not copies.</p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n class BiDiagonalTransformer {\n--- a/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java\n  * to up to 3-fold improvements for matrices of moderate to large size.\n  * </p>\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class BlockFieldMatrix<T extends FieldElement<T>> extends AbstractFieldMatrix<T> implements Serializable {\n--- a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java\n  * arrays is negligible for small matrices (about 1%). The gain from cache efficiency leads\n  * to up to 3-fold improvements for matrices of moderate to large size.\n  * </p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {\n--- a/src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java\n+++ b/src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java\n  *\n  * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n  * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface CholeskyDecomposition {\n--- a/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n  *\n  * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n  * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class CholeskyDecompositionImpl implements CholeskyDecomposition {\n--- a/src/main/java/org/apache/commons/math/linear/DecompositionSolver.java\n+++ b/src/main/java/org/apache/commons/math/linear/DecompositionSolver.java\n  * with non-square matrix A and with non-null minimal norm. If an exact linear\n  * solution exists it is also the minimal norm solution.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface DecompositionSolver {\n--- a/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java\n  * </p>\n  *\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class DefaultFieldMatrixChangingVisitor<T extends FieldElement<T>>\n--- a/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java\n  * </p>\n  *\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class DefaultFieldMatrixPreservingVisitor<T extends FieldElement<T>>\n--- a/src/main/java/org/apache/commons/math/linear/DefaultRealMatrixChangingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/DefaultRealMatrixChangingVisitor.java\n  * methods. This class provides default implementations that do nothing.\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class DefaultRealMatrixChangingVisitor implements RealMatrixChangingVisitor {\n--- a/src/main/java/org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor.java\n  * methods. This class provides default implementations that do nothing.\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecomposition.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecomposition.java\n  * </ul>\n  * @see <a href=\"http://mathworld.wolfram.com/EigenDecomposition.html\">MathWorld</a>\n  * @see <a href=\"http://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix\">Wikipedia</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface EigenDecomposition {\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n  * Handbook for automatic computation, vol. 2, Linear algebra, Springer-Verlag,\n  * New-York\n  * </p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class EigenDecompositionImpl implements EigenDecomposition {\n--- a/src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java\n  * solution exists it is also the minimal norm solution.</p>\n  *\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface FieldDecompositionSolver<T extends FieldElement<T>> {\n--- a/src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java\n  * @param <T> the type of the field elements\n  * @see <a href=\"http://mathworld.wolfram.com/LUDecomposition.html\">MathWorld</a>\n  * @see <a href=\"http://en.wikipedia.org/wiki/LU_decomposition\">Wikipedia</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface FieldLUDecomposition<T extends FieldElement<T>> {\n--- a/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java\n  * a zero pivot element, no attempt is done to get the largest pivot element.</p>\n  *\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class FieldLUDecompositionImpl<T extends FieldElement<T>> implements FieldLUDecomposition<T> {\n--- a/src/main/java/org/apache/commons/math/linear/FieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrix.java\n  * returns the element in the first row, first column of the matrix.</p>\n  *\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface FieldMatrix<T extends FieldElement<T>> extends AnyMatrix {\n     /**\n--- a/src/main/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java\n  * Interface defining a visitor for matrix entries.\n  *\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface FieldMatrixChangingVisitor<T extends FieldElement<?>> {\n--- a/src/main/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java\n  * Interface defining a visitor for matrix entries.\n  *\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface FieldMatrixPreservingVisitor<T extends FieldElement<?>> {\n--- a/src/main/java/org/apache/commons/math/linear/FieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldVector.java\n  * </pre>\n  *\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface FieldVector<T extends FieldElement<T>>  {\n--- a/src/main/java/org/apache/commons/math/linear/LUDecomposition.java\n+++ b/src/main/java/org/apache/commons/math/linear/LUDecomposition.java\n  *\n  * @see <a href=\"http://mathworld.wolfram.com/LUDecomposition.html\">MathWorld</a>\n  * @see <a href=\"http://en.wikipedia.org/wiki/LU_decomposition\">Wikipedia</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface LUDecomposition {\n--- a/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java\n  * <p>As shown by the presence of the P matrix, this decomposition is\n  * implemented using partial pivoting.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class LUDecompositionImpl implements LUDecomposition {\n--- a/src/main/java/org/apache/commons/math/linear/MatrixDimensionMismatchException.java\n+++ b/src/main/java/org/apache/commons/math/linear/MatrixDimensionMismatchException.java\n  * columns of a matrix do not match the expected values.\n  *\n  * @since 3.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MatrixDimensionMismatchException extends MultiDimensionMismatchException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/linear/MatrixUtils.java\n+++ b/src/main/java/org/apache/commons/math/linear/MatrixUtils.java\n /**\n  * A collection of static methods that operate on or return matrices.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MatrixUtils {\n \n--- a/src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteMatrixException.java\n  * Exception to be thrown when a symmetric matrix is expected.\n  *\n  * @since 3.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NonPositiveDefiniteMatrixException extends MathIllegalArgumentException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java\n  * Exception to be thrown when a square matrix is expected.\n  *\n  * @since 3.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NonSquareMatrixException extends DimensionMismatchException {\n \n--- a/src/main/java/org/apache/commons/math/linear/NonSymmetricMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/NonSymmetricMatrixException.java\n  * Exception to be thrown when a symmetric matrix is expected.\n  *\n  * @since 3.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NonSymmetricMatrixException extends MathIllegalArgumentException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n /**\n  * Sparse matrix implementation based on an open addressed map.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class OpenMapRealMatrix extends AbstractRealMatrix\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n /**\n  * This class implements the {@link RealVector} interface with a\n  * {@link OpenIntToDoubleHashMap} backing store.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n */\n public class OpenMapRealVector extends AbstractRealVector\n--- a/src/main/java/org/apache/commons/math/linear/QRDecomposition.java\n+++ b/src/main/java/org/apache/commons/math/linear/QRDecomposition.java\n  *\n  * @see <a href=\"http://mathworld.wolfram.com/QRDecomposition.html\">MathWorld</a>\n  * @see <a href=\"http://en.wikipedia.org/wiki/QR_decomposition\">Wikipedia</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public interface QRDecomposition {\n--- a/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java\n  * @see <a href=\"http://mathworld.wolfram.com/QRDecomposition.html\">MathWorld</a>\n  * @see <a href=\"http://en.wikipedia.org/wiki/QR_decomposition\">Wikipedia</a>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class QRDecompositionImpl implements QRDecomposition {\n--- a/src/main/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrix.java\n  * Matrix element indexing is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface RealMatrix extends AnyMatrix {\n     /**\n--- a/src/main/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java\n  * Interface defining a visitor for matrix entries.\n  *\n  * @see DefaultRealMatrixChangingVisitor\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface RealMatrixChangingVisitor {\n--- a/src/main/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java\n  * Interface defining a visitor for matrix entries.\n  *\n  * @see DefaultRealMatrixPreservingVisitor\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface RealMatrixPreservingVisitor {\n--- a/src/main/java/org/apache/commons/math/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVector.java\n  *   RealVector result = v.mapAddToSelf(3.4).mapToSelf(new Tan()).mapToSelf(new Power(2.3));\n  * </pre>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface RealVector {\n--- a/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java\n  * returned. In the second case, however, the parse position after parsing will be\n  * just after the closing curly brace, i.e. just before the trailing space.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class RealVectorFormat {\n--- a/src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java\n+++ b/src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java\n  *\n  * @see CholeskyDecomposition\n  * @see org.apache.commons.math.random.CorrelatedRandomVectorGenerator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public interface RectangularCholeskyDecomposition {\n--- a/src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java\n  *\n  * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n  * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class RectangularCholeskyDecompositionImpl implements RectangularCholeskyDecomposition {\n--- a/src/main/java/org/apache/commons/math/linear/SingularMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/SingularMatrixException.java\n  * Exception to be thrown when a non-singular matrix is expected.\n  *\n  * @since 3.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SingularMatrixException extends MathIllegalArgumentException {\n     /** Serializable version Id. */\n--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java\n+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java\n  * </ul>\n  * @see <a href=\"http://mathworld.wolfram.com/SingularValueDecomposition.html\">MathWorld</a>\n  * @see <a href=\"http://en.wikipedia.org/wiki/Singular_value_decomposition\">Wikipedia</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface SingularValueDecomposition {\n--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n  * n orthogonal matrix (hence V<sup>T</sup> is also orthogonal) where\n  * p=min(m,n).\n  * </p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class SingularValueDecompositionImpl implements SingularValueDecomposition {\n--- a/src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/SparseFieldMatrix.java\n  * Sparse matrix implementation based on an open addressed map.\n  *\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class SparseFieldMatrix<T extends FieldElement<T>> extends AbstractFieldMatrix<T> {\n--- a/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java\n /**\n  * This class implements the {@link FieldVector} interface with a {@link OpenIntToFieldHashMap} backing store.\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class SparseFieldVector<T extends FieldElement<T>> implements FieldVector<T>, Serializable {\n--- a/src/main/java/org/apache/commons/math/linear/SparseRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/SparseRealMatrix.java\n /**\n  * Marker interface for {@link RealMatrix} implementations that require sparse backing storage\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  *\n  */\n--- a/src/main/java/org/apache/commons/math/linear/SparseRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/SparseRealVector.java\n \n /**\n  * Marker interface for RealVectors that require sparse backing storage\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  *\n  */\n--- a/src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java\n+++ b/src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java\n  * EigenDecomposition eigen decomposition}. This class is therefore intended for internal\n  * use by the library and is not public. As a consequence of this explicitly limited scope,\n  * many methods directly returns references to internal arrays, not copies.</p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n class TriDiagonalTransformer {\n--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n \n /**\n  * Base class managing common boilerplate for all integrators.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n--- a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n+++ b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n  *\n  * @see StepHandler\n  * @see StepInterpolator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java\n+++ b/src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java\n  *\n  * @see FirstOrderDifferentialEquations\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/FirstOrderConverter.java\n+++ b/src/main/java/org/apache/commons/math/ode/FirstOrderConverter.java\n  * @see FirstOrderIntegrator\n  * @see FirstOrderDifferentialEquations\n  * @see SecondOrderDifferentialEquations\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n+++ b/src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n  * @see FirstOrderConverter\n  * @see SecondOrderDifferentialEquations\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n  * @see FirstOrderDifferentialEquations\n  * @see org.apache.commons.math.ode.sampling.StepHandler\n  * @see org.apache.commons.math.ode.events.EventHandler\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/IntegratorException.java\n+++ b/src/main/java/org/apache/commons/math/ode/IntegratorException.java\n /**\n  * This exception is made available to users to report\n  * the error conditions that are triggered during integration\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class IntegratorException\n--- a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java\n  *\n  * @see org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator\n  * @see org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public abstract class MultistepIntegrator extends AdaptiveStepsizeIntegrator {\n--- a/src/main/java/org/apache/commons/math/ode/ODEIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/ODEIntegrator.java\n  * for first and second order differential equations.\n  * @see FirstOrderIntegrator\n  * @see SecondOrderIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface ODEIntegrator  {\n--- a/src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java\n+++ b/src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java\n  * @see SecondOrderIntegrator\n  * @see FirstOrderConverter\n  * @see FirstOrderDifferentialEquations\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/SecondOrderIntegrator.java\n  * SecondOrderDifferentialEquations} interface.</p>\n  *\n  * @see SecondOrderDifferentialEquations\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/events/EventException.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventException.java\n /**\n  * This exception is made available to users to report\n  * the error conditions that are triggered by {@link EventHandler}\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class EventException extends MathException {\n--- a/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n  * error (this event handling feature is available for all integrators,\n  * including fixed step ones).</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n  * decide if the handler should trigger an event or not during the\n  * proposed step.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class EventState {\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n  * <p>The P<sup>-1</sup>u vector and the P<sup>-1</sup> A P matrix do not depend on the state,\n  * they only depend on k and therefore are precomputed once for all.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class AdamsBashforthIntegrator extends AdamsIntegrator {\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java\n \n /** Base class for {@link AdamsBashforthIntegrator Adams-Bashforth} and\n  * {@link AdamsMoultonIntegrator Adams-Moulton} integrators.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public abstract class AdamsIntegrator extends MultistepIntegrator {\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n  * <p>The P<sup>-1</sup>u vector and the P<sup>-1</sup> A P matrix do not depend on the state,\n  * they only depend on k and therefore are precomputed once for all.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class AdamsMoultonIntegrator extends AdamsIntegrator {\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java\n  * vector and a P<sup>-1</sup> A P matrix are used that do not depend on the state,\n  * they only depend on k. This class handles these transformations.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class AdamsNordsieckTransformer {\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n  * otherwise the step is rejected and a new attempt is made with a new\n  * stepsize.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  *\n  */\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java\n  * @see GillIntegrator\n  * @see MidpointIntegrator\n  * @see ThreeEighthesIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java\n  * step.</p>\n  *\n  * @see ClassicalRungeKuttaIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java\n  *  volume 6, no 1, 1980, pp. 19-26\n  * </pre></p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java\n  *\n  * @see DormandPrince54Integrator\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java\n  * <i>Solving Ordinary Differential Equations</i> (Springer-Verlag,\n  * ISBN 3-540-56670-8).</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n  *\n  * @see DormandPrince853Integrator\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n  * evaluation is saved. For an <i>fsal</i> method, we have cs = 1 and\n  * asi = bi for all i.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java\n  * @see ClassicalRungeKuttaIntegrator\n  * @see GillIntegrator\n  * @see ThreeEighthesIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java\n  * the derivatives already computed during the step.</p>\n  *\n  * @see EulerIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java\n  * @see ClassicalRungeKuttaIntegrator\n  * @see MidpointIntegrator\n  * @see ThreeEighthesIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java\n  * the step.</p>\n  *\n  * @see GillIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</strong></td></tr>\n  * </table>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java\n  * </table>\n  *\n  * @see GraggBulirschStoerIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java\n  * (and automatic step initialization) and continuous output. This\n  * method uses 7 functions evaluations per step.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java\n  *\n  * @see HighamHall54Integrator\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java\n  * @see ClassicalRungeKuttaIntegrator\n  * @see GillIntegrator\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java\n  * step.</p>\n  *\n  * @see MidpointIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n  * @see ClassicalRungeKuttaIntegrator\n  * @see GillIntegrator\n  * @see MidpointIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java\n  * @see RungeKuttaIntegrator\n  * @see EmbeddedRungeKuttaIntegrator\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java\n  * @see ClassicalRungeKuttaIntegrator\n  * @see GillIntegrator\n  * @see MidpointIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java\n  * step.</p>\n  *\n  * @see ThreeEighthesIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java\n  * @see org.apache.commons.math.ode.SecondOrderIntegrator\n  * @see StepHandler\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  *\n  */\n--- a/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java\n  * method. This explains why there is no public constructor.</p>\n  *\n  * @see StepHandler\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java\n  *\n  * @see StepHandler\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java\n  *\n  * @see StepHandler\n  * @see StepNormalizer\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java\n  *\n  * @see org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator\n  * @see org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java\n  * @see org.apache.commons.math.ode.FirstOrderIntegrator\n  * @see org.apache.commons.math.ode.SecondOrderIntegrator\n  * @see StepInterpolator\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java\n  * @see org.apache.commons.math.ode.FirstOrderIntegrator\n  * @see org.apache.commons.math.ode.SecondOrderIntegrator\n  * @see StepHandler\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n  *\n  * @see StepHandler\n  * @see FixedStepHandler\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java\n  *\n  * @param <PAIR> Type of (point, value) pair.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public abstract class AbstractConvergenceChecker<PAIR>\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java\n  *\n  * @param <FUNC> Type of the objective function to be optimized.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class BaseMultiStartMultivariateRealOptimizer<FUNC extends MultivariateRealFunction>\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java\n  *\n  * @param <FUNC> Type of the objective function to be optimized.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class BaseMultiStartMultivariateVectorialOptimizer<FUNC extends MultivariateVectorialFunction>\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java\n  *\n  * @param <FUNC> Type of the objective function to be optimized.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public interface BaseMultivariateRealOptimizer<FUNC extends MultivariateRealFunction>\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java\n  *\n  * @param <FUNC> Type of the objective function to be optimized.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public interface BaseMultivariateVectorialOptimizer<FUNC extends MultivariateVectorialFunction>\n--- a/src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java\n  *\n  * @param <PAIR> Type of the point/objective pair.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public interface BaseOptimizer<PAIR> {\n--- a/src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java\n  * @see org.apache.commons.math.optimization.SimpleScalarValueChecker\n  * @see org.apache.commons.math.optimization.SimpleRealPointChecker\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public interface ConvergenceChecker<PAIR> {\n--- a/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java\n  * @see MultivariateRealOptimizer\n  * @see DifferentiableMultivariateVectorialOptimizer\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface DifferentiableMultivariateRealOptimizer\n--- a/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java\n  * {@link DifferentiableMultivariateVectorialFunction vectorial differentiable\n  * objective functions}.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public interface DifferentiableMultivariateVectorialOptimizer\n--- a/src/main/java/org/apache/commons/math/optimization/GoalType.java\n+++ b/src/main/java/org/apache/commons/math/optimization/GoalType.java\n \n /**\n  * Goal type for an optimization problem.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public enum GoalType implements Serializable {\n--- a/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java\n   *\n  * @see MultivariateRealFunction\n  * @see MultivariateVectorialFunction\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n \n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java\n  * turn with different starting points in order to avoid being trapped\n  * into a local extremum when looking for a global one.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class MultiStartDifferentiableMultivariateRealOptimizer\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java\n  * turn with different starting points in order to avoid being trapped\n  * into a local extremum when looking for a global one.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class MultiStartDifferentiableMultivariateVectorialOptimizer\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java\n  * turn with different starting points in order to avoid being trapped\n  * into a local extremum when looking for a global one.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class MultiStartMultivariateRealOptimizer\n--- a/src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java\n  *\n  * @see DifferentiableMultivariateRealOptimizer\n  * @see DifferentiableMultivariateVectorialOptimizer\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface MultivariateRealOptimizer\n--- a/src/main/java/org/apache/commons/math/optimization/OptimizationException.java\n+++ b/src/main/java/org/apache/commons/math/optimization/OptimizationException.java\n /**\n  * This class represents exceptions thrown by optimizers.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  *\n  */\n--- a/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java\n+++ b/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java\n  * <p>This is a simple immutable container.</p>\n  * @see VectorialPointValuePair\n  * @see org.apache.commons.math.analysis.MultivariateRealFunction\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class RealPointValuePair implements Serializable {\n--- a/src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java\n  * or if either the absolute difference between the point coordinates are\n  * smaller than another threshold.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class SimpleRealPointChecker\n--- a/src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java\n  * threshold or if either the absolute difference between the objective\n  * function values is smaller than another threshold.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class SimpleScalarValueChecker\n--- a/src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java\n  * or if either the absolute difference between the point coordinates are\n  * smaller than another threshold.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class SimpleVectorialPointChecker\n--- a/src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java\n  * threshold or if either the absolute difference between the objective\n  * function values is smaller than another threshold for all vectors elements.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class SimpleVectorialValueChecker\n--- a/src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java\n+++ b/src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java\n  * considers convergence is reached when the input point set does not change\n  * much anymore, it does not use objective function value at all.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n \n--- a/src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java\n+++ b/src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java\n  * <p>This is a simple immutable container.</p>\n  * @see RealPointValuePair\n  * @see org.apache.commons.math.analysis.MultivariateVectorialFunction\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class VectorialPointValuePair implements Serializable {\n--- a/src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java\n  * this class.\n  *\n  * @see SimplexOptimizer\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public abstract class AbstractSimplex {\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java\n  *\n  * @param <FUNC> Type of the objective function to be optimized\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public abstract class BaseAbstractScalarOptimizer<FUNC extends MultivariateRealFunction>\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java\n  *\n  * @param <FUNC> the type of the objective function to be optimized\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public abstract class BaseAbstractVectorialOptimizer<FUNC extends MultivariateVectorialFunction>\n--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n  *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n  * </ul>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n \n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java\n /**\n  * This class implements the multi-directional direct search method.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class MultiDirectionalSimplex extends AbstractSimplex {\n--- a/src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java\n /**\n  * This class implements the Nelder-Mead simplex algorithm.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class NelderMeadSimplex extends AbstractSimplex {\n--- a/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\n  * #setConvergenceChecker(ConvergenceChecker) setConvergenceChecker}\n  * prior to using the optimizer.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class PowellOptimizer\n--- a/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java\n  * </p>\n  *\n  * @see AbstractSimplex\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class SimplexOptimizer\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java\n  * is done by finding the parameters values that minimizes the objective\n  * function &sum;(y<sub>i</sub>-f(x<sub>i</sub>))<sup>2</sup>. This is\n  * really a least squares problem.</p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class CurveFitter {\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n  * </pre>\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class GaussianFitter extends CurveFitter {\n     /**\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java\n  * searched by a least square estimator initialized with a rough guess\n  * based on integrals.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class HarmonicFitter extends CurveFitter {\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java\n  * <p>Polynomial fitting is a very simple case of curve fitting. The\n  * estimated coefficients are the polynomial coefficients. They are\n  * searched by a least square estimator.</p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n \n--- a/src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java\n /** This class is a simple container for weighted observed point in\n  * {@link CurveFitter curve fitting}.\n  * <p>Instances of this class are guaranteed to be immutable.</p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class WeightedObservedPoint implements Serializable {\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n  * It handles the boilerplate methods associated to thresholds settings,\n  * jacobian and error estimation.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  *\n  */\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n  * differentiable functions.\n  * It contains boiler-plate code for dealing with gradient evaluation.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public abstract class AbstractScalarDifferentiableOptimizer\n--- a/src/main/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java\n  * does converge. Polak-Ribi&egrave;re is often used.\n  * <p>\n  * @see NonLinearConjugateGradientOptimizer\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public enum ConjugateGradientFormula {\n--- a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java\n  * is faster but QR decomposition is more robust for difficult problems.\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  *\n  */\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n  *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n  * <ol></td></tr>\n  * </table>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  *\n  */\n--- a/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java\n  * optional preconditioning.\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  *\n  */\n--- a/src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/Preconditioner.java\n /**\n  * This interface represents a preconditioner for differentiable scalar\n  * objective function optimizers.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface Preconditioner {\n--- a/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java\n  * Base class for implementing linear optimizers.\n  * <p>This base class handles the boilerplate methods associated to thresholds\n  * settings and iterations counters.</p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  *\n  */\n--- a/src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java\n  * The c<sub>i</sub>, l<sub>i</sub> or r<sub>i</sub> are the coefficients of the constraints, the x<sub>i</sub>\n  * are the coordinates of the current point and v is the value of the constraint.\n  * </p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class LinearConstraint implements Serializable {\n--- a/src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java\n  * The c<sub>i</sub> and d are the coefficients of the equation,\n  * the x<sub>i</sub> are the coordinates of the current point.\n  * </p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class LinearObjectiveFunction implements Serializable {\n--- a/src/main/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java\n  * the constraints, the x<sub>i</sub> are the coordinates of the current point and\n  * v is the value of the constraint.\n  * </p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface LinearOptimizer {\n--- a/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java\n /**\n  * This class represents exceptions thrown by optimizers when no solution\n  * fulfills the constraints.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class NoFeasibleSolutionException extends OptimizationException {\n--- a/src/main/java/org/apache/commons/math/optimization/linear/Relationship.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/Relationship.java\n \n /**\n  * Types of relationships between two cells in a Solver {@link LinearConstraint}.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public enum Relationship {\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n \n /**\n  * Solves a linear problem using the Two-Phase Simplex Method.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class SimplexSolver extends AbstractLinearOptimizer {\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n  * a1: Artificial variable</br>\n  * RHS: Right hand side</br>\n  * </p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n class SimplexTableau implements Serializable {\n--- a/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java\n /**\n  * This class represents exceptions thrown by optimizers when a solution\n  * escapes to infinity.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class UnboundedSolutionException extends OptimizationException {\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java\n  * Provide a default implementation for several functions useful to generic\n  * optimizers.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public abstract class AbstractUnivariateRealOptimizer\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java\n  *\n  * @param <FUNC> Type of the objective function to be optimized.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public interface BaseUnivariateRealOptimizer<FUNC extends UnivariateRealFunction>\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java\n  * This code is based on a Python implementation (from <em>SciPy</em>,\n  * module {@code optimize.py} v0.5).\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class BracketFinder {\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java\n  * #setConvergenceChecker(ConvergenceChecker) ConvergenceChecker}\n  * prior to using the optimizer.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class BrentOptimizer extends AbstractUnivariateRealOptimizer {\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n  *\n  * @param <FUNC> Type of the objective function to be optimized.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFunction>\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java\n /**\n  * Interface for univariate optimization algorithms.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public interface UnivariateRealOptimizer\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair.java\n  * point.\n  * This is a simple immutable container.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class UnivariateRealPointValuePair implements Serializable {\n--- a/src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java\n  * supplies them.</p>\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class AbstractRandomGenerator implements RandomGenerator {\n \n--- a/src/main/java/org/apache/commons/math/random/AbstractWell.java\n+++ b/src/main/java/org/apache/commons/math/random/AbstractWell.java\n  * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n \n  */\n--- a/src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java\n \n /** Base class for random number generators that generates bits streams.\n \n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n \n  */\n--- a/src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java\n  * of the correlated vector. This class handles this situation\n  * automatically.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java\n  * generate random values \"like\" those in the input file -- i.e., the values\n  * generated will follow the distribution of the values in the file.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface EmpiricalDistribution {\n \n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n  *    entry per line.</li>\n  * </ul></p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n--- a/src/main/java/org/apache/commons/math/random/GaussianRandomGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/GaussianRandomGenerator.java\n  * This class is a gaussian normalized random generator for scalars.\n  * <p>This class is a simple wrapper around the {@link\n  * RandomGenerator#nextGaussian} method.</p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/random/JDKRandomGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/JDKRandomGenerator.java\n  * {@link RandomGenerator}.\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class JDKRandomGenerator extends Random implements RandomGenerator {\n \n--- a/src/main/java/org/apache/commons/math/random/MersenneTwister.java\n+++ b/src/main/java/org/apache/commons/math/random/MersenneTwister.java\n  * DAMAGE.</strong></td></tr>\n  * </table>\n \n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n \n  */\n--- a/src/main/java/org/apache/commons/math/random/NormalizedRandomGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/NormalizedRandomGenerator.java\n  * This interface represent a normalized random generator for\n  * scalars.\n  * Normalized generator provide null mean and unit standard deviation scalars.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public interface NormalizedRandomGenerator {\n--- a/src/main/java/org/apache/commons/math/random/RandomAdaptor.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomAdaptor.java\n  * {@link RandomGenerator}.\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class RandomAdaptor extends Random implements RandomGenerator {\n \n--- a/src/main/java/org/apache/commons/math/random/RandomData.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomData.java\n \n /**\n  * Random data generation utilities.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface RandomData {\n     /**\n--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class RandomDataImpl implements RandomData, Serializable {\n \n--- a/src/main/java/org/apache/commons/math/random/RandomGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomGenerator.java\n  * implemented by {@link AbstractRandomGenerator}.\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface RandomGenerator {\n \n--- a/src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomVectorGenerator.java\n /** This interface represents a random generator for whole vectors.\n  *\n  * @since 1.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  *\n  */\n \n--- a/src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java\n  * components. Components of generated vectors follow (independent) Gaussian\n  * distributions, with parameters supplied in the constructor.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n \n--- a/src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java\n  *\n  * @since 1.2\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public class UniformRandomGenerator implements NormalizedRandomGenerator {\n--- a/src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java\n  * Generate random vectors isotropically located on the surface of a sphere.\n  *\n  * @since 2.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public class UnitSphereRandomVectorGenerator\n--- a/src/main/java/org/apache/commons/math/random/ValueServer.java\n+++ b/src/main/java/org/apache/commons/math/random/ValueServer.java\n  *                       standard deviation = <code>sigma</code></li>\n  * <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul></p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  *\n  */\n public class ValueServer {\n--- a/src/main/java/org/apache/commons/math/random/Well1024a.java\n+++ b/src/main/java/org/apache/commons/math/random/Well1024a.java\n  * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n \n  */\n--- a/src/main/java/org/apache/commons/math/random/Well19937a.java\n+++ b/src/main/java/org/apache/commons/math/random/Well19937a.java\n  * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n \n  */\n--- a/src/main/java/org/apache/commons/math/random/Well19937c.java\n+++ b/src/main/java/org/apache/commons/math/random/Well19937c.java\n  * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n \n  */\n--- a/src/main/java/org/apache/commons/math/random/Well44497a.java\n+++ b/src/main/java/org/apache/commons/math/random/Well44497a.java\n  * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n \n  */\n--- a/src/main/java/org/apache/commons/math/random/Well44497b.java\n+++ b/src/main/java/org/apache/commons/math/random/Well44497b.java\n  * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n \n  */\n--- a/src/main/java/org/apache/commons/math/random/Well512a.java\n+++ b/src/main/java/org/apache/commons/math/random/Well512a.java\n  * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n \n  */\n--- a/src/main/java/org/apache/commons/math/special/Beta.java\n+++ b/src/main/java/org/apache/commons/math/special/Beta.java\n  * This is a utility class that provides computation methods related to the\n  * Beta family of functions.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Beta {\n     /** Maximum allowed numerical error. */\n--- a/src/main/java/org/apache/commons/math/special/Erf.java\n+++ b/src/main/java/org/apache/commons/math/special/Erf.java\n  * This is a utility class that provides computation methods related to the\n  * error functions.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Erf {\n     /**\n--- a/src/main/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/main/java/org/apache/commons/math/special/Gamma.java\n  * This is a utility class that provides computation methods related to the\n  * Gamma family of functions.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Gamma {\n     /**\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n  * The values are ordered using the default (natural order), unless a\n  * <code>Comparator</code> is supplied in the constructor.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Frequency implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/main/java/org/apache/commons/math/stat/StatUtils.java\n  * StatUtils provides static methods for computing statistics based on data\n  * stored in double[] arrays.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class StatUtils {\n \n--- a/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java\n /**\n  * Cluster holding a set of {@link Clusterable} points.\n  * @param <T> the type of points that can be clustered\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class Cluster<T extends Clusterable<T>> implements Serializable {\n--- a/src/main/java/org/apache/commons/math/stat/clustering/Clusterable.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/Clusterable.java\n /**\n  * Interface for points that can be clustered together.\n  * @param <T> the type of point that can be clustered\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface Clusterable<T> {\n--- a/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java\n \n /**\n  * A simple implementation of {@link Clusterable} for points with integer coordinates.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n  * Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.\n  * @param <T> type of the points to cluster\n  * @see <a href=\"http://en.wikipedia.org/wiki/K-means%2B%2B\">K-means++ (wikipedia)</a>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n--- a/src/main/java/org/apache/commons/math/stat/correlation/Covariance.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/Covariance.java\n  *\n  * <p>Non-bias-corrected estimates use <code>n</code> in place of <code>n - 1</code>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class Covariance {\n--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n  * where <code>E(X)</code> is the mean of <code>X</code>, <code>E(Y)</code>\n  * is the mean of the <code>Y</code> values and s(X), s(Y) are standard deviations.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class PearsonsCorrelation {\n--- a/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java\n  * The ranking algorithm can be set using a constructor argument.</p>\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public class SpearmansCorrelation {\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java\n  * <p>\n  * <strong>Note that these implementations are not synchronized.</strong></p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class AbstractStorelessUnivariateStatistic\n     extends AbstractUnivariateStatistic\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n  * Also includes a <code>test</code> method that performs generic parameter\n  * validation for the <code>evaluate</code> methods.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class AbstractUnivariateStatistic\n     implements UnivariateStatistic {\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java\n  * to avoid unnecessary computation and synchronization delays.</p>\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  *\n  */\n public class AggregateSummaryStatistics implements StatisticalSummary,\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n  * {@link SynchronizedDescriptiveStatistics} if concurrent access from multiple\n  * threads is required.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class DescriptiveStatistics implements StatisticalSummary, Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java\n  * threads is required.</p>\n  *\n  * @since 1.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MultivariateSummaryStatistics\n     implements StatisticalMultivariateSummary, Serializable {\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java\n  *  Reporting interface for basic multivariate statistics.\n  *\n  * @since 1.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface StatisticalMultivariateSummary {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java\n /**\n  *  Reporting interface for basic univariate statistics.\n  *\n-  * @version $Revision$ $Date$\n+  * @version $Id$\n  */\n public interface StatisticalSummary {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java\n /**\n  *  Value object representing the results of a univariate statistical summary.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class StatisticalSummaryValues implements Serializable,\n     StatisticalSummary {\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java\n  * computed in one pass through the data without storing the full array of\n  * sample values.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface StorelessUnivariateStatistic extends UnivariateStatistic {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n  * {@link SynchronizedSummaryStatistics} if concurrent access from multiple\n  * threads is required.\n  * </p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SummaryStatistics implements StatisticalSummary, Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java\n  * the instance nor compute another statistic.\n  *\n  * @since 1.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SynchronizedDescriptiveStatistics extends DescriptiveStatistics {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java\n  * thread is computing a statistic from the instance, no other thread can modify\n  * the instance nor compute another statistic.\n  * @since 1.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SynchronizedMultivariateSummaryStatistics\n     extends MultivariateSummaryStatistics {\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n  * the instance nor compute another statistic.\n  *\n  * @since 1.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SynchronizedSummaryStatistics extends SummaryStatistics {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java\n /**\n  * Base interface implemented by all statistics.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface UnivariateStatistic {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java\n  * Weighted evaluation for statistics.\n  *\n  * @since 2.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface WeightedEvaluation {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class FirstMoment extends AbstractStorelessUnivariateStatistic\n     implements Serializable {\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally. </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class FourthMoment extends ThirdMoment implements Serializable{\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class GeometricMean extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Kurtosis extends AbstractStorelessUnivariateStatistic  implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Mean extends AbstractStorelessUnivariateStatistic\n     implements Serializable, WeightedEvaluation {\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SecondMoment extends FirstMoment implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java\n  * more of these threads invoke property setters, external synchronization must\n  * be provided to ensure correct results.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.1\n  */\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally. </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Skewness extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class StandardDeviation extends AbstractStorelessUnivariateStatistic\n     implements Serializable {\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ThirdMoment extends SecondMoment implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable, WeightedEvaluation {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n /**\n  * Returns the covariance matrix of the available vectors.\n  * @since 1.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class VectorialCovariance implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java\n /**\n  * Returns the arithmetic mean of the available vectors.\n  * @since 1.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class VectorialMean implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Median extends Percentile implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Min extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Product extends AbstractStorelessUnivariateStatistic implements Serializable, WeightedEvaluation {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n  * one of the threads invokes the <code>increment()</code> or\n  * <code>clear()</code> method, it must be synchronized externally.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SumOfSquares extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n  * <p>This interface handles only known distributions. If the distribution is\n  * unknown and should be provided by a sample, then the {@link UnknownDistributionChiSquareTest\n  * UnknownDistributionChiSquareTest} extended interface should be used instead.</p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface ChiSquareTest {\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n  * Implements Chi-Square test statistics defined in the\n  * {@link UnknownDistributionChiSquareTest} interface.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java\n /**\n  * An interface for Mann-Whitney U test (also called Wilcoxon rank-sum test).\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface MannWhitneyUTest {\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java\n  * An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum\n  * test).\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MannWhitneyUTestImpl implements MannWhitneyUTest {\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java\n  * </p>\n  *\n  * @since 1.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface OneWayAnova {\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java\n  * </pre>\n  *\n  * @since 1.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class OneWayAnovaImpl implements OneWayAnova  {\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/TTest.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/TTest.java\n  * {@link StatisticalSummary} instances.</p>\n  *\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface TTest {\n     /**\n--- a/src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java\n  * Uses commons-math {@link org.apache.commons.math.distribution.TDistributionImpl}\n  * implementation to estimate exact p-values.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TTestImpl implements TTest  {\n     /**\n--- a/src/main/java/org/apache/commons/math/stat/inference/TestUtils.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/TestUtils.java\n  * perform inference tests.\n  *\n  * @since 1.1\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TestUtils  {\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java\n  * <p>Two samples tests are used when the distribution is unknown <i>a priori</i>\n  * but provided by one sample. We compare the second sample against the first.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public interface UnknownDistributionChiSquareTest extends ChiSquareTest {\n--- a/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java\n /**\n  * An interface for Wilcoxon signed-rank test.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface WilcoxonSignedRankTest {\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java\n /**\n  * An implementation of the Wilcoxon signed-rank test.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class WilcoxonSignedRankTestImpl implements WilcoxonSignedRankTest {\n \n--- a/src/main/java/org/apache/commons/math/stat/ranking/NaNStrategy.java\n+++ b/src/main/java/org/apache/commons/math/stat/ranking/NaNStrategy.java\n  * </ul>\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public enum NaNStrategy {\n \n--- a/src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java\n+++ b/src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java\n  * <td>(6, 5, 7, 8, 5, 9, 2, 2, 5)</td></tr></table></p>\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NaturalRanking implements RankingAlgorithm {\n \n--- a/src/main/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java\n+++ b/src/main/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java\n  * Interface representing a rank transformation.\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface RankingAlgorithm {\n     /**\n--- a/src/main/java/org/apache/commons/math/stat/ranking/TiesStrategy.java\n+++ b/src/main/java/org/apache/commons/math/stat/ranking/TiesStrategy.java\n  * </ul>\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public enum TiesStrategy {\n \n--- a/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n \n /**\n  * Abstract base class for implementations of MultipleLinearRegression.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public abstract class AbstractMultipleLinearRegression implements\n--- a/src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n  * <pre>\n  * Var(b)=(X' Omega^-1 X)^-1\n  * </pre>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class GLSMultipleLinearRegression extends AbstractMultipleLinearRegression {\n--- a/src/main/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java\n  *\n  * The notation is quite standard in literature,\n  * cf eg <a href=\"http://www.econ.queensu.ca/ETM\">Davidson and MacKinnon, Econometrics Theory and Methods, 2004</a>.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface MultipleLinearRegression {\n--- a/src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n  *\n  * <p>Given <code>Q</code> and <code>R</code>, the last equation is solved by back-substitution.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class OLSMultipleLinearRegression extends AbstractMultipleLinearRegression {\n--- a/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n  * the necessary computations to return the requested statistic.</li>\n  * </ul></p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SimpleRegression implements Serializable {\n \n--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n  * function transformation on how this affects the sampling.</p>\n  * <p>As of version 2.0 this no longer implements Serializable</p>\n  *\n- * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n+ * @version $Id$\n  * @since 1.2\n  */\n public class FastCosineTransformer implements RealTransformer {\n--- a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n  * <i>On computing the discrete Fourier transform</i>, Mathematics of Computation,\n  * 32 (1978), 175 - 199.</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class FastFourierTransformer implements Serializable {\n--- a/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java\n  * cannot be inverted directly. Due to a scaling factor it may lead to rational results.\n  * As an example, the inverse transform of integer vector (0, 1, 0, 1) is rational\n  * vector (1/2, -1/2, 0, 0).</p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class FastHadamardTransformer implements RealTransformer {\n--- a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n  * transformation after sampling.</p>\n  * <p>As of version 2.0 this no longer implements Serializable</p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 1.2\n  */\n public class FastSineTransformer implements RealTransformer {\n--- a/src/main/java/org/apache/commons/math/transform/RealTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/RealTransformer.java\n  * interface since it produces {@link org.apache.commons.math.complex.Complex complex}\n  * results instead of real ones.\n  * </p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public interface RealTransformer  {\n--- a/src/main/java/org/apache/commons/math/util/BigReal.java\n+++ b/src/main/java/org/apache/commons/math/util/BigReal.java\n  * in order to implement the {@link FieldElement} interface.\n  * </p>\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class BigReal implements FieldElement<BigReal>, Comparable<BigReal>, Serializable {\n \n--- a/src/main/java/org/apache/commons/math/util/BigRealField.java\n+++ b/src/main/java/org/apache/commons/math/util/BigRealField.java\n  * This class is a singleton.\n  * </p>\n  * @see BigReal\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class BigRealField implements Field<BigReal>, Serializable  {\n--- a/src/main/java/org/apache/commons/math/util/CompositeFormat.java\n+++ b/src/main/java/org/apache/commons/math/util/CompositeFormat.java\n /**\n  * Base class for formatters of composite objects (complex numbers, vectors ...).\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class CompositeFormat {\n     /** Serializable version identifier. */\n--- a/src/main/java/org/apache/commons/math/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math/util/ContinuedFraction.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class ContinuedFraction {\n     /** Maximum allowed numerical error. */\n--- a/src/main/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/main/java/org/apache/commons/math/util/DefaultTransformer.java\n  * into a primitive double or to turn a String representation of a Number into\n  * a double.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class DefaultTransformer implements NumberTransformer, Serializable {\n \n--- a/src/main/java/org/apache/commons/math/util/DoubleArray.java\n+++ b/src/main/java/org/apache/commons/math/util/DoubleArray.java\n  * array implementations to support various storage mechanisms\n  * such as automatic expansion, contraction, and array \"rolling\".\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public interface DoubleArray {\n \n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n  * <li>{@link #nextUp(float)}</li>\n  * <li>{@link #scalb(float, int)}</li>\n  * </ul>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class FastMath {\n--- a/src/main/java/org/apache/commons/math/util/Incrementor.java\n+++ b/src/main/java/org/apache/commons/math/util/Incrementor.java\n  * Utility that increments a counter until a maximum is reached, at which\n  * point it will throw an exception.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Incrementor {\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n \n /**\n  * Some useful additions to the built-in functions in {@link Math}.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class MathUtils {\n \n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n  *  <li>...</li>\n  *  <li>(1, 3, 2) corresponds to 23</li>\n  * </ul>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.2\n  */\n public class MultidimensionalCounter implements Iterable<Integer> {\n--- a/src/main/java/org/apache/commons/math/util/NumberTransformer.java\n+++ b/src/main/java/org/apache/commons/math/util/NumberTransformer.java\n \n /**\n  * Subclasses implementing this interface can transform Objects to doubles.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  *\n  * No longer extends Serializable since 2.0\n  *\n--- a/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\n+++ b/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java\n  * {@link #iterator()} are fail-fast: they throw a\n  * <code>ConcurrentModificationException</code> when they detect the map has been\n  * modified during iteration.</p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class OpenIntToDoubleHashMap implements Serializable {\n--- a/src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java\n+++ b/src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java\n  * <code>ConcurrentModificationException</code> when they detect the map has been\n  * modified during iteration.</p>\n  * @param <T> the type of the field elements\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 2.0\n  */\n public class OpenIntToFieldHashMap<T extends FieldElement<T>> implements Serializable {\n--- a/src/main/java/org/apache/commons/math/util/Pair.java\n+++ b/src/main/java/org/apache/commons/math/util/Pair.java\n  * @param <K> Key type.\n  * @param <V> Value type.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  * @since 3.0\n  */\n public class Pair<K, V> {\n--- a/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java\n  * properties enforce this requirement, throwing IllegalArgumentException if it\n  * is violated.\n  * </p>\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ResizableDoubleArray implements DoubleArray, Serializable {\n \n--- a/src/main/java/org/apache/commons/math/util/TransformerMap.java\n+++ b/src/main/java/org/apache/commons/math/util/TransformerMap.java\n  * It provides a means to set NumberTransformers that will be selected\n  * based on the Class of the object handed to the Maps\n  * <code>double transform(Object o)</code> method.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TransformerMap implements NumberTransformer, Serializable {\n \n--- a/src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java\n import org.junit.Test;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ConvergenceExceptionTest {\n \n--- a/src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java\n import org.junit.Test;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MathConfigurationExceptionTest {\n \n--- a/src/test/java/org/apache/commons/math/MathExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/MathExceptionTest.java\n import org.junit.Test;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MathExceptionTest {\n \n--- a/src/test/java/org/apache/commons/math/RetryRunner.java\n+++ b/src/test/java/org/apache/commons/math/RetryRunner.java\n \n /**\n  * A test runner that retries tests when assertions fail.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class RetryRunner extends BlockJUnit4ClassRunner {\n     /**\n--- a/src/test/java/org/apache/commons/math/TestUtils.java\n+++ b/src/test/java/org/apache/commons/math/TestUtils.java\n import org.junit.Assert;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TestUtils {\n     /**\n--- a/src/test/java/org/apache/commons/math/analysis/Expm1Function.java\n+++ b/src/test/java/org/apache/commons/math/analysis/Expm1Function.java\n /**\n  * Auxillary class for testing purposes.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class Expm1Function implements DifferentiableUnivariateRealFunction {\n \n--- a/src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java\n+++ b/src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java\n /**\n  * Wrapper class for counting functions calls.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MonitoredFunction implements UnivariateRealFunction {\n \n--- a/src/test/java/org/apache/commons/math/analysis/QuinticFunction.java\n+++ b/src/test/java/org/apache/commons/math/analysis/QuinticFunction.java\n /**\n  * Auxiliary class for testing solvers.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class QuinticFunction implements DifferentiableUnivariateRealFunction {\n \n--- a/src/test/java/org/apache/commons/math/analysis/SinFunction.java\n+++ b/src/test/java/org/apache/commons/math/analysis/SinFunction.java\n  * which means linear approximation (Regula Falsi) will converge\n  * quadratically.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SinFunction implements DifferentiableUnivariateRealFunction {\n \n--- a/src/test/java/org/apache/commons/math/analysis/SincFunction.java\n+++ b/src/test/java/org/apache/commons/math/analysis/SincFunction.java\n /**\n  * Auxiliary class for testing optimizers.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SincFunction implements DifferentiableUnivariateRealFunction {\n     private static final double EPS = 1e-12;\n--- a/src/test/java/org/apache/commons/math/analysis/SumSincFunction.java\n+++ b/src/test/java/org/apache/commons/math/analysis/SumSincFunction.java\n /**\n  * Auxiliary class for testing optimizers.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SumSincFunction implements DifferentiableMultivariateRealFunction {\n     private static final DifferentiableUnivariateRealFunction sinc = new SincFunction();\n--- a/src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java\n  * show that for a default relative accuracy of 1E-6, it generally takes\n  * takes less than 5 iterations for the integral to converge.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class RombergIntegratorTest {\n \n--- a/src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java\n  * Test runs show that for a default relative accuracy of 1E-6, it\n  * generally takes 5 to 10 iterations for the integral to converge.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class SimpsonIntegratorTest {\n \n--- a/src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java\n  * Test runs show that for a default relative accuracy of 1E-6, it\n  * generally takes 10 to 15 iterations for the integral to converge.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class TrapezoidIntegratorTest {\n \n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java\n /**\n  * Test case for the bicubic function.\n  * \n- * @version $Revision: 821626 $ $Date: 2009-10-04 23:57:30 +0200 (Sun, 04 Oct 2009) $ \n+ * @version $Id$\n  */\n public final class BicubicSplineInterpolatingFunctionTest {\n     /**\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java\n /**\n  * Test case for the bicubic interpolator.\n  * \n- * @version $Revision: 821626 $ $Date: 2009-10-04 23:57:30 +0200 (Sun, 04 Oct 2009) $ \n+ * @version $Id$\n  */\n public final class BicubicSplineInterpolatorTest {\n     /**\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java\n  * it and use the absolute value upper bound for estimates. For reference,\n  * see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X, chapter 2.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class DividedDifferenceInterpolatorTest {\n \n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java\n /**\n  * Test case for the \"microsphere projection\" interpolator.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class MicrosphereInterpolatorTest {\n     /**\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java\n  * it and use the absolute value upper bound for estimates. For reference,\n  * see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X, chapter 2.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class NevilleInterpolatorTest {\n \n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java\n /**\n  * Test case for the smoothing bicubic interpolator.\n  * \n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class SmoothingPolynomialBicubicSplineInterpolatorTest {\n     /**\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java\n /**\n  * Test the SplineInterpolator.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SplineInterpolatorTest {\n \n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java\n /**\n  * Test case for the bicubic function.\n  * \n- * @version $Revision: 821626 $ $Date: 2009-10-04 23:57:30 +0200 (Sun, 04 Oct 2009) $ \n+ * @version $Id$\n  */\n public final class TricubicSplineInterpolatingFunctionTest {\n     /**\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java\n /**\n  * Test case for the tricubic interpolator.\n  * \n- * @version $Revision$ $Date$ \n+ * @version $Id$\n  */\n public final class TricubicSplineInterpolatorTest {\n     /**\n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java\n  * give us the exact same polynomial as result. Thus we can use a very\n  * small tolerance to account only for round-off errors.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class PolynomialFunctionLagrangeFormTest {\n \n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java\n  * <p>\n  * The small tolerance number is used only to account for round-off errors.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class PolynomialFunctionNewtonFormTest {\n \n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java\n /**\n  * Tests the PolynomialFunction implementation of a UnivariateRealFunction.\n  *\n- * @version $Revision$\n+ * @version $Id$\n  */\n public final class PolynomialFunctionTest {\n     /** Error tolerance for tests */\n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java\n /**\n  * Tests the PolynomialSplineFunction implementation.\n  *\n- * @version $Revision$\n+ * @version $Id$\n  */\n public class PolynomialSplineFunctionTest {\n \n--- a/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java\n /**\n  * Tests the PolynomialsUtils class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class PolynomialsUtilsTest {\n \n--- a/src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java\n import org.junit.Test;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class BisectionSolverTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java\n  * default absolute accuracy of 10E-8 for sinus and the quintic function around\n  * zero, and 5..10 iterations for the other zeros.\n  *\n- * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n+ * @version $Id$\n  */\n public final class BrentSolverTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java\n  * less than 5 iterations to find one root, provided solveAll() is not\n  * invoked, and 15 to 20 iterations to find all roots for quintic function.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class LaguerreSolverTest {\n     /**\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java\n  * Tests for the exponential function illustrate the situations where\n  * Muller solver performs poorly.\n  *\n- * @version $Revision: 1034896 $ $Date: 2010-11-13 23:27:34 +0100 (Sat, 13 Nov 2010) $\n+ * @version $Id$\n  */\n public final class MullerSolver2Test {\n     /**\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java\n  * Tests for the exponential function illustrate the situations where\n  * Muller solver performs poorly.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class MullerSolverTest {\n     /**\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java\n \n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class NewtonSolverTest {\n     /**\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java\n  * initial bracket and 5 to 10 iterations for distant initial bracket\n  * to converge.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class RiddersSolverTest {\n     /**\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java\n /**\n  * Test case for {@link SecantSolver}.\n  *\n- * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n+ * @version $Id$\n  */\n public final class SecantSolverTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java\n import org.junit.Test;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class UnivariateRealSolverUtilsTest {\n \n--- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n+++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n \n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ComplexTest {\n \n--- a/src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java\n \n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ComplexUtilsTest {\n \n--- a/src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java\n  * Test cases for BinomialDistribution. Extends IntegerDistributionAbstractTest.\n  * See class javadoc for IntegerDistributionAbstractTest for details.\n  *\n- * @version $Revision$ $Date: 2009-09-05 12:36:48 -0500 (Sat, 05 Sep\n+ * @version $Id$\n  *          2009) $\n  */\n public class BinomialDistributionTest extends IntegerDistributionAbstractTest {\n--- a/src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class CauchyDistributionTest extends ContinuousDistributionAbstractTest  {\n \n--- a/src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ChiSquareDistributionTest extends ContinuousDistributionAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n  * See {@link NormalDistributionTest} and {@link ChiSquareDistributionTest}\n  * for examples.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class ContinuousDistributionAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ExponentialDistributionTest extends ContinuousDistributionAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/distribution/FDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/FDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class FDistributionTest extends ContinuousDistributionAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class GammaDistributionTest extends ContinuousDistributionAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n  * Extends IntegerDistributionAbstractTest.  See class javadoc for\n  * IntegerDistributionAbstractTest for details.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class HypergeometricDistributionTest extends IntegerDistributionAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java\n  *  use the setXxx methods for the instance data in test cases and call the verifyXxx methods\n  *  to verify results.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class IntegerDistributionAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java\n /**\n  * Test cases for {@link KolmogorovSmirnovDistributionImpl}.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class KolmogorovSmirnovDistributionTest {\n     \n--- a/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NormalDistributionTest extends ContinuousDistributionAbstractTest  {\n \n--- a/src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java\n  * Extends IntegerDistributionAbstractTest.  See class javadoc for\n  * IntegerDistributionAbstractTest for details.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class PascalDistributionTest extends IntegerDistributionAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java\n /**\n  * <code>PoissonDistributionTest</code>\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class PoissonDistributionTest extends IntegerDistributionAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/distribution/TDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/TDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TDistributionTest extends ContinuousDistributionAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java\n  * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n  * ContinuousDistributionAbstractTest for details.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class WeibullDistributionTest extends ContinuousDistributionAbstractTest  {\n \n--- a/src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java\n  * Extends IntegerDistributionAbstractTest.  See class javadoc for\n  * IntegerDistributionAbstractTest for details.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ZipfDistributionTest extends IntegerDistributionAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/exception/DimensionMismatchExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/DimensionMismatchExceptionTest.java\n /**\n  * Test for {@link DimensionMismatchException}.\n  * \n- * @version $Revision$ $Date$ \n+ * @version $Id$\n  */\n public class DimensionMismatchExceptionTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/exception/MaxCountExceededExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/MaxCountExceededExceptionTest.java\n /**\n  * Test for {@link MaxCountExceededException}.\n  * \n- * @version $Revision$ $Date$ \n+ * @version $Id$\n  */\n public class MaxCountExceededExceptionTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java\n /**\n  * Test for {@link NonMonotonousSequenceException}.\n  * \n- * @version $Revision$ $Date$ \n+ * @version $Id$\n  */\n public class NonMonotonousSequenceExceptionTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/exception/NotPositiveExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/NotPositiveExceptionTest.java\n /**\n  * Test for {@link NotPositiveException}.\n  * \n- * @version $Revision$ $Date$ \n+ * @version $Id$\n  */\n public class NotPositiveExceptionTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/exception/NotStrictlyPositiveExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/NotStrictlyPositiveExceptionTest.java\n /**\n  * Test for {@link NotStrictlyPositiveException}.\n  * \n- * @version $Revision$ $Date$ \n+ * @version $Id$\n  */\n public class NotStrictlyPositiveExceptionTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/exception/NumberIsTooLargeExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/NumberIsTooLargeExceptionTest.java\n /**\n  * Test for {@link NumberIsTooLargeException}.\n  * \n- * @version $Revision$ $Date$ \n+ * @version $Id$\n  */\n public class NumberIsTooLargeExceptionTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/exception/NumberIsTooSmallExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/NumberIsTooSmallExceptionTest.java\n /**\n  * Test for {@link NumberIsTooSmallException}.\n  * \n- * @version $Revision$ $Date$ \n+ * @version $Id$\n  */\n public class NumberIsTooSmallExceptionTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/exception/OutOfRangeExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/OutOfRangeExceptionTest.java\n /**\n  * Test for {@link OutOfRangeException}.\n  * \n- * @version $Revision$ $Date$ \n+ * @version $Id$\n  */\n public class OutOfRangeExceptionTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/exception/util/ArgUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/util/ArgUtilsTest.java\n /**\n  * Test for {@link ArgUtils}.\n  * \n- * @version $Revision$ $Date$ \n+ * @version $Id$\n  */\n public class ArgUtilsTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/java/org/apache/commons/math/fraction/FractionTest.java\n \n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class FractionTest {\n \n--- a/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java\n /**\n  * Test cases for the {@link Array2DRowRealMatrix} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public final class Array2DRowRealMatrixTest {\n--- a/src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java\n /**\n  * Test cases for the {@link ArrayFieldVector} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ArrayFieldVectorTest {\n \n--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n /**\n  * Test cases for the {@link ArrayRealVector} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ArrayRealVectorTest {\n \n--- a/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java\n /**\n  * Test cases for the {@link BlockFieldMatrix} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public final class BlockFieldMatrixTest {\n--- a/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java\n /**\n  * Test cases for the {@link BlockRealMatrix} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public final class BlockRealMatrixTest {\n--- a/src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java\n /**\n  * Test cases for the {@link Array2DRowFieldMatrix} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public final class FieldMatrixImplTest {\n--- a/src/test/java/org/apache/commons/math/linear/MatrixDimensionMismatchExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/MatrixDimensionMismatchExceptionTest.java\n /**\n  * Test for {@link MatrixDimensionMismatchException}.\n  * \n- * @version $Revision$ $Date$ \n+ * @version $Id$\n  */\n public class MatrixDimensionMismatchExceptionTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java\n /**\n  * Test cases for the {@link MatrixUtils} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public final class MatrixUtilsTest {\n--- a/src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java\n /**\n  * Test cases for the {@link SparseFieldMatrix} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SparseFieldMatrixTest {\n     // 3 x 3 identity matrix\n--- a/src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java\n /**\n  * Test cases for the {@link SparseFieldVector} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SparseFieldVectorTest {\n \n--- a/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java\n /**\n  * Test cases for the {@link OpenMapRealMatrix} class.\n  *\n- * @version $Revision$ $Date: 2008-11-07 06:48:13 -0800 (Fri, 07 Nov\n+ * @version $Id$\n  *          2008) $\n  */\n public final class SparseRealMatrixTest {\n--- a/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n /**\n  * Test cases for the {@link OpenMapRealVector} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SparseRealVectorTest {\n \n--- a/src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java\n  * Tests {@link GaussianFitter}.\n  *\n  * @since 2.2\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class GaussianFitterTest {\n     /** Good data. */\n--- a/src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java\n import org.junit.Test;\n \n /**\n- * @version $Revision: 811685 $ $Date: 2009-09-05 19:36:48 +0200 (Sat, 05 Sep 2009) $\n+ * @version $Id$\n  */\n public final class BrentOptimizerTest {\n \n--- a/src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java\n+++ b/src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java\n /**\n  * Test cases for the AbstractRandomGenerator class\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n @RunWith(RetryRunner.class)\n--- a/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java\n /**\n  * Test cases for the EmpiricalDistribution class\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n @RunWith(RetryRunner.class)\n--- a/src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java\n+++ b/src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java\n /**\n  * Test cases for the RandomAdaptor class\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public class RandomAdaptorTest {\n--- a/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n /**\n  * Test cases for the RandomData class.\n  *\n- * @version $Revision$ $Date: 2009-04-05 11:55:59 -0500 (Sun, 05 Apr\n+ * @version $Id$\n  *          2009) $\n  */\n \n--- a/src/test/java/org/apache/commons/math/random/TestRandomGenerator.java\n+++ b/src/test/java/org/apache/commons/math/random/TestRandomGenerator.java\n  * java.util.Random instance.  Used by AbstractRandomGeneratorTest to test\n  * default implementations in AbstractRandomGenerator.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TestRandomGenerator extends AbstractRandomGenerator {\n \n--- a/src/test/java/org/apache/commons/math/random/ValueServerTest.java\n+++ b/src/test/java/org/apache/commons/math/random/ValueServerTest.java\n /**\n  * Test cases for the ValueServer class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n @RunWith(RetryRunner.class)\n--- a/src/test/java/org/apache/commons/math/special/BetaTest.java\n+++ b/src/test/java/org/apache/commons/math/special/BetaTest.java\n import org.junit.Test;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class BetaTest {\n     private void testRegularizedBeta(double expected, double x,\n--- a/src/test/java/org/apache/commons/math/special/ErfTest.java\n+++ b/src/test/java/org/apache/commons/math/special/ErfTest.java\n import org.junit.Assert;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ErfTest {\n     @Test\n--- a/src/test/java/org/apache/commons/math/special/GammaTest.java\n+++ b/src/test/java/org/apache/commons/math/special/GammaTest.java\n import org.junit.Assert;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class GammaTest {\n     private void testRegularizedGamma(double expected, double a, double x) {\n--- a/src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java\n \n /**\n  * Certified data test cases.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class CertifiedDataTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/FrequencyTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/FrequencyTest.java\n /**\n  * Test cases for the {@link Frequency} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public final class FrequencyTest {\n--- a/src/test/java/org/apache/commons/math/stat/StatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/StatUtilsTest.java\n \n /**\n  * Test cases for the {@link StatUtils} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public final class StatUtilsTest {\n--- a/src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java\n  * Test cases for Spearman's rank correlation\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SpearmansRankCorrelationTest extends PearsonsCorrelationTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java\n import org.junit.Test;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class CertifiedDataAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/data/LewTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/data/LewTest.java\n package org.apache.commons.math.stat.data;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class LewTest extends CertifiedDataAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/data/LotteryTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/data/LotteryTest.java\n package org.apache.commons.math.stat.data;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class LotteryTest extends CertifiedDataAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java\n /**\n  * Tests for AbstractUnivariateStatistic\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class AbstractUnivariateStatisticTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n /**\n  * Test cases for the DescriptiveStatistics class.\n  *\n- * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n+ * @version $Id$\n  *          2007) $\n  */\n public class DescriptiveStatisticsTest {\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java\n \n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class InteractionTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java\n import org.apache.commons.math.util.NumberTransformer;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ListUnivariateImpl extends DescriptiveStatistics implements Serializable {\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java\n /**\n  * Test cases for the {@link ListUnivariateImpl} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public final class ListUnivariateImplTest {\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java\n /**\n  * Test cases for the {@link ListUnivariateImpl} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public final class MixedListUnivariateImplTest {\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java\n /**\n  * Test cases for the {@link MultivariateSummaryStatistics} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public class MultivariateSummaryStatisticsTest {\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java\n /**\n  * Test cases for the {@link StatisticalSummaryValues} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public final class StatisticalSummaryValuesTest {\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n \n /**\n  * Test cases for {@link StorelessUnivariateStatistic} classes.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class StorelessUnivariateStatisticAbstractTest\n     extends UnivariateStatisticAbstractTest {\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n /**\n  * Test cases for the {@link SummaryStatistics} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public class SummaryStatisticsTest {\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java\n \n /**\n  * Test cases for the {@link SynchronizedDescriptiveStatisticsTest} class.\n- * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n+ * @version $Id$\n  *          2007) $\n  */\n public final class SynchronizedDescriptiveStatisticsTest extends DescriptiveStatisticsTest {\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java\n \n /**\n  * Test cases for the {@link SynchronizedMultivariateSummaryStatisticsTest} class.\n- * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n+ * @version $Id$\n  *          2007) $\n  */\n public final class SynchronizedMultivariateSummaryStatisticsTest\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java\n \n /**\n  * Test cases for the {@link SynchronizedSummaryStatisticsTest} class.\n- * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n+ * @version $Id$\n  *          2007) $\n  */\n public final class SynchronizedSummaryStatisticsTest extends SummaryStatisticsTest {\n--- a/src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class UnivariateStatisticAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java\n \n /**\n  * Test cases for the {@link FirstMoment} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class FirstMomentTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java\n \n /**\n  * Test cases for the {@link FourthMoment} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class FourthMomentTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class GeometricMeanTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class KurtosisTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MeanTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java\n \n /**\n  * Test cases for the {@link SecondMoment} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SecondMomentTest extends StorelessUnivariateStatisticAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java\n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SkewnessTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java\n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class StandardDeviationTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java\n \n /**\n  * Test cases for the {@link ThirdMoment} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ThirdMomentTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java\n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class VarianceTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MaxTest extends StorelessUnivariateStatisticAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/rank/MedianTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/rank/MedianTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MedianTest extends UnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class MinTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class PercentileTest extends UnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ProductTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java\n \n /**\n  * Test cases for the {@link UnivariateStatistic} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SumLogTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java\n /**\n  * Test cases for the {@link SumOfSquares} class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SumSqTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java\n \n /**\n  * Test cases for the {@link Sum} class.\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class SumTest extends StorelessUnivariateStatisticAbstractTest{\n \n--- a/src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java\n /**\n  * Test cases for the ChiSquareTestImpl class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public class ChiSquareTestTest {\n--- a/src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java\n /**\n  * Test cases for the ChiSquareTestImpl class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public class MannWhitneyUTestTest {\n--- a/src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java\n /**\n  * Test cases for the OneWayAnovaImpl class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public class OneWayAnovaTest {\n--- a/src/test/java/org/apache/commons/math/stat/inference/TTestTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/TTestTest.java\n /**\n  * Test cases for the TTestImpl class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TTestTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java\n /**\n  * Test cases for the TestUtils class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TestUtilsTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java\n /**\n  * Test cases for the ChiSquareTestImpl class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public class WilcoxonSignedRankTestTest {\n--- a/src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java\n  * Test cases for NaturalRanking class\n  *\n  * @since 2.0\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class NaturalRankingTest {\n \n--- a/src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n /**\n  * Test cases for the TestStatistic class.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n \n public final class SimpleRegressionTest {\n--- a/src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java\n  * FCT algorithm is exact, the small tolerance number is used only\n  * to account for round-off errors.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class FastCosineTransformerTest {\n \n--- a/src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java\n  * FFT algorithm is exact, the small tolerance number is used only\n  * to account for round-off errors.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class FastFourierTransformerTest {\n \n--- a/src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java\n  * FST algorithm is exact, the small tolerance number is used only\n  * to account for round-off errors.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public final class FastSineTransformerTest {\n \n--- a/src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java\n+++ b/src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java\n \n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ContinuedFractionTest {\n \n--- a/src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java\n import org.junit.Test;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class DefaultTransformerTest {\n     /**\n--- a/src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java\n /**\n  * This class contains test cases for the ExpandableDoubleArray.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public abstract class DoubleArrayAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n \n /**\n  * Test cases for the MathUtils class.\n- * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n+ * @version $Id$\n  *          2007) $\n  */\n public final class MathUtilsTest {\n--- a/src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java\n+++ b/src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java\n /**\n  * This class contains test cases for the ResizableDoubleArray.\n  *\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class ResizableDoubleArrayTest extends DoubleArrayAbstractTest {\n \n--- a/src/test/java/org/apache/commons/math/util/TestBean.java\n+++ b/src/test/java/org/apache/commons/math/util/TestBean.java\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TestBean {\n     private Double x = Double.valueOf(1.0);\n--- a/src/test/java/org/apache/commons/math/util/TransformerMapTest.java\n+++ b/src/test/java/org/apache/commons/math/util/TransformerMapTest.java\n \n \n /**\n- * @version $Revision$ $Date$\n+ * @version $Id$\n  */\n public class TransformerMapTest {\n     /**", "timestamp": 1307134165, "metainfo": ""}