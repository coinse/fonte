{"sha": "d02d0109a7a4405c0355d54bac5218aa057a1423", "log": "MATH-466 Fix the same problem in the 3rd class  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.random.RandomGenerator;\n import org.apache.commons.math.optimization.GoalType;\n      * Create a multi-start optimizer from a single-start optimizer.\n      *\n      * @param optimizer Single-start optimizer to wrap.\n-     * @param starts Number of starts to perform (including the\n-     * first one), multi-start is disabled if value is less than or\n-     * equal to 1.\n+     * @param starts Number of starts to perform, must be >=1. \n+     * Multi-start is disabled if {@code starts == 1}.\n      * @param generator Random generator to use for restarts.\n+     * @throws NullArgumentException if {@code optimizer} or {@code generator}\n+     * is {@code null}.\n+     * @throws NotStrictlyPositiveException if {@code starts < 1}.\n      */\n     public MultiStartUnivariateRealOptimizer(final BaseUnivariateRealOptimizer<FUNC> optimizer,\n                                              final int starts,\n                                              final RandomGenerator generator) {\n+        if (optimizer == null ||\n+                generator == null) {\n+                throw new NullArgumentException();\n+        }\n+        if (starts < 1) {\n+            throw new NotStrictlyPositiveException(starts);\n+        }\n+\n         this.optimizer = optimizer;\n         this.starts = starts;\n         this.generator = generator;\n         sortPairs(goal);\n \n         if (optima[0] == null) {\n-            throw lastException;\n+            throw lastException; // cannot be null if starts >=1\n         }\n \n         // Return the point with the best objective function value.", "timestamp": 1294422704, "metainfo": ""}