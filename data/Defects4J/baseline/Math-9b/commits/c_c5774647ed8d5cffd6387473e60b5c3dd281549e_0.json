{"sha": "c5774647ed8d5cffd6387473e60b5c3dd281549e", "log": "Missing @Override  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/RetryRunner.java\n+++ b/src/test/java/org/apache/commons/math/RetryRunner.java\n              * if one attempt succeeds, we succeed, if all attempts fail, we\n              * fail with the reason corresponding to the last attempt\n              */\n+            @Override\n             public void evaluate() throws Throwable {\n                 Throwable failureReason = null;\n \n--- a/src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java\n  */\n public final class BracketingNthOrderBrentSolverTest extends BaseSecantSolverAbstractTest {\n     /** {@inheritDoc} */\n+    @Override\n     protected UnivariateRealSolver getSolver() {\n         return new BracketingNthOrderBrentSolver();\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected int[] getQuinticEvalCounts() {\n         return new int[] {1, 3, 8, 1, 9, 4, 8, 1, 12, 1, 14};\n     }\n         // the reference roots have been computed by the Dfp solver to more than\n         // 80 digits and checked with emacs (only the first 20 digits are reproduced here)\n         compare(new TestFunction(0.0, -2, 2) {\n+            @Override\n             public double value(double x)      { return FastMath.sin(x) - 0.5 * x; }\n+            @Override\n             public double derivative(double x) { return FastMath.cos(x) - 0.5; }\n         });\n         compare(new TestFunction(6.3087771299726890947, -5, 10) {\n+            @Override\n             public double value(double x)      { return FastMath.pow(x, 5) + x - 10000; }\n+            @Override\n             public double derivative(double x) { return 5 * FastMath.pow(x, 4) + 1; }\n         });\n         compare(new TestFunction(9.6335955628326951924, 0.001, 10) {\n+            @Override\n             public double value(double x)      { return FastMath.sqrt(x) - 1 / x - 3; }\n+            @Override\n             public double derivative(double x) { return 0.5 / FastMath.sqrt(x) + 1 / (x * x); }\n         });\n         compare(new TestFunction(2.8424389537844470678, -5, 5) {\n+            @Override\n             public double value(double x)      { return FastMath.exp(x) + x - 20; }\n+            @Override\n             public double derivative(double x) { return FastMath.exp(x) + 1; }\n         });\n         compare(new TestFunction(8.3094326942315717953, 0.001, 10) {\n+            @Override\n             public double value(double x)      { return FastMath.log(x) + FastMath.sqrt(x) - 5; }\n+            @Override\n             public double derivative(double x) { return 1 / x + 0.5 / FastMath.sqrt(x); }\n         });\n         compare(new TestFunction(1.4655712318767680266, -0.5, 1.5) {\n+            @Override\n             public double value(double x)      { return (x - 1) * x * x - 1; }\n+            @Override\n             public double derivative(double x) { return (3 * x - 2) * x; }\n         });\n \n--- a/src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/IllinoisSolverTest.java\n  */\n public final class IllinoisSolverTest extends BaseSecantSolverAbstractTest {\n     /** {@inheritDoc} */\n+    @Override\n     protected UnivariateRealSolver getSolver() {\n         return new IllinoisSolver();\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected int[] getQuinticEvalCounts() {\n         return new int[] {3, 7, 9, 10, 10, 10, 12, 12, 14, 15, 20};\n     }\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/PegasusSolverTest.java\n  */\n public final class PegasusSolverTest extends BaseSecantSolverAbstractTest {\n     /** {@inheritDoc} */\n+    @Override\n     protected UnivariateRealSolver getSolver() {\n         return new PegasusSolver();\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected int[] getQuinticEvalCounts() {\n         return new int[] {3, 7, 9, 8, 9, 8, 10, 10, 12, 16, 18};\n     }\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java\n  */\n public final class RegulaFalsiSolverTest extends BaseSecantSolverAbstractTest {\n     /** {@inheritDoc} */\n+    @Override\n     protected UnivariateRealSolver getSolver() {\n         return new RegulaFalsiSolver();\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected int[] getQuinticEvalCounts() {\n         // While the Regula Falsi method guarantees convergence, convergence\n         // may be extremely slow. The last test case does not converge within\n--- a/src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java\n  */\n public final class SecantSolverTest extends BaseSecantSolverAbstractTest {\n     /** {@inheritDoc} */\n+    @Override\n     protected UnivariateRealSolver getSolver() {\n         return new SecantSolver();\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     protected int[] getQuinticEvalCounts() {\n         // As the Secant method does not maintain a bracketed solution,\n         // convergence is not guaranteed. Two test cases are disabled (-1) due\n--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n             return new UnsupportedOperationException(\"Not supported, unneeded for test purposes\");\n         }\n \n+        @Override\n         public RealVector map(UnivariateRealFunction function) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector mapToSelf(UnivariateRealFunction function) {\n             throw unsupported();\n         }\n \n+        @Override\n         public Iterator<Entry> iterator() {\n             return new Iterator<Entry>() {\n                 int i = 0;\n             };\n         }\n \n+        @Override\n         public Iterator<Entry> sparseIterator() {\n             return iterator();\n         }\n \n+        @Override\n         public RealVector copy() {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector add(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector subtract(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector mapAdd(double d) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector mapAddToSelf(double d) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector mapSubtract(double d) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector mapSubtractToSelf(double d) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector mapMultiply(double d) {\n             double[] out = new double[data.length];\n             for (int i = 0; i < data.length; i++) {\n             return new ArrayRealVector(out);\n         }\n \n+        @Override\n         public RealVector mapMultiplyToSelf(double d) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector mapDivide(double d) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector mapDivideToSelf(double d) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector ebeMultiply(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector ebeDivide(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public double dotProduct(RealVector v) {\n             double dot = 0;\n             for (int i = 0; i < data.length; i++) {\n             return dot;\n         }\n \n+        @Override\n         public double cosine(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public double getNorm() {\n             throw unsupported();\n         }\n \n+        @Override\n         public double getL1Norm() {\n             throw unsupported();\n         }\n \n+        @Override\n         public double getLInfNorm() {\n             throw unsupported();\n         }\n \n+        @Override\n         public double getDistance(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public double getL1Distance(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public double getLInfDistance(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector unitVector() {\n             throw unsupported();\n         }\n \n+        @Override\n         public void unitize() {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector projection(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public RealMatrix outerProduct(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public double getEntry(int index) {\n             return data[index];\n         }\n \n+        @Override\n         public int getDimension() {\n             return data.length;\n         }\n \n+        @Override\n         public RealVector append(RealVector v) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector append(double d) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector getSubVector(int index, int n) {\n             throw unsupported();\n         }\n \n+        @Override\n         public void setEntry(int index, double value) {\n             throw unsupported();\n         }\n \n+        @Override\n         public void setSubVector(int index, RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public void set(double value) {\n             throw unsupported();\n         }\n \n+        @Override\n         public double[] toArray() {\n             return data.clone();\n         }\n \n+        @Override\n         public boolean isNaN() {\n             throw unsupported();\n         }\n \n+        @Override\n         public boolean isInfinite() {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector combine(double a, double b, RealVector y) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector combineToSelf(double a, double b, RealVector y) {\n             throw unsupported();\n         }\n--- a/src/test/java/org/apache/commons/math/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/RealVectorTest.java\n             return this;\n         }\n \n+        @Override\n         public RealVector ebeMultiply(RealVector v) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector ebeDivide(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector projection(RealVector v) {\n             throw unsupported();\n         }\n \n+        @Override\n         public double getEntry(int index) {\n             return values[index];\n         }\n \n+        @Override\n         public void setEntry(int index, double value) {\n             values[index] = value;\n         }\n \n+        @Override\n         public int getDimension() {\n             return values.length;\n         }\n \n+        @Override\n         public RealVector append(RealVector v) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector append(double d) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector getSubVector(int index, int n) {\n             throw unsupported();\n         }\n         public void setSubVector(int index, double[] v) {\n             throw unsupported();\n         }\n+        @Override\n         public void setSubVector(int index, RealVector v) {\n             throw unsupported();\n         }\n \n+        @Override\n         public boolean isNaN() {\n             throw unsupported();\n         }\n \n+        @Override\n         public boolean isInfinite() {\n             throw unsupported();\n         }\n--- a/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector ebeMultiply(RealVector v) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector ebeDivide(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector projection(RealVector v) {\n             throw unsupported();\n         }\n             throw unsupported();\n         }\n \n+        @Override\n         public double getEntry(int index) {\n             return data[index];\n         }\n \n+        @Override\n         public int getDimension() {\n             return data.length;\n         }\n \n+        @Override\n         public RealVector append(RealVector v) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector append(double d) {\n             throw unsupported();\n         }\n \n+        @Override\n         public RealVector getSubVector(int index, int n) {\n             throw unsupported();\n         }\n \n+        @Override\n         public void setEntry(int index, double value) {\n             data[index] = value;\n         }\n             return data.clone();\n         }\n \n+        @Override\n         public boolean isNaN() {\n             throw unsupported();\n         }\n \n+        @Override\n         public boolean isInfinite() {\n             throw unsupported();\n         }\n--- a/src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java\n+++ b/src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java\n         super();\n     }\n     \n+    @Override\n     protected RandomGenerator makeGenerator() {\n         RandomGenerator generator = new TestRandomGenerator();\n         generator.setSeed(1001);\n--- a/src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java\n+++ b/src/test/java/org/apache/commons/math/random/BitsStreamGeneratorTest.java\n         super();\n     }\n     \n+    @Override\n     protected RandomGenerator makeGenerator() {\n         RandomGenerator generator = new TestBitStreamGenerator();\n         generator.setSeed(1000);\n--- a/src/test/java/org/apache/commons/math/util/FastMathTestPerformance.java\n+++ b/src/test/java/org/apache/commons/math/util/FastMathTestPerformance.java\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.log(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.log(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.log(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.log10(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.log10(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.log10(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.log1p(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.log1p(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.log1p(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.pow(x, y);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.pow(x, y);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.pow(x, y);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.exp(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.exp(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.exp(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.sin(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.sin(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.sin(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.asin(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.asin(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.asin(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.cos(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.cos(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.cos(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.acos(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.acos(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.acos(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.tan(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.tan(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.tan(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.atan(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.atan(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.atan(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.atan2(x, y);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.atan2(x, y);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.atan2(x, y);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.hypot(x, y);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.hypot(x, y);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.hypot(x, y);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.cbrt(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.cbrt(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.cbrt(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.sqrt(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.sqrt(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.sqrt(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.cosh(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.cosh(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.cosh(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.sinh(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.sinh(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.sinh(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.tanh(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.tanh(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.tanh(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.expm1(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.expm1(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.expm1(x);\n                                         }\n                                     numStat,\n                                     false,\n                                     new PerfTestUtils.RunTest(SM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return StrictMath.abs(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(M) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return Math.abs(x);\n                                         }\n                                     },\n                                     new PerfTestUtils.RunTest(FM) {\n+                                        @Override\n                                         public Double call() throws Exception {\n                                             return FastMath.abs(x);\n                                         }", "timestamp": 1320400107, "metainfo": ""}