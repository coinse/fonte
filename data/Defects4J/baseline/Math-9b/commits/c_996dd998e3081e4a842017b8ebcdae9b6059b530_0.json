{"sha": "996dd998e3081e4a842017b8ebcdae9b6059b530", "log": "MATH-844 Generate an exception when the parameter guessing procedure cannot perform correctly (in rare ill-conditioned cases).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\n     WRONG_BLOCK_LENGTH(\"wrong array shape (block length = {0}, expected {1})\"),\n     WRONG_NUMBER_OF_POINTS(\"{0} points are required, got only {1}\"),\n     NUMBER_OF_POINTS(\"number of points ({0})\"), /* keep */\n-    ZERO_DENOMINATOR(\"denominator must be different from 0\"),\n+    ZERO_DENOMINATOR(\"denominator must be different from 0\"), /* keep */\n     ZERO_DENOMINATOR_IN_FRACTION(\"zero denominator in fraction {0}/{1}\"),\n     ZERO_FRACTION_TO_DIVIDE_BY(\"the fraction to divide by must not be zero: {0}/{1}\"),\n     ZERO_NORM(\"zero norm\"),\n--- a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java\n import org.apache.commons.math3.analysis.function.HarmonicOscillator;\n import org.apache.commons.math3.exception.ZeroException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.util.FastMath;\n \n          * has been called previously.\n          *\n          * @throws ZeroException if the abscissa range is zero.\n+         * @throws MathIllegalStateException when the guessing procedure cannot\n+         * produce sensible results.\n          */\n         private void guessAOmega() {\n             // initialize the sums for the linear model between the two integrals\n                 }\n                 a = 0.5 * (yMax - yMin);\n             } else {\n+                if (c2 == 0) {\n+                    // In some ill-conditioned cases (cf. MATH-844), the guesser\n+                    // procedure cannot produce sensible results.\n+                    throw new MathIllegalStateException(LocalizedFormats.ZERO_DENOMINATOR);\n+                }\n+\n                 a = FastMath.sqrt(c1 / c2);\n                 omega = FastMath.sqrt(c2 / c3);\n             }\n--- a/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java\n import org.apache.commons.math3.analysis.function.HarmonicOscillator;\n import org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.MathUtils;\n \n         Assert.assertEquals(w, fitted[1], 3.5e-3);\n         Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.5e-2);\n     }\n+\n+    @Test(expected=MathIllegalStateException.class)\n+    public void testMath844() {\n+        final double[] y = { 0, 1, 2, 3, 2, 1,\n+                             0, -1, -2, -3, -2, -1,\n+                             0, 1, 2, 3, 2, 1,\n+                             0, -1, -2, -3, -2, -1,\n+                             0, 1, 2, 3, 2, 1, 0 };\n+        final int len = y.length;\n+        final WeightedObservedPoint[] points = new WeightedObservedPoint[len];\n+        for (int i = 0; i < len; i++) {\n+            points[i] = new WeightedObservedPoint(1, i, y[i]);\n+        }\n+\n+        final HarmonicFitter.ParameterGuesser guesser\n+            = new HarmonicFitter.ParameterGuesser(points);\n+\n+        // The guesser fails because the function is far from an harmonic\n+        // function: It is a triangular periodic function with amplitude 3\n+        // and period 12, and all sample points are taken at integer abscissae\n+        // so function values all belong to the integer subset {-3, -2, -1, 0,\n+        // 1, 2, 3}.\n+        guesser.guess();\n+    }\n }", "timestamp": 1345149839, "metainfo": ""}