{"sha": "de3e1206da887b91e055e48b5ef13f13765f06a3", "log": "ComplexFormat now handles situations where either the real or  imaginary part is NaN, POSITIVE_INFINITY, or NEGATIVE_INFINITY. Three new tests were added to address these situations. PR: Obtained from: Submitted by:\t Reviewed by:\t CVS: ---------------------------------------------------------------------- CVS: PR: CVS:   If this change addresses a PR in the problem report tracking CVS:   database, then enter the PR number(s) here. CVS: Obtained from: CVS:   If this change has been taken from another system, such as NCSA, CVS:   then name the system in this line, otherwise delete it. CVS: Submitted by: CVS:   If this code has been contributed to Apache by someone else; i.e., CVS:   they sent us a patch or a new module, then include their name/email CVS:   address here. If this is your work then delete this line. CVS: Reviewed by: CVS:   If we are doing pre-commit code reviews and someone else has CVS:   reviewed your changes, include their name(s) here. CVS:   If you have not had it reviewed then delete this line.   ", "commit": "\n--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java\n  * can be configured.\n  *\n  * @author Apache Software Foundation\n- * @version $Revision: 1.5 $ $Date: 2004/04/27 04:37:59 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/23 00:52:32 $\n  */\n public class ComplexFormat {\n \n     /** The default complex format. */ \n \tprivate static final ComplexFormat DEFAULT = new ComplexFormat();\n \n-\t// @TODO This class only allows for max fraction digits, we might want to allow other parameters\n-    \n-    /** The notation used to signify the imaginary part of the complex number. */\n+\t/** The notation used to signify the imaginary part of the complex number. */\n     private String imaginaryCharacter = \"i\";\n \n     /** The maximum number of decimal digits in the formatted output. */ \n      */\n     public String format(Complex c) {\n \n-\t\t// @TODO What happens when either a real or imaginary is NaN, INIFINITY, etc?\n-\n         NumberFormat format = NumberFormat.getInstance();\n         format.setMaximumFractionDigits( fractionDigits );\n \n         StringBuffer buffer = new StringBuffer();\n \n-        buffer.append( format.format( c.getReal() ) );\n+\t\tif( Double.isNaN( c.getReal() ) || Double.isInfinite( c.getReal() ) ) {\n+\t\t\tbuffer.append( \"(\" + c.getReal() + \")\" );\n+\t\t} else {\n+\t\t\tbuffer.append( format.format( c.getReal() ) );\n+\t\t}\n \n         if( c.getImaginary() < 0 ) {\n             buffer.append( \" - \" );\n-            buffer.append( format.format( Math.abs(c.getImaginary()) ) );\n-            buffer.append( imaginaryCharacter );\n-        } else if( c.getImaginary() > 0 ) {\n+        } else if( c.getImaginary() > 0 || Double.isNaN( c.getImaginary() )) {\n             buffer.append( \" + \" );\n-            buffer.append( format.format( c.getImaginary() ) );\n-            buffer.append( imaginaryCharacter );\n         }            \n+\n+\t\tif( c.getImaginary() != 0 ) {\n+\t\t\tif( Double.isNaN( c.getImaginary() ) || Double.isInfinite( c.getImaginary() ) ) {\n+\t\t\t\tbuffer.append( \"(\" + Math.abs( c.getImaginary() ) + \")\" );\n+\t\t\t} else {\n+\t\t\t\tbuffer.append( format.format( Math.abs(c.getImaginary()) ) );\n+\t\t\t}\n+\t\t\tbuffer.append( imaginaryCharacter );\n+\t\t}\n         \n         return( buffer.toString() );\n \n--- a/src/test/org/apache/commons/math/complex/ComplexFormatTest.java\n+++ b/src/test/org/apache/commons/math/complex/ComplexFormatTest.java\n \t\tassertEquals( ComplexFormat.formatComplex( c ), \"232.22 - 342.33i\" );\n \t}\n \n+\tpublic void testNan() {\n+\t\tComplex c = new Complex(Double.NaN, Double.NaN);\n+\t\tassertEquals( complexFormat.format( c ), \"(NaN) + (NaN)i\" );\n+\t}\n+\n+\tpublic void testPositiveInfinity() {\n+\t\tComplex c = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n+\t\tassertEquals( complexFormat.format( c ), \"(Infinity) + (Infinity)i\" );\n+\t}\n+\n+\tpublic void testNegativeInfinity() {\n+\t\tComplex c = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n+\t\tassertEquals( complexFormat.format( c ), \"(-Infinity) - (Infinity)i\" );\n+\t}\n+\n }", "timestamp": 1085273552, "metainfo": ""}