{"sha": "138baec1c778c2ea1dc1a6efe6d5e76a3b072b1d", "log": "Fixed an overflow error in MathUtils.distance that was causing KMeansPlusPlusClusterer to fail with a NullPointerException when component distances between points exceeded Integer.MAXVALUE. JIRA: MATH-305 Reported by Erik van Ingen  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n      * @return the L<sub>2</sub> distance between the two points\n      */\n     public static double distance(int[] p1, int[] p2) {\n-      int sum = 0;\n+      double sum = 0;\n       for (int i = 0; i < p1.length; i++) {\n-          final int dp = p1[i] - p2[i];\n+          final double dp = p1[i] - p2[i];\n           sum += dp * dp;\n       }\n       return Math.sqrt(sum);\n--- a/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java\n         assertTrue(cluster3Found);\n \n     }\n+    \n+    /**\n+     * JIRA: MATH-305\n+     * \n+     * Two points, one cluster, one iteration\n+     */\n+    @Test\n+    public void testPerformClusterAnalysisDegenerate() {\n+        KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(\n+                new Random(1746432956321l));\n+        EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {\n+                new EuclideanIntegerPoint(new int[] { 1959, 325100 }),\n+                new EuclideanIntegerPoint(new int[] { 1960, 373200 }), };\n+        List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);\n+        assertEquals(1, clusters.size());\n+        assertEquals(2, (clusters.get(0).getPoints().size()));\n+        EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] { 1959, 325100 });\n+        EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] { 1960, 373200 });\n+        assertTrue(clusters.get(0).getPoints().contains(pt1));\n+        assertTrue(clusters.get(0).getPoints().contains(pt2));\n+\n+    } \n \n }", "timestamp": 1259358338, "metainfo": ""}