{"sha": "72a0f813de8f738fe2d8c339893e6e2fad3c4e3f", "log": "removed all external decomposition solvers  ", "commit": "\n--- a/src/java/org/apache/commons/math/estimation/AbstractEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/AbstractEstimator.java\n \n import org.apache.commons.math.linear.InvalidMatrixException;\n import org.apache.commons.math.linear.LUDecompositionImpl;\n-import org.apache.commons.math.linear.LUSolver;\n import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealMatrix;\n \n         try {\n             // compute the covariances matrix\n             RealMatrix inverse =\n-                new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj))).getInverse();\n+                new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();\n             return inverse.getData();\n         } catch (InvalidMatrixException ime) {\n             throw new EstimationException(\"unable to compute covariances: singular problem\",\n--- a/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java\n \n import org.apache.commons.math.linear.InvalidMatrixException;\n import org.apache.commons.math.linear.LUDecompositionImpl;\n-import org.apache.commons.math.linear.LUSolver;\n import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealVector;\n             try {\n \n                 // solve the linearized least squares problem\n-                RealVector dX = new LUSolver(new LUDecompositionImpl(a)).solve(b);\n+                RealVector dX = new LUDecompositionImpl(a).getSolver().solve(b);\n \n                 // update the estimated parameters\n                 for (int i = 0; i < parameters.length; ++i) {\n--- a/src/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n     /** Cached LU solver.\n      * @deprecated as of release 2.0, since all methods using this are deprecated\n      */\n-    private LUSolver lu;\n+    private DecompositionSolver lu;\n \n     /**\n      * Creates a matrix with no data\n     public RealMatrix inverse()\n         throws InvalidMatrixException {\n         if (lu == null) {\n-            lu = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));\n+            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();\n         }\n         return lu.getInverse();\n     }\n     @Deprecated\n     public double getDeterminant()\n         throws InvalidMatrixException {\n-        if (lu == null) {\n-            lu = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));\n-        }\n-        return lu.getDeterminant();\n+        return new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getDeterminant();\n     }\n \n     /** {@inheritDoc} */\n     @Deprecated\n     public boolean isSingular() {\n         if (lu == null) {\n-            lu = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));\n+            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();\n        }\n         return !lu.isNonSingular();\n     }\n     public double[] solve(final double[] b)\n         throws IllegalArgumentException, InvalidMatrixException {\n         if (lu == null) {\n-            lu = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));\n+            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();\n         }\n         return lu.solve(b);\n     }\n     public RealMatrix solve(final RealMatrix b)\n         throws IllegalArgumentException, InvalidMatrixException  {\n         if (lu == null) {\n-            lu = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));\n+            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();\n         }\n         return lu.solve(b);\n     }\n     public void luDecompose()\n         throws InvalidMatrixException {\n         if (lu == null) {\n-            lu = new LUSolver(new LUDecompositionImpl(this, MathUtils.SAFE_MIN));\n+            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();\n         }\n     }\n \n--- a/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java\n package org.apache.commons.math.stat.regression;\n \n import org.apache.commons.math.linear.LUDecompositionImpl;\n-import org.apache.commons.math.linear.LUSolver;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealMatrixImpl;\n \n     protected RealMatrix calculateBetaVariance() {\n         RealMatrix OI = getOmegaInverse();\n         RealMatrix XTOIX = X.transpose().multiply(OI).multiply(X);\n-        return new LUSolver(new LUDecompositionImpl(XTOIX)).getInverse();\n+        return new LUDecompositionImpl(XTOIX).getSolver().getInverse();\n     }\n \n     /**\n--- a/src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java\n         assertEquals(2, p.getRowDimension());\n         assertEquals(2, p.getColumnDimension());\n         // Invert p\n-        RealMatrix pInverse = new LUSolver(new LUDecompositionImpl(p)).getInverse(); \n+        RealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse(); \n         assertEquals(2, pInverse.getRowDimension());\n         assertEquals(2, pInverse.getColumnDimension());\n         \n         double[][] coefficientsData = {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};\n         RealMatrix coefficients = new DenseRealMatrix(coefficientsData);\n         double[] constants = {1, -2, 1};\n-        double[] solution = new LUSolver(new LUDecompositionImpl(coefficients)).solve(constants);\n+        double[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);\n         assertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);\n         assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);\n         assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);   \n--- a/src/test/org/apache/commons/math/linear/EigenSolverTest.java\n+++ b/src/test/org/apache/commons/math/linear/EigenSolverTest.java\n         Random r = new Random(9994100315209l);\n         RealMatrix m =\n             EigenDecompositionImplTest.createTestMatrix(r, new double[] { 1.0, 0.0, -1.0, -2.0, -3.0 });\n-        EigenSolver es = new EigenSolver(new EigenDecompositionImpl(m, MathUtils.SAFE_MIN));\n+        DecompositionSolver es = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN).getSolver();\n         assertFalse(es.isNonSingular());\n         try {\n             es.getInverse();\n         Random r = new Random(9994100315209l);\n         RealMatrix m =\n             EigenDecompositionImplTest.createTestMatrix(r, new double[] { 1.0, 0.5, -1.0, -2.0, -3.0 });\n-        EigenSolver es = new EigenSolver(new EigenDecompositionImpl(m, MathUtils.SAFE_MIN));\n+        DecompositionSolver es = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN).getSolver();\n         assertTrue(es.isNonSingular());\n         RealMatrix inverse = es.getInverse();\n         RealMatrix error =\n \n     /** test solve dimension errors */\n     public void testSolveDimensionErrors() {\n-        EigenSolver es = new EigenSolver(new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN));\n+        DecompositionSolver es = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN).getSolver();\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);\n         try {\n             es.solve(b);\n                 { 40,  2, 21,  9, 51, 19 },\n                 { 14, -1,  8,  0, 19, 14 }\n         });\n-        EigenSolver  es = new EigenSolver(new EigenDecompositionImpl(m, MathUtils.SAFE_MIN));\n-        assertEquals(184041, es.getDeterminant(), 2.0e-8);\n+        DecompositionSolver es = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN).getSolver();\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {\n                 { 1561, 269, 188 },\n                 {   69, -21,  70 },\n--- a/src/test/org/apache/commons/math/linear/LUSolverTest.java\n+++ b/src/test/org/apache/commons/math/linear/LUSolverTest.java\n                                                        { 2.0, 5.0, 3.0},\n                                                        { 4.000001, 9.0, 9.0}\n                                                      });\n-        assertFalse(new LUSolver(new LUDecompositionImpl(matrix, 1.0e-5)).isNonSingular());\n-        assertTrue(new LUSolver(new LUDecompositionImpl(matrix, 1.0e-10)).isNonSingular());\n+        assertFalse(new LUDecompositionImpl(matrix, 1.0e-5).getSolver().isNonSingular());\n+        assertTrue(new LUDecompositionImpl(matrix, 1.0e-10).getSolver().isNonSingular());\n     }\n \n     /** test singular */\n     public void testSingular() {\n-        LUSolver lu =\n-            new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)));\n-        assertTrue(lu.isNonSingular());\n-        lu = new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)));\n-        assertFalse(lu.isNonSingular());\n-        lu = new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(bigSingular)));\n-        assertFalse(lu.isNonSingular());\n+        DecompositionSolver solver =\n+            new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();\n+        assertTrue(solver.isNonSingular());\n+        solver = new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)).getSolver();\n+        assertFalse(solver.isNonSingular());\n+        solver = new LUDecompositionImpl(MatrixUtils.createRealMatrix(bigSingular)).getSolver();\n+        assertFalse(solver.isNonSingular());\n     }\n \n     /** test solve dimension errors */\n     public void testSolveDimensionErrors() {\n-        LUSolver solver =\n-            new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)));\n+        DecompositionSolver solver =\n+            new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);\n         try {\n             solver.solve(b);\n \n     /** test solve singularity errors */\n     public void testSolveSingularityErrors() {\n-        LUSolver solver =\n-            new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)));\n+        DecompositionSolver solver =\n+            new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)).getSolver();\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);\n         try {\n             solver.solve(b);\n \n     /** test solve */\n     public void testSolve() {\n-        LUSolver solver =\n-            new LUSolver(new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)));\n+        DecompositionSolver solver =\n+            new LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {\n                 { 1, 0 }, { 2, -5 }, { 3, 1 }\n         });\n     }\n \n     private double getDeterminant(RealMatrix m) {\n-        return new LUSolver(new LUDecompositionImpl(m)).getDeterminant();\n+        return new LUDecompositionImpl(m).getDeterminant();\n     }\n \n }\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n     /** test transpose */\n     public void testTranspose() {\n         RealMatrix m = new RealMatrixImpl(testData); \n-        RealMatrix mIT = new LUSolver(new LUDecompositionImpl(m)).getInverse().transpose();\n-        RealMatrix mTI = new LUSolver(new LUDecompositionImpl(m.transpose())).getInverse();\n+        RealMatrix mIT = new LUDecompositionImpl(m).getSolver().getInverse().transpose();\n+        RealMatrix mTI = new LUDecompositionImpl(m.transpose()).getSolver().getInverse();\n         assertClose(\"inverse-transpose\", mIT, mTI, normTolerance);\n         m = new RealMatrixImpl(testData2);\n         RealMatrix mt = new RealMatrixImpl(testData2T);\n         assertEquals(2, p.getRowDimension());\n         assertEquals(2, p.getColumnDimension());\n         // Invert p\n-        RealMatrix pInverse = new LUSolver(new LUDecompositionImpl(p)).getInverse(); \n+        RealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse(); \n         assertEquals(2, pInverse.getRowDimension());\n         assertEquals(2, pInverse.getColumnDimension());\n         \n         double[][] coefficientsData = {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};\n         RealMatrix coefficients = new RealMatrixImpl(coefficientsData);\n         double[] constants = {1, -2, 1};\n-        double[] solution = new LUSolver(new LUDecompositionImpl(coefficients)).solve(constants);\n+        double[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);\n         assertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);\n         assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);\n         assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);   \n--- a/src/test/org/apache/commons/math/linear/SingularValueSolverTest.java\n+++ b/src/test/org/apache/commons/math/linear/SingularValueSolverTest.java\n \n     /** test solve dimension errors */\n     public void testSolveDimensionErrors() {\n-        SingularValueSolver solver =\n-            new SingularValueSolver(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)));\n+        DecompositionSolver solver =\n+            new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)).getSolver();\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[3][2]);\n         try {\n             solver.solve(b);\n                                    { 1.0, 0.0 },\n                                    { 0.0, 0.0 }\n                                });\n-        SingularValueSolver solver = new SingularValueSolver(new SingularValueDecompositionImpl(m));\n+        DecompositionSolver solver = new SingularValueDecompositionImpl(m).getSolver();\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);\n         try {\n             solver.solve(b);\n \n     /** test solve */\n     public void testSolve() {\n-        SingularValueSolver solver =\n-            new SingularValueSolver(new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)));\n+        DecompositionSolver solver =\n+            new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testSquare)).getSolver();\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {\n                 { 1, 2, 3 }, { 0, -5, 1 }\n         });\n--- a/src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java\n     public void testTranspose() {\n         \n         RealMatrix m = createSparseMatrix(testData); \n-        RealMatrix mIT = new LUSolver(new LUDecompositionImpl(m)).getInverse().transpose();\n-        RealMatrix mTI = new LUSolver(new LUDecompositionImpl(m.transpose())).getInverse();\n+        RealMatrix mIT = new LUDecompositionImpl(m).getSolver().getInverse().transpose();\n+        RealMatrix mTI = new LUDecompositionImpl(m.transpose()).getSolver().getInverse();\n         assertClose(\"inverse-transpose\", mIT, mTI, normTolerance);\n         m = createSparseMatrix(testData2);\n         RealMatrix mt = createSparseMatrix(testData2T);\n         assertEquals(2, p.getRowDimension());\n         assertEquals(2, p.getColumnDimension());\n         // Invert p\n-        RealMatrix pInverse = new LUSolver(new LUDecompositionImpl(p)).getInverse(); \n+        RealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse(); \n         assertEquals(2, pInverse.getRowDimension());\n         assertEquals(2, pInverse.getColumnDimension());\n \n                 { 4, -3, -5 } };\n         RealMatrix coefficients = createSparseMatrix(coefficientsData);\n         double[] constants = { 1, -2, 1 };\n-        double[] solution = new LUSolver(new LUDecompositionImpl(coefficients)).solve(constants);\n+        double[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);\n         assertEquals(2 * solution[0] + 3 * solution[1] - 2 * solution[2],\n                 constants[0], 1E-12);\n         assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2],", "timestamp": 1231095734, "metainfo": ""}