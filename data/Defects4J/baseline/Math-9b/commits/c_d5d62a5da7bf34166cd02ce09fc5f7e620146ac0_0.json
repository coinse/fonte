{"sha": "d5d62a5da7bf34166cd02ce09fc5f7e620146ac0", "log": "Name change: \"NonMonotonousSequenceException\" to \"NonMonotonicSequenceException\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/function/StepFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/function/StepFunction.java\n      *\n      * @param x Abscissae.\n      * @param y Ordinates.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if the {@code x} array is not sorted in strictly increasing order.\n      * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n      * @throws NoDataException if {@code x} or {@code y} are zero-length.\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n      * every grid point.\n      * @throws DimensionMismatchException if the various arrays do not contain\n      * the expected number of elements.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if {@code x} or {@code y} are not strictly increasing.\n      * @throws NoDataException if any of the arrays has zero length.\n      */\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java\n      * if the array lengths are different.\n      * @throws org.apache.commons.math.exception.NumberIsTooSmallException\n      * if the number of points is less than 2.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if {@code x} is not sorted in strictly increasing order.\n      */\n     public PolynomialFunctionNewtonForm interpolate(double x[], double y[]) {\n      * if the array lengths are different.\n      * @throws org.apache.commons.math.exception.NumberIsTooSmallException\n      * if the number of points is less than 2.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if {@code x} is not sorted in strictly increasing order.\n      */\n     protected static double[] computeDividedDifference(final double x[], final double y[]) {\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java\n      * @return a function which interpolates the data set\n      * @throws DimensionMismatchException if {@code x} and {@code y}\n      * have different sizes.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if {@code x} is not sorted in strict increasing order.\n      * @throws NumberIsTooSmallException if the size of {@code x} is smaller\n      * than 2.\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n      * @param xval the arguments for the interpolation points\n      * @param yval the values for the interpolation points\n      * @return A cubic spline built upon a loess fit to the data at the original abscissae\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if {@code xval} not sorted in strictly increasing order.\n      * @throws DimensionMismatchException if {@code xval} and {@code yval} have\n      * different sizes.\n      * @param weights point weights: coefficients by which the robustness weight\n      * of a point is multiplied.\n      * @return the values of the loess fit at corresponding original abscissae.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if {@code xval} not sorted in strictly increasing order.\n      * @throws DimensionMismatchException if {@code xval} and {@code yval} have\n      * different sizes.\n      * @param xval the arguments for the interpolation points\n      * @param yval the values for the interpolation points\n      * @return values of the loess fit at corresponding original abscissae\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if {@code xval} not sorted in strictly increasing order.\n      * @throws DimensionMismatchException if {@code xval} and {@code yval} have\n      * different sizes.\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolator.java\n      * the array lengths are different.\n      * @throws org.apache.commons.math.exception.NumberIsTooSmallException if\n      * the number of points is less than 2.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if two abscissae have the same value.\n      */\n     public PolynomialFunctionLagrangeForm interpolate(double x[], double y[]) {\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n      * @return a function which interpolates the data set\n      * @throws DimensionMismatchException if {@code x} and {@code y}\n      * have different sizes.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if {@code x} is not sorted in strict increasing order.\n      * @throws NumberIsTooSmallException if the size of {@code x} is smaller\n      * than 3.\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n      * @param y function values at interpolating points\n      * @throws DimensionMismatchException if the array lengths are different.\n      * @throws NumberIsTooSmallException if the number of points is less than 2.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if two abscissae have the same value.\n      */\n     public PolynomialFunctionLagrangeForm(double x[], double y[]) {\n      * @return the function value.\n      * @throws DimensionMismatchException if {@code x} and {@code y} have\n      * different lengths.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if {@code x} is not sorted in strictly increasing order.\n      * @throws NumberIsTooSmallException if the size of {@code x} is less\n      * than 2.\n      * @return the function value.\n      * @throws DimensionMismatchException if {@code x} and {@code y} have\n      * different lengths.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if {@code x} is not sorted in strictly increasing order.\n      * @throws NumberIsTooSmallException if the size of {@code x} is less\n      * than 2.\n      * @return the function value.\n      * @throws DimensionMismatchException if {@code x} and {@code y} have\n      * different lengths.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if {@code x} is not sorted in strictly increasing order.\n      * @throws NumberIsTooSmallException if the size of {@code x} is less\n      * than 2.\n      * @param abort Whether to throw an exception if {@code x} is not sorted.\n      * @throws DimensionMismatchException if the array lengths are different.\n      * @throws NumberIsTooSmallException if the number of points is less than 2.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException\n      * if {@code x} is not sorted in strictly increasing order and {@code abort}\n      * is {@code true}.\n      * @return {@code false} if the {@code x} is not sorted in increasing order,\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java\n      * @throws NullArgumentException if either of the input arrays is {@code null}.\n      * @throws NumberIsTooSmallException if knots has length less than 2.\n      * @throws DimensionMismatchException if {@code polynomials.length != knots.length - 1}.\n-     * @throws org.apache.commons.math.exception.NonMonotonousSequenceException if\n+     * @throws org.apache.commons.math.exception.NonMonotonicSequenceException if\n      * the {@code knots} array is not strictly increasing.\n      *\n      */\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when the a sequence of values is not monotonically\n+ * increasing or decreasing.\n+ *\n+ * @since 2.2 (name changed to \"NonMonotonicSequenceException\" in 3.0)\n+ * @version $Id$\n+ */\n+public class NonMonotonicSequenceException extends MathIllegalNumberException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = 3596849179428944575L;\n+    /**\n+     * Direction (positive for increasing, negative for decreasing).\n+     */\n+    private final MathUtils.OrderDirection direction;\n+    /**\n+     * Whether the sequence must be strictly increasing or decreasing.\n+     */\n+    private final boolean strict;\n+    /**\n+     * Index of the wrong value.\n+     */\n+    private final int index;\n+    /**\n+     * Previous value.\n+     */\n+    private final Number previous;\n+\n+    /**\n+     * Construct the exception.\n+     * This constructor uses default values assuming that the sequence should\n+     * have been strictly increasing.\n+     *\n+     * @param wrong Value that did not match the requirements.\n+     * @param previous Previous value in the sequence.\n+     * @param index Index of the value that did not match the requirements.\n+     */\n+    public NonMonotonicSequenceException(Number wrong,\n+                                         Number previous,\n+                                         int index) {\n+        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);\n+    }\n+\n+    /**\n+     * Construct the exception.\n+     *\n+     * @param wrong Value that did not match the requirements.\n+     * @param previous Previous value in the sequence.\n+     * @param index Index of the value that did not match the requirements.\n+     * @param direction Strictly positive for a sequence required to be\n+     * increasing, negative (or zero) for a decreasing sequence.\n+     * @param strict Whether the sequence must be strictly increasing or\n+     * decreasing.\n+     */\n+    public NonMonotonicSequenceException(Number wrong,\n+                                         Number previous,\n+                                         int index,\n+                                         MathUtils.OrderDirection direction,\n+                                         boolean strict) {\n+        super(direction == MathUtils.OrderDirection.INCREASING ?\n+              (strict ?\n+               LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE :\n+               LocalizedFormats.NOT_INCREASING_SEQUENCE) :\n+              (strict ?\n+               LocalizedFormats.NOT_STRICTLY_DECREASING_SEQUENCE :\n+               LocalizedFormats.NOT_DECREASING_SEQUENCE),\n+              wrong, previous, index, index - 1);\n+\n+        this.direction = direction;\n+        this.strict = strict;\n+        this.index = index;\n+        this.previous = previous;\n+    }\n+\n+    /**\n+     * @return the order direction.\n+     **/\n+    public MathUtils.OrderDirection getDirection() {\n+        return direction;\n+    }\n+    /**\n+     * @return {@code true} is the sequence should be strictly monotonic.\n+     **/\n+    public boolean getStrict() {\n+        return strict;\n+    }\n+    /**\n+     * Get the index of the wrong value.\n+     *\n+     * @return the current index.\n+     */\n+    public int getIndex() {\n+        return index;\n+    }\n+    /**\n+     * @return the previous value.\n+     */\n+    public Number getPrevious() {\n+        return previous;\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.MathInternalError;\n-import org.apache.commons.math.exception.NonMonotonousSequenceException;\n+import org.apache.commons.math.exception.NonMonotonicSequenceException;\n import org.apache.commons.math.exception.NotFiniteNumberException;\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.NullArgumentException;\n      * @param strict Whether the order should be strict.\n      * @param abort Whether to throw an exception if the check fails.\n      * @return {@code true} if the array is sorted.\n-     * @throws NonMonotonousSequenceException if the array is not sorted\n+     * @throws NonMonotonicSequenceException if the array is not sorted\n      * and {@code abort} is {@code true}.\n      */\n     public static boolean checkOrder(double[] val, OrderDirection dir,\n \n         // Loop early exit means wrong ordering.\n         if (abort) {\n-            throw new NonMonotonousSequenceException(val[index], previous, index, dir, strict);\n+            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);\n         } else {\n             return false;\n         }\n      * @param val Values.\n      * @param dir Ordering direction.\n      * @param strict Whether the order should be strict.\n-     * @throws NonMonotonousSequenceException if the array is not sorted.\n+     * @throws NonMonotonicSequenceException if the array is not sorted.\n      * @since 2.2\n      */\n     public static void checkOrder(double[] val, OrderDirection dir,\n      * Check that the given array is sorted in strictly increasing order.\n      *\n      * @param val Values.\n-     * @throws NonMonotonousSequenceException if the array is not sorted.\n+     * @throws NonMonotonicSequenceException if the array is not sorted.\n      * @since 2.2\n      */\n     public static void checkOrder(double[] val) {\n--- a/src/test/java/org/apache/commons/math/analysis/function/StepFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/function/StepFunctionTest.java\n \n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.NonMonotonousSequenceException;\n+import org.apache.commons.math.exception.NonMonotonicSequenceException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.NoDataException;\n \n         new StepFunction(new double[] {0, 1}, new double[] {0, -1, -2});\n     }\n \n-    @Test(expected=NonMonotonousSequenceException.class)\n+    @Test(expected=NonMonotonicSequenceException.class)\n     public void testPreconditions6() {\n         new StepFunction(new double[] {1, 0, 1}, new double[] {0, -1, -2});\n     }\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.exception.NonMonotonousSequenceException;\n+import org.apache.commons.math.exception.NonMonotonicSequenceException;\n import org.apache.commons.math.analysis.Expm1Function;\n import org.apache.commons.math.analysis.SinFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n             double y[] = { 0.0, 4.0, 4.0, 2.5 };\n             UnivariateRealFunction p = interpolator.interpolate(x, y);\n             p.value(0.0);\n-            Assert.fail(\"Expecting NonMonotonousSequenceException - bad abscissas array\");\n-        } catch (NonMonotonousSequenceException ex) {\n+            Assert.fail(\"Expecting NonMonotonicSequenceException - bad abscissas array\");\n+        } catch (NonMonotonicSequenceException ex) {\n             // expected\n         }\n     }\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.exception.NonMonotonousSequenceException;\n+import org.apache.commons.math.exception.NonMonotonicSequenceException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.TestUtils;\n             double yval[] = { 0.0, 1.0, 2.0 };\n             i.interpolate(xval, yval);\n             Assert.fail(\"Failed to detect unsorted arguments.\");\n-        } catch (NonMonotonousSequenceException iae) {\n+        } catch (NonMonotonicSequenceException iae) {\n             // Expected.\n         }\n         // Not enough data to interpolate.\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NoDataException;\n-import org.apache.commons.math.exception.NonMonotonousSequenceException;\n+import org.apache.commons.math.exception.NonMonotonicSequenceException;\n import org.apache.commons.math.exception.NotFiniteNumberException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n \n         new LoessInterpolator().smooth(new double[] {}, new double[] {});\n     }\n \n-    @Test(expected=NonMonotonousSequenceException.class)\n+    @Test(expected=NonMonotonicSequenceException.class)\n     public void testNonStrictlyIncreasing1() {\n         new LoessInterpolator().smooth(new double[] {4,3,1,2}, new double[] {3,4,5,6});\n     }\n \n-    @Test(expected=NonMonotonousSequenceException.class)\n+    @Test(expected=NonMonotonicSequenceException.class)\n     public void testNonStrictlyIncreasing2() {\n         new LoessInterpolator().smooth(new double[] {1,2,2,3}, new double[] {3,4,5,6});\n     }\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.exception.NonMonotonousSequenceException;\n+import org.apache.commons.math.exception.NonMonotonicSequenceException;\n import org.apache.commons.math.analysis.Expm1Function;\n import org.apache.commons.math.analysis.SinFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n             double y[] = { 0.0, 4.0, 4.0, 2.5 };\n             UnivariateRealFunction p = interpolator.interpolate(x, y);\n             p.value(0.0);\n-            Assert.fail(\"Expecting NonMonotonousSequenceException - bad abscissas array\");\n-        } catch (NonMonotonousSequenceException ex) {\n+            Assert.fail(\"Expecting NonMonotonicSequenceException - bad abscissas array\");\n+        } catch (NonMonotonicSequenceException ex) {\n             // expected\n         }\n     }\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.exception.NonMonotonousSequenceException;\n+import org.apache.commons.math.exception.NonMonotonicSequenceException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.util.FastMath;\n             double yval[] = { 0.0, 1.0, 2.0 };\n             i.interpolate(xval, yval);\n             Assert.fail(\"Failed to detect unsorted arguments.\");\n-        } catch (NonMonotonousSequenceException iae) {\n+        } catch (NonMonotonicSequenceException iae) {\n             // Expected.\n         }\n         // Not enough data to interpolate.\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolatorTest.java\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n-import org.apache.commons.math.exception.NonMonotonousSequenceException;\n+import org.apache.commons.math.exception.NonMonotonicSequenceException;\n \n import org.junit.Assert;\n import org.junit.Test;\n         interpolator.interpolate(xval, yval);\n     }\n \n-    @Test(expected=NonMonotonousSequenceException.class)\n+    @Test(expected=NonMonotonicSequenceException.class)\n     public void testUnsortedSamples() {\n         final double[] xval = { 2, 3, 7, 4, 6 };\n         final double[] yval = { 1, 6, 5, -1, -2 };\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.util.MathUtils;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link NonMonotonicSequenceException}.\n+ * \n+ * @version $Id$\n+ */\n+public class NonMonotonicSequenceExceptionTest {\n+    @Test\n+    public void testAccessors() {\n+        NonMonotonicSequenceException e\n+            = new NonMonotonicSequenceException(0, -1, 1, MathUtils.OrderDirection.DECREASING, false);\n+        Assert.assertEquals(0, e.getArgument());\n+        Assert.assertEquals(-1, e.getPrevious());\n+        Assert.assertEquals(1, e.getIndex());\n+        Assert.assertTrue(e.getDirection() == MathUtils.OrderDirection.DECREASING);\n+        Assert.assertFalse(e.getStrict());\n+\n+        e = new NonMonotonicSequenceException(-1, 0, 1);\n+        Assert.assertEquals(-1, e.getArgument());\n+        Assert.assertEquals(0, e.getPrevious());\n+        Assert.assertEquals(1, e.getIndex());\n+        Assert.assertTrue(e.getDirection() == MathUtils.OrderDirection.INCREASING);\n+        Assert.assertTrue(e.getStrict());\n+    }\n+}\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n \n \n import org.apache.commons.math.TestUtils;\n-import org.apache.commons.math.exception.NonMonotonousSequenceException;\n+import org.apache.commons.math.exception.NonMonotonicSequenceException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.exception.NotFiniteNumberException;\n             MathUtils.checkOrder(new double[] {-15, -5.5, -1, -1, 2, 15},\n                                  MathUtils.OrderDirection.INCREASING, true);\n             Assert.fail(\"an exception should have been thrown\");\n-        } catch (NonMonotonousSequenceException e) {\n+        } catch (NonMonotonicSequenceException e) {\n             // Expected\n         }\n         try {\n             MathUtils.checkOrder(new double[] {-15, -5.5, -1, -2, 2},\n                                  MathUtils.OrderDirection.INCREASING, false);\n             Assert.fail(\"an exception should have been thrown\");\n-        } catch (NonMonotonousSequenceException e) {\n+        } catch (NonMonotonicSequenceException e) {\n             // Expected\n         }\n         try {\n             MathUtils.checkOrder(new double[] {3, 3, -5.5, -11, -27.5},\n                                  MathUtils.OrderDirection.DECREASING, true);\n             Assert.fail(\"an exception should have been thrown\");\n-        } catch (NonMonotonousSequenceException e) {\n+        } catch (NonMonotonicSequenceException e) {\n             // Expected\n         }\n         try {\n             MathUtils.checkOrder(new double[] {3, -1, 0, -5.5, -11, -27.5},\n                                  MathUtils.OrderDirection.DECREASING, false);\n             Assert.fail(\"an exception should have been thrown\");\n-        } catch (NonMonotonousSequenceException e) {\n+        } catch (NonMonotonicSequenceException e) {\n             // Expected\n         }\n     }", "timestamp": 1316783338, "metainfo": ""}