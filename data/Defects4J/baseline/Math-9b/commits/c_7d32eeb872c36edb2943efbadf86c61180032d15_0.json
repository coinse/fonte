{"sha": "7d32eeb872c36edb2943efbadf86c61180032d15", "log": "Fixed an infinite loop encountered in some backward integration cases for ODE solvers  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n             coeffs[i] = f.doubleValue();\n         }\n \n-        this.step = step;\n+        this.step = Math.abs(step);\n \n     }\n \n \n         // set up integration control objects\n         stepStart = t0;\n-        stepSize  = step;\n+        stepSize  = forward ? step : -step;\n         for (StepHandler handler : stepHandlers) {\n             handler.reset();\n         }\n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n             correctorCoeffs[i] = fCorrector.doubleValue();\n         }\n \n-        this.step = step;\n+        this.step = Math.abs(step);\n \n     }\n \n \n         // set up integration control objects\n         stepStart = t0;\n-        stepSize  = step;\n+        stepSize  = forward ? step : -step;\n         for (StepHandler handler : stepHandlers) {\n             handler.reset();\n         }\n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n \n     super(name);\n \n-    this.minStep     = minStep;\n-    this.maxStep     = maxStep;\n+    this.minStep     = Math.abs(minStep);\n+    this.maxStep     = Math.abs(maxStep);\n     this.initialStep = -1.0;\n \n     this.scalAbsoluteTolerance = scalAbsoluteTolerance;\n--- a/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n     this.a          = a;\n     this.b          = b;\n     this.prototype  = prototype;\n-    this.step       = step;\n+    this.step       = Math.abs(step);\n   }\n \n   /** {@inheritDoc} */\n \n     // set up integration control objects\n     stepStart = t0;\n-    stepSize  = step;\n+    stepSize  = forward ? step : -step;\n     for (StepHandler handler : stepHandlers) {\n         handler.reset();\n     }\n       }\n \n       // make sure step size is set to default before next step\n-      stepSize = step;\n+      stepSize = forward ? step : -step;\n \n     }\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n     assertEquals(0, handler.getMaximalTimeError(), 1.0e-14);\n \n   }\n-  \n+\n+  public void testBackward()\n+      throws DerivativeException, IntegratorException {\n+\n+      TestProblem5 pb = new TestProblem5();\n+      double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n+\n+      FirstOrderIntegrator integ = new AdamsBashforthIntegrator(5, step);\n+      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n+      integ.addStepHandler(handler);\n+      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                      pb.getFinalTime(), new double[pb.getDimension()]);\n+\n+      assertTrue(handler.getLastError() < 8.0e-11);\n+      assertTrue(handler.getMaximalValueError() < 8.0e-11);\n+      assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n+      assertEquals(\"Adams-Bashforth\", integ.getName());\n+  }\n+\n   public static Test suite() {\n     return new TestSuite(AdamsBashforthIntegratorTest.class);\n   }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n \n     }\n \n+    public void testBackward()\n+        throws DerivativeException, IntegratorException {\n+\n+        TestProblem5 pb = new TestProblem5();\n+        double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n+\n+        FirstOrderIntegrator integ = new AdamsMoultonIntegrator(5, step);\n+        TestProblemHandler handler = new TestProblemHandler(pb, integ);\n+        integ.addStepHandler(handler);\n+        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                        pb.getFinalTime(), new double[pb.getDimension()]);\n+\n+        assertTrue(handler.getLastError() < 5.0e-10);\n+        assertTrue(handler.getMaximalValueError() < 7.0e-10);\n+        assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n+        assertEquals(\"Adams-Moulton\", integ.getName());\n+    }\n+\n     public static Test suite() {\n         return new TestSuite(AdamsMoultonIntegratorTest.class);\n     }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n \n   }\n \n+  public void testBackward()\n+    throws DerivativeException, IntegratorException {\n+\n+    TestProblem5 pb = new TestProblem5();\n+    double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n+\n+    FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n+    TestProblemHandler handler = new TestProblemHandler(pb, integ);\n+    integ.addStepHandler(handler);\n+    integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                    pb.getFinalTime(), new double[pb.getDimension()]);\n+\n+    assertTrue(handler.getLastError() < 5.0e-10);\n+    assertTrue(handler.getMaximalValueError() < 7.0e-10);\n+    assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n+    assertEquals(\"classical Runge-Kutta\", integ.getName());\n+  }\n+\n   public void testKepler()\n     throws DerivativeException, IntegratorException {\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n \n   }\n \n+  public void testBackward()\n+      throws DerivativeException, IntegratorException {\n+\n+      TestProblem5 pb = new TestProblem5();\n+      double minStep = 0;\n+      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n+      double scalAbsoluteTolerance = 1.0e-8;\n+      double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n+\n+      FirstOrderIntegrator integ = new DormandPrince54Integrator(minStep, maxStep,\n+                                                                 scalAbsoluteTolerance,\n+                                                                 scalRelativeTolerance);\n+      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n+      integ.addStepHandler(handler);\n+      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                      pb.getFinalTime(), new double[pb.getDimension()]);\n+\n+      assertTrue(handler.getLastError() < 2.0e-7);\n+      assertTrue(handler.getMaximalValueError() < 2.0e-7);\n+      assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n+      assertEquals(\"Dormand-Prince 5(4)\", integ.getName());\n+  }\n+\n   private static class DP54SmallLastHandler implements StepHandler {\n \n     private static final long serialVersionUID = -8168590945325629799L;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n \n   }\n \n+  public void testBackward()\n+      throws DerivativeException, IntegratorException {\n+\n+      TestProblem5 pb = new TestProblem5();\n+      double minStep = 0;\n+      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n+      double scalAbsoluteTolerance = 1.0e-8;\n+      double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n+\n+      FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n+                                                                  scalAbsoluteTolerance,\n+                                                                  scalRelativeTolerance);\n+      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n+      integ.addStepHandler(handler);\n+      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                      pb.getFinalTime(), new double[pb.getDimension()]);\n+\n+      assertTrue(handler.getLastError() < 8.0e-8);\n+      assertTrue(handler.getMaximalValueError() < 2.0e-7);\n+      assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n+      assertEquals(\"Dormand-Prince 8 (5, 3)\", integ.getName());\n+  }\n+\n   public void testEvents()\n     throws DerivativeException, IntegratorException {\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n \n   }\n \n+  public void testBackward()\n+      throws DerivativeException, IntegratorException {\n+\n+      TestProblem5 pb = new TestProblem5();\n+      double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n+\n+      FirstOrderIntegrator integ = new EulerIntegrator(step);\n+      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n+      integ.addStepHandler(handler);\n+      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                      pb.getFinalTime(), new double[pb.getDimension()]);\n+\n+      assertTrue(handler.getLastError() < 0.45);\n+      assertTrue(handler.getMaximalValueError() < 0.45);\n+      assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n+      assertEquals(\"Euler\", integ.getName());\n+  }\n+\n   public void testStepSize()\n     throws DerivativeException, IntegratorException {\n       final double step = 1.23456;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n \n   }\n \n+  public void testBackward()\n+      throws DerivativeException, IntegratorException {\n+\n+      TestProblem5 pb = new TestProblem5();\n+      double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n+\n+      FirstOrderIntegrator integ = new GillIntegrator(step);\n+      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n+      integ.addStepHandler(handler);\n+      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                      pb.getFinalTime(), new double[pb.getDimension()]);\n+\n+      assertTrue(handler.getLastError() < 5.0e-10);\n+      assertTrue(handler.getMaximalValueError() < 7.0e-10);\n+      assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n+      assertEquals(\"Gill\", integ.getName());\n+  }\n+\n   public void testKepler()\n     throws DerivativeException, IntegratorException {\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n \n   }\n \n+  public void testBackward()\n+      throws DerivativeException, IntegratorException {\n+\n+      TestProblem5 pb = new TestProblem5();\n+      double minStep = 0;\n+      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n+      double scalAbsoluteTolerance = 1.0e-8;\n+      double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n+\n+      FirstOrderIntegrator integ = new GraggBulirschStoerIntegrator(minStep, maxStep,\n+                                                                    scalAbsoluteTolerance,\n+                                                                    scalRelativeTolerance);\n+      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n+      integ.addStepHandler(handler);\n+      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                      pb.getFinalTime(), new double[pb.getDimension()]);\n+\n+      assertTrue(handler.getLastError() < 9.0e-10);\n+      assertTrue(handler.getMaximalValueError() < 9.0e-10);\n+      assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n+      assertEquals(\"Gragg-Bulirsch-Stoer\", integ.getName());\n+  }\n+\n   public void testIncreasingTolerance()\n     throws DerivativeException, IntegratorException {\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n \n   }\n \n+  public void testBackward()\n+      throws DerivativeException, IntegratorException {\n+\n+      TestProblem5 pb = new TestProblem5();\n+      double minStep = 0;\n+      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n+      double scalAbsoluteTolerance = 1.0e-8;\n+      double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n+\n+      FirstOrderIntegrator integ = new HighamHall54Integrator(minStep, maxStep,\n+                                                              scalAbsoluteTolerance,\n+                                                              scalRelativeTolerance);\n+      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n+      integ.addStepHandler(handler);\n+      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                      pb.getFinalTime(), new double[pb.getDimension()]);\n+\n+      assertTrue(handler.getLastError() < 5.0e-7);\n+      assertTrue(handler.getMaximalValueError() < 5.0e-7);\n+      assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n+      assertEquals(\"Higham-Hall 5(4)\", integ.getName());\n+  }\n+\n   public void testEvents()\n     throws DerivativeException, IntegratorException {\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n \n   }\n \n+  public void testBackward()\n+      throws DerivativeException, IntegratorException {\n+\n+      TestProblem5 pb = new TestProblem5();\n+      double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n+\n+      FirstOrderIntegrator integ = new MidpointIntegrator(step);\n+      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n+      integ.addStepHandler(handler);\n+      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                      pb.getFinalTime(), new double[pb.getDimension()]);\n+\n+      assertTrue(handler.getLastError() < 6.0e-4);\n+      assertTrue(handler.getMaximalValueError() < 6.0e-4);\n+      assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n+      assertEquals(\"midpoint\", integ.getName());\n+  }\n+\n   public void testStepSize()\n     throws DerivativeException, IntegratorException {\n       final double step = 1.23456;\n--- a/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n \n   }\n \n+  public void testBackward()\n+      throws DerivativeException, IntegratorException {\n+\n+      TestProblem5 pb = new TestProblem5();\n+      double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n+\n+      FirstOrderIntegrator integ = new ThreeEighthesIntegrator(step);\n+      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n+      integ.addStepHandler(handler);\n+      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n+                      pb.getFinalTime(), new double[pb.getDimension()]);\n+\n+      assertTrue(handler.getLastError() < 5.0e-10);\n+      assertTrue(handler.getMaximalValueError() < 7.0e-10);\n+      assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n+      assertEquals(\"3/8\", integ.getName());\n+  }\n+\n   public void testKepler()\n     throws DerivativeException, IntegratorException {\n ", "timestamp": 1221127031, "metainfo": ""}