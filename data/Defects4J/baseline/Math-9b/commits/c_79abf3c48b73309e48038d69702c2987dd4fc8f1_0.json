{"sha": "79abf3c48b73309e48038d69702c2987dd4fc8f1", "log": "Improved test coverage.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java\n             throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n         }\n \n-        if ((x >= -threshold) && (x <= threshold)) {\n+        if (FastMath.abs(x) <= threshold) {\n             double inverse  = 1 / FastMath.sqrt(y * y + z * z);\n             return new Vector3D(0, inverse * z, -inverse * y);\n-        } else if ((y >= -threshold) && (y <= threshold)) {\n+        } else if (FastMath.abs(y) <= threshold) {\n             double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n             return new Vector3D(-inverse * z, 0, inverse * x);\n         }\n--- a/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java\n+++ b/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java\n import java.text.NumberFormat;\n import java.util.Locale;\n \n+import org.apache.commons.math3.TestUtils;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathArithmeticException;\n+import org.apache.commons.math3.geometry.Space;\n import org.apache.commons.math3.random.Well1024a;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.Precision;\n     }\n \n     @Test\n+    public void testSpace() {\n+        Space space = new Vector3D(1, 2, 2).getSpace();\n+        Assert.assertEquals(3, space.getDimension());\n+        Assert.assertEquals(2, space.getSubSpace().getDimension());\n+        Space deserialized = (Space) TestUtils.serializeAndRecover(space);\n+        Assert.assertTrue(space == deserialized);\n+    }\n+\n+    @Test\n+    public void testZero() {\n+        Assert.assertEquals(0, new Vector3D(1, 2, 2).getZero().getNorm(), 1.0e-15);\n+    }\n+\n+    @Test\n     public void testEquals() {\n         Vector3D u1 = new Vector3D(1, 2, 3);\n         Vector3D u2 = new Vector3D(1, 2, 3);\n-        Vector3D v  = new Vector3D(1, 2, 3 + 10 * Precision.EPSILON);\n         Assert.assertTrue(u1.equals(u1));\n         Assert.assertTrue(u1.equals(u2));\n-        Assert.assertFalse(u1.equals(v));\n+        Assert.assertFalse(u1.equals(new Rotation(1, 0, 0, 0, false)));\n+        Assert.assertFalse(u1.equals(new Vector3D(1, 2, 3 + 10 * Precision.EPSILON)));\n+        Assert.assertFalse(u1.equals(new Vector3D(1, 2 + 10 * Precision.EPSILON, 3)));\n+        Assert.assertFalse(u1.equals(new Vector3D(1 + 10 * Precision.EPSILON, 2, 3)));\n         Assert.assertTrue(new Vector3D(0, Double.NaN, 0).equals(new Vector3D(0, 0, Double.NaN)));\n     }\n \n         Assert.assertTrue(new Vector3D(Double.NEGATIVE_INFINITY, 1, 1).isInfinite());\n         Assert.assertFalse(new Vector3D(1, 1, 2).isInfinite());\n         Assert.assertFalse(new Vector3D(1, Double.NaN, Double.NEGATIVE_INFINITY).isInfinite());\n+    }\n+\n+    @Test\n+    public void testNaN() {\n+        Assert.assertTrue(new Vector3D(1, 1, Double.NaN).isNaN());\n+        Assert.assertTrue(new Vector3D(1, Double.NaN, 1).isNaN());\n+        Assert.assertTrue(new Vector3D(Double.NaN, 1, 1).isNaN());\n+        Assert.assertFalse(new Vector3D(1, 1, 2).isNaN());\n+        Assert.assertFalse(new Vector3D(1, 1, Double.NEGATIVE_INFINITY).isNaN());\n     }\n \n     @Test\n     public void testNorm() {\n         Assert.assertEquals(0.0, Vector3D.ZERO.getNorm(), 0);\n         Assert.assertEquals(FastMath.sqrt(14), new Vector3D(1, 2, 3).getNorm(), 1.0e-12);\n+    }\n+\n+    @Test\n+    public void testNormSq() {\n+        Assert.assertEquals(0.0, new Vector3D(0, 0, 0).getNormSq(), 0);\n+        Assert.assertEquals(14, new Vector3D(1, 2, 3).getNormSq(), 1.0e-12);\n     }\n \n     @Test\n     }\n \n     @Test\n+    public void testNegate() {\n+        checkVector(new Vector3D(0.1, 2.5, 1.3).negate(), -0.1, -2.5, -1.3);\n+    }\n+\n+    @Test\n     public void testOrthogonal() throws MathArithmeticException {\n         Vector3D v1 = new Vector3D(0.1, 2.5, 1.3);\n         Assert.assertEquals(0.0, Vector3D.dotProduct(v1, v1.orthogonal()), 1.0e-12);\n         Assert.assertEquals(0.0, Vector3D.dotProduct(v2, v2.orthogonal()), 1.0e-12);\n         Vector3D v3 = new Vector3D(-1.7, 1.4, 0.2);\n         Assert.assertEquals(0.0, Vector3D.dotProduct(v3, v3.orthogonal()), 1.0e-12);\n+        Vector3D v4 = new Vector3D(4.2, 0.1, -1.8);\n+        Assert.assertEquals(0.0, Vector3D.dotProduct(v4, v4.orthogonal()), 1.0e-12);\n         try {\n             new Vector3D(0, 0, 0).orthogonal();\n             Assert.fail(\"an exception should have been thrown\");\n             // expected behavior\n         }\n     }\n-\n     @Test\n     public void testAngle() throws MathArithmeticException {\n         Assert.assertEquals(0.22572612855273393616,", "timestamp": 1361195799, "metainfo": ""}