{"sha": "7bbddc2203bed78fafe7739a97df1f53e767341a", "log": "MATH-803:   - modified OpenMapRealVector.ebeMultiply() and ebeDivide() to handle special cases  0d * NaN, 0d * Infinity, 0d / 0d and 0d / NaN.   - added implementation of isNaN() and isInfinite() to SparseRealVectorTest.SparseRealVectorTestImpl in order to allow for testing of OpenMapRealVector.ebeMultiply() and ebeDivide() with mixed types.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java\n     public OpenMapRealVector ebeDivide(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n+        /*\n+         * MATH-803: it is not sufficient to loop through non zero entries of\n+         * this only. Indeed, if this[i] = 0d and v[i] = 0d, then\n+         * this[i] / v[i] = NaN, and not 0d.\n+         */\n+        final int n = getDimension();\n+        for (int i = 0; i < n; i++) {\n+            res.setEntry(i, this.getEntry(i) / v.getEntry(i));\n         }\n         return res;\n     }\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n+        }\n+        /*\n+         * MATH-803: the above loop assumes that 0d * x  = 0d for any double x,\n+         * which allows to consider only the non-zero entries of this. However,\n+         * this fails if this[i] == 0d and (v[i] = NaN or v[i] = Infinity).\n+         *\n+         * These special cases are handled below.\n+         */\n+        if (v.isNaN() || v.isInfinite()) {\n+            final int n = getDimension();\n+            for (int i = 0; i < n; i++) {\n+                final double y = v.getEntry(i);\n+                if (Double.isNaN(y)) {\n+                    res.setEntry(i, Double.NaN);\n+                } else if (Double.isInfinite(y)) {\n+                    final double x = this.getEntry(i);\n+                    res.setEntry(i, x * y);\n+                }\n+            }\n         }\n         return res;\n     }\n--- a/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n \n         @Override\n         public boolean isNaN() {\n-            throw unsupported();\n+            boolean isNaN = false;\n+            for (int i = 0; i < data.length; i++) {\n+                isNaN |= Double.isNaN(data[i]);\n+            }\n+            return isNaN;\n         }\n \n         @Override\n         public boolean isInfinite() {\n-            throw unsupported();\n-        }\n-\n+            boolean isInfinite = false;\n+            for (int i = 0; i < data.length; i++) {\n+                final double x = data[i];\n+                if (Double.isNaN(x)) {\n+                    return false;\n+                }\n+                isInfinite |= Double.isInfinite(x);\n+            }\n+            return isInfinite;\n+        }\n     }\n \n     @Override", "timestamp": 1339393936, "metainfo": ""}