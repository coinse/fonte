{"sha": "473d151d4d217ccc2af9499ff5e9239a137774af", "log": "partially reverted commit 1370951 as it trashed earlier correction in FastMath  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java\n package org.apache.commons.math3.util;\n \n import java.io.PrintStream;\n-\n-import org.apache.commons.math3.exception.NotPositiveException;\n-import org.apache.commons.math3.exception.util.LocalizedFormats;\n \n /**\n  * Faster, more accurate, portable alternative to {@link Math} and\n             /* Normalize the subnormal number. */\n             bits <<= 1;\n             while ( (bits & 0x0010000000000000L) == 0) {\n-                exp--;\n+                --exp;\n                 bits <<= 1;\n             }\n         }\n                 xa = aa;\n                 xb = ab;\n \n-                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];\n-                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];\n+                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];\n+                double ya = lnCoef_last[0];\n+                double yb = lnCoef_last[1];\n \n                 for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {\n                     /* Multiply a = y * x */\n                     yb = aa - ya + ab;\n \n                     /* Add  a = y + lnQuickCoef */\n-                    aa = ya + LN_QUICK_COEF[i][0];\n-                    ab = yb + LN_QUICK_COEF[i][1];\n+                    final double[] lnCoef_i = LN_QUICK_COEF[i];\n+                    aa = ya + lnCoef_i[0];\n+                    ab = yb + lnCoef_i[1];\n                     /* Split y = a */\n                     tmp = aa * HEX_40000000;\n                     ya = aa + tmp - tmp;\n         }\n \n         // lnm is a log of a number in the range of 1.0 - 2.0, so 0 <= lnm < ln(2)\n-        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n+        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n \n         /*\n     double epsilon = x / Double.longBitsToDouble(bits & 0xfffffc0000000000L);\n         // y is the most significant 10 bits of the mantissa\n         //double y = Double.longBitsToDouble(bits & 0xfffffc0000000000L);\n         //double epsilon = (x - y) / y;\n-        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n+        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n \n         double lnza = 0.0;\n         double lnzb = 0.0;\n             double xb = ab;\n \n             /* Need a more accurate epsilon, so adjust the division. */\n-            double numer = bits & 0x3ffffffffffL;\n-            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n+            final double numer = bits & 0x3ffffffffffL;\n+            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n             aa = numer - xa*denom - xb * denom;\n             xb += aa / denom;\n \n             /* Remez polynomial evaluation */\n-            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];\n-            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];\n+            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];\n+            double ya = lnCoef_last[0];\n+            double yb = lnCoef_last[1];\n \n             for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n                 /* Multiply a = y * x */\n                 yb = aa - ya + ab;\n \n                 /* Add  a = y + lnHiPrecCoef */\n-                aa = ya + LN_HI_PREC_COEF[i][0];\n-                ab = yb + LN_HI_PREC_COEF[i][1];\n+                final double[] lnCoef_i = LN_HI_PREC_COEF[i];\n+                aa = ya + lnCoef_i[0];\n+                ab = yb + lnCoef_i[1];\n                 /* Split y = a */\n                 tmp = aa * HEX_40000000;\n                 ya = aa + tmp - tmp;\n         return result;\n     }\n \n-\n-    /**\n-     * Raise a double to an int power.\n-     *\n-     * @param d Number to raise.\n-     * @param e Exponent.\n-     * @return d<sup>e</sup>\n-     */\n-    public static double pow(double d, int e) {\n-        if (e == 0) {\n-            return 1.0;\n-        } else if (e < 0) {\n-            e = -e;\n-            d = 1.0 / d;\n-        }\n-\n-        double result = 1;\n-        double d2p    = d;\n-        while (e != 0) {\n-            if ((e & 0x1) != 0) {\n-                result *= d2p;\n-            }\n-            d2p *= d2p;\n-            e = e >> 1;\n-        }\n-\n-        return result;\n-    }\n \n     /**\n      *  Computes sin(x) - x, where |x| < 1/16.", "timestamp": 1344498846, "metainfo": ""}