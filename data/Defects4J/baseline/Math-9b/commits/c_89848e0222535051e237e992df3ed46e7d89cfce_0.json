{"sha": "89848e0222535051e237e992df3ed46e7d89cfce", "log": "Touched up the javadoc comments.   ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/NewtonSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/NewtonSolver.java\n import org.apache.commons.math.MathException;\n \n /**\n- * Implements <a href=\"http://mathworld.wolfram.com/NewtonsMethod.html\">\\\n+ * Implements <a href=\"http://mathworld.wolfram.com/NewtonsMethod.html\">\n  * Newton's Method</a> for finding zeros of real univariate functions. This\n  * algorithm will find only one zero in the given interval.  The function should\n  * be continuous but not necessarily smooth.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/04/08 21:19:17 $\n+ * @version $Revision: 1.2 $ $Date: 2004/04/26 19:15:48 $\n  */\n public class NewtonSolver extends UnivariateRealSolverImpl implements Serializable {\n     \n--- a/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n \n /**\n  * The Binomial Distribution.\n- * \n+ *\n  * Instances of BinomialDistribution objects should be created using\n  * {@link DistributionFactory#createBinomialDistribution(int, double)}.\n  * \n+ * <p>\n  * References:\n  * <ul>\n  * <li><a href=\"http://mathworld.wolfram.com/BinomialDistribution.html\">\n  * Binomial Distribution</a></li>\n  * </ul>\n+ * </p>\n  * \n- * @version $Revision: 1.9 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.10 $ $Date: 2004/04/26 19:15:48 $\n  */\n public interface BinomialDistribution extends DiscreteDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n  * Instances of ChiSquaredDistribution objects should be created using\n  * {@link DistributionFactory#createChiSquareDistribution(double)}.\n  * \n+ * <p>\n  * References:\n  * <ul>\n  * <li><a href=\"http://mathworld.wolfram.com/Chi-SquaredDistribution.html\">\n  * Chi-Squared Distribution</a></li>\n  * </ul>\n+ * </p>\n  * \n- * @version $Revision: 1.12 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.13 $ $Date: 2004/04/26 19:15:48 $\n  */\n public interface ChiSquaredDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n  * Instances of ExponentialDistribution objects should be created using\n  * {@link DistributionFactory#createExponentialDistribution(double)}.\n  * \n+ * <p>\n  * References:\n  * <ul>\n  * <li><a href=\"http://mathworld.wolfram.com/ExponentialDistribution.html\">\n  * Exponential Distribution</a></li>\n+ * </ul>\n+ * </p>\n  * \n- * @version $Revision: 1.10 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.11 $ $Date: 2004/04/26 19:15:48 $\n  */\n public interface ExponentialDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/FDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistribution.java\n  * Instances of FDistribution objects should be created using\n  * {@link DistributionFactory#createFDistribution(double,double)}.\n  * \n+ * <p>\n  * References:\n  * <ul>\n  * <li><a href=\"http://mathworld.wolfram.com/F-Distribution.html\">\n  * F-Distribution</a></li>\n  * </ul>\n+ * </p>\n  * \n- * @version $Revision: 1.11 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.12 $ $Date: 2004/04/26 19:15:48 $\n  */\n public interface FDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n  * Instances of GammaDistribution objects should be created using\n  * {@link DistributionFactory#createGammaDistribution(double,double)}.\n  * \n+ * <p>\n  * References:\n  * <ul>\n  * <li><a href=\"http://mathworld.wolfram.com/GammaDistribution.html\">\n  * Gamma Distribution</a></li>\n  * </ul>\n- *  \n- * @version $Revision: 1.13 $ $Date: 2004/02/21 21:35:14 $\n+ * </p>\n+ * \n+ * @version $Revision: 1.14 $ $Date: 2004/04/26 19:15:48 $\n  */\n public interface GammaDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n  * Instances of HypergeometricDistribution objects should be created using\n  * {@link DistributionFactory#createHypergeometricDistribution(int, int, int)}.\n  * \n+ * <p>\n  * References:\n  * <ul>\n  * <li><a href=\"http://mathworld.wolfram.com/HypergeometricDistribution.html\">\n  * Hypergeometric Distribution</a></li>\n  * </ul>\n+ * </p>\n  * \n- * @version $Revision: 1.8 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.9 $ $Date: 2004/04/26 19:15:48 $\n  */\n public interface HypergeometricDistribution extends DiscreteDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/NormalDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistribution.java\n  * Instances of NormalDistribution objects should be created using\n  * {@link DistributionFactory#createNormalDistribution(double, double)}.<p>\n  * \n+ * <p>\n  * References:<p>\n  * <ul>\n  * <li><a href=\"http://mathworld.wolfram.com/NormalDistribution.html\">\n  * Normal Distribution</a></li>\n  * </ul>\n+ * </p>\n  * \n+ * @version $Revision: 1.4 $ $Date: 2004/04/26 19:15:48 $\n  */\n public interface NormalDistribution extends ContinuousDistribution {\n \t/**\n--- a/src/java/org/apache/commons/math/distribution/TDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistribution.java\n  * Instances of TDistribution objects should be created using\n  * {@link DistributionFactory#createTDistribution(double)}\n  * \n+ * <p>\n  * References:\n  * <ul>\n  * <li><a href=\"http://mathworld.wolfram.com/Studentst-Distribution.html\">\n  * Student's t-Distribution</a></li>\n  * </ul>\n+ * </p>\n  * \n- * @version $Revision: 1.10 $ $Date: 2004/02/21 21:35:14 $\n+ * @version $Revision: 1.11 $ $Date: 2004/04/26 19:15:48 $\n  */\n public interface TDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n  *    by 10.  See TODO: add reference </li>\n  *<li>The input file <i>must</i> be a plain text file containing one valid numeric\n  *    entry per line.</li>\n- * </ol></p>\n+ * </ul></p>\n  *\n- * @version $Revision: 1.18 $ $Date: 2004/04/12 02:27:49 $\n+ * @version $Revision: 1.19 $ $Date: 2004/04/26 19:15:48 $\n  */\n public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n import org.apache.commons.math.util.ContractableDoubleArray;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2004/04/23 19:50:27 $\n+ * Default implementation of\n+ * {@link org.apache.commons.math.stat.univariate.DescriptiveStatistics}.\n+ * \n+ * @version $Revision: 1.3 $ $Date: 2004/04/26 19:15:48 $\n  */\n public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:16 $\n+ * Returns the maximum of the available values.\n+ * \n+ * @version $Revision: 1.15 $ $Date: 2004/04/26 19:15:48 $\n  */\n public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     }\n     \n     /**\n+     * Returns the maximum of the available values.\n+     * \n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n     public double evaluate(\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Median.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Median.java\n \n \n /**\n- * @version $Revision: 1.11 $ $Date: 2004/02/21 21:35:16 $\n+ * Returns the <a href=\"http://www.xycoon.com/median_2.htm\">median</a> of the\n+ * available values.\n+ * \n+ * @version $Revision: 1.12 $ $Date: 2004/04/26 19:15:48 $\n  */\n public class Median extends Percentile implements Serializable {\n \n     static final long serialVersionUID = -3961477041290915687L;    \n \n     /**\n-     *\n+     * Default constructor.\n      */\n     public Median() {\n         super(50.0);\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.14 $ $Date: 2004/02/21 21:35:16 $\n+ * Returns the minimum of the available values.\n+ * \n+ * @version $Revision: 1.15 $ $Date: 2004/04/26 19:15:48 $\n  */\n public class Min extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     }\n     \n     /**\n+     * Returns the minimum of the available values.\n+     * \n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n     public double evaluate(\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n  * follows the first estimation procedure presented\n  * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm\">here.</a>\n  * \n- * @version $Revision: 1.16 $ $Date: 2004/03/21 21:57:19 $\n+ * @version $Revision: 1.17 $ $Date: 2004/04/26 19:15:48 $\n  */\n public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n \n      * value of 50.0.\n      */\n     public Percentile() {\n-        super();\n-        quantile = 50.0;\n+        this(50.0);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Product.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.15 $ $Date: 2004/03/04 04:25:09 $\n+ * Returns the product for this collection of values.\n+ * \n+ * @version $Revision: 1.16 $ $Date: 2004/04/26 19:15:48 $\n  */\n public class Product extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.17 $ $Date: 2004/03/04 04:25:09 $\n+ * The sum of the values that have been added to Univariate.\n+ * \n+ * @version $Revision: 1.18 $ $Date: 2004/04/26 19:15:48 $\n  */\n public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.15 $ $Date: 2004/03/04 04:25:09 $\n+ * Returns the sum of the natural logs for this collection of values.\n+ * \n+ * @version $Revision: 1.16 $ $Date: 2004/04/26 19:15:48 $\n  */\n public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n     .AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.15 $ $Date: 2004/03/04 04:25:09 $\n+ * Returns the sum of the squares of the available values.\n+ * \n+ * @version $Revision: 1.16 $ $Date: 2004/04/26 19:15:48 $\n  */\n public class SumOfSquares extends AbstractStorelessUnivariateStatistic implements Serializable {\n ", "timestamp": 1083006948, "metainfo": ""}