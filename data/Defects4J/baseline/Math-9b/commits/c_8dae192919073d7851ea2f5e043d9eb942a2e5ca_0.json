{"sha": "8dae192919073d7851ea2f5e043d9eb942a2e5ca", "log": "In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java\n+++ b/src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java\n  * limitations under the License.\n  */\n package org.apache.commons.math3.linear;\n+\n+import org.apache.commons.math3.analysis.function.Sqrt;\n \n /**\n  * This class implements the standard Jacobi (diagonal) preconditioner. For a\n         // Dimension check is carried out by ebeMultiply\n         return x.ebeDivide(diag);\n     }\n+\n+    /**\n+     * Returns the square root of {@code this} diagonal operator. More\n+     * precisely, this method returns\n+     * P = diag(1 / &radic;A<sub>11</sub>, 1 / &radic;A<sub>22</sub>, &hellip;).\n+     *\n+     * @return the square root of {@code this} operator\n+     */\n+    public RealLinearOperator sqrt(){\n+        final RealVector sqrtDiag = diag.map(new Sqrt());\n+        return new RealLinearOperator() {\n+            /** {@inheritDoc} */\n+            @Override\n+            public RealVector operate(final RealVector x) {\n+                return x.ebeDivide(sqrtDiag);\n+            }\n+\n+            /** {@inheritDoc} */\n+            @Override\n+            public int getRowDimension() {\n+                return sqrtDiag.getDimension();\n+            }\n+\n+            /** {@inheritDoc} */\n+            @Override\n+            public int getColumnDimension() {\n+                return sqrtDiag.getDimension();\n+            }\n+        };\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/linear/SymmLQTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SymmLQTest.java\n import java.util.Arrays;\n \n import org.apache.commons.math3.exception.DimensionMismatchException;\n-import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.IterationEvent;\n import org.apache.commons.math3.util.IterationListener;\n         final int n = 5;\n         final int maxIterations = 100;\n         final RealLinearOperator a = new HilbertMatrix(n);\n-        final RealLinearOperator m = JacobiPreconditioner.create(a);\n+        final JacobiPreconditioner m = JacobiPreconditioner.create(a);\n+        final RealLinearOperator p = m.sqrt();\n         final PreconditionedIterativeLinearSolver solver;\n         final IterationListener listener = new IterationListener() {\n \n                 final RealVector x = evt.getSolution();\n                 final RealVector b = evt.getRightHandSideVector();\n                 final RealVector r = b.subtract(a.operate(x));\n-                final double rnorm = r.getNorm();\n+                final double rnorm = p.operate(r).getNorm();\n                 Assert.assertEquals(\"iteration performed (residual)\",\n                     rnorm, evt.getNormOfResidual(),\n                     FastMath.max(1E-5 * rnorm, 1E-10));", "timestamp": 1332489051, "metainfo": ""}