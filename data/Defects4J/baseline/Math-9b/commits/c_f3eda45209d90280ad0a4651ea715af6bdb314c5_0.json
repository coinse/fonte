{"sha": "f3eda45209d90280ad0a4651ea715af6bdb314c5", "log": "MATH-829 Removed \"throws\" clause from method signature.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/TestUtils.java\n+++ b/src/test/java/org/apache/commons/math3/TestUtils.java\n      * @param observed observed counts\n      * @param alpha significance level of the test\n      */\n-    public static void assertChiSquareAccept(String[] valueLabels, double[] expected, long[] observed, double alpha) throws Exception {\n+    public static void assertChiSquareAccept(String[] valueLabels, double[] expected, long[] observed, double alpha) {\n         ChiSquareTest chiSquareTest = new ChiSquareTest();\n \n         // Fail if we can reject null hypothesis that distributions are the same\n      * @param observed observed counts\n      * @param alpha significance level of the test\n      */\n-    public static void assertChiSquareAccept(int[] values, double[] expected, long[] observed, double alpha) throws Exception {\n+    public static void assertChiSquareAccept(int[] values, double[] expected, long[] observed, double alpha) {\n         String[] labels = new String[values.length];\n         for (int i = 0; i < values.length; i++) {\n             labels[i] = Integer.toString(values[i]);\n      * @param observed observed counts\n      * @param alpha significance level of the test\n      */\n-    public static void assertChiSquareAccept(double[] expected, long[] observed, double alpha) throws Exception {\n+    public static void assertChiSquareAccept(double[] expected, long[] observed, double alpha) {\n         String[] labels = new String[expected.length];\n         for (int i = 0; i < labels.length; i++) {\n             labels[i] = Integer.toString(i + 1);\n      * Computes the 25th, 50th and 75th percentiles of the given distribution and returns\n      * these values in an array.\n      */\n-    public static double[] getDistributionQuartiles(RealDistribution distribution) throws Exception {\n+    public static double[] getDistributionQuartiles(RealDistribution distribution) {\n         double[] quantiles = new double[3];\n         quantiles[0] = distribution.inverseCumulativeProbability(0.25d);\n         quantiles[1] = distribution.inverseCumulativeProbability(0.5d);", "timestamp": 1342738967, "metainfo": ""}