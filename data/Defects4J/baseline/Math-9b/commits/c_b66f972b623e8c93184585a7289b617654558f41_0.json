{"sha": "b66f972b623e8c93184585a7289b617654558f41", "log": "In AbstractRealMatrix, provided empty implementations to methods   - createMatrix(int, int),   - copy(),   - getEntry(int, int),   - setEntry(int, int). This allows the use of the @Override tag in classes Array2DRowRealMatrix, BlockRealMatrix, OpenMapRealMatrix with java 5.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java\n         }\n         return ret;\n     }\n+\n+\n+    /*\n+     * Empty implementations of these methods are provided in order to allow for\n+     * the use of the @Override tag with Java 1.5.\n+     */\n+\n+    /** {@inheritDoc} */\n+    public abstract RealMatrix createMatrix(int rowDimension, int columnDimension)\n+        throws NotStrictlyPositiveException;\n+\n+    /** {@inheritDoc} */\n+    public abstract RealMatrix copy();\n+\n+    /** {@inheritDoc} */\n+    public abstract double getEntry(int row, int column)\n+        throws OutOfRangeException;\n+\n+    /** {@inheritDoc} */\n+    public abstract void setEntry(int row, int column, double value);\n }\n--- a/src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public RealMatrix createMatrix(final int rowDimension,\n                                    final int columnDimension)\n         throws NotStrictlyPositiveException {\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public RealMatrix copy() {\n         return new Array2DRowRealMatrix(copyOut(), false);\n     }\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public double getEntry(final int row, final int column)\n         throws OutOfRangeException {\n         MatrixUtils.checkMatrixIndex(this, row, column);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public void setEntry(final int row, final int column, final double value)\n         throws OutOfRangeException {\n         MatrixUtils.checkMatrixIndex(this, row, column);\n--- a/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public BlockRealMatrix createMatrix(final int rowDimension, final int columnDimension) {\n         return new BlockRealMatrix(rowDimension, columnDimension);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public BlockRealMatrix copy() {\n         // create an empty matrix\n         BlockRealMatrix copied = new BlockRealMatrix(rows, columns);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public double getEntry(final int row, final int column) {\n         MatrixUtils.checkMatrixIndex(this, row, column);\n         final int iBlock = row / BLOCK_SIZE;\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public void setEntry(final int row, final int column, final double value) {\n         MatrixUtils.checkMatrixIndex(this, row, column);\n         final int iBlock = row / BLOCK_SIZE;\n--- a/src/main/java/org/apache/commons/math3/linear/OpenMapRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math3/linear/OpenMapRealMatrix.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public OpenMapRealMatrix copy() {\n         return new OpenMapRealMatrix(this);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension) {\n         return new OpenMapRealMatrix(rowDimension, columnDimension);\n     }\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public double getEntry(int row, int column) {\n         MatrixUtils.checkRowIndex(this, row);\n         MatrixUtils.checkColumnIndex(this, column);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public void setEntry(int row, int column, double value) {\n         MatrixUtils.checkRowIndex(this, row);\n         MatrixUtils.checkColumnIndex(this, column);", "timestamp": 1348644275, "metainfo": ""}