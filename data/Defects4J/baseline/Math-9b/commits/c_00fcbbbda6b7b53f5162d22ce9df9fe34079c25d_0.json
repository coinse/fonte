{"sha": "00fcbbbda6b7b53f5162d22ce9df9fe34079c25d", "log": "Removed usage of MathException in NumberTransformer and related classes.  JIRA: MATH-488  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/main/java/org/apache/commons/math/util/DefaultTransformer.java\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n     /**\n      * @param o  the object that gets transformed.\n      * @return a double primitive representation of the Object o.\n-     * @throws MathException if it cannot successfully be transformed.\n-     * @throws NullArgumentException if is {@code null}.\n+     * @throws NullArgumentException if Object <code>o</code> is {@code null}.\n+     * @throws MathIllegalArgumentException if Object <code>o</code>\n+     * cannot successfully be transformed\n      * @see <a href=\"http://commons.apache.org/collections/api-release/org/apache/commons/collections/Transformer.html\">Commons Collections Transformer</a>\n      */\n-    public double transform(Object o) throws MathException {\n+    public double transform(Object o)\n+        throws NullArgumentException, MathIllegalArgumentException {\n+\n         if (o == null) {\n             throw new NullArgumentException(LocalizedFormats.OBJECT_TRANSFORMATION);\n         }\n         try {\n             return Double.valueOf(o.toString()).doubleValue();\n         } catch (NumberFormatException e) {\n-            throw new MathException(e,\n-                                    LocalizedFormats.CANNOT_TRANSFORM_TO_DOUBLE, e.getMessage());\n+            throw new MathIllegalArgumentException(LocalizedFormats.CANNOT_TRANSFORM_TO_DOUBLE,\n+                                                   o.toString());\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/math/util/NumberTransformer.java\n+++ b/src/main/java/org/apache/commons/math/util/NumberTransformer.java\n  */\n package org.apache.commons.math.util;\n \n-import org.apache.commons.math.MathException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n \n /**\n  * Subclasses implementing this interface can transform Objects to doubles.\n      *\n      * @param o the Object to be transformed.\n      * @return the double value of the Object.\n-     * @throws MathException if the Object can not be transformed into a Double.\n+     * @throws MathIllegalArgumentException if the Object can not be transformed into a Double.\n      */\n-    double transform(Object o) throws MathException;\n+    double transform(Object o) throws MathIllegalArgumentException;\n }\n--- a/src/main/java/org/apache/commons/math/util/TransformerMap.java\n+++ b/src/main/java/org/apache/commons/math/util/TransformerMap.java\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.math.MathException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n \n /**\n  * This TansformerMap automates the transformation of mixed object types.\n      *\n      * @param o the Object to be transformed.\n      * @return the double value of the Object.\n-     * @throws MathException if the Object can not be transformed into a Double.\n+     * @throws MathIllegalArgumentException if the Object can not be\n+     * transformed into a Double.\n      * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n      */\n-    public double transform(Object o) throws MathException {\n+    public double transform(Object o) throws MathIllegalArgumentException {\n         double value = Double.NaN;\n \n         if (o instanceof Number || o instanceof String) {", "timestamp": 1328293041, "metainfo": ""}