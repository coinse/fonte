{"sha": "5d6b34c67f72fce8b4f07f93a0bcbc0b72437e40", "log": "BeanListUnivariateImpl was misplaced during the move.   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.List;\n+\n+import org.apache.commons.beanutils.PropertyUtils;\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.util.NumberTransformer;\n+\n+/**\n+ * This implementation of DescriptiveStatistics uses commons-beanutils to gather\n+ * univariate statistics for a List of Java Beans by property.  This \n+ * implementation uses beanutils' PropertyUtils to get a simple, nested,\n+ * indexed, mapped, or combined property from an element of a List.\n+ * @version $Revision: 1.1 $ $Date: 2004/04/20 21:02:35 $\n+ */\n+public class BeanListUnivariateImpl extends ListUnivariateImpl {\n+\n+\t/**\n+\t * propertyName of the property to get from the bean\n+\t */\n+\tprivate String propertyName;\n+\n+\t/**\n+\t * Construct a BeanListUnivariate with specified\n+\t * backing list\n+\t * @param list Backing List\n+\t */\n+\tpublic BeanListUnivariateImpl(List list) {\n+\t\tthis(list, null);\n+\t}\n+\n+\t/**\n+\t * Construct a BeanListUnivariate with specified\n+\t * backing list and propertyName\n+\t * @param list Backing List\n+\t * @param propertyName Bean propertyName\n+\t */\n+\tpublic BeanListUnivariateImpl(List list, String propertyName) {\n+\t\tsuper(list);\n+\t\tsetPropertyName(propertyName);\n+\t}\n+\n+\t/**\n+\t * @return propertyName\n+\t */\n+\tpublic String getPropertyName() {\n+\t\treturn propertyName;\n+\t}\n+\n+\t/**\n+\t * @param propertyName Name of Property\n+\t */\n+\tpublic void setPropertyName(String propertyName) {\n+\t\tthis.propertyName = propertyName;\n+\t\tthis.transformer = new NumberTransformer() {\n+\n+\t\t\t/**\n+\t\t\t * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n+\t\t\t */\n+\t\t\tpublic double transform(final Object o) throws MathException {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn (\n+\t\t\t\t\t\t(Number) PropertyUtils.getProperty(\n+\t\t\t\t\t\t\to,\n+\t\t\t\t\t\t\tgetPropertyName()))\n+\t\t\t\t\t\t.doubleValue();\n+\t\t\t\t} catch (IllegalAccessException e) {\n+\t\t\t\t\tthrow new MathException(\n+\t\t\t\t\t\t\"IllegalAccessException in Transformation: \"\n+\t\t\t\t\t\t\t+ e.getMessage(),\n+\t\t\t\t\t\te);\n+\t\t\t\t} catch (InvocationTargetException e) {\n+\t\t\t\t\tthrow new MathException(\n+\t\t\t\t\t\t\"InvocationTargetException in Transformation: \"\n+\t\t\t\t\t\t\t+ e.getMessage(),\n+\t\t\t\t\t\te);\n+\t\t\t\t} catch (NoSuchMethodException e) {\n+\t\t\t\t\tthrow new MathException(\n+\t\t\t\t\t\t\"oSuchMethodException in Transformation: \"\n+\t\t\t\t\t\t\t+ e.getMessage(),\n+\t\t\t\t\t\te);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t/**\n+\t  * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+\t  */\n+\tpublic void addValue(double v) {\n+\t\tString msg =\n+\t\t\t\"The BeanListUnivariateImpl does not accept values \"\n+\t\t\t\t+ \"through the addValue method.  Because elements of this list \"\n+\t\t\t\t+ \"are JavaBeans, one must be sure to set the 'propertyName' \"\n+\t\t\t\t+ \"property and add new Beans to the underlying list via the \"\n+\t\t\t\t+ \"addBean(Object bean) method\";\n+\t\tthrow new UnsupportedOperationException(msg);\n+\t}\n+\n+\t/**\n+\t * Adds a bean to this list. \n+\t *\n+\t * @param bean Bean to add to the list\n+\t */\n+\tpublic void addObject(Object bean) {\n+\t\tlist.add(bean);\n+\t}\n+}", "timestamp": 1082494955, "metainfo": ""}