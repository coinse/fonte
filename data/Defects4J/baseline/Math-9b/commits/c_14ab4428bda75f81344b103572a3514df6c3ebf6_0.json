{"sha": "14ab4428bda75f81344b103572a3514df6c3ebf6", "log": "Code cleanup: One-letter instance variables should not be used.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/ISAACRandom.java\n+++ b/src/main/java/org/apache/commons/math/random/ISAACRandom.java\n     private int count;\n \n     /** Accumulator */\n-    private int a;\n+    private int isaacA;\n \n     /** The last result */\n-    private int b;\n+    private int isaacB;\n \n     /** Counter, guarantees cycle is at least 2^40 */\n-    private int c;\n-\n-    /** The global service variables */\n+    private int isaacC;\n+\n+    /** Service variable. */\n     private transient int[] arr;\n-    private transient int x;\n-    private transient int i;\n-    private transient int j;\n+    /** Service variable. */\n+    private transient int isaacX;\n+    /** Service variable. */\n+    private transient int isaacI;\n+    /** Service variable. */\n+    private transient int isaacJ;\n \n \n     /**\n             setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n             return;\n         }\n-        int seedLen = seed.length, rslLen = rsl.length;\n+        final int seedLen = seed.length;\n+        final int rslLen = rsl.length;\n         System.arraycopy(seed, 0, rsl, 0, Math.min(seedLen, rslLen));\n         if (seedLen < rslLen) {\n-            for (i = seedLen; i < rslLen; i++) {\n-                long k = rsl[i - seedLen];\n-                rsl[i] = (int) (0x6c078965L * (k ^ k >> 30) + i & 0xffffffffL);\n+            for (int j = seedLen; j < rslLen; j++) {\n+                long k = rsl[j - seedLen];\n+                rsl[j] = (int) (0x6c078965L * (k ^ k >> 30) + j & 0xffffffffL);\n             }\n         }\n         initState();\n \n     /** Generate 256 results */\n     private void isaac() {\n-        i = 0;\n-        j = H_SIZE;\n-        b += ++c;\n-        while (i < H_SIZE) {\n+        isaacI = 0;\n+        isaacJ = H_SIZE;\n+        isaacB += ++isaacC;\n+        while (isaacI < H_SIZE) {\n             isaac2();\n         }\n-        j = 0;\n-        while (j < H_SIZE) {\n+        isaacJ = 0;\n+        while (isaacJ < H_SIZE) {\n             isaac2();\n         }\n     }\n \n     /** Intermediate internal loop. */\n     private void isaac2() {\n-        x = mem[i];\n-        a ^= a << 13;\n-        a += mem[j++];\n-        isaac3();\n-        x = mem[i];\n-        a ^= a >>> 6;\n-        a += mem[j++];\n-        isaac3();\n-        x = mem[i];\n-        a ^= a << 2;\n-        a += mem[j++];\n-        isaac3();\n-        x = mem[i];\n-        a ^= a >>> 16;\n-        a += mem[j++];\n+        isaacX = mem[isaacI];\n+        isaacA ^= isaacA << 13;\n+        isaacA += mem[isaacJ++];\n+        isaac3();\n+        isaacX = mem[isaacI];\n+        isaacA ^= isaacA >>> 6;\n+        isaacA += mem[isaacJ++];\n+        isaac3();\n+        isaacX = mem[isaacI];\n+        isaacA ^= isaacA << 2;\n+        isaacA += mem[isaacJ++];\n+        isaac3();\n+        isaacX = mem[isaacI];\n+        isaacA ^= isaacA >>> 16;\n+        isaacA += mem[isaacJ++];\n         isaac3();\n     }\n \n     /** Lowest level internal loop. */\n     private void isaac3() {\n-        mem[i] = mem[(x & MASK) >> 2] + a + b;\n-        b = mem[(mem[i] >> SIZE_L & MASK) >> 2] + x;\n-        rsl[i++] = b;\n+        mem[isaacI] = mem[(isaacX & MASK) >> 2] + isaacA + isaacB;\n+        isaacB = mem[(mem[isaacI] >> SIZE_L & MASK) >> 2] + isaacX;\n+        rsl[isaacI++] = isaacB;\n     }\n \n     /** Initialize, or reinitialize, this instance of rand. */\n     private void initState() {\n-        a = b = c = 0;\n-        for (i = 0; i < arr.length; i++) {\n-            arr[i] = GLD_RATIO;\n-        }\n-        for (i = 0; i < 4; i++) {\n+        isaacA = 0;\n+        isaacB = 0;\n+        isaacC = 0;\n+        for (int j = 0; j < arr.length; j++) {\n+            arr[j] = GLD_RATIO;\n+        }\n+        for (int j = 0; j < 4; j++) {\n             shuffle();\n         }\n         // fill in mem[] with messy stuff\n-        for (i = 0; i < SIZE; i += 8) {\n-            arr[0] += rsl[i];\n-            arr[1] += rsl[i + 1];\n-            arr[2] += rsl[i + 2];\n-            arr[3] += rsl[i + 3];\n-            arr[4] += rsl[i + 4];\n-            arr[5] += rsl[i + 5];\n-            arr[6] += rsl[i + 6];\n-            arr[7] += rsl[i + 7];\n+        for (int j = 0; j < SIZE; j += 8) {\n+            arr[0] += rsl[j];\n+            arr[1] += rsl[j + 1];\n+            arr[2] += rsl[j + 2];\n+            arr[3] += rsl[j + 3];\n+            arr[4] += rsl[j + 4];\n+            arr[5] += rsl[j + 5];\n+            arr[6] += rsl[j + 6];\n+            arr[7] += rsl[j + 7];\n             shuffle();\n-            setState();\n+            setState(j);\n         }\n         // second pass makes all of seed affect all of mem\n-        for (i = 0; i < SIZE; i += 8) {\n-            arr[0] += mem[i];\n-            arr[1] += mem[i + 1];\n-            arr[2] += mem[i + 2];\n-            arr[3] += mem[i + 3];\n-            arr[4] += mem[i + 4];\n-            arr[5] += mem[i + 5];\n-            arr[6] += mem[i + 6];\n-            arr[7] += mem[i + 7];\n+        for (int j = 0; j < SIZE; j += 8) {\n+            arr[0] += mem[j];\n+            arr[1] += mem[j + 1];\n+            arr[2] += mem[j + 2];\n+            arr[3] += mem[j + 3];\n+            arr[4] += mem[j + 4];\n+            arr[5] += mem[j + 5];\n+            arr[6] += mem[j + 6];\n+            arr[7] += mem[j + 7];\n             shuffle();\n-            setState();\n+            setState(j);\n         }\n         isaac();\n         count = SIZE - 1;\n         arr[0] += arr[1];\n     }\n \n-    /** Set the state by copying the internal arrays. */\n-    private void setState() {\n-        mem[i] = arr[0];\n-        mem[i + 1] = arr[1];\n-        mem[i + 2] = arr[2];\n-        mem[i + 3] = arr[3];\n-        mem[i + 4] = arr[4];\n-        mem[i + 5] = arr[5];\n-        mem[i + 6] = arr[6];\n-        mem[i + 7] = arr[7];\n+    /** Set the state by copying the internal arrays.\n+     *\n+     * @param start First index into {@link #mem} array.\n+     */\n+    private void setState(int start) {\n+        mem[start] = arr[0];\n+        mem[start + 1] = arr[1];\n+        mem[start + 2] = arr[2];\n+        mem[start + 3] = arr[3];\n+        mem[start + 4] = arr[4];\n+        mem[start + 5] = arr[5];\n+        mem[start + 6] = arr[6];\n+        mem[start + 7] = arr[7];\n     }\n }", "timestamp": 1326896606, "metainfo": ""}