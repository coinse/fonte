{"sha": "c9bf3c0ec9f1ced772bb6d513b9fc2b670bcb2ff", "log": "improved javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.java\n      * <p>Since this class represent zero dimension spaces which does\n      * not have lower dimension sub-spaces, this method returns a dummy\n      * implementation of a {@link\n-     * org.apache.commons.math3.geometry.partitioning.Region Region}\n-     * (always the same instance). This implementation is only used to\n-     * allow the {@link\n+     * org.apache.commons.math3.geometry.partitioning.SubHyperplane SubHyperplane}.\n+     * This implementation is only used to allow the {@link\n      * org.apache.commons.math3.geometry.partitioning.SubHyperplane\n      * SubHyperplane} class implementation to work properly, it should\n      * <em>not</em> be used otherwise.</p>\n-     * @return a dummy region\n+     * @return a dummy sub hyperplane\n      */\n     public SubOrientedPoint wholeHyperplane() {\n         return new SubOrientedPoint(this, null);\n--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/SubHyperplane.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/SubHyperplane.java\n public interface SubHyperplane<S extends Space> {\n \n     /** Copy the instance.\n-     * <p>The instance created is completely independant of the original\n+     * <p>The instance created is completely independent of the original\n      * one. A deep copy is used, none of the underlying objects are\n      * shared (except for the nodes attributes and immutable\n      * objects).</p>\n \n     /** Compute the relative position of the instance with respect\n      * to an hyperplane.\n-     * @param hyperplane hyperplane to check instane against\n+     * @param hyperplane hyperplane to check instance against\n      * @return one of {@link Side#PLUS}, {@link Side#MINUS}, {@link Side#BOTH},\n      * {@link Side#HYPER}\n      */\n     /** Compute the union of the instance and another sub-hyperplane.\n      * @param other other sub-hyperplane to union (<em>must</em> be in the\n      * same hyperplane as the instance)\n-     * @return a new sub-hyperplane, union of the instane and other\n+     * @return a new sub-hyperplane, union of the instance and other\n      */\n     SubHyperplane<S> reunite(SubHyperplane<S> other);\n ", "timestamp": 1335124833, "metainfo": ""}