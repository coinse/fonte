{"sha": "751a79135e328b39e02fd1f5cce8104de7afd634", "log": "avoid ugly call to getDataRef that relies on vector internal implementation  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/DenseRealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/DenseRealMatrix.java\n         throws MatrixIndexException {\n \n         checkRowIndex(row);\n-        final RealVectorImpl out = new RealVectorImpl(columns);\n+        final double[] outData = new double[columns];\n \n         // perform copy block-wise, to ensure good cache behavior\n         final int iBlock  = row / BLOCK_SIZE;\n         final int iRow    = row - iBlock * BLOCK_SIZE;\n         int outIndex      = 0;\n-        double[] outData  = out.getDataRef();\n         for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {\n             final int jWidth     = blockWidth(jBlock);\n             final double[] block = blocks[iBlock * blockColumns + jBlock];\n             outIndex += jWidth;\n         }\n \n-        return out;\n+        return new RealVectorImpl(outData, false);\n \n     }\n \n         throws MatrixIndexException {\n \n         checkColumnIndex(column);\n-        final RealVectorImpl out = new RealVectorImpl(rows);\n+        final double[] outData = new double[rows];\n \n         // perform copy block-wise, to ensure good cache behavior\n         final int jBlock  = column / BLOCK_SIZE;\n         final int jColumn = column - jBlock * BLOCK_SIZE;\n         final int jWidth  = blockWidth(jBlock);\n         int outIndex      = 0;\n-        double[] outData = out.getDataRef();\n         for (int iBlock = 0; iBlock < blockRows; ++iBlock) {\n             final int iHeight = blockHeight(iBlock);\n             final double[] block = blocks[iBlock * blockColumns + jBlock];\n             }\n         }\n \n-        return out;\n+        return new RealVectorImpl(outData, false);\n \n     }\n ", "timestamp": 1231070993, "metainfo": ""}