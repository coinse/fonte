{"sha": "cef8d30a2148948f9df5c6cff075ba8bb20ddced", "log": "MATH-707 Changed \"...MultivariateVectorialFunction\" to \"...MultivariateVectorFunction\" (as suggested by Ted Dunning).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/DifferentiableMultivariateFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/DifferentiableMultivariateFunction.java\n      * which will compute only the specified component.</p>\n      * @return the gradient function\n      */\n-    MultivariateVectorialFunction gradient();\n+    MultivariateVectorFunction gradient();\n \n }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+\n+/**\n+ * Extension of {@link MultivariateVectorFunction} representing a differentiable\n+ * multivariate vectorial function.\n+ * @version $Id$\n+ * @since 2.0\n+ */\n+public interface DifferentiableMultivariateVectorFunction\n+    extends MultivariateVectorFunction {\n+\n+    /**\n+     * Returns the jacobian function.\n+     * @return the jacobian function\n+     */\n+    MultivariateMatrixFunction jacobian();\n+\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/MultivariateVectorFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+/**\n+ * An interface representing a multivariate vectorial function.\n+ * @version $Id$\n+ * @since 2.0\n+ */\n+public interface MultivariateVectorFunction {\n+\n+    /**\n+     * Compute the value for the function at the given point.\n+     * @param point point at which the function must be evaluated\n+     * @return function value for the given point\n+     * @exception IllegalArgumentException if points dimension is wrong\n+     */\n+    double[] value(double[] point)\n+        throws IllegalArgumentException;\n+\n+}\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java\n import java.util.Arrays;\n import java.util.Comparator;\n \n-import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.MultivariateVectorFunction;\n import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n  * @version $Id$\n  * @since 3.0\n  */\n-public class BaseMultiStartMultivariateVectorialOptimizer<FUNC extends MultivariateVectorialFunction>\n+public class BaseMultiStartMultivariateVectorialOptimizer<FUNC extends MultivariateVectorFunction>\n     implements BaseMultivariateVectorialOptimizer<FUNC> {\n     /** Underlying classical optimizer. */\n     private final BaseMultivariateVectorialOptimizer<FUNC> optimizer;\n      *\n      * @param optimizer Single-start optimizer to wrap.\n      * @param starts Number of starts to perform. If {@code starts == 1},\n-     * the {@link #optimize(int,MultivariateVectorialFunction,double[],double[],double[])\n+     * the {@link #optimize(int,MultivariateVectorFunction,double[],double[],double[])\n      * optimize} will return the same solution as {@code optimizer} would.\n      * @param generator Random vector generator to use for restarts.\n      * @throws NullArgumentException if {@code optimizer} or {@code generator}\n \n     /**\n      * Get all the optima found during the last call to {@link\n-     * #optimize(int,MultivariateVectorialFunction,double[],double[],double[]) optimize}.\n+     * #optimize(int,MultivariateVectorFunction,double[],double[],double[]) optimize}.\n      * The optimizer stores all the optima found during a set of\n-     * restarts. The {@link #optimize(int,MultivariateVectorialFunction,double[],double[],double[])\n+     * restarts. The {@link #optimize(int,MultivariateVectorFunction,double[],double[],double[])\n      * optimize} method returns the best point only. This method\n      * returns all the points found at the end of each starts, including\n      * the best one already returned by the {@link\n-     * #optimize(int,MultivariateVectorialFunction,double[],double[],double[]) optimize} method.\n+     * #optimize(int,MultivariateVectorFunction,double[],double[],double[]) optimize} method.\n      * <br/>\n      * The returned array as one element for each start as specified\n      * in the constructor. It is ordered with the results from the\n      * descending order if maximizing), followed by and null elements\n      * corresponding to the runs that did not converge. This means all\n      * elements will be null if the {@link\n-     * #optimize(int,MultivariateVectorialFunction,double[],double[],double[]) optimize} method did\n+     * #optimize(int,MultivariateVectorFunction,double[],double[],double[]) optimize} method did\n      * throw a {@link ConvergenceException}). This also means that if\n      * the first element is not {@code null}, it is the best point found\n      * across all starts.\n      *\n      * @return array containing the optima\n      * @throws MathIllegalStateException if {@link\n-     * #optimize(int,MultivariateVectorialFunction,double[],double[],double[]) optimize} has not been\n+     * #optimize(int,MultivariateVectorFunction,double[],double[],double[]) optimize} has not been\n      * called.\n      */\n     public VectorialPointValuePair[] getOptima() {\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java\n \n package org.apache.commons.math.optimization;\n \n-import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.MultivariateVectorFunction;\n \n /**\n  * This interface is mainly intended to enforce the internal coherence of\n  * @version $Id$\n  * @since 3.0\n  */\n-public interface BaseMultivariateVectorialOptimizer<FUNC extends MultivariateVectorialFunction>\n+public interface BaseMultivariateVectorialOptimizer<FUNC extends MultivariateVectorFunction>\n     extends BaseOptimizer<VectorialPointValuePair> {\n     /**\n      * Optimize an objective function.\n--- a/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java\n \n package org.apache.commons.math.optimization;\n \n-import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction;\n \n /**\n  * This interface represents an optimization algorithm for\n- * {@link DifferentiableMultivariateVectorialFunction vectorial differentiable\n+ * {@link DifferentiableMultivariateVectorFunction vectorial differentiable\n  * objective functions}.\n  *\n  * @version $Id$\n  * @since 3.0\n  */\n public interface DifferentiableMultivariateVectorialOptimizer\n-    extends BaseMultivariateVectorialOptimizer<DifferentiableMultivariateVectorialFunction> {}\n+    extends BaseMultivariateVectorialOptimizer<DifferentiableMultivariateVectorFunction> {}\n--- a/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java\n package org.apache.commons.math.optimization;\n \n import org.apache.commons.math.analysis.MultivariateFunction;\n-import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.MultivariateVectorFunction;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.linear.RealMatrix;\n \n-/** This class converts {@link MultivariateVectorialFunction vectorial\n+/** This class converts {@link MultivariateVectorFunction vectorial\n  * objective functions} to {@link MultivariateFunction scalar objective functions}\n  * when the goal is to minimize them.\n  * <p>\n  * </p>\n   *\n  * @see MultivariateFunction\n- * @see MultivariateVectorialFunction\n+ * @see MultivariateVectorFunction\n  * @version $Id$\n  * @since 2.0\n  */\n public class LeastSquaresConverter implements MultivariateFunction {\n \n     /** Underlying vectorial function. */\n-    private final MultivariateVectorialFunction function;\n+    private final MultivariateVectorFunction function;\n \n     /** Observations to be compared to objective function to compute residuals. */\n     private final double[] observations;\n      * @param function vectorial residuals function to wrap\n      * @param observations observations to be compared to objective function to compute residuals\n      */\n-    public LeastSquaresConverter(final MultivariateVectorialFunction function,\n+    public LeastSquaresConverter(final MultivariateVectorFunction function,\n                                  final double[] observations) {\n         this.function     = function;\n         this.observations = observations.clone();\n      * vector dimensions do not match (objective function dimension is checked only when\n      * the {@link #value(double[])} method is called)\n      */\n-    public LeastSquaresConverter(final MultivariateVectorialFunction function,\n+    public LeastSquaresConverter(final MultivariateVectorFunction function,\n                                  final double[] observations, final double[] weights) {\n         if (observations.length != weights.length) {\n             throw new DimensionMismatchException(observations.length, weights.length);\n      * matrix dimensions do not match (objective function dimension is checked only when\n      * the {@link #value(double[])} method is called)\n      */\n-    public LeastSquaresConverter(final MultivariateVectorialFunction function,\n+    public LeastSquaresConverter(final MultivariateVectorFunction function,\n                                  final double[] observations, final RealMatrix scale) {\n         if (observations.length != scale.getColumnDimension()) {\n             throw new DimensionMismatchException(observations.length, scale.getColumnDimension());\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java\n \n package org.apache.commons.math.optimization;\n \n-import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction;\n import org.apache.commons.math.random.RandomVectorGenerator;\n \n /**\n  * @since 2.0\n  */\n public class MultiStartDifferentiableMultivariateVectorialOptimizer\n-    extends BaseMultiStartMultivariateVectorialOptimizer<DifferentiableMultivariateVectorialFunction>\n+    extends BaseMultiStartMultivariateVectorialOptimizer<DifferentiableMultivariateVectorFunction>\n     implements DifferentiableMultivariateVectorialOptimizer {\n     /**\n      * Create a multi-start optimizer from a single-start optimizer.\n--- a/src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java\n+++ b/src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java\n  * This class holds a point and the vectorial value of an objective function at this point.\n  * <p>This is a simple immutable container.</p>\n  * @see RealPointValuePair\n- * @see org.apache.commons.math.analysis.MultivariateVectorialFunction\n+ * @see org.apache.commons.math.analysis.MultivariateVectorFunction\n  * @version $Id$\n  * @since 2.0\n  */\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java\n import org.apache.commons.math.exception.TooManyEvaluationsException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.NullArgumentException;\n-import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.MultivariateVectorFunction;\n import org.apache.commons.math.optimization.BaseMultivariateVectorialOptimizer;\n import org.apache.commons.math.optimization.ConvergenceChecker;\n import org.apache.commons.math.optimization.VectorialPointValuePair;\n  * @version $Id$\n  * @since 3.0\n  */\n-public abstract class BaseAbstractVectorialOptimizer<FUNC extends MultivariateVectorialFunction>\n+public abstract class BaseAbstractVectorialOptimizer<FUNC extends MultivariateVectorFunction>\n     implements BaseMultivariateVectorialOptimizer<FUNC> {\n     /** Evaluations counter. */\n     protected final Incrementor evaluations = new Incrementor();\n     /** Initial guess. */\n     private double[] start;\n     /** Objective function. */\n-    private MultivariateVectorialFunction function;\n+    private MultivariateVectorFunction function;\n \n     /**\n      * Simple constructor with default settings.\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction;\n import org.apache.commons.math.analysis.ParametricUnivariateFunction;\n import org.apache.commons.math.analysis.MultivariateMatrixFunction;\n import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;\n \n     /** Vectorial function computing function theoretical values. */\n     private class TheoreticalValuesFunction\n-        implements DifferentiableMultivariateVectorialFunction {\n+        implements DifferentiableMultivariateVectorFunction {\n         /** Function to fit. */\n         private final ParametricUnivariateFunction f;\n \n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n \n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction;\n import org.apache.commons.math.analysis.MultivariateMatrixFunction;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.LUDecomposition;\n  * It handles the boilerplate methods associated to thresholds settings,\n  * jacobian and error estimation.\n  * <br/>\n- * This class uses the {@link DifferentiableMultivariateVectorialFunction#jacobian()}\n+ * This class uses the {@link DifferentiableMultivariateVectorFunction#jacobian()}\n  * of the function argument in method\n- * {@link #optimize(int,DifferentiableMultivariateVectorialFunction,double[],double[],double[])\n+ * {@link #optimize(int,DifferentiableMultivariateVectorFunction,double[],double[],double[])\n  * optimize} and assumes that, in the matrix returned by the\n  * {@link MultivariateMatrixFunction#value(double[]) value} method, the rows\n  * iterate on the model functions while the columns iterate on the parameters; thus,\n  * @since 1.2\n  */\n public abstract class AbstractLeastSquaresOptimizer\n-    extends BaseAbstractVectorialOptimizer<DifferentiableMultivariateVectorialFunction>\n+    extends BaseAbstractVectorialOptimizer<DifferentiableMultivariateVectorFunction>\n     implements DifferentiableMultivariateVectorialOptimizer {\n     /** Singularity threshold (cf. {@link #getCovariances(double)}). */\n     private static final double DEFAULT_SINGULARITY_THRESHOLD = 1e-14;\n     /** {@inheritDoc} */\n     @Override\n     public VectorialPointValuePair optimize(int maxEval,\n-                                            final DifferentiableMultivariateVectorialFunction f,\n+                                            final DifferentiableMultivariateVectorFunction f,\n                                             final double[] target, final double[] weights,\n                                             final double[] startPoint) {\n         // Reset counter.\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n package org.apache.commons.math.optimization.general;\n \n import org.apache.commons.math.analysis.DifferentiableMultivariateFunction;\n-import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.MultivariateVectorFunction;\n import org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.ConvergenceChecker;\n     /**\n      * Objective function gradient.\n      */\n-    private MultivariateVectorialFunction gradient;\n+    private MultivariateVectorFunction gradient;\n \n     /**\n      * Simple constructor with default settings.\n--- a/src/main/java/org/apache/commons/math/optimization/package-info.java\n+++ b/src/main/java/org/apache/commons/math/optimization/package-info.java\n  *      differentiable multivariate real functions}</li>\n  *  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer\n  *      DifferentiableMultivariateVectorialOptimizer} for {@link\n- *      org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction\n+ *      org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction\n  *      differentiable multivariate vectorial functions}</li>\n  * </ul>\n  * </p>\n  *\n  * <p>\n  * Despite there are only four types of supported optimizers, it is possible to optimize a\n- * transform a {@link org.apache.commons.math.analysis.MultivariateVectorialFunction\n+ * transform a {@link org.apache.commons.math.analysis.MultivariateVectorFunction\n  * non-differentiable multivariate vectorial function} by converting it to a {@link\n  * org.apache.commons.math.analysis.MultivariateFunction non-differentiable multivariate\n  * real function} thanks to the {@link\n--- a/src/test/java/org/apache/commons/math/analysis/SumSincFunction.java\n+++ b/src/test/java/org/apache/commons/math/analysis/SumSincFunction.java\n     /**                                                                            \n      * {@inheritDoc}\n      */\n-    public MultivariateVectorialFunction gradient() {\n-        return new MultivariateVectorialFunction() {\n+    public MultivariateVectorFunction gradient() {\n+        return new MultivariateVectorFunction() {\n             public double[] value(double[] point) {\n                 final int n = point.length;\n                 final double[] r = new double[n];\n--- a/src/test/java/org/apache/commons/math/optimization/BatteryNISTTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/BatteryNISTTest.java\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.analysis.DifferentiableMultivariateFunction;\n import org.apache.commons.math.analysis.MultivariateFunction;\n-import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.MultivariateVectorFunction;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.optimization.direct.BOBYQAOptimizer;\n import org.apache.commons.math.optimization.direct.PowellOptimizer;\n     /* base objective function class for these tests */\n     private abstract static class nistMVRF implements DifferentiableMultivariateFunction {\n         protected final MultivariateFunction[] mrf;\n-        protected final MultivariateVectorialFunction mvf = new MultivariateVectorialFunction() {\n+        protected final MultivariateVectorFunction mvf = new MultivariateVectorFunction() {\n \n             public double[] value(double[] point) throws IllegalArgumentException {\n                 return getGradient(point);\n             }\n         }\n \n-        public MultivariateVectorialFunction gradient() {\n+        public MultivariateVectorFunction gradient() {\n             return mvf;\n         }\n \n--- a/src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java\n \n import org.apache.commons.math.analysis.DifferentiableMultivariateFunction;\n import org.apache.commons.math.analysis.MultivariateFunction;\n-import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.MultivariateVectorFunction;\n import org.apache.commons.math.optimization.general.ConjugateGradientFormula;\n import org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer;\n import org.apache.commons.math.random.GaussianRandomGenerator;\n             return sum;\n         }\n \n-        public MultivariateVectorialFunction gradient() {\n-            return new MultivariateVectorialFunction() {\n+        public MultivariateVectorFunction gradient() {\n+            return new MultivariateVectorFunction() {\n                 public double[] value(double[] point) {\n                     return gradient(point);\n                 }\n--- a/src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java\n package org.apache.commons.math.optimization;\n \n \n-import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction;\n import org.apache.commons.math.analysis.MultivariateMatrixFunction;\n import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.linear.BlockRealMatrix;\n         MultiStartDifferentiableMultivariateVectorialOptimizer optimizer =\n             new MultiStartDifferentiableMultivariateVectorialOptimizer(underlyingOptimizer,\n                                                                        10, generator);\n-        optimizer.optimize(100, new DifferentiableMultivariateVectorialFunction() {\n+        optimizer.optimize(100, new DifferentiableMultivariateVectorFunction() {\n                 public MultivariateMatrixFunction jacobian() {\n                     return null;\n                 }\n         private static final long serialVersionUID = -7809988995389067683L;\n     }\n \n-    private static class LinearProblem implements DifferentiableMultivariateVectorialFunction {\n+    private static class LinearProblem implements DifferentiableMultivariateVectorFunction {\n \n         final RealMatrix factors;\n         final double[] target;\n--- a/src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java\n \n import org.apache.commons.math.exception.TooManyEvaluationsException;\n import org.apache.commons.math.analysis.MultivariateFunction;\n-import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.MultivariateVectorFunction;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.optimization.GoalType;\n                     { 1, 0 },\n                     { 0, 1 }\n                 }, false);\n-        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {\n+        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {\n                 public double[] value(double[] variables) {\n                     return factors.operate(variables);\n                 }\n                     { 1, 0 },\n                     { 0, 1 }\n                 }, false);\n-        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {\n+        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {\n                 public double[] value(double[] variables) {\n                     return factors.operate(variables);\n                 }\n                     { 1, 0 },\n                     { 0, 1 }\n                 }, false);\n-        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorialFunction() {\n+        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {\n                 public double[] value(double[] variables) {\n                     return factors.operate(variables);\n                 }\n--- a/src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java\n import java.util.ArrayList;\n import org.apache.commons.math.analysis.DifferentiableMultivariateFunction;\n import org.apache.commons.math.analysis.MultivariateFunction;\n-import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.MultivariateVectorFunction;\n \n /**\n  * Class used in the tests.\n         return sum;\n     }\n \n-    public MultivariateVectorialFunction gradient() {\n-        return new MultivariateVectorialFunction() {\n+    public MultivariateVectorFunction gradient() {\n+        return new MultivariateVectorFunction() {\n             public double[] value(double[] point) {\n                 return gradient(point);\n             }\n--- a/src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java\n \n import java.awt.geom.Point2D;\n import java.util.ArrayList;\n-import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction;\n import org.apache.commons.math.analysis.MultivariateMatrixFunction;\n \n /**\n  * Class used in the tests.\n  */\n-class CircleVectorial implements DifferentiableMultivariateVectorialFunction {\n+class CircleVectorial implements DifferentiableMultivariateVectorFunction {\n     private ArrayList<Point2D.Double> points;\n \n     public CircleVectorial() {\n--- a/src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java\n import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.TooManyEvaluationsException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction;\n import org.apache.commons.math.analysis.MultivariateMatrixFunction;\n import org.apache.commons.math.linear.BlockRealMatrix;\n import org.apache.commons.math.linear.RealMatrix;\n         Assert.assertEquals(0.04268731682389561, optimizer.getRMS(),       1.0e-8);\n     }\n \n-    private static class LinearProblem implements DifferentiableMultivariateVectorialFunction, Serializable {\n+    private static class LinearProblem implements DifferentiableMultivariateVectorFunction, Serializable {\n \n         private static final long serialVersionUID = -8804268799379350190L;\n         final RealMatrix factors;\n--- a/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.TooManyEvaluationsException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n-import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction;\n import org.apache.commons.math.analysis.MultivariateMatrixFunction;\n import org.apache.commons.math.linear.BlockRealMatrix;\n import org.apache.commons.math.linear.RealMatrix;\n         checkEstimate(circle, 0.1, 20, 1.0e-18, 1.0e-16, 1.0e-10, true);\n     }\n \n-    private void checkEstimate(DifferentiableMultivariateVectorialFunction problem,\n+    private void checkEstimate(DifferentiableMultivariateVectorFunction problem,\n                                double initialStepBoundFactor, int maxCostEval,\n                                double costRelativeTolerance, double parRelativeTolerance,\n                                double orthoTolerance, boolean shouldFail) {\n         }\n     }\n \n-    private static class LinearProblem implements DifferentiableMultivariateVectorialFunction, Serializable {\n+    private static class LinearProblem implements DifferentiableMultivariateVectorFunction, Serializable {\n \n         private static final long serialVersionUID = 703247177355019415L;\n         final RealMatrix factors;\n         }\n     }\n \n-    private static class QuadraticProblem implements DifferentiableMultivariateVectorialFunction, Serializable {\n+    private static class QuadraticProblem implements DifferentiableMultivariateVectorFunction, Serializable {\n \n         private static final long serialVersionUID = 7072187082052755854L;\n         private List<Double> x;\n--- a/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java\n \n \n import org.apache.commons.math.exception.TooManyEvaluationsException;\n-import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction;\n import org.apache.commons.math.analysis.MultivariateMatrixFunction;\n import org.apache.commons.math.optimization.VectorialPointValuePair;\n import org.apache.commons.math.util.FastMath;\n   }\n \n   private static abstract class MinpackFunction\n-      implements DifferentiableMultivariateVectorialFunction, Serializable {\n+      implements DifferentiableMultivariateVectorFunction, Serializable {\n \n       private static final long serialVersionUID = -6209760235478794233L;\n       protected int      n;\n--- a/src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java\n import java.io.Serializable;\n import org.apache.commons.math.analysis.DifferentiableMultivariateFunction;\n import org.apache.commons.math.analysis.MultivariateFunction;\n-import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.MultivariateVectorFunction;\n import org.apache.commons.math.analysis.solvers.BrentSolver;\n import org.apache.commons.math.linear.BlockRealMatrix;\n import org.apache.commons.math.linear.RealMatrix;\n             return sum;\n         }\n \n-        public MultivariateVectorialFunction gradient() {\n-            return new MultivariateVectorialFunction() {\n+        public MultivariateVectorFunction gradient() {\n+            return new MultivariateVectorFunction() {\n                 public double[] value(double[] point) {\n                     return gradient(point);\n                 }", "timestamp": 1322520101, "metainfo": ""}