{"sha": "3d67eb0485d141cde38b6ce69bcde889dd0acdb7", "log": "MATH-707 Class name change:   \"MultivariateRealOptimizer\" -> \"MultivariateOptimizer\"   \"DifferentiableMultivariateRealOptimizer\" -> \"DifferentiableMultivariateOptimizer\"   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultivariateOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateOptimizer.java\n  * Commons-FastMath. Users of the API are advised to base their code on\n  * the following interfaces:\n  * <ul>\n- *  <li>{@link org.apache.commons.math.optimization.MultivariateRealOptimizer}</li>\n- *  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer}</li>\n+ *  <li>{@link org.apache.commons.math.optimization.MultivariateOptimizer}</li>\n+ *  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateOptimizer}</li>\n  * </ul>\n  *\n  * @param <FUNC> Type of the objective function to be optimized.\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultivariateSimpleBoundsOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateSimpleBoundsOptimizer.java\n  * Commons-FastMath. Users of the API are advised to base their code on\n  * the following interfaces:\n  * <ul>\n- *  <li>{@link org.apache.commons.math.optimization.MultivariateRealOptimizer}</li>\n- *  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer}</li>\n+ *  <li>{@link org.apache.commons.math.optimization.MultivariateOptimizer}</li>\n+ *  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateOptimizer}</li>\n  * </ul>\n  *\n  * @param <FUNC> Type of the objective function to be optimized.\n--- a/src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java\n  * Commons-Math. Users of the API are advised to base their code on\n  * the following interfaces:\n  * <ul>\n- *  <li>{@link org.apache.commons.math.optimization.MultivariateRealOptimizer}</li>\n- *  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer}</li>\n+ *  <li>{@link org.apache.commons.math.optimization.MultivariateOptimizer}</li>\n+ *  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateOptimizer}</li>\n  *  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateVectorOptimizer}</li>\n  *  <li>{@link org.apache.commons.math.optimization.univariate.UnivariateRealOptimizer}</li>\n  * </ul>\n--- a/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateMultiStartOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateMultiStartOptimizer.java\n import org.apache.commons.math.random.RandomVectorGenerator;\n \n /**\n- * Special implementation of the {@link DifferentiableMultivariateRealOptimizer}\n+ * Special implementation of the {@link DifferentiableMultivariateOptimizer}\n  * interface adding multi-start features to an existing optimizer.\n  *\n  * This class wraps a classical optimizer to use it several times in\n  */\n public class DifferentiableMultivariateMultiStartOptimizer\n     extends BaseMultivariateMultiStartOptimizer<DifferentiableMultivariateFunction>\n-    implements DifferentiableMultivariateRealOptimizer {\n+    implements DifferentiableMultivariateOptimizer {\n     /**\n      * Create a multi-start optimizer from a single-start optimizer.\n      *\n      * equal to 1.\n      * @param generator Random vector generator to use for restarts.\n      */\n-    public DifferentiableMultivariateMultiStartOptimizer(final DifferentiableMultivariateRealOptimizer optimizer,\n+    public DifferentiableMultivariateMultiStartOptimizer(final DifferentiableMultivariateOptimizer optimizer,\n                                                              final int starts,\n                                                              final RandomVectorGenerator generator) {\n         super(optimizer, starts, generator);\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateOptimizer.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.optimization;\n+\n+import org.apache.commons.math.analysis.DifferentiableMultivariateFunction;\n+\n+/**\n+ * This interface represents an optimization algorithm for\n+ * {@link DifferentiableMultivariateFunction scalar differentiable objective\n+ * functions}.\n+ * Optimization algorithms find the input point set that either {@link GoalType\n+ * maximize or minimize} an objective function.\n+ *\n+ * @see MultivariateOptimizer\n+ * @see DifferentiableMultivariateVectorOptimizer\n+ *\n+ * @version $Id$\n+ * @since 2.0\n+ */\n+public interface DifferentiableMultivariateOptimizer\n+    extends BaseMultivariateOptimizer<DifferentiableMultivariateFunction> {}\n--- a/src/main/java/org/apache/commons/math/optimization/MultivariateMultiStartOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultivariateMultiStartOptimizer.java\n import org.apache.commons.math.random.RandomVectorGenerator;\n \n /**\n- * Special implementation of the {@link MultivariateRealOptimizer} interface adding\n+ * Special implementation of the {@link MultivariateOptimizer} interface adding\n  * multi-start features to an existing optimizer.\n  *\n  * This class wraps a classical optimizer to use it several times in\n  */\n public class MultivariateMultiStartOptimizer\n     extends BaseMultivariateMultiStartOptimizer<MultivariateFunction>\n-    implements MultivariateRealOptimizer {\n+    implements MultivariateOptimizer {\n     /**\n      * Create a multi-start optimizer from a single-start optimizer.\n      *\n      * equal to 1.\n      * @param generator Random vector generator to use for restarts.\n      */\n-    public MultivariateMultiStartOptimizer(final MultivariateRealOptimizer optimizer,\n+    public MultivariateMultiStartOptimizer(final MultivariateOptimizer optimizer,\n                                                final int starts,\n                                                final RandomVectorGenerator generator) {\n         super(optimizer, starts, generator);\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/optimization/MultivariateOptimizer.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.optimization;\n+\n+import org.apache.commons.math.analysis.MultivariateFunction;\n+\n+/**\n+ * This interface represents an optimization algorithm for {@link MultivariateFunction\n+ * scalar objective functions}.\n+ * <p>Optimization algorithms find the input point set that either {@link GoalType\n+ * maximize or minimize} an objective function.</p>\n+ *\n+ * @see DifferentiableMultivariateOptimizer\n+ * @see DifferentiableMultivariateVectorOptimizer\n+ * @version $Id$\n+ * @since 2.0\n+ */\n+public interface MultivariateOptimizer\n+    extends BaseMultivariateOptimizer<MultivariateFunction> {}\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n import org.apache.commons.math.linear.RealVector;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.RealPointValuePair;\n-import org.apache.commons.math.optimization.MultivariateRealOptimizer;\n+import org.apache.commons.math.optimization.MultivariateOptimizer;\n \n /**\n  * Powell's BOBYQA algorithm. This implementation is translated and\n  */\n public class BOBYQAOptimizer\n     extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>\n-    implements MultivariateRealOptimizer {\n+    implements MultivariateOptimizer {\n     /** Minimum dimension of the problem: {@value} */\n     public static final int MINIMUM_PROBLEM_DIMENSION = 2;\n     /** Default value for {@link #initialTrustRegionRadius}: {@value} . */\n--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.optimization.ConvergenceChecker;\n import org.apache.commons.math.optimization.GoalType;\n-import org.apache.commons.math.optimization.MultivariateRealOptimizer;\n+import org.apache.commons.math.optimization.MultivariateOptimizer;\n import org.apache.commons.math.optimization.RealPointValuePair;\n import org.apache.commons.math.optimization.SimpleScalarValueChecker;\n import org.apache.commons.math.random.MersenneTwister;\n \n public class CMAESOptimizer\n     extends BaseAbstractMultivariateOptimizer<MultivariateFunction>\n-    implements MultivariateRealOptimizer {\n+    implements MultivariateOptimizer {\n     /** Default value for {@link #checkFeasableCount}: {@value}. */\n     public static final int DEFAULT_CHECKFEASABLECOUNT = 0;\n     /** Default value for {@link #stopFitness}: {@value}. */\n--- a/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.RealPointValuePair;\n import org.apache.commons.math.optimization.ConvergenceChecker;\n-import org.apache.commons.math.optimization.MultivariateRealOptimizer;\n+import org.apache.commons.math.optimization.MultivariateOptimizer;\n import org.apache.commons.math.optimization.univariate.BracketFinder;\n import org.apache.commons.math.optimization.univariate.BrentOptimizer;\n import org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair;\n  */\n public class PowellOptimizer\n     extends BaseAbstractMultivariateOptimizer<MultivariateFunction>\n-    implements MultivariateRealOptimizer {\n+    implements MultivariateOptimizer {\n     /**\n      * Minimum relative tolerance.\n      */\n--- a/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java\n import org.apache.commons.math.optimization.ConvergenceChecker;\n import org.apache.commons.math.optimization.RealPointValuePair;\n import org.apache.commons.math.optimization.SimpleScalarValueChecker;\n-import org.apache.commons.math.optimization.MultivariateRealOptimizer;\n+import org.apache.commons.math.optimization.MultivariateOptimizer;\n \n /**\n  * This class implements simplex-based direct search optimization.\n  */\n public class SimplexOptimizer\n     extends BaseAbstractMultivariateOptimizer<MultivariateFunction>\n-    implements MultivariateRealOptimizer {\n+    implements MultivariateOptimizer {\n     /** Simplex. */\n     private AbstractSimplex simplex;\n \n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n \n import org.apache.commons.math.analysis.DifferentiableMultivariateFunction;\n import org.apache.commons.math.analysis.MultivariateVectorFunction;\n-import org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer;\n+import org.apache.commons.math.optimization.DifferentiableMultivariateOptimizer;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.ConvergenceChecker;\n import org.apache.commons.math.optimization.RealPointValuePair;\n  */\n public abstract class AbstractScalarDifferentiableOptimizer\n     extends BaseAbstractMultivariateOptimizer<DifferentiableMultivariateFunction>\n-    implements DifferentiableMultivariateRealOptimizer {\n+    implements DifferentiableMultivariateOptimizer {\n     /**\n      * Objective function gradient.\n      */\n--- a/src/main/java/org/apache/commons/math/optimization/package-info.java\n+++ b/src/main/java/org/apache/commons/math/optimization/package-info.java\n  *  <li>{@link org.apache.commons.math.optimization.univariate.UnivariateRealOptimizer\n  *      UnivariateRealOptimizer} for {@link org.apache.commons.math.analysis.UnivariateFunction\n  *      univariate real functions}</li>\n- *  <li>{@link org.apache.commons.math.optimization.MultivariateRealOptimizer\n- *      MultivariateRealOptimizer} for {@link org.apache.commons.math.analysis.MultivariateFunction\n+ *  <li>{@link org.apache.commons.math.optimization.MultivariateOptimizer\n+ *      MultivariateOptimizer} for {@link org.apache.commons.math.analysis.MultivariateFunction\n  *      multivariate real functions}</li>\n- *  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer\n- *      DifferentiableMultivariateRealOptimizer} for {@link\n+ *  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateOptimizer\n+ *      DifferentiableMultivariateOptimizer} for {@link\n  *      org.apache.commons.math.analysis.DifferentiableMultivariateFunction\n  *      differentiable multivariate real functions}</li>\n  *  <li>{@link org.apache.commons.math.optimization.DifferentiableMultivariateVectorOptimizer\n  * real function} thanks to the {@link\n  * org.apache.commons.math.optimization.LeastSquaresConverter LeastSquaresConverter} helper class.\n  * The transformed function can be optimized using any implementation of the {@link\n- * org.apache.commons.math.optimization.MultivariateRealOptimizer MultivariateRealOptimizer} interface.\n+ * org.apache.commons.math.optimization.MultivariateOptimizer MultivariateOptimizer} interface.\n  * </p>\n  *\n  * <p>\n--- a/src/test/java/org/apache/commons/math/optimization/BatteryNISTTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/BatteryNISTTest.java\n     }\n     \n     /* generic test runner */\n-    private double[] run(MultivariateRealOptimizer optim, DifferentiableMultivariateFunction func, double[] start) {\n+    private double[] run(MultivariateOptimizer optim, DifferentiableMultivariateFunction func, double[] start) {\n         return (optim.optimize(1000000, func, GoalType.MINIMIZE, start).getPointRef());\n     }\n     /* generic test runner for AbstractScalarDifferentiableOptimizer */\n--- a/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java\n         System.out.println(func.getClass().getName() + \" BEGIN\"); // XXX\n \n         int dim = startPoint.length;\n-//        MultivariateRealOptimizer optim =\n+//        MultivariateOptimizer optim =\n //            new PowellOptimizer(1e-13, Math.ulp(1d));\n //        RealPointValuePair result = optim.optimize(100000, func, goal, startPoint);\n         final double[] lB = boundaries == null ? null : boundaries[0];\n--- a/src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.optimization.GoalType;\n-import org.apache.commons.math.optimization.MultivariateRealOptimizer;\n+import org.apache.commons.math.optimization.MultivariateOptimizer;\n import org.apache.commons.math.optimization.RealPointValuePair;\n import org.apache.commons.math.random.MersenneTwister;\n import org.junit.Assert;\n             RealPointValuePair expected) {\n         int dim = startPoint.length;\n         // test diagonalOnly = 0 - slow but normally fewer feval#\n-        MultivariateRealOptimizer optim =\n+        MultivariateOptimizer optim =\n             new CMAESOptimizer(\n                     lambda, inSigma, boundaries, 30000,\n                     stopValue, isActive, diagonalOnly, 0, new MersenneTwister(),false);\n--- a/src/test/java/org/apache/commons/math/optimization/direct/PowellOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/direct/PowellOptimizerTest.java\n import org.apache.commons.math.analysis.MultivariateFunction;\n import org.apache.commons.math.analysis.SumSincFunction;\n import org.apache.commons.math.optimization.GoalType;\n-import org.apache.commons.math.optimization.MultivariateRealOptimizer;\n+import org.apache.commons.math.optimization.MultivariateOptimizer;\n import org.apache.commons.math.optimization.RealPointValuePair;\n import org.junit.Assert;\n import org.junit.Test;\n                         GoalType goal,\n                         double fTol,\n                         double pointTol) {\n-        final MultivariateRealOptimizer optim = new PowellOptimizer(fTol, Math.ulp(1d));\n+        final MultivariateOptimizer optim = new PowellOptimizer(fTol, Math.ulp(1d));\n \n         final RealPointValuePair result = optim.optimize(1000, func, goal, init);\n         final double[] found = result.getPoint();", "timestamp": 1323434570, "metainfo": ""}