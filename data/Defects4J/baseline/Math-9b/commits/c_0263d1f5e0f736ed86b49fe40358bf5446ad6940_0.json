{"sha": "0263d1f5e0f736ed86b49fe40358bf5446ad6940", "log": "improved test coverage (now somewhere between 99% and 100%)  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n         assertEquals(\"testData len\", 3, v3.getDimension());\n         assertEquals(\"testData is 2.0 \", 2.0, v3.getEntry(1));\n \n+        ArrayRealVector v3_bis = new ArrayRealVector(vec1, true);\n+        assertEquals(\"testData len\", 3, v3_bis.getDimension());\n+        assertEquals(\"testData is 2.0 \", 2.0, v3_bis.getEntry(1));\n+        assertNotSame(v3_bis.getDataRef(), vec1);\n+        assertNotSame(v3_bis.getData(), vec1);\n+\n+        ArrayRealVector v3_ter = new ArrayRealVector(vec1, false);\n+        assertEquals(\"testData len\", 3, v3_ter.getDimension());\n+        assertEquals(\"testData is 2.0 \", 2.0, v3_ter.getEntry(1));\n+        assertSame(v3_ter.getDataRef(), vec1);\n+        assertNotSame(v3_ter.getData(), vec1);\n+\n         ArrayRealVector v4 = new ArrayRealVector(vec4, 3, 2);\n         assertEquals(\"testData len\", 2, v4.getDimension());\n         assertEquals(\"testData is 4.0 \", 4.0, v4.getEntry(0));\n         assertEquals(\"testData len\", 10, v9.getDimension());\n         assertEquals(\"testData is 1.0 \", 1.0, v9.getEntry(7));\n \n-    }\n+        ArrayRealVector v10 = new ArrayRealVector(v2, new RealVectorTestImpl(vec3));\n+        assertEquals(\"testData len\", 8, v10.getDimension());\n+        assertEquals(\"testData is 1.23 \", 1.23, v10.getEntry(4));\n+        assertEquals(\"testData is 7.0 \", 7.0, v10.getEntry(5));\n+\n+        ArrayRealVector v11 = new ArrayRealVector(new RealVectorTestImpl(vec3), v2);\n+        assertEquals(\"testData len\", 8, v11.getDimension());\n+        assertEquals(\"testData is 9.0 \", 9.0, v11.getEntry(2));\n+        assertEquals(\"testData is 1.23 \", 1.23, v11.getEntry(3));\n+\n+        ArrayRealVector v12 = new ArrayRealVector(v2, vec3);\n+        assertEquals(\"testData len\", 8, v12.getDimension());\n+        assertEquals(\"testData is 1.23 \", 1.23, v12.getEntry(4));\n+        assertEquals(\"testData is 7.0 \", 7.0, v12.getEntry(5));\n+\n+        ArrayRealVector v13 = new ArrayRealVector(vec3, v2);\n+        assertEquals(\"testData len\", 8, v13.getDimension());\n+        assertEquals(\"testData is 9.0 \", 9.0, v13.getEntry(2));\n+        assertEquals(\"testData is 1.23 \", 1.23, v13.getEntry(3));\n+\n+        ArrayRealVector v14 = new ArrayRealVector(vec3, vec4);\n+        assertEquals(\"testData len\", 12, v14.getDimension());\n+        assertEquals(\"testData is 9.0 \", 9.0, v14.getEntry(2));\n+        assertEquals(\"testData is 1.0 \", 1.0, v14.getEntry(3));\n+\n+        try {\n+            new ArrayRealVector((double[]) null, false);\n+            fail(\"expected exception\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n+        }\n+\n+        try {\n+            new ArrayRealVector(new double[0], false);\n+            fail(\"expected exception\");\n+        } catch (IllegalArgumentException iae) {\n+            // expected\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n+        }\n+\n+   }\n \n     public void testDataInOut() {\n \n         RealVector v_append_4 = v1.append(v2_t);\n         assertEquals(\"testData len\", 6, v_append_4.getDimension());\n         assertEquals(\"testData is 4.0 \", 4.0, v_append_4.getEntry(3));\n+\n+        RealVector v_append_5 = v1.append((RealVector) v2);\n+        assertEquals(\"testData len\", 6, v_append_5.getDimension());\n+        assertEquals(\"testData is 4.0 \", 4.0, v_append_5.getEntry(3));\n \n         RealVector v_copy = v1.copy();\n         assertEquals(\"testData len\", 3, v_copy.getDimension());\n         double dist_2 = v1.getDistance(v2_t);\n         assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );\n \n+        //octave =  sqrt(sumsq(v1-v2))\n+        double dist_3 = v1.getDistance((RealVector) v2);\n+        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );\n+\n         //octave =  ???\n         double d_getL1Distance = v1. getL1Distance(v2);\n         assertEquals(\"compare values  \",9d, d_getL1Distance );\n         double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n         assertEquals(\"compare values  \",9d, d_getL1Distance_2 );\n \n+        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n+        assertEquals(\"compare values  \",9d, d_getL1Distance_3 );\n+\n         //octave =  ???\n         double d_getLInfDistance = v1. getLInfDistance(v2);\n         assertEquals(\"compare values  \",3d, d_getLInfDistance );\n \n         double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n         assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );\n+\n+        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n+        assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );\n \n         //octave =  v1 + v2\n         ArrayRealVector v_add = v1.add(v2);\n         double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n         assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);\n \n+        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n+        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n+        assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);\n+\n         // octave v1 ./ v2\n         ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n         double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n         double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n         assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);\n \n+        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n+        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n+        assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);\n+\n         // octave  dot(v1,v2)\n         double dot =  v1.dotProduct(v2);\n         assertEquals(\"compare val \",32d, dot);\n \n         RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n         assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));\n+\n+        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n+        assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));\n \n         RealVector v_unitVector = v1.unitVector();\n         RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n         RealVector v_projection_2 = v1.projection(v2_t);\n         double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n         assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);\n+\n+        RealVector v_projection_3 = v1.projection(v2.getData());\n+        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n+        assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);\n \n     }\n \n         assertFalse(v.isInfinite());\n         v.setEntry(1, 1);\n         assertTrue(v.isInfinite());\n+        v.setEntry(0, 1);\n+        assertFalse(v.isInfinite());\n \n         v.setEntry(0, 0);\n         assertEquals(v, new ArrayRealVector(new double[] { 0, 1, 2 }));\n \n         assertTrue(new ArrayRealVector(new double[] { Double.NaN, 1, 2 }).hashCode() !=\n                    new ArrayRealVector(new double[] { 0, 1, 2 }).hashCode());\n+\n+        assertTrue(v.equals(v));\n+        assertTrue(v.equals(v.copy()));\n+        assertFalse(v.equals(null));\n+        assertFalse(v.equals(v.getDataRef()));\n+        assertFalse(v.equals(v.getSubVector(0, v.getDimension() - 1)));\n+        assertTrue(v.equals(v.getSubVector(0, v.getDimension())));\n \n     }\n ", "timestamp": 1262013803, "metainfo": ""}