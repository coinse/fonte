{"sha": "6722abd0842ab42b75e5131aaee737b3b27f7710", "log": "Serializable changes for linear.decomposition  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/decomposition/BiDiagonalTransformer.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/BiDiagonalTransformer.java\n \n package org.apache.commons.math.linear.decomposition;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealMatrix;\n \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-class BiDiagonalTransformer implements Serializable {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 8935390784125343332L;\n+class BiDiagonalTransformer {\n \n     /** Householder vectors. */\n     private final double householderVectors[][];\n--- a/src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java\n \n package org.apache.commons.math.linear.decomposition;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.linear.InvalidMatrixException;\n import org.apache.commons.math.linear.MatrixUtils;\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class CholeskyDecompositionImpl implements CholeskyDecomposition, Serializable {\n-    // TODO: Add Serializable documentation\n-    // TODO: Check Serializable implementation\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -2036131698031167221L;\n+public class CholeskyDecompositionImpl implements CholeskyDecomposition {\n \n     /** Default threshold above which off-diagonal elements are considered too different\n      * and matrix not symmetric. */\n     }\n \n     /** Specialized solver. */\n-    private static class Solver implements DecompositionSolver, Serializable {\n-        // TODO: Add Serializable documentation\n-        // TODO: Check Serializable implementation\n-\n-        /** Serializable version identifier. */\n-        private static final long serialVersionUID = -7288829864732555901L;\n-\n+    private static class Solver implements DecompositionSolver {\n+    \n         /** Row-oriented storage for L<sup>T</sup> matrix data. */\n         private final double[][] lTData;\n \n--- a/src/java/org/apache/commons/math/linear/decomposition/EigenDecomposition.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/EigenDecomposition.java\n  */\n \n package org.apache.commons.math.linear.decomposition;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.RealVector;\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface EigenDecomposition extends Serializable {\n+public interface EigenDecomposition {\n \n     /**\n      * Returns the matrix V of the decomposition. \n--- a/src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java\n \n package org.apache.commons.math.linear.decomposition;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n  */\n public class EigenDecompositionImpl implements EigenDecomposition {\n \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 1625101476333719659L;\n-\n     /** Tolerance. */\n     private static final double TOLERANCE = 100 * MathUtils.EPSILON;\n \n     }\n \n     /** Specialized solver. */\n-    private static class Solver implements DecompositionSolver, Serializable {\n-        // TODO: Add Serializable documentation\n-        // TODO: Check Serializable implementation\n-\n-        /** Serializable version identifier. */\n-        private static final long serialVersionUID = -8965845906036558410L;\n-\n+    private static class Solver implements DecompositionSolver {\n+    \n         /** Real part of the realEigenvalues. */\n         private double[] realEigenvalues;\n \n--- a/src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java\n  */\n \n package org.apache.commons.math.linear.decomposition;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.linear.FieldMatrix;\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface FieldDecompositionSolver<T extends FieldElement<T>> extends Serializable {\n+public interface FieldDecompositionSolver<T extends FieldElement<T>> {\n \n     /** Solve the linear equation A &times; X = B for matrices A.\n      * <p>The A matrix is implicit, it is provided by the underlying\n--- a/src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java\n  */\n \n package org.apache.commons.math.linear.decomposition;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.FieldElement;\n import org.apache.commons.math.linear.FieldMatrix;\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface FieldLUDecomposition<T extends FieldElement<T>> extends Serializable {\n+public interface FieldLUDecomposition<T extends FieldElement<T>> {\n \n     /**\n      * Returns the matrix L of the decomposition. \n--- a/src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java\n  */\n public class FieldLUDecompositionImpl<T extends FieldElement<T>> implements FieldLUDecomposition<T> {\n \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 1954692554563387537L;\n-\n     /** Field to which the elements belong. */\n     private final Field<T> field;\n \n--- a/src/java/org/apache/commons/math/linear/decomposition/LUDecomposition.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/LUDecomposition.java\n  */\n \n package org.apache.commons.math.linear.decomposition;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.linear.RealMatrix;\n \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface LUDecomposition extends Serializable {\n+public interface LUDecomposition {\n \n     /**\n      * Returns the matrix L of the decomposition. \n--- a/src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java\n \n package org.apache.commons.math.linear.decomposition;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.linear.InvalidMatrixException;\n import org.apache.commons.math.linear.MatrixUtils;\n  */\n public class LUDecompositionImpl implements LUDecomposition {\n \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 1954692554563387537L;\n-\n     /** Entries of LU decomposition. */\n     private double lu[][];\n \n     }\n \n     /** Specialized solver. */\n-    private static class Solver implements DecompositionSolver, Serializable {\n-        // TODO: Add Serializable documentation\n-        // TODO: Check Serializable implementation\n-\n-        /** Serializable version identifier. */\n-        private static final long serialVersionUID = -6353105415121373022L;\n-\n+    private static class Solver implements DecompositionSolver {\n+    \n         /** Entries of LU decomposition. */\n         private final double lu[][];\n \n--- a/src/java/org/apache/commons/math/linear/decomposition/QRDecomposition.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/QRDecomposition.java\n  */\n \n package org.apache.commons.math.linear.decomposition;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.linear.RealMatrix;\n \n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-public interface QRDecomposition extends Serializable {\n+public interface QRDecomposition {\n \n     /**\n      * Returns the matrix R of the decomposition. \n--- a/src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java\n \n package org.apache.commons.math.linear.decomposition;\n \n-import java.io.Serializable;\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n  */\n public class QRDecompositionImpl implements QRDecomposition {\n \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -2036131698031167221L;\n-\n     /**\n      * A packed TRANSPOSED representation of the QR decomposition.\n      * <p>The elements BELOW the diagonal are the elements of the UPPER triangular\n     }\n \n     /** Specialized solver. */\n-    private static class Solver implements DecompositionSolver, Serializable {\n-        // TODO: Add Serializable documentation\n-        // TODO: Check Serializable implementation\n-\n-        /** Serializable version identifier. */\n-        private static final long serialVersionUID = -6353105415121373022L;\n-\n+    private static class Solver implements DecompositionSolver {\n+    \n         /**\n          * A packed TRANSPOSED representation of the QR decomposition.\n          * <p>The elements BELOW the diagonal are the elements of the UPPER triangular\n--- a/src/java/org/apache/commons/math/linear/decomposition/SingularValueDecomposition.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/SingularValueDecomposition.java\n  */\n \n package org.apache.commons.math.linear.decomposition;\n-\n-import java.io.Serializable;\n \n import org.apache.commons.math.linear.RealMatrix;\n \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface SingularValueDecomposition extends Serializable {\n+public interface SingularValueDecomposition {\n \n     /**\n      * Returns the matrix U of the decomposition. \n--- a/src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java\n \n package org.apache.commons.math.linear.decomposition;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.linear.InvalidMatrixException;\n  * @since 2.0\n  */\n public class SingularValueDecompositionImpl implements SingularValueDecomposition {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -3532767302235568872L;\n \n     /** Number of rows of the initial matrix. */\n     private int m;\n     }\n \n     /** Specialized solver. */\n-    private static class Solver implements DecompositionSolver, Serializable {\n-        // TODO: Add Serializable documentation\n-        // TODO: Check Serializable implementation\n-\n-        /** Serializable version identifier. */\n-        private static final long serialVersionUID = -1959408026708904378L;\n-\n+    private static class Solver implements DecompositionSolver {\n+        \n         /** Singular values. */\n         private final double[] singularValues;\n \n--- a/src/java/org/apache/commons/math/linear/decomposition/TriDiagonalTransformer.java\n+++ b/src/java/org/apache/commons/math/linear/decomposition/TriDiagonalTransformer.java\n \n package org.apache.commons.math.linear.decomposition;\n \n-import java.io.Serializable;\n import java.util.Arrays;\n \n import org.apache.commons.math.linear.InvalidMatrixException;\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-class TriDiagonalTransformer implements Serializable {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 8935390784125343332L;\n+class TriDiagonalTransformer {\n \n     /** Householder vectors. */\n     private final double householderVectors[][];", "timestamp": 1243287998, "metainfo": ""}