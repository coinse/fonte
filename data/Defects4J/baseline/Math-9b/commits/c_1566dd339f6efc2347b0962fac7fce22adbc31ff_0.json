{"sha": "1566dd339f6efc2347b0962fac7fce22adbc31ff", "log": "[MATH-836] Improve overflow check for negative values in Fraction constructor.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n         long overflow = Integer.MAX_VALUE;\n         double r0 = value;\n         long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n+        if (FastMath.abs(a0) > overflow) {\n             throw new FractionConversionException(value, a0, 1l);\n         }\n \n             long a1 = (long)FastMath.floor(r1);\n             p2 = (a1 * p1) + p0;\n             q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n+            if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n--- a/src/test/java/org/apache/commons/math3/fraction/FractionTest.java\n+++ b/src/test/java/org/apache/commons/math3/fraction/FractionTest.java\n         } catch (MathArithmeticException ex) {\n             // success\n         }\n+\n         assertFraction(0, 1, new Fraction(0.00000000000001));\n         assertFraction(2, 5, new Fraction(0.40000000000001));\n         assertFraction(15, 1, new Fraction(15.0000000000001));\n     public void testIntegerOverflow() {\n         checkIntegerOverflow(0.75000000001455192);\n         checkIntegerOverflow(1.0e10);\n+        checkIntegerOverflow(-1.0e10);\n+        checkIntegerOverflow(-43979.60679604749);\n     }\n \n     private void checkIntegerOverflow(double a) {", "timestamp": 1343856267, "metainfo": ""}