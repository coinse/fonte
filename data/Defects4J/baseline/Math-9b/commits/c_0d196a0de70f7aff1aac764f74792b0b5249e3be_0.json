{"sha": "0d196a0de70f7aff1aac764f74792b0b5249e3be", "log": "Fixed javadoc typos.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java\n+++ b/src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java\n  * interesting case is when the generated vector should be drawn from a <a\n  * href=\"http://en.wikipedia.org/wiki/Multivariate_normal_distribution\">\n  * Multivariate Normal Distribution</a>. The approach using a Cholesky\n- * decomposition is quite usual in this case. However, it cas be extended\n+ * decomposition is quite usual in this case. However, it can be extended\n  * to other cases as long as the underlying random generator provides\n  * {@link NormalizedRandomGenerator normalized values} like {@link\n  * GaussianRandomGenerator} or {@link UniformRandomGenerator}.</p>\n  * should be null. Another non-conventional extension handling this case\n  * is used here. Rather than computing <code>C = U<sup>T</sup>.U</code>\n  * where <code>C</code> is the covariance matrix and <code>U</code>\n- * is an uppertriangular matrix, we compute <code>C = B.B<sup>T</sup></code>\n+ * is an upper-triangular matrix, we compute <code>C = B.B<sup>T</sup></code>\n  * where <code>B</code> is a rectangular matrix having\n  * more rows than columns. The number of columns of <code>B</code> is\n  * the rank of the covariance matrix, and it is the dimension of the", "timestamp": 1291895594, "metainfo": ""}