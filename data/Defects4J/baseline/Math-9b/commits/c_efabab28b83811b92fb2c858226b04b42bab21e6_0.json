{"sha": "efabab28b83811b92fb2c858226b04b42bab21e6", "log": "More serialization changes.  Not clear what I should do with RandomAdaptor.  So I've let it remained broken (no public no-opt construtor, but Serializable).  Feel free to -1 anything that I've stripped Serializable from and you care about, but I think I've been pretty conservative.   ", "commit": "\n--- a/src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java\n  *\n  */\n public abstract class AbstractLinearOptimizer implements LinearOptimizer {\n-\n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 8581325080951819398L;\n \n     /** Default maximal number of iterations allowed. */\n     public static final int DEFAULT_MAX_ITERATIONS = 100;\n--- a/src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface LinearOptimizer extends Serializable {\n+public interface LinearOptimizer {\n \n     /** Set the maximal number of iterations of the algorithm.\n      * @param maxIterations maximal number of function calls\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n  * @since 2.0\n  */\n public class SimplexSolver extends AbstractLinearOptimizer {\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -4886937648715323786L;\n \n     /** Default amount of error to accept in floating point comparisons. */ \n     private static final double DEFAULT_EPSILON = 1.0e-6;\n--- a/src/java/org/apache/commons/math/random/AbstractRandomGenerator.java\n+++ b/src/java/org/apache/commons/math/random/AbstractRandomGenerator.java\n  */\n public abstract class AbstractRandomGenerator implements RandomGenerator {\n     \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 7026539017027693474L;\n-\n     /** \n      * Cached random normal value.  The default implementation for \n      * {@link #nextGaussian} generates pairs of values and this field caches the\n--- a/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java\n+++ b/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java\n public class CorrelatedRandomVectorGenerator\n     implements RandomVectorGenerator {\n \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -7162933284241468177L;\n-\n     /** Simple constructor.\n      * <p>Build a correlated random vector generator from its mean\n      * vector and covariance matrix.</p>\n--- a/src/java/org/apache/commons/math/random/GaussianRandomGenerator.java\n+++ b/src/java/org/apache/commons/math/random/GaussianRandomGenerator.java\n \n public class GaussianRandomGenerator implements NormalizedRandomGenerator {\n \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -4698731518385853565L;\n-\n     /** Create a new generator.\n      * @param generator underlying random generator to use\n      */\n--- a/src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java\n+++ b/src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java\n \n package org.apache.commons.math.random;\n \n-import java.io.Serializable;\n-\n /** \n  * This interface represent a normalized random generator for\n  * scalars.\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-public interface NormalizedRandomGenerator extends Serializable {\n+public interface NormalizedRandomGenerator {\n \n   /** Generate a random scalar with null mean and unit standard deviation.\n    * <p>This method does <strong>not</strong> specify the shape of the\n--- a/src/java/org/apache/commons/math/random/RandomData.java\n+++ b/src/java/org/apache/commons/math/random/RandomData.java\n  * Random data generation utilities.\n  * @version $Revision$ $Date$\n  */\n-public interface RandomData extends Serializable {\n+public interface RandomData {\n     /**\n      * Generates a random string of hex characters of length\n      * <code>len</code>.\n--- a/src/java/org/apache/commons/math/random/RandomGenerator.java\n+++ b/src/java/org/apache/commons/math/random/RandomGenerator.java\n  * @since 1.1\n  * @version $Revision$ $Date$\n  */\n-public interface RandomGenerator extends Serializable {\n+public interface RandomGenerator {\n     \n     /**\n      * Sets the seed of the underyling random number generator using a \n--- a/src/java/org/apache/commons/math/random/RandomVectorGenerator.java\n+++ b/src/java/org/apache/commons/math/random/RandomVectorGenerator.java\n  *\n  */\n \n-public interface RandomVectorGenerator extends Serializable {\n+public interface RandomVectorGenerator {\n \n   /** Generate a random vector.\n    * @return a random vector as an array of double.\n--- a/src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java\n+++ b/src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java\n \n public class UncorrelatedRandomVectorGenerator\n   implements RandomVectorGenerator {\n-\n-  /** Serializable version identifier. */\n-  private static final long serialVersionUID = -3268228248001718811L;\n \n   /** Simple constructor.\n    * <p>Build an uncorrelated random vector generator from\n--- a/src/java/org/apache/commons/math/special/Beta.java\n+++ b/src/java/org/apache/commons/math/special/Beta.java\n  */\n package org.apache.commons.math.special;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.util.ContinuedFraction;\n \n  *\n  * @version $Revision$ $Date$\n  */\n-public class Beta implements Serializable {\n-\n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = -3833485397404128220L;\n+public class Beta {\n \n     /** Maximum allowed numerical error. */\n     private static final double DEFAULT_EPSILON = 10e-15;\n--- a/src/java/org/apache/commons/math/special/Erf.java\n+++ b/src/java/org/apache/commons/math/special/Erf.java\n  */\n package org.apache.commons.math.special;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.MathException;\n \n /**\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Erf implements Serializable {\n-\n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 490960015010326571L;\n+public class Erf {\n \n     /**\n      * Default constructor.  Prohibit instantiation.\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public class Gamma {\n     \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = -6587513359895466954L;\n-\n     /** \n      * <a href=\"http://en.wikipedia.org/wiki/Euler-Mascheroni_constant\">Euler-Mascheroni constant</a>\n      * @since 2.0\n--- a/src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java\n+++ b/src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java\n import java.util.ArrayList;\n import java.util.Collection;\n \n+import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.optimization.GoalType;\n \n import junit.framework.TestCase;\n         assertMatrixEquals(initialTableau, tableau.getData());\n     }\n \n+    public void testSerial() {\n+        LinearObjectiveFunction f = createFunction();\n+        Collection<LinearConstraint> constraints = createConstraints();\n+        SimplexTableau tableau =\n+            new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false, 1.0e-6);\n+        assertEquals(tableau, TestUtils.serializeAndRecover(tableau));\n+    }\n     private LinearObjectiveFunction createFunction() {\n         return new LinearObjectiveFunction(new double[] {15, 10}, 0);\n     }\n--- a/src/test/org/apache/commons/math/random/RandomAdaptorTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomAdaptorTest.java\n      */\n     private static class ConstantGenerator implements RandomGenerator {\n         \n-        private static final long serialVersionUID = 5936262220824971138L;\n-\n         public boolean nextBoolean() {\n             return false;\n         }\n--- a/src/test/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n \n \t\t}\n \t}\n-\n+\t\n+\t\n \tprivate int findPerm(int[][] p, int[] samp) {\n \t\tfor (int i = 0; i < p.length; i++) {\n \t\t\tboolean good = true;\n--- a/src/test/org/apache/commons/math/random/TestRandomGenerator.java\n+++ b/src/test/org/apache/commons/math/random/TestRandomGenerator.java\n  */\n public class TestRandomGenerator extends AbstractRandomGenerator {\n \n-    private static final long serialVersionUID = -9161426374178114548L;\n     private Random random = new Random();\n \n     @Override\n--- a/src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java\n+++ b/src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java\n         assertEquals(0.0, StatUtils.mean(sample), 0.07);\n         assertEquals(1.0, StatUtils.variance(sample), 0.02);\n     }\n-\n+    \n+    \n     public static Test suite() {\n         return new TestSuite(UniformRandomGeneratorTest.class);\n     }", "timestamp": 1243917552, "metainfo": ""}