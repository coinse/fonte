{"sha": "845ace0b5c8ddfd92b21843f39310032c86040d3", "log": "fixed message building so the behavior matches the existing javadoc: general arguments are the ones remaining after the specific ones have been handled  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/MessageFactory.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/MessageFactory.java\n                                       Localizable specific,\n                                       Localizable general,\n                                       Object ... arguments) {\n+\n         final StringBuilder sb = new StringBuilder();\n-        MessageFormat fmt = null;\n-        fmt = new MessageFormat(general.getLocalizedString(locale), locale);\n-        sb.append(fmt.format(arguments));\n+        final MessageFormat generalFmt  = new MessageFormat(general.getLocalizedString(locale), locale);\n+        Object[] generalArgs = arguments;\n+\n         if (specific != null) {\n+\n+            final MessageFormat specificFmt = new MessageFormat(specific.getLocalizedString(locale), locale);\n+\n+            // split the arguments: first specific ones then general ones\n+            final int nbSpecific = Math.min(arguments.length, specificFmt.getFormatsByArgumentIndex().length);\n+            final int nbGeneral  = arguments.length - nbSpecific;\n+            Object[] specificArgs = new Object[nbSpecific];\n+            System.arraycopy(arguments, 0, specificArgs, 0, nbSpecific);\n+            generalArgs = new Object[nbGeneral];\n+            System.arraycopy(arguments, nbSpecific, generalArgs, 0, nbGeneral);\n+\n+            // build the message\n+            sb.append(specificFmt.format(specificArgs));\n             sb.append(\": \");\n-            fmt = new MessageFormat(specific.getLocalizedString(locale), locale);\n-            sb.append(fmt.format(arguments));\n+\n         }\n+\n+        sb.append(generalFmt.format(generalArgs));\n \n         return sb.toString();\n     }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception.util;\n+\n+import java.util.Locale;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class MessageFactoryTest {\n+\n+    @Test\n+    public void testSpecificGeneric() {\n+        Localizable specific = new DummyLocalizable(\"specific {0} - {1} - {2}\");\n+        Localizable general  = new DummyLocalizable(\"general  {0} / {1}\");\n+        String message = MessageFactory.buildMessage(Locale.FRENCH, specific, general,\n+                                                     0, 1, 2, 'a', 'b');\n+        Assert.assertEquals(\"specific 0 - 1 - 2: general  a / b\", message);\n+    }\n+\n+}", "timestamp": 1289747171, "metainfo": ""}