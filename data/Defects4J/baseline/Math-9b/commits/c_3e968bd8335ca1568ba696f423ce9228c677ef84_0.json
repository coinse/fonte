{"sha": "3e968bd8335ca1568ba696f423ce9228c677ef84", "log": "MATH-795:   - Corrected some build failures caused by changes in r1358046.   - Moved javadoc of boolean ArrayRealVector.equals(Object) to RealVector.   - In RealVector, default implementations of equals(Object) and hashCode() throw UnsupportedOperationException, in order to force implementation in subclasses.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n         return false;\n     }\n \n-    /**\n-     * Test for the equality of two real vectors.\n-     * If all coordinates of two real vectors are exactly the same, and none are\n-     * {@code NaN}, the two real vectors are considered to be equal.\n-     * {@code NaN} coordinates are considered to affect globally the vector\n-     * and be equals to each other - i.e, if either (or all) coordinates of the\n-     * real vector are equal to {@code NaN}, the real vector is equal to\n-     * a vector with all {@code NaN} coordinates.\n-     *\n-     * @param other Object to test for equality.\n-     * @return {@code true} if two vector objects are equal, {@code false} if\n-     * {@code other} is null, not an instance of {@code RealVector}, or\n-     * not equal to this {@code RealVector} instance.\n-     */\n+    /** {@inheritDoc} */\n     @Override\n     public boolean equals(Object other) {\n         if (this == other) {\n     }\n \n     /**\n-     * Get a hashCode for the real vector.\n-     * All {@code NaN} values have the same hash code.\n-     *\n-     * @return a hash code.\n+     * {@inheritDoc} All {@code NaN} values have the same hash code.\n      */\n     @Override\n     public int hashCode() {\n--- a/src/main/java/org/apache/commons/math3/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RealVector.java\n     }\n \n     /**\n+     * <p>\n+     * Test for the equality of two real vectors. If all coordinates of two real\n+     * vectors are exactly the same, and none are {@code NaN}, the two real\n+     * vectors are considered to be equal. {@code NaN} coordinates are\n+     * considered to affect globally the vector and be equals to each other -\n+     * i.e, if either (or all) coordinates of the real vector are equal to\n+     * {@code NaN}, the real vector is equal to a vector with all {@code NaN}\n+     * coordinates.\n+     * </p>\n+     * <p>\n+     * This method <em>must</em> be overriden by concrete subclasses of\n+     * {@link RealVector}.\n+     * </p>\n+     *\n+     * @param other Object to test for equality.\n+     * @return {@code true} if two vector objects are equal, {@code false} if\n+     * {@code other} is null, not an instance of {@code RealVector}, or\n+     * not equal to this {@code RealVector} instance.\n+     */\n+    @Override\n+    public boolean equals(Object obj) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}. This method <em>must</em> be overriden by concrete\n+     * subclasses of {@link RealVector}.\n+     */\n+    @Override\n+    public int hashCode() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n      * This class should rarely be used, but is here to provide\n      * a default implementation of sparseIterator(), which is implemented\n      * by walking over the entries, skipping those whose values are the default one.\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n     }\n \n     @Test\n-    @Override\n     public void testPredicates() {\n-        super.testPredicates();\n \n         final ArrayRealVector v = (ArrayRealVector) create(new double[] { 0, 1, 2 });\n         Assert.assertFalse(v.equals(v.getDataRef()));\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n     }\n \n     @Test\n-    @Ignore\n-    @Override\n-    public void testBasicFunctions() {\n-        /*\n-         *  TODO this test is huge, and some of the methods being tested are not\n-         *  supported by TestVectorImpl. For the time being, this test is skipped\n-         *  (testBasicFunctions() is overriden, ommitting the @Test anotation).\n-         *\n-         *  What should really be done: split testBasicFunctions() in many\n-         *  smaller unit tests, and skip only those tests which are not meaningfull\n-         *  for RealVector.\n-         */\n-    }\n-\n-    @Test\n     public void testSparseIterator() throws Exception {\n         RealVector v = new TestVectorImpl(vec2.clone());\n         Entry e;\n     }\n \n     @Test\n-    @Ignore\n-    @Override\n-    public void testPredicates() {\n-        /*\n-         *  TODO Some of the tests carried out in testPredicates() do not pass,\n-         *  as the methods to be tested are not implemented in TestVectorImpl.\n-         *  For the time being, testPredicates() is overriden, while ommitting\n-         *  the @Test annotation, which effectively skips the test.\n-         *\n-         *  In the future, testPredicates() should be split in smaller units, and\n-         *  only those units which do not make sense should be skipped.\n-         */\n-    }\n-\n-    @Test\n     @Ignore(\"Abstract class RealVector is not serializable.\")\n     @Override\n     public void testSerial() {\n         // Do nothing\n     }\n+\n+    @Test\n+    @Ignore(\"Abstract class RealVector does not override equals(Object).\")\n+    @Override\n+    public void testEquals() {\n+        // Do nothing\n+    }\n }", "timestamp": 1341553622, "metainfo": ""}