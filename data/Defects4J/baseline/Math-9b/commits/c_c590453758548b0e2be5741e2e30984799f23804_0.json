{"sha": "c590453758548b0e2be5741e2e30984799f23804", "log": "Deleted obsolete Javadoc.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n import org.apache.commons.math.util.MathUtils;\n \n /**\n- * Implementation of RealMatrix using a double[][] array to store entries and\n- * <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n- * LU decomposition</a> to support linear system\n- * solution and inverse.\n- * <p>\n- * The LU decomposition is performed as needed, to support the following operations: <ul>\n- * <li>solve</li>\n- * <li>isSingular</li>\n- * <li>getDeterminant</li>\n- * <li>inverse</li> </ul></p>\n- * <p>\n- * <strong>Usage notes</strong>:<br>\n- * <ul><li>\n- * The LU decomposition is cached and reused on subsequent calls.\n- * If data are modified via references to the underlying array obtained using\n- * <code>getDataRef()</code>, then the stored LU decomposition will not be\n- * discarded.  In this case, you need to explicitly invoke\n- * <code>LUDecompose()</code> to recompute the decomposition\n- * before using any of the methods above.</li>\n- * <li>\n- * As specified in the {@link RealMatrix} interface, matrix element indexing\n- * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n- * returns the element in the first row, first column of the matrix.</li></ul>\n- * </p>\n+ * Implementation of {@link RealMatrix} using a {@code double[][]} array to\n+ * store entries.\n  *\n  * @version $Id$\n  */", "timestamp": 1315496214, "metainfo": ""}