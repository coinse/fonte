{"sha": "e1136b7e12d186c5086bb86b21e43b8703a0de94", "log": "Added more substantial class javadoc to ExpandableDoubleArray   ", "commit": "\n--- a/src/java/org/apache/commons/math/ExpandableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/ExpandableDoubleArray.java\n \n import java.io.Serializable;\n \n-\n /**\n- * An array of double primitives which can expand as needed.\n+ * <p>\n+ * A DoubleArray implementation which automatically expands\n+ * an internal double array to handle an array of arbitrary length.  This \n+ * implementation of DoubleArray is provided to support scenarios in\n+ * which the ultimate length of an array is unknown, and the \n+ * developer can control the expansion process through the\n+ * <code>initialCapacity</code> and <code>expansionFactor</code> \n+ * parameters.\n+ * </p>\n+ *\n+ * <p>\n+ * This implementation also allows a developer to:\n+ * <ul>\n+ *  <li>Resize an array via <code>setNumElements(int)</code></li>\n+ *  <li>Discard elements from the front of an array via\n+ *      <code>discardFrontElements(int)</code></li>\n+ *  <li>Find the minimum and maximum values stored in this array</li>\n+ * </ul>\n+ * </p>\n+ *\n+ * <p>\n+ * The initialCapacity parameter sets the capacity of the initial\n+ * storage array, and the expansionFactor is the factor by which\n+ * the current storage capacity is multiplied each time the internal\n+ * array needs to be expanded.  <b>Please note</b> that the length of the \n+ * internal storage array has nothing to do with the number of elements \n+ * currently stored in this array.  If one creates an instance of this\n+ * class with an initialCapacity of \"2\" and an expansion factor of \"2\", and\n+ * then adds 3546 elements to the array, this implementation will need to\n+ * expand the array 10 times - first from 2 -> 4. then 4 -> 8, 8 -> 16,\n+ * and so on until we reach 4096 which is sufficient to hold 3546 elements.\n+ * </p>\n  * \n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n  */\n public class ExpandableDoubleArray implements Serializable, DoubleArray {\n+\n+    // TODO: expansionFactor is valuable, by if I only need storage\n+    // for 1025 items and I use the default settings, I'll end up\n+    // with enough storage for 2048 elements.  Maybe this implementation\n+    // should have flags for incremental growth - (i.e. when expanding, only\n+    // increase storage by a constant size - 100, 200 ) ?\n \n     // This is the internal storage array.\n     protected double[] internalArray;", "timestamp": 1053498270, "metainfo": ""}