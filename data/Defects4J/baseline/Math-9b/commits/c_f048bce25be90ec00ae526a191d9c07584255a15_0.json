{"sha": "f048bce25be90ec00ae526a191d9c07584255a15", "log": "check computed variances in test  ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n import static org.junit.Assert.assertEquals;\n \n import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.linear.DefaultRealMatrixChangingVisitor;\n import org.apache.commons.math.linear.MatrixUtils;\n+import org.apache.commons.math.linear.MatrixVisitorException;\n import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.linear.RealMatrixImpl;\n import org.junit.Before;\n import org.junit.Test;\n \n     public void testPerfectFit() {\n         double[] betaHat = regression.estimateRegressionParameters();\n         TestUtils.assertEquals(betaHat, \n-          new double[]{11.0,0.5,0.666666666666667,0.75,0.8,0.8333333333333333},\n-                1e-12);\n+                               new double[]{ 11.0, 1.0 / 2.0, 2.0 / 3.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0 },\n+                               1e-14);\n         double[] residuals = regression.estimateResiduals();\n         TestUtils.assertEquals(residuals, new double[]{0d,0d,0d,0d,0d,0d},\n-                      1e-12);\n-        double[][] errors = regression.estimateRegressionParametersVariance();\n-        // TODO: translate this into standard error vector and check\n+                               1e-14);\n+        RealMatrix errors =\n+            new RealMatrixImpl(regression.estimateRegressionParametersVariance(), false);\n+        final double[] s = { 1.0, -1.0 /  2.0, -1.0 /  3.0, -1.0 /  4.0, -1.0 /  5.0, -1.0 /  6.0 };\n+        RealMatrix referenceVariance = new RealMatrixImpl(s.length, s.length);\n+        referenceVariance.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {\n+            private static final long serialVersionUID = -6071126933773694288L;\n+            @Override\n+            public double visit(int row, int column, double value)\n+                throws MatrixVisitorException {\n+                if (row == 0) {\n+                    return s[column];\n+                }\n+                double x = s[row] * s[column];\n+                return (row == column) ? 2 * x : x;\n+            }\n+        });\n+       assertEquals(0.0,\n+                     errors.subtract(referenceVariance).getNorm(),\n+                     5.0e-16 * referenceVariance.getNorm());\n     }\n     \n     ", "timestamp": 1241881542, "metainfo": ""}