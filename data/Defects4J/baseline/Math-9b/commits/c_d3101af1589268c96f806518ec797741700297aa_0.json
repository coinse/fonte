{"sha": "d3101af1589268c96f806518ec797741700297aa", "log": "added setter methods for rows and columns in matrices JIRA: MATH-234  ", "commit": "\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n       \"nombre de colonnes invalide : {0} (doit \\u00eatre positif)\" },\n     { \"vector length mismatch: got {0} but expected {1}\",\n       \"taille de vecteur invalide : {0} au lieu de {1} attendue\" },\n+    { \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n+      \"dimensions incoh\\u00e9rentes : {0}x{1} \\u00e0 la place de {2}x{3}\" },\n \n     // org.apache.commons.math.linear.BigMatrixImpl\n     // org.apache.commons.math.linear.RealMatrixImpl\n--- a/src/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n     }\n     \n     /** {@inheritDoc} */\n+    public void setRowMatrix(final int row, final RealMatrix matrix)\n+        throws MatrixIndexException, InvalidMatrixException {\n+\n+        checkRowIndex(row);\n+        final int nCols = getColumnDimension();\n+        if ((matrix.getRowDimension() != 1) ||\n+            (matrix.getColumnDimension() != nCols)) {\n+            throw new InvalidMatrixException(\"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n+                                             new Object[] {\n+                                                 matrix.getRowDimension(),\n+                                                 matrix.getColumnDimension(),\n+                                                 1, nCols\n+                                             });\n+        }\n+        for (int i = 0; i < nCols; ++i) {\n+            setEntry(row, i, matrix.getEntry(0, i));\n+        }\n+\n+    }\n+    \n+    /** {@inheritDoc} */\n     public RealMatrix getColumnMatrix(final int column)\n         throws MatrixIndexException {\n \n     }\n \n     /** {@inheritDoc} */\n+    public void setColumnMatrix(final int column, final RealMatrix matrix)\n+        throws MatrixIndexException, InvalidMatrixException {\n+\n+        checkColumnIndex(column);\n+        final int nRows = getRowDimension();\n+        if ((matrix.getRowDimension() != nRows) ||\n+            (matrix.getColumnDimension() != 1)) {\n+            throw new InvalidMatrixException(\"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n+                                             new Object[] {\n+                                                 matrix.getRowDimension(),\n+                                                 matrix.getColumnDimension(),\n+                                                 nRows, 1\n+                                             });\n+        }\n+        for (int i = 0; i < nRows; ++i) {\n+            setEntry(i, column, matrix.getEntry(i, 0));\n+        }\n+\n+    }\n+    \n+    /** {@inheritDoc} */\n+    public RealVector getRowVector(final int row)\n+        throws MatrixIndexException {\n+        return new RealVectorImpl(getRow(row), false);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void setRowVector(final int row, final RealVector vector)\n+        throws MatrixIndexException, InvalidMatrixException {\n+\n+        checkRowIndex(row);\n+        final int nCols = getColumnDimension();\n+        if (vector.getDimension() != nCols) {\n+            throw new InvalidMatrixException(\"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n+                                             new Object[] {\n+                                                 1, vector.getDimension(),\n+                                                 1, nCols\n+                                             });\n+        }\n+        for (int i = 0; i < nCols; ++i) {\n+            setEntry(row, i, vector.getEntry(i));\n+        }\n+\n+    }\n+    \n+    /** {@inheritDoc} */\n     public RealVector getColumnVector(final int column)\n         throws MatrixIndexException {\n         return new RealVectorImpl(getColumn(column), false);\n     }\n \n     /** {@inheritDoc} */\n-    public RealVector getRowVector(final int row)\n-        throws MatrixIndexException {\n-        return new RealVectorImpl(getRow(row), false);\n-    }\n-\n+    public void setColumnVector(final int column, final RealVector vector)\n+        throws MatrixIndexException, InvalidMatrixException {\n+\n+        checkColumnIndex(column);\n+        final int nRows = getRowDimension();\n+        if (vector.getDimension() != nRows) {\n+            throw new InvalidMatrixException(\"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n+                                             new Object[] {\n+                                                 vector.getDimension(), 1,\n+                                                 nRows, 1\n+                                             });\n+        }\n+        for (int i = 0; i < nRows; ++i) {\n+            setEntry(i, column, vector.getEntry(i));\n+        }\n+\n+    }\n+    \n     /** {@inheritDoc} */\n     public double[] getRow(final int row)\n         throws MatrixIndexException {\n     }\n \n     /** {@inheritDoc} */\n+    public void setRow(final int row, final double[] array)\n+        throws MatrixIndexException, InvalidMatrixException {\n+\n+        checkRowIndex(row);\n+        final int nCols = getColumnDimension();\n+        if (array.length != nCols) {\n+            throw new InvalidMatrixException(\"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n+                                             new Object[] {\n+                                                 1, array.length,\n+                                                 1, nCols\n+                                             });\n+        }\n+        for (int i = 0; i < nCols; ++i) {\n+            setEntry(row, i, array[i]);\n+        }\n+\n+    }\n+    \n+    /** {@inheritDoc} */\n     public double[] getColumn(final int column)\n         throws MatrixIndexException {\n \n \n     }\n \n+    /** {@inheritDoc} */\n+    public void setColumn(final int column, final double[] array)\n+        throws MatrixIndexException, InvalidMatrixException {\n+\n+        checkColumnIndex(column);\n+        final int nRows = getRowDimension();\n+        if (array.length != nRows) {\n+            throw new InvalidMatrixException(\"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n+                                             new Object[] {\n+                                                 array.length, 1,\n+                                                 nRows, 1\n+                                             });\n+        }\n+        for (int i = 0; i < nRows; ++i) {\n+            setEntry(i, column, array[i]);\n+        }\n+\n+    }\n+    \n     /** {@inheritDoc} */\n     public abstract double getEntry(int row, int column)\n         throws MatrixIndexException;\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n    RealMatrix getRowMatrix(int row) throws MatrixIndexException;\n    \n    /**\n+    * Sets the entries in row number <code>row</code>\n+    * as a row matrix.  Row indices start at 0.\n+    *\n+    * @param row the row to be set\n+    * @param matrix row matrix (must have one row and the same number of columns\n+    * as the instance)\n+    * @throws MatrixIndexException if the specified row index is invalid\n+    * @throws InvalidMatrixException if the matrix dimensions do not match one\n+    * instance row\n+    */\n+   void setRowMatrix(int row, RealMatrix matrix)\n+       throws MatrixIndexException, InvalidMatrixException;\n+   \n+   /**\n     * Returns the entries in column number <code>column</code>\n     * as a column matrix.  Column indices start at 0.\n     *\n    RealMatrix getColumnMatrix(int column) throws MatrixIndexException;\n \n    /**\n+    * Sets the entries in column number <code>column</code>\n+    * as a column matrix.  Column indices start at 0.\n+    *\n+    * @param column the column to be set\n+    * @param matrix column matrix (must have one column and the same number of rows\n+    * as the instance)\n+    * @throws MatrixIndexException if the specified column index is invalid\n+    * @throws InvalidMatrixException if the matrix dimensions do not match one\n+    * instance column\n+    */\n+   void setColumnMatrix(int column, RealMatrix matrix)\n+       throws MatrixIndexException, InvalidMatrixException;\n+   \n+   /**\n     * Returns the entries in row number <code>row</code>\n     * as a vector.  Row indices start at 0.\n     *\n     * @throws MatrixIndexException if the specified row index is invalid\n     */\n    RealVector getRowVector(int row) throws MatrixIndexException;\n+\n+   /**\n+    * Sets the entries in row number <code>row</code>\n+    * as a row matrix.  Row indices start at 0.\n+    *\n+    * @param row the row to be set\n+    * @param vector row vector (must have the same number of columns\n+    * as the instance)\n+    * @throws MatrixIndexException if the specified row index is invalid\n+    * @throws InvalidMatrixException if the vector dimension does not match one\n+    * instance row\n+    */\n+   void setRowVector(int row, RealVector vector)\n+       throws MatrixIndexException, InvalidMatrixException;\n    \n    /**\n     * Returns the entries in column number <code>column</code>\n     * @throws MatrixIndexException if the specified column index is invalid\n     */\n    RealVector getColumnVector(int column) throws MatrixIndexException;\n-    \n+\n+   /**\n+    * Sets the entries in column number <code>column</code>\n+    * as a column matrix.  Column indices start at 0.\n+    *\n+    * @param column the column to be set\n+    * @param vector column vector (must have the same number of rows as the instance)\n+    * @throws MatrixIndexException if the specified column index is invalid\n+    * @throws InvalidMatrixException if the vector dimension does not match one\n+    * instance column\n+    */\n+   void setColumnVector(int column, RealVector vector)\n+       throws MatrixIndexException, InvalidMatrixException;\n+   \n     /**\n      * Returns the entries in row number <code>row</code> as an array.\n      * <p>\n     double[] getRow(int row) throws MatrixIndexException;\n \n     /**\n+     * Sets the entries in row number <code>row</code>\n+     * as a row matrix.  Row indices start at 0.\n+     *\n+     * @param row the row to be set\n+     * @param array row matrix (must have the same number of columns as the instance)\n+     * @throws MatrixIndexException if the specified row index is invalid\n+     * @throws InvalidMatrixException if the array size does not match one\n+     * instance row\n+     */\n+    void setRow(int row, double[] array)\n+        throws MatrixIndexException, InvalidMatrixException;\n+    \n+    /**\n      * Returns the entries in column number <code>col</code> as an array.\n      * <p>\n      * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n      */\n     double[] getColumn(int column) throws MatrixIndexException;\n \n+    /**\n+     * Sets the entries in column number <code>column</code>\n+     * as a column matrix.  Column indices start at 0.\n+     *\n+     * @param column the column to be set\n+     * @param array column array (must have the same number of rows as the instance)\n+     * @throws MatrixIndexException if the specified column index is invalid\n+     * @throws InvalidMatrixException if the array size does not match one\n+     * instance column\n+     */\n+    void setColumn(int column, double[] array)\n+        throws MatrixIndexException, InvalidMatrixException;\n+    \n     /**\n      * Returns the entry in the specified row and column.\n      * <p>\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n         }\n     }\n     \n+    public void testSetRowMatrix() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        RealMatrix mRow3 = new RealMatrixImpl(subRow3);\n+        assertNotSame(mRow3, m.getRowMatrix(0));\n+        m.setRowMatrix(0, mRow3);\n+        assertEquals(mRow3, m.getRowMatrix(0));\n+        try {\n+            m.setRowMatrix(-1, mRow3);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.setRowMatrix(0, m);\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            // expected\n+        }\n+    }\n+    \n     public void testGetColumnMatrix() {\n         RealMatrix m = new RealMatrixImpl(subTestData);\n         RealMatrix mColumn1 = new RealMatrixImpl(subColumn1);\n         }\n     }\n \n+    public void testSetColumnMatrix() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        RealMatrix mColumn3 = new RealMatrixImpl(subColumn3);\n+        assertNotSame(mColumn3, m.getColumnMatrix(1));\n+        m.setColumnMatrix(1, mColumn3);\n+        assertEquals(mColumn3, m.getColumnMatrix(1));\n+        try {\n+            m.setColumnMatrix(-1, mColumn3);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.setColumnMatrix(0, m);\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            // expected\n+        }\n+    }\n+\n     public void testGetRowVector() {\n         RealMatrix m = new RealMatrixImpl(subTestData);\n         RealVector mRow0 = new RealVectorImpl(subRow0[0]);\n         } catch (MatrixIndexException ex) {\n             // expected\n         }\n-   }\n+    }\n+\n+    public void testSetRowVector() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        RealVector mRow3 = new RealVectorImpl(subRow3[0]);\n+        assertNotSame(mRow3, m.getRowMatrix(0));\n+        m.setRowVector(0, mRow3);\n+        assertEquals(mRow3, m.getRowVector(0));\n+        try {\n+            m.setRowVector(-1, mRow3);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.setRowVector(0, new RealVectorImpl(5));\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            // expected\n+        }\n+    }\n     \n     public void testGetColumnVector() {\n         RealMatrix m = new RealMatrixImpl(subTestData);\n         }\n     }\n \n+    public void testSetColumnVector() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        RealVector mColumn3 = columnToVector(subColumn3);\n+        assertNotSame(mColumn3, m.getColumnVector(1));\n+        m.setColumnVector(1, mColumn3);\n+        assertEquals(mColumn3, m.getColumnVector(1));\n+        try {\n+            m.setColumnVector(-1, mColumn3);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.setColumnVector(0, new RealVectorImpl(5));\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            // expected\n+        }\n+    }\n+\n     private RealVector columnToVector(double[][] column) {\n         double[] data = new double[column.length];\n         for (int i = 0; i < data.length; ++i) {\n             data[i] = column[i][0];\n         }\n         return new RealVectorImpl(data, false);\n+    }\n+\n+    public void testGetRow() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        checkArrays(subRow0[0], m.getRow(0));\n+        checkArrays(subRow3[0], m.getRow(3));\n+        try {\n+            m.getRow(-1);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getRow(4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testSetRow() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        assertTrue(subRow3[0][0] != m.getRow(0)[0]);\n+        m.setRow(0, subRow3[0]);\n+        checkArrays(subRow3[0], m.getRow(0));\n+        try {\n+            m.setRow(-1, subRow3[0]);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.setRow(0, new double[5]);\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testGetColumn() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        double[] mColumn1 = columnToArray(subColumn1);\n+        double[] mColumn3 = columnToArray(subColumn3);\n+        checkArrays(mColumn1, m.getColumn(1));\n+        checkArrays(mColumn3, m.getColumn(3));\n+        try {\n+            m.getColumn(-1);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getColumn(4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testSetColumn() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        double[] mColumn3 = columnToArray(subColumn3);\n+        assertTrue(mColumn3[0] != m.getColumn(1)[0]);\n+        m.setColumn(1, mColumn3);\n+        checkArrays(mColumn3, m.getColumn(1));\n+        try {\n+            m.setColumn(-1, mColumn3);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.setColumn(0, new double[5]);\n+            fail(\"Expecting InvalidMatrixException\");\n+        } catch (InvalidMatrixException ex) {\n+            // expected\n+        }\n+    }\n+\n+    private double[] columnToArray(double[][] column) {\n+        double[] data = new double[column.length];\n+        for (int i = 0; i < data.length; ++i) {\n+            data[i] = column[i][0];\n+        }\n+        return data;\n+    }\n+\n+    private void checkArrays(double[] expected, double[] actual) {\n+        assertEquals(expected.length, actual.length);\n+        for (int i = 0; i < expected.length; ++i) {\n+            assertEquals(expected[i], actual[i]);            \n+        }\n     }\n     \n     public void testEqualsAndHashCode() {", "timestamp": 1228668785, "metainfo": ""}