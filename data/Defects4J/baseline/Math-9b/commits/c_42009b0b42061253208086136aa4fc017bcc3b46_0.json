{"sha": "42009b0b42061253208086136aa4fc017bcc3b46", "log": "added support for Zipf distribution JIRA: MATH-178  ", "commit": "\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n    { \"statistics constructed from external moments cannot be incremented\",\n      \"les statistiques bas\\u00e9es sur des moments externes ne peuvent pas \\u00eatre incr\\u00e9ment\\u00e9es\" },\n    { \"statistics constructed from external moments cannot be cleared\",\n-     \"les statistiques bas\\u00e9es sur des moments externes ne peuvent pas \\u00eatre remises \\u00e0 z\\u00e9ro\" }\n+     \"les statistiques bas\\u00e9es sur des moments externes ne peuvent pas \\u00eatre remises \\u00e0 z\\u00e9ro\" },\n+\n+   // org.apache.commons.math.distribution.ZipfDistributionImpl\n+   { \"invalid number of elements {0} (must be positive)\",\n+     \"nombre d''\\u00e9l\\u00e9ments {0} invalide (doit \\u00eatre positif)\" },\n+   { \"invalid exponent {0} (must be positive)\",\n+     \"exposant {0} invalide (doit \\u00eatre positif)\" }\n \n   };\n \n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/ZipfDistribution.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+/**\n+ * The Zipf (or zeta) Distribution.\n+ * <p>\n+ * References:\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/ZipfDistribution.html\">Zipf \n+ * Distribution</a></li>\n+ * </ul>\n+ * </p>\n+ * \n+ * @version $Revision$ $Date$\n+ */\n+public interface ZipfDistribution extends IntegerDistribution {\n+    /**\n+     * Get the number of elements (e.g. corpus size) for the distribution.\n+     * \n+     * @return the number of elements\n+     */\n+    public int getNumberOfElements();\n+\n+    /**\n+     * Set the number of elements (e.g. corpus size) for the distribution.\n+     * The parameter value must be positive; otherwise an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     * \n+     * @param n the number of elements\n+     * @throws IllegalArgumentException if n &le; 0\n+     */\n+    public void setNumberOfElements(int n);\n+\n+    /**\n+     * Get the exponent characterising the distribution.\n+     * \n+     * @return the exponent\n+     */\n+    public double getExponent();\n+\n+    /**\n+     * Set the exponent characterising the distribution.\n+     * The parameter value must be positive; otherwise an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     * \n+     * @param s the exponent\n+     * @throws IllegalArgumentException if s &le; 0.0\n+     */\n+    public void setExponent(double s);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.MathRuntimeException;\n+\n+/**\n+ * Implementation for the {@link ZipfDistribution}.\n+ * \n+ * @version $Revision$ $Date$\n+ */\n+public class ZipfDistributionImpl extends AbstractIntegerDistribution \n+    implements ZipfDistribution, Serializable {\n+    private static final long serialVersionUID = -140627372283420404L;\n+\n+    private int numberOfElements;\n+    private double exponent;\n+\n+    /**\n+     * Create a new Zipf distribution with the given number of elements and \n+     * exponent. Both values must be positive; otherwise an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     * \n+     * @param n the number of elements\n+     * @param s the exponent\n+     * @exception IllegalArgumentException if n &le; 0 or s &le; 0.0\n+     */\n+    public ZipfDistributionImpl(final int numberOfElements, final double exponent)\n+        throws IllegalArgumentException {\n+        setNumberOfElements(numberOfElements);\n+        setExponent(exponent);\n+    }\n+\n+    /**\n+     * Get the number of elements (e.g. corpus size) for the distribution.\n+     * \n+     * @return the number of elements\n+     */\n+    public int getNumberOfElements() {\n+        return numberOfElements;\n+    }\n+\n+    /**\n+     * Set the number of elements (e.g. corpus size) for the distribution.\n+     * The parameter value must be positive; otherwise an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     * \n+     * @param n the number of elements\n+     * @exception IllegalArgumentException if n &le; 0\n+     */\n+    public void setNumberOfElements(final int n)\n+        throws IllegalArgumentException {\n+        if (n <= 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"invalid number of elements {0}\" +\n+                                                                      \" (must be positive)\",\n+                                                                      new Object[] { n });\n+        }\n+        this.numberOfElements = n;\n+    }\n+    \n+    /**\n+     * Get the exponent characterising the distribution.\n+     * \n+     * @return the exponent\n+     */\n+    public double getExponent() {\n+        return exponent;\n+    }\n+\n+    /**\n+     * Set the exponent characterising the distribution.\n+     * The parameter value must be positive; otherwise an \n+     * <code>IllegalArgumentException</code> is thrown.\n+     * \n+     * @param s the exponent\n+     * @exception IllegalArgumentException if s &le; 0.0\n+     */\n+    public void setExponent(final double s)\n+        throws IllegalArgumentException {\n+        if (s <= 0.0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"invalid exponent {0} (must be positive)\",\n+                                                                      new Object[] { s });\n+        }\n+        this.exponent = s;\n+    }\n+\n+    /**\n+     * The probability mass function P(X = x) for a Zipf distribution.\n+     * \n+     * @param x the value at which the probability density function is evaluated.\n+     * @return the value of the probability mass function at x\n+     */\n+    public double probability(final int x) {\n+        if (x <= 0 || x > getNumberOfElements()) {\n+            return 0.0;\n+        }\n+\n+        return (1.0 / Math.pow(x, exponent)) / generalizedHarmonic(numberOfElements, exponent);\n+\n+    }\n+    \n+    /**\n+     * The probability distribution function P(X <= x) for a Zipf distribution.\n+     * \n+     * @param x the value at which the PDF is evaluated.\n+     * @return Zipf distribution function evaluated at x\n+     */\n+    public double cumulativeProbability(final int x) {\n+        if (x <= 0) {\n+            return 0.0;\n+        } else if (x >= getNumberOfElements()) {\n+            return 1.0;\n+        }\n+\n+        return generalizedHarmonic(x, exponent) / generalizedHarmonic(numberOfElements, exponent);\n+\n+    }\n+\n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a PDF root.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected int getDomainLowerBound(final double p) {\n+        return 0;\n+    }\n+\n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a PDF root.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected int getDomainUpperBound(final double p) {\n+        return numberOfElements;\n+    }\n+\n+\n+    /**\n+     * Calculates the Nth generalized harmonic number. See \n+     * <a href=\"http://mathworld.wolfram.com/HarmonicSeries.html\">Harmonic \n+     * Series</a>.\n+     * \n+     * @param n the term in the series to calculate (must be &ge; 1)\n+     * @param m the exponent; special case m == 1.0 is the harmonic series\n+     * @return the nth generalized harmonic number\n+     */\n+    private double generalizedHarmonic(final int n, final double m) {\n+        double value = 0;\n+        for (int k = n; k > 0; --k) {\n+            value += 1.0 / Math.pow(k, m);\n+        }\n+        return value;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+/**\n+ * Test cases for {@link ZipfDistribution}.\n+ * Extends IntegerDistributionAbstractTest.  See class javadoc for\n+ * IntegerDistributionAbstractTest for details.\n+ * \n+ * @version $Revision$ $Date$\n+ */\n+public class ZipfDistributionTest extends IntegerDistributionAbstractTest {\n+    public ZipfDistributionTest(String name) {\n+        super(name);\n+    }\n+    \n+    //-------------- Implementations for abstract methods -----------------------\n+    \n+    /** Creates the default discrete distribution instance to use in tests. */\n+    public IntegerDistribution makeDistribution() {\n+        return new ZipfDistributionImpl(10, 1);\n+    }\n+    \n+    /** Creates the default probability density test input values */\n+    public int[] makeDensityTestPoints() {\n+        return new int[] {-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n+    }\n+    \n+    /** Creates the default probability density test expected values */\n+    public double[] makeDensityTestValues() {\n+        return new double[] {0d, 0d, 0.3414d, 0.1707d, 0.1138d, 0.0854d, 0.0683d, \n+                0.0569d, 0.0488d, 0.0427d, 0.0379d, 0.0341d, 0d};\n+    }\n+    \n+    /** Creates the default cumulative probability density test input values */\n+    public int[] makeCumulativeTestPoints() {\n+        return makeDensityTestPoints();\n+    }\n+    \n+    /** Creates the default cumulative probability density test expected values */\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {0d, 0.0000d, 0.3414d, 0.5121d, 0.6259d, 0.7113d,\n+                0.7796d, 0.8365d, 0.8852d, 0.9279d, 0.9659d, 1d, 1d};\n+        }\n+    \n+    /** Creates the default inverse cumulative probability test input values */\n+    public double[] makeInverseCumulativeTestPoints() {\n+        return new double[] {0, 0.001d, 0.010d, 0.025d, 0.050d, 0.3414d, 0.3415d, 0.999d,\n+                0.990d, 0.975d, 0.950d, 0.900d, 1}; \n+        }\n+    \n+    /** Creates the default inverse cumulative probability density test expected values */\n+    public int[] makeInverseCumulativeTestValues() {\n+        return new int[] {0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 8, 7, 10};\n+    }\n+}", "timestamp": 1228583467, "metainfo": ""}