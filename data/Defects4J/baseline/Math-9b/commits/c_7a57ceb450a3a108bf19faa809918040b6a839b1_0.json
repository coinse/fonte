{"sha": "7a57ceb450a3a108bf19faa809918040b6a839b1", "log": "Added some utility functions to compute powers with integral types (int, long, BigInteger)  ", "commit": "\n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n     // org.apache.commons.math.util.MathUtils\n     { \"overflow: gcd({0}, {1}) is 2^31\",\n       \"d\\u00e9passement de capacit\\u00e9 : le PGCD de {0} et {1} vaut 2^31\" },\n+    { \"cannot raise an integral value to a negative power ({0}^{1})\",\n+      \"impossible d''\\u00e9lever une valeur enti\\u00e8re \\u00e0 une puissance n\\u00e9gative ({0}^{1})\" },\n         \n     // org.apache.commons.math.FunctionEvaluationException\n     { \"evaluation failed for argument = {0}\",\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n package org.apache.commons.math.util;\n \n import java.math.BigDecimal;\n+import java.math.BigInteger;\n import java.util.Arrays;\n \n import org.apache.commons.math.MathRuntimeException;\n         return ret;\n     }\n \n+    /**\n+     * Raise an int to an int power.\n+     * @param k number to raise\n+     * @param e exponent (must be positive or null)\n+     * @return k<sup>e</sup>\n+     * @exception IllegalArgumentException if e is negative\n+     */\n+    public static int pow(final int k, int e)\n+        throws IllegalArgumentException {\n+\n+        if (e < 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                \"cannot raise an integral value to a negative power ({0}^{1})\",\n+                k, e);\n+        }\n+\n+        int result = 1;\n+        int k2p    = k;\n+        while (e != 0) {\n+            if ((e & 0x1) != 0) {\n+                result *= k2p;\n+            }\n+            k2p *= k2p;\n+            e = e >> 1;\n+        }\n+\n+        return result;\n+\n+    }\n+\n+    /**\n+     * Raise an int to a long power.\n+     * @param k number to raise\n+     * @param e exponent (must be positive or null)\n+     * @return k<sup>e</sup>\n+     * @exception IllegalArgumentException if e is negative\n+     */\n+    public static int pow(final int k, long e)\n+        throws IllegalArgumentException {\n+\n+        if (e < 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                \"cannot raise an integral value to a negative power ({0}^{1})\",\n+                k, e);\n+        }\n+\n+        int result = 1;\n+        int k2p    = k;\n+        while (e != 0) {\n+            if ((e & 0x1) != 0) {\n+                result *= k2p;\n+            }\n+            k2p *= k2p;\n+            e = e >> 1;\n+        }\n+\n+        return result;\n+\n+    }\n+\n+    /**\n+     * Raise a long to an int power.\n+     * @param k number to raise\n+     * @param e exponent (must be positive or null)\n+     * @return k<sup>e</sup>\n+     * @exception IllegalArgumentException if e is negative\n+     */\n+    public static long pow(final long k, int e)\n+        throws IllegalArgumentException {\n+\n+        if (e < 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                \"cannot raise an integral value to a negative power ({0}^{1})\",\n+                k, e);\n+        }\n+\n+        long result = 1l;\n+        long k2p    = k;\n+        while (e != 0) {\n+            if ((e & 0x1) != 0) {\n+                result *= k2p;\n+            }\n+            k2p *= k2p;\n+            e = e >> 1;\n+        }\n+\n+        return result;\n+\n+    }\n+\n+    /**\n+     * Raise a long to a long power.\n+     * @param k number to raise\n+     * @param e exponent (must be positive or null)\n+     * @return k<sup>e</sup>\n+     * @exception IllegalArgumentException if e is negative\n+     */\n+    public static long pow(final long k, long e)\n+        throws IllegalArgumentException {\n+\n+        if (e < 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                \"cannot raise an integral value to a negative power ({0}^{1})\",\n+                k, e);\n+        }\n+\n+        long result = 1l;\n+        long k2p    = k;\n+        while (e != 0) {\n+            if ((e & 0x1) != 0) {\n+                result *= k2p;\n+            }\n+            k2p *= k2p;\n+            e = e >> 1;\n+        }\n+\n+        return result;\n+\n+    }\n+\n+    /**\n+     * Raise a BigInteger to an int power.\n+     * @param k number to raise\n+     * @param e exponent (must be positive or null)\n+     * @return k<sup>e</sup>\n+     * @exception IllegalArgumentException if e is negative\n+     */\n+    public static BigInteger pow(final BigInteger k, int e)\n+        throws IllegalArgumentException {\n+\n+        if (e < 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                \"cannot raise an integral value to a negative power ({0}^{1})\",\n+                k, e);\n+        }\n+\n+        return k.pow(e);\n+\n+    }\n+\n+    /**\n+     * Raise a BigInteger to a long power.\n+     * @param k number to raise\n+     * @param e exponent (must be positive or null)\n+     * @return k<sup>e</sup>\n+     * @exception IllegalArgumentException if e is negative\n+     */\n+    public static BigInteger pow(final BigInteger k, long e)\n+        throws IllegalArgumentException {\n+\n+        if (e < 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                \"cannot raise an integral value to a negative power ({0}^{1})\",\n+                k, e);\n+        }\n+\n+        BigInteger result = BigInteger.ONE;\n+        BigInteger k2p    = k;\n+        while (e != 0) {\n+            if ((e & 0x1) != 0) {\n+                result = result.multiply(k2p);\n+            }\n+            k2p = k2p.multiply(k2p);\n+            e = e >> 1;\n+        }\n+\n+        return result;\n+\n+    }\n+\n+    /**\n+     * Raise a BigInteger to a BigInteger power.\n+     * @param k number to raise\n+     * @param e exponent (must be positive or null)\n+     * @return k<sup>e</sup>\n+     * @exception IllegalArgumentException if e is negative\n+     */\n+    public static BigInteger pow(final BigInteger k, BigInteger e)\n+        throws IllegalArgumentException {\n+\n+        if (e.compareTo(BigInteger.ZERO) < 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                \"cannot raise an integral value to a negative power ({0}^{1})\",\n+                k, e);\n+        }\n+\n+        BigInteger result = BigInteger.ONE;\n+        BigInteger k2p    = k;\n+        while (!BigInteger.ZERO.equals(e)) {\n+            if (e.testBit(0)) {\n+                result = result.multiply(k2p);\n+            }\n+            k2p = k2p.multiply(k2p);\n+            e = e.shiftRight(1);\n+        }\n+\n+        return result;\n+\n+    }\n+\n }\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n package org.apache.commons.math.util;\n \n import java.math.BigDecimal;\n+import java.math.BigInteger;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n         }\n \n     }\n+\n+    public void testPow() {\n+\n+        assertEquals(1801088541, MathUtils.pow(21, 7));\n+        assertEquals(1, MathUtils.pow(21, 0));\n+        try {\n+            MathUtils.pow(21, -7);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected behavior\n+        }\n+\n+        assertEquals(1801088541, MathUtils.pow(21, 7l));\n+        assertEquals(1, MathUtils.pow(21, 0l));\n+        try {\n+            MathUtils.pow(21, -7l);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected behavior\n+        }\n+\n+        assertEquals(1801088541l, MathUtils.pow(21l, 7));\n+        assertEquals(1l, MathUtils.pow(21l, 0));\n+        try {\n+            MathUtils.pow(21l, -7);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected behavior\n+        }\n+\n+        assertEquals(1801088541l, MathUtils.pow(21l, 7l));\n+        assertEquals(1l, MathUtils.pow(21l, 0l));\n+        try {\n+            MathUtils.pow(21l, -7l);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected behavior\n+        }\n+\n+        BigInteger twentyOne = BigInteger.valueOf(21l);\n+        assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, 7));\n+        assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, 0));\n+        try {\n+            MathUtils.pow(twentyOne, -7);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected behavior\n+        }\n+\n+        assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, 7l));\n+        assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, 0l));\n+        try {\n+            MathUtils.pow(twentyOne, -7l);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected behavior\n+        }\n+\n+        assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, BigInteger.valueOf(7l)));\n+        assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, BigInteger.ZERO));\n+        try {\n+            MathUtils.pow(twentyOne, BigInteger.valueOf(-7l));\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // expected behavior\n+        }\n+\n+        BigInteger bigOne =\n+            new BigInteger(\"1543786922199448028351389769265814882661837148\" +\n+                           \"4763915343722775611762713982220306372888519211\" +\n+                           \"560905579993523402015636025177602059044911261\");\n+        assertEquals(bigOne, MathUtils.pow(twentyOne, 103));\n+        assertEquals(bigOne, MathUtils.pow(twentyOne, 103l));\n+        assertEquals(bigOne, MathUtils.pow(twentyOne, BigInteger.valueOf(103l)));\n+        \n+    }\n }", "timestamp": 1238427794, "metainfo": ""}