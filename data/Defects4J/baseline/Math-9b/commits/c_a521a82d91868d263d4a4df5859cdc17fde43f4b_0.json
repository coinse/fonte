{"sha": "a521a82d91868d263d4a4df5859cdc17fde43f4b", "log": "Added Pearsons correlation implemendation. JIRA: MATH-114  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.correlation;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.distribution.TDistribution;\n+import org.apache.commons.math.distribution.TDistributionImpl;\n+import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.linear.DenseRealMatrix;\n+import org.apache.commons.math.stat.regression.SimpleRegression;\n+\n+/**\n+ * Computes Pearson's product-moment correlation coefficients for pairs of arrays\n+ * or columns of a matrix.\n+ * \n+ * <p>The constructors that take <code>RealMatrix</code> or \n+ * <code>double[][]</code> arguments generate correlation matrices.  The\n+ * columns of the input matrices are assumed to represent variable values.\n+ * Correlations are given by the formula</p>\n+ * <code>cor(X, Y) = &Sigma;[(x<sub>i</sub> - E(X))(y<sub>i</sub> - E(Y))] / [(n - 1)s(X)s(Y)]</code>\n+ * where <code>E(X)</code> is the mean of <code>X</code>, <code>E(Y)</code>\n+ * is the mean of the <code>Y</code> values and s(X), s(Y) are standard deviations.\n+ * \n+ * @version $Revision$ $Date$\n+ * @since 2.0\n+ */\n+public class PearsonsCorrelation {\n+    \n+    /** correlation matrix */\n+    private final RealMatrix correlationMatrix;\n+    \n+    /** number of observations */\n+    private final int nObs;\n+    \n+    /**\n+     * Create a PearsonsCorrelation instance without data\n+     */\n+    public PearsonsCorrelation() {\n+        super();\n+        correlationMatrix = null;\n+        nObs = 0;\n+    }\n+    \n+    /**\n+     * Create a PearsonsCorrelation from a rectangular array\n+     * whose columns represent values of variables to be correlated.\n+     * \n+     * @param data rectangular array with columns representing variables\n+     * @throws IllegalArgumentException if the input data array is not\n+     * rectangular with at least two rows and two columns.\n+     */\n+    public PearsonsCorrelation(double[][] data) {\n+        this(new DenseRealMatrix(data));\n+    }\n+    \n+    /**\n+     * Create a PearsonsCorrelation from a RealMatrix whose columns\n+     * represent variables to be correlated.\n+     * \n+     * @param matrix matrix with columns representing variables to correlate\n+     */\n+    public PearsonsCorrelation(RealMatrix matrix) {\n+        checkSufficientData(matrix);\n+        nObs = matrix.getRowDimension();\n+        correlationMatrix = computeCorrelation(matrix);\n+    }\n+    \n+    /**\n+     * Create a PearsonsCorrelation from a {@link Covariance}.  The correlation\n+     * matrix is computed by scaling the Covariance's covariance matrix.\n+     * The Covariance instance must have been created from a data matrix with\n+     * columns representing variable values.\n+     * \n+     * @param covariance Covariance instance\n+     */\n+    public PearsonsCorrelation(Covariance covariance) {\n+        RealMatrix covarianceMatrix = covariance.getCovarianceMatrix();\n+        if (covarianceMatrix == null) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    \"Covariance matrix is null\", null);\n+        }\n+        nObs = covariance.getN();\n+        correlationMatrix = covarianceToCorrelation(covarianceMatrix);\n+    }\n+    \n+    /**\n+     * Create a PearsonsCorrelation from a covariance matrix.  The correlation\n+     * matrix is computed by scaling the covariance matrix.\n+     * \n+     * @param covarianceMatrix covariance matrix\n+     * @param numberOfObservations the number of observations in the dataset used to compute\n+     * the covariance matrix\n+     */\n+    public PearsonsCorrelation(RealMatrix covarianceMatrix, int numberOfObservations) {\n+        nObs = numberOfObservations;\n+        correlationMatrix = covarianceToCorrelation(covarianceMatrix);\n+        \n+    }\n+    \n+    /**\n+     * Returns the correlation matrix\n+     * \n+     * @return correlation matrix\n+     */\n+    public RealMatrix getCorrelationMatrix() {\n+        return correlationMatrix;  \n+    }\n+    \n+    /**\n+     * Returns a matrix of standard errors associated with the estimates\n+     * in the correlation matrix.<br/>\n+     * <code>getCorrelationStandardErrors().getEntry(i,j)</code> is the standard\n+     * error associated with <code>getCorrelationMatrix.getEntry(i,j)</code>\n+     * <p>The formula used to compute the standard error is <br/>\n+     * <code>SE<sub>r</sub> = ((1 - r<sup>2</sup>) / (n - 2))<sup>1/2</sup></code>\n+     * where <code>r</code> is the estimated correlation coefficient and \n+     * <code>n</code> is the number of observations in the source dataset.</p>\n+     * \n+     * @return matrix of correlation standard errors\n+     */\n+    public RealMatrix getCorrelationStandardErrors() {\n+        int nVars = correlationMatrix.getColumnDimension();\n+        double[][] out = new double[nVars][nVars];\n+        for (int i = 0; i < nVars; i++) {\n+            for (int j = 0; j < nVars; j++) {\n+                double r = correlationMatrix.getEntry(i, j);\n+                out[i][j] = Math.sqrt((1 - r * r) /(nObs - 2));\n+            }\n+        }\n+        return new DenseRealMatrix(out);\n+    }\n+\n+    /**\n+     * Returns a matrix of p-values associated with the (two-sided) null\n+     * hypothesis that the corresponding correlation coefficient is zero.\n+     * <p><code>getCorrelationPValues().getEntry(i,j)</code> is the probability\n+     * that a random variable distributed as <code>t<sub>n-2</sub></code> takes\n+     * a value with absolute value greater than or equal to <br>\n+     * <code>|r|((n - 2) / (1 - r<sup>2</sup>))<sup>1/2</sup></code></p>\n+     * <p>The values in the matrix are sometimes referred to as the \n+     * <i>significance</i> of the corresponding correlation coefficients.</p>\n+     * \n+     * @return matrix of p-values\n+     * @throws MathException if an error occurs estimating probabilities\n+     */\n+    public RealMatrix getCorrelationPValues() throws MathException {\n+        TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n+        int nVars = correlationMatrix.getColumnDimension();\n+        double[][] out = new double[nVars][nVars];\n+        for (int i = 0; i < nVars; i++) {\n+            for (int j = 0; j < nVars; j++) {\n+                if (i == j) {\n+                    out[i][j] = 0d;\n+                } else {\n+                    double r = correlationMatrix.getEntry(i, j);\n+                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n+                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n+                }\n+            }\n+        }\n+        return new DenseRealMatrix(out);\n+    }\n+    \n+    \n+    /**\n+     * Computes the correlation matrix for the columns of the\n+     * input matrix.\n+     * \n+     * @param matrix matrix with columns representing variables to correlate\n+     * @return correlation matrix\n+     */\n+    public RealMatrix computeCorrelation(RealMatrix matrix) {\n+        int nVars = matrix.getColumnDimension();\n+        RealMatrix outMatrix = new DenseRealMatrix(nVars, nVars);\n+        for (int i = 0; i < nVars; i++) {\n+            for (int j = 0; j < i; j++) {\n+              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));\n+              outMatrix.setEntry(i, j, corr);\n+              outMatrix.setEntry(j, i, corr);\n+            }\n+            outMatrix.setEntry(i, i, 1d);\n+        }\n+        return outMatrix;\n+    }\n+    \n+    /**\n+     * Computes the Pearson's product-moment correlation coefficient between the two arrays.\n+     * \n+     * </p>Throws IllegalArgumentException if the arrays do not have the same length\n+     * or their common length is less than 2</p>\n+     *\n+     * @param xArray first data array\n+     * @param yArray second data array\n+     * @return Returns Pearson's correlation coefficient for the two arrays \n+     * @throws  IllegalArgumentException if the arrays lengths do not match or\n+     * there is insufficient data\n+     */\n+    public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException {\n+        SimpleRegression regression = new SimpleRegression();\n+        if(xArray.length == yArray.length && xArray.length > 1) {\n+            for(int i=0; i<xArray.length; i++) {\n+                regression.addData(xArray[i], yArray[i]);\n+            }\n+            return regression.getR();\n+        }\n+        else {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    \"Invalid array dimensions. xArray has size {0}; yArray has {1} elements\",\n+                    new Object[] {xArray.length, yArray.length});\n+        }\n+    }\n+    \n+    /**\n+     * Derives a correlation matrix from a covariance matrix.\n+     * \n+     * <p>Uses the formula <br/>\n+     * <code>r(X,Y) = cov(X,Y)/s(X)s(Y)</code> where \n+     * <code>r(&middot,&middot;)</code> is the correlation coefficient and\n+     * <code>s(&middot;)</code> means standard deviation.</p>\n+     * \n+     * @param covarianceMatrix the covariance matrix\n+     * @return correlation matrix\n+     */\n+    public RealMatrix covarianceToCorrelation(RealMatrix covarianceMatrix) {\n+        int nVars = covarianceMatrix.getColumnDimension();\n+        RealMatrix outMatrix = new DenseRealMatrix(nVars, nVars);\n+        for (int i = 0; i < nVars; i++) {\n+            double sigma = Math.sqrt(covarianceMatrix.getEntry(i, i));\n+            outMatrix.setEntry(i, i, 1d);\n+            for (int j = 0; j < i; j++) {\n+                double entry = covarianceMatrix.getEntry(i, j) / \n+                       (sigma * Math.sqrt(covarianceMatrix.getEntry(j, j)));\n+                outMatrix.setEntry(i, j, entry);\n+                outMatrix.setEntry(j, i, entry);\n+            }\n+        }\n+        return outMatrix;\n+    }\n+    \n+    /**\n+     * Throws IllegalArgumentException of the matrix does not have at least\n+     * two columns and two rows\n+     * \n+     * @param matrix matrix to check for sufficiency\n+     */\n+    private void checkSufficientData(final RealMatrix matrix) {\n+        int nRows = matrix.getRowDimension();\n+        int nCols = matrix.getColumnDimension();\n+        if (nRows < 2 || nCols < 2) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    \"Insufficient data: only {0} rows and {1} columns.\",\n+                    new Object[]{nRows, nCols});\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.correlation;\n+\n+import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.distribution.TDistribution;\n+import org.apache.commons.math.distribution.TDistributionImpl;\n+import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.linear.DenseRealMatrix;\n+\n+import junit.framework.TestCase;\n+\n+public class PearsonsCorrelationTest extends TestCase {\n+    \n+    protected final double[] longleyData = new double[] {\n+            60323,83.0,234289,2356,1590,107608,1947,\n+            61122,88.5,259426,2325,1456,108632,1948,\n+            60171,88.2,258054,3682,1616,109773,1949,\n+            61187,89.5,284599,3351,1650,110929,1950,\n+            63221,96.2,328975,2099,3099,112075,1951,\n+            63639,98.1,346999,1932,3594,113270,1952,\n+            64989,99.0,365385,1870,3547,115094,1953,\n+            63761,100.0,363112,3578,3350,116219,1954,\n+            66019,101.2,397469,2904,3048,117388,1955,\n+            67857,104.6,419180,2822,2857,118734,1956,\n+            68169,108.4,442769,2936,2798,120445,1957,\n+            66513,110.8,444546,4681,2637,121950,1958,\n+            68655,112.6,482704,3813,2552,123366,1959,\n+            69564,114.2,502601,3931,2514,125368,1960,\n+            69331,115.7,518173,4806,2572,127852,1961,\n+            70551,116.9,554894,4007,2827,130081,1962\n+        };\n+    \n+    protected final double[] swissData = new double[] {\n+            80.2,17.0,15,12,9.96,\n+            83.1,45.1,6,9,84.84,\n+            92.5,39.7,5,5,93.40,\n+            85.8,36.5,12,7,33.77,\n+            76.9,43.5,17,15,5.16,\n+            76.1,35.3,9,7,90.57,\n+            83.8,70.2,16,7,92.85,\n+            92.4,67.8,14,8,97.16,\n+            82.4,53.3,12,7,97.67,\n+            82.9,45.2,16,13,91.38,\n+            87.1,64.5,14,6,98.61,\n+            64.1,62.0,21,12,8.52,\n+            66.9,67.5,14,7,2.27,\n+            68.9,60.7,19,12,4.43,\n+            61.7,69.3,22,5,2.82,\n+            68.3,72.6,18,2,24.20,\n+            71.7,34.0,17,8,3.30,\n+            55.7,19.4,26,28,12.11,\n+            54.3,15.2,31,20,2.15,\n+            65.1,73.0,19,9,2.84,\n+            65.5,59.8,22,10,5.23,\n+            65.0,55.1,14,3,4.52,\n+            56.6,50.9,22,12,15.14,\n+            57.4,54.1,20,6,4.20,\n+            72.5,71.2,12,1,2.40,\n+            74.2,58.1,14,8,5.23,\n+            72.0,63.5,6,3,2.56,\n+            60.5,60.8,16,10,7.72,\n+            58.3,26.8,25,19,18.46,\n+            65.4,49.5,15,8,6.10,\n+            75.5,85.9,3,2,99.71,\n+            69.3,84.9,7,6,99.68,\n+            77.3,89.7,5,2,100.00,\n+            70.5,78.2,12,6,98.96,\n+            79.4,64.9,7,3,98.22,\n+            65.0,75.9,9,9,99.06,\n+            92.2,84.6,3,3,99.46,\n+            79.3,63.1,13,13,96.83,\n+            70.4,38.4,26,12,5.62,\n+            65.7,7.7,29,11,13.79,\n+            72.7,16.7,22,13,11.22,\n+            64.4,17.6,35,32,16.92,\n+            77.6,37.6,15,7,4.97,\n+            67.6,18.7,25,7,8.65,\n+            35.0,1.2,37,53,42.34,\n+            44.7,46.6,16,29,50.43,\n+            42.8,27.7,22,29,58.33\n+        };\n+ \n+    \n+    /**\n+     * Test Longley dataset against R.\n+     */\n+    public void testLongly() throws Exception {  \n+        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n+        PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix); \n+        RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();\n+        double[] rData = new double[] {\n+                1.000000000000000, 0.9708985250610560, 0.9835516111796693, 0.5024980838759942,\n+                0.4573073999764817, 0.960390571594376, 0.9713294591921188,\n+                0.970898525061056, 1.0000000000000000, 0.9915891780247822, 0.6206333925590966,\n+                0.4647441876006747, 0.979163432977498, 0.9911491900672053,\n+                0.983551611179669, 0.9915891780247822, 1.0000000000000000, 0.6042609398895580,\n+                0.4464367918926265, 0.991090069458478, 0.9952734837647849,\n+                0.502498083875994, 0.6206333925590966, 0.6042609398895580, 1.0000000000000000,\n+                -0.1774206295018783, 0.686551516365312, 0.6682566045621746,\n+                0.457307399976482, 0.4647441876006747, 0.4464367918926265, -0.1774206295018783,\n+                1.0000000000000000, 0.364416267189032, 0.4172451498349454,\n+                0.960390571594376, 0.9791634329774981, 0.9910900694584777, 0.6865515163653120,\n+                0.3644162671890320, 1.000000000000000, 0.9939528462329257,\n+                0.971329459192119, 0.9911491900672053, 0.9952734837647849, 0.6682566045621746,\n+                0.4172451498349454, 0.993952846232926, 1.0000000000000000\n+        }; \n+        TestUtils.assertEquals(\"correlation matrix\", createRealMatrix(rData, 7, 7), correlationMatrix, 10E-15);\n+        \n+        double[] rPvalues = new double[] {\n+                4.38904690369668e-10,\n+                8.36353208910623e-12, 7.8159700933611e-14,\n+                0.0472894097790304, 0.01030636128354301, 0.01316878049026582, \n+                0.0749178049642416, 0.06971758330341182, 0.0830166169296545, 0.510948586323452,\n+                3.693245043123738e-09, 4.327782576751815e-11, 1.167954621905665e-13, 0.00331028281967516, 0.1652293725106684, \n+                3.95834476307755e-10, 1.114663916723657e-13, 1.332267629550188e-15, 0.00466039138541463, 0.1078477071581498, 7.771561172376096e-15\n+        };\n+        RealMatrix rPMatrix = createLowerTriangularRealMatrix(rPvalues, 7);\n+        fillUpper(rPMatrix, 0d);\n+        TestUtils.assertEquals(\"correlation p values\", rPMatrix, corrInstance.getCorrelationPValues(), 10E-15);\n+    }\n+    \n+    /**\n+     * Test R Swiss fertility dataset against R.\n+     */\n+    public void testSwissFertility() throws Exception {\n+         RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n+         PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix); \n+         RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();\n+         double[] rData = new double[] {\n+               1.0000000000000000, 0.3530791836199747, -0.6458827064572875, -0.6637888570350691,  0.4636847006517939,\n+                 0.3530791836199747, 1.0000000000000000,-0.6865422086171366, -0.6395225189483201, 0.4010950530487398,\n+                -0.6458827064572875, -0.6865422086171366, 1.0000000000000000, 0.6984152962884830, -0.5727418060641666,\n+                -0.6637888570350691, -0.6395225189483201, 0.6984152962884830, 1.0000000000000000, -0.1538589170909148,\n+                 0.4636847006517939, 0.4010950530487398, -0.5727418060641666, -0.1538589170909148, 1.0000000000000000\n+         };\n+         TestUtils.assertEquals(\"correlation matrix\", createRealMatrix(rData, 5, 5), correlationMatrix, 10E-15);\n+         \n+         double[] rPvalues = new double[] {\n+                 0.01491720061472623,\n+                 9.45043734069043e-07, 9.95151527133974e-08,\n+                 3.658616965962355e-07, 1.304590105694471e-06, 4.811397236181847e-08,\n+                 0.001028523190118147, 0.005204433539191644, 2.588307925380906e-05, 0.301807756132683\n+         };\n+         RealMatrix rPMatrix = createLowerTriangularRealMatrix(rPvalues, 5);\n+         fillUpper(rPMatrix, 0d);\n+         TestUtils.assertEquals(\"correlation p values\", rPMatrix, corrInstance.getCorrelationPValues(), 10E-15);\n+    }\n+    \n+    /**\n+     * Constant column\n+     */\n+    public void testConstant() {\n+        double[] noVariance = new double[] {1, 1, 1, 1};\n+        double[] values = new double[] {1, 2, 3, 4};\n+        assertTrue(Double.isNaN(new PearsonsCorrelation().correlation(noVariance, values)));\n+        assertTrue(Double.isNaN(new PearsonsCorrelation().correlation(noVariance, values)));\n+    }\n+    \n+    \n+    /**\n+     * Insufficient data\n+     */\n+     \n+    public void testInsufficientData() {\n+        double[] one = new double[] {1};\n+        double[] two = new double[] {2};\n+        try {\n+            new PearsonsCorrelation().correlation(one, two);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // Expected\n+        }\n+        RealMatrix matrix = new DenseRealMatrix(new double[][] {{0},{1}});\n+        try {\n+            new PearsonsCorrelation(matrix);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // Expected\n+        }\n+    }\n+    \n+    /**\n+     * Verify that direct t-tests using standard error estimates are consistent\n+     * with reported p-values\n+     */\n+    public void testStdErrorConsistency() throws Exception {\n+        TDistribution tDistribution = new TDistributionImpl(45);\n+        RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n+        PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix); \n+        RealMatrix rValues = corrInstance.getCorrelationMatrix();\n+        RealMatrix pValues = corrInstance.getCorrelationPValues();\n+        RealMatrix stdErrors = corrInstance.getCorrelationStandardErrors();\n+        for (int i = 0; i < 5; i++) {\n+            for (int j = 0; j < i; j++) {\n+                double t = Math.abs(rValues.getEntry(i, j)) / stdErrors.getEntry(i, j);\n+                double p = 2 * (1 - tDistribution.cumulativeProbability(t));\n+                assertEquals(p, pValues.getEntry(i, j), 10E-15);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Verify that creating correlation from covariance gives same results as\n+     * direct computation from the original matrix\n+     */\n+    public void testCovarianceConsistency() throws Exception {\n+        RealMatrix matrix = createRealMatrix(longleyData, 16, 7);\n+        PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix); \n+        Covariance covInstance = new Covariance(matrix);\n+        PearsonsCorrelation corrFromCovInstance = new PearsonsCorrelation(covInstance);\n+        TestUtils.assertEquals(\"correlation values\", corrInstance.getCorrelationMatrix(),\n+                corrFromCovInstance.getCorrelationMatrix(), 10E-15);\n+        TestUtils.assertEquals(\"p values\", corrInstance.getCorrelationPValues(),\n+                corrFromCovInstance.getCorrelationPValues(), 10E-15);\n+        TestUtils.assertEquals(\"standard errors\", corrInstance.getCorrelationStandardErrors(),\n+                corrFromCovInstance.getCorrelationStandardErrors(), 10E-15);\n+        \n+        PearsonsCorrelation corrFromCovInstance2 = \n+            new PearsonsCorrelation(covInstance.getCovarianceMatrix(), 16);\n+        TestUtils.assertEquals(\"correlation values\", corrInstance.getCorrelationMatrix(),\n+                corrFromCovInstance2.getCorrelationMatrix(), 10E-15);\n+        TestUtils.assertEquals(\"p values\", corrInstance.getCorrelationPValues(),\n+                corrFromCovInstance2.getCorrelationPValues(), 10E-15);\n+        TestUtils.assertEquals(\"standard errors\", corrInstance.getCorrelationStandardErrors(),\n+                corrFromCovInstance2.getCorrelationStandardErrors(), 10E-15);\n+    }\n+    \n+    protected RealMatrix createRealMatrix(double[] data, int nRows, int nCols) {\n+        double[][] matrixData = new double[nRows][nCols];\n+        int ptr = 0;\n+        for (int i = 0; i < nRows; i++) {\n+            System.arraycopy(data, ptr, matrixData[i], 0, nCols);\n+            ptr += nCols;\n+        }\n+        return new DenseRealMatrix(matrixData); \n+    }\n+    \n+    protected RealMatrix createLowerTriangularRealMatrix(double[] data, int dimension) {\n+        int ptr = 0;\n+        RealMatrix result = new DenseRealMatrix(dimension, dimension);\n+        for (int i = 1; i < dimension; i++) {\n+            for (int j = 0; j < i; j++) {\n+                result.setEntry(i, j, data[ptr]);\n+                ptr++;\n+            }\n+        }\n+        return result;\n+    }\n+    \n+    protected void fillUpper(RealMatrix matrix, double diagonalValue) {\n+        int dimension = matrix.getColumnDimension();\n+        for (int i = 0; i < dimension; i++) {\n+            matrix.setEntry(i, i, diagonalValue);\n+            for (int j = i+1; j < dimension; j++) {\n+                matrix.setEntry(i, j, matrix.getEntry(j, i));\n+            }\n+        }  \n+    }\n+}", "timestamp": 1234760989, "metainfo": ""}