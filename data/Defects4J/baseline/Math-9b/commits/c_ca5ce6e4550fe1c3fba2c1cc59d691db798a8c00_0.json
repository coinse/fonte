{"sha": "ca5ce6e4550fe1c3fba2c1cc59d691db798a8c00", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=21023 Submitted by:\tj3322ptm@yahoo.de HotFusionMan@Yahoo.com   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/CubicSplineFunction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import java.util.Arrays;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Represents a cubic spline function.\n+ * Spline functions map a certain interval of real numbers to real numbers.\n+ * A cubic spline consists of segments of cubic functions. For this class,\n+ * polynominal coefficents are used.\n+ * Arguments outside of the domain cause an IllegalArgumentException.\n+ * \n+ * @author pietsch at apache.org\n+ *\n+ */\n+public class CubicSplineFunction implements UnivariateRealFunction {\n+    // Spline segment interval delimiters.\n+    // Size is N+1 for N segments.\n+    private double xval[];\n+    \n+    // The spline segment's polynominal coefficients.\n+    // The first index runs over the intervals, size is N.\n+    // The second index adresses the coefficients in the segment, with\n+    // index 0 being the absolute coefficient and index 3 the coefficient\n+    // for the third power.\n+    // The coefficients are setup so that x runs from 0 to xval[i+1]-xval[i].\n+    private double c[][];\n+\n+    public CubicSplineFunction(double xval[],double c[][]) {\n+        // TODO: should copy the arguments here, for safety. This could be a major overhead.\n+        this.xval=xval;\n+        this.c=c;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.UnivariateRealFunction#value(double)\n+     */\n+    public double value(double x) throws MathException {\n+        if(x<xval[0]||x>xval[xval.length-1]) {\n+            throw new IllegalArgumentException(\"Argument outside domain\");\n+        }\n+        int i=Arrays.binarySearch(xval,x);\n+        if(i<0) {\n+            i=-i-2;\n+        }\n+        x=x-xval[i];\n+        return ((c[i][3]*x+c[i][2])*x+c[i][1])*x+c[i][0];\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)\n+     */\n+    public double firstDerivative(double x) throws MathException {\n+        if(x<xval[0]||x>xval[xval.length-1]) {\n+            throw new IllegalArgumentException(\"Argument outside domain\");\n+        }\n+        int i=Arrays.binarySearch(xval,x);\n+        if(i<0) {\n+            i=-i-2;\n+        }\n+        x=x-xval[i];\n+        return (3*c[i][3]*x+2*c[i][2])*x+c[i][1];\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)\n+     */\n+    public double secondDerivative(double x) throws MathException {\n+        if(x<xval[0]||x>xval[xval.length-1]) {\n+            throw new IllegalArgumentException(\"Argument outside domain\");\n+        }\n+        int i=Arrays.binarySearch(xval,x);\n+        if(i<0) {\n+            i=-i-2;\n+        }\n+        x=x-xval[i];\n+        return 6*c[i][3]*x+2*c[i][2];\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/QuinticFunction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Auxillary class for testing solvers.\n+ * \n+ * @author pietsch at apache.org\n+ *\n+ */\n+public class QuinticFunction implements UnivariateRealFunction {\n+\n+    /* Evaluate quintic.\n+     * @see org.apache.commons.math.UnivariateRealFunction#value(double)\n+     */\n+    public double value(double x) throws MathException {\n+        return (x-1)*(x-0.5)*x*(x+0.5)*(x+1);\n+    }\n+\n+    /* First derivative of quintic.\n+     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)\n+     */\n+    public double firstDerivative(double x) throws MathException {\n+        return (5*x*x-3.75)*x*x+0.25;\n+    }\n+\n+    /* Second order derivative of quintic.\n+     * Unsupported.\n+     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)\n+     */\n+    public double secondDerivative(double x) throws MathException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/SinFunction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Auxillary class for testing solvers.\n+ *\n+ * The function is extraordinarily well behaved around zero roots: it\n+ * has an inflection point there (second order derivative is zero),\n+ * which means linear approximation (Regula Falsi) will converge\n+ * quadratically.\n+ * \n+ * @author pietsch at apache.org\n+ *\n+ */\n+public class SinFunction implements UnivariateRealFunction {\n+\n+    /* Evaluate sinus fuction.\n+     * @see org.apache.commons.math.UnivariateRealFunction#value(double)\n+     */\n+    public double value(double x) throws MathException {\n+        return Math.sin(x);\n+    }\n+\n+    /* First derivative of sinus function\n+     * @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)\n+     */\n+    public double firstDerivative(double x) throws MathException {\n+        return Math.cos(x);\n+    }\n+\n+    /* Second derivative of sinus function.\n+     * Unsupported.\n+     * @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)\n+     */\n+    public double secondDerivative(double x) throws MathException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/SplineInterpolator.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+/**\n+ * Computes a natural spline interpolation for the data set.\n+ *\n+ * @author pietsch at apache.org\n+ *\n+ */\n+public class SplineInterpolator implements UnivariateRealInterpolator {\n+    private double[][] c = null ;\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.math.UnivariateRealInterpolator#interpolate(double[], double[])\n+     */\n+    public UnivariateRealFunction interpolate(double[] xval, double[] yval) {\n+        if (xval.length != yval.length) {\n+            throw new IllegalArgumentException(\"Dataset arrays must have same length.\");\n+        }\n+\n+        if ( c == null )\n+        {\n+            // Number of intervals. The number of data points is N+1.\n+            int n = xval.length - 1;\n+            // Check whether the xval vector has ascending values.\n+            // Separation should be checked too (not implemented: which criteria?).\n+            for (int i = 0; i < n; i++) {\n+                if (xval[i]>=xval[i+1]) {\n+                    throw new IllegalArgumentException(\"Dataset must specify sorted, ascending x values.\");\n+                }\n+            }\n+            // Vectors for the equation system. There are n-1 equations for the unknowns s[i] (1<=i<=N-1),\n+            // which are second order derivatives for the spline at xval[i]. At the end points, s[0]=s[N]=0.\n+            // Vectors are offset by -1, except the lower diagonal vector which is offset by -2. Layout:\n+            // d[0]*s[1]+u[0]*s[2]                                           = b[0]\n+            // l[0]*s[1]+d[1]*s[2]+u[1]*s[3]                                 = b[1]\n+            //           l[1]*s[2]+d[2]*s[3]+u[2]*s[4]                       = b[2]\n+            //                           ...\n+            //                     l[N-4]*s[N-3]+d[N-3]*s[N-2]+u[N-3]*s[N-1] = b[N-3]\n+            //                                   l[N-3]*s[N-2]+d[N-2]*s[N-1] = b[N-2]\n+            // Vector b is the right hand side of the system.\n+            double b[] = new double[n - 1];\n+            // Vector d is diagonal of the matrix and also holds the computed solution.\n+            double d[] = new double[n - 1];\n+            // u[] and l[] are not really needed, the computation can be folded into the\n+            // system solving loops.\n+            //double u[] = new double[n - 2]; // upper diagonal\n+            //double l[] = new double[n - 2]; // lower diagonal\n+            // Setup RHS and diagonal.\n+            for (int i = 0; i < n - 1; i++) {\n+                // TODO avoid recomputing the term\n+                //    (yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1])\n+                // take it from the previous loop pass. Note: the interesting part of performance\n+                // loss is the range check in the array access, not the computation itself.\n+                b[i] =\n+                    6.0\n+                        * ((yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1])\n+                            - (yval[i + 1] - yval[i]) / (xval[i + 1] - xval[i]));\n+                d[i] = 2.0 * (xval[i + 2] - xval[i]);\n+            }\n+            // Set up upper and lower diagonal. Keep the offsets in mind.\n+            //for (int i = 0; i < n - 2; i++) {\n+            //u[i] = xval[i + 2] - xval[i + 1];\n+            //l[i] = xval[i + 2] - xval[i + 1];\n+            //}\n+            // Solve the system: forward pass.\n+            for (int i = 0; i < n - 2; i++) {\n+                // TODO: This relies on compiler for CSE of delta/d[i]. Is this a reasonable assumption?\n+                double delta = xval[i + 2] - xval[i + 1];\n+                d[i + 1] -= delta * delta / d[i];\n+                b[i + 1] -= b[i] * delta / d[i];\n+            }\n+            // Solve the system: backward pass.\n+            d[n - 2] = b[n - 2] / d[n - 2];\n+            for (int i = n - 3; i >= 0; i--) {\n+                d[i] = (b[i] - (xval[i + 2] - xval[i + 1]) * d[i + 1]) / d[i];\n+            }\n+            // Compute coefficients as usual polynomial coefficients.\n+            // Not the best with respect to roundoff on evaluation, but simple.\n+            c = new double[n][4];\n+            c[0][3] = d[0] / (xval[1] - xval[0]) / 6.0;\n+            c[0][2] = 0.0;\n+            c[0][1] =\n+                (yval[1] - yval[0]) / (xval[1] - xval[0])\n+                    - d[0] * (xval[1] - xval[0]) / 6.0;\n+            for (int i = 1; i < n - 2; i++) {\n+                // TODO: This relies on compiler for CSE of xval[i + 1] - xval[i]. Is this a reasonable assumption?\n+                c[i][3] = (d[i] - d[i - 1]) / (xval[i + 1] - xval[i]) / 6.0;\n+                c[i][2] = d[i - 1] / 2.0;\n+                c[i][1] =\n+                    (yval[i + 1] - yval[i]) / (xval[i + 1] - xval[i])\n+                        - d[i] * (xval[i + 1] - xval[i]) / 6.0\n+                        - d[i\n+                        - 1] * (xval[i + 1] - xval[i]) / 3.0;\n+            }\n+            // TODO: again, CSE aspects.\n+            c[n - 1][3] = -d[n - 2] / (xval[n] - xval[n - 1]) / 6.0;\n+            c[n - 1][2] = d[n - 2] / 2.0;\n+            c[n - 1][1] =\n+                (yval[n] - yval[n - 1]) / (xval[n] - xval[n - 1])\n+                    - d[n\n+                    - 2] * (xval[n] - xval[n - 1]) / 3.0;\n+            for (int i = 0; i < n; i++) {\n+                c[i][0] = yval[i];\n+            }\n+        }\n+\n+        // TODO: copy xval, unless copied in CubicSplineFunction constructor\n+        return new CubicSplineFunction(xval, c);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ *  Interface for interpolating a data set.\n+ *  \n+ *  * @author pietsch at apache.org\n+ *\n+ */\n+public interface UnivariateRealInterpolator {\n+\n+    /**\n+     * Computes an interpolating function for the data set.\n+     * @param xval the arguments for the interpolation points\n+     * @param yval the values for the interpolation points\n+     * @return a function which interpolates the data set\n+     * @throws MathException if arguments violate assumptions made by the interpolationg algorithm\n+     */\n+    public UnivariateRealFunction interpolate(double xval[], double yval[])\n+        throws MathException;\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/analysis/InterpolatorTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test the interpolation framework.\n+ * \n+ * @author pietsch at apache.org\n+ *\n+ */\n+public class InterpolatorTest extends TestCase {\n+\n+    public InterpolatorTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(InterpolatorTest.class);\n+        suite.setName(\"UnivariateRealInterpolator Tests\");\n+        return suite;\n+    }\n+\n+    public void testInterpolateLinearDegenerateTwoSegment()\n+        throws MathException {\n+        System.out.println(\" deg 2 seg\");\n+        double xval[] = { 0.0, 0.5, 1.0 };\n+        double yval[] = { 0.0, 0.5, 1.0 };\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(xval, yval);\n+        double x;\n+        x = 0.0;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 0.5;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 1 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+    }\n+\n+    public void testInterpolateLinearDegenerateThreeSegment()\n+        throws MathException {\n+        System.out.println(\" deg 3 seg\");\n+        double xval[] = { 0.0, 0.5, 1.0, 1.5 };\n+        double yval[] = { 0.0, 0.5, 1.0, 1.5 };\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(xval, yval);\n+        double x;\n+        x = 0.0;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 0.5 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 0.5;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 1 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 1;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 1.5 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+    }\n+\n+    public void testInterpolateLinear() throws MathException {\n+        System.out.println(\" triang 2 seg\");\n+        double xval[] = { 0.0, 0.5, 1.0 };\n+        double yval[] = { 0.0, 0.5, 0.0 };\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(xval, yval);\n+        double x;\n+        x = 0.0;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 0.5 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 0.5;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 1 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+    }\n+\n+    public void testInterpolateSin() throws MathException {\n+        System.out.println(\" sin\");\n+        double xval[] =\n+            {\n+                0.0,\n+                Math.PI / 6.0,\n+                Math.PI / 2.0,\n+                5.0 * Math.PI / 6.0,\n+                Math.PI,\n+                7.0 * Math.PI / 6.0,\n+                3.0 * Math.PI / 2.0,\n+                11.0 * Math.PI / 6.0,\n+                2.0 * Math.PI };\n+        double yval[] = { 0.0, 0.5, 1.0, 0.5, 0.0, -0.5, -1.0, -0.5, 0.0 };\n+\n+        System.out.println(\"n=\" + xval.length);\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(xval, yval);\n+        double x;\n+        x = 0.0;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = Math.PI / 6.0 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = Math.PI / 6.0 + 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = Math.PI / 2 - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = Math.PI / 2 + 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = Math.PI - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = Math.PI + 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        x = 2.0 * Math.PI - 1E-6;\n+        System.out.println(\n+            \"x=\"\n+                + x\n+                + \" y=\"\n+                + f.value(x)\n+                + \" y'=\"\n+                + f.firstDerivative(x)\n+                + \" y''=\"\n+                + f.secondDerivative(x));\n+        //assertEquals(0.5,f.value(Math.PI/6.0),)\n+    }\n+\n+    public void testIllegalArguments() throws MathException {\n+        // Data set arrays of different size.\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        try {\n+            double xval[] = { 0.0, 1.0 };\n+            double yval[] = { 0.0, 1.0, 2.0 };\n+            UnivariateRealFunction f = i.interpolate(xval, yval);\n+            fail(\"Failed to detect data set array with different sizes.\");\n+        } catch (IllegalArgumentException iae) {\n+        }\n+        // X values not sorted.\n+        try {\n+            double xval[] = { 0.0, 1.0, 0.5 };\n+            double yval[] = { 0.0, 1.0, 2.0 };\n+            UnivariateRealFunction f = i.interpolate(xval, yval);\n+            fail(\"Failed to detect unsorted arguments.\");\n+        } catch (IllegalArgumentException iae) {\n+        }\n+    }\n+}", "timestamp": 1056504558, "metainfo": ""}