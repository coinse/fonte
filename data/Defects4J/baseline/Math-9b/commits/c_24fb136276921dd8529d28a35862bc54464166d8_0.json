{"sha": "24fb136276921dd8529d28a35862bc54464166d8", "log": "MATH-461 Created unchecked exception \"MathParseException\". Removed occurrence of old \"MathRuntimeException\". Modified unit tests to not use the base class \"parseObject\" method because its signature contains a checked exception). Upgraded tests to Junit4 (MATH-423).   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/MathParseException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Class to signal parse failures.\n+ *\n+ * @since 2.2\n+ * @version $Revision$ $Date$\n+ */\n+public class MathParseException extends MathRuntimeException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = -6024911025449780478L;\n+\n+    /**\n+     * @param wrong Bad string representation of the object.\n+     * @param position Index, in the {@code wrong} string, that caused the\n+     * parsing to fail.\n+     * @param type Class of the object supposedly represented by the\n+     * {@code wrong} string.\n+     */\n+    public MathParseException(String wrong,\n+                              int position,\n+                              Class type) {\n+        super(null, null, LocalizedFormats.CANNOT_PARSE_AS_TYPE,\n+              wrong, new Integer(position), type.getName());\n+    }\n+\n+    /**\n+     * @param wrong Bad string representation of the object.\n+     * @param position Index, in the {@code wrong} string, that caused the\n+     * parsing to fail.\n+     */\n+    public MathParseException(String wrong,\n+                              int position) {\n+        super(null, null, LocalizedFormats.CANNOT_PARSE,\n+              wrong, new Integer(position));\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     UNABLE_TO_SOLVE_SINGULAR_PROBLEM(\"unable to solve: singular problem\"),\n     UNBOUNDED_SOLUTION(\"unbounded solution\"),\n     UNKNOWN_MODE(\"unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})\"),\n+    CANNOT_PARSE_AS_TYPE(\"string {0} unparseable (from position {1}) as an object of type {2}\"), /* keep */\n+    CANNOT_PARSE(\"string {0} unparseable (from position {1})\"), /* keep */\n     UNPARSEABLE_3D_VECTOR(\"unparseable 3D vector: \\\"{0}\\\"\"),\n     UNPARSEABLE_COMPLEX_NUMBER(\"unparseable complex number: \\\"{0}\\\"\"),\n     UNPARSEABLE_FRACTION_NUMBER(\"unparseable fraction number: \\\"{0}\\\"\"),\n--- a/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java\n \n import java.text.FieldPosition;\n import java.text.NumberFormat;\n-import java.text.ParseException;\n import java.text.ParsePosition;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n \n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.MathParseException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.util.CompositeFormat;\n     }\n \n     /**\n-     * Parses a string to produce a {@link RealVector} object.\n-     * @param source the string to parse\n+     * Parse a string to produce a {@link RealVector} object.\n+     *\n+     * @param source String to parse.\n      * @return the parsed {@link RealVector} object.\n-     * @exception ParseException if the beginning of the specified string\n-     *            cannot be parsed.\n-     */\n-    public ArrayRealVector parse(String source) throws ParseException {\n-        ParsePosition parsePosition = new ParsePosition(0);\n-        ArrayRealVector result = parse(source, parsePosition);\n+     * @throws MathParseException if the beginning of the specified string\n+     * cannot be parsed.\n+     */\n+    public ArrayRealVector parse(String source) {\n+        final ParsePosition parsePosition = new ParsePosition(0);\n+        final ArrayRealVector result = parse(source, parsePosition);\n         if (parsePosition.getIndex() == 0) {\n-            throw MathRuntimeException.createParseException(\n-                    parsePosition.getErrorIndex(),\n-                    LocalizedFormats.UNPARSEABLE_REAL_VECTOR, source);\n+            throw new MathParseException(source,\n+                                         parsePosition.getErrorIndex(),\n+                                         ArrayRealVector.class);\n         }\n         return result;\n     }\n \n     /**\n-     * Parses a string to produce a {@link RealVector} object.\n-     * @param source the string to parse\n+     * Parse a string to produce a {@link RealVector} object.\n+     *\n+     * @param source String to parse.\n      * @param pos input/ouput parsing parameter.\n      * @return the parsed {@link RealVector} object.\n      */\n             data[i] = components.get(i).doubleValue();\n         }\n         return new ArrayRealVector(data, false);\n-\n     }\n \n     /**\n     public Object parseObject(String source, ParsePosition pos) {\n         return parse(source, pos);\n     }\n-\n }\n--- a/src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java\n package org.apache.commons.math.linear;\n \n import java.text.NumberFormat;\n-import java.text.ParseException;\n import java.text.ParsePosition;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-\n+import org.junit.Test;\n+import org.junit.Assert;\n+\n+import org.apache.commons.math.exception.MathParseException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.util.CompositeFormat;\n \n-public abstract class RealVectorFormatAbstractTest extends TestCase {\n+public abstract class RealVectorFormatAbstractTest {\n \n     RealVectorFormat realVectorFormat = null;\n     RealVectorFormat realVectorFormatSquare = null;\n \n     protected abstract char getDecimalCharacter();\n \n-    @Override\n-    public void setUp() throws Exception {\n+    public RealVectorFormatAbstractTest() {\n         realVectorFormat = RealVectorFormat.getInstance(getLocale());\n         final NumberFormat nf = NumberFormat.getInstance(getLocale());\n         nf.setMaximumFractionDigits(2);\n         realVectorFormatSquare = new RealVectorFormat(\"[\", \"]\", \" : \", nf);\n     }\n \n+    @Test\n     public void testSimpleNoDecimals() {\n         ArrayRealVector c = new ArrayRealVector(new double[] {1, 1, 1});\n         String expected = \"{1; 1; 1}\";\n         String actual = realVectorFormat.format(c);\n-        assertEquals(expected, actual);\n-    }\n-\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n     public void testSimpleWithDecimals() {\n         ArrayRealVector c = new ArrayRealVector(new double[] {1.23, 1.43, 1.63});\n         String expected =\n             \"43; 1\" + getDecimalCharacter() +\n             \"63}\";\n         String actual = realVectorFormat.format(c);\n-        assertEquals(expected, actual);\n-    }\n-\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n     public void testSimpleWithDecimalsTrunc() {\n         ArrayRealVector c = new ArrayRealVector(new double[] {1.2323, 1.4343, 1.6333});\n         String expected =\n             \"43; 1\" + getDecimalCharacter() +\n             \"63}\";\n         String actual = realVectorFormat.format(c);\n-        assertEquals(expected, actual);\n-    }\n-\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n     public void testNegativeX() {\n         ArrayRealVector c = new ArrayRealVector(new double[] {-1.2323, 1.4343, 1.6333});\n         String expected =\n             \"43; 1\" + getDecimalCharacter() +\n             \"63}\";\n         String actual = realVectorFormat.format(c);\n-        assertEquals(expected, actual);\n-    }\n-\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n     public void testNegativeY() {\n         ArrayRealVector c = new ArrayRealVector(new double[] {1.2323, -1.4343, 1.6333});\n         String expected =\n             \"43; 1\" + getDecimalCharacter() +\n             \"63}\";\n         String actual = realVectorFormat.format(c);\n-        assertEquals(expected, actual);\n-    }\n-\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n     public void testNegativeZ() {\n         ArrayRealVector c = new ArrayRealVector(new double[] {1.2323, 1.4343, -1.6333});\n         String expected =\n             \"43; -1\" + getDecimalCharacter() +\n             \"63}\";\n         String actual = realVectorFormat.format(c);\n-        assertEquals(expected, actual);\n-    }\n-\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n     public void testNonDefaultSetting() {\n         ArrayRealVector c = new ArrayRealVector(new double[] {1, 1, 1});\n         String expected = \"[1 : 1 : 1]\";\n         String actual = realVectorFormatSquare.format(c);\n-        assertEquals(expected, actual);\n-    }\n-\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n     public void testStaticFormatRealVectorImpl() {\n         Locale defaultLocal = Locale.getDefault();\n         Locale.setDefault(getLocale());\n             \"33; 432\" + getDecimalCharacter() +\n             \"44}\";\n         String actual = RealVectorFormat.formatRealVector(c);\n-        assertEquals(expected, actual);\n+        Assert.assertEquals(expected, actual);\n \n         Locale.setDefault(defaultLocal);\n     }\n \n+    @Test\n     public void testNan() {\n         ArrayRealVector c = new ArrayRealVector(new double[] {Double.NaN, Double.NaN, Double.NaN});\n         String expected = \"{(NaN); (NaN); (NaN)}\";\n         String actual = realVectorFormat.format(c);\n-        assertEquals(expected, actual);\n-    }\n-\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n     public void testPositiveInfinity() {\n         ArrayRealVector c = new ArrayRealVector(new double[] {\n                 Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY\n         });\n         String expected = \"{(Infinity); (Infinity); (Infinity)}\";\n         String actual = realVectorFormat.format(c);\n-        assertEquals(expected, actual);\n-    }\n-\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n     public void tesNegativeInfinity() {\n         ArrayRealVector c = new ArrayRealVector(new double[] {\n                 Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY\n         });\n         String expected = \"{(-Infinity); (-Infinity); (-Infinity)}\";\n         String actual = realVectorFormat.format(c);\n-        assertEquals(expected, actual);\n-    }\n-\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n     public void testParseSimpleNoDecimals() {\n         String source = \"{1; 1; 1}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1, 1, 1});\n         try {\n-            ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);\n-            assertEquals(expected, actual);\n-        } catch (ParseException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n-\n+            ArrayRealVector actual = realVectorFormat.parse(source);\n+            Assert.assertEquals(expected, actual);\n+        } catch (MathParseException ex) {\n+            Assert.fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n     public void testParseIgnoredWhitespace() {\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1, 1, 1});\n         ParsePosition pos1 = new ParsePosition(0);\n         String source1 = \"{1;1;1}\";\n-        assertEquals(expected, realVectorFormat.parseObject(source1, pos1));\n-        assertEquals(source1.length(), pos1.getIndex());\n+        Assert.assertEquals(expected, realVectorFormat.parse(source1, pos1));\n+        Assert.assertEquals(source1.length(), pos1.getIndex());\n         ParsePosition pos2 = new ParsePosition(0);\n         String source2 = \" { 1 ; 1 ; 1 } \";\n-        assertEquals(expected, realVectorFormat.parseObject(source2, pos2));\n-        assertEquals(source2.length() - 1, pos2.getIndex());\n-    }\n-\n+        Assert.assertEquals(expected, realVectorFormat.parse(source2, pos2));\n+        Assert.assertEquals(source2.length() - 1, pos2.getIndex());\n+    }\n+\n+    @Test\n     public void testParseSimpleWithDecimals() {\n         String source =\n             \"{1\" + getDecimalCharacter() +\n             \"63}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1.23, 1.43, 1.63});\n         try {\n-            ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);\n-            assertEquals(expected, actual);\n-        } catch (ParseException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n-\n+            ArrayRealVector actual = realVectorFormat.parse(source);\n+            Assert.assertEquals(expected, actual);\n+        } catch (MathParseException ex) {\n+            Assert.fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n     public void testParseSimpleWithDecimalsTrunc() {\n         String source =\n             \"{1\" + getDecimalCharacter() +\n             \"6333}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1.2323, 1.4343, 1.6333});\n         try {\n-            ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);\n-            assertEquals(expected, actual);\n-        } catch (ParseException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n-\n+            ArrayRealVector actual = realVectorFormat.parse(source);\n+            Assert.assertEquals(expected, actual);\n+        } catch (MathParseException ex) {\n+            Assert.fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n     public void testParseNegativeX() {\n         String source =\n             \"{-1\" + getDecimalCharacter() +\n             \"6333}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {-1.2323, 1.4343, 1.6333});\n         try {\n-            ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);\n-            assertEquals(expected, actual);\n-        } catch (ParseException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n-\n+            ArrayRealVector actual = realVectorFormat.parse(source);\n+            Assert.assertEquals(expected, actual);\n+        } catch (MathParseException ex) {\n+            Assert.fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n     public void testParseNegativeY() {\n         String source =\n             \"{1\" + getDecimalCharacter() +\n             \"6333}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1.2323, -1.4343, 1.6333});\n         try {\n-            ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);\n-            assertEquals(expected, actual);\n-        } catch (ParseException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n-\n+            ArrayRealVector actual = realVectorFormat.parse(source);\n+            Assert.assertEquals(expected, actual);\n+        } catch (MathParseException ex) {\n+            Assert.fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n     public void testParseNegativeZ() {\n         String source =\n             \"{1\" + getDecimalCharacter() +\n             \"6333}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1.2323, 1.4343, -1.6333});\n         try {\n-            ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);\n-            assertEquals(expected, actual);\n-        } catch (ParseException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n-\n+            ArrayRealVector actual = realVectorFormat.parse(source);\n+            Assert.assertEquals(expected, actual);\n+        } catch (MathParseException ex) {\n+            Assert.fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n     public void testParseNegativeAll() {\n         String source =\n             \"{-1\" + getDecimalCharacter() +\n             \"6333}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {-1.2323, -1.4343, -1.6333});\n         try {\n-            ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);\n-            assertEquals(expected, actual);\n-        } catch (ParseException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n-\n+            ArrayRealVector actual = realVectorFormat.parse(source);\n+            Assert.assertEquals(expected, actual);\n+        } catch (MathParseException ex) {\n+            Assert.fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n     public void testParseZeroX() {\n         String source =\n             \"{0\" + getDecimalCharacter() +\n             \"6333}\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {0.0, -1.4343, 1.6333});\n         try {\n-            ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);\n-            assertEquals(expected, actual);\n-        } catch (ParseException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n-\n+            ArrayRealVector actual = realVectorFormat.parse(source);\n+            Assert.assertEquals(expected, actual);\n+        } catch (MathParseException ex) {\n+            Assert.fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n     public void testParseNonDefaultSetting() {\n         String source =\n             \"[1\" + getDecimalCharacter() +\n             \"6333]\";\n         ArrayRealVector expected = new ArrayRealVector(new double[] {1.2323, 1.4343, 1.6333});\n         try {\n-            ArrayRealVector actual = (ArrayRealVector) realVectorFormatSquare.parseObject(source);\n-            assertEquals(expected, actual);\n-        } catch (ParseException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n-\n+            ArrayRealVector actual = realVectorFormatSquare.parse(source);\n+            Assert.assertEquals(expected, actual);\n+        } catch (MathParseException ex) {\n+            Assert.fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n     public void testParseNan() {\n         String source = \"{(NaN); (NaN); (NaN)}\";\n         try {\n-            ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);\n-            assertEquals(new ArrayRealVector(new double[] {Double.NaN, Double.NaN, Double.NaN}), actual);\n-        } catch (ParseException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n-\n+            ArrayRealVector actual = realVectorFormat.parse(source);\n+            Assert.assertEquals(new ArrayRealVector(new double[] {Double.NaN, Double.NaN, Double.NaN}), actual);\n+        } catch (MathParseException ex) {\n+            Assert.fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n     public void testParsePositiveInfinity() {\n         String source = \"{(Infinity); (Infinity); (Infinity)}\";\n         try {\n-            ArrayRealVector actual = (ArrayRealVector)realVectorFormat.parseObject(source);\n-            assertEquals(new ArrayRealVector(new double[] {\n+            ArrayRealVector actual = realVectorFormat.parse(source);\n+            Assert.assertEquals(new ArrayRealVector(new double[] {\n                     Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY\n             }), actual);\n-        } catch (ParseException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n-\n+        } catch (MathParseException ex) {\n+            Assert.fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n     public void testParseNegativeInfinity() {\n         String source = \"{(-Infinity); (-Infinity); (-Infinity)}\";\n         try {\n-            ArrayRealVector actual = (ArrayRealVector)realVectorFormat.parseObject(source);\n-            assertEquals(new ArrayRealVector(new double[] {\n+            ArrayRealVector actual = realVectorFormat.parse(source);\n+            Assert.assertEquals(new ArrayRealVector(new double[] {\n                     Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY\n             }), actual);\n-        } catch (ParseException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n-\n+        } catch (MathParseException ex) {\n+            Assert.fail(ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n     public void testParseNoComponents() {\n         try {\n-            realVectorFormat.parseObject(\"{ }\");\n-            fail(\"Expecting ParseException\");\n-        } catch (ParseException pe) {\n+            realVectorFormat.parse(\"{ }\");\n+            Assert.fail(\"Expecting MathParseException\");\n+        } catch (MathParseException pe) {\n             // expected behavior\n         }\n     }\n \n-    public void testParseManyComponents() throws ParseException {\n-        ArrayRealVector parsed =\n-            (ArrayRealVector) realVectorFormat.parseObject(\"{0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0}\");\n-        assertEquals(24, parsed.getDimension());\n-    }\n-\n+    @Test\n+    public void testParseManyComponents() {\n+        ArrayRealVector parsed = realVectorFormat.parse(\"{0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0}\");\n+        Assert.assertEquals(24, parsed.getDimension());\n+    }\n+\n+    @Test\n     public void testConstructorSingleFormat() {\n         NumberFormat nf = NumberFormat.getInstance();\n         RealVectorFormat cf = new RealVectorFormat(nf);\n-        assertNotNull(cf);\n-        assertEquals(nf, cf.getFormat());\n-    }\n-\n+        Assert.assertNotNull(cf);\n+        Assert.assertEquals(nf, cf.getFormat());\n+    }\n+\n+    @Test\n     public void testFormatObject() {\n         try {\n             CompositeFormat cf = new RealVectorFormat();\n             Object object = new Object();\n             cf.format(object);\n-            fail();\n+            Assert.fail();\n         } catch (MathIllegalArgumentException ex) {\n             // success\n         }\n     }\n \n+    @Test\n     public void testForgottenPrefix() {\n         ParsePosition pos = new ParsePosition(0);\n         final String source = \"1; 1; 1}\";\n-        assertNull(\"Should not parse <\"+source+\">\",new RealVectorFormat().parse(source, pos));\n-        assertEquals(0, pos.getErrorIndex());\n-    }\n-\n+        Assert.assertNull(\"Should not parse <\"+source+\">\",new RealVectorFormat().parse(source, pos));\n+        Assert.assertEquals(0, pos.getErrorIndex());\n+    }\n+\n+    @Test\n     public void testForgottenSeparator() {\n         ParsePosition pos = new ParsePosition(0);\n         final String source = \"{1; 1 1}\";\n-        assertNull(\"Should not parse <\"+source+\">\",new RealVectorFormat().parse(source, pos));\n-        assertEquals(6, pos.getErrorIndex());\n-    }\n-\n+        Assert.assertNull(\"Should not parse <\"+source+\">\",new RealVectorFormat().parse(source, pos));\n+        Assert.assertEquals(6, pos.getErrorIndex());\n+    }\n+\n+    @Test\n     public void testForgottenSuffix() {\n         ParsePosition pos = new ParsePosition(0);\n         final String source = \"{1; 1; 1 \";\n-        assertNull(\"Should not parse <\"+source+\">\",new RealVectorFormat().parse(source, pos));\n-        assertEquals(8, pos.getErrorIndex());\n-    }\n-\n+        Assert.assertNull(\"Should not parse <\"+source+\">\",new RealVectorFormat().parse(source, pos));\n+        Assert.assertEquals(8, pos.getErrorIndex());\n+    }\n }", "timestamp": 1293127091, "metainfo": ""}