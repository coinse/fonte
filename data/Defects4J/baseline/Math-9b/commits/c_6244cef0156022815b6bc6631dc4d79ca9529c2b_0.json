{"sha": "6244cef0156022815b6bc6631dc4d79ca9529c2b", "log": "MATH-797 Performance improvement: Caching the converted rules that were already retrieved, so that the conversion from \"Number\" occurs only once per rule.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java\n     /** List of points and weights, indexed by the order of the rule. */\n     private final Map<Integer, Pair<T[], T[]>> pointsAndWeights\n         = new TreeMap<Integer, Pair<T[], T[]>>();\n+    /** Cache for double-precision rules. */\n+    private final Map<Integer, Pair<double[], double[]>> pointsAndWeightsDouble\n+        = new TreeMap<Integer, Pair<double[], double[]>>();\n \n     /**\n      * Gets a copy of the quadrature rule with given number of integration points.\n      * @return a copy of the integration rule.\n      */\n     public Pair<double[], double[]> getRule(int numberOfPoints) {\n-        return convertToDouble(getRuleInternal(numberOfPoints));\n+        // Try to obtain the rule from the cache.\n+        Pair<double[], double[]> cached = pointsAndWeightsDouble.get(numberOfPoints);\n+\n+        if (cached == null) {\n+            // Rule not computed yet.\n+\n+            // Compute the rule.\n+            final Pair<T[], T[]> rule = getRuleInternal(numberOfPoints);\n+            cached = convertToDouble(rule);\n+\n+            // Cache it.\n+            pointsAndWeightsDouble.put(numberOfPoints, cached);\n+        }\n+\n+        // Return a copy.\n+        return new Pair<double[], double[]>(cached.getFirst().clone(),\n+                                            cached.getSecond().clone());\n     }\n \n     /**", "timestamp": 1342804350, "metainfo": ""}