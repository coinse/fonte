{"sha": "9639c6ae33b2eeaf2fdafec2763d7a83d7ce945b", "log": "Merged EigenDecomposition and EigenDecompositionImpl (see MATH-662).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecomposition.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecomposition.java\n \n package org.apache.commons.math.linear;\n \n+import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.FastMath;\n \n /**\n- * An interface to classes that implement an algorithm to calculate the\n- * eigen decomposition of a real matrix.\n+ * Calculates the eigen decomposition of a real <strong>symmetric</strong>\n+ * matrix.\n  * <p>The eigen decomposition of matrix A is a set of two matrices:\n  * V and D such that A = V &times; D &times; V<sup>T</sup>.\n  * A, V and D are all m &times; m matrices.</p>\n- * <p>This interface is similar in spirit to the <code>EigenvalueDecomposition</code>\n+ * <p>This class is similar in spirit to the <code>EigenvalueDecomposition</code>\n  * class from the <a href=\"http://math.nist.gov/javanumerics/jama/\">JAMA</a>\n  * library, with the following changes:</p>\n  * <ul>\n  *   <li>a {@link #getDeterminant() getDeterminant} method has been added.</li>\n  *   <li>a {@link #getSolver() getSolver} method has been added.</li>\n  * </ul>\n+ * <p>\n+ * As of 2.0, this class supports only <strong>symmetric</strong> matrices, and\n+ * hence computes only real realEigenvalues. This implies the D matrix returned\n+ * by {@link #getD()} is always diagonal and the imaginary values returned\n+ * {@link #getImagEigenvalue(int)} and {@link #getImagEigenvalues()} are always\n+ * null.\n+ * </p>\n+ * <p>\n+ * When called with a {@link RealMatrix} argument, this implementation only uses\n+ * the upper part of the matrix, the part below the diagonal is not accessed at\n+ * all.\n+ * </p>\n+ * <p>\n+ * This implementation is based on the paper by A. Drubrulle, R.S. Martin and\n+ * J.H. Wilkinson 'The Implicit QL Algorithm' in Wilksinson and Reinsch (1971)\n+ * Handbook for automatic computation, vol. 2, Linear algebra, Springer-Verlag,\n+ * New-York\n+ * </p>\n  * @see <a href=\"http://mathworld.wolfram.com/EigenDecomposition.html\">MathWorld</a>\n  * @see <a href=\"http://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix\">Wikipedia</a>\n  * @version $Id$\n- * @since 2.0\n+ * @since 2.0 (changed to concrete class in 3.0)\n  */\n-public interface EigenDecomposition {\n+public class EigenDecomposition{\n+\n+    /** Maximum number of iterations accepted in the implicit QL transformation */\n+    private byte maxIter = 30;\n+\n+    /** Main diagonal of the tridiagonal matrix. */\n+    private double[] main;\n+\n+    /** Secondary diagonal of the tridiagonal matrix. */\n+    private double[] secondary;\n+\n+    /**\n+     * Transformer to tridiagonal (may be null if matrix is already\n+     * tridiagonal).\n+     */\n+    private TriDiagonalTransformer transformer;\n+\n+    /** Real part of the realEigenvalues. */\n+    private double[] realEigenvalues;\n+\n+    /** Imaginary part of the realEigenvalues. */\n+    private double[] imagEigenvalues;\n+\n+    /** Eigenvectors. */\n+    private ArrayRealVector[] eigenvectors;\n+\n+    /** Cached value of V. */\n+    private RealMatrix cachedV;\n+\n+    /** Cached value of D. */\n+    private RealMatrix cachedD;\n+\n+    /** Cached value of Vt. */\n+    private RealMatrix cachedVt;\n+\n+    /**\n+     * Calculates the eigen decomposition of the given symmetric matrix.\n+     *\n+     * @param matrix Matrix to decompose. It <em>must</em> be symmetric.\n+     * @param splitTolerance Dummy parameter (present for backward\n+     * compatibility only).\n+     * @throws NonSymmetricMatrixException if the matrix is not symmetric.\n+     * @throws MaxCountExceededException if the algorithm fails to converge.\n+     */\n+    public EigenDecomposition(final RealMatrix matrix,\n+                                  final double splitTolerance)  {\n+        if (isSymmetric(matrix, true)) {\n+            transformToTridiagonal(matrix);\n+            findEigenVectors(transformer.getQ().getData());\n+        }\n+    }\n+\n+    /**\n+     * Calculates the eigen decomposition of the symmetric tridiagonal\n+     * matrix.  The Householder matrix is assumed to be the identity matrix.\n+     *\n+     * @param main Main diagonal of the symmetric triadiagonal form\n+     * @param secondary Secondary of the tridiagonal form\n+     * @param splitTolerance Dummy parameter (present for backward\n+     * compatibility only).\n+     * @throws MaxCountExceededException if the algorithm fails to converge.\n+     */\n+    public EigenDecomposition(final double[] main,final double[] secondary,\n+                                  final double splitTolerance) {\n+        this.main      = main.clone();\n+        this.secondary = secondary.clone();\n+        transformer    = null;\n+        final int size=main.length;\n+        double[][] z = new double[size][size];\n+        for (int i=0;i<size;i++) {\n+            z[i][i]=1.0;\n+        }\n+        findEigenVectors(z);\n+    }\n+\n+    /**\n+     * Check if a matrix is symmetric.\n+     *\n+     * @param matrix Matrix to check.\n+     * @param raiseException If {@code true}, the method will throw an\n+     * exception if {@code matrix} is not symmetric.\n+     * @return {@code true} if {@code matrix} is symmetric.\n+     * @throws NonSymmetricMatrixException if the matrix is not symmetric and\n+     * {@code raiseException} is {@code true}.\n+     */\n+    private boolean isSymmetric(final RealMatrix matrix,\n+                                boolean raiseException) {\n+        final int rows = matrix.getRowDimension();\n+        final int columns = matrix.getColumnDimension();\n+        final double eps = 10 * rows * columns * MathUtils.EPSILON;\n+        for (int i = 0; i < rows; ++i) {\n+            for (int j = i + 1; j < columns; ++j) {\n+                final double mij = matrix.getEntry(i, j);\n+                final double mji = matrix.getEntry(j, i);\n+                if (FastMath.abs(mij - mji) >\n+                    (FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * eps)) {\n+                    if (raiseException) {\n+                        throw new NonSymmetricMatrixException(i, j, eps);\n+                    }\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n \n     /**\n      * Returns the matrix V of the decomposition.\n      * or right-handed system).</p>\n      * @return the V matrix\n      */\n-    RealMatrix getV();\n+    public RealMatrix getV() {\n+\n+        if (cachedV == null) {\n+            final int m = eigenvectors.length;\n+            cachedV = MatrixUtils.createRealMatrix(m, m);\n+            for (int k = 0; k < m; ++k) {\n+                cachedV.setColumnVector(k, eigenvectors[k]);\n+            }\n+        }\n+        // return the cached matrix\n+        return cachedV;\n+\n+    }\n \n     /**\n      * Returns the block diagonal matrix D of the decomposition.\n      * @see #getRealEigenvalues()\n      * @see #getImagEigenvalues()\n      */\n-    RealMatrix getD();\n+    public RealMatrix getD() {\n+        if (cachedD == null) {\n+            // cache the matrix for subsequent calls\n+            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n+        }\n+        return cachedD;\n+    }\n \n     /**\n      * Returns the transpose of the matrix V of the decomposition.\n      * or right-handed system).</p>\n      * @return the transpose of the V matrix\n      */\n-    RealMatrix getVT();\n+    public RealMatrix getVT() {\n+\n+        if (cachedVt == null) {\n+            final int m = eigenvectors.length;\n+            cachedVt = MatrixUtils.createRealMatrix(m, m);\n+            for (int k = 0; k < m; ++k) {\n+                cachedVt.setRowVector(k, eigenvectors[k]);\n+            }\n+\n+        }\n+\n+        // return the cached matrix\n+        return cachedVt;\n+    }\n \n     /**\n      * Returns a copy of the real parts of the eigenvalues of the original matrix.\n      * @see #getRealEigenvalue(int)\n      * @see #getImagEigenvalues()\n      */\n-    double[] getRealEigenvalues();\n+    public double[] getRealEigenvalues() {\n+        return realEigenvalues.clone();\n+    }\n \n     /**\n      * Returns the real part of the i<sup>th</sup> eigenvalue of the original matrix.\n      * @see #getRealEigenvalues()\n      * @see #getImagEigenvalue(int)\n      */\n-    double getRealEigenvalue(int i);\n+    public double getRealEigenvalue(final int i) {\n+        return realEigenvalues[i];\n+    }\n \n     /**\n      * Returns a copy of the imaginary parts of the eigenvalues of the original matrix.\n      * @see #getImagEigenvalue(int)\n      * @see #getRealEigenvalues()\n      */\n-    double[] getImagEigenvalues();\n+    public double[] getImagEigenvalues() {\n+        return imagEigenvalues.clone();\n+    }\n \n     /**\n      * Returns the imaginary part of the i<sup>th</sup> eigenvalue of the original matrix.\n      * @see #getImagEigenvalues()\n      * @see #getRealEigenvalue(int)\n      */\n-    double getImagEigenvalue(int i);\n+    public double getImagEigenvalue(final int i) {\n+        return imagEigenvalues[i];\n+    }\n \n     /**\n      * Returns a copy of the i<sup>th</sup> eigenvector of the original matrix.\n      * @return copy of the i<sup>th</sup> eigenvector of the original matrix\n      * @see #getD()\n      */\n-    RealVector getEigenvector(int i);\n+    public RealVector getEigenvector(final int i) {\n+        return eigenvectors[i].copy();\n+    }\n \n     /**\n      * Return the determinant of the matrix\n      * @return determinant of the matrix\n      */\n-    double getDeterminant();\n+    public double getDeterminant() {\n+        double determinant = 1;\n+        for (double lambda : realEigenvalues) {\n+            determinant *= lambda;\n+        }\n+        return determinant;\n+    }\n \n     /**\n      * Get a solver for finding the A &times; X = B solution in exact linear sense.\n      * @return a solver\n      */\n-    DecompositionSolver getSolver();\n-\n+    public DecompositionSolver getSolver() {\n+        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);\n+    }\n+\n+    /** Specialized solver. */\n+    private static class Solver implements DecompositionSolver {\n+\n+        /** Real part of the realEigenvalues. */\n+        private double[] realEigenvalues;\n+\n+        /** Imaginary part of the realEigenvalues. */\n+        private double[] imagEigenvalues;\n+\n+        /** Eigenvectors. */\n+        private final ArrayRealVector[] eigenvectors;\n+\n+        /**\n+         * Build a solver from decomposed matrix.\n+         * @param realEigenvalues\n+         *            real parts of the eigenvalues\n+         * @param imagEigenvalues\n+         *            imaginary parts of the eigenvalues\n+         * @param eigenvectors\n+         *            eigenvectors\n+         */\n+        private Solver(final double[] realEigenvalues,\n+                final double[] imagEigenvalues,\n+                final ArrayRealVector[] eigenvectors) {\n+            this.realEigenvalues = realEigenvalues;\n+            this.imagEigenvalues = imagEigenvalues;\n+            this.eigenvectors = eigenvectors;\n+        }\n+\n+        /**\n+         * Solve the linear equation A &times; X = B for symmetric matrices A.\n+         * <p>\n+         * This method only find exact linear solutions, i.e. solutions for\n+         * which ||A &times; X - B|| is exactly 0.\n+         * </p>\n+         * @param b Right-hand side of the equation A &times; X = B\n+         * @return a Vector X that minimizes the two norm of A &times; X - B\n+         * @throws DimensionMismatchException if the matrices dimensions do not match.\n+         * @throws SingularMatrixException if the decomposed matrix is singular.\n+         */\n+        public RealVector solve(final RealVector b) {\n+            if (!isNonSingular()) {\n+                throw new SingularMatrixException();\n+            }\n+\n+            final int m = realEigenvalues.length;\n+            if (b.getDimension() != m) {\n+                throw new DimensionMismatchException(b.getDimension(), m);\n+            }\n+\n+            final double[] bp = new double[m];\n+            for (int i = 0; i < m; ++i) {\n+                final ArrayRealVector v = eigenvectors[i];\n+                final double[] vData = v.getDataRef();\n+                final double s = v.dotProduct(b) / realEigenvalues[i];\n+                for (int j = 0; j < m; ++j) {\n+                    bp[j] += s * vData[j];\n+                }\n+            }\n+\n+            return new ArrayRealVector(bp, false);\n+        }\n+\n+        /** {@inheritDoc} */\n+        public RealMatrix solve(RealMatrix b) {\n+\n+            if (!isNonSingular()) {\n+                throw new SingularMatrixException();\n+            }\n+\n+            final int m = realEigenvalues.length;\n+            if (b.getRowDimension() != m) {\n+                throw new DimensionMismatchException(b.getRowDimension(), m);\n+            }\n+\n+            final int nColB = b.getColumnDimension();\n+            final double[][] bp = new double[m][nColB];\n+            final double[] tmpCol = new double[m];\n+            for (int k = 0; k < nColB; ++k) {\n+                for (int i = 0; i < m; ++i) {\n+                    tmpCol[i] = b.getEntry(i, k);\n+                    bp[i][k]  = 0;\n+                }\n+                for (int i = 0; i < m; ++i) {\n+                    final ArrayRealVector v = eigenvectors[i];\n+                    final double[] vData = v.getDataRef();\n+                    double s = 0;\n+                    for (int j = 0; j < m; ++j) {\n+                        s += v.getEntry(j) * tmpCol[j];\n+                    }\n+                    s /= realEigenvalues[i];\n+                    for (int j = 0; j < m; ++j) {\n+                        bp[j][k] += s * vData[j];\n+                    }\n+                }\n+            }\n+\n+            return new Array2DRowRealMatrix(bp, false);\n+\n+        }\n+\n+        /**\n+         * Check if the decomposed matrix is non-singular.\n+         * @return true if the decomposed matrix is non-singular\n+         */\n+        public boolean isNonSingular() {\n+            for (int i = 0; i < realEigenvalues.length; ++i) {\n+                if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        }\n+\n+        /**\n+         * Get the inverse of the decomposed matrix.\n+         *\n+         * @return the inverse matrix.\n+         * @throws SingularMatrixException if the decomposed matrix is singular.\n+         */\n+        public RealMatrix getInverse() {\n+            if (!isNonSingular()) {\n+                throw new SingularMatrixException();\n+            }\n+\n+            final int m = realEigenvalues.length;\n+            final double[][] invData = new double[m][m];\n+\n+            for (int i = 0; i < m; ++i) {\n+                final double[] invI = invData[i];\n+                for (int j = 0; j < m; ++j) {\n+                    double invIJ = 0;\n+                    for (int k = 0; k < m; ++k) {\n+                        final double[] vK = eigenvectors[k].getDataRef();\n+                        invIJ += vK[i] * vK[j] / realEigenvalues[k];\n+                    }\n+                    invI[j] = invIJ;\n+                }\n+            }\n+            return MatrixUtils.createRealMatrix(invData);\n+        }\n+    }\n+\n+    /**\n+     * Transform matrix to tridiagonal.\n+     *\n+     * @param matrix Matrix to transform.\n+     */\n+    private void transformToTridiagonal(final RealMatrix matrix) {\n+        // transform the matrix to tridiagonal\n+        transformer = new TriDiagonalTransformer(matrix);\n+        main = transformer.getMainDiagonalRef();\n+        secondary = transformer.getSecondaryDiagonalRef();\n+    }\n+\n+    /**\n+     * Find eigenvalues and eigenvectors (Dubrulle et al., 1971)\n+     *\n+     * @param householderMatrix Householder matrix of the transformation\n+     * to tri-diagonal form.\n+     */\n+    private void findEigenVectors(double[][] householderMatrix) {\n+        double[][]z = householderMatrix.clone();\n+        final int n = main.length;\n+        realEigenvalues = new double[n];\n+        imagEigenvalues = new double[n];\n+        double[] e = new double[n];\n+        for (int i = 0; i < n - 1; i++) {\n+            realEigenvalues[i] = main[i];\n+            e[i] = secondary[i];\n+        }\n+        realEigenvalues[n - 1] = main[n - 1];\n+        e[n - 1] = 0.0;\n+\n+        // Determine the largest main and secondary value in absolute term.\n+        double maxAbsoluteValue=0.0;\n+        for (int i = 0; i < n; i++) {\n+            if (FastMath.abs(realEigenvalues[i])>maxAbsoluteValue) {\n+                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);\n+            }\n+            if (FastMath.abs(e[i])>maxAbsoluteValue) {\n+                maxAbsoluteValue=FastMath.abs(e[i]);\n+            }\n+        }\n+        // Make null any main and secondary value too small to be significant\n+        if (maxAbsoluteValue!=0.0) {\n+            for (int i=0; i < n; i++) {\n+                if (FastMath.abs(realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue) {\n+                    realEigenvalues[i]=0.0;\n+                }\n+                if (FastMath.abs(e[i])<=MathUtils.EPSILON*maxAbsoluteValue) {\n+                    e[i]=0.0;\n+                }\n+            }\n+        }\n+\n+        for (int j = 0; j < n; j++) {\n+            int its = 0;\n+            int m;\n+            do {\n+                for (m = j; m < n - 1; m++) {\n+                    double delta = FastMath.abs(realEigenvalues[m]) + FastMath.abs(realEigenvalues[m + 1]);\n+                    if (FastMath.abs(e[m]) + delta == delta) {\n+                        break;\n+                    }\n+                }\n+                if (m != j) {\n+                    if (its == maxIter) {\n+                        throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,\n+                                                            maxIter);\n+                    }\n+                    its++;\n+                    double q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);\n+                    double t = FastMath.sqrt(1 + q * q);\n+                    if (q < 0.0) {\n+                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);\n+                    } else {\n+                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);\n+                    }\n+                    double u = 0.0;\n+                    double s = 1.0;\n+                    double c = 1.0;\n+                    int i;\n+                    for (i = m - 1; i >= j; i--) {\n+                        double p = s * e[i];\n+                        double h = c * e[i];\n+                        if (FastMath.abs(p) >= FastMath.abs(q)) {\n+                            c = q / p;\n+                            t = FastMath.sqrt(c * c + 1.0);\n+                            e[i + 1] = p * t;\n+                            s = 1.0 / t;\n+                            c = c * s;\n+                        } else {\n+                            s = p / q;\n+                            t = FastMath.sqrt(s * s + 1.0);\n+                            e[i + 1] = q * t;\n+                            c = 1.0 / t;\n+                            s = s * c;\n+                        }\n+                        if (e[i + 1] == 0.0) {\n+                            realEigenvalues[i + 1] -= u;\n+                            e[m] = 0.0;\n+                            break;\n+                        }\n+                        q = realEigenvalues[i + 1] - u;\n+                        t = (realEigenvalues[i] - q) * s + 2.0 * c * h;\n+                        u = s * t;\n+                        realEigenvalues[i + 1] = q + u;\n+                        q = c * t - h;\n+                        for (int ia = 0; ia < n; ia++) {\n+                            p = z[ia][i + 1];\n+                            z[ia][i + 1] = s * z[ia][i] + c * p;\n+                            z[ia][i] = c * z[ia][i] - s * p;\n+                        }\n+                    }\n+                    if (t == 0.0 && i >= j) {\n+                        continue;\n+                    }\n+                    realEigenvalues[j] -= u;\n+                    e[j] = q;\n+                    e[m] = 0.0;\n+                }\n+            } while (m != j);\n+        }\n+\n+        //Sort the eigen values (and vectors) in increase order\n+        for (int i = 0; i < n; i++) {\n+            int k = i;\n+            double p = realEigenvalues[i];\n+            for (int j = i + 1; j < n; j++) {\n+                if (realEigenvalues[j] > p) {\n+                    k = j;\n+                    p = realEigenvalues[j];\n+                }\n+            }\n+            if (k != i) {\n+                realEigenvalues[k] = realEigenvalues[i];\n+                realEigenvalues[i] = p;\n+                for (int j = 0; j < n; j++) {\n+                    p = z[j][i];\n+                    z[j][i] = z[j][k];\n+                    z[j][k] = p;\n+                }\n+            }\n+        }\n+\n+        // Determine the largest eigen value in absolute term.\n+        maxAbsoluteValue=0.0;\n+        for (int i = 0; i < n; i++) {\n+            if (FastMath.abs(realEigenvalues[i])>maxAbsoluteValue) {\n+                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);\n+            }\n+        }\n+        // Make null any eigen value too small to be significant\n+        if (maxAbsoluteValue!=0.0) {\n+            for (int i=0; i < n; i++) {\n+                if (FastMath.abs(realEigenvalues[i])<MathUtils.EPSILON*maxAbsoluteValue) {\n+                    realEigenvalues[i]=0.0;\n+                }\n+            }\n+        }\n+        eigenvectors = new ArrayRealVector[n];\n+        double[] tmp = new double[n];\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                tmp[j] = z[j][i];\n+            }\n+            eigenvectors[i] = new ArrayRealVector(tmp);\n+        }\n+    }\n }\n--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.TooManyEvaluationsException;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n-import org.apache.commons.math.linear.EigenDecompositionImpl;\n+import org.apache.commons.math.linear.EigenDecomposition;\n import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.optimization.GoalType;\n             // to achieve O(N^2)\n             C = triu(C, 0).add(triu(C, 1).transpose());\n             // enforce symmetry to prevent complex numbers\n-            EigenDecompositionImpl eig = new EigenDecompositionImpl(C, 1.0);\n+            EigenDecomposition eig = new EigenDecomposition(C, 1.0);\n             B = eig.getV(); // eigen decomposition, B==normalized eigenvectors\n             D = eig.getD();\n             diagD = diag(D);\n--- a/src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java\n     public void testDimension1() {\n         RealMatrix matrix =\n             MatrixUtils.createRealMatrix(new double[][] { { 1.5 } });\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);\n         Assert.assertEquals(1.5, ed.getRealEigenvalue(0), 1.0e-15);\n     }\n \n                     { 59.0, 12.0 },\n                     { 12.0, 66.0 }\n             });\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);\n         Assert.assertEquals(75.0, ed.getRealEigenvalue(0), 1.0e-15);\n         Assert.assertEquals(50.0, ed.getRealEigenvalue(1), 1.0e-15);\n     }\n                                    {  -4824.0,  8693.0,   7920.0 },\n                                    { -16560.0,  7920.0,  17300.0 }\n                                });\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);\n         Assert.assertEquals(50000.0, ed.getRealEigenvalue(0), 3.0e-11);\n         Assert.assertEquals(12500.0, ed.getRealEigenvalue(1), 3.0e-11);\n         Assert.assertEquals( 3125.0, ed.getRealEigenvalue(2), 3.0e-11);\n                     { 10,   20,   30 },\n                     { 15,   30,   45 }\n             });\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);\n         Assert.assertEquals(70.0, ed.getRealEigenvalue(0), 3.0e-11);\n         Assert.assertEquals(0.0,  ed.getRealEigenvalue(1), 3.0e-11);\n         Assert.assertEquals(0.0,  ed.getRealEigenvalue(2), 3.0e-11);\n                                    {  0.000,  0.000,  0.164, -0.048 },\n                                    {  0.000,  0.000, -0.048,  0.136 }\n                                });\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);\n         Assert.assertEquals(1.0, ed.getRealEigenvalue(0), 1.0e-15);\n         Assert.assertEquals(0.4, ed.getRealEigenvalue(1), 1.0e-15);\n         Assert.assertEquals(0.2, ed.getRealEigenvalue(2), 1.0e-15);\n                                    {  0.1152, -0.2304,  0.3088, -0.1344 },\n                                    { -0.2976,  0.1152, -0.1344,  0.3872 }\n                                });\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);\n         Assert.assertEquals(1.0, ed.getRealEigenvalue(0), 1.0e-15);\n         Assert.assertEquals(0.4, ed.getRealEigenvalue(1), 1.0e-15);\n         Assert.assertEquals(0.2, ed.getRealEigenvalue(2), 1.0e-15);\n             new ArrayRealVector(new double[] { -0.584677060845929,  0.367177264979103,  0.721453187784497, -0.052971054621812,  0.005740715188257 })\n         };\n \n-        EigenDecompositionImpl decomposition;\n-        decomposition = new EigenDecompositionImpl(mainTridiagonal,\n+        EigenDecomposition decomposition;\n+        decomposition = new EigenDecomposition(mainTridiagonal,\n                                                    secondaryTridiagonal,\n                                                    MathUtils.SAFE_MIN);\n \n         };\n \n         // the following line triggers the exception\n-        EigenDecompositionImpl decomposition;\n-        decomposition = new EigenDecompositionImpl(mainTridiagonal,\n+        EigenDecomposition decomposition;\n+        decomposition = new EigenDecomposition(mainTridiagonal,\n                                                    secondaryTridiagonal,\n                                                    MathUtils.SAFE_MIN);\n \n         };\n \n         // the following line triggers the exception\n-        EigenDecompositionImpl decomposition;\n-        decomposition = new EigenDecompositionImpl(mainTridiagonal,\n+        EigenDecomposition decomposition;\n+        decomposition = new EigenDecomposition(mainTridiagonal,\n                                                    secondaryTridiagonal,\n                                                    MathUtils.SAFE_MIN);\n \n         Arrays.sort(ref);\n         TriDiagonalTransformer t =\n             new TriDiagonalTransformer(createTestMatrix(r, ref));\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(t.getMainDiagonalRef(),\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(t.getMainDiagonalRef(),\n                                         t.getSecondaryDiagonalRef(),\n                                         MathUtils.SAFE_MIN);\n         double[] eigenValues = ed.getRealEigenvalues();\n     @Test\n     public void testDimensions() {\n         final int m = matrix.getRowDimension();\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);\n         Assert.assertEquals(m, ed.getV().getRowDimension());\n         Assert.assertEquals(m, ed.getV().getColumnDimension());\n         Assert.assertEquals(m, ed.getD().getColumnDimension());\n     /** test eigenvalues */\n     @Test\n     public void testEigenvalues() {\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);\n         double[] eigenValues = ed.getRealEigenvalues();\n         Assert.assertEquals(refValues.length, eigenValues.length);\n         for (int i = 0; i < refValues.length; ++i) {\n             bigValues[i] = 2 * r.nextDouble() - 1;\n         }\n         Arrays.sort(bigValues);\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(createTestMatrix(r, bigValues),\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(createTestMatrix(r, bigValues),\n                                         MathUtils.SAFE_MIN);\n         double[] eigenValues = ed.getRealEigenvalues();\n         Assert.assertEquals(bigValues.length, eigenValues.length);\n     /** test eigenvectors */\n     @Test\n     public void testEigenvectors() {\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);\n         for (int i = 0; i < matrix.getRowDimension(); ++i) {\n             double lambda = ed.getRealEigenvalue(i);\n             RealVector v  = ed.getEigenvector(i);\n     /** test A = VDVt */\n     @Test\n     public void testAEqualVDVt() {\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);\n         RealMatrix v  = ed.getV();\n         RealMatrix d  = ed.getD();\n         RealMatrix vT = ed.getVT();\n     /** test that V is orthogonal */\n     @Test\n     public void testVOrthogonal() {\n-        RealMatrix v = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN).getV();\n+        RealMatrix v = new EigenDecomposition(matrix, MathUtils.SAFE_MIN).getV();\n         RealMatrix vTv = v.transpose().multiply(v);\n         RealMatrix id  = MatrixUtils.createRealIdentityMatrix(vTv.getRowDimension());\n         Assert.assertEquals(0, vTv.subtract(id).getNorm(), 2.0e-13);\n     public void testDiagonal() {\n         double[] diagonal = new double[] { -3.0, -2.0, 2.0, 5.0 };\n         RealMatrix m = createDiagonalMatrix(diagonal, diagonal.length, diagonal.length);\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(m, MathUtils.SAFE_MIN);\n         Assert.assertEquals(diagonal[0], ed.getRealEigenvalue(3), 2.0e-15);\n         Assert.assertEquals(diagonal[1], ed.getRealEigenvalue(2), 2.0e-15);\n         Assert.assertEquals(diagonal[2], ed.getRealEigenvalue(1), 2.0e-15);\n                 {2,  0,  2},\n                 {4,  2,  3}\n         });\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(repeated, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(repeated, MathUtils.SAFE_MIN);\n         checkEigenValues((new double[] {8, -1, -1}), ed, 1E-12);\n         checkEigenVector((new double[] {2, 1, 2}), ed, 1E-12);\n     }\n                 {1, 3, -4},\n                 {-4, -4, 8}\n         });\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(distinct, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(distinct, MathUtils.SAFE_MIN);\n         checkEigenValues((new double[] {2, 0, 12}), ed, 1E-12);\n         checkEigenVector((new double[] {1, -1, 0}), ed, 1E-12);\n         checkEigenVector((new double[] {1, 1, 1}), ed, 1E-12);\n                 { 1.0, 1.0, 0.0 },\n                 { -1.0,0.0, 1.0 }\n         });\n-        EigenDecompositionImpl ed;\n-        ed = new EigenDecompositionImpl(indefinite, MathUtils.SAFE_MIN);\n+        EigenDecomposition ed;\n+        ed = new EigenDecomposition(indefinite, MathUtils.SAFE_MIN);\n         checkEigenValues((new double[] {2, 1, -1}), ed, 1E-12);\n         double isqrt3 = 1/FastMath.sqrt(3.0);\n         checkEigenVector((new double[] {isqrt3,isqrt3,-isqrt3}), ed, 1E-12);\n      * values to differ by tolerance.\n      */\n     protected void checkEigenValues(double[] targetValues,\n-            EigenDecompositionImpl ed, double tolerance) {\n+            EigenDecomposition ed, double tolerance) {\n         double[] observed = ed.getRealEigenvalues();\n         for (int i = 0; i < observed.length; i++) {\n             Assert.assertTrue(isIncludedValue(observed[i], targetValues, tolerance));\n      * used to find vectors in one-dimensional eigenspaces.\n      */\n     protected void checkEigenVector(double[] eigenVector,\n-            EigenDecompositionImpl ed, double tolerance) {\n+            EigenDecomposition ed, double tolerance) {\n         Assert.assertTrue(isIncludedColumn(eigenVector, ed.getV(), tolerance));\n     }\n \n--- a/src/test/java/org/apache/commons/math/linear/EigenSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/EigenSolverTest.java\n         Random r = new Random(9994100315209l);\n         RealMatrix m =\n             EigenDecompositionTest.createTestMatrix(r, new double[] { 1.0, 0.0, -1.0, -2.0, -3.0 });\n-        DecompositionSolver es = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN).getSolver();\n+        DecompositionSolver es = new EigenDecomposition(m, MathUtils.SAFE_MIN).getSolver();\n         Assert.assertFalse(es.isNonSingular());\n         try {\n             es.getInverse();\n         Random r = new Random(9994100315209l);\n         RealMatrix m =\n             EigenDecompositionTest.createTestMatrix(r, new double[] { 1.0, 0.5, -1.0, -2.0, -3.0 });\n-        DecompositionSolver es = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN).getSolver();\n+        DecompositionSolver es = new EigenDecomposition(m, MathUtils.SAFE_MIN).getSolver();\n         Assert.assertTrue(es.isNonSingular());\n         RealMatrix inverse = es.getInverse();\n         RealMatrix error =\n         };\n         final RealMatrix matrix = EigenDecompositionTest.createTestMatrix(new Random(35992629946426l), refValues);\n \n-        DecompositionSolver es = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN).getSolver();\n+        DecompositionSolver es = new EigenDecomposition(matrix, MathUtils.SAFE_MIN).getSolver();\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);\n         try {\n             es.solve(b);\n                 { 40,  2, 21,  9, 51, 19 },\n                 { 14, -1,  8,  0, 19, 14 }\n         });\n-        DecompositionSolver es = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN).getSolver();\n+        DecompositionSolver es = new EigenDecomposition(m, MathUtils.SAFE_MIN).getSolver();\n         RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {\n                 { 1561, 269, 188 },\n                 {   69, -21,  70 },", "timestamp": 1316673835, "metainfo": ""}