{"sha": "9c25e76e251bd7d5a8597c841005b4c72e9fc385", "log": "Cached DistributionFactory instance used to create TDistribution instances.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n /**\n  * Implements t-test statistics defined in the {@link TTest} interface.\n  *\n- * @version $Revision: 1.5 $ $Date: 2004/06/02 13:08:55 $\n+ * @version $Revision: 1.6 $ $Date: 2004/06/06 22:28:25 $\n  */\n public class TTestImpl implements TTest  {\n \n+    /** Cached DistributionFactory used to create TDistribution instances */\n+    private DistributionFactory distributionFactory = null;\n+    \n     public TTestImpl() {\n         super();\n     }\n     //----------------------------------------------- Protected methods \n \n     /**\n+     * Gets a DistributionFactory to use in creating TDistribution instances.\n+     */\n+    protected DistributionFactory getDistributionFactory() {\n+        if (distributionFactory == null) {\n+            distributionFactory = DistributionFactory.newInstance();\n+        }\n+        return distributionFactory;\n+    }\n+    \n+    /**\n      * Computes approximate degrees of freedom for 2-sample t-test.\n      * \n      * @param v1 first sample variance\n     protected double tTest(double m, double mu, double v, double n)\n     throws MathException {\n         double t = Math.abs(t(m, mu, v, n));\n-        TDistribution tDistribution =\n-            DistributionFactory.newInstance().createTDistribution(n - 1);\n+        TDistribution tDistribution = \n+            getDistributionFactory().createTDistribution(n - 1);\n         return 1.0 - tDistribution.cumulativeProbability(-t, t);\n     }\n \n         \tdegreesOfFreedom= df(v1, v2, n1, n2);\n         }\n         TDistribution tDistribution =\n-            DistributionFactory.newInstance().createTDistribution(degreesOfFreedom);\n+            getDistributionFactory().createTDistribution(degreesOfFreedom);\n         return 1.0 - tDistribution.cumulativeProbability(-t, t);\n     }   \n }", "timestamp": 1086560905, "metainfo": ""}