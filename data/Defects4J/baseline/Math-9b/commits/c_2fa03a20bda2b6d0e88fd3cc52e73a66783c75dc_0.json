{"sha": "2fa03a20bda2b6d0e88fd3cc52e73a66783c75dc", "log": "Removed MathException from MannWhitneyUTest, improved javadoc, exceptions. JIRA: MATH-488  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java\n  */\n package org.apache.commons.math.stat.inference;\n \n-import org.apache.commons.math.MathException;\n+import org.apache.commons.math.exception.ConvergenceException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n \n /**\n  * An interface for Mann-Whitney U test (also called Wilcoxon rank-sum test).\n      * </ul>\n      * </p>\n      *\n-     * @param x\n-     *            the first sample\n-     * @param y\n-     *            the second sample\n-     * @return mannWhitneyU statistic\n-     * @throws IllegalArgumentException\n-     *             if preconditions are not met\n+     * @param x the first sample\n+     * @param y the second sample\n+     * @return Mann-Whitney U statistic (maximum of U<sup>x</sup> and U<sup>y</sup>)\n+     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n+     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n      */\n     double mannWhitneyU(final double[] x, final double[] y)\n-            throws IllegalArgumentException;\n+        throws NullArgumentException, NoDataException;\n \n     /**\n      * Returns the asymptotic <i>observed significance level</i>, or <a href=\n      * </ul>\n      * </p>\n      *\n-     * @param x\n-     *            the first sample\n-     * @param y\n-     *            the second sample\n+     * @param x the first sample\n+     * @param y the second sample\n      * @return asymptotic p-value\n-     * @throws IllegalArgumentException\n-     *             if preconditions are not met\n-     * @throws MathException\n-     *             if an error occurs computing the p-value\n+     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n+     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n+     * @throws ConvergenceException if the p-value can not be computed due to a\n+     * convergence error\n+     * @throws MaxCountExceededException if the maximum number of iterations\n+     * is exceeded\n      */\n     double mannWhitneyUTest(final double[] x, final double[] y)\n-            throws IllegalArgumentException, MathException;\n+        throws NullArgumentException, NoDataException,\n+        ConvergenceException, MaxCountExceededException;\n }\n--- a/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java\n  */\n package org.apache.commons.math.stat.inference;\n \n-import org.apache.commons.math.MathException;\n import org.apache.commons.math.distribution.NormalDistribution;\n+import org.apache.commons.math.exception.ConvergenceException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n+import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.stat.ranking.NaNStrategy;\n import org.apache.commons.math.stat.ranking.NaturalRanking;\n import org.apache.commons.math.stat.ranking.TiesStrategy;\n      *\n      * @param x first sample\n      * @param y second sample\n-     * @throws IllegalArgumentException\n-     *             if assumptions are not met\n+     * @throws NullArgumentException if {@code x} or {@code y} are {@code null}.\n+     * @throws NoDataException if {@code x} or {@code y} are zero-length.\n      */\n     private void ensureDataConformance(final double[] x, final double[] y)\n-            throws IllegalArgumentException {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"x must not be null\");\n+        throws NullArgumentException, NoDataException {\n+\n+        if (x == null ||\n+            y == null) {\n+            throw new NullArgumentException();\n         }\n-\n-        if (y == null) {\n-            throw new IllegalArgumentException(\"y must not be null\");\n-        }\n-\n-        if (x.length == 0) {\n-            throw new IllegalArgumentException(\n-                    \"x must contain at least one element\");\n-        }\n-\n-        if (y.length == 0) {\n-            throw new IllegalArgumentException(\n-                    \"y must contain at least one element\");\n+        if (x.length == 0 ||\n+            y.length == 0) {\n+            throw new NoDataException();\n         }\n     }\n \n         return z;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * @param x the first sample\n-     * @param y the second sample\n-     * @return mannWhitneyU statistic U (maximum of U<sup>x</sup> and U<sup>y</sup>)\n-     * @throws IllegalArgumentException if preconditions are not met\n-     */\n+    /** {@inheritDoc} */\n     public double mannWhitneyU(final double[] x, final double[] y)\n-            throws IllegalArgumentException {\n+        throws NullArgumentException, NoDataException {\n \n         ensureDataConformance(x, y);\n \n      * @param n1 number of subjects in first sample\n      * @param n2 number of subjects in second sample\n      * @return two-sided asymptotic p-value\n-     * @throws MathException if an error occurs computing the p-value\n+     * @throws ConvergenceException if the p-value can not be computed\n+     * due to a convergence error\n+     * @throws MaxCountExceededException if the maximum number of\n+     * iterations is exceeded\n      */\n-    private double calculateAsymptoticPValue(final double Umin, final int n1,\n-            final int n2) throws MathException {\n+    private double calculateAsymptoticPValue(final double Umin,\n+                                             final int n1,\n+                                             final int n2)\n+        throws ConvergenceException, MaxCountExceededException {\n \n         final int n1n2prod = n1 * n2;\n \n \n         final double z = (Umin - EU) / FastMath.sqrt(VarU);\n \n-        final NormalDistribution standardNormal = new NormalDistribution(\n-                0, 1);\n+        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n \n         return 2 * standardNormal.cumulativeProbability(z);\n     }\n      * >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.\n      *\n      * {@inheritDoc}\n-     *\n-     * @param x the first sample\n-     * @param y the second sample\n-     * @return asymptotic p-value (biased for samples with ties)\n-     * @throws IllegalArgumentException if preconditions are not met\n-     * @throws MathException if an error occurs computing the p-value\n      */\n     public double mannWhitneyUTest(final double[] x, final double[] y)\n-            throws IllegalArgumentException, MathException {\n+        throws NullArgumentException, NoDataException,\n+        ConvergenceException, MaxCountExceededException {\n \n         ensureDataConformance(x, y);\n \n--- a/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java\n      * @throws NoDataException if {@code x} or {@code y} are zero-length.\n      * @throws DimensionMismatchException if {@code x} and {@code y} do not\n      * have the same length.\n-     * @throws NumberIsTooLargeException if {@code exactPValue} is {@code true} and\n-     * {@code x.length} > 30\n-     * @throws ConvergenceException if the p-value can not be computed due to a convergence error\n-     * @throws MaxCountExceededException if the maximum number of iterations is exceeded\n+     * @throws NumberIsTooLargeException if {@code exactPValue} is {@code true}\n+     * and {@code x.length} > 30\n+     * @throws ConvergenceException if the p-value can not be computed due to\n+     * a convergence error\n+     * @throws MaxCountExceededException if the maximum number of iterations\n+     * is exceeded\n      */\n     double wilcoxonSignedRankTest(final double[] x, final double[] y, boolean exactPValue)\n         throws NullArgumentException, NoDataException, DimensionMismatchException,\n--- a/src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java\n  */\n package org.apache.commons.math.stat.inference;\n \n+import org.apache.commons.math.exception.NoDataException;\n+import org.apache.commons.math.exception.NullArgumentException;\n import org.junit.Assert;\n import org.junit.Test;\n \n \n /**\n- * Test cases for the ChiSquareTestImpl class.\n+ * Test cases for the MannWhitneyUTestImpl class.\n  *\n  * @version $Id$\n  */\n          */\n         try {\n             testStatistic.mannWhitneyUTest(new double[] { }, new double[] { 1.0 });\n-            Assert.fail(\"x does not contain samples (exact), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"x does not contain samples (exact), NoDataException expected\");\n+        } catch (NoDataException ex) {\n             // expected\n         }\n \n         try {\n             testStatistic.mannWhitneyUTest(new double[] { 1.0 }, new double[] { });\n-            Assert.fail(\"y does not contain samples (exact), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"y does not contain samples (exact), NoDataException expected\");\n+        } catch (NoDataException ex) {\n             // expected\n         }\n \n          */\n         try {\n             testStatistic.mannWhitneyUTest(null, null);\n-            Assert.fail(\"x and y is null (exact), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"x and y is null (exact), NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         \n         try {\n             testStatistic.mannWhitneyUTest(null, null);\n-            Assert.fail(\"x and y is null (asymptotic), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"x and y is null (asymptotic), NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         \n          */\n         try {\n             testStatistic.mannWhitneyUTest(null, new double[] { 1.0 });\n-            Assert.fail(\"x is null (exact), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"x is null (exact), NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n         \n         try {\n             testStatistic.mannWhitneyUTest(new double[] { 1.0 }, null);\n-            Assert.fail(\"y is null (exact), IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException ex) {\n+            Assert.fail(\"y is null (exact), NullArgumentException expected\");\n+        } catch (NullArgumentException ex) {\n             // expected\n         }\n     }", "timestamp": 1328693227, "metainfo": ""}