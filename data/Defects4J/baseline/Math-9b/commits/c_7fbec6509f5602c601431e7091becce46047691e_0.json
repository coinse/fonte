{"sha": "7fbec6509f5602c601431e7091becce46047691e", "log": "Added missing throws declarations and fixed javadoc to match what is actually thrown.  JIRA: MATH-854.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java\n \n     /**\n      * Removes the most recent value from the dataset.\n-     */\n-    public void removeMostRecentValue() {\n-        eDA.discardMostRecentElements(1);\n+     *\n+     * @throws MathIllegalStateException if there are no elements stored\n+     */\n+    public void removeMostRecentValue() throws MathIllegalStateException {\n+        try {\n+            eDA.discardMostRecentElements(1);\n+        } catch (MathIllegalArgumentException ex) {\n+            throw new MathIllegalStateException(LocalizedFormats.NO_DATA);\n+        }\n     }\n \n     /**\n      *\n      * @param v the value to replace the most recent stored value\n      * @return replaced value\n-     */\n-    public double replaceMostRecentValue(double v) {\n+     * @throws MathIllegalStateException if there are no elements stored\n+     */\n+    public double replaceMostRecentValue(double v) throws MathIllegalStateException {\n         return eDA.substituteMostRecentElement(v);\n     }\n \n      * </p><p>\n      * <strong>Preconditions</strong>:<ul>\n      * <li><code>0 &lt; p &le; 100</code> (otherwise an\n-     * <code>IllegalArgumentException</code> is thrown)</li>\n+     * <code>MathIllegalArgumentException</code> is thrown)</li>\n      * <li>at least one value must be stored (returns <code>Double.NaN\n      *     </code> otherwise)</li>\n      * </ul></p>\n      * @return An estimate for the pth percentile of the stored data\n      * @throws MathIllegalStateException if percentile implementation has been\n      *  overridden and the supplied implementation does not support setQuantile\n-     */\n-    public double getPercentile(double p) throws MathIllegalStateException {\n+     * @throws MathIllegalArgumentException if p is not a valid quantile\n+     */\n+    public double getPercentile(double p) throws MathIllegalStateException, MathIllegalArgumentException {\n         if (percentileImpl instanceof Percentile) {\n             ((Percentile) percentileImpl).setQuantile(p);\n         } else {\n         outBuffer.append(\"std dev: \").append(getStandardDeviation())\n             .append(endl);\n         try {\n+            // No catch for MIAE because actual parameter is valid below\n             outBuffer.append(\"median: \").append(getPercentile(50)).append(endl);\n         } catch (MathIllegalStateException ex) {\n             outBuffer.append(\"median: unavailable\").append(endl);\n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/moment/SemiVariance.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/moment/SemiVariance.java\n        * instance properties variancDirection and biasCorrection.</p>\n        *\n        * <p>Returns <code>NaN</code> if the array is empty and throws\n-       * <code>IllegalArgumentException</code> if the array is null.</p>\n+       * <code>MathIllegalArgumentException</code> if the array is null.</p>\n        *\n        * @param values the input array\n        * @param cutoff the reference point\n        * @return the SemiVariance\n-       * @throws IllegalArgumentException if values is null\n+       * @throws MathIllegalArgumentException if values is null\n        */\n-      public double evaluate(final double[] values, final double cutoff) {\n+      public double evaluate(final double[] values, final double cutoff)\n+      throws MathIllegalArgumentException {\n           return evaluate(values, cutoff, varianceDirection, biasCorrected, 0, values.length);\n       }\n \n        * given direction, using the current value of the biasCorrection instance property.</p>\n        *\n        * <p>Returns <code>NaN</code> if the array is empty and throws\n-       * <code>IllegalArgumentException</code> if the array is null.</p>\n+       * <code>MathIllegalArgumentException</code> if the array is null.</p>\n        *\n        * @param values the input array\n        * @param cutoff the reference point\n        * @param direction the {@link Direction} of the semivariance\n        * @return the SemiVariance\n-       * @throws IllegalArgumentException if values is null\n+       * @throws MathIllegalArgumentException if values is null\n        */\n-      public double evaluate(final double[] values, final double cutoff, final Direction direction) {\n+      public double evaluate(final double[] values, final double cutoff, final Direction direction)\n+      throws MathIllegalArgumentException {\n           return evaluate(values, cutoff, direction, biasCorrected, 0, values.length);\n       }\n \n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/moment/StandardDeviation.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/moment/StandardDeviation.java\n      * to the {@code original}\n      *\n      * @param original the {@code StandardDeviation} instance to copy\n-     */\n-    public StandardDeviation(StandardDeviation original) {\n+     * @throws NullArgumentException if original is null\n+     */\n+    public StandardDeviation(StandardDeviation original) throws NullArgumentException {\n         copy(original, this);\n     }\n \n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/summary/Product.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/summary/Product.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math3.stat.descriptive.WeightedEvaluation;\n      * to the {@code original}\n      *\n      * @param original the {@code Product} instance to copy\n-     */\n-    public Product(Product original) {\n+     * @throws NullArgumentException  if original is null\n+     */\n+    public Product(Product original) throws NullArgumentException {\n         copy(original, this);\n     }\n \n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     * Throws <code>MathIllegalArgumentException</code> if the array is null.</p>\n      *\n      * @param values the input array\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n      * @return the product of the values or 1 if length = 0\n-     * @throws IllegalArgumentException if the array is null or the array index\n+     * @throws MathIllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n      */\n     @Override\n-    public double evaluate(final double[] values, final int begin, final int length) {\n+    public double evaluate(final double[] values, final int begin, final int length)\n+    throws MathIllegalArgumentException {\n         double product = Double.NaN;\n         if (test(values, begin, length, true)) {\n             product = 1.0;\n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.</p>\n      *\n-     * <p>Throws <code>IllegalArgumentException</code> if any of the following are true:\n+     * <p>Throws <code>MathIllegalArgumentException</code> if any of the following are true:\n      * <ul><li>the values array is null</li>\n      *     <li>the weights array is null</li>\n      *     <li>the weights array does not have the same length as the values array</li>\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n      * @return the product of the values or 1 if length = 0\n-     * @throws IllegalArgumentException if the parameters are not valid\n+     * @throws MathIllegalArgumentException if the parameters are not valid\n      * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights,\n-                           final int begin, final int length) {\n+        final int begin, final int length) throws MathIllegalArgumentException {\n         double product = Double.NaN;\n         if (test(values, weights, begin, length, true)) {\n             product = 1.0;\n     /**\n      * <p>Returns the weighted product of the entries in the input array.</p>\n      *\n-     * <p>Throws <code>IllegalArgumentException</code> if any of the following are true:\n+     * <p>Throws <code>MathIllegalArgumentException</code> if any of the following are true:\n      * <ul><li>the values array is null</li>\n      *     <li>the weights array is null</li>\n      *     <li>the weights array does not have the same length as the values array</li>\n      * @param values the input array\n      * @param weights the weights array\n      * @return the product of the values or Double.NaN if length = 0\n-     * @throws IllegalArgumentException if the parameters are not valid\n+     * @throws MathIllegalArgumentException if the parameters are not valid\n      * @since 2.1\n      */\n-    public double evaluate(final double[] values, final double[] weights) {\n+    public double evaluate(final double[] values, final double[] weights)\n+    throws MathIllegalArgumentException {\n         return evaluate(values, weights, 0, values.length);\n     }\n \n     @Override\n     public Product copy() {\n         Product result = new Product();\n+        // No try-catch or advertised exception because args are valid\n         copy(this, result);\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/summary/Sum.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math3.util.MathUtils;\n      * to the {@code original}\n      *\n      * @param original the {@code Sum} instance to copy\n-     */\n-    public Sum(Sum original) {\n+     * @throws NullArgumentException if original is null\n+     */\n+    public Sum(Sum original) throws NullArgumentException {\n         copy(original, this);\n     }\n \n      * the input array, or 0 if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     * Throws <code>MathIllegalArgumentException</code> if the array is null.</p>\n      *\n      * @param values the input array\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n      * @return the sum of the values or 0 if length = 0\n-     * @throws IllegalArgumentException if the array is null or the array index\n+     * @throws MathIllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n      */\n     @Override\n-    public double evaluate(final double[] values, final int begin, final int length) {\n+    public double evaluate(final double[] values, final int begin, final int length)\n+    throws MathIllegalArgumentException {\n         double sum = Double.NaN;\n         if (test(values, begin, length, true)) {\n             sum = 0.0;\n      * the input array, or 0 if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n+     * Throws <code>MathIllegalArgumentException</code> if any of the following are true:\n      * <ul><li>the values array is null</li>\n      *     <li>the weights array is null</li>\n      *     <li>the weights array does not have the same length as the values array</li>\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n      * @return the sum of the values or 0 if length = 0\n-     * @throws IllegalArgumentException if the parameters are not valid\n+     * @throws MathIllegalArgumentException if the parameters are not valid\n      * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights,\n-                           final int begin, final int length) {\n+        final int begin, final int length) throws MathIllegalArgumentException {\n         double sum = Double.NaN;\n         if (test(values, weights, begin, length, true)) {\n             sum = 0.0;\n     /**\n      * The weighted sum of the entries in the the input array.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n+     * Throws <code>MathIllegalArgumentException</code> if any of the following are true:\n      * <ul><li>the values array is null</li>\n      *     <li>the weights array is null</li>\n      *     <li>the weights array does not have the same length as the values array</li>\n      * @param values the input array\n      * @param weights the weights array\n      * @return the sum of the values or Double.NaN if length = 0\n-     * @throws IllegalArgumentException if the parameters are not valid\n+     * @throws MathIllegalArgumentException if the parameters are not valid\n      * @since 2.1\n      */\n-    public double evaluate(final double[] values, final double[] weights) {\n+    public double evaluate(final double[] values, final double[] weights)\n+    throws MathIllegalArgumentException {\n         return evaluate(values, weights, 0, values.length);\n     }\n \n     @Override\n     public Sum copy() {\n         Sum result = new Sum();\n+        // No try-catch or advertised exception because args are valid\n         copy(this, result);\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/summary/SumOfLogs.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/summary/SumOfLogs.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math3.util.FastMath;\n      * to the {@code original}\n      *\n      * @param original the {@code SumOfLogs} instance to copy\n+     * @throws NullArgumentException if original is null\n      */\n-    public SumOfLogs(SumOfLogs original) {\n+    public SumOfLogs(SumOfLogs original) throws NullArgumentException {\n         copy(original, this);\n     }\n \n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     * Throws <code>MathIllegalArgumentException</code> if the array is null.</p>\n      * <p>\n      * See {@link SumOfLogs}.</p>\n      *\n      * @param length the number of elements to include\n      * @return the sum of the natural logs of the values or 0 if\n      * length = 0\n-     * @throws IllegalArgumentException if the array is null or the array index\n+     * @throws MathIllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n      */\n     @Override\n-    public double evaluate(final double[] values, final int begin, final int length) {\n+    public double evaluate(final double[] values, final int begin, final int length)\n+    throws MathIllegalArgumentException {\n         double sumLog = Double.NaN;\n         if (test(values, begin, length, true)) {\n             sumLog = 0.0;\n     @Override\n     public SumOfLogs copy() {\n         SumOfLogs result = new SumOfLogs();\n+        // No try-catch or advertised exception here because args are valid\n         copy(this, result);\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/summary/SumOfSquares.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/summary/SumOfSquares.java\n \n import java.io.Serializable;\n \n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic;\n import org.apache.commons.math3.util.MathUtils;\n      * to the {@code original}\n      *\n      * @param original the {@code SumOfSquares} instance to copy\n+     * @throws NullArgumentException if original is null\n      */\n-    public SumOfSquares(SumOfSquares original) {\n+    public SumOfSquares(SumOfSquares original) throws NullArgumentException {\n         copy(original, this);\n     }\n \n      * the input array, or <code>Double.NaN</code> if the designated subarray\n      * is empty.\n      * <p>\n-     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n+     * Throws <code>MathIllegalArgumentException</code> if the array is null.</p>\n      *\n      * @param values the input array\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n      * @return the sum of the squares of the values or 0 if length = 0\n-     * @throws IllegalArgumentException if the array is null or the array index\n+     * @throws MathIllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n      */\n     @Override\n-    public double evaluate(final double[] values,final int begin, final int length) {\n+    public double evaluate(final double[] values,final int begin, final int length)\n+    throws MathIllegalArgumentException {\n         double sumSq = Double.NaN;\n         if (test(values, begin, length, true)) {\n             sumSq = 0.0;\n     @Override\n     public SumOfSquares copy() {\n         SumOfSquares result = new SumOfSquares();\n+        // no try-catch or advertised exception here because args are valid\n         copy(this, result);\n         return result;\n     }", "timestamp": 1347833475, "metainfo": ""}