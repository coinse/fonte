{"sha": "7e00cc35a331ab86e33838579a8507c6fb6d0da0", "log": "MATH-349 Removed deprecated code.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n  *\n  * @version $Revision$ $Date$\n  */\n-public interface ChiSquaredDistribution extends ContinuousDistribution, HasDensity<Double> {\n-    /**\n-     * Modify the degrees of freedom.\n-     * @param degreesOfFreedom the new degrees of freedom.\n-     * @deprecated as of v2.1\n-     */\n-    @Deprecated\n-    void setDegreesOfFreedom(double degreesOfFreedom);\n-\n+public interface ChiSquaredDistribution extends ContinuousDistribution {\n     /**\n      * Access the degrees of freedom.\n      * @return the degrees of freedom.\n      * @param x  The point at which the density should be computed.\n      * @return  The pdf at point x.\n      */\n-    double density(Double x);\n+    double density(double x);\n }\n--- a/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n public class ChiSquaredDistributionImpl\n     extends AbstractContinuousDistribution\n     implements ChiSquaredDistribution, Serializable  {\n-\n     /**\n      * Default inverse cumulative probability accuracy\n      * @since 2.1\n      */\n     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n-\n     /** Serializable version identifier */\n     private static final long serialVersionUID = -8352658048349159782L;\n-\n     /** Internal Gamma distribution. */\n     private GammaDistribution gamma;\n-\n     /** Inverse cumulative probability accuracy */\n     private final double solverAbsoluteAccuracy;\n \n     /**\n      * Create a Chi-Squared distribution with the given degrees of freedom.\n-     * @param df degrees of freedom.\n-     */\n-    public ChiSquaredDistributionImpl(double df) {\n-        this(df, new GammaDistributionImpl(df / 2.0, 2.0));\n-    }\n-\n-    /**\n-     * Create a Chi-Squared distribution with the given degrees of freedom.\n-     * @param df degrees of freedom.\n-     * @param g the underlying gamma distribution used to compute probabilities.\n-     * @since 1.2\n-     * @deprecated as of 2.1 (to avoid possibly inconsistent state, the\n-     * \"GammaDistribution\" will be instantiated internally)\n-     */\n-    @Deprecated\n-    public ChiSquaredDistributionImpl(double df, GammaDistribution g) {\n-        super();\n-        setGammaInternal(g);\n-        setDegreesOfFreedomInternal(df);\n-        solverAbsoluteAccuracy = DEFAULT_INVERSE_ABSOLUTE_ACCURACY;\n+     *\n+     * @param degreesOfFreedom Degrees of freedom.\n+     */\n+    public ChiSquaredDistributionImpl(double degreesOfFreedom) {\n+        this(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n     }\n \n     /**\n      * Create a Chi-Squared distribution with the given degrees of freedom and\n      * inverse cumulative probability accuracy.\n-     * @param df degrees of freedom.\n-     * @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates\n-     * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})\n-     * @since 2.1\n-     */\n-    public ChiSquaredDistributionImpl(double df, double inverseCumAccuracy) {\n-        super();\n-        gamma = new GammaDistributionImpl(df / 2.0, 2.0);\n-        setDegreesOfFreedomInternal(df);\n+     *\n+     * @param degreesOfFreedom Degrees of freedom.\n+     * @param inverseCumAccuracy the maximum absolute error in inverse\n+     * cumulative probability estimates (defaults to\n+     * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).\n+     * @since 2.1\n+     */\n+    public ChiSquaredDistributionImpl(double degreesOfFreedom,\n+                                      double inverseCumAccuracy) {\n+        gamma = new GammaDistributionImpl(degreesOfFreedom / 2, 2);\n         solverAbsoluteAccuracy = inverseCumAccuracy;\n     }\n \n     /**\n      * Modify the degrees of freedom.\n      * @param degreesOfFreedom the new degrees of freedom.\n-     * @deprecated as of 2.1 (class will become immutable in 3.0)\n-     */\n-    @Deprecated\n-    public void setDegreesOfFreedom(double degreesOfFreedom) {\n-        setDegreesOfFreedomInternal(degreesOfFreedom);\n-    }\n-    /**\n-     * Modify the degrees of freedom.\n-     * @param degreesOfFreedom the new degrees of freedom.\n      */\n     private void setDegreesOfFreedomInternal(double degreesOfFreedom) {\n         gamma.setAlpha(degreesOfFreedom / 2.0);\n      */\n     public double getDegreesOfFreedom() {\n         return gamma.getAlpha() * 2.0;\n-    }\n-\n-    /**\n-     * Return the probability density for a particular point.\n-     *\n-     * @param x The point at which the density should be computed.\n-     * @return The pdf at point x.\n-     * @deprecated\n-     */\n-    public double density(Double x) {\n-        return density(x.doubleValue());\n     }\n \n     /**\n     }\n \n     /**\n-     * Modify the underlying gamma distribution.  The caller is responsible for\n-     * insuring the gamma distribution has the proper parameter settings.\n-     * @param g the new distribution.\n-     * @since 1.2 made public\n-     * @deprecated as of 2.1 (class will become immutable in 3.0)\n-     */\n-    @Deprecated\n-    public void setGamma(GammaDistribution g) {\n-        setGammaInternal(g);\n-    }\n-    /**\n-     * Modify the underlying gamma distribution.  The caller is responsible for\n-     * insuring the gamma distribution has the proper parameter settings.\n-     * @param g the new distribution.\n-     * @since 1.2 made public\n-     */\n-    private void setGammaInternal(GammaDistribution g) {\n-        this.gamma = g;\n-\n-    }\n-\n-\n-    /**\n      * Return the absolute accuracy setting of the solver used to estimate\n      * inverse cumulative probabilities.\n      *\n--- a/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n      */\n     public double chiSquareTest(double[] expected, long[] observed)\n         throws IllegalArgumentException, MathException {\n-        distribution.setDegreesOfFreedom(expected.length - 1.0);\n+        distribution = new ChiSquaredDistributionImpl(expected.length - 1.0);\n         return 1.0 - distribution.cumulativeProbability(\n             chiSquare(expected, observed));\n     }\n     throws IllegalArgumentException, MathException {\n         checkArray(counts);\n         double df = ((double) counts.length -1) * ((double) counts[0].length - 1);\n-        distribution.setDegreesOfFreedom(df);\n+        distribution = new ChiSquaredDistributionImpl(df);\n         return 1 - distribution.cumulativeProbability(chiSquare(counts));\n     }\n \n      */\n     public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n         throws IllegalArgumentException, MathException {\n-        distribution.setDegreesOfFreedom((double) observed1.length - 1);\n+        distribution = new ChiSquaredDistributionImpl((double) observed1.length - 1);\n         return 1 - distribution.cumulativeProbability(\n                 chiSquareDataSetsComparison(observed1, observed2));\n     }\n--- a/src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n     public void testDfAccessors() {\n         ChiSquaredDistribution distribution = (ChiSquaredDistribution) getDistribution();\n         assertEquals(5d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);\n-        distribution.setDegreesOfFreedom(4d);\n-        assertEquals(4d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);\n-        try {\n-            distribution.setDegreesOfFreedom(0d);\n-            fail(\"Expecting IllegalArgumentException for df = 0\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }\n     }\n \n     public void testDensity() {", "timestamp": 1285538036, "metainfo": ""}