{"sha": "7f94e8515fa43bae5ff044d11dd7ef340d8fd9f6", "log": "fixed checkstyle errors  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n         return (double)entries.size()/(double)getDimension();\n     }\n \n-    /** @{InheritDoc} */\n+    /** {@inheritDoc} */\n     public java.util.Iterator<Entry> sparseIterator() {\n         return new OpenMapSparseIterator();\n     }\n-    \n+\n     /**\n      *  Implementation of <code>Entry</code> optimized for OpenMap.\n      * <p>This implementation does not allow arbitrary calls to <code>setIndex</code>\n      * since the order that entries are returned is undefined.\n      */\n     protected class OpenMapEntry extends Entry {\n+\n+        /** Iterator pointing to the entry. */\n         private final Iterator iter;\n \n+        /** Build an entry from an iterator point to an element.\n+         * @param iter iterator pointing to the entry\n+         */\n         protected OpenMapEntry(Iterator iter) {\n             this.iter = iter;\n         }\n-        /** {@InheritDoc} */\n+\n+        /** {@inheritDoc} */\n         @Override\n         public double getValue() {\n             return iter.value();\n         }\n \n-        /** {@InheritDoc} */\n+        /** {@inheritDoc} */\n         @Override\n         public void setValue(double value) {\n             entries.put(iter.key(), value);\n         }\n-        \n-        /** {@InheritDoc} */\n+\n+        /** {@inheritDoc} */\n         @Override\n         public int getIndex() {\n             return iter.key();\n         }\n-    }\n-    \n+\n+    }\n+\n     /**\n      *  Iterator class to do iteration over just the non-zero elements.\n-     *  <p>This implementation is fail-fast, so cannot be used to modify any zero element. \n+     *  <p>This implementation is fail-fast, so cannot be used to modify any zero element.\n      *\n      */\n-    \n     protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {\n+\n+        /** Underlying iterator. */\n         private final Iterator iter;\n+\n+        /** Current entry. */\n         private final Entry current;\n-        \n+\n+        /** Simple constructor. */\n         protected OpenMapSparseIterator() {\n             iter = entries.iterator();\n             current = new OpenMapEntry(iter);\n         }\n \n-        /** {@InheritDoc} */\n+        /** {@inheritDoc} */\n         public boolean hasNext() {\n             return iter.hasNext();\n         }\n \n-        /** {@InheritDoc} */\n+        /** {@inheritDoc} */\n         public Entry next() {\n             iter.advance();\n             return current;\n         }\n \n+        /** {@inheritDoc} */\n         public void remove() {\n             throw new UnsupportedOperationException(\"Not supported\");\n        }\n-        \n+\n     }\n }", "timestamp": 1260659461, "metainfo": ""}