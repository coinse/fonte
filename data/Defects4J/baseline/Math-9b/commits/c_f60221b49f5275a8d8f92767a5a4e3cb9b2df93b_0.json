{"sha": "f60221b49f5275a8d8f92767a5a4e3cb9b2df93b", "log": "property sets mostly, some broken method fixes  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/SparseRealVector.java\n+++ b/src/java/org/apache/commons/math/linear/SparseRealVector.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.math.linear;\n-\n-import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.util.OpenIntToDoubleHashMap;\n-import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator;\n-\n-/**\n- * This class implements the {@link RealVector} interface with a {@link OpenIntToDoubleHashMap}.\n- * @version $Revision: 728186 $ $Date: 2008-12-19 16:03:13 -0800 (Fri, 19 Dec 2008) $\n- * @since 2.0\n-*/\n-public class SparseRealVector implements RealVector {\n-\n-    private OpenIntToDoubleHashMap entries;\n-    private final int virtualSize;\n-    private double epsilon = 1.0e-12;\n-\n-    /**\n-     * Build a 0-length vector.\n-     * <p>Zero-length vectors may be used to initialized construction of vectors\n-     * by data gathering. We start with zero-length and use either the {@link\n-     * #SparseRealVector(SparseRealVector, int)} constructor\n-     * or one of the <code>append</code> method ({@link #append(double)}, {@link\n-     * #append(double[])}, {@link #append(RealVector)}) to gather data\n-     * into this vector.</p>\n-     */\n-    public SparseRealVector() {\n-        virtualSize = 0;\n-        entries = new OpenIntToDoubleHashMap(0.0);\n-    }\n-\n-    /**\n-     * Construct a (dimension)-length vector of zeros.\n-     * @param dimension size of the vector\n-     */\n-    public SparseRealVector(int dimension) {\n-        virtualSize = dimension;\n-        entries = new OpenIntToDoubleHashMap(0.0);\n-    }\n-\n-    /**\n-     * Construct a (dimension)-length vector of zeros, specifying zero tolerance\n-     * @param dimension Size of the vector\n-     * @param epsilon The tolerance for having a value considered zero\n-     */\n-    public SparseRealVector(int dimension, double epsilon){\n-        virtualSize = dimension;\n-        entries = new OpenIntToDoubleHashMap(0.0);\n-        this.epsilon = epsilon;\n-    }\n-    \n-    /**\n-     * Resize the vector, for use with append\n-     * @param v The original vector\n-     * @param resize The amount to resize it\n-     */\n-    protected SparseRealVector(SparseRealVector v, int resize) {\n-        virtualSize = v.getDimension() + resize;\n-        entries = new OpenIntToDoubleHashMap(v.entries);\n-    }\n-\n-    /**\n-     * For advanced use, when you know the sparseness \n-     * @param dimension The size of the vector\n-     * @param expectedSize The excpected number of non-zero entries\n-     */\n-    public SparseRealVector(int dimension, int expectedSize) {\n-        entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);\n-        virtualSize = dimension;\n-    }\n-\n-    /**\n-     * For advanced use, when you know the sparseness and want to specify zero tolerance\n-     * @param dimension The size of the vector\n-     * @param expectedSize The expected number of non-zero entries\n-     * @param epsilon The tolerance for having a value considered zero\n-     */\n-    public SparseRealVector(int dimension, int expectedSize, double epsilon){\n-        virtualSize = dimension;\n-        entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);\n-        this.epsilon = epsilon;\n-    }\n-    \n-    /**\n-     * Create from a double array.\n-     * Only non-zero entries will be stored\n-     * @param values The set of values to create from\n-     */\n-    public SparseRealVector(double[] values) {\n-        virtualSize = values.length;\n-        fromDoubleArray(values);\n-    }\n-\n-    /**\n-     * Create from a double array, specifying zero tolerance.\n-     * Only non-zero entries will be stored\n-     * @param values The set of values to create from\n-     * @param epsilon The tolerance for having a value considered zero \n-     */\n-    public SparseRealVector(double [] values, double epsilon){\n-        virtualSize = values.length;\n-        this.epsilon = epsilon;\n-        fromDoubleArray(values);\n-    }\n-    \n-    /**\n-     * Create from a Double array.\n-     * Only non-zero entries will be stored\n-     * @param values The set of values to create from\n-     */\n-    public SparseRealVector(Double [] values) {\n-        virtualSize = values.length;\n-        double[] vals = new double[values.length];\n-        for(int i=0; i < values.length; i++){\n-            vals[i] = values[i].doubleValue();\n-        }\n-        fromDoubleArray(vals);\n-    }\n-    \n-    /**\n-     * Create from a Double array.\n-     * Only non-zero entries will be stored\n-     * @param values The set of values to create from\n-     * @param epsilon The tolerance for having a value considered zero\n-     */\n-    public SparseRealVector(Double [] values, double epsilon){\n-        virtualSize = values.length;\n-        this.epsilon = epsilon;\n-        double[] vals = new double[values.length];\n-        for(int i=0; i < values.length; i++){\n-            vals[i] = values[i].doubleValue();\n-        }\n-        fromDoubleArray(vals);\n-    }\n-    \n-    /**\n-     * Copy constructer\n-     * @param v The instance to copy from\n-     */\n-    public SparseRealVector(SparseRealVector v){\n-        virtualSize = v.getDimension();\n-        epsilon = v.getEpsilon();\n-        entries = new OpenIntToDoubleHashMap(v.getEntries());\n-    }\n-\n-    /**\n-     * Generic copy constructer\n-     * @param v The instance to copy from\n-     */\n-    public SparseRealVector(RealVector v) {\n-        virtualSize = v.getDimension();\n-        fromDoubleArray(v.getData());\n-    }\n-\n-    \n-    /**\n-     * Fill in the values from a double array\n-     * @param values The set of values to use\n-     */\n-    private void fromDoubleArray(double[] values) {\n-        entries = new OpenIntToDoubleHashMap(0.0);\n-        for (int key = 0; key < values.length; key++) {\n-            double value = values[key];\n-            if (!isZero(value)) {\n-                entries.put(key, value);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * \n-     * @return The entries of this instance\n-     */\n-    private OpenIntToDoubleHashMap getEntries() {\n-        return entries;\n-    }\n-\n-    \n-    /**\n-     * Determine if this value is zero\n-     * @param value The value to test\n-     * @return <code>true</code> if this value is zero, <code>false</code> otherwise\n-     */\n-    protected boolean isZero(double value) {\n-        return value > -epsilon && value < epsilon;\n-    }\n-\n-    /**\n-     * \n-     * @return The test range for testing if a value is zero\n-     */\n-    public double getEpsilon() {\n-        return epsilon;\n-    }\n-\n-    /**\n-     * \n-     * @param epsilon The test range for testing if a value is zero\n-     */\n-    public void setEpsilon(double epsilon) {\n-        this.epsilon = epsilon;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector add(RealVector v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.getDimension());\n-        if (v instanceof SparseRealVector)\n-            return add((SparseRealVector) v);\n-        return add(v.getData());\n-\n-    }\n-\n-    /**\n-     * Optimized method to add two SparseRealVectors\n-     * @param v Vector to add with\n-     * @return The sum of <code>this</code> with <code>v</code>\n-     */\n-    public SparseRealVector add(SparseRealVector v) {\n-        SparseRealVector res = (SparseRealVector) copy();\n-        Iterator iter = res.getEntries().iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            int key = iter.key();\n-            if (v.getEntries().containsKey(key)) {\n-                res.set(key, iter.value() + v.getEntry(key));\n-            }\n-        }\n-        iter = v.getEntries().iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            int key = iter.key();\n-            if (!entries.containsKey(key)) {\n-                res.set(key, iter.value());\n-            }\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector add(double[] v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.length);\n-        SparseRealVector res = new SparseRealVector(getDimension());\n-        for (int i = 0; i < v.length; i++) {\n-            res.set(i, v[i] + getEntry(i));\n-        }\n-        return res;\n-    }\n-\n-    /**\n-     * Optimized method to append a SparseRealVector\n-     * @param v vector to append\n-     * @return The result of appending <code>v</code> to self\n-     */\n-    public SparseRealVector append(SparseRealVector v) {\n-        SparseRealVector res = new SparseRealVector(this, v.getDimension());\n-        Iterator iter = v.entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res.set(iter.key() + virtualSize, iter.value());\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector append(RealVector v) {\n-        if (v instanceof SparseRealVector) {\n-            return append((SparseRealVector) v);\n-        }\n-        return append(v.getData());\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector append(double d) {\n-        RealVector res = new SparseRealVector(this, 1);\n-        res.set(virtualSize, d);\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector append(double[] a) {\n-        RealVector res = new SparseRealVector(this, a.length);\n-        for (int i = 0; i < a.length; i++) {\n-            res.set(i + virtualSize, a[i]);\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector copy() {\n-        return new SparseRealVector(this);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double dotProduct(RealVector v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.getDimension());\n-        double res = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res += v.getEntry(iter.key()) * iter.value();\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double dotProduct(double[] v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.length);\n-        double res = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            int idx = iter.key();\n-            double value = 0;\n-            if (idx < v.length)\n-                value = v[idx];\n-            res += value * iter.value();\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector ebeDivide(RealVector v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.getDimension());\n-        SparseRealVector res = new SparseRealVector(this);\n-        Iterator iter = res.entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res.set(iter.key(), iter.value() / v.getEntry(iter.key()));\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector ebeDivide(double[] v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.length);\n-        SparseRealVector res = new SparseRealVector(this);\n-        Iterator iter = res.entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res.set(iter.key(), iter.value() / v[iter.key()]);\n-        }\n-        return null;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector ebeMultiply(RealVector v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.getDimension());\n-        SparseRealVector res = new SparseRealVector(this);\n-        Iterator iter = res.entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res.set(iter.key(), iter.value() * v.getEntry(iter.key()));\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector ebeMultiply(double[] v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.length);\n-        SparseRealVector res = new SparseRealVector(this);\n-        Iterator iter = res.entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res.set(iter.key(), iter.value() * v[iter.key()]);\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector get(int index, int n) throws MatrixIndexException {\n-        checkIndex(index);\n-        checkIndex(index+n-1);\n-        SparseRealVector res = new SparseRealVector(n);\n-        int end = index + n;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            int key = iter.key();\n-            if (key >= index && key < end) {\n-                res.set(key - index, iter.value());\n-            }\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double[] getData() {\n-        double[] res = new double[virtualSize];\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res[iter.key()] = iter.value();\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public int getDimension() {\n-        return virtualSize;\n-    }\n-\n-    /**\n-     * Optimized method to compute distance\n-     * @param v The vector to compute distance to\n-     * @return The distance from <code>this</code> and <code>v</code>\n-     */\n-    public double getDistance(SparseRealVector v) {\n-        Iterator iter = entries.iterator();\n-        double res = 0;\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            int key = iter.key();\n-            double delta;\n-            delta = iter.value() - v.getEntry(key);\n-            res += delta * delta;\n-        }\n-        iter = v.getEntries().iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            int key = iter.key();\n-            if (!entries.containsKey(key)) {\n-                res += iter.value() * iter.value();\n-            }\n-        }\n-        return Math.sqrt(res);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getDistance(RealVector v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.getDimension());\n-        if (v instanceof SparseRealVector) {\n-            return getDistance((SparseRealVector) v);\n-        }\n-        return getDistance(v.getData());\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getDistance(double[] v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.length);\n-        double res = 0;\n-        for (int i = 0; i < v.length; i++) {\n-            double delta = entries.get(i) - v[i];\n-            res += delta * delta;\n-        }\n-        return Math.sqrt(res);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getEntry(int index) throws MatrixIndexException {\n-        checkIndex(index);\n-        return entries.get(index);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getL1Distance(SparseRealVector v) {\n-        double max = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            double delta = Math.abs(iter.value() - v.getEntry(iter.key()));\n-            max += delta;\n-        }\n-        iter = v.getEntries().iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            int key = iter.key();\n-            if (!entries.containsKey(key)) {\n-                double delta = Math.abs(iter.value());\n-                max +=  Math.abs(delta);\n-            }\n-        }\n-        return max;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getL1Distance(RealVector v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.getDimension());\n-        if (v instanceof SparseRealVector) {\n-            return getL1Distance((SparseRealVector) v);\n-        }\n-        return getL1Distance(v.getData());\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getL1Distance(double[] v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.length);\n-        double max = 0;\n-        for (int i = 0; i < v.length; i++) {\n-            double delta = Math.abs(getEntry(i) - v[i]);\n-            max += delta;\n-        }\n-        return max;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getL1Norm() {\n-        double res = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res += Math.abs(iter.value());\n-        }\n-        return res;\n-    }\n-\n-    /**\n-     * Optimized method to compute LInfDistance  \n-     * @param v The vector to compute from\n-     * @return the LInfDistance\n-     */\n-    private double getLInfDistance(SparseRealVector v) {\n-        double max = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            double delta = Math.abs(iter.value() - v.getEntry(iter.key()));\n-            if(delta > max)\n-                max = delta;\n-        }\n-        iter = v.getEntries().iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            int key = iter.key();\n-            if (!entries.containsKey(key)) {\n-                if(iter.value() > max)\n-                    max = iter.value();\n-            }\n-        }\n-        return max;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getLInfDistance(RealVector v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.getDimension());\n-        if (v instanceof SparseRealVector) {\n-            return getLInfDistance((SparseRealVector) v);\n-        }\n-        return getLInfDistance(v.getData());\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getLInfDistance(double[] v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.length);\n-        double max = 0;\n-        for (int i = 0; i < v.length; i++) {\n-            double delta = Math.abs(getEntry(i) - v[i]);\n-            if(delta > max)\n-                max = delta;\n-        }\n-        return max;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getLInfNorm() {\n-        double max = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            max += iter.value();\n-        }\n-        return max;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getNorm() {\n-        double res = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res += iter.value() * iter.value();\n-        }\n-        return Math.sqrt(res);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public boolean isInfinite() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            if (Double.isInfinite(iter.value()))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public boolean isNaN() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            if (Double.isNaN(iter.value()))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapAbs() {\n-        return copy().mapAbsToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapAbsToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.abs(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapAcos() {\n-        return copy().mapAcosToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapAcosToSelf() {\n-        for(int i=0; i < virtualSize; i++){\n-            set(i, Math.acos(getEntry(i)));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapAdd(double d) {\n-        return copy().mapAddToSelf(d);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapAddToSelf(double d) {\n-        for (int i = 0; i < virtualSize; i++) {\n-            set(i, getEntry(i) + d);\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapAsin() {\n-        return copy().mapAsinToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapAsinToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.asin(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapAtan() {\n-        return copy().mapAtanToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapAtanToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.atan(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapCbrt() {\n-        return copy().mapCbrtToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapCbrtToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.cbrt(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapCeil() {\n-        return copy().mapCeilToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapCeilToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.ceil(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapCos() {\n-        return copy().mapCosToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapCosToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.cos(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapCosh() {\n-        return copy().mapCoshToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapCoshToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.cosh(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapDivide(double d) {\n-        return copy().mapDivideToSelf(d);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapDivideToSelf(double d) {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), iter.value() / d);\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapExp() {\n-        return copy().mapExpToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapExpToSelf() {\n-        for (int i = 0; i < virtualSize; i++) {\n-            entries.put(i, Math.exp(entries.get(i)));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapExpm1() {\n-        return copy().mapExpm1ToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapExpm1ToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.expm1(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapFloor() {\n-        return copy().mapFloorToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapFloorToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.floor(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapInv() {\n-        return copy().mapInvToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapInvToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), 1 / iter.value());\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapLog() {\n-        return copy().mapLogToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapLog10() {\n-        return copy().mapLog10ToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapLog10ToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.log10(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapLog1p() {\n-        return copy().mapLog1pToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapLog1pToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.log1p(iter.value()));\n-        }\n-        return this;\n-    }\n-    \n-    /** {@inheritDoc} */\n-    public RealVector mapLogToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.log(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapMultiply(double d) {\n-        return copy().mapMultiplyToSelf(d);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapMultiplyToSelf(double d) {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), iter.value() * d);\n-        }\n-        return this;\n-    }\n-    /** {@inheritDoc} */\n-    public RealVector mapPow(double d) {\n-        return copy().mapPowToSelf(d);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapPowToSelf(double d) {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.pow(iter.value(), d));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapRint() {\n-        return copy().mapRintToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapRintToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.rint(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapSignum() {\n-        return copy().mapSignumToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapSignumToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.signum(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapSin() {\n-        return copy().mapSinToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapSinToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.sin(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapSinh() {\n-        return copy().mapSinhToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapSinhToSelf() {\n-\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.sinh(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapSqrt() {\n-        return copy().mapSqrtToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapSqrtToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.sqrt(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapSubtract(double d) {\n-        return copy().mapSubtractToSelf(d);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapSubtractToSelf(double d) {\n-        return mapAddToSelf(-d);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapTan() {\n-        return copy().mapTanToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapTanToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.tan(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapTanh() {\n-        return copy().mapTanhToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapTanhToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.tanh(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapUlp() {\n-        return copy().mapUlpToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector mapUlpToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.ulp(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /**\n-     * Optimized method to compute the outer product\n-     * @param v The vector to comput the outer product on\n-     * @return The outer product of <code>this</code> and <code>v</code>\n-     */\n-    public SparseRealMatrix outerproduct(SparseRealVector v){\n-        checkVectorDimensions(v.getDimension());\n-        SparseRealMatrix res = new SparseRealMatrix(virtualSize, virtualSize);\n-        Iterator iter = entries.iterator();\n-        while(iter.hasNext()){\n-            iter.advance();\n-            Iterator iter2 = v.getEntries().iterator();\n-            while(iter2.hasNext()){\n-                iter2.advance();\n-                res.setEntry(iter.key(), iter2.key(), iter.value()*iter2.value());\n-            }\n-        }\n-        return res;\n-    }\n-    \n-    /** {@inheritDoc} */\n-    public RealMatrix outerProduct(RealVector v)\n-            throws IllegalArgumentException {\n-        checkVectorDimensions(v.getDimension());\n-        if(v instanceof SparseRealVector){\n-            return outerproduct((SparseRealVector)v);\n-        }\n-        RealMatrix res = new SparseRealMatrix(virtualSize, virtualSize);\n-        Iterator iter = entries.iterator();\n-        while(iter.hasNext()){\n-            iter.advance();\n-            int row = iter.key();\n-            for(int col=0; col < virtualSize; col++){\n-                res.setEntry(row, col, iter.value()*v.getEntry(col));\n-            }\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealMatrix outerProduct(double[] v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.length);\n-        RealMatrix res = new SparseRealMatrix(virtualSize, virtualSize);\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            int row = iter.key();\n-            double value = iter.value();\n-            for (int col = 0; col < virtualSize; col++) {\n-                res.setEntry(row, col, value * v[col]);\n-            }\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector projection(RealVector v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.getDimension());\n-        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector projection(double[] v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.length);\n-        return projection(new SparseRealVector(v));\n-    }\n-\n-    /** {@inheritDoc} */\n-    public void set(int index, double value) throws MatrixIndexException {\n-        checkIndex(index);\n-        if (!isZero(value)) {\n-            entries.put(index, value);\n-        } else if (entries.containsKey(index)) {\n-            entries.remove(index);\n-        }\n-    }\n-\n-    /** {@inheritDoc} */\n-    public void set(int index, RealVector v) throws MatrixIndexException {\n-        checkIndex(index);\n-        checkIndex(index + v.getDimension() - 1);\n-        set(index, v.getData());\n-    }\n-\n-    /** {@inheritDoc} */\n-    public void set(int index, double[] v) throws MatrixIndexException {\n-        checkIndex(index);\n-        checkIndex(index + v.length - 1);\n-        for (int i = 0; i < v.length; i++) {\n-            set(i + index, v[i]);\n-        }\n-    }\n-\n-    /** {@inheritDoc} */\n-    public void set(double value) {\n-        entries = new OpenIntToDoubleHashMap(value);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public SparseRealVector subtract(SparseRealVector v) {\n-        checkVectorDimensions(v.getDimension());\n-        SparseRealVector res = new SparseRealVector(this);\n-        Iterator iter = v.getEntries().iterator();\n-        OpenIntToDoubleHashMap values = res.getEntries();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            int key = iter.key();\n-            if (entries.containsKey(key)) {\n-                values.put(key, entries.get(key) - iter.value());\n-            } else {\n-                values.put(key, -iter.value());\n-            }\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector subtract(RealVector v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.getDimension());\n-        if (v instanceof SparseRealVector) {\n-            return subtract((SparseRealVector) v);\n-        }\n-        return subtract(v.getData());\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealVector subtract(double[] v) throws IllegalArgumentException {\n-        checkVectorDimensions(v.length);\n-        SparseRealVector res = new SparseRealVector(this);\n-        for (int i = 0; i < v.length; i++) {\n-            if (entries.containsKey(i)) {\n-                res.set(i, entries.get(i) - v[i]);\n-            } else {\n-                res.set(i, -v[i]);\n-            }\n-        }\n-        return res;\n-    }\n-\n-\n-    /** {@inheritDoc} */\n-    public RealVector unitVector() {\n-        RealVector res = copy();\n-        res.unitize();\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public void unitize() {\n-        double norm = getNorm();\n-        if(isZero(norm)){\n-            throw  MathRuntimeException.createArithmeticException(\"cannot normalize a zero norm vector\",\n-                    null);\n-            \n-        }\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), iter.value() / norm);\n-        }\n-\n-    }\n-\n-    /**\n-     * Check if an index is valid.\n-     * \n-     * @param index\n-     *            index to check\n-     * @exception MatrixIndexException\n-     *                if index is not valid\n-     */\n-    private void checkIndex(final int index) throws MatrixIndexException {\n-        if (index < 0 || index >= getDimension()) {\n-            throw new MatrixIndexException(\n-                    \"index {0} out of allowed range [{1}, {2}]\", new Object[] {\n-                            index, 0, getDimension() - 1 });\n-        }\n-    }\n-\n-    /**\n-     * Check if instance dimension is equal to some expected value.\n-     * \n-     * @param n\n-     *            expected dimension.\n-     * @exception IllegalArgumentException\n-     *                if the dimension is inconsistent with vector size\n-     */\n-    public void checkVectorDimensions(int n) throws IllegalArgumentException {\n-        if (getDimension() != n) {\n-            throw new IllegalArgumentException(\"vector dimension is \"\n-                    + getDimension() + \", not \" + n + \" as expected\");\n-        }\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double[] toArray() {\n-        return getData();\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.linear;\n+\n+import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.util.OpenIntToDoubleHashMap;\n+import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator;\n+\n+/**\n+ * This class implements the {@link RealVector} interface with a {@link OpenIntToDoubleHashMap}.\n+ * @version $Revision: 728186 $ $Date$\n+ * @since 2.0\n+*/\n+public class SparseRealVector implements RealVector {\n+\n+    private final OpenIntToDoubleHashMap entries;\n+    private final int virtualSize;\n+    private double epsilon = 1.0e-12;\n+\n+    /**\n+     * Build a 0-length vector.\n+     * <p>Zero-length vectors may be used to initialized construction of vectors\n+     * by data gathering. We start with zero-length and use either the {@link\n+     * #SparseRealVector(SparseRealVector, int)} constructor\n+     * or one of the <code>append</code> method ({@link #append(double)}, {@link\n+     * #append(double[])}, {@link #append(RealVector)}) to gather data\n+     * into this vector.</p>\n+     */\n+    public SparseRealVector() {\n+        virtualSize = 0;\n+        entries = new OpenIntToDoubleHashMap(0.0);\n+    }\n+\n+    /**\n+     * Construct a (dimension)-length vector of zeros.\n+     * @param dimension size of the vector\n+     */\n+    public SparseRealVector(int dimension) {\n+        virtualSize = dimension;\n+        entries = new OpenIntToDoubleHashMap(0.0);\n+    }\n+\n+    /**\n+     * Construct a (dimension)-length vector of zeros, specifying zero tolerance\n+     * @param dimension Size of the vector\n+     * @param epsilon The tolerance for having a value considered zero\n+     */\n+    public SparseRealVector(int dimension, double epsilon){\n+        virtualSize = dimension;\n+        entries = new OpenIntToDoubleHashMap(0.0);\n+        this.epsilon = epsilon;\n+    }\n+    \n+    /**\n+     * Resize the vector, for use with append\n+     * @param v The original vector\n+     * @param resize The amount to resize it\n+     */\n+    protected SparseRealVector(SparseRealVector v, int resize) {\n+        virtualSize = v.getDimension() + resize;\n+        entries = new OpenIntToDoubleHashMap(v.entries);\n+    }\n+\n+    /**\n+     * For advanced use, when you know the sparseness \n+     * @param dimension The size of the vector\n+     * @param expectedSize The excpected number of non-zero entries\n+     */\n+    public SparseRealVector(int dimension, int expectedSize) {\n+        entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);\n+        virtualSize = dimension;\n+    }\n+\n+    /**\n+     * For advanced use, when you know the sparseness and want to specify zero tolerance\n+     * @param dimension The size of the vector\n+     * @param expectedSize The expected number of non-zero entries\n+     * @param epsilon The tolerance for having a value considered zero\n+     */\n+    public SparseRealVector(int dimension, int expectedSize, double epsilon){\n+        virtualSize = dimension;\n+        entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);\n+        this.epsilon = epsilon;\n+    }\n+    \n+    /**\n+     * Create from a double array.\n+     * Only non-zero entries will be stored\n+     * @param values The set of values to create from\n+     */\n+    public SparseRealVector(double[] values) {\n+        virtualSize = values.length;\n+        fromDoubleArray(values);\n+    }\n+\n+    /**\n+     * Create from a double array, specifying zero tolerance.\n+     * Only non-zero entries will be stored\n+     * @param values The set of values to create from\n+     * @param epsilon The tolerance for having a value considered zero \n+     */\n+    public SparseRealVector(double [] values, double epsilon){\n+        virtualSize = values.length;\n+        this.epsilon = epsilon;\n+        fromDoubleArray(values);\n+    }\n+    \n+    /**\n+     * Create from a Double array.\n+     * Only non-zero entries will be stored\n+     * @param values The set of values to create from\n+     */\n+    public SparseRealVector(Double [] values) {\n+        virtualSize = values.length;\n+        double[] vals = new double[values.length];\n+        for(int i=0; i < values.length; i++){\n+            vals[i] = values[i].doubleValue();\n+        }\n+        fromDoubleArray(vals);\n+    }\n+    \n+    /**\n+     * Create from a Double array.\n+     * Only non-zero entries will be stored\n+     * @param values The set of values to create from\n+     * @param epsilon The tolerance for having a value considered zero\n+     */\n+    public SparseRealVector(Double [] values, double epsilon){\n+        virtualSize = values.length;\n+        this.epsilon = epsilon;\n+        double[] vals = new double[values.length];\n+        for(int i=0; i < values.length; i++){\n+            vals[i] = values[i].doubleValue();\n+        }\n+        fromDoubleArray(vals);\n+    }\n+    \n+    /**\n+     * Copy constructer\n+     * @param v The instance to copy from\n+     */\n+    public SparseRealVector(SparseRealVector v){\n+        virtualSize = v.getDimension();\n+        epsilon = v.getEpsilon();\n+        entries = new OpenIntToDoubleHashMap(v.getEntries());\n+    }\n+\n+    /**\n+     * Generic copy constructer\n+     * @param v The instance to copy from\n+     */\n+    public SparseRealVector(RealVector v) {\n+        virtualSize = v.getDimension();\n+        fromDoubleArray(v.getData());\n+    }\n+\n+    \n+    /**\n+     * Fill in the values from a double array\n+     * @param values The set of values to use\n+     */\n+    private void fromDoubleArray(double[] values) {\n+        entries = new OpenIntToDoubleHashMap(0.0);\n+        for (int key = 0; key < values.length; key++) {\n+            double value = values[key];\n+            if (!isZero(value)) {\n+                entries.put(key, value);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * \n+     * @return The entries of this instance\n+     */\n+    private OpenIntToDoubleHashMap getEntries() {\n+        return entries;\n+    }\n+\n+    \n+    /**\n+     * Determine if this value is zero\n+     * @param value The value to test\n+     * @return <code>true</code> if this value is zero, <code>false</code> otherwise\n+     */\n+    protected boolean isZero(double value) {\n+        return value > -epsilon && value < epsilon;\n+    }\n+\n+    /**\n+     * \n+     * @return The test range for testing if a value is zero\n+     */\n+    public double getEpsilon() {\n+        return epsilon;\n+    }\n+\n+    /**\n+     * \n+     * @param epsilon The test range for testing if a value is zero\n+     */\n+    public void setEpsilon(double epsilon) {\n+        this.epsilon = epsilon;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector add(RealVector v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.getDimension());\n+        if (v instanceof SparseRealVector)\n+            return add((SparseRealVector) v);\n+        return add(v.getData());\n+\n+    }\n+\n+    /**\n+     * Optimized method to add two SparseRealVectors\n+     * @param v Vector to add with\n+     * @return The sum of <code>this</code> with <code>v</code>\n+     */\n+    public SparseRealVector add(SparseRealVector v) {\n+        SparseRealVector res = (SparseRealVector) copy();\n+        Iterator iter = res.getEntries().iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            int key = iter.key();\n+            if (v.getEntries().containsKey(key)) {\n+                res.set(key, iter.value() + v.getEntry(key));\n+            }\n+        }\n+        iter = v.getEntries().iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            int key = iter.key();\n+            if (!entries.containsKey(key)) {\n+                res.set(key, iter.value());\n+            }\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector add(double[] v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.length);\n+        SparseRealVector res = new SparseRealVector(getDimension());\n+        for (int i = 0; i < v.length; i++) {\n+            res.set(i, v[i] + getEntry(i));\n+        }\n+        return res;\n+    }\n+\n+    /**\n+     * Optimized method to append a SparseRealVector\n+     * @param v vector to append\n+     * @return The result of appending <code>v</code> to self\n+     */\n+    public SparseRealVector append(SparseRealVector v) {\n+        SparseRealVector res = new SparseRealVector(this, v.getDimension());\n+        Iterator iter = v.entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            res.set(iter.key() + virtualSize, iter.value());\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector append(RealVector v) {\n+        if (v instanceof SparseRealVector) {\n+            return append((SparseRealVector) v);\n+        }\n+        return append(v.getData());\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector append(double d) {\n+        RealVector res = new SparseRealVector(this, 1);\n+        res.set(virtualSize, d);\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector append(double[] a) {\n+        RealVector res = new SparseRealVector(this, a.length);\n+        for (int i = 0; i < a.length; i++) {\n+            res.set(i + virtualSize, a[i]);\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector copy() {\n+        return new SparseRealVector(this);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double dotProduct(RealVector v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.getDimension());\n+        double res = 0;\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            res += v.getEntry(iter.key()) * iter.value();\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double dotProduct(double[] v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.length);\n+        double res = 0;\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            int idx = iter.key();\n+            double value = 0;\n+            if (idx < v.length)\n+                value = v[idx];\n+            res += value * iter.value();\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector ebeDivide(RealVector v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.getDimension());\n+        SparseRealVector res = new SparseRealVector(this);\n+        Iterator iter = res.entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            res.set(iter.key(), iter.value() / v.getEntry(iter.key()));\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector ebeDivide(double[] v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.length);\n+        SparseRealVector res = new SparseRealVector(this);\n+        Iterator iter = res.entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            res.set(iter.key(), iter.value() / v[iter.key()]);\n+        }\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector ebeMultiply(RealVector v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.getDimension());\n+        SparseRealVector res = new SparseRealVector(this);\n+        Iterator iter = res.entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            res.set(iter.key(), iter.value() * v.getEntry(iter.key()));\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector ebeMultiply(double[] v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.length);\n+        SparseRealVector res = new SparseRealVector(this);\n+        Iterator iter = res.entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            res.set(iter.key(), iter.value() * v[iter.key()]);\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector get(int index, int n) throws MatrixIndexException {\n+        checkIndex(index);\n+        checkIndex(index+n-1);\n+        SparseRealVector res = new SparseRealVector(n);\n+        int end = index + n;\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            int key = iter.key();\n+            if (key >= index && key < end) {\n+                res.set(key - index, iter.value());\n+            }\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double[] getData() {\n+        double[] res = new double[virtualSize];\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            res[iter.key()] = iter.value();\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public int getDimension() {\n+        return virtualSize;\n+    }\n+\n+    /**\n+     * Optimized method to compute distance\n+     * @param v The vector to compute distance to\n+     * @return The distance from <code>this</code> and <code>v</code>\n+     */\n+    public double getDistance(SparseRealVector v) {\n+        Iterator iter = entries.iterator();\n+        double res = 0;\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            int key = iter.key();\n+            double delta;\n+            delta = iter.value() - v.getEntry(key);\n+            res += delta * delta;\n+        }\n+        iter = v.getEntries().iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            int key = iter.key();\n+            if (!entries.containsKey(key)) {\n+                res += iter.value() * iter.value();\n+            }\n+        }\n+        return Math.sqrt(res);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getDistance(RealVector v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.getDimension());\n+        if (v instanceof SparseRealVector) {\n+            return getDistance((SparseRealVector) v);\n+        }\n+        return getDistance(v.getData());\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getDistance(double[] v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.length);\n+        double res = 0;\n+        for (int i = 0; i < v.length; i++) {\n+            double delta = entries.get(i) - v[i];\n+            res += delta * delta;\n+        }\n+        return Math.sqrt(res);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getEntry(int index) throws MatrixIndexException {\n+        checkIndex(index);\n+        return entries.get(index);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getL1Distance(SparseRealVector v) {\n+        double max = 0;\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            double delta = Math.abs(iter.value() - v.getEntry(iter.key()));\n+            max += delta;\n+        }\n+        iter = v.getEntries().iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            int key = iter.key();\n+            if (!entries.containsKey(key)) {\n+                double delta = Math.abs(iter.value());\n+                max +=  Math.abs(delta);\n+            }\n+        }\n+        return max;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getL1Distance(RealVector v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.getDimension());\n+        if (v instanceof SparseRealVector) {\n+            return getL1Distance((SparseRealVector) v);\n+        }\n+        return getL1Distance(v.getData());\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getL1Distance(double[] v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.length);\n+        double max = 0;\n+        for (int i = 0; i < v.length; i++) {\n+            double delta = Math.abs(getEntry(i) - v[i]);\n+            max += delta;\n+        }\n+        return max;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getL1Norm() {\n+        double res = 0;\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            res += Math.abs(iter.value());\n+        }\n+        return res;\n+    }\n+\n+    /**\n+     * Optimized method to compute LInfDistance  \n+     * @param v The vector to compute from\n+     * @return the LInfDistance\n+     */\n+    private double getLInfDistance(SparseRealVector v) {\n+        double max = 0;\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            double delta = Math.abs(iter.value() - v.getEntry(iter.key()));\n+            if(delta > max)\n+                max = delta;\n+        }\n+        iter = v.getEntries().iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            int key = iter.key();\n+            if (!entries.containsKey(key)) {\n+                if(iter.value() > max)\n+                    max = iter.value();\n+            }\n+        }\n+        return max;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getLInfDistance(RealVector v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.getDimension());\n+        if (v instanceof SparseRealVector) {\n+            return getLInfDistance((SparseRealVector) v);\n+        }\n+        return getLInfDistance(v.getData());\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getLInfDistance(double[] v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.length);\n+        double max = 0;\n+        for (int i = 0; i < v.length; i++) {\n+            double delta = Math.abs(getEntry(i) - v[i]);\n+            if(delta > max)\n+                max = delta;\n+        }\n+        return max;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getLInfNorm() {\n+        double max = 0;\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            max += iter.value();\n+        }\n+        return max;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getNorm() {\n+        double res = 0;\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            res += iter.value() * iter.value();\n+        }\n+        return Math.sqrt(res);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public boolean isInfinite() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            if (Double.isInfinite(iter.value()))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public boolean isNaN() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            if (Double.isNaN(iter.value()))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapAbs() {\n+        return copy().mapAbsToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapAbsToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.abs(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapAcos() {\n+        return copy().mapAcosToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapAcosToSelf() {\n+        for(int i=0; i < virtualSize; i++){\n+            set(i, Math.acos(getEntry(i)));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapAdd(double d) {\n+        return copy().mapAddToSelf(d);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapAddToSelf(double d) {\n+        for (int i = 0; i < virtualSize; i++) {\n+            set(i, getEntry(i) + d);\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapAsin() {\n+        return copy().mapAsinToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapAsinToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.asin(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapAtan() {\n+        return copy().mapAtanToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapAtanToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.atan(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapCbrt() {\n+        return copy().mapCbrtToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapCbrtToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.cbrt(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapCeil() {\n+        return copy().mapCeilToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapCeilToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.ceil(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapCos() {\n+        return copy().mapCosToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapCosToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.cos(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapCosh() {\n+        return copy().mapCoshToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapCoshToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.cosh(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapDivide(double d) {\n+        return copy().mapDivideToSelf(d);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapDivideToSelf(double d) {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), iter.value() / d);\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapExp() {\n+        return copy().mapExpToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapExpToSelf() {\n+        for (int i = 0; i < virtualSize; i++) {\n+            entries.put(i, Math.exp(entries.get(i)));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapExpm1() {\n+        return copy().mapExpm1ToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapExpm1ToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.expm1(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapFloor() {\n+        return copy().mapFloorToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapFloorToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.floor(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapInv() {\n+        return copy().mapInvToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapInvToSelf() {\n+        for(int i=0; i < virtualSize; i++){\n+            set(i, 1.0/getEntry(i));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapLog() {\n+        return copy().mapLogToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapLog10() {\n+        return copy().mapLog10ToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapLog10ToSelf() {\n+        for(int i=0; i < virtualSize; i++){\n+            set(i, Math.log10(getEntry(i)));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapLog1p() {\n+        return copy().mapLog1pToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapLog1pToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.log1p(iter.value()));\n+        }\n+        return this;\n+    }\n+    \n+    /** {@inheritDoc} */\n+    public RealVector mapLogToSelf() {\n+        for(int i=0; i < virtualSize; i++){\n+            set(i, Math.log(getEntry(i)));\n+        }\n+       return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapMultiply(double d) {\n+        return copy().mapMultiplyToSelf(d);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapMultiplyToSelf(double d) {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), iter.value() * d);\n+        }\n+        return this;\n+    }\n+    /** {@inheritDoc} */\n+    public RealVector mapPow(double d) {\n+        return copy().mapPowToSelf(d);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapPowToSelf(double d) {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.pow(iter.value(), d));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapRint() {\n+        return copy().mapRintToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapRintToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.rint(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapSignum() {\n+        return copy().mapSignumToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapSignumToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.signum(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapSin() {\n+        return copy().mapSinToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapSinToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.sin(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapSinh() {\n+        return copy().mapSinhToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapSinhToSelf() {\n+\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.sinh(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapSqrt() {\n+        return copy().mapSqrtToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapSqrtToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.sqrt(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapSubtract(double d) {\n+        return copy().mapSubtractToSelf(d);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapSubtractToSelf(double d) {\n+        return mapAddToSelf(-d);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapTan() {\n+        return copy().mapTanToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapTanToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.tan(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapTanh() {\n+        return copy().mapTanhToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapTanhToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.tanh(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapUlp() {\n+        return copy().mapUlpToSelf();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector mapUlpToSelf() {\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), Math.ulp(iter.value()));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Optimized method to compute the outer product\n+     * @param v The vector to comput the outer product on\n+     * @return The outer product of <code>this</code> and <code>v</code>\n+     */\n+    public SparseRealMatrix outerproduct(SparseRealVector v){\n+        checkVectorDimensions(v.getDimension());\n+        SparseRealMatrix res = new SparseRealMatrix(virtualSize, virtualSize);\n+        Iterator iter = entries.iterator();\n+        while(iter.hasNext()){\n+            iter.advance();\n+            Iterator iter2 = v.getEntries().iterator();\n+            while(iter2.hasNext()){\n+                iter2.advance();\n+                res.setEntry(iter.key(), iter2.key(), iter.value()*iter2.value());\n+            }\n+        }\n+        return res;\n+    }\n+    \n+    /** {@inheritDoc} */\n+    public RealMatrix outerProduct(RealVector v)\n+            throws IllegalArgumentException {\n+        checkVectorDimensions(v.getDimension());\n+        if(v instanceof SparseRealVector){\n+            return outerproduct((SparseRealVector)v);\n+        }\n+        RealMatrix res = new SparseRealMatrix(virtualSize, virtualSize);\n+        Iterator iter = entries.iterator();\n+        while(iter.hasNext()){\n+            iter.advance();\n+            int row = iter.key();\n+            for(int col=0; col < virtualSize; col++){\n+                res.setEntry(row, col, iter.value()*v.getEntry(col));\n+            }\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealMatrix outerProduct(double[] v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.length);\n+        RealMatrix res = new SparseRealMatrix(virtualSize, virtualSize);\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            int row = iter.key();\n+            double value = iter.value();\n+            for (int col = 0; col < virtualSize; col++) {\n+                res.setEntry(row, col, value * v[col]);\n+            }\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector projection(RealVector v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.getDimension());\n+        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector projection(double[] v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.length);\n+        return projection(new SparseRealVector(v));\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void set(int index, double value) throws MatrixIndexException {\n+        checkIndex(index);\n+        if (!isZero(value)) {\n+            entries.put(index, value);\n+        } else if (entries.containsKey(index)) {\n+            entries.remove(index);\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void set(int index, RealVector v) throws MatrixIndexException {\n+        checkIndex(index);\n+        checkIndex(index + v.getDimension() - 1);\n+        set(index, v.getData());\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void set(int index, double[] v) throws MatrixIndexException {\n+        checkIndex(index);\n+        checkIndex(index + v.length - 1);\n+        for (int i = 0; i < v.length; i++) {\n+            set(i + index, v[i]);\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void set(double value) {\n+        for(int i=0; i < virtualSize; i++){\n+            set(i, value);\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    public SparseRealVector subtract(SparseRealVector v) {\n+        checkVectorDimensions(v.getDimension());\n+        SparseRealVector res = new SparseRealVector(this);\n+        Iterator iter = v.getEntries().iterator();\n+        OpenIntToDoubleHashMap values = res.getEntries();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            int key = iter.key();\n+            if (entries.containsKey(key)) {\n+                values.put(key, entries.get(key) - iter.value());\n+            } else {\n+                values.put(key, -iter.value());\n+            }\n+        }\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector subtract(RealVector v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.getDimension());\n+        if (v instanceof SparseRealVector) {\n+            return subtract((SparseRealVector) v);\n+        }\n+        return subtract(v.getData());\n+    }\n+\n+    /** {@inheritDoc} */\n+    public RealVector subtract(double[] v) throws IllegalArgumentException {\n+        checkVectorDimensions(v.length);\n+        SparseRealVector res = new SparseRealVector(this);\n+        for (int i = 0; i < v.length; i++) {\n+            if (entries.containsKey(i)) {\n+                res.set(i, entries.get(i) - v[i]);\n+            } else {\n+                res.set(i, -v[i]);\n+            }\n+        }\n+        return res;\n+    }\n+\n+\n+    /** {@inheritDoc} */\n+    public RealVector unitVector() {\n+        RealVector res = copy();\n+        res.unitize();\n+        return res;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void unitize() {\n+        double norm = getNorm();\n+        if(isZero(norm)){\n+            throw  MathRuntimeException.createArithmeticException(\"cannot normalize a zero norm vector\",\n+                    null);\n+            \n+        }\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            entries.put(iter.key(), iter.value() / norm);\n+        }\n+\n+    }\n+\n+    /**\n+     * Check if an index is valid.\n+     * \n+     * @param index\n+     *            index to check\n+     * @exception MatrixIndexException\n+     *                if index is not valid\n+     */\n+    private void checkIndex(final int index) throws MatrixIndexException {\n+        if (index < 0 || index >= getDimension()) {\n+            throw new MatrixIndexException(\n+                    \"index {0} out of allowed range [{1}, {2}]\", new Object[] {\n+                            index, 0, getDimension() - 1 });\n+        }\n+    }\n+\n+    /**\n+     * Check if instance dimension is equal to some expected value.\n+     * \n+     * @param n\n+     *            expected dimension.\n+     * @exception IllegalArgumentException\n+     *                if the dimension is inconsistent with vector size\n+     */\n+    public void checkVectorDimensions(int n) throws IllegalArgumentException {\n+        if (getDimension() != n) {\n+            throw new IllegalArgumentException(\"vector dimension is \"\n+                    + getDimension() + \", not \" + n + \" as expected\");\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double[] toArray() {\n+        return getData();\n+    }\n+}", "timestamp": 1233542427, "metainfo": ""}