{"sha": "659f6c16d2d4fe9afc5e9b75d551140733376e50", "log": "partially unrolled some computation loops to increase performance  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/DenseRealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/DenseRealMatrix.java\n public class DenseRealMatrix extends AbstractRealMatrix implements Serializable {\n     \n     /** Serializable version identifier */\n-    private static final long serialVersionUID = 5536250491728216579L;\n+    private static final long serialVersionUID = 4991895511313664478L;\n \n     /** Block size. */\n-    private static final int BLOCK_SIZE = 32;\n+    private static final int BLOCK_SIZE = 52;\n \n     /** Blocks of matrix entries. */\n     private final double blocks[][];\n      * @throws     IllegalArgumentException\n      *             if columnDimension(this) != rowDimension(m)\n      */\n-    DenseRealMatrix multiply(DenseRealMatrix m) throws IllegalArgumentException {\n+    public DenseRealMatrix multiply(DenseRealMatrix m) throws IllegalArgumentException {\n \n         // safety check\n         checkMultiplicationCompatible(m);\n \n             for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {\n                 final int jWidth = out.blockWidth(jBlock);\n+                final int jWidth2 = jWidth  + jWidth;\n+                final int jWidth3 = jWidth2 + jWidth;\n+                final int jWidth4 = jWidth3 + jWidth;\n \n                 // select current block\n                 final double[] outBlock = out.blocks[blockIndex];\n                         final int lEnd   = lStart + kWidth;\n                         for (int nStart = 0; nStart < jWidth; ++nStart) {\n                             double sum = 0;\n-                            for (int l = lStart, n = nStart; l < lEnd; ++l, n += jWidth) {\n-                                sum += tBlock[l] * mBlock[n];\n+                            int l = lStart;\n+                            int n = nStart;\n+                            while (l < lEnd - 3) {\n+                                sum += tBlock[l] * mBlock[n] +\n+                                       tBlock[l + 1] * mBlock[n + jWidth] +\n+                                       tBlock[l + 2] * mBlock[n + jWidth2] +\n+                                       tBlock[l + 3] * mBlock[n + jWidth3];\n+                                l += 4;\n+                                n += jWidth4;\n+                            }\n+                            while (l < lEnd) {\n+                                sum += tBlock[l++] * mBlock[n];\n+                                n += jWidth;\n                             }\n                             outBlock[k++] += sum;\n                         }\n                 final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);\n                 for (int p = pStart, k = 0; p < pEnd; ++p) {\n                     double sum = 0;\n-                    for (int q = qStart; q < qEnd; ++q) {\n-                        sum += block[k++] * v[q];\n+                    int q = qStart;\n+                    while (q < qEnd - 3) {\n+                        sum += block[k]     * v[q]     +\n+                               block[k + 1] * v[q + 1] +\n+                               block[k + 2] * v[q + 2] +\n+                               block[k + 3] * v[q + 3];\n+                        ++k;\n+                        ++q;\n+                    }\n+                    while (q < qEnd) {\n+                        sum += block[k++] * v[q++];\n                     }\n                     out[p] += sum;\n                 }", "timestamp": 1229886164, "metainfo": ""}