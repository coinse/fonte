{"sha": "17d80677fa5a4aa1a44f6b0ff87cf2de18b0b95c", "log": "Created ArithmeticsUtilsTest. Moved some tests from MathUtilsTest to ArithmeticsUtilsTest (MATH-689).  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.util.ArrayList;\n+\n+import org.apache.commons.math.exception.MathArithmeticException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.random.RandomDataImpl;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for the {@link ArithmeticsUtils} class.\n+ *\n+ * @version $Id$\n+ */\n+public class ArithmeticsUtilsTest {\n+    /**\n+     * Exact direct multiplication implementation to test against\n+     */\n+    private long factorial(int n) {\n+        long result = 1;\n+        for (int i = 2; i <= n; i++) {\n+            result *= i;\n+        }\n+        return result;\n+    }\n+\n+    @Test\n+    public void testAddAndCheck() {\n+        int big = Integer.MAX_VALUE;\n+        int bigNeg = Integer.MIN_VALUE;\n+        Assert.assertEquals(big, ArithmeticsUtils.addAndCheck(big, 0));\n+        try {\n+            ArithmeticsUtils.addAndCheck(big, 1);\n+            Assert.fail(\"Expecting MathArithmeticException\");\n+        } catch (MathArithmeticException ex) {\n+        }\n+        try {\n+            ArithmeticsUtils.addAndCheck(bigNeg, -1);\n+            Assert.fail(\"Expecting MathArithmeticException\");\n+        } catch (MathArithmeticException ex) {\n+        }\n+    }\n+\n+\n+    @Test\n+    public void testAddAndCheckLong() {\n+        long max = Long.MAX_VALUE;\n+        long min = Long.MIN_VALUE;\n+        Assert.assertEquals(max, ArithmeticsUtils.addAndCheck(max, 0L));\n+        Assert.assertEquals(min, ArithmeticsUtils.addAndCheck(min, 0L));\n+        Assert.assertEquals(max, ArithmeticsUtils.addAndCheck(0L, max));\n+        Assert.assertEquals(min, ArithmeticsUtils.addAndCheck(0L, min));\n+        Assert.assertEquals(1, ArithmeticsUtils.addAndCheck(-1L, 2L));\n+        Assert.assertEquals(1, ArithmeticsUtils.addAndCheck(2L, -1L));\n+        Assert.assertEquals(-3, ArithmeticsUtils.addAndCheck(-2L, -1L));\n+        Assert.assertEquals(min, ArithmeticsUtils.addAndCheck(min + 1, -1L));\n+        testAddAndCheckLongFailure(max, 1L);\n+        testAddAndCheckLongFailure(min, -1L);\n+        testAddAndCheckLongFailure(1L, max);\n+        testAddAndCheckLongFailure(-1L, min);\n+    }\n+\n+    private void testAddAndCheckLongFailure(long a, long b) {\n+        try {\n+            ArithmeticsUtils.addAndCheck(a, b);\n+            Assert.fail(\"Expecting MathArithmeticException\");\n+        } catch (MathArithmeticException ex) {\n+            // success\n+        }\n+    }\n+\n+    @Test\n+    public void testSubAndCheck() {\n+        int big = Integer.MAX_VALUE;\n+        int bigNeg = Integer.MIN_VALUE;\n+        Assert.assertEquals(big, ArithmeticsUtils.subAndCheck(big, 0));\n+        Assert.assertEquals(bigNeg + 1, ArithmeticsUtils.subAndCheck(bigNeg, -1));\n+        Assert.assertEquals(-1, ArithmeticsUtils.subAndCheck(bigNeg, -big));\n+        try {\n+            ArithmeticsUtils.subAndCheck(big, -1);\n+            Assert.fail(\"Expecting MathArithmeticException\");\n+        } catch (MathArithmeticException ex) {\n+        }\n+        try {\n+            ArithmeticsUtils.subAndCheck(bigNeg, 1);\n+            Assert.fail(\"Expecting MathArithmeticException\");\n+        } catch (MathArithmeticException ex) {\n+        }\n+    }\n+\n+    @Test\n+    public void testSubAndCheckErrorMessage() {\n+        int big = Integer.MAX_VALUE;\n+        try {\n+            ArithmeticsUtils.subAndCheck(big, -1);\n+            Assert.fail(\"Expecting MathArithmeticException\");\n+        } catch (MathArithmeticException ex) {\n+            Assert.assertTrue(ex.getMessage().length() > 1);\n+        }\n+    }\n+\n+    @Test\n+    public void testSubAndCheckLong() {\n+        long max = Long.MAX_VALUE;\n+        long min = Long.MIN_VALUE;\n+        Assert.assertEquals(max, ArithmeticsUtils.subAndCheck(max, 0));\n+        Assert.assertEquals(min, ArithmeticsUtils.subAndCheck(min, 0));\n+        Assert.assertEquals(-max, ArithmeticsUtils.subAndCheck(0, max));\n+        Assert.assertEquals(min + 1, ArithmeticsUtils.subAndCheck(min, -1));\n+        // min == -1-max\n+        Assert.assertEquals(-1, ArithmeticsUtils.subAndCheck(-max - 1, -max));\n+        Assert.assertEquals(max, ArithmeticsUtils.subAndCheck(-1, -1 - max));\n+        testSubAndCheckLongFailure(0L, min);\n+        testSubAndCheckLongFailure(max, -1L);\n+        testSubAndCheckLongFailure(min, 1L);\n+    }\n+\n+    private void testSubAndCheckLongFailure(long a, long b) {\n+        try {\n+            ArithmeticsUtils.subAndCheck(a, b);\n+            Assert.fail(\"Expecting MathArithmeticException\");\n+        } catch (MathArithmeticException ex) {\n+            // success\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testFactorial() {\n+        for (int i = 1; i < 21; i++) {\n+            Assert.assertEquals(i + \"! \", factorial(i), ArithmeticsUtils.factorial(i));\n+            Assert.assertEquals(i + \"! \", factorial(i), ArithmeticsUtils.factorialDouble(i), Double.MIN_VALUE);\n+            Assert.assertEquals(i + \"! \", FastMath.log(factorial(i)), ArithmeticsUtils.factorialLog(i), 10E-12);\n+        }\n+\n+        Assert.assertEquals(\"0\", 1, ArithmeticsUtils.factorial(0));\n+        Assert.assertEquals(\"0\", 1.0d, ArithmeticsUtils.factorialDouble(0), 1E-14);\n+        Assert.assertEquals(\"0\", 0.0d, ArithmeticsUtils.factorialLog(0), 1E-14);\n+    }\n+\n+    @Test\n+    public void testFactorialFail() {\n+        try {\n+            ArithmeticsUtils.factorial(-1);\n+            Assert.fail(\"expecting MathIllegalArgumentException\");\n+        } catch (MathIllegalArgumentException ex) {\n+            // ignored\n+        }\n+        try {\n+            ArithmeticsUtils.factorialDouble(-1);\n+            Assert.fail(\"expecting MathIllegalArgumentException\");\n+        } catch (MathIllegalArgumentException ex) {\n+            // ignored\n+        }\n+        try {\n+            ArithmeticsUtils.factorialLog(-1);\n+            Assert.fail(\"expecting MathIllegalArgumentException\");\n+        } catch (MathIllegalArgumentException ex) {\n+            // ignored\n+        }\n+        try {\n+            ArithmeticsUtils.factorial(21);\n+            Assert.fail(\"expecting MathArithmeticException\");\n+        } catch (MathArithmeticException ex) {\n+            // ignored\n+        }\n+        Assert.assertTrue(\"expecting infinite factorial value\", Double.isInfinite(ArithmeticsUtils.factorialDouble(171)));\n+    }\n+\n+\n+    @Test\n+    public void testGcd() {\n+        int a = 30;\n+        int b = 50;\n+        int c = 77;\n+\n+        Assert.assertEquals(0, ArithmeticsUtils.gcd(0, 0));\n+\n+        Assert.assertEquals(b, ArithmeticsUtils.gcd(0, b));\n+        Assert.assertEquals(a, ArithmeticsUtils.gcd(a, 0));\n+        Assert.assertEquals(b, ArithmeticsUtils.gcd(0, -b));\n+        Assert.assertEquals(a, ArithmeticsUtils.gcd(-a, 0));\n+\n+        Assert.assertEquals(10, ArithmeticsUtils.gcd(a, b));\n+        Assert.assertEquals(10, ArithmeticsUtils.gcd(-a, b));\n+        Assert.assertEquals(10, ArithmeticsUtils.gcd(a, -b));\n+        Assert.assertEquals(10, ArithmeticsUtils.gcd(-a, -b));\n+\n+        Assert.assertEquals(1, ArithmeticsUtils.gcd(a, c));\n+        Assert.assertEquals(1, ArithmeticsUtils.gcd(-a, c));\n+        Assert.assertEquals(1, ArithmeticsUtils.gcd(a, -c));\n+        Assert.assertEquals(1, ArithmeticsUtils.gcd(-a, -c));\n+\n+        Assert.assertEquals(3 * (1<<15), ArithmeticsUtils.gcd(3 * (1<<20), 9 * (1<<15)));\n+\n+        Assert.assertEquals(Integer.MAX_VALUE, ArithmeticsUtils.gcd(Integer.MAX_VALUE, 0));\n+        Assert.assertEquals(Integer.MAX_VALUE, ArithmeticsUtils.gcd(-Integer.MAX_VALUE, 0));\n+        Assert.assertEquals(1<<30, ArithmeticsUtils.gcd(1<<30, -Integer.MIN_VALUE));\n+        try {\n+            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n+            ArithmeticsUtils.gcd(Integer.MIN_VALUE, 0);\n+            Assert.fail(\"expecting MathArithmeticException\");\n+        } catch (MathArithmeticException expected) {\n+            // expected\n+        }\n+        try {\n+            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n+            ArithmeticsUtils.gcd(0, Integer.MIN_VALUE);\n+            Assert.fail(\"expecting MathArithmeticException\");\n+        } catch (MathArithmeticException expected) {\n+            // expected\n+        }\n+        try {\n+            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n+            ArithmeticsUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n+            Assert.fail(\"expecting MathArithmeticException\");\n+        } catch (MathArithmeticException expected) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void  testGcdLong(){\n+        long a = 30;\n+        long b = 50;\n+        long c = 77;\n+\n+        Assert.assertEquals(0, ArithmeticsUtils.gcd(0L, 0));\n+\n+        Assert.assertEquals(b, ArithmeticsUtils.gcd(0, b));\n+        Assert.assertEquals(a, ArithmeticsUtils.gcd(a, 0));\n+        Assert.assertEquals(b, ArithmeticsUtils.gcd(0, -b));\n+        Assert.assertEquals(a, ArithmeticsUtils.gcd(-a, 0));\n+\n+        Assert.assertEquals(10, ArithmeticsUtils.gcd(a, b));\n+        Assert.assertEquals(10, ArithmeticsUtils.gcd(-a, b));\n+        Assert.assertEquals(10, ArithmeticsUtils.gcd(a, -b));\n+        Assert.assertEquals(10, ArithmeticsUtils.gcd(-a, -b));\n+\n+        Assert.assertEquals(1, ArithmeticsUtils.gcd(a, c));\n+        Assert.assertEquals(1, ArithmeticsUtils.gcd(-a, c));\n+        Assert.assertEquals(1, ArithmeticsUtils.gcd(a, -c));\n+        Assert.assertEquals(1, ArithmeticsUtils.gcd(-a, -c));\n+\n+        Assert.assertEquals(3L * (1L<<45), ArithmeticsUtils.gcd(3L * (1L<<50), 9L * (1L<<45)));\n+\n+        Assert.assertEquals(1L<<45, ArithmeticsUtils.gcd(1L<<45, Long.MIN_VALUE));\n+\n+        Assert.assertEquals(Long.MAX_VALUE, ArithmeticsUtils.gcd(Long.MAX_VALUE, 0L));\n+        Assert.assertEquals(Long.MAX_VALUE, ArithmeticsUtils.gcd(-Long.MAX_VALUE, 0L));\n+        Assert.assertEquals(1, ArithmeticsUtils.gcd(60247241209L, 153092023L));\n+        try {\n+            // gcd(Long.MIN_VALUE, 0) > Long.MAX_VALUE\n+            ArithmeticsUtils.gcd(Long.MIN_VALUE, 0);\n+            Assert.fail(\"expecting MathArithmeticException\");\n+        } catch (MathArithmeticException expected) {\n+            // expected\n+        }\n+        try {\n+            // gcd(0, Long.MIN_VALUE) > Long.MAX_VALUE\n+            ArithmeticsUtils.gcd(0, Long.MIN_VALUE);\n+            Assert.fail(\"expecting MathArithmeticException\");\n+        } catch (MathArithmeticException expected) {\n+            // expected\n+        }\n+        try {\n+            // gcd(Long.MIN_VALUE, Long.MIN_VALUE) > Long.MAX_VALUE\n+            ArithmeticsUtils.gcd(Long.MIN_VALUE, Long.MIN_VALUE);\n+            Assert.fail(\"expecting MathArithmeticException\");\n+        } catch (MathArithmeticException expected) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void testGcdConsistency() {\n+        int[] primeList = {19, 23, 53, 67, 73, 79, 101, 103, 111, 131};\n+        ArrayList<Integer> primes = new ArrayList<Integer>();\n+        for (int i = 0; i < primeList.length; i++) {\n+            primes.add(Integer.valueOf(primeList[i]));\n+        }\n+        RandomDataImpl randomData = new RandomDataImpl();\n+        for (int i = 0; i < 20; i++) {\n+            Object[] sample = randomData.nextSample(primes, 4);\n+            int p1 = ((Integer) sample[0]).intValue();\n+            int p2 = ((Integer) sample[1]).intValue();\n+            int p3 = ((Integer) sample[2]).intValue();\n+            int p4 = ((Integer) sample[3]).intValue();\n+            int i1 = p1 * p2 * p3;\n+            int i2 = p1 * p2 * p4;\n+            int gcd = p1 * p2;\n+            Assert.assertEquals(gcd, ArithmeticsUtils.gcd(i1, i2));\n+            long l1 = i1;\n+            long l2 = i2;\n+            Assert.assertEquals(gcd, ArithmeticsUtils.gcd(l1, l2));\n+        }\n+    }\n+}\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n             if (k > 100) {\n                 binomialCoefficient(n - 100, k - 100);\n             }\n-            result = MathUtils.addAndCheck(binomialCoefficient(n - 1, k - 1),\n+            result = ArithmeticsUtils.addAndCheck(binomialCoefficient(n - 1, k - 1),\n                 binomialCoefficient(n - 1, k));\n         }\n         if (result == -1) {\n             binomialCache.add(new HashMap<Integer, Long>());\n         }\n         binomialCache.get(n).put(Integer.valueOf(k), Long.valueOf(result));\n-        return result;\n-    }\n-\n-    /**\n-     * Exact direct multiplication implementation to test against\n-     */\n-    private long factorial(int n) {\n-        long result = 1;\n-        for (int i = 2; i <= n; i++) {\n-            result *= i;\n-        }\n         return result;\n     }\n \n         Assert.assertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);\n         Assert.assertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);\n         Assert.assertEquals(MathUtils.binomialCoefficient(0, 0), 1);\n-    }\n-\n-    @Test\n-    public void testAddAndCheck() {\n-        int big = Integer.MAX_VALUE;\n-        int bigNeg = Integer.MIN_VALUE;\n-        Assert.assertEquals(big, MathUtils.addAndCheck(big, 0));\n-        try {\n-            MathUtils.addAndCheck(big, 1);\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-        }\n-        try {\n-            MathUtils.addAndCheck(bigNeg, -1);\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-        }\n-    }\n-\n-    @Test\n-    public void testAddAndCheckLong() {\n-        long max = Long.MAX_VALUE;\n-        long min = Long.MIN_VALUE;\n-        Assert.assertEquals(max, MathUtils.addAndCheck(max, 0L));\n-        Assert.assertEquals(min, MathUtils.addAndCheck(min, 0L));\n-        Assert.assertEquals(max, MathUtils.addAndCheck(0L, max));\n-        Assert.assertEquals(min, MathUtils.addAndCheck(0L, min));\n-        Assert.assertEquals(1, MathUtils.addAndCheck(-1L, 2L));\n-        Assert.assertEquals(1, MathUtils.addAndCheck(2L, -1L));\n-        Assert.assertEquals(-3, MathUtils.addAndCheck(-2L, -1L));\n-        Assert.assertEquals(min, MathUtils.addAndCheck(min + 1, -1L));\n-        testAddAndCheckLongFailure(max, 1L);\n-        testAddAndCheckLongFailure(min, -1L);\n-        testAddAndCheckLongFailure(1L, max);\n-        testAddAndCheckLongFailure(-1L, min);\n-    }\n-\n-    private void testAddAndCheckLongFailure(long a, long b) {\n-        try {\n-            MathUtils.addAndCheck(a, b);\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-            // success\n-        }\n     }\n \n     @Test\n     }\n \n     @Test\n-    public void testFactorial() {\n-        for (int i = 1; i < 21; i++) {\n-            Assert.assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));\n-            Assert.assertEquals(i + \"! \", factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);\n-            Assert.assertEquals(i + \"! \", FastMath.log(factorial(i)), MathUtils.factorialLog(i), 10E-12);\n-        }\n-\n-        Assert.assertEquals(\"0\", 1, MathUtils.factorial(0));\n-        Assert.assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);\n-        Assert.assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);\n-    }\n-\n-    @Test\n-    public void testFactorialFail() {\n-        try {\n-            MathUtils.factorial(-1);\n-            Assert.fail(\"expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n-            // ignored\n-        }\n-        try {\n-            MathUtils.factorialDouble(-1);\n-            Assert.fail(\"expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n-            // ignored\n-        }\n-        try {\n-            MathUtils.factorialLog(-1);\n-            Assert.fail(\"expecting MathIllegalArgumentException\");\n-        } catch (MathIllegalArgumentException ex) {\n-            // ignored\n-        }\n-        try {\n-            MathUtils.factorial(21);\n-            Assert.fail(\"expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-            // ignored\n-        }\n-        Assert.assertTrue(\"expecting infinite factorial value\", Double.isInfinite(MathUtils.factorialDouble(171)));\n-    }\n-\n-    @Test\n-    public void testGcd() {\n-        int a = 30;\n-        int b = 50;\n-        int c = 77;\n-\n-        Assert.assertEquals(0, MathUtils.gcd(0, 0));\n-\n-        Assert.assertEquals(b, MathUtils.gcd(0, b));\n-        Assert.assertEquals(a, MathUtils.gcd(a, 0));\n-        Assert.assertEquals(b, MathUtils.gcd(0, -b));\n-        Assert.assertEquals(a, MathUtils.gcd(-a, 0));\n-\n-        Assert.assertEquals(10, MathUtils.gcd(a, b));\n-        Assert.assertEquals(10, MathUtils.gcd(-a, b));\n-        Assert.assertEquals(10, MathUtils.gcd(a, -b));\n-        Assert.assertEquals(10, MathUtils.gcd(-a, -b));\n-\n-        Assert.assertEquals(1, MathUtils.gcd(a, c));\n-        Assert.assertEquals(1, MathUtils.gcd(-a, c));\n-        Assert.assertEquals(1, MathUtils.gcd(a, -c));\n-        Assert.assertEquals(1, MathUtils.gcd(-a, -c));\n-\n-        Assert.assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));\n-\n-        Assert.assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));\n-        Assert.assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));\n-        Assert.assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));\n-        try {\n-            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n-            MathUtils.gcd(Integer.MIN_VALUE, 0);\n-            Assert.fail(\"expecting MathArithmeticException\");\n-        } catch (MathArithmeticException expected) {\n-            // expected\n-        }\n-        try {\n-            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n-            MathUtils.gcd(0, Integer.MIN_VALUE);\n-            Assert.fail(\"expecting MathArithmeticException\");\n-        } catch (MathArithmeticException expected) {\n-            // expected\n-        }\n-        try {\n-            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n-            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n-            Assert.fail(\"expecting MathArithmeticException\");\n-        } catch (MathArithmeticException expected) {\n-            // expected\n-        }\n-    }\n-\n-    @Test\n-    public void  testGcdLong(){\n-        long a = 30;\n-        long b = 50;\n-        long c = 77;\n-\n-        Assert.assertEquals(0, MathUtils.gcd(0L, 0));\n-\n-        Assert.assertEquals(b, MathUtils.gcd(0, b));\n-        Assert.assertEquals(a, MathUtils.gcd(a, 0));\n-        Assert.assertEquals(b, MathUtils.gcd(0, -b));\n-        Assert.assertEquals(a, MathUtils.gcd(-a, 0));\n-\n-        Assert.assertEquals(10, MathUtils.gcd(a, b));\n-        Assert.assertEquals(10, MathUtils.gcd(-a, b));\n-        Assert.assertEquals(10, MathUtils.gcd(a, -b));\n-        Assert.assertEquals(10, MathUtils.gcd(-a, -b));\n-\n-        Assert.assertEquals(1, MathUtils.gcd(a, c));\n-        Assert.assertEquals(1, MathUtils.gcd(-a, c));\n-        Assert.assertEquals(1, MathUtils.gcd(a, -c));\n-        Assert.assertEquals(1, MathUtils.gcd(-a, -c));\n-\n-        Assert.assertEquals(3L * (1L<<45), MathUtils.gcd(3L * (1L<<50), 9L * (1L<<45)));\n-\n-        Assert.assertEquals(1L<<45, MathUtils.gcd(1L<<45, Long.MIN_VALUE));\n-\n-        Assert.assertEquals(Long.MAX_VALUE, MathUtils.gcd(Long.MAX_VALUE, 0L));\n-        Assert.assertEquals(Long.MAX_VALUE, MathUtils.gcd(-Long.MAX_VALUE, 0L));\n-        Assert.assertEquals(1, MathUtils.gcd(60247241209L, 153092023L));\n-        try {\n-            // gcd(Long.MIN_VALUE, 0) > Long.MAX_VALUE\n-            MathUtils.gcd(Long.MIN_VALUE, 0);\n-            Assert.fail(\"expecting MathArithmeticException\");\n-        } catch (MathArithmeticException expected) {\n-            // expected\n-        }\n-        try {\n-            // gcd(0, Long.MIN_VALUE) > Long.MAX_VALUE\n-            MathUtils.gcd(0, Long.MIN_VALUE);\n-            Assert.fail(\"expecting MathArithmeticException\");\n-        } catch (MathArithmeticException expected) {\n-            // expected\n-        }\n-        try {\n-            // gcd(Long.MIN_VALUE, Long.MIN_VALUE) > Long.MAX_VALUE\n-            MathUtils.gcd(Long.MIN_VALUE, Long.MIN_VALUE);\n-            Assert.fail(\"expecting MathArithmeticException\");\n-        } catch (MathArithmeticException expected) {\n-            // expected\n-        }\n-    }\n-\n-    @Test\n-    public void testGcdConsistency() {\n-        int[] primeList = {19, 23, 53, 67, 73, 79, 101, 103, 111, 131};\n-        ArrayList<Integer> primes = new ArrayList<Integer>();\n-        for (int i = 0; i < primeList.length; i++) {\n-            primes.add(Integer.valueOf(primeList[i]));\n-        }\n-        RandomDataImpl randomData = new RandomDataImpl();\n-        for (int i = 0; i < 20; i++) {\n-            Object[] sample = randomData.nextSample(primes, 4);\n-            int p1 = ((Integer) sample[0]).intValue();\n-            int p2 = ((Integer) sample[1]).intValue();\n-            int p3 = ((Integer) sample[2]).intValue();\n-            int p4 = ((Integer) sample[3]).intValue();\n-            int i1 = p1 * p2 * p3;\n-            int i2 = p1 * p2 * p4;\n-            int gcd = p1 * p2;\n-            Assert.assertEquals(gcd, MathUtils.gcd(i1, i2));\n-            long l1 = i1;\n-            long l2 = i2;\n-            Assert.assertEquals(gcd, MathUtils.gcd(l1, l2));\n-        }\n-    }\n-\n-    @Test\n     public void testHash() {\n         double[] testArray = {\n             Double.NaN,\n     }\n \n     @Test\n-    public void testSubAndCheck() {\n-        int big = Integer.MAX_VALUE;\n-        int bigNeg = Integer.MIN_VALUE;\n-        Assert.assertEquals(big, MathUtils.subAndCheck(big, 0));\n-        Assert.assertEquals(bigNeg + 1, MathUtils.subAndCheck(bigNeg, -1));\n-        Assert.assertEquals(-1, MathUtils.subAndCheck(bigNeg, -big));\n-        try {\n-            MathUtils.subAndCheck(big, -1);\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-        }\n-        try {\n-            MathUtils.subAndCheck(bigNeg, 1);\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-        }\n-    }\n-\n-    @Test\n-    public void testSubAndCheckErrorMessage() {\n-        int big = Integer.MAX_VALUE;\n-        try {\n-            MathUtils.subAndCheck(big, -1);\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-            Assert.assertTrue(ex.getMessage().length() > 1);\n-        }\n-    }\n-\n-    @Test\n-    public void testSubAndCheckLong() {\n-        long max = Long.MAX_VALUE;\n-        long min = Long.MIN_VALUE;\n-        Assert.assertEquals(max, MathUtils.subAndCheck(max, 0));\n-        Assert.assertEquals(min, MathUtils.subAndCheck(min, 0));\n-        Assert.assertEquals(-max, MathUtils.subAndCheck(0, max));\n-        Assert.assertEquals(min + 1, MathUtils.subAndCheck(min, -1));\n-        // min == -1-max\n-        Assert.assertEquals(-1, MathUtils.subAndCheck(-max - 1, -max));\n-        Assert.assertEquals(max, MathUtils.subAndCheck(-1, -1 - max));\n-        testSubAndCheckLongFailure(0L, min);\n-        testSubAndCheckLongFailure(max, -1L);\n-        testSubAndCheckLongFailure(min, 1L);\n-    }\n-\n-    private void testSubAndCheckLongFailure(long a, long b) {\n-        try {\n-            MathUtils.subAndCheck(a, b);\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-            // success\n-        }\n-\n-    }\n-\n-    @Test\n     public void testPow() {\n \n         Assert.assertEquals(1801088541, MathUtils.pow(21, 7));", "timestamp": 1318400482, "metainfo": ""}