{"sha": "cfe62b0ee011e2477275e6f615a2b99473ebd9f4", "log": "Removed workaround that ceased to be necessary.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n package org.apache.commons.math.analysis.interpolation;\n \n import org.apache.commons.math.DimensionMismatchException;\n-import org.apache.commons.math.exception.FunctionEvaluationException;\n import org.apache.commons.math.analysis.BivariateRealFunction;\n import org.apache.commons.math.exception.NoDataException;\n import org.apache.commons.math.exception.OutOfRangeException;\n         final double xN = (x - xval[i]) / (xval[i + 1] - xval[i]);\n         final double yN = (y - yval[j]) / (yval[j + 1] - yval[j]);\n \n-        double result = Double.NaN;\n-        try { // Workaround to avoid carrying around \"try\" blocks for an\n-              // exception that will never happen\n-            result = partialDerivatives[which][i][j].value(xN, yN);\n-        } catch (FunctionEvaluationException e) {\n-            // Will never happen\n-        }\n-\n-        return result;\n+        return partialDerivatives[which][i][j].value(xN, yN);\n     }\n \n     /**", "timestamp": 1289680461, "metainfo": ""}