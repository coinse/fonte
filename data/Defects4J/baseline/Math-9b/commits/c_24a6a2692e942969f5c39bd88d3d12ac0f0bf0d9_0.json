{"sha": "24a6a2692e942969f5c39bd88d3d12ac0f0bf0d9", "log": "Fixed a problem when setting some variables (several variables were set instead of only one) JIRA: MATH-272  ", "commit": "\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n \n import org.apache.commons.math.linear.MatrixUtils;\n import org.apache.commons.math.linear.RealMatrix;\n      */\n     protected RealPointValuePair getSolution() {\n         double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        double mostNegative = getDecisionVariableValue(getOriginalNumDecisionVariables());\n+        Integer basicRow =\n+            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n+        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+        Set<Integer> basicRows = new HashSet<Integer>();\n         for (int i = 0; i < coefficients.length; i++) {\n-            coefficients[i] =\n-                getDecisionVariableValue(i) - (restrictToNonNegative ? 0 : mostNegative); \n+            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n+            if (basicRows.contains(basicRow)) {\n+                // if multiple variables can take a given value \n+                // then we choose the first and set the rest equal to 0\n+                coefficients[i] = 0;\n+            } else {\n+                basicRows.add(basicRow);\n+                coefficients[i] =\n+                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n+                    (restrictToNonNegative ? 0 : mostNegative);\n+            }\n         }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }\n-\n-    /**\n-     * Get the value of the given decision variable.  This is not the actual\n-     * value as it is guaranteed to be >= 0 and thus must be corrected before\n-     * being returned to the user.\n-     * \n-     * @param decisionVariable The index of the decision variable\n-     * @return The value of the given decision variable.\n-     */\n-    protected double getDecisionVariableValue(final int decisionVariable) {\n-      int col = getNumObjectiveFunctions() + decisionVariable;  \n-      Integer basicRow = getBasicRow(col);\n-      if (basicRow == null) {\n-          return 0;\n-      }\n-      // if there are multiple variables that can take the value on the RHS\n-      // then we'll give the first variable that value\n-      for (int i = getNumObjectiveFunctions(); i < col; i++) {\n-          if (tableau.getEntry(basicRow, i) == 1) {\n-              return 0;\n-          }\n-      }\n-      return getEntry(basicRow, getRhsOffset()); \n-  }\n \n     /**\n      * Subtracts a multiple of one row from another.\n--- a/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n+++ b/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n \n package org.apache.commons.math.optimization.linear;\n \n+import static org.junit.Assert.assertEquals;\n+\n import java.util.ArrayList;\n import java.util.Collection;\n-\n-import junit.framework.TestCase;\n \n import org.apache.commons.math.linear.RealVector;\n import org.apache.commons.math.linear.RealVectorImpl;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.RealPointValuePair;\n-\n-public class SimplexSolverTest extends TestCase {\n-\n+import org.junit.Test;\n+\n+public class SimplexSolverTest {\n+\n+    @Test\n+    public void testMath272() throws OptimizationException {\n+        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n+        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n+        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n+        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n+        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n+\n+        SimplexSolver solver = new SimplexSolver();\n+        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n+        \n+        assertEquals(0.0, solution.getPoint()[0], .0000001);\n+        assertEquals(1.0, solution.getPoint()[1], .0000001);\n+        assertEquals(1.0, solution.getPoint()[2], .0000001);\n+        assertEquals(3.0, solution.getValue(), .0000001);\n+      }\n+\n+    @Test\n     public void testSimplexSolver() throws OptimizationException {\n         LinearObjectiveFunction f =\n             new LinearObjectiveFunction(new double[] { 15, 10 }, 7);\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n-        assertEquals(2.0, solution.getPoint()[0]);\n-        assertEquals(2.0, solution.getPoint()[1]);\n-        assertEquals(57.0, solution.getValue());\n+        assertEquals(2.0, solution.getPoint()[0], 0.0);\n+        assertEquals(2.0, solution.getPoint()[1], 0.0);\n+        assertEquals(57.0, solution.getValue(), 0.0);\n     }\n \n     /**\n      * With no artificial variables needed (no equals and no greater than\n      * constraints) we can go straight to Phase 2.\n      */\n+    @Test\n     public void testModelWithNoArtificialVars() throws OptimizationException {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n-        assertEquals(2.0, solution.getPoint()[0]);\n-        assertEquals(2.0, solution.getPoint()[1]);\n-        assertEquals(50.0, solution.getValue());\n-    }\n-\n+        assertEquals(2.0, solution.getPoint()[0], 0.0);\n+        assertEquals(2.0, solution.getPoint()[1], 0.0);\n+        assertEquals(50.0, solution.getValue(), 0.0);\n+    }\n+\n+    @Test\n     public void testMinimization() throws OptimizationException {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, -5);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);\n-        assertEquals(4.0, solution.getPoint()[0]);\n-        assertEquals(0.0, solution.getPoint()[1]);\n-        assertEquals(-13.0, solution.getValue());\n-    }\n-\n+        assertEquals(4.0, solution.getPoint()[0], 0.0);\n+        assertEquals(0.0, solution.getPoint()[1], 0.0);\n+        assertEquals(-13.0, solution.getValue(), 0.0);\n+    }\n+\n+    @Test\n     public void testSolutionWithNegativeDecisionVariable() throws OptimizationException {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n \n         SimplexSolver solver = new SimplexSolver();\n         RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n-        assertEquals(-2.0, solution.getPoint()[0]);\n-        assertEquals(8.0, solution.getPoint()[1]);\n-        assertEquals(12.0, solution.getValue());\n-    }\n-\n-    public void testInfeasibleSolution() {\n+        assertEquals(-2.0, solution.getPoint()[0], 0.0);\n+        assertEquals(8.0, solution.getPoint()[1], 0.0);\n+        assertEquals(12.0, solution.getValue(), 0.0);\n+    }\n+\n+    @Test(expected = NoFeasibleSolutionException.class)\n+    public void testInfeasibleSolution() throws OptimizationException {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 1));\n         constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.GEQ, 3));\n \n         SimplexSolver solver = new SimplexSolver();\n-        try {\n-            solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n-            fail(\"An exception should have been thrown.\");\n-        } catch (NoFeasibleSolutionException e) {\n-            // expected;\n-        } catch (OptimizationException e) {\n-            fail(\"wrong exception caught\");\n-        }\n-    }\n-\n-    public void testUnboundedSolution() {\n+        solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n+    }\n+\n+    @Test(expected = UnboundedSolutionException.class)\n+    public void testUnboundedSolution() throws OptimizationException {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.EQ, 2));\n \n         SimplexSolver solver = new SimplexSolver();\n-        try {\n-            solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n-            fail(\"An exception should have been thrown.\");\n-        } catch (UnboundedSolutionException e) {\n-            // expected;\n-        } catch (OptimizationException e) {\n-            fail(\"wrong exception caught\");\n-        }\n-    }\n-\n+        solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n+    }\n+\n+    @Test\n     public void testRestrictVariablesToNonNegative() throws OptimizationException {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 409, 523, 70, 204, 339 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         assertEquals(1438556.7491409, solution.getValue(), .0000001);\n     }\n \n+    @Test\n     public void testEpsilon() throws OptimizationException {\n       LinearObjectiveFunction f =\n           new LinearObjectiveFunction(new double[] { 10, 5, 1 }, 0);\n \n       SimplexSolver solver = new SimplexSolver();\n       RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n-      assertEquals(1.0, solution.getPoint()[0]);\n-      assertEquals(1.0, solution.getPoint()[1]);\n-      assertEquals(0.0, solution.getPoint()[2]);\n-      assertEquals(15.0, solution.getValue());\n+      assertEquals(1.0, solution.getPoint()[0], 0.0);\n+      assertEquals(1.0, solution.getPoint()[1], 0.0);\n+      assertEquals(0.0, solution.getPoint()[2], 0.0);\n+      assertEquals(15.0, solution.getValue(), 0.0);\n   }\n     \n+    @Test\n     public void testTrivialModel() throws OptimizationException {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 1 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         assertEquals(0, solution.getValue(), .0000001);\n     }\n \n+    @Test\n     public void testLargeModel() throws OptimizationException {\n         double[] objective = new double[] {\n                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "timestamp": 1243971450, "metainfo": ""}