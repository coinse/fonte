{"sha": "da16f1a6e4d9f7c73629554b4164b6e19af527c0", "log": "Added a way to specify a custom root solver to find events in ODE integration.  JIRA: MATH-586  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n \n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MaxEvaluationsExceededException;\n+import org.apache.commons.math.analysis.solvers.BrentSolver;\n+import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.ode.events.EventException;\n                                 final double maxCheckInterval,\n                                 final double convergence,\n                                 final int maxIterationCount) {\n-        eventsStates.add(new EventState(handler, maxCheckInterval, convergence, maxIterationCount));\n+        addEventHandler(handler, maxCheckInterval, convergence,\n+                        maxIterationCount, new BrentSolver(convergence));\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void addEventHandler(final EventHandler handler,\n+                                final double maxCheckInterval,\n+                                final double convergence,\n+                                final int maxIterationCount,\n+                                final UnivariateRealSolver solver) {\n+        eventsStates.add(new EventState(handler, maxCheckInterval, convergence,\n+                                        maxIterationCount, solver));\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/ode/ODEIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/ODEIntegrator.java\n \n import java.util.Collection;\n \n+import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;\n+import org.apache.commons.math.analysis.solvers.BrentSolver;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.sampling.StepHandler;\n \n      */\n     void clearStepHandlers();\n \n-    /** Add an event handler to the integrator.\n+    /** Add an event handler to the integrator. Uses a {@link BrentSolver}\n+     * with an absolute accuracy equal to the given convergence threshold,\n+     * as root-finding algorithm to detect the state events.\n      * @param handler event handler\n      * @param maxCheckInterval maximal time interval between switching\n      * function checks (this interval prevents missing sign changes in\n      */\n     void addEventHandler(EventHandler handler, double maxCheckInterval,\n                          double convergence, int maxIterationCount);\n+\n+    /** Add an event handler to the integrator.\n+     * @param handler event handler\n+     * @param maxCheckInterval maximal time interval between switching\n+     * function checks (this interval prevents missing sign changes in\n+     * case the integration steps becomes very large)\n+     * @param convergence convergence threshold in the event time search\n+     * @param maxIterationCount upper limit of the iteration count in\n+     * the event time search\n+     * @param solver The root-finding algorithm to use to detect the state\n+     * events.\n+     * @see #getEventHandlers()\n+     * @see #clearEventHandlers()\n+     */\n+    void addEventHandler(EventHandler handler, double maxCheckInterval,\n+                         double convergence, int maxIterationCount,\n+                         UnivariateRealSolver solver);\n \n     /** Get all the event handlers that have been added to the integrator.\n      * @return an unmodifiable collection of the added events handlers\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n \n import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.analysis.solvers.BrentSolver;\n+import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;\n import org.apache.commons.math.exception.MathInternalError;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n     /** Next action indicator. */\n     private int nextAction;\n \n+    /** Root-finding algorithm to use to detect state events. */\n+    private final UnivariateRealSolver solver;\n+\n     /** Simple constructor.\n      * @param handler event handler\n      * @param maxCheckInterval maximal time interval between switching\n      * @param convergence convergence threshold in the event time search\n      * @param maxIterationCount upper limit of the iteration count in\n      * the event time search\n+     * @param solver Root-finding algorithm to use to detect state events\n      */\n     public EventState(final EventHandler handler, final double maxCheckInterval,\n-                      final double convergence, final int maxIterationCount) {\n+                      final double convergence, final int maxIterationCount,\n+                      final UnivariateRealSolver solver) {\n         this.handler           = handler;\n         this.maxCheckInterval  = maxCheckInterval;\n         this.convergence       = FastMath.abs(convergence);\n         this.maxIterationCount = maxIterationCount;\n+        this.solver            = solver;\n \n         // some dummy values ...\n         t0                = Double.NaN;\n                             }\n                         }\n                     };\n-                    final BrentSolver solver = new BrentSolver(convergence);\n \n                     if (ga * gb >= 0) {\n                         // this is a corner case:\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n+import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.IntegratorException;\n   public void addEventHandler(final EventHandler function,\n                               final double maxCheckInterval,\n                               final double convergence,\n-                              final int maxIterationCount) {\n-    super.addEventHandler(function, maxCheckInterval, convergence, maxIterationCount);\n+                              final int maxIterationCount,\n+                              final UnivariateRealSolver solver) {\n+    super.addEventHandler(function, maxCheckInterval, convergence,\n+                          maxIterationCount, solver);\n \n     // reinitialize the arrays\n     initializeArrays();\n--- a/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java\n \n \n import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.analysis.solvers.BrentSolver;\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.DummyStepInterpolator;\n         };\n \n         final double tolerance = 0.1;\n-        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n+        EventState es = new EventState(closeEventsGenerator, 1.5 * gap,\n+                                       tolerance, 10,\n+                                       new BrentSolver(tolerance));\n \n         AbstractStepInterpolator interpolator =\n             new DummyStepInterpolator(new double[0], new double[0], true);", "timestamp": 1308074756, "metainfo": ""}