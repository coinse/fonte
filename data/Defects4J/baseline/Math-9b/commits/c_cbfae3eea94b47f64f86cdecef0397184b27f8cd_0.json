{"sha": "cbfae3eea94b47f64f86cdecef0397184b27f8cd", "log": "Fixed misleading javadoc, the user supplied min and max step size are internally forced to positive and integration direction is handled later on. Asking for a positive step size was superfluous.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n     /**\n      * Build an Adams-Bashforth integrator with the given order and step control parameters.\n      * @param nSteps number of steps of the method excluding the one being computed\n-     * @param minStep minimal step (must be positive even for backward\n-     * integration), the last step can be smaller than this\n-     * @param maxStep maximal step (must be positive even for backward\n-     * integration)\n+     * @param minStep minimal step (sign is irrelevant, regardless of\n+     * integration direction, forward or backward), the last step can\n+     * be smaller than this\n+     * @param maxStep maximal step (sign is irrelevant, regardless of\n+     * integration direction, forward or backward), the last step can\n+     * be smaller than this\n      * @param scalAbsoluteTolerance allowed absolute error\n      * @param scalRelativeTolerance allowed relative error\n      * @exception IllegalArgumentException if order is 1 or less\n     /**\n      * Build an Adams-Bashforth integrator with the given order and step control parameters.\n      * @param nSteps number of steps of the method excluding the one being computed\n-     * @param minStep minimal step (must be positive even for backward\n-     * integration), the last step can be smaller than this\n-     * @param maxStep maximal step (must be positive even for backward\n-     * integration)\n+     * @param minStep minimal step (sign is irrelevant, regardless of\n+     * integration direction, forward or backward), the last step can\n+     * be smaller than this\n+     * @param maxStep maximal step (sign is irrelevant, regardless of\n+     * integration direction, forward or backward), the last step can\n+     * be smaller than this\n      * @param vecAbsoluteTolerance allowed absolute error\n      * @param vecRelativeTolerance allowed relative error\n      * @exception IllegalArgumentException if order is 1 or less\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java\n      * @param name name of the method\n      * @param nSteps number of steps of the method excluding the one being computed\n      * @param order order of the method\n-     * @param minStep minimal step (must be positive even for backward\n-     * integration), the last step can be smaller than this\n-     * @param maxStep maximal step (must be positive even for backward\n-     * integration)\n+     * @param minStep minimal step (sign is irrelevant, regardless of\n+     * integration direction, forward or backward), the last step can\n+     * be smaller than this\n+     * @param maxStep maximal step (sign is irrelevant, regardless of\n+     * integration direction, forward or backward), the last step can\n+     * be smaller than this\n      * @param scalAbsoluteTolerance allowed absolute error\n      * @param scalRelativeTolerance allowed relative error\n      * @exception IllegalArgumentException if order is 1 or less\n      * @param name name of the method\n      * @param nSteps number of steps of the method excluding the one being computed\n      * @param order order of the method\n-     * @param minStep minimal step (must be positive even for backward\n-     * integration), the last step can be smaller than this\n-     * @param maxStep maximal step (must be positive even for backward\n-     * integration)\n+     * @param minStep minimal step (sign is irrelevant, regardless of\n+     * integration direction, forward or backward), the last step can\n+     * be smaller than this\n+     * @param maxStep maximal step (sign is irrelevant, regardless of\n+     * integration direction, forward or backward), the last step can\n+     * be smaller than this\n      * @param vecAbsoluteTolerance allowed absolute error\n      * @param vecRelativeTolerance allowed relative error\n      * @exception IllegalArgumentException if order is 1 or less\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n     /**\n      * Build an Adams-Moulton integrator with the given order and error control parameters.\n      * @param nSteps number of steps of the method excluding the one being computed\n-     * @param minStep minimal step (must be positive even for backward\n-     * integration), the last step can be smaller than this\n-     * @param maxStep maximal step (must be positive even for backward\n-     * integration)\n+     * @param minStep minimal step (sign is irrelevant, regardless of\n+     * integration direction, forward or backward), the last step can\n+     * be smaller than this\n+     * @param maxStep maximal step (sign is irrelevant, regardless of\n+     * integration direction, forward or backward), the last step can\n+     * be smaller than this\n      * @param scalAbsoluteTolerance allowed absolute error\n      * @param scalRelativeTolerance allowed relative error\n      * @exception IllegalArgumentException if order is 1 or less\n     /**\n      * Build an Adams-Moulton integrator with the given order and error control parameters.\n      * @param nSteps number of steps of the method excluding the one being computed\n-     * @param minStep minimal step (must be positive even for backward\n-     * integration), the last step can be smaller than this\n-     * @param maxStep maximal step (must be positive even for backward\n-     * integration)\n+     * @param minStep minimal step (sign is irrelevant, regardless of\n+     * integration direction, forward or backward), the last step can\n+     * be smaller than this\n+     * @param maxStep maximal step (sign is irrelevant, regardless of\n+     * integration direction, forward or backward), the last step can\n+     * be smaller than this\n      * @param vecAbsoluteTolerance allowed absolute error\n      * @param vecRelativeTolerance allowed relative error\n      * @exception IllegalArgumentException if order is 1 or less\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n   /** Build an integrator with the given stepsize bounds.\n    * The default step handler does nothing.\n    * @param name name of the method\n-   * @param minStep minimal step (must be positive even for backward\n-   * integration), the last step can be smaller than this\n-   * @param maxStep maximal step (must be positive even for backward\n-   * integration)\n+   * @param minStep minimal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n+   * @param maxStep maximal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n    * @param scalAbsoluteTolerance allowed absolute error\n    * @param scalRelativeTolerance allowed relative error\n    */\n   /** Build an integrator with the given stepsize bounds.\n    * The default step handler does nothing.\n    * @param name name of the method\n-   * @param minStep minimal step (must be positive even for backward\n-   * integration), the last step can be smaller than this\n-   * @param maxStep maximal step (must be positive even for backward\n-   * integration)\n+   * @param minStep minimal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n+   * @param maxStep maximal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n    * @param vecAbsoluteTolerance allowed absolute error\n    * @param vecRelativeTolerance allowed relative error\n    */\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java\n \n   /** Simple constructor.\n    * Build a fifth order Dormand-Prince integrator with the given step bounds\n-   * @param minStep minimal step (must be positive even for backward\n-   * integration), the last step can be smaller than this\n-   * @param maxStep maximal step (must be positive even for backward\n-   * integration)\n+   * @param minStep minimal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n+   * @param maxStep maximal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n    * @param scalAbsoluteTolerance allowed absolute error\n    * @param scalRelativeTolerance allowed relative error\n    */\n \n   /** Simple constructor.\n    * Build a fifth order Dormand-Prince integrator with the given step bounds\n-   * @param minStep minimal step (must be positive even for backward\n-   * integration), the last step can be smaller than this\n-   * @param maxStep maximal step (must be positive even for backward\n-   * integration)\n+   * @param minStep minimal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n+   * @param maxStep maximal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n    * @param vecAbsoluteTolerance allowed absolute error\n    * @param vecRelativeTolerance allowed relative error\n    */\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java\n \n   /** Simple constructor.\n    * Build an eighth order Dormand-Prince integrator with the given step bounds\n-   * @param minStep minimal step (must be positive even for backward\n-   * integration), the last step can be smaller than this\n-   * @param maxStep maximal step (must be positive even for backward\n-   * integration)\n+   * @param minStep minimal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n+   * @param maxStep maximal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n    * @param scalAbsoluteTolerance allowed absolute error\n    * @param scalRelativeTolerance allowed relative error\n    */\n \n   /** Simple constructor.\n    * Build an eighth order Dormand-Prince integrator with the given step bounds\n-   * @param minStep minimal step (must be positive even for backward\n-   * integration), the last step can be smaller than this\n-   * @param maxStep maximal step (must be positive even for backward\n-   * integration)\n+   * @param minStep minimal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n+   * @param maxStep maximal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n    * @param vecAbsoluteTolerance allowed absolute error\n    * @param vecRelativeTolerance allowed relative error\n    */\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n    * @param a internal weights from Butcher array (without the first empty row)\n    * @param b propagation weights for the high order method from Butcher array\n    * @param prototype prototype of the step interpolator to use\n-   * @param minStep minimal step (must be positive even for backward\n-   * integration), the last step can be smaller than this\n-   * @param maxStep maximal step (must be positive even for backward\n-   * integration)\n+   * @param minStep minimal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n+   * @param maxStep maximal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n    * @param scalAbsoluteTolerance allowed absolute error\n    * @param scalRelativeTolerance allowed relative error\n    */\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n    * Build a Gragg-Bulirsch-Stoer integrator with the given step\n    * bounds. All tuning parameters are set to their default\n    * values. The default step handler does nothing.\n-   * @param minStep minimal step (must be positive even for backward\n-   * integration), the last step can be smaller than this\n-   * @param maxStep maximal step (must be positive even for backward\n-   * integration)\n+   * @param minStep minimal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n+   * @param maxStep maximal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n    * @param scalAbsoluteTolerance allowed absolute error\n    * @param scalRelativeTolerance allowed relative error\n    */\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java\n \n   /** Simple constructor.\n    * Build a fifth order Higham and Hall integrator with the given step bounds\n-   * @param minStep minimal step (must be positive even for backward\n-   * integration), the last step can be smaller than this\n-   * @param maxStep maximal step (must be positive even for backward\n-   * integration)\n+   * @param minStep minimal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n+   * @param maxStep maximal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n    * @param scalAbsoluteTolerance allowed absolute error\n    * @param scalRelativeTolerance allowed relative error\n    */\n \n   /** Simple constructor.\n    * Build a fifth order Higham and Hall integrator with the given step bounds\n-   * @param minStep minimal step (must be positive even for backward\n-   * integration), the last step can be smaller than this\n-   * @param maxStep maximal step (must be positive even for backward\n-   * integration)\n+   * @param minStep minimal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n+   * @param maxStep maximal step (sign is irrelevant, regardless of\n+   * integration direction, forward or backward), the last step can\n+   * be smaller than this\n    * @param vecAbsoluteTolerance allowed absolute error\n    * @param vecRelativeTolerance allowed relative error\n    */", "timestamp": 1303723410, "metainfo": ""}