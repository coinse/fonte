{"sha": "6c65646a2d62b8ead3a7d4da3410fc4050c25fb5", "log": "added a threshold for comparisons in Simplex solver Jira: MATH-246  ", "commit": "\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n     private static final long serialVersionUID = -4886937648715323786L;\n \n     /** Default amount of error to accept in floating point comparisons. */ \n-    private static final double DEFAULT_EPSILON = 1.0e-10;\n+    private static final double DEFAULT_EPSILON = 1.0e-6;\n \n     /** Amount of error to accept in floating point comparisons. */ \n     protected final double epsilon;  \n         double minValue = 0;\n         Integer minPos = null;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n-            if (tableau.getEntry(0, i) < minValue) {\n+            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\n                 minValue = tableau.getEntry(0, i);\n                 minPos = i;\n             }\n         Integer minRatioPos = null;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n-            if (tableau.getEntry(i, col) >= 0) {\n+            if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {\n                 double ratio = rhs / tableau.getEntry(i, col);\n                 if (ratio < minRatio) {\n                     minRatio = ratio;\n             return true;\n         }\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n-            if (tableau.getEntry(0, i) < 0) {\n+            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\n                 return false;\n             }\n         }\n             return false;\n         }\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n-            if (tableau.getEntry(0, i) < 0) {\n+            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {\n                 return false;\n             }\n         }\n     public RealPointValuePair doOptimize()\n         throws OptimizationException {\n         final SimplexTableau tableau =\n-            new SimplexTableau(f, constraints, goalType, restrictToNonNegative);\n+            new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);\n         solvePhase1(tableau);\n         tableau.discardArtificialVariables();\n         while (!isOptimal(tableau)) {\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n import org.apache.commons.math.linear.RealVector;\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.RealPointValuePair;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * A tableau for use in the Simplex method.\n     /** Number of artificial variables. */\n     protected int numArtificialVariables;\n \n+    /** Amount of error to accept in floating point comparisons. */ \n+    protected final double epsilon;\n+    \n     /**\n      * Build a tableau for a linear problem.\n      * @param f linear objective function\n      * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}\n      * or {@link GoalType#MINIMIZE}\n      * @param restrictToNonNegative whether to restrict the variables to non-negative values\n+     * @param epsilon amount of error to accept in floating point comparisons\n      */\n     SimplexTableau(final LinearObjectiveFunction f,\n                    final Collection<LinearConstraint> constraints,\n-                   final GoalType goalType, final boolean restrictToNonNegative) {\n+                   final GoalType goalType, final boolean restrictToNonNegative,\n+                   final double epsilon) {\n         this.f                      = f;\n         this.constraints            = constraints;\n         this.restrictToNonNegative  = restrictToNonNegative;\n+        this.epsilon                = epsilon;\n         this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);\n         this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                       getConstraintTypeCounts(Relationship.GEQ);\n     private Integer getBasicRow(final int col) {\n         Integer row = null;\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (getEntry(i, col) != 0.0) {\n+            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                 if (row == null) {\n                     row = i;\n                 } else {\n--- a/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n+++ b/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java\n public class SimplexSolverTest extends TestCase {\n \n     public void testSimplexSolver() throws OptimizationException {\n-\n         LinearObjectiveFunction f =\n             new LinearObjectiveFunction(new double[] { 15, 10 }, 7);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n         assertEquals(1438556.7491409, solution.getValue(), .0000001);\n     }\n \n+    public void testEpsilon() throws OptimizationException {\n+      LinearObjectiveFunction f =\n+          new LinearObjectiveFunction(new double[] { 10, 5, 1 }, 0);\n+      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n+      constraints.add(new LinearConstraint(new double[] {  9, 8, 0 }, Relationship.EQ,  17));\n+      constraints.add(new LinearConstraint(new double[] {  0, 7, 8 }, Relationship.LEQ,  7));\n+      constraints.add(new LinearConstraint(new double[] { 10, 0, 2 }, Relationship.LEQ, 10));\n+\n+      SimplexSolver solver = new SimplexSolver();\n+      RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n+      assertEquals(1.0, solution.getPoint()[0]);\n+      assertEquals(1.0, solution.getPoint()[1]);\n+      assertEquals(0.0, solution.getPoint()[2]);\n+      assertEquals(15.0, solution.getValue());\n+  }\n+    \n     public void testTrivialModel() throws OptimizationException {\n         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 1 }, 0);\n         Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n--- a/src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java\n+++ b/src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java\n         LinearObjectiveFunction f = createFunction();\n         Collection<LinearConstraint> constraints = createConstraints();\n         SimplexTableau tableau =\n-            new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false);\n+            new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false, 1.0e-6);\n         double[][] expectedInitialTableau = {\n                                              {-1, 0,  -1,  -1,  2, 0, 0, 0, -4},\n                                              { 0, 1, -15, -10, 25, 0, 0, 0,  0},\n         LinearObjectiveFunction f = createFunction();\n         Collection<LinearConstraint> constraints = createConstraints();\n         SimplexTableau tableau =\n-            new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false);\n+            new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false, 1.0e-6);\n         double[][] expectedTableau = {\n                                       { 1, -15, -10, 25, 0, 0, 0},\n                                       { 0,   1,   0, -1, 1, 0, 2},\n         constraints.add(new LinearConstraint(new double[] {0, 1}, Relationship.LEQ, 3));\n         constraints.add(new LinearConstraint(new double[] {1, 1}, Relationship.LEQ, 4));    \n         SimplexTableau tableau =\n-            new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false);\n+            new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false, 1.0e-6);\n         double[][] initialTableau = {\n                                      {1, -15, -10, 25, 0, 0, 0, 0},\n                                      {0,   1,   0, -1, 1, 0, 0, 2},", "timestamp": 1239226907, "metainfo": ""}