{"sha": "8e34009d559e963a3b00cdddab9314aa57bae91c", "log": "improved test coverage  ", "commit": "\n--- a/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java\n+++ b/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java\n \n   }\n \n+  public void testMaxIterations() {\n+      Circle circle = new Circle(98.680, 47.345);\n+      circle.addPoint( 30.0,  68.0);\n+      circle.addPoint( 50.0,  -6.0);\n+      circle.addPoint(110.0, -20.0);\n+      circle.addPoint( 35.0,  15.0);\n+      circle.addPoint( 45.0,  97.0);\n+      try {\n+        GaussNewtonEstimator estimator = new GaussNewtonEstimator(4, 1.0e-14, 1.0e-14);\n+        estimator.estimate(circle);\n+        fail(\"an exception should have been caught\");\n+      } catch (EstimationException ee) {\n+        // expected behavior\n+      } catch (Exception e) {\n+        fail(\"wrong exception type caught\");\n+      }\n+    }\n+\n   public void testCircleFitting() throws EstimationException {\n-    Circle circle = new Circle(98.680, 47.345);\n-    circle.addPoint( 30.0,  68.0);\n-    circle.addPoint( 50.0,  -6.0);\n-    circle.addPoint(110.0, -20.0);\n-    circle.addPoint( 35.0,  15.0);\n-    circle.addPoint( 45.0,  97.0);\n-    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-10, 1.0e-10);\n-    estimator.estimate(circle);\n-    double rms = estimator.getRMS(circle);\n-    assertEquals(1.768262623567235,  Math.sqrt(circle.getM()) * rms,  1.0e-10);\n-    assertEquals(69.96016176931406, circle.getRadius(), 1.0e-10);\n-    assertEquals(96.07590211815305, circle.getX(),      1.0e-10);\n-    assertEquals(48.13516790438953, circle.getY(),      1.0e-10);\n-  }\n+      Circle circle = new Circle(98.680, 47.345);\n+      circle.addPoint( 30.0,  68.0);\n+      circle.addPoint( 50.0,  -6.0);\n+      circle.addPoint(110.0, -20.0);\n+      circle.addPoint( 35.0,  15.0);\n+      circle.addPoint( 45.0,  97.0);\n+      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-10, 1.0e-10);\n+      estimator.estimate(circle);\n+      double rms = estimator.getRMS(circle);\n+      assertEquals(1.768262623567235,  Math.sqrt(circle.getM()) * rms,  1.0e-10);\n+      assertEquals(69.96016176931406, circle.getRadius(), 1.0e-10);\n+      assertEquals(96.07590211815305, circle.getX(),      1.0e-10);\n+      assertEquals(48.13516790438953, circle.getY(),      1.0e-10);\n+    }\n \n   public void testCircleFittingBadInit() throws EstimationException {\n     Circle circle = new Circle(-12, -12);\n--- a/src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java\n+++ b/src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java\n \n   }\n \n+  public void testControlParameters() throws EstimationException {\n+      Circle circle = new Circle(98.680, 47.345);\n+      circle.addPoint( 30.0,  68.0);\n+      circle.addPoint( 50.0,  -6.0);\n+      circle.addPoint(110.0, -20.0);\n+      circle.addPoint( 35.0,  15.0);\n+      circle.addPoint( 45.0,  97.0);\n+      checkEstimate(circle, 100.0, 1000, 1.0e-10, 1.0e-10, 1.0e-10, false);\n+      checkEstimate(circle, 1.0e-12, 10, 1.0e-20, 1.0e-20, 1.0e-20, true);\n+  }\n+\n+  private void checkEstimate(EstimationProblem problem,\n+                             double initialStepBoundFactor, int maxCostEval,\n+                             double costRelativeTolerance, double parRelativeTolerance,\n+                             double orthoTolerance, boolean shouldFail) {\n+      try {\n+        LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();\n+        estimator.setInitialStepBoundFactor(initialStepBoundFactor);\n+        estimator.setMaxCostEval(maxCostEval);\n+        estimator.setCostRelativeTolerance(costRelativeTolerance);\n+        estimator.setParRelativeTolerance(parRelativeTolerance);\n+        estimator.setOrthoTolerance(orthoTolerance);\n+        estimator.estimate(problem);\n+        assertTrue(! shouldFail);\n+      } catch (EstimationException ee) {\n+          System.out.println(ee.getClass().getName() + \" \" + ee.getMessage());\n+        assertTrue(shouldFail);\n+      } catch (Exception e) {\n+        fail(\"wrong exception type caught\");\n+      }\n+    }\n+\n   public void testCircleFitting() throws EstimationException {\n-    Circle circle = new Circle(98.680, 47.345);\n-    circle.addPoint( 30.0,  68.0);\n-    circle.addPoint( 50.0,  -6.0);\n-    circle.addPoint(110.0, -20.0);\n-    circle.addPoint( 35.0,  15.0);\n-    circle.addPoint( 45.0,  97.0);\n-    LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();\n-    estimator.estimate(circle);\n-    assertTrue(estimator.getCostEvaluations() < 10);\n-    assertTrue(estimator.getJacobianEvaluations() < 10);\n-    double rms = estimator.getRMS(circle);\n-    assertEquals(1.768262623567235,  Math.sqrt(circle.getM()) * rms,  1.0e-10);\n-    assertEquals(69.96016176931406, circle.getRadius(), 1.0e-10);\n-    assertEquals(96.07590211815305, circle.getX(),      1.0e-10);\n-    assertEquals(48.13516790438953, circle.getY(),      1.0e-10);\n-  }\n+      Circle circle = new Circle(98.680, 47.345);\n+      circle.addPoint( 30.0,  68.0);\n+      circle.addPoint( 50.0,  -6.0);\n+      circle.addPoint(110.0, -20.0);\n+      circle.addPoint( 35.0,  15.0);\n+      circle.addPoint( 45.0,  97.0);\n+      LevenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();\n+      estimator.estimate(circle);\n+      assertTrue(estimator.getCostEvaluations() < 10);\n+      assertTrue(estimator.getJacobianEvaluations() < 10);\n+      double rms = estimator.getRMS(circle);\n+      assertEquals(1.768262623567235,  Math.sqrt(circle.getM()) * rms,  1.0e-10);\n+      assertEquals(69.96016176931406, circle.getRadius(), 1.0e-10);\n+      assertEquals(96.07590211815305, circle.getX(),      1.0e-10);\n+      assertEquals(48.13516790438953, circle.getY(),      1.0e-10);\n+    }\n \n   public void testCircleFittingBadInit() throws EstimationException {\n     Circle circle = new Circle(-12, -12);", "timestamp": 1194282689, "metainfo": ""}