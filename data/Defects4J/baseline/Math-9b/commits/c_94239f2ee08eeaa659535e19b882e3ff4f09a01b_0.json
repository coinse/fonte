{"sha": "94239f2ee08eeaa659535e19b882e3ff4f09a01b", "log": "MATH-799 Deprecated default values for thresholds, and constructors that use them. Scheduled for removal in CM 4.0.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/AbstractConvergenceChecker.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/AbstractConvergenceChecker.java\n     implements ConvergenceChecker<PAIR> {\n     /**\n      * Default relative threshold.\n+     * @deprecated in 3.1 (to be removed in 4.0) because this value is too small\n+     * to be useful as a default (cf. MATH-798).\n      */\n     private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * Precision.EPSILON;\n     /**\n      * Default absolute threshold.\n+     * @deprecated in 3.1 (to be removed in 4.0) because this value is too small\n+     * to be useful as a default (cf. MATH-798).\n      */\n     private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * Precision.SAFE_MIN;\n     /**\n \n     /**\n      * Build an instance with default thresholds.\n+     * @deprecated in 3.1 (to be removed in 4.0). Convergence thresholds are\n+     * problem-dependent. As this class is intended for users who want to set\n+     * their own convergence criterion instead of relying on an algorithm's\n+     * default procedure, they should also set the thresholds appropriately\n+     * (cf. MATH-798).\n      */\n+    @Deprecated\n     public AbstractConvergenceChecker() {\n         this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;\n         this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;\n--- a/src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java\n     extends AbstractConvergenceChecker<PAIR> {\n     /**\n      * Build an instance with default threshold.\n+     * @deprecated See {@link AbstractConvergenceChecker#AbstractConvergenceChecker()}\n      */\n+    @Deprecated\n     public SimplePointChecker() {}\n \n     /**\n--- a/src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java\n     extends AbstractConvergenceChecker<PointValuePair> {\n     /**\n      * Build an instance with default thresholds.\n+     * @deprecated See {@link AbstractConvergenceChecker#AbstractConvergenceChecker()}\n      */\n+    @Deprecated\n     public SimpleValueChecker() {}\n \n     /** Build an instance with specified thresholds.\n--- a/src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java\n     extends AbstractConvergenceChecker<PointVectorValuePair> {\n     /**\n      * Build an instance with default thresholds.\n+     * @deprecated See {@link AbstractConvergenceChecker#AbstractConvergenceChecker()}\n      */\n+    @Deprecated\n     public SimpleVectorValueChecker() {}\n \n     /**\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java\n     public BOBYQAOptimizer(int numberOfInterpolationPoints,\n                            double initialTrustRegionRadius,\n                            double stoppingTrustRegionRadius) {\n+        super(null); // No custom convergence criterion.\n         this.numberOfInterpolationPoints = numberOfInterpolationPoints;\n         this.initialTrustRegionRadius = initialTrustRegionRadius;\n         this.stoppingTrustRegionRadius = stoppingTrustRegionRadius;\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java\n \n     /**\n      * Simple constructor with default settings.\n-     * The convergence check is set to a {@link SimpleValueChecker} and\n-     * the allowed number of evaluations is set to {@link Integer#MAX_VALUE}.\n+     * The convergence check is set to a {@link SimpleValueChecker}.\n+     * @deprecated See {@link SimpleValueChecker#SimpleValueChecker()}\n      */\n+    @Deprecated\n     protected BaseAbstractMultivariateOptimizer() {\n         this(new SimpleValueChecker());\n     }\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java\n     /**\n      * Simple constructor with default settings.\n      * The convergence checker is set to a\n-     * {@link org.apache.commons.math3.optimization.SimpleValueChecker} and\n-     * the allowed number of evaluations is set to {@link Integer#MAX_VALUE}.\n+     * {@link org.apache.commons.math3.optimization.SimpleValueChecker}.\n      *\n      * @see BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer()\n+     * @deprecated See {@link org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()}\n      */\n+    @Deprecated\n     protected BaseAbstractMultivariateSimpleBoundsOptimizer() {}\n \n     /**\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java\n \n     /**\n      * Simple constructor with default settings.\n-     * The convergence check is set to a {@link SimpleVectorValueChecker} and\n-     * the allowed number of evaluations is set to {@link Integer#MAX_VALUE}.\n+     * The convergence check is set to a {@link SimpleVectorValueChecker}.\n+     * @deprecated See {@link SimpleVectorValueChecker#SimpleVectorValueChecker()}\n      */\n+    @Deprecated\n     protected BaseAbstractMultivariateVectorOptimizer() {\n         this(new SimpleVectorValueChecker());\n     }\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n      * generated in case they are out of bounds.\n      * @param random Random generator.\n      * @param generateStatistics Whether statistic data is collected.\n-     */\n+     * @deprecated See {@link SimpleValueChecker#SimpleValueChecker()}\n+     */\n+    @Deprecated\n     public CMAESOptimizer(int lambda, double[] inputSigma,\n                           int maxIterations, double stopFitness,\n                           boolean isActiveCMA, int diagonalOnly, int checkFeasableCount,\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/SimplexOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/SimplexOptimizer.java\n     /**\n      * Constructor using a default {@link SimpleValueChecker convergence\n      * checker}.\n+     * @deprecated See {@link SimpleValueChecker#SimpleValueChecker()}\n      */\n+    @Deprecated\n     public SimplexOptimizer() {\n         this(new SimpleValueChecker());\n     }\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n      * Simple constructor with default settings.\n      * The convergence check is set to a {@link\n      * org.apache.commons.math3.optimization.SimpleVectorValueChecker}.\n-     */\n+     * @deprecated See {@link org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()}\n+     */\n+    @Deprecated\n     protected AbstractLeastSquaresOptimizer() {}\n+\n     /**\n      * @param checker Convergence checker.\n      */\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java\n      * The convergence check is set to a\n      * {@link org.apache.commons.math3.optimization.SimpleValueChecker\n      * SimpleValueChecker}.\n+     * @deprecated See {@link org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()}\n      */\n+    @Deprecated\n     protected AbstractScalarDifferentiableOptimizer() {}\n+\n     /**\n      * @param checker Convergence checker.\n      */\n--- a/src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java\n      * The normal equations will be solved using LU decomposition and the\n      * convergence check is set to a {@link SimpleVectorValueChecker}\n      * with default tolerances.\n+     * @deprecated See {@link SimpleVectorValueChecker#SimpleVectorValueChecker()}\n      */\n+    @Deprecated\n     public GaussNewtonOptimizer() {\n         this(true);\n     }\n      * @param useLU If {@code true}, the normal equations will be solved\n      * using LU decomposition, otherwise they will be solved using QR\n      * decomposition.\n+     * @deprecated See {@link SimpleVectorValueChecker#SimpleVectorValueChecker()}\n      */\n+    @Deprecated\n     public GaussNewtonOptimizer(final boolean useLU) {\n         this(useLU, new SimpleVectorValueChecker());\n     }\n--- a/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java\n                                        double parRelativeTolerance,\n                                        double orthoTolerance,\n                                        double threshold) {\n+        super(null); // No custom convergence criterion.\n         this.initialStepBoundFactor = initialStepBoundFactor;\n         this.costRelativeTolerance = costRelativeTolerance;\n         this.parRelativeTolerance = parRelativeTolerance;\n--- a/src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java\n      * @param updateFormula formula to use for updating the &beta; parameter,\n      * must be one of {@link ConjugateGradientFormula#FLETCHER_REEVES} or {@link\n      * ConjugateGradientFormula#POLAK_RIBIERE}.\n-     */\n+     * @deprecated See {@link SimpleValueChecker#SimpleValueChecker()}\n+     */\n+    @Deprecated\n     public NonLinearConjugateGradientOptimizer(final ConjugateGradientFormula updateFormula) {\n         this(updateFormula,\n              new SimpleValueChecker());\n--- a/src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java\n     extends AbstractConvergenceChecker<UnivariatePointValuePair> {\n     /**\n      * Build an instance with default thresholds.\n+     * @deprecated See {@link AbstractConvergenceChecker#AbstractConvergenceChecker()}\n      */\n+    @Deprecated\n     public SimpleUnivariateValueChecker() {}\n \n     /** Build an instance with specified thresholds.\n--- a/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.java\n     public void testMath283() {\n         // fails because MultiDirectional.iterateSimplex is looping forever\n         // the while(true) should be replaced with a convergence check\n-        SimplexOptimizer optimizer = new SimplexOptimizer();\n+        SimplexOptimizer optimizer = new SimplexOptimizer(1e-14, 1e-14);\n         optimizer.setSimplex(new MultiDirectionalSimplex(2));\n         final Gaussian2D function = new Gaussian2D(0, 0, 1);\n         PointValuePair estimate = optimizer.optimize(1000, function,\n--- a/src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java\n public class AbstractLeastSquaresOptimizerTest {\n \n     public static AbstractLeastSquaresOptimizer createOptimizer() {\n-        return new AbstractLeastSquaresOptimizer() {\n+        return new AbstractLeastSquaresOptimizer(null) {\n \n             @Override\n             protected PointVectorValuePair doOptimize() {\n--- a/src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java\n  * Used for computing the covariance matrix.\n  */\n class DummyOptimizer extends AbstractLeastSquaresOptimizer {\n+    public DummyOptimizer() {\n+        super(null);\n+    }\n+\n     /**\n      * This method does nothing and returns a dummy value.\n      */", "timestamp": 1338765883, "metainfo": ""}