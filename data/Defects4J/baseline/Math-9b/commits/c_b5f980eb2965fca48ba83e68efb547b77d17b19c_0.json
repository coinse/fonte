{"sha": "b5f980eb2965fca48ba83e68efb547b77d17b19c", "log": "Initial commit of MatrixUtils, including RealMatrix factory methods.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/linear/MatrixUtils.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.linear;\n+\n+/**\n+ * A collection of static methods that operate on or return matrices.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/10/12 06:27:44 $\n+ */\n+public class MatrixUtils {\n+\n+    /**\n+     * Default constructor.  Package scope to prevent unwanted instantiation. \n+     */\n+    public MatrixUtils() {\n+        super();\n+    }\n+    \n+    /**\n+     * Returns a {@link RealMatrix} whose entries are the the values in the\n+     * the input array.  The input array is copied, not referenced.\n+     * \n+     * @param data input array\n+     * @return  RealMatrix containing the values of the array\n+     * @throws IllegalArgumentException if <code>data</code> is not rectangular\n+     *  (not all rows have the same length) or empty\n+     * @throws NullPointerException if data is null\n+     */\n+    public static RealMatrix createRealMatrix(double[][] data) {\n+        return new RealMatrixImpl(data);\n+    }\n+    \n+    /**\n+     * Creates a row {@link RealMatrix} using the data from the input\n+     * array. \n+     * \n+     * @param rowData the input row data\n+     * @return a 1 x rowData.length RealMatrix\n+     * @throws IllegalArgumentException if <code>rowData</code> is empty\n+     * @throws NullPointerException if <code>rowData</code>is null\n+     */\n+    public static RealMatrix createRowRealMatrix(double[] rowData) {\n+        int nCols = rowData.length;\n+        double[][] data = new double[1][nCols];\n+        System.arraycopy(rowData, 0, data[0], 0, nCols);\n+        return new RealMatrixImpl(data);\n+    }\n+    \n+    /**\n+     * Creates a column {@link RealMatrix} using the data from the input\n+     * array.\n+     * \n+     * @param columnData  the input column data\n+     * @return a columnData x 1 RealMatrix\n+     * @throws IllegalArgumentException if <code>columnData</code> is empty\n+     * @throws NullPointerException if <code>columnData</code>is null\n+     */\n+    public static RealMatrix createColumnRealMatrix(double[] columnData) {\n+        int nRows = columnData.length;\n+        double[][] data = new double[nRows][1];\n+        for (int row = 0; row < nRows; row++) {\n+            data[row][0] = columnData[row];\n+        }\n+        return new RealMatrixImpl(data);\n+    }\n+    \n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/linear/MatrixUtilsTest.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.linear;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link MatrixUtils} class.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/10/12 06:27:44 $\n+ */\n+\n+public final class MatrixUtilsTest extends TestCase {\n+    \n+    protected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };\n+    protected double[] row = {1,2,3};\n+    protected double[][] rowMatrix = {{1,2,3}};\n+    protected double[] col = {0,4,6};\n+    protected double[][] colMatrix = {{0},{4},{6}};\n+    \n+    public MatrixUtilsTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {     \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(MatrixUtilsTest.class);\n+        suite.setName(\"MatrixUtils Tests\");\n+        return suite;\n+    }\n+    \n+    public void testCreateRealMatrix() {\n+        assertEquals(new RealMatrixImpl(testData), \n+                MatrixUtils.createRealMatrix(testData));\n+        try {\n+            MatrixUtils.createRealMatrix(new double[][] {{1}, {1,2}});  // ragged\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        try {\n+            MatrixUtils.createRealMatrix(new double[][] {{}, {}});  // no columns\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            MatrixUtils.createRealMatrix(null);  // null\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        } \n+    }\n+        \n+    public void testCreateRowRealMatrix() {\n+        assertEquals((RealMatrixImpl) MatrixUtils.createRowRealMatrix(row),\n+               new RealMatrixImpl(rowMatrix));\n+        try {\n+            MatrixUtils.createRowRealMatrix(new double[] {});  // empty\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            MatrixUtils.createRowRealMatrix(null);  // null\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        } \n+    }\n+    \n+    public void testCreateColumnRealMatrix() {\n+        assertEquals((RealMatrixImpl) MatrixUtils.createColumnRealMatrix(col),\n+                new RealMatrixImpl(colMatrix));\n+        try {\n+            MatrixUtils.createColumnRealMatrix(new double[] {});  // empty\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            MatrixUtils.createColumnRealMatrix(null);  // null\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        } \n+    }\n+        \n+}\n+", "timestamp": 1097562464, "metainfo": ""}