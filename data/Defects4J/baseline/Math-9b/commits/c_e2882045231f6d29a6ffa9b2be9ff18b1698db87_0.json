{"sha": "e2882045231f6d29a6ffa9b2be9ff18b1698db87", "log": "Modified to extend DiscreteDistributionAbstractTest. Added degenerate test cases.   ", "commit": "\n--- a/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n  */\n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.math.MathException;\n-\n-import junit.framework.TestCase;\n-\n /**\n- * @version $Revision: 1.12 $ $Date: 2004/02/21 21:35:17 $\n+ * Test cases for BinomialDistribution.\n+ * Extends DiscreteDistributionAbstractTest.  See class javadoc for\n+ * DiscreteDistributionAbstractTest for details.\n+ * \n+ * @version $Revision: 1.13 $ $Date: 2004/05/11 02:11:15 $\n  */\n-public class BinomialDistributionTest extends TestCase {\n-    private BinomialDistribution b;\n-\n+public class BinomialDistributionTest extends DiscreteDistributionAbstractTest {\n+    \n     /**\n-     * Constructor for ChiSquareDistributionTest.\n+     * Constructor for BinomialDistributionTest.\n      * @param name\n      */\n     public BinomialDistributionTest(String name) {\n         super(name);\n     }\n-\n-    /*\n-     * @see TestCase#setUp()\n-     */\n-    protected void setUp() throws Exception {\n-        super.setUp();\n-        b =\n-            DistributionFactory.newInstance().createBinomialDistribution(\n-                10,\n-                0.70);\n+    \n+    //-------------- Implementations for abstract methods -----------------------\n+    \n+    /** Creates the default discrete distribution instance to use in tests. */\n+    public DiscreteDistribution makeDistribution() {\n+        return DistributionFactory.newInstance().createBinomialDistribution(10,0.70);\n+    }\n+    \n+    /** Creates the default probability density test input values */\n+    public int[] makeDensityTestPoints() {\n+        return new int[] {-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n+    }\n+    \n+    /** Creates the default probability density test expected values */\n+    public double[] makeDensityTestValues() {\n+        return new double[] {0d, 0.0000d, 0.0001d, 0.0014d, 0.0090d, 0.0368d, 0.1029d, \n+                0.2001d, 0.2668d, 0.2335d, 0.1211d, 0.0282d, 0d};\n+    }\n+    \n+    /** Creates the default cumulative probability density test input values */\n+    public int[] makeCumulativeTestPoints() {\n+        return makeDensityTestPoints();\n+    }\n+    \n+    /** Creates the default cumulative probability density test expected values */\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {0d, 0.0000d, 0.0001d, 0.0016d, 0.0106d, 0.0473d,\n+                0.1503d, 0.3504d, 0.6172d, 0.8507d, 0.9718d, 1d, 1d};\n+        }\n+    \n+    /** Creates the default inverse cumulative probability test input values */\n+    public double[] makeInverseCumulativeTestPoints() {\n+        return new double[] {0.001d, 0.010d, 0.025d, 0.050d, 0.100d, 0.999d,\n+                0.990d, 0.975d, 0.950d, 0.900d}; \n+        }\n+    \n+    /** Creates the default inverse cumulative probability density test expected values */\n+    public int[] makeInverseCumulativeTestValues() {\n+        return new int[] {1, 2, 3, 4, 4, 9, 9, 9, 8, 8};\n     }\n \n-    /*\n-     * @see TestCase#tearDown()\n-     */\n-    protected void tearDown() throws Exception {\n-        b = null;\n-        super.tearDown();\n+    //----------------- Additional test cases ---------------------------------\n+   \n+    /** Test degenerate case p = 0   */\n+    public void testDegenerate0() throws Exception {\n+        setDistribution(DistributionFactory.newInstance().createBinomialDistribution(5,0.0d));\n+        setCumulativeTestPoints(new int[] {-1, 0, 1, 5, 10 });\n+        setCumulativeTestValues(new double[] {0d, 1d, 1d, 1d, 1d});\n+        setDensityTestPoints(new int[] {-1, 0, 1, 10, 11});\n+        setDensityTestValues(new double[] {0d, 1d, 0d, 0d, 0d});\n+        setInverseCumulativeTestPoints(new double[] {0.1d, 0.5d});\n+        setInverseCumulativeTestValues(new int[] {-1, -1});\n+        verifyDensities();\n+        verifyCumulativeProbabilities();\n+        verifyInverseCumulativeProbabilities();     \n+    }\n+    \n+    /** Test degenerate case p = 1   */\n+    public void tstDegenerate1() throws Exception {\n+        setDistribution(DistributionFactory.newInstance().createBinomialDistribution(5,1.0d));\n+        setCumulativeTestPoints(new int[] {-1, 0, 1, 2, 5, 10 });\n+        setCumulativeTestValues(new double[] {0d, 0d, 0d, 0d, 1d, 1d});\n+        setDensityTestPoints(new int[] {-1, 0, 1, 2, 5, 10});\n+        setDensityTestValues(new double[] {0d, 0d, 0d, 0d, 1d, 0d});\n+        setInverseCumulativeTestPoints(new double[] {0.1d, 0.5d});\n+        setInverseCumulativeTestValues(new int[] {4, 4});\n+        verifyDensities();\n+        verifyCumulativeProbabilities();\n+        verifyInverseCumulativeProbabilities();     \n     }\n \n-    public void testInverseCumulativeProbability001() {\n-        testValue(1, .001);\n-    }\n-\n-    public void testInverseCumulativeProbability010() {\n-        testValue(2, .010);\n-    }\n-\n-    public void testInverseCumulativeProbability025() {\n-        testValue(3, .025);\n-    }\n-\n-    public void testInverseCumulativeProbability050() {\n-        testValue(4, .050);\n-    }\n-\n-    public void testInverseCumulativeProbability100() {\n-        testValue(4, .100);\n-    }\n-\n-    public void testInverseCumulativeProbability999() {\n-        testValue(9, .999);\n-    }\n-\n-    public void testInverseCumulativeProbability990() {\n-        testValue(9, .990);\n-    }\n-\n-    public void testInverseCumulativeProbability975() {\n-        testValue(9, .975);\n-    }\n-\n-    public void testInverseCumulativeProbability950() {\n-        testValue(8, .950);\n-    }\n-\n-    public void testInverseCumulativeProbability900() {\n-        testValue(8, .900);\n-    }\n-\n-    public void testCumulativeProbability1() {\n-        testProbability(1, .00014);\n-    }\n-\n-    public void testCumulativeProbability2() {\n-        testProbability(2, .00159);\n-    }\n-\n-    public void testCumulativeProbability3() {\n-        testProbability(3, .01059);\n-    }\n-\n-    public void testCumulativeProbability4() {\n-        testProbability(4, .04735);\n-    }\n-\n-    public void testCumulativeProbability9() {\n-        testProbability(9, .97175);\n-    }\n-\n-    public void testcumulativeProbability8() {\n-        testProbability(8, .85069);\n-    }\n-\n-    private void testProbability(int x, double expected) {\n-        try {\n-            double actual = b.cumulativeProbability(x);\n-            assertEquals(expected, actual, 10e-4);\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-\n-    }\n-\n-    private void testValue(int expected, double p) {\n-        try {\n-            int actual = b.inverseCumulativeProbability(p);\n-            assertEquals(expected, actual);\n-            assertTrue(b.cumulativeProbability(actual) <= p);\n-            assertTrue(b.cumulativeProbability(actual + 1) >= p);\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-    }\n }\n--- a/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n \n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.math.MathException;\n-\n-import junit.framework.TestCase;\n-\n /**\n- * @version $Revision: 1.10 $ $Date: 2004/02/21 21:35:17 $\n+ * Test cases for HyperGeometriclDistribution.\n+ * Extends DiscreteDistributionAbstractTest.  See class javadoc for\n+ * DiscreteDistributionAbstractTest for details.\n+ * \n+ * @version $Revision: 1.11 $ $Date: 2004/05/11 02:12:11 $\n  */\n-public class HypergeometricDistributionTest extends TestCase {\n-    private HypergeometricDistribution h;\n+public class HypergeometricDistributionTest extends DiscreteDistributionAbstractTest {\n \n     /**\n      * Constructor for ChiSquareDistributionTest.\n         super(name);\n     }\n \n-    /*\n-     * @see TestCase#setUp()\n-     */\n-    protected void setUp() throws Exception {\n-        super.setUp();\n-        h =\n-            DistributionFactory.newInstance().createHypergeometricDistribution(\n-                10,\n-                5,\n-                5);\n+//-------------- Implementations for abstract methods -----------------------\n+    \n+    /** Creates the default discrete distribution instance to use in tests. */\n+    public DiscreteDistribution makeDistribution() {\n+        return DistributionFactory.newInstance().createHypergeometricDistribution(10,5, 5);\n+    }\n+    \n+    /** Creates the default probability density test input values */\n+    public int[] makeDensityTestPoints() {\n+        return new int[] {-1, 0, 1, 2, 3, 4, 5, 10};\n+    }\n+    \n+    /** Creates the default probability density test expected values */\n+    public double[] makeDensityTestValues() {\n+        return new double[] {0d, 0.003968d, 0.099206d, 0.396825d, 0.396825d, \n+                0.099206d, 0.003968d, 0d};\n+    }\n+    \n+    /** Creates the default cumulative probability density test input values */\n+    public int[] makeCumulativeTestPoints() {\n+        return makeDensityTestPoints();\n+    }\n+    \n+    /** Creates the default cumulative probability density test expected values */\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {0d, .003968d, .103175d, .50000d, .896825d, .996032d,\n+                1.00000d, 1d};\n+    }\n+    \n+    /** Creates the default inverse cumulative probability test input values */\n+    public double[] makeInverseCumulativeTestPoints() {\n+        return new double[] {0.001d, 0.010d, 0.025d, 0.050d, 0.100d, 0.999d,\n+                0.990d, 0.975d, 0.950d, 0.900d}; \n+    }\n+    \n+    /** Creates the default inverse cumulative probability density test expected values */\n+    public int[] makeInverseCumulativeTestValues() {\n+        return new int[] {-1, 0, 0, 0, 0, 4, 3, 3, 3, 3};\n+    }\n+    \n+    //-------------------- Additional test cases ------------------------------\n+    \n+    /** Verify that if there are no failures, mass is concentrated on sampleSize */\n+    public void testDegenerateNoFailures() throws Exception {\n+        setDistribution(DistributionFactory.newInstance().createHypergeometricDistribution(5,5,3));\n+        setCumulativeTestPoints(new int[] {-1, 0, 1, 3, 10 });\n+        setCumulativeTestValues(new double[] {0d, 0d, 0d, 1d, 1d});\n+        setDensityTestPoints(new int[] {-1, 0, 1, 3, 10});\n+        setDensityTestValues(new double[] {0d, 0d, 0d, 1d, 0d});\n+        setInverseCumulativeTestPoints(new double[] {0.1d, 0.5d});\n+        setInverseCumulativeTestValues(new int[] {2, 2});\n+        verifyDensities();\n+        verifyCumulativeProbabilities();\n+        verifyInverseCumulativeProbabilities();     \n+    }\n+    \n+    /** Verify that if there are no successes, mass is concentrated on 0 */\n+    public void testDegenerateNoSuccesses() throws Exception {\n+        setDistribution(DistributionFactory.newInstance().createHypergeometricDistribution(5,0,3));\n+        setCumulativeTestPoints(new int[] {-1, 0, 1, 3, 10 });\n+        setCumulativeTestValues(new double[] {0d, 1d, 1d, 1d, 1d});\n+        setDensityTestPoints(new int[] {-1, 0, 1, 3, 10});\n+        setDensityTestValues(new double[] {0d, 1d, 0d, 0d, 0d});\n+        setInverseCumulativeTestPoints(new double[] {0.1d, 0.5d});\n+        setInverseCumulativeTestValues(new int[] {-1, -1});\n+        verifyDensities();\n+        verifyCumulativeProbabilities();\n+        verifyInverseCumulativeProbabilities();     \n+    }\n+    \n+    /** Verify that if sampleSize = populationSize, mass is concentrated on numberOfSuccesses */\n+    public void testDegenerateFullSample() throws Exception {\n+        setDistribution(DistributionFactory.newInstance().createHypergeometricDistribution(5,3,5));\n+        setCumulativeTestPoints(new int[] {-1, 0, 1, 3, 10 });\n+        setCumulativeTestValues(new double[] {0d, 0d, 0d, 1d, 1d});\n+        setDensityTestPoints(new int[] {-1, 0, 1, 3, 10});\n+        setDensityTestValues(new double[] {0d, 0d, 0d, 1d, 0d});\n+        setInverseCumulativeTestPoints(new double[] {0.1d, 0.5d});\n+        setInverseCumulativeTestValues(new int[] {2, 2});\n+        verifyDensities();\n+        verifyCumulativeProbabilities();\n+        verifyInverseCumulativeProbabilities();     \n     }\n \n-    /*\n-     * @see TestCase#tearDown()\n-     */\n-    protected void tearDown() throws Exception {\n-        h = null;\n-        super.tearDown();\n-    }\n-\n-    public void testInverseCumulativeProbability001() {\n-        testValue(-1, .001);\n-    }\n-\n-    public void testInverseCumulativeProbability010() {\n-        testValue(0, .010);\n-    }\n-\n-    public void testInverseCumulativeProbability025() {\n-        testValue(0, .025);\n-    }\n-\n-    public void testInverseCumulativeProbability050() {\n-        testValue(0, .050);\n-    }\n-\n-    public void testInverseCumulativeProbability100() {\n-        testValue(0, .100);\n-    }\n-\n-    public void testInverseCumulativeProbability999() {\n-        testValue(4, .999);\n-    }\n-\n-    public void testInverseCumulativeProbability990() {\n-        testValue(3, .990);\n-    }\n-\n-    public void testInverseCumulativeProbability975() {\n-        testValue(3, .975);\n-    }\n-\n-    public void testInverseCumulativeProbability950() {\n-        testValue(3, .950);\n-    }\n-\n-    public void testInverseCumulativeProbability900() {\n-        testValue(3, .900);\n-    }\n-\n-    public void testCumulativeProbability0() {\n-        testProbability(0, .00400);\n-    }\n-\n-    public void testCumulativeProbability1() {\n-        testProbability(1, .10318);\n-    }\n-\n-    public void testCumulativeProbability2() {\n-        testProbability(2, .50000);\n-    }\n-\n-    public void testCumulativeProbability3() {\n-        testProbability(3, .89683);\n-    }\n-\n-    public void testCumulativeProbability4() {\n-        testProbability(4, .99603);\n-    }\n-\n-    public void testCumulativeProbability5() {\n-        testProbability(5, 1.00000);\n-    }\n-\n-    private void testProbability(int x, double expected) {\n-        try {\n-            double actual = h.cumulativeProbability(x);\n-            assertEquals(expected, actual, 10e-4);\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    private void testValue(int expected, double p) {\n-        try {\n-            int actual = h.inverseCumulativeProbability(p);\n-            assertEquals(expected, actual);\n-            assertTrue(h.cumulativeProbability(actual) <= p);\n-            assertTrue(h.cumulativeProbability(actual + 1) >= p);\n-        } catch (MathException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-    }\n }", "timestamp": 1084241531, "metainfo": ""}