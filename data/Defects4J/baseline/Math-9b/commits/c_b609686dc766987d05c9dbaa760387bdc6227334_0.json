{"sha": "b609686dc766987d05c9dbaa760387bdc6227334", "log": "fixed array type from String[] to Object[] according to base class  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java\n                               double t0, double[] y0, double t, double[] y)\n     throws IntegratorException {\n       if (equations.getDimension() != y0.length) {\n-          throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\"\n-                                        + \" initial state vector has dimension {1}\",\n-                                        new String[] {\n-                                          Integer.toString(equations.getDimension()),\n-                                          Integer.toString(y0.length)\n+          throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\" +\n+                                        \" initial state vector has dimension {1}\",\n+                                        new Object[] {\n+                                          new Integer(equations.getDimension()),\n+                                          new Integer(y0.length)\n                                         });\n       }\n       if (equations.getDimension() != y.length) {\n-          throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\"\n-                                        + \" final state vector has dimension {1}\",\n-                                        new String[] {\n-                                          Integer.toString(equations.getDimension()),\n-                                          Integer.toString(y.length)\n+          throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\" +\n+                                        \" final state vector has dimension {1}\",\n+                                        new Object[] {\n+                                          new Integer(equations.getDimension()),\n+                                          new Integer(y.length)\n                                         });\n       }\n       if ((vecAbsoluteTolerance != null) && (vecAbsoluteTolerance.length != y0.length)) {\n-          throw new IntegratorException(\"dimensions mismatch: state vector has dimension {0},\"\n-                                        + \" absolute tolerance vector has dimension {1}\",\n-                                        new String[] {\n-                                          Integer.toString(y0.length),\n-                                          Integer.toString(vecAbsoluteTolerance.length)\n+          throw new IntegratorException(\"dimensions mismatch: state vector has dimension {0},\" +\n+                                        \" absolute tolerance vector has dimension {1}\",\n+                                        new Object[] {\n+                                          new Integer(y0.length),\n+                                          new Integer(vecAbsoluteTolerance.length)\n                                         });\n       }\n       if ((vecRelativeTolerance != null) && (vecRelativeTolerance.length != y0.length)) {\n-          throw new IntegratorException(\"dimensions mismatch: state vector has dimension {0},\"\n-                                        + \" relative tolerance vector has dimension {1}\",\n-                                        new String[] {\n-                                          Integer.toString(y0.length),\n-                                          Integer.toString(vecRelativeTolerance.length)\n+          throw new IntegratorException(\"dimensions mismatch: state vector has dimension {0},\" +\n+                                        \" relative tolerance vector has dimension {1}\",\n+                                        new Object[] {\n+                                          new Integer(y0.length),\n+                                          new Integer(vecRelativeTolerance.length)\n                                         });\n       }\n       if (Math.abs(t - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs(t))) {\n         throw new IntegratorException(\"too small integration interval: length = {0}\",\n-                                      new String[] {\n-                                        Double.toString(Math.abs(t - t0))\n-                                      });\n+                                      new Object[] { new Double(Math.abs(t - t0)) });\n       }\n       \n   }\n       yDotOnScale2 += ratio * ratio;\n     }\n \n-    double h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10))\n-      ? 1.0e-6 : (0.01 * Math.sqrt(yOnScale2 / yDotOnScale2));\n+    double h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ?\n+               1.0e-6 : (0.01 * Math.sqrt(yOnScale2 / yDotOnScale2));\n     if (! forward) {\n       h = -h;\n     }\n     // step size is computed such that\n     // h^order * max (||y'/tol||, ||y''/tol||) = 0.01\n     double maxInv2 = Math.max(Math.sqrt(yDotOnScale2), yDDotOnScale);\n-    double h1 = (maxInv2 < 1.0e-15)\n-      ? Math.max(1.0e-6, 0.001 * Math.abs(h))\n-      : Math.pow(0.01 / maxInv2, 1.0 / order);\n+    double h1 = (maxInv2 < 1.0e-15) ?\n+                Math.max(1.0e-6, 0.001 * Math.abs(h)) :\n+                Math.pow(0.01 / maxInv2, 1.0 / order);\n     h = Math.min(100.0 * Math.abs(h), h1);\n     h = Math.max(h, 1.0e-12 * Math.abs(t0));  // avoids cancellation when computing t1 - t0\n     if (h < getMinStep()) {\n       if (acceptSmall) {\n         h = (h < 0) ? -minStep : minStep;\n       } else {\n-        throw new IntegratorException(\"minimal step size ({0}) reached,\"\n-                                      + \" integration needs {1}\",\n-                                      new String[] {\n-                                        Double.toString(minStep),\n-                                        Double.toString(Math.abs(h))\n+        throw new IntegratorException(\"minimal step size ({0}) reached,\" +\n+                                      \" integration needs {1}\",\n+                                      new Object[] {\n+                                        new Double(minStep),\n+                                        new Double(Math.abs(h))\n                                       });\n       }\n     }\n--- a/src/java/org/apache/commons/math/ode/IntegratorException.java\n+++ b/src/java/org/apache/commons/math/ode/IntegratorException.java\n    * @param specifier format specifier (to be translated)\n    * @param parts to insert in the format (no translation)\n    */\n-  public IntegratorException(String specifier, String[] parts) {\n+  public IntegratorException(String specifier, Object[] parts) {\n     super(specifier, parts);\n   }\n \n--- a/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java\n                             double t0, double[] y0, double t, double[] y)\n     throws IntegratorException {\n     if (equations.getDimension() != y0.length) {\n-      throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\"\n-                                    + \" initial state vector has dimension {1}\",\n-                                    new String[] {\n-                                      Integer.toString(equations.getDimension()),\n-                                      Integer.toString(y0.length)\n+      throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\" +\n+                                    \" initial state vector has dimension {1}\",\n+                                    new Object[] {\n+                                      new Integer(equations.getDimension()),\n+                                      new Integer(y0.length)\n                                     });\n     }\n     if (equations.getDimension() != y.length) {\n-        throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\"\n-                                      + \" final state vector has dimension {1}\",\n-                                      new String[] {\n-                                        Integer.toString(equations.getDimension()),\n-                                        Integer.toString(y.length)\n+        throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\" +\n+                                      \" final state vector has dimension {1}\",\n+                                      new Object[] {\n+                                        new Integer(equations.getDimension()),\n+                                        new Integer(y.length)\n                                       });\n       }\n     if (Math.abs(t - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs(t))) {\n       throw new IntegratorException(\"too small integration interval: length = {0}\",\n-                                    new String[] {\n-                                      Double.toString(Math.abs(t - t0))\n-                                    });\n+                                    new Object[] { new Double(Math.abs(t - t0)) });\n     }      \n   }\n ", "timestamp": 1200845210, "metainfo": ""}