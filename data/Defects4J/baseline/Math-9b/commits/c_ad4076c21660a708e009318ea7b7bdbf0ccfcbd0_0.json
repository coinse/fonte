{"sha": "ad4076c21660a708e009318ea7b7bdbf0ccfcbd0", "log": "Update nextAfter Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n      * Get the next machine representable number after a number, moving\n      * in the direction of another number.\n      * <p>\n-     * If <code>direction</code> is greater than or equal to <code>d</code>,\n+     * The ordering is as follows (increasing):\n+     * <ul>\n+     * <li>-INFINITY</li>\n+     * <li>-MAX_VALUE</li>\n+     * <li>-MIN_VALUE</li>\n+     * <li>-0.0</li>\n+     * <li>+0.0</li>\n+     * <li>+MIN_VALUE</li>\n+     * <li>+MAX_VALUE</li>\n+     * <li>+INFINITY</li>\n+     * <li></li>\n+     * <p>\n+     * If arguments compare equal, then the second argument is returned.\n+     * <p>\n+     * If {@code direction} is greater than {@code d},\n      * the smallest machine representable number strictly greater than\n-     * <code>d</code> is returned; otherwise the largest representable number\n-     * strictly less than <code>d</code> is returned.</p>\n+     * {@code d} is returned; if less, then the largest representable number\n+     * strictly less than {@code d} is returned.</p>\n      * <p>\n-     * If <code>d</code> is NaN or if it is infinite and direction does not\n+     * If {@code d} is infinite and direction does not\n      * bring it back to finite numbers, it is returned unchanged.</p>\n      *\n      * @param d base number\n      * @param direction (the only important thing is whether\n-     * direction is greater or smaller than d)\n+     * {@code direction} is greater or smaller than {@code d})\n      * @return the next machine representable number in the specified direction\n      */\n     public static double nextAfter(double d, double direction) {\n      * Get the next machine representable number after a number, moving\n      * in the direction of another number.\n      * <p>\n-     * If <code>direction</code> is greater than or equal to <code>d</code>,\n+     * The ordering is as follows (increasing):\n+     * <ul>\n+     * <li>-INFINITY</li>\n+     * <li>-MAX_VALUE</li>\n+     * <li>-MIN_VALUE</li>\n+     * <li>-0.0</li>\n+     * <li>+0.0</li>\n+     * <li>+MIN_VALUE</li>\n+     * <li>+MAX_VALUE</li>\n+     * <li>+INFINITY</li>\n+     * <li></li>\n+     * <p>\n+     * If arguments compare equal, then the second argument is returned.\n+     * <p>\n+     * If {@code direction} is greater than {@code f},\n      * the smallest machine representable number strictly greater than\n-     * <code>d</code> is returned; otherwise the largest representable number\n-     * strictly less than <code>d</code> is returned.</p>\n+     * {@code f} is returned; if less, then the largest representable number\n+     * strictly less than {@code f} is returned.</p>\n      * <p>\n-     * If <code>d</code> is NaN or if it is infinite and direction does not\n+     * If {@code f} is infinite and direction does not\n      * bring it back to finite numbers, it is returned unchanged.</p>\n      *\n      * @param f base number\n      * @param direction (the only important thing is whether\n-     * direction is greater or smaller than f)\n+     * {@code direction} is greater or smaller than {@code f})\n      * @return the next machine representable number in the specified direction\n      */\n     public static float nextAfter(final float f, final double direction) {", "timestamp": 1295785241, "metainfo": ""}