{"sha": "8dcd1aff544e084420224bcccfbdf4ce2d854a93", "log": "MATH-621 Removed seemingly unnecessary code: labelled block (\"L120\"), and conditional that always evaluates to true (for the current set of unit tests).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java\n             }\n \n             // Investigate whether more components of W can be fixed.\n-            L120: {\n-                final double tmp = adelt * adelt - wfixsq;\n-                if (tmp > ZERO) {\n-                    final double wsqsav = wfixsq;\n-                    step = Math.sqrt(tmp / ggfree);\n-                    ggfree = ZERO;\n-                    for (int i = 0; i < n; i++) {\n-                        if (work1.getEntry(i) == bigstp) {\n-                            final double tmp2 = xopt.getEntry(i) - step * glag.getEntry(i);\n-                            if (tmp2 <= sl.getEntry(i)) {\n-                                work1.setEntry(i, sl.getEntry(i) - xopt.getEntry(i));\n-                                // Computing 2nd power\n-                                final double d1 = work1.getEntry(i);\n-                                wfixsq += d1 * d1;\n-                            } else if (tmp2 >= su.getEntry(i)) {\n-                                work1.setEntry(i, su.getEntry(i) - xopt.getEntry(i));\n-                                // Computing 2nd power\n-                                final double d1 = work1.getEntry(i);\n-                                wfixsq += d1 * d1;\n-                            } else {\n-                                // Computing 2nd power\n-                                final double d1 = glag.getEntry(i);\n-                                ggfree += d1 * d1;\n-                            }\n+            final double tmp1 = adelt * adelt - wfixsq;\n+            if (tmp1 > ZERO) {\n+                final double wsqsav = wfixsq;\n+                step = Math.sqrt(tmp1 / ggfree);\n+                ggfree = ZERO;\n+                for (int i = 0; i < n; i++) {\n+                    if (work1.getEntry(i) == bigstp) {\n+                        final double tmp2 = xopt.getEntry(i) - step * glag.getEntry(i);\n+                        if (tmp2 <= sl.getEntry(i)) {\n+                            work1.setEntry(i, sl.getEntry(i) - xopt.getEntry(i));\n+                            // Computing 2nd power\n+                            final double d1 = work1.getEntry(i);\n+                            wfixsq += d1 * d1;\n+                        } else if (tmp2 >= su.getEntry(i)) {\n+                            work1.setEntry(i, su.getEntry(i) - xopt.getEntry(i));\n+                            // Computing 2nd power\n+                            final double d1 = work1.getEntry(i);\n+                            wfixsq += d1 * d1;\n+                        } else {\n+                            // Computing 2nd power\n+                            final double d1 = glag.getEntry(i);\n+                            ggfree += d1 * d1;\n                         }\n                     }\n-                    if (!(wfixsq > wsqsav &&\n-                          ggfree > ZERO)) {\n-                        break L120;\n-                    }\n-                }\n-            } // end L120\n+                }\n+            }\n \n             // Set the remaining free components of W and all components of XALT,\n             // except that W may be scaled later.", "timestamp": 1319069214, "metainfo": ""}