{"sha": "c5e91af107171244574a78bd183c11d7dd3b318a", "log": "MATH-581 New exception. Simplified others.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     NON_REAL_FINITE_ABSCISSA(\"all abscissae must be finite real numbers, but {0}-th is {1}\"),\n     NON_REAL_FINITE_ORDINATE(\"all ordinatae must be finite real numbers, but {0}-th is {1}\"),\n     NON_REAL_FINITE_WEIGHT(\"all weights must be finite real numbers, but {0}-th is {1}\"),\n-    NON_SQUARE_MATRIX(\"a {0}x{1} matrix was provided instead of a square matrix\"),\n+    NON_SQUARE_MATRIX(\"non square ({0}x{1}) matrix\"),\n     NORMALIZE_INFINITE(\"Cannot normalize to an infinite value\"),\n     NORMALIZE_NAN(\"Cannot normalize to NaN\"),\n     NOT_ADDITION_COMPATIBLE_MATRICES(\"{0}x{1} and {2}x{3} matrices are not addition compatible\"),\n     NOT_POSITIVE_COLUMNDIMENSION(\"invalid column dimension: {0} (must be positive)\"),\n     NOT_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix\"),\n     NON_POSITIVE_DEFINITE_MATRIX(\"not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}\"), /* keep */\n-    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(\"non positive definite linear operator: x' A x <= 0 when x is {0}\"),\n-    NON_SELF_ADJOINT_LINEAR_OPERATOR(\"non self-adjoint linear operator: |x' A y - y' A x| > {0} when x is {1} and y is {2}\"),\n+    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(\"non positive definite linear operator\"), /* keep */\n+    NON_SELF_ADJOINT_LINEAR_OPERATOR(\"non self-adjoint linear operator\"), /* keep */\n+    NON_SQUARE_LINEAR_OPERATOR(\"non square ({0}x{1}) linear operator\"), /* keep */\n     DEGREES_OF_FREEDOM(\"degrees of freedom ({0})\"), /* keep */\n     NOT_POSITIVE_DEGREES_OF_FREEDOM(\"degrees of freedom must be positive ({0})\"),\n     NOT_POSITIVE_ELEMENT_AT_INDEX(\"element {0} is not positive: {1}\"),\n--- a/src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteLinearOperatorException.java\n+++ b/src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteLinearOperatorException.java\n  */\n public class NonPositiveDefiniteLinearOperatorException\n     extends MathIllegalArgumentException {\n-    /** The offending linear operator.*/\n-    private final RealLinearOperator a;\n-    /** A reference to the offending vector. */\n-    private final RealVector x;\n-\n-    /**\n-     * Creates a new instance of this class.\n-     *\n-     * @param a Offending linear operator.\n-     * @param x Offending vector.\n-     */\n-    public NonPositiveDefiniteLinearOperatorException(final RealLinearOperator a,\n-                                                      final double[] x) {\n-        this(a, new ArrayRealVector(x, false));\n-    }\n-\n-    /**\n-     * Creates a new instance of this class.\n-     *\n-     * @param a Offending linear operator.\n-     * @param x Offending vector.\n-     */\n-    public NonPositiveDefiniteLinearOperatorException(final RealLinearOperator a,\n-                                                      final RealVector x) {\n-        super(LocalizedFormats.NON_POSITIVE_DEFINITE_LINEAR_OPERATOR, x);\n-        this.a = a;\n-        this.x = x;\n-    }\n-\n-    /**\n-     * Returns a reference to the offending vector.\n-     * If the exception was raised by a call to\n-     * {@link #NonPositiveDefiniteLinearOperatorException(RealLinearOperator,\n-     * double[])}, then a new {@link ArrayRealVector} holding a reference to\n-     * the actual {@code double[]} is returned.\n-     *\n-     * @return the offending vector.\n-     */\n-    public RealVector getOffendingVector() {\n-        return x;\n-    }\n-\n-    /**\n-     * Returns a reference to the offending linear operator.\n-     *\n-     * @return the offending linear operator.\n-     */\n-    public RealLinearOperator getOffendingLinearOperator() {\n-        return a;\n+    /** Creates a new instance of this class. */\n+    public NonPositiveDefiniteLinearOperatorException() {\n+        super(LocalizedFormats.NON_POSITIVE_DEFINITE_LINEAR_OPERATOR);\n     }\n }\n--- a/src/main/java/org/apache/commons/math/linear/NonSelfAdjointLinearOperatorException.java\n+++ b/src/main/java/org/apache/commons/math/linear/NonSelfAdjointLinearOperatorException.java\n  */\n public class NonSelfAdjointLinearOperatorException\n     extends MathIllegalArgumentException {\n-    /** The offending linear operator, A. */\n-    private final RealLinearOperator a;\n-    /** The threshold. */\n-    private final double threshold;\n-    /** A reference to the first offending vector*/\n-    private final RealVector x;\n-    /** A reference to the second offending vector*/\n-    private final RealVector y;\n \n-    /**\n-     * Creates a new instance of this class.\n-     *\n-     * @param a Offending linear operator.\n-     * @param x First offending vector.\n-     * @param y Second offending vector.\n-     * @param threshold Threshold.\n-     */\n-    public NonSelfAdjointLinearOperatorException(final RealLinearOperator a,\n-                                                 final double[] x,\n-                                                 final double[] y,\n-                                                 final double threshold) {\n-        this(a,\n-             new ArrayRealVector(x, false),\n-             new ArrayRealVector(y, false),\n-             threshold);\n-    }\n-\n-    /**\n-     * Creates a new instance of this class.\n-     *\n-     * @param a Offending linear operator.\n-     * @param x First offending vector.\n-     * @param y Second offending vector.\n-     * @param threshold Threshold.\n-     */\n-    public NonSelfAdjointLinearOperatorException(final RealLinearOperator a,\n-                                                 final RealVector x,\n-                                                 final RealVector y,\n-                                                 final double threshold) {\n-        super(LocalizedFormats.NON_SELF_ADJOINT_LINEAR_OPERATOR, threshold, x, y);\n-        this.a = a;\n-        this.x = x;\n-        this.y = y;\n-        this.threshold = threshold;\n-    }\n-\n-    /**\n-     * Returns a reference to the first offending vector.\n-     * If the exception was raised by a call to\n-     * {@link #NonSelfAdjointLinearOperatorException(RealLinearOperator,\n-     * double[], double[], double)}, then a new {@link ArrayRealVector}\n-     * holding a reference to the actual {@code double[]} is returned.\n-     *\n-     * @return the first offending vector.\n-     */\n-    public RealVector getFirstOffendingVector() {\n-        return x;\n-    }\n-\n-    /**\n-     * Returns a reference to the offending linear operator.\n-     *\n-     * @return the offending linear operator.\n-     */\n-    public RealLinearOperator getOffendingLinearOperator() {\n-        return a;\n-    }\n-\n-    /**\n-     * Returns a copy of the second offending vector.\n-     * If the exception was raised by a call to\n-     * {@link #NonSelfAdjointLinearOperatorException(RealLinearOperator,\n-     * double[], double[], double)}, then a new {@link ArrayRealVector}\n-     * holding a reference to the actual {@code double[]} is returned.\n-     *\n-     * @return the second offending vector.\n-     */\n-    public RealVector getSecondOffendingVector() {\n-        return y;\n-    }\n-\n-    /**\n-     * Returns the threshold.\n-     *\n-     * @return the threshold.\n-     */\n-    public double getThreshold() {\n-        return threshold;\n+    /** Creates a new instance of this class. */\n+    public NonSelfAdjointLinearOperatorException() {\n+        super(LocalizedFormats.NON_SELF_ADJOINT_LINEAR_OPERATOR);\n     }\n }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/linear/NonSquareLinearOperatorException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.linear;\n+\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when a square linear operator is expected.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class NonSquareLinearOperatorException extends DimensionMismatchException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = -660069396594485772L;\n+\n+    /**\n+     * Construct an exception from the mismatched dimensions.\n+     *\n+     * @param wrong Row dimension.\n+     * @param expected Column dimension.\n+     */\n+    public NonSquareLinearOperatorException(int wrong, int expected) {\n+        super(LocalizedFormats.NON_SQUARE_LINEAR_OPERATOR, wrong, expected);\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java\n+++ b/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java\n  * @version $Id$\n  */\n public class NonSquareMatrixException extends DimensionMismatchException {\n-\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -660069396594485772L;\n ", "timestamp": 1312573384, "metainfo": ""}