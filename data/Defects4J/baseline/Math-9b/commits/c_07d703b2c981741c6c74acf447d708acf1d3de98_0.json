{"sha": "07d703b2c981741c6c74acf447d708acf1d3de98", "log": "MATH-361   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java\n import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.LocalizedFormats;\n \n /**\n  * Implements a linear function for interpolation of real univariate functions.\n         }\n \n         if (x.length < 2) {\n-            throw new NumberIsTooSmallException(x.length, 2, true);\n+            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n+                                                x.length, 2, true);\n         }\n \n         // Number of intervals.  The number of data points is n + 1.\n \n         return new PolynomialSplineFunction(x, polynomials);\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n import org.apache.commons.math.util.MathUtils;\n+import org.apache.commons.math.util.LocalizedFormats;\n \n /**\n  * Computes a natural (also known as \"free\", \"unclamped\") cubic spline interpolation for the data set.\n         }\n \n         if (x.length < 3) {\n-            throw new NumberIsTooSmallException(x.length, 3, true);\n+            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n+                                                x.length, 3, true);\n         }\n \n         // Number of intervals.  The number of data points is n + 1.\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n  */\n public class MathIllegalArgumentException extends IllegalArgumentException {\n     /**\n-     * Pattern used to build the message.\n+     * Pattern used to build the message (specific context).\n      */\n-    private final Localizable pattern;\n+    private final Localizable specific;\n+    /**\n+     * Pattern used to build the message (general problem description).\n+     */\n+    private final Localizable general;\n     /**\n      * Arguments used to build the message.\n      */\n     private final Object[] arguments;\n     \n     /**\n-     * @param pattern Message pattern.\n+     * @param specific Message pattern providing the specific context of\n+     * the error.\n+     * @param general Message pattern explaining the cause of the error.\n      * @param args Arguments.\n      */\n-    protected MathIllegalArgumentException(Localizable pattern,\n+    protected MathIllegalArgumentException(Localizable specific,\n+                                           Localizable general,\n                                            Object ... args) {\n-        this.pattern = pattern;\n+        this.specific = specific;\n+        this.general = general;\n         arguments = flatten(args).toArray();\n+    }\n+    /**\n+     * @param general Message pattern explaining the cause of the error.\n+     * @param args Arguments.\n+     */\n+    protected MathIllegalArgumentException(Localizable general,\n+                                           Object ... args) {\n+        this(null, general, args);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return MessageFactory.buildMessage(Locale.US, pattern, arguments);\n+        final StringBuilder sb = new StringBuilder();\n+\n+        if (specific != null) {\n+            sb.append(MessageFactory.buildMessage(Locale.US, specific, arguments));\n+            sb.append(\": \");\n+        }\n+        sb.append(MessageFactory.buildMessage(Locale.US, general, arguments));\n+\n+        return sb.toString();\n     }\n     \n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return MessageFactory.buildMessage(Locale.getDefault(), pattern, arguments);\n+        final StringBuilder sb = new StringBuilder();\n+\n+        if (specific != null) {\n+            sb.append(MessageFactory.buildMessage(Locale.getDefault(), specific, arguments));\n+            sb.append(\": \");\n+        }\n+        sb.append(MessageFactory.buildMessage(Locale.getDefault(), general, arguments));\n+\n+        return sb.toString();\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java\n     /**\n      * Construct an exception.\n      *\n-     * @param pattern Localizable pattern.\n+     * @param specific Localizable pattern.\n+     * @param general Localizable pattern.\n      * @param arguments Arguments. The first element must be the requested\n      * value that raised the exception.\n      */\n-    protected MathIllegalNumberException(Localizable pattern,\n+    protected MathIllegalNumberException(Localizable specific,\n+                                         Localizable general,\n                                          Number wrong,\n                                          Object ... arguments) {\n-        super(pattern, wrong, arguments);\n+        super(specific, general, wrong, arguments);\n+        argument = wrong;\n+    }\n+\n+    /**\n+     * Construct an exception.\n+     *\n+     * @param general Localizable pattern.\n+     * @param arguments Arguments. The first element must be the requested\n+     * value that raised the exception.\n+     */\n+    protected MathIllegalNumberException(Localizable general,\n+                                         Number wrong,\n+                                         Object ... arguments) {\n+        super(general, wrong, arguments);\n         argument = wrong;\n     }\n \n--- a/src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java\n+++ b/src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java\n  */\n package org.apache.commons.math.exception;\n \n+import org.apache.commons.math.util.Localizable;\n import org.apache.commons.math.util.LocalizedFormats;\n \n /**\n      *\n      * @param wrong Value that is smaller than the minimum.\n      * @param min minimum.\n+     * @param boundIsAllowed Whether {@code min} is included in the allowed range.\n      */\n     public NumberIsTooSmallException(Number wrong,\n                                      Number min,\n                                      boolean boundIsAllowed) {\n-        super((boundIsAllowed ?\n+        this(null, wrong, min, boundIsAllowed);\n+    }\n+\n+    /**\n+     * Construct the exception with a specific context.\n+     *\n+     * @param specific Specific contexte pattern .\n+     * @param wrong Value that is smaller than the minimum.\n+     * @param min minimum.\n+     * @param boundIsAllowed Whether {@code min} is included in the allowed range.\n+     */\n+    public NumberIsTooSmallException(Localizable specific,\n+                                     Number wrong,\n+                                     Number min,\n+                                     boolean boundIsAllowed) {\n+        super(specific,\n+              (boundIsAllowed ?\n                LocalizedFormats.NUMBER_TOO_SMALL :\n                LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED),\n               wrong, min);\n--- a/src/main/java/org/apache/commons/math/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/util/LocalizedFormats.java\n     WEIGHT_AT_LEAST_ONE_NON_ZERO(\"weigth array must contain at least one non-zero value\"),\n     WRONG_BLOCK_LENGTH(\"wrong array shape (block length = {0}, expected {1})\"),\n     WRONG_NUMBER_OF_POINTS(\"{0} points are required, got only {1}\"),\n+    NUMBER_OF_POINTS(\"number of points ({0})\"), /* keep */\n     ZERO_DENOMINATOR(\"denominator must be different from 0\"),\n     ZERO_DENOMINATOR_IN_FRACTION(\"zero denominator in fraction {0}/{1}\"),\n     ZERO_FRACTION_TO_DIVIDE_BY(\"the fraction to divide by must not be zero: {0}/{1}\"),", "timestamp": 1278632706, "metainfo": ""}