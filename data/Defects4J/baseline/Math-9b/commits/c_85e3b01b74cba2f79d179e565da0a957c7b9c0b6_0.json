{"sha": "85e3b01b74cba2f79d179e565da0a957c7b9c0b6", "log": "Eliminated extra pass to calc mean in std calculation.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/java/org/apache/commons/math/stat/StatUtils.java\n      * @return the skewness of the values or Double.NaN if the array is empty\n      */\n     public static double skewness(double[] values, int begin, int length) {\n-        \n-        testInput(values, begin, length);\n-        \n+\n+        testInput(values, begin, length);\n+\n         // Initialize the skewness\n         double skewness = Double.NaN;\n \n         // Get the mean and the standard deviation\n         double mean = mean(values, begin, length);\n-        double stdDev = standardDeviation(values, begin, length);\n-\n-        // Sum the cubes of the distance from the mean divided by the \n-        // standard deviation\n+\n+        // Calc the std, this is implemented here instead of using the \n+        // standardDeviation method eliminate a duplicate pass to get the mean\n         double accum = 0.0;\n-        for (int i = begin; i < begin + length; i++) {\n-            accum += Math.pow((values[i] - mean) / stdDev, 3.0);\n+        double accum2 = 0.0;\n+        for (int i = begin; i < begin + length; i++) {\n+            accum += Math.pow((values[i] - mean), 2.0);\n+            accum2 += (values[i] - mean);\n+        }\n+        double stdDev =\n+            Math.sqrt(\n+                (accum - (Math.pow(accum2, 2) / ((double) length)))\n+                    / (double) (length - 1));\n+\n+        // Calculate the skew as the sum the cubes of the distance \n+        // from the mean divided by the standard deviation.\n+        double accum3 = 0.0;\n+        for (int i = begin; i < begin + length; i++) {\n+            accum3 += Math.pow((values[i] - mean) / stdDev, 3.0);\n         }\n \n         // Get N\n         double n = length;\n \n         // Calculate skewness\n-        skewness = (n / ((n - 1) * (n - 2))) * accum;\n+        skewness = (n / ((n - 1) * (n - 2))) * accum3;\n \n         return skewness;\n     }\n      * @return the kurtosis of the values or Double.NaN if the array is empty\n      */\n     public static double kurtosis(double[] values, int begin, int length) {\n-        \n-        testInput(values, begin, length);\n-    \n+        testInput(values, begin, length);\n+\n         // Initialize the kurtosis\n         double kurtosis = Double.NaN;\n \n         // Get the mean and the standard deviation\n         double mean = mean(values, begin, length);\n-        double stdDev = standardDeviation(values, begin, length);\n+\n+        // Calc the std, this is implemented here instead of using the \n+        // standardDeviation method eliminate a duplicate pass to get the mean\n+        double accum = 0.0;\n+        double accum2 = 0.0;\n+        for (int i = begin; i < begin + length; i++) {\n+            accum += Math.pow((values[i] - mean), 2.0);\n+            accum2 += (values[i] - mean);\n+        }\n+        \n+        double stdDev =\n+            Math.sqrt(\n+                (accum - (Math.pow(accum2, 2) / ((double) length)))\n+                    / (double) (length - 1));\n \n         // Sum the ^4 of the distance from the mean divided by the \n         // standard deviation\n-        double accum = 0.0;\n-        for (int i = begin; i < begin + length; i++) {\n-            accum += Math.pow((values[i] - mean) / stdDev, 4.0);\n+        double accum3 = 0.0;\n+        for (int i = begin; i < begin + length; i++) {\n+            accum3 += Math.pow((values[i] - mean) / stdDev, 4.0);\n         }\n \n         // Get N\n \n         double coefficientOne = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n         double termTwo = ((3 * Math.pow(n - 1, 2.0)) / ((n - 2) * (n - 3)));\n+        \n         // Calculate kurtosis\n-        kurtosis = (coefficientOne * accum) - termTwo;\n+        kurtosis = (coefficientOne * accum3) - termTwo;\n \n         return kurtosis;\n     }", "timestamp": 1056745912, "metainfo": ""}