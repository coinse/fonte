{"sha": "98cfeedd7930e9821ea22124f2ebe74da52b534a", "log": "allow zero length vectors JIRA: MATH-391  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n \n     /**\n      * Construct a vector from an array, copying the input array.\n+     * <p>\n+     * This constructor need a non-empty {@code d} array to retrieve\n+     * the field from its first element. This implies it cannot build\n+     * 0 length vectors. To build vectors from any size, one should\n+     * use the {@link #ArrayFieldVector(Field, FieldElement[])} constructor.\n+     * </p>\n      * @param d array of Ts.\n      * @throws IllegalArgumentException if <code>d</code> is empty\n+     * @see #ArrayFieldVector(Field, FieldElement[])\n      */\n     public ArrayFieldVector(T[] d)\n         throws IllegalArgumentException {\n             throw MathRuntimeException.createIllegalArgumentException(\n                       LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n         }\n+    }\n+\n+    /**\n+     * Construct a vector from an array, copying the input array.\n+     * @param field field to which the elements belong\n+     * @param d array of Ts.\n+     * @see #ArrayFieldVector(FieldElement[])\n+     */\n+    public ArrayFieldVector(Field<T> field, T[] d) {\n+        this.field = field;\n+        data = d.clone();\n     }\n \n     /**\n      * ArrayFieldVector and not used directly, the <code>copyArray</code> may be\n      * set to <code>false</code. This will prevent the copying and improve\n      * performance as no new array will be built and no data will be copied.</p>\n+     * <p>\n+     * This constructor need a non-empty {@code d} array to retrieve\n+     * the field from its first element. This implies it cannot build\n+     * 0 length vectors. To build vectors from any size, one should\n+     * use the {@link #ArrayFieldVector(Field, FieldElement[], boolean)} constructor.\n+     * </p>\n      * @param d data for new vector\n      * @param copyArray if true, the input array will be copied, otherwise\n      * it will be referenced\n      * @throws IllegalArgumentException if <code>d</code> is empty\n      * @throws NullPointerException if <code>d</code> is null\n      * @see #ArrayFieldVector(FieldElement[])\n+     * @see #ArrayFieldVector(Field, FieldElement[], boolean)\n      */\n     public ArrayFieldVector(T[] d, boolean copyArray)\n         throws NullPointerException, IllegalArgumentException {\n-        try {\n-            field = d[0].getField();\n-            data = copyArray ? d.clone() :  d;\n-        } catch (ArrayIndexOutOfBoundsException e) {\n+        if (d.length == 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                      LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n-        }\n+                  LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n+        }\n+        field = d[0].getField();\n+        data = copyArray ? d.clone() :  d;\n+    }\n+\n+    /**\n+     * Create a new ArrayFieldVector using the input array as the underlying\n+     * data array.\n+     * <p>If an array is built specially in order to be embedded in a\n+     * ArrayFieldVector and not used directly, the <code>copyArray</code> may be\n+     * set to <code>false</code. This will prevent the copying and improve\n+     * performance as no new array will be built and no data will be copied.</p>\n+     * @param field field to which the elements belong\n+     * @param d data for new vector\n+     * @param copyArray if true, the input array will be copied, otherwise\n+     * it will be referenced\n+     * @see #ArrayFieldVector(FieldElement[], boolean)\n+     */\n+    public ArrayFieldVector(Field<T> field, T[] d, boolean copyArray) {\n+        this.field = field;\n+        data = copyArray ? d.clone() :  d;\n     }\n \n     /**\n \n     /**\n      * Construct a vector by appending one vector to another vector.\n+     * <p>\n+     * This constructor need at least one non-empty array to retrieve\n+     * the field from its first element. This implies it cannot build\n+     * 0 length vectors. To build vectors from any size, one should\n+     * use the {@link #ArrayFieldVector(Field, FieldElement[], FieldElement[])} constructor.\n+     * </p>\n      * @param v1 first vector (will be put in front of the new vector)\n      * @param v2 second vector (will be put at back of the new vector)\n      * @exception IllegalArgumentException if both vectors are empty\n+     * @see #ArrayFieldVector(Field, FieldElement[], FieldElement[])\n      */\n     public ArrayFieldVector(T[] v1, T[] v2) {\n         try {\n             throw MathRuntimeException.createIllegalArgumentException(\n                       LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n         }\n+    }\n+\n+    /**\n+     * Construct a vector by appending one vector to another vector.\n+     * @param field field to which the elements belong\n+     * @param v1 first vector (will be put in front of the new vector)\n+     * @param v2 second vector (will be put at back of the new vector)\n+     * @see #ArrayFieldVector(FieldElement[], FieldElement[])\n+     */\n+    public ArrayFieldVector(Field<T> field, T[] v1, T[] v2) {\n+        if (v1.length + v2.length == 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n+        }\n+        data = buildArray(v1.length + v2.length);\n+        System.arraycopy(v1, 0, data, 0, v1.length);\n+        System.arraycopy(v2, 0, data, v1.length, v2.length);\n+        this.field = data[0].getField();\n     }\n \n     /** Build an array of elements.\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n      * @param d data for new vector\n      * @param copyArray if true, the input array will be copied, otherwise\n      * it will be referenced\n-     * @throws IllegalArgumentException if <code>d</code> is empty\n-     * @throws NullPointerException if <code>d</code> is null\n      * @see #ArrayRealVector(double[])\n      */\n-    public ArrayRealVector(double[] d, boolean copyArray)\n-        throws NullPointerException, IllegalArgumentException {\n-        if (d == null) {\n-            throw new NullPointerException();\n-        }\n-        if (d.length == 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n-        }\n+    public ArrayRealVector(double[] d, boolean copyArray) {\n         data = copyArray ? d.clone() :  d;\n     }\n \n--- a/src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java\n         assertEquals(v,TestUtils.serializeAndRecover(v));\n     }\n \n+    public void testZeroVectors() {\n+\n+        // when the field is not specified, array cannot be empty\n+        try {\n+            new ArrayFieldVector<Fraction>(new Fraction[0]);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected behavior\n+        }\n+        try {\n+            new ArrayFieldVector<Fraction>(new Fraction[0], true);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected behavior\n+        }\n+        try {\n+            new ArrayFieldVector<Fraction>(new Fraction[0], false);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected behavior\n+        }\n+\n+        // when the field is specified, array can be empty\n+        assertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0]).getDimension());\n+        assertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0], true).getDimension());\n+        assertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0], false).getDimension());\n+\n+    }\n+\n     /** verifies that two vectors are equals */\n     protected void checkArray(String msg, Fraction[] m, Fraction[] n) {\n         if (m.length != n.length) {\n--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.fraction.Fraction;\n+import org.apache.commons.math.fraction.FractionField;\n import org.apache.commons.math.util.FastMath;\n \n /**\n         assertEquals(\"testData is 9.0 \", 9.0, v14.getEntry(2));\n         assertEquals(\"testData is 1.0 \", 1.0, v14.getEntry(3));\n \n-        try {\n-            new ArrayRealVector((double[]) null, false);\n-            fail(\"expected exception\");\n-        } catch (NullPointerException npe) {\n-            // expected\n-        }\n-\n-        try {\n-            new ArrayRealVector(new double[0], false);\n-            fail(\"expected exception\");\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-\n    }\n \n     public void testDataInOut() {\n         assertEquals(v,TestUtils.serializeAndRecover(v));\n     }\n \n+    public void testZeroVectors() {\n+        assertEquals(0, new ArrayRealVector(new double[0]).getDimension());\n+        assertEquals(0, new ArrayRealVector(new double[0], true).getDimension());\n+        assertEquals(0, new ArrayRealVector(new double[0], false).getDimension());\n+    }\n \n     public void testMinMax()  {\n         ArrayRealVector v1 = new ArrayRealVector(new double[] { 0, -6, 4, 12, 7 });", "timestamp": 1286123983, "metainfo": ""}