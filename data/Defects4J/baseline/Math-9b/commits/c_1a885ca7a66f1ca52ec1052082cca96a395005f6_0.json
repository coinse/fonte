{"sha": "1a885ca7a66f1ca52ec1052082cca96a395005f6", "log": "javadoc only.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Max.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.20 $ $Date: 2004/07/10 17:09:08 $\n+ * @version $Revision: 1.21 $ $Date: 2004/07/11 18:39:08 $\n  */\n public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the mean of the values or Double.NaN if length = 0\n+     * @return the maximum of the values or Double.NaN if length = 0\n      * @throws IllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.21 $ $Date: 2004/07/10 17:09:08 $\n+ * @version $Revision: 1.22 $ $Date: 2004/07/11 18:39:08 $\n  */\n public class Min extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n      * @param values the input array\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the mean of the values or Double.NaN if length = 0\n+     * @return the minimum of the values or Double.NaN if length = 0\n      * @throws IllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n      */\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.22 $ $Date: 2004/07/04 09:02:36 $\n+ * @version $Revision: 1.23 $ $Date: 2004/07/11 18:39:08 $\n  */\n public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n \n      * <li>Returns (for any value of <code>p</code>) <code>values[0]</code>\n      *  if <code>values</code> has length <code>1</code></li>\n      * <li>Throws <code>IllegalArgumentException</code> if <code>values</code>\n-     *  is null </li>\n+     * is null or p is not a valid quantile value (p must be greater than 0\n+     * and less than or equal to 100) </li>\n      * </ul>\n      * <p>\n      * See {@link Percentile} for a description of the percentile estimation\n      * \n      * @param values input array of values\n      * @param p the percentile value to compute\n-     * @return the result of the evaluation or Double.NaN if the array is empty\n-     * @throws IllegalArgumentException if <code>values</code> is null\n+     * @return the percentile value or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if <code>values</code> is null \n+     *     or p is invalid\n      */\n     public double evaluate(final double[] values, final double p) {\n         test(values, 0, 0);\n      *  if <code>length = 1 </code></li>\n      * <li>Throws <code>IllegalArgumentException</code> if <code>values</code>\n      *  is null , <code>begin</code> or <code>length</code> is invalid, or \n-     * <code>p</code> is not a valid quantile value</li>\n+     * <code>p</code> is not a valid quantile value (p must be greater than 0\n+     * and less than or equal to 100)</li>\n      * </ul>\n      * <p>\n       * See {@link Percentile} for a description of the percentile estimation", "timestamp": 1089571148, "metainfo": ""}