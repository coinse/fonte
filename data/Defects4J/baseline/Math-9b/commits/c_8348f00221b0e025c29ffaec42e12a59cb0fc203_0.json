{"sha": "8348f00221b0e025c29ffaec42e12a59cb0fc203", "log": "reverting change introduced in 1035003: it was the javadoc that did not correspond to the intended behavior, not the code  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/MessageFactory.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/MessageFactory.java\n      * @param locale Locale in which the message should be translated.\n      * @param specific Format specifier (may be null).\n      * @param general Format specifier (may be null).\n-     * @param arguments Format arguments. They will be substituted first in\n-     * the {@code specific} format specifier, then the remaining arguments\n-     * will be substituted in the {@code general} format specifier.\n+     * @param arguments Format arguments. They will be substituted in\n+     * <em>both</em> the {@code general} and {@code specific} format specifiers.\n      * @return a localized message string.\n      */\n     public static String buildMessage(Locale locale,\n                                       Localizable specific,\n                                       Localizable general,\n                                       Object ... arguments) {\n-\n         final StringBuilder sb = new StringBuilder();\n-        Object[] generalArgs = arguments;\n-\n+        if (general != null) {\n+            final MessageFormat fmt = new MessageFormat(general.getLocalizedString(locale), locale);\n+            sb.append(fmt.format(arguments));\n+        }\n         if (specific != null) {\n-\n-            final MessageFormat specificFmt = new MessageFormat(specific.getLocalizedString(locale), locale);\n-\n-            // split the arguments: first specific ones then general ones\n-            final int nbSpecific = Math.min(arguments.length, specificFmt.getFormatsByArgumentIndex().length);\n-            final int nbGeneral  = arguments.length - nbSpecific;\n-            Object[] specificArgs = new Object[nbSpecific];\n-            System.arraycopy(arguments, 0, specificArgs, 0, nbSpecific);\n-            generalArgs = new Object[nbGeneral];\n-            System.arraycopy(arguments, nbSpecific, generalArgs, 0, nbGeneral);\n-\n-            // build the message\n-            sb.append(specificFmt.format(specificArgs));\n-\n-        }\n-\n-        if (general != null) {\n-            if (specific != null) {\n+            if (general != null) {\n                 sb.append(\": \");\n             }\n-            final MessageFormat generalFmt  = new MessageFormat(general.getLocalizedString(locale), locale);\n-            sb.append(generalFmt.format(generalArgs));\n+            final MessageFormat fmt = new MessageFormat(specific.getLocalizedString(locale), locale);\n+            sb.append(fmt.format(arguments));\n         }\n \n         return sb.toString();\n--- a/src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/util/MessageFactoryTest.java\n         Localizable general  = new DummyLocalizable(\"general  {0} / {1}\");\n         String message = MessageFactory.buildMessage(Locale.FRENCH, specific, general,\n                                                      0, 1, 2, 'a', 'b');\n-        Assert.assertEquals(\"specific 0 - 1 - 2: general  a / b\", message);\n+        Assert.assertEquals(\"general  0 / 1: specific 0 - 1 - 2\", message);\n     }\n \n     @Test\n     public void testNullSpecific() {\n         Localizable general  = new DummyLocalizable(\"general  {0} / {1}\");\n         String message = MessageFactory.buildMessage(Locale.FRENCH, null, general,\n-                                                     'a', 'b');\n-        Assert.assertEquals(\"general  a / b\", message);\n+                                                     0, 1, 2, 'a', 'b');\n+        Assert.assertEquals(\"general  0 / 1\", message);\n     }\n \n     @Test\n     public void testNullGeneral() {\n         Localizable specific = new DummyLocalizable(\"specific {0} - {1} - {2}\");\n         String message = MessageFactory.buildMessage(Locale.FRENCH, specific, null,\n-                                                     0, 1, 2);\n+                                                     0, 1, 2, 'a', 'b');\n         Assert.assertEquals(\"specific 0 - 1 - 2\", message);\n     }\n-\n \n     @Test\n     public void testNull() {", "timestamp": 1289770328, "metainfo": ""}