{"sha": "38fc230af06b5b44b0cb76a615e35590e31431a3", "log": "Changed chi-square tests to pass long[] arrays of observed counts.   ", "commit": "\n--- a/src/test/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n package org.apache.commons.math.random;\n \n import junit.framework.Test;\n-import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import java.security.NoSuchProviderException;\n import java.security.NoSuchAlgorithmException;\n \n import org.apache.commons.math.RetryTestCase;\n import org.apache.commons.math.stat.Frequency;\n-import org.apache.commons.math.stat.inference.TestStatisticImpl;\n+import org.apache.commons.math.stat.inference.ChiSquareTestImpl;\n import org.apache.commons.math.stat.univariate.SummaryStatistics;\n \n /**\n  * Test cases for the RandomData class.\n  *\n- * @version $Revision: 1.15 $ $Date: 2004/04/12 02:27:49 $\n+ * @version $Revision: 1.16 $ $Date: 2004/05/03 03:08:08 $\n  */\n \n public final class RandomDataTest extends RetryTestCase {\n     private String[] hex = \n         {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"}; \n     private RandomDataImpl randomData = new RandomDataImpl(); \n-    private TestStatisticImpl testStatistic = new TestStatisticImpl();\n-    \n+    private ChiSquareTestImpl testStatistic = new ChiSquareTestImpl();\n     \n     public void setUp() { \n     }\n             assertTrue(\"nextInt range\",(value >= 0) && (value <= 3));\n             freq.addValue(value);  \n         }\n-        double[] observed = new double[4];\n+        long[] observed = new long[4];\n         for (int i=0; i<4; i++) {\n             observed[i] = freq.getCount(i);\n         } \n             assertTrue(\"nextInt range\",(value >= 0) && (value <= 3));\n             freq.addValue(value);  \n         }\n-        double[] observed = new double[4];\n+        long[] observed = new long[4];\n         for (int i=0; i<4; i++) {\n             observed[i] = freq.getCount(i);\n         } \n             assertTrue(\"nextInt range\",(value >= 0) && (value <= 3));\n             freq.addValue(value);  \n         }\n-        double[] observed = new double[4];\n+        long[] observed = new long[4];\n         for (int i=0; i<4; i++) {\n             observed[i] = freq.getCount(i);\n         } \n             assertTrue(\"nextInt range\",(value >= 0) && (value <= 3));\n             freq.addValue(value);  \n         }\n-        double[] observed = new double[4];\n+        long[] observed = new long[4];\n         for (int i=0; i<4; i++) {\n             observed[i] = freq.getCount(i);\n         } \n             }\n         }\n         double[] expected = new double[16];\n-        double[] observed = new double[16];\n+        long[] observed = new long[16];\n         for (int i = 0; i < 16; i++) {\n             expected[i] = (double)smallSampleSize*100/(double)16;\n             observed[i] = f.getCount(hex[i]);\n             }\n         }\n         double[] expected = new double[16];\n-        double[] observed = new double[16];\n+        long[] observed = new long[16];\n         for (int i = 0; i < 16; i++) {\n             expected[i] = (double)smallSampleSize*100/(double)16;\n             observed[i] = f.getCount(hex[i]);\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n-        double[] expected = new double[] {500,500};\n-        double[] observed = new double[] {0,0};\n+        double[] expected = {500,500};\n+        long[] observed = {0,0};\n         double lower = -1d;\n         double upper = 20d;\n         double midpoint = (lower + upper)/2d;\n     public void testNextSample() {\n        Object[][] c = {{\"0\",\"1\"},{\"0\",\"2\"},{\"0\",\"3\"},{\"0\",\"4\"},{\"1\",\"2\"},\n                         {\"1\",\"3\"},{\"1\",\"4\"},{\"2\",\"3\"},{\"2\",\"4\"},{\"3\",\"4\"}};\n-       double[] observed = {0,0,0,0,0,0,0,0,0,0};\n+       long[] observed = {0,0,0,0,0,0,0,0,0,0};\n        double[] expected = {100,100,100,100,100,100,100,100,100,100};\n        \n        HashSet cPop = new HashSet();  //{0,1,2,3,4}\n     \n     /** tests for nextPermutation */\n     public void testNextPermutation() {\n-         int[][] p = {{0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,0,1},{2,1,0}};\n-         double[] observed = {0,0,0,0,0,0,};\n-         double[] expected = {100,100,100,100,100,100};\n-         \n-         for (int i = 0; i < 600; i++) {\n-             int[] perm = randomData.nextPermutation(3,3);\n-             observed[findPerm(p,perm)]++;\n-         }  \n-         \n+        int[][] p = {{0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,0,1},{2,1,0}};\n+        long[] observed = {0,0,0,0,0,0};\n+        double[] expected = {100,100,100,100,100,100};\n+        \n+        for (int i = 0; i < 600; i++) {\n+            int[] perm = randomData.nextPermutation(3,3);\n+            observed[findPerm(p,perm)]++;\n+        }  \n+        \n         /* Use ChiSquare dist with df = 6-1 = 5, alpha = .001\n          * Change to 15.09 for alpha = .01\n          */\n         assertTrue(\"chi-square test -- will fail about 1 in 1000 times\",\n-            testStatistic.chiSquare(expected,observed) < 20.52); \n-         \n-         // Check size = 1 boundary case\n-         int[] perm = randomData.nextPermutation(1,1);\n-         if ((perm.length != 1) || (perm[0] != 0)){\n-           fail(\"bad permutation for n = 1, sample k = 1\");\n-           \n-        // Make sure we fail for k size > n \n-        try {\n-           perm = randomData.nextPermutation(2,3);\n-           fail(\"permutation k > n, expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-           ;\n-        }\n-           \n-        // Make sure we fail for n = 0\n-        try {\n-           perm = randomData.nextPermutation(0,0);\n-           fail(\"permutation k = n = 0, expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-           ;\n-        }\n-           \n-        \n-       }\n-         \n+                testStatistic.chiSquare(expected,observed) < 20.52); \n+        \n+        // Check size = 1 boundary case\n+        int[] perm = randomData.nextPermutation(1,1);\n+        if ((perm.length != 1) || (perm[0] != 0)){\n+            fail(\"bad permutation for n = 1, sample k = 1\");\n+            \n+            // Make sure we fail for k size > n \n+            try {\n+                perm = randomData.nextPermutation(2,3);\n+                fail(\"permutation k > n, expecting IllegalArgumentException\");\n+            } catch (IllegalArgumentException ex) {\n+                ;\n+            }\n+            \n+            // Make sure we fail for n = 0\n+            try {\n+                perm = randomData.nextPermutation(0,0);\n+                fail(\"permutation k = n = 0, expecting IllegalArgumentException\");\n+            } catch (IllegalArgumentException ex) {\n+                ;\n+            }               \n+        }       \n     }\n     \n     private int findPerm(int[][] p, int[] samp) {\n         }        \n         fail(\"permutation not found\");\n         return -1;\n-    }\n-                \n-                       \n-            \n-        \n-    \n+    }   \n }\n ", "timestamp": 1083553688, "metainfo": ""}