{"sha": "4eb810e816aac9329ae05715a8ebb8aa7c400031", "log": "Serialization changes for optimization.  Still need to add junit test, but for this it doesn't look like a blocker.   ", "commit": "\n--- a/src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java\n \n package org.apache.commons.math.optimization;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;\n \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface DifferentiableMultivariateRealOptimizer extends Serializable {\n+public interface DifferentiableMultivariateRealOptimizer {\n \n     /** Set the maximal number of iterations of the algorithm.\n      * @param maxIterations maximal number of function calls\n--- a/src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java\n \n package org.apache.commons.math.optimization;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface DifferentiableMultivariateVectorialOptimizer extends Serializable {\n+public interface DifferentiableMultivariateVectorialOptimizer {\n \n     /** Set the maximal number of iterations of the algorithm.\n      * @param maxIterations maximal number of function calls\n--- a/src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java\n \n package org.apache.commons.math.optimization;\n \n+import java.io.Serializable;\n import java.util.Arrays;\n import java.util.Comparator;\n \n  * @since 2.0\n  */\n public class MultiStartDifferentiableMultivariateRealOptimizer\n-    implements DifferentiableMultivariateRealOptimizer {\n+    implements DifferentiableMultivariateRealOptimizer, Serializable {\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = -3220364832729994537L;\n--- a/src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n-public abstract class DirectSearchOptimizer implements MultivariateRealOptimizer, Serializable {\n-    // TODO: Add Serializable documentation\n-    // TODO: Check Serializable implementation\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 4299910390345933369L;\n+public abstract class DirectSearchOptimizer implements MultivariateRealOptimizer {\n \n     /** Simplex. */\n     protected RealPointValuePair[] simplex;\n--- a/src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n  */\n public abstract class AbstractLeastSquaresOptimizer implements DifferentiableMultivariateVectorialOptimizer {\n \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 5413193243329026789L;\n-\n     /** Default maximal number of iterations allowed. */\n     public static final int DEFAULT_MAX_ITERATIONS = 100;\n \n--- a/src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java\n \n     /** Default maximal number of iterations allowed. */\n     public static final int DEFAULT_MAX_ITERATIONS = 100;\n-\n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 1357126012308766636L;\n \n     /** Maximal number of iterations allowed. */\n     private int maxIterations;\n--- a/src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java\n  */\n \n package org.apache.commons.math.optimization.general;\n+\n+import java.io.Serializable;\n \n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.linear.DecompositionSolver;\n  *\n  */\n \n-public class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer {\n+public class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer implements Serializable {\n \n     /** Serializable version identifier */\n     private static final long serialVersionUID = 7011643996279553223L;\n--- a/src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n  */\n package org.apache.commons.math.optimization.general;\n \n+import java.io.Serializable;\n import java.util.Arrays;\n \n import org.apache.commons.math.FunctionEvaluationException;\n  * @since 2.0\n  *\n  */\n-public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n+public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer implements Serializable {\n \n     /** Serializable version identifier */\n     private static final long serialVersionUID = 8851282236194244323L;\n--- a/src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java\n \n public class NonLinearConjugateGradientOptimizer\n     extends AbstractScalarDifferentiableOptimizer\n-    implements DifferentiableMultivariateRealOptimizer {\n+    implements DifferentiableMultivariateRealOptimizer, Serializable {\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = -6545223926568155458L;\n     }\n \n     /** Default identity preconditioner. */\n-    private static class IdentityPreconditioner implements Preconditioner {\n+    private static class IdentityPreconditioner implements Preconditioner, Serializable {\n \n         /** Serializable version identifier. */\n         private static final long serialVersionUID = 1868235977809734023L;\n--- a/src/java/org/apache/commons/math/optimization/general/Preconditioner.java\n+++ b/src/java/org/apache/commons/math/optimization/general/Preconditioner.java\n \n package org.apache.commons.math.optimization.general;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.FunctionEvaluationException;\n \n /** \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface Preconditioner extends Serializable {\n+public interface Preconditioner {\n \n     /** \n      * Precondition a search direction.\n--- a/src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java\n+++ b/src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java\n             new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);\n         optimizer.setMaxIterations(100);\n         optimizer.setPreconditioner(new Preconditioner() {\n-            private static final long serialVersionUID = -2935127802358453014L;\n             public double[] precondition(double[] point, double[] r) {\n                 double[] d = r.clone();\n                 d[0] /=  72.0;\n--- a/src/test/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n import java.util.HashSet;\n \n import org.apache.commons.math.RetryTestCase;\n+import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.stat.Frequency;\n import org.apache.commons.math.stat.inference.ChiSquareTestImpl;\n import org.apache.commons.math.stat.descriptive.SummaryStatistics;\n \t\t}\n \t}\n \t\n+\t// Disable until we have equals\n+\t//public void testSerial() {\n+\t//    assertEquals(randomData, TestUtils.serializeAndRecover(randomData));\n+\t//}\n \t\n \tprivate int findPerm(int[][] p, int[] samp) {\n \t\tfor (int i = 0; i < p.length; i++) {", "timestamp": 1244409858, "metainfo": ""}