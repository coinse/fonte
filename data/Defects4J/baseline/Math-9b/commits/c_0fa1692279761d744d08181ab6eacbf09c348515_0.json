{"sha": "0fa1692279761d744d08181ab6eacbf09c348515", "log": "Replaced size adjustment of all steps of fixed steps Runge-Kutta integrators by a truncation of the last step only. JIRA: MATH-214  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.IntegratorException;\n+import org.apache.commons.math.ode.events.CombinedEventsManager;\n import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.DummyStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n     }\n     interpolator.storeTime(t0);\n \n-    // recompute the step\n-    long    nbStep    = Math.max(1l, Math.abs(Math.round((t - t0) / step)));\n-    boolean lastStep  = false;\n+    // set up integration control objects\n     stepStart = t0;\n-    stepSize  = (t - t0) / nbStep;\n+    stepSize  = step;\n     for (StepHandler handler : stepHandlers) {\n         handler.reset();\n     }\n-    for (long i = 0; ! lastStep; ++i) {\n+    CombinedEventsManager manager = addEndTimeChecker(t, eventsHandlersManager);\n+    boolean lastStep = false;\n+\n+    // main integration loop\n+    while (!lastStep) {\n \n       interpolator.shift();\n \n-      boolean needUpdate = false;\n       for (boolean loop = true; loop;) {\n \n         // first stage\n           yTmp[j] = y[j] + stepSize * sum;\n         }\n \n-        // Discrete events handling\n+        // discrete events handling\n         interpolator.storeTime(stepStart + stepSize);\n-        if (eventsHandlersManager.evaluateStep(interpolator)) {\n-          needUpdate = true;\n-          stepSize = eventsHandlersManager.getEventTime() - stepStart;\n+        if (manager.evaluateStep(interpolator)) {\n+          stepSize = manager.getEventTime() - stepStart;\n         } else {\n           loop = false;\n         }\n       // the step has been accepted\n       final double nextStep = stepStart + stepSize;\n       System.arraycopy(yTmp, 0, y, 0, y0.length);\n-      eventsHandlersManager.stepAccepted(nextStep, y);\n-      if (eventsHandlersManager.stop()) {\n-        lastStep = true;\n-      } else {\n-        lastStep = (i == (nbStep - 1));\n-      }\n+      manager.stepAccepted(nextStep, y);\n+      lastStep = manager.stop();\n \n       // provide the step data to the step handler\n       interpolator.storeTime(nextStep);\n       }\n       stepStart = nextStep;\n \n-      if (eventsHandlersManager.reset(stepStart, y) && ! lastStep) {\n+      if (manager.reset(stepStart, y) && ! lastStep) {\n         // some events handler has triggered changes that\n         // invalidate the derivatives, we need to recompute them\n         equations.computeDerivatives(stepStart, y, yDotK[0]);\n       }\n \n-      if (needUpdate) {\n-        // an event handler has changed the step\n-        // we need to recompute stepsize\n-        nbStep = Math.max(1l, Math.abs(Math.round((t - stepStart) / step)));\n-        stepSize = (t - stepStart) / nbStep;\n-        i = -1;\n-      }\n+      // make sure step size is set to default before next step\n+      stepSize = step;\n \n     }\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n import junit.framework.*;\n \n import org.apache.commons.math.ode.DerivativeException;\n+import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.events.EventHandler;\n     private TestProblem3 pb;\n   }\n \n+  public void testStepSize()\n+    throws DerivativeException, IntegratorException {\n+      final double step = 1.23456;\n+      FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n+      integ.addStepHandler(new StepHandler() {\n+          private static final long serialVersionUID = 0L;\n+          public void handleStep(StepInterpolator interpolator, boolean isLast) {\n+              if (! isLast) {\n+                  assertEquals(step,\n+                               interpolator.getCurrentTime() - interpolator.getPreviousTime(),\n+                               1.0e-12);\n+              }\n+          }\n+          public boolean requiresDenseOutput() {\n+              return false;\n+          }\n+          public void reset() {\n+          }          \n+      });\n+      integ.integrate(new FirstOrderDifferentialEquations() {\n+          private static final long serialVersionUID = 0L;\n+          public void computeDerivatives(double t, double[] y, double[] dot) {\n+              dot[0] = 1.0;\n+          }\n+          public int getDimension() {\n+              return 1;\n+          }\n+      }, 0.0, new double[] { 0.0 }, 5.0, new double[1]);\n+  }\n+\n   public static Test suite() {\n     return new TestSuite(ClassicalRungeKuttaIntegratorTest.class);\n   }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n import junit.framework.*;\n \n import org.apache.commons.math.ode.DerivativeException;\n+import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.nonstiff.EulerIntegrator;\n+import org.apache.commons.math.ode.sampling.StepHandler;\n+import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n public class EulerIntegratorTest\n   extends TestCase {\n     assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n \n   }\n-  \n+\n+  public void testStepSize()\n+    throws DerivativeException, IntegratorException {\n+      final double step = 1.23456;\n+      FirstOrderIntegrator integ = new EulerIntegrator(step);\n+      integ.addStepHandler(new StepHandler() {\n+        private static final long serialVersionUID = 0L;\n+        public void handleStep(StepInterpolator interpolator, boolean isLast) {\n+            if (! isLast) {\n+                assertEquals(step,\n+                             interpolator.getCurrentTime() - interpolator.getPreviousTime(),\n+                             1.0e-12);\n+            }\n+        }\n+        public boolean requiresDenseOutput() {\n+            return false;\n+        }\n+        public void reset() {\n+        }          \n+      });\n+      integ.integrate(new FirstOrderDifferentialEquations() {\n+                          private static final long serialVersionUID = 0L;\n+                          public void computeDerivatives(double t, double[] y, double[] dot) {\n+                              dot[0] = 1.0;\n+                          }\n+                          public int getDimension() {\n+                              return 1;\n+                          }\n+                      }, 0.0, new double[] { 0.0 }, 5.0, new double[1]);\n+  }\n+\n   public static Test suite() {\n     return new TestSuite(EulerIntegratorTest.class);\n   }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n import junit.framework.*;\n \n import org.apache.commons.math.ode.DerivativeException;\n+import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.events.EventHandler;\n     private TestProblem3 pb;\n   }\n \n+  public void testStepSize()\n+    throws DerivativeException, IntegratorException {\n+      final double step = 1.23456;\n+      FirstOrderIntegrator integ = new GillIntegrator(step);\n+      integ.addStepHandler(new StepHandler() {\n+          private static final long serialVersionUID = 0L;\n+          public void handleStep(StepInterpolator interpolator, boolean isLast) {\n+              if (! isLast) {\n+                  assertEquals(step,\n+                               interpolator.getCurrentTime() - interpolator.getPreviousTime(),\n+                               1.0e-12);\n+              }\n+          }\n+          public boolean requiresDenseOutput() {\n+              return false;\n+          }\n+          public void reset() {\n+          }          \n+      });\n+      integ.integrate(new FirstOrderDifferentialEquations() {\n+          private static final long serialVersionUID = 0L;\n+          public void computeDerivatives(double t, double[] y, double[] dot) {\n+              dot[0] = 1.0;\n+          }\n+          public int getDimension() {\n+              return 1;\n+          }\n+      }, 0.0, new double[] { 0.0 }, 5.0, new double[1]);\n+  }\n+\n   public static Test suite() {\n     return new TestSuite(GillIntegratorTest.class);\n   }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n import junit.framework.*;\n \n import org.apache.commons.math.ode.DerivativeException;\n+import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.nonstiff.MidpointIntegrator;\n+import org.apache.commons.math.ode.sampling.StepHandler;\n+import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n public class MidpointIntegratorTest\n   extends TestCase {\n \n   }\n \n+  public void testStepSize()\n+    throws DerivativeException, IntegratorException {\n+      final double step = 1.23456;\n+      FirstOrderIntegrator integ = new MidpointIntegrator(step);\n+      integ.addStepHandler(new StepHandler() {\n+          private static final long serialVersionUID = 0L;\n+          public void handleStep(StepInterpolator interpolator, boolean isLast) {\n+              if (! isLast) {\n+                  assertEquals(step,\n+                               interpolator.getCurrentTime() - interpolator.getPreviousTime(),\n+                               1.0e-12);\n+              }\n+          }\n+          public boolean requiresDenseOutput() {\n+              return false;\n+          }\n+          public void reset() {\n+          }          \n+      });\n+      integ.integrate(new FirstOrderDifferentialEquations() {\n+          private static final long serialVersionUID = 0L;\n+          public void computeDerivatives(double t, double[] y, double[] dot) {\n+              dot[0] = 1.0;\n+          }\n+          public int getDimension() {\n+              return 1;\n+          }\n+      }, 0.0, new double[] { 0.0 }, 5.0, new double[1]);\n+  }\n+\n   public static Test suite() {\n     return new TestSuite(MidpointIntegratorTest.class);\n   }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java\n                 final double h = 0.001 * (interpolator.getCurrentTime() - interpolator.getPreviousTime());\n                 final double t = interpolator.getCurrentTime() - 300 * h;\n \n+                if (Math.abs(h) < 10 * Math.ulp(t)) {\n+                    return;\n+                }\n+\n                 interpolator.setInterpolatedTime(t - 4 * h);\n                 final double[] yM4h = interpolator.getInterpolatedState().clone();\n                 interpolator.setInterpolatedTime(t - 3 * h);\n                                                32 * (yP3h[i] - yM3h[i]) +\n                                              -168 * (yP2h[i] - yM2h[i]) +\n                                               672 * (yP1h[i] - yM1h[i])) / (840 * h);\n+                    if (Math.abs(approYDot - yDot[i]) >= threshold) {\n+                        System.out.println(\"gotcha!\");\n+                    }\n                     assertEquals(approYDot, yDot[i], threshold);\n                 }\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n import junit.framework.*;\n \n import org.apache.commons.math.ode.DerivativeException;\n+import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.events.EventHandler;\n \n   }\n \n+  public void testStepSize()\n+    throws DerivativeException, IntegratorException {\n+      final double step = 1.23456;\n+      FirstOrderIntegrator integ = new ThreeEighthesIntegrator(step);\n+      integ.addStepHandler(new StepHandler() {\n+          private static final long serialVersionUID = 0L;\n+          public void handleStep(StepInterpolator interpolator, boolean isLast) {\n+              if (! isLast) {\n+                  assertEquals(step,\n+                               interpolator.getCurrentTime() - interpolator.getPreviousTime(),\n+                               1.0e-12);\n+              }\n+          }\n+          public boolean requiresDenseOutput() {\n+              return false;\n+          }\n+          public void reset() {\n+          }          \n+      });\n+      integ.integrate(new FirstOrderDifferentialEquations() {\n+          private static final long serialVersionUID = 0L;\n+          public void computeDerivatives(double t, double[] y, double[] dot) {\n+              dot[0] = 1.0;\n+          }\n+          public int getDimension() {\n+              return 1;\n+          }\n+      }, 0.0, new double[] { 0.0 }, 5.0, new double[1]);\n+  }\n+\n   public static Test suite() {\n     return new TestSuite(ThreeEighthesIntegratorTest.class);\n   }", "timestamp": 1215693644, "metainfo": ""}