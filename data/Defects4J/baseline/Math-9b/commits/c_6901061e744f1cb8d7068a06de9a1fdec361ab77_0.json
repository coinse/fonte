{"sha": "6901061e744f1cb8d7068a06de9a1fdec361ab77", "log": "Added submatrix accessors. Pr #30897 Submitted by: Kim van der Linde Reviewed by: Phil Steitz   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n  * Matrix element indexing is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.\n  * \n- * @version $Revision: 1.22 $ $Date: 2004/09/05 01:19:23 $\n+ * @version $Revision: 1.23 $ $Date: 2004/10/09 21:15:56 $\n  */\n public interface RealMatrix {\n \n      * @return norm\n      */\n     double getNorm();\n-\n+    \n+    /**\n+     * Gets a submatrix. Rows and columns are indicated\n+     * counting from 0 to n-1.\n+     *\n+     * @param startRow Initial row index\n+     * @param endRow Final row index\n+     * @param startColumn Initial column index\n+     * @param endColumn Final column index\n+     * @return The subMatrix containing the data of the\n+     *         specified rows and columns\n+     * @exception MatrixIndexException  if the indices are not valid\n+     */\n+   RealMatrix getSubMatrix(int startRow, int endRow, int startColumn,\n+            int endColumn) throws MatrixIndexException;\n+   \n+   /**\n+    * Gets a submatrix. Rows and columns are indicated\n+    * counting from 0 to n-1.\n+    *\n+    * @param rows Array of row indices.\n+    * @param columns Array of column indices.\n+    * @return The subMatrix containing the data in the\n+    *         specified rows and columns\n+    * @exception MatrixIndexException if row or column selections are not valid\n+    */\n+   RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)\n+   throws MatrixIndexException;\n+             \n     /**\n      * Returns the entries in row number <code>row</code> as an array.\n      * <p>\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.</li></ul>\n  *\n- * @version $Revision: 1.28 $ $Date: 2004/09/05 01:19:23 $\n+ * @version $Revision: 1.29 $ $Date: 2004/10/09 21:15:56 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n \n         }\n         return maxColSum;\n     }\n+    \n+    /**\n+     * Gets a submatrix. Rows and columns are indicated\n+     * counting from 0 to n-1.\n+     *\n+     * @param startRow Initial row index\n+     * @param endRow Final row index\n+     * @param startColumn Initial column index\n+     * @param endColumn Final column index\n+     * @return The subMatrix containing the data of the\n+     *         specified rows and columns\n+     * @exception MatrixIndexException if row or column selections are not valid\n+     */\n+    public RealMatrix getSubMatrix(int startRow, int endRow, int startColumn,\n+            int endColumn) throws MatrixIndexException {\n+        if (startRow < 0 || startRow > endRow || endRow > data.length\n+             || startColumn < 0 || startColumn > endColumn\n+             || endColumn > data[0].length ) {\n+            throw new MatrixIndexException(\n+                    \"invalid row or column index selection\");\n+        }\n+        RealMatrixImpl subMatrix = new RealMatrixImpl(endRow - startRow+1,\n+                endColumn - startColumn+1);\n+        double[][] subMatrixData = subMatrix.getDataRef();\n+        for (int i = startRow; i <= endRow; i++) {\n+            for (int j = startColumn; j <= endColumn; j++) {\n+                    subMatrixData[i - startRow][j - startColumn] = data[i][j];\n+                }\n+            }\n+        return subMatrix;\n+    }\n+    \n+    /**\n+     * Gets a submatrix. Rows and columns are indicated\n+     * counting from 0 to n-1.\n+     *\n+     * @param rows Array of row indices must be non-empty\n+     * @param columns Array of column indices must be non-empty\n+     * @return The subMatrix containing the data in the\n+     *     specified rows and columns\n+     * @exception MatrixIndexException  if supplied row or column index arrays\n+     *     are not valid\n+     */\n+    public RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)\n+    throws MatrixIndexException {\n+        if (selectedRows.length * selectedColumns.length == 0) {\n+            throw new MatrixIndexException(\n+                    \"selected row and column index arrays must be non-empty\");\n+        }\n+        RealMatrixImpl subMatrix = new RealMatrixImpl(selectedRows.length,\n+                selectedColumns.length);\n+        double[][] subMatrixData = subMatrix.getDataRef();\n+        try  {\n+            for (int i = 0; i < selectedRows.length; i++) {\n+                for (int j = 0; j < selectedColumns.length; j++) {\n+                    subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];\n+                }\n+            }\n+        }\n+        catch (ArrayIndexOutOfBoundsException e) {\n+            throw new MatrixIndexException(\"matrix dimension mismatch\");\n+        }\n+        return subMatrix;\n+    } \n \n      /**\n      * Returns the entries in row number <code>row</code> as an array.\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n /**\n  * Test cases for the {@link RealMatrixImpl} class.\n  *\n- * @version $Revision: 1.15 $ $Date: 2004/09/05 01:19:23 $\n+ * @version $Revision: 1.16 $ $Date: 2004/10/09 21:15:56 $\n  */\n \n public final class RealMatrixImplTest extends TestCase {\n     \n-    private double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };\n-    private double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};\n-    private double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };\n-    private double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d}, \n+    // 3 x 3 identity matrix\n+    protected double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };\n+    \n+    // Test data for group operations\n+    protected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };\n+    protected double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};\n+    protected double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };\n+    protected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d}, \n        {-1d,0d,-8d} };\n-    private double[] testDataRow1 = {1d,2d,3d};\n-    private double[] testDataCol3 = {3d,3d,8d};\n-    private double[][] testDataInv = \n+    protected double[] testDataRow1 = {1d,2d,3d};\n+    protected double[] testDataCol3 = {3d,3d,8d};\n+    protected double[][] testDataInv = \n         { {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };\n-    private double[] preMultTest = {8,12,33};\n-    private double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};\n-    private double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};\n-    private double[][] testDataPlusInv = \n+    protected double[] preMultTest = {8,12,33};\n+    protected double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};\n+    protected double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};\n+    protected double[][] testDataPlusInv = \n         { {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };\n-    private double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };\n-    private double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };\n-    private double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d}, {0.33333333333333,0d,0.33333333333333} };\n-    private double[][] singular = { {2d,3d}, {2d,3d} };\n-    private double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},\n+    \n+    // lu decomposition tests\n+    protected double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };\n+    protected double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d},\n+            {0.33333333333333,0d,0.33333333333333} };\n+    \n+    // singular matrices\n+    protected double[][] singular = { {2d,3d}, {2d,3d} };\n+    protected double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},\n         {7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd\n-    private double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };\n-    private double[][] detData2 = { {1d, 3d}, {2d, 4d}};\n-    private double[] testVector = {1,2,3};\n-    private double[] testVector2 = {1,2,3,4};\n-    private double entryTolerance = 10E-16;\n-    private double normTolerance = 10E-14;\n+    protected double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };\n+    protected double[][] detData2 = { {1d, 3d}, {2d, 4d}};\n+    \n+    // vectors\n+    protected double[] testVector = {1,2,3};\n+    protected double[] testVector2 = {1,2,3,4};\n+    \n+    // submatrix accessor tests\n+    protected double[][] subTestData = {{1, 2, 3, 4}, {1.5, 2.5, 3.5, 4.5},\n+            {2, 4, 6, 8}, {4, 5, 6, 7}}; \n+    // array selections\n+    protected double[][] subRows02Cols13 = { {2, 4}, {4, 8}};\n+    protected double[][] subRows03Cols12 = { {2, 3}, {5, 6}};\n+    protected double[][] subRows03Cols123 = { {2, 3, 4} , {5, 6, 7}};\n+    // effective permutations\n+    protected double[][] subRows20Cols123 = { {4, 6, 8} , {2, 3, 4}};\n+    protected double[][] subRows31Cols31 = {{7, 5}, {4.5, 2.5}};\n+    // contiguous ranges\n+    protected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};\n+    protected double[][] subRows23Cols00 = {{2} , {4}};\n+    protected double[][] subRows00Cols33 = {{4}};\n+    \n+    // tolerances\n+    protected double entryTolerance = 10E-16;\n+    protected double normTolerance = 10E-14;\n     \n     public RealMatrixImplTest(String name) {\n         super(name);\n         assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);\n         assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);   \n         \n+    }\n+    \n+    // test submatrix accessors\n+    public void testSubMatrix() {\n+        RealMatrix m = new RealMatrixImpl(subTestData);\n+        RealMatrix mRows23Cols00 = new RealMatrixImpl(subRows23Cols00);\n+        RealMatrix mRows00Cols33 = new RealMatrixImpl(subRows00Cols33);\n+        RealMatrix mRows01Cols23 = new RealMatrixImpl(subRows01Cols23);\n+        RealMatrix mRows02Cols13 = new RealMatrixImpl(subRows02Cols13);\n+        RealMatrix mRows03Cols12 = new RealMatrixImpl(subRows03Cols12);\n+        RealMatrix mRows03Cols123 = new RealMatrixImpl(subRows03Cols123);\n+        RealMatrix mRows20Cols123 = new RealMatrixImpl(subRows20Cols123);\n+        RealMatrix mRows31Cols31 = new RealMatrixImpl(subRows31Cols31);\n+        assertClose(\"Rows23Cols00\", mRows23Cols00, \n+                m.getSubMatrix(2 , 3 , 0, 0), normTolerance );\n+        assertClose(\"Rows00Cols33\", mRows00Cols33, \n+                m.getSubMatrix(0 , 0 , 3, 3), normTolerance );\n+        assertClose(\"Rows01Cols23\", mRows01Cols23,\n+                m.getSubMatrix(0 , 1 , 2, 3), normTolerance );   \n+        assertClose(\"Rows02Cols13\", mRows02Cols13,\n+                m.getSubMatrix(new int[] {0,2}, new int[] {1,3}), normTolerance);  \n+        assertClose(\"Rows03Cols12\", mRows03Cols12,\n+                m.getSubMatrix(new int[] {0,3}, new int[] {1,2}), normTolerance);  \n+        assertClose(\"Rows03Cols123\", mRows03Cols123,\n+                m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3}), normTolerance); \n+        assertClose(\"Rows20Cols123\", mRows20Cols123,\n+                m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3}), normTolerance); \n+        assertClose(\"Rows31Cols31\", mRows31Cols31,\n+                m.getSubMatrix(new int[] {3,1}, new int[] {3,1}), normTolerance); \n+        try {\n+            m.getSubMatrix(1,0,2,4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(-1,1,2,2);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(1,0,2,2);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(1,0,2,4);\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(new int[] {}, new int[] {0});\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n+        try {\n+            m.getSubMatrix(new int[] {0}, new int[] {4});\n+            fail(\"Expecting MatrixIndexException\");\n+        } catch (MatrixIndexException ex) {\n+            // expected\n+        }\n     }\n     \n     //--------------- -----------------Protected methods", "timestamp": 1097356556, "metainfo": ""}