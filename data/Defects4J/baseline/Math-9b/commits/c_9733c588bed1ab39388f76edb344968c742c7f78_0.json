{"sha": "9733c588bed1ab39388f76edb344968c742c7f78", "log": "MATH-466 Throwing exceptions when preconditions are violated.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java\n \n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.random.RandomVectorGenerator;\n      * Create a multi-start optimizer from a single-start optimizer.\n      *\n      * @param optimizer Single-start optimizer to wrap.\n-     * @param starts Number of starts to perform (including the\n-     * first one), multi-start is disabled if value is less than or\n-     * equal to 1.\n+     * @param starts Number of starts to perform.\n      * @param generator Random vector generator to use for restarts.\n+     * @throws NullArgumentException if {@code optimizer} or {@code generator}\n+     * is {@code null}.\n+     * @throws NotStrictlyPositiveException if {@code starts < 1}.\n      */\n     protected BaseMultiStartMultivariateRealOptimizer(final BaseMultivariateRealOptimizer<FUNC> optimizer,\n                                                       final int starts,\n                                                       final RandomVectorGenerator generator) {\n+        if (optimizer == null ||\n+            generator == null) {\n+            throw new NullArgumentException();\n+        }\n+        if (starts < 1) {\n+            throw new NotStrictlyPositiveException(starts);\n+        }\n+\n         this.optimizer = optimizer;\n         this.starts = starts;\n         this.generator = generator;\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java\n import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.random.RandomVectorGenerator;\n      * Create a multi-start optimizer from a single-start optimizer.\n      *\n      * @param optimizer Single-start optimizer to wrap.\n-     * @param starts Number of starts to perform (including the\n-     * first one), multi-start is disabled if value is less than or\n-     * equal to 1.\n+     * @param starts Number of starts to perform.\n      * @param generator Random vector generator to use for restarts.\n+     * @throws NullArgumentException if {@code optimizer} or {@code generator}\n+     * is {@code null}.\n+     * @throws NotStrictlyPositiveException if {@code starts < 1}.\n      */\n     protected BaseMultiStartMultivariateVectorialOptimizer(final BaseMultivariateVectorialOptimizer<FUNC> optimizer,\n                                                            final int starts,\n                                                            final RandomVectorGenerator generator) {\n+        if (optimizer == null ||\n+            generator == null) {\n+            throw new NullArgumentException();\n+        }\n+        if (starts < 1) {\n+            throw new NotStrictlyPositiveException(starts);\n+        }\n+\n         this.optimizer = optimizer;\n         this.starts = starts;\n         this.generator = generator;", "timestamp": 1294419657, "metainfo": ""}