{"sha": "f5146d6ba239ed25b8098c573e8c461857111fd3", "log": "added test for BigFraction serialization  ", "commit": "\n--- a/src/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/java/org/apache/commons/math/fraction/BigFraction.java\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class BigFraction extends Number implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable {\n-    // TODO: Add Serializable documentation\n-    // TODO: Check Serializable implementation\n+public class BigFraction\n+    extends Number\n+    implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable {\n \n     /** A fraction representing \"2 / 1\". */\n     public static final BigFraction TWO = new BigFraction(2);\n--- a/src/test/org/apache/commons/math/fraction/BigFractionTest.java\n+++ b/src/test/org/apache/commons/math/fraction/BigFractionTest.java\n import java.math.BigInteger;\n \n import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.TestUtils;\n \n import junit.framework.TestCase;\n \n         assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(BigInteger.valueOf(-13l)));\n     }\n \n+    public void testSerial() throws FractionConversionException {\n+        BigFraction[] fractions = {\n+            new BigFraction(3, 4), BigFraction.ONE, BigFraction.ZERO,\n+            new BigFraction(17), new BigFraction(Math.PI, 1000),\n+            new BigFraction(-5, 2)\n+        };\n+        for (BigFraction fraction : fractions) {\n+            assertEquals(fraction, TestUtils.serializeAndRecover(fraction));\n+        }\n+    }\n+\n }", "timestamp": 1248107265, "metainfo": ""}