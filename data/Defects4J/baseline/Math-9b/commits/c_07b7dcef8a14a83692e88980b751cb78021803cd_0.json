{"sha": "07b7dcef8a14a83692e88980b751cb78021803cd", "log": "Made standard matrix entry addressing explicit in javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/BigMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrix.java\n  * Interface defining a real-valued matrix with basic algebraic operations, using\n  * BigDecimal representations for the entries.\n  *\n- * @version $Revision: 1.5 $ $Date: 2004/08/22 01:42:58 $\n+ * @version $Revision: 1.6 $ $Date: 2004/09/01 21:26:11 $\n  */\n public interface BigMatrix {\n \n     \n     /**\n      * Returns the entries in row number <code>row</code> as an array.\n+     * <p>\n+     * Row indices start at 1.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 < row <= rowDimension.</code>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater\n-     *                              than the number of rows in this matrix\n+     * @throws MatrixIndexException if the specified row index is not valid\n      */\n     BigDecimal[] getRow(int row) throws MatrixIndexException;\n \n     /**\n      * Returns the entries in row number <code>row</code> as an array\n      * of double values.\n+     * <p>\n+     * Row indices start at 1.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 < row <= rowDimension.</code>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater\n-     *                              than the number of rows in this matrix\n+     * @throws MatrixIndexException if the specified row index is not valid\n      */\n     double [] getRowAsDoubleArray(int row) throws MatrixIndexException;\n \n     /**\n      * Returns the entries in column number <code>col</code> as an array.\n-     *\n-     * @param col  column to fetch\n+     * <p>\n+     * Column indices start at 1.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 < column <= columnDimension.</code>\n+     *\n+     * @param col the column to be fetched\n      * @return array of entries in the column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater\n-     *                              than the number of columns in this matrix\n+     * @throws MatrixIndexException if the specified column index is not valid\n      */\n     BigDecimal[] getColumn(int col) throws MatrixIndexException;\n \n     /**\n      * Returns the entries in column number <code>col</code> as an array\n      * of double values.\n-     *\n-     * @param col  column to fetch\n+     * <p>\n+     * Column indices start at 1.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 < column <= columnDimension.</code>\n+     *\n+     * @param col the column to be fetched\n      * @return array of entries in the column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater\n-     *                              than the number of columns in this matrix\n+     * @throws MatrixIndexException if the specified column index is not valid\n      */\n     double [] getColumnAsDoubleArray(int col) throws MatrixIndexException;\n \n     /**\n      * Returns the entry in the specified row and column.\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n      *\n      * @param row  row location of entry to be fetched  \n      * @param column  column location of entry to be fetched\n      * @return matrix entry in row,column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n-     *                              the dimensions of this matrix\n+     * @throws MatrixIndexException if the row or column index is not valid\n      */\n     BigDecimal getEntry(int row, int column) throws MatrixIndexException;\n     \n     /**\n-     * Returns the entry in the specified row and column as a double\n+     * Returns the entry in the specified row and column as a double.\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n      *\n      * @param row  row location of entry to be fetched\n      * @param column  column location of entry to be fetched\n      * @return matrix entry in row,column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n-     *                              the dimensions of this matrix\n+     * @throws MatrixIndexException if the row or column index is not valid\n      */\n     double getEntryAsDouble(int row, int column) throws MatrixIndexException;\n \n     /**\n      * Sets the entry in the specified row and column to the specified value.\n-     *\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * \n      * @param row    row location of entry to be set \n      * @param column    column location of entry to be set\n      * @param value  value to set \n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n-     *                              he dimensions of this matrix\n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the row\n+     * or column index is not valid\n      */\n     void setEntry(int row, int column, BigDecimal value)\n         throws MatrixIndexException;\n     \n     /**\n      * Sets the entry in the specified row and column to the specified value.\n-     *\n-     * @param row    row location of entry to be set\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * \n+     * @param row    row location of entry to be set \n      * @param column    column location of entry to be set\n-     * @param value  value to set\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside\n-     *                              he dimensions of this matrix\n+     * @param value  value to set \n+     * @throws org.apache.commons.math.linear.MatrixIndexException if the row\n+     * or column index is not valid\n      */\n     void setEntry(int row, int column, double value)\n         throws MatrixIndexException;\n     /**\n      * Sets the entry in the specified row and column to the \n      * <code>BigDecimal</code> value represented by the input string.\n-     *\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * \n      * @param row  row location of entry to be set\n      * @param column  column location of entry to be set\n      * @param value  value to set\n      * @throws org.apache.commons.math.linear.MatrixIndexException if the \n-     *     specified coordinate is outside the dimensions of this matrix\n+     *     row or column index is not valid\n      * @throws NumberFormatException if <code>value</code> is not a valid\n      *     representation of a <code>BigDecimal</code> value\n      */\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n  * before using any of the methods above.\n  *\n- * @version $Revision: 1.4 $ $Date: 2004/08/22 01:42:58 $\n+ * @version $Revision: 1.5 $ $Date: 2004/09/01 21:26:11 $\n  */\n public class BigMatrixImpl implements BigMatrix, Serializable {\n     \n     \n     /**\n      * Returns the entries in row number <code>row</code> as an array.\n+     * <p>\n+     * Row indices start at 1.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 < row <= rowDimension.</code>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n-     * @throws MatrixIndexException if the specified row is greater \n-     *                              than the number of rows in this matrix\n+     * @throws MatrixIndexException if the specified row index is not valid\n      */\n     public BigDecimal[] getRow(int row) throws MatrixIndexException {\n         if ( !isValidCoordinate( row, 1 ) ) {\n         return out;\n     }\n     \n-    /**\n+     /**\n      * Returns the entries in row number <code>row</code> as an array\n      * of double values.\n+     * <p>\n+     * Row indices start at 1.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 < row <= rowDimension.</code>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n-     *    specified row is greater than the number of rows in this matrix\n+     * @throws MatrixIndexException if the specified row index is not valid\n      */\n     public double[] getRowAsDoubleArray(int row) throws MatrixIndexException {\n         if ( !isValidCoordinate( row, 1 ) ) {\n         return out;\n     }\n     \n-    /**\n+     /**\n      * Returns the entries in column number <code>col</code> as an array.\n-     *\n-     * @param col  column to fetch\n+     * <p>\n+     * Column indices start at 1.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 < column <= columnDimension.</code>\n+     *\n+     * @param col the column to be fetched\n      * @return array of entries in the column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n-     *     specified column is greater than the number of columns in this matrix\n+     * @throws MatrixIndexException if the specified column index is not valid\n      */\n     public BigDecimal[] getColumn(int col) throws MatrixIndexException {\n         if ( !isValidCoordinate(1, col) ) {\n     /**\n      * Returns the entries in column number <code>col</code> as an array\n      * of double values.\n-     *\n-     * @param col  column to fetch\n+     * <p>\n+     * Column indices start at 1.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 < column <= columnDimension.</code>\n+     *\n+     * @param col the column to be fetched\n      * @return array of entries in the column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n-     *   specified column is greater than the number of columns in this matrix\n+     * @throws MatrixIndexException if the specified column index is not valid\n      */\n     public double[] getColumnAsDoubleArray(int col) throws MatrixIndexException {\n         if ( !isValidCoordinate( 1, col ) ) {\n         return out;\n     }\n     \n-    /**\n+     /**\n      * Returns the entry in the specified row and column.\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n      *\n      * @param row  row location of entry to be fetched  \n      * @param column  column location of entry to be fetched\n      * @return matrix entry in row,column\n-     * @throws MatrixIndexException if the specified coordinate is outside \n-     *                              the dimensions of this matrix\n+     * @throws MatrixIndexException if the row or column index is not valid\n      */\n     public BigDecimal getEntry(int row, int column)\n     throws MatrixIndexException {\n     }\n     \n     /**\n-     * Returns the entry in the specified row and column as a double\n+     * Returns the entry in the specified row and column as a double.\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n      *\n      * @param row  row location of entry to be fetched\n      * @param column  column location of entry to be fetched\n      * @return matrix entry in row,column\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n-     *     specified coordinate is outside the dimensions of this matrix\n+     * @throws MatrixIndexException if the row\n+     * or column index is not valid\n      */\n     public double getEntryAsDouble(int row, int column) throws MatrixIndexException {\n         return getEntry(row,column).doubleValue();\n     \n     /**\n      * Sets the entry in the specified row and column to the specified value.\n-     *\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * \n      * @param row    row location of entry to be set \n      * @param column    column location of entry to be set\n      * @param value  value to set \n-     * @throws MatrixIndexException if the specified coordinate is outside\n-     *                              he dimensions of this matrix\n+     * @throws MatrixIndexException if the row or column index is not valid\n      */\n     public void setEntry(int row, int column, BigDecimal value)\n     throws MatrixIndexException {\n     \n     /**\n      * Sets the entry in the specified row and column to the specified value.\n-     *\n-     * @param row    row location of entry to be set\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * \n+     * @param row    row location of entry to be set \n      * @param column    column location of entry to be set\n-     * @param value  value to set\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n-     *     specified coordinate is outside the dimensions of this matrix\n+     * @param value  value to set \n+     * @throws MatrixIndexException if the row or column index is not valid\n      */\n     public void setEntry(int row, int column, double value) throws MatrixIndexException {\n         setEntry(row, column, new BigDecimal(value));\n     }\n     \n-    /**\n+     /**\n      * Sets the entry in the specified row and column to the \n      * <code>BigDecimal</code> value represented by the input string.\n-     *\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * \n      * @param row  row location of entry to be set\n      * @param column  column location of entry to be set\n      * @param value  value to set\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n-     *     specified coordinate is outside the dimensions of this matrix\n+     * @throws MatrixIndexException if the row or column index is not valid\n      * @throws NumberFormatException if <code>value</code> is not a valid\n      *     representation of a <code>BigDecimal</code> value\n      */\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n \n /**\n  * Interface defining a real-valued matrix with basic algebraic operations\n- * @version $Revision: 1.20 $ $Date: 2004/08/22 01:42:58 $\n+ * @version $Revision: 1.21 $ $Date: 2004/09/01 21:26:11 $\n  */\n public interface RealMatrix {\n \n \n     /**\n      * Returns the entries in row number <code>row</code> as an array.\n+     * <p>\n+     * Row indices start at 1.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 < row <= rowDimension.</code>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n-     * @throws MatrixIndexException if the specified row is greater\n-     *                              than the number of rows in this matrix\n+     * @throws MatrixIndexException if the specified row index is not valid\n      */\n     double[] getRow(int row) throws MatrixIndexException;\n \n     /**\n      * Returns the entries in column number <code>col</code> as an array.\n-     *\n-     * @param col  column to fetch\n+     * <p>\n+     * Column indices start at 1.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 < column <= columnDimension.</code>\n+     *\n+     * @param col the column to be fetched\n      * @return array of entries in the column\n-     * @throws MatrixIndexException if the specified column is greater\n-     *                              than the number of columns in this matrix\n+     * @throws MatrixIndexException if the specified column index is not valid\n      */\n     double[] getColumn(int col) throws MatrixIndexException;\n \n     /**\n      * Returns the entry in the specified row and column.\n-     *\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * \n      * @param row  row location of entry to be fetched\n      * @param column  column location of entry to be fetched\n      * @return matrix entry in row,column\n-     * @throws MatrixIndexException if the specified coordinate is outside\n-     *                              the dimensions of this matrix\n+     * @throws MatrixIndexException if the row or column index is not valid\n      */\n     double getEntry(int row, int column) throws MatrixIndexException;\n \n     /**\n      * Sets the entry in the specified row and column to the specified value.\n-     *\n-     * @param row    row location of entry to be set\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * \n+     * @param row    row location of entry to be set \n      * @param column    column location of entry to be set\n-     * @param value  value to set\n-     * @throws MatrixIndexException if the specified coordinate is outside\n-     *                              he dimensions of this matrix\n+     * @param value  value to set \n+     * @throws MatrixIndexException if the row or column index is not valid\n      */\n     void setEntry(int row, int column, double value)\n         throws MatrixIndexException;\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n  * before using any of the methods above.\n  *\n- * @version $Revision: 1.26 $ $Date: 2004/08/22 01:42:58 $\n+ * @version $Revision: 1.27 $ $Date: 2004/09/01 21:26:11 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n \n         return maxColSum;\n     }\n \n-    /**\n+     /**\n      * Returns the entries in row number <code>row</code> as an array.\n+     * <p>\n+     * Row indices start at 1.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 < row <= rowDimension.</code>\n      *\n      * @param row the row to be fetched\n      * @return array of entries in the row\n-     * @throws MatrixIndexException if the specified row is greater\n-     *                              than the number of rows in this matrix\n+     * @throws MatrixIndexException if the specified row index is not valid\n      */\n     public double[] getRow(int row) throws MatrixIndexException {\n         if ( !isValidCoordinate( row, 1 ) ) {\n \n     /**\n      * Returns the entries in column number <code>col</code> as an array.\n-     *\n-     * @param col  column to fetch\n+     * <p>\n+     * Column indices start at 1.  A <code>MatrixIndexException</code> is thrown\n+     * unless <code>0 < column <= columnDimension.</code>\n+     *\n+     * @param col the column to be fetched\n      * @return array of entries in the column\n-     * @throws MatrixIndexException if the specified column is greater\n-     *                              than the number of columns in this matrix\n+     * @throws MatrixIndexException if the specified column index is not valid\n      */\n     public double[] getColumn(int col) throws MatrixIndexException {\n         if ( !isValidCoordinate(1, col) ) {\n \n     /**\n      * Returns the entry in the specified row and column.\n-     *\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * \n      * @param row  row location of entry to be fetched\n      * @param column  column location of entry to be fetched\n      * @return matrix entry in row,column\n-     * @throws MatrixIndexException if the specified coordinate is outside\n-     *                              the dimensions of this matrix\n+     * @throws MatrixIndexException if the row or column index is not valid\n      */\n     public double getEntry(int row, int column)\n         throws MatrixIndexException {\n \n     /**\n      * Sets the entry in the specified row and column to the specified value.\n-     *\n-     * @param row    row location of entry to be set\n+     * <p>\n+     * Row and column indices start at 1 and must satisfy \n+     * <ul>\n+     * <li><code>0 < row <= rowDimension</code></li>\n+     * <li><code> 0 < column <= columnDimension</code></li>\n+     * </ul>\n+     * otherwise a <code>MatrixIndexException</code> is thrown.\n+     * \n+     * @param row    row location of entry to be set \n      * @param column    column location of entry to be set\n-     * @param value  value to set\n-     * @throws MatrixIndexException if the specified coordinate is outside\n-     *                              he dimensions of this matrix\n+     * @param value  value to set \n+     * @throws MatrixIndexException if the row or column index is not valid\n      */\n     public void setEntry(int row, int column, double value)\n         throws MatrixIndexException {", "timestamp": 1094073971, "metainfo": ""}