{"sha": "2d7504596a40ac182f09e651971ebfc97f0a09d5", "log": "MATH-786 Reverting most of the changes performed in revision 1336458, because the caching of the hash code could be the source of inconsistent behaviour, and we are lacking proof that the performance gain is worth it. The implementation (from r1336458) of the \"hashCode\" method is retained.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/Pair.java\n+++ b/src/main/java/org/apache/commons/math3/util/Pair.java\n     private final K key;\n     /** Value. */\n     private final V value;\n-    /** Whether the pair contents can be assumed to be immutable. */\n-    private final boolean isImmutable;\n-    /** Cached has code. */\n-    private final int cachedHashCode;\n-\n-    /**\n-     * Create an entry representing a mapping from the specified key to the\n-     * specified value.\n-     * If the pair can be assumed to be immutable, the hash code will be\n-     * cached.\n-     *\n-     * @param k Key.\n-     * @param v Value.\n-     * @param assumeImmutable Whether the pair contents can be assumed to\n-     * be immutable.\n-     */\n-    public Pair(K k, V v, boolean assumeImmutable) {\n-        key = k;\n-        value = v;\n-        isImmutable = assumeImmutable;\n-        cachedHashCode = computeHashCode();\n-    }\n \n     /**\n      * Create an entry representing a mapping from the specified key to the\n      * @param v Value.\n      */\n     public Pair(K k, V v) {\n-        this(k, v, false);\n-    }\n-\n-    /**\n-     * Create an entry representing the same mapping as the specified entry.\n-     * If the pair can be assumed to be immutable, the hash code will be\n-     * cached.\n-     *\n-     * @param entry Entry to copy.\n-     * @param assumeImmutable Whether the pair contents can be assumed to\n-     * be immutable.\n-     */\n-    public Pair(Pair<? extends K, ? extends V> entry, boolean assumeImmutable) {\n-        this(entry.getKey(), entry.getValue(), assumeImmutable);\n+        key = k;\n+        value = v;\n     }\n \n     /**\n      * @param entry Entry to copy.\n      */\n     public Pair(Pair<? extends K, ? extends V> entry) {\n-        this(entry, false);\n+        this(entry.getKey(), entry.getValue());\n     }\n \n     /**\n         } else {\n             Pair<?, ?> oP = (Pair<?, ?>) o;\n             return (key == null ?\n-                    oP.getKey() == null :\n-                    key.equals(oP.getKey())) &&\n+                    oP.key == null :\n+                    key.equals(oP.key)) &&\n                 (value == null ?\n-                 oP.getValue() == null :\n-                 value.equals(oP.getValue()));\n+                 oP.value == null :\n+                 value.equals(oP.value));\n         }\n     }\n \n      */\n     @Override\n     public int hashCode() {\n-        return isImmutable ? cachedHashCode : computeHashCode();\n-    }\n-\n-    /**\n-     * Compute a hash code.\n-     *\n-     * @return the hash code value.\n-     */\n-    private final int computeHashCode() {\n         int result = key == null ? 0 : key.hashCode();\n \n         final int h = value == null ? 0 : value.hashCode();\n--- a/src/test/java/org/apache/commons/math3/util/PairTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/PairTest.java\n         // Different contents, different hash codes.\n         m2.set(2);\n         Assert.assertFalse(p1.hashCode() == p2.hashCode());\n-\n-        // Test cache.\n-\n-        final MyInteger m3 = new MyInteger(1);\n-        final Pair<MyInteger, MyInteger> p3 = new Pair<MyInteger, MyInteger>(m3, m3, true);\n-        final int hC3 = p3.hashCode();\n-        // Contents change will not affect the hash code because it is cached.\n-        m3.set(3);\n-        Assert.assertTrue(hC3 == p3.hashCode());\n-\n-        final Pair<MyInteger, MyInteger> p4 = new Pair<MyInteger, MyInteger>(p3, false);\n-        // p3 and p4 do not have the same hash code because p4 was contructed after m3\n-        // was changed.\n-        Assert.assertFalse(p4.hashCode() == p3.hashCode());\n-        final int hC4 = p4.hashCode();\n-        // Contents change will affect the hash code because it is not cached.\n-        m3.set(4);\n-        Assert.assertFalse(hC4 == p4.hashCode());\n     }\n \n     /**", "timestamp": 1336692967, "metainfo": ""}