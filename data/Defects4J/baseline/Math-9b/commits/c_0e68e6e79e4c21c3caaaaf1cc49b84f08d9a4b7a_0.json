{"sha": "0e68e6e79e4c21c3caaaaf1cc49b84f08d9a4b7a", "log": "Start work on JIRA: MATH-575. Made InvalidRepresentationException extend MathIllegalArgumentException and localized error messages for this exception.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     INSUFFICIENT_ROWS_AND_COLUMNS(\"insufficient data: only {0} rows and {1} columns.\"),\n     INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(\"{0} method needs at least two previous points\"),\n     INTERNAL_ERROR(\"internal error, please fill a bug report at {0}\"),\n+    INVALID_BINARY_DIGIT(\"invalid binary digit: {0}\"),\n     INVALID_BRACKETING_PARAMETERS(\"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\"),\n     INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\"),\n     INVALID_ITERATIONS_LIMITS(\"invalid iteration limits: min={0}, max={1}\"),\n--- a/src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java\n+++ b/src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java\n      * @param representation inner representation of the chromosome\n      */\n     public AbstractListChromosome(final List<T> representation) {\n-        try {\n-            checkValidity(representation);\n-        } catch (InvalidRepresentationException e) {\n-            throw new IllegalArgumentException(String.format(\"Invalid representation for %s\", getClass().getSimpleName()), e);\n-        }\n+        checkValidity(representation);\n         this.representation = Collections.unmodifiableList(new ArrayList<T> (representation));\n     }\n \n--- a/src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java\n+++ b/src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n \n /**\n     protected void checkValidity(List<Integer> chromosomeRepresentation) throws InvalidRepresentationException {\n         for (int i : chromosomeRepresentation) {\n             if (i < 0 || i >1)\n-                throw new InvalidRepresentationException(\"Elements can be only 0 or 1.\");\n+                throw new InvalidRepresentationException(\n+                        LocalizedFormats.INVALID_BINARY_DIGIT, i);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java\n+++ b/src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java\n  */\n package org.apache.commons.math.genetics;\n \n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.util.Localizable;\n+\n /**\n  * Exception indicating that the representation of a chromosome is not valid.\n  *\n  * @version $Id$\n  * @since 2.0\n  */\n-public class InvalidRepresentationException extends Exception {\n+public class InvalidRepresentationException extends MathIllegalArgumentException {\n \n     /** Serialization version id */\n     private static final long serialVersionUID = 1L;\n \n     /**\n-     * Constructor\n+     * Construct an InvalidRepresentationException with a specialized message.\n+     *\n+     * @param specialized Message pattern.\n+     * @param args Arguments.\n      */\n-    public InvalidRepresentationException() {\n-        super();\n-    }\n-\n-    /**\n-     * Construct an InvalidRepresentationException\n-     * @param arg0 exception message\n-     */\n-    public InvalidRepresentationException(String arg0) {\n-        super(arg0);\n-    }\n-\n-    /**\n-     * Construct an InvalidRepresentationException\n-     * @param arg0 cause\n-     */\n-    public InvalidRepresentationException(Throwable arg0) {\n-        super(arg0);\n-    }\n-\n-    /**\n-     * Construct an InvalidRepresentationException\n-     *\n-     * @param arg0 exception message\n-     * @param arg1 cause\n-     */\n-    public InvalidRepresentationException(String arg0, Throwable arg1) {\n-        super(arg0, arg1);\n+    public InvalidRepresentationException(Localizable pattern,\n+            Object ... args) {\n+       super(pattern, args);\n     }\n \n }\n--- a/src/main/java/org/apache/commons/math/genetics/RandomKey.java\n+++ b/src/main/java/org/apache/commons/math/genetics/RandomKey.java\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n  * <p>\n     protected void checkValidity(java.util.List<Double> chromosomeRepresentation) throws InvalidRepresentationException {\n         for (double val : chromosomeRepresentation) {\n             if (val < 0 || val > 1) {\n-                throw new InvalidRepresentationException(\"Values of representation must be in [0,1] interval\");\n+                throw new InvalidRepresentationException(\n+                        LocalizedFormats.OUT_OF_RANGE_SIMPLE, val, 0, 1);\n             }\n         }\n     }\n--- a/src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java\n+++ b/src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java\n                 new DummyBinaryChromosome(repr);\n                 Assert.fail(\"Exception not caught\");\n             } catch (IllegalArgumentException e) {\n-\n+                // Expected\n             }\n         }\n     }\n--- a/src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java\n+++ b/src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java\n         Assert.assertEquals(\"a\", decoded.get(2));\n         Assert.assertEquals(\"c\", decoded.get(3));\n         Assert.assertEquals(\"d\", decoded.get(4));\n+    }\n+    \n+    @Test\n+    public void testInvalidRepresentation() {\n+        try {\n+            DummyRandomKey drk = new DummyRandomKey(new Double[] {0.1, 0.1, 2d, 0.8, 0.2});\n+            Assert.fail(\"Expecting InvalidRepresentationException\");\n+        } catch (IllegalArgumentException ex) {\n+            // Expected\n+        }\n     }\n \n     @Test", "timestamp": 1307941775, "metainfo": ""}