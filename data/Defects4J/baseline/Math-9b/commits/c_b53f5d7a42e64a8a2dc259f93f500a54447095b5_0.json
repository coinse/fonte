{"sha": "b53f5d7a42e64a8a2dc259f93f500a54447095b5", "log": "Added AggregateSummaryStatistics class to support aggregation of SummaryStatistics.  JIRA: MATH-224 Reported by Andre Panisson Patched by John Bollinger   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.stat.descriptive;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * <p>\n+ * A StatisticalSummary that aggregates statistics from several data sets or\n+ * data set partitions.  In its simplest usage mode, the client creates an\n+ * instance via the zero-argument constructor, then uses\n+ * {@link #createContributingStatistics()} to obtain a {@code SummaryStatistics}\n+ * for each individual data set / partition.  The per-set statistics objects\n+ * are used as normal, and at any time the aggregate statistics for all the\n+ * contributors can be obtained from this object.\n+ * </p><p>\n+ * Clients with specialized requirements can use alternative constructors to\n+ * control the statistics implementations and initial values used by the\n+ * contributing and the internal aggregate {@code SummaryStatistics} objects.\n+ * </p>\n+ *\n+ * @since 2.0\n+ * @version $Revision:$ $Date:$\n+ * \n+ */\n+public class AggregateSummaryStatistics implements StatisticalSummary,\n+        Serializable {\n+\n+    /**\n+     * The serialization version of this class\n+     */\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * A SummaryStatistics serving as a prototype for creating SummaryStatistics\n+     * contributing to this aggregate \n+     */\n+    private SummaryStatistics statisticsPrototype;\n+    \n+    /**\n+     * The SummaryStatistics in which aggregate statistics are accumulated \n+     */\n+    private SummaryStatistics statistics;\n+    \n+    /**\n+     * Initializes a new AggregateSummaryStatistics with default statistics\n+     * implementations.\n+     * \n+     * @see SummaryStatistics#SummaryStatistics()\n+     */\n+    public AggregateSummaryStatistics() {\n+        this(new SummaryStatistics());\n+    }\n+    \n+    /**\n+     * Initializes a new AggregateSummaryStatistics with the specified statistics\n+     * object as a prototype for contributing statistics and for the internal\n+     * aggregate statistics.  This provides for customized statistics implementations\n+     * to be used by contributing and aggregate statistics.\n+     *\n+     * @param prototypeStatistics a {@code SummaryStatistics} serving as a\n+     *      prototype both for the internal aggregate statistics and for\n+     *      contributing statistics obtained via the\n+     *      {@code createContributingStatistics()} method.  Being a prototype\n+     *      means that other objects are initialized by copying this object's state. \n+     *      If {@code null}, a new, default statistics object is used.  Any statistic\n+     *      values in the prototype are propagated to contributing statistics\n+     *      objects and (once) into these aggregate statistics.\n+     * @see #createContributingStatistics()\n+     */\n+    public AggregateSummaryStatistics(SummaryStatistics prototypeStatistics) {\n+        this(prototypeStatistics, (prototypeStatistics == null ? null :\n+                new SummaryStatistics(prototypeStatistics)));\n+    }\n+    \n+    /**\n+     * Initializes a new AggregateSummaryStatistics with the specified statistics\n+     * object as a prototype for contributing statistics and for the internal\n+     * aggregate statistics.  This provides for different statistics implementations\n+     * to be used by contributing and aggregate statistics and for an initial\n+     * state to be supplied for the aggregate statistics.\n+     *\n+     * @param prototypeStatistics a {@code SummaryStatistics} serving as a\n+     *      prototype both for the internal aggregate statistics and for\n+     *      contributing statistics obtained via the\n+     *      {@code createContributingStatistics()} method.  Being a prototype\n+     *      means that other objects are initialized by copying this object's state. \n+     *      If {@code null}, a new, default statistics object is used.  Any statistic\n+     *      values in the prototype are propagated to contributing statistics\n+     *      objects, but not into these aggregate statistics.\n+     * @param initialStatistics a {@code SummaryStatistics} to serve as the\n+     *      internal aggregate statistics object.  If {@code null}, a new, default\n+     *      statistics object is used.\n+     * @see #createContributingStatistics()\n+     */\n+    public AggregateSummaryStatistics(SummaryStatistics prototypeStatistics,\n+            SummaryStatistics initialStatistics) {\n+        this.statisticsPrototype = ((prototypeStatistics == null) ?\n+                new SummaryStatistics() : prototypeStatistics);\n+        this.statistics = ((initialStatistics == null) ?\n+                new SummaryStatistics() : initialStatistics);\n+    }\n+    \n+    /**\n+     * {@inheritDoc}.  This version returns the maximum over all the aggregated\n+     * data.\n+     *\n+     * @see StatisticalSummary#getMax()\n+     */\n+    public double getMax() {\n+        return statistics.getMax();\n+    }\n+\n+    /**\n+     * {@inheritDoc}.  This version returns the mean of all the aggregated data.\n+     *\n+     * @see StatisticalSummary#getMean()\n+     */\n+    public double getMean() {\n+        return statistics.getMean();\n+    }\n+\n+    /**\n+     * {@inheritDoc}.  This version returns the minimum over all the aggregated\n+     * data.\n+     *\n+     * @see StatisticalSummary#getMin()\n+     */\n+    public double getMin() {\n+        return statistics.getMin();\n+    }\n+\n+    /**\n+     * {@inheritDoc}.  This version returns a count of all the aggregated data.\n+     *\n+     * @see StatisticalSummary#getN()\n+     */\n+    public long getN() {\n+        return statistics.getN();\n+    }\n+\n+    /**\n+     * {@inheritDoc}.  This version returns the standard deviation of all the\n+     * aggregated data.\n+     *\n+     * @see StatisticalSummary#getStandardDeviation()\n+     */\n+    public double getStandardDeviation() {\n+        return statistics.getStandardDeviation();\n+    }\n+\n+    /**\n+     * {@inheritDoc}.  This version returns a sum of all the aggregated data.\n+     *\n+     * @see StatisticalSummary#getSum()\n+     */\n+    public double getSum() {\n+        return statistics.getSum();\n+    }\n+\n+    /**\n+     * {@inheritDoc}.  This version returns the variance of all the aggregated\n+     * data.\n+     *\n+     * @see StatisticalSummary#getVariance()\n+     */\n+    public double getVariance() {\n+        return statistics.getVariance();\n+    }\n+\n+    /**\n+     * Creates and returns a {@code SummaryStatistics} whose data will be\n+     * aggregated with those of this {@code AggregateSummaryStatistics}. \n+     *\n+     * @return a {@code SummaryStatistics} whose data will be aggregated with\n+     *      those of this {@code AggregateSummaryStatistics}.  The initial state\n+     *      is a copy of the configured prototype statistics.\n+     */\n+    public SummaryStatistics createContributingStatistics() {\n+        SummaryStatistics contributingStatistics\n+                = new AggregatingSummaryStatistics(statistics);\n+        \n+        SummaryStatistics.copy(statisticsPrototype, contributingStatistics);\n+        \n+        return contributingStatistics;\n+    }\n+    \n+    /**\n+     * A SummaryStatistics that also forwards all values added to it to a second\n+     * {@code SummaryStatistics} for aggregation.\n+     *\n+     * @since 2.0\n+     */\n+    private static class AggregatingSummaryStatistics extends SummaryStatistics {\n+        \n+        /**\n+         * The serialization version of this class\n+         */\n+        private static final long serialVersionUID = 1L;\n+        \n+        /**\n+         * An additional SummaryStatistics into which values added to these\n+         * statistics (and possibly others) are aggregated\n+         */\n+        private SummaryStatistics aggregateStatistics;\n+        \n+        /**\n+         * Initializes a new AggregatingSummaryStatistics with the specified\n+         * aggregate statistics object\n+         *\n+         * @param aggregateStatistics a {@code SummaryStatistics} into which\n+         *      values added to this statistics object should be aggregated\n+         */\n+        public AggregatingSummaryStatistics(SummaryStatistics aggregateStatistics) {\n+            this.aggregateStatistics = aggregateStatistics;\n+        }\n+\n+        /**\n+         * {@inheritDoc}.  This version adds the provided value to the configured\n+         * aggregate after adding it to these statistics.\n+         *\n+         * @see SummaryStatistics#addValue(double)\n+         */\n+        @Override\n+        public void addValue(double value) {\n+            super.addValue(value);\n+            aggregateStatistics.addValue(value);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.stat.descriptive;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+\n+/**\n+ * Test cases for {@link AggregateSummaryStatistics}\n+ *\n+ */\n+public class AggregateSummaryStatisticsTest extends TestCase {\n+    \n+    /**\n+     * Tests the standard aggregation behavior\n+     */\n+    public void testAggregation() {\n+        AggregateSummaryStatistics aggregate = new AggregateSummaryStatistics();\n+        SummaryStatistics setOneStats = aggregate.createContributingStatistics();\n+        SummaryStatistics setTwoStats = aggregate.createContributingStatistics();\n+        \n+        assertNotNull(\"The set one contributing stats are null\", setOneStats);\n+        assertNotNull(\"The set two contributing stats are null\", setTwoStats);\n+        assertNotSame(\"Contributing stats objects are the same\", setOneStats, setTwoStats);\n+        \n+        setOneStats.addValue(2);\n+        setOneStats.addValue(3);\n+        setOneStats.addValue(5);\n+        setOneStats.addValue(7);\n+        setOneStats.addValue(11);\n+        assertEquals(\"Wrong number of set one values\", 5, setOneStats.getN());\n+        assertEquals(\"Wrong sum of set one values\", 28.0, setOneStats.getSum());\n+        \n+        setTwoStats.addValue(2);\n+        setTwoStats.addValue(4);\n+        setTwoStats.addValue(8);\n+        assertEquals(\"Wrong number of set two values\", 3, setTwoStats.getN());\n+        assertEquals(\"Wrong sum of set two values\", 14.0, setTwoStats.getSum());\n+        \n+        assertEquals(\"Wrong number of aggregate values\", 8, aggregate.getN());\n+        assertEquals(\"Wrong aggregate sum\", 42.0, aggregate.getSum());\n+    }\n+\n+    /**\n+     * Creates and returns a {@code Test} representing all the test cases in this\n+     * class\n+     *\n+     * @return a {@code Test} representing all the test cases in this class\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(AggregateSummaryStatisticsTest.class);\n+        suite.setName(\"AggregateSummaryStatistics tests\");\n+        return suite;\n+    }\n+    \n+}", "timestamp": 1240829512, "metainfo": ""}