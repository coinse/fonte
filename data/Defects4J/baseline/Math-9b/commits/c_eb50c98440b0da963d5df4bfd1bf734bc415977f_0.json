{"sha": "eb50c98440b0da963d5df4bfd1bf734bc415977f", "log": "MATH-795: In org.apache.commons.math3.linear.RealVectorAbstractTest   - factored out unit tests of RealVector RealVector.set(double),   - created unit tests of double[] RealVector.toArray(),   - factored out unit tests of RealVector RealVector.unitVector(),   - factored out unit tests of void RealVector.unitize(),   - created unit tests of Iterator<RealVector.Entry> RealVector.iterator().  In org.apache.commons.math3.linear.ArrayRealVector, removed unnecessary overrides of unitVector() and unitize().  In org.apache.commons.math3.linear.RealVector   - unitVector() and unitize() now throw an ArithmeticException when the norm is 0 (as specified in the Javadoc),   - the returned iterator() returns NoSuchElementException as specified in the general contract of iterators.    ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java\n \n     /** {@inheritDoc} */\n     @Override\n-    public RealVector unitVector() {\n-        final double norm = getNorm();\n-        if (norm == 0) {\n-            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n-        }\n-        return mapDivide(norm);\n-    }\n-\n-    /** {@inheritDoc} */\n-    @Override\n-    public void unitize() {\n-        final double norm = getNorm();\n-        if (norm == 0) {\n-            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n-        }\n-        mapDivideToSelf(norm);\n-    }\n-\n-    /** {@inheritDoc} */\n-    @Override\n     public RealVector projection(RealVector v) {\n         return v.mapMultiply(dotProduct(v) / v.dotProduct(v));\n     }\n--- a/src/main/java/org/apache/commons/math3/linear/RealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RealVector.java\n      * @throws ArithmeticException if the norm is {@code null}.\n      */\n     public RealVector unitVector() {\n-        RealVector copy = copy();\n-        copy.unitize();\n-        return copy;\n+        final double norm = getNorm();\n+        if (norm == 0) {\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n+        }\n+        return mapDivide(norm);\n     }\n \n     /**\n      * if the norm is zero.\n      */\n     public void unitize() {\n+        final double norm = getNorm();\n+        if (norm == 0) {\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n+        }\n         mapDivideToSelf(getNorm());\n     }\n \n \n             /** {@inheritDoc} */\n             public Entry next() {\n-                e.setIndex(i++);\n-                return e;\n+                if (i < dim) {\n+                    e.setIndex(i++);\n+                    return e;\n+                } else {\n+                    throw new NoSuchElementException();\n+                }\n             }\n \n             /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n package org.apache.commons.math3.linear;\n \n import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n import java.util.Random;\n \n import org.apache.commons.math3.TestUtils;\n     }\n \n     @Test\n+    public void testSet() {\n+        for (int i = 0; i < values.length; i++) {\n+            final double expected = values[i];\n+            final RealVector v = create(values);\n+            v.set(expected);\n+            for (int j = 0; j < values.length; j++) {\n+                Assert.assertEquals(\"entry #\" + j, expected, v.getEntry(j), 0);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testToArray() {\n+        final double[] data = create(values).toArray();\n+        Assert.assertNotSame(values, data);\n+        for (int i = 0; i < values.length; i++) {\n+            Assert.assertEquals(\"entry #\" + i, values[i], data[i], 0);\n+        }\n+    }\n+\n+    private void doTestUnitVector(final boolean inPlace) {\n+        final double x = getPreferredEntryValue();\n+        final double[] data = {\n+            x, 1d, x, x, 2d, x, x, x, 3d, x, x, x, x\n+        };\n+        double norm = 0d;\n+        for (int i = 0; i < data.length; i++) {\n+            norm += data[i] * data[i];\n+        }\n+        norm = FastMath.sqrt(norm);\n+        final double[] expected = new double[data.length];\n+        for (int i = 0; i < expected.length; i++) {\n+            expected[i] = data[i] / norm;\n+        }\n+        final RealVector v = create(data);\n+        final RealVector actual;\n+        if (inPlace) {\n+            v.unitize();\n+            actual = v;\n+        } else {\n+            actual = v.unitVector();\n+            Assert.assertNotSame(v, actual);\n+        }\n+        TestUtils.assertEquals(\"\", expected, actual, 0d);\n+    }\n+\n+    @Test\n+    public void testUnitVector() {\n+        doTestUnitVector(false);\n+    }\n+\n+    @Test\n+    public void testUnitize() {\n+        doTestUnitVector(true);\n+    }\n+\n+    private void doTestUnitVectorNullVector(final boolean inPlace) {\n+        final double[] data = {\n+            0d, 0d, 0d, 0d, 0d\n+        };\n+        if (inPlace) {\n+            create(data).unitize();\n+        } else {\n+            create(data).unitVector();\n+        }\n+    }\n+\n+    @Test(expected=ArithmeticException.class)\n+    public void testUnitVectorNullVector() {\n+        doTestUnitVectorNullVector(false);\n+    }\n+\n+    @Test(expected=ArithmeticException.class)\n+    public void testUnitizeNullVector() {\n+        doTestUnitVectorNullVector(true);\n+    }\n+\n+    @Test\n+    public void testIterator() {\n+        final RealVector v = create(values);\n+        final Iterator<RealVector.Entry> it = v.iterator();\n+        for (int i = 0; i < values.length; i++) {\n+            Assert.assertTrue(\"entry #\" + i, it.hasNext());\n+            final RealVector.Entry e = it.next();\n+            Assert.assertEquals(\"\", i, e.getIndex());\n+            Assert.assertEquals(\"\", values[i], e.getValue(), 0d);\n+            try {\n+                it.remove();\n+                Assert.fail(\"UnsupportedOperationException should have been thrown\");\n+            } catch (UnsupportedOperationException exc) {\n+                // Expected behavior\n+            }\n+        }\n+        Assert.assertFalse(it.hasNext());\n+        try {\n+            it.next();\n+            Assert.fail(\"NoSuchElementException should have been thrown\");\n+        } catch (NoSuchElementException e) {\n+            // Expected behavior\n+        }\n+    }\n+\n+    @Test\n     public void testDataInOut() {\n         final RealVector v1 = create(vec1);\n         final RealVector v2 = create(vec2);\n             // expected behavior\n         }\n \n-        final RealVector v_set3 = v1.copy();\n-        v_set3.set(13.0);\n-        Assert.assertEquals(\"testData is 13.0 \", 13.0, v_set3.getEntry(2), 0);\n-\n-        try {\n-            v_set3.getEntry(23);\n-            Assert.fail(\"OutOfRangeException expected\");\n-        } catch (OutOfRangeException ex) {\n-            // expected behavior\n-        }\n-\n         final RealVector v_set4 = v4.copy();\n         v_set4.setSubVector(3, v2_t);\n         Assert.assertEquals(\"testData is 1.0 \", 4.0, v_set4.getEntry(3), 0);\n         // octave dot(v1,v2_t)\n         double dot_2 = v1.dotProduct(v2_t);\n         Assert.assertEquals(\"compare val \", 32d, dot_2, normTolerance);\n-\n-        RealVector v_unitVector = v1.unitVector();\n-        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n-        assertClose(\"compare vect\", v_unitVector.toArray(),\n-                    v_unitVector_2.toArray(), normTolerance);\n-\n-        try {\n-            v_null.unitVector();\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-            // expected behavior\n-        }\n-\n-        RealVector v_unitize = v1.copy();\n-        v_unitize.unitize();\n-        assertClose(\"compare vect\" ,v_unitVector_2.toArray(),v_unitize.toArray(),normTolerance);\n-        try {\n-            v_null.unitize();\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-            // expected behavior\n-        }\n \n         RealVector v_projection = v1.projection(v2);\n         double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n     }\n \n     @Test\n-    public void testIterator() throws Exception {\n-        RealVector v = new TestVectorImpl(vec2.clone());\n-        Entry e;\n-        int i = 0;\n-        for(Iterator<Entry> it = v.iterator(); it.hasNext() && (e = it.next()) != null; i++) {\n-            Assert.assertEquals(vec2[i], e.getValue(), 0);\n-        }\n-    }\n-\n-    @Test\n     public void testSparseIterator() throws Exception {\n         RealVector v = new TestVectorImpl(vec2.clone());\n         Entry e;", "timestamp": 1340863791, "metainfo": ""}