{"sha": "742c710a102a9e59ed2910308d19fca44cc9b93d", "log": "Changed return type for eventOccurred from int to an enumerate in ODE.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n \n public interface EventHandler  {\n \n-  /** Stop indicator.\n-   * <p>This value should be used as the return value of the {@link\n-   * #eventOccurred eventOccurred} method when the integration should be\n-   * stopped after the event ending the current step.</p>\n-   */\n-  int STOP = 0;\n+    /** Enumerate for actions to be performed when an event occurs. */\n+    public enum Action {\n \n-  /** Reset state indicator.\n-   * <p>This value should be used as the return value of the {@link\n-   * #eventOccurred eventOccurred} method when the integration should\n-   * go on after the event ending the current step, with a new state\n-   * vector (which will be retrieved thanks to the {@link #resetState\n-   * resetState} method).</p>\n-   */\n-  int RESET_STATE = 1;\n+        /** Stop indicator.\n+         * <p>This value should be used as the return value of the {@link\n+         * #eventOccurred eventOccurred} method when the integration should be\n+         * stopped after the event ending the current step.</p>\n+         */\n+        STOP,\n \n-  /** Reset derivatives indicator.\n-   * <p>This value should be used as the return value of the {@link\n-   * #eventOccurred eventOccurred} method when the integration should\n-   * go on after the event ending the current step, with a new derivatives\n-   * vector (which will be retrieved thanks to the {@link\n-   * org.apache.commons.math.ode.FirstOrderDifferentialEquations#computeDerivatives}\n-   * method).</p>\n-   */\n-  int RESET_DERIVATIVES = 2;\n+        /** Reset state indicator.\n+         * <p>This value should be used as the return value of the {@link\n+         * #eventOccurred eventOccurred} method when the integration should\n+         * go on after the event ending the current step, with a new state\n+         * vector (which will be retrieved thanks to the {@link #resetState\n+         * resetState} method).</p>\n+         */\n+        RESET_STATE,\n \n-  /** Continue indicator.\n-   * <p>This value should be used as the return value of the {@link\n-   * #eventOccurred eventOccurred} method when the integration should go\n-   * on after the event ending the current step.</p>\n-   */\n-  int CONTINUE = 3;\n+        /** Reset derivatives indicator.\n+         * <p>This value should be used as the return value of the {@link\n+         * #eventOccurred eventOccurred} method when the integration should\n+         * go on after the event ending the current step, with a new derivatives\n+         * vector (which will be retrieved thanks to the {@link\n+         * org.apache.commons.math.ode.FirstOrderDifferentialEquations#computeDerivatives}\n+         * method).</p>\n+         */\n+        RESET_DERIVATIVES,\n+\n+        /** Continue indicator.\n+         * <p>This value should be used as the return value of the {@link\n+         * #eventOccurred eventOccurred} method when the integration should go\n+         * on after the event ending the current step.</p>\n+         */\n+        CONTINUE;\n+\n+    }\n \n   /** Compute the value of the switching function.\n \n    * value must be one of {@link #STOP}, {@link #RESET_STATE},\n    * {@link #RESET_DERIVATIVES} or {@link #CONTINUE}\n    */\n-  int eventOccurred(double t, double[] y, boolean increasing);\n+  Action eventOccurred(double t, double[] y, boolean increasing);\n \n   /** Reset the state prior to continue the integration.\n \n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;\n import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;\n import org.apache.commons.math.exception.ConvergenceException;\n+import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n \n     private boolean increasing;\n \n     /** Next action indicator. */\n-    private int nextAction;\n+    private EventHandler.Action nextAction;\n \n     /** Root-finding algorithm to use to detect state events. */\n     private final UnivariateRealSolver solver;\n         pendingEventTime  = Double.NaN;\n         previousEventTime = Double.NaN;\n         increasing        = true;\n-        nextAction        = EventHandler.CONTINUE;\n+        nextAction        = EventHandler.Action.CONTINUE;\n \n     }\n \n             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));\n         } else {\n             g0Positive = g0 >= 0;\n-            nextAction = EventHandler.CONTINUE;\n+            nextAction = EventHandler.Action.CONTINUE;\n         }\n     }\n \n      * @return true if the integration should be stopped\n      */\n     public boolean stop() {\n-        return nextAction == EventHandler.STOP;\n+        return nextAction == EventHandler.Action.STOP;\n     }\n \n     /** Let the event handler reset the state if it wants.\n             return false;\n         }\n \n-        if (nextAction == EventHandler.RESET_STATE) {\n+        if (nextAction == EventHandler.Action.RESET_STATE) {\n             handler.resetState(t, y);\n         }\n         pendingEvent      = false;\n         pendingEventTime  = Double.NaN;\n \n-        return (nextAction == EventHandler.RESET_STATE) ||\n-               (nextAction == EventHandler.RESET_DERIVATIVES);\n+        return (nextAction == EventHandler.Action.RESET_STATE) ||\n+               (nextAction == EventHandler.Action.RESET_DERIVATIVES);\n \n     }\n \n--- a/src/test/java/org/apache/commons/math/ode/TestProblem4.java\n+++ b/src/test/java/org/apache/commons/math/ode/TestProblem4.java\n       return sign * y[0];\n     }\n \n-    public int eventOccurred(double t, double[] y, boolean increasing) {\n+    public Action eventOccurred(double t, double[] y, boolean increasing) {\n       // this sign change is needed because the state will be reset soon\n       sign = -sign;\n-      return EventHandler.RESET_STATE;\n+      return Action.RESET_STATE;\n     }\n \n     public void resetState(double t, double[] y) {\n       return t - 12.0;\n     }\n \n-    public int eventOccurred(double t, double[] y, boolean increasing) {\n-      return EventHandler.STOP;\n+    public Action eventOccurred(double t, double[] y, boolean increasing) {\n+      return Action.STOP;\n     }\n \n     public void resetState(double t, double[] y) {\n--- a/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java\n             public double g(double t, double[] y) {\n                 return (t - r1) * (r2 - t);\n             }\n-            public int eventOccurred(double t, double[] y, boolean increasing) {\n-                return CONTINUE;\n+            public Action eventOccurred(double t, double[] y, boolean increasing) {\n+                return Action.CONTINUE;\n             }\n         };\n \n--- a/src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java\n         }\n \n         /** {@inheritDoc} */\n-        public int eventOccurred(double t, double[] y, boolean increasing) {\n-            return STOP;\n+        public Action eventOccurred(double t, double[] y, boolean increasing) {\n+            return Action.STOP;\n         }\n \n         /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n               return t - tEvent;\n           }\n \n-          public int eventOccurred(double t, double[] y, boolean increasing) {\n+          public Action eventOccurred(double t, double[] y, boolean increasing) {\n               Assert.assertEquals(tEvent, t, 5.0e-6);\n-              return CONTINUE;\n+              return Action.CONTINUE;\n           }\n       }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n       finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n               return t - tEvent;\n           }\n \n-          public int eventOccurred(double t, double[] y, boolean increasing) {\n+          public Action eventOccurred(double t, double[] y, boolean increasing) {\n               Assert.assertEquals(tEvent, t, 5.0e-6);\n-              return CONTINUE;\n+              return Action.CONTINUE;\n           }\n       }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n       finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n       integ.addStepHandler(handler);\n \n       integ.addEventHandler(new EventHandler() {\n-        public int eventOccurred(double t, double[] y, boolean increasing) {\n-          return EventHandler.CONTINUE;\n+        public Action eventOccurred(double t, double[] y, boolean increasing) {\n+          return Action.CONTINUE;\n         }\n         public double g(double t, double[] y) {\n           double middle = (pb.getInitialTime() + pb.getFinalTime()) / 2;\n     integ.addStepHandler(handler);\n \n     integ.addEventHandler(new EventHandler() {\n-      public int eventOccurred(double t, double[] y, boolean increasing) {\n-        return EventHandler.CONTINUE;\n+      public Action eventOccurred(double t, double[] y, boolean increasing) {\n+        return Action.CONTINUE;\n       }\n       public double g(double t, double[] y) {\n         double middle = (pb.getInitialTime() + pb.getFinalTime()) / 2;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java\n     this.rate = rate;\n   }\n \n-  public int eventOccurred(double t, double[] y, boolean increasing) {\n+  public Action eventOccurred(double t, double[] y, boolean increasing) {\n     setRate(rateAfter);\n-    return RESET_DERIVATIVES;\n+    return Action.RESET_DERIVATIVES;\n   }\n \n   public double g(double t, double[] y) {", "timestamp": 1316954349, "metainfo": ""}