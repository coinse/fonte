{"sha": "240450fff301ff8a51576f48c71527a482da8789", "log": "be more precise on return type, we really return a Array2DRowRealMatrix, so tell it in case some callers can use this information for optimization (which is the case for Nordsieck transformers, they will be able to use customized loops on matrix data for the sake of numerical accuracy)  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/MatrixUtils.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixUtils.java\n      * @param m matrix to convert\n      * @return converted matrix\n      */\n-    public static RealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m) {\n+    public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m) {\n         final FractionMatrixConverter converter = new FractionMatrixConverter();\n         m.walkInOptimizedOrder(converter);\n         return converter.getConvertedMatrix();\n         /** Get the converted matrix.\n          * @return converted matrix\n          */\n-        RealMatrix getConvertedMatrix() {\n+        Array2DRowRealMatrix getConvertedMatrix() {\n             return new Array2DRowRealMatrix(data, false);\n         }\n \n      * @param m matrix to convert\n      * @return converted matrix\n      */\n-    public static RealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m) {\n+    public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m) {\n         final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();\n         m.walkInOptimizedOrder(converter);\n         return converter.getConvertedMatrix();\n         /** Get the converted matrix.\n          * @return converted matrix\n          */\n-        RealMatrix getConvertedMatrix() {\n+        Array2DRowRealMatrix getConvertedMatrix() {\n             return new Array2DRowRealMatrix(data, false);\n         }\n ", "timestamp": 1246225695, "metainfo": ""}