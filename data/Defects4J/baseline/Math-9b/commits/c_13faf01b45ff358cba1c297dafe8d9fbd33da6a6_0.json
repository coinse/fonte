{"sha": "13faf01b45ff358cba1c297dafe8d9fbd33da6a6", "log": "Eliminated dependency on [logging].   ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n+++ b/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n import junit.framework.TestSuite;\n \n import java.io.BufferedReader;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n import java.io.InputStreamReader;\n-import org.apache.commons.logging.LogFactory;\n-import org.apache.commons.logging.Log;\n \n import org.apache.commons.math.stat.univariate.SummaryStatistics;\n import org.apache.commons.math.stat.univariate.SummaryStatisticsImpl;\n \n /**\n  * Certified data test cases.\n- * @version $Revision: 1.17 $ $Date: 2004/04/12 02:27:49 $\n+ * @version $Revision: 1.18 $ $Date: 2004/07/10 16:07:07 $\n  */\n public class CertifiedDataTest extends TestCase  {\n \n \tprotected double mean = Double.NaN;\n \n \tprotected double std = Double.NaN;\n-\n-\tprotected Log log = LogFactory.getLog(this.getClass());\n \n \t/**\n \t * Certified Data Test Constructor\n \t/**\n \t * Test StorelessDescriptiveStatistics\n \t */\n-\tpublic void testStoredUnivariateImpl() {\n+\tpublic void testStoredUnivariateImpl() throws Exception {\n \n \t\tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n \t\t\n \t * @param file\n \t * @param statistical summary\n \t */\n-\tprivate void loadStats(String resource, Object u) {\n-\t\t\n-\t\tDescriptiveStatistics d = null;\n-\t\tSummaryStatistics s = null;\n-\t\tif (u instanceof DescriptiveStatistics) {\n-\t\t\td = (DescriptiveStatistics) u;\n-\t\t} else {\n-\t\t\ts = (SummaryStatistics) u;\n-\t\t}\n-\t\ttry {\n-\t\t\tu.getClass().getDeclaredMethod(\"clear\", null).invoke(u, null);\n-\t\t\tmean = Double.NaN;\n-\t\t\tstd = Double.NaN;\n-\n-\t\t\tBufferedReader in =\n-\t\t\t\tnew BufferedReader(\n-\t\t\t\t\tnew InputStreamReader(\n-\t\t\t\t\t\tgetClass().getResourceAsStream(resource)));\n-\n-\t\t\tString line = null;\n-\n-\t\t\tfor (int j = 0; j < 60; j++) {\n-\t\t\t\tline = in.readLine();\n-\t\t\t\tif (j == 40) {\n-\t\t\t\t\tmean =\n-\t\t\t\t\t\tDouble.parseDouble(\n-\t\t\t\t\t\t\tline.substring(line.lastIndexOf(\":\") + 1).trim());\n-\t\t\t\t}\n-\t\t\t\tif (j == 41) {\n-\t\t\t\t\tstd =\n-\t\t\t\t\t\tDouble.parseDouble(\n-\t\t\t\t\t\t\tline.substring(line.lastIndexOf(\":\") + 1).trim());\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tline = in.readLine();\n-\n-\t\t\twhile (line != null) {\n-\t\t\t\tif (d != null) {\n-\t\t\t\t\td.addValue(Double.parseDouble(line.trim()));\n-\t\t\t\t}  else {\n-\t\t\t\t\ts.addValue(Double.parseDouble(line.trim()));\n-\t\t\t\t}\n-\t\t\t\tline = in.readLine();\n-\t\t\t}\n-\n-\t\t\tin.close();\n-\n-\t\t} catch (FileNotFoundException fnfe) {\n-\t\t\tlog.error(fnfe.getMessage(), fnfe);\n-\t\t} catch (IOException ioe) {\n-\t\t\tlog.error(ioe.getMessage(), ioe);\n-\t\t} catch (Exception ioe) {\n-\t\t\tlog.error(ioe.getMessage(), ioe);\n-\t\t}\n+\tprivate void loadStats(String resource, Object u) throws Exception {\n+\t    \n+\t    DescriptiveStatistics d = null;\n+\t    SummaryStatistics s = null;\n+\t    if (u instanceof DescriptiveStatistics) {\n+\t        d = (DescriptiveStatistics) u;\n+\t    } else {\n+\t        s = (SummaryStatistics) u;\n+\t    }\n+\t    \n+\t    u.getClass().getDeclaredMethod(\"clear\", null).invoke(u, null);\n+\t    mean = Double.NaN;\n+\t    std = Double.NaN;\n+\t    \n+\t    BufferedReader in =\n+\t        new BufferedReader(\n+\t                new InputStreamReader(\n+\t                        getClass().getResourceAsStream(resource)));\n+\t    \n+\t    String line = null;\n+\t    \n+\t    for (int j = 0; j < 60; j++) {\n+\t        line = in.readLine();\n+\t        if (j == 40) {\n+\t            mean =\n+\t                Double.parseDouble(\n+\t                        line.substring(line.lastIndexOf(\":\") + 1).trim());\n+\t        }\n+\t        if (j == 41) {\n+\t            std =\n+\t                Double.parseDouble(\n+\t                        line.substring(line.lastIndexOf(\":\") + 1).trim());\n+\t        }\n+\t    }\n+\t    \n+\t    line = in.readLine();\n+\t    \n+\t    while (line != null) {\n+\t        if (d != null) {\n+\t            d.addValue(Double.parseDouble(line.trim()));\n+\t        }  else {\n+\t            s.addValue(Double.parseDouble(line.trim()));\n+\t        }\n+\t        line = in.readLine();\n+\t    }\n+\t    \n+\t    in.close();\n \t}\n }", "timestamp": 1089475627, "metainfo": ""}