{"sha": "dee14c0becb2b0f304fe742f466a93605b4c183a", "log": "Dump expected/observed bin counts on poisson consistency test failure.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/java/org/apache/commons/math/random/RandomDataTest.java\n import junit.framework.TestSuite;\n import junit.framework.AssertionFailedError;\n \n+import java.text.DecimalFormat;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n \t}\n \t\n \tpublic void testNextPoissionConistency() throws Exception {\n-\t    // TODO: increase upper bound to 40 when MATH-294 is resolved\n+\t    // TODO: once MATH-294 is resolved, increase upper bounds on test means\n \t    for (int i = 1; i < 6; i++) {\n \t        checkNextPoissonConsistency(i);\n+\t    }\n+\t    RandomData randomData = new RandomDataImpl();\n+\t    for (int i = 1; i < 10; i++) {\n+\t        checkNextPoissonConsistency(randomData.nextUniform(1, 6));\n \t    }\n \t}\n \t\n \t   \n \t    /*\n \t     *  Determine interior bin bounds.  Bins are\n-\t     *  [0, lower = binBounds[0]), [lower, binBounds[1]), [binBounds[0], binBounds[1]), ... , \n+\t     *  [1, lower = binBounds[0]), [lower, binBounds[1]), [binBounds[1], binBounds[2]), ... , \n \t     *    [binBounds[binCount - 2], upper = binBounds[binCount - 1]), [upper, +inf)\n \t     *  \n \t     */\n \t        assertFalse(chiSquareTest.chiSquareTest(expected, observed, alpha));\n \t    } catch (AssertionFailedError ex) {\n \t        StringBuffer msgBuffer = new StringBuffer();\n+\t        DecimalFormat df = new DecimalFormat(\"#.##\");\n \t        msgBuffer.append(\"Chisquare test failed for mean = \");\n \t        msgBuffer.append(mean);\n \t        msgBuffer.append(\" p-value = \");\n \t        msgBuffer.append(\" chisquare statistic = \");\n \t        msgBuffer.append(chiSquareTest.chiSquare(expected, observed));\n \t        msgBuffer.append(\". \\n\");\n+\t        msgBuffer.append(\"bin\\t\\texpected\\tobserved\\n\");\n+\t        for (int i = 0; i < expected.length; i++) {\n+\t            msgBuffer.append(\"[\");\n+\t            msgBuffer.append(i == 0 ? 1: binBounds.get(i - 1));\n+\t            msgBuffer.append(\",\");\n+\t            msgBuffer.append(i == binBounds.size() ? \"inf\": binBounds.get(i));\n+\t            msgBuffer.append(\")\");\n+\t            msgBuffer.append(\"\\t\\t\");\n+\t            msgBuffer.append(df.format(expected[i]));\n+\t            msgBuffer.append(\"\\t\\t\");\n+\t            msgBuffer.append(observed[i]);\n+\t            msgBuffer.append(\"\\n\");\n+\t        }\n \t        msgBuffer.append(\"This test can fail randomly due to sampling error with probability \");\n \t        msgBuffer.append(alpha);\n \t        msgBuffer.append(\".\");", "timestamp": 1254825285, "metainfo": ""}