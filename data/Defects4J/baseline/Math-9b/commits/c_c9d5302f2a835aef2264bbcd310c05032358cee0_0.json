{"sha": "c9d5302f2a835aef2264bbcd310c05032358cee0", "log": "fixed Adams-Bashforth order for error control (it is k, not k+1)  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java\n                                     final double scalAbsoluteTolerance,\n                                     final double scalRelativeTolerance)\n         throws IllegalArgumentException {\n-        super(\"Adams-Bashforth\", nSteps, nSteps + 1, minStep, maxStep,\n+        super(\"Adams-Bashforth\", nSteps, nSteps, minStep, maxStep,\n               scalAbsoluteTolerance, scalRelativeTolerance);\n     }\n \n                                     final double[] vecAbsoluteTolerance,\n                                     final double[] vecRelativeTolerance)\n         throws IllegalArgumentException {\n-        super(\"Adams-Bashforth\", nSteps, nSteps + 1, minStep, maxStep,\n+        super(\"Adams-Bashforth\", nSteps, nSteps, minStep, maxStep,\n               vecAbsoluteTolerance, vecRelativeTolerance);\n     }\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n                             pb.getInitialTime(), pb.getInitialState(),\n                             pb.getFinalTime(), new double[pb.getDimension()]);\n \n-            // the 28 and 42 factors are only valid for this test\n+            // the 33 and 45 factors are only valid for this test\n             // and has been obtained from trial and error\n             // there is no general relation between local and global errors\n-            assertTrue(handler.getMaximalValueError() > (28.0 * scalAbsoluteTolerance));\n-            assertTrue(handler.getMaximalValueError() < (42.0 * scalAbsoluteTolerance));\n+            assertTrue(handler.getMaximalValueError() > (33.0 * scalAbsoluteTolerance));\n+            assertTrue(handler.getMaximalValueError() < (45.0 * scalAbsoluteTolerance));\n             assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);\n \n             int calls = pb.getCalls();", "timestamp": 1245604047, "metainfo": ""}