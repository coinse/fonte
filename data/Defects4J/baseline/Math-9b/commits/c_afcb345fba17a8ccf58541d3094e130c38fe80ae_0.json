{"sha": "afcb345fba17a8ccf58541d3094e130c38fe80ae", "log": "replaced maxDenominatorDigit by maxDenominator in constructor it is more straightforward and avoid an exception JIRA: MATH-181  ", "commit": "\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n     /** A fraction representing \"0 / 1\". */\n     public static final Fraction ZERO = new Fraction(0, 1);\n \n-    /**\n-     * The maximal number of denominator digits that can be requested for double to fraction\n-     * conversion.\n-     * <p>\n-     * When <code>d</code> digits are requested, an integer threshold is\n-     * initialized with the value 10<sup>d</sup>. Therefore, <code>d</code>\n-     * cannot be larger than this constant. Since the java language uses 32 bits\n-     * signed integers, the value for this constant is 9.\n-     * </p>\n-     * \n-     * @see #Fraction(double,int)\n-     */\n-    public static final int MAX_DENOMINATOR_DIGITS = 9;\n-    \n     /** Serializable version identifier */\n     private static final long serialVersionUID = 5463066929751300926L;\n     \n     }\n \n     /**\n-     * Convert a number of denominator digits to a denominator max value.\n-     * @param denominatorDigits The maximum number of denominator digits.\n-     * @return the maximal value for denominator\n-     * @throws IllegalArgumentException if more than {@link #MAX_DENOMINATOR_DIGITS}\n-     *         are requested\n-     */\n-    private static int maxDenominator(int denominatorDigits)\n-        throws IllegalArgumentException\n-    {\n-        if (denominatorDigits > MAX_DENOMINATOR_DIGITS) {\n-            throw new IllegalArgumentException(\"too many digits requested\");\n-        }\n-        return (int)Math.pow(10, denominatorDigits);\n-    }\n-\n-    /**\n      * Create a fraction given the double value and maximum number of\n      * denominator digits.\n      * <p>\n      * </ul>\n      * </p>\n      * @param value the double value to convert to a fraction.\n-     * @param denominatorDigits The maximum number of denominator digits.\n+     * @param maxDenominator The maximum allowed value for denominator\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge\n-     * @throws IllegalArgumentException if more than {@link #MAX_DENOMINATOR_DIGITS}\n-     *         are requested\n-     */\n-    public Fraction(double value, int denominatorDigits)\n-        throws FractionConversionException, IllegalArgumentException\n+     */\n+    public Fraction(double value, int maxDenominator)\n+        throws FractionConversionException\n     {\n-       this(value, 0, maxDenominator(denominatorDigits), 100);\n+       this(value, 0, maxDenominator, 100);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java\n \n     // MATH-181\n     public void testDigitLimitConstructor() throws ConvergenceException  {\n-        assertFraction(2, 5, new Fraction(0.4, 1));\n-        assertFraction(2, 5, new Fraction(0.4, 2));\n-        assertFraction(2, 5, new Fraction(0.4, 3));\n-\n-        assertFraction(3, 5,      new Fraction(0.6152, 1));\n-        assertFraction(8, 13,     new Fraction(0.6152, 2));\n-        assertFraction(510, 829,  new Fraction(0.6152, 3));\n-        assertFraction(769, 1250, new Fraction(0.6152, 4));\n-\n-        try {\n-            new Fraction(0.6152, 15);\n-            fail(\"an exception should have been thrown\");\n-        } catch (IllegalArgumentException iae) {\n-            // expected behavior\n-        } catch (Exception e) {\n-            fail(\"wrong exception caught\");\n-        }\n+        assertFraction(2, 5, new Fraction(0.4,   9));\n+        assertFraction(2, 5, new Fraction(0.4,  99));\n+        assertFraction(2, 5, new Fraction(0.4, 999));\n+\n+        assertFraction(3, 5,      new Fraction(0.6152,    9));\n+        assertFraction(8, 13,     new Fraction(0.6152,   99));\n+        assertFraction(510, 829,  new Fraction(0.6152,  999));\n+        assertFraction(769, 1250, new Fraction(0.6152, 9999));\n     }\n \n     public void testEpsilonLimitConstructor() throws ConvergenceException  {", "timestamp": 1201858754, "metainfo": ""}