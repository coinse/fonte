{"sha": "006e834bc3d18fc1d649392a606f4f291378c965", "log": "Added a setQRRankingThreshold method to Levenberg-Marquardt optimizer to improve robustness of rank determination. JIRA: MATH-352  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.VectorialPointValuePair;\n+import org.apache.commons.math.util.MathUtils;\n \n \n /**\n      * and the columns of the jacobian. */\n     private double orthoTolerance;\n \n+    /** Threshold for QR ranking. */\n+    private double qrRankingThreshold;\n+\n     /**\n      * Build an optimizer for least squares problems.\n      * <p>The default values for the algorithm settings are:\n      *   <ul>\n-     *    <li>{@link #setConvergenceChecker vectorial convergence checker}: null</li>\n-     *    <li>{@link #setInitialStepBoundFactor initial step bound factor}: 100.0</li>\n-     *    <li>{@link #setMaxIterations maximal iterations}: 1000</li>\n-     *    <li>{@link #setCostRelativeTolerance cost relative tolerance}: 1.0e-10</li>\n-     *    <li>{@link #setParRelativeTolerance parameters relative tolerance}: 1.0e-10</li>\n-     *    <li>{@link #setOrthoTolerance orthogonality tolerance}: 1.0e-10</li>\n+     *    <li>{@link #setConvergenceChecker(VectorialConvergenceChecker) vectorial convergence checker}: null</li>\n+     *    <li>{@link #setInitialStepBoundFactor(double) initial step bound factor}: 100.0</li>\n+     *    <li>{@link #setMaxIterations(int) maximal iterations}: 1000</li>\n+     *    <li>{@link #setCostRelativeTolerance(double) cost relative tolerance}: 1.0e-10</li>\n+     *    <li>{@link #setParRelativeTolerance(double) parameters relative tolerance}: 1.0e-10</li>\n+     *    <li>{@link #setOrthoTolerance(double) orthogonality tolerance}: 1.0e-10</li>\n+     *    <li>{@link #setQRRankingThreshold(double) QR ranking threshold}: {@link MathUtils#SAFE_MIN}</li>\n      *   </ul>\n      * </p>\n      * <p>These default values may be overridden after construction. If the {@link\n         setCostRelativeTolerance(1.0e-10);\n         setParRelativeTolerance(1.0e-10);\n         setOrthoTolerance(1.0e-10);\n+        setQRRankingThreshold(MathUtils.SAFE_MIN);\n \n     }\n \n      */\n     public void setOrthoTolerance(double orthoTolerance) {\n         this.orthoTolerance = orthoTolerance;\n+    }\n+\n+    /**\n+     * Set the desired threshold for QR ranking.\n+     * <p>\n+     * If the squared norm of a column vector is smaller or equal to this threshold\n+     * during QR decomposition, it is considered to be a zero vector and hence the\n+     * rank of the matrix is reduced.\n+     * </p>\n+     * @param qrRankingThreshold threshold for QR ranking\n+     */\n+    public void setQRRankingThreshold(final double qrRankingThreshold) {\n+        this.qrRankingThreshold = qrRankingThreshold;\n     }\n \n     /** {@inheritDoc} */\n                     ak2        = norm2;\n                 }\n             }\n-            if (ak2 == 0) {\n+            if (ak2 <= qrRankingThreshold) {\n                 rank = k;\n                 return;\n             }\n--- a/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java\n             problem.addPoint (2, -2.1488478161387325);\n             problem.addPoint (3, -1.9122489313410047);\n             problem.addPoint (4, 1.7785661310051026);\n-            new LevenbergMarquardtOptimizer().optimize(problem,\n-                                                       new double[] { 0, 0, 0, 0, 0 },\n-                                                       new double[] { 0.0, 4.4e-323, 1.0, 4.4e-323, 0.0 },\n-                                                       new double[] { 0, 0, 0 });\n+            LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n+            optimizer.setQRRankingThreshold(0);\n+            optimizer.optimize(problem,\n+                               new double[] { 0, 0, 0, 0, 0 },\n+                               new double[] { 0.0, 4.4e-323, 1.0, 4.4e-323, 0.0 },\n+                               new double[] { 0, 0, 0 });\n             fail(\"an exception should have been thrown\");\n         } catch (OptimizationException ee) {\n             // expected behavior", "timestamp": 1275832911, "metainfo": ""}