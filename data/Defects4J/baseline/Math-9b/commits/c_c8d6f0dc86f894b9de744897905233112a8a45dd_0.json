{"sha": "c8d6f0dc86f894b9de744897905233112a8a45dd", "log": "removed forgotten pre-JDK 1.4 stuff added protection against null pointer exceptions  ", "commit": "\n--- a/src/java/org/apache/commons/math/MathException.java\n+++ b/src/java/org/apache/commons/math/MathException.java\n */\n public class MathException extends Exception {\n     \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 1428666635974829194L;\n-\n-    /**\n-     * Does JDK support nested exceptions?\n-     */\n-    private static final boolean JDK_SUPPORTS_NESTED;\n-    \n-    static {\n-        boolean flag = false;\n-        try {\n-            Throwable.class.getDeclaredMethod(\"getCause\", new Class[0]);\n-            flag = true;\n-        } catch (NoSuchMethodException ex) {\n-            flag = false;\n-        }\n-        JDK_SUPPORTS_NESTED = flag;\n-    }\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 5924076008552401454L;\n \n     /** Cache for resources bundle. */\n     private static ResourceBundle cachedResources = null;\n      * @return a message string\n      */\n     private static String buildMessage(String pattern, Object[] arguments, Locale locale) {\n-        return new MessageFormat(translate(pattern, locale), locale).format(arguments);        \n+        return (pattern == null) ? \"\" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        \n     }\n \n     /**\n     public MathException() {\n         super();\n         this.pattern   = null;\n-        this.arguments = new Object[0];\n+        this.arguments = null;\n     }\n     \n     /**\n     public MathException(String pattern, Object[] arguments) {\n       super(buildMessage(pattern, arguments, Locale.US));\n       this.pattern   = pattern;\n-      this.arguments = (Object[]) arguments.clone();\n+      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n     }\n \n     /**\n     public MathException(String pattern, Object[] arguments, Throwable rootCause) {\n       super(buildMessage(pattern, arguments, Locale.US), rootCause);\n       this.pattern   = pattern;\n-      this.arguments = (Object[]) arguments.clone();\n+      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n     }\n \n     /** Gets the pattern used to build the message of this throwable.\n      * @since 1.2\n      */\n     public Object[] getArguments() {\n-        return (Object[]) arguments.clone();\n+        return arguments.clone();\n     }\n \n     /** Gets the message in a specified locale.\n      * @since 1.2\n      */\n     public String getMessage(Locale locale) {\n-        return (pattern == null) ? null : buildMessage(pattern, arguments, locale);\n+        return buildMessage(pattern, arguments, locale);\n     }\n \n     /** {@inheritDoc} */\n             pw.flush();\n         }\n     }\n-    \n+\n }", "timestamp": 1226068516, "metainfo": ""}