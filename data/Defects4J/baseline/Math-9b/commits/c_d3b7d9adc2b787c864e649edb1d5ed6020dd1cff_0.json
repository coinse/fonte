{"sha": "d3b7d9adc2b787c864e649edb1d5ed6020dd1cff", "log": "Added a scalb method in MathUtils. This method is similar to the method with same name added in java.lang.Math as of Java 6.  ", "commit": "\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n     }\n \n     /**\n+     * Scale a number by 2<sup>scaleFactor</sup>.\n+     * <p>If <code>d</code> is 0 or NaN or Infinite, it is returned unchanged.</p>\n+     * \n+     * @param d base number\n+     * @param scaleFactor power of two by which d sould be multiplied\n+     * @return d &times; 2<sup>scaleFactor</sup>\n+     * @since 2.0\n+     */\n+    public static double scalb(final double d, final int scaleFactor) {\n+\n+        // handling of some important special cases\n+        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {\n+            return d;\n+        }\n+\n+        // split the double in raw components\n+        final long bits     = Double.doubleToLongBits(d);\n+        final long exponent = bits & 0x7ff0000000000000L;\n+        final long rest     = bits & 0x800fffffffffffffL;\n+\n+        // shift the exponent\n+        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));\n+        return Double.longBitsToDouble(newBits);\n+\n+    }\n+\n+    /**\n      * Normalize an angle in a 2&pi wide interval around a center value.\n      * <p>This method has three main uses:</p>\n      * <ul>\n--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java\n         assertEquals(0, MathUtils.nextAfter(-Double.MIN_VALUE, 1), 0);\n     }\n \n+    public void testScalb() {\n+        assertEquals( 0.0, MathUtils.scalb(0.0, 5), 1.0e-15);\n+        assertEquals(32.0, MathUtils.scalb(1.0, 5), 1.0e-15);\n+        assertEquals(1.0 / 32.0, MathUtils.scalb(1.0,  -5), 1.0e-15);\n+        assertEquals(Math.PI, MathUtils.scalb(Math.PI, 0), 1.0e-15);\n+        assertTrue(Double.isInfinite(MathUtils.scalb(Double.POSITIVE_INFINITY, 1)));\n+        assertTrue(Double.isInfinite(MathUtils.scalb(Double.NEGATIVE_INFINITY, 1)));\n+        assertTrue(Double.isNaN(MathUtils.scalb(Double.NaN, 1)));\n+    }\n+\n     public void testNormalizeAngle() {\n         for (double a = -15.0; a <= 15.0; a += 0.1) {\n             for (double b = -15.0; b <= 15.0; b += 0.2) {", "timestamp": 1225032945, "metainfo": ""}