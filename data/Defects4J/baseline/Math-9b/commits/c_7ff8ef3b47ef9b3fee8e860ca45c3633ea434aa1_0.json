{"sha": "7ff8ef3b47ef9b3fee8e860ca45c3633ea434aa1", "log": "Renamed ChiSquareDistributionTest to ChiSquaredDistributionTest for consistency with the name of the actual class being tested.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/distribution/ChiSquaredDistributionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link ChiSquaredDistribution}.\n+ *\n+ * @see ContinuousDistributionAbstractTest\n+ * @version $Id$\n+ */\n+public class ChiSquaredDistributionTest extends ContinuousDistributionAbstractTest {\n+\n+    //-------------- Implementations for abstract methods -----------------------\n+\n+    /** Creates the default continuous distribution instance to use in tests. */\n+    @Override\n+    public ChiSquaredDistribution makeDistribution() {\n+        return new ChiSquaredDistribution(5.0);\n+    }\n+\n+    /** Creates the default cumulative probability distribution test input values */\n+    @Override\n+    public double[] makeCumulativeTestPoints() {\n+        // quantiles computed using R version 2.9.2\n+        return new double[] {0.210212602629, 0.554298076728, 0.831211613487, 1.14547622606, 1.61030798696,\n+                20.5150056524, 15.0862724694, 12.8325019940, 11.0704976935, 9.23635689978};\n+    }\n+\n+    /** Creates the default cumulative probability density test expected values */\n+    @Override\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.990, 0.975, 0.950, 0.900};\n+    }\n+\n+    /** Creates the default inverse cumulative probability test input values */\n+    @Override\n+    public double[] makeInverseCumulativeTestPoints() {\n+        return new double[] {0, 0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n+                0.990d, 0.975d, 0.950d, 0.900d, 1};\n+    }\n+\n+    /** Creates the default inverse cumulative probability density test expected values */\n+    @Override\n+    public double[] makeInverseCumulativeTestValues() {\n+        return new double[] {0, 0.210212602629, 0.554298076728, 0.831211613487, 1.14547622606, 1.61030798696,\n+                20.5150056524, 15.0862724694, 12.8325019940, 11.0704976935, 9.23635689978,\n+                Double.POSITIVE_INFINITY};\n+    }\n+\n+    /** Creates the default probability density test expected values */\n+    @Override\n+    public double[] makeDensityTestValues() {\n+        return new double[] {0.0115379817652, 0.0415948507811, 0.0665060119842, 0.0919455953114, 0.121472591024,\n+                0.000433630076361, 0.00412780610309, 0.00999340341045, 0.0193246438937, 0.0368460089216};\n+    }\n+\n+ // --------------------- Override tolerance  --------------\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        setTolerance(1e-9);\n+    }\n+\n+ //---------------------------- Additional test cases -------------------------\n+\n+    @Test\n+    public void testSmallDf() throws Exception {\n+        setDistribution(new ChiSquaredDistribution(0.1d));\n+        setTolerance(1E-4);\n+        // quantiles computed using R version 1.8.1 (linux version)\n+        setCumulativeTestPoints(new double[] {1.168926E-60, 1.168926E-40, 1.063132E-32,\n+                1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438,\n+                0.5318646, 0.1526342});\n+        setInverseCumulativeTestValues(getCumulativeTestPoints());\n+        setInverseCumulativeTestPoints(getCumulativeTestValues());\n+        verifyCumulativeProbabilities();\n+        verifyInverseCumulativeProbabilities();\n+    }\n+\n+    @Test\n+    public void testDfAccessors() {\n+        ChiSquaredDistribution distribution = (ChiSquaredDistribution) getDistribution();\n+        Assert.assertEquals(5d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);\n+    }\n+\n+    @Test\n+    public void testDensity() {\n+        double[] x = new double[]{-0.1, 1e-6, 0.5, 1, 2, 5};\n+        //R 2.5: print(dchisq(x, df=1), digits=10)\n+        checkDensity(1, x, new double[]{0.00000000000, 398.94208093034, 0.43939128947, 0.24197072452, 0.10377687436, 0.01464498256});\n+        //R 2.5: print(dchisq(x, df=0.1), digits=10)\n+        checkDensity(0.1, x, new double[]{0.000000000e+00, 2.486453997e+04, 7.464238732e-02, 3.009077718e-02, 9.447299159e-03, 8.827199396e-04});\n+        //R 2.5: print(dchisq(x, df=2), digits=10)\n+        checkDensity(2, x, new double[]{0.00000000000, 0.49999975000, 0.38940039154, 0.30326532986, 0.18393972059, 0.04104249931});\n+        //R 2.5: print(dchisq(x, df=10), digits=10)\n+        checkDensity(10, x, new double[]{0.000000000e+00, 1.302082682e-27, 6.337896998e-05, 7.897534632e-04, 7.664155024e-03, 6.680094289e-02});\n+    }\n+\n+    private void checkDensity(double df, double[] x, double[] expected) {\n+        ChiSquaredDistribution d = new ChiSquaredDistribution(df);\n+        for (int i = 0; i < x.length; i++) {\n+            Assert.assertEquals(expected[i], d.density(x[i]), 1e-5);\n+        }\n+    }\n+\n+    @Test\n+    public void testMoments() {\n+        final double tol = 1e-9;\n+        ChiSquaredDistribution dist;\n+\n+        dist = new ChiSquaredDistribution(1500);\n+        Assert.assertEquals(dist.getNumericalMean(), 1500, tol);\n+        Assert.assertEquals(dist.getNumericalVariance(), 3000, tol);\n+\n+        dist = new ChiSquaredDistribution(1.12);\n+        Assert.assertEquals(dist.getNumericalMean(), 1.12, tol);\n+        Assert.assertEquals(dist.getNumericalVariance(), 2.24, tol);\n+    }\n+\n+}\n--- a/src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java\n  * should be documented in the test cases.  A framework for validating\n  * distribution data against R is included in the /src/test/R source tree.\n  * <p>\n- * See {@link NormalDistributionTest} and {@link ChiSquareDistributionTest}\n+ * See {@link NormalDistributionTest} and {@link ChiSquaredDistributionTest}\n  * for examples.\n  *\n  * @version $Id$", "timestamp": 1322202021, "metainfo": ""}