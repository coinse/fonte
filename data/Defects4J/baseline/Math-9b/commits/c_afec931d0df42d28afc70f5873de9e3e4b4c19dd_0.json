{"sha": "afec931d0df42d28afc70f5873de9e3e4b4c19dd", "log": "MATH-617 Make \"1 + 1i\" appear as \"1 + i\" on formatted output.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/main/java/org/apache/commons/math/complex/ComplexFormat.java\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.MathParseException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.MathInternalError;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.NoDataException;\n \n \n         // format sign and imaginary\n         double im = complex.getImaginary();\n+        StringBuffer imAppendTo = new StringBuffer();\n         if (im < 0.0) {\n             toAppendTo.append(\" - \");\n-            CompositeFormat.formatDouble(-im, getImaginaryFormat(), toAppendTo, pos);\n+            imAppendTo = formatImaginary(-im, new StringBuffer(), pos);\n+            toAppendTo.append(imAppendTo);\n             toAppendTo.append(getImaginaryCharacter());\n         } else if (im > 0.0 || Double.isNaN(im)) {\n             toAppendTo.append(\" + \");\n-            CompositeFormat.formatDouble(im, getImaginaryFormat(), toAppendTo, pos);\n+            imAppendTo = formatImaginary(im, new StringBuffer(), pos);\n+            toAppendTo.append(imAppendTo);\n             toAppendTo.append(getImaginaryCharacter());\n+        }\n+\n+        return toAppendTo;\n+    }\n+\n+    /**\n+     * Format the absolute value of the imaginary part.\n+     *\n+     * @param absIm Absolute value of the imaginary part of a complex number.\n+     * @param toAppendTo where the text is to be appended.\n+     * @param pos On input: an alignment field, if desired. On output: the\n+     * offsets of the alignment field.\n+     * @return the value passed in as toAppendTo.\n+     * @throws MathInternalError if {@code absIm} is not positive.\n+     */\n+    private StringBuffer formatImaginary(double absIm,\n+                                         StringBuffer toAppendTo,\n+                                         FieldPosition pos) {\n+        if (absIm < 0) {\n+            throw new MathInternalError();\n+        }\n+\n+        pos.setBeginIndex(0);\n+        pos.setEndIndex(0);\n+\n+        CompositeFormat.formatDouble(absIm, getImaginaryFormat(), toAppendTo, pos);\n+        if (toAppendTo.toString().equals(\"1\")) {\n+            // Remove the character \"1\" if it is the only one.\n+            toAppendTo.setLength(0);\n         }\n \n         return toAppendTo;\n--- a/src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java\n \n     @Test\n     public void testSimpleNoDecimals() {\n-        Complex c = new Complex(1, 1);\n-        String expected = \"1 + 1i\";\n-        String actual = complexFormat.format(c);\n+        Complex c = new Complex(1, 2);\n+        String expected = \"1 + 2i\";\n+        String actual = complexFormat.format(c);\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testTrimOneImaginary() {\n+        final ComplexFormat fmt = ComplexFormat.getInstance(getLocale());\n+        fmt.getImaginaryFormat().setMaximumFractionDigits(1);\n+\n+        Complex c = new Complex(1, 1.04);\n+        String expected = \"1 + i\";\n+        String actual = fmt.format(c);\n+        Assert.assertEquals(expected, actual);\n+\n+        c = new Complex(1, 1.09);\n+        expected = \"1 + 1\" + getDecimalCharacter() + \"1i\";\n+        actual = fmt.format(c);\n+        Assert.assertEquals(expected, actual);\n+\n+        c = new Complex(1, -1.09);\n+        expected = \"1 - 1\" + getDecimalCharacter() + \"1i\";\n+        actual = fmt.format(c);\n+        Assert.assertEquals(expected, actual);\n+\n+        c = new Complex(1, -1.04);\n+        expected = \"1 - i\";\n+        actual = fmt.format(c);\n         Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testDifferentImaginaryChar() {\n         Complex c = new Complex(1, 1);\n-        String expected = \"1 + 1j\";\n+        String expected = \"1 + j\";\n         String actual = complexFormatJ.format(c);\n         Assert.assertEquals(expected, actual);\n     }", "timestamp": 1310657111, "metainfo": ""}