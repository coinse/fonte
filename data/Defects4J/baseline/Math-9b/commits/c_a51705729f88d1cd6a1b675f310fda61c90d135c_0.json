{"sha": "a51705729f88d1cd6a1b675f310fda61c90d135c", "log": "Javadoc cleanup.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java\n      * Create a multi-start optimizer from a single-start optimizer.\n      *\n      * @param optimizer Single-start optimizer to wrap.\n-     * @param starts Number of starts to perform, must be >=1. \n-     * Multi-start is disabled if {@code starts == 1}.\n+     * @param starts Number of starts to perform. If {@code starts == 1},\n+     * the {@link #optimize(int,MultivariateRealFunction,GoalType,double[])\n+     * optimize} will return the same solution as {@code optimizer} would.\n      * @param generator Random vector generator to use for restarts.\n      * @throws NullArgumentException if {@code optimizer} or {@code generator}\n      * is {@code null}.\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java\n      * Create a multi-start optimizer from a single-start optimizer.\n      *\n      * @param optimizer Single-start optimizer to wrap.\n-     * @param starts Number of starts to perform, must be >=1. \n-     * Multi-start is disabled if {@code starts == 1}.\n+     * @param starts Number of starts to perform. If {@code starts == 1},\n+     * the {@link #optimize(int,MultivariateVectorialFunction,double[],double[],double[])\n+     * optimize} will return the same solution as {@code optimizer} would.\n      * @param generator Random vector generator to use for restarts.\n      * @throws NullArgumentException if {@code optimizer} or {@code generator}\n      * is {@code null}.\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n      * Create a multi-start optimizer from a single-start optimizer.\n      *\n      * @param optimizer Single-start optimizer to wrap.\n-     * @param starts Number of starts to perform, must be >=1. \n-     * Multi-start is disabled if {@code starts == 1}.\n+     * @param starts Number of starts to perform. If {@code starts == 1},\n+     * the {@code optimize} methods will return the same solution as\n+     * {@code optimizer} would.\n      * @param generator Random generator to use for restarts.\n      * @throws NullArgumentException if {@code optimizer} or {@code generator}\n      * is {@code null}.", "timestamp": 1295366550, "metainfo": ""}