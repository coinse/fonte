{"sha": "b194614d7c6e99d504741eda667a7f1d9d97172f", "log": "updated tests to take into account serialization changes and the new derivatives consistency check these tests have been converted to Junit4  ", "commit": "\n--- a/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.sampling.StepHandler;\n+import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n+import org.junit.Test;\n \n-public class ClassicalRungeKuttaStepInterpolatorTest\n-  extends StepInterpolatorAbstractTest {\n+public class ClassicalRungeKuttaStepInterpolatorTest {\n \n-  public ClassicalRungeKuttaStepInterpolatorTest(String name) {\n-    super(name);\n-  }\n-\n-  public void testDerivativesConsistency()\n+  @Test\n+  public void derivativesConsistency()\n   throws DerivativeException, IntegratorException {\n     TestProblem3 pb = new TestProblem3();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n     ClassicalRungeKuttaIntegrator integ = new ClassicalRungeKuttaIntegrator(step);\n-    checkDerivativesConsistency(integ, pb, 1.0e-10);\n+    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10);\n   }\n \n-  public void testSerialization()\n+  @Test\n+  public void serialization()\n     throws DerivativeException, IntegratorException,\n            IOException, ClassNotFoundException {\n \n \n   }\n \n-  public static Test suite() {\n-    return new TestSuite(ClassicalRungeKuttaStepInterpolatorTest.class);\n-  }\n-\n }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import junit.framework.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.util.Random;\n-import java.io.ByteArrayOutputStream;\n-import java.io.ByteArrayInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.IOException;\n \n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n-import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n+import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n+import org.junit.Test;\n \n-public class DormandPrince54StepInterpolatorTest\n-  extends StepInterpolatorAbstractTest {\n+public class DormandPrince54StepInterpolatorTest {\n \n-  public DormandPrince54StepInterpolatorTest(String name) {\n-    super(name);\n-  }\n-\n-  public void testDerivativesConsistency()\n+  @Test\n+  public void derivativesConsistency()\n   throws DerivativeException, IntegratorException {\n     TestProblem3 pb = new TestProblem3(0.1);\n     double minStep = 0;\n     DormandPrince54Integrator integ = new DormandPrince54Integrator(minStep, maxStep,\n                                                                     scalAbsoluteTolerance,\n                                                                     scalRelativeTolerance);\n-    checkDerivativesConsistency(integ, pb, 1.0e-10);\n+    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10);\n   }\n \n-  public void testSerialization()\n+  @Test\n+  public void serialization()\n     throws DerivativeException, IntegratorException,\n            IOException, ClassNotFoundException {\n \n \n   }\n \n-  public void testClone()\n+  @Test\n+  public void checkClone()\n     throws DerivativeException, IntegratorException {\n       TestProblem3 pb = new TestProblem3(0.9);\n       double minStep = 0;\n \n   }\n \n-  public static Test suite() {\n-    return new TestSuite(DormandPrince54StepInterpolatorTest.class);\n-  }\n-\n }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import junit.framework.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.util.Random;\n-import java.io.ByteArrayOutputStream;\n-import java.io.ByteArrayInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.IOException;\n \n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n-import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n+import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n+import org.junit.Test;\n \n-public class DormandPrince853StepInterpolatorTest\n-  extends StepInterpolatorAbstractTest {\n+public class DormandPrince853StepInterpolatorTest {\n \n-  public DormandPrince853StepInterpolatorTest(String name) {\n-    super(name);\n-  }\n-\n-  public void testDerivativesConsistency()\n+  @Test\n+  public void derivativesConsistency()\n   throws DerivativeException, IntegratorException {\n     TestProblem3 pb = new TestProblem3(0.1);\n     double minStep = 0;\n     DormandPrince853Integrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                       scalAbsoluteTolerance,\n                                                                       scalRelativeTolerance);\n-    checkDerivativesConsistency(integ, pb, 1.0e-10);\n+    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10);\n   }\n \n-  public void testSerialization()\n+  @Test\n+  public void serialization()\n     throws DerivativeException, IntegratorException,\n            IOException, ClassNotFoundException {\n \n \n   }\n \n-  public void testClone()\n+  @Test\n+  public void checklone()\n   throws DerivativeException, IntegratorException {\n     TestProblem3 pb = new TestProblem3(0.9);\n     double minStep = 0;\n \n   }\n \n-  public static Test suite() {\n-    return new TestSuite(DormandPrince853StepInterpolatorTest.class);\n-  }\n-\n }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.sampling.StepHandler;\n+import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n+import org.junit.Test;\n \n-public class EulerStepInterpolatorTest\n-  extends StepInterpolatorAbstractTest {\n+public class EulerStepInterpolatorTest {\n \n-  public EulerStepInterpolatorTest(String name) {\n-    super(name);\n-  }\n-\n-  public void testNoReset() {\n+  @Test\n+  public void noReset() {\n \n     double[]   y    =   { 0.0, 1.0, -2.0 };\n     double[][] yDot = { { 1.0, 2.0, -2.0 } };\n \n   }\n \n-  public void testInterpolationAtBounds()\n+  @Test\n+  public void interpolationAtBounds()\n     throws DerivativeException {\n \n     double   t0 = 0;\n \n   }\n \n-  public void testInterpolationInside()\n+  @Test\n+  public void interpolationInside()\n   throws DerivativeException {\n \n     double[]   y    =   { 1.0, 3.0, -4.0 };\n \n   }\n \n-  public void testDerivativesConsistency()\n+  @Test\n+  public void derivativesConsistency()\n   throws DerivativeException, IntegratorException {\n     TestProblem3 pb = new TestProblem3();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n     EulerIntegrator integ = new EulerIntegrator(step);\n-    checkDerivativesConsistency(integ, pb, 1.0e-10);\n+    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10);\n   }\n \n-  public void testSerialization()\n+  @Test\n+  public void serialization()\n     throws DerivativeException, IntegratorException,\n            IOException, ClassNotFoundException {\n \n     }\n   }\n \n-  public static Test suite() {\n-    return new TestSuite(EulerStepInterpolatorTest.class);\n-  }\n-\n }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import junit.framework.*;\n+import static org.junit.Assert.assertTrue;\n+\n import java.util.Random;\n import java.io.ByteArrayOutputStream;\n import java.io.ByteArrayInputStream;\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.nonstiff.GillIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n+import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n+import org.junit.Test;\n \n-public class GillStepInterpolatorTest\n-  extends StepInterpolatorAbstractTest {\n+public class GillStepInterpolatorTest {\n \n-  public GillStepInterpolatorTest(String name) {\n-    super(name);\n-  }\n-\n+  @Test\n   public void testDerivativesConsistency()\n   throws DerivativeException, IntegratorException {\n     TestProblem3 pb = new TestProblem3();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n     GillIntegrator integ = new GillIntegrator(step);\n-    checkDerivativesConsistency(integ, pb, 1.0e-10);\n+    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10);\n   }\n \n-  public void testSerialization()\n+  @Test\n+  public void serialization()\n     throws DerivativeException, IntegratorException,\n            IOException, ClassNotFoundException {\n \n \n   }\n \n-  public static Test suite() {\n-    return new TestSuite(GillStepInterpolatorTest.class);\n-  }\n-\n }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import junit.framework.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.util.Random;\n-import java.io.ByteArrayOutputStream;\n-import java.io.ByteArrayInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.IOException;\n \n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n-import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n+import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n+import org.junit.Test;\n \n-public class GraggBulirschStoerStepInterpolatorTest\n-  extends StepInterpolatorAbstractTest {\n+public class GraggBulirschStoerStepInterpolatorTest {\n \n-  public GraggBulirschStoerStepInterpolatorTest(String name) {\n-    super(name);\n-  }\n-\n-  public void testDerivativesConsistency()\n+  @Test\n+  public void derivativesConsistency()\n   throws DerivativeException, IntegratorException {\n     TestProblem3 pb = new TestProblem3(0.9);\n     double minStep   = 0;\n     GraggBulirschStoerIntegrator integ =\n       new GraggBulirschStoerIntegrator(minStep, maxStep,\n                                        absTolerance, relTolerance);\n-    checkDerivativesConsistency(integ, pb, 1.0e-8);\n+    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-8);\n   }\n \n-  public void testSerialization()\n+  @Test\n+  public void serialization()\n     throws DerivativeException, IntegratorException,\n            IOException, ClassNotFoundException {\n \n \n   }\n \n-  public void testClone()\n+  @Test\n+  public void checklone()\n   throws DerivativeException, IntegratorException {\n     TestProblem3 pb = new TestProblem3(0.9);\n     double minStep = 0;\n \n   }\n \n-  public static Test suite() {\n-    return new TestSuite(GraggBulirschStoerStepInterpolatorTest.class);\n-  }\n-\n }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import junit.framework.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.util.Random;\n-import java.io.ByteArrayOutputStream;\n-import java.io.ByteArrayInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.IOException;\n \n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n-import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n+import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n+import org.junit.Test;\n \n-public class HighamHall54StepInterpolatorTest\n-  extends StepInterpolatorAbstractTest {\n+public class HighamHall54StepInterpolatorTest {\n \n-  public HighamHall54StepInterpolatorTest(String name) {\n-    super(name);\n-  }\n-\n-  public void testDerivativesConsistency()\n+  @Test\n+  public void derivativesConsistency()\n   throws DerivativeException, IntegratorException {\n     TestProblem3 pb = new TestProblem3(0.1);\n     double minStep = 0;\n     HighamHall54Integrator integ = new HighamHall54Integrator(minStep, maxStep,\n                                                               scalAbsoluteTolerance,\n                                                               scalRelativeTolerance);\n-    checkDerivativesConsistency(integ, pb, 1.0e-10);\n+    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10);\n   }\n \n-  public void testSerialization()\n+  @Test\n+  public void serialization()\n     throws DerivativeException, IntegratorException,\n            IOException, ClassNotFoundException {\n \n \n   }\n \n-  public void testClone()\n+  @Test\n+  public void checkClone()\n   throws DerivativeException, IntegratorException {\n     TestProblem3 pb = new TestProblem3(0.9);\n     double minStep = 0;\n \n   }\n \n-  public static Test suite() {\n-    return new TestSuite(HighamHall54StepInterpolatorTest.class);\n-  }\n-\n }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.sampling.StepHandler;\n+import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n+import org.junit.Test;\n \n-public class MidpointStepInterpolatorTest\n-  extends StepInterpolatorAbstractTest {\n+public class MidpointStepInterpolatorTest {\n \n-  public MidpointStepInterpolatorTest(String name) {\n-    super(name);\n-  }\n-\n+  @Test\n   public void testDerivativesConsistency()\n   throws DerivativeException, IntegratorException {\n     TestProblem3 pb = new TestProblem3();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n     MidpointIntegrator integ = new MidpointIntegrator(step);\n-    checkDerivativesConsistency(integ, pb, 1.0e-10);\n+    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10);\n   }\n \n-  public void testSerialization()\n+  @Test\n+  public void serialization()\n     throws DerivativeException, IntegratorException,\n            IOException, ClassNotFoundException {\n \n \n   }\n \n-  public static Test suite() {\n-    return new TestSuite(MidpointStepInterpolatorTest.class);\n-  }\n-\n }\n--- a/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.sampling.StepHandler;\n+import org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils;\n+import org.junit.Test;\n \n-public class ThreeEighthesStepInterpolatorTest\n-  extends StepInterpolatorAbstractTest {\n+public class ThreeEighthesStepInterpolatorTest {\n \n-  public ThreeEighthesStepInterpolatorTest(String name) {\n-    super(name);\n-  }\n-\n-  public void testDerivativesConsistency()\n+  @Test\n+  public void derivativesConsistency()\n   throws DerivativeException, IntegratorException {\n     TestProblem3 pb = new TestProblem3();\n     double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;\n     ThreeEighthesIntegrator integ = new ThreeEighthesIntegrator(step);\n-    checkDerivativesConsistency(integ, pb, 1.0e-10);\n+    StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10);\n   }\n \n-  public void testSerialization()\n+  @Test\n+  public void serialization()\n     throws DerivativeException, IntegratorException,\n            IOException, ClassNotFoundException {\n \n \n   }\n \n-  public static Test suite() {\n-    return new TestSuite(ThreeEighthesStepInterpolatorTest.class);\n-  }\n-\n }", "timestamp": 1243807277, "metainfo": ""}