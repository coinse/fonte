{"sha": "e4acfb1ab321d1101d2c7a4e24937a54029b225a", "log": "Adding constructors that allow specifing epsilon. Remove the isZero(int) method, since it is inconsistant with the isZero(double) method, and this class is tightly bound to it's backing store. Some javadoc fixes.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/SparseRealVector.java\n+++ b/src/java/org/apache/commons/math/linear/SparseRealVector.java\n     }\n \n     /**\n-     * Construct a (size)-length vector of zeros.\n+     * Construct a (dimension)-length vector of zeros.\n      * @param dimension size of the vector\n      */\n     public SparseRealVector(int dimension) {\n     }\n \n     /**\n+     * Construct a (dimension)-length vector of zeros, specifying zero tolerance\n+     * @param dimension Size of the vector\n+     * @param epsilon The tolerance for having a value considered zero\n+     */\n+    public SparseRealVector(int dimension, double epsilon){\n+        virtualSize = dimension;\n+        entries = new OpenIntToDoubleHashMap(0.0);\n+        this.epsilon = epsilon;\n+    }\n+    \n+    /**\n      * Resize the vector, for use with append\n      * @param v The original vector\n      * @param resize The amount to resize it\n     /**\n      * For advanced use, when you know the sparseness \n      * @param dimension The size of the vector\n-     * @param expectedSize The excpected number of non-zer entries\n+     * @param expectedSize The excpected number of non-zero entries\n      */\n     public SparseRealVector(int dimension, int expectedSize) {\n         entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);\n     }\n \n     /**\n+     * For advanced use, when you know the sparseness and want to specify zero tolerance\n+     * @param dimension The size of the vector\n+     * @param expectedSize The expected number of non-zero entries\n+     * @param epsilon The tolerance for having a value considered zero\n+     */\n+    public SparseRealVector(int dimension, int expectedSize, double epsilon){\n+        virtualSize = dimension;\n+        entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);\n+        this.epsilon = epsilon;\n+    }\n+    \n+    /**\n      * Create from a double array.\n-     * only non-zero entries will be stored\n+     * Only non-zero entries will be stored\n      * @param values The set of values to create from\n      */\n     public SparseRealVector(double[] values) {\n         fromDoubleArray(values);\n     }\n \n+    /**\n+     * Create from a double array, specifying zero tolerance.\n+     * Only non-zero entries will be stored\n+     * @param values The set of values to create from\n+     * @param epsilon The tolerance for having a value considered zero \n+     */\n+    public SparseRealVector(double [] values, double epsilon){\n+        virtualSize = values.length;\n+        this.epsilon = epsilon;\n+        fromDoubleArray(values);\n+    }\n+    \n     /**\n      * Create from a Double array.\n      * Only non-zero entries will be stored\n         virtualSize = values.length;\n         double[] vals = new double[values.length];\n         for(int i=0; i < values.length; i++){\n-            vals[i] = values[i];\n+            vals[i] = values[i].doubleValue();\n+        }\n+        fromDoubleArray(vals);\n+    }\n+    \n+    /**\n+     * Create from a Double array.\n+     * Only non-zero entries will be stored\n+     * @param values The set of values to create from\n+     * @param epsilon The tolerance for having a value considered zero\n+     */\n+    public SparseRealVector(Double [] values, double epsilon){\n+        virtualSize = values.length;\n+        this.epsilon = epsilon;\n+        double[] vals = new double[values.length];\n+        for(int i=0; i < values.length; i++){\n+            vals[i] = values[i].doubleValue();\n         }\n         fromDoubleArray(vals);\n     }\n         return entries;\n     }\n \n-    /**\n-     * Determine if this index value is zero\n-     * @param key The index to text\n-     * @return <code>true</code> if this index is missing from the map, <code>false</code> otherwise\n-     */\n-    protected boolean isZero(int key) {\n-        return !entries.containsKey(key);\n-    }\n-\n+    \n     /**\n      * Determine if this value is zero\n      * @param value The value to test\n         checkIndex(index);\n         if (!isZero(value)) {\n             entries.put(index, value);\n-        } else if (!isZero(index)) {\n+        } else if (entries.containsKey(index)) {\n             entries.remove(index);\n         }\n     }", "timestamp": 1233448087, "metainfo": ""}