{"sha": "1d506a9e762a5c076fb0eabd8cc2f8a241cb1d09", "log": "Moved TestStatisticTest to new inference package.   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/inference/TestStatisticTest.java\n+/*\n+ * Copyright 2003-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.inference;\n+\n+import org.apache.commons.math.MathException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the TestStatistic class.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/04/11 20:30:46 $\n+ */\n+\n+public final class TestStatisticTest extends TestCase {\n+\n+    private TestStatisticImpl testStatistic = new TestStatisticImpl();\n+\n+    public TestStatisticTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(TestStatisticTest.class);\n+        suite.setName(\"TestStatistic Tests\");\n+        return suite;\n+    }\n+\n+    public void testChiSquare() throws MathException {\n+        double[] observed = { 11, 24, 69, 96 };\n+        double[] expected = { 8.2, 25.2, 65.8, 100.8 };\n+        assertEquals(\"chi-square statistic\", 1.39743495, testStatistic.chiSquare(expected, observed), 10E-5);\n+\n+        double[] tooShortObs = { 0 };\n+        double[] tooShortEx = { 1 };\n+        try {\n+            testStatistic.chiSquare(tooShortObs, tooShortEx);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            testStatistic.chiSquareTest(tooShortObs, tooShortEx);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+\n+        double[] unMatchedObs = { 0, 1, 2, 3 };\n+        double[] unMatchedEx = { 1, 1, 2 };\n+        try {\n+            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n+            fail(\"arrays have different lengths, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        expected[0] = 0;\n+        try {\n+            testStatistic.chiSquareTest(expected, observed, .01);\n+            fail(\"bad expected count, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        /** from http://www.vsenvirginia.org/stat/classpractice/Voter_Preferences_CP.pdf */\n+        double[] observed1 = { 504, 523, 72, 70, 31 };\n+        double[] expected1 = { 480, 540, 84, 60, 36 };\n+        assertEquals( \"chi-square test statistic\", 5.81, testStatistic.chiSquare(expected1, observed1), 10E-2);\n+        assertEquals(\"chi-square p-value\", 0.21, testStatistic.chiSquareTest(expected1, observed1), 10E-2);\n+        assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.3));\n+        assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.1));\n+\n+        try {\n+            testStatistic.chiSquareTest(expected1, observed1, 95);\n+            fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testT() throws Exception {\n+        double[] observed =\n+            {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0,  88.0, 98.0, 94.0, 101.0, 92.0, 95.0 };\n+        double mu = 100.0;\n+        SummaryStatistics sampleStats = null;\n+        sampleStats = SummaryStatistics.newInstance();\n+        for (int i = 0; i < observed.length; i++) {\n+            sampleStats.addValue(observed[i]);\n+        }\n+\n+        assertEquals(\"t statistic\", -2.82, testStatistic.t(mu, observed), 10E-3);\n+        assertEquals(\"t statistic\", -2.82, testStatistic.t(mu, sampleStats), 10E-3);\n+\n+        double[] nullObserved = null;\n+        try {\n+            testStatistic.t(mu, nullObserved);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        SummaryStatistics nullStats = null;   \n+        try {\n+            testStatistic.t(mu, nullStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        double[] emptyObs = {};\n+        try {\n+            testStatistic.t(mu, emptyObs);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        SummaryStatistics emptyStats =SummaryStatistics.newInstance();   \n+        try {\n+            testStatistic.t(mu, emptyStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        double[] tooShortObs = { 1.0 };\n+        try {\n+            testStatistic.t(mu, tooShortObs);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // exptected\n+        }\n+        try {\n+            testStatistic.tTest(mu, tooShortObs);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           // expected\n+        }  \n+\n+        SummaryStatistics tooShortStats = SummaryStatistics.newInstance();     \n+        tooShortStats.addValue(0d);\n+        tooShortStats.addValue(2d);\n+        try {\n+            testStatistic.t(mu, tooShortStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // exptected\n+        }\n+        try {\n+            testStatistic.tTest(mu, tooShortStats);\n+            fail(\"arguments too short, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // exptected\n+        }  \n+\n+        /** Moore and McCabe Example 8.3, p 516 */\n+        double[] oneSidedP =\n+            {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, 6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d };\n+        SummaryStatistics oneSidedPStats = SummaryStatistics.newInstance();    \n+        for (int i = 0; i < oneSidedP.length; i++) {\n+            oneSidedPStats.addValue(oneSidedP[i]);\n+        }\n+        assertEquals(\"one sample t stat\", 3.86, testStatistic.t(0d, oneSidedP), 0.01);\n+        assertEquals(\"one sample t stat\", 3.86, testStatistic.t(0d, oneSidedPStats), 0.01);\n+        assertEquals(\"one sample p value\", 0.00052, testStatistic.tTest(0d, oneSidedP) / 2d, 10E-5);\n+        assertEquals(\"one sample p value\", 0.00052, testStatistic.tTest(0d, oneSidedPStats) / 2d, 10E-5);\n+        assertTrue(\"one sample t-test reject\", testStatistic.tTest(0d, oneSidedP, 0.01));\n+        assertTrue(\"one sample t-test reject\", testStatistic.tTest(0d, oneSidedPStats, 0.01));\n+        assertTrue(\"one sample t-test accept\", !testStatistic.tTest(0d, oneSidedP, 0.0001));\n+        assertTrue(\"one sample t-test accept\", !testStatistic.tTest(0d, oneSidedPStats, 0.0001));\n+         \n+        try {\n+            testStatistic.tTest(0d, oneSidedP, 95);\n+            fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // exptected\n+        }  \n+        \n+        try {\n+            testStatistic.tTest(0d, oneSidedPStats, 95);\n+            fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+\n+        /** Moore and McCabe Example 8.12, p 552 */\n+        double[] sample1 = { 7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d };\n+        double[] sample2 = { -1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d };\n+        SummaryStatistics sampleStats1 = SummaryStatistics.newInstance();  \n+        for (int i = 0; i < sample1.length; i++) {\n+            sampleStats1.addValue(sample1[i]);\n+        }\n+        SummaryStatistics sampleStats2 = SummaryStatistics.newInstance();    \n+        for (int i = 0; i < sample2.length; i++) {\n+            sampleStats2.addValue(sample2[i]);\n+        }\n+         \n+        // Target comparison values computed using R version 1.8.1 (Linux version)\n+        assertEquals(\"two sample t stat\", 1.6037, testStatistic.t(sample1, sample2), 10E-4);\n+        assertEquals(\"two sample t stat\", 1.6037, testStatistic.t(sampleStats1, sampleStats2), 10E-4);\n+        assertEquals(\"two sample p value\", 0.0644, testStatistic.tTest(sample1, sample2) / 2d, 10E-4);\n+        assertEquals(\"two sample p value\", 0.0644, testStatistic.tTest(sampleStats1, sampleStats2) / 2d, 10E-4);\n+        \n+        assertTrue(\"two sample t-test reject\", testStatistic.tTest(sample1, sample2, 0.2));\n+        assertTrue(\"two sample t-test reject\", testStatistic.tTest(sampleStats1, sampleStats2, 0.2));\n+        assertTrue(\"two sample t-test accept\", !testStatistic.tTest(sample1, sample2, 0.1));\n+        assertTrue(\"two sample t-test accept\", !testStatistic.tTest(sampleStats1, sampleStats2, 0.1));\n+     \n+        try {\n+            testStatistic.tTest(sample1, sample2, 95);\n+            fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // exptected\n+        } \n+        \n+        try {\n+            testStatistic.tTest(sampleStats1, sampleStats2, 95);\n+            fail(\"alpha out of range, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected \n+        }  \n+        \n+        try {\n+            testStatistic.tTest(sample1, tooShortObs, .01);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            testStatistic.tTest(sampleStats1, tooShortStats, .01);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            testStatistic.tTest(sample1, tooShortObs);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           // expected\n+        }  \n+        \n+        try {\n+            testStatistic.tTest(sampleStats1, tooShortStats);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+        \n+        try {\n+            testStatistic.t(sample1, tooShortObs);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        try {\n+            testStatistic.t(sampleStats1, tooShortStats);\n+            fail(\"insufficient data, IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+           // expected\n+        }\n+    }\n+}", "timestamp": 1081715446, "metainfo": ""}