{"sha": "dd7c8dfb0a53aae71716d23b411efbfc934fa2d0", "log": "Removing the mapTo* metheds from OpenMapRealVector, and use the base class methods instead  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/ComposableFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/ComposableFunction.java\n         }\n     };\n \n+    /** The invert operator wrapped as a {@link ComposableFunction}. */\n+    public static final ComposableFunction INVERT = new ComposableFunction () {\n+        /** {@inheritDoc} */\n+        public double value(double d){\n+            return 1/d;\n+        }\n+    };\n+    \n     /** The {@code Math.sin} method wrapped as a {@link ComposableFunction}. */\n     public static final ComposableFunction SIN = new ComposableFunction() {\n         /** {@inheritDoc} */\n         /** {@inheritDoc} */\n         public double value(double d) {\n             return Math.log10(d);\n+        }\n+    };\n+    \n+    /** The {@code Math.log1p} method wrapped as a {@link ComposableFunction}. */\n+    public static final ComposableFunction LOG1P = new ComposableFunction () {\n+        public double value(double d){\n+            return Math.log1p(d);\n         }\n     };\n \n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n \n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.analysis.BinaryFunction;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.ComposableFunction;\n \n     /** {@inheritDoc} */\n     public RealVector mapAddToSelf(double d) {\n         if (d != 0) {\n-            Iterator<Entry> it = iterator();\n-            Entry e;\n-            while (it.hasNext() && (e = it.next()) != null) {\n-                e.setValue(e.getValue() + d);\n+            try {\n+                return mapToSelf(BinaryFunction.ADD.fix1stArgument(d));\n+            } catch (FunctionEvaluationException e) {\n+                throw new IllegalArgumentException(e);\n             }\n         }\n         return this;\n     }\n \n     /** {@inheritDoc} */\n+    public RealVector mapDivideToSelf(double d){\n+        try {\n+            return mapToSelf(BinaryFunction.DIVIDE.fix2ndArgument(d));\n+        } catch (FunctionEvaluationException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+    \n+    /** {@inheritDoc} */\n     public RealVector mapExp() {\n         return copy().mapExpToSelf();\n     }\n             throw new IllegalArgumentException(e);\n         }\n     }\n-\n+    \n     /** {@inheritDoc} */\n     public RealVector mapExpm1() {\n         return copy().mapExpm1ToSelf();\n     }\n-\n+    \n     /** {@inheritDoc} */\n     public RealVector mapExpm1ToSelf() {\n         try {\n             throw new IllegalArgumentException(e);\n         }\n     }\n-\n+    \n     /** {@inheritDoc} */\n     public RealVector mapFloor() {\n         return copy().mapFloorToSelf();\n     }\n-\n+    \n     /** {@inheritDoc} */\n     public RealVector mapFloorToSelf() {\n         try {\n             throw new IllegalArgumentException(e);\n         }\n     }\n-\n+    \n     /** {@inheritDoc} */\n     public RealVector mapInv() {\n         return copy().mapInvToSelf();\n     }\n+    \n+    /** {@inheritDoc} */\n+    public RealVector mapInvToSelf() {\n+        try {\n+            return mapToSelf(ComposableFunction.INVERT);\n+        } catch (FunctionEvaluationException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n \n     /** {@inheritDoc} */\n     public RealVector mapLog() {\n     /** {@inheritDoc} */\n     public RealVector mapLog1pToSelf() {\n         try {\n-            return mapToSelf(ComposableFunction.ASIN);\n+            return mapToSelf(ComposableFunction.LOG1P);\n         } catch (FunctionEvaluationException e) {\n             throw new IllegalArgumentException(e);\n         }\n     public RealVector mapMultiply(double d) {\n         return copy().mapMultiplyToSelf(d);\n     }\n+    \n+    /** {@inheritDoc} */\n+    public RealVector mapMultiplyToSelf(double d){\n+        try {\n+            return mapToSelf(BinaryFunction.MULTIPLY.fix1stArgument(d));\n+        } catch (FunctionEvaluationException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n \n     /** {@inheritDoc} */\n     public RealVector mapPow(double d) {\n         return copy().mapPowToSelf(d);\n     }\n+    \n+    /** {@inheritDoc} */\n+    public RealVector mapPowToSelf(double d){\n+        try {\n+            return mapToSelf(BinaryFunction.POW.fix2ndArgument(d));\n+        } catch (FunctionEvaluationException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n \n     /** {@inheritDoc} */\n     public RealVector mapRint() {\n     /** {@inheritDoc} */\n     public RealVector mapSubtract(double d) {\n         return copy().mapSubtractToSelf(d);\n+    }\n+    \n+    /** {@inheritDoc} */\n+    public RealVector mapSubtractToSelf(double d){\n+        return mapAddToSelf(-d);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n         return false;\n     }\n \n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapAbs() {\n-        return copy().mapAbsToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapAbsToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.abs(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapAcos() {\n-        return copy().mapAcosToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapAcosToSelf() {\n-        for (int i = 0; i < virtualSize; i++) {\n-            setEntry(i, Math.acos(getEntry(i)));\n-        }\n-        return this;\n-    }\n-\n+ \n     /** {@inheritDoc} */\n     public OpenMapRealVector mapAdd(double d) {\n         return copy().mapAddToSelf(d);\n         return this;\n     }\n \n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapAsin() {\n-        return copy().mapAsinToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapAsinToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.asin(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapAtan() {\n-        return copy().mapAtanToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapAtanToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.atan(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapCbrt() {\n-        return copy().mapCbrtToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapCbrtToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.cbrt(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapCeil() {\n-        return copy().mapCeilToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapCeilToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.ceil(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapCos() {\n-        return copy().mapCosToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapCosToSelf() {\n-        for (int i = 0; i < virtualSize; i++) {\n-            setEntry(i, Math.cos(getEntry(i)));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapCosh() {\n-        return copy().mapCoshToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapCoshToSelf() {\n-        for (int i = 0; i < virtualSize; i++) {\n-            setEntry(i, Math.cosh(getEntry(i)));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapDivide(double d) {\n-        return copy().mapDivideToSelf(d);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapDivideToSelf(double d) {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), iter.value() / d);\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapExp() {\n-        return copy().mapExpToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapExpToSelf() {\n-        for (int i = 0; i < virtualSize; i++) {\n-            entries.put(i, Math.exp(entries.get(i)));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapExpm1() {\n-        return copy().mapExpm1ToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapExpm1ToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.expm1(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapFloor() {\n-        return copy().mapFloorToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapFloorToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.floor(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapInv() {\n-        return copy().mapInvToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapInvToSelf() {\n-        for (int i = 0; i < virtualSize; i++) {\n-            setEntry(i, 1.0/getEntry(i));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapLog() {\n-        return copy().mapLogToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapLog10() {\n-        return copy().mapLog10ToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapLog10ToSelf() {\n-        for (int i = 0; i < virtualSize; i++) {\n-            setEntry(i, Math.log10(getEntry(i)));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapLog1p() {\n-        return copy().mapLog1pToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapLog1pToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.log1p(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapLogToSelf() {\n-        for (int i = 0; i < virtualSize; i++) {\n-            setEntry(i, Math.log(getEntry(i)));\n-        }\n-       return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapMultiply(double d) {\n-        return copy().mapMultiplyToSelf(d);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapMultiplyToSelf(double d) {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), iter.value() * d);\n-        }\n-        return this;\n-    }\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapPow(double d) {\n-        return copy().mapPowToSelf(d);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapPowToSelf(double d) {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.pow(iter.value(), d));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapRint() {\n-        return copy().mapRintToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapRintToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.rint(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapSignum() {\n-        return copy().mapSignumToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapSignumToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.signum(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapSin() {\n-        return copy().mapSinToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapSinToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.sin(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapSinh() {\n-        return copy().mapSinhToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapSinhToSelf() {\n-\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.sinh(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapSqrt() {\n-        return copy().mapSqrtToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapSqrtToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.sqrt(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapSubtract(double d) {\n-        return copy().mapSubtractToSelf(d);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapSubtractToSelf(double d) {\n-        return mapAddToSelf(-d);\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapTan() {\n-        return copy().mapTanToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapTanToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.tan(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapTanh() {\n-        return copy().mapTanhToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapTanhToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.tanh(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapUlp() {\n-        return copy().mapUlpToSelf();\n-    }\n-\n-    /** {@inheritDoc} */\n-    public OpenMapRealVector mapUlpToSelf() {\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            entries.put(iter.key(), Math.ulp(iter.value()));\n-        }\n-        return this;\n-    }\n-\n-    /**\n-     * Optimized method to compute the outer product.\n-     * @param v The vector to comput the outer product on\n-     * @return The outer product of <code>this</code> and <code>v</code>\n-     * @throws IllegalArgumentException If the dimensions don't match\n-     */\n-    public OpenMapRealMatrix outerproduct(OpenMapRealVector v) throws IllegalArgumentException{\n-        checkVectorDimensions(v.getDimension());\n-        OpenMapRealMatrix res = new OpenMapRealMatrix(virtualSize, virtualSize);\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            Iterator iter2 = v.getEntries().iterator();\n-            while (iter2.hasNext()) {\n-                iter2.advance();\n-                res.setEntry(iter.key(), iter2.key(), iter.value()*iter2.value());\n-            }\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public RealMatrix outerProduct(RealVector v)\n-            throws IllegalArgumentException {\n-        checkVectorDimensions(v.getDimension());\n-        if (v instanceof OpenMapRealVector) {\n-            return outerproduct((OpenMapRealVector)v);\n-        }\n-        RealMatrix res = new OpenMapRealMatrix(virtualSize, virtualSize);\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            int row = iter.key();\n-            for (int col = 0; col < virtualSize; col++) {\n-                res.setEntry(row, col, iter.value()*v.getEntry(col));\n-            }\n-        }\n-        return res;\n-    }\n-\n-    /** {@inheritDoc} */\n+     /** {@inheritDoc} */\n     public RealMatrix outerProduct(double[] v) throws IllegalArgumentException {\n         checkVectorDimensions(v.length);\n         RealMatrix res = new OpenMapRealMatrix(virtualSize, virtualSize);\n--- a/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java\n \n     // Testclass to test the RealVector interface\n     // only with enough content to support the test\n-    public static class SparseRealVectorTestImpl implements RealVector, Serializable {\n-\n-        /** Serializable version identifier. */\n-        private static final long serialVersionUID = 4715341047369582908L;\n-\n+    public static class SparseRealVectorTestImpl extends AbstractRealVector implements Serializable {\n+\n+        private static final long serialVersionUID = -6251371752518113791L;\n         /** Entries of the vector. */\n         protected double data[];\n \n             throw unsupported();\n         }\n \n-        public Iterator<Entry> sparseIterator() {\n-            throw unsupported();\n-        }\n-\n-        public RealVector copy() {\n+        public AbstractRealVector copy() {\n             return new SparseRealVectorTestImpl(data);\n         }\n ", "timestamp": 1260678454, "metainfo": ""}