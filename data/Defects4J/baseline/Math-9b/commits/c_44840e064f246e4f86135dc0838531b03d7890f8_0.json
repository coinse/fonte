{"sha": "44840e064f246e4f86135dc0838531b03d7890f8", "log": "Use reflection to change the compute setting. This allows the code to compile even though the field is private.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/util/FastMathLoadCheck.java\n+package org.apache.commons.math.util;\n+\n+import java.lang.reflect.Field;\n+\n+/*\n+ * FastMath load test - requires that FastMath.USE_PRECOMPUTED_TABLES be set to non-final.\n+ * \n+Sample output from:\n+java -cp target/classes;target/test-classes org.apache.commons.math.util.FastMathLoadCheck false false\n+java -cp target/classes;target/test-classes org.apache.commons.math.util.FastMathLoadCheck false true\n+java -cp target/classes;target/test-classes org.apache.commons.math.util.FastMathLoadCheck true  false\n+java -cp target/classes;target/test-classes org.apache.commons.math.util.FastMathLoadCheck true  true\n+\n+Using exp(100); compute=false\n+new   12155456       9219       5308       5029       5587       5308       5029       5029       5029       5308\n+Using exp(100); compute=true\n+new   34929579       9499       5308       5308       5029       5029       5029       5308       5028       5029\n+Using max(0,0); compute=false\n+new       5029       3632       3073       3073       3073       3073       3073       3073       3073       3073\n+Using max(0,0); compute=true\n+new       5028       3911       3073       3073       3073       3073       3073       3073       3073       3073\n+\n+ */\n+public class FastMathLoadCheck {\n+\n+    private static int LOOPS = 10;\n+    private static boolean MAX = false;\n+    private static boolean compute = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length>0) MAX = Boolean.valueOf(args[0]);\n+        if (args.length>1) compute = Boolean.valueOf(args[1]);\n+        if (args.length>2) LOOPS = Integer.valueOf(args[2]);\n+        p(\"Using \"+ (MAX ? \"max(0,0)\" : \"exp(100)\") + \"; compute=\" + compute+\"\\n\");\n+        Field usePrecompute = FastMath.class.getDeclaredField(\"USE_PRECOMPUTED_TABLES\");\n+        usePrecompute.setAccessible(true);\n+        if (usePrecompute.getBoolean(null) != compute) {\n+            usePrecompute.setBoolean(null, compute);\n+        }\n+        usePrecompute.setAccessible(false);\n+        test();\n+    }\n+    private static void test(){\n+        p(\"new\");\n+        for(int i=0; i< LOOPS; i++){\n+            p(\" \");\n+            long t1 = System.nanoTime();\n+            if (MAX) {\n+                FastMath.max(0,0);\n+            } else {\n+                FastMath.exp(100);\n+            }\n+            long t2 = System.nanoTime();\n+            p(\"%10d\",t2-t1);\n+        }\n+        p(\"\\n\");\n+    }\n+\n+    private static void p(String format, Object p){\n+        System.out.printf(format, p);\n+    }\n+    private static void p(Object p){\n+        System.out.print(p);\n+    }\n+}", "timestamp": 1315833657, "metainfo": ""}