{"sha": "c6a313643c2325c5682fbd26815eeae9dab392a0", "log": "added test for Fraction serialization  ", "commit": "\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n  * @since 1.1\n  * @version $Revision$ $Date$\n  */\n-public class Fraction extends Number implements FieldElement<Fraction>, Comparable<Fraction>, Serializable {\n-    // TODO: Add Serializable documentation\n-    // TODO: Check Serializable implementation\n+public class Fraction\n+    extends Number\n+    implements FieldElement<Fraction>, Comparable<Fraction>, Serializable {\n \n     /** A fraction representing \"2 / 1\". */\n     public static final Fraction TWO = new Fraction(2, 1);\n--- a/src/test/org/apache/commons/math/fraction/FractionTest.java\n+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java\n package org.apache.commons.math.fraction;\n \n import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.TestUtils;\n \n import junit.framework.TestCase;\n \n         assertEquals(\"3\", new Fraction(6, 2).toString());\n         assertEquals(\"2 / 3\", new Fraction(18, 27).toString());\n     }\n+\n+    public void testSerial() throws FractionConversionException {\n+        Fraction[] fractions = {\n+            new Fraction(3, 4), Fraction.ONE, Fraction.ZERO,\n+            new Fraction(17), new Fraction(Math.PI, 1000),\n+            new Fraction(-5, 2)\n+        };\n+        for (Fraction fraction : fractions) {\n+            assertEquals(fraction, TestUtils.serializeAndRecover(fraction));\n+        }\n+    }\n+\n }", "timestamp": 1248107386, "metainfo": ""}