{"sha": "ddc3ce711ca9ae54319058b5bbadef62327c1fd1", "log": "Replaced call to FieldDecompositionSolver<T>.solve(T[]) by FieldDecompositionSolver<T>.solve(FieldVector<T>). This is in accordance with JIRA MATH-661.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java\n                 {new Fraction(4), new Fraction(-3), new Fraction(-5)}\n         };\n         FieldMatrix<Fraction> coefficients = new BlockFieldMatrix<Fraction>(coefficientsData);\n-        Fraction[] constants = {new Fraction(1), new Fraction(-2), new Fraction(1)};\n-        Fraction[] solution = new FieldLUDecompositionImpl<Fraction>(coefficients).getSolver().solve(constants);\n+        Fraction[] constants = {\n+            new Fraction(1), new Fraction(-2), new Fraction(1)\n+        };\n+        Fraction[] solution;\n+        solution = new FieldLUDecompositionImpl<Fraction>(coefficients)\n+            .getSolver()\n+            .solve(new ArrayFieldVector<Fraction>(constants, false)).toArray();\n         Assert.assertEquals(new Fraction(2).multiply(solution[0]).\n                      add(new Fraction(3).multiply(solution[1])).\n                      subtract(new Fraction(2).multiply(solution[2])),\n--- a/src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java\n         FieldMatrix<Fraction> mInv = new Array2DRowFieldMatrix<Fraction>(testDataInv);\n         FieldMatrix<Fraction> mPlusInv = new Array2DRowFieldMatrix<Fraction>(testDataPlusInv);\n         FieldMatrix<Fraction> identity = new Array2DRowFieldMatrix<Fraction>(id);\n-        \n-        TestUtils.assertEquals(m.power(0), identity);        \n-        TestUtils.assertEquals(mInv.power(0), identity);        \n+\n+        TestUtils.assertEquals(m.power(0), identity);\n+        TestUtils.assertEquals(mInv.power(0), identity);\n         TestUtils.assertEquals(mPlusInv.power(0), identity);\n-        \n-        TestUtils.assertEquals(m.power(1), m);        \n-        TestUtils.assertEquals(mInv.power(1), mInv);        \n-        TestUtils.assertEquals(mPlusInv.power(1), mPlusInv); \n-        \n+\n+        TestUtils.assertEquals(m.power(1), m);\n+        TestUtils.assertEquals(mInv.power(1), mInv);\n+        TestUtils.assertEquals(mPlusInv.power(1), mPlusInv);\n+\n         FieldMatrix<Fraction> C1 = m.copy();\n         FieldMatrix<Fraction> C2 = mInv.copy();\n         FieldMatrix<Fraction> C3 = mPlusInv.copy();\n-        \n+\n         // stop at 5 to avoid overflow\n         for (int i = 2; i <= 5; ++i) {\n             C1 = C1.multiply(m);\n             C2 = C2.multiply(mInv);\n             C3 = C3.multiply(mPlusInv);\n-            \n-            TestUtils.assertEquals(m.power(i), C1);        \n-            TestUtils.assertEquals(mInv.power(i), C2);        \n-            TestUtils.assertEquals(mPlusInv.power(i), C3);            \n-        }\n-        \n+\n+            TestUtils.assertEquals(m.power(i), C1);\n+            TestUtils.assertEquals(mInv.power(i), C2);\n+            TestUtils.assertEquals(mPlusInv.power(i), C3);\n+        }\n+\n         try {\n             FieldMatrix<Fraction> mNotSquare = new Array2DRowFieldMatrix<Fraction>(testData2T);\n             mNotSquare.power(2);\n         } catch (NonSquareMatrixException ex) {\n             // ignored\n         }\n-        \n+\n         try {\n             m.power(-1);\n             Assert.fail(\"Expecting IllegalArgumentException\");\n                 {new Fraction(4), new Fraction(-3), new Fraction(-5)}\n         };\n         FieldMatrix<Fraction> coefficients = new Array2DRowFieldMatrix<Fraction>(coefficientsData);\n-        Fraction[] constants = {new Fraction(1), new Fraction(-2), new Fraction(1)};\n-        Fraction[] solution = new FieldLUDecompositionImpl<Fraction>(coefficients).getSolver().solve(constants);\n+        Fraction[] constants = {\n+            new Fraction(1), new Fraction(-2), new Fraction(1)\n+        };\n+        Fraction[] solution;\n+        solution = new FieldLUDecompositionImpl<Fraction>(coefficients)\n+            .getSolver()\n+            .solve(new ArrayFieldVector<Fraction>(constants, false)).toArray();\n         Assert.assertEquals(new Fraction(2).multiply(solution[0]).\n                      add(new Fraction(3).multiply(solution[1])).\n                      subtract(new Fraction(2).multiply(solution[2])), constants[0]);\n--- a/src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java\n                 { new Fraction(4), new Fraction(-3), new Fraction(-5) } };\n         FieldMatrix<Fraction> coefficients = createSparseMatrix(coefficientsData);\n         Fraction[] constants = { new Fraction(1), new Fraction(-2), new Fraction(1) };\n-        Fraction[] solution = new FieldLUDecompositionImpl<Fraction>(coefficients).getSolver().solve(constants);\n+        Fraction[] solution;\n+        solution = new FieldLUDecompositionImpl<Fraction>(coefficients)\n+            .getSolver()\n+            .solve(new ArrayFieldVector<Fraction>(constants, false)).toArray();\n         Assert.assertEquals((new Fraction(2).multiply((solution[0])).add(new Fraction(3).multiply(solution[1])).subtract(new Fraction(2).multiply(solution[2]))).doubleValue(),\n                 constants[0].doubleValue(), 1E-12);\n         Assert.assertEquals(((new Fraction(-1).multiply(solution[0])).add(new Fraction(7).multiply(solution[1])).add(new Fraction(6).multiply(solution[2]))).doubleValue(),", "timestamp": 1316413120, "metainfo": ""}