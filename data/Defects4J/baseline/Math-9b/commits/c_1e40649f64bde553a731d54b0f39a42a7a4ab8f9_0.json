{"sha": "1e40649f64bde553a731d54b0f39a42a7a4ab8f9", "log": "Use the \"isSymmetric\" utility method from \"MatrixUtils\" (copied from \"EigenDecomposition\" in MATH-884).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java\n+++ b/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java\n      */\n     public EigenDecomposition(final RealMatrix matrix)\n         throws MathArithmeticException {\n-        isSymmetric = isSymmetric(matrix, false);\n+        final double symTol = 10 * matrix.getRowDimension() * matrix.getColumnDimension() * Precision.EPSILON;\n+        isSymmetric = MatrixUtils.isSymmetric(matrix, symTol);\n         if (isSymmetric) {\n             transformToTridiagonal(matrix);\n             findEigenVectors(transformer.getQ().getData());\n     public EigenDecomposition(final double[] main, final double[] secondary,\n                               final double splitTolerance) {\n         this(main, secondary);\n-    }\n-\n-    /**\n-     * Check if a matrix is symmetric.\n-     *\n-     * @param matrix Matrix to check.\n-     * @param raiseException If {@code true}, the method will throw an\n-     * exception if {@code matrix} is not symmetric.\n-     * @return {@code true} if {@code matrix} is symmetric.\n-     * @throws NonSymmetricMatrixException if the matrix is not symmetric and\n-     * {@code raiseException} is {@code true}.\n-     */\n-    private boolean isSymmetric(final RealMatrix matrix,\n-                                boolean raiseException) {\n-        final int rows = matrix.getRowDimension();\n-        final int columns = matrix.getColumnDimension();\n-        final double eps = 10 * rows * columns * Precision.EPSILON;\n-        for (int i = 0; i < rows; ++i) {\n-            for (int j = i + 1; j < columns; ++j) {\n-                final double mij = matrix.getEntry(i, j);\n-                final double mji = matrix.getEntry(j, i);\n-                if (FastMath.abs(mij - mji) >\n-                    (FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * eps)) {\n-                    if (raiseException) {\n-                        throw new NonSymmetricMatrixException(i, j, eps);\n-                    }\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n     }\n \n     /**", "timestamp": 1351557524, "metainfo": ""}