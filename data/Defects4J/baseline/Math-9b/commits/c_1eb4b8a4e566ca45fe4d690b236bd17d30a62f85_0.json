{"sha": "1eb4b8a4e566ca45fe4d690b236bd17d30a62f85", "log": "Checkstyle fixes, @since tags.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n  * bicubic spline interpolation</a>.\n  *\n  * @version $Revision$ $Date$\n+ * @since 2.1\n  */\n public class BicubicSplineInterpolatingFunction\n     implements BivariateRealFunction {\n      * Matrix to compute the spline coefficients from the function values\n      * and function derivatives values\n      */\n-    private final static double[][] aInv = {\n+    private static final double[][] AINV = {\n         { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n         { 0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0 },\n         { -3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0 },\n                                               double[][] dZdX,\n                                               double[][] dZdY,\n                                               double[][] dZdXdY)\n-        throws MathException {\n+        throws DimensionMismatchException {\n         final int xLen = x.length;\n         final int yLen = y.length;\n \n             return -1;\n         }\n \n-        for (int i = 1, max = val.length; i < max; i++) {\n+        int max = val.length;\n+        for (int i = 1; i < max; i++) {\n             if (c <= val[i]) {\n                 return i - 1;\n             }\n \n         for (int i = 0; i < 16; i++) {\n             double result = 0;\n-            final double[] row = aInv[i];\n+            final double[] row = AINV[i];\n             for (int j = 0; j < 16; j++) {\n                 result += row[j] * beta[j];\n             }\n \n /**\n  * 2D-spline function.\n+ * \n+ * @version $Revision$ $Date$\n  */\n class BicubicSplineFunction\n     implements BivariateRealFunction {\n         final double y2 = y * y;\n         final double y3 = y2 * y;\n \n-        return a00 + a01 * y + a02 * y2 + a03 * y3\n-            + a10 * x + a11 * x * y + a12 * x * y2 + a13 * x * y3\n-            + a20 * x2 + a21 * x2 * y + a22 * x2 * y2 + a23 * x2 * y3\n-            + a30 * x3 + a31 * x3 * y + a32 * x3 * y2 + a33 * x3 * y3;\n+        return a00 + a01 * y + a02 * y2 + a03 * y3 +\n+            a10 * x + a11 * x * y + a12 * x * y2 + a13 * x * y3 +\n+            a20 * x2 + a21 * x2 * y + a22 * x2 * y2 + a23 * x2 * y3 +\n+            a30 * x3 + a31 * x3 * y + a32 * x3 * y2 + a33 * x3 * y3;\n     }\n }\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java\n  * chapter 2.\n  *\n  * @version $Revision$ $Date$\n+ * @since 2.1\n  */\n public class SmoothingBicubicSplineInterpolator\n     implements BivariateRealGridInterpolator {\n             for (int j = 0; j < yLen; j++) {\n                 final int nJ = nextIndex(j, yLen);\n                 final int pJ = previousIndex(j);\n-                dZdXdY[i][j] =  (zY_2[nI][nJ] - zY_2[nI][pJ]\n-                                 - zY_2[pI][nJ] + zY_2[pI][pJ])\n-                    / ((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) ;\n+                dZdXdY[i][j] =  (zY_2[nI][nJ] - zY_2[nI][pJ] -\n+                                 zY_2[pI][nJ] + zY_2[pI][pJ]) /\n+                    ((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) ;\n             }\n         }\n \n      * It is assumed (but not checked) that {@code i} is smaller than the size of the array.\n      *\n      * @param i Index\n-     * @param max Upper limit of the array\n      * @return the previous index\n      */\n     private int previousIndex(int i) {\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n     public static void checkOrder(double[] val, int dir, boolean strict) {\n         double previous = val[0];\n \n-        for (int i = 1, max = val.length; i < max; i++) {\n+        int max = val.length;\n+        for (int i = 1; i < max; i++) {\n             if (dir > 0) {\n                 if (strict) {\n                     if (val[i] <= previous) {", "timestamp": 1269479211, "metainfo": ""}