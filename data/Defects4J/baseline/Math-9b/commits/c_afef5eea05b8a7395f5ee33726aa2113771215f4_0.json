{"sha": "afef5eea05b8a7395f5ee33726aa2113771215f4", "log": "replaced the custom comparison method in SimplexSolver with the new MathUtils.compareTo(double, double, int) with maxUlps as the third parameter, as per Gilles advice.  Jira: MATH-434  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n \n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.RealPointValuePair;\n-import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.util.MathUtils;\n \n \n         Integer minPos = null;\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (MathUtils.compareTo(entry, minValue, getEpsilon(entry)) < 0) {\n+            if (MathUtils.compareTo(entry, minValue, maxUlps) < 0) {\n                 minValue = entry;\n                 minPos = i;\n             }\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n             \n-            if (MathUtils.compareTo(entry, 0d, getEpsilon(entry)) > 0) {\n+            if (MathUtils.compareTo(entry, 0d, maxUlps) > 0) {\n                 final double ratio = rhs / entry;\n-                final int cmp = MathUtils.compareTo(ratio, minRatio, getEpsilon(ratio));\n+                final int cmp = MathUtils.compareTo(ratio, minRatio, maxUlps);\n                 if (cmp == 0) {\n                     minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n             for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n               int column = i + tableau.getArtificialVariableOffset();\n               final double entry = tableau.getEntry(row, column);\n-              if (MathUtils.equals(entry, 1d, getEpsilon(entry)) &&\n+              if (MathUtils.equals(entry, 1d, maxUlps) &&\n                   row.equals(tableau.getBasicRow(column))) {\n                 return row;\n               }\n         return tableau.getSolution();\n     }\n \n-    /**\n-     * Get an epsilon that is adjusted to the magnitude of the given value.\n-     * @param value the value for which to get the epsilon\n-     * @return magnitude-adjusted epsilon using {@link FastMath.ulp}\n-     */\n-    private double getEpsilon(double value) {\n-        return FastMath.ulp(value) * (double) maxUlps;\n-    }\n }", "timestamp": 1302451256, "metainfo": ""}