{"sha": "efce868eed4c8c4ffe3e6300a6c37aa851877edd", "log": "improved javadoc for FastMath.  JIRA: MATH-579  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n package org.apache.commons.math.util;\n \n /**\n- * Faster, more accurate, portable alternative to {@link StrictMath}.\n+ * Faster, more accurate, portable alternative to {@link StrictMath}\n+ * for large scale computation.\n+ * <p>\n+ * FastMath speed is achieved by relying heavily on optimizing compilers\n+ * to native code present in many JVM todays and use of large tables that\n+ * are computed once at class loading (regardless of the number of subsequent\n+ * calls to computation methods). This implies that FastMath is targeted\n+ * more towards large scale computation (i.e. computation that take at least\n+ * a handful of seconds to complete) on desktop or server machines rather\n+ * than very small utilities on devices with limited power (i.e. computation\n+ * that should return a result almost instantly). Note that FastMath is\n+ * extensively used inside Apache Commons Math, so by calling some algorithms,\n+ * the one-shot overhead will occur regardless of the end-user calling FastMath\n+ * methods directly or not.\n+ * <p>\n+ * <p>\n+ * FastMath accuracy should be mostly independent of the JVM as it relies only\n+ * on IEEE-754 basic operations and on embedded tables. Almost all operations\n+ * are accurate to about 0.5 ulp throughout the domain range. This statement,\n+ * of course is only a rough global observed behavior, it is <em>not</em> a\n+ * guarantee for <em>every</em> double numbers input (see William Kahan's <a\n+ * href=\"http://en.wikipedia.org/wiki/Rounding#The_table-maker.27s_dilemma\">Table\n+ * Maker's Dilemma</a>).\n+ * </p>\n  * <p>\n  * Additionally implements the following methods not found in StrictMath:\n  * <ul>", "timestamp": 1305712104, "metainfo": ""}