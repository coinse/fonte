{"sha": "deebf2d20d0a7f4c225f3e6c2d4b70d6c53c7d76", "log": "MATH-378   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.analysis.interpolation;\n+\n+import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n+import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n+import org.apache.commons.math.util.LocalizedFormats;\n+\n+/**\n+ * Implements a linear function for interpolation of real univariate functions.\n+ */\n+public class LinearInterpolator implements UnivariateRealInterpolator {\n+    /**\n+     * Computes a linear interpolating function for the data set.\n+     * @param x the arguments for the interpolation points\n+     * @param y the values for the interpolation points\n+     * @return a function which interpolates the data set\n+    */\n+    public PolynomialSplineFunction interpolate(double x[], double y[]) {\n+        if (x.length != y.length) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, x.length, y.length);\n+        }\n+\n+        if (x.length < 2) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  LocalizedFormats.WRONG_NUMBER_OF_POINTS, 2, x.length);\n+        }\n+\n+        // Number of intervals.  The number of data points is n + 1.\n+        int n = x.length - 1;\n+\n+        for (int i = 0; i < n; i++) {\n+            if (x[i] >= x[i + 1]) {\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                LocalizedFormats.NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS,\n+                i, i+1, x[i], x[i+1]);\n+            }\n+        }\n+\n+        // Slope of the lines between the datapoints.\n+        final double m[] = new double[n];\n+        for (int i = 0; i < n; i++) {\n+            m[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]);\n+        }\n+\n+        PolynomialFunction polynomials[] = new PolynomialFunction[n];\n+        final double coefficients[] = new double[2];\n+        for (int i = 0; i < n; i++) {\n+            coefficients[0] = y[i];\n+            coefficients[1] = m[i];\n+            polynomials[i] = new PolynomialFunction(coefficients);\n+        }\n+\n+        return new PolynomialSplineFunction(x, polynomials);\n+    }\n+\n+}\n--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n         int n = x.length - 1;\n \n         for (int i = 0; i < n; i++) {\n-            if (x[i]  >= x[i + 1]) {\n+            if (x[i] >= x[i + 1]) {\n                 throw MathRuntimeException.createIllegalArgumentException(\n                       LocalizedFormats.NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS,\n                       i, i+1, x[i], x[i+1]);\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.analysis.interpolation;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.TestUtils;\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n+import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test the LinearInterpolator.\n+ */\n+public class LinearInterpolatorTest {\n+\n+    /** error tolerance for spline interpolator value at knot points */\n+    protected double knotTolerance = 1E-12;\n+\n+    /** error tolerance for interpolating polynomial coefficients */\n+    protected double coefficientTolerance = 1E-6;\n+\n+    /** error tolerance for interpolated values */\n+    protected double interpolationTolerance = 1E-12;\n+\n+    @Test\n+    public void testInterpolateLinearDegenerateTwoSegment()\n+        throws Exception {\n+        double x[] = { 0.0, 0.5, 1.0 };\n+        double y[] = { 0.0, 0.5, 1.0 };\n+        UnivariateRealInterpolator i = new LinearInterpolator();\n+        UnivariateRealFunction f = i.interpolate(x, y);\n+        verifyInterpolation(f, x, y);\n+\n+        // Verify coefficients using analytical values\n+        PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();\n+        double target[] = {y[0], 1d};\n+        TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[1], 1d};\n+        TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);\n+\n+        // Check interpolation\n+        Assert.assertEquals(0.0,f.value(0.0), interpolationTolerance);\n+        Assert.assertEquals(0.4,f.value(0.4), interpolationTolerance);\n+        Assert.assertEquals(1.0,f.value(1.0), interpolationTolerance);\n+    }\n+\n+    @Test\n+    public void testInterpolateLinearDegenerateThreeSegment()\n+        throws Exception {\n+        double x[] = { 0.0, 0.5, 1.0, 1.5 };\n+        double y[] = { 0.0, 0.5, 1.0, 1.5 };\n+        UnivariateRealInterpolator i = new LinearInterpolator();\n+        UnivariateRealFunction f = i.interpolate(x, y);\n+        verifyInterpolation(f, x, y);\n+\n+        // Verify coefficients using analytical values\n+        PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();\n+        double target[] = {y[0], 1d};\n+        TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[1], 1d};\n+        TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[2], 1d};\n+        TestUtils.assertEquals(polynomials[2].getCoefficients(), target, coefficientTolerance);\n+\n+        // Check interpolation\n+        Assert.assertEquals(0,f.value(0), interpolationTolerance);\n+        Assert.assertEquals(1.4,f.value(1.4), interpolationTolerance);\n+        Assert.assertEquals(1.5,f.value(1.5), interpolationTolerance);\n+    }\n+\n+    @Test\n+    public void testInterpolateLinear() throws Exception {\n+        double x[] = { 0.0, 0.5, 1.0 };\n+        double y[] = { 0.0, 0.5, 0.0 };\n+        UnivariateRealInterpolator i = new LinearInterpolator();\n+        UnivariateRealFunction f = i.interpolate(x, y);\n+        verifyInterpolation(f, x, y);\n+\n+        // Verify coefficients using analytical values\n+        PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();\n+        double target[] = {y[0], 1d};\n+        TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);\n+        target = new double[]{y[1], -1d};\n+        TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);\n+    }\n+\n+    @Test\n+    public void testIllegalArguments() throws MathException {\n+        // Data set arrays of different size.\n+        UnivariateRealInterpolator i = new LinearInterpolator();\n+        try {\n+            double xval[] = { 0.0, 1.0 };\n+            double yval[] = { 0.0, 1.0, 2.0 };\n+            i.interpolate(xval, yval);\n+            Assert.fail(\"Failed to detect data set array with different sizes.\");\n+        } catch (IllegalArgumentException iae) {\n+            // Expected.\n+        }\n+        // X values not sorted.\n+        try {\n+            double xval[] = { 0.0, 1.0, 0.5 };\n+            double yval[] = { 0.0, 1.0, 2.0 };\n+            i.interpolate(xval, yval);\n+            Assert.fail(\"Failed to detect unsorted arguments.\");\n+        } catch (IllegalArgumentException iae) {\n+            // Expected.\n+        }\n+    }\n+\n+    /**\n+     * verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length.\n+     */\n+    protected void verifyInterpolation(UnivariateRealFunction f, double x[], double y[])\n+        throws Exception{\n+        for (int i = 0; i < x.length; i++) {\n+            Assert.assertEquals(f.value(x[i]), y[i], knotTolerance);\n+        }\n+    }\n+\n+}", "timestamp": 1277219151, "metainfo": ""}