{"sha": "851a28048bbd6121deb65c64d189f43b1191a82d", "log": "Added Normal Distribution implementations and tests contributed by Piotr Kochanski.   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * <li>Exponential</li>\n  * <li>F</li>\n  * <li>Gamma</li>\n+ * <li>HyperGeometric</li>\n+ * <li>Normal</li>\n  * <li>Student's t</li>\n  * </ul>\n  * \n  * ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);\n  * </pre>\n  * \n- * @version $Revision: 1.17 $ $Date: 2003/11/15 16:01:35 $\n+ * @version $Revision: 1.18 $ $Date: 2004/01/26 03:04:31 $\n  */\n public abstract class DistributionFactory {\n     /**\n     public abstract HypergeometricDistribution\n         createHypergeometricDistribution(int populationSize,\n             int numberOfSuccesses, int sampleSize);\n+ \n+\t/**\n+\t * Create a new normal distribution with the given mean and standard\n+\t * deviation values.\n+\t * @param mean arithmetic mean.\n+\t * @param sd standard deviation.\n+\t * @return a new normal distribution.  \n+\t */           \n+    public abstract NormalDistribution \n+    \tcreateNormalDistribution(double mean, double sd);\n+    \t\n+\t/**\n+\t * Create a new normal distribution with the mean equal to zero and standard\n+\t * deviation equal to one.\n+\t * @return a new normal distribution.  \n+\t */               \n+\tpublic abstract NormalDistribution createNormalDistribution();\n }\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * A concrete distribution factory.  This is the default factory used by\n  * Commons-Math.\n  *  \n- * @version $Revision: 1.16 $ $Date: 2003/11/19 03:22:53 $\n+ * @version $Revision: 1.17 $ $Date: 2004/01/26 03:04:31 $\n  */\n public class DistributionFactoryImpl extends DistributionFactory implements Serializable  {\n     /**\n             numberOfSuccesses, sampleSize);\n     }\n \n+\t/**\n+\t * Create a new normal distribution with the given mean and standard\n+\t * deviation values.\n+\t * @param mean arithmetic mean.\n+\t * @param sd standard deviation.\n+\t * @return a new normal distribution.  \n+\t */   \n+\tpublic NormalDistribution createNormalDistribution(double mean, double sd) {\n+\t\treturn new NormalDistributionImpl(mean, sd);\n+\t}\n+\n+\t/**\n+\t * Create a new normal distribution with the mean equal to zero and standard\n+\t * deviation equal to one.\n+\t * @return a new normal distribution.  \n+\t */ \n+\tpublic NormalDistribution createNormalDistribution() {\n+\t\treturn new NormalDistributionImpl();\n+\t}\n+\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+/**\n+ * Normal (Gauss) Distribution.\n+ * Instances of NormalDistribution objects should be created using\n+ * {@link DistributionFactory#createNormalDistribution(double, double)}.<p>\n+ * \n+ * References:<p>\n+ * <ul>\n+ * <li><a href=\"http://mathworld.wolfram.com/NormalDistribution.html\">\n+ * Normal Distribution</a></li>\n+ * </ul>\n+ * \n+ */\n+public interface NormalDistribution extends ContinuousDistribution {\n+\t/**\n+\t * Access the mean.\n+\t * @return mean for this distribution\n+\t */\n+\tdouble getMean();\n+\t/**\n+\t * Modify the mean.\n+\t * @param mean for this distribution\n+\t */\n+\tvoid setMean(double mean);\n+\t/**\n+\t * Access the standard deviation.\n+\t * @return standard deviation for this distribution\n+\t */\n+\tdouble getStandardDeviation();\n+\t/**\n+\t * Modify the standard deviation.\n+\t * @param sd standard deviation for this distribution\n+\t */\n+\tvoid setStandardDeviation(double sd);\n+\t\n+\t/**\n+\t * Access algorithm used to calculate cummulative probability\n+\t * @return cdfAlgorithm the value of cummulative probability\n+\t */\n+\tpublic NormalCDFAlgorithm getCdfAlgorithm();\n+\n+\t/**\n+\t * Modify the algorithm used to calculate cummulative probability\n+\t * @param normalCDF the algorithm used to calculate cummulative probability\n+\t */\n+\tpublic void setCdfAlgorithm(NormalCDFAlgorithm normalCDF);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Default implementation of\n+ * {@link org.apache.commons.math.distribution.NormalDistribution}.<p>\n+ * You can choose the algorithm used to calculate cummulative probability\n+ * using method {@link #setCdfAlgorithm}. The deafault is the Cody algorithm \n+ * {@link org.apache.commons.math.distribution.NormalCDFPreciseAlgorithm}\n+ */\n+public class NormalDistributionImpl extends AbstractContinuousDistribution \n+\t\timplements NormalDistribution, Serializable {\n+\tprivate double mean = 0;\n+\tprivate double standardDeviation = 1;\n+\tprivate NormalCDFAlgorithm cdfAlgorithm = new NormalCDFPreciseAlgorithm();\n+\t\n+\t/**\n+\t * Create a normal distribution using the given mean and standard deviation.\n+\t * @param mean mean for this distribution\n+\t * @param sd standard deviation for this distribution\n+\t */\n+\tpublic NormalDistributionImpl(double mean, double sd){\n+\t\tsuper();\n+\t\tsetMean(mean);\n+\t\tsetStandardDeviation(sd);\n+\t}\n+\t/**\n+\t * Creates normal distribution with the mean equal to zero and standard\n+\t * deviation equal to one. \n+\t */\n+\tpublic NormalDistributionImpl(){\n+\t\tsuper();\n+\t\tsetMean(0.0);\n+\t\tsetStandardDeviation(1.0);\n+\t}\t\n+\t/**\n+\t * Access the mean.\n+\t * @return mean for this distribution\n+\t */\t\n+\tpublic double getMean() {\n+\t\treturn mean;\n+\t}\n+\t/**\n+\t * Modify the mean.\n+\t * @param mean for this distribution\n+\t */\n+\tpublic void setMean(double mean) {\n+\t\tthis.mean = mean;\n+\t}\n+\n+\t/**\n+\t * Access the standard deviation.\n+\t * @return standard deviation for this distribution\n+\t */\n+\tpublic double getStandardDeviation() {\n+\t\treturn standardDeviation;\n+\t}\n+\n+\t/**\n+\t * Modify the standard deviation.\n+\t * @param sd standard deviation for this distribution\n+\t */\n+\tpublic void setStandardDeviation(double sd) {\n+\t\tif (sd < 0.0) {\n+\t\t\tthrow new IllegalArgumentException(\"Standard deviation must be\" +\n+\t\t\t\t\"positive or zero.\");\n+\t\t}\t\t\n+\t\tstandardDeviation = sd;\n+\t}\n+\n+\t/**\n+\t * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n+\t * @param x the value at which the CDF is evaluated.\n+\t * @return CDF evaluted at <code>x</code>. \n+\t */\n+\tpublic double cummulativeProbability(double x) {\n+\t\tdouble z = x;\n+\t\tif(standardDeviation > 0){\n+\t\t\tz = (x - mean)/standardDeviation;\n+\t\t}else{\n+\t\t\treturn 0.0;\n+\t\t}\n+\t\treturn cdfAlgorithm.cdf(z);\n+\t}\n+\n+\n+\t/**\n+\t * For this distribution, X, this method returns the critical point x, such\n+\t * that P(X &lt; x) = <code>p</code>.<p>\n+\t * Provided implementation is adopted from \n+     * <a href=\"http://www.r-project.org/\">R statistical package</a> function\n+     * <code>qnorm(...)</code>.<p>\n+\t * References:\n+\t * <ul>\n+\t * <li>\n+\t *  Beasley, J. D. and S. G. Springer (1977).\n+\t *  <a href=\"http://lib.stat.cmu.edu/apstat/111\">\n+\t *\tAlgorithm AS 111: The percentage points of the normal distribution</a>,\n+\t *\tApplied Statistics, 26, 118-121.\n+\t * </li>\n+\t * <li>\n+\t *  Wichura, M.J. (1988).\n+\t *  <a href=\"http://lib.stat.cmu.edu/apstat/241\">\n+\t *  Algorithm AS 241: The Percentage Points of the Normal Distribution.</a>\n+\t *  Applied Statistics, 37, 477-484.\n+\t * </li>\n+\t * </ul>\n+\t *\n+\t * @param p the desired probability\n+\t * @return x, such that P(X &lt; x) = <code>p</code>\n+\t */\n+\tpublic double inverseCummulativeProbability(double p) {\n+\t\tif (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new IllegalArgumentException(\"p must be between 0.0 and 1.0, inclusive.\");\n+\t\t}\n+\t\t\n+\t\t//TODO is this ok?\n+\t\tif(standardDeviation == 0){\n+\t\t\treturn mean;\n+\t\t}\n+\t\t\n+\t\tdouble r, val;\t\t\n+\t\tdouble q = p - 0.5;\n+\n+\t\tif (Math.abs(q) <= .425) {/* 0.075 <= p <= 0.925 */\n+\t\t\tr = 0.180625 - q*q;\n+\t\t\tval =\n+\t\t\t\tq * (((((((r * 2509.0809287301226727 +\n+\t\t\t\t\t\t   33430.575583588128105) * r + 67265.770927008700853) * r +\n+\t\t\t\t\t\t 45921.953931549871457) * r + 13731.693765509461125) * r +\n+\t\t\t\t\t   1971.5909503065514427) * r + 133.14166789178437745) * r +\n+\t\t\t\t\t 3.387132872796366608)\n+\t\t\t\t/ (((((((r * 5226.495278852854561 +\n+\t\t\t\t\t\t 28729.085735721942674) * r + 39307.89580009271061) * r +\n+\t\t\t\t\t   21213.794301586595867) * r + 5394.1960214247511077) * r +\n+\t\t\t\t\t 687.1870074920579083) * r + 42.313330701600911252) * r + 1.);\n+\t\t}else { //closer than 0.075 from {0,1} boundary\n+\t\tif (q > 0)\n+\t\t\tr = 1 - p;\n+\t\telse\n+\t\t\tr = p;\n+\t\tr = Math.sqrt(- Math.log(r));\n+\t\tif (r <= 5.0) {\n+\t\t\tr += -1.6;\n+\t\t\tval = (((((((r * 7.7454501427834140764e-4 +\n+\t\t\t\t\t   0.0227238449892691845833) * r + 0.24178072517745061177) *\n+\t\t\t\t\t r + 1.27045825245236838258) * r +\n+\t\t\t\t\t3.64784832476320460504) * r + 5.7694972214606914055) *\n+\t\t\t\t  r + 4.6303378461565452959) * r +\n+\t\t\t\t 1.42343711074968357734)\n+\t\t\t\t/ (((((((r *\n+\t\t\t\t\t\t 1.05075007164441684324e-9 + 5.475938084995344946e-4) *\n+\t\t\t\t\t\tr + 0.0151986665636164571966) * r +\n+\t\t\t\t\t   0.14810397642748007459) * r + 0.68976733498510000455) *\n+\t\t\t\t\t r + 1.6763848301838038494) * r +\n+\t\t\t\t\t2.05319162663775882187) * r + 1.0);\n+\t\t}else { //very close to  0 or 1\n+\t\t\tr += -5.;\n+\t\t\tval = (((((((r * 2.01033439929228813265e-7 +\n+\t\t\t\t\t   2.71155556874348757815e-5) * r +\n+\t\t\t\t\t  0.0012426609473880784386) * r + 0.026532189526576123093) *\n+\t\t\t\t\tr + 0.29656057182850489123) * r +\n+\t\t\t\t   1.7848265399172913358) * r + 5.4637849111641143699) *\n+\t\t\t\t r + 6.6579046435011037772)\n+\t\t\t\t/ (((((((r *\n+\t\t\t\t\t\t 2.04426310338993978564e-15 + 1.4215117583164458887e-7)*\n+\t\t\t\t\t\tr + 1.8463183175100546818e-5) * r +\n+\t\t\t\t\t   7.868691311456132591e-4) * r + 0.0148753612908506148525)\n+\t\t\t\t\t * r + 0.13692988092273580531) * r +\n+\t\t\t\t\t0.59983220655588793769) * r + 1.0);\n+\t\t}\n+\t\tif(q < 0.0)\n+\t\t\tval = -val;\n+\t\t}\n+\t\treturn mean + standardDeviation*val;\n+\t}\n+\n+\n+\t/**\n+\t * Access algorithm used to calculate cummulative probability\n+\t * @return cdfAlgorithm the value of cummulative probability\n+\t */\n+\tpublic NormalCDFAlgorithm getCdfAlgorithm() {\n+\t\treturn cdfAlgorithm;\n+\t}\n+\n+\n+\t/**\n+\t * Modify the algorithm used to calculate cummulative probability\n+\t * @param normalCDF the algorithm used to calculate cummulative probability\n+\t */\n+\tpublic void setCdfAlgorithm(NormalCDFAlgorithm normalCDF) {\n+\t\tcdfAlgorithm = normalCDF;\n+\t}\n+\n+\t\n+\t/**\n+\t * Access the domain value lower bound, based on <code>p</code>, used to\n+\t * bracket a CDF root.  This method is used by\n+\t * {@link #inverseCummulativeProbability(double)} to find critical values.\n+\t * \n+\t * @param p the desired probability for the critical value\n+\t * @return domain value lower bound, i.e.\n+\t *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+\t */\n+\tprotected double getDomainLowerBound(double p) {\n+\t\treturn -Double.MAX_VALUE;\n+\t}\n+\n+\t/**\n+\t * Access the domain value upper bound, based on <code>p</code>, used to\n+\t * bracket a CDF root.  This method is used by\n+\t * {@link #inverseCummulativeProbability(double)} to find critical values.\n+\t * \n+\t * @param p the desired probability for the critical value\n+\t * @return domain value upper bound, i.e.\n+\t *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+\t */\n+\tprotected double getDomainUpperBound(double p) {\n+\t\treturn Double.MAX_VALUE;\n+\t}\n+\n+\t/**\n+\t * Access the initial domain value, based on <code>p</code>, used to\n+\t * bracket a CDF root.  This method is used by\n+\t * {@link #inverseCummulativeProbability(double)} to find critical values.\n+\t * \n+\t * @param p the desired probability for the critical value\n+\t * @return initial domain value\n+\t */\n+\tprotected double getInitialDomain(double p) {\n+\t\treturn 0.0;\n+\t}\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.distribution;\n+\n+import org.apache.commons.math.MathException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ *  Tests for NormalDistribution implementation\n+ * \n+ * \"True\" results are taken from R - the same as in Mathematica\n+ *\n+ */\n+public class NormalDistributionTest extends TestCase {\n+\t\n+\tprivate NormalDistribution z;\n+\tprivate static final double PRECISION = 10e-6;\t\n+\tprivate static final double M = 2.1;\n+\tprivate static final double SD = 1.4;\n+\t\n+\t/**\n+\t * Constructor for NormalDistributionTest.\n+\t * @param arg0\n+\t */\n+\tpublic NormalDistributionTest(String arg0) {\n+\t\tsuper(arg0);\n+\t}\n+\n+\tpublic static void main(String[] args) {\n+\t\tjunit.swingui.TestRunner.run(NormalDistributionTest.class);\n+\t}\n+\n+\tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t\tz = DistributionFactory.newInstance().createNormalDistribution(M, SD);\n+\t}\n+\n+\tprotected void tearDown() throws Exception {\n+\t\tsuper.tearDown();\n+\t\tz = null;\n+\t}\n+\n+\tpublic void testCummulativeProbabilitydoubleM_MINUS_2SD() throws MathException {\n+\t\ttestProbability(M - 2*SD, 0.02275013);\n+\t}\n+\n+\tpublic void testCummulativeProbabilitydoubleM_MINUS_SD() throws MathException {\n+\t\ttestProbability(M - SD, 0.1586553);\n+\t}\n+\n+\tpublic void testCummulativeProbabilitydoubleM() throws MathException {\n+\t\ttestProbability(M, 0.5);\n+\t}\n+\n+\tpublic void testCummulativeProbabilitydoubleM_PLUS_SD() throws MathException {\n+\t\ttestProbability(M + SD, 0.8413447);\n+\t}\n+\t\n+\tpublic void testCummulativeProbabilitydoubleM_PLUS_2SD() throws MathException {\n+\t\ttestProbability(M + 2*SD, 0.9772499);\n+\t}\n+\t\n+\tpublic void testCummulativeProbabilitydoubleM_PLUS_3SD() throws MathException {\n+\t\ttestProbability(M + 3*SD, 0.9986501);\n+\t}\n+\t\n+\tpublic void testCummulativeProbabilitydoubleM_PLUS_4SD() throws MathException {\n+\t\ttestProbability(M + 4*SD, 0.9999683);\n+\t}\n+\t\n+\tpublic void testCummulativeProbabilitydoubleM_PLUS_5SD() throws MathException {\n+\t\ttestProbability(M + 5*SD, 0.9999997);\n+\t}\n+\t\n+\tpublic void testInverseCummulativeProbability0() throws MathException {\n+\t\tassertEquals(Double.isNaN(z.inverseCummulativeProbability(0.0)), true);\n+\t}\n+\n+\tpublic void testInverseCummulativeProbability001() throws MathException {\n+\t\ttestValue(-2.226325, .001);\n+\t}\n+\n+\tpublic void testInverseCumulativeProbability010() throws MathException{\n+\t\ttestValue(-1.156887, .010);\n+\t}\n+\n+\tpublic void testInverseCumulativeProbability025() throws MathException{\n+\t\ttestValue(-0.6439496, .025);\n+\t}\n+\n+\tpublic void testInverseCumulativeProbability050() throws MathException{\n+\t\ttestValue(-0.2027951, .050);\n+\t}\n+\n+\tpublic void testInverseCumulativeProbability100() throws MathException{\n+\t\ttestValue(0.3058278, .100);\n+\t}\n+\n+\tpublic void testInverseCumulativeProbability900() throws MathException{\n+\t\ttestValue(3.894172, .900);\n+\t}\n+\n+\tpublic void testInverseCumulativeProbability950() throws MathException{\n+\t\ttestValue(4.402795, .950);\n+\t}\n+\n+\tpublic void testInverseCumulativeProbability975() throws MathException{\n+\t\ttestValue(4.84395, .975);\n+\t}\n+\n+\tpublic void testInverseCumulativeProbability990() throws MathException{\n+\t\ttestValue(5.356887, .990);\n+\t}\n+\n+\tpublic void testInverseCummulativeProbability999() throws MathException{\n+\t\ttestValue(6.426325, .999);\n+\t}\n+\n+\tpublic void testInverseCummulativeProbability1() throws MathException {\n+\t\tassertEquals(Double.isNaN(z.inverseCummulativeProbability(1.0)), true);\n+\t}\n+\n+\tpublic void testGetMean() {\n+\t\tassertEquals(M, z.getMean(), 0);\n+\t}\n+\n+\tpublic void testSetMean() throws MathException {\n+\t\tdouble mu = Math.random();\n+\t\tz.setMean(mu);\n+\t\tassertEquals(mu, z.getMean(), 0);\n+\t\tassertEquals(0.5d, z.cummulativeProbability(mu), PRECISION);\n+\t}\n+\n+\tpublic void testGetStandardDeviation() {\n+\t\tassertEquals(SD, z.getStandardDeviation(), 0);\t\n+\t}\n+\n+\tpublic void testSetStandardDeviation() throws MathException{\n+\t\tdouble sigma = 0.1d + Math.random();\n+\t\tz.setStandardDeviation(sigma);\n+\t\tassertEquals(sigma, z.getStandardDeviation(), 0);\n+\t\tassertEquals(0.84134475, z.cummulativeProbability(z.getMean() + z.getStandardDeviation()), PRECISION );\n+\t}\n+\n+\tpublic void testGetCdfAlgorithm() {\n+\t\tassertTrue(z.getCdfAlgorithm() != null);\n+\t}\n+\n+\tpublic void testSetCdfAlgorithm() {\n+\t\tz.setCdfAlgorithm(new NormalCDFFastAlgorithm());\n+\t\tassertTrue(z.getCdfAlgorithm() instanceof NormalCDFFastAlgorithm);\n+\t}\n+\t\n+\tprivate void testProbability(double x, double expected) throws MathException {\n+\t\tdouble actual = Double.NaN;\n+\t\tz.setCdfAlgorithm(new NormalCDFPreciseAlgorithm());\n+\t\tactual =  z.cummulativeProbability(x);\n+\t\tassertEquals(expected, actual, PRECISION);\n+\t\tz.setCdfAlgorithm(new NormalCDFFastAlgorithm());\n+\t\tactual =  z.cummulativeProbability(x);\n+\t\tassertEquals(expected, actual, PRECISION);\n+\t}\n+\n+\tprivate void testValue(double expected, double p) throws MathException {\n+\t\tdouble actual = z.inverseCummulativeProbability(p);\n+\t\tassertEquals(expected, actual, PRECISION);\n+\t}\n+\n+}", "timestamp": 1075086271, "metainfo": ""}