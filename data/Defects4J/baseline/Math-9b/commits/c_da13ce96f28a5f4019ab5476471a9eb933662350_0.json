{"sha": "da13ce96f28a5f4019ab5476471a9eb933662350", "log": "Modified to extend ContinuousDistributionAbstractTest, improved coverage.   ", "commit": "\n--- a/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java\n \n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.math.MathException;\n-import org.apache.commons.math.TestUtils;\n-\n-import junit.framework.TestCase;\n-\n /**\n- *  Tests for NormalDistribution implementation\n+ * Test cases for NormalDistribution.\n+ * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n+ * ContinuousDistributionAbstractTest for details.\n  * \n- * \"True\" results are taken from R - the same as in Mathematica\n- *\n+ * @version $Revision: 1.7 $ $Date: 2004/05/30 05:54:43 $\n  */\n-public class NormalDistributionTest extends TestCase {\n-\t\n-\tprivate NormalDistribution z;\n-\tprivate static final double PRECISION = 10e-6;\t\n-\tprivate static final double M = 2.1;\n-\tprivate static final double SD = 1.4;\n-\t\n-\t/**\n-\t * Constructor for NormalDistributionTest.\n-\t * @param arg0\n-\t */\n-\tpublic NormalDistributionTest(String arg0) {\n-\t\tsuper(arg0);\n-\t}\n-\n-\tpublic static void main(String[] args) {\n-\t\tjunit.swingui.TestRunner.run(NormalDistributionTest.class);\n-\t}\n-\n-\tprotected void setUp() throws Exception {\n-\t\tsuper.setUp();\n-\t\tz = DistributionFactory.newInstance().createNormalDistribution(M, SD);\n-\t}\n-\n-\tprotected void tearDown() throws Exception {\n-\t\tsuper.tearDown();\n-\t\tz = null;\n-\t}\n-\n-\tpublic void testCumulativeProbabilitydoubleM_MINUS_2SD() throws MathException {\n-\t\ttestProbability(M - 2*SD, 0.02275013);\n-\t}\n-\n-\tpublic void testCumulativeProbabilitydoubleM_MINUS_SD() throws MathException {\n-\t\ttestProbability(M - SD, 0.1586553);\n-\t}\n-\n-\tpublic void testCumulativeProbabilitydoubleM() throws MathException {\n-\t\ttestProbability(M, 0.5);\n-\t}\n-\n-\tpublic void testCumulativeProbabilitydoubleM_PLUS_SD() throws MathException {\n-\t\ttestProbability(M + SD, 0.8413447);\n-\t}\n-\t\n-\tpublic void testCumulativeProbabilitydoubleM_PLUS_2SD() throws MathException {\n-\t\ttestProbability(M + 2*SD, 0.9772499);\n-\t}\n-\t\n-\tpublic void testCumulativeProbabilitydoubleM_PLUS_3SD() throws MathException {\n-\t\ttestProbability(M + 3*SD, 0.9986501);\n-\t}\n-\t\n-\tpublic void testCumulativeProbabilitydoubleM_PLUS_4SD() throws MathException {\n-\t\ttestProbability(M + 4*SD, 0.9999683);\n-\t}\n-\t\n-\tpublic void testCumulativeProbabilitydoubleM_PLUS_5SD() throws MathException {\n-\t\ttestProbability(M + 5*SD, 0.9999997);\n-\t}\n-\n-\tpublic void testInverseCumulativeProbability001() throws MathException {\n-\t\ttestValue(-2.226325, .001);\n-\t}\n-\n-\tpublic void testInverseCumulativeProbability010() throws MathException{\n-\t\ttestValue(-1.156887, .010);\n-\t}\n-\n-\tpublic void testInverseCumulativeProbability025() throws MathException{\n-\t\ttestValue(-0.6439496, .025);\n-\t}\n-\n-\tpublic void testInverseCumulativeProbability050() throws MathException{\n-\t\ttestValue(-0.2027951, .050);\n-\t}\n-\n-\tpublic void testInverseCumulativeProbability100() throws MathException{\n-\t\ttestValue(0.3058278, .100);\n-\t}\n-\n-\tpublic void testInverseCumulativeProbability900() throws MathException{\n-\t\ttestValue(3.894172, .900);\n-\t}\n-\n-\tpublic void testInverseCumulativeProbability950() throws MathException{\n-\t\ttestValue(4.402795, .950);\n-\t}\n-\n-\tpublic void testInverseCumulativeProbability975() throws MathException{\n-\t\ttestValue(4.84395, .975);\n-\t}\n-\n-\tpublic void testInverseCumulativeProbability990() throws MathException{\n-\t\ttestValue(5.356887, .990);\n-\t}\n-\n-\tpublic void testInverseCumulativeProbability999() throws MathException{\n-\t\ttestValue(6.426325, .999);\n-\t}\n-\n-\tpublic void testGetMean() {\n-\t\tassertEquals(M, z.getMean(), 0);\n-\t}\n-\n-\tpublic void testSetMean() throws MathException {\n-\t\tdouble mu = Math.random();\n-\t\tz.setMean(mu);\n-\t\tassertEquals(mu, z.getMean(), 0);\n-\t\tassertEquals(0.5d, z.cumulativeProbability(mu), PRECISION);\n-\t}\n-\n-\tpublic void testGetStandardDeviation() {\n-\t\tassertEquals(SD, z.getStandardDeviation(), 0);\t\n-\t}\n-\n-\tpublic void testSetStandardDeviation() throws MathException{\n-\t\tdouble sigma = 0.1d + Math.random();\n-\t\tz.setStandardDeviation(sigma);\n-\t\tassertEquals(sigma, z.getStandardDeviation(), 0);\n-\t\tassertEquals(0.84134475, z.cumulativeProbability(z.getMean() + z.getStandardDeviation()), PRECISION );\n-\t}\n-\t\n-\tprivate void testProbability(double x, double expected) throws MathException {\n-\t\tdouble actual = Double.NaN;\n-\t\tactual =  z.cumulativeProbability(x);\n-\t\tassertEquals(expected, actual, PRECISION);\n-\t}\n-\n-\tprivate void testValue(double expected, double p) throws MathException {\n-\t\tdouble actual = z.inverseCumulativeProbability(p);\n-\t\tTestUtils.assertEquals(expected, actual, PRECISION);\n-\t}\n-\n+public class NormalDistributionTest extends ContinuousDistributionAbstractTest  {\n+    \n+    /**\n+     * Constructor for NormalDistributionTest.\n+     * @param arg0\n+     */\n+    public NormalDistributionTest(String arg0) {\n+        super(arg0);\n+    }\n+    \n+    public static void main(String[] args) {\n+        junit.swingui.TestRunner.run(NormalDistributionTest.class);\n+    }\n+    \n+    //-------------- Implementations for abstract methods -----------------------\n+    \n+    /** Creates the default continuous distribution instance to use in tests. */\n+    public ContinuousDistribution makeDistribution() {\n+        return DistributionFactory.newInstance().createNormalDistribution(2.1, 1.4);\n+    }   \n+    \n+    /** Creates the default cumulative probability distribution test input values */\n+    public double[] makeCumulativeTestPoints() {\n+        // quantiles computed using R \n+        return new double[] {-2.226325d, -1.156887d, -0.6439496d, -0.2027951d, 0.3058278d, \n+                6.426325d, 5.356887d, 4.84395d, 4.402795d, 3.894172d};\n+    }\n+    \n+    /** Creates the default cumulative probability density test expected values */\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n+                0.990d, 0.975d, 0.950d, 0.900d}; \n+    }\n+    \n+    // --------------------- Override tolerance  --------------\n+    protected void setup() throws Exception {\n+        super.setUp();\n+        setTolerance(1E-6);\n+    }\n+    \n+    //---------------------------- Additional test cases -------------------------\n+    \n+    private void verifyQuantiles() throws Exception {\n+        NormalDistribution distribution = (NormalDistribution) getDistribution();\n+        double mu = distribution.getMean();\n+        double sigma = distribution.getStandardDeviation();\n+        setCumulativeTestPoints( new double[] {mu - 2 *sigma, mu - sigma, \n+                mu, mu + sigma, mu +2 * sigma,  mu +3 * sigma, mu + 4 * sigma,\n+                mu + 5 * sigma});\n+        // Quantiles computed using R (same as Mathematica)\n+        setCumulativeTestValues(new double[] {0.02275013, 0.1586553, 0.5, 0.8413447, \n+                0.9772499, 0.9986501, 0.9999683,  0.9999997});\n+        verifyCumulativeProbabilities();       \n+    }\n+    \n+    public void testQuantiles() throws Exception {\n+        verifyQuantiles();\n+        setDistribution(DistributionFactory.newInstance().createNormalDistribution(0, 1));\n+        verifyQuantiles();\n+        setDistribution(DistributionFactory.newInstance().createNormalDistribution(0, 0.1));\n+        verifyQuantiles();\n+    }\n+    \n+    public void testGetMean() {\n+        NormalDistribution distribution = (NormalDistribution) getDistribution();\n+        assertEquals(2.1, distribution.getMean(), 0);\n+    }\n+    \n+    public void testSetMean() throws Exception {\n+        double mu = Math.random();\n+        NormalDistribution distribution = (NormalDistribution) getDistribution();\n+        distribution.setMean(mu);\n+        verifyQuantiles();\n+    }\n+    \n+    public void testGetStandardDeviation() {\n+        NormalDistribution distribution = (NormalDistribution) getDistribution();\n+        assertEquals(1.4, distribution.getStandardDeviation(), 0);  \n+    }\n+    \n+    public void testSetStandardDeviation() throws Exception {\n+        double sigma = 0.1d + Math.random();\n+        NormalDistribution distribution = (NormalDistribution) getDistribution();\n+        distribution.setStandardDeviation(sigma);\n+        assertEquals(sigma, distribution.getStandardDeviation(), 0);\n+        verifyQuantiles();\n+        try {\n+            distribution.setStandardDeviation(0);\n+            fail(\"Expecting IllegalArgumentException for sd = 0\");\n+        } catch (IllegalArgumentException ex) {\n+            // Expected\n+        }\n+    }\n }", "timestamp": 1085896483, "metainfo": ""}