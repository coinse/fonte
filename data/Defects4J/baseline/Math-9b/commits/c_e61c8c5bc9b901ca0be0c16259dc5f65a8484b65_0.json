{"sha": "e61c8c5bc9b901ca0be0c16259dc5f65a8484b65", "log": "Replaced calls to deprecated methods in \"ResizeableDoubleArray\" (see MATH-894). Created subclass of \"ResizeableDoubleArray\" in order to access to the object's internal array.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java\n     /**\n      *  Stored data values\n      */\n-    private ResizableDoubleArray eDA = new ResizableDoubleArray();\n+    private StatArray eDA = new StatArray();\n \n     /** Mean statistic implementation - can be reset by setter. */\n     private UnivariateStatistic meanImpl = new Mean();\n      */\n     public DescriptiveStatistics(double[] initialDoubleArray) {\n         if (initialDoubleArray != null) {\n-            eDA = new ResizableDoubleArray(initialDoubleArray);\n+            eDA = new StatArray(initialDoubleArray);\n         }\n     }\n \n      */\n     public double apply(UnivariateStatistic stat) {\n         // No try-catch or advertised exception here because arguments are guaranteed valid\n-        return stat.evaluate(eDA.getInternalValues(), eDA.start(), eDA.getNumElements());\n+        return eDA.compute(stat);\n     }\n \n     // Implementation getters and setter\n         dest.skewnessImpl = source.skewnessImpl;\n         dest.percentileImpl = source.percentileImpl;\n     }\n+\n+    /**\n+     * Provides a method to compute a statistics on the contents of the\n+     * array.\n+     */\n+    private static class StatArray extends ResizableDoubleArray {\n+        /** Default constructor. */\n+        public StatArray() {}\n+\n+        /**\n+         * Builds an instance with the same contents as the given array.\n+         *\n+         * @param initialArray Data.\n+         */\n+        public StatArray(double[] initialArray) {\n+            super(initialArray);\n+        }\n+\n+        /**\n+         * Builds a copy of the given instance.\n+         *\n+         * @param other Array.\n+         * @throws NullArgumentException if the argument is {@code null}.\n+         */\n+        public StatArray(StatArray other)\n+            throws NullArgumentException {\n+            super(other);\n+        }\n+\n+        /**\n+         * Computes the given statistics from the contents of this array.\n+         *\n+         * @param stat Statistics.\n+         * @return the result of evaluating the statistics on the current\n+         * contents of this array.\n+         */\n+        public double compute(UnivariateStatistic stat) {\n+            return stat.evaluate(getArrayRef(),\n+                                 getStartIndex(),\n+                                 getNumElements());\n+        }\n+\n+        /**\n+         * Creates a copy of this instance.\n+         *\n+         * @return a copy of this instance.\n+         */\n+        public StatArray copy() {\n+            return new StatArray(this);\n+        }\n+    }\n }", "timestamp": 1352933707, "metainfo": ""}