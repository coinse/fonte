{"sha": "ceaf74b5a016be72c14ef4db2595aea256474f33", "log": "grammar  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n     /**\n      * Construct a vector from an array, copying the input array.\n      * <p>\n-     * This constructor need a non-empty {@code d} array to retrieve\n+     * This constructor needs a non-empty {@code d} array to retrieve\n      * the field from its first element. This implies it cannot build\n      * 0 length vectors. To build vectors from any size, one should\n      * use the {@link #ArrayFieldVector(Field, FieldElement[])} constructor.\n      * set to <code>false</code. This will prevent the copying and improve\n      * performance as no new array will be built and no data will be copied.</p>\n      * <p>\n-     * This constructor need a non-empty {@code d} array to retrieve\n+     * This constructor needs a non-empty {@code d} array to retrieve\n      * the field from its first element. This implies it cannot build\n      * 0 length vectors. To build vectors from any size, one should\n      * use the {@link #ArrayFieldVector(Field, FieldElement[], boolean)} constructor.\n     /**\n      * Construct a vector by appending one vector to another vector.\n      * <p>\n-     * This constructor need at least one non-empty array to retrieve\n+     * This constructor needs at least one non-empty array to retrieve\n      * the field from its first element. This implies it cannot build\n      * 0 length vectors. To build vectors from any size, one should\n      * use the {@link #ArrayFieldVector(Field, FieldElement[], FieldElement[])} constructor.", "timestamp": 1286124314, "metainfo": ""}