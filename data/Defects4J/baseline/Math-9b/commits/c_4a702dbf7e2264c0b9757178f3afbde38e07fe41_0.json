{"sha": "4a702dbf7e2264c0b9757178f3afbde38e07fe41", "log": "MATH-688 Replaced fractions with contant fields.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n     /** 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite */\n     private static final double TWO_POWER_52 = 4503599627370496.0;\n \n+    /** Constant: {@value}. */\n+    private static final double F_1_3 = 1d / 3d;\n+    /** Constant: {@value}. */\n+    private static final double F_1_5 = 1d / 5d;\n+    /** Constant: {@value}. */\n+    private static final double F_1_7 = 1d / 7d;\n+    /** Constant: {@value}. */\n+    private static final double F_1_9 = 1d / 9d;\n+    /** Constant: {@value}. */\n+    private static final double F_1_11 = 1d / 11d;\n+    /** Constant: {@value}. */\n+    private static final double F_1_13 = 1d / 13d;\n+    /** Constant: {@value}. */\n+    private static final double F_1_15 = 1d / 15d;\n+    /** Constant: {@value}. */\n+    private static final double F_1_17 = 1d / 17d;\n+    /** Constant: {@value}. */\n+    private static final double F_3_4 = 3d / 4d;\n+    /** Constant: {@value}. */\n+    private static final double F_15_16 = 15d / 16d;\n+    /** Constant: {@value}. */\n+    private static final double F_13_14 = 13d / 14d;\n+    /** Constant: {@value}. */\n+    private static final double F_11_12 = 11d / 12d;\n+    /** Constant: {@value}. */\n+    private static final double F_9_10 = 9d / 10d;\n+    /** Constant: {@value}. */\n+    private static final double F_7_8 = 7d / 8d;\n+    /** Constant: {@value}. */\n+    private static final double F_5_6 = 5d / 6d;\n+    /** Constant: {@value}. */\n+    private static final double F_1_2 = 1d / 2d;\n+\n     /**\n      * Private Constructor\n      */\n      * @return inverse hyperbolic sine of a\n      */\n     public static double asinh(double a) {\n-\n         boolean negative = false;\n         if (a < 0) {\n             negative = true;\n         } else {\n             final double a2 = a * a;\n             if (a > 0.097) {\n-                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);\n+                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);\n             } else if (a > 0.036) {\n-                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);\n+                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);\n             } else if (a > 0.0036) {\n-                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);\n+                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);\n             } else {\n-                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);\n+                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);\n             }\n         }\n \n         return negative ? -absAsinh : absAsinh;\n-\n     }\n \n     /** Compute the inverse hyperbolic tangent of a number.\n      * @return inverse hyperbolic tangent of a\n      */\n     public static double atanh(double a) {\n-\n         boolean negative = false;\n         if (a < 0) {\n             negative = true;\n         } else {\n             final double a2 = a * a;\n             if (a > 0.087) {\n-                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));\n+                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));\n             } else if (a > 0.031) {\n-                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));\n+                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));\n             } else if (a > 0.003) {\n-                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));\n+                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));\n             } else {\n-                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));\n+                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));\n             }\n         }\n \n         return negative ? -absAtanh : absAtanh;\n-\n     }\n \n     /** Compute the signum of a number.\n         }\n \n         /* Value is small |x| < 1e6, do a Taylor series centered on 1.0 */\n-        double y = x * 0.333333333333333 - 0.5;\n+        double y = x * F_1_3 - F_1_2;\n         y = y * x + 1.0;\n         y = y * x;\n \n             }\n \n             if (x == Double.NEGATIVE_INFINITY) {\n-                return Math.PI*3.0/4.0;\n+                return Math.PI * F_3_4;\n             }\n \n             return Math.PI/2.0;\n             }\n \n             if (x == Double.NEGATIVE_INFINITY) {\n-                return -Math.PI*3.0/4.0;\n+                return -Math.PI * F_3_4;\n             }\n \n             return -Math.PI/2.0;", "timestamp": 1318276253, "metainfo": ""}