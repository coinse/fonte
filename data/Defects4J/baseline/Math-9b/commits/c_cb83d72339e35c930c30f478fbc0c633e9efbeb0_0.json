{"sha": "cb83d72339e35c930c30f478fbc0c633e9efbeb0", "log": "Fixed javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java\n     }\n \n     /** Get one point from the line.\n-     * @param point desired abscissa for the point\n+     * @param abscissa desired abscissa for the point\n      * @return one point belonging to the line, at specified abscissa\n      */\n     public Vector3D pointAt(final double abscissa) {\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubLine.java\n import org.apache.commons.math.geometry.euclidean.oned.Interval;\n import org.apache.commons.math.geometry.euclidean.oned.IntervalsSet;\n import org.apache.commons.math.geometry.euclidean.oned.Vector1D;\n-import org.apache.commons.math.geometry.partitioning.Hyperplane;\n import org.apache.commons.math.geometry.partitioning.Region.Location;\n \n /** This class represents a subset of a {@link Line}.\n \n     /** Get the intersection of the instance and another sub-line.\n      * <p>\n-     * This method is related to the {@link Line#intersection(Hyperplane)\n+     * This method is related to the {@link Line#intersection(Line)\n      * intersection} method in the {@link Line Line} class, but in addition\n      * to compute the point along infinite lines, it also checks the point\n      * lies on both sub-line ranges.\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java\n \n     /** Get the intersection of the instance and another sub-line.\n      * <p>\n-     * This method is related to the {@link Line#intersection(Hyperplane)\n+     * This method is related to the {@link Line#intersection(Line)\n      * intersection} method in the {@link Line Line} class, but in addition\n      * to compute the point along infinite lines, it also checks the point\n      * lies on both sub-line ranges.\n--- a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java\n      * Zero-length vectors may be used to initialized construction of vectors\n      * by data gathering. We start with zero-length and use either the {@link\n      * #ArrayFieldVector(ArrayFieldVector, ArrayFieldVector)} constructor\n-     * or one of the {@code append} methods ({@link #append(FieldElement[])},\n-     * {@link #add(FieldVector)}, {@link #append(ArrayFieldVector)}) to gather data\n-     * into this vector.\n+     * or one of the {@code append} methods ({@link #add(FieldVector)} or\n+     * {@link #append(ArrayFieldVector)}) to gather data into this vector.\n      *\n      * @param field field to which the elements belong\n      */", "timestamp": 1317550303, "metainfo": ""}