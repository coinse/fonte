{"sha": "b09f60ad64f73f3db0f9407793e94b7f0a565dac", "log": "Added since tag for filter package, minor javadoc fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java\n+++ b/src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java\n  * Default implementation of a {@link MeasurementModel} for the use with a\n  * {@link KalmanFilter}.\n  *\n+ * @since 3.0\n  * @version $Id$\n  */\n public class DefaultMeasurementModel implements MeasurementModel {\n      * Create a new {@link MeasurementModel}, taking double arrays as input\n      * parameters for the respective measurement matrix and noise.\n      *\n-     * @param measMatrix\n-     *            the measurement matrix\n-     * @param measNoise\n-     *            the measurement noise matrix\n+     * @param measMatrix the measurement matrix\n+     * @param measNoise the measurement noise matrix\n      */\n     public DefaultMeasurementModel(final double[][] measMatrix,\n             final double[][] measNoise) {\n      * Create a new {@link MeasurementModel}, taking {@link RealMatrix} objects\n      * as input parameters for the respective measurement matrix and noise.\n      *\n-     * @param measMatrix\n-     *            the measurement matrix\n-     * @param measNoise\n-     *            the measurement noise matrix\n+     * @param measMatrix the measurement matrix\n+     * @param measNoise the measurement noise matrix\n      */\n     public DefaultMeasurementModel(final RealMatrix measMatrix,\n             final RealMatrix measNoise) {\n         this.measurementNoise = measNoise;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n+    /** {@inheritDoc} */\n     public RealMatrix getMeasurementMatrix() {\n         return measurementMatrix;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n+    /** {@inheritDoc} */\n     public RealMatrix getMeasurementNoise() {\n         return measurementNoise;\n     }\n--- a/src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java\n+++ b/src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java\n  * Default implementation of a {@link ProcessModel} for the use with a\n  * {@link KalmanFilter}.\n  *\n+ * @since 3.0\n  * @version $Id$\n  */\n public class DefaultProcessModel implements ProcessModel {\n      */\n     private RealMatrix controlMatrix;\n \n-    /**\n-     * The process noise covariance matrix.\n-     */\n+    /** The process noise covariance matrix. */\n     private RealMatrix processNoiseCovMatrix;\n \n-    /**\n-     * The initial state estimation of the observed process.\n-     */\n+    /** The initial state estimation of the observed process. */\n     private RealVector initialStateEstimateVector;\n \n-    /**\n-     * The initial error covariance matrix of the observed process.\n-     */\n+    /** The initial error covariance matrix of the observed process. */\n     private RealMatrix initialErrorCovMatrix;\n \n     /**\n      * Create a new {@link ProcessModel}, taking double arrays as input\n      * parameters.\n      *\n-     * @param stateTransition\n-     *            the state transition matrix\n-     * @param control\n-     *            the control matrix\n-     * @param processNoise\n-     *            the process noise matrix\n-     * @param initialStateEstimate\n-     *            the initial state estimate vector\n-     * @param initialErrorCovariance\n-     *            the initial error covariance matrix\n+     * @param stateTransition the state transition matrix\n+     * @param control the control matrix\n+     * @param processNoise the process noise matrix\n+     * @param initialStateEstimate the initial state estimate vector\n+     * @param initialErrorCovariance the initial error covariance matrix\n      */\n     public DefaultProcessModel(final double[][] stateTransition,\n-            final double[][] control, final double[][] processNoise,\n-            final double[] initialStateEstimate,\n-            final double[][] initialErrorCovariance) {\n+                               final double[][] control,\n+                               final double[][] processNoise,\n+                               final double[] initialStateEstimate,\n+                               final double[][] initialErrorCovariance) {\n         this(new Array2DRowRealMatrix(stateTransition),\n                 new Array2DRowRealMatrix(control),\n                 new Array2DRowRealMatrix(processNoise),\n      * parameters. The initial state estimate and error covariance are omitted\n      * and will be initialized by the {@link KalmanFilter} to default values.\n      *\n-     * @param stateTransition\n-     *            the state transition matrix\n-     * @param control\n-     *            the control matrix\n-     * @param processNoise\n-     *            the process noise matrix\n+     * @param stateTransition the state transition matrix\n+     * @param control the control matrix\n+     * @param processNoise the process noise matrix\n      */\n     public DefaultProcessModel(final double[][] stateTransition,\n-            final double[][] control, final double[][] processNoise) {\n+                               final double[][] control,\n+                               final double[][] processNoise) {\n         this(new Array2DRowRealMatrix(stateTransition),\n                 new Array2DRowRealMatrix(control),\n                 new Array2DRowRealMatrix(processNoise), null, null);\n      * Create a new {@link ProcessModel}, taking double arrays as input\n      * parameters.\n      *\n-     * @param stateTransition\n-     *            the state transition matrix\n-     * @param control\n-     *            the control matrix\n-     * @param processNoise\n-     *            the process noise matrix\n-     * @param initialStateEstimate\n-     *            the initial state estimate vector\n-     * @param initialErrorCovariance\n-     *            the initial error covariance matrix\n+     * @param stateTransition the state transition matrix\n+     * @param control the control matrix\n+     * @param processNoise the process noise matrix\n+     * @param initialStateEstimate the initial state estimate vector\n+     * @param initialErrorCovariance the initial error covariance matrix\n      */\n     public DefaultProcessModel(final RealMatrix stateTransition,\n-            final RealMatrix control, final RealMatrix processNoise,\n-            final RealVector initialStateEstimate,\n-            final RealMatrix initialErrorCovariance) {\n+                               final RealMatrix control,\n+                               final RealMatrix processNoise,\n+                               final RealVector initialStateEstimate,\n+                               final RealMatrix initialErrorCovariance) {\n         this.stateTransitionMatrix = stateTransition;\n         this.controlMatrix = control;\n         this.processNoiseCovMatrix = processNoise;\n         this.initialErrorCovMatrix = initialErrorCovariance;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n+    /** {@inheritDoc} */\n     public RealMatrix getStateTransitionMatrix() {\n         return stateTransitionMatrix;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n+    /** {@inheritDoc} */\n     public RealMatrix getControlMatrix() {\n         return controlMatrix;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n+    /** {@inheritDoc} */\n     public RealMatrix getProcessNoise() {\n         return processNoiseCovMatrix;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n+    /** {@inheritDoc} */\n     public RealVector getInitialStateEstimate() {\n         return initialStateEstimateVector;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n+    /** {@inheritDoc} */\n     public RealMatrix getInitialErrorCovariance() {\n         return initialErrorCovMatrix;\n     }\n--- a/src/main/java/org/apache/commons/math/filter/KalmanFilter.java\n+++ b/src/main/java/org/apache/commons/math/filter/KalmanFilter.java\n  *      Kalman filter example by Dan Simon</a>\n  * @see ProcessModel\n  * @see MeasurementModel\n+ * @since 3.0\n  * @version $Id$\n  */\n public class KalmanFilter {\n     /**\n      * Predict the internal state estimation one time step ahead.\n      *\n-     * @param u\n-     *            the control vector\n-     * @throws DimensionMismatchException\n-     *             if the dimension of the control vector does not fit\n+     * @param u the control vector\n+     * @throws DimensionMismatchException if the dimension of the control\n+     * vector does not fit\n      */\n     public void predict(final RealVector u) {\n         // sanity checks\n     /**\n      * Correct the current state estimate with an actual measurement.\n      *\n-     * @param z\n-     *            the measurement vector\n+     * @param z the measurement vector\n      * @throws DimensionMismatchException\n-     *             if the dimension of the measurement vector does not fit\n+     * if the dimension of the measurement vector does not fit\n      * @throws org.apache.commons.math.linear.SingularMatrixException\n-     *             if the covariance matrix could not be inverted\n+     * if the covariance matrix could not be inverted\n      */\n     public void correct(final double[] z) {\n         correct(new ArrayRealVector(z));\n     /**\n      * Correct the current state estimate with an actual measurement.\n      *\n-     * @param z\n-     *            the measurement vector\n-     * @throws DimensionMismatchException\n-     *             if the dimension of the measurement vector does not fit\n+     * @param z the measurement vector\n+     * @throws DimensionMismatchException if the dimension of the\n+     * measurement vector does not fit\n      * @throws org.apache.commons.math.linear.SingularMatrixException\n-     *             if the covariance matrix could not be inverted\n+     * if the covariance matrix could not be inverted\n      */\n     public void correct(final RealVector z) {\n         // sanity checks\n--- a/src/main/java/org/apache/commons/math/filter/MeasurementModel.java\n+++ b/src/main/java/org/apache/commons/math/filter/MeasurementModel.java\n /**\n  * Defines the measurement model for the use with a {@link KalmanFilter}.\n  *\n+ * @since 3.0\n  * @version $Id$\n  */\n public interface MeasurementModel {\n--- a/src/main/java/org/apache/commons/math/filter/ProcessModel.java\n+++ b/src/main/java/org/apache/commons/math/filter/ProcessModel.java\n /**\n  * Defines the process dynamics model for the use with a {@link KalmanFilter}.\n  *\n+ * @since 3.0\n  * @version $Id$\n  */\n public interface ProcessModel {", "timestamp": 1328743870, "metainfo": ""}