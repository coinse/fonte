{"sha": "b4ed8eec2ad66785f81a405d5df74f9012423ee2", "log": "Removed dependency on DistributionFactory.  Added settable chi-squared distribution field.  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n package org.apache.commons.math.stat.inference;\n \n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.distribution.ChiSquaredDistribution;\n+import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;\n import org.apache.commons.math.distribution.DistributionFactory;\n-import org.apache.commons.math.distribution.ChiSquaredDistribution;\n \n /**\n  * Implements Chi-Square test statistics defined in the {@link ChiSquareTest} interface.\n  * @version $Revision$ $Date$\n  */\n public class ChiSquareTestImpl implements ChiSquareTest {\n-    \n-    /** Cached DistributionFactory used to create ChiSquaredDistribution instances */\n-    private DistributionFactory distributionFactory = null;\n+\n+    /** Distribution used to compute inference statistics. */\n+    private ChiSquaredDistribution distribution;\n   \n     /**\n      * Construct a ChiSquareTestImpl \n      */\n     public ChiSquareTestImpl() {\n+        this(new ChiSquaredDistributionImpl(1.0));\n+    }\n+\n+    /**\n+     * Create a test instance using the given distribution for computing\n+     * inference statistics.\n+     * @param x distribution used to compute inference statistics.\n+     * @since 1.2\n+     */\n+    public ChiSquareTestImpl(ChiSquaredDistribution x) {\n         super();\n-    }\n-\n+        setDistribution(x);\n+    }\n      /**\n      * @param observed array of observed frequency counts\n      * @param expected array of expected frequency counts\n      */\n     public double chiSquareTest(double[] expected, long[] observed)\n         throws IllegalArgumentException, MathException {\n-        ChiSquaredDistribution chiSquaredDistribution =\n-            getDistributionFactory().createChiSquareDistribution(\n-                    (double) expected.length - 1);\n-        return 1 - chiSquaredDistribution.cumulativeProbability(\n-                chiSquare(expected, observed));\n+        distribution.setDegreesOfFreedom(expected.length - 1.0);\n+        return 1.0 - distribution.cumulativeProbability(\n+            chiSquare(expected, observed));\n     }\n \n     /**\n     throws IllegalArgumentException, MathException {\n         checkArray(counts);\n         double df = ((double) counts.length -1) * ((double) counts[0].length - 1);\n-        ChiSquaredDistribution chiSquaredDistribution =\n-            getDistributionFactory().createChiSquareDistribution(df);\n-        return 1 - chiSquaredDistribution.cumulativeProbability(chiSquare(counts));\n+        distribution.setDegreesOfFreedom(df);\n+        return 1 - distribution.cumulativeProbability(chiSquare(counts));\n     }\n \n     /**\n     //---------------------  Protected methods ---------------------------------\n     /**\n      * Gets a DistributionFactory to use in creating ChiSquaredDistribution instances.\n-     * \n-     * @return a DistributionFactory\n+     * @deprecated inject ChiSquaredDistribution instances directly instead of\n+     *             using a factory.\n      */\n     protected DistributionFactory getDistributionFactory() {\n-        if (distributionFactory == null) {\n-            distributionFactory = DistributionFactory.newInstance();\n-        }\n-        return distributionFactory;\n+        return DistributionFactory.newInstance();\n     }\n     \n     //---------------------  Private array methods -- should find a utility home for these\n         return true;\n     }\n     \n+    /**\n+     * Modify the distribution used to compute inference statistics.\n+     * @param value the new distribution\n+     * @since 1.2\n+     */\n+    public void setDistribution(ChiSquaredDistribution value) {\n+        distribution = value;\n+    }\n }", "timestamp": 1181223019, "metainfo": ""}