{"sha": "d76a581764f63cf8841173cf1527216ca19aa558", "log": "fixed keywords used in @version tags to match checkstyle-enforced rule  ", "commit": "\n--- a/src/java/org/apache/commons/math/DimensionMismatchException.java\n+++ b/src/java/org/apache/commons/math/DimensionMismatchException.java\n \n /**\n  * Error thrown when two dimensions differ.\n- * @version $Revision:$ $Date$\n+ * @version $Revision$ $Date$\n  */\n public class DimensionMismatchException extends MathException {\n     \n--- a/src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java\n+++ b/src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java\n \n /**\n  * Exeption thrown when a sample contains several entries at the same abscissa.\n- * @version $Revision:$\n+ * @version $Revision$ $Date$\n  */\n public class DuplicateSampleAbscissaException extends MathException  {\n     \n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n import java.util.ListResourceBundle;\n \n /** French localization message resources for the commons-math library.\n- * @version $Revision:$\n+ * @version $Revision$ $Date$\n  */\n public class MessagesResources_fr\n   extends ListResourceBundle {\n--- a/src/java/org/apache/commons/math/distribution/PascalDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/PascalDistribution.java\n  * </ul>\n  * </p>\n  *\n- * @version $Revision:$\n+ * @version $Revision$ $Date$\n  * @since 1.2\n  */\n public interface PascalDistribution extends IntegerDistribution {\n--- a/src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java\n \n /**\n  * The default implementation of {@link PascalDistribution}.\n- * @version $Revision:$\n+ * @version $Revision$ $Date$\n  * @since 1.2\n  */\n public class PascalDistributionImpl extends AbstractIntegerDistribution\n--- a/src/java/org/apache/commons/math/distribution/WeibullDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/WeibullDistribution.java\n  * </p>\n  *\n  * @since 1.1\n- * @version $Revision: 1.12 $ $Date: 2004-06-23 11:26:18 -0500 (Wed, 23 Jun 2004) $\n+ * @version $Revision$ $Date$\n  */\n public interface WeibullDistribution extends ContinuousDistribution {\n \n--- a/src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java\n  * {@link org.apache.commons.math.distribution.WeibullDistribution}.\n  *\n  * @since 1.1\n- * @version $Revision: 1.13 $ $Date: 2004-07-24 16:41:37 -0500 (Sat, 24 Jul 2004) $\n+ * @version $Revision$ $Date$\n  */\n public class WeibullDistributionImpl extends AbstractContinuousDistribution\n         implements WeibullDistribution, Serializable {\n--- a/src/java/org/apache/commons/math/estimation/EstimatedParameter.java\n+++ b/src/java/org/apache/commons/math/estimation/EstimatedParameter.java\n  * solvers should adjust the value of unbounds parameters until they\n  * satisfy convergence criterions specific to each solver.</p>\n  *\n- * @version $Id: EstimatedParameter.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/estimation/EstimationException.java\n+++ b/src/java/org/apache/commons/math/estimation/EstimationException.java\n /** \n  * This class represents exceptions thrown by the estimation solvers.\n  *\n- * @version $Id: EstimationException.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/estimation/EstimationProblem.java\n+++ b/src/java/org/apache/commons/math/estimation/EstimationProblem.java\n  * @see Estimator\n  * @see WeightedMeasurement\n  *\n- * @version $Id: EstimationProblem.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/estimation/Estimator.java\n+++ b/src/java/org/apache/commons/math/estimation/Estimator.java\n  *\n  * @see EstimationProblem\n  *\n- * @version $Id: Estimator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java\n  * squares criterion on the measurement residuals. It uses a\n  * Gauss-Newton algorithm.</p>\n  *\n- * @version $Id: GaussNewtonEstimator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java\n  * @author Burton S. Garbow (original fortran)\n  * @author Kenneth E. Hillstrom (original fortran)\n  * @author Jorge J. More (original fortran)\n+\n+ * @version $Revision$ $Date$\n+\n  */\n public class LevenbergMarquardtEstimator extends AbstractEstimator implements Serializable {\n \n--- a/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java\n+++ b/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java\n  * {@link WeightedMeasurement WeightedMeasurement} for each measurement\n  * type. The instances of the internal classes would have access to the\n  * various parameters and their current estimate.</p>\n+\n+ * @version $Revision$ $Date$\n+\n  */\n public class SimpleEstimationProblem implements EstimationProblem {\n \n--- a/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java\n+++ b/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java\n  *\n  * @see EstimationProblem\n  *\n- * @version $Id: WeightedMeasurement.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java\n+++ b/src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java\n /** This class represents exceptions thrown while extractiong Cardan\n  * or Euler angles from a rotation.\n \n- * @version $Id: CardanEulerSingularityException.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/geometry/NotARotationMatrixException.java\n+++ b/src/java/org/apache/commons/math/geometry/NotARotationMatrixException.java\n /** This class represents exceptions thrown while building rotations\n  * from matrices.\n \n- * @version $Id: NotARotationMatrixException.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/geometry/Rotation.java\n+++ b/src/java/org/apache/commons/math/geometry/Rotation.java\n \n  * <p>Rotations are guaranteed to be immutable objects.</p>\n \n- * @version $Id: Rotation.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  * @see Vector3D\n  * @see RotationOrder\n \n--- a/src/java/org/apache/commons/math/geometry/RotationOrder.java\n+++ b/src/java/org/apache/commons/math/geometry/RotationOrder.java\n  * the {@link Rotation#Rotation(RotationOrder,double,double,double)}\n  * constructor or the {@link Rotation#getAngles} method.\n \n- * @version $Id: RotationOrder.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n public final class RotationOrder {\n--- a/src/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/java/org/apache/commons/math/geometry/Vector3D.java\n \n /** This class implements vectors in a three-dimensional space.\n  * <p>Instance of this class are guaranteed to be immutable.</p>\n- * @version $Id: Vector3D.java 1716 2006-12-13 22:56:35Z luc $\n+ * @version $Revision$ $Date$\n  */\n \n public class Vector3D\n--- a/src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java\n  * @see SecondOrderIntegrator\n  * @see StepHandler\n  *\n- * @version $Id: AbstractStepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java\n  * otherwise the step is rejected and a new attempt is made with a new\n  * stepsize.</p>\n \n- * @version $Id: AdaptiveStepsizeIntegrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java\n  * @see MidpointIntegrator\n  * @see ThreeEighthesIntegrator\n \n- * @version $Id: ClassicalRungeKuttaIntegrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java\n \n  * @see ClassicalRungeKuttaIntegrator\n \n- * @version $Id: ClassicalRungeKuttaStepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n+++ b/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n  * @see StepHandler\n  * @see StepInterpolator\n \n- * @version $Id: ContinuousOutputModel.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/DerivativeException.java\n+++ b/src/java/org/apache/commons/math/ode/DerivativeException.java\n  * This exception is made available to users to report\n  * the error conditions that are trigegred while computing\n  * the differential equations.\n- * @version $Id: DerivativeException.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  */\n public class DerivativeException\n   extends MathException {\n--- a/src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java\n+++ b/src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java\n  *  volume 6, no 1, 1980, pp. 19-26\n  * </pre></p>\n \n- * @version $Id: DormandPrince54Integrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java\n  *\n  * @see DormandPrince54Integrator\n  *\n- * @version $Id: DormandPrince54StepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java\n+++ b/src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java\n  * <i>Solving Ordinary Differential Equations</i> (Springer-Verlag,\n  * ISBN 3-540-56670-8).</p>\n \n- * @version $Id: DormandPrince853Integrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java\n  *\n  * @see DormandPrince853Integrator\n  *\n- * @version $Id: DormandPrince853StepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/ode/DummyStepHandler.java\n+++ b/src/java/org/apache/commons/math/ode/DummyStepHandler.java\n \n  * @see StepHandler\n \n- * @version $Id: DummyStepHandler.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/DummyStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/DummyStepInterpolator.java\n  *\n  * @see StepHandler\n  *\n- * @version $Id: DummyStepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java\n  * evaluation is saved. For an <i>fsal</i> method, we have cs = 1 and\n  * asi = bi for all i.</p>\n \n- * @version $Id: EmbeddedRungeKuttaIntegrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/EulerIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/EulerIntegrator.java\n  * @see GillIntegrator\n  * @see ThreeEighthesIntegrator\n \n- * @version $Id: EulerIntegrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/EulerStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/EulerStepInterpolator.java\n \n  * @see EulerIntegrator\n \n- * @version $Id: EulerStepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/FirstOrderConverter.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderConverter.java\n  * @see FirstOrderDifferentialEquations\n  * @see SecondOrderDifferentialEquations\n \n- * @version $Id: FirstOrderConverter.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n  * @see FirstOrderConverter\n  * @see SecondOrderDifferentialEquations\n  *\n- * @version $Id: FirstOrderDifferentialEquations.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n  * @see StepHandler\n  * @see SwitchingFunction\n \n- * @version $Id: FirstOrderIntegrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/FixedStepHandler.java\n+++ b/src/java/org/apache/commons/math/ode/FixedStepHandler.java\n  * @see StepHandler\n  * @see StepNormalizer\n \n- * @version $Id: FixedStepHandler.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/GillIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/GillIntegrator.java\n  * @see MidpointIntegrator\n  * @see ThreeEighthesIntegrator\n \n- * @version $Id: GillIntegrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/GillStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/GillStepInterpolator.java\n \n  * @see GillIntegrator\n \n- * @version $Id: GillStepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java\n  * </table>\n \n  * @author E. Hairer and G. Wanner (fortran version)\n- * @version $Id: GraggBulirschStoerIntegrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java\n \n  * @see GraggBulirschStoerIntegrator\n \n- * @version $Id: GraggBulirschStoerStepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  * @author E. Hairer and G. Wanner (fortran version)\n \n  */\n--- a/src/java/org/apache/commons/math/ode/HighamHall54Integrator.java\n+++ b/src/java/org/apache/commons/math/ode/HighamHall54Integrator.java\n  * (and automatic step initialization) and continuous output. This\n  * method uses 7 functions evaluations per step.</p>\n \n- * @version $Id: HighamHall54Integrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java\n  *\n  * @see HighamHall54Integrator\n  *\n- * @version $Id: HighamHall54StepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/ode/IntegratorException.java\n+++ b/src/java/org/apache/commons/math/ode/IntegratorException.java\n /**\n  * This exception is made available to users to report\n  * the error conditions that are triggered during integration\n- * @version $Id: IntegratorException.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  */\n public class IntegratorException\n   extends MathException {\n--- a/src/java/org/apache/commons/math/ode/MidpointIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/MidpointIntegrator.java\n  * @see ClassicalRungeKuttaIntegrator\n  * @see GillIntegrator\n \n- * @version $Id: MidpointIntegrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java\n \n  * @see MidpointIntegrator\n \n- * @version $Id: MidpointStepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java\n  * @see GillIntegrator\n  * @see MidpointIntegrator\n \n- * @version $Id: RungeKuttaIntegrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/RungeKuttaStepInterpolator.java\n  * @see RungeKuttaIntegrator\n  * @see EmbeddedRungeKuttaIntegrator\n  *\n- * @version $Id: RungeKuttaStepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java\n+++ b/src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java\n  * @see FirstOrderConverter\n  * @see FirstOrderDifferentialEquations\n \n- * @version $Id: SecondOrderDifferentialEquations.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/SecondOrderIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/SecondOrderIntegrator.java\n \n  * @see SecondOrderDifferentialEquations\n \n- * @version $Id: SecondOrderIntegrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/StepHandler.java\n+++ b/src/java/org/apache/commons/math/ode/StepHandler.java\n  * @see SecondOrderIntegrator\n  * @see StepInterpolator\n \n- * @version $Id: StepHandler.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/StepInterpolator.java\n  * @see SecondOrderIntegrator\n  * @see StepHandler\n  *\n- * @version $Id: StepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/ode/StepNormalizer.java\n+++ b/src/java/org/apache/commons/math/ode/StepNormalizer.java\n  * @see StepHandler\n  * @see FixedStepHandler\n \n- * @version $Id: StepNormalizer.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/SwitchState.java\n+++ b/src/java/org/apache/commons/math/ode/SwitchState.java\n  * step (and hence the step should be reduced to ensure the event\n  * occurs at a bound rather than inside the step).</p>\n  *\n- * @version $Id: SwitchState.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n class SwitchState implements Serializable {\n--- a/src/java/org/apache/commons/math/ode/SwitchingFunction.java\n+++ b/src/java/org/apache/commons/math/ode/SwitchingFunction.java\n  * error (this feature is available on all integrators, including\n  * fixed step ones).</p>\n  *\n- * @version $Id: SwitchingFunction.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java\n+++ b/src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java\n  *\n  * @see SwitchingFunction\n  *\n- * @version $Id: SwitchingFunctionsHandler.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  *\n  */\n \n--- a/src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java\n  * @see GillIntegrator\n  * @see MidpointIntegrator\n \n- * @version $Id: ThreeEighthesIntegrator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java\n \n  * @see ThreeEighthesIntegrator\n \n- * @version $Id: ThreeEighthesStepInterpolator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/optimization/ConvergenceChecker.java\n+++ b/src/java/org/apache/commons/math/optimization/ConvergenceChecker.java\n  * to allow the optimization algorithm to stop its search according to\n  * the problem at hand.</p>\n \n- * @version $Id: ConvergenceChecker.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/optimization/CostException.java\n+++ b/src/java/org/apache/commons/math/optimization/CostException.java\n \n /** This class represents exceptions thrown by cost functions.\n \n- * @version $Id: CostException.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/optimization/CostFunction.java\n+++ b/src/java/org/apache/commons/math/optimization/CostFunction.java\n package org.apache.commons.math.optimization;\n \n /** This interface represents a cost function to be minimized.\n- * @version $Id: CostFunction.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  */\n public interface CostFunction {\n \n--- a/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java\n+++ b/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java\n  * performed by the derived classes according to the implemented\n  * algorithms.</p>\n \n- * @version $Id: DirectSearchOptimizer.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  * @see CostFunction\n  * @see NelderMead\n  * @see MultiDirectional\n--- a/src/java/org/apache/commons/math/optimization/MultiDirectional.java\n+++ b/src/java/org/apache/commons/math/optimization/MultiDirectional.java\n \n /** This class implements the multi-directional direct search method.\n \n- * @version $Id: MultiDirectional.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  * @see NelderMead\n  */\n public class MultiDirectional\n--- a/src/java/org/apache/commons/math/optimization/NelderMead.java\n+++ b/src/java/org/apache/commons/math/optimization/NelderMead.java\n \n /** This class implements the Nelder-Mead direct search method.\n \n- * @version $Id: NelderMead.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n  * @see MultiDirectional\n  */\n public class NelderMead\n--- a/src/java/org/apache/commons/math/optimization/PointCostPair.java\n+++ b/src/java/org/apache/commons/math/optimization/PointCostPair.java\n \n /** This class holds a point and its associated cost.\n  * <p>This is a simple immutable container.</p>\n- * @version $Id: PointCostPair.java 1709 2006-12-03 21:16:50Z luc $\n+ * @version $Revision$ $Date$\n  * @see CostFunction\n  */\n public class PointCostPair {\n--- a/src/java/org/apache/commons/math/random/RandomVectorGenerator.java\n+++ b/src/java/org/apache/commons/math/random/RandomVectorGenerator.java\n \n /** This interface represents a random generator for whole vectors.\n \n- * @version $Id: RandomVectorGenerator.java 1705 2006-09-17 19:57:39Z luc $\n+ * @version $Revision$ $Date$\n \n  */\n \n--- a/src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java\n+++ b/src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java\n  * components. Components of generated vectors follow (independent) Gaussian\n  * distributions, with parameters supplied in the constructor.\n  * \n- * @version $Revision$\n+ * @version $Revision$ $Date$\n  */\n \n public class UncorrelatedRandomVectorGenerator\n--- a/src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n  * the instance nor compute another statistic. \n  *\n  * @since 1.2\n- * @version $Revision: 602304 $ $Date: 2007-12-08 03:48:39 +0100 (sam., 08 d\u00e9c. 2007) $\n+ * @version $Revision$ $Date$\n  */\n public class SynchronizedSummaryStatistics extends SummaryStatistics {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java\n \n /**\n  * Returns the covariance matrix of the available vectors.\n- * @version $Revision:$\n+ * @version $Revision$ $Date$\n  */\n public class VectorialCovariance implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java\n \n /**\n  * Returns the arithmetic mean of the available vectors.\n- * @version $Revision:$\n+ * @version $Revision$ $Date$\n  */\n public class VectorialMean implements Serializable {\n \n--- a/src/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java\n  * <p>Two samples tests are used when the distribution is unknown <i>a priori</i>\n  * but provided by one sample. We compare the second sample against the first.</p>\n  *\n- * @version $Revision: 553603 $ $Date: 2007-07-05 20:34:45 +0200 (jeu, 05 jui 2007) $ \n+ * @version $Revision$ $Date$ \n  */\n public interface UnknownDistributionChiSquareTest extends ChiSquareTest {\n      ", "timestamp": 1200841404, "metainfo": ""}