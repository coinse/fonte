{"sha": "f5582b78775e8ab86e42dfad07105b94cf7b16d2", "log": "MATH-832 Unit test showing that the issue is invalid: For the function referred to in the JIRA ticket, \"BrentSolver\" and \"BrentOptimizer\" agree: the same value is found to be the minimum of the function and the root of the function's derivative.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/analysis/solvers/BrentSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/solvers/BrentSolverTest.java\n import org.apache.commons.math3.analysis.QuinticFunction;\n import org.apache.commons.math3.analysis.SinFunction;\n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;\n+import org.apache.commons.math3.analysis.FunctionUtils;\n+import org.apache.commons.math3.analysis.function.Sqrt;\n+import org.apache.commons.math3.analysis.function.Inverse;\n+import org.apache.commons.math3.analysis.function.Constant;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.NoBracketingException;\n         Assert.assertEquals(1, solver.getEvaluations());\n         Assert.assertEquals(1, f.getCallsCount());\n     }\n+\n+    @Test\n+    public void testMath832() {\n+        final DifferentiableUnivariateFunction f = new DifferentiableUnivariateFunction() {\n+                private final DifferentiableUnivariateFunction sqrt = new Sqrt();\n+                private final DifferentiableUnivariateFunction inv = new Inverse();\n+                private final DifferentiableUnivariateFunction func\n+                    = FunctionUtils.add(FunctionUtils.multiply(new Constant(1e2), sqrt),\n+                                        FunctionUtils.multiply(new Constant(1e6), inv),\n+                                        FunctionUtils.multiply(new Constant(1e4),\n+                                                               FunctionUtils.compose(inv, sqrt)));\n+\n+                public double value(double x) {\n+                    return func.value(x);\n+                }\n+\n+                public UnivariateFunction derivative() {\n+                    return func.derivative();\n+                }\n+            };\n+\n+        BrentSolver solver = new BrentSolver();\n+        final double result = solver.solve(99,\n+                                           f.derivative(),\n+                                           1, 1e30, 1 + 1e-10);\n+        Assert.assertEquals(804.93558250, result, 1e-8);\n+    }\n }", "timestamp": 1343309396, "metainfo": ""}