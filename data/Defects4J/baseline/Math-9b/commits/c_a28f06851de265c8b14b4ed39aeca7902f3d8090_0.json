{"sha": "a28f06851de265c8b14b4ed39aeca7902f3d8090", "log": "added tests for the synchronized version of multivariate summary statistics  ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java\n         return suite;\n     }\n \n+    protected MultivariateSummaryStatistics createMultivariateSummaryStatistics(int k, boolean isCovarianceBiasCorrected) {\n+        return new MultivariateSummaryStatistics(k, isCovarianceBiasCorrected);\n+    }\n+\n     public void testSetterInjection() throws Exception {\n-        MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(2, true);\n+        MultivariateSummaryStatistics u = createMultivariateSummaryStatistics(2, true);\n         u.setMeanImpl(new StorelessUnivariateStatistic[] {\n                         new sumMean(), new sumMean()\n                       });\n     }\n     \n     public void testSetterIllegalState() throws Exception {\n-        MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(2, true);\n+        MultivariateSummaryStatistics u = createMultivariateSummaryStatistics(2, true);\n         u.addValue(new double[] { 1, 2 });\n         u.addValue(new double[] { 3, 4 });\n         try {\n \n     public void testDimension() {\n         try {\n-            new MultivariateSummaryStatistics(2, true).addValue(new double[3]);\n+            createMultivariateSummaryStatistics(2, true).addValue(new double[3]);\n         } catch (DimensionMismatchException dme) {\n             // expected behavior\n         } catch (Exception e) {\n \n     /** test stats */\n     public void testStats() throws DimensionMismatchException {\n-        MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(2, true);\n+        MultivariateSummaryStatistics u = createMultivariateSummaryStatistics(2, true);\n         assertEquals(0, u.getN());\n         u.addValue(new double[] { 1, 2 });\n         u.addValue(new double[] { 2, 3 });\n     }     \n \n     public void testN0andN1Conditions() throws Exception {\n-        MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(1, true);\n+        MultivariateSummaryStatistics u = createMultivariateSummaryStatistics(1, true);\n         assertTrue(Double.isNaN(u.getMean()[0]));\n         assertTrue(Double.isNaN(u.getStandardDeviation()[0]));\n \n     }\n \n     public void testNaNContracts() throws DimensionMismatchException {\n-        MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(1, true);\n+        MultivariateSummaryStatistics u = createMultivariateSummaryStatistics(1, true);\n         assertTrue(Double.isNaN(u.getMean()[0])); \n         assertTrue(Double.isNaN(u.getMin()[0])); \n         assertTrue(Double.isNaN(u.getStandardDeviation()[0])); \n     }\n \n     public void testSerialization() throws DimensionMismatchException {\n-        MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(2, true);\n+        MultivariateSummaryStatistics u = createMultivariateSummaryStatistics(2, true);\n         // Empty test\n         TestUtils.checkSerializedEquality(u);\n         MultivariateSummaryStatistics s = (MultivariateSummaryStatistics) TestUtils.serializeAndRecover(u);\n     }\n \n     public void testEqualsAndHashCode() throws DimensionMismatchException {\n-        MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(2, true);\n+        MultivariateSummaryStatistics u = createMultivariateSummaryStatistics(2, true);\n         MultivariateSummaryStatistics t = null;\n         int emptyHash = u.hashCode();\n         assertTrue(u.equals(u));\n         assertFalse(u.equals(t));\n         assertFalse(u.equals(Double.valueOf(0)));\n-        t = new MultivariateSummaryStatistics(2, true);\n+        t = createMultivariateSummaryStatistics(2, true);\n         assertTrue(t.equals(u));\n         assertTrue(u.equals(t));\n         assertEquals(emptyHash, t.hashCode());\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n+ */\n+package org.apache.commons.math.stat.descriptive;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link SynchronizedMultivariateSummaryStatisticsTest} class.\n+ * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n+ *          2007) $\n+ */\n+public final class SynchronizedMultivariateSummaryStatisticsTest extends MultivariateSummaryStatisticsTest {\n+\n+    public SynchronizedMultivariateSummaryStatisticsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(SynchronizedMultivariateSummaryStatisticsTest.class);\n+        suite.setName(\"SynchronizedMultivariateSummaryStatistics Tests\");\n+        return suite;\n+    }\n+\n+    protected MultivariateSummaryStatistics createMultivariateSummaryStatistics(int k, boolean isCovarianceBiasCorrected) {\n+        return new SynchronizedMultivariateSummaryStatistics(k, isCovarianceBiasCorrected);\n+    }\n+\n+}", "timestamp": 1248123172, "metainfo": ""}