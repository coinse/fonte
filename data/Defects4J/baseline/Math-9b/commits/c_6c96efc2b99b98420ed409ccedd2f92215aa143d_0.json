{"sha": "6c96efc2b99b98420ed409ccedd2f92215aa143d", "log": "Alterations to the javadoc (MATH-677).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java\n  * <p>\n  * There are several variants of the discrete cosine transform. The present\n  * implementation corresponds to DCT-I, with various normalization conventions,\n- * which are specified in the comments of the factory methods {@link #create()}\n- * and {@link #createOrthogonal()}.\n- * </p>\n+ * which are described below.\n+ * </p>\n+ * <h3><a id=\"standard\">Standard DCT-I</a></h3>\n+ * <p>\n+ * The standard normalization convention is defined as follows\n+ * <ul>\n+ * <li>forward transform:\n+ * y<sub>n</sub> = (1/2) [x<sub>0</sub> + (-1)<sup>n</sup>x<sub>N-1</sub>]\n+ * + &sum;<sub>k=1</sub><sup>N-2</sup>\n+ * x<sub>k</sub> cos[&pi; nk / (N - 1)],</li>\n+ * <li>inverse transform:\n+ * x<sub>k</sub> = [1 / (N - 1)] [y<sub>0</sub>\n+ * + (-1)<sup>k</sup>y<sub>N-1</sub>]\n+ * + [2 / (N - 1)] &sum;<sub>n=1</sub><sup>N-2</sup>\n+ * y<sub>n</sub> cos[&pi; nk / (N - 1)],</li>\n+ * </ul>\n+ * where N is the size of the data sample.\n+ * </p>\n+ * <p> {@link RealTransformer}s following this convention are returned by the\n+ * factory method {@link #create()}.\n+ * </p>\n+ * <h3><a id=\"orthogonal\">Orthogonal DCT-I</a></h3>\n+ * <p>\n+ * The orthogonal normalization convention is defined as follows\n+ * <ul>\n+ * <li>forward transform:\n+ * y<sub>n</sub> = [2(N - 1)]<sup>-1/2</sup> [x<sub>0</sub>\n+ * + (-1)<sup>n</sup>x<sub>N-1</sub>]\n+ * + [2 / (N - 1)]<sup>1/2</sup> &sum;<sub>k=1</sub><sup>N-2</sup>\n+ * x<sub>k</sub> cos[&pi; nk / (N - 1)],</li>\n+ * <li>inverse transform:\n+ * x<sub>k</sub> = [2(N - 1)]<sup>-1/2</sup> [y<sub>0</sub>\n+ * + (-1)<sup>k</sup>y<sub>N-1</sub>]\n+ * + [2 / (N - 1)]<sup>1/2</sup> &sum;<sub>n=1</sub><sup>N-2</sup>\n+ * y<sub>n</sub> cos[&pi; nk / (N - 1)],</li>\n+ * </ul>\n+ * which make the transform orthogonal. N is the size of the data sample.\n+ * </p>\n+ * <p> {@link RealTransformer}s following this convention are returned by the\n+ * factory method {@link #createOrthogonal()}.\n+ * </p>\n+ * <h3>Link with the DFT, and assumptions on the layout of the data set</h3>\n  * <p>\n  * DCT-I is equivalent to DFT of an <em>even extension</em> of the data series.\n  * More precisely, if x<sub>0</sub>, &hellip;, x<sub>N-1</sub> is the data set\n  * x<sub>0</sub><sup>&#35;</sup>, &hellip;, x<sub>2N-3</sub><sup>&#35;</sup>\n  * is defined as follows\n  * <ul>\n- * <li>x<sub>k</sub><sup>&#35;</sup> = x<sub>k</sub> if  0 &le; k &lt; N,</li>\n+ * <li>x<sub>k</sub><sup>&#35;</sup> = x<sub>k</sub> if 0 &le; k &lt; N,</li>\n  * <li>x<sub>k</sub><sup>&#35;</sup> = x<sub>2N-2-k</sub>\n- * if  N &le; k &lt; 2N - 2.</li>\n+ * if N &le; k &lt; 2N - 2.</li>\n  * </ul>\n  * </p>\n  * <p>\n- * Then, the \"standard\" DCT-I (as returned by {@link #create()}) of the real\n- * data set x<sub>0</sub>, &hellip;, x<sub>N-1</sub> is equal to\n- * <em>half</em> of the N first elements of the DFT of the extended data set\n- * x<sub>0</sub><sup>&#35;</sup>, &hellip;, x<sub>2N-3</sub><sup>&#35;</sup>.\n+ * Then, the standard DCT-I y<sub>0</sub>, &hellip;, y<sub>N-1</sub> of the real\n+ * data set x<sub>0</sub>, &hellip;, x<sub>N-1</sub> is equal to <em>half</em>\n+ * of the N first elements of the DFT of the extended data set\n+ * x<sub>0</sub><sup>&#35;</sup>, &hellip;, x<sub>2N-3</sub><sup>&#35;</sup>\n+ * <br/>\n+ * 2y<sub>n</sub> = &sum;<sub>k=0</sub><sup>2N-3</sup>\n+ * x<sub>k</sub><sup>&#35;</sup> exp[-2&pi;i nk / (2N - 2)]\n+ * &nbsp;&nbsp;&nbsp;&nbsp;k = 0, &hellip;, N-1.\n  * </p>\n  * <p>\n  * The present implementation of the fast cosine transform requires the length\n  * </p>\n  * <p>As of version 2.0 this no longer implements Serializable</p>\n  *\n- * @version $Id$\n+ * @version $Id: FastCosineTransformer.java 1213585 2011-12-13 07:44:52Z\n+ *          celestin $\n  * @since 1.2\n  */\n public class FastCosineTransformer implements RealTransformer {\n     /**\n      * <p>\n      * Returns a new instance of this class. The returned transformer uses the\n-     * \"standard\" normalizing conventions\n-     * <ul>\n-     * <li>Forward transform:\n-     * y<sub>n</sub> = (1/2) [x<sub>0</sub> + (-1)<sup>n</sup>x<sub>N-1</sub>]\n-     * + &sum;<sub>k=1</sub><sup>N-2</sup>\n-     * x<sub>k</sub> cos[&pi; nk / (N - 1)],</li>\n-     * <li>Inverse transform:\n-     * x<sub>k</sub> = [1 / (N - 1)] [y<sub>0</sub>\n-     * + (-1)<sup>k</sup>y<sub>N-1</sub>]\n-     * + [2 / (N - 1)] &sum;<sub>n=1</sub><sup>N-2</sup>\n-     * y<sub>n</sub> cos[&pi; nk / (N - 1)],</li>\n-     * </ul>\n-     * where N is the size of the data sample.\n+     * <a href=\"#standard\">standard normalizing conventions</a>.\n      * </p>\n      *\n-     * @return a new DCT transformer, with \"standard\" normalizing conventions\n+     * @return a new DCT transformer, with standard normalizing conventions\n      */\n     public static FastCosineTransformer create() {\n         return new FastCosineTransformer(false);\n     /**\n      * <p>\n      * Returns a new instance of this class. The returned transformer uses the\n-     * \"orthogonal\" normalizing conventions\n-     * <ul>\n-     * <li>Forward transform:\n-     * y<sub>n</sub> = [2(N - 1)]<sup>-1/2</sup> [x<sub>0</sub>\n-     * + (-1)<sup>n</sup>x<sub>N-1</sub>]\n-     * + [2 / (N - 1)]<sup>1/2</sup> &sum;<sub>k=1</sub><sup>N-2</sup>\n-     * x<sub>k</sub> cos[&pi; nk / (N - 1)],</li>\n-     * <li>Inverse transform:\n-     * x<sub>k</sub> = [2(N - 1)]<sup>-1/2</sup> [y<sub>0</sub>\n-     * + (-1)<sup>k</sup>y<sub>N-1</sub>]\n-     * + [2 / (N - 1)]<sup>1/2</sup> &sum;<sub>n=1</sub><sup>N-2</sup>\n-     * y<sub>n</sub> cos[&pi; nk / (N - 1)],</li>\n-     * </ul>\n-     * which make the transform orthogonal. N is the size of the data sample.\n+     * <a href=\"#orthogonal\">orthogonal normalizing conventions</a>.\n      * </p>\n      *\n-     * @return a new DCT transformer, with \"orthogonal\" normalizing conventions\n+     * @return a new DCT transformer, with orthogonal normalizing conventions\n      */\n     public static FastCosineTransformer createOrthogonal() {\n         return new FastCosineTransformer(true);", "timestamp": 1323839161, "metainfo": ""}