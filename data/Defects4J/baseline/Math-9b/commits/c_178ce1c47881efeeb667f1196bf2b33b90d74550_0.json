{"sha": "178ce1c47881efeeb667f1196bf2b33b90d74550", "log": "removed tests not meaningful for sparse vectors reactivated some commented-out tests  ", "commit": "\n--- a/src/test/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/org/apache/commons/math/linear/SparseRealVectorTest.java\n         assertEquals(\"testData len\", 9, v5.getDimension());\n         assertEquals(\"testData is 9.0 \", 9.0, v5.getEntry(8));\n \n-        //SparseRealVector v6 = new SparseRealVector(dvec1, 3, 2);\n-        //assertEquals(\"testData len\", 2, v6.getDimension());\n-        //assertEquals(\"testData is 4.0 \", 4.0, v6.getEntry(0));\n-        //try {\n-        //    new SparseRealVector(dvec1, 8, 3);\n-        //    fail(\"IllegalArgumentException expected\");\n-        //} catch (IllegalArgumentException ex) {\n-            // expected behavior\n-        //} catch (Exception e) {\n-        //    fail(\"wrong exception caught\");\n-        //}\n-\n         SparseRealVector v7 = new SparseRealVector(v1);\n         assertEquals(\"testData len\", 7, v7.getDimension());\n         assertEquals(\"testData is 0.0 \", 0.0, v7.getEntry(6));\n \n         SparseRealVectorTestImpl v7_i = new SparseRealVectorTestImpl(vec1);\n \n-\t/*TODO: fixme */\n-        //SparseRealVector v7_2 = new SparseRealVector(v7_i);\n-        //assertEquals(\"testData len\", 3, v7_2.getDimension());\n-        //assertEquals(\"testData is 0.0 \", 2.0d, v7_2.getEntry(1));\n-\n-        //SparseRealVector v8 = new SparseRealVector(v1, true);\n-        //assertEquals(\"testData len\", 7, v8.getDimension());\n-        //assertEquals(\"testData is 0.0 \", 0.0, v8.getEntry(6));\n-        //assertNotSame(\"testData not same object \", v1.data, v8.data);\n-\n-        //SparseRealVector v8_2 = new SparseRealVector(v1, false);\n-        //assertEquals(\"testData len\", 7, v8_2.getDimension());\n-        //assertEquals(\"testData is 0.0 \", 0.0, v8_2.getEntry(6));\n-        //assertEquals(\"testData same object \", v1.data, v8_2.data);\n-\n-        //SparseRealVector v9 = new SparseRealVector(v1, v3);\n-        //assertEquals(\"testData len\", 10, v9.getDimension());\n-        //assertEquals(\"testData is 1.0 \", 1.0, v9.getEntry(7));\n+        SparseRealVector v7_2 = new SparseRealVector(v7_i);\n+        assertEquals(\"testData len\", 3, v7_2.getDimension());\n+        assertEquals(\"testData is 0.0 \", 2.0d, v7_2.getEntry(1));\n+\n+        SparseRealVector v8 = new SparseRealVector(v1);\n+        assertEquals(\"testData len\", 7, v8.getDimension());\n+        assertEquals(\"testData is 0.0 \", 0.0, v8.getEntry(6));\n \n     }\n \n         }\n \n \n-        SparseRealVector vout10 = (SparseRealVector) v1.copy();       \n-        SparseRealVector vout10_2 = (SparseRealVector) v1.copy();\n-        // TODO: backing store doesn't implement equals\n-        //assertEquals(vout10, vout10_2);\n-        //vout10_2.set(0, 1.1);\n-        //assertNotSame(vout10, vout10_2);\n-\n     }\n \n     public void testMapFunctions() { \n \n     public void testMisc() { \n         SparseRealVector v1 = new SparseRealVector(vec1);\n-        SparseRealVector v4 = new SparseRealVector(vec4);\n-        RealVector v4_2 = new SparseRealVector(vec4);\n \n         String out1 = v1.toString();\n         assertTrue(\"some output \",  out1.length()!=0);\n-        /*    \n-         double[] dout1 = v1.copyOut();\n-        assertEquals(\"testData len\", 3, dout1.length);\n-        assertNotSame(\"testData not same object \", v1.data, dout1);   \n-         */      \n         try {\n             v1.checkVectorDimensions(2); \n             fail(\"IllegalArgumentException expected\");\n \n         assertFalse(v.isInfinite());\n         v.setEntry(0, Double.POSITIVE_INFINITY);\n-        // TODO: why is this test here\n-        //assertFalse(v.isInfinite());\n+        assertFalse(v.isInfinite()); // NaN is checked before infinity\n         v.setEntry(1, 1);\n         assertTrue(v.isInfinite());\n \n-        //TODO: differeciate from resetting to zero\n         v.setEntry(0, 0);\n         assertEquals(v, new SparseRealVector(new double[] { 0, 1, 2 }));\n         assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));\n         assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2, 3 }));\n \n-        //assertEquals(new SparseRealVector(new double[] { Double.NaN, 1, 2 }).hashCode(),\n-        //              new SparseRealVector(new double[] { 0, Double.NaN, 2 }).hashCode());\n-\n-        //assertTrue(new SparseRealVector(new double[] { Double.NaN, 1, 2 }).hashCode() !=\n-        //           new SparseRealVector(new double[] { 0, 1, 2 }).hashCode());\n+        assertEquals(new SparseRealVector(new double[] { Double.NaN, 1, 2 }).hashCode(),\n+                      new SparseRealVector(new double[] { 0, Double.NaN, 2 }).hashCode());\n+\n+        assertTrue(new SparseRealVector(new double[] { Double.NaN, 1, 2 }).hashCode() !=\n+                   new SparseRealVector(new double[] { 0, 1, 2 }).hashCode());\n \n     }\n ", "timestamp": 1240000312, "metainfo": ""}