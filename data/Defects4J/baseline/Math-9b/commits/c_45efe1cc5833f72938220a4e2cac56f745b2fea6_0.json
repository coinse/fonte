{"sha": "45efe1cc5833f72938220a4e2cac56f745b2fea6", "log": "Allow a single test to be run  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java\n+++ b/src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java\n \n /**\n  * Test to compare FastMath results against StrictMath results for boundary values.\n+ * <p>\n+ * Running all tests independently: <br/>\n+ * {@code mvn test -Dtest=FastMathStrictComparisonTest}<br/>\n+ * or just run tests against a single method (e.g. scalb):<br/>\n+ * {@code mvn test -Dtest=FastMathStrictComparisonTest -DargLine=\"-DtestMethod=scalb\"}\n  */\n @RunWith(Parameterized.class)\n public class FastMathStrictComparisonTest {\n \n     @Parameters\n     public static List<Object[]> data() throws Exception {\n+        String singleMethod = System.getProperty(\"testMethod\");\n         List<Object[]> list = new ArrayList<Object[]>();\n         for(Method mathMethod : StrictMath.class.getDeclaredMethods()) {\n             method:\n                         // Get the corresponding FastMath method\n                         Method fastMethod = FastMath.class.getDeclaredMethod(mathMethod.getName(), (Class[]) types);\n                         if (Modifier.isPublic(fastMethod.getModifiers())) { // It must be public too\n+                            if (singleMethod != null && !fastMethod.getName().equals(singleMethod)) {\n+                                break method;\n+                            }\n                             Object [][] values = new Object[types.length][];\n                             int index = 0;\n                             for(Type t : types) {", "timestamp": 1295896077, "metainfo": ""}