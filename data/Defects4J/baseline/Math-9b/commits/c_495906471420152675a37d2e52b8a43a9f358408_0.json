{"sha": "495906471420152675a37d2e52b8a43a9f358408", "log": "MATH-430 New package \"function\" contains univariate and bivariate function objects. \"FunctionUtils\" contains methods to compose and combine function objects. Together they replace \"ComposableFunction\" and \"BinaryFunction\" which are now deprecated.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/BinaryFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/BinaryFunction.java\n  *\n  * @since 2.1\n  * @version $Revision$ $Date$\n+ * @deprecated in 2.2 (to be removed in 3.0). Please use the function classes\n+ * in the {@link org.apache.commons.math.analysis.function} package and the\n+ * methods in {@link FunctionUtils}.\n  */\n+@Deprecated\n public abstract class BinaryFunction implements BivariateRealFunction {\n+    public static BinaryFunction make(final BivariateRealFunction f) {\n+        return new BinaryFunction() {\n+            /** {@inheritDoc} */\n+            @Override\n+                public double value(double x, double y) {\n+                return f.value(x, y);\n+            }\n+        };\n+    }\n \n     /** The + operator method wrapped as a {@link BinaryFunction}. */\n-    public static final BinaryFunction ADD = new BinaryFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double x, double y) {\n-            return x + y;\n-        }\n-    };\n+    public static final BinaryFunction ADD =\n+        make(new org.apache.commons.math.analysis.function.Add());\n \n     /** The - operator method wrapped as a {@link BinaryFunction}. */\n-    public static final BinaryFunction SUBTRACT = new BinaryFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double x, double y) {\n-            return x - y;\n-        }\n-    };\n+    public static final BinaryFunction SUBTRACT =\n+        make(new org.apache.commons.math.analysis.function.Subtract());\n \n     /** The * operator method wrapped as a {@link BinaryFunction}. */\n-    public static final BinaryFunction MULTIPLY = new BinaryFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double x, double y) {\n-            return x * y;\n-        }\n-    };\n+    public static final BinaryFunction MULTIPLY =\n+        make(new org.apache.commons.math.analysis.function.Multiply());\n \n     /** The / operator method wrapped as a {@link BinaryFunction}. */\n-    public static final BinaryFunction DIVIDE = new BinaryFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double x, double y) {\n-            return x / y;\n-        }\n-    };\n+    public static final BinaryFunction DIVIDE =\n+        make(new org.apache.commons.math.analysis.function.Divide());\n \n     /** The {@code FastMath.pow} method wrapped as a {@link BinaryFunction}. */\n-    public static final BinaryFunction POW = new BinaryFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double x, double y) {\n-            return FastMath.pow(x, y);\n-        }\n-    };\n+    public static final BinaryFunction POW =\n+        make(new org.apache.commons.math.analysis.function.Pow());\n \n     /** The {@code FastMath.atan2} method wrapped as a {@link BinaryFunction}. */\n-    public static final BinaryFunction ATAN2 = new BinaryFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double x, double y) {\n-            return FastMath.atan2(x, y);\n-        }\n-    };\n+    public static final BinaryFunction ATAN2 =\n+        make(new org.apache.commons.math.analysis.function.Atan2());\n \n     /** {@inheritDoc} */\n     public abstract double value(double x, double y) throws MathUserException;\n      * @return a function such that {@code f.value(y) == value(fixedX, y)}\n      */\n     public ComposableFunction fix1stArgument(final double fixedX) {\n-        return new ComposableFunction() {\n-            @Override\n-            /** {@inheritDoc} */\n-            public double value(double x) throws MathUserException {\n-                return BinaryFunction.this.value(fixedX, x);\n-            }\n-        };\n+        return ComposableFunction.make(FunctionUtils.fix1stArgument(this, fixedX));\n     }\n \n     /** Get a composable function by fixing the second argument of the instance.\n      * @return a function such that {@code f.value(x) == value(x, fixedY)}\n      */\n     public ComposableFunction fix2ndArgument(final double fixedY) {\n-        return new ComposableFunction() {\n-            @Override\n-            /** {@inheritDoc} */\n-            public double value(double x) throws MathUserException {\n-                return BinaryFunction.this.value(x, fixedY);\n-            }\n-        };\n+        return ComposableFunction.make(FunctionUtils.fix2ndArgument(this, fixedY));\n     }\n-\n }\n--- a/src/main/java/org/apache/commons/math/analysis/ComposableFunction.java\n+++ b/src/main/java/org/apache/commons/math/analysis/ComposableFunction.java\n  *\n  * @since 2.1\n  * @version $Revision$ $Date$\n+ * @deprecated in 2.2 (to be removed in 3.0). Please use the function classes\n+ * in the {@link org.apache.commons.math.analysis.function} package and the\n+ * methods in {@link FunctionUtils}.\n  */\n+@Deprecated\n public abstract class ComposableFunction implements UnivariateRealFunction {\n+    public static ComposableFunction make(final UnivariateRealFunction f) {\n+        return new ComposableFunction() {\n+            /** {@inheritDoc} */\n+            @Override\n+            public double value(double x) {\n+                return f.value(x);\n+            }\n+        };\n+    }\n \n     /** The constant function always returning 0. */\n-    public static final ComposableFunction ZERO = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return 0;\n-        }\n-    };\n-\n+    public static final ComposableFunction ZERO =\n+        make(new org.apache.commons.math.analysis.function.Constant(0));\n+    \n     /** The constant function always returning 1. */\n-    public static final ComposableFunction ONE = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return 1;\n-        }\n-    };\n+    public static final ComposableFunction ONE = \n+        make(new org.apache.commons.math.analysis.function.Constant(1));\n \n     /** The identity function. */\n-    public static final ComposableFunction IDENTITY = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return d;\n-        }\n-    };\n+    public static final ComposableFunction IDENTITY =\n+        make(new org.apache.commons.math.analysis.function.Identity());\n \n     /** The {@code FastMath.abs} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction ABS = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.abs(d);\n-        }\n-    };\n+    public static final ComposableFunction ABS =\n+        make(new org.apache.commons.math.analysis.function.Abs());\n \n     /** The - operator wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction NEGATE = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return -d;\n-        }\n-    };\n+    public static final ComposableFunction NEGATE = \n+        make(new org.apache.commons.math.analysis.function.Minus());\n \n     /** The invert operator wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction INVERT = new ComposableFunction () {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d){\n-            return 1/d;\n-        }\n-    };\n+    public static final ComposableFunction INVERT =\n+        make(new org.apache.commons.math.analysis.function.Inverse());\n \n     /** The {@code FastMath.sin} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction SIN = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.sin(d);\n-        }\n-    };\n+    public static final ComposableFunction SIN =\n+        make(new org.apache.commons.math.analysis.function.Sin());\n \n     /** The {@code FastMath.sqrt} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction SQRT = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.sqrt(d);\n-        }\n-    };\n+    public static final ComposableFunction SQRT =\n+        make(new org.apache.commons.math.analysis.function.Sqrt());\n \n     /** The {@code FastMath.sinh} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction SINH = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.sinh(d);\n-        }\n-    };\n+    public static final ComposableFunction SINH =\n+        make(new org.apache.commons.math.analysis.function.Sinh());\n \n     /** The {@code FastMath.exp} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction EXP = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.exp(d);\n-        }\n-    };\n+    public static final ComposableFunction EXP =\n+        make(new org.apache.commons.math.analysis.function.Exp());\n \n     /** The {@code FastMath.expm1} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction EXPM1 = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.expm1(d);\n-        }\n-    };\n+    public static final ComposableFunction EXPM1 =\n+        make(new org.apache.commons.math.analysis.function.Expm1());\n \n     /** The {@code FastMath.asin} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction ASIN = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.asin(d);\n-        }\n-    };\n+    public static final ComposableFunction ASIN =\n+        make(new org.apache.commons.math.analysis.function.Asin());\n \n     /** The {@code FastMath.atan} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction ATAN = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.atan(d);\n-        }\n-    };\n+    public static final ComposableFunction ATAN =\n+        make(new org.apache.commons.math.analysis.function.Atan());\n \n     /** The {@code FastMath.tan} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction TAN = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.tan(d);\n-        }\n-    };\n+    public static final ComposableFunction TAN =\n+        make(new org.apache.commons.math.analysis.function.Tan());\n \n     /** The {@code FastMath.tanh} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction TANH = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.tanh(d);\n-        }\n-    };\n+    public static final ComposableFunction TANH =\n+        make(new org.apache.commons.math.analysis.function.Tanh());\n \n     /** The {@code FastMath.cbrt} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction CBRT = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.cbrt(d);\n-        }\n-    };\n+    public static final ComposableFunction CBRT =\n+        make(new org.apache.commons.math.analysis.function.Cbrt());\n \n     /** The {@code FastMath.ceil} method wrapped as a {@link ComposableFunction}. */\n     public static final ComposableFunction CEIL = new ComposableFunction() {\n     };\n \n     /** The {@code FastMath.log} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction LOG = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.log(d);\n-        }\n-    };\n+    public static final ComposableFunction LOG =\n+        make(new org.apache.commons.math.analysis.function.Log());\n \n     /** The {@code FastMath.log10} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction LOG10 = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.log10(d);\n-        }\n-    };\n+    public static final ComposableFunction LOG10 =\n+        make(new org.apache.commons.math.analysis.function.Log10());\n \n     /** The {@code FastMath.log1p} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction LOG1P = new ComposableFunction () {\n-        @Override\n-        public double value(double d){\n-            return FastMath.log1p(d);\n-        }\n-    };\n+    public static final ComposableFunction LOG1P =\n+        make(new org.apache.commons.math.analysis.function.Log1p());\n \n     /** The {@code FastMath.cos} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction COS = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.cos(d);\n-        }\n-    };\n+    public static final ComposableFunction COS =\n+        make(new org.apache.commons.math.analysis.function.Cos());\n \n     /** The {@code FastMath.abs} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction ACOS = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.acos(d);\n-        }\n-    };\n+    public static final ComposableFunction ACOS =\n+        make(new org.apache.commons.math.analysis.function.Acos());\n \n     /** The {@code FastMath.cosh} method wrapped as a {@link ComposableFunction}. */\n-    public static final ComposableFunction COSH = new ComposableFunction() {\n-        /** {@inheritDoc} */\n-        @Override\n-        public double value(double d) {\n-            return FastMath.cosh(d);\n-        }\n-    };\n+    public static final ComposableFunction COSH =\n+        make(new org.apache.commons.math.analysis.function.Cosh());\n \n     /** The {@code FastMath.rint} method wrapped as a {@link ComposableFunction}. */\n     public static final ComposableFunction RINT = new ComposableFunction() {\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/FunctionUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.analysis.function.Identity;\n+\n+/**\n+ * Utilities for manipulating function objects.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class FunctionUtils {\n+    /**\n+     * Compose functions.\n+     *\n+     * @param f List of functions.\n+     * @return the composed function.\n+     */\n+    public static UnivariateRealFunction compose(final UnivariateRealFunction ... f) {\n+        return new UnivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double x) {\n+                double r = x;\n+                for (int i = f.length - 1; i >= 0; i--) {\n+                    r = f[i].value(r);\n+                }\n+                return r;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Add functions.\n+     *\n+     * @param f List of functions.\n+     * @return a function that computes the addition of the functions.\n+     */\n+    public static UnivariateRealFunction add(final UnivariateRealFunction ... f) {\n+        return new UnivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double x) {\n+                double r = f[0].value(x);\n+                for (int i = 1; i < f.length; i++) {\n+                    r += f[i].value(x);\n+                }\n+                return r;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Multiply functions.\n+     *\n+     * @param f List of functions.\n+     * @return a function that computes the multiplication of the functions.\n+     */\n+    public static UnivariateRealFunction multiply(final UnivariateRealFunction ... f) {\n+        return new UnivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double x) {\n+                double r = f[0].value(x);\n+                for (int i = 1; i < f.length; i++) {\n+                    r *= f[i].value(x);\n+                }\n+                return r;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Combine functions.\n+     *\n+     * @param combiner Combiner function.\n+     * @param f Function.\n+     * @param g Function.\n+     * @return the composed function.\n+     */\n+    public static UnivariateRealFunction combine(final BivariateRealFunction combiner,\n+                                                 final UnivariateRealFunction f,\n+                                                 final UnivariateRealFunction g) {\n+        return new UnivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double x) {\n+                return combiner.value(f.value(x), g.value(x));\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Generate a collector function.\n+     *\n+     * @param combiner Combiner function.\n+     * @param f Function.\n+     * @param initialValue Initial value.\n+     * @return a collector function.\n+     */\n+    public static MultivariateRealFunction collector(final BivariateRealFunction combiner,\n+                                                     final UnivariateRealFunction f,\n+                                                     final double initialValue) {\n+        return new MultivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double[] point) {\n+                double result = combiner.value(initialValue, f.value(point[0]));\n+                for (int i = 1; i < point.length; i++) {\n+                    result = combiner.value(result, f.value(point[i]));\n+                }\n+                return result;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Generate a collector function.\n+     *\n+     * @param combiner Combiner function.\n+     * @param initialValue Initial value.\n+     * @return a collector function.\n+     */\n+    public static MultivariateRealFunction collector(final BivariateRealFunction combiner,\n+                                                     final double initialValue) {\n+        return collector(combiner, new Identity(), initialValue);\n+    }\n+\n+    /**\n+     * Create a unary function by fixing the first argument of a binary function.\n+     *\n+     * @param f Binary function.\n+     * @param fixed Value to which the first argument of {@code f} is set.\n+     */\n+    public static UnivariateRealFunction fix1stArgument(final BivariateRealFunction f,\n+                                                        final double fixed) {\n+        return new UnivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double x) {\n+                return f.value(fixed, x);\n+            }\n+        };\n+    }\n+    /**\n+     * Create a unary function by fixing the second argument of a binary function.\n+     *\n+     * @param f Binary function.\n+     * @param fixed Value to which the second argument of {@code f} is set.\n+     */\n+    public static UnivariateRealFunction fix2ndArgument(final BivariateRealFunction f,\n+                                                        final double fixed) {\n+        return new UnivariateRealFunction() {\n+            /** {@inheritDoc} */\n+            public double value(double x) {\n+                return f.value(x, fixed);\n+            }\n+        };\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Abs.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Absolute value function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Abs implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.abs(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Acos.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Arc-cosine function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Acos implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.acos(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Acosh.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Hyperbolic arc-cosine function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Acosh implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.acosh(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Add.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.BivariateRealFunction;\n+\n+/**\n+ * Add the two operands.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Add implements BivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x, double y) {\n+        return x + y;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Asin.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Arc-sine function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Asin implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.asin(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Asinh.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Hyperbolic arc-sine function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Asinh implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.asinh(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Atan.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Arc-tangent function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Atan implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.atan(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Atan2.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Arc-tangent function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Atan2 implements BivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x, double y) {\n+        return FastMath.atan2(x, y);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Atanh.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Hyperbolic arc-tangent function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Atanh implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.atanh(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Cbrt.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Cubic-root function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Cbrt implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.cbrt(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Constant.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+\n+/**\n+ * Constant function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Constant implements UnivariateRealFunction {\n+    /** Constant. */\n+    private final double c;\n+\n+    /**\n+     * @param c Constant.\n+     */\n+    public Constant(double c) {\n+        this.c = c;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return c;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Cos.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Cosine function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Cos implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.cos(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Cosh.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Hyperbolic cosine function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Cosh implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.cosh(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Divide.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.BivariateRealFunction;\n+\n+/**\n+ * Divide the first operand by the second.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Divide implements BivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x, double y) {\n+        return x / y;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Exp.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Exponential function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Exp implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.exp(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Expm1.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * <code>e<sup>x</sup>-1</code> function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Expm1 implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.expm1(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Identity.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+\n+/**\n+ * Identity function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Identity implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return x;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Inverse.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+\n+/**\n+ * Inverse function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Inverse implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return 1 / x;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Log.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Natural logarithm function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Log implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.log(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Log10.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Base 10 logarithm function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Log10 implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.log10(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Log1p.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * <code>log(1 + p)</code> function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Log1p implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.log1p(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Max.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Maximum function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Max implements BivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x, double y) {\n+        return FastMath.max(x, y);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Min.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Minimum function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Min implements BivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x, double y) {\n+        return FastMath.min(x, y);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Minus.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+\n+/**\n+ * Minus function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Minus implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return -x;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Multiply.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.BivariateRealFunction;\n+\n+/**\n+ * Multiply the two operands.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Multiply implements BivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x, double y) {\n+        return x * y;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Pow.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Power function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Pow implements BivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x, double y) {\n+        return FastMath.pow(x, y);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Power.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Power function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Power implements UnivariateRealFunction {\n+    /** Power. */\n+    private final double p;\n+\n+    /**\n+     * @param p Power.\n+     */\n+    public Power(double p) {\n+        this.p = p;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.pow(x, p);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sin.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Sine function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Sin implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.sin(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sinc.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Sinc function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Sinc implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.abs(x) < 1e-9 ? 1 : FastMath.sin(x) / x;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sinh.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Hyperbolic sine function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Sinh implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.sinh(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Sqrt.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Square-root function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Sqrt implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.sqrt(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Subtract.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.BivariateRealFunction;\n+\n+/**\n+ * Subtract the second operand from the first.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Subtract implements BivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x, double y) {\n+        return x - y;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Tan.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Tangent function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Tan implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.tan(x);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/function/Tanh.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.function;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+/**\n+ * Hyperbolic tangent function.\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 3.0\n+ */\n+public class Tanh implements UnivariateRealFunction {\n+    /** {@inheritDoc} */\n+    public double value(double x) {\n+        return FastMath.tanh(x);\n+    }\n+}\n--- a/src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java\n import org.junit.Assert;\n import org.junit.Test;\n \n+/**\n+ * @deprecated To be removed when the class {@link ComposableFunction} is removed.\n+ */\n+@Deprecated\n public class ComposableFunctionTest {\n \n     @Test\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/analysis/FunctionUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.analysis.function.Identity;\n+import org.apache.commons.math.analysis.function.Constant;\n+import org.apache.commons.math.analysis.function.Minus;\n+import org.apache.commons.math.analysis.function.Inverse;\n+import org.apache.commons.math.analysis.function.Power;\n+import org.apache.commons.math.analysis.function.Sin;\n+import org.apache.commons.math.analysis.function.Sinc;\n+import org.apache.commons.math.analysis.BivariateRealFunction;\n+import org.apache.commons.math.analysis.function.Add;\n+import org.apache.commons.math.analysis.function.Multiply;\n+import org.apache.commons.math.analysis.function.Divide;\n+import org.apache.commons.math.analysis.function.Min;\n+import org.apache.commons.math.analysis.function.Max;\n+import org.apache.commons.math.analysis.function.Pow;\n+import org.apache.commons.math.analysis.MultivariateRealFunction;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link FunctionUtils}.\n+ */\n+public class FunctionUtilsTest {\n+    private final double EPS = Math.ulp(1d);\n+\n+    @Test\n+    public void testCompose() {\n+        UnivariateRealFunction id = new Identity();\n+        Assert.assertEquals(3, FunctionUtils.compose(id, id, id).value(3), EPS);\n+\n+        UnivariateRealFunction c = new Constant(4);\n+        Assert.assertEquals(4, FunctionUtils.compose(id, c).value(3), EPS);\n+        Assert.assertEquals(4, FunctionUtils.compose(c, id).value(3), EPS);\n+\n+        UnivariateRealFunction m = new Minus();\n+        Assert.assertEquals(-3, FunctionUtils.compose(m).value(3), EPS);\n+        Assert.assertEquals(3, FunctionUtils.compose(m, m).value(3), EPS);\n+\n+        UnivariateRealFunction inv = new Inverse();\n+        Assert.assertEquals(-0.25, FunctionUtils.compose(inv, m, c, id).value(3), EPS);\n+\n+        UnivariateRealFunction pow = new Power(2);\n+        Assert.assertEquals(81, FunctionUtils.compose(pow, pow).value(3), EPS);\n+    }\n+\n+    @Test\n+    public void testAdd() {\n+        UnivariateRealFunction id = new Identity();\n+        UnivariateRealFunction c = new Constant(4);\n+        UnivariateRealFunction m = new Minus();\n+        UnivariateRealFunction inv = new Inverse();\n+\n+        Assert.assertEquals(4.5, FunctionUtils.add(inv, m, c, id).value(2), EPS);\n+        Assert.assertEquals(4 + 2, FunctionUtils.add(c, id).value(2), EPS);\n+        Assert.assertEquals(4 - 2, FunctionUtils.add(c, FunctionUtils.compose(m, id)).value(2), EPS);\n+    }\n+\n+    @Test\n+    public void testMultiply() {\n+        UnivariateRealFunction c = new Constant(4);\n+        Assert.assertEquals(16, FunctionUtils.multiply(c, c).value(12345), EPS);\n+\n+        UnivariateRealFunction inv = new Inverse();\n+        UnivariateRealFunction pow = new Power(2);\n+        Assert.assertEquals(1, FunctionUtils.multiply(FunctionUtils.compose(inv, pow), pow).value(3.5), EPS);\n+    }\n+\n+    @Test\n+    public void testCombine() {\n+        BivariateRealFunction bi = new Add();\n+        UnivariateRealFunction id = new Identity();\n+        UnivariateRealFunction m = new Minus();\n+        UnivariateRealFunction c = FunctionUtils.combine(bi, id, m);\n+        Assert.assertEquals(0, c.value(2.3456), EPS);\n+\n+        bi = new Multiply();\n+        UnivariateRealFunction inv = new Inverse();\n+        c = FunctionUtils.combine(bi, id, inv);\n+        Assert.assertEquals(1, c.value(2.3456), EPS);\n+    }\n+\n+    @Test\n+    public void testCollector() {\n+        BivariateRealFunction bi = new Add();\n+        MultivariateRealFunction coll = FunctionUtils.collector(bi, 0);\n+        Assert.assertEquals(10, coll.value(new double[] {1, 2, 3, 4}), EPS);\n+\n+        bi = new Multiply();\n+        coll = FunctionUtils.collector(bi, 1);\n+        Assert.assertEquals(24, coll.value(new double[] {1, 2, 3, 4}), EPS);\n+\n+        bi = new Max();\n+        coll = FunctionUtils.collector(bi, Double.NEGATIVE_INFINITY);\n+        Assert.assertEquals(10, coll.value(new double[] {1, -2, 7.5, 10, -24, 9.99}), 0);\n+\n+        bi = new Min();\n+        coll = FunctionUtils.collector(bi, Double.POSITIVE_INFINITY);\n+        Assert.assertEquals(-24, coll.value(new double[] {1, -2, 7.5, 10, -24, 9.99}), 0);\n+    }\n+\n+    @Test\n+    public void testSinc() {\n+        BivariateRealFunction div = new Divide();\n+        UnivariateRealFunction sin = new Sin();\n+        UnivariateRealFunction id = new Identity();\n+        UnivariateRealFunction sinc1 = FunctionUtils.combine(div, sin, id);\n+        UnivariateRealFunction sinc2 = new Sinc();\n+\n+        for (int i = 0; i < 10; i++) {\n+            double x = Math.random();\n+            Assert.assertEquals(sinc1.value(x), sinc2.value(x), EPS);\n+        }\n+    }\n+\n+    @Test\n+    public void testFixingArguments() {\n+        UnivariateRealFunction scaler = FunctionUtils.fix1stArgument(new Multiply(), 10);\n+        Assert.assertEquals(1.23456, scaler.value(0.123456), EPS);\n+\n+        UnivariateRealFunction pow1 = new Power(2);\n+        UnivariateRealFunction pow2 = FunctionUtils.fix2ndArgument(new Pow(), 2);\n+\n+        for (int i = 0; i < 10; i++) {\n+            double x = Math.random() * 10;\n+            Assert.assertEquals(pow1.value(x), pow2.value(x), 0);\n+        }\n+    }\n+}", "timestamp": 1290461389, "metainfo": ""}