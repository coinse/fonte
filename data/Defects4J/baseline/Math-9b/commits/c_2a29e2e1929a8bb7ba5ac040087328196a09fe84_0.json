{"sha": "2a29e2e1929a8bb7ba5ac040087328196a09fe84", "log": "MATH-425 Removed deprecated \"MatrixVisitorException\". Modified affected files.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n     }\n \n     /** {@inheritDoc} */\n-    public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n     }\n \n     /** {@inheritDoc} */\n-    public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n     /** {@inheritDoc} */\n     public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor,\n                             final int startRow, final int endRow,\n-                            final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                            final int startColumn, final int endColumn) {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n \n     /** {@inheritDoc} */\n     public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor,\n-                                 final int startRow, final int endRow,\n-                                 final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                            final int startRow, final int endRow,\n+                            final int startColumn, final int endColumn) {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     }\n \n     /** {@inheritDoc} */\n-    public T walkInColumnOrder(final FieldMatrixChangingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInColumnOrder(final FieldMatrixChangingVisitor<T> visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n     }\n \n     /** {@inheritDoc} */\n-    public T walkInColumnOrder(final FieldMatrixPreservingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInColumnOrder(final FieldMatrixPreservingVisitor<T> visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n     /** {@inheritDoc} */\n     public T walkInColumnOrder(final FieldMatrixChangingVisitor<T> visitor,\n                                final int startRow, final int endRow,\n-                               final int startColumn, final int endColumn)\n-    throws MatrixVisitorException {\n+                               final int startColumn, final int endColumn) {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     /** {@inheritDoc} */\n     public T walkInColumnOrder(final FieldMatrixPreservingVisitor<T> visitor,\n                                final int startRow, final int endRow,\n-                               final int startColumn, final int endColumn)\n-    throws MatrixVisitorException {\n+                               final int startColumn, final int endColumn) {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     }\n \n     /** {@inheritDoc} */\n-    public T walkInOptimizedOrder(final FieldMatrixChangingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInOptimizedOrder(final FieldMatrixChangingVisitor<T> visitor) {\n         return walkInRowOrder(visitor);\n     }\n \n     /** {@inheritDoc} */\n-    public T walkInOptimizedOrder(final FieldMatrixPreservingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInOptimizedOrder(final FieldMatrixPreservingVisitor<T> visitor) {\n         return walkInRowOrder(visitor);\n     }\n \n     /** {@inheritDoc} */\n     public T walkInOptimizedOrder(final FieldMatrixChangingVisitor<T> visitor,\n-                                       final int startRow, final int endRow,\n-                                       final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                  final int startRow, final int endRow,\n+                                  final int startColumn, final int endColumn) {\n         return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);\n     }\n \n     /** {@inheritDoc} */\n     public T walkInOptimizedOrder(final FieldMatrixPreservingVisitor<T> visitor,\n-                                       final int startRow, final int endRow,\n-                                       final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                  final int startRow, final int endRow,\n+                                  final int startColumn, final int endColumn) {\n         return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);\n     }\n \n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n     }\n \n     /** {@inheritDoc} */\n-    public double walkInRowOrder(final RealMatrixChangingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInRowOrder(final RealMatrixChangingVisitor visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n     }\n \n     /** {@inheritDoc} */\n-    public double walkInRowOrder(final RealMatrixPreservingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInRowOrder(final RealMatrixPreservingVisitor visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n     /** {@inheritDoc} */\n     public double walkInRowOrder(final RealMatrixChangingVisitor visitor,\n                                  final int startRow, final int endRow,\n-                                 final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                 final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     /** {@inheritDoc} */\n     public double walkInRowOrder(final RealMatrixPreservingVisitor visitor,\n                                  final int startRow, final int endRow,\n-                                 final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                 final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     }\n \n     /** {@inheritDoc} */\n-    public double walkInColumnOrder(final RealMatrixChangingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInColumnOrder(final RealMatrixChangingVisitor visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n     }\n \n     /** {@inheritDoc} */\n-    public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n     /** {@inheritDoc} */\n     public double walkInColumnOrder(final RealMatrixChangingVisitor visitor,\n                                     final int startRow, final int endRow,\n-                                    final int startColumn, final int endColumn)\n-    throws MatrixVisitorException {\n+                                    final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     /** {@inheritDoc} */\n     public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor,\n                                     final int startRow, final int endRow,\n-                                    final int startColumn, final int endColumn)\n-    throws MatrixVisitorException {\n+                                    final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     }\n \n     /** {@inheritDoc} */\n-    public double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor) {\n         return walkInRowOrder(visitor);\n     }\n \n     /** {@inheritDoc} */\n-    public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor) {\n         return walkInRowOrder(visitor);\n     }\n \n     /** {@inheritDoc} */\n     public double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor,\n                                        final int startRow, final int endRow,\n-                                       final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                       final int startColumn, final int endColumn) {\n         return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);\n     }\n \n     /** {@inheritDoc} */\n     public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor,\n                                        final int startRow, final int endRow,\n-                                       final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                       final int startColumn, final int endColumn) {\n         return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);\n     }\n \n--- a/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java\n \n     /** {@inheritDoc} */\n     @Override\n-    public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n \n     /** {@inheritDoc} */\n     @Override\n-    public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n     @Override\n     public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor,\n                             final int startRow, final int endRow,\n-                            final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                            final int startColumn, final int endColumn) {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     @Override\n     public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor,\n                             final int startRow, final int endRow,\n-                            final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                            final int startColumn, final int endColumn) {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n \n     /** {@inheritDoc} */\n     @Override\n-    public T walkInColumnOrder(final FieldMatrixChangingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInColumnOrder(final FieldMatrixChangingVisitor<T> visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n \n     /** {@inheritDoc} */\n     @Override\n-    public T walkInColumnOrder(final FieldMatrixPreservingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInColumnOrder(final FieldMatrixPreservingVisitor<T> visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n     @Override\n     public T walkInColumnOrder(final FieldMatrixChangingVisitor<T> visitor,\n                                final int startRow, final int endRow,\n-                               final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                               final int startColumn, final int endColumn) {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     @Override\n     public T walkInColumnOrder(final FieldMatrixPreservingVisitor<T> visitor,\n                                final int startRow, final int endRow,\n-                               final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                               final int startColumn, final int endColumn) {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n--- a/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java\n \n     /** {@inheritDoc} */\n     @Override\n-    public double walkInRowOrder(final RealMatrixChangingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInRowOrder(final RealMatrixChangingVisitor visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n \n     /** {@inheritDoc} */\n     @Override\n-    public double walkInRowOrder(final RealMatrixPreservingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInRowOrder(final RealMatrixPreservingVisitor visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n     @Override\n     public double walkInRowOrder(final RealMatrixChangingVisitor visitor,\n                                  final int startRow, final int endRow,\n-                                 final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                 final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     @Override\n     public double walkInRowOrder(final RealMatrixPreservingVisitor visitor,\n                                  final int startRow, final int endRow,\n-                                 final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                 final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n \n     /** {@inheritDoc} */\n     @Override\n-    public double walkInColumnOrder(final RealMatrixChangingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInColumnOrder(final RealMatrixChangingVisitor visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n \n     /** {@inheritDoc} */\n     @Override\n-    public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor) {\n         final int rows    = getRowDimension();\n         final int columns = getColumnDimension();\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n     @Override\n     public double walkInColumnOrder(final RealMatrixChangingVisitor visitor,\n                                     final int startRow, final int endRow,\n-                                    final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                    final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n     @Override\n     public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor,\n                                     final int startRow, final int endRow,\n-                                    final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                    final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(getRowDimension(), getColumnDimension(),\n                       startRow, endRow, startColumn, endColumn);\n--- a/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java\n \n     /** {@inheritDoc} */\n     @Override\n-    public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor) {\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n         for (int iBlock = 0; iBlock < blockRows; ++iBlock) {\n             final int pStart = iBlock * BLOCK_SIZE;\n \n     /** {@inheritDoc} */\n     @Override\n-    public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor) {\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n         for (int iBlock = 0; iBlock < blockRows; ++iBlock) {\n             final int pStart = iBlock * BLOCK_SIZE;\n     /** {@inheritDoc} */\n     @Override\n     public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor,\n-                                 final int startRow, final int endRow,\n-                                 final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                            final int startRow, final int endRow,\n+                            final int startColumn, final int endColumn) {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);\n         for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {\n     /** {@inheritDoc} */\n     @Override\n     public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor,\n-                                 final int startRow, final int endRow,\n-                                 final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                            final int startRow, final int endRow,\n+                            final int startColumn, final int endColumn) {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);\n         for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public T walkInOptimizedOrder(final FieldMatrixChangingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInOptimizedOrder(final FieldMatrixChangingVisitor<T> visitor) {\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n         int blockIndex = 0;\n         for (int iBlock = 0; iBlock < blockRows; ++iBlock) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public T walkInOptimizedOrder(final FieldMatrixPreservingVisitor<T> visitor)\n-        throws MatrixVisitorException {\n+    public T walkInOptimizedOrder(final FieldMatrixPreservingVisitor<T> visitor) {\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n         int blockIndex = 0;\n         for (int iBlock = 0; iBlock < blockRows; ++iBlock) {\n     @Override\n     public T walkInOptimizedOrder(final FieldMatrixChangingVisitor<T> visitor,\n                                        final int startRow, final int endRow,\n-                                       final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                       final int startColumn, final int endColumn) {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);\n         for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {\n     @Override\n     public T walkInOptimizedOrder(final FieldMatrixPreservingVisitor<T> visitor,\n                                        final int startRow, final int endRow,\n-                                       final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                       final int startColumn, final int endColumn) {\n         checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);\n         visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);\n         for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {\n--- a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java\n \n     /** {@inheritDoc} */\n     @Override\n-    public double walkInRowOrder(final RealMatrixChangingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInRowOrder(final RealMatrixChangingVisitor visitor) {\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n         for (int iBlock = 0; iBlock < blockRows; ++iBlock) {\n             final int pStart = iBlock * BLOCK_SIZE;\n \n     /** {@inheritDoc} */\n     @Override\n-    public double walkInRowOrder(final RealMatrixPreservingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInRowOrder(final RealMatrixPreservingVisitor visitor) {\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n         for (int iBlock = 0; iBlock < blockRows; ++iBlock) {\n             final int pStart = iBlock * BLOCK_SIZE;\n     @Override\n     public double walkInRowOrder(final RealMatrixChangingVisitor visitor,\n                                  final int startRow, final int endRow,\n-                                 final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                 final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);\n         for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {\n     @Override\n     public double walkInRowOrder(final RealMatrixPreservingVisitor visitor,\n                                  final int startRow, final int endRow,\n-                                 final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                 final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);\n         for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor) {\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n         int blockIndex = 0;\n         for (int iBlock = 0; iBlock < blockRows; ++iBlock) {\n \n     /** {@inheritDoc} */\n     @Override\n-    public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor)\n-        throws MatrixVisitorException {\n+    public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor) {\n         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);\n         int blockIndex = 0;\n         for (int iBlock = 0; iBlock < blockRows; ++iBlock) {\n     @Override\n     public double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor,\n                                        final int startRow, final int endRow,\n-                                       final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                       final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);\n         for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {\n     @Override\n     public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor,\n                                        final int startRow, final int endRow,\n-                                       final int startColumn, final int endColumn)\n-        throws MatrixVisitorException {\n+                                       final int startColumn, final int endColumn) {\n         MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);\n         visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);\n         for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {\n--- a/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java\n     }\n \n     /** {@inheritDoc} */\n-    public T visit(int row, int column, T value)\n-        throws MatrixVisitorException {\n+    public T visit(int row, int column, T value) {\n         return value;\n     }\n \n--- a/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java\n     }\n \n     /** {@inheritDoc} */\n-    public void visit(int row, int column, T value)\n-        throws MatrixVisitorException {\n-    }\n+    public void visit(int row, int column, T value) {}\n \n     /** {@inheritDoc} */\n     public T end() {\n--- a/src/main/java/org/apache/commons/math/linear/DefaultRealMatrixChangingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/DefaultRealMatrixChangingVisitor.java\n     }\n \n     /** {@inheritDoc} */\n-    public double visit(int row, int column, double value)\n-        throws MatrixVisitorException {\n+    public double visit(int row, int column, double value) {\n         return value;\n     }\n \n--- a/src/main/java/org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor.java\n     }\n \n     /** {@inheritDoc} */\n-    public void visit(int row, int column, double value)\n-        throws MatrixVisitorException {\n-    }\n+    public void visit(int row, int column, double value) {}\n \n     /** {@inheritDoc} */\n     public double end() {\n--- a/src/main/java/org/apache/commons/math/linear/FieldMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrix.java\n      * of a row from left to right before going to the leftmost element\n      * of the next row.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)\n      * of a row from left to right before going to the leftmost element\n      * of the next row.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n      * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n      * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * of a column from top to bottom before going to the topmost element\n      * of the next column.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      * of a column from top to bottom before going to the topmost element\n      * of the next column.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n      * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n      * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * <p>The fastest walking order depends on the exact matrix class. It may be\n      * different from traditional row or column orders.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      * <p>The fastest walking order depends on the exact matrix class. It may be\n      * different from traditional row or column orders.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @see #walkInRowOrder(FieldMatrixPreservingVisitor)\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n      * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @exception  MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException\n      * if the indices are not valid.\n      * @see #walkInRowOrder(FieldMatrixChangingVisitor)\n--- a/src/main/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java\n      * @param column column index of the entry\n      * @param value current value of the entry\n      * @return the new value to be set for the entry\n-     * @throws MatrixVisitorException if something wrong occurs\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      */\n-    T visit(int row, int column, T value)\n-        throws MatrixVisitorException;\n+    T visit(int row, int column, T value);\n \n     /**\n      * End visiting a matrix.\n      * @return the value that the <code>walkInXxxOrder</code> must return\n      */\n     T end();\n-\n }\n--- a/src/main/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java\n      * @param row row index of the entry\n      * @param column column index of the entry\n      * @param value current value of the entry\n-     * @throws MatrixVisitorException if something wrong occurs\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      */\n-    void visit(int row, int column, T value)\n-        throws MatrixVisitorException;\n+    void visit(int row, int column, T value);\n \n     /**\n      * End visiting a matrix.\n      * @return the value that the <code>walkInXxxOrder</code> must return\n      */\n     T end();\n-\n }\n--- a/src/main/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrix.java\n      * of a row from left to right before going to the leftmost element\n      * of the next row.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)\n      * of a row from left to right before going to the leftmost element\n      * of the next row.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException if\n      * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException if\n      * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * of a column from top to bottom before going to the topmost element\n      * of the next column.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * of a column from top to bottom before going to the topmost element\n      * of the next column.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException if\n      * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index\n-     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException if\n      * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * <p>The fastest walking order depends on the exact matrix class. It may be\n      * different from traditional row or column orders.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * <p>The fastest walking order depends on the exact matrix class. It may be\n      * different from traditional row or column orders.</p>\n      * @param visitor visitor used to process all matrix entries\n-     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @see #walkInRowOrder(RealMatrixPreservingVisitor)\n      * @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException if\n      * the indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n      * @param endRow Final row index (inclusive)\n      * @param startColumn Initial column index\n      * @param endColumn Final column index (inclusive)\n-     * @throws MatrixVisitorException if the visitor cannot process an entry\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      * @throws org.apache.commons.math.exception.OutOfRangeException if the\n      * indices are not valid.\n      * @see #walkInRowOrder(RealMatrixChangingVisitor)\n--- a/src/main/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java\n      * @param column column index of the entry\n      * @param value current value of the entry\n      * @return the new value to be set for the entry\n-     * @throws MatrixVisitorException if something wrong occurs\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      */\n-    double visit(int row, int column, double value)\n-        throws MatrixVisitorException;\n+    double visit(int row, int column, double value);\n \n     /**\n      * End visiting a matrix.\n      * @return the value that the <code>walkInXxxOrder</code> must return\n      */\n     double end();\n-\n }\n--- a/src/main/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java\n+++ b/src/main/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java\n      * @param row row index of the entry\n      * @param column column index of the entry\n      * @param value current value of the entry\n-     * @throws MatrixVisitorException if something wrong occurs\n+     * @throws org.apache.commons.math.exception.MathUserException if the visitor\n+     * cannot process an entry.\n      */\n-    void visit(int row, int column, double value)\n-        throws MatrixVisitorException;\n+    void visit(int row, int column, double value);\n \n     /**\n      * End visiting a matrix.\n      * @return the value that the <code>walkInXxxOrder</code> must return\n      */\n     double end();\n-\n }\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java\n import java.util.Arrays;\n \n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n-import org.apache.commons.math.linear.MatrixVisitorException;\n import org.apache.commons.math.linear.RealMatrixPreservingVisitor;\n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n         }\n \n         /** {@inheritDoc} */\n-        public void visit(int row, int column, double value)\n-            throws MatrixVisitorException {\n+        public void visit(int row, int column, double value) {\n             if ((row & 0x1) == 0) {\n                 after[column] -= value;\n             } else {\n--- a/src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java\n         RealMatrix m = MatrixUtils.createRealMatrix(rows, columns);\n         m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){\n             @Override\n-            public double visit(int row, int column, double value)\n-                throws MatrixVisitorException {\n+            public double visit(int row, int column, double value) {\n                 return 2.0 * r.nextDouble() - 1.0;\n             }\n         });\n--- a/src/test/java/org/apache/commons/math/linear/QRSolverTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/QRSolverTest.java\n         RealMatrix m = MatrixUtils.createRealMatrix(rows, columns);\n         m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){\n             @Override\n-            public double visit(int row, int column, double value)\n-                throws MatrixVisitorException {\n+            public double visit(int row, int column, double value) {\n                 return 2.0 * r.nextDouble() - 1.0;\n             }\n         });\n--- a/src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.linear.DefaultRealMatrixChangingVisitor;\n import org.apache.commons.math.linear.MatrixUtils;\n-import org.apache.commons.math.linear.MatrixVisitorException;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.linear.RealVector;\n         RealMatrix referenceVariance = new Array2DRowRealMatrix(s.length, s.length);\n         referenceVariance.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {\n             @Override\n-            public double visit(int row, int column, double value)\n-                throws MatrixVisitorException {\n+            public double visit(int row, int column, double value) {\n                 if (row == 0) {\n                     return s[column];\n                 }", "timestamp": 1289584430, "metainfo": ""}