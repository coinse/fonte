{"sha": "27b0d6d3f1556d54a634ea8ac65f47e9fad10767", "log": "Java 1.5 does not support Arrays.copyOf()  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java\n  */\n \n package org.apache.commons.math.optimization.direct;\n-\n-import java.util.Arrays;\n \n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.util.FastMath;\n             double alphaMin = 0;\n \n             for (int i = 0; i < n; i++) {\n-                final double[] d = Arrays.copyOf(direc[i], n);\n+                final double[] d = /* Arrays.*/ copyOf(direc[i], n); // Java 1.5 does not support Arrays.copyOf()\n \n                 fX2 = fVal;\n \n                             bracket.getMid());\n         }\n     }\n+\n+    /**\n+     * Java 1.5 does not support Arrays.copyOf()\n+     * \n+     * @param source the array to be copied\n+     * @param newLen the length of the copy to be returned\n+     * @return the copied array, truncated or padded as necessary.\n+     */\n+     private double[] copyOf(double[] source, int newLen) {\n+         double[] output = new double[newLen];\n+         System.arraycopy(source, 0, output, 0, Math.min(source.length, newLen));\n+         return output;\n+     }\n+\n }\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n \n package org.apache.commons.math.util;\n \n-import java.util.Arrays;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n          * @return the indices within the multidimensional counter.\n          */\n         public int[] getCounts() {\n-            return Arrays.copyOf(counter, dimension);\n+            return /* Arrays.*/ copyOf(counter, dimension); // Java 1.5 does not support Arrays.copyOf()\n         }\n \n         /**\n      */\n     public MultidimensionalCounter(int ... size) {\n         dimension = size.length;\n-        this.size = Arrays.copyOf(size, dimension);\n+        this.size = /* Arrays.*/ copyOf(size, dimension); // Java 1.5 does not support Arrays.copyOf()\n \n         uniCounterOffset = new int[dimension];\n \n      * @return the sizes of the multidimensional counter in each dimension.\n      */\n     public int[] getSizes() {\n-        return Arrays.copyOf(size, dimension);\n+        return /* Arrays.*/ copyOf(size, dimension); // Java 1.5 does not support Arrays.copyOf()\n     }\n \n     /**\n         }\n         return sb.toString();\n     }\n+\n+    /**\n+     * Java 1.5 does not support Arrays.copyOf()\n+     * \n+     * @param source the array to be copied\n+     * @param newLen the length of the copy to be returned\n+     * @return the copied array, truncated or padded as necessary.\n+     */\n+     private int[] copyOf(int[] source, int newLen) {\n+         int[] output = new int[newLen];\n+         System.arraycopy(source, 0, output, 0, Math.min(source.length, newLen));\n+         return output;\n+     }\n+\n }", "timestamp": 1285938565, "metainfo": ""}