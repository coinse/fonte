{"sha": "386325d919b8e8d4f83e85f1d4838b1594ba1989", "log": "In class Beta, removed auxiliary function bcorr, as it is not ready to be included in version 3.1 of Commons-Math.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/special/Beta.java\n+++ b/src/main/java/org/apache/commons/math3/special/Beta.java\n  */\n package org.apache.commons.math3.special;\n \n-import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.util.ContinuedFraction;\n import org.apache.commons.math3.util.FastMath;\n \n /**\n- * <p>\n  * This is a utility class that provides computation methods related to the\n  * Beta family of functions.\n- * </p>\n- * <p>\n- * Implementation of {@link #bcorr(double, double)} is based on the algorithms\n- * described in\n- * </p>\n- * <ul>\n- * <li><a href=\"http://dx.doi.org/10.1145/22721.23109\">Didonato and Morris\n- * (1986)</a>, <em>Computation of the Incomplete Gamma Function Ratios and\n- *     their Inverse</em>, TOMS 12(4), 377-393,</li>\n- * <li><a href=\"http://dx.doi.org/10.1145/131766.131776\">Didonato and Morris\n- * (1992)</a>, <em>Algorithm 708: Significant Digit Computation of the\n- *     Incomplete Beta Function Ratios</em>, TOMS 18(3), 360-373,</li>\n- * </ul>\n- * <p>\n- * and implemented in the\n- * <a href=\"http://www.dtic.mil/docs/citations/ADA476840\">NSWC Library of Mathematical Functions</a>,\n- * available\n- * <a href=\"http://www.ualberta.ca/CNS/RESEARCH/Software/NumericalNSWC/site.html\">here</a>.\n- * This library is \"approved for public release\", and the\n- * <a href=\"http://www.dtic.mil/dtic/pdf/announcements/CopyrightGuidance.pdf\">Copyright guidance</a>\n- * indicates that unless otherwise stated in the code, all FORTRAN functions in\n- * this library are license free. Since no such notice appears in the code these\n- * functions can safely be ported to Commons-Math.\n- * </p>\n  *\n  * @version $Id$\n  */\n public class Beta {\n     /** Maximum allowed numerical error. */\n     private static final double DEFAULT_EPSILON = 1E-14;\n-\n-    /**\n-     * <p>\n-     * The coefficients of the series expansion of the \u0394 function. This\n-     * function is defined as follows\n-     * </p>\n-     * <center>\u0394(x) = log \u0393(x) - (x - 0.5) log a + a - 0.5 log 2\u03c0,</center>\n-     * <p>\n-     * see equation (23) in Didonato and Morris (1992). The series expansion\n-     * reads\n-     * </p>\n-     * <pre>\n-     *                n\n-     *               ====\n-     *            1  \\             i\n-     *    \u0394(x) = ---  >    DELTA  t\n-     *            x  /          i\n-     *               ====\n-     *               i = 0\n-     * </pre>\n-     * <p>\n-     * where {@code t = (10 / x)^2}. This series applies for {@code x >= 10.0}.\n-     * </p>\n-     */\n-    private static final double[] DELTA = {\n-        .833333333333333333333333333333E-01,\n-        -.277777777777777777777777752282E-04,\n-        .793650793650793650791732130419E-07,\n-        -.595238095238095232389839236182E-09,\n-        .841750841750832853294451671990E-11,\n-        -.191752691751854612334149171243E-12,\n-        .641025640510325475730918472625E-14,\n-        -.295506514125338232839867823991E-15,\n-        .179643716359402238723287696452E-16,\n-        -.139228964661627791231203060395E-17,\n-        .133802855014020915603275339093E-18,\n-        -.154246009867966094273710216533E-19,\n-        .197701992980957427278370133333E-20,\n-        -.234065664793997056856992426667E-21,\n-        .171348014966398575409015466667E-22\n-    };\n \n     /**\n      * Default constructor.  Prohibit instantiation.\n \n         return ret;\n     }\n-\n-    /**\n-     * Returns the value of \u0394(p) + \u0394(q) - \u0394(p + q), with p, q \u2265 10. Based on\n-     * the <em>NSWC Library of Mathematics Subroutines</em> implementation,\n-     * {@code BCORR}.\n-     *\n-     * @param p First argument.\n-     * @param q Second argument.\n-     * @return the value of {@code Delta(p) + Delta(q) - Delta(p + q)}.\n-     * @throws NumberIsTooSmallException if {@code p < 10.0} or {@code q < 10.0}.\n-     */\n-    static final double bcorr(final double p, final double q) {\n-\n-        if (p < 10.0) {\n-            throw new NumberIsTooSmallException(p, 10.0, true);\n-        }\n-        if (q < 10.0) {\n-            throw new NumberIsTooSmallException(q, 10.0, true);\n-        }\n-\n-        final double a = FastMath.min(p, q);\n-        final double b = FastMath.max(p, q);\n-        final double h = a / b;\n-        final double c = h / (1.0 + h);\n-        final double x = 1.0 / (1.0 + h);\n-        final double x2 = x * x;\n-        /*\n-         * Compute s[i] = (1 - x**(2 * i + 1)) / (1 - x)\n-         */\n-        final double[] s = new double[DELTA.length];\n-        s[0] = 1.0;\n-        for (int i = 1; i < s.length; i++) {\n-            s[i] = 1.0 + (x + x2 * s[i - 1]);\n-        }\n-        /*\n-         * Set w = Delta(b) - Delta(a + b)\n-         */\n-        double tmp = 10.0 / b;\n-        final double tb = tmp * tmp;\n-        double w = DELTA[DELTA.length - 1] * s[s.length - 1];\n-        for (int i = DELTA.length - 2; i >= 0; i--) {\n-            w = tb * w + DELTA[i] * s[i];\n-        }\n-        w *= c / b;\n-        /*\n-         * Compute Delta(a) + w\n-         */\n-        tmp = 10.0 / a;\n-        final double ta = tmp * tmp;\n-        double z = DELTA[DELTA.length - 1];\n-        for (int i = DELTA.length - 2; i >= 0; i--) {\n-            z = ta * z + DELTA[i];\n-        }\n-        return z / a + w;\n-    }\n }\n--- a/src/test/java/org/apache/commons/math3/special/BetaTest.java\n+++ b/src/test/java/org/apache/commons/math3/special/BetaTest.java\n package org.apache.commons.math3.special;\n \n import org.apache.commons.math3.TestUtils;\n-import org.apache.commons.math3.exception.NumberIsTooSmallException;\n-import org.apache.commons.math3.util.FastMath;\n-\n-import org.junit.Assert;\n import org.junit.Test;\n \n /**\n     public void testLogBetaPositivePositive() {\n         testLogBeta(-0.693147180559945, 1.0, 2.0);\n     }\n-\n-    private static final double[][] BCORR_REF = {\n-        { 10.0 , 10.0 , .01249480717472882 },\n-        { 10.0 , 11.0 , .01193628470267385 },\n-        { 10.0 , 12.0 , .01148578547212797 },\n-        { 10.0 , 13.0 , .01111659739668398 },\n-        { 10.0 , 14.0 , .01080991216314295 },\n-        { 10.0 , 15.0 , .01055214134859758 },\n-        { 10.0 , 16.0 , .01033324912491747 },\n-        { 10.0 , 17.0 , .01014568069918883 },\n-        { 10.0 , 18.0 , .009983653199146491 },\n-        { 10.0 , 19.0 , .009842674320242729 },\n-        { 10.0 , 20.0 , 0.0097192081956071 },\n-        { 11.0 , 10.0 , .01193628470267385 },\n-        { 11.0 , 11.0 , .01135973290745925 },\n-        { 11.0 , 12.0 , .01089355537047828 },\n-        { 11.0 , 13.0 , .01051064829297728 },\n-        { 11.0 , 14.0 , 0.0101918899639826 },\n-        { 11.0 , 15.0 , .009923438811859604 },\n-        { 11.0 , 16.0 , .009695052724952705 },\n-        { 11.0 , 17.0 , 0.00949900745283617 },\n-        { 11.0 , 18.0 , .009329379874933402 },\n-        { 11.0 , 19.0 , 0.00918156080743147 },\n-        { 11.0 , 20.0 , 0.00905191635141762 },\n-        { 12.0 , 10.0 , .01148578547212797 },\n-        { 12.0 , 11.0 , .01089355537047828 },\n-        { 12.0 , 12.0 , .01041365883144029 },\n-        { 12.0 , 13.0 , .01001867865848564 },\n-        { 12.0 , 14.0 , 0.00968923999191334 },\n-        { 12.0 , 15.0 , .009411294976563555 },\n-        { 12.0 , 16.0 , .009174432043268762 },\n-        { 12.0 , 17.0 , .008970786693291802 },\n-        { 12.0 , 18.0 , .008794318926790865 },\n-        { 12.0 , 19.0 , .008640321527910711 },\n-        { 12.0 , 20.0 , .008505077879954796 },\n-        { 13.0 , 10.0 , .01111659739668398 },\n-        { 13.0 , 11.0 , .01051064829297728 },\n-        { 13.0 , 12.0 , .01001867865848564 },\n-        { 13.0 , 13.0 , .009613018147953376 },\n-        { 13.0 , 14.0 , .009274085618154277 },\n-        { 13.0 , 15.0 , 0.0089876637564166 },\n-        { 13.0 , 16.0 , .008743200745261382 },\n-        { 13.0 , 17.0 , .008532715206686251 },\n-        { 13.0 , 18.0 , .008350069108807093 },\n-        { 13.0 , 19.0 , .008190472517984874 },\n-        { 13.0 , 20.0 , .008050138630244345 },\n-        { 14.0 , 10.0 , .01080991216314295 },\n-        { 14.0 , 11.0 , 0.0101918899639826 },\n-        { 14.0 , 12.0 , 0.00968923999191334 },\n-        { 14.0 , 13.0 , .009274085618154277 },\n-        { 14.0 , 14.0 , .008926676241967286 },\n-        { 14.0 , 15.0 , .008632654302369184 },\n-        { 14.0 , 16.0 , .008381351102615795 },\n-        { 14.0 , 17.0 , .008164687232662443 },\n-        { 14.0 , 18.0 , .007976441942841219 },\n-        { 14.0 , 19.0 , .007811755112234388 },\n-        { 14.0 , 20.0 , .007666780069317652 },\n-        { 15.0 , 10.0 , .01055214134859758 },\n-        { 15.0 , 11.0 , .009923438811859604 },\n-        { 15.0 , 12.0 , .009411294976563555 },\n-        { 15.0 , 13.0 , 0.0089876637564166 },\n-        { 15.0 , 14.0 , .008632654302369184 },\n-        { 15.0 , 15.0 , 0.00833179217417291 },\n-        { 15.0 , 16.0 , .008074310643041299 },\n-        { 15.0 , 17.0 , .007852047581145882 },\n-        { 15.0 , 18.0 , .007658712051540045 },\n-        { 15.0 , 19.0 , .007489384065757007 },\n-        { 15.0 , 20.0 , .007340165635725612 },\n-        { 16.0 , 10.0 , .01033324912491747 },\n-        { 16.0 , 11.0 , .009695052724952705 },\n-        { 16.0 , 12.0 , .009174432043268762 },\n-        { 16.0 , 13.0 , .008743200745261382 },\n-        { 16.0 , 14.0 , .008381351102615795 },\n-        { 16.0 , 15.0 , .008074310643041299 },\n-        { 16.0 , 16.0 , .007811229919967624 },\n-        { 16.0 , 17.0 , .007583876618287594 },\n-        { 16.0 , 18.0 , .007385899933505551 },\n-        { 16.0 , 19.0 , .007212328560607852 },\n-        { 16.0 , 20.0 , .007059220321091879 },\n-        { 17.0 , 10.0 , .01014568069918883 },\n-        { 17.0 , 11.0 , 0.00949900745283617 },\n-        { 17.0 , 12.0 , .008970786693291802 },\n-        { 17.0 , 13.0 , .008532715206686251 },\n-        { 17.0 , 14.0 , .008164687232662443 },\n-        { 17.0 , 15.0 , .007852047581145882 },\n-        { 17.0 , 16.0 , .007583876618287594 },\n-        { 17.0 , 17.0 , .007351882161431358 },\n-        { 17.0 , 18.0 , .007149662089534654 },\n-        { 17.0 , 19.0 , .006972200907152378 },\n-        { 17.0 , 20.0 , .006815518216094137 },\n-        { 18.0 , 10.0 , .009983653199146491 },\n-        { 18.0 , 11.0 , .009329379874933402 },\n-        { 18.0 , 12.0 , .008794318926790865 },\n-        { 18.0 , 13.0 , .008350069108807093 },\n-        { 18.0 , 14.0 , .007976441942841219 },\n-        { 18.0 , 15.0 , .007658712051540045 },\n-        { 18.0 , 16.0 , .007385899933505551 },\n-        { 18.0 , 17.0 , .007149662089534654 },\n-        { 18.0 , 18.0 , .006943552208153373 },\n-        { 18.0 , 19.0 , .006762516574228829 },\n-        { 18.0 , 20.0 , .006602541598043117 },\n-        { 19.0 , 10.0 , .009842674320242729 },\n-        { 19.0 , 11.0 , 0.00918156080743147 },\n-        { 19.0 , 12.0 , .008640321527910711 },\n-        { 19.0 , 13.0 , .008190472517984874 },\n-        { 19.0 , 14.0 , .007811755112234388 },\n-        { 19.0 , 15.0 , .007489384065757007 },\n-        { 19.0 , 16.0 , .007212328560607852 },\n-        { 19.0 , 17.0 , .006972200907152378 },\n-        { 19.0 , 18.0 , .006762516574228829 },\n-        { 19.0 , 19.0 , .006578188655176814 },\n-        { 19.0 , 20.0 , .006415174623476747 },\n-        { 20.0 , 10.0 , 0.0097192081956071 },\n-        { 20.0 , 11.0 , 0.00905191635141762 },\n-        { 20.0 , 12.0 , .008505077879954796 },\n-        { 20.0 , 13.0 , .008050138630244345 },\n-        { 20.0 , 14.0 , .007666780069317652 },\n-        { 20.0 , 15.0 , .007340165635725612 },\n-        { 20.0 , 16.0 , .007059220321091879 },\n-        { 20.0 , 17.0 , .006815518216094137 },\n-        { 20.0 , 18.0 , .006602541598043117 },\n-        { 20.0 , 19.0 , .006415174623476747 },\n-        { 20.0 , 20.0 , .006249349445691423 },\n-    };\n-\n-    @Test\n-    public void testBcorr() {\n-\n-        final int ulps = 3;\n-        for (int i = 0; i < BCORR_REF.length; i++) {\n-            final double[] ref = BCORR_REF[i];\n-            final double a = ref[0];\n-            final double b = ref[1];\n-            final double expected = ref[2];\n-            final double actual = Beta.bcorr(a, b);\n-            final double tol = ulps * FastMath.ulp(expected);\n-            final StringBuilder builder = new StringBuilder();\n-            builder.append(a).append(\", \").append(b);\n-            Assert.assertEquals(builder.toString(), expected, actual, tol);\n-        }\n-    }\n-\n-    @Test(expected = NumberIsTooSmallException.class)\n-    public void testBcorrPrecondition1() {\n-\n-        Beta.bcorr(9.0, 10.0);\n-    }\n-\n-    @Test(expected = NumberIsTooSmallException.class)\n-    public void testBcorrPrecondition2() {\n-\n-        Beta.bcorr(10.0, 9.0);\n-    }\n }", "timestamp": 1354080252, "metainfo": ""}