{"sha": "7a6bd26474f86cb0ee25426d439878f09a40a5bb", "log": "added back some features from old exception scheme (accessors for patterns and arguments) to the new scheme this should ease transition for existing user code  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/MathException.java\n+++ b/src/main/java/org/apache/commons/math/MathException.java\n import java.text.MessageFormat;\n import java.util.Locale;\n \n+import org.apache.commons.math.exception.MathThrowable;\n import org.apache.commons.math.exception.util.DummyLocalizable;\n import org.apache.commons.math.exception.util.Localizable;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n *\n * @version $Revision$ $Date$\n */\n-public class MathException extends Exception {\n+public class MathException extends Exception implements MathThrowable {\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 7428019509644517071L;\n      *\n      * @return the pattern used to build the message of this throwable\n      * @since 1.2\n-     * @deprecated as of 2.2 replaced by {@link #getLocalizablePattern()}\n+     * @deprecated as of 2.2 replaced by {@link #getSpecificPattern()} and {@link #getGeneralPattern()}\n      */\n     @Deprecated\n     public String getPattern() {\n         return pattern.getSourceString();\n     }\n \n-    /** Gets the localizable pattern used to build the message of this throwable.\n-     *\n-     * @return the localizable pattern used to build the message of this throwable\n-     * @since 2.2\n-     */\n-    public Localizable getLocalizablePattern() {\n+    /** {@inheritDoc} */\n+    public Localizable getSpecificPattern() {\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Localizable getGeneralPattern() {\n         return pattern;\n     }\n \n-    /** Gets the arguments used to build the message of this throwable.\n-     *\n-     * @return the arguments used to build the message of this throwable\n-     * @since 1.2\n-     */\n+    /** {@inheritDoc} */\n     public Object[] getArguments() {\n         return arguments.clone();\n     }\n--- a/src/main/java/org/apache/commons/math/MathRuntimeException.java\n+++ b/src/main/java/org/apache/commons/math/MathRuntimeException.java\n import java.util.Locale;\n import java.util.NoSuchElementException;\n \n+import org.apache.commons.math.exception.MathThrowable;\n import org.apache.commons.math.exception.util.DummyLocalizable;\n import org.apache.commons.math.exception.util.Localizable;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n * @version $Revision$ $Date$\n * @since 2.0\n */\n-public class MathRuntimeException extends RuntimeException {\n+public class MathRuntimeException extends RuntimeException implements MathThrowable {\n \n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 9058794795027570002L;\n     /** Gets the pattern used to build the message of this throwable.\n     *\n     * @return the pattern used to build the message of this throwable\n-    * @deprecated as of 2.2 replaced by {@link #getLocalizablePattern()}\n+    * @deprecated as of 2.2 replaced by {@link #getSpecificPattern()} and {@link #getGeneralPattern()}\n     */\n     @Deprecated\n     public String getPattern() {\n         return pattern.getSourceString();\n     }\n \n-    /** Gets the localizable pattern used to build the message of this throwable.\n-     *\n-     * @return the localizable pattern used to build the message of this throwable\n-     * @since 2.2\n-     */\n-    public Localizable getLocalizablePattern() {\n+    /** {@inheritDoc} */\n+    public Localizable getSpecificPattern() {\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Localizable getGeneralPattern() {\n         return pattern;\n     }\n \n-    /** Gets the arguments used to build the message of this throwable.\n-     *\n-     * @return the arguments used to build the message of this throwable\n-     */\n+    /** {@inheritDoc} */\n     public Object[] getArguments() {\n         return arguments.clone();\n     }\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n import java.io.Serializable;\n \n import org.apache.commons.math.ConvergenceException;\n-import org.apache.commons.math.exception.FunctionEvaluationException;\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.solvers.BrentSolver;\n import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;\n+import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math.exception.OutOfRangeException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n-import org.apache.commons.math.exception.OutOfRangeException;\n-import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.random.RandomDataImpl;\n import org.apache.commons.math.util.FastMath;\n \n         // subclasses can override if there is a better method.\n         UnivariateRealFunction rootFindingFunction =\n             new UnivariateRealFunction() {\n-            public double value(double x) throws FunctionEvaluationException {\n+            public double value(double x) throws MathUserException {\n                 double ret = Double.NaN;\n                 try {\n                     ret = cumulativeProbability(x) - p;\n                 } catch (MathException ex) {\n-                    throw new FunctionEvaluationException(ex, x, ex.getLocalizablePattern(),\n-                                                          ex.getArguments());\n+                    throw new MathUserException(ex,\n+                                                ex.getSpecificPattern(), ex.getGeneralPattern(),\n+                                                ex.getArguments());\n                 }\n                 if (Double.isNaN(ret)) {\n-                    throw new FunctionEvaluationException(x,\n-                        LocalizedFormats.CUMULATIVE_PROBABILITY_RETURNED_NAN, x, p);\n+                    throw new MathUserException(LocalizedFormats.CUMULATIVE_PROBABILITY_RETURNED_NAN, x, p);\n                 }\n                 return ret;\n             }\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.exception.FunctionEvaluationException;\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n     /**\n      * Computes the cumulative probability function and checks for NaN\n      * values returned.\n-     * Throws MathException if the value is NaN. Wraps and rethrows any\n-     * MathException encountered evaluating the cumulative probability\n-     * function in a FunctionEvaluationException.\n-     * Throws FunctionEvaluationException of the cumulative probability\n-     * function returns NaN.\n+     * Throws MathException if the value is NaN. Rethrows any MathException encountered\n+     * evaluating the cumulative probability function. Throws\n+     * MathException of the cumulative probability function returns NaN.\n      *\n      * @param argument Input value.\n      * @return the cumulative probability.\n-     * @throws FunctionEvaluationException if a MathException occurs\n-     * computing the cumulative probability.\n      */\n     private double checkedCumulativeProbability(int argument)\n-        throws FunctionEvaluationException {\n+        throws MathException {\n         double result = Double.NaN;\n-        try {\n             result = cumulativeProbability(argument);\n-        } catch (MathException ex) {\n-            throw new FunctionEvaluationException(ex, argument, ex.getLocalizablePattern(), ex.getArguments());\n-        }\n         if (Double.isNaN(result)) {\n-            throw new FunctionEvaluationException(argument,\n-                LocalizedFormats.DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, argument);\n+            throw new MathException(LocalizedFormats.DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, argument);\n         }\n         return result;\n     }\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java\n  * @since 2.2\n  * @version $Revision$ $Date$\n  */\n-public class MathIllegalArgumentException extends IllegalArgumentException {\n+public class MathIllegalArgumentException extends IllegalArgumentException implements MathThrowable {\n \n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n         this(null, general, args);\n     }\n \n+    /** {@inheritDoc} */\n+    public Localizable getSpecificPattern() {\n+        return specific;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Localizable getGeneralPattern() {\n+        return general;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Object[] getArguments() {\n+        return arguments.clone();\n+    }\n+\n     /**\n      * Get the message in a specified locale.\n      *\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\n  * @since 2.2\n  * @version $Revision$ $Date$\n  */\n-public class MathIllegalStateException extends IllegalStateException {\n+public class MathIllegalStateException extends IllegalStateException implements MathThrowable {\n \n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n         this(null, general, args);\n     }\n \n+    /** {@inheritDoc} */\n+    public Localizable getSpecificPattern() {\n+        return specific;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Localizable getGeneralPattern() {\n+        return general;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Object[] getArguments() {\n+        return arguments.clone();\n+    }\n+\n     /**\n      * Get the message in a specified locale.\n      *\n     public String getLocalizedMessage() {\n         return getMessage(Locale.getDefault());\n     }\n+\n }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/MathThrowable.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import java.util.Locale;\n+\n+import org.apache.commons.math.exception.util.Localizable;\n+\n+/**\n+* Interface for commons-math throwables.\n+*\n+* @version $Revision$ $Date$\n+* @since 2.2\n+*/\n+public interface MathThrowable {\n+\n+    /** Gets the localizable pattern used to build the specific part of the message of this throwable.\n+     * @return localizable pattern used to build the specific part of the message of this throwable\n+     */\n+    Localizable getSpecificPattern();\n+\n+    /** Gets the localizable pattern used to build the general part of the message of this throwable.\n+     * @return localizable pattern used to build the general part of the message of this throwable\n+     */\n+    Localizable getGeneralPattern();\n+\n+    /** Gets the arguments used to build the message of this throwable.\n+     * @return the arguments used to build the message of this throwable\n+     */\n+    Object[] getArguments();\n+\n+    /** Gets the message in a specified locale.\n+     * @param locale Locale in which the message should be translated\n+     * @return localized message\n+     */\n+    String getMessage(final Locale locale);\n+\n+    /** Gets the message in a conventional US locale.\n+     * @return localized message\n+     */\n+    String getMessage();\n+\n+    /** Gets the message in the system default locale.\n+     * @return localized message\n+     */\n+    String getLocalizedMessage();\n+\n+}\n--- a/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n  * @since 2.2\n  * @version $Revision$ $Date$\n  */\n-public class MathUnsupportedOperationException extends UnsupportedOperationException {\n+public class MathUnsupportedOperationException extends UnsupportedOperationException implements MathThrowable {\n \n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n         arguments = ArgUtils.flatten(args);\n     }\n \n+    /** {@inheritDoc} */\n+    public Localizable getSpecificPattern() {\n+        return specific;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Localizable getGeneralPattern() {\n+        return LocalizedFormats.UNSUPPORTED_OPERATION;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Object[] getArguments() {\n+        return arguments.clone();\n+    }\n+\n     /**\n      * Get the message in a specified locale.\n      *\n--- a/src/main/java/org/apache/commons/math/exception/MathUserException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUserException.java\n  * @since 2.2\n  * @version $Revision$ $Date$\n  */\n-public class MathUserException extends RuntimeException {\n+public class MathUserException extends RuntimeException implements MathThrowable {\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -6024911025449780478L;\n     /**\n         this.arguments = ArgUtils.flatten(arguments);\n     }\n \n+    /** {@inheritDoc} */\n+    public Localizable getSpecificPattern() {\n+        return specific;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Localizable getGeneralPattern() {\n+        return general;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public Object[] getArguments() {\n+        return arguments.clone();\n+    }\n+\n     /**\n      * Get the message in a specified locale.\n      *\n--- a/src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java\n         Object[] arguments = { Integer.valueOf(6), Integer.valueOf(4) };\n         ConvergenceException ex = new ConvergenceException(pattern, arguments);\n         assertNull(ex.getCause());\n-        assertEquals(pattern, ex.getLocalizablePattern());\n+        assertEquals(pattern, ex.getGeneralPattern());\n         assertEquals(arguments.length, ex.getArguments().length);\n         for (int i = 0; i < arguments.length; ++i) {\n             assertEquals(arguments[i], ex.getArguments()[i]);\n         Exception cause = new Exception(inMsg);\n         ConvergenceException ex = new ConvergenceException(cause, pattern, arguments);\n         assertEquals(cause, ex.getCause());\n-        assertEquals(pattern, ex.getLocalizablePattern());\n+        assertEquals(pattern, ex.getGeneralPattern());\n         assertEquals(arguments.length, ex.getArguments().length);\n         for (int i = 0; i < arguments.length; ++i) {\n             assertEquals(arguments[i], ex.getArguments()[i]);\n--- a/src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java\n         Object[] arguments = { Integer.valueOf(6), Integer.valueOf(4) };\n         MathConfigurationException ex = new MathConfigurationException(pattern, arguments);\n         assertNull(ex.getCause());\n-        assertEquals(pattern, ex.getLocalizablePattern());\n+        assertEquals(pattern, ex.getGeneralPattern());\n         assertEquals(arguments.length, ex.getArguments().length);\n         for (int i = 0; i < arguments.length; ++i) {\n             assertEquals(arguments[i], ex.getArguments()[i]);\n         Exception cause = new Exception(inMsg);\n         MathConfigurationException ex = new MathConfigurationException(cause, pattern, arguments);\n         assertEquals(cause, ex.getCause());\n-        assertEquals(pattern, ex.getLocalizablePattern());\n+        assertEquals(pattern, ex.getGeneralPattern());\n         assertEquals(arguments.length, ex.getArguments().length);\n         for (int i = 0; i < arguments.length; ++i) {\n             assertEquals(arguments[i], ex.getArguments()[i]);\n--- a/src/test/java/org/apache/commons/math/MathExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/MathExceptionTest.java\n         Object[] arguments = { Integer.valueOf(6), Integer.valueOf(4) };\n         MathException ex = new MathException(pattern, arguments);\n         assertNull(ex.getCause());\n-        assertEquals(pattern, ex.getLocalizablePattern());\n+        assertEquals(pattern, ex.getGeneralPattern());\n         assertEquals(arguments.length, ex.getArguments().length);\n         for (int i = 0; i < arguments.length; ++i) {\n             assertEquals(arguments[i], ex.getArguments()[i]);\n         Exception cause = new Exception(inMsg);\n         MathException ex = new MathException(cause, pattern, arguments);\n         assertEquals(cause, ex.getCause());\n-        assertEquals(pattern, ex.getLocalizablePattern());\n+        assertEquals(pattern, ex.getGeneralPattern());\n         assertEquals(arguments.length, ex.getArguments().length);\n         for (int i = 0; i < arguments.length; ++i) {\n             assertEquals(arguments[i], ex.getArguments()[i]);", "timestamp": 1289860796, "metainfo": ""}