{"sha": "2ba37fcc850b99508f027bed167962430fdf8d2f", "log": "Starting source code - basic matrix operations and univarient stats plus test code. Submitted by Phil Steitz.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/Freq.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import java.util.Hashtable;\n+import java.util.Enumeration;\n+\n+/** \n+ * Maintains a frequency distribution. <br>\n+ * Accepts int, long or string values, converting\n+ * all to Strings and maintaining frequency counts.\n+ *\n+ * @author Phil Steitz\n+ */\n+\n+public class Freq {\n+\n+    private String name;\n+\n+    private Hashtable freqTable;\n+\n+    /** instance initializer */\n+    {\n+        freqTable = new Hashtable();\n+    }\n+\n+    public Freq() {\n+    }\n+\n+    public Freq(String name) {\n+        this.name = name;\n+    }\n+\n+    public String toString() {\n+        StringBuffer outBuffer = new StringBuffer();\n+        outBuffer.append(\"Value \\t Frequency \\n\");\n+        Enumeration e = freqTable.keys();\n+        Long count = null;\n+        String value = null;\n+        while (e.hasMoreElements()) {\n+            value = (String)e.nextElement();\n+            count = (Long)freqTable.get(value);\n+            outBuffer.append(value);\n+            outBuffer.append(\"\\t\");\n+            outBuffer.append(count.toString());\n+            outBuffer.append(\"\\n\");\n+        }\n+        return outBuffer.toString();\n+    }\n+\n+    public String toXML() {\n+        return null;\n+    }\n+\n+    /** Adds 1 to the frequency count for v */\n+    public void addValue(java.lang.String v) {\n+        insertValue(v);\n+    }\n+\n+    /** Adds 1 to the frequency count for v */\n+    public void addValue(int v) {\n+        insertValue((new Integer(v)).toString());\n+    }\n+\n+    /** Adds 1 to the frequency count for v */\n+    public void addValue(long v) {\n+        insertValue((new Long(v)).toString());\n+    }\n+    \n+    /** Returns the number of values = v */\n+    public long getCount(String v) {\n+        Long ct = (Long)freqTable.get(v);\n+        if (ct == null) {\n+            return 0;\n+        } else {\n+            return ct.longValue();\n+        }\n+    }\n+    \n+    /** Returns the sum of all frequencies */\n+    public long getSumFreq() {\n+        Enumeration e = freqTable.keys();\n+        long count = 0;\n+        String value = null;\n+        while (e.hasMoreElements()) {\n+            value = (String)e.nextElement();\n+            count += ((Long)freqTable.get(value)).longValue();\n+        }\n+        return count;\n+    }\n+    \n+    /** Returns the percentage of values = v */\n+    public double getPct(String v) {\n+        return (new Double(getCount(v))).doubleValue()\n+                   /(new Double(getSumFreq())).doubleValue();\n+    }\n+    \n+    /** Clears the frequency table */\n+    public void clear() {\n+        freqTable.clear();\n+    }\n+        \n+    /** Adds 1 to the frequency count for v */\n+    private void insertValue(String v) {\n+        Long ct = (Long)freqTable.get(v);\n+        if (ct == null) {\n+            Long val = new Long(1);\n+            freqTable.put(v,val);\n+        } else {\n+            freqTable.put(v,(new Long(ct.longValue()+1)));\n+        }\n+    }\n+\n+    /** Getter for property name.\n+     * @return Value of property name.\n+     */\n+    public java.lang.String getName() {\n+        return name;\n+    }    \n+\n+    /** Setter for property name.\n+     * @param name New value of property name.\n+     */\n+    public void setName(java.lang.String name) {\n+        this.name = name;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/RealMatrix.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math;\n+\n+/**\n+ * Interface defining a real-valued matrix with basic algebraic operations\n+ * @author  Phil Steitz\n+ * @version $Revision: 1.1 $ $Date: 2003/05/12 19:03:41 $\n+ */\n+public interface RealMatrix {\n+\n+    public RealMatrix copy();\n+    \n+    /**\n+     * Compute the sum of *this and m\n+     * @param m    matrix to be added\n+     * @return     this + m\n+     * @exception  IllegalArgumentException if m is not the same size as *this\n+     */\n+    public RealMatrix add(RealMatrix m);   \n+    \n+    /**\n+     * Compute *this minus m\n+     * @param m    matrix to be subtracted\n+     * @return     this + m\n+     * @exception  IllegalArgumentException if m is not the same size as *this\n+     */\n+    public RealMatrix subtract(RealMatrix m);   \n+    \n+    /**\n+     * Returns the rank of the matrix\n+     * @return     the rank of this matrix\n+     */\n+    public int getRank();\n+    \n+     /**\n+     * Returns the result of adding d to each entry of *this\n+     * @param d    value to be added to each entry\n+     * @return     d + this\n+     */\n+    public RealMatrix scalarAdd(double d);\n+    \n+    /**\n+     * Returns the result multiplying each entry of *this by d\n+     * @param d    value to multiply all entries by\n+     * @return     d*this\n+     */\n+    public RealMatrix scalarMultiply(double d);\n+    \n+    /**\n+     * Returns the result postmultiplyin *this by m\n+     * @param m    matrix to postmultiply by\n+     * @return     this*m\n+     * @throws     IllegalArgumentException \n+     *             if columnDimension(this) != rowDimension(m)\n+     */\n+    public RealMatrix multiply(RealMatrix m);\n+    \n+    /**\n+     * Returns matrix entries as a two-dimensional array\n+     * @return    2-dimensional array of entries\n+     */\n+    public double[][] getData();\n+    \n+    /**\n+     * Sets/overwrites the underlying data for the matrix\n+     * @param    2-dimensional array of entries\n+     */\n+    public void setData(double[][] data);\n+    \n+    /**\n+     * Returns the norm of the matrix\n+     * @return norm\n+     */\n+    public double getNorm();\n+    \n+    /**\n+     * Returns entries in row as an array\n+     * @param row  the row to be fetched\n+     * @return     array of entries in the row\n+     * @throws     IllegalArgumentException if row > rowDimension\n+     */\n+    public double[] getRow(int row);\n+    \n+    /**\n+     * Returns entries in column as an array\n+     * @param col  column to fetch\n+     * @return     array of entries in the column\n+     * @throws     IllegalArgumentException if column > columnDimension\n+     */\n+    public double[] getColumn(int col);\n+    \n+    /**\n+     * Returns the entry in the specified row and column\n+     * @param row  row location of entry to be fetched  \n+     * @param col  column location of entry to be fetched \n+     * @return     matrix entry in row,column\n+     * @throws     IllegalArgumentException if entry does not exist\n+     */\n+    public double getEntry(int row, int column);\n+    \n+    /**\n+     * Sets the entry in the specified row and column to the specified value\n+     * @param row    row location of entry to be set \n+     * @param col    column location of entry to be set\n+     * @param value  value to set \n+     * @throws IllegalArgumentException if entry does not exist\n+     */\n+    public void setEntry(int row, int column, double value);\n+    \n+    /**\n+     * Returns the transpose of this matrix\n+     * @return transpose matrix\n+     */\n+    public RealMatrix transpose();\n+    \n+    /**\n+     * Returns the inverse of this matrix\n+     * @return inverse matrix\n+     * @throws IllegalArgumentException if *this is not invertible\n+     */\n+    public RealMatrix inverse();\n+    \n+    /**\n+     * Returns the determinant of this matrix\n+     * @returns determinant\n+     */\n+    public double getDeterminant();\n+    \n+    /**\n+     * Is this a square matrix?\n+     * @return true if the matrix is square (rowDimension = columnDimension)\n+     */\n+    public boolean isSquare();\n+    \n+    /**\n+     * Is this a singular matrix?\n+     * @return true if the matrix is singular\n+     */\n+    public boolean isSingular();\n+    \n+    /**\n+     * Returns the number of rows in the matrix\n+     * @return rowDimension\n+     */\n+    public int getRowDimension();\n+    \n+    /**\n+     * Returns the number of columns in the matrix\n+     * @return columnDimension\n+     */\n+    public int getColumnDimension();\n+    \n+    /**\n+     * Returns the trace of the matrix\n+     * @return trace\n+     */\n+    public double getTrace();\n+    \n+    /**\n+     * Returns the result of multiplying this by vector v\n+     * @return this*v\n+     * @throws IllegalArgumentException if columnDimension != v.size()\n+     */\n+    public double[] operate(double[] v);\n+    \n+    /**\n+     * Returns the result of premultiplying this by vector v\n+     * @return v*this\n+     * @throws IllegalArgumentException if rowDimension != v.size()\n+     */\n+    public RealMatrix preMultiply(double[] v);    \n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/RealMatrixImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math;\n+\n+/**\n+ * Implementation for RealMatrix using double[][] array\n+ * @author  Phil Stetiz\n+ * @version $Revision: 1.1 $ $Date: 2003/05/12 19:04:10 $\n+ */\n+public class RealMatrixImpl implements RealMatrix {\n+\n+    private double data[][];\n+    \n+    public RealMatrixImpl() {\n+    }\n+\n+     /**\n+     * Create a new RealMatrix with the supplied row and column dimensions\n+     * @param rowDimension      the number of rows in the new matrix\n+     * @param columnDimension   the number of columns in the new matrix\n+     * @return                  newly created matrix\n+     */ \n+    public RealMatrixImpl(int rowDimension,\n+        int columnDimension) {\n+        data = new double[rowDimension][columnDimension];\n+    }\n+    \n+    public RealMatrixImpl(double[][] data) {\n+        this.data = data;\n+    }\n+    \n+    /**\n+     * Create a new RealMatrix which is a copy of *this\n+     * @return  the cloned matrix\n+     */\n+    public RealMatrix copy() {\n+        return null;\n+    }\n+    \n+    /**\n+     * Compute the sum of *this and m\n+     * @param m    matrix to be added\n+     * @return     this + m\n+     * @exception  IllegalArgumentException if m is not the same size as *this\n+     */\n+    public RealMatrix add(RealMatrix m) {\n+        if (this.getColumnDimension() != m.getColumnDimension() ||\n+            this.getRowDimension() != m.getRowDimension()) {\n+                throw new IllegalArgumentException(\"matrix dimension mismatch\");\n+        }\n+        int rowCount = this.getRowDimension();\n+        int columnCount = this.getColumnDimension();\n+        double[][] outData = new double[rowCount][columnCount];\n+        double[][] mData = m.getData();\n+        for (int row = 0; row < rowCount; row++) {\n+            for (int col = 0; col < columnCount; col++) {\n+                outData[row][col] = data[row][col] + mData[row][col];\n+            }\n+        }\n+        return new RealMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Compute *this minus m\n+     * @param m    matrix to be subtracted\n+     * @return     this + m\n+     * @exception  IllegalArgumentException if m is not the same size as *this\n+     */\n+    public RealMatrix subtract(RealMatrix m) {\n+        if (this.getColumnDimension() != m.getColumnDimension() ||\n+            this.getRowDimension() != m.getRowDimension()) {\n+                throw new IllegalArgumentException(\"matrix dimension mismatch\");\n+        }\n+        int rowCount = this.getRowDimension();\n+        int columnCount = this.getColumnDimension();\n+        double[][] outData = new double[rowCount][columnCount];\n+        double[][] mData = m.getData();\n+        for (int row = 0; row < rowCount; row++) {\n+            for (int col = 0; col < columnCount; col++) {\n+                outData[row][col] = data[row][col] - mData[row][col];\n+            }\n+        }\n+        return new RealMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Returns the rank of the matrix\n+     * @return     the rank of this matrix\n+     */\n+    public int getRank() {\n+        throw new UnsupportedOperationException(\"not implemented yet\");\n+    }\n+        \n+    \n+     /**\n+     * Returns the result of adding d to each entry of *this\n+     * @param d    value to be added to each entry\n+     * @return     d + this\n+     */\n+    public RealMatrix scalarAdd(double d) {\n+        int rowCount = this.getRowDimension();\n+        int columnCount = this.getColumnDimension();\n+        double[][] outData = new double[rowCount][columnCount];\n+        for (int row = 0; row < rowCount; row++) {\n+            for (int col = 0; col < columnCount; col++) {\n+                outData[row][col] = data[row][col] + d;\n+            }\n+        }\n+        return new RealMatrixImpl(outData);\n+    }\n+     \n+    /**\n+     * Returns the result multiplying each entry of *this by d\n+     * @param d    value to multiply all entries by\n+     * @return     d*this\n+     */\n+    public RealMatrix scalarMultiply(double d) {\n+        int rowCount = this.getRowDimension();\n+        int columnCount = this.getColumnDimension();\n+        double[][] outData = new double[rowCount][columnCount];\n+        for (int row = 0; row < rowCount; row++) {\n+            for (int col = 0; col < columnCount; col++) {\n+                outData[row][col] = data[row][col]*d;\n+            }\n+        }\n+        return new RealMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Returns the result postmultiplying *this by m\n+     * @param m    matrix to postmultiply by\n+     * @return     this*m\n+     * @throws     IllegalArgumentException \n+     *             if columnDimension(this) != rowDimension(m)\n+     */\n+    public RealMatrix multiply(RealMatrix m) {\n+      if (this.getColumnDimension() != m.getRowDimension()) {\n+         throw new IllegalArgumentException\n+            (\"Matrices are not multiplication compatible.\");\n+      }\n+      double[][] mData = m.getData();\n+      double[][] outData = \n+        new double[this.getRowDimension()][m.getColumnDimension()];\n+      double sum = 0;\n+      for (int row = 0; row < this.getRowDimension(); row++) {\n+         for (int col = 0; col < m.getColumnDimension(); col++) {\n+            sum = 0;\n+            for (int i = 0; i < this.getColumnDimension(); i++) {\n+                sum += data[row][i] * mData[i][col];\n+            }\n+            outData[row][col] = sum;\n+         }\n+      }\n+      return new RealMatrixImpl(outData);\n+    }\n+    \n+    /**\n+     * Returns matrix entries as a two-dimensional array\n+     * @return    2-dimensional array of entries\n+     */\n+    public double[][] getData() {\n+        return data;\n+    }\n+    \n+    /**\n+     * Sets/overwrites the underlying data for the matrix\n+     * @param    2-dimensional array of entries\n+     */\n+    public void setData(double[][] data) {\n+        this.data = data;\n+    }\n+    \n+    /**\n+     * Returns the 1-norm of the matrix (max column sum) \n+     * @return norm\n+     */\n+    public double getNorm() {\n+      double maxColSum = 0;\n+      for (int col = 0; col < this.getColumnDimension(); col++) {\n+         double sum = 0;\n+         for (int row = 0; row < this.getRowDimension(); row++) {\n+            sum += Math.abs(data[row][col]);\n+         }\n+         maxColSum = Math.max(maxColSum,sum);\n+      }\n+      return maxColSum;\n+    }\n+    \n+    /**\n+     * Returns entries in row as an array\n+     * @param row  the row to be fetched\n+     * @return     array of entries in the row\n+     * @throws     IllegalArgumentException if row > rowDimension\n+     */\n+    public double[] getRow(int row) {\n+        return data[row];\n+    }\n+    \n+    /**\n+     * Returns entries in column as an array\n+     * @param col  column to fetch\n+     * @return     array of entries in the column\n+     * @throws     IllegalArgumentException if column > columnDimension\n+     */\n+    public double[] getColumn(int col) {\n+        throw new UnsupportedOperationException(\"not implemented yet\");\n+    }\n+    \n+    /**\n+     * Returns the entry in the specified row and column\n+     * @param row  row location of entry to be fetched  \n+     * @param col  column location of entry to be fetched \n+     * @return     matrix entry in row,column\n+     * @throws     IllegalArgumentException if entry does not exist\n+     */\n+    public double getEntry(int row, int column) {\n+        if (row < 1 || column < 1 || row > this.getRowDimension() \n+            || column > this.getColumnDimension()) {\n+                throw new IllegalArgumentException\n+                    (\"matrix entry does not exist\");\n+        }\n+        return data[row-1][column-1];\n+    }\n+    \n+    /**\n+     * Sets the entry in the specified row and column to the specified value\n+     * @param row    row location of entry to be set \n+     * @param col    column location of entry to be set\n+     * @param value  value to set \n+     * @throws IllegalArgumentException if entry does not exist\n+     */\n+    public void setEntry(int row, int column, double value) {\n+        if (row < 1 || column < 1 || row > this.getRowDimension()\n+            || column > this.getColumnDimension()) {\n+                throw new IllegalArgumentException\n+                    (\"matrix entry does not exist\");\n+        }\n+        data[row-1][column-1] = value;\n+    }\n+    \n+    /**\n+     * Returns the transpose of this matrix\n+     * @return transpose matrix\n+     */\n+    public RealMatrix transpose() {\n+        throw new UnsupportedOperationException(\"not implemented yet\");\n+    }\n+        \n+    \n+    /**\n+     * Returns the inverse of this matrix\n+     * @return inverse matrix\n+     * @throws IllegalArgumentException if *this is not invertible\n+     */\n+    public RealMatrix inverse() {\n+        throw new UnsupportedOperationException(\"not implemented yet\");\n+    }\n+    \n+    /**\n+     * Returns the determinant of this matrix\n+     * @return determinant\n+     */\n+    public double getDeterminant() {\n+        throw new UnsupportedOperationException(\"not implemented yet\");\n+    }\n+    \n+    /**\n+     * Is this a square matrix?\n+     * @return true if the matrix is square (rowDimension = columnDimension)\n+     */\n+    public boolean isSquare() {\n+        return (this.getColumnDimension() == this.getRowDimension());\n+    }\n+    \n+    /**\n+     * Is this a singular matrix?\n+     * @return true if the matrix is singular\n+     */\n+    public boolean isSingular() {\n+        throw new UnsupportedOperationException(\"not implemented yet\");\n+    }\n+    \n+    /**\n+     * Returns the number of rows in the matrix\n+     * @return rowDimension\n+     */\n+    public int getRowDimension() {\n+        return data.length;  \n+    }\n+    \n+    /**\n+     * Returns the number of columns in the matrix\n+     * @return columnDimension\n+     */\n+    public int getColumnDimension() {\n+        return data[0].length;\n+    }\n+    \n+    /**\n+     * Returns the trace of the matrix\n+     * @return trace\n+     */\n+    public double getTrace() {\n+        throw new UnsupportedOperationException(\"not implemented yet\");\n+    }\n+    \n+    /**\n+     * Returns the result of multiplying this by the vector b\n+     * @return this*v\n+     * @throws IllegalArgumentException if columnDimension != v.size()\n+     */\n+    public double[] operate(double[] v) {\n+        throw new UnsupportedOperationException(\"not implemented yet\");\n+    }\n+    \n+    /**\n+     * Returns the result of premultiplying this by the vector v\n+     * @return v*this\n+     * @throws IllegalArgumentException if rowDimension != v.size()\n+     */\n+    public RealMatrix preMultiply(double[] v) {\n+        throw new UnsupportedOperationException(\"not implemented yet\");\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/Univariate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+/**\n+ *\n+ * Accumulates univariate statistics for values fed in \n+ * through the addValue() method.  Does not store raw data values.\n+ * All data (including n) are represented internally as doubles.\n+ * Integers, floats and longs can be added, but will be converted\n+ * to doubles by addValue().  \n+ *\n+ * @author Phil Steitz\n+ * @version $Revision: 1.1 $ $Date: 2003/05/12 19:04:10 $\n+ * \n+*/\n+public class Univariate {\n+\n+    /** running sum of values that have been added */\n+    private double sum = 0.0;\n+\n+    /** running sum of squares that have been added */\n+    private double sumsq = 0.0;\n+\n+    /** count of values that have been added */\n+    private double n = 0.0;\n+\n+    /** min of values that have been added */\n+    private double min = Double.MAX_VALUE;\n+\n+    /** max of values that have been added */\n+    private double max = Double.MIN_VALUE;\n+\n+    /** display name */\n+    private String name = \"\";\n+\n+    /** Creates new univariate */\n+    public Univariate() {\n+        clear();\n+    }\n+\n+    /** Creates a new univariate with the given name */\n+    public Univariate(java.lang.String name) {\n+        this.name = name;\n+        clear();\n+    }\n+\n+    /**\n+     * Adds the value, updating running sums.<br>\n+     * Converts value to a double before adding.\n+     * @param v the value to be added \n+     */\n+    public void addValue(int v) {\n+        double f = (new Double(v)).doubleValue();\n+        insertValue(f);\n+    }\n+\n+    /**\n+     * Adds the value, updating running sums.<br>\n+     * Converts value to a double before adding.\n+     * @param v the value to be added \n+     */\n+    public void addValue(long v) {\n+        double f = (new Double(v)).doubleValue();\n+        insertValue(f);\n+    }\n+\n+    /**\n+     * Adds the value, updating running sums.<br>\n+     * Converts value to a double before adding.\n+     * @param v the value to be added \n+     */\n+    public void addValue(float v) {\n+        insertValue(v);\n+    }\n+\n+    /**\n+     * Adds the value, updating running sums.\n+     * @param v the value to be added \n+     */\n+    public void addValue(double v) {\n+        insertValue(v);\n+    }\n+\n+    /** \n+     * Returns the mean of the values that have been added\n+     * @return mean value\n+     */\n+    public double getMean() {\n+        // FIXME: throw something meaningful if n = 0\n+        return sum/n;\n+    }\n+\n+    /** \n+     * Returns the variance of the values that have been added\n+     * @return variance value\n+     */\n+    public double getVariance() {\n+        double xbar = getMean();\n+        // FIXME: throw something meaningful if n = 0\n+        return (sumsq - xbar*xbar*n)/(n-1);\n+    }\n+\n+    /** \n+     * Returns the standard deviation of the values that have been added\n+     * @return standard deviation value\n+     */\n+    public double getStandardDeviation() {\n+        // FIXME: throw something meaningful if n = 0\n+        return (new Double(Math.sqrt\n+            ((new Double(getVariance())).doubleValue()))).doubleValue();\n+    }\n+\n+    /**\n+     * Adds the value, updating running sums.\n+     * @param v the value to be added \n+     */\n+    private void insertValue(double v) {\n+        n += 1.0;\n+        if (v < min) min = v;\n+        if (v > max) max = v;\n+        sum += v;\n+        sumsq += v*v;\n+    }\n+\n+    /** Getter for property max.\n+     * @return Value of property max.\n+     */\n+    public double getMax() {\n+        return max;\n+    }\n+\n+    /** Setter for property max.\n+     * @param max New value of property max.\n+     */\n+    public void setMax(double max) {\n+        this.max = max;\n+    }\n+\n+    /** Getter for property min.\n+     * @return Value of property min.\n+     */\n+    public double getMin() {\n+        return min;\n+    }\n+\n+    /** Getter for property n.\n+     * @return Value of property n.\n+     */\n+    public double getN() {\n+        return n;\n+    }\n+\n+    /** Getter for property sum.\n+     * @return Value of property sum.\n+     */\n+    public double getSum() {\n+        return sum;\n+    }\n+\n+    /** Getter for property sumsq.\n+     * @return Value of property sumsq.\n+     */\n+    public double getSumsq() {\n+        return sumsq;\n+    }\n+\n+    /** Getter for property name.\n+     * @return Value of property name.\n+     */\n+    public java.lang.String getName() {\n+        return name;\n+    }\n+\n+    /** Setter for property name.\n+     * @param name New value of property name.\n+     */\n+    public void setName(java.lang.String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * Generates a text report displaying \n+     * univariate statistics from values that\n+     * have been added.\n+     * @return String with line feeds displaying statistics\n+     */\n+    public String toString() {\n+        StringBuffer outBuffer = new StringBuffer();\n+        outBuffer.append(name + \"\\n\");\n+        outBuffer.append(\"n: \" + n + \"\\n\");\n+        outBuffer.append(\"min: \" + min + \"\\n\");\n+        outBuffer.append(\"max: \" + max + \"\\n\");\n+        outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+        outBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+        return outBuffer.toString();\n+    }\n+    \n+    /** Resets all sums to 0, resets min and max */\n+    public void clear() {\n+        this.sum = 0.0;\n+        this.sumsq = 0.0;\n+        this.n = 0.0;\n+        this.min = Double.MAX_VALUE;\n+        this.max = Double.MIN_VALUE;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/FreqTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Freq} class.\n+ *\n+ * @author Phil Steitz\n+ * @version $Revision: 1.1 $ $Date: 2003/05/12 19:04:38 $\n+ */\n+\n+public final class FreqTest extends TestCase {\n+    private long oneL = 1;\n+    private long twoL = 2;\n+    private int oneI = 1;\n+    private int twoI = 2;\n+    private String oneS = \"1\";\n+    private String twoS = \"2\";\n+    private double tolerance = 10E-15;\n+    \n+    public FreqTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(FreqTest.class);\n+        suite.setName(\"Freq Tests\");\n+        return suite;\n+    }\n+    \n+    /** test freq counts */\n+    public void testCounts() {\n+        Freq f = new Freq(\"test counts\"); \n+        assertEquals(\"total count\",0,f.getSumFreq());\n+        f.addValue(oneL);\n+        f.addValue(twoL);\n+        f.addValue(oneS);\n+        f.addValue(oneI);\n+        assertEquals(\"one frequency count\",3,f.getCount(\"1\"));\n+        assertEquals(\"two frequency count\",1,f.getCount(\"2\"));\n+        assertEquals(\"foo frequency count\",0,f.getCount(\"foo\"));\n+        assertEquals(\"total count\",4,f.getSumFreq());\n+        f.clear();\n+        assertEquals(\"total count\",0,f.getSumFreq());\n+    }     \n+    \n+    /** test pcts */\n+    public void testPcts() {\n+        Freq f = new Freq(\"test counts\"); \n+        f.addValue(oneL);\n+        f.addValue(twoL);\n+        f.addValue(oneI);\n+        f.addValue(twoI);\n+        f.addValue(\"foo\");\n+        f.addValue(\"foo\");\n+        f.addValue(\"foo\");\n+        f.addValue(\"foo\");\n+        assertEquals(\"one pct\",0.25,f.getPct(\"1\"),tolerance);\n+        assertEquals(\"two pct\",0.25,f.getPct(\"2\"),tolerance);\n+        assertEquals(\"foo pct\",0.5,f.getPct(\"foo\"),tolerance);\n+        assertEquals(\"bar pct\",0,f.getPct(\"bar\"),tolerance);\n+    }      \n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/MathTestSuite.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Test suite for the Math package.\n+ *\n+ * @author Phil Steitz\n+ * @version $Id: MathTestSuite.java,v 1.1 2003/05/12 19:04:38 rdonkin Exp $\n+ */\n+public class MathTestSuite extends TestCase {\n+    \n+    /**\n+     * Construct a new instance.\n+     */\n+    public MathTestSuite(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Command-line interface.\n+     */\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Get the suite of tests\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.setName(\"Commons Math Tests\");\n+        suite.addTest(RealMatrixImplTest.suite());\n+        suite.addTest(FreqTest.suite());\n+        suite.addTest(UnivariateTest.suite());\n+        return suite;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/RealMatrixImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link RealMatrixImpl} class.\n+ *\n+ * @author Phil Steitz\n+ * @version $Revision: 1.1 $ $Date: 2003/05/12 19:02:53 $\n+ */\n+\n+public final class RealMatrixImplTest extends TestCase {\n+    \n+    private double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };\n+    private double[][] testDataInv = \n+        { {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };\n+    private double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};\n+    private double[][] testDataPlusInv = \n+        { {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };\n+    private double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };\n+    private double[] testVector = {1,2,3};\n+    private double entryTolerance = Math.pow(2,-64);\n+    private double normTolerance = Math.pow(2,-64);\n+    \n+    public RealMatrixImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {\n+        \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(RealMatrixImplTest.class);\n+        suite.setName(\"RealMatrixImpl Tests\");\n+        return suite;\n+    }\n+    \n+    /** test dimensions */\n+    public void testDimensions() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n+        assertEquals(\"testData row dimension\",3,m.getRowDimension());\n+        assertEquals(\"testData column dimension\",3,m.getColumnDimension());\n+        assertTrue(\"testData is square\",m.isSquare());\n+        assertEquals(\"testData2 row dimension\",m2.getRowDimension(),2);\n+        assertEquals(\"testData2 column dimension\",m2.getColumnDimension(),3);\n+        assertTrue(\"testData2 is not square\",!m2.isSquare());\n+    }     \n+    \n+    /** test add */\n+    public void testAdd() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);\n+        RealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(mInv);\n+        double[][] sumEntries = mPlusMInv.getData();\n+        for (int row = 0; row < m.getRowDimension(); row++) {\n+            for (int col = 0; col < m.getColumnDimension(); col++) {\n+                assertEquals(\"sum entry entry\",\n+                    testDataPlusInv[row][col],sumEntries[row][col],\n+                        entryTolerance);\n+            }\n+        }    \n+    }\n+    \n+    /** test add failure */\n+    public void testAddFail() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n+        try {\n+            RealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(m2);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    /** test norm */\n+    public void testNorm() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n+        assertEquals(\"testData norm\",14d,m.getNorm(),entryTolerance);\n+        assertEquals(\"testData2 norm\",7d,m2.getNorm(),entryTolerance);\n+    }\n+    \n+     /** test m-n = m + -n */\n+    public void testPlusMinus() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl m2 = new RealMatrixImpl(testDataInv);\n+        assertClose(\"m-n = m + -n\",m.subtract(m2),\n+            m2.scalarMultiply(-1d).add(m),entryTolerance);\n+    }\n+    \n+    /** test multiply */\n+     public void testMultiply() {\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);\n+        RealMatrixImpl identity = new RealMatrixImpl(id);\n+        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n+        assertClose(\"inverse multiply\",m.multiply(mInv),\n+            identity,entryTolerance);\n+        assertClose(\"inverse multiply\",mInv.multiply(m),\n+            identity,entryTolerance);\n+        assertClose(\"identity multiply\",m.multiply(identity),\n+            m,entryTolerance);\n+        assertClose(\"identity multiply\",identity.multiply(mInv),\n+            mInv,entryTolerance);\n+        assertClose(\"identity multiply\",m2.multiply(identity),\n+            m2,entryTolerance);       \n+    }\n+    \n+    private void assertClose(String msg, RealMatrix m, RealMatrix n,\n+        double tolerance) {\n+        assertTrue(msg,m.subtract(n).getNorm() < tolerance);\n+    }\n+        \n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/UnivariateTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/05/12 19:02:53 $\n+ */\n+\n+public final class UnivariateTest extends TestCase {\n+    private double one = 1;\n+    private float twoF = 2;\n+    private long twoL = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double tolerance = 10E-15;\n+    \n+    public UnivariateTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(UnivariateTest.class);\n+        suite.setName(\"Freq Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+        Univariate u = new Univariate(\"test univariate\"); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(twoF);\n+        u.addValue(twoL);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+}\n+", "timestamp": 1052766278, "metainfo": ""}