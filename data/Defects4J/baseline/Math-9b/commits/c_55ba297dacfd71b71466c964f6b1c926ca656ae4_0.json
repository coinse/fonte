{"sha": "55ba297dacfd71b71466c964f6b1c926ca656ae4", "log": "removed Serializable from matrix visitors interfaces and classes it doesn't make sense for these objects as they are intended to be transient  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java\n             createMatrix(selectedRows.length, selectedColumns.length);\n         subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {\n \n-            /** Serializable version identifier. */\n-            private static final long serialVersionUID = 5079316658710707181L;\n-\n             /** {@inheritDoc} */\n             @Override\n             public T visit(final int row, final int column, final T value) {\n         // copy entries\n         walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {\n \n-            /** Serializable version identifier. */\n-            private static final long serialVersionUID = 1894428776156078725L;\n-\n             /** Initial row index. */\n             private int startRow;\n \n         final int nCols = getColumnDimension();\n         final FieldMatrix<T> out = createMatrix(nCols, nRows);\n         walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {\n-\n-            /** Serializable version identifier. */\n-            private static final long serialVersionUID = 6281961451465720534L;\n \n             /** {@inheritDoc} */\n             @Override\n--- a/src/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/AbstractRealMatrix.java\n     public double getNorm() {\n         return walkInColumnOrder(new RealMatrixPreservingVisitor() {\n \n-            /** Serializable version identifier */\n-            private static final long serialVersionUID = -2452270856202894168L;\n-\n             /** Last row index. */\n             private double endRow;\n \n     public double getFrobeniusNorm() {\n         return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\n \n-            /** Serializable version identifier */\n-            private static final long serialVersionUID = -6065411033772300640L;\n-\n             /** Sum of squared entries. */\n             private double sum;\n \n         final RealMatrix subMatrix =\n             createMatrix(selectedRows.length, selectedColumns.length);\n         subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {\n-\n-            /** Serializable version identifier. */\n-            private static final long serialVersionUID = 4572851009041214720L;\n \n             /** {@inheritDoc} */\n             @Override\n         // copy entries\n         walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\n \n-            /** Serializable version identifier. */\n-            private static final long serialVersionUID = -6302162622577015104L;\n-\n             /** Initial row index. */\n             private int startRow;\n \n         final int nCols = getColumnDimension();\n         final RealMatrix out = createMatrix(nCols, nRows);\n         walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\n-\n-            /** Serializable version identifier. */\n-            private static final long serialVersionUID = 2482589609486637597L;\n \n             /** {@inheritDoc} */\n             @Override\n--- a/src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java\n+++ b/src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java\n public class DefaultFieldMatrixChangingVisitor<T extends FieldElement<T>>\n     implements FieldMatrixChangingVisitor<T> {\n \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -7138694000397476118L;\n-\n     /** Zero element of the field. */\n     private final T zero;\n \n--- a/src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java\n+++ b/src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java\n public class DefaultFieldMatrixPreservingVisitor<T extends FieldElement<T>>\n     implements FieldMatrixPreservingVisitor<T> {\n \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 7998898965168636198L;\n-\n     /** Zero element of the field. */\n     private final T zero;\n \n--- a/src/java/org/apache/commons/math/linear/DefaultRealMatrixChangingVisitor.java\n+++ b/src/java/org/apache/commons/math/linear/DefaultRealMatrixChangingVisitor.java\n  */\n public class DefaultRealMatrixChangingVisitor implements RealMatrixChangingVisitor {\n \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = 892744666836410796L;\n-\n     /** {@inheritDoc} */\n     public void start(int rows, int columns,\n                       int startRow, int endRow, int startColumn, int endColumn) {\n--- a/src/java/org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor.java\n+++ b/src/java/org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor.java\n  */\n public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {\n \n-    /** Serializable version identifier. */\n-    private static final long serialVersionUID = -7608224814444142788L;\n-\n     /** {@inheritDoc} */\n     public void start(int rows, int columns,\n                       int startRow, int endRow, int startColumn, int endColumn) {\n--- a/src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java\n+++ b/src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java\n \n package org.apache.commons.math.linear;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.FieldElement;\n \n /**\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface FieldMatrixChangingVisitor<T extends FieldElement<?>> extends Serializable {\n+public interface FieldMatrixChangingVisitor<T extends FieldElement<?>> {\n \n     /**\n      * Start visiting a matrix.\n--- a/src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java\n+++ b/src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java\n \n package org.apache.commons.math.linear;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.math.FieldElement;\n \n /**\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface FieldMatrixPreservingVisitor<T extends FieldElement<?>> extends Serializable {\n+public interface FieldMatrixPreservingVisitor<T extends FieldElement<?>> {\n \n     /**\n      * Start visiting a matrix.\n--- a/src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java\n \n package org.apache.commons.math.linear;\n \n-import java.io.Serializable;\n-\n /**\n  * Interface defining a visitor for matrix entries.\n  * \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface RealMatrixChangingVisitor extends Serializable {\n+public interface RealMatrixChangingVisitor {\n \n     /**\n      * Start visiting a matrix.\n--- a/src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java\n \n package org.apache.commons.math.linear;\n \n-import java.io.Serializable;\n-\n /**\n  * Interface defining a visitor for matrix entries.\n  * \n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface RealMatrixPreservingVisitor extends Serializable {\n+public interface RealMatrixPreservingVisitor {\n \n     /**\n      * Start visiting a matrix.\n--- a/src/java/org/apache/commons/math/ode/NordsieckTransformer.java\n+++ b/src/java/org/apache/commons/math/ode/NordsieckTransformer.java\n     /** Convertor for {@link FieldMatrix}/{@link BigFraction}. */\n     private static class Convertor extends DefaultFieldMatrixPreservingVisitor<BigFraction> {\n \n-        /** Serializable version identifier. */\n-        private static final long serialVersionUID = -1799685632320460982L;\n-\n         /** Converted array. */\n         private double[][] data;\n \n--- a/src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java\n     }\n     \n     private static class SetVisitor extends DefaultFieldMatrixChangingVisitor<Fraction> {\n-        private static final long serialVersionUID = 6586716383170553060L;\n         public SetVisitor() {\n             super(Fraction.ZERO);\n         }\n     }\n \n     private static class GetVisitor extends DefaultFieldMatrixPreservingVisitor<Fraction> {\n-        private static final long serialVersionUID = 8363001284977267825L;\n         private int count;\n         public GetVisitor() {\n             super(Fraction.ZERO);\n--- a/src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java\n     }\n         \n     private static class SetVisitor extends DefaultRealMatrixChangingVisitor {\n-        private static final long serialVersionUID = 1773444180892369386L;\n         @Override\n         public double visit(int i, int j, double value) {\n             return i + j / 1024.0;\n     }\n \n     private static class GetVisitor extends DefaultRealMatrixPreservingVisitor {\n-        private static final long serialVersionUID = -7745543227178932689L;\n         private int count = 0;\n         @Override\n         public void visit(int i, int j, double value) {\n--- a/src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java\n     }\n     \n     private static class SetVisitor extends DefaultFieldMatrixChangingVisitor<Fraction> {\n-        private static final long serialVersionUID = -949750581026560454L;\n         public SetVisitor() {\n             super(Fraction.ZERO);\n         }\n     }\n \n     private static class GetVisitor extends DefaultFieldMatrixPreservingVisitor<Fraction> {\n-        private static final long serialVersionUID = -8008915491884412915L;\n         private int count;\n         public GetVisitor() {\n             super(Fraction.ZERO);\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n     \n     \n     private static class SetVisitor extends DefaultRealMatrixChangingVisitor {\n-        private static final long serialVersionUID = -5082825244208703349L;\n         @Override\n         public double visit(int i, int j, double value) {\n             return i + j / 1024.0;\n     }\n \n     private static class GetVisitor extends DefaultRealMatrixPreservingVisitor {\n-        private static final long serialVersionUID = 849639072339030818L;\n         private int count = 0;\n         @Override\n         public void visit(int i, int j, double value) {\n--- a/src/test/org/apache/commons/math/linear/decomposition/QRDecompositionImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/decomposition/QRDecompositionImplTest.java\n \n     private void checkUpperTriangular(RealMatrix m) {\n         m.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\n-            private static final long serialVersionUID = -7685630069569815930L;\n             @Override\n             public void visit(int row, int column, double value) {\n                 if (column < row) {\n \n     private void checkTrapezoidal(RealMatrix m) {\n         m.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\n-            private static final long serialVersionUID = -43649044361860701L;\n             @Override\n             public void visit(int row, int column, double value) {\n                 if (column > row) {\n     private RealMatrix createTestMatrix(final Random r, final int rows, final int columns) {\n         RealMatrix m = MatrixUtils.createRealMatrix(rows, columns);\n         m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){\n-            private static final long serialVersionUID = -556118291433400034L;\n             @Override\n             public double visit(int row, int column, double value)\n                 throws MatrixVisitorException {\n--- a/src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java\n+++ b/src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java\n         RealMatrix b = a.multiply(xRef);\n         final double noise = 0.001;\n         b.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {\n-            private static final long serialVersionUID = 3533849820776962636L;\n             @Override\n             public double visit(int row, int column, double value) {\n                 return value * (1.0 + noise * (2 * r.nextDouble() - 1));\n     private RealMatrix createTestMatrix(final Random r, final int rows, final int columns) {\n         RealMatrix m = MatrixUtils.createRealMatrix(rows, columns);\n         m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){\n-            private static final long serialVersionUID = -556118291433400034L;\n             @Override\n             public double visit(int row, int column, double value)\n                 throws MatrixVisitorException {\n--- a/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n         final double[] s = { 1.0, -1.0 /  2.0, -1.0 /  3.0, -1.0 /  4.0, -1.0 /  5.0, -1.0 /  6.0 };\n         RealMatrix referenceVariance = new RealMatrixImpl(s.length, s.length);\n         referenceVariance.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {\n-            private static final long serialVersionUID = -6071126933773694288L;\n             @Override\n             public double visit(int row, int column, double value)\n                 throws MatrixVisitorException {", "timestamp": 1243183492, "metainfo": ""}