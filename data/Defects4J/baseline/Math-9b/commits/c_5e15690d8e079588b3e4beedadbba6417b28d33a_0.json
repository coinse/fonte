{"sha": "5e15690d8e079588b3e4beedadbba6417b28d33a", "log": "removed some condition logic by changing the continued fraction representation.   ", "commit": "\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n  * This is a utility class that provides computation methods related to the\n  * Gamma family of functions.\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/06/07 20:30:16 $\n+ * @version $Revision: 1.20 $ $Date: 2004/06/10 18:34:53 $\n  */\n public class Gamma implements Serializable {\n     \n             // create continued fraction\n             ContinuedFraction cf = new ContinuedFraction() {\n                 protected double getA(int n, double x) {\n-                    double ret;\n-                    switch(n) {\n-                        case 0: ret = 0.0; break;\n-                        default:\n-                            ret = ((2.0 * n) - 1.0) - a + x; break;\n-                    }\n-                    return ret;\n+                    return ((2.0 * n) + 1.0) - a + x;\n                 }\n \n                 protected double getB(int n, double x) {\n-                    double ret;\n-                    double t;\n-                    switch(n) {\n-                        case 1: ret = 1.0; break;\n-                        default:\n-                            t = n - 1.0;\n-                            ret = t * (a - t);\n-                            break;\n-                    }\n-                    return ret;\n+                    return n * (a - n);\n                 }\n             };\n             \n-            ret = cf.evaluate(x, epsilon, maxIterations);\n+            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\n             ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\n         }\n ", "timestamp": 1086892493, "metainfo": ""}