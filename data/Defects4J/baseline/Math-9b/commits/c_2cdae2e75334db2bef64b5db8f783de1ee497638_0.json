{"sha": "2cdae2e75334db2bef64b5db8f783de1ee497638", "log": "MATH-795: factored out testBasicFunctions().   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java\n \n     @Test\n     public void testBasicFunctions() {\n+        super.testBasicFunctions();\n         ArrayRealVector v1 = new ArrayRealVector(vec1);\n         ArrayRealVector v2 = new ArrayRealVector(vec2);\n         ArrayRealVector v5 = new ArrayRealVector(vec5);\n \n         RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n \n-        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n-        double d_getNorm = v5.getNorm();\n-        Assert.assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm, normTolerance);\n-\n-        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n-        double d_getL1Norm = v5.getL1Norm();\n-        Assert.assertEquals(\"compare values  \", 17.0, d_getL1Norm, normTolerance);\n-\n-        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n-        double d_getLInfNorm = v5.getLInfNorm();\n-        Assert.assertEquals(\"compare values  \", 6.0, d_getLInfNorm, normTolerance);\n-\n-\n-        //octave =  sqrt(sumsq(v1-v2))\n-        double dist = v1.getDistance(v2);\n-        Assert.assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist, normTolerance);\n-\n-        //octave =  sqrt(sumsq(v1-v2))\n-        double dist_2 = v1.getDistance(v2_t);\n-        Assert.assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2, normTolerance);\n-\n-        //octave =  sqrt(sumsq(v1-v2))\n-        double dist_3 = v1.getDistance(v2);\n-        Assert.assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3, normTolerance);\n-\n-        //octave =  ???\n-        double d_getL1Distance = v1. getL1Distance(v2);\n-        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance, normTolerance);\n-\n-        double d_getL1Distance_2 = v1.getL1Distance(v2_t);\n-        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance_2, normTolerance);\n-\n-        double d_getL1Distance_3 = v1.getL1Distance(v2);\n-        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance_3, normTolerance);\n-\n-        //octave =  ???\n-        double d_getLInfDistance = v1.getLInfDistance(v2);\n-        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance, normTolerance);\n-\n-        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n-        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance_2, normTolerance);\n-\n-        double d_getLInfDistance_3 = v1. getLInfDistance(v2);\n-        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance_3, normTolerance);\n-\n-        //octave =  v1 + v2\n-        ArrayRealVector v_add = v1.add(v2);\n-        double[] result_add = {5d, 7d, 9d};\n-        assertClose(\"compare vect\" ,v_add.toArray(), result_add, normTolerance);\n-\n-        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n-        RealVector v_add_i = v1.add(vt2);\n-        double[] result_add_i = {5d, 7d, 9d};\n-        assertClose(\"compare vect\" ,v_add_i.toArray(),result_add_i,normTolerance);\n-\n-        //octave =  v1 - v2\n-        ArrayRealVector v_subtract = v1.subtract(v2);\n-        double[] result_subtract = {-3d, -3d, -3d};\n-        assertClose(\"compare vect\" ,v_subtract.toArray(),result_subtract,normTolerance);\n-\n-        RealVector v_subtract_i = v1.subtract(vt2);\n-        double[] result_subtract_i = {-3d, -3d, -3d};\n-        assertClose(\"compare vect\" ,v_subtract_i.toArray(),result_subtract_i,normTolerance);\n-\n-        // octave v1 .* v2\n-        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n-        double[] result_ebeMultiply = {4d, 10d, 18d};\n-        assertClose(\"compare vect\" ,v_ebeMultiply.toArray(),result_ebeMultiply,normTolerance);\n-\n-        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n-        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n-        assertClose(\"compare vect\" ,v_ebeMultiply_2.toArray(),result_ebeMultiply_2,normTolerance);\n-\n-        RealVector  v_ebeMultiply_3 = v1.ebeMultiply(v2);\n-        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n-        assertClose(\"compare vect\" ,v_ebeMultiply_3.toArray(),result_ebeMultiply_3,normTolerance);\n-\n-        // octave v1 ./ v2\n-        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n-        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n-        assertClose(\"compare vect\" ,v_ebeDivide.toArray(),result_ebeDivide,normTolerance);\n-\n-        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n-        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n-        assertClose(\"compare vect\" ,v_ebeDivide_2.toArray(),result_ebeDivide_2,normTolerance);\n-\n-        RealVector  v_ebeDivide_3 = v1.ebeDivide(v2);\n-        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n-        assertClose(\"compare vect\" ,v_ebeDivide_3.toArray(),result_ebeDivide_3,normTolerance);\n-\n-        // octave  dot(v1,v2)\n-        double dot =  v1.dotProduct(v2);\n-        Assert.assertEquals(\"compare val \",32d, dot, normTolerance);\n-\n-        // octave  dot(v1,v2_t)\n-        double dot_2 =  v1.dotProduct(v2_t);\n-        Assert.assertEquals(\"compare val \",32d, dot_2, normTolerance);\n-\n-        RealMatrix m_outerProduct = v1.outerProduct(v2);\n-        Assert.assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0), normTolerance);\n-\n-        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n-        Assert.assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0), normTolerance);\n-\n-        RealMatrix m_outerProduct_3 = v1.outerProduct(v2);\n-        Assert.assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0), normTolerance);\n-\n-        RealVector v_unitVector = v1.unitVector();\n-        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n-        assertClose(\"compare vect\" ,v_unitVector.toArray(),v_unitVector_2.toArray(),normTolerance);\n-\n-        try {\n-            v_null.unitVector();\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-            // expected behavior\n-        }\n-\n-        ArrayRealVector v_unitize = v1.copy();\n-        v_unitize.unitize();\n-        assertClose(\"compare vect\" ,v_unitVector_2.toArray(),v_unitize.toArray(),normTolerance);\n-        try {\n-            v_null.unitize();\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-            // expected behavior\n-        }\n-\n-        RealVector v_projection = v1.projection(v2);\n-        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n-        assertClose(\"compare vect\", v_projection.toArray(), result_projection, normTolerance);\n-\n-        RealVector v_projection_2 = v1.projection(v2_t);\n-        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n-        assertClose(\"compare vect\", v_projection_2.toArray(), result_projection_2, normTolerance);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n import org.apache.commons.math3.analysis.function.Tan;\n import org.apache.commons.math3.analysis.function.Tanh;\n import org.apache.commons.math3.analysis.function.Ulp;\n+import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n+import org.apache.commons.math3.linear.ArrayRealVectorTest.RealVectorTestImpl;\n import org.junit.Test;\n \n \n         assertClose(\"compare vectors\" ,result_mapUlpToSelf,v_mapUlpToSelf.toArray(),normTolerance);\n     }\n \n+    @Test\n+    public void testBasicFunctions() {\n+        final RealVector v1 = create(vec1);\n+        final RealVector v2 = create(vec2);\n+        final RealVector v5 = create(vec5);\n+        final RealVector v_null = create(vec_null);\n+\n+        final RealVector v2_t = createAlien(vec2);\n+\n+        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n+        double d_getNorm = v5.getNorm();\n+        Assert.assertEquals(\"compare values  \", 8.4261497731763586307,\n+                            d_getNorm, normTolerance);\n+\n+        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n+        double d_getL1Norm = v5.getL1Norm();\n+        Assert.assertEquals(\"compare values  \", 17.0, d_getL1Norm,\n+                            normTolerance);\n+\n+        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n+        double d_getLInfNorm = v5.getLInfNorm();\n+        Assert.assertEquals(\"compare values  \", 6.0, d_getLInfNorm,\n+                            normTolerance);\n+\n+        // octave = sqrt(sumsq(v1-v2))\n+        double dist = v1.getDistance(v2);\n+        Assert.assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),\n+                            dist, normTolerance);\n+\n+        // octave = sqrt(sumsq(v1-v2))\n+        double dist_2 = v1.getDistance(v2_t);\n+        Assert.assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),\n+                            dist_2, normTolerance);\n+\n+        // octave = ???\n+        double d_getL1Distance = v1.getL1Distance(v2);\n+        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance,\n+                            normTolerance);\n+\n+        double d_getL1Distance_2 = v1.getL1Distance(v2_t);\n+        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance_2,\n+                            normTolerance);\n+\n+        // octave = ???\n+        double d_getLInfDistance = v1.getLInfDistance(v2);\n+        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance,\n+                            normTolerance);\n+\n+        double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);\n+        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance_2,\n+                            normTolerance);\n+\n+        // octave = v1 + v2\n+        final RealVector v_add = v1.add(v2);\n+        double[] result_add = {\n+            5d, 7d, 9d\n+        };\n+        assertClose(\"compare vect\", v_add.toArray(), result_add, normTolerance);\n+\n+        final RealVector vt2 = createAlien(vec2);\n+        RealVector v_add_i = v1.add(vt2);\n+        double[] result_add_i = {\n+            5d, 7d, 9d\n+        };\n+        assertClose(\"compare vect\", v_add_i.toArray(), result_add_i,\n+                    normTolerance);\n+\n+        // octave = v1 - v2\n+        final RealVector v_subtract = v1.subtract(v2);\n+        double[] result_subtract = {\n+            -3d, -3d, -3d\n+        };\n+        assertClose(\"compare vect\", v_subtract.toArray(), result_subtract,\n+                    normTolerance);\n+\n+        final RealVector v_subtract_i = v1.subtract(vt2);\n+        double[] result_subtract_i = {\n+            -3d, -3d, -3d\n+        };\n+        assertClose(\"compare vect\", v_subtract_i.toArray(), result_subtract_i,\n+                    normTolerance);\n+\n+        // octave v1 .* v2\n+        final RealVector v_ebeMultiply = v1.ebeMultiply(v2);\n+        double[] result_ebeMultiply = {\n+            4d, 10d, 18d\n+        };\n+        assertClose(\"compare vect\", v_ebeMultiply.toArray(),\n+                    result_ebeMultiply, normTolerance);\n+\n+        final RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n+        double[] result_ebeMultiply_2 = {\n+            4d, 10d, 18d\n+        };\n+        assertClose(\"compare vect\", v_ebeMultiply_2.toArray(),\n+                    result_ebeMultiply_2, normTolerance);\n+\n+        // octave v1 ./ v2\n+        final RealVector v_ebeDivide = v1.ebeDivide(v2);\n+        double[] result_ebeDivide = {\n+            0.25d, 0.4d, 0.5d\n+        };\n+        assertClose(\"compare vect\", v_ebeDivide.toArray(), result_ebeDivide,\n+                    normTolerance);\n+\n+        final RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);\n+        double[] result_ebeDivide_2 = {\n+            0.25d, 0.4d, 0.5d\n+        };\n+        assertClose(\"compare vect\", v_ebeDivide_2.toArray(),\n+                    result_ebeDivide_2, normTolerance);\n+\n+        // octave dot(v1,v2)\n+        double dot = v1.dotProduct(v2);\n+        Assert.assertEquals(\"compare val \", 32d, dot, normTolerance);\n+\n+        // octave dot(v1,v2_t)\n+        double dot_2 = v1.dotProduct(v2_t);\n+        Assert.assertEquals(\"compare val \", 32d, dot_2, normTolerance);\n+\n+        RealMatrix m_outerProduct = v1.outerProduct(v2);\n+        Assert.assertEquals(\"compare val \", 4d, m_outerProduct.getEntry(0, 0),\n+                            normTolerance);\n+\n+        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n+        Assert.assertEquals(\"compare val \", 4d,\n+                            m_outerProduct_2.getEntry(0, 0), normTolerance);\n+\n+        RealVector v_unitVector = v1.unitVector();\n+        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n+        assertClose(\"compare vect\", v_unitVector.toArray(),\n+                    v_unitVector_2.toArray(), normTolerance);\n+\n+        try {\n+            v_null.unitVector();\n+            Assert.fail(\"Expecting MathArithmeticException\");\n+        } catch (MathArithmeticException ex) {\n+            // expected behavior\n+        }\n+\n+        RealVector v_unitize = v1.copy();\n+        v_unitize.unitize();\n+        assertClose(\"compare vect\" ,v_unitVector_2.toArray(),v_unitize.toArray(),normTolerance);\n+        try {\n+            v_null.unitize();\n+            Assert.fail(\"Expecting MathArithmeticException\");\n+        } catch (MathArithmeticException ex) {\n+            // expected behavior\n+        }\n+\n+        RealVector v_projection = v1.projection(v2);\n+        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n+        assertClose(\"compare vect\", v_projection.toArray(), result_projection, normTolerance);\n+\n+        RealVector v_projection_2 = v1.projection(v2_t);\n+        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n+        assertClose(\"compare vect\", v_projection_2.toArray(), result_projection_2, normTolerance);\n+    }\n+\n     /*\n      * TESTS OF THE VISITOR PATTERN\n      */\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java\n         }\n     }\n \n+    @Override\n+    public void testBasicFunctions() {\n+        /*\n+         *  TODO this test is huge, and some of the methods being tested are not\n+         *  supported by TestVectorImpl. For the time being, this test is skipped\n+         *  (testBasicFunctions() is overriden, ommitting the @Test anotation).\n+         *\n+         *  What should really be done: split testBasicFunctions() in many\n+         *  smaller unit tests, and skip only those tests which are not meaningfull\n+         *  for RealVector.\n+         */\n+    }\n+\n     @Test\n     public void testMap() throws Exception {\n         double[] vec1Squared = { 1d, 4d, 9d, 16d, 25d };\n--- a/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java\n     }\n \n     @Test\n-    public void testBasicFunctions() {\n-        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n-        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n-        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n-        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n-\n-        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n-\n-        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n-        double d_getNorm = v5.getNorm();\n-        Assert.assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm, normTolerance);\n-\n-        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n-        double d_getL1Norm = v5.getL1Norm();\n-        Assert.assertEquals(\"compare values  \", 17.0, d_getL1Norm, normTolerance);\n-\n-        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n-        double d_getLInfNorm = v5.getLInfNorm();\n-        Assert.assertEquals(\"compare values  \", 6.0, d_getLInfNorm, normTolerance);\n-\n-        //octave =  sqrt(sumsq(v1-v2))\n-        double dist = v1.getDistance(v2);\n-        Assert.assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist, normTolerance);\n-\n-        //octave =  sqrt(sumsq(v1-v2))\n-        double dist_2 = v1.getDistance(v2_t);\n-        Assert.assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2, normTolerance);\n-\n-        //octave =  ???\n-        double d_getL1Distance = v1. getL1Distance(v2);\n-        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance, normTolerance);\n-\n-        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n-        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance_2, normTolerance);\n-\n-        //octave =  ???\n-        double d_getLInfDistance = v1. getLInfDistance(v2);\n-        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance, normTolerance);\n-\n-        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n-        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance_2, normTolerance);\n-\n-        //octave =  v1 + v2\n-        OpenMapRealVector v_add = v1.add(v2);\n-        double[] result_add = {5d, 7d, 9d};\n-        assertClose(\"compare vect\" ,v_add.toArray(),result_add,normTolerance);\n-\n-        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n-        RealVector v_add_i = v1.add(vt2);\n-        double[] result_add_i = {5d, 7d, 9d};\n-        assertClose(\"compare vect\" ,v_add_i.toArray(),result_add_i,normTolerance);\n-\n-        //octave =  v1 - v2\n-        OpenMapRealVector v_subtract = v1.subtract(v2);\n-        double[] result_subtract = {-3d, -3d, -3d};\n-        assertClose(\"compare vect\" ,v_subtract.toArray(),result_subtract,normTolerance);\n-\n-        RealVector v_subtract_i = v1.subtract(vt2);\n-        double[] result_subtract_i = {-3d, -3d, -3d};\n-        assertClose(\"compare vect\" ,v_subtract_i.toArray(),result_subtract_i,normTolerance);\n-\n-        // octave v1 .* v2\n-        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n-        double[] result_ebeMultiply = {4d, 10d, 18d};\n-        assertClose(\"compare vect\" ,v_ebeMultiply.toArray(),result_ebeMultiply,normTolerance);\n-\n-        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n-        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n-        assertClose(\"compare vect\" ,v_ebeMultiply_2.toArray(),result_ebeMultiply_2,normTolerance);\n-\n-        // octave v1 ./ v2\n-        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n-        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n-        assertClose(\"compare vect\" ,v_ebeDivide.toArray(),result_ebeDivide,normTolerance);\n-\n-        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n-        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n-        assertClose(\"compare vect\" ,v_ebeDivide_2.toArray(),result_ebeDivide_2,normTolerance);\n-\n-        // octave  dot(v1,v2)\n-        double dot =  v1.dotProduct(v2);\n-        Assert.assertEquals(\"compare val \",32d, dot, normTolerance);\n-\n-        // octave  dot(v1,v2_t)\n-        double dot_2 =  v1.dotProduct(v2_t);\n-        Assert.assertEquals(\"compare val \",32d, dot_2, normTolerance);\n-\n-        RealMatrix m_outerProduct = v1.outerProduct(v2);\n-        Assert.assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0), normTolerance);\n-\n-        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n-        Assert.assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0), normTolerance);\n-\n-        RealVector v_unitVector = v1.unitVector();\n-        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n-        assertClose(\"compare vect\" ,v_unitVector.toArray(),v_unitVector_2.toArray(),normTolerance);\n-\n-        try {\n-            v_null.unitVector();\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-            // expected behavior\n-        }\n-\n-        OpenMapRealVector v_unitize = v1.copy();\n-        v_unitize.unitize();\n-        assertClose(\"compare vect\" ,v_unitVector_2.toArray(),v_unitize.toArray(),normTolerance);\n-        try {\n-            v_null.unitize();\n-            Assert.fail(\"Expecting MathArithmeticException\");\n-        } catch (MathArithmeticException ex) {\n-            // expected behavior\n-        }\n-\n-        RealVector v_projection = v1.projection(v2);\n-        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n-        assertClose(\"compare vect\", v_projection.toArray(), result_projection, normTolerance);\n-\n-        RealVector v_projection_2 = v1.projection(v2_t);\n-        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n-        assertClose(\"compare vect\", v_projection_2.toArray(), result_projection_2, normTolerance);\n-\n-    }\n-\n-    @Test\n     public void testOuterProduct() {\n         final OpenMapRealVector u = new OpenMapRealVector(new double[] {1, 2, -3});\n         final OpenMapRealVector v = new OpenMapRealVector(new double[] {4, -2});", "timestamp": 1338615280, "metainfo": ""}