{"sha": "68853bb1af4a06b562f786a3513d83b5b69cc2fa", "log": "Javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n \n /**\n  * Interface defining a real-valued matrix with basic algebraic operations\n- * @version $Revision: 1.9 $ $Date: 2004/01/29 00:49:03 $\n+ * @version $Revision: 1.10 $ $Date: 2004/01/29 04:58:36 $\n  */\n public interface RealMatrix {\n \n      * @param b  constant vector\n      * @return vector of solution values to AX = b, where A is *this\n      * @throws IllegalArgumentException if this.rowDimension != b.length \n-     * @throws InvalidMatrixException if this matrix is square or singular\n+     * @throws InvalidMatrixException if this matrix is not square or is singular\n      */\n     double[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException;\n     \n      * to solve\n      * @return matrix of solution vectors\n      * @throws IllegalArgumentException if this.rowDimension != row dimension\n-     * @throws InvalidMatrixException if this matrix is square or singular\n+     * @throws InvalidMatrixException if this matrix is not square or is singular\n      */\n     RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException;\n }\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n  * before using any of the methods above.\n  *\n- * @version $Revision: 1.11 $ $Date: 2004/01/29 00:49:03 $\n+ * @version $Revision: 1.12 $ $Date: 2004/01/29 04:58:36 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n \n \t * to solve\n \t * @return solution array\n \t * @throws IllegalArgumentException if this.rowDimension != row dimension\n-\t * @throws InvalidMatrixException if this matrix is square or singular\n+\t * @throws InvalidMatrixException if this matrix is not square or is singular\n \t */\n \tpublic double[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {\n \t\tint nRows = this.getRowDimension();\n \t * to solve\n \t * @return matrix of solution vectors\n \t * @throws IllegalArgumentException if this.rowDimension != row dimension\n-\t * @throws InvalidMatrixException if this matrix is square or singular\n+\t * @throws InvalidMatrixException if this matrix is not square or is singular\n \t */\n \tpublic RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException  {\n \t\tif (b.getRowDimension() != this.getRowDimension()) {", "timestamp": 1075352316, "metainfo": ""}