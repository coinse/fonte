{"sha": "9bf7c1810448834898149a371c2081d8662337f6", "log": "Reapply changes (mdiggory    2003/11/10 09:43:34)  Moving Distributions to higher level location from o.a.c.m.stat.distirbutions to o.a.c.m.distirbutions Changing Names of Univariates to DescriptiveStatistics and replacing Interface with Abstract Factory Implementation Moving BeanTransformer and ListUnivariate implmenetations to test directory.   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.14 $ $Date: 2003/11/15 16:01:35 $\n  */\n public abstract class AbstractContinuousDistribution\n     implements ContinuousDistribution {\n--- a/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n \n /**\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/15 16:01:35 $\n  */\n public abstract class AbstractDiscreteDistribution\n     implements DiscreteDistribution {\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistribution.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n /**\n  * The Binomial Distribution.\n  * Binomial Distribution</a></li>\n  * </ul>\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/15 16:01:35 $\n  */\n public interface BinomialDistribution extends DiscreteDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import org.apache.commons.logging.LogFactory;\n import org.apache.commons.math.MathException;\n /**\n  * The default implementation of {@link BinomialDistribution}.\n  * \n- * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:35 $\n  */\n public class BinomialDistributionImpl extends AbstractDiscreteDistribution\n     implements BinomialDistribution {\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n /**\n  * The Chi-Squared Distribution.\n  * Chi-Squared Distribution</a></li>\n  * </ul>\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:35 $\n  */\n public interface ChiSquaredDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n /**\n  * The default implementation of {@link ChiSquaredDistribution}\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:35 $\n  */\n public class ChiSquaredDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n /**\n  * Base interface for various continuous distributions.\n  * \n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:35 $\n  */\n public interface ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n /**\n  * Base interface for various discrete distributions.\n  * \n- * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:35 $\n  */\n public interface DiscreteDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n  * <http://www.apache.org/>.\n  */\n \n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import org.apache.commons.discovery.tools.DiscoverClass;\n \n  * ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);\n  * </pre>\n  * \n- * @version $Revision: 1.16 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.17 $ $Date: 2003/11/15 16:01:35 $\n  */\n public abstract class DistributionFactory {\n     /**\n             DiscoverClass dc = new DiscoverClass();\n             factory = (DistributionFactory) dc.newInstance(\n                 DistributionFactory.class,\n-                \"org.apache.commons.math.stat.distribution.DistributionFactoryImpl\");\n+                \"org.apache.commons.math.distribution.DistributionFactoryImpl\");\n         } catch(Exception ex) {\n             // ignore as default implementation will be used.\n         }\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n \n /**\n  * A concrete distribution factory.  This is the default factory used by\n  * Commons-Math.\n  *  \n- * @version $Revision: 1.14 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.15 $ $Date: 2003/11/15 16:01:36 $\n  */\n public class DistributionFactoryImpl extends DistributionFactory {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistribution.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n /**\n  * The Exponential Distribution.\n  * <li><a href=\"http://mathworld.wolfram.com/ExponentialDistribution.html\">\n  * Exponential Distribution</a></li>\n  * \n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:36 $\n  */\n public interface ExponentialDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n /**\n  * The default implementation of {@link ExponentialDistribution}\n  * \n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:36 $\n  */\n public class ExponentialDistributionImpl\n     implements ExponentialDistribution {\n--- a/src/java/org/apache/commons/math/distribution/FDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistribution.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n /**\n  * F-Distribution.\n  * F-Distribution</a></li>\n  * </ul>\n  * \n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:36 $\n  */\n public interface FDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import org.apache.commons.logging.LogFactory;\n import org.apache.commons.math.MathException;\n  * Default implementation of\n  * {@link org.apache.commons.math.stat.distribution.FDistribution}.\n  * \n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:36 $\n  */\n public class FDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistribution.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n /**\n  * The Gamma Distribution.\n  * Gamma Distribution</a></li>\n  * </ul>\n  *  \n- * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.11 $ $Date: 2003/11/15 16:01:36 $\n  */\n public interface GammaDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import org.apache.commons.logging.LogFactory;\n import org.apache.commons.math.MathException;\n /**\n  * The default implementation of {@link GammaDistribution}\n  * \n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/15 16:01:36 $\n  */\n public class GammaDistributionImpl extends AbstractContinuousDistribution\n     implements GammaDistribution {\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java\n  * <http://www.apache.org/>.\n  */\n \n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n /**\n  * The Hypergeometric Distribution.\n  * Hypergeometric Distribution</a></li>\n  * </ul>\n  * \n- * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:36 $\n  */\n public interface HypergeometricDistribution extends DiscreteDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n  * <http://www.apache.org/>.\n  */\n \n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import org.apache.commons.math.util.MathUtils;\n \n /**\n  * The default implementation of {@link HypergeometricDistribution}.\n  * \n- * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:19 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:36 $\n  */\n public class HypergeometricDistributionImpl extends AbstractDiscreteDistribution\n     implements HypergeometricDistribution\n--- a/src/java/org/apache/commons/math/distribution/TDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistribution.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n /**\n  * Student's t-Distribution.\n  * Student's t-Distribution</a></li>\n  * </ul>\n  * \n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:25:28 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:36 $\n  */\n public interface TDistribution extends ContinuousDistribution {\n     /**\n--- a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import org.apache.commons.logging.LogFactory;\n import org.apache.commons.math.MathException;\n  * Default implementation of\n  * {@link org.apache.commons.math.stat.distribution.TDistribution}.\n  * \n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:25:28 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:36 $\n  */\n public class TDistributionImpl\n     extends AbstractContinuousDistribution\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n import java.io.File;\n import java.util.ArrayList;\n \n-import org.apache.commons.math.stat.Univariate;\n+import org.apache.commons.math.stat.DescriptiveStatistics;\n \n /**\n  * Represents an <a href=\"http://random.mat.sbg.ac.at/~ste/dipl/node11.html\">\n  * build grouped frequnecy histograms representing the input data or to\n  * generate random values \"like\" those in the input file -- i.e., the values\n  * generated will follow the distribution of the values in the file.\n- * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:21 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:37 $\n  */\n public interface EmpiricalDistribution {\n     \n     \n      \n     /** \n-     * Returns a Univariate describing this distribution.\n+     * Returns a DescriptiveStatistics describing this distribution.\n      * <strong>Preconditions:</strong><ul>\n      * <li>the distribution must be loaded before invoking this method</li></ul>\n      * @return the sample statistics\n      * @throws IllegalStateException if the distribution has not been loaded\n      */\n-    Univariate getSampleStats() throws IllegalStateException;\n+    DescriptiveStatistics getSampleStats() throws IllegalStateException;\n     \n     /** \n      * Loads a saved distribution from a file.\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n import java.io.File;\n import java.io.IOException;\n \n-import org.apache.commons.math.stat.Univariate;\n-import org.apache.commons.math.stat.UnivariateImpl;\n+import org.apache.commons.math.stat.DescriptiveStatistics;\n+import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;\n \n /**\n  * Implements <code>EmpiricalDistribution</code> interface.  This implementation\n  *    entry per line.</li>\n  * </ol></p>\n  *\n- * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:21 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:37 $\n  */\n public class EmpiricalDistributionImpl implements Serializable,EmpiricalDistribution {\n \n     \n-    /** List of Univariate objects characterizing the bins */\n+    /** List of DescriptiveStatistics objects characterizing the bins */\n     private ArrayList binStats = null;\n     \n     /** Sample statistics */\n-    Univariate sampleStats = null;\n+    DescriptiveStatistics sampleStats = null;\n     \n     /** number of bins */\n     private int binCount = 1000;\n             in = new BufferedReader(new FileReader(file));\n             String str = null;\n             double val = 0.0;\n-            sampleStats = new UnivariateImpl();\n+            sampleStats = new StorelessDescriptiveStatisticsImpl();\n             while ((str = in.readLine()) != null) {\n               val = new Double(str).doubleValue();\n               sampleStats.addValue(val);   \n             binStats.clear();\n         }\n         for (int i = 0; i < binCount; i++) {\n-            Univariate stats = new UnivariateImpl();\n+            DescriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();\n             binStats.add(i,stats);\n         }\n          \n                   }\n                   if (val <= binUpperBounds[i]) {\n                       found = true;\n-                      Univariate stats = (Univariate)binStats.get(i);\n+                      DescriptiveStatistics stats = (DescriptiveStatistics)binStats.get(i);\n                       stats.addValue(val);\n                   }\n                   i++;\n          // Assign upperBounds based on bin counts\n          upperBounds = new double[binCount];\n          upperBounds[0] = \n-            ((double)((Univariate)binStats.get(0)).getN())/\n+            ((double)((DescriptiveStatistics)binStats.get(0)).getN())/\n                 (double)sampleStats.getN();\n          for (int i = 1; i < binCount-1; i++) {\n              upperBounds[i] = upperBounds[i-1] +\n-             ((double)((Univariate)binStats.get(i)).getN())/\n+             ((double)((DescriptiveStatistics)binStats.get(i)).getN())/\n                 (double)sampleStats.getN();\n          }\n          upperBounds[binCount-1] = 1.0d;   \n         // Use this to select the bin and generate a Gaussian within the bin\n         for (int i = 0; i < binCount; i++) {\n            if (x <= upperBounds[i]) {\n-               Univariate stats = (Univariate)binStats.get(i);\n+               DescriptiveStatistics stats = (DescriptiveStatistics)binStats.get(i);\n                if (stats.getN() > 0) { \n                    if (stats.getStandardDeviation() > 0) {  // more than one obs \n                         return randomData.nextGaussian\n        throw new UnsupportedOperationException(\"Not Implemented yet :-(\");\n     }\n         \n-    public Univariate getSampleStats() {\n+    public DescriptiveStatistics getSampleStats() {\n         return sampleStats;\n     }\n     \n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/AbstractDescriptiveStatistics.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.Arrays;\n+\n+import org.apache.commons.math.stat.univariate.rank.Percentile;\n+\n+/**\n+ * Provides univariate measures for an array of doubles. \n+ * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:37 $\n+ */\n+public abstract class AbstractDescriptiveStatistics\n+    extends AbstractStorelessDescriptiveStatistics {\n+\n+    /** Percentile */\n+    protected Percentile percentile = new Percentile(50);\n+        \n+    /**\n+     * Create an AbstractDescriptiveStatistics\n+     */\n+    public AbstractDescriptiveStatistics() {\n+        super();\n+    }\n+\n+    /**\n+     * Create an AbstractDescriptiveStatistics with a specific Window\n+     * @param window WindowSIze for stat calculation\n+     */\n+    public AbstractDescriptiveStatistics(int window) {\n+        super(window);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getPercentile(double)\n+     */\n+    public double getPercentile(double p) {\n+        percentile.setPercentile(p);\n+        return apply(percentile);\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getSortedValues()\n+     */\n+    public double[] getSortedValues() {\n+        double[] sort = getValues();\n+        Arrays.sort(sort);\n+        return sort;\n+    }\n+    \n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+     */\n+    public abstract void addValue(double value);\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getValues()\n+     */\n+    public abstract double[] getValues();\n+\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getElement(int)\n+     */\n+    public abstract double getElement(int index);\n+\n+\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/AbstractStorelessDescriptiveStatistics.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+import org.apache.commons.math.stat.univariate.moment.FourthMoment;\n+import org.apache.commons.math.stat.univariate.moment.GeometricMean;\n+import org.apache.commons.math.stat.univariate.moment.Kurtosis;\n+import org.apache.commons.math.stat.univariate.moment.Mean;\n+import org.apache.commons.math.stat.univariate.moment.Skewness;\n+import org.apache.commons.math.stat.univariate.moment.Variance;\n+import org.apache.commons.math.stat.univariate.rank.Max;\n+import org.apache.commons.math.stat.univariate.rank.Min;\n+import org.apache.commons.math.stat.univariate.summary.Sum;\n+import org.apache.commons.math.stat.univariate.summary.SumOfLogs;\n+import org.apache.commons.math.stat.univariate.summary.SumOfSquares;\n+\n+/**\n+ * Provides univariate measures for an array of doubles.\n+ * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:37 $  \n+ */\n+public abstract class AbstractStorelessDescriptiveStatistics extends DescriptiveStatistics {\n+\n+    /** hold the window size **/\n+    protected int windowSize = INFINITE_WINDOW;\n+\n+    /** count of values that have been added */\n+    protected int n = 0;\n+\n+    /** FourthMoment is used in calculating mean, variance,skew and kurtosis */\n+    protected FourthMoment moment = null;\n+    \n+    /** sum of values that have been added */\n+    protected Sum sum = null;\n+\n+    /** sum of the square of each value that has been added */\n+    protected SumOfSquares sumsq = null;\n+\n+    /** min of values that have been added */\n+    protected Min min = null;\n+\n+    /** max of values that have been added */\n+    protected Max max = null;\n+\n+    /** sumLog of values that have been added */\n+    protected SumOfLogs sumLog = null;\n+\n+    /** geoMean of values that have been added */\n+    protected GeometricMean geoMean = null;\n+\n+    /** mean of values that have been added */\n+    protected Mean mean = null;\n+\n+    /** variance of values that have been added */\n+    protected Variance variance = null;\n+\n+    /** skewness of values that have been added */\n+    protected Skewness skewness = null;\n+\n+    /** kurtosis of values that have been added */\n+    protected Kurtosis kurtosis = null;\n+\n+    /**\n+     * Construct an AbstractStorelessDescriptiveStatistics\n+     */\n+    public AbstractStorelessDescriptiveStatistics() {\n+        super();\n+        \n+        sum = new Sum();\n+        sumsq = new SumOfSquares();\n+        min = new Min();\n+        max = new Max();\n+        sumLog = new SumOfLogs();\n+        geoMean = new GeometricMean();\n+\n+        moment = new FourthMoment();\n+        mean = new Mean(moment);\n+        variance = new Variance(moment);\n+        skewness = new Skewness(moment);\n+        kurtosis = new Kurtosis(moment);\n+    }\n+\n+    /**\n+     * Construct an AbstractStorelessDescriptiveStatistics with a window\n+     * @param window The Window Size\n+     */\n+    public AbstractStorelessDescriptiveStatistics(int window) {\n+        this();\n+        setWindowSize(window);\n+    }\n+\n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n+     */\n+    public abstract double apply(UnivariateStatistic stat);\n+    \n+\n+    /**\n+     * If windowSize is set to Infinite, \n+     * statistics are calculated using the following \n+     * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n+     * recursive strategy\n+     * </a>.\n+     * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+     */\n+    public abstract void addValue(double value);\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getN()\n+     */\n+    public int getN() {\n+        return n;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getSum()\n+     */\n+    public double getSum() {\n+        return apply(sum);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getSumsq()\n+     */\n+    public double getSumsq() {\n+        return apply(sumsq);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getMean()\n+     */\n+    public double getMean() {\n+        return apply(mean);\n+    }\n+\n+    /**\n+     * Returns the standard deviation for this collection of values\n+     * @see org.apache.commons.math.stat.Univariate#getStandardDeviation()\n+     */\n+    public double getStandardDeviation() {\n+        double stdDev = Double.NaN;\n+        if (getN() > 0) {\n+            if (getN() > 1) {\n+                stdDev = Math.sqrt(getVariance());\n+            } else {\n+                stdDev = 0.0;\n+            }\n+        }\n+        return (stdDev);\n+    }\n+\n+    /**\n+     * Returns the variance of the values that have been added via West's\n+     * algorithm as described by\n+     * <a href=\"http://doi.acm.org/10.1145/359146.359152\">Chan, T. F. and\n+     * J. G. Lewis 1979, <i>Communications of the ACM</i>,\n+     * vol. 22 no. 9, pp. 526-531.</a>.\n+     *\n+     * @return The variance of a set of values.  \n+     *         Double.NaN is returned for an empty \n+     *         set of values and 0.0 is returned for \n+     *         a &lt;= 1 value set.\n+     */\n+    public double getVariance() {\n+        return apply(variance);\n+    }\n+\n+    /**\n+     * Returns the skewness of the values that have been added as described by\n+     * <a href=\"http://mathworld.wolfram.com/k-Statistic.html\">\n+     * Equation (6) for k-Statistics</a>.\n+     * @return The skew of a set of values.  Double.NaN is returned for\n+     *         an empty set of values and 0.0 is returned for a \n+     *         &lt;= 2 value set.\n+     */\n+    public double getSkewness() {\n+        return apply(skewness);\n+    }\n+\n+    /**\n+     * Returns the kurtosis of the values that have been added as described by\n+     * <a href=\"http://mathworld.wolfram.com/k-Statistic.html\">\n+     * Equation (7) for k-Statistics</a>.\n+     *\n+     * @return The kurtosis of a set of values.  Double.NaN is returned for\n+     *         an empty set of values and 0.0 is returned for a &lt;= 3 \n+     *         value set.\n+     */\n+    public double getKurtosis() {\n+        return apply(kurtosis);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getKurtosisClass()\n+     */\n+    public int getKurtosisClass() {\n+        int kClass = MESOKURTIC;\n+\n+        double kurtosis = getKurtosis();\n+        if (kurtosis > 0) {\n+            kClass = LEPTOKURTIC;\n+        } else if (kurtosis < 0) {\n+            kClass = PLATYKURTIC;\n+        }\n+        return (kClass);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getMax()\n+     */\n+    public double getMax() {\n+        return apply(max);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getMin()\n+     */\n+    public double getMin() {\n+        return apply(min);\n+    }\n+\n+    /**\n+    * @see org.apache.commons.math.stat.Univariate#getGeometricMean()\n+    */\n+    public double getGeometricMean() {\n+        return apply(geoMean);\n+    }\n+    \n+    /**\n+     * Generates a text report displaying\n+     * univariate statistics from values that\n+     * have been added.\n+     * @return String with line feeds displaying statistics\n+     */\n+    public String toString() {\n+        StringBuffer outBuffer = new StringBuffer();\n+        outBuffer.append(\"UnivariateImpl:\\n\");\n+        outBuffer.append(\"n: \" + n + \"\\n\");\n+        outBuffer.append(\"min: \" + min + \"\\n\");\n+        outBuffer.append(\"max: \" + max + \"\\n\");\n+        outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+        outBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+        outBuffer.append(\"skewness: \" + getSkewness() + \"\\n\");\n+        outBuffer.append(\"kurtosis: \" + getKurtosis() + \"\\n\");\n+        return outBuffer.toString();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#clear()\n+     */\n+    public void clear() {\n+        this.n = 0;\n+        min.clear();\n+        max.clear();\n+        sum.clear();\n+        sumLog.clear();\n+        sumsq.clear();\n+        geoMean.clear();\n+        \n+        moment.clear();\n+        mean.clear();\n+        variance.clear();\n+        skewness.clear();\n+        kurtosis.clear();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getWindowSize()\n+     */\n+    public int getWindowSize() {\n+        return windowSize;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#setWindowSize(int)\n+     */\n+    public void setWindowSize(int windowSize) {\n+        clear();\n+        this.windowSize = windowSize;\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/math/stat/BivariateRegression.java\n+++ b/src/java/org/apache/commons/math/stat/BivariateRegression.java\n  */\n \n package org.apache.commons.math.stat;\n-import org.apache.commons.math.stat.distribution.DistributionFactory;\n-import org.apache.commons.math.stat.distribution.TDistribution;\n+import org.apache.commons.math.distribution.DistributionFactory;\n+import org.apache.commons.math.distribution.TDistribution;\n \n /**\n  * Estimates an ordinary least squares regression model\n  * the necessary computations to return the requested statistic.</li>\n  * </ul>\n  *\n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:38 $\n  */\n public class BivariateRegression {\n     \n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/DescriptiveStatistics.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import org.apache.commons.discovery.tools.DiscoverClass;\n+\n+/**\n+ * DescriptiveStatistics implements the Univariate interface \n+ * but maintains the set of values which contribute to \n+ * the values being returned.  This implementation of \n+ * Univariate provides additional percentile functionality \n+ * such as.  This additional functionality comes with \n+ * a price of increased storage costs.\n+ * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:38 $\n+ */\n+public abstract class DescriptiveStatistics {\n+\n+\t/**\n+\t * Create an instance of a <code>DescriptiveStatistics</code>\n+\t * @return a new factory. \n+\t */\n+\tpublic static DescriptiveStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+\t\treturn newInstance(Class.forName(cls));\n+\t}\n+\t/**\n+\t * Create an instance of a <code>DescriptiveStatistics</code>\n+\t * @return a new factory. \n+\t */\n+\tpublic static DescriptiveStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n+\t\treturn (DescriptiveStatistics)cls.newInstance();\n+\t}\n+\t\n+\t\t/**\n+\t * Create an instance of a <code>DescriptiveStatistics</code>\n+\t * @return a new factory. \n+\t */\n+\tpublic static DescriptiveStatistics newInstance() {\n+\t\tDescriptiveStatistics factory = null;\n+\t\ttry {\n+\t\t\tDiscoverClass dc = new DiscoverClass();\n+\t\t\tfactory = (DescriptiveStatistics) dc.newInstance(\n+\t\t\t\tDescriptiveStatistics.class,\n+\t\t\t\t\"org.apache.commons.math.stat.DescriptiveStatisticsImpl\");\n+\t\t} catch(Exception ex) {\n+\t\t\t// ignore as default implementation will be used.\n+\t\t}\n+\t\treturn factory;\n+\t}\n+\t\n+\t/**\n+\t * This constant signals that a Univariate implementation\n+\t * takes into account the contributions of an infinite number of\n+\t * elements.  In other words, if getWindow returns this\n+\t * constant, there is, in effect, no \"window\".\n+\t */\n+\tpublic static final int INFINITE_WINDOW = -1;\n+\n+\t/**\n+\t * A LEPTOKURTIC set has a positive kurtosis (a high peak) \n+\t */\n+\tpublic static int LEPTOKURTIC = 1;\n+\t/**\n+\t * A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution\n+\t */\n+\tpublic static int MESOKURTIC = 0;\n+\t/**\n+\t * A PLATYKURTIC set has a negative kurtosis (a flat \"peak\")\n+\t */\n+\tpublic static int PLATYKURTIC = -1;\n+\n+\t/**\n+\t * Adds the value to the set of numbers\n+\t * @param v the value to be added \n+\t */\n+\tpublic abstract void addValue(double v);\n+\n+\t/** \n+\t * Returns the <a href=\"http://www.xycoon.com/arithmetic_mean.htm\">\n+\t * arithmetic mean </a> of the available values \n+\t * @return The mean or Double.NaN if no values have been added.\n+\t */\n+\tpublic abstract double getMean();\n+\n+\t/** \n+\t * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n+\t * geometric mean </a> of the available values\n+\t * @return The geometricMean, Double.NaN if no values have been added, \n+\t * or if the productof the available values is less than or equal to 0.\n+\t */\n+\tpublic abstract double getGeometricMean();\n+\n+\t/** \n+\t * Returns the variance of the available values.\n+\t * @return The variance, Double.NaN if no values have been added \n+\t * or 0.0 for a single value set.  \n+\t */\n+\tpublic abstract double getVariance();\n+\n+\t/** \n+\t * Returns the standard deviation of the available values.\n+\t * @return The standard deviation, Double.NaN if no values have been added \n+\t * or 0.0 for a single value set. \n+\t */\n+\tpublic abstract double getStandardDeviation();\n+\n+\t/**\n+\t * Returns the skewness of the available values. Skewness is a \n+\t * measure of the assymetry of a given distribution.\n+\t * @return The skewness, Double.NaN if no values have been added \n+\t * or 0.0 for a value set &lt;=2. \n+\t */\n+\tpublic abstract double getSkewness();\n+\n+\t/**\n+\t * Returns the Kurtosis of the available values. Kurtosis is a \n+\t * measure of the \"peakedness\" of a distribution\n+\t * @return The kurtosis, Double.NaN if no values have been added, or 0.0 \n+\t * for a value set &lt;=3. \n+\t */\n+\tpublic abstract double getKurtosis();\n+\n+\t/**\n+\t * Returns the Kurtosis \"classification\" a distribution can be \n+\t * leptokurtic (high peak), platykurtic (flat peak), \n+\t * or mesokurtic (zero kurtosis).  \n+\t * \n+\t * @return A static constant defined in this interface, \n+\t *         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or \n+\t *         StoredDeviation.MESOKURTIC\n+\t */\n+\tpublic abstract int getKurtosisClass();\n+    \n+\t/** \n+\t * Returns the maximum of the available values\n+\t * @return The max or Double.NaN if no values have been added.\n+\t */\n+\tpublic abstract double getMax();\n+\n+\t/** \n+\t* Returns the minimum of the available values\n+\t* @return The min or Double.NaN if no values have been added.\n+\t*/\n+\tpublic abstract double getMin();\n+\n+\t/** \n+\t * Returns the number of available values\n+\t * @return The number of available values\n+\t */\n+\tpublic abstract int getN();\n+\n+\t/**\n+\t * Returns the sum of the values that have been added to Univariate.\n+\t * @return The sum or Double.NaN if no values have been added\n+\t */\n+\tpublic abstract double getSum();\n+\n+\t/**\n+\t * Returns the sum of the squares of the available values.\n+\t * @return The sum of the squares or Double.NaN if no \n+\t * values have been added.\n+\t */\n+\tpublic abstract double getSumsq();\n+\n+\t/** \n+\t * Resets all statistics and storage\n+\t */\n+\tpublic abstract void clear();\n+\n+\t/**\n+\t * Univariate has the ability to return only measures for the\n+\t * last N elements added to the set of values.\n+\t * @return The current window size or -1 if its Infinite.\n+\t */\n+\n+\tpublic abstract int getWindowSize();\n+\n+\t/**\n+\t * WindowSize controls the number of values which contribute \n+\t * to the values returned by Univariate.  For example, if \n+\t * windowSize is set to 3 and the values {1,2,3,4,5} \n+\t * have been added <strong> in that order</strong> \n+\t * then the <i>available values</i> are {3,4,5} and all\n+\t * reported statistics will be based on these values\n+\t * @param windowSize sets the size of the window.\n+\t */\n+\tpublic abstract void setWindowSize(int windowSize);\n+\t\n+    /**\n+     * Returns the current set of values in an array of double primitives.  \n+     * The order of addition is preserved.  The returned array is a fresh\n+     * copy of the underlying data -- i.e., it is not a reference to the\n+     * stored data.\n+     * \n+     * @return returns the current set of numbers in the order in which they \n+     *         were added to this set\n+     */\n+\tpublic abstract double[] getValues();\n+\n+    /**\n+     * Returns the current set of values in an array of double primitives,  \n+     * sorted in ascending order.  The returned array is a fresh\n+     * copy of the underlying data -- i.e., it is not a reference to the\n+     * stored data.\n+     * @return returns the current set of \n+     * numbers sorted in ascending order        \n+     */\n+\tpublic abstract double[] getSortedValues();\n+\n+    /**\n+     * Returns the element at the specified index\n+     * @param index The Index of the element\n+     * @return return the element at the specified index\n+     */\n+\tpublic abstract double getElement(int index);\n+\n+    /**\n+     * Returns an estimate for the pth percentile of the stored values. \n+     * This estimate follows the interpolation-adjusted defintion presented \n+     * <a href=\"http://www.utdallas.edu/~ammann/stat5311/node8.html\">here</a>\n+     * <p/>\n+     * <strong>Preconditions</strong>:<ul>\n+     * <li><code>0 &lt; p &lt; 100</code> (otherwise an \n+     * <code>IllegalArgumentException</code> is thrown)</li>\n+     * <li>at least one value must be stored (returns <code>Double.NaN\n+     *     </code> otherwise)</li>\n+     * </ul>\n+     * \n+     * @param p the requested percentile (scaled from 0 - 100)\n+     * @return An estimate for the pth percentile of the stored data \n+     * values\n+     */\n+\tpublic abstract double getPercentile(double p);\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import org.apache.commons.math.stat.univariate.*;\n+import org.apache.commons.math.util.ContractableDoubleArray;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:38 $\n+ */\n+public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics {\n+\n+    /** A contractable double array is used.  memory is reclaimed when \n+     * the storage of the array becomes too empty.\n+     */\n+    protected ContractableDoubleArray eDA;\n+\n+    /**\n+     * Construct a DescriptiveStatisticsImpl\n+     */\n+    public DescriptiveStatisticsImpl() {\n+        eDA = new ContractableDoubleArray();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getValues()\n+     */\n+    public double[] getValues() {\n+\n+        double[] copiedArray = new double[eDA.getNumElements()];\n+        System.arraycopy(\n+            eDA.getElements(),\n+            0,\n+            copiedArray,\n+            0,\n+            eDA.getNumElements());\n+        return copiedArray;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getElement(int)\n+     */\n+    public double getElement(int index) {\n+        return eDA.getElement(index);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#getN()\n+     */\n+    public int getN() {\n+        return eDA.getNumElements();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+     */\n+    public synchronized void addValue(double v) {\n+        if (windowSize != INFINITE_WINDOW) {\n+            if (getN() == windowSize) {\n+                eDA.addElementRolling(v);\n+            } else if (getN() < windowSize) {\n+                eDA.addElement(v);\n+            } else {\n+                String msg =\n+                    \"A window Univariate had more element than \" +\n+                    \"the windowSize.  This is an inconsistent state.\";\n+                throw new RuntimeException(msg);\n+            }\n+        } else {\n+            eDA.addElement(v);\n+        }\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#clear()\n+     */\n+    public synchronized void clear() {\n+        super.clear();\n+        eDA.clear();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.Univariate#setWindowSize(int)\n+     */\n+    public synchronized void setWindowSize(int windowSize) {\n+        this.windowSize = windowSize;\n+\n+        // We need to check to see if we need to discard elements\n+        // from the front of the array.  If the windowSize is less than \n+        // the current number of elements.\n+        if (windowSize < eDA.getNumElements()) {\n+            eDA.discardFrontElements(eDA.getNumElements() - windowSize);\n+        }\n+    }\n+\n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n+     */\n+    public double apply(UnivariateStatistic stat) {\n+        if (eDA != null) {\n+            return stat.evaluate(eDA.getValues(), eDA.start(), eDA.getNumElements());\n+        }\n+        return Double.NaN;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/stat/StorelessDescriptiveStatisticsImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.math.stat.univariate.*;\n+import org.apache.commons.math.util.FixedDoubleArray;\n+\n+/**\n+ *\n+ * Accumulates univariate statistics for values fed in\n+ * through the addValue() method.  Does not store raw data values.\n+ * All data are represented internally as doubles.\n+ * Integers, floats and longs can be added, but they will be converted\n+ * to doubles by addValue().\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:38 $\n+*/\n+public class StorelessDescriptiveStatisticsImpl\n+\textends AbstractStorelessDescriptiveStatistics\n+\timplements Serializable {\n+\n+\t/** fixed storage */\n+\tprivate FixedDoubleArray storage = null;\n+\n+\t/** Creates new univariate with an infinite window */\n+\tpublic StorelessDescriptiveStatisticsImpl() {\n+\t\tsuper();\n+\t}\n+\n+\t/** \n+\t * Creates a new univariate with a fixed window \n+\t * @param window Window Size\n+\t */\n+\tpublic StorelessDescriptiveStatisticsImpl(int window) {\n+\t\tsuper(window);\n+\t\tstorage = new FixedDoubleArray(window);\n+\t}\n+\n+\t/**\n+\t *  If windowSize is set to Infinite, moments \n+\t *  are calculated using the following \n+\t * <a href=\"http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf\">\n+\t * recursive strategy\n+\t * </a>.\n+\t * Otherwise, stat methods delegate to StatUtils.\n+\t * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+\t */\n+\tpublic void addValue(double value) {\n+\n+\t\tif (storage != null) {\n+\t\t\t/* then all getters deligate to StatUtils\n+\t\t\t * and this clause simply adds/rolls a value in the storage array \n+\t\t\t */\n+\t\t\tif (getWindowSize() == n) {\n+\t\t\t\tstorage.addElementRolling(value);\n+\t\t\t} else {\n+\t\t\t\tn++;\n+\t\t\t\tstorage.addElement(value);\n+\t\t\t}\n+\n+\t\t} else {\n+\t\t\t/* If the windowSize is infinite don't store any values and there \n+\t\t\t * is no need to discard the influence of any single item.\n+\t\t\t */\n+\t\t\tn++;\n+\t\t\tmin.increment(value);\n+\t\t\tmax.increment(value);\n+\t\t\tsum.increment(value);\n+\t\t\tsumsq.increment(value);\n+\t\t\tsumLog.increment(value);\n+\t\t\tgeoMean.increment(value);\n+\n+\t\t\tmoment.increment(value);\n+\t\t\t//mean.increment(value);\n+\t\t\t//variance.increment(value);\n+\t\t\t//skewness.increment(value);\n+\t\t\t//kurtosis.increment(value);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Generates a text report displaying\n+\t * univariate statistics from values that\n+\t * have been added.\n+\t * @return String with line feeds displaying statistics\n+\t */\n+\tpublic String toString() {\n+\t\tStringBuffer outBuffer = new StringBuffer();\n+\t\toutBuffer.append(\"UnivariateImpl:\\n\");\n+\t\toutBuffer.append(\"n: \" + getN() + \"\\n\");\n+\t\toutBuffer.append(\"min: \" + getMin() + \"\\n\");\n+\t\toutBuffer.append(\"max: \" + getMax() + \"\\n\");\n+\t\toutBuffer.append(\"mean: \" + getMean() + \"\\n\");\n+\t\toutBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+\t\toutBuffer.append(\"skewness: \" + getSkewness() + \"\\n\");\n+\t\toutBuffer.append(\"kurtosis: \" + getKurtosis() + \"\\n\");\n+\t\treturn outBuffer.toString();\n+\t}\n+\n+\t/**\n+\t * @see org.apache.commons.math.stat.Univariate#clear()\n+\t */\n+\tpublic void clear() {\n+\t\tsuper.clear();\n+\t\tif (getWindowSize() != INFINITE_WINDOW) {\n+\t\t\tstorage = new FixedDoubleArray(getWindowSize());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Apply the given statistic to this univariate collection.\n+\t * @param stat the statistic to apply\n+\t * @return the computed value of the statistic.\n+\t */\n+\tpublic double apply(UnivariateStatistic stat) {\n+\n+\t\tif (storage != null) {\n+\t\t\treturn stat.evaluate(\n+\t\t\t\tstorage.getValues(),\n+\t\t\t\tstorage.start(),\n+\t\t\t\tstorage.getNumElements());\n+\t\t} else if (stat instanceof StorelessUnivariateStatistic) {\n+\t\t\treturn ((StorelessUnivariateStatistic) stat).getResult();\n+\t\t}\n+\n+\t\treturn Double.NaN;\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.stat.DescriptiveStatistics#getValues()\n+\t */\n+\tpublic double[] getValues() {\n+\t\tthrow new UnsupportedOperationException(\"Only Available with Finite Window\");\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.stat.DescriptiveStatistics#getSortedValues()\n+\t */\n+\tpublic double[] getSortedValues() {\n+\t\tthrow new UnsupportedOperationException(\"Only Available with Finite Window\");\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.stat.DescriptiveStatistics#getElement(int)\n+\t */\n+\tpublic double getElement(int index) {\n+\t\tthrow new UnsupportedOperationException(\"Only Available with Finite Window\");\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.apache.commons.math.stat.DescriptiveStatistics#getPercentile(double)\n+\t */\n+\tpublic double getPercentile(double p) {\n+\t\tthrow new UnsupportedOperationException(\"Only Available with Finite Window\");\n+\t}\n+\n+}\n--- a/src/java/org/apache/commons/math/stat/TestStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/TestStatistic.java\n /**\n  * A collection of commonly used test statistics and statistical tests.\n  * \n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $ \n+ * @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:38 $ \n  */\n public interface TestStatistic {\n     \n      * </li></ul>\n      *\n      * @param mu comparison constant\n-     * @param sampleStats Univariate holding sample summary statitstics\n+     * @param sampleStats DescriptiveStatistics holding sample summary statitstics\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    double t(double mu, Univariate sampleStats) \n+    double t(double mu, DescriptiveStatistics sampleStats) \n         throws IllegalArgumentException;\n     \n     /**\n      * at least 5 observations.\n      * </li></ul>\n      *\n-     * @param sampleStats1 Univariate describing data from the first sample\n-     * @param sampleStats2 Univariate describing data from the second sample\n+     * @param sampleStats1 DescriptiveStatistics describing data from the first sample\n+     * @param sampleStats2 DescriptiveStatistics describing data from the second sample\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    double t(Univariate sampleStats1, Univariate sampleStats2) \n+    double t(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2) \n         throws IllegalArgumentException;\n     \n     /**\n      * at least 5 observations.\n      * </li></ul>\n      *\n-     * @param sampleStats1 Univariate describing data from the first sample\n-     * @param sampleStats2 Univariate describing data from the second sample\n+     * @param sampleStats1 DescriptiveStatistics describing data from the first sample\n+     * @param sampleStats2 DescriptiveStatistics describing data from the second sample\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    double tTest(Univariate sampleStats1, Univariate sampleStats2)\n+    double tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2)\n         throws IllegalArgumentException;\n     \n     /**\n      * <li> <code> 0 < alpha < 0.5 </code>\n      * </li></ul>\n      *\n-     * @param sampleStats1 Univariate describing sample data values\n-     * @param sampleStats2 Univariate describing sample data values\n+     * @param sampleStats1 DescriptiveStatistics describing sample data values\n+     * @param sampleStats2 DescriptiveStatistics describing sample data values\n      * @param alpha significance level of the test\n      * @return true if the null hypothesis can be rejected with \n      * confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n      */\n-    boolean tTest(Univariate sampleStats1, Univariate sampleStats2, \n+    boolean tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2, \n         double alpha)\n         throws IllegalArgumentException;\n     \n      * </li></ul>\n      *\n      * @param mu constant value to compare sample mean against\n-     * @param sampleStats Univariate describing sample data values\n+     * @param sampleStats DescriptiveStatistics describing sample data values\n      * @param alpha significance level of the test\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    boolean tTest(double mu, Univariate sampleStats, double alpha)\n+    boolean tTest(double mu, DescriptiveStatistics sampleStats, double alpha)\n         throws IllegalArgumentException;\n     \n     /**\n      * </li></ul>\n      *\n      * @param mu constant value to compare sample mean against\n-     * @param sampleStats Univariate describing sample data\n+     * @param sampleStats DescriptiveStatistics describing sample data\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    double tTest(double mu, Univariate sampleStats)\n+    double tTest(double mu, DescriptiveStatistics sampleStats)\n         throws IllegalArgumentException;\n }\n \n--- a/src/java/org/apache/commons/math/stat/TestStatisticImpl.java\n+++ b/src/java/org/apache/commons/math/stat/TestStatisticImpl.java\n \n package org.apache.commons.math.stat;\n \n-import org.apache.commons.math.stat.distribution.DistributionFactory;\n-import org.apache.commons.math.stat.distribution.TDistribution;\n-import org.apache.commons.math.stat.distribution.ChiSquaredDistribution;\n+import org.apache.commons.math.distribution.DistributionFactory;\n+import org.apache.commons.math.distribution.TDistribution;\n+import org.apache.commons.math.distribution.ChiSquaredDistribution;\n \n /**\n  * Implements test statistics defined in the TestStatistic interface.\n  *\n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:18 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:39 $\n  */\n public class TestStatisticImpl implements TestStatistic {\n     \n     \n     /**\n      * @param mu comparison constant\n-     * @param sampleStats Univariate holding sample summary statitstics\n+     * @param sampleStats DescriptiveStatistics holding sample summary statitstics\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    public double t(double mu, Univariate sampleStats) \n+    public double t(double mu, DescriptiveStatistics sampleStats) \n         throws IllegalArgumentException {\n         if ((sampleStats == null) || (sampleStats.getN() < 5)) {\n             throw new IllegalArgumentException\n     }\n     \n     /**\n-     * @param sampleStats1 Univariate describing data from the first sample\n-     * @param sampleStats2 Univariate describing data from the second sample\n+     * @param sampleStats1 DescriptiveStatistics describing data from the first sample\n+     * @param sampleStats2 DescriptiveStatistics describing data from the second sample\n      * @return t statistic\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    public double t(Univariate sampleStats1, Univariate sampleStats2) \n+    public double t(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2) \n         throws IllegalArgumentException {\n         if ((sampleStats1 == null) || (sampleStats2 == null || \n             Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {\n     }\n     \n     /**\n-     * @param sampleStats1 Univariate describing data from the first sample\n-     * @param sampleStats2 Univariate describing data from the second sample\n+     * @param sampleStats1 DescriptiveStatistics describing data from the first sample\n+     * @param sampleStats2 DescriptiveStatistics describing data from the second sample\n      * @return p-value for t-test\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    public double tTest(Univariate sampleStats1, Univariate sampleStats2)\n+    public double tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2)\n         throws IllegalArgumentException {\n         if ((sampleStats1 == null) || (sampleStats2 == null || \n             Math.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {\n     }\n     \n     /**\n-     * @param sampleStats1 Univariate describing sample data values\n-     * @param sampleStats2 Univariate describing sample data values\n+     * @param sampleStats1 DescriptiveStatistics describing sample data values\n+     * @param sampleStats2 DescriptiveStatistics describing sample data values\n      * @param alpha significance level of the test\n      * @return true if the null hypothesis can be rejected with \n      * confidence 1 - alpha\n      * @throws IllegalArgumentException if the preconditions are not met\n      */\n-    public boolean tTest(Univariate sampleStats1, Univariate sampleStats2, \n+    public boolean tTest(DescriptiveStatistics sampleStats1, DescriptiveStatistics sampleStats2, \n     double alpha) throws IllegalArgumentException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n             throw new IllegalArgumentException\n     \n     /**\n      * @param mu constant value to compare sample mean against\n-     * @param sampleStats Univariate describing sample data values\n+     * @param sampleStats DescriptiveStatistics describing sample data values\n      * @param alpha significance level of the test\n      * @return p-value\n      * @throws IllegalArgumentException if the precondition is not met\n      */\n-    public boolean tTest(double mu, Univariate sampleStats, double alpha)\n+    public boolean tTest(double mu, DescriptiveStatistics sampleStats, double alpha)\n         throws IllegalArgumentException {\n         if ((alpha <= 0) || (alpha > 0.5)) {\n            throw new IllegalArgumentException\n     \n     /**\n      * @param mu constant value to compare sample mean against\n-     * @param sampleStats Univariate describing sample data\n-     * @return p-value\n-     * @throws IllegalArgumentException if the precondition is not met\n-     */\n-    public double tTest(double mu, Univariate sampleStats)\n+     * @param sampleStats DescriptiveStatistics describing sample data\n+     * @return p-value\n+     * @throws IllegalArgumentException if the precondition is not met\n+     */\n+    public double tTest(double mu, DescriptiveStatistics sampleStats)\n         throws IllegalArgumentException {\n         if ((sampleStats == null) || (sampleStats.getN() < 5)) {\n             throw new IllegalArgumentException\n--- a/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:39 $\n  */\n public class BinomialDistributionTest extends TestCase {\n     private BinomialDistribution b;\n--- a/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n  * <http://www.apache.org/>.\n  */\n \n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/15 16:01:39 $\n  */\n public class ChiSquareDistributionTest extends TestCase {\n     private ChiSquaredDistribution chiSquare;\n--- a/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n  * <http://www.apache.org/>.\n  */\n \n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.13 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.14 $ $Date: 2003/11/15 16:01:39 $\n  */\n public class DistributionFactoryImplTest extends TestCase {\n     /** */\n--- a/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import org.apache.commons.math.TestUtils;\n \n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:39 $\n  */\n public class ExponentialDistributionTest extends TestCase {\n     private ExponentialDistribution exp;\n--- a/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/FDistributionTest.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/15 16:01:40 $\n  */\n public class FDistributionTest extends TestCase {\n     private FDistribution f;\n--- a/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n  * <http://www.apache.org/>.\n  */\n \n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:40 $\n  */\n public class GammaDistributionTest extends TestCase {\n     public void testProbabilities(){\n--- a/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java\n  * <http://www.apache.org/>.\n  */\n \n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:40 $\n  */\n public class HypergeometricDistributionTest extends TestCase {\n     private HypergeometricDistribution h;\n--- a/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-package org.apache.commons.math.stat.distribution;\n+package org.apache.commons.math.distribution;\n \n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:40 $\n  */\n public class TDistributionTest extends TestCase {\n     private TDistribution t;\n--- a/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n import java.io.File;\n import java.net.URL;\n \n-import org.apache.commons.math.stat.Univariate;\n-import org.apache.commons.math.stat.UnivariateImpl;\n+import org.apache.commons.math.stat.DescriptiveStatistics;\n+import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;\n \n /**\n  * Test cases for the EmpiricalDistribution class\n  *\n- * @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/15 16:01:40 $\n  */\n \n public final class EmpiricalDistributionTest extends TestCase {\n     \n     private void tstGen(double tolerance)throws Exception {\n         empiricalDistribution.load(file);   \n-        Univariate stats = new UnivariateImpl();\n+        DescriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();\n         for (int i = 1; i < 1000; i++) {\n             stats.addValue(empiricalDistribution.getNextValue());\n         }\n--- a/src/test/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n import java.util.HashSet;\n \n import org.apache.commons.math.stat.Frequency;\n+import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;\n import org.apache.commons.math.stat.TestStatisticImpl;\n-import org.apache.commons.math.stat.Univariate;\n-import org.apache.commons.math.stat.UnivariateImpl;\n+import org.apache.commons.math.stat.DescriptiveStatistics;\n \n /**\n  * Test cases for the RandomData class.\n  *\n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:40 $\n  */\n \n public final class RandomDataTest extends TestCase {\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n-        Univariate u = new UnivariateImpl();\n+        DescriptiveStatistics u = new StorelessDescriptiveStatisticsImpl();\n         for (int i = 0; i<largeSampleSize; i++) {\n             u.addValue(randomData.nextGaussian(0,1));\n         }\n--- a/src/test/org/apache/commons/math/random/ValueServerTest.java\n+++ b/src/test/org/apache/commons/math/random/ValueServerTest.java\n import junit.framework.TestSuite;\n import java.net.URL;\n \n-import org.apache.commons.math.stat.Univariate;\n-import org.apache.commons.math.stat.UnivariateImpl;\n+import org.apache.commons.math.stat.DescriptiveStatistics;\n+import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;\n  \n /**\n  * Test cases for the ValueServer class.\n  *\n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:22 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:40 $\n  */\n \n public final class ValueServerTest extends TestCase {\n         vs.computeDistribution();\n         assertTrue(\"empirical distribution property\", \n             vs.getEmpiricalDistribution() != null);\n-        Univariate stats = new UnivariateImpl();\n+        DescriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();\n         for (int i = 1; i < 1000; i++) {\n             next = vs.getNext();\n             stats.addValue(next);\n             tolerance);\n         \n         vs.computeDistribution(500);\n-        stats = new UnivariateImpl();\n+        stats = new StorelessDescriptiveStatisticsImpl();\n         for (int i = 1; i < 1000; i++) {\n             next = vs.getNext();\n             stats.addValue(next);\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/BeanListUnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.List;\n+\n+import org.apache.commons.beanutils.PropertyUtils;\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.util.NumberTransformer;\n+\n+/**\n+ * This implementation of DescriptiveStatistics uses commons-beanutils to gather\n+ * univariate statistics for a List of Java Beans by property.  This \n+ * implementation uses beanutils' PropertyUtils to get a simple, nested,\n+ * indexed, mapped, or combined property from an element of a List.\n+ * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:40 $\n+ */\n+public class BeanListUnivariateImpl extends ListUnivariateImpl {\n+\n+\t/**\n+\t * propertyName of the property to get from the bean\n+\t */\n+\tprivate String propertyName;\n+\n+\t/**\n+\t * Construct a BeanListUnivariate with specified\n+\t * backing list\n+\t * @param list Backing List\n+\t */\n+\tpublic BeanListUnivariateImpl(List list) {\n+\t\tthis(list, null);\n+\t}\n+\n+\t/**\n+\t * Construct a BeanListUnivariate with specified\n+\t * backing list and propertyName\n+\t * @param list Backing List\n+\t * @param propertyName Bean propertyName\n+\t */\n+\tpublic BeanListUnivariateImpl(List list, String propertyName) {\n+\t\tsuper(list);\n+\t\tsetPropertyName(propertyName);\n+\t}\n+\n+\t/**\n+\t * @return propertyName\n+\t */\n+\tpublic String getPropertyName() {\n+\t\treturn propertyName;\n+\t}\n+\n+\t/**\n+\t * @param propertyName Name of Property\n+\t */\n+\tpublic void setPropertyName(String propertyName) {\n+\t\tthis.propertyName = propertyName;\n+\t\tthis.transformer = new NumberTransformer() {\n+\n+\t\t\t/**\n+\t\t\t * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n+\t\t\t */\n+\t\t\tpublic double transform(final Object o) throws MathException {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn (\n+\t\t\t\t\t\t(Number) PropertyUtils.getProperty(\n+\t\t\t\t\t\t\to,\n+\t\t\t\t\t\t\tgetPropertyName()))\n+\t\t\t\t\t\t.doubleValue();\n+\t\t\t\t} catch (IllegalAccessException e) {\n+\t\t\t\t\tthrow new MathException(\n+\t\t\t\t\t\t\"IllegalAccessException in Transformation: \"\n+\t\t\t\t\t\t\t+ e.getMessage(),\n+\t\t\t\t\t\te);\n+\t\t\t\t} catch (InvocationTargetException e) {\n+\t\t\t\t\tthrow new MathException(\n+\t\t\t\t\t\t\"InvocationTargetException in Transformation: \"\n+\t\t\t\t\t\t\t+ e.getMessage(),\n+\t\t\t\t\t\te);\n+\t\t\t\t} catch (NoSuchMethodException e) {\n+\t\t\t\t\tthrow new MathException(\n+\t\t\t\t\t\t\"oSuchMethodException in Transformation: \"\n+\t\t\t\t\t\t\t+ e.getMessage(),\n+\t\t\t\t\t\te);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t/**\n+\t  * @see org.apache.commons.math.stat.Univariate#addValue(double)\n+\t  */\n+\tpublic void addValue(double v) {\n+\t\tString msg =\n+\t\t\t\"The BeanListUnivariateImpl does not accept values \"\n+\t\t\t\t+ \"through the addValue method.  Because elements of this list \"\n+\t\t\t\t+ \"are JavaBeans, one must be sure to set the 'propertyName' \"\n+\t\t\t\t+ \"property and add new Beans to the underlying list via the \"\n+\t\t\t\t+ \"addBean(Object bean) method\";\n+\t\tthrow new UnsupportedOperationException(msg);\n+\t}\n+\n+\t/**\n+\t * Adds a bean to this list. \n+\t *\n+\t * @param bean Bean to add to the list\n+\t */\n+\tpublic void addObject(Object bean) {\n+\t\tlist.add(bean);\n+\t}\n+}\n--- a/src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java\n /**\n  * Test cases for the {@link BeanListUnivariateImpl} class.\n  *\n- * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:40 $\n  */\n \n public final class BeanListUnivariateImplTest extends TestCase {\n     /** test stats */\n     public void testStats() {\n     \t\n-        StoreUnivariate u = new BeanListUnivariateImpl( patientList ); \n+        DescriptiveStatistics u = new BeanListUnivariateImpl( patientList ); \n \n         assertEquals(\"total count\",3,u.getN(),tolerance);\n \n     \n     public void testPropStats() {\n \n-        StoreUnivariate heartU = new BeanListUnivariateImpl( patientList,\n+        DescriptiveStatistics heartU = new BeanListUnivariateImpl( patientList,\n                                           \"vitalStats.heartRate\" );\n \n         \n         assertEquals( \"Max heart rate unexpected\", 120.0, \n                       heartU.getMax(), 0.001 );\n \n-        StoreUnivariate ageU = new BeanListUnivariateImpl( patientList,\n+        DescriptiveStatistics ageU = new BeanListUnivariateImpl( patientList,\n                                                            \"age\" );\n \n         assertEquals( \"Mean age unexpected\", 33.333,\n--- a/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n+++ b/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n import java.io.InputStreamReader;\n import org.apache.commons.logging.*;\n /**\n- * Test cases for the {@link Univariate} class.\n- * @version $Revision: 1.11 $ $Date: 2003/11/14 22:22:18 $\n+ * Test cases for the {@link DescriptiveStatistics} class.\n+ * @version $Revision: 1.12 $ $Date: 2003/11/15 16:01:40 $\n  */\n public class CertifiedDataTest extends TestCase {\n \n-\tprotected Univariate u = null;\n+\tprotected DescriptiveStatistics u = null;\n \n \tprotected double mean = Double.NaN;\n \n \t}\n \n \t/**\n-\t * Test UnivariateImpl\n+\t * Test StorelessDescriptiveStatistics\n \t*/\n \tpublic void testUnivariateImpl() {\n \n-\t\tu = new UnivariateImpl();\n+\t\ttry {\n+\t\t\tu = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);\n+\t\t} catch (InstantiationException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t} catch (IllegalAccessException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n \n \t\tloadStats(\"data/Lew.txt\");\n \t\tassertEquals(\"Lew: std\", std, u.getStandardDeviation(), .000000000001);\n \t}\n \n \t/**\n-\t * Test UnivariateImpl\n+\t * Test StorelessDescriptiveStatistics\n \t */\n \tpublic void testStoredUnivariateImpl() {\n \n-\t\tu = new StoreUnivariateImpl();\n+\t\tu = DescriptiveStatistics.newInstance();\n \t\t\n \t\tloadStats(\"data/Lew.txt\");\n \t\tassertEquals(\"Lew: std\", std, u.getStandardDeviation(), .000000000001);\n \t}\n \n \t/**\n-\t * loads a Univariate off of a test file\n+\t * loads a DescriptiveStatistics off of a test file\n \t * @param file\n \t */\n \tprivate void loadStats(String resource) {\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.random.RandomData;\n+import org.apache.commons.math.random.RandomDataImpl;\n+\n+/**\n+ * Test cases for the {@link Univariate} class.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:41 $\n+ */\n+\n+public final class DescriptiveStatisticsTest extends TestCase {\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = DescriptiveStatistics.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+    \n+    public DescriptiveStatisticsTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(DescriptiveStatisticsTest.class);\n+        suite.setName(\"Descriptive Statistics Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(two);\n+        u.addValue(two);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+    \t    \t\n+            assertTrue(\"Mean of n = 0 set should be NaN\", \n+                Double.isNaN( u.getMean() ) );\n+            assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n+                Double.isNaN( u.getStandardDeviation() ) );\n+            assertTrue(\"Variance of n = 0 set should be NaN\",\n+                Double.isNaN(u.getVariance() ) );\n+\n+            u.addValue(one);\n+\n+            assertTrue( \"Mean of n = 1 set should be value of single item n1\",\n+                u.getMean() == one);\n+            assertTrue( \"StdDev of n = 1 set should be zero, instead it is: \" \n+                + u.getStandardDeviation(), u.getStandardDeviation() == 0);\n+            assertTrue( \"Variance of n = 1 set should be zero\", \n+                u.getVariance() == 0);\t\n+    }\n+    \n+    public void testSkewAndKurtosis() {\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+    \t\n+    \tdouble[] testArray = \n+        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+  \t  \tfor( int i = 0; i < testArray.length; i++) {\n+  \t  \t\tu.addValue( testArray[i]);\n+  \t  \t}\n+  \t  \t\n+\t\tassertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+\t\tassertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+\t\tassertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+  \t  \tassertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        u.setWindowSize(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        //assertEquals( \"Product not expected\", \n+        //    24.0, u.getProduct(), Double.MIN_VALUE );\n+        assertEquals( \"Geometric mean not expected\", \n+            2.213364, u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        //assertEquals( \"Product not expected\", 39916800.0, \n+        //    u.getProduct(), 0.00001 );\n+        assertEquals( \"Geometric mean not expected\", 5.755931, \n+            u.getGeometricMean(), 0.00001 );\n+    }\n+    \n+\tpublic void testAddValue() {\n+\t\tdouble[] test1 = {5,4,3,2,1,0};\n+\t\tdouble[] test2 = {5,2,1,0,4,3};\n+\n+\t\tDescriptiveStatistics stats = DescriptiveStatistics.newInstance();\n+\t\tstats.setWindowSize(12);\n+\t\t\n+\t\tfor(int i = 0; i < test1.length; i++){\n+\t\t\tstats.addValue(test1[i]);\n+\t\t}     \n+\t\t\n+\t\tdouble[] test3 = stats.getValues();\n+\t\t\n+\t\tfor(int i = 0; i < 6; i++){\n+\t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n+\t\t\ttest3[i], test1[i],0.0);\n+\t\t\tSystem.out.println(test3[i] + \" \"+test1[i]);\n+\t\t}     \n+\t\t\t\t\n+\t\tfor(int i = 0; i < test2.length; i++){\n+\t\t\tstats.addValue(test2[i]);\n+\t\t}     \n+ \n+\t\ttest3 = stats.getValues();  \n+\t\t\n+\t\tfor(int i = 6; i < 12; i++){\n+\t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n+\t\t\ttest3[i], test2[i-6],0.0);\n+\t\t\tSystem.out.println(test3[i] + \" \"+test2[i-6]);\n+\t\t}    \n+\t\t\n+\t\tfor(int i = 0; i < test2.length; i++){\n+\t\t\tstats.addValue(test2[i]);\n+\t\t}     \n+ \n+\t\ttest3 = stats.getValues();  \n+\t\t\n+\t\tfor(int i = 0; i < 6; i++){\n+\t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n+\t\t\ttest3[i], test2[i],0.0);\n+\t\t\tSystem.out.println(test3[i] + \" \"+test2[i]);\n+\t\t}  \n+\t\t\n+\t\tfor(int i = 6; i < 12; i++){\n+\t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n+\t\t\ttest3[i], test2[i-6],0.0);\n+\t\t\tSystem.out.println(test3[i] + \" \"+test2[i-6]);\n+\t\t}  \n+\t\t \n+\t}\n+\t\n+    public void testGetSortedValues() {\n+        double[] test1 = {5,4,3,2,1};\n+        double[] test2 = {5,2,1,3,4,0};\n+        double[] test3 = {1};\n+        int[] testi = null;\n+        double[] test4 = null;\n+        RandomData rd = new RandomDataImpl();\n+        tstGetSortedValues(test1);\n+        tstGetSortedValues(test2);\n+        tstGetSortedValues(test3);\n+        for (int i = 0; i < 10; i++) {\n+            testi = rd.nextPermutation(10,6);\n+            test4 = new double[6];\n+            for (int j = 0; j < testi.length; j++) {\n+                test4[j] = (double) testi[j];\n+            }\n+            tstGetSortedValues(test4);\n+        }\n+        for (int i = 0; i < 10; i++) {\n+            testi = rd.nextPermutation(10,5);\n+            test4 = new double[5];\n+            for (int j = 0; j < testi.length; j++) {\n+                test4[j] = (double) testi[j];\n+            }\n+            tstGetSortedValues(test4);\n+        }        \n+    }\n+    \n+        \n+        \n+    private void tstGetSortedValues(double[] test) {\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        u.setWindowSize(test.length);\n+        for (int i = 0; i < test.length; i++) {\n+            u.addValue(test[i]);\n+        }\n+        double[] sorted = u.getSortedValues();\n+        if (sorted.length != test.length) {\n+            fail(\"wrong length for sorted values array\");\n+        }\n+        for (int i = 0; i < sorted.length-1; i++) {\n+            if (sorted[i] > sorted[i+1]) {\n+                fail(\"sorted values out of sequence\");\n+            }\n+        }\n+    }\n+    \n+    public void testPercentiles() {\n+        double[] test = {5,4,3,2,1};\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance();\n+        u.setWindowSize(110);\n+        for (int i = 0; i < test.length; i++) {\n+            u.addValue(test[i]);\n+        }\n+        assertEquals(\"expecting min\",1,u.getPercentile(5),10E-12);\n+        assertEquals(\"expecting max\",5,u.getPercentile(99),10E-12);\n+        assertEquals(\"expecting middle\",3,u.getPercentile(50),10E-12);\n+        try {\n+            double x = u.getPercentile(0);\n+            fail(\"expecting IllegalArgumentException for getPercentile(0)\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = u.getPercentile(120);\n+            fail(\"expecting IllegalArgumentException for getPercentile(120)\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        \n+        u.clear();\n+        double[] test2 = {1,2,3,4};\n+        for (int i = 0; i < test2.length; i++) {\n+            u.addValue(test2[i]);\n+        }\n+        assertEquals(\"Q1\",1.25,u.getPercentile(25),10E-12);\n+        assertEquals(\"Q3\",3.75,u.getPercentile(75),10E-12);\n+        assertEquals(\"Q2\",2.5,u.getPercentile(50),10E-12);\n+        \n+        u.clear();\n+        double[] test3 = {1};\n+        for (int i = 0; i < test3.length; i++) {\n+            u.addValue(test3[i]);\n+        }\n+        assertEquals(\"Q1\",1,u.getPercentile(25),10E-12);\n+        assertEquals(\"Q3\",1,u.getPercentile(75),10E-12);\n+        assertEquals(\"Q2\",1,u.getPercentile(50),10E-12);\n+        \n+        u.clear();\n+        RandomData rd = new RandomDataImpl();\n+        int[] testi = rd.nextPermutation(100,100); // will contain 0-99\n+        for (int j = 0; j < testi.length; j++) {\n+            u.addValue((double) testi[j]);  //OK, laugh at me for the cast\n+        }\n+        for (int i = 1; i < 100; i++) {\n+            assertEquals(\"percentile \" + i,\n+                (double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);\n+        }\n+        \n+        u.clear();\n+        double[] test4 = {1,2,3,4,100};\n+        for (int i = 0; i < test4.length; i++) {\n+            u.addValue(test4[i]);\n+        }\n+        assertEquals(\"80th\",80.8,u.getPercentile(80),10E-12);\n+        \n+        u.clear();\n+        assertTrue(\"empty value set should return NaN\",\n+            Double.isNaN(u.getPercentile(50)));\n+    }\n+                                     \n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/ListUnivariateImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import java.util.List;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.stat.univariate.UnivariateStatistic;\n+import org.apache.commons.math.util.DefaultTransformer;\n+import org.apache.commons.math.util.NumberTransformer;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:41 $\n+ */\n+public class ListUnivariateImpl extends AbstractDescriptiveStatistics {\n+\n+    /**\n+     * Holds a reference to a list - GENERICs are going to make\n+     * out lives easier here as we could only accept List<Number>\n+     */\n+    protected List list;\n+\n+    /** Number Transformer maps Objects to Number for us. */\n+    protected NumberTransformer transformer;\n+\n+    /**\n+     * Construct a ListUnivariate with a specific List.\n+     * @param list The list that will back this DescriptiveStatistics\n+     */\n+    public ListUnivariateImpl(List list) {\n+        this(list, new DefaultTransformer());\n+    }\n+    \n+    /**\n+     * Construct a ListUnivariate with a specific List.\n+     * @param list The list that will back this DescriptiveStatistics\n+     * @param transformer the number transformer used to convert the list items.\n+     */\n+    public ListUnivariateImpl(List list, NumberTransformer transformer) {\n+        super();\n+        this.list = list;\n+        this.transformer = transformer;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getValues()\n+     */\n+    public double[] getValues() {\n+\n+        int length = list.size();\n+\n+        // If the window size is not INFINITE_WINDOW AND\n+        // the current list is larger that the window size, we need to\n+        // take into account only the last n elements of the list\n+        // as definied by windowSize\n+\n+        if (windowSize != DescriptiveStatistics.INFINITE_WINDOW &&\n+            windowSize < list.size())\n+        {\n+            length = list.size() - Math.max(0, list.size() - windowSize);\n+        }\n+\n+        // Create an array to hold all values\n+        double[] copiedArray = new double[length];\n+\n+        for (int i = 0; i < copiedArray.length; i++) {\n+            copiedArray[i] = getElement(i);\n+        }\n+        return copiedArray;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getElement(int)\n+     */\n+    public double getElement(int index) {\n+\n+        double value = Double.NaN;\n+\n+        int calcIndex = index;\n+\n+        if (windowSize != DescriptiveStatistics.INFINITE_WINDOW &&\n+            windowSize < list.size())\n+        {\n+            calcIndex = (list.size() - windowSize) + index;\n+        }\n+\n+        \n+        try {\n+\t\t\tvalue = transformer.transform(list.get(calcIndex));\n+\t\t} catch (MathException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+        \n+        return value;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#getN()\n+     */\n+    public int getN() {\n+        int n = 0;\n+\n+        if (windowSize != DescriptiveStatistics.INFINITE_WINDOW) {\n+            if (list.size() > windowSize) {\n+                n = windowSize;\n+            } else {\n+                n = list.size();\n+            }\n+        } else {\n+            n = list.size();\n+        }\n+        return n;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#addValue(double)\n+     */\n+    public void addValue(double v) {\n+        list.add(new Double(v));\n+    }\n+    \n+    /**\n+     * Adds an object to this list. \n+     * @param o Object to add to the list\n+     */\n+    public void addObject(Object o) {\n+        list.add(o);\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.stat.DescriptiveStatistics#clear()\n+     */\n+    public void clear() {\n+        super.clear();\n+        list.clear();\n+    }\n+    \n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n+     */\n+    public double apply(UnivariateStatistic stat) {\n+        double[] v = this.getValues();\n+\n+        if (v != null) {\n+            return stat.evaluate(v, 0, v.length);\n+        }\n+        return Double.NaN;\n+    }\n+    \n+    /**\n+     * Access the number transformer.\n+     * @return the number transformer.\n+     */\n+    public NumberTransformer getTransformer() {\n+        return transformer;\n+    }\n+\n+    /**\n+     * Modify the number transformer.\n+     * @param transformer the new number transformer.\n+     */\n+    public void setTransformer(NumberTransformer transformer) {\n+        this.transformer = transformer;\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java\n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:41 $\n  */\n \n public final class ListUnivariateImplTest extends TestCase {\n     private double max = 3;\n     private double skewness = 0;\n     private double kurtosis = 0.5;\n-    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private int kClass = DescriptiveStatistics.LEPTOKURTIC;\n     private double tolerance = 10E-15;\n     \n     public ListUnivariateImplTest(String name) {\n     public void testStats() {\n     \tList externalList = new ArrayList();\n     \t\n-        StoreUnivariate u = new ListUnivariateImpl( externalList ); \n+        DescriptiveStatistics u = new ListUnivariateImpl( externalList ); \n \n         assertEquals(\"total count\",0,u.getN(),tolerance);\n         u.addValue(one);\n     public void testN0andN1Conditions() throws Exception {\n     \tList list = new ArrayList();\n     \t\n-    \tStoreUnivariate u = new ListUnivariateImpl( list );\n+    \tDescriptiveStatistics u = new ListUnivariateImpl( list );\n     \t    \t\n \t\tassertTrue(\"Mean of n = 0 set should be NaN\", Double.isNaN( u.getMean() ) );\n \t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", Double.isNaN( u.getStandardDeviation() ) );\n     }\n     \n     public void testSkewAndKurtosis() {\n-    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance();\n     \t\n     \tdouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n   \t  \t\t\t\t\t\t\t\t\t\t 9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n \n         assertEquals( \"Geometric mean not expected\", 2.213364, u.getGeometricMean(), 0.00001 );\n \n-        // Now test rolling - UnivariateImpl should discount the contribution\n+        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n         // of a discarded element\n         for( int i = 0; i < 10; i++ ) {\n             u.addValue( i + 2 );\n--- a/src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java\n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:18 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:41 $\n  */\n \n public final class MixedListUnivariateImplTest extends TestCase {\n     private double max = 3;\n     private double skewness = 0;\n     private double kurtosis = 0.5;\n-    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private int kClass = DescriptiveStatistics.LEPTOKURTIC;\n     private double tolerance = 10E-15;\n \n     private TransformerMap transformers = new TransformerMap();\n     public void testStats() {\n         List externalList = new ArrayList();\n \n-        StoreUnivariate u = new ListUnivariateImpl(externalList,transformers);\n+        DescriptiveStatistics u = new ListUnivariateImpl(externalList,transformers);\n \n         assertEquals(\"total count\", 0, u.getN(), tolerance);\n         u.addValue(one);\n     public void testN0andN1Conditions() throws Exception {\n         List list = new ArrayList();\n \n-        StoreUnivariate u = new ListUnivariateImpl(new ArrayList(),transformers);\n+        DescriptiveStatistics u = new ListUnivariateImpl(new ArrayList(),transformers);\n \n         assertTrue(\n             \"Mean of n = 0 set should be NaN\",\n             u.getGeometricMean(),\n             0.00001);\n \n-        // Now test rolling - UnivariateImpl should discount the contribution\n+        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n         // of a discarded element\n         for (int i = 0; i < 10; i++) {\n             u.addValue(i + 2);\n--- a/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n+++ b/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n \n /**\n  * Test cases for the {@link StatUtils} class.\n- * @version $Revision: 1.10 $ $Date: 2003/11/14 22:22:18 $\n+ * @version $Revision: 1.11 $ $Date: 2003/11/15 16:01:41 $\n  */\n \n public final class StatUtilsTest extends TestCase {\n     private double max = 3;\n     private double skewness = 0;\n     private double kurtosis = 0.5;\n-    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private int kClass = DescriptiveStatistics.LEPTOKURTIC;\n     private double tolerance = 10E-15;\n \n     public StatUtilsTest(String name) {\n--- a/src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java\n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:18 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/15 16:01:41 $\n  */\n \n public final class StoreUnivariateImplTest extends TestCase {\n     private double max = 3;\n     private double skewness = 0;\n     private double kurtosis = 0.5;\n-    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private int kClass = DescriptiveStatistics.LEPTOKURTIC;\n     private double tolerance = 10E-15;\n     \n     public StoreUnivariateImplTest(String name) {\n     \n     /** test stats */\n     public void testStats() {\n-        StoreUnivariate u = new StoreUnivariateImpl(); \n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n         assertEquals(\"total count\",0,u.getN(),tolerance);\n         u.addValue(one);\n         u.addValue(two);\n     }     \n     \n     public void testN0andN1Conditions() throws Exception {\n-    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n     \t    \t\n             assertTrue(\"Mean of n = 0 set should be NaN\", \n                 Double.isNaN( u.getMean() ) );\n     }\n     \n     public void testSkewAndKurtosis() {\n-    \tStoreUnivariate u = new StoreUnivariateImpl();\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n     \t\n     \tdouble[] testArray = \n         { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n     }\n \n     public void testProductAndGeometricMean() throws Exception {\n-    \tStoreUnivariateImpl u = new StoreUnivariateImpl();\n+    \tDescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n         u.setWindowSize(10);\n     \t    \t\n         u.addValue( 1.0 );\n         assertEquals( \"Geometric mean not expected\", \n             2.213364, u.getGeometricMean(), 0.00001 );\n \n-        // Now test rolling - UnivariateImpl should discount the contribution\n+        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n         // of a discarded element\n         for( int i = 0; i < 10; i++ ) {\n             u.addValue( i + 2 );\n     \n         \n     private void tstGetSortedValues(double[] test) {\n-        StoreUnivariateImpl u = new StoreUnivariateImpl();\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n         for (int i = 0; i < test.length; i++) {\n             u.addValue(test[i]);\n         }\n     \n     public void testPercentiles() {\n         double[] test = {5,4,3,2,1};\n-        StoreUnivariateImpl u = new StoreUnivariateImpl();\n+        DescriptiveStatistics u = DescriptiveStatistics.newInstance(); \n         for (int i = 0; i < test.length; i++) {\n             u.addValue(test[i]);\n         }\n--- a/src/test/org/apache/commons/math/stat/TestStatisticTest.java\n+++ b/src/test/org/apache/commons/math/stat/TestStatisticTest.java\n  */\n package org.apache.commons.math.stat;\n \n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n /**\n  * Test cases for the TestStatistic class.\n  *\n- * @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:18 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/15 16:01:41 $\n  */\n \n public final class TestStatisticTest extends TestCase {\n \tdouble[] observed = {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0,\n             94.0, 101.0, 88.0, 98.0, 94.0, 101.0, 92.0, 95.0};\n         double mu = 100.0;\n-        Univariate sampleStats = new UnivariateImpl();\n-        for (int i = 0; i < observed.length; i++) {\n+        DescriptiveStatistics sampleStats = null;\n+\t\ttry {\n+\t\t\tsampleStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);\n+\t\t} catch (InstantiationException e5) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te5.printStackTrace();\n+\t\t} catch (IllegalAccessException e5) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te5.printStackTrace();\n+\t\t}\n+\t\tfor (int i = 0; i < observed.length; i++) {\n             sampleStats.addValue(observed[i]);\n         }\n         \n             ;\n         }\n         \n-        UnivariateImpl nullStats = null;\n-        try {\n+\t\tDescriptiveStatistics nullStats = null;\n+\t\ttry {\n+\t\t\tnullStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);\n+\t\t} catch (InstantiationException e6) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te6.printStackTrace();\n+\t\t} catch (IllegalAccessException e6) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te6.printStackTrace();\n+\t\t}\n+\t\ttry {\n             testStatistic.t(mu, nullStats);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n-        \n-        Univariate emptyStats = new UnivariateImpl();\n-        try {\n+\n+\t\tDescriptiveStatistics emptyStats = null;\n+\t\ttry {\n+\t\t\temptyStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);\n+\t\t} catch (InstantiationException e4) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te4.printStackTrace();\n+\t\t} catch (IllegalAccessException e4) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te4.printStackTrace();\n+\t\t}\n+\t\ttry {\n             testStatistic.t(mu, emptyStats);\n             fail(\"arguments too short, IllegalArgumentException expected\");\n         } catch (IllegalArgumentException ex) {\n         } catch (IllegalArgumentException ex) {\n             ;\n         }\n-        \n-        Univariate tooShortStats = new UnivariateImpl();\n-        tooShortStats.addValue(0d);\n+\n+\t\tDescriptiveStatistics tooShortStats = null;\n+\t\ttry {\n+\t\t\ttooShortStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);\n+\t\t} catch (InstantiationException e3) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te3.printStackTrace();\n+\t\t} catch (IllegalAccessException e3) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te3.printStackTrace();\n+\t\t}\n+\t\ttooShortStats.addValue(0d);\n         tooShortStats.addValue(2d);\n         try {\n             testStatistic.t(mu, tooShortStats);\n         /** Moore and McCabe Example 8.3, p 516 */\n         double[] oneSidedP = {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, \n             6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d};\n-        Univariate oneSidedPStats = new UnivariateImpl();\n-        for (int i = 0; i < oneSidedP.length; i++) {\n+            \n+\n+\t\tDescriptiveStatistics oneSidedPStats = null;\n+\t\ttry {\n+\t\t\toneSidedPStats = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);\n+\t\t} catch (InstantiationException e2) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te2.printStackTrace();\n+\t\t} catch (IllegalAccessException e2) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te2.printStackTrace();\n+\t\t}\n+\t\tfor (int i = 0; i < oneSidedP.length; i++) {\n             oneSidedPStats.addValue(oneSidedP[i]);\n         }\n         assertEquals(\"one sample t stat\",3.86,\n         /** Moore and McCabe Example 8.12, p 552 */\n         double[] sample1 = {7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d};\n         double[] sample2 = {-1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d};\n-        Univariate sampleStats1 = new UnivariateImpl();\n-        for (int i = 0; i < sample1.length; i++) {\n+\n+\t\tDescriptiveStatistics sampleStats1 = null;\n+\t\ttry {\n+\t\t\tsampleStats1 = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);\n+\t\t} catch (InstantiationException e1) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te1.printStackTrace();\n+\t\t} catch (IllegalAccessException e1) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te1.printStackTrace();\n+\t\t}\n+\t\tfor (int i = 0; i < sample1.length; i++) {\n             sampleStats1.addValue(sample1[i]);\n         }\n-        Univariate sampleStats2 = new UnivariateImpl();\n-        for (int i = 0; i < sample2.length; i++) {\n+        \n+\t\tDescriptiveStatistics sampleStats2 = null;\n+\t\ttry {\n+\t\t\tsampleStats2 = DescriptiveStatistics.newInstance(StorelessDescriptiveStatisticsImpl.class);\n+\t\t} catch (InstantiationException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t} catch (IllegalAccessException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\tfor (int i = 0; i < sample2.length; i++) {\n             sampleStats2.addValue(sample2[i]);\n         }\n         //FIXME: textbook example reported t stat uses pooled variance\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/UnivariateImplTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+import org.apache.commons.math.stat.DescriptiveStatistics;\n+import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link DescriptiveStatistics} class.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:41 $\n+ */\n+\n+public final class UnivariateImplTest extends TestCase {\n+    private double one = 1;\n+    private float twoF = 2;\n+    private long twoL = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double tolerance = 10E-15;\n+    \n+    public UnivariateImplTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(UnivariateImplTest.class);\n+        suite.setName(\"Frequency Tests\");\n+        return suite;\n+    }\n+    \n+    /** test stats */\n+    public void testStats() {\n+        StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl(); \n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(twoF);\n+        u.addValue(twoL);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+    \n+    public void testN0andN1Conditions() throws Exception {\n+    \tStorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl();\n+        assertTrue(\"Mean of n = 0 set should be NaN\", \n+            Double.isNaN( u.getMean() ) );\n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n+            Double.isNaN( u.getStandardDeviation() ) );\n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", \n+            Double.isNaN(u.getVariance() ) );\n+\t\tassertTrue(\"skew of n = 0 set should be NaN\",\n+\t\t\tDouble.isNaN(u.getSkewness() ) );\t\n+\t\tassertTrue(\"kurtosis of n = 0 set should be NaN\", \n+\t\t\tDouble.isNaN(u.getKurtosis() ) );\t\t\n+\t\t\n+\t\n+\t\t/* n=1 */\n+\t\tu.addValue(one);\n+\t\tassertTrue(\"mean should be one (n = 1)\", \n+\t\t\tu.getMean() == one);\n+\t\tassertTrue(\"geometric should be one (n = 1) instead it is \" + u.getGeometricMean(), \n+\t\t\tu.getGeometricMean() == one);\n+\t\tassertTrue(\"Std should be zero (n = 1)\", \n+\t\t\tu.getStandardDeviation() == 0.0);\n+\t\tassertTrue(\"variance should be zero (n = 1)\", \n+\t\t\tu.getVariance() == 0.0);\n+\t\tassertTrue(\"skew should be zero (n = 1)\", \n+\t\t\tu.getSkewness() == 0.0);\n+\t\tassertTrue(\"kurtosis should be zero (n = 1)\", \n+\t\t\tu.getKurtosis() == 0.0);\t\t\n+\t\t\t\t\t\n+\t\t/* n=2 */\t\t\t\t\n+\t\tu.addValue(twoF);\n+\t\tassertTrue(\"Std should not be zero (n = 2)\", \n+\t\t\tu.getStandardDeviation() != 0.0);\n+\t\tassertTrue(\"variance should not be zero (n = 2)\", \n+\t\t\tu.getVariance() != 0.0);\n+\t\tassertTrue(\"skew should not be zero (n = 2)\", \n+\t\t\tu.getSkewness() == 0.0);\n+\t\tassertTrue(\"kurtosis should be zero (n = 2)\", \n+\t\t\tu.getKurtosis() == 0.0);\n+\n+\t\t/* n=3 */\n+\t\tu.addValue(twoL);\n+\t\tassertTrue(\"skew should not be zero (n = 3)\", \n+\t\t\tu.getSkewness() != 0.0);\n+\t\tassertTrue(\"kurtosis should be zero (n = 3)\", \n+\t\t\tu.getKurtosis() == 0.0);\n+        \n+\t\t/* n=4 */\n+\t\tu.addValue(three);\n+\t\tassertTrue(\"kurtosis should not be zero (n = 4)\", \n+\t\t\tu.getKurtosis() != 0.0);        \n+            \n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+    \tStorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl(10);\n+    \t    \t\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Geometric mean not expected\", 2.213364, \n+            u.getGeometricMean(), 0.00001 );\n+\n+        // Now test rolling - StorelessDescriptiveStatistics should discount the contribution\n+        // of a discarded element\n+        for( int i = 0; i < 10; i++ ) {\n+            u.addValue( i + 2 );\n+        }\n+        // Values should be (2,3,4,5,6,7,8,9,10,11)\n+        \n+        assertEquals( \"Geometric mean not expected\", 5.755931, \n+            u.getGeometricMean(), 0.00001 );\n+    }\n+    \n+    public void testRollingMinMax() {\n+        StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl(3);\n+        u.addValue( 1.0 );\n+        u.addValue( 5.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 ); // discarding min\n+        assertEquals( \"min not expected\", 3.0, \n+            u.getMin(), Double.MIN_VALUE);\n+        u.addValue(1.0);  // discarding max\n+        assertEquals( \"max not expected\", 4.0, \n+            u.getMax(), Double.MIN_VALUE);\n+    }\n+    \n+    public void testNaNContracts() {\n+        StorelessDescriptiveStatisticsImpl u = new StorelessDescriptiveStatisticsImpl();\n+        double nan = Double.NaN;\n+        assertTrue(\"mean not NaN\",Double.isNaN(u.getMean())); \n+        assertTrue(\"min not NaN\",Double.isNaN(u.getMin())); \n+        assertTrue(\"std dev not NaN\",Double.isNaN(u.getStandardDeviation())); \n+        assertTrue(\"var not NaN\",Double.isNaN(u.getVariance())); \n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+        \n+        u.addValue(1.0);\n+        \n+        assertEquals( \"mean not expected\", 1.0, \n+            u.getMean(), Double.MIN_VALUE);\n+        assertEquals( \"variance not expected\", 0.0, \n+            u.getVariance(), Double.MIN_VALUE);\n+        assertEquals( \"geometric mean not expected\", 1.0, \n+            u.getGeometricMean(), Double.MIN_VALUE);\n+        \n+        u.addValue(-1.0);\n+        \n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+        \n+        u.addValue(0.0);\n+        \n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+        \n+        //FiXME: test all other NaN contract specs\n+    }\n+\n+    public void testSkewAndKurtosis() {\n+        DescriptiveStatistics u = new StorelessDescriptiveStatisticsImpl();\n+        \n+        double[] testArray = \n+        { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,\n+          9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };\n+        for( int i = 0; i < testArray.length; i++) {\n+            u.addValue( testArray[i]);\n+        }\n+        \n+        assertEquals(\"mean\", 12.40455, u.getMean(), 0.0001);\n+        assertEquals(\"variance\", 10.00236, u.getVariance(), 0.0001);\n+        assertEquals(\"skewness\", 1.437424, u.getSkewness(), 0.0001);\n+        assertEquals(\"kurtosis\", 2.37719, u.getKurtosis(), 0.0001);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/BeanTransformer.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.util;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Uses PropertyUtils to map a Bean getter to a double value.\n+ * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:42 $\n+ */\n+public class BeanTransformer implements NumberTransformer {\n+\n+    /**\n+     * The propertyName for this Transformer\n+     */\n+    private String propertyName;\n+\n+    /**\n+     * Create a BeanTransformer\n+     */\n+    public BeanTransformer() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Create a BeanTransformer with a specific PropertyName.\n+     * @param property The property.\n+     */\n+    public BeanTransformer(final String property) {\n+        super();\n+        setPropertyName(property);\n+    }\n+\n+    /**\n+     * Get the property String\n+     * @return the Property Name String\n+     */\n+    public String getPropertyName() {\n+        return propertyName;\n+    }\n+\n+    /**\n+     * Set the propertyString\n+     * @param string The string to set the property to.\n+     */\n+    public void setPropertyName(final String string) {\n+        propertyName = string;\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n+     */\n+    public double transform(final Object o) throws MathException {\n+        try {\n+\t\t\treturn ((Number) org.apache.commons.beanutils.PropertyUtils.getProperty(o, getPropertyName())).doubleValue();\n+        } catch (IllegalAccessException e) {\n+\t\t\tthrow new MathException(\"IllegalAccessException in Transformation: \" + e.getMessage(), e);\n+        } catch (InvocationTargetException e) {\n+\t\t\tthrow new MathException(\"InvocationTargetException in Transformation: \" + e.getMessage(), e);\n+        } catch (NoSuchMethodException e) {\n+\t\t\tthrow new MathException(\"oSuchMethodException in Transformation: \" + e.getMessage(), e);\n+        }\n+    }\n+}\n--- a/src/test/org/apache/commons/math/util/BeanTransformerTest.java\n+++ b/src/test/org/apache/commons/math/util/BeanTransformerTest.java\n \n package org.apache.commons.math.util;\n \n+import org.apache.commons.math.MathException;\n import org.apache.commons.math.TestUtils;\n \n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/15 16:01:42 $\n  */\n public class BeanTransformerTest extends TestCase {\n     \n     public void testTransformNoSuchMethod(){\n         BeanTransformer b = new BeanTransformer(\"z\");\n         TestBean target = new TestBean();\n-        double value = b.transform(target);\n-        TestUtils.assertEquals(Double.NaN, value, 1.0e-2);\n+        double value = Double.NaN;\n+\t\ttry {\n+\t\t\tvalue = b.transform(target);\n+\t\t} catch (MathException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\tTestUtils.assertEquals(Double.NaN, value, 1.0e-2);\n     }\n     \n     /**\n     public void testTransform(){\n         BeanTransformer b = new BeanTransformer(\"x\");\n         TestBean target = new TestBean();\n-        double value = b.transform(target);\n-        TestUtils.assertEquals(1.0, value, 1.0e-2);\n+\t\tdouble value = Double.NaN;\n+\t\ttry {\n+\t\t\tvalue = b.transform(target);\n+\t\t} catch (MathException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\tTestUtils.assertEquals(1.0, value, 1.0e-2);\n     }\n     \n     /**\n     public void testTransformInvocationError(){\n         BeanTransformer b = new BeanTransformer(\"z\");\n         TestBean target = new TestBean();\n-        double value = b.transform(target);\n-        TestUtils.assertEquals(Double.NaN, value, 1.0e-2);\n+\t\tdouble value = Double.NaN;\n+\t\ttry {\n+\t\t\tvalue = b.transform(target);\n+\t\t} catch (MathException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\tTestUtils.assertEquals(Double.NaN, value, 1.0e-2);\n     }\n     \n     /**\n         BeanTransformer b = new BeanTransformer(\"y\");\n         TestBean target = new TestBean();\n         try {\n-            b.transform(target);\n+            try {\n+\t\t\t\tb.transform(target);\n+\t\t\t} catch (MathException e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n             fail();\n         } catch(ClassCastException ex){\n             // success", "timestamp": 1068912102, "metainfo": ""}