{"sha": "e1925c967b668ab656acbc044b00b1338a65fce7", "log": "Added arbitrary differentiation order for Hermite interpolator.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java\n package org.apache.commons.math3.analysis.interpolation;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n \n-import org.apache.commons.math3.analysis.DifferentiableUnivariateVectorFunction;\n-import org.apache.commons.math3.analysis.UnivariateVectorFunction;\n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction;\n import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\n-import org.apache.commons.math3.exception.MathIllegalArgumentException;\n-import org.apache.commons.math3.exception.MathIllegalStateException;\n+import org.apache.commons.math3.exception.MathArithmeticException;\n+import org.apache.commons.math3.exception.NoDataException;\n+import org.apache.commons.math3.exception.ZeroException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.util.ArithmeticUtils;\n \n  * <p>\n  * The interpolation polynomials match all sample points, including both values\n  * and provided derivatives. There is one polynomial for each component of\n- * the values vector. All polynomial have the same degree. The degree of the\n+ * the values vector. All polynomials have the same degree. The degree of the\n  * polynomials depends on the number of points and number of derivatives at each\n  * point. For example the interpolation polynomials for n sample points without\n  * any derivatives all have degree n-1. The interpolation polynomials for n\n  * @version $Id$\n  * @since 3.1\n  */\n-public class HermiteInterpolator implements DifferentiableUnivariateVectorFunction {\n+public class HermiteInterpolator implements UnivariateDifferentiableVectorFunction {\n \n     /** Sample abscissae. */\n     private final List<Double> abscissae;\n      * (if only one row is passed, it is the value, if two rows are\n      * passed the first one is the value and the second the derivative\n      * and so on)\n-     * @exception MathIllegalArgumentException if the abscissa is equals to a previously\n-     * added sample point\n+     * @exception ZeroException if the abscissa difference between added point\n+     * and a previous point is zero (i.e. the two points are at same abscissa)\n+     * @exception MathArithmeticException if the number of derivatives is larger\n+     * than 20, which prevents computation of a factorial\n      */\n     public void addSamplePoint(final double x, final double[] ... value)\n-        throws MathIllegalArgumentException {\n+        throws ZeroException, MathArithmeticException {\n \n         for (int i = 0; i < value.length; ++i) {\n \n                 final double[] bottom1 = bottomDiagonal.get(n - (j + 1));\n                 final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));\n                 if (Double.isInfinite(inv)) {\n-                    throw new MathIllegalArgumentException(LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO,\n-                                                           x);\n+                    throw new ZeroException(LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);\n                 }\n                 for (int k = 0; k < y.length; ++k) {\n                     bottom1[k] = inv * (bottom0[k] - bottom1[k]);\n \n     /** Compute the interpolation polynomials.\n      * @return interpolation polynomials array\n-     * @exception MathIllegalStateException if sample is empty\n+     * @exception NoDataException if sample is empty\n      */\n     public PolynomialFunction[] getPolynomials()\n-        throws MathIllegalStateException {\n+        throws NoDataException {\n \n         // safety check\n         checkInterpolation();\n      * </p>\n      * @param x interpolation abscissa\n      * @return interpolated value\n-     * @exception MathIllegalStateException if sample is empty\n+     * @exception NoDataException if sample is empty\n      */\n     public double[] value(double x)\n-        throws MathIllegalStateException {\n+        throws NoDataException {\n \n         // safety check\n         checkInterpolation();\n \n     }\n \n-    /** Interpolate first derivative at a specified abscissa.\n-     * <p>\n-     * Calling this method is equivalent to call the {@link PolynomialFunction#value(double)\n-     * value} methods of the derivatives of all polynomials returned by {@link\n-     * #getPolynomials() getPolynomials}, except it builds neither the intermediate\n-     * polynomials nor their derivatives, so this method is faster and numerically more stable.\n+    /** Interpolate value at a specified abscissa.\n+     * <p>\n+     * Calling this method is equivalent to call the {@link\n+     * PolynomialFunction#value(DerivativeStructure) value} methods of all polynomials\n+     * returned by {@link #getPolynomials() getPolynomials}, except it does not build the\n+     * intermediate polynomials, so this method is faster and numerically more stable.\n      * </p>\n      * @param x interpolation abscissa\n-     * @return interpolated derivative\n-     * @exception MathIllegalStateException if sample is empty\n-     */\n-    public double[] derivative(double x)\n-        throws MathIllegalStateException {\n+     * @return interpolated value\n+     * @exception NoDataException if sample is empty\n+     */\n+    public DerivativeStructure[] value(final DerivativeStructure x)\n+        throws NoDataException {\n \n         // safety check\n         checkInterpolation();\n \n-        final double[] derivative = new double[topDiagonal.get(0).length];\n-        double valueCoeff      = 1;\n-        double derivativeCoeff = 0;\n+        final DerivativeStructure[] value = new DerivativeStructure[topDiagonal.get(0).length];\n+        Arrays.fill(value, x.getField().getZero());\n+        DerivativeStructure valueCoeff = x.getField().getOne();\n         for (int i = 0; i < topDiagonal.size(); ++i) {\n             double[] dividedDifference = topDiagonal.get(i);\n-            for (int k = 0; k < derivative.length; ++k) {\n-                derivative[k] += dividedDifference[k] * derivativeCoeff;\n-            }\n-            final double deltaX = x - abscissae.get(i);\n-            derivativeCoeff = valueCoeff + derivativeCoeff * deltaX;\n-            valueCoeff *= deltaX;\n-        }\n-\n-        return derivative;\n-\n-    }\n-\n-    /** {@inheritDoc}} */\n-    public UnivariateVectorFunction derivative() {\n-        return new UnivariateVectorFunction() {\n-\n-            /** {@inheritDoc}} */\n-            public double[] value(double x) {\n-                return derivative(x);\n-            }\n-\n-        };\n+            for (int k = 0; k < value.length; ++k) {\n+                value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));\n+            }\n+            final DerivativeStructure deltaX = x.subtract(abscissae.get(i));\n+            valueCoeff = valueCoeff.multiply(deltaX);\n+        }\n+\n+        return value;\n+\n     }\n \n     /** Check interpolation can be performed.\n-     * @exception MathIllegalStateException if interpolation cannot be performed\n+     * @exception NoDataException if interpolation cannot be performed\n      * because sample is empty\n      */\n-    private void checkInterpolation() throws MathIllegalStateException {\n+    private void checkInterpolation() throws NoDataException {\n         if (abscissae.isEmpty()) {\n-            throw new MathIllegalStateException(LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);\n+            throw new NoDataException(LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java\n \n import java.util.Random;\n \n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\n+import org.apache.commons.math3.exception.NoDataException;\n import org.apache.commons.math3.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n         HermiteInterpolator interpolator = new HermiteInterpolator();\n         interpolator.addSamplePoint(0.0, new double[] { 0.0 });\n         for (double x = -10; x < 10; x += 1.0) {\n-            Assert.assertEquals(0.0, interpolator.value(x)[0], 1.0e-15);\n-            Assert.assertEquals(0.0, interpolator.derivative(x)[0], 1.0e-15);\n+            DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];\n+            Assert.assertEquals(0.0, y.getValue(), 1.0e-15);\n+            Assert.assertEquals(0.0, y.getPartialDerivative(1), 1.0e-15);\n         }\n         checkPolynomial(new PolynomialFunction(new double[] { 0.0 }),\n                         interpolator.getPolynomials()[0]);\n         interpolator.addSamplePoint(1.0, new double[] { 0.0 });\n         interpolator.addSamplePoint(2.0, new double[] { 0.0 });\n         for (double x = -10; x < 10; x += 1.0) {\n-            Assert.assertEquals((x - 1.0) * (x - 2.0), interpolator.value(x)[0], 1.0e-15);\n-            Assert.assertEquals(2 * x - 3.0, interpolator.derivative(x)[0], 1.0e-15);\n+            DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];\n+            Assert.assertEquals((x - 1.0) * (x - 2.0), y.getValue(), 1.0e-15);\n+            Assert.assertEquals(2 * x - 3.0, y.getPartialDerivative(1), 1.0e-15);\n         }\n         checkPolynomial(new PolynomialFunction(new double[] { 2.0, -3.0, 1.0 }),\n                         interpolator.getPolynomials()[0]);\n         interpolator.addSamplePoint(1.0, new double[] { 4.0 });\n         interpolator.addSamplePoint(2.0, new double[] { 5.0 }, new double[] { 2.0 });\n         Assert.assertEquals(4, interpolator.getPolynomials()[0].degree());\n-        Assert.assertEquals(1.0, interpolator.value(0.0)[0], 1.0e-15);\n-        Assert.assertEquals(2.0, interpolator.derivative(0.0)[0], 1.0e-15);\n+        DerivativeStructure y0 = interpolator.value(new DerivativeStructure(1, 1, 0, 0.0))[0];\n+        Assert.assertEquals(1.0, y0.getValue(), 1.0e-15);\n+        Assert.assertEquals(2.0, y0.getPartialDerivative(1), 1.0e-15);\n         Assert.assertEquals(4.0, interpolator.value(1.0)[0], 1.0e-15);\n-        Assert.assertEquals(5.0, interpolator.value(2.0)[0], 1.0e-15);\n-        Assert.assertEquals(2.0, interpolator.derivative(2.0)[0], 1.0e-15);\n+        DerivativeStructure y2 = interpolator.value(new DerivativeStructure(1, 1, 0, 2.0))[0];\n+        Assert.assertEquals(5.0, y2.getValue(), 1.0e-15);\n+        Assert.assertEquals(2.0, y2.getPartialDerivative(1), 1.0e-15);\n         checkPolynomial(new PolynomialFunction(new double[] { 1.0, 2.0, 4.0, -4.0, 1.0 }),\n                         interpolator.getPolynomials()[0]);\n     }\n             }\n \n             for (double x = 0; x < 2; x += 0.1) {\n-                double[] values      = interpolator.value(x);\n-                double[] derivatives = interpolator.derivative(x);\n-                Assert.assertEquals(p.length, values.length);\n-                for (int k = 0; k < p.length; ++k) {\n-                    Assert.assertEquals(p[k].value(x), values[k], 1.0e-8 * FastMath.abs(p[k].value(x)));\n-                    Assert.assertEquals(pPrime[k].value(x), derivatives[k], 4.0e-8 * FastMath.abs(p[k].value(x)));\n+                DerivativeStructure[] y = interpolator.value(new DerivativeStructure(1, 1, 0, x));\n+                Assert.assertEquals(p.length, y.length);\n+                for (int k = 0; k < p.length; ++k) {\n+                    Assert.assertEquals(p[k].value(x), y[k].getValue(), 1.0e-8 * FastMath.abs(p[k].value(x)));\n+                    Assert.assertEquals(pPrime[k].value(x), y[k].getPartialDerivative(1), 4.0e-8 * FastMath.abs(p[k].value(x)));\n                 }\n             }\n \n             interpolator.addSamplePoint(x, new double[] { FastMath.sin(x) });\n         }\n         for (double x = 0.1; x <= 2.9; x += 0.01) {\n-            Assert.assertEquals(FastMath.sin(x), interpolator.value(x)[0], 3.5e-5);\n-            Assert.assertEquals(FastMath.cos(x), interpolator.derivative(x)[0], 1.3e-4);\n+            DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 2, 0, x))[0];\n+            Assert.assertEquals( FastMath.sin(x), y.getValue(), 3.5e-5);\n+            Assert.assertEquals( FastMath.cos(x), y.getPartialDerivative(1), 1.3e-4);\n+            Assert.assertEquals(-FastMath.sin(x), y.getPartialDerivative(2), 2.9e-3);\n         }\n     }\n \n             interpolator.addSamplePoint(x, new double[] { FastMath.sqrt(x) });\n         }\n         for (double x = 1.1; x < 3.5; x += 0.01) {\n-            Assert.assertEquals(FastMath.sqrt(x), interpolator.value(x)[0], 1.5e-4);\n-            Assert.assertEquals(0.5 / FastMath.sqrt(x), interpolator.derivative(x)[0], 8.5e-4);\n+            DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];\n+            Assert.assertEquals(FastMath.sqrt(x), y.getValue(), 1.5e-4);\n+            Assert.assertEquals(0.5 / FastMath.sqrt(x), y.getPartialDerivative(1), 8.5e-4);\n         }\n     }\n \n         interpolator.addSamplePoint( 0, new double[] { 1 }, new double[] {  0 }, new double[] {  0 });\n         interpolator.addSamplePoint( 1, new double[] { 2 }, new double[] {  8 }, new double[] { 56 });\n         for (double x = -1.0; x <= 1.0; x += 0.125) {\n+            DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];\n             double x2 = x * x;\n             double x4 = x2 * x2;\n             double x8 = x4 * x4;\n-            Assert.assertEquals(x8 + 1, interpolator.value(x)[0], 1.0e-15);\n-            Assert.assertEquals(8 * x4 * x2 * x, interpolator.derivative(x)[0], 1.0e-15);\n+            Assert.assertEquals(x8 + 1, y.getValue(), 1.0e-15);\n+            Assert.assertEquals(8 * x4 * x2 * x, y.getPartialDerivative(1), 1.0e-15);\n         }\n         checkPolynomial(new PolynomialFunction(new double[] { 1, 0, 0, 0, 0, 0, 0, 0, 1 }),\n                         interpolator.getPolynomials()[0]);\n         HermiteInterpolator interpolator = new HermiteInterpolator();\n         interpolator.addSamplePoint(0, new double[] { 1 }, new double[] { 1 }, new double[] { 2 });\n         for (double x = -1.0; x <= 1.0; x += 0.125) {\n-            Assert.assertEquals(1 + x * (1 + x), interpolator.value(x)[0], 1.0e-15);\n-            Assert.assertEquals(1 + 2 * x, interpolator.derivative(x)[0], 1.0e-15);\n+            DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0];\n+            Assert.assertEquals(1 + x * (1 + x), y.getValue(), 1.0e-15);\n+            Assert.assertEquals(1 + 2 * x, y.getPartialDerivative(1), 1.0e-15);\n         }\n         checkPolynomial(new PolynomialFunction(new double[] { 1, 1, 1 }),\n                         interpolator.getPolynomials()[0]);\n         return new PolynomialFunction(coeff);\n     }\n \n-    @Test(expected=IllegalStateException.class)\n+    @Test(expected=NoDataException.class)\n     public void testEmptySample() {\n         new HermiteInterpolator().value(0.0);\n     }", "timestamp": 1347377617, "metainfo": ""}