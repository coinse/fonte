{"sha": "dbbf24f73082d8d7d1e81fe203fa577e6b84c85d", "log": "checked serialization of TransformerMap and added a test for it  ", "commit": "\n--- a/src/java/org/apache/commons/math/util/TransformerMap.java\n+++ b/src/java/org/apache/commons/math/util/TransformerMap.java\n  * @version $Revision$ $Date$\n  */\n public class TransformerMap implements NumberTransformer, Serializable {\n-    // TODO: Add Serializable documentation\n-    // TODO: Check Serializable implementation\n \n     /** Serializable version identifier */\n     private static final long serialVersionUID = 4605318041528645258L;\n         return value;\n     }\n \n+    /** {@inheritDoc} */\n+    public boolean equals(Object other) {\n+        if (this == other) { \n+            return true;\n+        }\n+        if (other == null) {\n+            return false;\n+        }\n+        try {\n+            TransformerMap rhs = (TransformerMap) other;\n+            if (! defaultTransformer.equals(rhs.defaultTransformer)) {\n+                return false;\n+            }\n+            if (map.size() != rhs.map.size()) {\n+                return false;\n+            }\n+            for (Map.Entry<Class<?>, NumberTransformer> entry : map.entrySet()) {\n+                if (! entry.getValue().equals(rhs.map.get(entry.getKey()))) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        } catch (ClassCastException cce) {\n+            return false;\n+        }\n+    }\n+    \n+    /** {@inheritDoc} */\n+    @Override\n+    public int hashCode() {\n+        int hash = defaultTransformer.hashCode();\n+        for (NumberTransformer t : map.values()) {\n+            hash = hash * 31 + t.hashCode();\n+        }\n+        return hash;\n+    }\n+\n }\n--- a/src/test/org/apache/commons/math/util/TransformerMapTest.java\n+++ b/src/test/org/apache/commons/math/util/TransformerMapTest.java\n  */\n \n package org.apache.commons.math.util;\n+\n+import org.apache.commons.math.TestUtils;\n \n import junit.framework.TestCase;\n \n         map.putTransformer(TransformerMapTest.class, expected);\n         assertTrue(map.transformers().contains(expected));\n     }\n+\n+    public void testSerial(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertEquals(map, TestUtils.serializeAndRecover(map));\n+    }\n+\n }", "timestamp": 1248121427, "metainfo": ""}