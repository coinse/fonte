{"sha": "6fff3ab1e3e36d53156691bb6ebe18c58d1e2fe9", "log": "improved test coverage  ", "commit": "\n--- a/src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java\n+++ b/src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.analysis.QuinticFunction;\n import org.apache.commons.math.analysis.SinFunction;\n     public void testSinMin() throws MathException {\n         UnivariateRealFunction f = new SinFunction();\n         UnivariateRealOptimizer minimizer = new BrentOptimizer();\n+        minimizer.setMaxEvaluations(200);\n+        assertEquals(200, minimizer.getMaxEvaluations());\n         try {\n             minimizer.getResult();\n             fail(\"an exception should have been thrown\");\n         assertTrue(minimizer.getIterationCount() <= 50);\n         assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 70 * minimizer.getAbsoluteAccuracy());\n         assertTrue(minimizer.getIterationCount() <= 50);\n+        assertTrue(minimizer.getEvaluations()    <= 100);\n+        assertTrue(minimizer.getEvaluations()    >=  90);\n+        minimizer.setMaxEvaluations(50);\n+        try {\n+            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n+            fail(\"an exception should have been thrown\");\n+        } catch (FunctionEvaluationException fee) {\n+            // expected\n+        } catch (Exception e) {\n+            fail(\"wrong exception caught\");\n+        }\n     }\n \n     @Test", "timestamp": 1248539183, "metainfo": ""}