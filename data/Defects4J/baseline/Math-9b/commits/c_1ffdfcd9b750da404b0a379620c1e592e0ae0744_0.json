{"sha": "1ffdfcd9b750da404b0a379620c1e592e0ae0744", "log": "Javadoc fixes.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n  * Accepts int, long, char or Object values.  New values added must be comparable to \n  * those that have been added, otherwise the add method will throw an IllegalArgumentException.\n  * The values are ordered using the default (natural order), unless a  <code>Comparator</code>\n- *  is supplied in the constructor.\n+ * is supplied in the constructor.\n  * \n- * @version $Revision: 1.20 $ $Date: 2004/05/19 14:16:32 $\n+ * @version $Revision: 1.21 $ $Date: 2004/05/31 20:57:12 $\n  */\n public class Frequency implements Serializable {\n     \n     //-------------------------------------------------------------\n \n     /**\n-      * Returns the cumulative percentatge of values less than or equal to v\n+      * Returns the percentage of values that are equal to v\n      * (as a proportion between 0 and 1).\n      * @param v the value to lookup.\n      * @return the proportion of values equal to v\n     }\n     \n     /**\n-      * Returns the cumulative percentatge of values less than or equal to v\n+      * Returns the percentage of values that are equal to v\n      * (as a proportion between 0 and 1).\n      * @param v the value to lookup.\n      * @return the proportion of values equal to v\n     }\n     \n     /**\n-      * Returns the cumulative percentatge of values less than or equal to v\n+      * Returns the percentage of values that are equal to v\n      * (as a proportion between 0 and 1).\n      * @param v the value to lookup.\n      * @return the proportion of values equal to v\n     }\n     \n     /**\n-     * Returns the cumulative percentatge of values less than or equal to v\n+     * Returns the percentage of values that are equal to v\n      * (as a proportion between 0 and 1).\n      * @param v the value to lookup.\n      * @return the proportion of values equal to v\n     //----------------------------------------------------------------------------------------------\n     \n      /**\n-     * Returns the cumulative percentatge of values less than or equal to v\n-     * (as a proportion between 0 and 1).\n-     * <p>\n-     * Returns 0 if v is not comparable to the values set.\n-     * \n-     * @param v the value to lookup.\n-     * @return the proportion of values equal to v\n+     * Returns the cumulative percentage of values less than or equal to v\n+     * (as a proportion between 0 and 1).\n+     * <p>\n+     * Returns 0 if v is not comparable to the values set.\n+     * \n+     * @param v the value to lookup.\n+     * @return the proportion of values less than or equal to v\n      */\n     public double getCumPct(Object v) {\n         return (double) getCumFreq(v) / (double) getSumFreq();        \n     }\n     \n     /**\n-     * Returns the cumulative percentatge of values less than or equal to v\n-     * (as a proportion between 0 and 1).\n-     * <p>\n-     * Returns 0 if v is not comparable to the values set.\n-     * \n-     * @param v the value to lookup.\n-     * @return the proportion of values equal to v\n+     * Returns the cumulative percentage of values less than or equal to v\n+     * (as a proportion between 0 and 1).\n+     * <p>\n+     * Returns 0 if v is not comparable to the values set.\n+     * \n+     * @param v the value to lookup.\n+     * @return the proportion of values less than or equal to v\n      */\n     public double getCumPct(int v) {\n         return getCumPct(new Long(v));       \n     }\n     \n     /**\n-     * Returns the cumulative percentatge of values less than or equal to v\n-     * (as a proportion between 0 and 1).\n-     * <p>\n-     * Returns 0 if v is not comparable to the values set.\n-     * \n-     * @param v the value to lookup.\n-     * @return the proportion of values equal to v\n+     * Returns the cumulative percentage of values less than or equal to v\n+     * (as a proportion between 0 and 1).\n+     * <p>\n+     * Returns 0 if v is not comparable to the values set.\n+     * \n+     * @param v the value to lookup.\n+     * @return the proportion of values less than or equal to v\n      */\n     public double getCumPct(long v) {\n         return getCumPct(new Long(v));         \n      * Returns 0 if v is not comparable to the values set.\n      * \n      * @param v the value to lookup.\n-     * @return the proportion of values equal to v\n+     * @return the proportion of values less than or equal to v\n      */\n     public double getCumPct(char v) {\n         return getCumPct(new Character(v));         ", "timestamp": 1086037032, "metainfo": ""}