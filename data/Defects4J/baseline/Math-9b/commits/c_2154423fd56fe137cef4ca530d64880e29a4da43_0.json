{"sha": "2154423fd56fe137cef4ca530d64880e29a4da43", "log": "Made method names consistent, added methods to default bias-correction.  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/correlation/Covariance.java\n+++ b/src/java/org/apache/commons/math/stat/correlation/Covariance.java\n     public Covariance(RealMatrix matrix, boolean biasCorrected) {\n        checkSufficientData(matrix);\n        n = matrix.getRowDimension();\n-       covarianceMatrix = computeCovariance(matrix, biasCorrected);\n+       covarianceMatrix = computeCovarianceMatrix(matrix, biasCorrected);\n     }\n     \n     /**\n     }\n     \n     /**\n-     * Create a covariance matrix from a matrix whose columns represent\n+     * Compute a covariance matrix from a matrix whose columns represent\n      * covariates.\n      * @param matrix input matrix (must have at least two columns and two rows)\n      * @param biasCorrected determines whether or not covariance estimates are bias-corrected\n      * @return covariance matrix\n      */\n-    protected RealMatrix computeCovariance(RealMatrix matrix, boolean biasCorrected) {\n+    protected RealMatrix computeCovarianceMatrix(RealMatrix matrix, boolean biasCorrected) {\n         int dimension = matrix.getColumnDimension();\n         Variance variance = new Variance(biasCorrected);\n         RealMatrix outMatrix = new DenseRealMatrix(dimension, dimension);\n             outMatrix.setEntry(i, i, variance.evaluate(matrix.getColumn(i)));\n         }\n         return outMatrix;\n+    }\n+    \n+    /**\n+     * Create a covariance matrix from a matrix whose columns represent\n+     * covariates. Covariances are computed using the bias-corrected formula.\n+     * @param matrix input matrix (must have at least two columns and two rows)\n+     * @return covariance matrix\n+     * @see #Covariance\n+     */\n+    protected RealMatrix computeCovarianceMatrix(RealMatrix matrix) {\n+        return computeCovarianceMatrix(matrix, true);\n+    }\n+    \n+    /**\n+     * Compute a covariance matrix from a rectangular array whose columns represent\n+     * covariates.\n+     * @param data input array (must have at least two columns and two rows)\n+     * @param biasCorrected determines whether or not covariance estimates are bias-corrected\n+     * @return covariance matrix\n+     */\n+    protected RealMatrix computeCovarianceMatrix(double[][] data, boolean biasCorrected) {\n+        return computeCovarianceMatrix(new DenseRealMatrix(data), biasCorrected);\n+    }\n+    \n+    /**\n+     * Create a covariance matrix from a rectangual array whose columns represent\n+     * covariates. Covariances are computed using the bias-corrected formula.\n+     * @param data input array (must have at least two columns and two rows)\n+     * @return covariance matrix\n+     * @see #Covariance\n+     */\n+    protected RealMatrix computeCovarianceMatrix(double[][] data) {\n+        return computeCovarianceMatrix(data, true);\n     }\n     \n     /**\n     }\n     \n     /**\n+     * Computes the covariance between the two arrays, using the bias-corrected\n+     * formula.\n+     * \n+     * <p>Array lengths must match and the common length must be at least 2.</p>\n+     *\n+     * @param xArray first data array\n+     * @param yArray second data array\n+     * @return returns the covariance for the two arrays \n+     * @throws  IllegalArgumentException if the arrays lengths do not match or\n+     * there is insufficient data\n+     */\n+    public double covariance(final double[] xArray, final double[] yArray) \n+        throws IllegalArgumentException {\n+        return covariance(xArray, yArray, true);\n+    }\n+    \n+    /**\n      * Throws IllegalArgumentException of the matrix does not have at least\n      * two columns and two rows\n      * @param matrix matrix to check\n--- a/src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java\n+++ b/src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java\n      * column-by-column covariances\n      */\n     public void testConsistency() {\n-        RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n-        RealMatrix covarianceMatrix = new Covariance(matrix).getCovarianceMatrix();\n+        final RealMatrix matrix = createRealMatrix(swissData, 47, 5);\n+        final RealMatrix covarianceMatrix = new Covariance(matrix).getCovarianceMatrix();\n         \n         // Variances on the diagonal\n         Variance variance = new Variance();\n         for (int i = 0; i < 3; i++) {\n             repeatedColumns.setColumnMatrix(i, matrix.getColumnMatrix(0));\n         }\n-        covarianceMatrix = new Covariance(repeatedColumns).getCovarianceMatrix();\n+        RealMatrix repeatedCovarianceMatrix = new Covariance(repeatedColumns).getCovarianceMatrix();\n         double columnVariance = variance.evaluate(matrix.getColumn(0));\n         for (int i = 0; i < 3; i++) {\n             for (int j = 0; j < 3; j++) {\n-                assertEquals(columnVariance, covarianceMatrix.getEntry(i, j), 10E-14);\n+                assertEquals(columnVariance, repeatedCovarianceMatrix.getEntry(i, j), 10E-14);\n             }\n         }\n         \n+        // Check bias-correction defaults\n+        double[][] data = matrix.getData();\n+        TestUtils.assertEquals(\"Covariances\", \n+                covarianceMatrix, new Covariance().computeCovarianceMatrix(data),Double.MIN_VALUE);\n+        TestUtils.assertEquals(\"Covariances\", \n+                covarianceMatrix, new Covariance().computeCovarianceMatrix(data, true),Double.MIN_VALUE);\n+        \n+        double[] x = data[0];\n+        double[] y = data[1];\n+        assertEquals(new Covariance().covariance(x, y), \n+                new Covariance().covariance(x, y, true), Double.MIN_VALUE); \n     }\n     \n     protected RealMatrix createRealMatrix(double[] data, int nRows, int nCols) {", "timestamp": 1239562270, "metainfo": ""}