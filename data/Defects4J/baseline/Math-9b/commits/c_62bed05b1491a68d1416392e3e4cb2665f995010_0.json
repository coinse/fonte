{"sha": "62bed05b1491a68d1416392e3e4cb2665f995010", "log": "removed remaining references to DenseXxx{Matrix/Vector}  ", "commit": "\n--- a/src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java\n+++ b/src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java\n  * process matrices with sizes similar enough to have the same power of two\n  * number of tiles in all three matrices A, B and C such that C = A*B. These\n  * parts have not been fixed since the performance gain with respect to\n- * DenseRealMatrix are not very important, and the numerical stability is not\n+ * BlockRealMatrix are not very important, and the numerical stability is not\n  * good. This may well be due to a bad implementation. This code has been put\n  * in the experimental part for the record, putting it into production would\n  * require solving all these issues.\n      *\n      * @exception IllegalArgumentException if <code>rawData</code> shape is\n      * inconsistent with tile layout\n-     * @see #DenseRealMatrix(int, int, double[][], boolean)\n+     * @see #RecursiveLayoutRealMatrix(int, int, double[][], boolean)\n      */\n     public RecursiveLayoutRealMatrix(final double[][] rawData)\n         throws IllegalArgumentException {\n--- a/src/java/org/apache/commons/math/linear/BlockFieldMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/BlockFieldMatrix.java\n      * <p>\n      * This method creates an array in blocks layout from an input array in raw layout.\n      * It can be used to provide the array argument of the {@link\n-     * BlockFieldMatrix#DenseFieldMatrix(int, int, FieldElement[][], boolean)}\n+     * #BlockFieldMatrix(int, int, FieldElement[][], boolean)}\n      * constructor.\n      * </p>\n      * @param <T> the type of the field elements\n      * Create a data array in blocks layout.\n      * <p>\n      * This method can be used to create the array argument of the {@link\n-     * BlockFieldMatrix#DenseFieldMatrix(int, int, FieldElement[][], boolean)}\n+     * #BlockFieldMatrix(int, int, FieldElement[][], boolean)}\n      * constructor.\n      * </p>\n      * @param <T> the type of the field elements\n--- a/src/java/org/apache/commons/math/linear/BlockRealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/BlockRealMatrix.java\n      * <p>\n      * This method creates an array in blocks layout from an input array in raw layout.\n      * It can be used to provide the array argument of the {@link\n-     * BlockRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor.\n+     * #BlockRealMatrix(int, int, double[][], boolean)} constructor.\n      * </p>\n      * @param rawData data array in raw layout\n      * @return a new data array containing the same entries but in blocks layout\n      * Create a data array in blocks layout.\n      * <p>\n      * This method can be used to create the array argument of the {@link\n-     * BlockRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor.\n+     * #BlockRealMatrix(int, int, double[][], boolean)} constructor.\n      * </p>\n      * @param rows  the number of rows in the new matrix\n      * @param columns  the number of columns in the new matrix\n--- a/src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java\n \n     }\n \n-    //Additional Test for DenseRealMatrixTest.testMultiply\n+    //Additional Test for BlockRealMatrixTest.testMultiply\n \n     private double[][] d3 = new double[][] {{1,2,3,4},{5,6,7,8}};\n     private double[][] d4 = new double[][] {{1},{2},{3},{4}};", "timestamp": 1244723742, "metainfo": ""}