{"sha": "f6d4c8cfaad3711348304c0b3d2901b31ed635ae", "log": "Added array constructor and getter for Vector2D and Vector3D.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java\n import java.io.Serializable;\n import java.text.NumberFormat;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.geometry.Vector;\n         this.x = x;\n         this.y = y;\n         this.z = z;\n+    }\n+\n+    /** Simple constructor.\n+     * Build a vector from its coordinates\n+     * @param v coordinates array\n+     * @exception DimensionMismatchException if array does not have 3 elements\n+     * @see #toArray()\n+     */\n+    public Vector3D(double[] v) throws DimensionMismatchException {\n+        if (v.length != 3) {\n+            throw new DimensionMismatchException(v.length, 3);\n+        }\n+        this.x = v[0];\n+        this.y = v[1];\n+        this.z = v[2];\n     }\n \n     /** Simple constructor.\n      */\n     public double getZ() {\n         return z;\n+    }\n+\n+    /** Get the vector coordinates as a dimension 3 array.\n+     * @return vector coordinates\n+     * @see #Vector3D(double[])\n+     */\n+    public double[] toArray() {\n+        return new double[] { x, y, z };\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java\n \n import java.text.NumberFormat;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.geometry.Space;\n     public Vector2D(double x, double y) {\n         this.x = x;\n         this.y = y;\n+    }\n+\n+    /** Simple constructor.\n+     * Build a vector from its coordinates\n+     * @param v coordinates array\n+     * @exception DimensionMismatchException if array does not have 2 elements\n+     * @see #toArray()\n+     */\n+    public Vector2D(double[] v) throws DimensionMismatchException {\n+        if (v.length != 2) {\n+            throw new DimensionMismatchException(v.length, 2);\n+        }\n+        this.x = v[0];\n+        this.y = v[1];\n     }\n \n     /** Multiplicative constructor\n      */\n     public double getY() {\n         return y;\n+    }\n+\n+    /** Get the vector coordinates as a dimension 2 array.\n+     * @return vector coordinates\n+     * @see #Vector2D(double[])\n+     */\n+    public double[] toArray() {\n+        return new double[] { x, y };\n     }\n \n     /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java\n+++ b/src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java\n \n package org.apache.commons.math.geometry.euclidean.threed;\n \n+import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.random.Well1024a;\n import org.apache.commons.math.util.FastMath;\n                                  5, Vector3D.MINUS_J,\n                                  -3, Vector3D.MINUS_K),\n                     2, 0, 3);\n+        checkVector(new Vector3D(new double[] { 2,  5,  -3 }),\n+                    2, 5, -3);\n+    }\n+\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testWrongDimension() {\n+        new Vector3D(new double[] { 2,  5 });\n     }\n \n     @Test\n         Assert.assertTrue(FastMath.abs(v.getX() - 1) < 1.0e-12);\n         Assert.assertTrue(FastMath.abs(v.getY() - 2) < 1.0e-12);\n         Assert.assertTrue(FastMath.abs(v.getZ() - 3) < 1.0e-12);\n+        double[] coordinates = v.toArray();\n+        Assert.assertTrue(FastMath.abs(coordinates[0] - 1) < 1.0e-12);\n+        Assert.assertTrue(FastMath.abs(coordinates[1] - 2) < 1.0e-12);\n+        Assert.assertTrue(FastMath.abs(coordinates[2] - 3) < 1.0e-12);\n     }\n \n     @Test", "timestamp": 1320959035, "metainfo": ""}