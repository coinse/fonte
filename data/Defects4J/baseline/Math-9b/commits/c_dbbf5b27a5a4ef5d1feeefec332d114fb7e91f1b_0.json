{"sha": "dbbf5b27a5a4ef5d1feeefec332d114fb7e91f1b", "log": "Fixed CheckStyle warnings.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java\n import org.apache.commons.math3.random.RandomGenerator;\n \n /**\n- * Base class for probability distributions on the multivariate reals.\n- * Default implementations are provided for some of the methods that do\n- * not vary from distribution to distribution.\n- * \n+ * Base class for multivariate probability distributions.\n+ *\n+ * @version $Id$\n+ * @since 3.1\n  */\n public abstract class AbstractMultivariateRealDistribution\n     implements MultivariateRealDistribution {\n+    /** RNG instance used to generate samples from the distribution. */\n+    protected final RandomGenerator random;\n     /** The number of dimensions or columns in the multivariate distribution. */\n     private final int numDimensions;\n-    /** RNG instance used to generate samples from the distribution. */\n-    protected final RandomGenerator random;\n \n     /**\n      * @param rng Random number generator.\n     }\n \n     /**\n-     * \n-     * @return the number of dimensions in the multivariate distribution .\n+     * Gets the number of dimensions (i.e. the number of random variables) of\n+     * the distribution.\n+     *\n+     * @return the number of dimensions.\n      */\n     public int getDimensions() {\n         return numDimensions;\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.commons.math3.distribution;\n \n import org.apache.commons.math3.exception.DimensionMismatchException;\n \n /**\n  * Implementation of the multivariate normal (Gaussian) distribution.\n- * \n+ *\n  * @see <a href=\"http://en.wikipedia.org/wiki/Multivariate_normal_distribution\">\n  * Multivariate normal distribution (Wikipedia)</a>\n  * @see <a href=\"http://mathworld.wolfram.com/MultivariateNormalDistribution.html\">\n  * Multivariate normal distribution (MathWorld)</a>\n+ *\n+ * @version $Id$\n+ * @since 3.1\n  */\n public class MultivariateNormalDistribution\n     extends AbstractMultivariateRealDistribution {\n      * The number of dimensions is equal to the length of the mean vector\n      * and to the number of rows and columns of the covariance matrix.\n      * It is frequently written as \"p\" in formulae.\n-     * \n+     *\n      * @param means Vector of means.\n      * @param covariances Covariance matrix.\n+     * @throws DimensionMismatchException if the arrays length are\n+     * inconsistent.\n+     * @throws SingularMatrixException if the eigenvalue decomposition cannot\n+     * be performed on the provided covariance matrix.\n+     * @throws NonPositiveDefiniteMatrixException if any of the eigenvalues is\n+     * negative.\n      */\n     public MultivariateNormalDistribution(final double[] means,\n                                           final double[][] covariances)\n      * The number of dimensions is equal to the length of the mean vector\n      * and to the number of rows and columns of the covariance matrix.\n      * It is frequently written as \"p\" in formulae.\n-     * \n+     *\n      * @param rng Random Number Generator.\n      * @param means Vector of means.\n      * @param covariances Covariance matrix.\n+     * @throws DimensionMismatchException if the arrays length are\n+     * inconsistent.\n+     * @throws SingularMatrixException if the eigenvalue decomposition cannot\n+     * be performed on the provided covariance matrix.\n+     * @throws NonPositiveDefiniteMatrixException if any of the eigenvalues is\n+     * negative.\n      */\n     public MultivariateNormalDistribution(RandomGenerator rng,\n                                           final double[] means,\n \n     /**\n      * Gets the mean vector.\n-     * \n+     *\n      * @return the mean vector.\n      */\n     public double[] getMeans() {\n \n     /**\n      * Gets the covariance matrix.\n-     * \n+     *\n      * @return the covariance matrix.\n      */\n     public RealMatrix getCovariances() {\n         return covarianceMatrix.copy();\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public double density(final double[] vals) throws DimensionMismatchException {\n         final int dim = getDimensions();\n     /**\n      * Gets the square root of each element on the diagonal of the covariance\n      * matrix.\n-     * \n+     *\n      * @return the standard deviations.\n      */\n     public double[] getStandardDeviations() {\n \n     /**\n      * Computes the term used in the exponent (see definition of the distribution).\n-     * \n+     *\n      * @param values Values at which to compute density.\n      * @return the multiplication factor of density calculations.\n      */\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java\n  */\n package org.apache.commons.math3.distribution;\n \n-import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n-import org.apache.commons.math3.exception.NumberIsTooLargeException;\n-import org.apache.commons.math3.exception.OutOfRangeException;\n \n /**\n  * Base interface for multivariate distributions on the reals.\n- * \n+ *\n  * This is based largely on the RealDistribution interface, but cumulative\n  * distribution functions are not required because they are often quite\n  * difficult to compute for multivariate distributions.\n+ *\n+ * @version $Id$\n+ * @since 3.1\n  */\n public interface MultivariateRealDistribution {\n     /**\n      * this distribution, this method returns {@code P(X = x)}. In other words,\n      * this method represents the probability mass function (PMF) for the\n      * distribution.\n-     * \n+     *\n      * @param x Point at which the PMF is evaluated.\n      * @return the value of the probability mass function at point {@code x}.\n      */\n      * does not exist at {@code x}, then an appropriate replacement should be\n      * returned, e.g. {@code Double.POSITIVE_INFINITY}, {@code Double.NaN}, or\n      * the limit inferior or limit superior of the difference quotient.\n-     * \n+     *\n      * @param x Point at which the PDF is evaluated.\n      * @return the value of the probability density function at point {@code x}.\n      */\n-    double density(double[] x) throws DimensionMismatchException;\n+    double density(double[] x);\n \n     /**\n      * Access the lower bound of the support.\n      * <p>\n      * <code>inf {x in R | P(X <= x) > 0}</code>.\n      * </p>\n-     * \n+     *\n      * @return the lower bound of the support (might be\n      * {@code Double.NEGATIVE_INFINITY}).\n      */\n      * <p>\n      * <code>inf {x in R | P(X <= x) = 1}</code>.\n      * </p>\n-     * \n+     *\n      * @return the upper bound of the support (might be\n      * {@code Double.POSITIVE_INFINITY}).\n      */\n     /**\n      * Gets information about whether the lower bound of the support is\n      * inclusive or not.\n-     * \n+     *\n      * @return whether the lower bound of the support is inclusive or not.\n      */\n     boolean isSupportLowerBoundInclusive();\n     /**\n      * gets information about whether the upper bound of the support is\n      * inclusive or not.\n-     * \n+     *\n      * @return whether the upper bound of the support is inclusive or not.\n      */\n     boolean isSupportUpperBoundInclusive();\n      * Gets information about whether the support is connected (i.e. all\n      * values between the lower and upper bound of the support are included\n      * in the support).\n-     * \n+     *\n      * @return whether the support is connected or not.\n      */\n     boolean isSupportConnected();\n \n     /**\n      * Reseeds the random generator used to generate samples.\n-     * \n+     *\n      * @param seed Seed with which to initialize the random number generator.\n      */\n     void reseedRandomGenerator(long seed);\n \n     /**\n      * Generates a random value vector sampled from this distribution.\n-     * \n+     *\n      * @return a random value vector.\n      */\n     double[] sample();\n \n     /**\n      * Generates a list of a random value vectors from the distribution.\n-     * \n+     *\n      * @param sampleSize the number of random vectors to generate.\n      * @return an array representing the random samples.\n      * @throws org.apache.commons.math3.exception.NotStrictlyPositiveException", "timestamp": 1344812134, "metainfo": ""}