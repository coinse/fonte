{"sha": "f3f96250e559afeeccef339f64dfd6440a525652", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=20570 Submitted by:\tbrent@worden.org   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactory.java\n      */\n     public abstract GammaDistribution createGammaDistribution(\n         double alpha, double beta);\n+\n+    /**\n+     * Create a new t distribution with the given degrees of freedom.\n+     * @param degreesOfFreedom degrees of freedom.\n+     * @return a new t distribution.  \n+     */\n+    public abstract TDistribution createTDistribution(double degreesOfFreedom);\n }\n--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java\n \n         return new GammaDistributionImpl(alpha, beta);\n     }\n+\n+    /**\n+     * Create a new t distribution with the given degrees of freedom.\n+     * @param degreesOfFreedom degrees of freedom.\n+     * @return a new t distribution.  \n+     */\n+    public TDistribution createTDistribution(double degreesOfFreedom) {\n+        return new TDistributionImpl(degreesOfFreedom);\n+    }\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/TDistribution.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+/**\n+ * <p>\n+ * Student's t-Distribution.\n+ * </p>\n+ * \n+ * <p>\n+ * Instances of TDistribution objects should be created using\n+ * {@link DistributionFactory#createTDistribution(double)}\n+ * </p>\n+ * \n+ * <p>\n+ * Reference:<br/>\n+ * <a href=\"http://mathworld.wolfram.com/Studentst-Distribution.html\">\n+ * Student's t-Distribution</a>\n+ * </p>\n+ * \n+ * @author Brent Worden\n+ */\n+public interface TDistribution extends ContinuousDistribution {\n+    /**\n+     * Modify the degrees of freedom.\n+     * @param degreesOfFreedom the new degrees of freedom.\n+     */\n+    void setDegreesOfFreedom(double degreesOfFreedom);\n+    \n+    /**\n+     * Access the degrees of freedom.\n+     * @return the degrees of freedom.\n+     */\n+    double getDegreesOfFreedom();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import org.apache.commons.math.special.Beta;\n+\n+/**\n+ * Default implementation of\n+ * {@link org.apache.commons.math.stat.distribution.TDistribution}.\n+ * \n+ * @author Brent Worden\n+ */\n+public class TDistributionImpl\n+    extends AbstractContinuousDistribution\n+    implements TDistribution {\n+\n+    /** The degrees of freedom*/\n+    private double degreesOfFreedom;\n+    \n+    /**\n+     * Create a t distribution using the given degrees of freedom.\n+     * @param degreesOfFreedom the degrees of freedom.\n+     */\n+    public TDistributionImpl(double degreesOfFreedom){\n+        super();\n+        setDegreesOfFreedom(degreesOfFreedom);\n+    }\n+\n+    /**\n+     * Modify the degrees of freedom.\n+     * @param degreesOfFreedom the new degrees of freedom.\n+     */\n+    public void setDegreesOfFreedom(double degreesOfFreedom) {\n+        if(degreesOfFreedom <= 0.0){\n+            throw new IllegalArgumentException(\n+                \"degrees of freedom must be positive.\");\n+        }\n+        this.degreesOfFreedom = degreesOfFreedom;\n+    }\n+\n+    /**\n+     * Access the degrees of freedom.\n+     * @return the degrees of freedom.\n+     */\n+    public double getDegreesOfFreedom() {\n+        return degreesOfFreedom;\n+    }\n+\n+    /**\n+     * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n+     * @param x the value at which the CDF is evaluated.\n+     * @return CDF evaluted at <code>x</code>. \n+     */\n+    public double cummulativeProbability(double x) {\n+        double t = Beta.regularizedBeta(\n+            getDegreesOfFreedom() / (getDegreesOfFreedom() + (x * x)),\n+            0.5 * getDegreesOfFreedom(), 0.5);\n+            \n+        double ret;\n+        if(x < 0.0){\n+            ret = 0.5 * t;\n+        } else if(x > 0.0){\n+            ret = 1.0 - 0.5 * t;\n+        } else {\n+            ret = 0.5;\n+        }\n+        return ret;\n+    }\n+        \n+    /**\n+     * Access the domain value lower bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value lower bound, i.e.\n+     *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code> \n+     */\n+    protected double getDomainLowerBound(double p){\n+        return -Double.MAX_VALUE;\n+    }\n+\n+    /**\n+     * Access the domain value upper bound, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return domain value upper bound, i.e.\n+     *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n+     */\n+    protected double getDomainUpperBound(double p){\n+        return Double.MAX_VALUE;\n+    }\n+\n+    /**\n+     * Access the initial domain value, based on <code>p</code>, used to\n+     * bracket a CDF root.  This method is used by\n+     * {@link #inverseCummulativeProbability(double)} to find critical values.\n+     * \n+     * @param p the desired probability for the critical value\n+     * @return initial domain value\n+     */\n+    protected double getInitialDomain(double p){\n+        return 0.0;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/special/Beta.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.special;\n+\n+/**\n+ * This is a utility class that provides computation methods related to the\n+ * Gamma family of functions.\n+ * \n+ * @author Brent Worden\n+ */\n+public class Beta {\n+    /** Maximum allowed numerical error. */\n+    private static final double DEFAULT_EPSILON = 10e-9;\n+\n+    /**\n+     * Default constructor.  Prohibit instantiation.\n+     */\n+    private Beta() {\n+        super();\n+    }\n+\n+    /**\n+     * <p>\n+     * Returns the regularized beta function I(x, a, b).\n+     * </p>\n+     * \n+     * @param x ???\n+     * @param a ???\n+     * @param b ???\n+     * @return the regularized beta function I(x, a, b)\n+     */\n+    public static double regularizedBeta(double x, double a, double b) {\n+        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>\n+     * Returns the regularized beta function I(x, a, b).\n+     * </p>\n+     * \n+     * @param x ???\n+     * @param a ???\n+     * @param b ???\n+     * @return the regularized beta function I(x, a, b)\n+     */\n+    public static double regularizedBeta(double x, double a, double b, double epsilon) {\n+        return regularizedBeta(x, a, b, epsilon, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>\n+     * Returns the regularized beta function I(x, a, b).\n+     * </p>\n+     * \n+     * @param x ???\n+     * @param a ???\n+     * @param b ???\n+     * @return the regularized beta function I(x, a, b)\n+     */\n+    public static double regularizedBeta(double x, double a, double b, int maxIterations) {\n+        return regularizedBeta(x, a, b, DEFAULT_EPSILON, maxIterations);\n+    }\n+    \n+    /**\n+     * <p>\n+     * Returns the regularized beta function I(x, a, b).\n+     * </p>\n+     * \n+     * <p>\n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/RegularizedBetaFunction.html\">\n+     * Regularized Beta Function</a>.</li>\n+     * <li>\n+     * <a href=\"http://mathworld.wolfram.com/IncompleteBetaFunction.html\">\n+     * Incomplete Beta Function</a>.</li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param x ???\n+     * @param a ???\n+     * @param b ???\n+     * @return the regularized beta function I(x, a, b)\n+     */\n+    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) {\n+        double ret;\n+\n+        if (a <= 0.0) {\n+            throw new IllegalArgumentException(\"a must be positive\");\n+        } else if (b <= 0.0) {\n+            throw new IllegalArgumentException(\"b must be positive\");\n+        } else if (x < 0.0 || x > 1.0) {\n+            throw new IllegalArgumentException(\n+                \"x must be between 0.0 and 1.0, inclusive\");\n+        } else if(x == 0.0){\n+            ret = 0.0;\n+        } else if(x == 1.0){\n+            ret = 1.0;\n+        } else {\n+            double n = 0.0;\n+            double an = 1.0 / a;\n+            double s = an;\n+            while(Math.abs(an) > epsilon && n < maxIterations){\n+                n = n + 1.0;\n+                an = an * (n - b) / n * x / (a + n) * (a + n - 1);\n+                s = s + an;\n+            }\n+            ret = Math.exp(a * Math.log(x) - logBeta(a, b)) * s;\n+        }\n+\n+        return ret;\n+    }\n+\n+    /**\n+     * <p>\n+     * Returns the natural logarithm of the beta function B(a, b).\n+     * </p>\n+     *\n+     * <p> \n+     * The implementation of this method is based on:\n+     * <ul>\n+     * <li><a href=\"http://mathworld.wolfram.com/BetaFunction.html\">\n+     * Beta Function</a>, equation (1).</li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param x ???\n+     * @return log(B(a, b))\n+     */\n+    public static double logBeta(double a, double b) {\n+        double ret;\n+\n+        if (a <= 0.0) {\n+            throw new IllegalArgumentException(\"a must be positive\");\n+        } else if (b <= 0.0) {\n+            throw new IllegalArgumentException(\"b must be positive\");\n+        } else {\n+            ret = Gamma.logGamma(a) + Gamma.logGamma(b)\n+                - Gamma.logGamma(a + b);\n+        }\n+\n+        return ret;\n+    }\n+}\n--- a/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n+++ b/src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java\n             fail(\"positive alpah and beta.  IllegalArgumentException is not expected\");\n         }\n     }\n-//    \n-//    public void testCreateTDistributionNegative(){\n-//        try {\n-//            factory.createTDistribution(-1.0);\n-//            fail(\"negative degrees of freedom.  IllegalArgumentException expected\");\n-//        } catch (IllegalArgumentException ex) {\n-//            ;\n-//        }\n-//    }\n-//    \n-//    public void testCreateTDistributionZero(){\n-//        try {\n-//            factory.createTDistribution(0.0);\n-//            fail(\"zero degrees of freedom.  IllegalArgumentException expected\");\n-//        } catch (IllegalArgumentException ex) {\n-//            ;\n-//        }\n-//    }\n-//    \n-//    public void testCreateTDistributionPositive(){\n-//        try {\n-//            factory.createTDistribution(1.0);\n-//        } catch (IllegalArgumentException ex) {\n-//            fail(\"positive degrees of freedom.  IllegalArgumentException is not expected\");\n-//        }\n-//    }\n+    \n+    public void testCreateTDistributionNegative(){\n+        try {\n+            factory.createTDistribution(-1.0);\n+            fail(\"negative degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateTDistributionZero(){\n+        try {\n+            factory.createTDistribution(0.0);\n+            fail(\"zero degrees of freedom.  IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+    }\n+    \n+    public void testCreateTDistributionPositive(){\n+        try {\n+            factory.createTDistribution(1.0);\n+        } catch (IllegalArgumentException ex) {\n+            fail(\"positive degrees of freedom.  IllegalArgumentException is not expected\");\n+        }\n+    }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat.distribution;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Brent Worden\n+ */\n+public class TDistributionTest extends TestCase {\n+    private TDistribution t;\n+    \n+    /**\n+     * Constructor for ChiSquareDistributionTest.\n+     * @param name\n+     */\n+    public TDistributionTest(String name) {\n+        super(name);\n+    }\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        t = DistributionFactory.newInstance().createTDistribution(5.0);\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        t = null;\n+        super.tearDown();\n+    }\n+\n+    public void testLowerTailProbability(){\n+        testProbability(-5.893, .001);\n+        testProbability(-3.365, .010);\n+        testProbability(-2.571, .025);\n+        testProbability(-2.015, .050);\n+        testProbability(-1.476, .100);\n+    }\n+\n+    public void testUpperTailProbability(){\n+        testProbability(5.893, .999);\n+        testProbability(3.365, .990);\n+        testProbability(2.571, .975);\n+        testProbability(2.015, .950);\n+        testProbability(1.476, .900);\n+    }\n+    \n+    public void testLowerTailValues(){\n+        testValue(-5.893, .001);\n+        testValue(-3.365, .010);\n+        testValue(-2.571, .025);\n+        testValue(-2.015, .050);\n+        testValue(-1.476, .100);\n+    }\n+    \n+    public void testUpperTailValues(){\n+        testValue(5.893, .999);\n+        testValue(3.365, .990);\n+        testValue(2.571, .975);\n+        testValue(2.015, .950);\n+        testValue(1.476, .900);\n+    }\n+    \n+    private void testProbability(double x, double expected){\n+        double actual = t.cummulativeProbability(x);\n+        assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n+    }\n+    \n+    private void testValue(double expected, double p){\n+        double actual = t.inverseCummulativeProbability(p);\n+        assertEquals(\"value for \" + p, expected, actual, 10e-4);\n+    }\n+}", "timestamp": 1054994274, "metainfo": ""}