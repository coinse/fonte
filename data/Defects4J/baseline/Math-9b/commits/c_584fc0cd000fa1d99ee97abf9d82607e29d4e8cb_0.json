{"sha": "584fc0cd000fa1d99ee97abf9d82607e29d4e8cb", "log": "removed deprecated factory methods and classes they were replaced by setter injection as of 1.2  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n import java.lang.reflect.InvocationTargetException;\n import java.util.Arrays;\n \n-import org.apache.commons.discovery.tools.DiscoverClass;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Kurtosis;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n public class DescriptiveStatistics implements StatisticalSummary, Serializable {\n     \n     /** Serialization UID */\n-    private static final long serialVersionUID = -2734185686570407433L;\n-    \n+    private static final long serialVersionUID = 4133067267405273064L;\n+\n     /** hold the window size **/\n     protected int windowSize = INFINITE_WINDOW;\n     \n     public DescriptiveStatistics(int window) {\n         super();\n         setWindowSize(window);\n-    }\n-    \n-    /**\n-     * Create an instance of a <code>DescriptiveStatistics</code>\n-     * @param cls the type of <code>DescriptiveStatistics</code> object to\n-     *        create. \n-     * @return a new instance. \n-     * @throws InstantiationException is thrown if the object can not be\n-     *            created.\n-     * @throws IllegalAccessException is thrown if the type's default\n-     *            constructor is not accessible.\n-     * @deprecated to be removed in commons-math 2.0\n-     */\n-    public static DescriptiveStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n-        return (DescriptiveStatistics)cls.newInstance();\n-    }\n-    \n-    /**\n-     * Create an instance of a <code>DescriptiveStatistics</code>\n-     * @return a new DescriptiveStatistics instance. \n-     * @deprecated to be removed in commons-math 2.0\n-     */\n-    public static DescriptiveStatistics newInstance() {\n-        DescriptiveStatistics factory = null;\n-        try {\n-            DiscoverClass dc = new DiscoverClass();\n-            factory = (DescriptiveStatistics) dc.newInstance(\n-                DescriptiveStatistics.class,\n-                \"org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl\");\n-        } catch(Throwable t) {\n-            return new DescriptiveStatisticsImpl();\n-        }\n-        return factory;\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n \n import java.io.Serializable;\n \n-import org.apache.commons.discovery.tools.DiscoverClass;\n import org.apache.commons.math.stat.descriptive.moment.GeometricMean;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n import org.apache.commons.math.stat.descriptive.moment.SecondMoment;\n public class SummaryStatistics implements StatisticalSummary, Serializable {\n \n     /** Serialization UID */\n-    private static final long serialVersionUID = -3346512372447011854L;\n-\n-    /**\n-     * Create an instance of a <code>SummaryStatistics</code>\n-     * @param cls the type of <code>SummaryStatistics</code> object to create.\n-     * @return a new instance.\n-     * @deprecated to be removed in commons-math 2.0\n-     * @throws InstantiationException is thrown if the object can not be\n-     *         created.\n-     * @throws IllegalAccessException is thrown if the type's default\n-     *         constructor is not accessible.\n-     */\n-    public static SummaryStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n-        return (SummaryStatistics)cls.newInstance();\n-    }\n-\n-    /**\n-     * Create an instance of a <code>SummaryStatistics</code>\n-     * @return a new SummaryStatistics instance.\n-     * @deprecated to be removed in commons-math 2.0\n-     */\n-    public static SummaryStatistics newInstance() {\n-        SummaryStatistics instance = null;\n-        try {\n-            DiscoverClass dc = new DiscoverClass();\n-            instance = (SummaryStatistics)dc.newInstance(SummaryStatistics.class, \"org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl\");\n-        } catch (Throwable t) {\n-            return new SummaryStatisticsImpl();\n-        }\n-        return instance;\n-    }\n+    private static final long serialVersionUID = -2021321786743555871L;\n \n     /**\n      * Construct a SummaryStatistics instance\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n import org.apache.commons.math.MathException;\n import org.apache.commons.math.distribution.ChiSquaredDistribution;\n import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;\n-import org.apache.commons.math.distribution.DistributionFactory;\n \n /**\n  * Implements Chi-Square test statistics defined in the\n         \n     }\n     \n-    //---------------------  Protected methods ---------------------------------\n-    /**\n-     * Gets a DistributionFactory to use in creating ChiSquaredDistribution instances.\n-     * @deprecated inject ChiSquaredDistribution instances directly instead of\n-     *             using a factory.\n-     */\n-    protected DistributionFactory getDistributionFactory() {\n-        return DistributionFactory.newInstance();\n-    }\n-    \n     //---------------------  Private array methods -- should find a utility home for these\n     \n     /**\n--- a/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/TTestImpl.java\n package org.apache.commons.math.stat.inference;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.distribution.DistributionFactory;\n import org.apache.commons.math.distribution.TDistribution;\n import org.apache.commons.math.distribution.TDistributionImpl;\n import org.apache.commons.math.stat.StatUtils;\n     //----------------------------------------------- Protected methods \n \n     /**\n-     * Gets a DistributionFactory to use in creating TDistribution instances.\n-     * @return a distribution factory.\n-     * @deprecated inject TDistribution directly instead of using a factory.\n-     */\n-    protected DistributionFactory getDistributionFactory() {\n-        return DistributionFactory.newInstance();\n-    }\n-    \n-    /**\n      * Computes approximate degrees of freedom for 2-sample t-test.\n      * \n      * @param v1 first sample variance\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n package org.apache.commons.math.stat.descriptive;\n \n import junit.framework.Test;\n+import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n import org.apache.commons.math.stat.descriptive.rank.Percentile;\n \n /**\n  * Test cases for the DescriptiveStatistics class.\n- * When DescriptiveStatisticsImpl is removed, this class should replace\n- * DescriptiveStatisticsAbstractTest\n  * \n  * @version $Revision: 592121 $ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n  *          2007) $\n  */\n-public final class DescriptiveStatisticsTest extends DescriptiveStatisticsAbstractTest {\n+public class DescriptiveStatisticsTest extends TestCase {\n \n     public DescriptiveStatisticsTest(String name) {\n         super(name);\n--- a/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java\n  * @version $Revision$ $Date$\n  */\n \n-public final class SummaryStatisticsImplTest extends SummaryStatisticsAbstractTest {\n+public final class SummaryStatisticsImplTest extends SummaryStatisticsTest {\n \n     public SummaryStatisticsImplTest(String name) {\n         super(name);\n--- a/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n \n \n import junit.framework.Test;\n+import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.stat.descriptive.moment.Mean;\n import org.apache.commons.math.stat.descriptive.summary.Sum;\n /**\n  * Test cases for the {@link SummaryStatistics} class.\n- * When SummaryStatisticsImpl is removed in math 2.0, test cases from\n- * SummaryStatisticsImplTest should be merged into this class.\n  *\n  * @version $Revision: 566833 $ $Date: 2007-08-16 13:36:33 -0700 (Thu, 16 Aug 2007) $\n  */\n \n-public final class SummaryStatisticsTest extends SummaryStatisticsAbstractTest {\n-\n-    public SummaryStatisticsTest(String name) {\n-        super(name);\n-    }\n-    \n+public class SummaryStatisticsTest extends TestCase {\n+\n+    private double one = 1;\n+    private float twoF = 2;\n+    private long twoL = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double tolerance = 10E-15;\n+\n     public static Test suite() {\n         TestSuite suite = new TestSuite(SummaryStatisticsTest.class);\n         suite.setName(\"SummaryStatistics tests\");\n         return suite;\n     }\n \n+    public SummaryStatisticsTest(String name) {\n+        super(name);\n+    }\n+    \n     protected SummaryStatistics createSummaryStatistics() {\n         return new SummaryStatistics();\n     }\n-    \n+\n+    /** test stats */\n+    public void testStats() {\n+        SummaryStatistics u = createSummaryStatistics();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);\n+        u.addValue(one);\n+        u.addValue(twoF);\n+        u.addValue(twoL);\n+        u.addValue(three);\n+        assertEquals(\"N\",n,u.getN(),tolerance);\n+        assertEquals(\"sum\",sum,u.getSum(),tolerance);\n+        assertEquals(\"sumsq\",sumSq,u.getSumsq(),tolerance);\n+        assertEquals(\"var\",var,u.getVariance(),tolerance);\n+        assertEquals(\"std\",std,u.getStandardDeviation(),tolerance);\n+        assertEquals(\"mean\",mean,u.getMean(),tolerance);\n+        assertEquals(\"min\",min,u.getMin(),tolerance);\n+        assertEquals(\"max\",max,u.getMax(),tolerance);\n+        u.clear();\n+        assertEquals(\"total count\",0,u.getN(),tolerance);    \n+    }     \n+\n+    public void testN0andN1Conditions() throws Exception {\n+        SummaryStatistics u = createSummaryStatistics();\n+        assertTrue(\"Mean of n = 0 set should be NaN\", \n+                Double.isNaN( u.getMean() ) );\n+        assertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n+                Double.isNaN( u.getStandardDeviation() ) );\n+        assertTrue(\"Variance of n = 0 set should be NaN\", \n+                Double.isNaN(u.getVariance() ) );\n+\n+        /* n=1 */\n+        u.addValue(one);\n+        assertTrue(\"mean should be one (n = 1)\", \n+                u.getMean() == one);\n+        assertTrue(\"geometric should be one (n = 1) instead it is \" + u.getGeometricMean(), \n+                u.getGeometricMean() == one);\n+        assertTrue(\"Std should be zero (n = 1)\", \n+                u.getStandardDeviation() == 0.0);\n+        assertTrue(\"variance should be zero (n = 1)\", \n+                u.getVariance() == 0.0);\n+\n+        /* n=2 */               \n+        u.addValue(twoF);\n+        assertTrue(\"Std should not be zero (n = 2)\", \n+                u.getStandardDeviation() != 0.0);\n+        assertTrue(\"variance should not be zero (n = 2)\", \n+                u.getVariance() != 0.0);\n+\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+        SummaryStatistics u = createSummaryStatistics();\n+        u.addValue( 1.0 );\n+        u.addValue( 2.0 );\n+        u.addValue( 3.0 );\n+        u.addValue( 4.0 );\n+\n+        assertEquals( \"Geometric mean not expected\", 2.213364, \n+                u.getGeometricMean(), 0.00001 );\n+    }\n+\n+    public void testNaNContracts() {\n+        SummaryStatistics u = createSummaryStatistics();\n+        assertTrue(\"mean not NaN\",Double.isNaN(u.getMean())); \n+        assertTrue(\"min not NaN\",Double.isNaN(u.getMin())); \n+        assertTrue(\"std dev not NaN\",Double.isNaN(u.getStandardDeviation())); \n+        assertTrue(\"var not NaN\",Double.isNaN(u.getVariance())); \n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+\n+        u.addValue(1.0);\n+\n+        assertEquals( \"mean not expected\", 1.0, \n+                u.getMean(), Double.MIN_VALUE);\n+        assertEquals( \"variance not expected\", 0.0, \n+                u.getVariance(), Double.MIN_VALUE);\n+        assertEquals( \"geometric mean not expected\", 1.0, \n+                u.getGeometricMean(), Double.MIN_VALUE);\n+\n+        u.addValue(-1.0);\n+\n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+\n+        u.addValue(0.0);\n+\n+        assertTrue(\"geom mean not NaN\",Double.isNaN(u.getGeometricMean()));\n+\n+        //FiXME: test all other NaN contract specs\n+    }\n+\n+    public void testGetSummary() {\n+        SummaryStatistics u = createSummaryStatistics();\n+        StatisticalSummary summary = u.getSummary();\n+        verifySummary(u, summary);\n+        u.addValue(1d);\n+        summary = u.getSummary();\n+        verifySummary(u, summary);\n+        u.addValue(2d);\n+        summary = u.getSummary();\n+        verifySummary(u, summary);\n+        u.addValue(2d);\n+        summary = u.getSummary();\n+        verifySummary(u, summary);     \n+    }\n+\n+    public void testSerialization() {\n+        SummaryStatistics u = createSummaryStatistics();\n+        // Empty test\n+        TestUtils.checkSerializedEquality(u);\n+        SummaryStatistics s = (SummaryStatistics) TestUtils.serializeAndRecover(u);\n+        StatisticalSummary summary = s.getSummary();\n+        verifySummary(u, summary);\n+\n+        // Add some data\n+        u.addValue(2d);\n+        u.addValue(1d);\n+        u.addValue(3d);\n+        u.addValue(4d);\n+        u.addValue(5d);\n+\n+        // Test again\n+        TestUtils.checkSerializedEquality(u);\n+        s = (SummaryStatistics) TestUtils.serializeAndRecover(u);\n+        summary = s.getSummary();\n+        verifySummary(u, summary);\n+\n+    }\n+\n+    public void testEqualsAndHashCode() {\n+        SummaryStatistics u = createSummaryStatistics();\n+        SummaryStatistics t = null;\n+        int emptyHash = u.hashCode();\n+        assertTrue(\"reflexive\", u.equals(u));\n+        assertFalse(\"non-null compared to null\", u.equals(t));\n+        assertFalse(\"wrong type\", u.equals(new Double(0)));\n+        t = createSummaryStatistics();\n+        assertTrue(\"empty instances should be equal\", t.equals(u));\n+        assertTrue(\"empty instances should be equal\", u.equals(t));\n+        assertEquals(\"empty hash code\", emptyHash, t.hashCode());\n+\n+        // Add some data to u\n+        u.addValue(2d);\n+        u.addValue(1d);\n+        u.addValue(3d);\n+        u.addValue(4d);\n+        assertFalse(\"different n's should make instances not equal\", t.equals(u));\n+        assertFalse(\"different n's should make instances not equal\", u.equals(t));\n+        assertTrue(\"different n's should make hashcodes different\", \n+                u.hashCode() != t.hashCode());\n+\n+        //Add data in same order to t\n+        t.addValue(2d);\n+        t.addValue(1d);\n+        t.addValue(3d);\n+        t.addValue(4d);\n+        assertTrue(\"summaries based on same data should be equal\", t.equals(u));\n+        assertTrue(\"summaries based on same data should be equal\", u.equals(t));\n+        assertEquals(\"summaries based on same data should have same hashcodes\", \n+                u.hashCode(), t.hashCode());   \n+\n+        // Clear and make sure summaries are indistinguishable from empty summary\n+        u.clear();\n+        t.clear();\n+        assertTrue(\"empty instances should be equal\", t.equals(u));\n+        assertTrue(\"empty instances should be equal\", u.equals(t));\n+        assertEquals(\"empty hash code\", emptyHash, t.hashCode());\n+        assertEquals(\"empty hash code\", emptyHash, u.hashCode());\n+    }\n+\n+    private void verifySummary(SummaryStatistics u, StatisticalSummary s) {\n+        assertEquals(\"N\",s.getN(),u.getN());\n+        TestUtils.assertEquals(\"sum\",s.getSum(),u.getSum(),tolerance);\n+        TestUtils.assertEquals(\"var\",s.getVariance(),u.getVariance(),tolerance);\n+        TestUtils.assertEquals(\"std\",s.getStandardDeviation(),u.getStandardDeviation(),tolerance);\n+        TestUtils.assertEquals(\"mean\",s.getMean(),u.getMean(),tolerance);\n+        TestUtils.assertEquals(\"min\",s.getMin(),u.getMin(),tolerance);\n+        TestUtils.assertEquals(\"max\",s.getMax(),u.getMax(),tolerance);   \n+    }\n+\n     public void testSetterInjection() throws Exception {\n         SummaryStatistics u = createSummaryStatistics();\n         u.setMeanImpl(new Sum());\n--- a/src/test/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java\n  * @version $Revision$ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n  *          2007) $\n  */\n-public final class SynchronizedDescriptiveStatisticsTest extends DescriptiveStatisticsAbstractTest {\n+public final class SynchronizedDescriptiveStatisticsTest extends DescriptiveStatisticsTest {\n \n     public SynchronizedDescriptiveStatisticsTest(String name) {\n         super(name);\n--- a/src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java\n  * @version $Revision: 592121 $ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug\n  *          2007) $\n  */\n-public final class SynchronizedSummaryStatisticsTest extends SummaryStatisticsAbstractTest {\n+public final class SynchronizedSummaryStatisticsTest extends SummaryStatisticsTest {\n \n     public SynchronizedSummaryStatisticsTest(String name) {\n         super(name);", "timestamp": 1209038673, "metainfo": ""}