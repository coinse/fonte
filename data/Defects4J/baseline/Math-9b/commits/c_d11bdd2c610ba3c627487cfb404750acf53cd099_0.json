{"sha": "d11bdd2c610ba3c627487cfb404750acf53cd099", "log": "MATH-697 Fixed bug in check that the initial value is within bounds.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java\n      * if the maximal number of evaluations is exceeded.\n      * @throws org.apache.commons.math.exception.NullArgumentException if\n      * {@code f}, {@code goalType} or {@code startPoint} is {@code null}.\n-     * @throws org.apache.commons.math.exception.OutOfRangeException if any\n-     * of the initial values is out of bounds.\n+     * @throws org.apache.commons.math.exception.NumberIsTooSmallException if any\n+     * of the initial values is less than its lower bound.\n+     * @throws org.apache.commons.math.exception.NumberIsTooLargeException if any\n+     * of the initial values is greater than its upper bound.\n      */\n     RealPointValuePair optimize(int maxEval, FUNC f, GoalType goalType,\n                                 double[] startPoint,\n--- a/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java\n import org.apache.commons.math.exception.TooManyEvaluationsException;\n import org.apache.commons.math.exception.NullArgumentException;\n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.OutOfRangeException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n+import org.apache.commons.math.exception.NumberIsTooLargeException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n import org.apache.commons.math.optimization.BaseMultivariateRealOptimizer;\n import org.apache.commons.math.optimization.GoalType;\n             throw new NullArgumentException();\n         }\n         final int dim = startPoint.length;\n-        if (lower != null &&\n-            lower.length != dim) {\n-            throw new DimensionMismatchException(lower.length, dim);\n-        }\n-        if (upper != null &&\n-            upper.length != dim) {\n-            throw new DimensionMismatchException(upper.length, dim);\n-        }\n-        for (int i = 0; i < dim; i++) {\n-            final double v = startPoint[i];\n-            final double lo = lower[i];\n-            final double hi = upper[i];\n-            if (v < lo ||\n-                v > hi) {\n-                throw new OutOfRangeException(v, lo, hi);\n+        if (lower != null) {\n+            if (lower.length != dim) {\n+                throw new DimensionMismatchException(lower.length, dim);\n+            }\n+            for (int i = 0; i < dim; i++) {\n+                final double v = startPoint[i];\n+                final double lo = lower[i];\n+                if (v < lo) {\n+                    throw new NumberIsTooSmallException(v, lo, true);\n+                }\n+            }\n+        }\n+        if (upper != null) {\n+            if (upper.length != dim) {\n+                throw new DimensionMismatchException(upper.length, dim);\n+            }\n+            for (int i = 0; i < dim; i++) {\n+                final double v = startPoint[i];\n+                final double hi = upper[i];\n+                if (v > hi) {\n+                    throw new NumberIsTooLargeException(v, hi, true);\n+                }\n             }\n         }\n ", "timestamp": 1319887170, "metainfo": ""}