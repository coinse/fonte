{"sha": "909a315518040c9c7751bcb5e9acd75fc01d5cae", "log": "Added setters allowing to change the step size control parameters of adaptive step size ODE integrators  Jira: MATH-563  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n   extends AbstractIntegrator {\n \n     /** Allowed absolute scalar error. */\n-    protected final double scalAbsoluteTolerance;\n+    protected double scalAbsoluteTolerance;\n \n     /** Allowed relative scalar error. */\n-    protected final double scalRelativeTolerance;\n+    protected double scalRelativeTolerance;\n \n     /** Allowed absolute vectorial error. */\n-    protected final double[] vecAbsoluteTolerance;\n+    protected double[] vecAbsoluteTolerance;\n \n     /** Allowed relative vectorial error. */\n-    protected final double[] vecRelativeTolerance;\n+    protected double[] vecRelativeTolerance;\n \n     /** Main set dimension. */\n     protected int mainSetDimension;\n     private double initialStep;\n \n     /** Minimal step. */\n-    private final double minStep;\n+    private double minStep;\n \n     /** Maximal step. */\n-    private final double maxStep;\n+    private double maxStep;\n \n   /** Build an integrator with the given stepsize bounds.\n    * The default step handler does nothing.\n                                     final double scalRelativeTolerance) {\n \n     super(name);\n-\n-    this.minStep     = FastMath.abs(minStep);\n-    this.maxStep     = FastMath.abs(maxStep);\n-    this.initialStep = -1.0;\n-\n-    this.scalAbsoluteTolerance = scalAbsoluteTolerance;\n-    this.scalRelativeTolerance = scalRelativeTolerance;\n-    this.vecAbsoluteTolerance  = null;\n-    this.vecRelativeTolerance  = null;\n-\n+    setStepSizeControl(minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);\n     resetInternalState();\n \n   }\n                                     final double[] vecRelativeTolerance) {\n \n     super(name);\n-\n-    this.minStep     = minStep;\n-    this.maxStep     = maxStep;\n-    this.initialStep = -1.0;\n-\n-    this.scalAbsoluteTolerance = 0;\n-    this.scalRelativeTolerance = 0;\n-    this.vecAbsoluteTolerance  = vecAbsoluteTolerance.clone();\n-    this.vecRelativeTolerance  = vecRelativeTolerance.clone();\n-\n+    setStepSizeControl(minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);\n     resetInternalState();\n+\n+  }\n+\n+  /** Set the adaptive step size control parameters.\n+   * <p>\n+   * A side effect of this method is to also reset the initial\n+   * step so it will be automatically computed by the integrator\n+   * if {@link #setInitialStepSize(double) setInitialStepSize}\n+   * is not called by the user.\n+   * </p>\n+   * @param minimalStep minimal step (must be positive even for backward\n+   * integration), the last step can be smaller than this\n+   * @param maximalStep maximal step (must be positive even for backward\n+   * integration)\n+   * @param absoluteTolerance allowed absolute error\n+   * @param relativeTolerance allowed relative error\n+   */\n+  public void setStepSizeControl(final double minimalStep, final double maximalStep,\n+                                 final double absoluteTolerance,\n+                                 final double relativeTolerance) {\n+\n+      minStep     = FastMath.abs(minimalStep);\n+      maxStep     = FastMath.abs(maximalStep);\n+      initialStep = -1;\n+\n+      scalAbsoluteTolerance = absoluteTolerance;\n+      scalRelativeTolerance = relativeTolerance;\n+      vecAbsoluteTolerance  = null;\n+      vecRelativeTolerance  = null;\n+\n+  }\n+\n+  /** Set the adaptive step size control parameters.\n+   * <p>\n+   * A side effect of this method is to also reset the initial\n+   * step so it will be automatically computed by the integrator\n+   * if {@link #setInitialStepSize(double) setInitialStepSize}\n+   * is not called by the user.\n+   * </p>\n+   * @param minimalStep minimal step (must be positive even for backward\n+   * integration), the last step can be smaller than this\n+   * @param maximalStep maximal step (must be positive even for backward\n+   * integration)\n+   * @param absoluteTolerance allowed absolute error\n+   * @param relativeTolerance allowed relative error\n+   */\n+  public void setStepSizeControl(final double minimalStep, final double maximalStep,\n+                                 final double[] absoluteTolerance,\n+                                 final double[] relativeTolerance) {\n+\n+      minStep     = FastMath.abs(minimalStep);\n+      maxStep     = FastMath.abs(maximalStep);\n+      initialStep = -1;\n+\n+      scalAbsoluteTolerance = 0;\n+      scalRelativeTolerance = 0;\n+      vecAbsoluteTolerance  = absoluteTolerance.clone();\n+      vecRelativeTolerance  = relativeTolerance.clone();\n \n   }\n \n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n     throws MathUserException, IntegratorException {\n \n     int previousCalls = Integer.MAX_VALUE;\n+    AdaptiveStepsizeIntegrator integ =\n+        new DormandPrince853Integrator(0, Double.POSITIVE_INFINITY,\n+                                       Double.NaN, Double.NaN);\n     for (int i = -12; i < -2; ++i) {\n       TestProblem1 pb = new TestProblem1();\n       double minStep = 0;\n       double maxStep = pb.getFinalTime() - pb.getInitialTime();\n       double scalAbsoluteTolerance = FastMath.pow(10.0, i);\n       double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n-\n-      FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n-                                                                  scalAbsoluteTolerance,\n-                                                                  scalRelativeTolerance);\n+      integ.setStepSizeControl(minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);\n+\n       TestProblemHandler handler = new TestProblemHandler(pb, integ);\n       integ.addStepHandler(handler);\n       integ.integrate(pb,", "timestamp": 1303724749, "metainfo": ""}