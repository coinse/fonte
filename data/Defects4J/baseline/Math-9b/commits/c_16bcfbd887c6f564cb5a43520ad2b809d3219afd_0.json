{"sha": "16bcfbd887c6f564cb5a43520ad2b809d3219afd", "log": "Reverting changes inadvertently committed in revision 1366821.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/LUDecomposition.java\n+++ b/src/main/java/org/apache/commons/math3/linear/LUDecomposition.java\n                                                matrix.getColumnDimension());\n         }\n \n+        final int m = matrix.getColumnDimension();\n         lu = matrix.getData();\n-        final int m = lu.length;\n         pivot = new int[m];\n         cachedL = null;\n         cachedU = null;\n \n         // Loop over columns\n         for (int col = 0; col < m; col++) {\n-            final double[] luColumnCol = new double[m];\n-            for (int i = 0; i < m; i++) {\n-                luColumnCol[i] = lu[i][col];\n-            }\n \n             // upper\n             for (int row = 0; row < col; row++) {\n                 final double[] luRow = lu[row];\n                 double sum = luRow[col];\n                 for (int i = 0; i < row; i++) {\n-                    sum -= luRow[i] * luColumnCol[i];\n+                    sum -= luRow[i] * lu[i][col];\n                 }\n                 luRow[col] = sum;\n-                luColumnCol[row] = sum;\n             }\n \n             // lower\n                 final double[] luRow = lu[row];\n                 double sum = luRow[col];\n                 for (int i = 0; i < col; i++) {\n-                    sum -= luRow[i] * luColumnCol[i];\n+                    sum -= luRow[i] * lu[i][col];\n                 }\n                 luRow[col] = sum;\n-                luColumnCol[row] = sum;\n \n                 // maintain best permutation choice\n                 if (FastMath.abs(sum) > largest) {\n             }\n \n             // Singularity check\n-            if (FastMath.abs(luColumnCol[max]) < singularityThreshold) {\n+            if (FastMath.abs(lu[max][col]) < singularityThreshold) {\n                 singular = true;\n                 return;\n             }\n \n             // Pivot if necessary\n             if (max != col) {\n+                double tmp = 0;\n                 final double[] luMax = lu[max];\n                 final double[] luCol = lu[col];\n                 for (int i = 0; i < m; i++) {\n-                    final double tmp = luMax[i];\n+                    tmp = luMax[i];\n                     luMax[i] = luCol[i];\n                     luCol[i] = tmp;\n                 }\n-                final int temp = pivot[max];\n+                int temp = pivot[max];\n                 pivot[max] = pivot[col];\n                 pivot[col] = temp;\n                 even = !even;", "timestamp": 1343563931, "metainfo": ""}