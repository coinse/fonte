{"sha": "641d435478c303af33d1299ee6a8069b351a0a29", "log": "In analysis.FunctionUtils.sample, changed the exception to be thrown when bounds are invalid.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/FunctionUtils.java\n+++ b/src/main/java/org/apache/commons/math/analysis/FunctionUtils.java\n package org.apache.commons.math.analysis;\n \n import org.apache.commons.math.analysis.function.Identity;\n-import org.apache.commons.math.exception.NonMonotonicSequenceException;\n import org.apache.commons.math.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math.exception.NumberIsTooLargeException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n \n /**\n      * @param max the (exclusive) upper bound of the interval\n      * @param n the number of sample points\n      * @return the array of samples\n-     * @throws NonMonotonicSequenceException if the lower bound {@code min} is\n+     * @throws NumberIsTooLargeException if the lower bound {@code min} is\n      * greater than, or equal to the upper bound {@code max}\n      * @throws NotStrictlyPositiveException if the number of sample points\n      * {@code n} is negative\n      */\n     public static double[] sample(UnivariateFunction f,\n-            double min, double max, int n) throws\n-            NonMonotonicSequenceException,\n-            NotStrictlyPositiveException {\n+            double min, double max, int n) {\n \n         if (n <= 0) {\n             throw new NotStrictlyPositiveException(\n                     Integer.valueOf(n));\n         }\n         if (min >= max) {\n-            throw new NonMonotonicSequenceException(\n-                    Double.valueOf(max),\n-                    Double.valueOf(min),\n-                    1);\n+            throw new NumberIsTooLargeException(min, max, false);\n         }\n \n         double[] s = new double[n];", "timestamp": 1326868684, "metainfo": ""}