{"sha": "08314630bd09cd833539221ffdb00ce529d6a5c8", "log": "fixed missing dimension checks  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/MatrixUtils.java\n+++ b/src/java/org/apache/commons/math/linear/MatrixUtils.java\n \n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n+import org.apache.commons.math.MathRuntimeException;\n \n /**\n  * A collection of static methods that operate on or return matrices.\n     public static <T extends FieldElement<T>> FieldMatrix<T>\n         createRowFieldMatrix(final T[] rowData) {\n         final int nCols = rowData.length;\n+        if (nCols == 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one column\"); \n+        }\n         final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);\n         for (int i = 0; i < nCols; ++i) {\n             m.setEntry(0, i, rowData[i]);\n     public static <T extends FieldElement<T>> FieldMatrix<T>\n         createColumnFieldMatrix(final T[] columnData) {\n         final int nRows = columnData.length;\n+        if (nRows == 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\"matrix must have at least one row\"); \n+        }\n         final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);\n         for (int i = 0; i < nRows; ++i) {\n             m.setEntry(i, 0, columnData[i]);", "timestamp": 1240261053, "metainfo": ""}