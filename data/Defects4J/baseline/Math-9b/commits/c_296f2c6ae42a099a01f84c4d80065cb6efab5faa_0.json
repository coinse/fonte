{"sha": "296f2c6ae42a099a01f84c4d80065cb6efab5faa", "log": "Changed the return type of the various interpolation algorithms to the specific implementation of UnivariateRealFunction each one uses (thanks to Gilles for reporting the problem and providing the patch)   ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java\n import java.io.Serializable;\n \n import org.apache.commons.math.DuplicateSampleAbscissaException;\n-import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;\n import org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;\n \n      * @return a function which interpolates the data set\n      * @throws DuplicateSampleAbscissaException if arguments are invalid\n      */\n-    public UnivariateRealFunction interpolate(double x[], double y[]) throws\n+    public PolynomialFunctionNewtonForm interpolate(double x[], double y[]) throws\n         DuplicateSampleAbscissaException {\n \n         /**\n         }\n         a = computeDividedDifference(x, y);\n \n-        PolynomialFunctionNewtonForm p;\n-        p = new PolynomialFunctionNewtonForm(a, c);\n-        return p;\n+        return new PolynomialFunctionNewtonForm(a, c);\n+\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.MathException;\n-\n import java.io.Serializable;\n import java.util.Arrays;\n+\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n \n /**\n  * Implements the <a href=\"http://en.wikipedia.org/wiki/Local_regression\">\n      * <li> All arguments and values are finite real numbers</li>\n      * </ul>\n      */\n-    public final UnivariateRealFunction interpolate(\n+    public final PolynomialSplineFunction interpolate(\n             final double[] xval, final double[] yval) throws MathException {\n         return new SplineInterpolator().interpolate(xval, smooth(xval, yval));\n     }\n--- a/src/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolator.java\n package org.apache.commons.math.analysis.interpolation;\n \n import java.io.Serializable;\n+\n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;\n \n /**\n      * @return a function which interpolates the data set\n      * @throws MathException if arguments are invalid\n      */\n-    public UnivariateRealFunction interpolate(double x[], double y[]) throws\n-        MathException {\n-\n-        PolynomialFunctionLagrangeForm p;\n-        p = new PolynomialFunctionLagrangeForm(x, y);\n-        return p;\n+    public PolynomialFunctionLagrangeForm interpolate(double x[], double y[])\n+        throws MathException {\n+        return new PolynomialFunctionLagrangeForm(x, y);\n     }\n }\n--- a/src/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java\n package org.apache.commons.math.analysis.interpolation;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.analysis.UnivariateRealFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;\n \n      * @param y the values for the interpolation points\n      * @return a function which interpolates the data set\n      */\n-    public UnivariateRealFunction interpolate(double x[], double y[]) {\n+    public PolynomialSplineFunction interpolate(double x[], double y[]) {\n         if (x.length != y.length) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"dimension mismatch {0} != {1}\", x.length, y.length);", "timestamp": 1247756942, "metainfo": ""}