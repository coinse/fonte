{"sha": "71d26087887d715c22d682f94948fe007828c324", "log": "[MATH-930] Add new constructors to override the hard-coded cut-off value, further improve javadoc and update failing unit test.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java\n  * <ul>\n  *   <li>Algorithm convergence: 1e-6</li>\n  *   <li>Floating-point comparisons: 10 ulp</li>\n+ *   <li>Cut-Off value: 1e-12</li>\n  * </ul>\n+ * <p>\n+ * The cut-off value has been introduced to zero out very small numbers in the Simplex tableau,\n+ * as these may lead to numerical instabilities due to the nature of the Simplex algorithm\n+ * (the pivot element is used as a denominator). If the problem definition is very tight, the\n+ * default cut-off value may be too small, thus it is advised to increase it to a larger value,\n+ * in accordance with the chosen epsilon.\n  * <p>\n  * It may also be counter-productive to provide a too large value for {@link MaxIter}\n  * as parameter in the call of {@link #optimize(org.apache.commons.math3.optim.OptimizationData...)},\n  * @since 2.0\n  */\n public class SimplexSolver extends LinearOptimizer {\n+    /** Default amount of error to accept in floating point comparisons (as ulps). */\n+    static final int DEFAULT_ULPS = 10;\n+\n+    /** Default cut-off value. */\n+    static final double DEFAULT_CUT_OFF = 1e-12;\n+\n     /** Default amount of error to accept for algorithm convergence. */\n     private static final double DEFAULT_EPSILON = 1.0e-6;\n \n-    /** Default amount of error to accept in floating point comparisons (as ulps). */\n-    private static final int DEFAULT_ULPS = 10;\n-\n     /** Amount of error to accept for algorithm convergence. */\n     private final double epsilon;\n \n     private final int maxUlps;\n \n     /**\n+     * Cut-off value for entries in the tableau: values smaller than the cut-off\n+     * are treated as zero to improve numerical stability.\n+     */\n+    private final double cutOff;\n+\n+    /**\n      * Builds a simplex solver with default settings.\n      */\n     public SimplexSolver() {\n-        this(DEFAULT_EPSILON, DEFAULT_ULPS);\n+        this(DEFAULT_EPSILON, DEFAULT_ULPS, DEFAULT_CUT_OFF);\n     }\n \n     /**\n      * @param epsilon Amount of error to accept for algorithm convergence.\n      */\n     public SimplexSolver(final double epsilon) {\n-        this(epsilon, DEFAULT_ULPS);\n+        this(epsilon, DEFAULT_ULPS, DEFAULT_CUT_OFF);\n     }\n \n     /**\n      * @param epsilon Amount of error to accept for algorithm convergence.\n      * @param maxUlps Amount of error to accept in floating point comparisons.\n      */\n-    public SimplexSolver(final double epsilon,\n-                         final int maxUlps) {\n+    public SimplexSolver(final double epsilon, final int maxUlps) {\n+        this(epsilon, maxUlps, DEFAULT_CUT_OFF);\n+    }\n+\n+    /**\n+     * Builds a simplex solver with a specified accepted amount of error.\n+     *\n+     * @param epsilon Amount of error to accept for algorithm convergence.\n+     * @param maxUlps Amount of error to accept in floating point comparisons.\n+     * @param cutOff Values smaller than the cutOff are treated as zero.\n+     */\n+    public SimplexSolver(final double epsilon, final int maxUlps, final double cutOff) {\n         this.epsilon = epsilon;\n         this.maxUlps = maxUlps;\n+        this.cutOff = cutOff;\n     }\n \n     /**\n                                getGoalType(),\n                                isRestrictedToNonNegative(),\n                                epsilon,\n-                               maxUlps);\n+                               maxUlps,\n+                               cutOff);\n \n         solvePhase1(tableau);\n         tableau.dropPhase1Objective();\n--- a/src/main/java/org/apache/commons/math3/optim/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optim/linear/SimplexTableau.java\n     /** Column label for negative vars. */\n     private static final String NEGATIVE_VAR_COLUMN_LABEL = \"x-\";\n \n-    /** Default amount of error to accept in floating point comparisons (as ulps). */\n-    private static final int DEFAULT_ULPS = 10;\n-\n-    /** The cut-off threshold to zero-out entries. */\n-    private static final double CUTOFF_THRESHOLD = 1e-12;\n-\n     /** Serializable version identifier. */\n     private static final long serialVersionUID = -1369660067587938365L;\n \n \n     /** Amount of error to accept in floating point comparisons. */\n     private final int maxUlps;\n+\n+    /** Cut-off value for entries in the tableau. */\n+    private final double cutOff;\n \n     /**\n      * Builds a tableau for a linear problem.\n                    final GoalType goalType,\n                    final boolean restrictToNonNegative,\n                    final double epsilon) {\n-        this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);\n+        this(f, constraints, goalType, restrictToNonNegative, epsilon,\n+                SimplexSolver.DEFAULT_ULPS, SimplexSolver.DEFAULT_CUT_OFF);\n     }\n \n     /**\n                    final boolean restrictToNonNegative,\n                    final double epsilon,\n                    final int maxUlps) {\n+        this(f, constraints, goalType, restrictToNonNegative, epsilon, maxUlps, SimplexSolver.DEFAULT_CUT_OFF);\n+    }\n+\n+    /**\n+     * Build a tableau for a linear problem.\n+     * @param f linear objective function\n+     * @param constraints linear constraints\n+     * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}\n+     * @param restrictToNonNegative whether to restrict the variables to non-negative values\n+     * @param epsilon amount of error to accept when checking for optimality\n+     * @param maxUlps amount of error to accept in floating point comparisons\n+     * @param cutOff the cut-off value for tableau entries\n+     */\n+    SimplexTableau(final LinearObjectiveFunction f,\n+                   final Collection<LinearConstraint> constraints,\n+                   final GoalType goalType,\n+                   final boolean restrictToNonNegative,\n+                   final double epsilon,\n+                   final int maxUlps,\n+                   final double cutOff) {\n         this.f                      = f;\n         this.constraints            = normalizeConstraints(constraints);\n         this.restrictToNonNegative  = restrictToNonNegative;\n         this.epsilon                = epsilon;\n         this.maxUlps                = maxUlps;\n+        this.cutOff                 = cutOff;\n         this.numDecisionVariables   = f.getCoefficients().getDimension() +\n                                       (restrictToNonNegative ? 0 : 1);\n         this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                final double multiple) {\n         for (int i = 0; i < getWidth(); i++) {\n             double result = tableau.getEntry(minuendRow, i) - tableau.getEntry(subtrahendRow, i) * multiple;\n-            // cut-off values smaller than the CUTOFF_THRESHOLD, otherwise may lead to numerical instabilities\n-            if (FastMath.abs(result) < CUTOFF_THRESHOLD) {\n+            // cut-off values smaller than the cut-off threshold, otherwise may lead to numerical instabilities\n+            if (FastMath.abs(result) < cutOff) {\n                 result = 0.0;\n             }\n             tableau.setEntry(minuendRow, i, result);\n--- a/src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java\n+++ b/src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java\n         double[] objFunctionCoeff = new double[33];\n         objFunctionCoeff[3] = 1;\n         LinearObjectiveFunction f = new LinearObjectiveFunction(objFunctionCoeff, 0);\n-        SimplexSolver solver = new SimplexSolver(1e-4, 10);\n+        SimplexSolver solver = new SimplexSolver(1e-4, 10, 1e-6);\n         \n         PointValuePair solution = solver.optimize(new MaxIter(1000), f, new LinearConstraintSet(constraints),\n                                                   GoalType.MINIMIZE, new NonNegativeConstraint(true));\n-        Assert.assertEquals(0.3752298, solution.getValue(), 1e-6);\n+        Assert.assertEquals(0.3752298, solution.getValue(), 1e-4);\n     }\n \n     @Test", "timestamp": 1358676285, "metainfo": ""}