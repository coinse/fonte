{"sha": "b283304b93e880d62d15fecfd31b2a37a9407ad5", "log": "Fixed a problem with getInterpolatedDerivatives returning zero derivatives when an ODE step handler is configured to not use interpolation. It now returns a constant but non-zero value consistent with at least one point inside the step   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n       rki.reinitialize(this, yTmp, yDotK, forward);\n       interpolator = rki;\n     } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n+      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);\n     }\n     interpolator.storeTime(t0);\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n                                                             y1, yDot1,\n                                                             yMidDots, forward);\n     } else {\n-      interpolator = new DummyStepInterpolator(y, forward);\n+      interpolator = new DummyStepInterpolator(y, yDot1, forward);\n     }\n     interpolator.storeTime(t0);\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java\n    * @param y1 reference to the integrator array holding the state at\n    * the end of the step\n    * @param y1Dot reference to the integrator array holding the slope\n-   * at theend of the step\n+   * at the end of the step\n    * @param yMidDots reference to the integrator array holding the\n    * derivatives at the middle point of the step\n    * @param forward integration direction indicator\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n       rki.reinitialize(this, yTmp, yDotK, forward);\n       interpolator = rki;\n     } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n+      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);\n     }\n     interpolator.storeTime(t0);\n \n--- a/src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java\n public class DummyStepInterpolator\n   extends AbstractStepInterpolator {\n \n-    /** Serializable version identifier */\n-    private static final long serialVersionUID = 1708010296707839488L;\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = 1708010296707839488L;\n+\n+  /** Current derivative. */\n+  private double[] currentDerivative;\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n    */\n   public DummyStepInterpolator() {\n     super();\n+    currentDerivative = null;\n   }\n \n   /** Simple constructor.\n    * @param y reference to the integrator array holding the state at\n    * the end of the step\n+   * @param yDot reference to the integrator array holding the state\n+   * derivative at some arbitrary point within the step\n    * @param forward integration direction indicator\n    */\n-  public DummyStepInterpolator(final double[] y, final boolean forward) {\n+  public DummyStepInterpolator(final double[] y, final double[] yDot, final boolean forward) {\n     super(y, forward);\n+    currentDerivative = yDot;\n   }\n \n   /** Copy constructor.\n    */\n   public DummyStepInterpolator(final DummyStepInterpolator interpolator) {\n     super(interpolator);\n+    currentDerivative = interpolator.currentDerivative.clone();\n   }\n \n   /** Really copy the finalized instance.\n   @Override\n   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)\n     throws DerivativeException {\n-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);\n+      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);\n+      System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);\n   }\n \n   /** Write the instance to an output channel.\n   @Override\n   public void writeExternal(final ObjectOutput out)\n     throws IOException {\n-    // save the state of the base class\n+\n+      // save the state of the base class\n     writeBaseExternal(out);\n+\n+    if (currentDerivative != null) {\n+        for (int i = 0; i < currentDerivative.length; ++i) {\n+            out.writeDouble(currentDerivative[i]);\n+        }\n+    }\n+\n   }\n \n   /** Read the instance from an input channel.\n     // read the base class\n     final double t = readBaseExternal(in);\n \n+    if (currentState == null) {\n+        currentDerivative = null;\n+    } else {\n+        currentDerivative  = new double[currentState.length];\n+        for (int i = 0; i < currentDerivative.length; ++i) {\n+            currentDerivative[i] = in.readDouble();\n+        }\n+    }\n+\n     // we can now set the interpolated time and state\n     setInterpolatedTime(t);\n \n--- a/src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n   }\n \n   private StepInterpolator buildInterpolator(double t0, double[] y0, double t1) {\n-      DummyStepInterpolator interpolator  = new DummyStepInterpolator(y0, t1 >= t0);\n+      DummyStepInterpolator interpolator  = new DummyStepInterpolator(y0, new double[y0.length], t1 >= t0);\n       interpolator.storeTime(t0);\n       interpolator.shift();\n       interpolator.storeTime(t1);\n--- a/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java\n         double t0 = r1 - 0.5 * gap;\n         es.reinitializeBegin(t0, new double[0]);\n         AbstractStepInterpolator interpolator =\n-            new DummyStepInterpolator(new double[0], true);\n+            new DummyStepInterpolator(new double[0], new double[0], true);\n         interpolator.storeTime(t0);\n \n         interpolator.shift();\n--- a/src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java\n   public void testNoReset() throws DerivativeException {\n \n     double[]   y    =   { 0.0, 1.0, -2.0 };\n-    DummyStepInterpolator interpolator = new DummyStepInterpolator(y, true);\n+    DummyStepInterpolator interpolator = new DummyStepInterpolator(y, new double[y.length], true);\n     interpolator.storeTime(0);\n     interpolator.shift();\n     interpolator.storeTime(1);\n     throws DerivativeException {\n \n     double[]   y    =   { 1.0, 3.0, -4.0 };\n-    DummyStepInterpolator interpolator = new DummyStepInterpolator(y, true);\n+    DummyStepInterpolator interpolator = new DummyStepInterpolator(y, new double[y.length], true);\n     interpolator.storeTime(0);\n     interpolator.shift();\n     interpolator.storeTime(1);\n   throws DerivativeException, IOException, ClassNotFoundException {\n \n     double[]   y    =   { 0.0, 1.0, -2.0 };\n-    DummyStepInterpolator interpolator = new DummyStepInterpolator(y, true);\n+    DummyStepInterpolator interpolator = new DummyStepInterpolator(y, new double[y.length], true);\n     interpolator.storeTime(0);\n     interpolator.shift();\n     interpolator.storeTime(1);\n       public BadStepInterpolator() {\n       }\n       public BadStepInterpolator(double[] y, boolean forward) {\n-          super(y, forward);\n+          super(y, new double[y.length], forward);\n       }\n       @Override\n       protected void doFinalize()", "timestamp": 1267806956, "metainfo": ""}