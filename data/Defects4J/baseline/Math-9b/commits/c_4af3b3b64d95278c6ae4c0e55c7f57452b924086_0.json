{"sha": "4af3b3b64d95278c6ae4c0e55c7f57452b924086", "log": "BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/BigReal.java\n+++ b/src/main/java/org/apache/commons/math3/util/BigReal.java\n \n import org.apache.commons.math3.Field;\n import org.apache.commons.math3.FieldElement;\n+import org.apache.commons.math3.exception.MathArithmeticException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n \n /**\n  * Arbitrary precision decimal number.\n         return new BigReal(d.negate());\n     }\n \n-    /** {@inheritDoc} */\n-    public BigReal divide(BigReal a) throws ArithmeticException {\n-        return new BigReal(d.divide(a.d, scale, roundingMode));\n-    }\n-\n-    /** {@inheritDoc}} */\n-    public BigReal reciprocal(){\n-        return new BigReal(BigDecimal.ONE.divide(d, scale, roundingMode));\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws MathArithmeticException if {@code a} is zero\n+     */\n+    public BigReal divide(BigReal a) {\n+        try {\n+            return new BigReal(d.divide(a.d, scale, roundingMode));\n+        } catch (ArithmeticException e) {\n+            // Division by zero has occured\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_NOT_ALLOWED);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws MathArithmeticException if {@code this} is zero\n+     */\n+    public BigReal reciprocal() {\n+        try {\n+            return new BigReal(BigDecimal.ONE.divide(d, scale, roundingMode));\n+        } catch (ArithmeticException e) {\n+            // Division by zero has occured\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_NOT_ALLOWED);\n+        }\n     }\n \n     /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/math3/util/BigRealTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/BigRealTest.java\n import java.math.MathContext;\n \n import org.apache.commons.math3.TestUtils;\n+import org.apache.commons.math3.exception.MathArithmeticException;\n import org.junit.Assert;\n import org.junit.Test;\n \n         Assert.assertEquals(1024.0, a.divide(b).doubleValue(), 1.0e-15);\n     }\n \n+    @Test(expected = MathArithmeticException.class)\n+    public void testDivisionByZero() {\n+        final BigReal a = BigReal.ONE;\n+        final BigReal b = BigReal.ZERO;\n+        a.divide(b);\n+    }\n+\n     @Test\n     public void testReciprocal() {\n         BigReal a = new BigReal(\"1.2345678\");\n         Assert.assertTrue(FastMath.abs(r.doubleValue()) <= eps);\n         r = one.subtract(b.multiply(a));\n         Assert.assertTrue(FastMath.abs(r.doubleValue()) <= eps);\n+    }\n+\n+    @Test(expected = MathArithmeticException.class)\n+    public void testReciprocalOfZero() {\n+        BigReal.ZERO.reciprocal();\n     }\n \n     @Test", "timestamp": 1330324379, "metainfo": ""}