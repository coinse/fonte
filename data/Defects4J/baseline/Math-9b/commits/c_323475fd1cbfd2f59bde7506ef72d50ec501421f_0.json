{"sha": "323475fd1cbfd2f59bde7506ef72d50ec501421f", "log": "Added add, subtract, negate, multiply and toString methods to PolynomialFunction  ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n+++ b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java\n public class PolynomialFunction implements DifferentiableUnivariateRealFunction, Serializable {\n \n     /** Serializable version identifier */\n-    private static final long serialVersionUID = 3322454535052136809L;\n-    \n+    private static final long serialVersionUID = -7726511984200295583L;\n+\n     /**\n      * The coefficients of the polynomial, ordered by degree -- i.e.,  \n      * coefficients[0] is the constant term and coefficients[n] is the \n      * coefficient of x^n where n is the degree of the polynomial.\n      */\n-    private double coefficients[];\n+    private final double coefficients[];\n \n     /**\n      * Construct a polynomial with the given coefficients.  The first element\n      * of the coefficients array is the constant term.  Higher degree\n      * coefficients follow in sequence.  The degree of the resulting polynomial\n-     * is the length of the array minus 1. \n+     * is the index of the last non-null element of the array, or 0 if all elements\n+     * are null. \n      * <p>\n      * The constructor makes a copy of the input array and assigns the copy to\n      * the coefficients property.</p>\n      * \n-     * @param c polynominal coefficients\n+     * @param c polynomial coefficients\n      * @throws NullPointerException if c is null\n      * @throws IllegalArgumentException if c is empty\n      */\n         if (c.length < 1) {\n             throw new IllegalArgumentException(\"Polynomial coefficient array must have postive length.\");\n         }\n-        this.coefficients = new double[c.length];\n-        System.arraycopy(c, 0, this.coefficients, 0, c.length);\n+        int l = c.length;\n+        while ((l > 1) && (c[l - 1] == 0)) {\n+            --l;\n+        }\n+        this.coefficients = new double[l];\n+        System.arraycopy(c, 0, this.coefficients, 0, l);\n     }\n \n     /**\n      * @return  a fresh copy of the coefficients array\n      */\n     public double[] getCoefficients() {\n-        double[] out = new double[coefficients.length];\n-        System.arraycopy(coefficients,0, out, 0, coefficients.length);\n-        return out;\n+        return coefficients.clone();\n     }\n     \n     /**\n         }\n         return result;\n     }\n-    \n+\n+    /**\n+     * Add a polynomial to the instance.\n+     * @param p polynomial to add\n+     * @return a new polynomial which is the sum of the instance and p\n+     */\n+    public PolynomialFunction add(final PolynomialFunction p) {\n+\n+        // identify the lowest degree polynomial\n+        final int lowLength  = Math.min(coefficients.length, p.coefficients.length);\n+        final int highLength = Math.max(coefficients.length, p.coefficients.length);\n+\n+        // build the coefficients array\n+        double[] newCoefficients = new double[highLength];\n+        for (int i = 0; i < lowLength; ++i) {\n+            newCoefficients[i] = coefficients[i] + p.coefficients[i];\n+        }\n+        System.arraycopy((coefficients.length < p.coefficients.length) ?\n+                         p.coefficients : coefficients,\n+                         lowLength,\n+                         newCoefficients, lowLength,\n+                         highLength - lowLength);\n+\n+        return new PolynomialFunction(newCoefficients);\n+\n+    }\n+\n+    /**\n+     * Subtract a polynomial from the instance.\n+     * @param p polynomial to subtract\n+     * @return a new polynomial which is the difference the instance minus p\n+     */\n+    public PolynomialFunction subtract(final PolynomialFunction p) {\n+\n+        // identify the lowest degree polynomial\n+        int lowLength  = Math.min(coefficients.length, p.coefficients.length);\n+        int highLength = Math.max(coefficients.length, p.coefficients.length);\n+\n+        // build the coefficients array\n+        double[] newCoefficients = new double[highLength];\n+        for (int i = 0; i < lowLength; ++i) {\n+            newCoefficients[i] = coefficients[i] - p.coefficients[i];\n+        }\n+        if (coefficients.length < p.coefficients.length) {\n+            for (int i = lowLength; i < highLength; ++i) {\n+                newCoefficients[i] = -p.coefficients[i];\n+            }\n+        } else {\n+            System.arraycopy(coefficients, lowLength, newCoefficients, lowLength,\n+                             highLength - lowLength);\n+        }\n+\n+        return new PolynomialFunction(newCoefficients);\n+\n+    }\n+\n+    /**\n+     * Negate the instance.\n+     * @return a new polynomial\n+     */\n+    public PolynomialFunction negate() {\n+        double[] newCoefficients = new double[coefficients.length];\n+        for (int i = 0; i < coefficients.length; ++i) {\n+            newCoefficients[i] = -coefficients[i];\n+        }\n+        return new PolynomialFunction(newCoefficients);\n+    }\n+\n+    /**\n+     * Multiply the instance by a polynomial.\n+     * @param p polynomial to multiply by\n+     * @return a new polynomial\n+     */\n+    public PolynomialFunction multiply(final PolynomialFunction p) {\n+\n+        double[] newCoefficients = new double[coefficients.length + p.coefficients.length - 1];\n+\n+        for (int i = 0; i < newCoefficients.length; ++i) {\n+            newCoefficients[i] = 0.0;\n+            for (int j = Math.max(0, i + 1 - p.coefficients.length);\n+                 j < Math.min(coefficients.length, i + 1);\n+                 ++j) {\n+                newCoefficients[i] += coefficients[j] * p.coefficients[i-j];\n+            }\n+        }\n+\n+        return new PolynomialFunction(newCoefficients);\n+\n+    }\n+\n     /**\n      * Returns the coefficients of the derivative of the polynomial with the given coefficients.\n      * \n     public UnivariateRealFunction derivative() {\n         return polynomialDerivative();\n     }\n-   \n+\n+    /** Returns a string representation of the polynomial.\n+\n+     * <p>The representation is user oriented. Terms are displayed lowest\n+     * degrees first. The multiplications signs, coefficients equals to\n+     * one and null terms are not displayed (except if the polynomial is 0,\n+     * in which case the 0 constant term is displayed). Addition of terms\n+     * with negative coefficients are replaced by subtraction of terms\n+     * with positive coefficients except for the first displayed term\n+     * (i.e. we display <code>-3</code> for a constant negative polynomial,\n+     * but <code>1 - 3 x + x^2</code> if the negative coefficient is not\n+     * the first one displayed).</p>\n+\n+     * @return a string representation of the polynomial\n+\n+     */\n+     public String toString() {\n+\n+       StringBuffer s = new StringBuffer();\n+       if (coefficients[0] == 0.0) {\n+         if (coefficients.length == 1) {\n+           return \"0\";\n+         }\n+       } else {\n+         s.append(Double.toString(coefficients[0]));\n+       }\n+\n+       for (int i = 1; i < coefficients.length; ++i) {\n+\n+         if (coefficients[i] != 0) {\n+\n+           if (s.length() > 0) {\n+             if (coefficients[i] < 0) {\n+               s.append(\" - \");\n+             } else {\n+               s.append(\" + \");\n+             }\n+           } else {\n+             if (coefficients[i] < 0) {\n+               s.append(\"-\");\n+             }\n+           }\n+\n+           double absAi = Math.abs(coefficients[i]);\n+           if ((absAi - 1) != 0) {\n+             s.append(Double.toString(absAi));\n+             s.append(' ');\n+           }\n+\n+           s.append(\"x\");\n+           if (i > 1) {\n+             s.append('^');\n+             s.append(Integer.toString(i));\n+           }\n+         }\n+\n+       }\n+\n+       return s.toString();\n+\n+     }\n+\n }\n--- a/src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java\n+++ b/src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java\n \n     }\n \n+    public void testString() {\n+        PolynomialFunction p = new PolynomialFunction(new double[] { -5.0, 3.0, 1.0 });\n+        checkPolynomial(p, \"-5.0 + 3.0 x + x^2\");\n+        checkPolynomial(new PolynomialFunction(new double[] { 0.0, -2.0, 3.0 }),\n+                        \"-2.0 x + 3.0 x^2\");\n+        checkPolynomial(new PolynomialFunction(new double[] { 1.0, -2.0, 3.0 }),\n+                      \"1.0 - 2.0 x + 3.0 x^2\");\n+        checkPolynomial(new PolynomialFunction(new double[] { 0.0,  2.0, 3.0 }),\n+                       \"2.0 x + 3.0 x^2\");\n+        checkPolynomial(new PolynomialFunction(new double[] { 1.0,  2.0, 3.0 }),\n+                     \"1.0 + 2.0 x + 3.0 x^2\");\n+        checkPolynomial(new PolynomialFunction(new double[] { 1.0,  0.0, 3.0 }),\n+                     \"1.0 + 3.0 x^2\");\n+        checkPolynomial(new PolynomialFunction(new double[] { 0.0 }),\n+                     \"0\");\n+    }\n+\n+    public void testAddition() {\n+\n+        PolynomialFunction p1 = new PolynomialFunction(new double[] { -2.0, 1.0 });\n+        PolynomialFunction p2 = new PolynomialFunction(new double[] { 2.0, -1.0, 0.0 });\n+        checkNullPolynomial(p1.add(p2));\n+\n+        p2 = p1.add(p1);\n+        checkPolynomial(p2, \"-4.0 + 2.0 x\");\n+\n+        p1 = new PolynomialFunction(new double[] { 1.0, -4.0, 2.0 });\n+        p2 = new PolynomialFunction(new double[] { -1.0, 3.0, -2.0 });\n+        p1 = p1.add(p2);\n+        assertEquals(1, p1.degree());\n+        checkPolynomial(p1, \"-x\");\n+\n+    }\n+\n+    public void testSubtraction() {\n+\n+        PolynomialFunction p1 = new PolynomialFunction(new double[] { -2.0, 1.0 });\n+        checkNullPolynomial(p1.subtract(p1));\n+\n+        PolynomialFunction p2 = new PolynomialFunction(new double[] { -2.0, 6.0 });\n+        p2 = p2.subtract(p1);\n+        checkPolynomial(p2, \"5.0 x\");\n+\n+        p1 = new PolynomialFunction(new double[] { 1.0, -4.0, 2.0 });\n+        p2 = new PolynomialFunction(new double[] { -1.0, 3.0, 2.0 });\n+        p1 = p1.subtract(p2);\n+        assertEquals(1, p1.degree());\n+        checkPolynomial(p1, \"2.0 - 7.0 x\");\n+\n+    }\n+\n+    public void testMultiplication() {\n+\n+        PolynomialFunction p1 = new PolynomialFunction(new double[] { -3.0, 2.0 });\n+        PolynomialFunction p2 = new PolynomialFunction(new double[] { 3.0, 2.0, 1.0 });\n+        checkPolynomial(p1.multiply(p2), \"-9.0 + x^2 + 2.0 x^3\");\n+\n+        p1 = new PolynomialFunction(new double[] { 0.0, 1.0 });\n+        p2 = p1;\n+        for (int i = 2; i < 10; ++i) {\n+            p2 = p2.multiply(p1);\n+            checkPolynomial(p2, \"x^\" + i);\n+        }\n+\n+    }\n+\n+    public void checkPolynomial(PolynomialFunction p, String reference) {\n+        assertEquals(reference, p.toString());\n+    }\n+\n+    private void checkNullPolynomial(PolynomialFunction p) {\n+        for (double coefficient : p.getCoefficients()) {\n+            assertEquals(0.0, coefficient, 1.0e-15);\n+        }\n+    }\n+\n }", "timestamp": 1233521772, "metainfo": ""}