{"sha": "8979969e30f2bb55c0835d40f92c2aafdea26914", "log": "Added support for copying statistics Changes to stats classes: - copy constructor - static copy(-,-) - instance copy() Added copy() to UnivariateStatistic and StorelessUnivariateStatistic interfaces.  JIRA: MATH-212 Reported and patched by Jason C. HandUber   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java\n      * {@inheritDoc}\n      */\n     public abstract double evaluate(final double[] values, final int begin, final int length);\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public abstract UnivariateStatistic copy();\n \n     /**\n      * This method is used by <code>evaluate(double[], int, int)</code> methods\n--- a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n     }\n     \n     /**\n+     * Copy constructor.  Construct a new DescriptiveStatistics instance that\n+     * is a copy of original.\n+     * \n+     * @param original DescriptiveStatistics instance to copy\n+     */\n+    public DescriptiveStatistics(DescriptiveStatistics original) {\n+        copy(original, this);\n+    }\n+    \n+    /**\n      * Represents an infinite window size.  When the {@link #getWindowSize()}\n      * returns this value, there is no limit to the number of data values\n      * that can be stored in the dataset.\n      * Returns the <a href=\"http://www.xycoon.com/geometric_mean.htm\">\n      * geometric mean </a> of the available values\n      * @return The geometricMean, Double.NaN if no values have been added, \n-     * or if the productof the available values is less than or equal to 0.\n+     * or if the product of the available values is less than or equal to 0.\n      */\n     public double getGeometricMean() {\n         return apply(geometricMeanImpl);\n      */\n     public synchronized void setSumImpl(UnivariateStatistic sumImpl) {\n         this.sumImpl = sumImpl;\n-    }   \n+    }  \n+    \n+    /**\n+     * Returns a copy of this DescriptiveStatistics instance with the same internal state.\n+     * \n+     * @return a copy of this\n+     */\n+    public DescriptiveStatistics copy() {\n+        DescriptiveStatistics result = new DescriptiveStatistics();\n+        copy(this, result);\n+        return result; \n+    }\n+     \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source DescriptiveStatistics to copy\n+     * @param dest DescriptiveStatistics to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(DescriptiveStatistics source, DescriptiveStatistics dest) {\n+        // Copy data and window size\n+        dest.eDA = source.eDA.copy();\n+        dest.windowSize = source.windowSize;\n+        \n+        // Copy implementations\n+        dest.maxImpl = source.maxImpl.copy();\n+        dest.meanImpl = source.meanImpl.copy();\n+        dest.minImpl = source.minImpl.copy();\n+        dest.sumImpl = source.sumImpl.copy();\n+        dest.varianceImpl = source.varianceImpl.copy();\n+        dest.sumsqImpl = source.sumsqImpl.copy();\n+        dest.geometricMeanImpl = source.geometricMeanImpl.copy();\n+        dest.kurtosisImpl = source.kurtosisImpl;\n+        dest.skewnessImpl = source.skewnessImpl;\n+        dest.percentileImpl = source.percentileImpl;\n+    }\n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java\n      * Clears the internal state of the Statistic\n      */\n     void clear();\n+    \n+    /**\n+     * Returns a copy of the statistic with the same internal state.\n+     * \n+     * @return a copy of the statistic\n+     */\n+    StorelessUnivariateStatistic copy();\n \n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n     public SummaryStatistics() {\n     }\n \n+    /**\n+     * A copy constructor. Creates a deep-copy of the {@code original}.\n+     * \n+     * @param original the {@code SummaryStatistics} instance to copy\n+     */\n+    public SummaryStatistics(SummaryStatistics original) {\n+        copy(original, this);\n+    }\n+\n     /** count of values that have been added */\n     protected long n = 0;\n \n      * @return Current values of statistics\n      */\n     public StatisticalSummary getSummary() {\n-        return new StatisticalSummaryValues(getMean(), getVariance(), getN(), getMax(), getMin(), getSum());\n+        return new StatisticalSummaryValues(getMean(), getVariance(), getN(), \n+                getMax(), getMin(), getSum());\n     }\n \n     /**\n                                                                    new Object[] { n });\n         }\n     }\n-\n+    \n+    /**\n+     * Returns a copy of this SummaryStatistics instance with the same internal state.\n+     * \n+     * @return a copy of this\n+     */\n+    public SummaryStatistics copy() {\n+        SummaryStatistics result = new SummaryStatistics();\n+        copy(this, result);\n+        return result; \n+    }\n+     \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source SummaryStatistics to copy\n+     * @param dest SummaryStatistics to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(SummaryStatistics source, SummaryStatistics dest) {\n+        dest.maxImpl = source.maxImpl.copy();\n+        dest.meanImpl = source.meanImpl.copy();\n+        dest.minImpl = source.minImpl.copy();\n+        dest.sumImpl = source.sumImpl.copy();\n+        dest.varianceImpl = source.varianceImpl.copy();\n+        dest.sumLogImpl = source.sumLogImpl.copy();\n+        dest.sumsqImpl = source.sumsqImpl.copy();\n+        if (source.getGeoMeanImpl() instanceof GeometricMean) {\n+            // Keep geoMeanImpl, sumLogImpl in synch\n+            dest.geoMeanImpl = new GeometricMean((SumOfLogs) dest.sumLogImpl);\n+        } else {\n+            dest.geoMeanImpl = source.geoMeanImpl.copy();\n+        }\n+        SecondMoment.copy(source.secondMoment, dest.secondMoment);\n+        dest.n = source.n;\n+        \n+        // Make sure that if stat == statImpl in source, same\n+        // holds in dest; otherwise copy stat\n+        if (source.geoMean == source.geoMeanImpl) {\n+            dest.geoMean = (GeometricMean) dest.geoMeanImpl;\n+        } else {\n+            GeometricMean.copy(source.geoMean, dest.geoMean);\n+        } \n+        if (source.max == source.maxImpl) {\n+            dest.max = (Max) dest.maxImpl;\n+        } else {\n+            Max.copy(source.max, dest.max);\n+        } \n+        if (source.mean == source.meanImpl) {\n+            dest.mean = (Mean) dest.meanImpl;\n+        } else {\n+            Mean.copy(source.mean, dest.mean);\n+        } \n+        if (source.min == source.minImpl) {\n+            dest.min = (Min) dest.minImpl;\n+        } else {\n+            Min.copy(source.min, dest.min);\n+        } \n+        if (source.sum == source.sumImpl) {\n+            dest.sum = (Sum) dest.sumImpl;\n+        } else {\n+            Sum.copy(source.sum, dest.sum);\n+        } \n+        if (source.variance == source.varianceImpl) {\n+            dest.variance = (Variance) dest.varianceImpl;\n+        } else {\n+            Variance.copy(source.variance, dest.variance);\n+        } \n+        if (source.sumLog == source.sumLogImpl) {\n+            dest.sumLog = (SumOfLogs) dest.sumLogImpl;\n+        } else {\n+            SumOfLogs.copy(source.sumLog, dest.sumLog);\n+        } \n+        if (source.sumsq == source.sumsqImpl) {\n+            dest.sumsq = (SumOfSquares) dest.sumsqImpl;\n+        } else {\n+            SumOfSquares.copy(source.sumsq, dest.sumsq);\n+        } \n+    }\n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java\n      */\n     public SynchronizedDescriptiveStatistics(int window) {\n         super(window);\n+    }\n+    \n+    /**\n+     * A copy constructor. Creates a deep-copy of the {@code original}.\n+     * \n+     * @param original the {@code SynchronizedDescriptiveStatistics} instance to copy\n+     */\n+    public SynchronizedDescriptiveStatistics(SynchronizedDescriptiveStatistics original) {\n+        copy(original, this);\n     }\n \n     /**\n     public synchronized String toString() {\n         return super.toString();\n     }\n+    \n+    /**\n+     * Returns a copy of this SynchronizedDescriptiveStatistics instance with the\n+     * same internal state.\n+     * \n+     * @return a copy of this\n+     */\n+    public synchronized SynchronizedDescriptiveStatistics copy() {\n+        SynchronizedDescriptiveStatistics result = \n+            new SynchronizedDescriptiveStatistics();\n+        copy(this, result);\n+        return result; \n+    }\n+     \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * <p>Acquires synchronization lock on source, then dest before copying.</p>\n+     * \n+     * @param source SynchronizedDescriptiveStatistics to copy\n+     * @param dest SynchronizedDescriptiveStatistics to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(SynchronizedDescriptiveStatistics source,\n+            SynchronizedDescriptiveStatistics dest) {\n+        synchronized (source) {\n+            synchronized (dest) {\n+                DescriptiveStatistics.copy(source, dest);\n+            }\n+        }\n+    }\n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java\n     public SynchronizedSummaryStatistics() {\n         super();\n     }\n+    \n+    /**\n+     * A copy constructor. Creates a deep-copy of the {@code original}.\n+     * \n+     * @param original the {@code SynchronizedSummaryStatistics} instance to copy\n+     */\n+    public SynchronizedSummaryStatistics(SynchronizedSummaryStatistics original) {\n+        copy(original, this);\n+    }\n \n     /**\n      * {@inheritDoc}\n         super.setVarianceImpl(varianceImpl);\n     }\n     \n+    /**\n+     * Returns a copy of this SynchronizedSummaryStatistics instance with the\n+     * same internal state.\n+     * \n+     * @return a copy of this\n+     */\n+    public synchronized SynchronizedSummaryStatistics copy() {\n+        SynchronizedSummaryStatistics result = \n+            new SynchronizedSummaryStatistics();\n+        copy(this, result);\n+        return result; \n+    }\n+     \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * <p>Acquires synchronization lock on source, then dest before copying.</p>\n+     * \n+     * @param source SynchronizedSummaryStatistics to copy\n+     * @param dest SynchronizedSummaryStatistics to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(SynchronizedSummaryStatistics source,\n+            SynchronizedSummaryStatistics dest) {\n+        synchronized (source) {\n+            synchronized (dest) {\n+                SummaryStatistics.copy(source, dest);\n+            }\n+        }\n+    }\n+    \n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java\n import java.io.Serializable;\n \n /**\n- * Base evaluation interface implemented by all statistics.\n- * <p>\n- * Includes \"stateless\" <code>evaluate</code> methods that take\n- * <code>double[]</code> arrays as input and return the value of the statistic\n- * applied to the input values.</p>\n+ * Base interface implemented by all statistics.\n  * \n  * @version $Revision$ $Date$\n  */\n      * @return the value of the statistic applied to the included array entries\n      */\n     double evaluate(double[] values, int begin, int length);\n+    \n+    /**\n+     * Returns a copy of the statistic with the same internal state.\n+     * \n+     * @return a copy of the statistic\n+     */\n+    UnivariateStatistic copy();\n \n-}\n+}\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java\n package org.apache.commons.math.stat.descriptive.moment;\n \n import java.io.Serializable;\n-\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n \n /**\n     }\n     \n     /**\n+     * Copy constructor, creates a new {@code FirstMoment} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code FirstMoment} instance to copy\n+     */\n+     public FirstMoment(FirstMoment original) {\n+         super();\n+         copy(original, this);\n+     }\n+    \n+    /**\n      * {@inheritDoc}\n      */\n     public void increment(final double d) {\n     public long getN() {\n         return n;\n     }\n-}\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public FirstMoment copy() {\n+        FirstMoment result = new FirstMoment();\n+        copy(this, result);\n+        return result; \n+    }\n+     \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source FirstMoment to copy\n+     * @param dest FirstMoment to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(FirstMoment source, FirstMoment dest) {\n+        dest.n = source.n;\n+        dest.m1 = source.m1;\n+        dest.dev = source.dev;\n+        dest.nDev = dest.nDev;\n+    }\n+}\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java\n     }\n     \n     /**\n+     * Copy constructor, creates a new {@code FourthMoment} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code FourthMoment} instance to copy\n+     */\n+     public FourthMoment(FourthMoment original) {\n+         super();\n+         copy(original, this);\n+     }\n+    \n+    /**\n      * {@inheritDoc}\n      */\n     public void increment(final double d) {\n         super.clear();\n         m4 = Double.NaN;\n     }\n-\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public FourthMoment copy() {\n+        FourthMoment result = new FourthMoment();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source FourthMoment to copy\n+     * @param dest FourthMoment to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(FourthMoment source, FourthMoment dest) {\n+        ThirdMoment.copy(source, dest);\n+        dest.m4 = source.m4;\n+    }  \n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java\n      */\n     public GeometricMean() {\n         sumOfLogs = new SumOfLogs();\n+    }\n+    \n+    /**\n+     * Copy constructor, creates a new {@code GeometricMean} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code GeometricMean} instance to copy\n+     */\n+    public GeometricMean(GeometricMean original) {\n+        super();\n+        copy(original, this);\n+    }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public GeometricMean copy() {\n+        GeometricMean result = new GeometricMean();\n+        copy(this, result);\n+        return result;\n     }\n     \n     /**\n     }\n     \n     /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source GeometricMean to copy\n+     * @param dest GeometricMean to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(GeometricMean source, GeometricMean dest) {\n+        dest.sumOfLogs = (SumOfLogs) source.sumOfLogs.copy();\n+    }\n+    \n+    \n+    /**\n      * Throws IllegalStateException if n > 0.\n      */\n     private void checkEmpty() {\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java\n \n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+\n \n /**\n  * Computes the Kurtosis of the available values.\n         incMoment = false;\n         this.moment = m4;\n     }\n+    \n+    /**\n+     * Copy constructor, creates a new {@code Kurtosis} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code Kurtosis} instance to copy\n+     */\n+    public Kurtosis(Kurtosis original) {\n+        copy(original, this);\n+    }\n \n     /**\n      * {@inheritDoc}\n         }       \n         return kurt;\n     }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public Kurtosis copy() {\n+        Kurtosis result = new Kurtosis();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source Kurtosis to copy\n+     * @param dest Kurtosis to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(Kurtosis source, Kurtosis dest) {\n+        dest.moment = (FourthMoment) source.moment.copy();\n+        dest.incMoment = source.incMoment;\n+    }\n \n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n         this.moment = m1;\n         incMoment = false;\n     }\n+    \n+    /**\n+     * Copy constructor, creates a new {@code Mean} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code Mean} instance to copy\n+     */\n+    public Mean(Mean original) {\n+        copy(original, this);\n+    }\n \n     /**\n      * {@inheritDoc}\n         }\n         return Double.NaN;\n     }\n-}\n+    \n+    /*\n+     * {@inheritDoc}\n+     */\n+    public Mean copy() {\n+        Mean result = new Mean();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source Mean to copy\n+     * @param dest Mean to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(Mean source, Mean dest) {\n+        dest.incMoment = source.incMoment;\n+        dest.moment = (FirstMoment) source.moment.copy();\n+    }\n+}\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java\n     }\n     \n     /**\n+     * Copy constructor, creates a new {@code SecondMoment} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code SecondMoment} instance to copy\n+     */\n+    public SecondMoment(SecondMoment original) {\n+        super(original);\n+        this.m2 = original.m2;\n+    }\n+    \n+    /**\n      * {@inheritDoc}\n      */\n     public void increment(final double d) {\n     public double getResult() {\n         return m2;\n     }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public SecondMoment copy() {\n+        SecondMoment result = new SecondMoment();\n+        copy(this, result);\n+        return result; \n+    }\n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source SecondMoment to copy\n+     * @param dest SecondMoment to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(SecondMoment source, SecondMoment dest) {\n+        FirstMoment.copy(source, dest);\n+        dest.m2 = source.m2;\n+    }\n \n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java\n         incMoment = false;\n         this.moment = m3;\n     }\n+     \n+    /**\n+     * Copy constructor, creates a new {@code Skewness} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code Skewness} instance to copy\n+     */\n+    public Skewness(Skewness original) {\n+        copy(original, this);\n+    }\n \n     /**\n      * {@inheritDoc}\n         }\n         return skew;\n     }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public Skewness copy() {\n+        Skewness result = new Skewness();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source Skewness to copy\n+     * @param dest Skewness to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(Skewness source, Skewness dest) {\n+        dest.moment = new ThirdMoment((ThirdMoment) source.moment.copy());\n+        dest.incMoment = source.incMoment;\n+    }\n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java\n     }\n     \n     /**\n+     * Copy constructor, creates a new {@code StandardDeviation} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code StandardDeviation} instance to copy\n+     */\n+    public StandardDeviation(StandardDeviation original) {\n+        copy(original, this);\n+    }\n+    \n+    /**\n      * Contructs a StandardDeviation with the specified value for the\n      * <code>isBiasCorrected</code> property.  If this property is set to \n      * <code>true</code>, the {@link Variance} used in computing results will\n     public void setBiasCorrected(boolean isBiasCorrected) {\n         variance.setBiasCorrected(isBiasCorrected);\n     }\n-}\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public StandardDeviation copy() {\n+        StandardDeviation result = new StandardDeviation();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source StandardDeviation to copy\n+     * @param dest StandardDeviation to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(StandardDeviation source, StandardDeviation dest) {\n+        dest.variance = (Variance) source.variance.copy();\n+    }\n+    \n+}\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java\n package org.apache.commons.math.stat.descriptive.moment;\n \n import java.io.Serializable;\n+\n \n /**\n  * Computes a statistic related to the Third Central Moment.  Specifically,\n         m3 = Double.NaN;\n         nDevSq = Double.NaN;\n     }\n+    \n+    /**\n+     * Copy constructor, creates a new {@code ThirdMoment} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code ThirdMoment} instance to copy\n+     */\n+    public ThirdMoment(ThirdMoment original) {\n+        copy(original, this);\n+    }\n \n     /**\n      * {@inheritDoc}\n         m3 = Double.NaN;\n         nDevSq = Double.NaN;\n     }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public ThirdMoment copy() {\n+        ThirdMoment result = new ThirdMoment();\n+        copy(this, result);\n+        return result; \n+    }\n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source ThirdMoment to copy\n+     * @param dest ThirdMoment to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(ThirdMoment source, ThirdMoment dest) {\n+        SecondMoment.copy(source, dest);\n+        dest.m3 = source.m3;\n+        dest.nDevSq = source.nDevSq;\n+    }\n \n-}\n+}\n--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n         this.isBiasCorrected = isBiasCorrected;      \n     }\n    \n+    /**\n+     * Copy constructor, creates a new {@code Variance} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code Variance} instance to copy\n+     */\n+    public Variance(Variance original) {\n+        copy(original, this);\n+    }           \n+    \n     /**\n      * {@inheritDoc}  \n      * <p>If all values are available, it is more accurate to use \n     public void setBiasCorrected(boolean isBiasCorrected) {\n         this.isBiasCorrected = isBiasCorrected;\n     }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public Variance copy() {\n+        Variance result = new Variance();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source Variance to copy\n+     * @param dest Variance to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(Variance source, Variance dest) {\n+        dest.moment = (SecondMoment) source.moment.copy();\n+        dest.isBiasCorrected = source.isBiasCorrected;\n+        dest.incMoment = source.incMoment;\n+    }\n \n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java\n     public Max() {\n         n = 0;\n         value = Double.NaN;\n+    }\n+    \n+    /**\n+     * Copy constructor, creates a new {@code Max} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code Max} instance to copy\n+     */\n+    public Max(Max original) {\n+        copy(original, this);\n     }\n     \n     /**\n         }\n         return max;\n     }\n-}\n+    \n+    /*\n+     * {@inheritDoc}\n+     */\n+    public Max copy() {\n+        Max result = new Max();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source Max to copy\n+     * @param dest Max to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(Max source, Max dest) {\n+        dest.n = source.n;\n+        dest.value = source.value;\n+    }\n+}\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Median.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Median.java\n     public Median() {\n         super(50.0);\n     }\n+    \n+    /**\n+     * Copy constructor, creates a new {@code Median} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code Median} instance to copy\n+     */\n+    public Median(Median original) {\n+        super(original);\n+    }        \n \n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Min.java\n     public Min() {\n         n = 0;\n         value = Double.NaN;\n+    }\n+    \n+    /**\n+     * Copy constructor, creates a new {@code Min} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code Min} instance to copy\n+     */\n+    public Min(Min original) {\n+        copy(original, this);\n     }\n     \n     /**\n         }\n         return min;\n     }\n-}\n+    \n+    /*\n+     * {@inheritDoc}\n+     */\n+    public Min copy() {\n+        Min result = new Min();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source Min to copy\n+     * @param dest Min to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(Min source, Min dest) {\n+        dest.n = source.n;\n+        dest.value = source.value;\n+    }\n+}\n--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java\n     }\n \n     /**\n+     * Copy constructor, creates a new {@code Percentile} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code Percentile} instance to copy\n+     */\n+    public Percentile(Percentile original) {\n+        copy(original, this);\n+    }        \n+    \n+    /**\n      * Returns an estimate of the <code>p</code>th percentile of the values\n      * in the <code>values</code> array.\n      * <p>\n         }\n         quantile = p;\n     }\n-\n-}\n+    \n+    /*\n+     * {@inheritDoc}\n+     */\n+    public Percentile copy() {\n+        Percentile result = new Percentile();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source Percentile to copy\n+     * @param dest Percentile to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(Percentile source, Percentile dest) {\n+        dest.quantile = source.quantile;\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n     public Product() {\n         n = 0;\n         value = Double.NaN;\n+    }\n+    \n+    /**\n+     * Copy constructor, creates a new {@code Product} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code Product} instance to copy\n+     */\n+    public Product(Product original) {\n+        copy(original, this);\n     }\n     \n     /**\n         }\n         return product;\n     }\n+    \n+    /*\n+     * {@inheritDoc}\n+     */\n+    public Product copy() {\n+        Product result = new Product();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source Product to copy\n+     * @param dest Product to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(Product source, Product dest) {\n+        dest.n = source.n;\n+        dest.value = source.value;\n+    }\n \n-}\n+}\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n     public Sum() {\n         n = 0;\n         value = Double.NaN;\n+    }\n+    \n+    /**\n+     * Copy constructor, creates a new {@code Sum} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code Sum} instance to copy\n+     */\n+    public Sum(Sum original) {\n+        copy(original, this);\n     }\n     \n     /**\n         }\n         return sum;\n     }\n+    \n+    /*\n+     * {@inheritDoc}\n+     */\n+    public Sum copy() {\n+        Sum result = new Sum();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source Sum to copy\n+     * @param dest Sum to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(Sum source, Sum dest) {\n+        dest.n = source.n;\n+        dest.value = source.value;\n+    }\n \n }\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n        value = 0d;\n        n = 0;\n     }\n+    \n+    /**\n+     * Copy constructor, creates a new {@code SumOfLogs} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code SumOfLogs} instance to copy\n+     */\n+    public SumOfLogs(SumOfLogs original) {\n+        copy(original, this);\n+    }\n \n     /**\n      * {@inheritDoc}\n         }\n         return sumLog;\n     }\n-}\n+    \n+    /*\n+     * {@inheritDoc}\n+     */\n+    public SumOfLogs copy() {\n+        SumOfLogs result = new SumOfLogs();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source SumOfLogs to copy\n+     * @param dest SumOfLogs to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(SumOfLogs source, SumOfLogs dest) {\n+        dest.n = source.n;\n+        dest.value = source.value;\n+    }\n+}\n--- a/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n     public SumOfSquares() {\n         n = 0;\n         value = Double.NaN;\n+    }\n+    \n+    /**\n+     * Copy constructor, creates a new {@code SumOfSquares} identical\n+     * to the {@code original}\n+     * \n+     * @param original the {@code SumOfSquares} instance to copy\n+     */\n+    public SumOfSquares(SumOfSquares original) {\n+        copy(original, this);\n     }\n     \n     /**\n         }\n         return sumSq;\n     }\n+    \n+    /*\n+     * {@inheritDoc}\n+     */\n+    public SumOfSquares copy() {\n+        SumOfSquares result = new SumOfSquares();\n+        copy(this, result);\n+        return result;\n+    }\n+    \n+    /**\n+     * Copies source to dest.\n+     * <p>Neither source nor dest can be null.</p>\n+     * \n+     * @param source SumOfSquares to copy\n+     * @param dest SumOfSquares to copy to\n+     * @throws NullPointerException if either source or dest is null\n+     */\n+    public static void copy(SumOfSquares source, SumOfSquares dest) {\n+        dest.n = source.n;\n+        dest.value = source.value;\n+    }\n \n-}\n+}\n--- a/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java\n         suite.setName(\"DescriptiveStatistics Tests\");\n         return suite;\n     }\n-\n-    protected DescriptiveStatistics createDescriptiveStatistics() {\n-        return new DescriptiveStatistics();\n-    }\n     \n     public void testSetterInjection() throws Exception {\n         DescriptiveStatistics stats = new DescriptiveStatistics();\n         public double evaluate(double[] values) {\n             return 42;\n         }  \n+        public UnivariateStatistic copy() {\n+            return new deepMean();\n+        }\n     }\n     \n     /**\n         public double evaluate(double[] values) {\n             return percentile.evaluate(values);\n         }  \n+        public UnivariateStatistic copy() {\n+            goodPercentile result = new goodPercentile();\n+            result.setQuantile(percentile.getQuantile());\n+            return result;\n+        }\n     }\n     \n     /**\n             return getQuantile();\n         }  \n         private static final long serialVersionUID = 8040701391045914979L;\n+        public Percentile copy() {\n+            subPercentile result = new subPercentile();\n+            return result;\n+        }\n     }\n     \n     /**\n         }\n         public double evaluate(double[] values) {\n             return percentile.evaluate(values);\n-        }  \n+        }\n+        public UnivariateStatistic copy() {\n+            return new badPercentile();\n+        }\n+    }\n+    \n+    private void checkSameResults(DescriptiveStatistics first,\n+            DescriptiveStatistics second) throws Exception {\n+        assertEquals(first.getGeometricMean(), second.getGeometricMean(), 0);\n+        assertEquals(first.getKurtosis(), second.getKurtosis(), 0);\n+        assertEquals(first.getMax(), second.getMax(), 0);\n+        assertEquals(first.getMean(), second.getMean(), 0);\n+        assertEquals(first.getMin(), second.getMin(), 0);\n+        assertEquals(first.getN(), second.getN(), 0);\n+        assertEquals(first.getPercentile(10), second.getPercentile(10), 0);\n+        assertEquals(first.getSkewness(), second.getSkewness(), 0);\n+        assertEquals(first.getStandardDeviation(),\n+                second.getStandardDeviation(), 0);\n+        assertEquals(first.getSum(), second.getSum(), 0);\n+        assertEquals(first.getSumsq(), second.getSumsq(), 0);\n+        assertEquals(first.getVariance(), second.getVariance(), 0);\n+        assertEquals(first.eDA, second.eDA);\n+        assertEquals(first.getWindowSize(), second.getWindowSize());\n+        \n     }\n }\n--- a/src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java\n         }\n         public void incrementAll(double[] values) {\n         }   \n+        public StorelessUnivariateStatistic copy() {\n+            return new sumMean();\n+        }\n     }\n \n     public void testDimension() {\n--- a/src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java\n     /**Expected value for  the testArray defined in UnivariateStatisticAbstractTest */\n     public abstract double expectedValue();\n     \n-    /** Verify that calling increment() in a loop over testArray results in correct state */\n+    /** \n+     *  Verifies that increment() and incrementAll work properly. \n+     */\n     public void testIncrementation() throws Exception {\n \n         StorelessUnivariateStatistic statistic =\n             (StorelessUnivariateStatistic) getUnivariateStatistic();\n-\n-        statistic.clear();\n-\n+        \n+        // Add testArray one value at a time and check result\n         for (int i = 0; i < testArray.length; i++) {\n             statistic.increment(testArray[i]);\n         }\n-\n+        \n         assertEquals(expectedValue(), statistic.getResult(), getTolerance());\n         assertEquals(testArray.length, statistic.getN());\n \n         statistic.clear();\n-\n+        \n+        // Add testArray all at once and check again\n+        statistic.incrementAll(testArray);\n+        assertEquals(expectedValue(), statistic.getResult(), getTolerance());\n+        assertEquals(testArray.length, statistic.getN());\n+        \n+        statistic.clear();\n+        \n+        // Cleared\n         assertTrue(Double.isNaN(statistic.getResult()));\n         assertEquals(0, statistic.getN());\n \n             TestUtils.assertEquals(stat.getResult(), stat.evaluate(smallSamples[i]), getTolerance());\n         }\n     }\n-\n+    \n+    /**\n+     * Verifies that copied statistics remain equal to originals when\n+     * incremented the same way.\n+     *\n+     */\n+    public void testCopyConsistency() {\n+        \n+        StorelessUnivariateStatistic master =\n+            (StorelessUnivariateStatistic) getUnivariateStatistic();\n+        \n+        StorelessUnivariateStatistic replica = null;\n+        \n+        // Randomly select a portion of testArray to load first\n+        long index = Math.round((Math.random()) * (double) testArray.length);\n+        \n+        // Put first half in master and copy master to replica\n+        master.incrementAll(testArray, 0, (int) index);\n+        replica = (StorelessUnivariateStatistic) master.copy();\n+        \n+        // Check same\n+        assertTrue(replica.equals(master));\n+        assertTrue(master.equals(replica));\n+        \n+        // Now add second part to both and check again\n+        master.incrementAll(testArray, \n+                (int) index, (int) (testArray.length - index));\n+        replica.incrementAll(testArray, \n+                (int) index, (int) (testArray.length - index));\n+        assertTrue(replica.equals(master));\n+        assertTrue(master.equals(replica));\n+    }\n+    \n }\n--- a/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java\n         assertEquals(\"empty hash code\", emptyHash, t.hashCode());\n         assertEquals(\"empty hash code\", emptyHash, u.hashCode());\n     }\n+    \n+    public void testCopy() throws Exception {\n+        SummaryStatistics u = createSummaryStatistics();\n+        u.addValue(2d);\n+        u.addValue(1d);\n+        u.addValue(3d);\n+        u.addValue(4d);\n+        SummaryStatistics v = new SummaryStatistics(u);\n+        assertEquals(u, v);\n+        assertEquals(v, u);\n+        assertTrue(v.geoMean == v.getGeoMeanImpl());\n+        assertTrue(v.mean == v.getMeanImpl());\n+        assertTrue(v.min == v.getMinImpl());\n+        assertTrue(v.max == v.getMaxImpl());\n+        assertTrue(v.sum == v.getSumImpl());\n+        assertTrue(v.sumsq == v.getSumsqImpl());\n+        assertTrue(v.sumLog == v.getSumLogImpl());\n+        assertTrue(v.variance == v.getVarianceImpl());\n+        \n+        // Make sure both behave the same with additional values added\n+        u.addValue(7d);\n+        u.addValue(9d);\n+        u.addValue(11d);\n+        u.addValue(23d);\n+        v.addValue(7d);\n+        v.addValue(9d);\n+        v.addValue(11d);\n+        v.addValue(23d);\n+        assertEquals(u, v);\n+        assertEquals(v, u);\n+        \n+        // Check implementation pointers are preserved\n+        u.clear();\n+        u.setSumImpl(new Sum());\n+        SummaryStatistics.copy(u,v);\n+        assertEquals(u.sum, v.sum);\n+        assertEquals(u.getSumImpl(), v.getSumImpl());\n+        \n+    }\n \n     private void verifySummary(SummaryStatistics u, StatisticalSummary s) {\n         assertEquals(\"N\",s.getN(),u.getN());\n--- a/src/test/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java\n+++ b/src/test/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java\n             getTolerance());\n     }\n     \n+    public void testCopy() throws Exception {\n+        UnivariateStatistic original = getUnivariateStatistic();\n+        UnivariateStatistic copy = original.copy();\n+        assertEquals(\n+                expectedValue(),\n+                copy.evaluate(testArray),\n+                getTolerance());\n+    }\n+    \n }", "timestamp": 1227466070, "metainfo": ""}