{"sha": "656f9a841266e10b56292de9d6c5b9d73b8d9ee9", "log": "cleaned up tests wrt Junit 4  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java\n  */\n package org.apache.commons.math.analysis.interpolation;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import org.junit.Assert;\n \n import org.apache.commons.math.MathException;\n import org.junit.Test;\n         double[] xval = {0.5};\n         double[] yval = {0.7};\n         double[] res = new LoessInterpolator().smooth(xval, yval);\n-        assertEquals(1, res.length);\n-        assertEquals(0.7, res[0], 0.0);\n+        Assert.assertEquals(1, res.length);\n+        Assert.assertEquals(0.7, res[0], 0.0);\n     }\n \n     @Test\n         double[] xval = {0.5, 0.6};\n         double[] yval = {0.7, 0.8};\n         double[] res = new LoessInterpolator().smooth(xval, yval);\n-        assertEquals(2, res.length);\n-        assertEquals(0.7, res[0], 0.0);\n-        assertEquals(0.8, res[1], 0.0);\n+        Assert.assertEquals(2, res.length);\n+        Assert.assertEquals(0.7, res[0], 0.0);\n+        Assert.assertEquals(0.8, res[1], 0.0);\n     }\n \n     @Test\n         double[] yval = {2,4,6,8,10};\n         LoessInterpolator li = new LoessInterpolator(0.6, 2);\n         double[] res = li.smooth(xval, yval);\n-        assertEquals(5, res.length);\n+        Assert.assertEquals(5, res.length);\n         for(int i = 0; i < 5; ++i) {\n-            assertEquals(yval[i], res[i], 1e-8);\n+            Assert.assertEquals(yval[i], res[i], 1e-8);\n         }\n     }\n \n             fitResidualSum += Math.pow(fit - expected, 2);\n         }\n \n-        assertTrue(fitResidualSum < noisyResidualSum);\n+        Assert.assertTrue(fitResidualSum < noisyResidualSum);\n     }\n \n     @Test\n         }\n \n         for(int i = 1; i < variances.length; ++i) {\n-            assertTrue(variances[i] < variances[i-1]);\n+            Assert.assertTrue(variances[i] < variances[i-1]);\n         }\n     }\n \n         }\n \n         for(int i = 1; i < variances.length; ++i) {\n-            assertTrue(variances[i] < variances[i-1]);\n-        }\n-    }\n-\n-    @Test\n-    public void testUnequalSizeArguments() {\n-        try {\n-            new LoessInterpolator().smooth(new double[] {1,2,3}, new double[] {1,2,3,4});\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n-    }\n-\n-    @Test\n-    public void testEmptyData() {\n-        try {\n-            new LoessInterpolator().smooth(new double[] {}, new double[] {});\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n-    }\n-\n-    @Test\n-    public void testNonStrictlyIncreasing() {\n-        try {\n-            new LoessInterpolator().smooth(new double[] {4,3,1,2}, new double[] {3,4,5,6});\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n-        try {\n-            new LoessInterpolator().smooth(new double[] {1,2,2,3}, new double[] {3,4,5,6});\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n-    }\n-\n-    @Test\n-    public void testNotAllFiniteReal() {\n-        try {\n-            new LoessInterpolator().smooth(new double[] {1,2,Double.NaN}, new double[] {3,4,5});\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n-        try {\n-            new LoessInterpolator().smooth(new double[] {1,2,Double.POSITIVE_INFINITY}, new double[] {3,4,5});\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n-        try {\n-            new LoessInterpolator().smooth(new double[] {1,2,Double.NEGATIVE_INFINITY}, new double[] {3,4,5});\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n-        try {\n-            new LoessInterpolator().smooth(new double[] {3,4,5}, new double[] {1,2,Double.NaN});\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n-        try {\n-            new LoessInterpolator().smooth(new double[] {3,4,5}, new double[] {1,2,Double.POSITIVE_INFINITY});\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n-        try {\n-            new LoessInterpolator().smooth(new double[] {3,4,5}, new double[] {1,2,Double.NEGATIVE_INFINITY});\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n-    }\n-\n-    @Test\n-    public void testInsufficientBandwidth() {\n-        try {\n-            LoessInterpolator li = new LoessInterpolator(0.1, 3);\n-            li.smooth(new double[] {1,2,3,4,5,6,7,8,9,10,11,12}, new double[] {1,2,3,4,5,6,7,8,9,10,11,12});\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n-    }\n-\n-    @Test\n-    public void testCompletelyIncorrectBandwidth() {\n-        try {\n-            new LoessInterpolator(-0.2, 3);\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n-        try {\n-            new LoessInterpolator(1.1, 3);\n-            fail();\n-        } catch(MathException e) {\n-            // Expected\n-        }\n+            Assert.assertTrue(variances[i] < variances[i-1]);\n+        }\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testUnequalSizeArguments() throws MathException {\n+        new LoessInterpolator().smooth(new double[] {1,2,3}, new double[] {1,2,3,4});\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testEmptyData() throws MathException {\n+        new LoessInterpolator().smooth(new double[] {}, new double[] {});\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testNonStrictlyIncreasing1() throws MathException {\n+        new LoessInterpolator().smooth(new double[] {4,3,1,2}, new double[] {3,4,5,6});\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testNonStrictlyIncreasing2() throws MathException {\n+        new LoessInterpolator().smooth(new double[] {1,2,2,3}, new double[] {3,4,5,6});\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testNotAllFiniteReal1() throws MathException {\n+        new LoessInterpolator().smooth(new double[] {1,2,Double.NaN}, new double[] {3,4,5});\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testNotAllFiniteReal2() throws MathException {\n+        new LoessInterpolator().smooth(new double[] {1,2,Double.POSITIVE_INFINITY}, new double[] {3,4,5});\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testNotAllFiniteReal3() throws MathException {\n+        new LoessInterpolator().smooth(new double[] {1,2,Double.NEGATIVE_INFINITY}, new double[] {3,4,5});\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testNotAllFiniteReal4() throws MathException {\n+        new LoessInterpolator().smooth(new double[] {3,4,5}, new double[] {1,2,Double.NaN});\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testNotAllFiniteReal5() throws MathException {\n+        new LoessInterpolator().smooth(new double[] {3,4,5}, new double[] {1,2,Double.POSITIVE_INFINITY});\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testNotAllFiniteReal6() throws MathException {\n+        new LoessInterpolator().smooth(new double[] {3,4,5}, new double[] {1,2,Double.NEGATIVE_INFINITY});\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testInsufficientBandwidth() throws MathException {\n+        LoessInterpolator li = new LoessInterpolator(0.1, 3);\n+        li.smooth(new double[] {1,2,3,4,5,6,7,8,9,10,11,12}, new double[] {1,2,3,4,5,6,7,8,9,10,11,12});\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testCompletelyIncorrectBandwidth1() throws MathException {\n+        new LoessInterpolator(-0.2, 3);\n+    }\n+\n+    @Test(expected=MathException.class)\n+    public void testCompletelyIncorrectBandwidth2() throws MathException {\n+        new LoessInterpolator(1.1, 3);\n     }\n \n     private void generateSineData(double[] xval, double[] yval, double xnoise, double ynoise) {", "timestamp": 1253284758, "metainfo": ""}