{"sha": "043e1d6bd1189948bbcb2daae7c178fa23b571de", "log": "MATH-622 Default is now to print 10 fractional digits.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/LUDecomposition.java\n+++ b/src/main/java/org/apache/commons/math3/linear/LUDecomposition.java\n                                                matrix.getColumnDimension());\n         }\n \n-        final int m = matrix.getColumnDimension();\n         lu = matrix.getData();\n+        final int m = lu.length;\n         pivot = new int[m];\n         cachedL = null;\n         cachedU = null;\n \n         // Loop over columns\n         for (int col = 0; col < m; col++) {\n+            final double[] luColumnCol = new double[m];\n+            for (int i = 0; i < m; i++) {\n+                luColumnCol[i] = lu[i][col];\n+            }\n \n             // upper\n             for (int row = 0; row < col; row++) {\n                 final double[] luRow = lu[row];\n                 double sum = luRow[col];\n                 for (int i = 0; i < row; i++) {\n-                    sum -= luRow[i] * lu[i][col];\n+                    sum -= luRow[i] * luColumnCol[i];\n                 }\n                 luRow[col] = sum;\n+                luColumnCol[row] = sum;\n             }\n \n             // lower\n                 final double[] luRow = lu[row];\n                 double sum = luRow[col];\n                 for (int i = 0; i < col; i++) {\n-                    sum -= luRow[i] * lu[i][col];\n+                    sum -= luRow[i] * luColumnCol[i];\n                 }\n                 luRow[col] = sum;\n+                luColumnCol[row] = sum;\n \n                 // maintain best permutation choice\n                 if (FastMath.abs(sum) > largest) {\n             }\n \n             // Singularity check\n-            if (FastMath.abs(lu[max][col]) < singularityThreshold) {\n+            if (FastMath.abs(luColumnCol[max]) < singularityThreshold) {\n                 singular = true;\n                 return;\n             }\n \n             // Pivot if necessary\n             if (max != col) {\n-                double tmp = 0;\n                 final double[] luMax = lu[max];\n                 final double[] luCol = lu[col];\n                 for (int i = 0; i < m; i++) {\n-                    tmp = luMax[i];\n+                    final double tmp = luMax[i];\n                     luMax[i] = luCol[i];\n                     luCol[i] = tmp;\n                 }\n-                int temp = pivot[max];\n+                final int temp = pivot[max];\n                 pivot[max] = pivot[col];\n                 pivot[col] = temp;\n                 even = !even;\n--- a/src/main/java/org/apache/commons/math3/util/CompositeFormat.java\n+++ b/src/main/java/org/apache/commons/math3/util/CompositeFormat.java\n      */\n     public static NumberFormat getDefaultNumberFormat(final Locale locale) {\n         final NumberFormat nf = NumberFormat.getInstance(locale);\n-        nf.setMaximumFractionDigits(2);\n+        nf.setMaximumFractionDigits(10);\n         return nf;\n     }\n \n--- a/src/test/java/org/apache/commons/math3/complex/ComplexFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/complex/ComplexFormatAbstractTest.java\n \n     @Test\n     public void testSimpleWithDecimalsTrunc() {\n-        Complex c = new Complex(1.2323, 1.4343);\n-        String expected = \"1\" + getDecimalCharacter() + \"23 + 1\" + getDecimalCharacter() + \"43i\";\n+        Complex c = new Complex(1.232323232323, 1.434343434343);\n+        String expected = \"1\" + getDecimalCharacter() + \"2323232323 + 1\" + getDecimalCharacter() + \"4343434343i\";\n         String actual = complexFormat.format(c);\n         Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testNegativeReal() {\n-        Complex c = new Complex(-1.2323, 1.4343);\n-        String expected = \"-1\" + getDecimalCharacter() + \"23 + 1\" + getDecimalCharacter() + \"43i\";\n+        Complex c = new Complex(-1.232323232323, 1.43);\n+        String expected = \"-1\" + getDecimalCharacter() + \"2323232323 + 1\" + getDecimalCharacter() + \"43i\";\n         String actual = complexFormat.format(c);\n         Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testNegativeImaginary() {\n-        Complex c = new Complex(1.2323, -1.4343);\n-        String expected = \"1\" + getDecimalCharacter() + \"23 - 1\" + getDecimalCharacter() + \"43i\";\n+        Complex c = new Complex(1.23, -1.434343434343);\n+        String expected = \"1\" + getDecimalCharacter() + \"23 - 1\" + getDecimalCharacter() + \"4343434343i\";\n         String actual = complexFormat.format(c);\n         Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testNegativeBoth() {\n-        Complex c = new Complex(-1.2323, -1.4343);\n-        String expected = \"-1\" + getDecimalCharacter() + \"23 - 1\" + getDecimalCharacter() + \"43i\";\n+        Complex c = new Complex(-1.232323232323, -1.434343434343);\n+        String expected = \"-1\" + getDecimalCharacter() + \"2323232323 - 1\" + getDecimalCharacter() + \"4343434343i\";\n         String actual = complexFormat.format(c);\n         Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testZeroReal() {\n-        Complex c = new Complex(0.0, -1.4343);\n-        String expected = \"0 - 1\" + getDecimalCharacter() + \"43i\";\n+        Complex c = new Complex(0.0, -1.434343434343);\n+        String expected = \"0 - 1\" + getDecimalCharacter() + \"4343434343i\";\n         String actual = complexFormat.format(c);\n         Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testZeroImaginary() {\n-        Complex c = new Complex(30.233, 0);\n-        String expected = \"30\" + getDecimalCharacter() + \"23\";\n+        Complex c = new Complex(30.23333333333, 0);\n+        String expected = \"30\" + getDecimalCharacter() + \"2333333333\";\n         String actual = complexFormat.format(c);\n         Assert.assertEquals(expected, actual);\n     }\n         Locale defaultLocal = Locale.getDefault();\n         Locale.setDefault(getLocale());\n \n-        Complex c = new Complex(232.222, -342.33);\n-        String expected = \"232\" + getDecimalCharacter() + \"22 - 342\" + getDecimalCharacter() + \"33i\";\n+        Complex c = new Complex(232.22222222222, -342.3333333333);\n+        String expected = \"232\" + getDecimalCharacter() + \"2222222222 - 342\" + getDecimalCharacter() + \"3333333333i\";\n         String actual = (new ComplexFormat()).format(c);\n         Assert.assertEquals(expected, actual);\n \n \n     @Test\n     public void testParseSimpleWithDecimalsTrunc() {\n-        String source = \"1\" + getDecimalCharacter() + \"2323 + 1\" + getDecimalCharacter() + \"4343i\";\n-        Complex expected = new Complex(1.2323, 1.4343);\n+        String source = \"1\" + getDecimalCharacter() + \"232323232323 + 1\" + getDecimalCharacter() + \"434343434343i\";\n+        Complex expected = new Complex(1.232323232323, 1.434343434343);\n         Complex actual = complexFormat.parse(source);\n         Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseNegativeReal() {\n-        String source = \"-1\" + getDecimalCharacter() + \"2323 + 1\" + getDecimalCharacter() + \"4343i\";\n-        Complex expected = new Complex(-1.2323, 1.4343);\n+        String source = \"-1\" + getDecimalCharacter() + \"232323232323 + 1\" + getDecimalCharacter() + \"4343i\";\n+        Complex expected = new Complex(-1.232323232323, 1.4343);\n         Complex actual = complexFormat.parse(source);\n         Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseNegativeImaginary() {\n-        String source = \"1\" + getDecimalCharacter() + \"2323 - 1\" + getDecimalCharacter() + \"4343i\";\n-        Complex expected = new Complex(1.2323, -1.4343);\n+        String source = \"1\" + getDecimalCharacter() + \"2323 - 1\" + getDecimalCharacter() + \"434343434343i\";\n+        Complex expected = new Complex(1.2323, -1.434343434343);\n         Complex actual = complexFormat.parse(source);\n         Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testParseNegativeBoth() {\n-        String source = \"-1\" + getDecimalCharacter() + \"2323 - 1\" + getDecimalCharacter() + \"4343i\";\n-        Complex expected = new Complex(-1.2323, -1.4343);\n+        String source = \"-1\" + getDecimalCharacter() + \"232323232323 - 1\" + getDecimalCharacter() + \"434343434343i\";\n+        Complex expected = new Complex(-1.232323232323, -1.434343434343);\n         Complex actual = complexFormat.parse(source);\n         Assert.assertEquals(expected, actual);\n     }\n         ComplexFormat cf = ComplexFormat.getInstance(getLocale());\n         Double pi = Double.valueOf(FastMath.PI);\n         String text = cf.format(pi);\n-        Assert.assertEquals(\"3\" + getDecimalCharacter() + \"14\", text);\n+        Assert.assertEquals(\"3\" + getDecimalCharacter() + \"1415926536\", text);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java\n \n     @Test\n     public void testSimpleWithDecimalsTrunc() {\n-        Vector3D c = new Vector3D(1.2323, 1.4343, 1.6333);\n+        Vector3D c = new Vector3D(1.232323232323, 1.434343434343, 1.633333333333);\n         String expected =\n             \"{1\"    + getDecimalCharacter() +\n-            \"23; 1\" + getDecimalCharacter() +\n+            \"2323232323; 1\" + getDecimalCharacter() +\n+            \"4343434343; 1\" + getDecimalCharacter() +\n+            \"6333333333}\";\n+        String actual = vector3DFormat.format(c);\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testNegativeX() {\n+        Vector3D c = new Vector3D(-1.232323232323, 1.43, 1.63);\n+        String expected =\n+            \"{-1\"    + getDecimalCharacter() +\n+            \"2323232323; 1\" + getDecimalCharacter() +\n             \"43; 1\" + getDecimalCharacter() +\n             \"63}\";\n         String actual = vector3DFormat.format(c);\n     }\n \n     @Test\n-    public void testNegativeX() {\n-        Vector3D c = new Vector3D(-1.2323, 1.4343, 1.6333);\n-        String expected =\n-            \"{-1\"    + getDecimalCharacter() +\n-            \"23; 1\" + getDecimalCharacter() +\n-            \"43; 1\" + getDecimalCharacter() +\n-            \"63}\";\n-        String actual = vector3DFormat.format(c);\n-        Assert.assertEquals(expected, actual);\n-    }\n-\n-    @Test\n     public void testNegativeY() {\n-        Vector3D c = new Vector3D(1.2323, -1.4343, 1.6333);\n+        Vector3D c = new Vector3D(1.23, -1.434343434343, 1.63);\n         String expected =\n             \"{1\"    + getDecimalCharacter() +\n             \"23; -1\" + getDecimalCharacter() +\n-            \"43; 1\" + getDecimalCharacter() +\n+            \"4343434343; 1\" + getDecimalCharacter() +\n             \"63}\";\n         String actual = vector3DFormat.format(c);\n         Assert.assertEquals(expected, actual);\n \n     @Test\n     public void testNegativeZ() {\n-        Vector3D c = new Vector3D(1.2323, 1.4343, -1.6333);\n+        Vector3D c = new Vector3D(1.23, 1.43, -1.633333333333);\n         String expected =\n             \"{1\"    + getDecimalCharacter() +\n             \"23; 1\" + getDecimalCharacter() +\n             \"43; -1\" + getDecimalCharacter() +\n-            \"63}\";\n+            \"6333333333}\";\n         String actual = vector3DFormat.format(c);\n         Assert.assertEquals(expected, actual);\n     }\n         Locale defaultLocal = Locale.getDefault();\n         Locale.setDefault(getLocale());\n \n-        Vector3D c = new Vector3D(232.222, -342.33, 432.444);\n+        Vector3D c = new Vector3D(232.22222222222, -342.3333333333, 432.44444444444);\n         String expected =\n             \"{232\"    + getDecimalCharacter() +\n-            \"22; -342\" + getDecimalCharacter() +\n-            \"33; 432\" + getDecimalCharacter() +\n-            \"44}\";\n+            \"2222222222; -342\" + getDecimalCharacter() +\n+            \"3333333333; 432\" + getDecimalCharacter() +\n+            \"4444444444}\";\n         String actual = (new Vector3DFormat()).format(c);\n         Assert.assertEquals(expected, actual);\n \n--- a/src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java\n \n     @Test\n     public void testSimpleWithDecimalsTrunc() {\n-        RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{1.2323, 1.4343, 1.6333},\n-                                                                    {2.4666, 2.4666, 2.6666}});\n+        RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{1.232323232323, 1.43, 1.63},\n+                                                                    {2.46, 2.46, 2.666666666666}});\n         String expected =\n                 \"{{1\"    + getDecimalCharacter() +\n-                \"23,1\" + getDecimalCharacter() +\n+                \"2323232323,1\" + getDecimalCharacter() +\n                 \"43,1\" + getDecimalCharacter() +\n                 \"63},{2\" + getDecimalCharacter() +\n-                \"47,2\" + getDecimalCharacter() +\n-                \"47,2\" + getDecimalCharacter() +\n-                \"67}}\";\n+                \"46,2\" + getDecimalCharacter() +\n+                \"46,2\" + getDecimalCharacter() +\n+                \"6666666667}}\";\n         String actual = realMatrixFormat.format(m);\n         Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testNegativeComponent() {\n-        RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{-1.2323, 1.4343, 1.6333},\n-                                                                    {2.4666, 2.4666, 2.6666}});\n+        RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{-1.232323232323, 1.43, 1.63},\n+                                                                    {2.46, 2.46, 2.66}});\n         String expected =\n                 \"{{-1\"    + getDecimalCharacter() +\n-                \"23,1\" + getDecimalCharacter() +\n+                \"2323232323,1\" + getDecimalCharacter() +\n                 \"43,1\" + getDecimalCharacter() +\n                 \"63},{2\" + getDecimalCharacter() +\n-                \"47,2\" + getDecimalCharacter() +\n-                \"47,2\" + getDecimalCharacter() +\n-                \"67}}\";\n+                \"46,2\" + getDecimalCharacter() +\n+                \"46,2\" + getDecimalCharacter() +\n+                \"66}}\";\n         String actual = realMatrixFormat.format(m);\n         Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testNegativeComponent2() {\n-        RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{1.2323, -1.4343, 1.6333},\n-                                                                    {2.4666, 2.4666, 2.6666}});\n+        RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{1.23, -1.434343434343, 1.63},\n+                                                                    {2.46, 2.46, 2.66}});\n         String expected =\n                 \"{{1\"    + getDecimalCharacter() +\n                 \"23,-1\" + getDecimalCharacter() +\n-                \"43,1\" + getDecimalCharacter() +\n+                \"4343434343,1\" + getDecimalCharacter() +\n                 \"63},{2\" + getDecimalCharacter() +\n-                \"47,2\" + getDecimalCharacter() +\n-                \"47,2\" + getDecimalCharacter() +\n-                \"67}}\";\n+                \"46,2\" + getDecimalCharacter() +\n+                \"46,2\" + getDecimalCharacter() +\n+                \"66}}\";\n         String actual = realMatrixFormat.format(m);\n         Assert.assertEquals(expected, actual);\n     }\n \n     @Test\n     public void testNegativeSecondRow() {\n-        RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{1.2323, 1.4343, 1.6333},\n-                                                                    {-2.4666, 2.4666, 2.6666}});\n+        RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{1.23, 1.43, 1.63},\n+                                                                    {-2.66666666666, 2.46, 2.66}});\n         String expected =\n                 \"{{1\"    + getDecimalCharacter() +\n                 \"23,1\" + getDecimalCharacter() +\n                 \"43,1\" + getDecimalCharacter() +\n                 \"63},{-2\" + getDecimalCharacter() +\n-                \"47,2\" + getDecimalCharacter() +\n-                \"47,2\" + getDecimalCharacter() +\n-                \"67}}\";\n+                \"6666666667,2\" + getDecimalCharacter() +\n+                \"46,2\" + getDecimalCharacter() +\n+                \"66}}\";\n         String actual = realMatrixFormat.format(m);\n         Assert.assertEquals(expected, actual);\n     }\n         Locale defaultLocale = Locale.getDefault();\n         Locale.setDefault(getLocale());\n \n-        RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{232.222, -342.33, 432.444}});\n+        RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{232.2222222222, -342.33333333333, 432.44444444444}});\n         String expected =\n             \"{{232\"    + getDecimalCharacter() +\n-            \"22,-342\" + getDecimalCharacter() +\n-            \"33,432\" + getDecimalCharacter() +\n-            \"44}}\";\n+            \"2222222222,-342\" + getDecimalCharacter() +\n+            \"3333333333,432\" + getDecimalCharacter() +\n+            \"4444444444}}\";\n         String actual = (new RealMatrixFormat()).format(m);\n         Assert.assertEquals(expected, actual);\n \n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorFormatAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorFormatAbstractTest.java\n \n     @Test\n     public void testSimpleWithDecimalsTrunc() {\n-        ArrayRealVector c = new ArrayRealVector(new double[] {1.2323, 1.4343, 1.6333});\n+        ArrayRealVector c = new ArrayRealVector(new double[] {1.232323232323, 1.43434343434343, 1.633333333333});\n         String expected =\n             \"{1\"    + getDecimalCharacter() +\n-            \"23; 1\" + getDecimalCharacter() +\n+            \"2323232323; 1\" + getDecimalCharacter() +\n+            \"4343434343; 1\" + getDecimalCharacter() +\n+            \"6333333333}\";\n+        String actual = realVectorFormat.format(c);\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testNegativeX() {\n+        ArrayRealVector c = new ArrayRealVector(new double[] {-1.232323232323, 1.43, 1.63});\n+        String expected =\n+            \"{-1\"    + getDecimalCharacter() +\n+            \"2323232323; 1\" + getDecimalCharacter() +\n             \"43; 1\" + getDecimalCharacter() +\n             \"63}\";\n         String actual = realVectorFormat.format(c);\n     }\n \n     @Test\n-    public void testNegativeX() {\n-        ArrayRealVector c = new ArrayRealVector(new double[] {-1.2323, 1.4343, 1.6333});\n-        String expected =\n-            \"{-1\"    + getDecimalCharacter() +\n-            \"23; 1\" + getDecimalCharacter() +\n-            \"43; 1\" + getDecimalCharacter() +\n-            \"63}\";\n-        String actual = realVectorFormat.format(c);\n-        Assert.assertEquals(expected, actual);\n-    }\n-\n-    @Test\n     public void testNegativeY() {\n-        ArrayRealVector c = new ArrayRealVector(new double[] {1.2323, -1.4343, 1.6333});\n+        ArrayRealVector c = new ArrayRealVector(new double[] {1.23, -1.434343434343, 1.63});\n         String expected =\n             \"{1\"    + getDecimalCharacter() +\n             \"23; -1\" + getDecimalCharacter() +\n-            \"43; 1\" + getDecimalCharacter() +\n+            \"4343434343; 1\" + getDecimalCharacter() +\n             \"63}\";\n         String actual = realVectorFormat.format(c);\n         Assert.assertEquals(expected, actual);\n \n     @Test\n     public void testNegativeZ() {\n-        ArrayRealVector c = new ArrayRealVector(new double[] {1.2323, 1.4343, -1.6333});\n+        ArrayRealVector c = new ArrayRealVector(new double[] {1.23, 1.43, -1.633333333333});\n         String expected =\n             \"{1\"    + getDecimalCharacter() +\n             \"23; 1\" + getDecimalCharacter() +\n             \"43; -1\" + getDecimalCharacter() +\n-            \"63}\";\n+            \"6333333333}\";\n         String actual = realVectorFormat.format(c);\n         Assert.assertEquals(expected, actual);\n     }\n         Locale defaultLocal = Locale.getDefault();\n         Locale.setDefault(getLocale());\n \n-        ArrayRealVector c = new ArrayRealVector(new double[] {232.222, -342.33, 432.444});\n+        ArrayRealVector c = new ArrayRealVector(new double[] {232.22222222222, -342.3333333333, 432.44444444444});\n         String expected =\n             \"{232\"    + getDecimalCharacter() +\n-            \"22; -342\" + getDecimalCharacter() +\n-            \"33; 432\" + getDecimalCharacter() +\n-            \"44}\";\n+            \"2222222222; -342\" + getDecimalCharacter() +\n+            \"3333333333; 432\" + getDecimalCharacter() +\n+            \"4444444444}\";\n         String actual = (new RealVectorFormat()).format(c);\n         Assert.assertEquals(expected, actual);\n ", "timestamp": 1343563548, "metainfo": ""}