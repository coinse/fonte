{"sha": "5f2077bb774d283e7984a2d5dc0c2759f2954963", "log": "MATH-835 Avoid overflow.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n      * @return the fraction percentage as a <tt>double</tt>.\n      */\n     public double percentageValue() {\n-        return multiply(100).doubleValue();\n+        return 100 * doubleValue();\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/fraction/FractionTest.java\n+++ b/src/test/java/org/apache/commons/math3/fraction/FractionTest.java\n     }\n \n     @Test\n+    public void testMath835() {\n+        final int numer = Integer.MAX_VALUE / 99;\n+        final int denom = 1;\n+        final double percentage = 100 * ((double) numer) / denom;\n+        final Fraction frac = new Fraction(numer, denom);\n+        // With the implementation that preceded the fix suggested in MATH-835,\n+        // this test was failing, due to overflow.\n+        Assert.assertEquals(percentage, frac.percentageValue(), Math.ulp(percentage));\n+    }\n+\n+    @Test\n     public void testReciprocal() {\n         Fraction f = null;\n ", "timestamp": 1343746681, "metainfo": ""}