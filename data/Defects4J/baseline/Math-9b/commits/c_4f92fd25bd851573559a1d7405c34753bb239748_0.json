{"sha": "4f92fd25bd851573559a1d7405c34753bb239748", "log": "Improved performance of logGamma. Pr #31522 Submitted by: Ken Geis Reviewd by: Phil Steitz   ", "commit": "\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n  * This is a utility class that provides computation methods related to the\n  * Gamma family of functions.\n  *\n- * @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:17 $\n+ * @version $Revision: 1.22 $ $Date: 2004/10/08 05:53:18 $\n  */\n public class Gamma implements Serializable {\n     \n         .36899182659531622704e-5,\n     };\n \n+    /** Avoid repeated computation of log of 2 PI in logGamma */\n+    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);\n+\n     \n     /**\n      * Default constructor.  Prohibit instantiation.\n             ret = Double.NaN;\n         } else {\n             double g = 607.0 / 128.0;\n-\n+            \n             double sum = 0.0;\n-            for (int i = 1; i < lanczos.length; ++i) {\n+            for (int i = lanczos.length - 1; i > 0; --i) {\n                 sum = sum + (lanczos[i] / (x + i));\n             }\n             sum = sum + lanczos[0];\n \n             double tmp = x + g + .5;\n             ret = ((x + .5) * Math.log(tmp)) - tmp +\n-                (.5 * Math.log(2.0 * Math.PI)) + Math.log(sum) - Math.log(x);\n+                HALF_LOG_2_PI + Math.log(sum / x);\n         }\n \n         return ret;", "timestamp": 1097214798, "metainfo": ""}