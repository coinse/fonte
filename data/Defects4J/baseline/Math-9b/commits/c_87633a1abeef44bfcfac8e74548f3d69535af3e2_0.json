{"sha": "87633a1abeef44bfcfac8e74548f3d69535af3e2", "log": "Commit change inadvertenly omitted from r817128.  JIRA: MATH-298  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n     /** Sample statistics */\n     private SummaryStatistics sampleStats = null;\n \n+    /** Max loaded value */\n+    private double max = Double.NEGATIVE_INFINITY;\n+\n+    /** Min loaded value */\n+    private double min = Double.POSITIVE_INFINITY;\n+\n+    /** Grid size */\n+    private double delta = 0d;\n+\n     /** number of bins */\n     private int binCount = 1000;\n \n         /**\n          * Compute bin stats.\n          *\n-         * @param min minimum value\n-         * @param delta  grid size\n          * @throws Exception  if an error occurs computing bin stats\n          */\n-        public abstract void computeBinStats(double min, double delta)\n+        public abstract void computeBinStats()\n                 throws Exception;\n         /**\n          * Compute sample statistics.\n         /**\n          * Computes binStats\n          *\n-         * @param min  minimum value\n-         * @param delta  grid size\n          * @throws IOException if an IO error occurs\n          */\n         @Override\n-        public void computeBinStats(double min, double delta)\n+        public void computeBinStats()\n                 throws IOException {\n             String str = null;\n             double val = 0.0d;\n             while ((str = inputStream.readLine()) != null) {\n                 val = Double.parseDouble(str);\n-                SummaryStatistics stats = binStats.get(findBin(min, val, delta));\n+                SummaryStatistics stats = binStats.get(findBin(val));\n                 stats.addValue(val);\n             }\n \n     /**\n      * <code>DataAdapter</code> for data provided as array of doubles.\n      */\n-    private class ArrayDataAdapter extends DataAdapter{\n+    private class ArrayDataAdapter extends DataAdapter {\n \n         /** Array of input  data values */\n         private double[] inputArray;\n         /**\n          * Computes binStats\n          *\n-         * @param min  minimum value\n-         * @param delta  grid size\n          * @throws IOException  if an IO error occurs\n          */\n         @Override\n-        public void computeBinStats(double min, double delta)\n+        public void computeBinStats()\n             throws IOException {\n             for (int i = 0; i < inputArray.length; i++) {\n                 SummaryStatistics stats =\n-                    binStats.get(findBin(min, inputArray[i], delta));\n+                    binStats.get(findBin(inputArray[i]));\n                 stats.addValue(inputArray[i]);\n             }\n         }\n      * @throws IOException  if an IO error occurs\n      */\n     private void fillBinStats(Object in) throws IOException {\n-        // Load array of bin upper bounds -- evenly spaced from min - max\n-        double min = sampleStats.getMin();\n-        double max = sampleStats.getMax();\n-        double delta = (max - min)/(Double.valueOf(binCount)).doubleValue();\n-        double[] binUpperBounds = new double[binCount];\n-        binUpperBounds[0] = min + delta;\n-        for (int i = 1; i< binCount - 1; i++) {\n-            binUpperBounds[i] = binUpperBounds[i-1] + delta;\n-        }\n-        binUpperBounds[binCount -1] = max;\n+        // Set up grid\n+        min = sampleStats.getMin();\n+        max = sampleStats.getMax();\n+        delta = (max - min)/(Double.valueOf(binCount)).doubleValue();\n \n         // Initialize binStats ArrayList\n         if (!binStats.isEmpty()) {\n         DataAdapterFactory aFactory = new DataAdapterFactory();\n         DataAdapter da = aFactory.getAdapter(in);\n         try {\n-            da.computeBinStats(min, delta);\n+            da.computeBinStats();\n         } catch (IOException ioe) {\n             // don't wrap exceptions which are already IOException\n             throw ioe;\n     /**\n      * Returns the index of the bin to which the given value belongs\n      *\n-     * @param min  the minimum value\n      * @param value  the value whose bin we are trying to find\n-     * @param delta  the grid size\n      * @return the index of the bin containing the value\n      */\n-    private int findBin(double min, double value, double delta) {\n+    private int findBin(double value) {\n         return Math.min(\n                 Math.max((int) Math.ceil((value- min) / delta) - 1, 0),\n                 binCount - 1);\n     }\n \n     /**\n-     * Returns (a fresh copy of) the array of upper bounds for the bins.\n-       Bins are: <br/>\n+     * <p>Returns a fresh copy of the array of upper bounds for the bins.\n+     * Bins are: <br/>\n      * [min,upperBounds[0]],(upperBounds[0],upperBounds[1]],...,\n-     *  (upperBounds[binCount-1],max]\n+     *  (upperBounds[binCount-2], upperBounds[binCount-1] = max].</p>\n+     *\n+     * <p>Note: In versions 1.0-2.0 of commons-math, this method\n+     * incorrectly returned the array of probability generator upper\n+     * bounds now returned by {@link #getGeneratorUpperBounds()}.</p>\n      *\n      * @return array of bin upper bounds\n      */\n     public double[] getUpperBounds() {\n+        double[] binUpperBounds = new double[binCount];\n+        binUpperBounds[0] = min + delta;\n+        for (int i = 1; i < binCount - 1; i++) {\n+            binUpperBounds[i] = binUpperBounds[i-1] + delta;\n+        }\n+        binUpperBounds[binCount - 1] = max;\n+        return binUpperBounds;\n+    }\n+\n+    /**\n+     * <p>Returns a fresh copy of the array of upper bounds of the subintervals\n+     * of [0,1] used in generating data from the empirical distribution.\n+     * Subintervals correspond to bins with lengths proportional to bin counts.</p>\n+     *\n+     * <p>In versions 1.0-2.0 of commons-math, this array was (incorrectly) returned\n+     * by {@link #getUpperBounds()}.</p>\n+     *\n+     * @since 2.1\n+     * @return array of upper bounds of subintervals used in data generation\n+     */\n+    public double[] getGeneratorUpperBounds() {\n         int len = upperBounds.length;\n         double[] out = new double[len];\n         System.arraycopy(upperBounds, 0, out, 0, len);", "timestamp": 1253499219, "metainfo": ""}