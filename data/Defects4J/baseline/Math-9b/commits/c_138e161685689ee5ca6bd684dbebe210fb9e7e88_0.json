{"sha": "138e161685689ee5ca6bd684dbebe210fb9e7e88", "log": "Added tests confirming exception behavior for regress(double[]).  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/stat/regression/SimpleRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/regression/SimpleRegressionTest.java\n import java.util.Random;\n \n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n import org.junit.Assert;\n import org.junit.Test;\n \n         Assert.assertEquals(\"SSR\", regressionIntOnly.getRegressionSumSquares(), onlyInt.getRegressionSumSquares() ,1.0E-8);\n         Assert.assertEquals(\"MSE\", regressionIntOnly.getMeanSquareError(), onlyInt.getMeanSquareError() ,1.0E-8);\n \n+    }\n+    \n+    /**\n+     * Verify that regress generates exceptions as advertised for bad model specifications.\n+     */\n+    @Test\n+    public void testRegressExceptions() {\n+        // No intercept\n+        final SimpleRegression noIntRegression = new SimpleRegression(false);\n+        noIntRegression.addData(noint2[0][1], noint2[0][0]);\n+        noIntRegression.addData(noint2[1][1], noint2[1][0]);\n+        noIntRegression.addData(noint2[2][1], noint2[2][0]);\n+        try { // null array\n+            noIntRegression.regress(null);\n+            Assert.fail(\"Expecting MathIllegalArgumentException for null array\");\n+        } catch (MathIllegalArgumentException ex) {\n+            // Expected\n+        }\n+        try { // empty array\n+            noIntRegression.regress(new int[] {});\n+            Assert.fail(\"Expecting MathIllegalArgumentException for empty array\");\n+        } catch (MathIllegalArgumentException ex) {\n+            // Expected\n+        }\n+        try { // more than 1 regressor\n+            noIntRegression.regress(new int[] {0, 1});\n+            Assert.fail(\"Expecting ModelSpecificationException - too many regressors\");\n+        } catch (ModelSpecificationException ex) {\n+            // Expected\n+        }\n+        try { // invalid regressor\n+            noIntRegression.regress(new int[] {1});\n+            Assert.fail(\"Expecting OutOfRangeException - invalid regression\");\n+        } catch (OutOfRangeException ex) {\n+            // Expected\n+        }\n+        \n+        // With intercept\n+        final SimpleRegression regression = new SimpleRegression(true);\n+        regression.addData(noint2[0][1], noint2[0][0]);\n+        regression.addData(noint2[1][1], noint2[1][0]);\n+        regression.addData(noint2[2][1], noint2[2][0]);\n+        try { // null array\n+            regression.regress(null);\n+            Assert.fail(\"Expecting MathIllegalArgumentException for null array\");\n+        } catch (MathIllegalArgumentException ex) {\n+            // Expected\n+        }\n+        try { // empty array\n+            regression.regress(new int[] {});\n+            Assert.fail(\"Expecting MathIllegalArgumentException for empty array\");\n+        } catch (MathIllegalArgumentException ex) {\n+            // Expected\n+        }\n+        try { // more than 2 regressors\n+            regression.regress(new int[] {0, 1, 2});\n+            Assert.fail(\"Expecting ModelSpecificationException - too many regressors\");\n+        } catch (ModelSpecificationException ex) {\n+            // Expected\n+        }\n+        try { // wrong order\n+            regression.regress(new int[] {1,0});\n+            Assert.fail(\"Expecting ModelSpecificationException - invalid regression\");\n+        } catch (ModelSpecificationException ex) {\n+            // Expected\n+        }\n+        try { // out of range\n+            regression.regress(new int[] {3,4});\n+            Assert.fail(\"Expecting OutOfRangeException\");\n+        } catch (OutOfRangeException ex) {\n+            // Expected\n+        }\n+        try { // out of range\n+            regression.regress(new int[] {0,2});\n+            Assert.fail(\"Expecting OutOfRangeException\");\n+        } catch (OutOfRangeException ex) {\n+            // Expected\n+        }\n+        try { // out of range\n+            regression.regress(new int[] {2});\n+            Assert.fail(\"Expecting OutOfRangeException\");\n+        } catch (OutOfRangeException ex) {\n+            // Expected\n+        }\n     }\n \n     @Test", "timestamp": 1348436571, "metainfo": ""}