{"sha": "f9dafb86010fac653d33e47572f2f3e7e1a2ab12", "log": "Removed the requiresDenseOutput method from the StepHandler interface. Now integrators always consider dense output is required and set up the appropriate state interpolators, so step handlers can rely on them.  JIRA: MATH-596, MATH-604  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n         eventsStates.clear();\n     }\n \n-    /** Check if dense output is needed.\n-     * @return true if there is at least one event handler or if\n-     * one of the step handlers requires dense output\n-     */\n-    protected boolean requiresDenseOutput() {\n-        if (!eventsStates.isEmpty()) {\n-            return true;\n-        }\n-        for (StepHandler handler : stepHandlers) {\n-            if (handler.requiresDenseOutput()) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n     /** {@inheritDoc} */\n     public double getCurrentStepStart() {\n         return stepStart;\n--- a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n+++ b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n     index = steps.size() - 1;\n     finalTime = (steps.get(index)).getCurrentTime();\n \n-  }\n-\n-  /** Determines whether this handler needs dense output.\n-   * <p>The essence of this class is to provide dense output over all\n-   * steps, hence it requires the internal steps to provide themselves\n-   * dense output. The method therefore returns always true.</p>\n-   * @return always true\n-   */\n-  public boolean requiresDenseOutput() {\n-    return true;\n   }\n \n   /** Reset the step handler.\n--- a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java\n         }\n \n         /** {@inheritDoc} */\n-        public boolean requiresDenseOutput() {\n-            return true;\n-        }\n-\n-        /** {@inheritDoc} */\n         public void reset() {\n             // nothing to do\n         }\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.IntegratorException;\n-import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n-import org.apache.commons.math.ode.sampling.DummyStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n \n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n-    AbstractStepInterpolator interpolator;\n-    if (requiresDenseOutput()) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n-    } else {\n-      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);\n-    }\n+    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n+    interpolator.reinitialize(this, yTmp, yDotK, forward);\n     interpolator.storeTime(t0);\n \n     // set up integration control objects\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n-import org.apache.commons.math.ode.sampling.DummyStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n \n       optimalStep     = new double[size];\n     }\n \n-    if (requiresDenseOutput()) {\n-      // step size sequence: 2, 6, 10, 14, ...\n-      for (int k = 0; k < size; ++k) {\n+    // step size sequence: 2, 6, 10, 14, ...\n+    for (int k = 0; k < size; ++k) {\n         sequence[k] = 4 * k + 2;\n-      }\n-    } else {\n-      // step size sequence: 2, 4, 6, 8, ...\n-      for (int k = 0; k < size; ++k) {\n-        sequence[k] = 2 * (k + 1);\n-      }\n     }\n \n     // initialize the order selection cost array\n       System.arraycopy(y0, 0, y, 0, y0.length);\n     }\n \n-    double[] yDot1      = new double[y0.length];\n-    double[][] yMidDots = null;\n-    final boolean denseOutput = requiresDenseOutput();\n-    if (denseOutput) {\n-      yMidDots = new double[1 + 2 * sequence.length][];\n-      for (int j = 0; j < yMidDots.length; ++j) {\n-        yMidDots[j] = new double[y0.length];\n-      }\n-    } else {\n-      yMidDots    = new double[1][];\n-      yMidDots[0] = new double[y0.length];\n-    }\n+    final double[] yDot1 = new double[y0.length];\n+    final double[][] yMidDots = new double[1 + 2 * sequence.length][y0.length];\n \n     // initial scaling\n     final double[] scale = new double[mainSetDimension];\n                                        (int) FastMath.floor(0.5 - 0.6 * log10R)));\n \n     // set up an interpolator sharing the integrator arrays\n-    AbstractStepInterpolator interpolator = null;\n-    if (denseOutput) {\n-      interpolator = new GraggBulirschStoerStepInterpolator(y, yDot0,\n-                                                            y1, yDot1,\n-                                                            yMidDots, forward);\n-    } else {\n-      interpolator = new DummyStepInterpolator(y, yDot1, forward);\n-    }\n+    final AbstractStepInterpolator interpolator =\n+            new GraggBulirschStoerStepInterpolator(y, yDot0,\n+                                                   y1, yDot1,\n+                                                   yMidDots, forward);\n     interpolator.storeTime(t0);\n \n     stepStart = t0;\n \n       // dense output handling\n       double hInt = getMaxStep();\n-      if (denseOutput && ! reject) {\n+      if (! reject) {\n \n         // extrapolate state at middle point of the step\n         for (int j = 1; j <= k; ++j) {\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n import org.apache.commons.math.ode.AbstractIntegrator;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.IntegratorException;\n-import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n-import org.apache.commons.math.ode.sampling.DummyStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n \n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n-    AbstractStepInterpolator interpolator;\n-    if (requiresDenseOutput()) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n-    } else {\n-      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);\n-    }\n+    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n+    interpolator.reinitialize(this, yTmp, yDotK, forward);\n     interpolator.storeTime(t0);\n \n     // set up integration control objects\n--- a/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java\n         return LazyHolder.INSTANCE;\n     }\n \n-    /** Determines whether this handler needs dense output.\n-     * Since this handler does nothing, it does not require dense output.\n-     * @return always false\n-     */\n-    public boolean requiresDenseOutput() {\n-        return false;\n-    }\n-\n     /** Reset the step handler.\n      * Initialize the internal data as required before the first step is\n      * handled.\n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java\n \n public interface StepHandler {\n \n-  /** Determines whether this handler needs dense output.\n-   * <p>This method allows the integrator to avoid performing extra\n-   * computation if the handler does not need dense output. If this\n-   * method returns false, the integrator will call the {@link\n-   * #handleStep} method with a {@link DummyStepInterpolator} rather\n-   * than a custom interpolator.</p>\n-   * @return true if the handler needs dense output\n-   */\n-  boolean requiresDenseOutput();\n-\n   /** Reset the step handler.\n    * Initialize the internal data as required before the first step is\n    * handled.\n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n         reset();\n     }\n \n-    /** Determines whether this handler needs dense output.\n-     * This handler needs dense output in order to provide data at\n-     * regularly spaced steps regardless of the steps the integrator\n-     * uses, so this method always returns true.\n-     * @return always true\n-     */\n-    public boolean requiresDenseOutput() {\n-        return true;\n-    }\n-\n     /** Reset the step handler.\n      * Initialize the internal data as required before the first step is\n      * handled.\n--- a/src/test/java/org/apache/commons/math/ode/TestProblemHandler.java\n+++ b/src/test/java/org/apache/commons/math/ode/TestProblemHandler.java\n     this.problem = problem;\n     this.integrator = integrator;\n     reset();\n-  }\n-\n-  public boolean requiresDenseOutput() {\n-    return true;\n   }\n \n   public void reset() {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n       this.pb = pb;\n       reset();\n     }\n-    public boolean requiresDenseOutput() {\n-      return false;\n-    }\n     public void reset() {\n       maxError = 0;\n     }\n                                1.0e-12);\n               }\n           }\n-          public boolean requiresDenseOutput() {\n-              return false;\n-          }\n           public void reset() {\n           }\n       });\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n       this.minStep = minStep;\n     }\n \n-    public boolean requiresDenseOutput() {\n-      return false;\n-    }\n-\n     public void reset() {\n     }\n \n       this.pb = pb;\n       reset();\n     }\n-    public boolean requiresDenseOutput() {\n-      return true;\n-    }\n     public void reset() {\n       nbSteps = 0;\n       maxError = 0;\n       firstTime = true;\n       minStep = 0;\n       maxStep = 0;\n-    }\n-    public boolean requiresDenseOutput() {\n-      return false;\n     }\n     public void reset() {\n       firstTime = true;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n                   }\n               }\n           }\n-          public boolean requiresDenseOutput() {\n-              return true;\n-          }\n           public void reset() {\n           }\n       });\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n import org.apache.commons.math.ode.TestProblem5;\n import org.apache.commons.math.ode.TestProblemHandler;\n import org.apache.commons.math.ode.events.EventHandler;\n-import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;\n-import org.apache.commons.math.ode.sampling.DummyStepHandler;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n   }\n \n   @Test\n-  public void testNoDenseOutput()\n-    throws MathUserException, IntegratorException {\n-    TestProblem1 pb1 = new TestProblem1();\n-    TestProblem1 pb2 = pb1.copy();\n-    double minStep = 0.1 * (pb1.getFinalTime() - pb1.getInitialTime());\n-    double maxStep = pb1.getFinalTime() - pb1.getInitialTime();\n-    double scalAbsoluteTolerance = 1.0e-4;\n-    double scalRelativeTolerance = 1.0e-4;\n-\n-    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n-                                                                scalAbsoluteTolerance,\n-                                                                scalRelativeTolerance);\n-    integ.addStepHandler(DummyStepHandler.getInstance());\n-    integ.integrate(pb1,\n-                    pb1.getInitialTime(), pb1.getInitialState(),\n-                    pb1.getFinalTime(), new double[pb1.getDimension()]);\n-    int callsWithoutDenseOutput = pb1.getCalls();\n-    Assert.assertEquals(integ.getEvaluations(), callsWithoutDenseOutput);\n-\n-    integ.addStepHandler(new InterpolatingStepHandler());\n-    integ.integrate(pb2,\n-                    pb2.getInitialTime(), pb2.getInitialState(),\n-                    pb2.getFinalTime(), new double[pb2.getDimension()]);\n-    int callsWithDenseOutput = pb2.getCalls();\n-    Assert.assertEquals(integ.getEvaluations(), callsWithDenseOutput);\n-\n-    Assert.assertTrue(callsWithDenseOutput > callsWithoutDenseOutput);\n-\n-  }\n-\n-  @Test\n   public void testUnstableDerivative()\n   throws MathUserException, IntegratorException {\n     final StepProblem stepProblem = new StepProblem(0.0, 1.0, 2.0);\n       this.pb = pb;\n       reset();\n     }\n-    public boolean requiresDenseOutput() {\n-      return true;\n-    }\n     public void reset() {\n       nbSteps = 0;\n       maxError = 0;\n   private static class VariableHandler implements StepHandler {\n     public VariableHandler() {\n       reset();\n-    }\n-    public boolean requiresDenseOutput() {\n-      return false;\n     }\n     public void reset() {\n       firstTime = true;\n     private double  maxStep = 0;\n   }\n \n-  private static class InterpolatingStepHandler implements StepHandler {\n-    public boolean requiresDenseOutput() {\n-      return true;\n-    }\n-    public void reset() {\n-    }\n-    public void handleStep(StepInterpolator interpolator,\n-                           boolean isLast)\n-    throws MathUserException {\n-      double prev = interpolator.getPreviousTime();\n-      double curr = interpolator.getCurrentTime();\n-      interpolator.setInterpolatedTime(0.5*(prev + curr));\n-    }\n-  }\n-\n }\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n                 }\n             }\n         }\n-        public boolean requiresDenseOutput() {\n-            return true;\n-        }\n         public void reset() {\n         }\n     });\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java\n                              1.0e-12);\n             }\n         }\n-        public boolean requiresDenseOutput() {\n-            return false;\n-        }\n         public void reset() {\n         }\n       });\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n       this.pb = pb;\n       reset();\n     }\n-    public boolean requiresDenseOutput() {\n-      return false;\n-    }\n     public void reset() {\n       maxError = 0;\n     }\n                                1.0e-12);\n               }\n           }\n-          public boolean requiresDenseOutput() {\n-              return false;\n-          }\n           public void reset() {\n           }\n       });\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.IntegratorException;\n import org.apache.commons.math.ode.TestProblem1;\n     Assert.assertEquals(8.0, y[0], 1.0e-12);\n   }\n \n+  @Test\n+  public void testIssue596() throws MathUserException, IntegratorException {\n+    FirstOrderIntegrator integ = new GraggBulirschStoerIntegrator(1e-10, 100.0, 1e-7, 1e-7);\n+      integ.addStepHandler(new StepHandler() {\n+\n+          public void reset() {}\n+\n+          public void handleStep(StepInterpolator interpolator, boolean isLast) throws MathUserException {\n+              double t = interpolator.getCurrentTime();\n+              interpolator.setInterpolatedTime(t);\n+              double[] y = interpolator.getInterpolatedState();\n+              double[] yDot = interpolator.getInterpolatedDerivatives();\n+              Assert.assertEquals(3.0 * t - 5.0, y[0], 1.0e-14);\n+              Assert.assertEquals(3.0, yDot[0], 1.0e-14);\n+          }\n+      });\n+      double[] y = {4.0};\n+      double t0 = 3.0;\n+      double tend = 10.0;\n+      integ.integrate(new FirstOrderDifferentialEquations() {\n+          public int getDimension() {\n+              return 1;\n+          }\n+\n+          public void computeDerivatives(double t, double[] y, double[] yDot) {\n+              yDot[0] = 3.0;\n+          }\n+      }, t0, y, tend, y);\n+\n+  }\n+\n   private static class KeplerStepHandler implements StepHandler {\n     public KeplerStepHandler(TestProblem3 pb) {\n       this.pb = pb;\n       reset();\n-    }\n-    public boolean requiresDenseOutput() {\n-      return true;\n     }\n     public void reset() {\n       nbSteps = 0;\n   public static class VariableStepHandler implements StepHandler {\n     public VariableStepHandler() {\n       reset();\n-    }\n-    public boolean requiresDenseOutput() {\n-      return false;\n     }\n     public void reset() {\n       firstTime = true;\n \n       if (isLast) {\n         Assert.assertTrue(minStep < 8.2e-3);\n-        Assert.assertTrue(maxStep > 1.7);\n+        Assert.assertTrue(maxStep > 1.5);\n       }\n     }\n     private boolean firstTime;\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n                 }\n             }\n         }\n-        public boolean requiresDenseOutput() {\n-            return true;\n-        }\n         public void reset() {\n         }\n     });\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n                 }\n             }\n         }\n-        public boolean requiresDenseOutput() {\n-            return true;\n-        }\n         public void reset() {\n         }\n     });\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java\n                                1.0e-12);\n               }\n           }\n-          public boolean requiresDenseOutput() {\n-              return false;\n-          }\n           public void reset() {\n           }\n       });\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n       maxError = 0;\n     }\n \n-    public boolean requiresDenseOutput() {\n-      return false;\n-    }\n-\n     public void reset() {\n       maxError = 0;\n     }\n                                1.0e-12);\n               }\n           }\n-          public boolean requiresDenseOutput() {\n-              return false;\n-          }\n           public void reset() {\n           }\n       });\n--- a/src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n                                                    final double threshold)\n         throws MathUserException, IntegratorException {\n         integrator.addStepHandler(new StepHandler() {\n-\n-            public boolean requiresDenseOutput() {\n-                return true;\n-            }\n \n             public void handleStep(StepInterpolator interpolator, boolean isLast)\n                 throws MathUserException {", "timestamp": 1309105608, "metainfo": ""}