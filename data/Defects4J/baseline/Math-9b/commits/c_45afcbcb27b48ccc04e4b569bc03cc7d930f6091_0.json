{"sha": "45afcbcb27b48ccc04e4b569bc03cc7d930f6091", "log": "renamed BracketedSolution into BracketedUnivariateRealSolver and make it extend UnivariateRealSolver.  This will allow specifying directly a sub-category of solvers when needed. It will be used for example by the ODE events detection mechanism, as it will ensure the integrator can automatically go past the event time.  JIRA: MATH-605  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java\n  * may be necessary to guarantee that a solution is returned that does not\n  * under-approximate the solution.</p>\n  *\n- * @see BracketedSolution\n+ * @see BracketedUnivariateRealSolver\n  * @since 3.0\n  * @version $Id$\n  */\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java\n \n /**\n  * Base class for <em>Secant</em> methods that guarantee convergence\n- * by maintaining a {@link BracketedSolution bracketed solution}.\n+ * by maintaining a {@link BracketedUnivariateRealSolver bracketed solution}.\n  *\n  * @since 3.0\n  * @version $Id$\n  */\n public class BaseBracketedSecantSolver extends BaseSecantSolver\n-    implements BracketedSolution {\n+    implements BracketedUnivariateRealSolver {\n     /**\n      * Construct a solver with default accuracy (1e-6).\n      *\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis.solvers;\n+\n+/** Interface for {@link UnivariateRealSolver (univariate real) root-finding\n+ * algorithms} that maintain a bracketed solution. There are several advantages\n+ * to having such root-finding algorithms:\n+ * <ul>\n+ *  <li>The bracketed solution guarantees that the root is kept within the\n+ *      interval. As such, these algorithms generally also guarantee\n+ *      convergence.</li>\n+ *  <li>The bracketed solution means that we have the opportunity to only\n+ *      return roots that are greater than or equal to the actual root, or\n+ *      are less than or equal to the actual root. That is, we can control\n+ *      whether under-approximations and over-approximations are\n+ *      {@link AllowedSolutions allowed solutions}. Other root-finding\n+ *      algorithms can usually only guarantee that the solution (the root that\n+ *      was found) is around the actual root.</li>\n+ * </ul>\n+ *\n+ * <p>For backwards compatibility, all root-finding algorithms must have\n+ * {@link AllowedSolutions#EITHER_SIDE EITHER_SIDE} as default for the allowed\n+ * solutions.</p>\n+ *\n+ * @see AllowedSolutions\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public interface BracketedUnivariateRealSolver extends UnivariateRealSolver {\n+    /** Returns the kind of solutions that the root-finding algorithm may\n+     * accept as solutions.\n+     *\n+     * @return the kind of solutions that the root-finding algorithm may\n+     * accept as solutions\n+     */\n+    AllowedSolutions getAllowedSolutions();\n+\n+    /** Sets the kind of solutions that the root-finding algorithm may accept\n+     * as solutions.\n+     *\n+     * @param allowedSolutions the kind of solutions that the root-finding\n+     * algorithm may accept as solutions\n+     */\n+    void setAllowedSolutions(AllowedSolutions allowedSolutions);\n+}\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n  * root-finding (approximating a zero of a univariate real function). It is a\n  * modified {@link SecantSolver <em>Secant</em>} method. Unlike the\n  * <em>Secant</em> method, convergence is guaranteed by maintaining a\n- * {@link BracketedSolution bracketed solution}.\n+ * bracketed solution.\n  *\n  * <p>The <em>Regula Falsi</em> method assumes that the function is continuous,\n  * but not necessarily smooth.</p>", "timestamp": 1309520368, "metainfo": ""}