{"sha": "b28b68fb727ed7ec71f78753ccfbf9caefd50b76", "log": "* Modified multiple regression newSample methods to ensure that by default in all cases,   regression models are estimated with intercept terms.  Prior to the fix for this issue,    newXSampleData(double[][]), newSampleData(double[], double[][]) and    newSampleData(double[], double[][], double[][]) all required columns of \"1's\"   to be inserted into the x[][] arrays to create a model with an intercept term;   while newSampleData(double[], int, int) created a model including an intercept   term without requiring the unitary column.  All methods have  been changed to   eliminate the need for users to add unitary columns to specify regression models. * Improved javadoc * Improved tests JIRA: MATH-411  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(\"invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}\"),\n     INVALID_ITERATIONS_LIMITS(\"invalid iteration limits: min={0}, max={1}\"),\n     INVALID_MAX_ITERATIONS(\"bad value for maximum iterations number: {0}\"),\n+    INVALID_REGRESSION_ARRAY(\"input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}\"),\n     INVALID_ROUNDING_METHOD(\"invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})\"),\n     ITERATOR_EXHAUSTED(\"iterator exhausted\"),\n     LCM_OVERFLOW_32_BITS(\"overflow: lcm({0}, {1}) is 2^31\"),\n--- a/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java\n     protected RealVector Y;\n \n     /**\n-     * Loads model x and y sample data from a flat array of data, overriding any previous sample.\n-     * Assumes that rows are concatenated with y values first in each row.\n+     * <p>Loads model x and y sample data from a flat input array, overriding any previous sample.\n+     * </p>\n+     * <p>Assumes that rows are concatenated with y values first in each row.  For example, an input\n+     * <code>data</code> array containing the sequence of values (1, 2, 3, 4, 5, 6, 7, 8, 9) with\n+     * <code>nobs = 3</code> and <code>nvars = 2</code> creates a regression dataset with two\n+     * independent variables, as below:\n+     * <pre>\n+     *   y   x[0]  x[1]\n+     *   --------------\n+     *   1     2     3\n+     *   4     5     6\n+     *   7     8     9\n+     * </pre>\n+     * </p>\n+     * <p>Note that there is no need to add an initial unitary column (column of 1's) when\n+     * specifying a model including an intercept term.\n+     * </p>\n+     * <p>Throws IllegalArgumentException if any of the following preconditions fail:\n+     * <ul><li><code>data</code> cannot be null</li>\n+     * <li><code>data.length = nobs * (nvars + 1)</li>\n+     * <li><code>nobs > nvars</code></li></ul>\n+     * </p>\n      *\n      * @param data input data array\n      * @param nobs number of observations (rows)\n      * @param nvars number of independent variables (columns, not counting y)\n+     * @throws IllegalArgumentException if the preconditions are not met\n      */\n     public void newSampleData(double[] data, int nobs, int nvars) {\n+        if (data == null) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    LocalizedFormats.NULL_NOT_ALLOWED);\n+        }\n+        if (data.length != nobs * (nvars + 1)) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    LocalizedFormats.INVALID_REGRESSION_ARRAY, data.length, nobs, nvars);\n+        }\n+        if (nobs <= nvars) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS);\n+        }\n         double[] y = new double[nobs];\n         double[][] x = new double[nobs][nvars + 1];\n         int pointer = 0;\n     }\n \n     /**\n-     * Loads new y sample data, overriding any previous sample\n-     *\n-     * @param y the [n,1] array representing the y sample\n+     * Loads new y sample data, overriding any previous data.\n+     *\n+     * @param y the array representing the y sample\n+     * @throws IllegalArgumentException if y is null or empty\n      */\n     protected void newYSampleData(double[] y) {\n+        if (y == null) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    LocalizedFormats.NULL_NOT_ALLOWED);\n+        }\n+        if (y.length == 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    LocalizedFormats.NO_DATA);\n+        }\n         this.Y = new ArrayRealVector(y);\n     }\n \n     /**\n-     * Loads new x sample data, overriding any previous sample\n-     *\n-     * @param x the [n,k] array representing the x sample\n+     * <p>Loads new x sample data, overriding any previous data.\n+     * </p>\n+     * The input <code>x</code> array should have one row for each sample\n+     * observation, with columns corresponding to independent variables.\n+     * For example, if <pre>\n+     * <code> x = new double[][] {{1, 2}, {3, 4}, {5, 6}} </code></pre>\n+     * then <code>setXSampleData(x) </code> results in a model with two independent\n+     * variables and 3 observations:\n+     * <pre>\n+     *   x[0]  x[1]\n+     *   ----------\n+     *     1    2\n+     *     3    4\n+     *     5    6\n+     * </pre>\n+     * </p>\n+     * <p>Note that there is no need to add an initial unitary column (column of 1's) when\n+     * specifying a model including an intercept term.\n+     * </p>\n+     * @param x the rectangular array representing the x sample\n+     * @throws IllegalArgumentException if x is null, empty or not rectangular\n      */\n     protected void newXSampleData(double[][] x) {\n-        this.X = new Array2DRowRealMatrix(x);\n-    }\n-\n-    /**\n-     * Validates sample data.\n-     *\n-     * @param x the [n,k] array representing the x sample\n-     * @param y the [n,1] array representing the y sample\n-     * @throws IllegalArgumentException if the x and y array data are not\n-     *             compatible for the regression\n+        if (x == null) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    LocalizedFormats.NULL_NOT_ALLOWED);\n+        }\n+        if (x.length == 0) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    LocalizedFormats.NO_DATA);\n+        }\n+        final int nVars = x[0].length;\n+        final double[][] xAug = new double[x.length][nVars + 1];\n+        for (int i = 0; i < x.length; i++) {\n+            if (x[i].length != nVars) {\n+                throw MathRuntimeException.createIllegalArgumentException(\n+                        LocalizedFormats.DIFFERENT_ROWS_LENGTHS,\n+                        x[i].length, nVars);\n+            }\n+            xAug[i][0] = 1.0d;\n+            System.arraycopy(x[i], 0, xAug[i], 1, nVars);\n+        }\n+        this.X = new Array2DRowRealMatrix(xAug, false);\n+    }\n+\n+    /**\n+     * Validates sample data.  Checks that\n+     * <ul><li>Neither x nor y is null or empty;</li>\n+     * <li>The length (i.e. number of rows) of x equals the length of y</li>\n+     * <li>x has at least one more row than it has columns (i.e. there is\n+     * sufficient data to estimate regression coefficients for each of the\n+     * columns in x plus an intercept.</li>\n+     * </ul>\n+     *\n+     * @param x the [n,k] array representing the x data\n+     * @param y the [n,1] array representing the y data\n+     * @throws IllegalArgumentException if any of the checks fail\n+     *\n      */\n     protected void validateSampleData(double[][] x, double[] y) {\n         if ((x == null) || (y == null) || (x.length != y.length)) {\n                   LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,\n                   (x == null) ? 0 : x.length,\n                   (y == null) ? 0 : y.length);\n-        } else if ((x.length > 0) && (x[0].length > x.length)) {\n+        }\n+        if (x.length == 0) {  // Must be no y data either\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    LocalizedFormats.NO_DATA);\n+        }\n+        if (x[0].length + 1 > x.length) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS,\n                   x.length, x[0].length);\n     }\n \n     /**\n-     * Validates sample data.\n+     * Validates that the x data and covariance matrix have the same\n+     * number of rows and that the covariance matrix is square.\n      *\n      * @param x the [n,k] array representing the x sample\n      * @param covariance the [n,n] array representing the covariance matrix\n-     * @throws IllegalArgumentException if the x sample data or covariance\n-     *             matrix are not compatible for the regression\n+     * @throws IllegalArgumentException if the number of rows in x is not equal\n+     * to the number of rows in covariance or covariance is not square.\n      */\n     protected void validateCovarianceData(double[][] x, double[][] covariance) {\n         if (x.length != covariance.length) {\n--- a/src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n+++ b/src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java\n \n     /**\n      * {@inheritDoc}\n-     *\n-     * Computes and caches QR decomposition of the X matrix\n+     * <p>This implementation computes and caches the QR decomposition of the X matrix.</p>\n      */\n     @Override\n     public void newSampleData(double[] data, int nobs, int nvars) {\n     }\n \n     /**\n-     * Returns the sum of square residuals.\n+     * Returns the sum of squared residuals.\n      *\n      * @return residual sum of squares\n      */\n         final double n = X.getRowDimension();\n         return 1 - (calculateResidualSumOfSquares() * (n - 1)) /\n             (calculateTotalSumOfSquares() * (n - X.getColumnDimension()));\n-       // return 1 - ((1 - calculateRSquare()) * (n - 1) / (n - X.getColumnDimension() - 1));\n-    }\n-\n-    /**\n-     * Loads new x sample data, overriding any previous sample\n-     *\n-     * @param x the [n,k] array representing the x sample\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * <p>This implementation computes and caches the QR decomposition of the X matrix once it is successfully loaded.</p>\n      */\n     @Override\n     protected void newXSampleData(double[][] x) {\n-        this.X = new Array2DRowRealMatrix(x);\n+        super.newXSampleData(x);\n         qr = new QRDecompositionImpl(X);\n     }\n \n     /**\n-     * Calculates regression coefficients using OLS.\n+     * Calculates the regression coefficients using OLS.\n      *\n      * @return beta\n      */\n--- a/src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java\n  */\n package org.apache.commons.math.stat.regression;\n \n+import static org.junit.Assert.assertEquals;\n import org.junit.Before;\n import org.junit.Test;\n import org.apache.commons.math.TestUtils;\n-import org.apache.commons.math.stat.StatUtils;\n+import org.apache.commons.math.linear.MatrixUtils;\n+import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.linear.RealVector;\n \n public class GLSMultipleLinearRegressionTest extends MultipleLinearRegressionAbstractTest {\n \n     public void setUp(){\n         y = new double[]{11.0, 12.0, 13.0, 14.0, 15.0, 16.0};\n         x = new double[6][];\n-        x[0] = new double[]{1.0, 0, 0, 0, 0, 0};\n-        x[1] = new double[]{1.0, 2.0, 0, 0, 0, 0};\n-        x[2] = new double[]{1.0, 0, 3.0, 0, 0, 0};\n-        x[3] = new double[]{1.0, 0, 0, 4.0, 0, 0};\n-        x[4] = new double[]{1.0, 0, 0, 0, 5.0, 0};\n-        x[5] = new double[]{1.0, 0, 0, 0, 0, 6.0};\n+        x[0] = new double[]{0, 0, 0, 0, 0};\n+        x[1] = new double[]{2.0, 0, 0, 0, 0};\n+        x[2] = new double[]{0, 3.0, 0, 0, 0};\n+        x[3] = new double[]{0, 0, 4.0, 0, 0};\n+        x[4] = new double[]{0, 0, 0, 5.0, 0};\n+        x[5] = new double[]{0, 0, 0, 0, 6.0};\n         omega = new double[6][];\n         omega[0] = new double[]{1.0, 0, 0, 0, 0, 0};\n         omega[1] = new double[]{0, 2.0, 0, 0, 0, 0};\n \n     @Override\n     protected int getNumberOfRegressors() {\n-        return x[0].length;\n+        return x[0].length + 1;\n     }\n \n     @Override\n         model.newSampleData(y, x, omega);\n         TestUtils.assertEquals(model.calculateYVariance(), 3.5, 0);\n     }\n+    \n+    /**\n+     * Verifies that setting X, Y and covariance separately has the same effect as newSample(X,Y,cov).\n+     */\n+    @Test\n+    public void testNewSample2() throws Exception {\n+        double[] y = new double[] {1, 2, 3, 4}; \n+        double[][] x = new double[][] {\n+          {19, 22, 33},\n+          {20, 30, 40},\n+          {25, 35, 45},\n+          {27, 37, 47}   \n+        };\n+        double[][] covariance = MatrixUtils.createRealIdentityMatrix(4).scalarMultiply(2).getData();\n+        GLSMultipleLinearRegression regression = new GLSMultipleLinearRegression();\n+        regression.newSampleData(y, x, covariance);\n+        RealMatrix combinedX = regression.X.copy();\n+        RealVector combinedY = regression.Y.copy();\n+        RealMatrix combinedCovInv = regression.getOmegaInverse();\n+        regression.newXSampleData(x);\n+        regression.newYSampleData(y);\n+        assertEquals(combinedX, regression.X);\n+        assertEquals(combinedY, regression.Y);\n+        assertEquals(combinedCovInv, regression.getOmegaInverse());\n+    }\n+    \n+    /**\n+     * Verifies that GLS with identity covariance matrix gives the same results\n+     * as OLS.\n+     */\n+    @Test\n+    public void testGLSOLSConsistency() throws Exception {\n+        // Use Longley data to test\n+        double[] design = new double[] {\n+                60323,83.0,234289,2356,1590,107608,1947,\n+                61122,88.5,259426,2325,1456,108632,1948,\n+                60171,88.2,258054,3682,1616,109773,1949,\n+                61187,89.5,284599,3351,1650,110929,1950,\n+                63221,96.2,328975,2099,3099,112075,1951,\n+                63639,98.1,346999,1932,3594,113270,1952,\n+                64989,99.0,365385,1870,3547,115094,1953,\n+                63761,100.0,363112,3578,3350,116219,1954,\n+                66019,101.2,397469,2904,3048,117388,1955,\n+                67857,104.6,419180,2822,2857,118734,1956,\n+                68169,108.4,442769,2936,2798,120445,1957,\n+                66513,110.8,444546,4681,2637,121950,1958,\n+                68655,112.6,482704,3813,2552,123366,1959,\n+                69564,114.2,502601,3931,2514,125368,1960,\n+                69331,115.7,518173,4806,2572,127852,1961,\n+                70551,116.9,554894,4007,2827,130081,1962\n+            };\n+        RealMatrix identityCov = MatrixUtils.createRealIdentityMatrix(16);\n+        GLSMultipleLinearRegression glsModel = new GLSMultipleLinearRegression();\n+        OLSMultipleLinearRegression olsModel = new OLSMultipleLinearRegression();\n+        glsModel.newSampleData(design, 16, 6);\n+        olsModel.newSampleData(design, 16, 6);\n+        glsModel.newCovarianceData(identityCov.getData());\n+        double[] olsBeta = olsModel.calculateBeta().getData();\n+        double[] glsBeta = glsModel.calculateBeta().getData();\n+        // TODO:  Should have assertRelativelyEquals(double[], double[], eps) in TestUtils\n+        //        Should also add RealVector and RealMatrix versions\n+        for (int i = 0; i < olsBeta.length; i++) {\n+            TestUtils.assertRelativelyEquals(olsBeta[i], glsBeta[i], 10E-7);\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java\n  */\n package org.apache.commons.math.stat.regression;\n \n+import org.apache.commons.math.linear.RealMatrix;\n+import org.apache.commons.math.linear.RealVector;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n \n public abstract class MultipleLinearRegressionAbstractTest {\n \n-    protected MultipleLinearRegression regression;\n+    protected AbstractMultipleLinearRegression regression;\n \n     @Before\n     public void setUp(){\n         regression = createRegression();\n     }\n \n-    protected abstract MultipleLinearRegression createRegression();\n+    protected abstract AbstractMultipleLinearRegression createRegression();\n \n     protected abstract int getNumberOfRegressors();\n \n             assertTrue(variance > 0.0);\n         }\n     }\n+    \n+    /**\n+     * Verifies that newSampleData methods consistently insert unitary columns\n+     * in design matrix.  Confirms the fix for MATH-411.\n+     */\n+    @Test\n+    public void testNewSample() throws Exception {\n+        double[] design = new double[] {\n+          1, 19, 22, 33,\n+          2, 20, 30, 40,\n+          3, 25, 35, 45,\n+          4, 27, 37, 47\n+        };\n+        double[] y = new double[] {1, 2, 3, 4}; \n+        double[][] x = new double[][] {\n+          {19, 22, 33},\n+          {20, 30, 40},\n+          {25, 35, 45},\n+          {27, 37, 47}   \n+        };\n+        AbstractMultipleLinearRegression regression = (AbstractMultipleLinearRegression) createRegression();\n+        regression.newSampleData(design, 4, 3);\n+        RealMatrix flatX = regression.X.copy();\n+        RealVector flatY = regression.Y.copy();\n+        regression.newXSampleData(x);\n+        regression.newYSampleData(y);\n+        assertEquals(flatX, regression.X);\n+        assertEquals(flatY, regression.Y);\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNewSampleNullData() throws Exception {\n+        double[] data = null;\n+        createRegression().newSampleData(data, 2, 3); \n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNewSampleInvalidData() throws Exception {\n+        double[] data = new double[] {1, 2, 3, 4};\n+        createRegression().newSampleData(data, 2, 3);\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNewSampleInsufficientData() throws Exception {\n+        double[] data = new double[] {1, 2, 3, 4};\n+        createRegression().newSampleData(data, 1, 3);\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void testXSampleDataNull() {\n+        createRegression().newXSampleData(null);\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void testYSampleDataNull() {\n+        createRegression().newYSampleData(null);\n+    }\n \n }\n--- a/src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java\n import org.apache.commons.math.linear.MatrixVisitorException;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math.linear.RealVector;\n import org.apache.commons.math.stat.StatUtils;\n import org.junit.Before;\n import org.junit.Test;\n     public void setUp(){\n         y = new double[]{11.0, 12.0, 13.0, 14.0, 15.0, 16.0};\n         x = new double[6][];\n-        x[0] = new double[]{1.0, 0, 0, 0, 0, 0};\n-        x[1] = new double[]{1.0, 2.0, 0, 0, 0, 0};\n-        x[2] = new double[]{1.0, 0, 3.0, 0, 0, 0};\n-        x[3] = new double[]{1.0, 0, 0, 4.0, 0, 0};\n-        x[4] = new double[]{1.0, 0, 0, 0, 5.0, 0};\n-        x[5] = new double[]{1.0, 0, 0, 0, 0, 6.0};\n+        x[0] = new double[]{0, 0, 0, 0, 0};\n+        x[1] = new double[]{2.0, 0, 0, 0, 0};\n+        x[2] = new double[]{0, 3.0, 0, 0, 0};\n+        x[3] = new double[]{0, 0, 4.0, 0, 0};\n+        x[4] = new double[]{0, 0, 0, 5.0, 0};\n+        x[5] = new double[]{0, 0, 0, 0, 6.0};\n         super.setUp();\n     }\n \n \n     @Override\n     protected int getNumberOfRegressors() {\n-        return x[0].length;\n+        return x[0].length + 1;\n     }\n \n     @Override\n     protected int getSampleSize() {\n         return y.length;\n     }\n-\n-    @Test(expected=IllegalArgumentException.class)\n-    public void cannotAddXSampleData() {\n-        createRegression().newSampleData(new double[]{}, null);\n-    }\n-\n-    @Test(expected=IllegalArgumentException.class)\n-    public void cannotAddNullYSampleData() {\n-        createRegression().newSampleData(null, new double[][]{});\n-    }\n-\n+    \n     @Test(expected=IllegalArgumentException.class)\n     public void cannotAddSampleDataWithSizeMismatch() {\n         double[] y = new double[]{1.0, 2.0};\n             44.7,46.6,16,29,50.43,\n             42.8,27.7,22,29,58.33\n         };\n-\n-        // Transform to Y and X required by interface\n-        int nobs = 47;\n-        int nvars = 4;\n+        \n+        final int nobs = 47;\n+        final int nvars = 4;\n \n         // Estimate the model\n         OLSMultipleLinearRegression model = new OLSMultipleLinearRegression();\n         model.newSampleData(design, nobs, nvars);\n \n         // Check expected beta values from R\n-        double[] betaHat = model.estimateRegressionParameters();\n+        final double[] betaHat = model.estimateRegressionParameters();\n         TestUtils.assertEquals(betaHat,\n                 new double[]{91.05542390271397,\n                 -0.22064551045715,\n                  0.12441843147162}, 1E-12);\n \n         // Check expected residuals from R\n-        double[] residuals = model.estimateResiduals();\n+        final double[] residuals = model.estimateResiduals();\n         TestUtils.assertEquals(residuals, new double[]{\n                 7.1044267859730512,1.6580347433531366,\n                 4.6944952770029644,8.4548022690166160,13.6547432343186212,\n                 1E-12);\n \n         // Check standard errors from R\n-        double[] errors = model.estimateRegressionParametersStandardErrors();\n+        final double[] errors = model.estimateRegressionParametersStandardErrors();\n         TestUtils.assertEquals(new double[] {6.94881329475087,\n                 0.07360008972340,\n                 0.27410957467466,\n                 model.calculateErrorVariance() * (X.getRowDimension() - X.getColumnDimension()), 1E-20);\n         \n     }\n+    \n+    /**\n+     * Verifies that setting X and Y separately has the same effect as newSample(X,Y).\n+     */\n+    @Test\n+    public void testNewSample2() throws Exception {\n+        double[] y = new double[] {1, 2, 3, 4}; \n+        double[][] x = new double[][] {\n+          {19, 22, 33},\n+          {20, 30, 40},\n+          {25, 35, 45},\n+          {27, 37, 47}   \n+        };\n+        OLSMultipleLinearRegression regression = new OLSMultipleLinearRegression();\n+        regression.newSampleData(y, x);\n+        RealMatrix combinedX = regression.X.copy();\n+        RealVector combinedY = regression.Y.copy();\n+        regression.newXSampleData(x);\n+        regression.newYSampleData(y);\n+        assertEquals(combinedX, regression.X);\n+        assertEquals(combinedY, regression.Y);\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNewSampleDataYNull() {\n+        createRegression().newSampleData(null, new double[][] {});\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNewSampleDataXNull() {\n+        createRegression().newSampleData(new double[] {}, null);\n+    }\n }", "timestamp": 1283909091, "metainfo": ""}