{"sha": "3436cec71a215ce91d42e9a180d744d45a82f732", "log": "Added a consistency check for number of points with respect to the number of clusters in Kmeans++ clustering   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n import java.util.Random;\n \n import org.apache.commons.math.exception.ConvergenceException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n+import org.apache.commons.math.exception.NullArgumentException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.stat.descriptive.moment.Variance;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.\n      * @param maxIterations the maximum number of iterations to run the algorithm\n      *     for.  If negative, no maximum will be used\n      * @return a list of clusters containing the points\n-     */\n-    public List<Cluster<T>> cluster(final Collection<T> points,\n-                                    final int k, final int maxIterations) {\n+     * @throws MathIllegalArgumentException if the data points are null or the number\n+     *     of clusters is larger than the number of data points\n+     */\n+    public List<Cluster<T>> cluster(final Collection<T> points, final int k,\n+                                    final int maxIterations)\n+        throws MathIllegalArgumentException {\n+\n+        // sanity checks\n+        MathUtils.checkNotNull(points);\n+        \n+        // number of clusters has to be smaller or equal the number of data points\n+        if (points.size() < k) {\n+            throw new NumberIsTooSmallException(points.size(), k, false);\n+        }\n+        \n         // create the initial clusters\n         List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n         assignPointsToClusters(clusters, points);\n--- a/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java\n+++ b/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java\n import java.util.List;\n import java.util.Random;\n \n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.junit.Assert;\n import org.junit.Test;\n \n         }\n         Assert.assertTrue(uniquePointIsCenter);\n     }\n+    \n+    /**\n+     * 2 variables cannot be clustered into 3 clusters. See issue MATH-436.\n+     */\n+    @Test(expected=NumberIsTooSmallException.class)\n+    public void testPerformClusterAnalysisToManyClusters() {\n+        KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = \n+            new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(\n+                    new Random(1746432956321l));\n+        \n+        EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {\n+            new EuclideanIntegerPoint(new int[] {\n+                1959, 325100\n+            }), new EuclideanIntegerPoint(new int[] {\n+                1960, 373200\n+            })\n+        };\n+        \n+        transformer.cluster(Arrays.asList(points), 3, 1);\n+\n+    }\n+\n }", "timestamp": 1300886363, "metainfo": ""}