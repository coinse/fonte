{"sha": "da7c8ca0497a63c6354d12b0ab9cffcf3c78f90e", "log": "BigFraction.divide(BigFraction) now throws MathArithmeticException (see MATH-755).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/fraction/BigFraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/BigFraction.java\n import java.math.BigInteger;\n \n import org.apache.commons.math3.FieldElement;\n+import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.ZeroException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n+import org.apache.commons.math3.util.ArithmeticUtils;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.MathUtils;\n-import org.apache.commons.math3.util.ArithmeticUtils;\n \n /**\n  * Representation of a rational number without any overflow. This class is\n \n     /**\n      * <p>\n-     * Divide the value of this fraction by the passed <code>BigInteger</code>,\n-     * ie \"this * 1 / bg\", returning the result in reduced form.\n-     * </p>\n-     *\n-     * @param bg\n-     *            the <code>BigInteger</code> to divide by, must not be\n-     *            <code>null</code>.\n-     * @return a {@link BigFraction} instance with the resulting values.\n-     * @throws NullArgumentException if the {@code BigInteger} is {@code null}.\n-     * @throws ZeroException\n-     *             if the fraction to divide by is zero.\n+     * Divide the value of this fraction by the passed {@code BigInteger},\n+     * ie {@code this * 1 / bg}, returning the result in reduced form.\n+     * </p>\n+     *\n+     * @param bg the {@code BigInteger} to divide by, must not be {@code null}\n+     * @return a {@link BigFraction} instance with the resulting values\n+     * @throws NullArgumentException if the {@code BigInteger} is {@code null}\n+     * @throws MathArithmeticException if the fraction to divide by is zero\n      */\n     public BigFraction divide(final BigInteger bg) {\n+        if (bg == null) {\n+            throw new NullArgumentException(LocalizedFormats.FRACTION);\n+        }\n         if (BigInteger.ZERO.equals(bg)) {\n-            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);\n         }\n         return new BigFraction(numerator, denominator.multiply(bg));\n     }\n \n     /**\n      * <p>\n-     * Divide the value of this fraction by the passed <tt>int</tt>, ie\n-     * \"this * 1 / i\", returning the result in reduced form.\n-     * </p>\n-     *\n-     * @param i\n-     *            the <tt>int</tt> to divide by.\n-     * @return a {@link BigFraction} instance with the resulting values.\n-     * @throws ArithmeticException\n-     *             if the fraction to divide by is zero.\n+     * Divide the value of this fraction by the passed {@code int}, ie\n+     * {@code this * 1 / i}, returning the result in reduced form.\n+     * </p>\n+     *\n+     * @param i the {@code int} to divide by\n+     * @return a {@link BigFraction} instance with the resulting values\n+     * @throws MathArithmeticException if the fraction to divide by is zero\n      */\n     public BigFraction divide(final int i) {\n         return divide(BigInteger.valueOf(i));\n \n     /**\n      * <p>\n-     * Divide the value of this fraction by the passed <tt>long</tt>, ie\n-     * \"this * 1 / l\", returning the result in reduced form.\n-     * </p>\n-     *\n-     * @param l\n-     *            the <tt>long</tt> to divide by.\n-     * @return a {@link BigFraction} instance with the resulting values.\n-     * @throws ArithmeticException\n-     *             if the fraction to divide by is zero.\n+     * Divide the value of this fraction by the passed {@code long}, ie\n+     * {@code this * 1 / l}, returning the result in reduced form.\n+     * </p>\n+     *\n+     * @param l the {@code long} to divide by\n+     * @return a {@link BigFraction} instance with the resulting values\n+     * @throws MathArithmeticException if the fraction to divide by is zero\n      */\n     public BigFraction divide(final long l) {\n         return divide(BigInteger.valueOf(l));\n      * @param fraction Fraction to divide by, must not be {@code null}.\n      * @return a {@link BigFraction} instance with the resulting values.\n      * @throws NullArgumentException if the {@code fraction} is {@code null}.\n-     * @throws ZeroException if the fraction to divide by is zero.\n+     * @throws MathArithmeticException if the fraction to divide by is zero\n      */\n     public BigFraction divide(final BigFraction fraction) {\n         if (fraction == null) {\n             throw new NullArgumentException(LocalizedFormats.FRACTION);\n         }\n         if (BigInteger.ZERO.equals(fraction.numerator)) {\n-            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);\n         }\n \n         return multiply(fraction.reciprocal());\n--- a/src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java\n+++ b/src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java\n \n import org.apache.commons.math3.TestUtils;\n import org.apache.commons.math3.exception.ConvergenceException;\n+import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.ZeroException;\n import org.apache.commons.math3.util.FastMath;\n         BigFraction f2 = BigFraction.ZERO;\n         try {\n             f1.divide(f2);\n-            Assert.fail(\"expecting ArithmeticException\");\n-        } catch (ZeroException ex) {\n+            Assert.fail(\"expecting MathArithmeticException\");\n+        } catch (MathArithmeticException ex) {\n         }\n \n         f1 = new BigFraction(0, 5);", "timestamp": 1330317525, "metainfo": ""}