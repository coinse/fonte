{"sha": "a3d1443fe8da8fc379d73c2ce848b352b12175d9", "log": "Added tests for StatisticalSummaryValues.   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/univariate/StatisticalSummaryValuesTest.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.stat.univariate;\n+\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.math.TestUtils;\n+/**\n+ * Test cases for the {@link StatisticalSummaryValues} class.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2004/06/29 02:21:33 $\n+ */\n+\n+public final class StatisticalSummaryValuesTest extends TestCase {\n+    \n+    \n+    public StatisticalSummaryValuesTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {  \n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StatisticalSummaryValuesTest.class);\n+        suite.setName(\"StatisticalSummaryValues Tests\");\n+        return suite;\n+    }\n+      \n+    public void testSerialization() {\n+        StatisticalSummaryValues u = new StatisticalSummaryValues(1, 2, 3, 4, 5, 6);\n+        TestUtils.checkSerializedEquality(u); \n+        StatisticalSummaryValues t = (StatisticalSummaryValues) TestUtils.serializeAndRecover(u);\n+        verifyEquality(u, t);\n+    }\n+    \n+    public void testEqualsAndHashCode() {\n+        StatisticalSummaryValues u  = new StatisticalSummaryValues(1, 2, 3, 4, 5, 6);\n+        StatisticalSummaryValues t = null;\n+        int emptyHash = u.hashCode();\n+        assertTrue(\"reflexive\", u.equals(u));\n+        assertFalse(\"non-null compared to null\", u.equals(t));\n+        assertFalse(\"wrong type\", u.equals(new Double(0)));\n+        t = new StatisticalSummaryValues(1, 2, 3, 4, 5, 6);\n+        assertTrue(\"instances with same data should be equal\", t.equals(u));\n+        assertEquals(\"hash code\", u.hashCode(), t.hashCode());\n+        \n+        u = new StatisticalSummaryValues(Double.NaN, 2, 3, 4, 5, 6);\n+        t = new StatisticalSummaryValues(1, Double.NaN, 3, 4, 5, 6);\n+        assertFalse(\"instances based on different data should be different\", \n+                (u.equals(t) ||t.equals(u)));\n+    }\n+    \n+    private void verifyEquality(StatisticalSummaryValues s, StatisticalSummaryValues u) {\n+        assertEquals(\"N\",s.getN(),u.getN());\n+        TestUtils.assertEquals(\"sum\",s.getSum(),u.getSum(), 0);\n+        TestUtils.assertEquals(\"var\",s.getVariance(),u.getVariance(), 0);\n+        TestUtils.assertEquals(\"std\",s.getStandardDeviation(),u.getStandardDeviation(), 0);\n+        TestUtils.assertEquals(\"mean\",s.getMean(),u.getMean(), 0);\n+        TestUtils.assertEquals(\"min\",s.getMin(),u.getMin(), 0);\n+        TestUtils.assertEquals(\"max\",s.getMax(),u.getMax(), 0);   \n+    }\n+}", "timestamp": 1088475693, "metainfo": ""}