{"sha": "eb7bc0170eb129f6225dcb6ef696f530a5d8b23c", "log": "Adding corrected two-pass algorithm for variance calculation.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/StatUtils.java\n+++ b/src/java/org/apache/commons/math/stat/StatUtils.java\n     }\n     \n \t/**\n-     * Returns the variance of the available values.\n+     * Returns the variance of the available values. This uses a corrected\n+     * two pass algorithm of the following \n+     * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n+     * corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>\n+     * \"Algorithms for Computing the Sample Variance: Analysis and\n+     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n+     * 1983, American Statistician, vol. 37, pp. 242?247.\n+     * \n      * @param values Is a double[] containing the values\n      * @return the result, Double.NaN if no values for an empty array \n      * or 0.0 for a single value set.  \n \t\t} else if (values.length > 1) {\n \t\t\tdouble mean = mean(values);\n \t\t\tdouble accum = 0.0;\n+            double accum2 = 0.0;\n \t\t\tfor (int i = 0; i < values.length; i++) {\n \t\t\t\taccum += Math.pow((values[i] - mean), 2.0);\n+                accum2 += (values[i] - mean);\n \t\t\t}\n-\t\t\tvariance = accum / (double)(values.length - 1);\n+\t\t\tvariance = (accum - (Math.pow(accum2,2)/(double)values.length)) / (double)(values.length - 1);\n \t\t}\n \t\treturn variance;\n \t}", "timestamp": 1055905288, "metainfo": ""}