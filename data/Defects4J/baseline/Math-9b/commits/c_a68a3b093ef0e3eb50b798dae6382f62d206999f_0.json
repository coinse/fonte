{"sha": "a68a3b093ef0e3eb50b798dae6382f62d206999f", "log": "add tests for Gauss-Newton estimator  ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.estimation;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+\n+import org.apache.commons.math.estimation.EstimatedParameter;\n+import org.apache.commons.math.estimation.EstimationException;\n+import org.apache.commons.math.estimation.EstimationProblem;\n+import org.apache.commons.math.estimation.GaussNewtonEstimator;\n+import org.apache.commons.math.estimation.WeightedMeasurement;\n+\n+import junit.framework.*;\n+\n+/**\n+ * <p>Some of the unit tests are re-implementations of the MINPACK <a\n+ * href=\"http://www.netlib.org/minpack/ex/file17\">file17</a> and <a\n+ * href=\"http://www.netlib.org/minpack/ex/file22\">file22</a> test files. \n+ * The redistribution policy for MINPACK is available <a\n+ * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for\n+ * convenience, it is reproduced below.</p>\n+\n+ * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n+ * <tr><td>\n+ *    Minpack Copyright Notice (1999) University of Chicago.\n+ *    All rights reserved\n+ * </td></tr>\n+ * <tr><td>\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * <ol>\n+ *  <li>Redistributions of source code must retain the above copyright\n+ *      notice, this list of conditions and the following disclaimer.</li>\n+ * <li>Redistributions in binary form must reproduce the above\n+ *     copyright notice, this list of conditions and the following\n+ *     disclaimer in the documentation and/or other materials provided\n+ *     with the distribution.</li>\n+ * <li>The end-user documentation included with the redistribution, if any,\n+ *     must include the following acknowledgment:\n+ *     <code>This product includes software developed by the University of\n+ *           Chicago, as Operator of Argonne National Laboratory.</code>\n+ *     Alternately, this acknowledgment may appear in the software itself,\n+ *     if and wherever such third-party acknowledgments normally appear.</li>\n+ * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n+ *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n+ *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n+ *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n+ *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n+ *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n+ *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n+ *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n+ *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n+ *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n+ *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n+ *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n+ *     BE CORRECTED.</strong></li>\n+ * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n+ *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n+ *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n+ *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n+ *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n+ *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n+ *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n+ *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n+ *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n+ *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n+ * <ol></td></tr>\n+ * </table>\n+\n+ * @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)\n+ * @author Burton S. Garbow (original fortran minpack tests)\n+ * @author Kenneth E. Hillstrom (original fortran minpack tests)\n+ * @author Jorge J. More (original fortran minpack tests)\n+ * @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)\n+ */\n+public class GaussNewtonEstimatorTest\n+  extends TestCase {\n+\n+  public GaussNewtonEstimatorTest(String name) {\n+    super(name);\n+  }\n+\n+  public void testTrivial() throws EstimationException {\n+    LinearProblem problem =\n+      new LinearProblem(new LinearMeasurement[] {\n+        new LinearMeasurement(new double[] {2},\n+                              new EstimatedParameter[] {\n+                                 new EstimatedParameter(\"p0\", 0)\n+                              }, 3.0)\n+      });\n+    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+    estimator.estimate(problem);\n+    assertEquals(0, estimator.getRMS(problem), 1.0e-10);\n+    assertEquals(1.5,\n+                 problem.getUnboundParameters()[0].getEstimate(),\n+                 1.0e-10);\n+   }\n+\n+  public void testQRColumnsPermutation() throws EstimationException {\n+\n+    EstimatedParameter[] x = {\n+       new EstimatedParameter(\"p0\", 0), new EstimatedParameter(\"p1\", 0)\n+    };\n+    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n+      new LinearMeasurement(new double[] { 1.0, -1.0 },\n+                            new EstimatedParameter[] { x[0], x[1] },\n+                            4.0),\n+      new LinearMeasurement(new double[] { 2.0 },\n+                            new EstimatedParameter[] { x[1] },\n+                            6.0),\n+      new LinearMeasurement(new double[] { 1.0, -2.0 },\n+                            new EstimatedParameter[] { x[0], x[1] },\n+                            1.0)\n+    });\n+\n+    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+    estimator.estimate(problem);\n+    assertEquals(0, estimator.getRMS(problem), 1.0e-10);\n+    assertEquals(7.0, x[0].getEstimate(), 1.0e-10);\n+    assertEquals(3.0, x[1].getEstimate(), 1.0e-10);\n+\n+  }\n+\n+  public void testNoDependency() throws EstimationException {\n+    EstimatedParameter[] p = new EstimatedParameter[] {\n+      new EstimatedParameter(\"p0\", 0),\n+      new EstimatedParameter(\"p1\", 0),\n+      new EstimatedParameter(\"p2\", 0),\n+      new EstimatedParameter(\"p3\", 0),\n+      new EstimatedParameter(\"p4\", 0),\n+      new EstimatedParameter(\"p5\", 0)\n+    };\n+    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n+      new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[0] }, 0.0),\n+      new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[1] }, 1.1),\n+      new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[2] }, 2.2),\n+      new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[3] }, 3.3),\n+      new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[4] }, 4.4),\n+      new LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[5] }, 5.5)\n+    });\n+  GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+  estimator.estimate(problem);\n+  assertEquals(0, estimator.getRMS(problem), 1.0e-10);\n+  for (int i = 0; i < p.length; ++i) {\n+    assertEquals(0.55 * i, p[i].getEstimate(), 1.0e-10);\n+  }\n+}\n+\n+  public void testOneSet() throws EstimationException {\n+\n+    EstimatedParameter[] p = {\n+       new EstimatedParameter(\"p0\", 0),\n+       new EstimatedParameter(\"p1\", 0),\n+       new EstimatedParameter(\"p2\", 0)\n+    };\n+    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n+      new LinearMeasurement(new double[] { 1.0 },\n+                            new EstimatedParameter[] { p[0] },\n+                            1.0),\n+      new LinearMeasurement(new double[] { -1.0, 1.0 },\n+                            new EstimatedParameter[] { p[0], p[1] },\n+                            1.0),\n+      new LinearMeasurement(new double[] { -1.0, 1.0 },\n+                            new EstimatedParameter[] { p[1], p[2] },\n+                            1.0)\n+    });\n+\n+    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+    estimator.estimate(problem);\n+    assertEquals(0, estimator.getRMS(problem), 1.0e-10);\n+    assertEquals(1.0, p[0].getEstimate(), 1.0e-10);\n+    assertEquals(2.0, p[1].getEstimate(), 1.0e-10);\n+    assertEquals(3.0, p[2].getEstimate(), 1.0e-10);\n+\n+  }\n+\n+  public void testTwoSets() throws EstimationException {\n+    EstimatedParameter[] p = {\n+      new EstimatedParameter(\"p0\", 0),\n+      new EstimatedParameter(\"p1\", 1),\n+      new EstimatedParameter(\"p2\", 2),\n+      new EstimatedParameter(\"p3\", 3),\n+      new EstimatedParameter(\"p4\", 4),\n+      new EstimatedParameter(\"p5\", 5)\n+    };\n+\n+    double epsilon = 1.0e-7;\n+    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n+\n+      // 4 elements sub-problem\n+      new LinearMeasurement(new double[] {  2.0,  1.0,  4.0 },\n+                            new EstimatedParameter[] { p[0], p[1], p[3] },\n+                            2.0),\n+      new LinearMeasurement(new double[] { -4.0, -2.0,   3.0, -7.0 },\n+                           new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n+                           -9.0),\n+      new LinearMeasurement(new double[] {  4.0,  1.0,  -2.0,  8.0 },\n+                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n+                            2.0),\n+      new LinearMeasurement(new double[] { -3.0, -12.0, -1.0 },\n+                           new EstimatedParameter[] { p[1], p[2], p[3] },\n+                           2.0),\n+\n+      // 2 elements sub-problem\n+      new LinearMeasurement(new double[] { epsilon, 1.0 },\n+                            new EstimatedParameter[] { p[4], p[5] },\n+                            1.0 + epsilon * epsilon),\n+      new LinearMeasurement(new double[] {  1.0, 1.0 },\n+                            new EstimatedParameter[] { p[4], p[5] },\n+                            2.0)\n+\n+    });\n+\n+    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+    estimator.estimate(problem);\n+    assertEquals(0, estimator.getRMS(problem), 1.0e-10);\n+    assertEquals( 3.0, p[0].getEstimate(), 1.0e-10);\n+    assertEquals( 4.0, p[1].getEstimate(), 1.0e-10);\n+    assertEquals(-1.0, p[2].getEstimate(), 1.0e-10);\n+    assertEquals(-2.0, p[3].getEstimate(), 1.0e-10);\n+    assertEquals( 1.0 + epsilon, p[4].getEstimate(), 1.0e-10);\n+    assertEquals( 1.0 - epsilon, p[5].getEstimate(), 1.0e-10);\n+\n+  }\n+\n+  public void testNonInversible() throws EstimationException {\n+\n+    EstimatedParameter[] p = {\n+       new EstimatedParameter(\"p0\", 0),\n+       new EstimatedParameter(\"p1\", 0),\n+       new EstimatedParameter(\"p2\", 0)\n+    };\n+    LinearMeasurement[] m = new LinearMeasurement[] {\n+      new LinearMeasurement(new double[] {  1.0, 2.0, -3.0 },\n+                            new EstimatedParameter[] { p[0], p[1], p[2] },\n+                            1.0),\n+      new LinearMeasurement(new double[] {  2.0, 1.0,  3.0 },\n+                            new EstimatedParameter[] { p[0], p[1], p[2] },\n+                            1.0),\n+      new LinearMeasurement(new double[] { -3.0, -9.0 },\n+                            new EstimatedParameter[] { p[0], p[2] },\n+                            1.0)\n+    };\n+    LinearProblem problem = new LinearProblem(m);\n+\n+    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+    try {\n+      estimator.estimate(problem);\n+      fail(\"an exception should have been caught\");\n+    } catch (EstimationException ee) {\n+      // expected behavior\n+    } catch (Exception e) {\n+      fail(\"wrong exception type caught\");\n+    }\n+  }\n+\n+  public void testIllConditioned() throws EstimationException {\n+    EstimatedParameter[] p = {\n+      new EstimatedParameter(\"p0\", 0),\n+      new EstimatedParameter(\"p1\", 1),\n+      new EstimatedParameter(\"p2\", 2),\n+      new EstimatedParameter(\"p3\", 3)\n+    };\n+\n+    LinearProblem problem1 = new LinearProblem(new LinearMeasurement[] {\n+      new LinearMeasurement(new double[] { 10.0, 7.0,  8.0,  7.0 },\n+                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n+                            32.0),\n+      new LinearMeasurement(new double[] {  7.0, 5.0,  6.0,  5.0 },\n+                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n+                            23.0),\n+      new LinearMeasurement(new double[] {  8.0, 6.0, 10.0,  9.0 },\n+                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n+                            33.0),\n+      new LinearMeasurement(new double[] {  7.0, 5.0,  9.0, 10.0 },\n+                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n+                            31.0)\n+    });\n+    GaussNewtonEstimator estimator1 = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+    estimator1.estimate(problem1);\n+    assertEquals(0, estimator1.getRMS(problem1), 1.0e-10);\n+    assertEquals(1.0, p[0].getEstimate(), 1.0e-10);\n+    assertEquals(1.0, p[1].getEstimate(), 1.0e-10);\n+    assertEquals(1.0, p[2].getEstimate(), 1.0e-10);\n+    assertEquals(1.0, p[3].getEstimate(), 1.0e-10);\n+\n+    LinearProblem problem2 = new LinearProblem(new LinearMeasurement[] {\n+      new LinearMeasurement(new double[] { 10.0, 7.0,  8.1,  7.2 },\n+                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n+                            32.0),\n+      new LinearMeasurement(new double[] {  7.08, 5.04,  6.0,  5.0 },\n+                            new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n+                            23.0),\n+      new LinearMeasurement(new double[] {  8.0, 5.98, 9.89,  9.0 },\n+                             new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n+                            33.0),\n+      new LinearMeasurement(new double[] {  6.99, 4.99,  9.0, 9.98 },\n+                             new EstimatedParameter[] { p[0], p[1], p[2], p[3] },\n+                            31.0)\n+    });\n+    GaussNewtonEstimator estimator2 = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+    estimator2.estimate(problem2);\n+    assertEquals(0, estimator2.getRMS(problem2), 1.0e-10);\n+    assertEquals(-81.0, p[0].getEstimate(), 1.0e-8);\n+    assertEquals(137.0, p[1].getEstimate(), 1.0e-8);\n+    assertEquals(-34.0, p[2].getEstimate(), 1.0e-8);\n+    assertEquals( 22.0, p[3].getEstimate(), 1.0e-8);\n+\n+  }\n+\n+  public void testMoreEstimatedParametersSimple() throws EstimationException {\n+\n+    EstimatedParameter[] p = {\n+       new EstimatedParameter(\"p0\", 7),\n+       new EstimatedParameter(\"p1\", 6),\n+       new EstimatedParameter(\"p2\", 5),\n+       new EstimatedParameter(\"p3\", 4)\n+     };\n+    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n+      new LinearMeasurement(new double[] { 3.0, 2.0 },\n+                             new EstimatedParameter[] { p[0], p[1] },\n+                             7.0),\n+      new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n+                             new EstimatedParameter[] { p[1], p[2], p[3] },\n+                             3.0),\n+      new LinearMeasurement(new double[] { 2.0, 1.0 },\n+                             new EstimatedParameter[] { p[0], p[2] },\n+                             5.0)\n+    });\n+\n+    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+    try {\n+        estimator.estimate(problem);\n+        fail(\"an exception should have been caught\");\n+    } catch (EstimationException ee) {\n+        // expected behavior\n+    } catch (Exception e) {\n+        fail(\"wrong exception type caught\");\n+    }\n+\n+  }\n+\n+  public void testMoreEstimatedParametersUnsorted() throws EstimationException {\n+    EstimatedParameter[] p = {\n+      new EstimatedParameter(\"p0\", 2),\n+      new EstimatedParameter(\"p1\", 2),\n+      new EstimatedParameter(\"p2\", 2),\n+      new EstimatedParameter(\"p3\", 2),\n+      new EstimatedParameter(\"p4\", 2),\n+      new EstimatedParameter(\"p5\", 2)\n+    };\n+    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n+      new LinearMeasurement(new double[] { 1.0, 1.0 },\n+                           new EstimatedParameter[] { p[0], p[1] },\n+                           3.0),\n+      new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n+                           new EstimatedParameter[] { p[2], p[3], p[4] },\n+                           12.0),\n+      new LinearMeasurement(new double[] { 1.0, -1.0 },\n+                           new EstimatedParameter[] { p[4], p[5] },\n+                           -1.0),\n+      new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n+                           new EstimatedParameter[] { p[3], p[2], p[5] },\n+                           7.0),\n+      new LinearMeasurement(new double[] { 1.0, -1.0 },\n+                           new EstimatedParameter[] { p[4], p[3] },\n+                           1.0)\n+    });\n+\n+    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+    try {\n+        estimator.estimate(problem);\n+        fail(\"an exception should have been caught\");\n+    } catch (EstimationException ee) {\n+        // expected behavior\n+    } catch (Exception e) {\n+        fail(\"wrong exception type caught\");\n+    }\n+\n+  }\n+\n+  public void testRedundantEquations() throws EstimationException {\n+    EstimatedParameter[] p = {\n+      new EstimatedParameter(\"p0\", 1),\n+      new EstimatedParameter(\"p1\", 1)\n+    };\n+    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n+      new LinearMeasurement(new double[] { 1.0, 1.0 },\n+                             new EstimatedParameter[] { p[0], p[1] },\n+                             3.0),\n+      new LinearMeasurement(new double[] { 1.0, -1.0 },\n+                             new EstimatedParameter[] { p[0], p[1] },\n+                             1.0),\n+      new LinearMeasurement(new double[] { 1.0, 3.0 },\n+                             new EstimatedParameter[] { p[0], p[1] },\n+                             5.0)\n+    });\n+\n+    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+    estimator.estimate(problem);\n+    assertEquals(0, estimator.getRMS(problem), 1.0e-10);\n+    assertEquals(2.0, p[0].getEstimate(), 1.0e-10);\n+    assertEquals(1.0, p[1].getEstimate(), 1.0e-10);\n+\n+  }\n+\n+  public void testInconsistentEquations() throws EstimationException {\n+    EstimatedParameter[] p = {\n+      new EstimatedParameter(\"p0\", 1),\n+      new EstimatedParameter(\"p1\", 1)\n+    };\n+    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n+      new LinearMeasurement(new double[] { 1.0, 1.0 },\n+                            new EstimatedParameter[] { p[0], p[1] },\n+                            3.0),\n+      new LinearMeasurement(new double[] { 1.0, -1.0 },\n+                            new EstimatedParameter[] { p[0], p[1] },\n+                            1.0),\n+      new LinearMeasurement(new double[] { 1.0, 3.0 },\n+                            new EstimatedParameter[] { p[0], p[1] },\n+                            4.0)\n+    });\n+\n+    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+    estimator.estimate(problem);\n+    assertTrue(estimator.getRMS(problem) > 0.1);\n+\n+  }\n+\n+  public void testCircleFitting() throws EstimationException {\n+    Circle circle = new Circle(98.680, 47.345);\n+    circle.addPoint( 30.0,  68.0);\n+    circle.addPoint( 50.0,  -6.0);\n+    circle.addPoint(110.0, -20.0);\n+    circle.addPoint( 35.0,  15.0);\n+    circle.addPoint( 45.0,  97.0);\n+    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-10, 1.0e-10);\n+    estimator.estimate(circle);\n+    double rms = estimator.getRMS(circle);\n+    assertEquals(1.768262623567235,  Math.sqrt(circle.getM()) * rms,  1.0e-10);\n+    assertEquals(69.96016176931406, circle.getRadius(), 1.0e-10);\n+    assertEquals(96.07590211815305, circle.getX(),      1.0e-10);\n+    assertEquals(48.13516790438953, circle.getY(),      1.0e-10);\n+  }\n+\n+  public void testCircleFittingBadInit() throws EstimationException {\n+    Circle circle = new Circle(-12, -12);\n+    double[][] points = new double[][] {\n+      {-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},\n+      {-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},\n+      {-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},\n+      {-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},\n+      { 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},\n+      { 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},\n+      {-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},\n+      {-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},\n+      {-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},\n+      {-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},\n+      {-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},\n+      { 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},\n+      { 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},\n+      {-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},\n+      {-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},\n+      {-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},\n+      {-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},\n+      {-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},\n+      { 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},\n+      { 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},\n+      { 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},\n+      {-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},\n+      {-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},\n+      {-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},\n+      {-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},\n+      {-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},\n+      { 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},\n+      { 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},\n+      {-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}\n+    };\n+    for (int i = 0; i < points.length; ++i) {\n+      circle.addPoint(points[i][0], points[i][1]);\n+    }\n+    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n+    try {\n+        estimator.estimate(circle);\n+        fail(\"an exception should have been caught\");\n+    } catch (EstimationException ee) {\n+        // expected behavior\n+    } catch (Exception e) {\n+        fail(\"wrong exception type caught\");\n+    }\n+}\n+\n+  private static class LinearProblem extends SimpleEstimationProblem {\n+\n+    public LinearProblem(LinearMeasurement[] measurements) {\n+      HashSet set = new HashSet();\n+      for (int i = 0; i < measurements.length; ++i) {\n+        addMeasurement(measurements[i]);\n+        EstimatedParameter[] parameters = measurements[i].getParameters();\n+        for (int j = 0; j < parameters.length; ++j) {\n+          set.add(parameters[j]);\n+        }\n+      }\n+      for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n+        addParameter((EstimatedParameter) iterator.next());\n+      }\n+    }\n+\n+  }\n+\n+  private static class LinearMeasurement extends WeightedMeasurement {\n+\n+    public LinearMeasurement(double[] factors, EstimatedParameter[] parameters,\n+                             double setPoint) {\n+      super(1.0, setPoint, true);\n+      this.factors = factors;\n+      this.parameters = parameters;\n+      setIgnored(false);\n+    }\n+\n+    public double getTheoreticalValue() {\n+      double v = 0;\n+      for (int i = 0; i < factors.length; ++i) {\n+        v += factors[i] * parameters[i].getEstimate();\n+      }\n+      return v;\n+    }\n+\n+    public double getPartial(EstimatedParameter parameter) {\n+      for (int i = 0; i < parameters.length; ++i) {\n+        if (parameters[i] == parameter) {\n+          return factors[i];\n+        }\n+      }\n+      return 0;\n+    }\n+\n+    public EstimatedParameter[] getParameters() {\n+      return parameters;\n+    }\n+\n+    private double[] factors;\n+    private EstimatedParameter[] parameters;\n+    private static final long serialVersionUID = -3922448707008868580L;\n+\n+  }\n+\n+  private static class Circle implements EstimationProblem {\n+\n+    public Circle(double cx, double cy) {\n+      this.cx = new EstimatedParameter(\"cx\", cx);\n+      this.cy = new EstimatedParameter(new EstimatedParameter(\"cy\", cy));\n+      points  = new ArrayList();\n+    }\n+\n+    public void addPoint(double px, double py) {\n+      points.add(new PointModel(px, py));\n+    }\n+\n+    public int getM() {\n+      return points.size();\n+    }\n+\n+    public WeightedMeasurement[] getMeasurements() {\n+      return (WeightedMeasurement[]) points.toArray(new PointModel[points.size()]);\n+    }\n+\n+    public EstimatedParameter[] getAllParameters() {\n+      return new EstimatedParameter[] { cx, cy };\n+    }\n+\n+    public EstimatedParameter[] getUnboundParameters() {\n+      return new EstimatedParameter[] { cx, cy };\n+    }\n+\n+    public double getPartialRadiusX() {\n+      double dRdX = 0;\n+      for (Iterator iterator = points.iterator(); iterator.hasNext();) {\n+        dRdX += ((PointModel) iterator.next()).getPartialDiX();\n+      }\n+      return dRdX / points.size();\n+    }\n+\n+    public double getPartialRadiusY() {\n+      double dRdY = 0;\n+      for (Iterator iterator = points.iterator(); iterator.hasNext();) {\n+        dRdY += ((PointModel) iterator.next()).getPartialDiY();\n+      }\n+      return dRdY / points.size();\n+    }\n+\n+   public double getRadius() {\n+      double r = 0;\n+      for (Iterator iterator = points.iterator(); iterator.hasNext();) {\n+        r += ((PointModel) iterator.next()).getCenterDistance();\n+      }\n+      return r / points.size();\n+    }\n+\n+    public double getX() {\n+      return cx.getEstimate();\n+    }\n+\n+    public double getY() {\n+      return cy.getEstimate();\n+    }\n+\n+    private class PointModel extends WeightedMeasurement {\n+\n+      public PointModel(double px, double py) {\n+        super(1.0, 0.0);\n+        this.px = px;\n+        this.py = py;\n+      }\n+\n+      public double getPartial(EstimatedParameter parameter) {\n+        if (parameter == cx) {\n+          return getPartialDiX() - getPartialRadiusX();\n+        } else if (parameter == cy) {\n+          return getPartialDiY() - getPartialRadiusY();\n+        }\n+        return 0;\n+      }\n+\n+      public double getCenterDistance() {\n+        double dx = px - cx.getEstimate();\n+        double dy = py - cy.getEstimate();\n+        return Math.sqrt(dx * dx + dy * dy);\n+      }\n+\n+      public double getPartialDiX() {\n+        return (cx.getEstimate() - px) / getCenterDistance();\n+      }\n+\n+      public double getPartialDiY() {\n+        return (cy.getEstimate() - py) / getCenterDistance();\n+      }\n+\n+      public double getTheoreticalValue() {\n+        return getCenterDistance() - getRadius();\n+      }\n+\n+      private double px;\n+      private double py;\n+      private static final long serialVersionUID = 1L;\n+\n+    }\n+\n+    private EstimatedParameter cx;\n+    private EstimatedParameter cy;\n+    private ArrayList points;\n+\n+  }\n+\n+  public static Test suite() {\n+    return new TestSuite(GaussNewtonEstimatorTest.class);\n+  }\n+\n+}", "timestamp": 1194124024, "metainfo": ""}