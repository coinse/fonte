{"sha": "b255e2c8c8f5f8514dbb8bd43dc2b13a373ecc80", "log": "Javadoc (MATH-677).  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java\n     }\n \n     /**\n-     * Perform the base-4 Cooley-Tukey FFT algorithm (including inverse).\n+     * Returns the FFT of the specified real data set. Performs the base-4\n+     * Cooley-Tukey FFT algorithm.\n      *\n      * @param f the real data array to be transformed\n-     * @param isInverse the indicator of forward or inverse transform\n+     * @param isInverse {@code true} if inverse transform is to be carried out\n      * @return the complex transformed array\n-     * @throws IllegalArgumentException if any parameters are invalid\n-     * @throws MathIllegalArgumentException if array length is not a power of 2\n+     * @throws MathIllegalArgumentException if the length of the data array is\n+     * not a power of two\n      */\n     protected Complex[] fft(double[] f, boolean isInverse)\n             throws MathIllegalArgumentException {\n     }\n \n     /**\n-     * Perform the base-4 Cooley-Tukey FFT algorithm (including inverse).\n+     * Returns the FFT of the specified complex data set. Performs the base-4\n+     * Cooley-Tukey FFT algorithm.\n      *\n      * @param data the complex data array to be transformed\n      * @return the complex transformed array\n-     * @throws IllegalArgumentException if any parameters are invalid\n-     * @throws MathIllegalArgumentException if array length is not a power of 2\n+     * @throws MathIllegalArgumentException if the length of the data array is\n+     * not a power of two\n      */\n     protected Complex[] fft(Complex[] data)\n             throws MathIllegalArgumentException {\n     }\n \n     /**\n+     * <p>\n      * Sample the given univariate real function on the given interval.\n+     * </p>\n      * <p>\n-     * The interval is divided equally into N sections and sample points\n-     * are taken from min to max-(max-min)/N. Usually f(x) is periodic\n-     * such that f(min) = f(max) (note max is not sampled), but we don't\n-     * require that.</p>\n+     * The interval is divided equally into {@code n} sections and sample points\n+     * are taken from {@code min} to {@code max - (max - min) / N}. Usually\n+     * {@code f(x)} is periodic such that {@code f(min) = f(max)} (note that\n+     * {@code max} is not sampled), but this condition is not required by the\n+     * present method.\n+     * </p>\n      *\n      * @param f the function to be sampled\n      * @param min the (inclusive) lower bound for the interval\n     }\n \n     /**\n-     * Returns true if the argument is power of 2.\n+     * Returns true if the argument is a power of 2.\n      *\n      * @param n the number to test\n-     * @return true if the argument is power of 2\n+     * @return true if the argument is a power of 2\n      */\n     public static boolean isPowerOf2(long n) {\n         return (n > 0) && ((n & (n - 1)) == 0);", "timestamp": 1325640683, "metainfo": ""}