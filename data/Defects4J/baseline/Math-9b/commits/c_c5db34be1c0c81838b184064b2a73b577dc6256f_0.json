{"sha": "c5db34be1c0c81838b184064b2a73b577dc6256f", "log": "Added load(double[]) method to EmpiricalDistribution. Contributed by Piotr Kochanski PR # 26772   ", "commit": "\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java\n  * build grouped frequnecy histograms representing the input data or to\n  * generate random values \"like\" those in the input file -- i.e., the values\n  * generated will follow the distribution of the values in the file.\n- * @version $Revision: 1.13 $ $Date: 2004/01/25 21:30:41 $\n+ * @version $Revision: 1.14 $ $Date: 2004/02/12 04:35:08 $\n  */\n public interface EmpiricalDistribution {\n-    \n+ \n+    /**\n+     * Computes the empirical distribution from the provided\n+     * array of numbers.\n+     * @param dataArray the data array\n+     */\n+    void load(double[] dataArray); \n+        \n     /**\n      * Computes the empirical distribution from the input file.\n      * @param filePath fully qualified name of a file in the local file system\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n import java.io.InputStreamReader;\n import java.net.URL;\n \n-import org.apache.commons.math.stat.DescriptiveStatistics;\n import org.apache.commons.math.stat.SummaryStatistics;\n \n /**\n  *    entry per line.</li>\n  * </ol></p>\n  *\n- * @version $Revision: 1.15 $ $Date: 2004/01/29 06:26:14 $\n+ * @version $Revision: 1.16 $ $Date: 2004/02/12 04:35:08 $\n  */\n public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n     public EmpiricalDistributionImpl(int binCount) {\n         this.binCount = binCount;\n         binStats = new ArrayList();\n+    }\n+\n+    /**\n+     * @see org.apache.commons.math.random.EmpiricalDistribution#load(double[])\n+     */\n+    public void load(double[] in) {\n+        DataAdapter da = new ArrayDataAdapter(in);\n+        try {\n+            da.computeStats();\n+            fillBinStats(in);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e.getMessage());\n+        }\n+        loaded = true;\n+        \n     }\n     \n     public void load(String filePath) throws IOException {\n         BufferedReader in = \n             new BufferedReader(new InputStreamReader(new FileInputStream(filePath)));  \n         try {\n-            computeStats(in);\n+            DataAdapter da = new StreamDataAdapter(in);\n+            try {\n+                da.computeStats();\n+            } catch (Exception e) {\n+                throw new IOException(e.getMessage());\n+            }\n             in = new BufferedReader(new InputStreamReader(new FileInputStream(filePath)));  \n             fillBinStats(in);\n             loaded = true;\n         BufferedReader in = \n             new BufferedReader(new InputStreamReader(url.openStream()));\n         try {\n-            computeStats(in);\n+            DataAdapter da = new StreamDataAdapter(in);\n+            try {\n+                da.computeStats();\n+            } catch (Exception e) {\n+                throw new IOException(e.getMessage());\n+            }\n             in = new BufferedReader(new InputStreamReader(url.openStream()));\n             fillBinStats(in);\n             loaded = true;\n     public void load(File file) throws IOException {\n         BufferedReader in = new BufferedReader(new FileReader(file));\n         try {\n-            computeStats(in);\n+            DataAdapter da = new StreamDataAdapter(in);\n+            try {\n+                da.computeStats();\n+            } catch (Exception e) {\n+                throw new IOException(e.getMessage());\n+            }\n             in = new BufferedReader(new FileReader(file));\n             fillBinStats(in);\n             loaded = true;\n         } finally {\n-           if (in != null) try {in.close();} catch (Exception ex) {};\n-        }\n-    }\n-    \n-    /**\n-     * Computes sampleStats (first pass through data file).\n-     */\n-    private void computeStats(BufferedReader in) throws IOException {\n-        String str = null;\n-        double val = 0.0;\n-        sampleStats = SummaryStatistics.newInstance();\n-        while ((str = in.readLine()) != null) {\n-            val = new Double(str).doubleValue();\n-            sampleStats.addValue(val);\n-        }\n-        in.close();\n-        in = null;\n-    }\n-    \n+            if (in != null)\n+                try {\n+                    in.close();\n+                } catch (Exception ex) {\n+                };\n+        }\n+    }\n+    \n+    /**\n+     * Provides methods for computing <code>sampleStats</code> and \n+     * <code>beanStats</code> abstracting the source of data. \n+     */\n+    private abstract class DataAdapter{\n+        public abstract void computeBinStats(double min, double delta) \n+                throws Exception;\n+        public abstract void computeStats() throws Exception;\n+    }\n+    /**\n+     * Factory of <code>DataAdapter</code> objects. For every supported source\n+     * of data (array of doubles, file, etc.) an instance of the proper object\n+     * is returned. \n+     */\n+    private class DataAdapterFactory{\n+        public DataAdapter getAdapter(Object in) {\n+            if (in instanceof BufferedReader) {\n+                BufferedReader inputStream = (BufferedReader) in;\n+                return new StreamDataAdapter(inputStream);\n+            } else if (in instanceof double[]) {\n+                double[] inputArray = (double[]) in;\n+                return new ArrayDataAdapter(inputArray);\n+            } else {\n+                throw new IllegalArgumentException(\n+                    \"Input data comes from the\" + \" unsupported source\");\n+            }\n+        }\n+    }\n+    /**\n+     * <code>DataAdapter</code> for data provided through some input stream\n+     */\n+    private class StreamDataAdapter extends DataAdapter{\n+        BufferedReader inputStream;\n+        public StreamDataAdapter(BufferedReader in){\n+            super();\n+            inputStream = in;\n+        }\n+        /**\n+         * Computes binStats\n+         */\n+        public void computeBinStats(double min, double delta) \n+                throws IOException {\n+            String str = null;\n+            double val = 0.0d;\n+            while ((str = inputStream.readLine()) != null) {\n+                val = Double.parseDouble(str);\n+                SummaryStatistics stats =\n+                    (SummaryStatistics) binStats.get(\n+                        Math.max((int) Math.ceil((val - min) / delta) - 1, 0));\n+                stats.addValue(val);\n+            }\n+\n+            inputStream.close();\n+            inputStream = null;\n+        }\n+        /**\n+         * Computes sampleStats\n+         */\n+        public void computeStats() throws IOException {\n+            String str = null;\n+            double val = 0.0;\n+            sampleStats = SummaryStatistics.newInstance();\n+            while ((str = inputStream.readLine()) != null) {\n+                val = new Double(str).doubleValue();\n+                sampleStats.addValue(val);\n+            }\n+            inputStream.close();\n+            inputStream = null;\n+        }\n+    }\n+\n+    /**\n+     * <code>DataAdapter</code> for data provided as array of doubles.\n+     */\n+    private class ArrayDataAdapter extends DataAdapter{\n+        private double[] inputArray;\n+        public ArrayDataAdapter(double[] in){\n+            super();\n+            inputArray = in;\n+        }\n+        /**\n+         * Computes sampleStats\n+         */\n+        public void computeStats() throws IOException {\n+            sampleStats = SummaryStatistics.newInstance();\n+            for (int i = 0; i < inputArray.length; i++) {\n+                sampleStats.addValue(inputArray[i]);\n+            }\n+        }\n+        /**\n+         * Computes binStats\n+         */\n+        public void computeBinStats(double min, double delta)\n+            throws IOException {\n+            for (int i = 0; i < inputArray.length; i++) {\n+                SummaryStatistics stats =\n+                    (SummaryStatistics) binStats.get(\n+                        Math.max((int) Math.ceil((inputArray[i] - min) / delta) \n+                            - 1, 0));\n+                stats.addValue(inputArray[i]);\n+            }\n+        }    \n+    }\n+\n     /**\n      * Fills binStats array (second pass through data file).\n      */\n-    private void fillBinStats(BufferedReader in) throws IOException {\n-        \n+    private void fillBinStats(Object in) throws IOException {    \n         // Load array of bin upper bounds -- evenly spaced from min - max\n         double min = sampleStats.getMin();\n         double max = sampleStats.getMax();\n             binStats.add(i,stats);\n         }\n         \n-        // Pass the data again, filling data in binStats Array\n-        String str = null;\n-        double val = 0.0d;\n-        while ((str = in.readLine()) != null) {\n-           val = Double.parseDouble(str);\n-           SummaryStatistics stats = \n-            (SummaryStatistics) binStats.get(Math.max((int)Math.ceil((val - min) / delta) - 1, 0));\n-           stats.addValue(val);        \n-        }\n-        \n-        in.close();\n-        in = null;\n+        // Filling data in binStats Array\n+        DataAdapterFactory aFactory = new DataAdapterFactory();\n+        DataAdapter da = aFactory.getAdapter(in);\n+        try {\n+            da.computeBinStats(min, delta);\n+        } catch (Exception e) {\n+            if(e instanceof RuntimeException){\n+                throw new RuntimeException(e.getMessage());\n+            }else{\n+                throw new IOException(e.getMessage());\n+            }\n+        }\n         \n         // Assign upperBounds based on bin counts\n         upperBounds = new double[binCount];\n     public boolean isLoaded() {\n         return loaded;\n     }\n-    \n }\n--- a/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+\n+import java.io.BufferedReader;\n import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n import java.net.URL;\n-import java.net.URLDecoder;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n \n import org.apache.commons.math.stat.SummaryStatistics;\n \n /**\n  * Test cases for the EmpiricalDistribution class\n  *\n- * @version $Revision: 1.12 $ $Date: 2004/01/29 05:27:54 $\n+ * @version $Revision: 1.13 $ $Date: 2004/02/12 04:35:09 $\n  */\n \n public final class EmpiricalDistributionTest extends TestCase {\n \n     protected EmpiricalDistribution empiricalDistribution = null;\n+    protected EmpiricalDistribution empiricalDistribution2 = null;\n     protected File file = null;\n     protected URL url = null; \n+    protected double[] dataArray = null;\n     \n     public EmpiricalDistributionTest(String name) {\n         super(name);\n     }\n \n-    public void setUp() {\n+    public void setUp() throws IOException {\n         empiricalDistribution = new EmpiricalDistributionImpl(100);\n         url = getClass().getResource(\"testData.txt\");\n+        \n+        empiricalDistribution2 = new EmpiricalDistributionImpl(100);\n+        BufferedReader in = \n+                new BufferedReader(new InputStreamReader(\n+                        url.openStream()));\n+        String str = null;\n+        ArrayList list = new ArrayList();\n+        while ((str = in.readLine()) != null) {\n+            list.add(Double.valueOf(str));\n+        }\n+        in.close();\n+        in = null;\n+        \n+        dataArray = new double[list.size()];\n+        int i = 0;\n+        for (Iterator iter = list.iterator(); iter.hasNext();) {\n+            dataArray[i] = ((Double)iter.next()).doubleValue();\n+            i++;\n+        }                 \n     }\n \n     public static Test suite() {\n           (empiricalDistribution.getSampleStats().getStandardDeviation(),\n                 1.0173699343977738,10E-7);\n     }\n-    \n+\n+    /**\n+     * Test EmpiricalDistrbution.load(double[]) using data taken from\n+     * sample data file.<br> \n+     * Check that the sampleCount, mu and sigma match data in \n+     * the sample data file.\n+     */\n+    public void testDoubleLoad() throws Exception {\n+        empiricalDistribution2.load(dataArray);   \n+        // testData File has 10000 values, with mean ~ 5.0, std dev ~ 1\n+        // Make sure that loaded distribution matches this\n+        assertEquals(empiricalDistribution2.getSampleStats().getN(),1000,10E-7);\n+        //TODO: replace with statistical tests\n+        assertEquals\n+            (empiricalDistribution2.getSampleStats().getMean(),\n+                5.069831575018909,10E-7);\n+        assertEquals\n+          (empiricalDistribution2.getSampleStats().getStandardDeviation(),\n+                1.0173699343977738,10E-7);\n+    }\n+   \n     /** \n       * Generate 1000 random values and make sure they look OK.<br>\n       * Note that there is a non-zero (but very small) probability that\n       */\n     public void testNext() throws Exception {\n         tstGen(0.1);\n+        tstDoubleGen(0.1);\n     }\n     \n     /**\n     public void testNexFail() {\n         try {\n             empiricalDistribution.getNextValue();\n+            empiricalDistribution2.getNextValue();\n             fail(\"Expecting IllegalStateException\");\n         } catch (IllegalStateException ex) {;}\n     }\n     public void testGridTooFine() throws Exception {\n         empiricalDistribution = new EmpiricalDistributionImpl(1001);\n         tstGen(0.1);    \n+        empiricalDistribution2 = new EmpiricalDistributionImpl(1001);           \n+        tstDoubleGen(0.1);\n     }\n     \n     /**\n         empiricalDistribution = new EmpiricalDistributionImpl(1);\n         tstGen(5); // ridiculous tolerance; but ridiculous grid size\n                    // really just checking to make sure we do not bomb\n+        empiricalDistribution2 = new EmpiricalDistributionImpl(1);           \n+        tstDoubleGen(5);           \n     }\n     \n     private void tstGen(double tolerance)throws Exception {\n         assertEquals\n          (\"std dev\", stats.getStandardDeviation(),1.0173699343977738,tolerance);\n     }\n-                    \n+\n+    private void tstDoubleGen(double tolerance)throws Exception {\n+        empiricalDistribution2.load(dataArray);   \n+        SummaryStatistics stats = SummaryStatistics.newInstance();\n+        for (int i = 1; i < 1000; i++) {\n+            stats.addValue(empiricalDistribution2.getNextValue());\n+        }\n+        assertEquals(\"mean\", stats.getMean(),5.069831575018909,tolerance);\n+        assertEquals\n+         (\"std dev\", stats.getStandardDeviation(),1.0173699343977738,tolerance);\n+    }\n }", "timestamp": 1076560509, "metainfo": ""}