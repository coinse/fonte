{"sha": "8d825e475b702a65e1568590161bea6bc8f0103f", "log": "javadoc typos.   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.13 $ $Date: 2004/05/11 02:04:21 $\n+ * @version $Revision: 1.14 $ $Date: 2004/05/11 02:19:08 $\n  */\n public abstract class AbstractDiscreteDistribution\n     implements DiscreteDistribution {\n     }\n     \n     /**\n-     * For this distribution, X, this method returns the lagest x, such\n+     * For this distribution, X, this method returns the largest x, such\n      * that P(X &le; x) &le; <code>p</code>.\n      *\n      * @param p the desired probability\n--- a/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n /**\n  * Base interface for various discrete distributions.\n  * \n- * @version $Revision: 1.12 $ $Date: 2004/05/11 02:05:25 $\n+ * @version $Revision: 1.13 $ $Date: 2004/05/11 02:19:08 $\n  */\n public interface DiscreteDistribution {\n     /**\n-     * For this disbution, X, this method returns P(X = x).\n+     * For this distribution, X, this method returns P(X = x).\n      * @param x the value at which the PMF is evaluated.\n      * @return PMF for this distribution. \n      */\n     double probability(int x);\n     \n     /**\n-     * For this disbution, X, this method returns P(X &le; x).\n+     * For this distribution, X, this method returns P(X &le; x).\n      * @param x the value at which the PDF is evaluated.\n      * @return PDF for this distribution. \n      * @exception MathException if the cumulative probability can not be\n     double cumulativeProbability(int x) throws MathException;\n \n     /**\n-     * For this disbution, X, this method returns P(x0 &le; X &le; x1).\n+     * For this distribution, X, this method returns P(x0 &le; X &le; x1).\n      * @param x0 the inclusive, lower bound\n      * @param x1 the inclusive, upper bound\n      * @return the cumulative probability. \n     double cumulativeProbability(int x0, int x1) throws MathException;\n     \n     /**\n-     * For this disbution, X, this method returns the largest x such that P(X &le; x) <= p.\n+     * For this distribution, X, this method returns the largest x such that P(X &le; x) <= p.\n      * @param p the cumulative probability.\n      * @return x. \n      * @exception MathException if the inverse cumulative probability can not be", "timestamp": 1084241948, "metainfo": ""}