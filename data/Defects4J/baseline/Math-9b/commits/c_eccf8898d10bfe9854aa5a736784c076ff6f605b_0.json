{"sha": "eccf8898d10bfe9854aa5a736784c076ff6f605b", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=23187 Obtained from: Submitted by:\tBrent Worden  Reviewed by:\tMark Diggory   ", "commit": "\n--- a/src/java/org/apache/commons/math/MathConfigurationException.java\n+++ b/src/java/org/apache/commons/math/MathConfigurationException.java\n \n /**\n  * Signals a configuration problem with any of the factory methods.\n- * @version $Revision: 1.6 $ $Date: 2003/08/09 04:03:41 $\n+ * @version $Revision: 1.7 $ $Date: 2003/09/27 04:13:34 $\n  */\n public class MathConfigurationException extends MathException {\n \n      * Default constructor.\n      */\n     public MathConfigurationException() {\n-        super();\n+        this(null, null);\n     }\n \n     /**\n      * @param message message describing the problem\n      */\n     public MathConfigurationException(final String message) {\n-        super(message);\n+        this(message, null);\n     }\n \n     /**\n      * @param throwable caught exception causing this problem\n      */\n     public MathConfigurationException(final Throwable throwable) {\n-        super(throwable);\n+        this(null, throwable);\n     }\n }\n--- a/src/java/org/apache/commons/math/MathException.java\n+++ b/src/java/org/apache/commons/math/MathException.java\n  */\n package org.apache.commons.math;\n \n+import org.apache.commons.lang.exception.NestableException;\n+\n /**\n  * A generic exception indicating problems in the math package.\n- * @version $Revision: 1.5 $ $Date: 2003/08/09 04:03:41 $\n+ * @version $Revision: 1.6 $ $Date: 2003/09/27 04:13:34 $\n  */\n-public class MathException extends Exception {\n+public class MathException extends NestableException {\n \n     /**\n      * Constructs a MathException\n      */\n     public MathException() {\n-        super();\n+        this(null, null);\n     }\n \n     /**\n+     * Create an exception with a given error message.\n      * @param message message describing the problem\n      */\n     public MathException(final String message) {\n-        super(message);\n+        this(message, null);\n     }\n \n     /**\n+     * Create an exception with a given error message and root cause.\n      * @param message message describing the problem\n      * @param throwable caught exception causing this problem\n      */\n     }\n \n     /**\n+     * Create an exception with a given root cause.\n      * @param throwable caught exception causing this problem\n      */\n     public MathException(final Throwable throwable) {\n-        super(throwable);\n+        this(null, throwable);\n     }\n-\n }\n--- a/src/java/org/apache/commons/math/analysis/ConvergenceException.java\n+++ b/src/java/org/apache/commons/math/analysis/ConvergenceException.java\n  */\n package org.apache.commons.math.analysis;\n \n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+\n /**\n  * Error thrown when a numerical computation can not be performed because the\n  * numerical result failed to converge to a finite value.\n  * \n- * @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $\n+ * @version $Revision: 1.3 $ $Date: 2003/09/27 04:13:33 $\n  */\n-public class ConvergenceException extends RuntimeException {\n+public class ConvergenceException extends NestableRuntimeException {\n+    /**\n+     * Default constructor.\n+     */\n+    public ConvergenceException() {\n+        this(null, null);\n+    }\n+    \n     /**\n      * Construct an exception with the given message.\n      * @param message descriptive error message. \n      */\n     public ConvergenceException(String message) {\n-        super(message);\n+        this(message, null);\n     }\n \n     /**\n         super(message, cause);\n     }\n \n+    /**\n+     * Create an exception with a given root cause.\n+     * @param throwable caught exception causing this problem\n+     */\n+    public ConvergenceException(Throwable throwable) {\n+        this(null, throwable);\n+    }\n+\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+/**\n+ * Utility routines for {@link UnivariateRealSolver} objects.\n+ * @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:33 $\n+ */\n+public class UnivariateRealSolverUtils {\n+    /**\n+     * Default constructor.\n+     */\n+    private UnivariateRealSolverUtils() {\n+        super();\n+    }\n+\n+    /**\n+     * Method to solve for zeros of real univariate functions.  A\n+     * default solver is created and used for solving. \n+     * @param f the function.\n+     * @param x0 the lower bound for the interval.\n+     * @param x1 the upper bound for the interval.\n+     * @return a value where the function is zero.\n+     * @throws MathException if the iteration count was exceeded or the\n+     *         solver detects convergence problems otherwise.\n+     */\n+    public static double solve(UnivariateRealFunction f, double x0, double x1)\n+        throws MathException\n+    {\n+        if(f == null){\n+            throw new IllegalArgumentException(\"f can not be null.\");    \n+        }\n+        \n+        return UnivariateRealSolverFactory.newInstance().newDefaultSolver(f)\n+            .solve(x0, x1);\n+    }\n+\n+    /**\n+     * Convience method to solve for zeros of real univariate functions.  A\n+     * default solver is created and used for solving. \n+     * @param f the function.\n+     * @param x0 the lower bound for the interval.\n+     * @param x1 the upper bound for the interval.\n+     * @param absoluteAccuracy the accuracy to be used by the solver.\n+     * @return a value where the function is zero.\n+     * @throws MathException if the iteration count was exceeded or the\n+     *         solver detects convergence problems otherwise.\n+     */\n+    public static double solve(\n+        UnivariateRealFunction f,\n+        double x0,\n+        double x1,\n+        double absoluteAccuracy)\n+        throws MathException\n+    {\n+        if(f == null){\n+            throw new IllegalArgumentException(\"f can not be null.\");    \n+        }\n+            \n+        UnivariateRealSolver solver = UnivariateRealSolverFactory.newInstance()\n+            .newDefaultSolver(f);\n+        solver.setAbsoluteAccuracy(absoluteAccuracy);\n+        return solver.solve(x0, x1);\n+    }\n+\n+    /**\n+     * For a function, f, this method returns two values, a and b that bracket\n+     * a root of f.  That is to say, there exists a value c between a and b\n+     * such that f(c) = 0.\n+     *\n+     * @param function the function\n+     * @param initial midpoint of the returned range.\n+     * @param lowerBound for numerical safety, a never is less than this value.\n+     * @param upperBound for numerical safety, b never is greater than this\n+     *                   value.\n+     * @return a two element array holding {a, b}.\n+     * @throws MathException if a root can not be bracketted.\n+     */\n+    public static double[] bracket(UnivariateRealFunction function,\n+                                   double initial,\n+                                   double lowerBound,\n+                                   double upperBound) throws MathException {\n+        return bracket( function, initial, lowerBound, upperBound,\n+            Integer.MAX_VALUE ) ;\n+    }\n+\n+    /**\n+     * For a function, f, this method returns two values, a and b that bracket\n+     * a root of f.  That is to say, there exists a value c between a and b\n+     * such that f(c) = 0.\n+     *\n+     * @param function the function\n+     * @param initial midpoint of the returned range.\n+     * @param lowerBound for numerical safety, a never is less than this value.\n+     * @param upperBound for numerical safety, b never is greater than this\n+     *                   value.\n+     * @param maximumIterations to guard against infinite looping, maximum\n+     *                          number of iterations to perform\n+     * @return a two element array holding {a, b}.\n+     * @throws MathException if a root can not be bracketted.\n+     */\n+    public static double[] bracket(UnivariateRealFunction function,\n+                                   double initial,\n+                                   double lowerBound,\n+                                   double upperBound,\n+                                   int maximumIterations) throws MathException {\n+        double a = initial;\n+        double b = initial;\n+        double fa;\n+        double fb;\n+        int numIterations = 0 ;\n+    \n+        do {\n+            a = Math.max(a - 1.0, lowerBound);\n+            b = Math.min(b + 1.0, upperBound);\n+            fa = function.value(a);\n+            fb = function.value(b);\n+            numIterations += 1 ;\n+        } while ( (fa * fb > 0.0) && ( numIterations < maximumIterations ) );\n+    \n+        return new double[]{a, b};\n+    }\n+}\n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n package org.apache.commons.math.stat.distribution;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.analysis.RootFinding;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.analysis.UnivariateRealSolverUtil;\n+import org.apache.commons.math.analysis.UnivariateRealSolverUtils;\n \n /**\n  * Base class for various continuous distributions.  It provides default\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.8 $ $Date: 2003/07/30 21:58:11 $\n+ * @version $Revision: 1.9 $ $Date: 2003/09/27 04:13:34 $\n  */\n public abstract class AbstractContinuousDistribution\n     implements ContinuousDistribution {\n         \n         try {\n             // bracket root\n-            double[] bracket = RootFinding.bracket(rootFindingFunction,\n+            double[] bracket = UnivariateRealSolverUtils.bracket(rootFindingFunction,\n                 getInitialDomain(p), getDomainLowerBound(p),\n                 getDomainUpperBound(p));\n             \n             // find root\n-            double root = UnivariateRealSolverUtil.solve(\n+            double root = UnivariateRealSolverUtils.solve(\n                 rootFindingFunction, bracket[0], bracket[1]);\n         \n             return root;\n--- a/src/java/org/apache/commons/math/stat/AbstractUnivariate.java\n+++ b/src/java/org/apache/commons/math/stat/AbstractUnivariate.java\n \n /**\n  * Provides univariate measures for an array of doubles.\n- * @version $Revision: 1.3 $ $Date: 2003/09/26 19:30:32 $  \n+ * @version $Revision: 1.4 $ $Date: 2003/09/27 04:13:33 $  \n  */\n public abstract class AbstractUnivariate implements Univariate {\n \n         setWindowSize(window);\n     }\n \n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n+     */\n     public abstract double apply(UnivariateStatistic stat);\n     \n \n--- a/src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java\n  * univariate statistics for a List of Java Beans by property.  This \n  * implementation uses beanutils' PropertyUtils to get a simple, nested,\n  * indexed, mapped, or combined property from an element of a List.\n- * @version $Revision: 1.6 $ $Date: 2003/09/26 19:30:32 $\n+ * @version $Revision: 1.7 $ $Date: 2003/09/27 04:13:33 $\n  */\n public class BeanListUnivariateImpl extends ListUnivariateImpl {\n \n      * @param list Backing List\n      */\n     public BeanListUnivariateImpl(List list) {\n-        super(list);\n+        this(list, null);\n     }\n \n     /**\n     public BeanListUnivariateImpl(List list, String propertyName) {\n         super(list);\n         setPropertyName(propertyName);\n-        this.transformer = new BeanTransformer(propertyName);\n     }\n \n     /**\n      * @param propertyName Name of Property\n      */\n     public void setPropertyName(String propertyName) {\n-        System.out.println(\"Set prop name; \" + propertyName);\n         this.propertyName = propertyName;\n-        this.transformer = new BeanTransformer(propertyName);\n+        setTransformer(new BeanTransformer(propertyName));\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n  * Accepts int, long or string values, converting\n  * all to Strings and maintaining frequency counts.\n  * \n- * @version $Revision: 1.4 $ $Date: 2003/07/09 21:45:23 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/27 04:13:33 $\n  */\n public class Frequency {\n     /** name for this frequency distribution. */\n      */\n     public Frequency(String name) {\n         super();\n-        this.name = name;\n+        setName(name);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/stat/ListUnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/stat/ListUnivariateImpl.java\n import org.apache.commons.math.util.NumberTransformer;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/09/26 19:30:32 $\n+ * @version $Revision: 1.7 $ $Date: 2003/09/27 04:13:33 $\n  */\n public class ListUnivariateImpl\n     extends AbstractStoreUnivariate\n      * @param list The list that will back this Univariate\n      */\n     public ListUnivariateImpl(List list) {\n-        super();\n-        this.list = list;\n-        transformer = new DefaultTransformer();\n+        this(list, new DefaultTransformer());\n     }\n     \n     /**\n         list.clear();\n     }\n     \n-    /* (non-Javadoc)\n-     * @see org.apache.commons.math.stat.AbstractUnivariate#apply(org.apache.commons.math.stat.univariate.UnivariateStatistic)\n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n      */\n     public double apply(UnivariateStatistic stat) {\n         double[] v = this.getValues();\n--- a/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java\n import org.apache.commons.math.util.ContractableDoubleArray;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2003/09/26 19:30:32 $\n+ * @version $Revision: 1.8 $ $Date: 2003/09/27 04:13:33 $\n  */\n public class StoreUnivariateImpl extends AbstractStoreUnivariate {\n \n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see org.apache.commons.math.stat.AbstractUnivariate#apply(org.apache.commons.math.stat.univariate.UnivariateStatistic)\n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n      */\n     public double apply(UnivariateStatistic stat) {\n         if (eDA != null) {\n--- a/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/stat/UnivariateImpl.java\n  * Integers, floats and longs can be added, but they will be converted\n  * to doubles by addValue().\n  *\n- * @version $Revision: 1.20 $ $Date: 2003/09/26 19:30:32 $\n+ * @version $Revision: 1.21 $ $Date: 2003/09/27 04:13:33 $\n */\n public class UnivariateImpl\n     extends AbstractUnivariate\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see org.apache.commons.math.stat.AbstractUnivariate#apply(org.apache.commons.math.stat.univariate.UnivariateStatistic)\n+    /**\n+     * Apply the given statistic to this univariate collection.\n+     * @param stat the statistic to apply\n+     * @return the computed value of the statistic.\n      */\n     public double apply(UnivariateStatistic stat) {\n         \n--- a/src/java/org/apache/commons/math/util/BeanTransformer.java\n+++ b/src/java/org/apache/commons/math/util/BeanTransformer.java\n \n import java.lang.reflect.InvocationTargetException;\n import org.apache.commons.beanutils.PropertyUtils;\n-import org.apache.commons.math.MathException;\n+import org.apache.commons.logging.LogFactory;\n \n /**\n  * Uses PropertyUtils to map a Bean getter to a double value.\n- * @version $Revision: 1.5 $ $Date: 2003/09/17 19:19:09 $\n+ * @version $Revision: 1.6 $ $Date: 2003/09/27 04:13:34 $\n  */\n public class BeanTransformer implements NumberTransformer {\n \n      * Create a BeanTransformer\n      */\n     public BeanTransformer() {\n-        super();\n+        this(null);\n     }\n \n     /**\n      * @param property The property.\n      */\n     public BeanTransformer(final String property) {\n-        this.propertyName = property;\n-    }\n-\n-    /**\n-     * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n-     */\n-    public double transform(final Object o) throws MathException {\n-        double d = Double.NaN;\n-        try {\n-            d =\n-                ((Number) PropertyUtils.getProperty(o, propertyName))\n-                    .doubleValue();\n-        } catch (IllegalAccessException e) {\n-            throw new MathException(e.getMessage(),e);\n-        } catch (InvocationTargetException e) {\n-            throw new MathException(e.getMessage(),e);\n-        } catch (NoSuchMethodException e) {\n-            throw new MathException(e.getMessage(),e);\n-        }\n-        return d;\n+        super();\n+        setPropertyName(property);\n     }\n \n     /**\n         propertyName = string;\n     }\n \n+    /**\n+     * @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)\n+     */\n+    public double transform(final Object o) {\n+        double d = Double.NaN;\n+        try {\n+            d =\n+                ((Number) PropertyUtils.getProperty(o, getPropertyName()))\n+                    .doubleValue();\n+        } catch (IllegalAccessException e) {\n+            LogFactory.getLog(getClass()).error(\n+                \"Property can not be accessed.  Using NaN.\", e);\n+        } catch (InvocationTargetException e) {\n+            LogFactory.getLog(getClass()).error(\n+                \"Property accessor method threw an exception.  Using NaN.\", e);\n+            e.printStackTrace();\n+        } catch (NoSuchMethodException e) {\n+            LogFactory.getLog(getClass()).error(\n+                \"Property accessor method does not exist.  Using NaN.\", e);\n+        }\n+        return d;\n+    }\n }\n--- a/src/java/org/apache/commons/math/util/DefaultTransformer.java\n+++ b/src/java/org/apache/commons/math/util/DefaultTransformer.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n+\n package org.apache.commons.math.util;\n+\n+import org.apache.commons.beanutils.ConversionException;\n+import org.apache.commons.beanutils.converters.DoubleConverter;\n \n /**\n  * A Default NumberTransformer for java.lang.Numbers and Numeric Strings. \n- * @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/27 04:13:34 $\n  */\n public class DefaultTransformer implements NumberTransformer {\n-\n+    /** Converter used to transform objects. */\n+    private static final DoubleConverter converter =\n+        new DoubleConverter(new Double(Double.NaN));\n+    \n     /**\n      * @see org.apache.commons.collections.Transformer#transform(java.lang.Object)\n      */\n     public double transform(Object o) {\n-        double d = Double.NaN;\n-\n-        if (o instanceof Number) {\n-            return ((Number) o).doubleValue();\n-        } else {\n-            try {\n-                d = Double.parseDouble(o.toString());\n-            } catch (Exception e) {\n-                e.printStackTrace();\n-            }\n+        double d;\n+        try {\n+            d = ((Double)converter.convert(Double.class, o)).doubleValue();\n+        } catch(ConversionException ex){\n+            d = Double.NaN;\n         }\n         return d;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/MathConfigurationExceptionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $\n+ */\n+public class MathConfigurationExceptionTest extends TestCase {\n+    /**\n+     * \n+     */\n+    public void testConstructor(){\n+        MathConfigurationException ex = new MathConfigurationException();\n+        assertNull(ex.getCause());\n+        assertNull(ex.getMessage());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorMessage(){\n+        String msg = \"message\";\n+        MathConfigurationException ex = new MathConfigurationException(msg);\n+        assertNull(ex.getCause());\n+        assertEquals(msg, ex.getMessage());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorMessageCause(){\n+        String outMsg = \"outer message\";\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        MathConfigurationException ex = new MathConfigurationException(outMsg, cause);\n+        assertEquals(outMsg, ex.getMessage());\n+        assertEquals(cause, ex.getCause());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorCause(){\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        MathConfigurationException ex = new MathConfigurationException(cause);\n+        assertEquals(cause, ex.getCause());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/MathExceptionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $\n+ */\n+public class MathExceptionTest extends TestCase {\n+    /**\n+     * \n+     */\n+    public void testConstructor(){\n+        MathException ex = new MathException();\n+        assertNull(ex.getCause());\n+        assertNull(ex.getMessage());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorMessage(){\n+        String msg = \"message\";\n+        MathException ex = new MathException(msg);\n+        assertNull(ex.getCause());\n+        assertEquals(msg, ex.getMessage());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorMessageCause(){\n+        String outMsg = \"outer message\";\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        MathException ex = new MathException(outMsg, cause);\n+        assertEquals(outMsg, ex.getMessage());\n+        assertEquals(cause, ex.getCause());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorCause(){\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        MathException ex = new MathException(cause);\n+        assertEquals(cause, ex.getCause());\n+    }\n+}\n--- a/src/test/org/apache/commons/math/analysis/BisectionSolverTest.java\n+++ b/src/test/org/apache/commons/math/analysis/BisectionSolverTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/09/17 19:29:27 $\n+ * @version $Revision: 1.3 $ $Date: 2003/09/27 04:13:34 $\n  */\n public final class BisectionSolverTest extends TestCase {\n-    /**\n-     *\n-     */\n-    public BisectionSolverTest(String name) {\n-        super(name);\n-    }\n-\n     /**\n      *\n      */\n         result = solver.solve(0.85, 5);\n         assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n     }\n+    \n+    /**\n+     * \n+     */\n+    public void testSetFunctionValueAccuracy(){\n+        double expected = 1.0e-2;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        try {\n+            solver.setFunctionValueAccuracy(expected);\n+            assertEquals(expected, solver.getFunctionValueAccuracy(), 1.0e-2);\n+        } catch (MathException ex) {\n+            fail(ex.getMessage());\n+        }\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testResetFunctionValueAccuracy(){\n+        double newValue = 1.0e-2;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        try {\n+            double oldValue = solver.getFunctionValueAccuracy();\n+            solver.setFunctionValueAccuracy(newValue);\n+            solver.resetFunctionValueAccuracy();\n+            assertEquals(oldValue, solver.getFunctionValueAccuracy(), 1.0e-2);\n+        } catch(MathException ex){\n+            fail(ex.getMessage());\n+        }\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testSetAbsoluteAccuracy(){\n+        double expected = 1.0e-2;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        try {\n+            solver.setAbsoluteAccuracy(expected);\n+            assertEquals(expected, solver.getAbsoluteAccuracy(), 1.0e-2);\n+        } catch(MathException ex){\n+            fail(ex.getMessage());\n+        }\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testResetAbsoluteAccuracy(){\n+        double newValue = 1.0e-2;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        try {\n+            double oldValue = solver.getAbsoluteAccuracy();\n+            solver.setAbsoluteAccuracy(newValue);\n+            solver.resetAbsoluteAccuracy();\n+            assertEquals(oldValue, solver.getAbsoluteAccuracy(), 1.0e-2);\n+        } catch(MathException ex){\n+            fail(ex.getMessage());\n+        }\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testSetMaximalIterationCount(){\n+        int expected = 100;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        solver.setMaximalIterationCount(expected);\n+        assertEquals(expected, solver.getMaximalIterationCount());\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testResetMaximalIterationCount(){\n+        int newValue = 10000;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        int oldValue = solver.getMaximalIterationCount();\n+        solver.setMaximalIterationCount(newValue);\n+        solver.resetMaximalIterationCount();\n+        assertEquals(oldValue, solver.getMaximalIterationCount());\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testSetRelativeAccuracy(){\n+        double expected = 1.0e-2;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        try {\n+            solver.setRelativeAccuracy(expected);\n+            assertEquals(expected, solver.getRelativeAccuracy(), 1.0e-2);\n+        } catch(MathException ex){\n+            fail(ex.getMessage());\n+        }\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testResetRelativeAccuracy(){\n+        double newValue = 1.0e-2;\n+        \n+        UnivariateRealFunction f = new QuinticFunction();\n+        UnivariateRealSolver solver = new BisectionSolver(f);\n+        try {\n+            double oldValue = solver.getRelativeAccuracy();\n+            solver.setRelativeAccuracy(newValue);\n+            solver.resetRelativeAccuracy();\n+            assertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);\n+        } catch(MathException ex){\n+            fail(ex.getMessage());\n+        }\n+    }        \n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $\n+ */\n+public class ConvergenceExceptionTest extends TestCase {\n+    /**\n+     * \n+     */\n+    public void testConstructor(){\n+        ConvergenceException ex = new ConvergenceException();\n+        assertNull(ex.getCause());\n+        assertNull(ex.getMessage());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorMessage(){\n+        String msg = \"message\";\n+        ConvergenceException ex = new ConvergenceException(msg);\n+        assertNull(ex.getCause());\n+        assertEquals(msg, ex.getMessage());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorMessageCause(){\n+        String outMsg = \"outer message\";\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        ConvergenceException ex = new ConvergenceException(outMsg, cause);\n+        assertEquals(outMsg, ex.getMessage());\n+        assertEquals(cause, ex.getCause());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testConstructorCause(){\n+        String inMsg = \"inner message\";\n+        Exception cause = new Exception(inMsg);\n+        ConvergenceException ex = new ConvergenceException(cause);\n+        assertEquals(cause, ex.getCause());\n+    }\n+}\n--- a/src/test/org/apache/commons/math/analysis/RealSolverTest.java\n+++ b/src/test/org/apache/commons/math/analysis/RealSolverTest.java\n  * default absolute accuracy of 10E-8 for sinus and the quintic function around\n  * zero, and 5..10 iterations for the other zeros.\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/09/17 19:29:27 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/27 04:13:34 $\n  */\n public final class RealSolverTest extends TestCase {\n \n         // 14 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 15);\n         // Static solve method\n-        result = UnivariateRealSolverUtil.solve(f, -0.2, 0.2);\n-        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n-        result = UnivariateRealSolverUtil.solve(f, -0.1, 0.3);\n+        result = UnivariateRealSolverUtils.solve(f, -0.2, 0.2);\n+        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n+        result = UnivariateRealSolverUtils.solve(f, -0.1, 0.3);\n         Assert.assertEquals(result, 0, 1E-8);\n-        result = UnivariateRealSolverUtil.solve(f, -0.3, 0.45);\n+        result = UnivariateRealSolverUtils.solve(f, -0.3, 0.45);\n         Assert.assertEquals(result, 0, 1E-6);\n-        result = UnivariateRealSolverUtil.solve(f, 0.3, 0.7);\n+        result = UnivariateRealSolverUtils.solve(f, 0.3, 0.7);\n         Assert.assertEquals(result, 0.5, 1E-6);\n-        result = UnivariateRealSolverUtil.solve(f, 0.2, 0.6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.2, 0.6);\n         Assert.assertEquals(result, 0.5, 1E-6);\n-        result = UnivariateRealSolverUtil.solve(f, 0.05, 0.95);\n+        result = UnivariateRealSolverUtils.solve(f, 0.05, 0.95);\n         Assert.assertEquals(result, 0.5, 1E-6);\n-        result = UnivariateRealSolverUtil.solve(f, 0.85, 1.25);\n-        Assert.assertEquals(result, 1.0, 1E-6);\n-        result = UnivariateRealSolverUtil.solve(f, 0.8, 1.2);\n-        Assert.assertEquals(result, 1.0, 1E-6);\n-        result = UnivariateRealSolverUtil.solve(f, 0.85, 1.75);\n-        Assert.assertEquals(result, 1.0, 1E-6);\n-        result = UnivariateRealSolverUtil.solve(f, 0.55, 1.45);\n-        Assert.assertEquals(result, 1.0, 1E-6);\n-        result = UnivariateRealSolverUtil.solve(f, 0.85, 5);\n+        result = UnivariateRealSolverUtils.solve(f, 0.85, 1.25);\n+        Assert.assertEquals(result, 1.0, 1E-6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.8, 1.2);\n+        Assert.assertEquals(result, 1.0, 1E-6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.85, 1.75);\n+        Assert.assertEquals(result, 1.0, 1E-6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.55, 1.45);\n+        Assert.assertEquals(result, 1.0, 1E-6);\n+        result = UnivariateRealSolverUtils.solve(f, 0.85, 5);\n         Assert.assertEquals(result, 1.0, 1E-6);\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+import org.apache.commons.math.MathException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $\n+ */\n+public class UnivariateRealSolverUtilsTest extends TestCase {\n+    /**\n+     * \n+     */\n+    public void testSolveNull(){\n+        try {\n+            UnivariateRealSolverUtils.solve(null, 0.0, 4.0);\n+            fail();\n+        } catch(MathException ex){\n+            fail(\"math exception should no be thrown.\");\n+        } catch(IllegalArgumentException ex){\n+            // success\n+        }\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testSolveSin(){\n+        try {\n+            double x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,\n+                4.0);\n+            assertEquals(Math.PI, x, 1.0e-4);\n+        } catch(MathException ex){\n+            fail(\"math exception should no be thrown.\");\n+        }\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void testSolveAccuracyNull(){\n+        try {\n+            double accuracy = 1.0e-6;\n+            UnivariateRealSolverUtils.solve(null, 0.0, 4.0, accuracy);\n+            fail();\n+        } catch(MathException ex){\n+            fail(\"math exception should no be thrown.\");\n+        } catch(IllegalArgumentException ex){\n+            // success\n+        }\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testSolveAccuracySin(){\n+        try {\n+            double accuracy = 1.0e-6;\n+            double x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,\n+                4.0, accuracy);\n+            assertEquals(Math.PI, x, accuracy);\n+        } catch(MathException ex){\n+            fail(\"math exception should no be thrown.\");\n+        }\n+    }\n+}\n--- a/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/GammaDistributionTest.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/09/17 19:29:30 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/27 04:13:33 $\n  */\n public class GammaDistributionTest extends TestCase {\n-\t/**\n-\t * Constructor for ChiSquareDistributionTest.\n-\t * @param name\n-\t */\n-\tpublic GammaDistributionTest(String name) {\n-\t\tsuper(name);\n-\t}\n-\n     public void testProbabilities(){\n-        testProbability(15.5, 4.0, 2.0, .9499);\n-        testProbability( 0.5, 4.0, 1.0, .0018);\n-        testProbability(10.0, 1.0, 2.0, .9933);\n-        testProbability( 5.0, 2.0, 2.0, .7127);\n+        testProbability(-1.000, 4.0, 2.0, .0000);\n+        testProbability(15.501, 4.0, 2.0, .9499);\n+        testProbability( 0.504, 4.0, 1.0, .0018);\n+        testProbability(10.011, 1.0, 2.0, .9933);\n+        testProbability( 5.000, 2.0, 2.0, .7127);\n     }\n     \n+    public void testValues(){\n+        testValue(15.501, 4.0, 2.0, .9499);\n+        testValue( 0.504, 4.0, 1.0, .0018);\n+        testValue(10.011, 1.0, 2.0, .9933);\n+        testValue( 5.000, 2.0, 2.0, .7127);\n+    }\n+            \n     private void testProbability(double x, double a, double b, double expected){\n         double actual = DistributionFactory.newInstance().createGammaDistribution(a, b).cummulativeProbability(x);\n         assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n     }\n+\n+    private void testValue(double expected, double a, double b, double p){\n+        double actual = DistributionFactory.newInstance().createGammaDistribution(a, b).inverseCummulativeProbability(p);\n+        assertEquals(\"critical value for \" + p, expected, actual, 10e-4);\n+    }\n }\n--- a/src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java\n /**\n  * Test cases for the {@link BeanListUnivariateImpl} class.\n  *\n- * @version $Revision: 1.4 $ $Date: 2003/09/17 19:29:32 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/27 04:13:33 $\n  */\n \n public final class BeanListUnivariateImplTest extends TestCase {\n                       ageU.getMax(), 0.001 );\n \n     }\n+    \n+    public void testSetPropertyName(){\n+        BeanListUnivariateImpl u = new BeanListUnivariateImpl(null);\n+        String expected = \"property\";\n+        u.setPropertyName(expected);\n+        assertEquals(expected, u.getPropertyName());\n+    }\n }\n \n--- a/src/test/org/apache/commons/math/stat/FrequencyTest.java\n+++ b/src/test/org/apache/commons/math/stat/FrequencyTest.java\n  */\n package org.apache.commons.math.stat;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n /**\n  * Test cases for the {@link Frequency} class.\n  *\n- * @version $Revision: 1.2 $ $Date: 2003/07/07 23:19:19 $\n+ * @version $Revision: 1.3 $ $Date: 2003/09/27 04:13:33 $\n  */\n \n public final class FrequencyTest extends TestCase {\n     \n     /** test pcts */\n     public void testPcts() {\n-        Frequency f = new Frequency(\"test counts\"); \n+        Frequency f = new Frequency(\"test pcts\"); \n         f.addValue(oneL);\n         f.addValue(twoL);\n         f.addValue(oneI);\n         assertEquals(\"two pct\",0.25,f.getPct(\"2\"),tolerance);\n         assertEquals(\"foo pct\",0.5,f.getPct(\"foo\"),tolerance);\n         assertEquals(\"bar pct\",0,f.getPct(\"bar\"),tolerance);\n-    }      \n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testToString(){\n+        Frequency f = new Frequency(\"test toString\"); \n+        f.addValue(oneL);\n+        f.addValue(twoL);\n+        f.addValue(oneI);\n+        f.addValue(twoI);\n+        \n+        String s = f.toString();\n+        assertNotNull(s);\n+        BufferedReader reader = new BufferedReader(new StringReader(s));\n+        try {\n+            String line = reader.readLine(); // header line\n+            assertNotNull(line);\n+            \n+            line = reader.readLine(); // one's or two's line\n+            assertNotNull(line);\n+                        \n+            line = reader.readLine(); // one's or two's line\n+            assertNotNull(line);\n+\n+            line = reader.readLine(); // no more elements\n+            assertNull(line);\n+        } catch(IOException ex){\n+            fail(ex.getMessage());\n+        }        \n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testSetName(){\n+        String name = \"name\";\n+        Frequency f = new Frequency();\n+        f.setName(name);\n+        assertEquals(name, f.getName());\n+    }              \n }\n \n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/BeanTransformerTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.util;\n+\n+import org.apache.commons.math.TestUtils;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $\n+ */\n+public class BeanTransformerTest extends TestCase {\n+    \n+    /**\n+     *\n+     */\n+    public void testConstructor(){\n+        BeanTransformer b = new BeanTransformer();\n+        assertNull(b.getPropertyName());\n+    }\n+    \n+    /**\n+     *\n+     */\n+    public void testConstructorString(){\n+        String name = \"property\";\n+        BeanTransformer b = new BeanTransformer(name);\n+        assertEquals(name, b.getPropertyName());\n+    }\n+    \n+    /**\n+     *\n+     */\n+    public void testSetPropertyName(){\n+        String name = \"property\";\n+        BeanTransformer b = new BeanTransformer();\n+        b.setPropertyName(name);\n+        assertEquals(name, b.getPropertyName());\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformNoSuchMethod(){\n+        BeanTransformer b = new BeanTransformer(\"z\");\n+        TestBean target = new TestBean();\n+        double value = b.transform(target);\n+        TestUtils.assertEquals(Double.NaN, value, 1.0e-2);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransform(){\n+        BeanTransformer b = new BeanTransformer(\"x\");\n+        TestBean target = new TestBean();\n+        double value = b.transform(target);\n+        TestUtils.assertEquals(1.0, value, 1.0e-2);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformInvocationError(){\n+        BeanTransformer b = new BeanTransformer(\"z\");\n+        TestBean target = new TestBean();\n+        double value = b.transform(target);\n+        TestUtils.assertEquals(Double.NaN, value, 1.0e-2);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformInvalidType(){\n+        BeanTransformer b = new BeanTransformer(\"y\");\n+        TestBean target = new TestBean();\n+        try {\n+            b.transform(target);\n+            fail();\n+        } catch(ClassCastException ex){\n+            // success\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/DefaultTransformerTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.util;\n+\n+import java.math.BigDecimal;\n+\n+import org.apache.commons.math.TestUtils;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $\n+ */\n+public class DefaultTransformerTest extends TestCase {\n+    /**\n+     * \n+     */\n+    public void testTransformDouble(){\n+        double expected = 1.0;\n+        Double input = new Double(expected);\n+        DefaultTransformer t = new DefaultTransformer();\n+        assertEquals(expected, t.transform(input), 1.0e-4);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformNull(){\n+        double expected = Double.NaN;\n+        DefaultTransformer t = new DefaultTransformer();\n+        TestUtils.assertEquals(expected, t.transform(null), 1.0e-4);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformInteger(){\n+        double expected = 1.0;\n+        Integer input = new Integer(1);\n+        DefaultTransformer t = new DefaultTransformer();\n+        assertEquals(expected, t.transform(input), 1.0e-4);\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testTransformBigDecimal(){\n+        double expected = 1.0;\n+        BigDecimal input = new BigDecimal(\"1.0\");\n+        DefaultTransformer t = new DefaultTransformer();\n+        assertEquals(expected, t.transform(input), 1.0e-4);\n+    }        \n+    \n+    /**\n+     * \n+     */\n+    public void testTransformString(){\n+        double expected = 1.0;\n+        String input = \"1.0\";\n+        DefaultTransformer t = new DefaultTransformer();\n+        assertEquals(expected, t.transform(input), 1.0e-4);\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformObject(){\n+        double expected = Double.NaN;\n+        Boolean input = Boolean.TRUE;\n+        DefaultTransformer t = new DefaultTransformer();\n+        TestUtils.assertEquals(expected, t.transform(input), 1.0e-4);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/TestBean.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.util;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $\n+ */\n+public class TestBean {\n+    private Double x = new Double(1.0);\n+    \n+    private String y = \"1.0\";\n+    \n+    private Double z = new Double(2.0);\n+    \n+    /**\n+     * \n+     */\n+    public Double getX() {\n+        return x;\n+    }\n+\n+    /**\n+     * \n+     */\n+    public String getY() {\n+        return y;\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void setX(Double double1) {\n+        x = double1;\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void setY(String string) {\n+        y = string;\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public Double getZ() {\n+        throw new RuntimeException();\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void setZ(Double double1) {\n+        z = double1;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/util/TransformerMapTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math.util;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/09/27 04:13:34 $\n+ */\n+public class TransformerMapTest extends TestCase {\n+    /**\n+     * \n+     */\n+    public void testPutTransformer(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        \n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertEquals(expected, map.getTransformer(TransformerMapTest.class));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testContainsClass(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertTrue(map.containsClass(TransformerMapTest.class));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testContainsTransformer(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertTrue(map.containsTransformer(expected));\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void testRemoveTransformer(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        \n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertTrue(map.containsClass(TransformerMapTest.class));\n+        assertTrue(map.containsTransformer(expected));\n+        map.removeTransformer(TransformerMapTest.class);\n+        assertFalse(map.containsClass(TransformerMapTest.class));\n+        assertFalse(map.containsTransformer(expected));\n+    }\n+\n+    /**\n+     * \n+     */\n+    public void testClear(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        \n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertTrue(map.containsClass(TransformerMapTest.class));\n+        map.clear();\n+        assertFalse(map.containsClass(TransformerMapTest.class));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testClasses(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertTrue(map.classes().contains(TransformerMapTest.class));\n+    }\n+    \n+    /**\n+     * \n+     */\n+    public void testTransformers(){\n+        NumberTransformer expected = new DefaultTransformer();\n+        TransformerMap map = new TransformerMap();\n+        map.putTransformer(TransformerMapTest.class, expected);\n+        assertTrue(map.transformers().contains(expected));\n+    }\n+}", "timestamp": 1064636014, "metainfo": ""}