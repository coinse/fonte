{"sha": "fc21b26f84312e4f75e8b144238618c73a8b091f", "log": "Modified getSumSquaredErrors method in SimpleRegression to always  return a non-negative result. JIRA: MATH-85 Reported by Mark Osborn Patched by Luc Maisonobe   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n      * sum of squared errors</a> (SSE) associated with the regression \n      * model.\n      * <p>\n+     * The sum is computed using the computational formula\n+     * <p>\n+     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n+     * <p>\n+     * where <code>SYY</code> is the sum of the squared deviations of the y\n+     * values about their mean, <code>SXX</code> is similarly defined and\n+     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n+     * <p>\n+     * The sums are accumulated using the updating algorithm referenced in \n+     * {@link #addData}.  \n+     * <p>\n+     * The return value is constrained to be non-negative - i.e., if due to \n+     * rounding errors the computational formula returns a negative result, \n+     * 0 is returned.\n+     * <p>\n      * <strong>Preconditions</strong>: <ul>\n      * <li>At least two observations (with at least two different x values)\n      * must have been added before invoking this method. If this method is \n      * @return sum of squared errors associated with the regression model\n      */\n     public double getSumSquaredErrors() {\n-        return sumYY - sumXY * sumXY / sumXX;\n+        return Math.max(0d, sumYY - sumXY * sumXY / sumXX);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n+++ b/src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java\n         }\n         assertEquals(0.0, regression.getSignificance(), 1.0e-5);\n         assertTrue(regression.getSlope() > 0.0);\n+        assertTrue(regression.getSumSquaredErrors() >= 0.0);\n     }\n \n     public void testPerfectNegative() throws Exception {\n         assertTrue( 0.0 < regression.getSignificance()\n                     && regression.getSignificance() < 1.0);       \n     }\n+    \n+    \n+    // Jira MATH-85 = Bugzilla 39432\n+    public void testSSENonNegative() {\n+        double[] y = { 8915.102, 8919.302, 8923.502 };\n+        double[] x = { 1.107178495E2, 1.107264895E2, 1.107351295E2 };\n+        SimpleRegression reg = new SimpleRegression();\n+        for (int i = 0; i < x.length; i++) {\n+            reg.addData(x[i], y[i]);\n+        }\n+        assertTrue(reg.getSumSquaredErrors() >= 0.0);\n+    } \n }", "timestamp": 1152162649, "metainfo": ""}