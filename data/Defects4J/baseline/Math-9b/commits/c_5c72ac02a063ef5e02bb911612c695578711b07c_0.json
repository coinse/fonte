{"sha": "5c72ac02a063ef5e02bb911612c695578711b07c", "log": "Added toDegrees and toRadians to DerivativeStructure.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n         return result;\n     }\n \n+    /** Convert radians to degrees, with error of less than 0.5 ULP\n+     *  @return instance converted into degrees\n+     */\n+    public DerivativeStructure toDegrees() {\n+        final DerivativeStructure ds = new DerivativeStructure(compiler);\n+        for (int i = 0; i < ds.data.length; ++i) {\n+            ds.data[i] = FastMath.toDegrees(data[i]);\n+        }\n+        return ds;\n+    }\n+\n+    /** Convert degrees to radians, with error of less than 0.5 ULP\n+     *  @return instance converted into radians\n+     */\n+    public DerivativeStructure toRadians() {\n+        final DerivativeStructure ds = new DerivativeStructure(compiler);\n+        for (int i = 0; i < ds.data.length; ++i) {\n+            ds.data[i] = FastMath.toRadians(data[i]);\n+        }\n+        return ds;\n+    }\n+\n     /** Evaluate Taylor expansion a derivative structure.\n      * @param delta parameters offsets (&Delta;x, &Delta;y, ...)\n      * @return value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n     }\n \n     @Test\n+    public void testToDegreesDefinition() {\n+        double epsilon = 3.0e-16;\n+        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n+            for (double x = 0.1; x < 1.2; x += 0.001) {\n+                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n+                Assert.assertEquals(FastMath.toDegrees(x), dsX.toDegrees().getValue(), epsilon);\n+                for (int n = 1; n <= maxOrder; ++n) {\n+                    if (n == 1) {\n+                        Assert.assertEquals(180 / FastMath.PI, dsX.toDegrees().getPartialDerivative(1), epsilon);\n+                    } else {\n+                        Assert.assertEquals(0.0, dsX.toDegrees().getPartialDerivative(n), epsilon);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testToRadiansDefinition() {\n+        double epsilon = 3.0e-16;\n+        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n+            for (double x = 0.1; x < 1.2; x += 0.001) {\n+                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n+                Assert.assertEquals(FastMath.toRadians(x), dsX.toRadians().getValue(), epsilon);\n+                for (int n = 1; n <= maxOrder; ++n) {\n+                    if (n == 1) {\n+                        Assert.assertEquals(FastMath.PI / 180, dsX.toRadians().getPartialDerivative(1), epsilon);\n+                    } else {\n+                        Assert.assertEquals(0.0, dsX.toRadians().getPartialDerivative(n), epsilon);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testDegRad() {\n+        double epsilon = 3.0e-16;\n+        for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {\n+            for (double x = 0.1; x < 1.2; x += 0.001) {\n+                DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);\n+                DerivativeStructure rebuiltX = dsX.toDegrees().toRadians();\n+                DerivativeStructure zero = rebuiltX.subtract(dsX);\n+                for (int n = 0; n <= maxOrder; ++n) {\n+                    Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n     public void testField() {\n         for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n             DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);", "timestamp": 1345111697, "metainfo": ""}