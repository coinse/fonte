{"sha": "a5d8d115cb85149c62059a23e8f4d318cac0e903", "log": "[MATH-776] Use same range check in ctor as in setter for ElitisticListPopulation. Thanks to Reid Hochstedler  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n import org.apache.commons.math3.util.FastMath;\n \n /**\n- * Population of chromosomes which uses elitism (certain percentace of the best\n+ * Population of chromosomes which uses elitism (certain percentage of the best\n  * chromosomes is directly copied to the next generation).\n  *\n  * @version $Id$\n      * @param populationLimit maximal size of the population\n      * @param elitismRate how many best chromosomes will be directly transferred to the\n      *                    next generation [in %]\n+     * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range\n      */\n     public ElitisticListPopulation(final List<Chromosome> chromosomes,\n                                    final int populationLimit,\n                                    final double elitismRate) {\n         super(chromosomes, populationLimit);\n-        this.elitismRate = elitismRate;\n+        setElitismRate(elitismRate);\n     }\n \n     /**\n      * @param populationLimit maximal size of the population\n      * @param elitismRate how many best chromosomes will be directly transferred to the\n      *                    next generation [in %]\n+     * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range\n      */\n     public ElitisticListPopulation(final int populationLimit, final double elitismRate) {\n         super(populationLimit);\n-        this.elitismRate = elitismRate;\n+        setElitismRate(elitismRate);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java\n+++ b/src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java\n package org.apache.commons.math3.genetics;\n \n \n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.math3.exception.OutOfRangeException;\n import org.junit.Assert;\n import org.junit.Test;\n \n \n         Assert.assertEquals(20, nextGeneration.getPopulationSize());\n     }\n+    \n+    @Test\n+    public void testSetElitismRate() {\n+        final double rate = 0.25;\n+        final ElitisticListPopulation pop = new ElitisticListPopulation(100, 0.203);\n+        pop.setElitismRate(rate);\n+        Assert.assertEquals(rate, pop.getElitismRate(), 1e-6);\n+    }\n+    \n+    @Test(expected = OutOfRangeException.class)\n+    public void testSetElitismRateTooLow() {\n+        final double rate = -0.25;\n+        final ElitisticListPopulation pop = new ElitisticListPopulation(100, 0.203);\n+        pop.setElitismRate(rate);\n+    }\n+    \n+    @Test(expected = OutOfRangeException.class)\n+    public void testSetElitismRateTooHigh() {\n+        final double rate = 1.25;\n+        final ElitisticListPopulation pop = new ElitisticListPopulation(100, 0.203);\n+        pop.setElitismRate(rate);\n+    }\n+    \n+    @Test(expected = OutOfRangeException.class)\n+    public void testConstructorTooLow() {\n+        final double rate = -0.25;\n+        new ElitisticListPopulation(100, rate);\n+    }\n+    \n+    @Test(expected = OutOfRangeException.class)\n+    public void testConstructorTooHigh() {\n+        final double rate = 1.25;\n+        new ElitisticListPopulation(100, rate);\n+    }\n+\n+    @Test(expected = OutOfRangeException.class)\n+    public void testChromosomeListConstructorTooLow() {\n+        final List<Chromosome> chromosomes = Collections.emptyList();\n+        final double rate = -0.25;\n+        new ElitisticListPopulation(chromosomes, 100, rate);\n+    }\n+\n+    @Test(expected = OutOfRangeException.class)\n+    public void testChromosomeListConstructorTooHigh() {\n+        final List<Chromosome> chromosomes = Collections.emptyList();\n+        final double rate = 1.25;\n+        new ElitisticListPopulation(chromosomes, 100, rate);\n+    }\n \n     private static class DummyChromosome extends Chromosome {\n         private final int fitness;", "timestamp": 1333392402, "metainfo": ""}