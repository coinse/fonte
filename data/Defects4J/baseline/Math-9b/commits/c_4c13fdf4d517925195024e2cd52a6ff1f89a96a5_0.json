{"sha": "4c13fdf4d517925195024e2cd52a6ff1f89a96a5", "log": "Changed the default max growth factor for multistep methods using Nordsieck representation. The previous value (10.0) was far too big and lead to numerical instability at high orders because the last component of the Nordsieck vector, which has a low accuracy, could be multiplied by 10^k which was ... huge.  These integrators are at least usable now!  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/MultistepIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/MultistepIntegrator.java\n /**\n  * This class is the base class for multistep integrators for Ordinary\n  * Differential Equations.\n+ * <p>We define scaled derivatives s<sub>i</sub>(n) at step n as:\n+ * <pre>\n+ * s<sub>1</sub>(n) = h y'<sub>n</sub> for first derivative\n+ * s<sub>2</sub>(n) = h<sup>2</sup>/2 y''<sub>n</sub> for second derivative\n+ * s<sub>3</sub>(n) = h<sup>3</sup>/6 y'''<sub>n</sub> for third derivative\n+ * ...\n+ * s<sub>k</sub>(n) = h<sup>k</sup>/k! y(k)<sub>n</sub> for k<sup>th</sup> derivative\n+ * </pre></p>\n+ * <p>Rather than storing several previous steps separately, this implementation uses\n+ * the Nordsieck vector with higher degrees scaled derivatives all taken at the same\n+ * step (y<sub>n</sub>, s<sub>1</sub>(n) and r<sub>n</sub>) where r<sub>n</sub> is defined as:\n+ * <pre>\n+ * r<sub>n</sub> = [ s<sub>2</sub>(n), s<sub>3</sub>(n) ... s<sub>k</sub>(n) ]<sup>T</sup>\n+ * </pre>\n+ * (we omit the k index in the notation for clarity)</p>\n+ * <p>\n+ * Multistep integrators with Nordsieck representation are highly sensitive to\n+ * large step changes because when the step is multiplied by a factor a, the\n+ * k<sup>th</sup> component of the Nordsieck vector is multiplied by a<sup>k</sup>\n+ * and the last components are the least accurate ones. The default max growth\n+ * factor is therefore set to a quite low value: 2<sup>1/order</sup>.\n+ * </p>\n  *\n  * @see org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator\n  * @see org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator\n      * <p>The default starter integrator is set to the {@link\n      * DormandPrince853Integrator Dormand-Prince 8(5,3)} integrator with\n      * some defaults settings.</p>\n+     * <p>\n+     * The default max growth factor is set to a quite low value: 2<sup>1/order</sup>.\n+     * </p>\n      * @param name name of the method\n      * @param nSteps number of steps of the multistep method\n      * (excluding the one being computed)\n         // set the default values of the algorithm control parameters\n         setSafety(0.9);\n         setMinReduction(0.2);\n-        setMaxGrowth(10.0);\n+        setMaxGrowth(Math.pow(2.0, -exp));\n \n     }\n \n      * <p>The default starter integrator is set to the {@link\n      * DormandPrince853Integrator Dormand-Prince 8(5,3)} integrator with\n      * some defaults settings.</p>\n+     * <p>\n+     * The default max growth factor is set to a quite low value: 2<sup>1/order</sup>.\n+     * </p>\n      * @param name name of the method\n      * @param nSteps number of steps of the multistep method\n      * (excluding the one being computed)\n         // set the default values of the algorithm control parameters\n         setSafety(0.9);\n         setMinReduction(0.2);\n-        setMaxGrowth(10.0);\n+        setMaxGrowth(Math.pow(2.0, -exp));\n \n     }\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n         throws DerivativeException, IntegratorException {\n \n         int previousCalls = Integer.MAX_VALUE;\n-        for (int i = -12; i < -2; ++i) {\n+        for (int i = -12; i < -5; ++i) {\n             TestProblem1 pb = new TestProblem1();\n             double minStep = 0;\n             double maxStep = pb.getFinalTime() - pb.getInitialTime();\n                             pb.getInitialTime(), pb.getInitialState(),\n                             pb.getFinalTime(), new double[pb.getDimension()]);\n \n-            // the 33 and 45 factors are only valid for this test\n+            // the 31 and 36 factors are only valid for this test\n             // and has been obtained from trial and error\n             // there is no general relation between local and global errors\n-            assertTrue(handler.getMaximalValueError() > (33.0 * scalAbsoluteTolerance));\n-            assertTrue(handler.getMaximalValueError() < (45.0 * scalAbsoluteTolerance));\n+            assertTrue(handler.getMaximalValueError() > (31.0 * scalAbsoluteTolerance));\n+            assertTrue(handler.getMaximalValueError() < (36.0 * scalAbsoluteTolerance));\n             assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);\n \n             int calls = pb.getCalls();\n             if (nSteps < 4) {\n                 assertTrue(integ.getEvaluations() > 160);\n             } else {\n-                assertTrue(integ.getEvaluations() < 70);\n+                assertTrue(integ.getEvaluations() < 80);\n             }\n         }\n \n--- a/src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n                             pb.getInitialTime(), pb.getInitialState(),\n                             pb.getFinalTime(), new double[pb.getDimension()]);\n \n-            // the 0.4 and 3.0 factors are only valid for this test\n+            // the 0.15 and 3.0 factors are only valid for this test\n             // and has been obtained from trial and error\n             // there is no general relation between local and global errors\n-            assertTrue(handler.getMaximalValueError() > (0.4 * scalAbsoluteTolerance));\n+            assertTrue(handler.getMaximalValueError() > (0.15 * scalAbsoluteTolerance));\n             assertTrue(handler.getMaximalValueError() < (3.0 * scalAbsoluteTolerance));\n             assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);\n \n             if (nSteps < 4) {\n                 assertTrue(integ.getEvaluations() > 150);\n             } else {\n-                assertTrue(integ.getEvaluations() < 90);\n+                assertTrue(integ.getEvaluations() < 100);\n             }\n         }\n ", "timestamp": 1247941296, "metainfo": ""}