{"sha": "f1d07456129660bc84e7ec286aa3466cab3308c2", "log": "Differentiable function can trigger any MathIllegalArgumentException.  One very important case corresponds to an unsupported derivation order. The order is not enforced in the API, but is specified as the properties of the DerivativeStructure argument, as well as the number of free parameters. Some functions have no limitation on this order (typically functions implemented using only the DerivativeStructure API), but some functions may limit the derivation order to 1 or 2 as they implement the differentiation themselves or through finite differences.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/MultivariateDifferentiableFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/MultivariateDifferentiableFunction.java\n package org.apache.commons.math3.analysis.differentiation;\n \n import org.apache.commons.math3.analysis.MultivariateFunction;\n-import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n \n /**\n      *\n      * @param point Point at which the function must be evaluated.\n      * @return the function value for the given point.\n-     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n-     * if the parameter's dimension is wrong for the function being evaluated.\n-     * @throws  org.apache.commons.math3.exception.MathIllegalArgumentException\n-     * when the activated method itself can ascertain that preconditions,\n-     * specified in the API expressed at the level of the activated method,\n-     * have been violated.  In the vast majority of cases where Commons Math\n-     * throws this exception, it is the result of argument checking of actual\n-     * parameters immediately passed to a method.\n+     * @exception MathIllegalArgumentException if {@code point} does not\n+     * fulfill functions constraints (wrong dimension, argument out of bound,\n+     * or unsupported derivative order for example)\n      */\n     DerivativeStructure value(DerivativeStructure[] point)\n-        throws DimensionMismatchException, MathIllegalArgumentException;\n+        throws MathIllegalArgumentException;\n \n }\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/MultivariateDifferentiableVectorFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/MultivariateDifferentiableVectorFunction.java\n package org.apache.commons.math3.analysis.differentiation;\n \n import org.apache.commons.math3.analysis.MultivariateVectorFunction;\n-import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n \n \n /**\n      * Compute the value for the function at the given point.\n      * @param point point at which the function must be evaluated\n      * @return function value for the given point\n-     * @exception DimensionMismatchException if points dimension is wrong\n+     * @exception MathIllegalArgumentException if {@code point} does not\n+     * fulfill functions constraints (wrong dimension, argument out of bound,\n+     * or unsupported derivative order for example)\n      */\n     DerivativeStructure[] value(DerivativeStructure[] point)\n-        throws DimensionMismatchException;\n+        throws MathIllegalArgumentException;\n \n }\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiableFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiableFunction.java\n package org.apache.commons.math3.analysis.differentiation;\n \n import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n \n /** Interface for univariate functions derivatives.\n  * <p>This interface represents a simple function which computes\n      * value and the first derivative of the function.</p>\n      * @param t function input value\n      * @return function result\n+     * @exception MathIllegalArgumentException if {@code t} does not\n+     * fulfill functions constraints (argument out of bound, or unsupported\n+     * derivative order for example)\n      */\n-    DerivativeStructure value(DerivativeStructure t);\n+    DerivativeStructure value(DerivativeStructure t) throws MathIllegalArgumentException;\n \n }\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiableMatrixFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiableMatrixFunction.java\n package org.apache.commons.math3.analysis.differentiation;\n \n import org.apache.commons.math3.analysis.UnivariateMatrixFunction;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n \n /**\n  * Extension of {@link UnivariateMatrixFunction} representing a univariate differentiable matrix function.\n      * Compute the value for the function.\n      * @param x the point for which the function value should be computed\n      * @return the value\n+     * @exception MathIllegalArgumentException if {@code x} does not\n+     * fulfill functions constraints (argument out of bound, or unsupported\n+     * derivative order for example)\n      */\n-    DerivativeStructure[][] value(DerivativeStructure x);\n+    DerivativeStructure[][] value(DerivativeStructure x) throws MathIllegalArgumentException;\n \n }\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiableVectorFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiableVectorFunction.java\n package org.apache.commons.math3.analysis.differentiation;\n \n import org.apache.commons.math3.analysis.UnivariateVectorFunction;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n \n /**\n  * Extension of {@link UnivariateVectorFunction} representing a univariate differentiable vectorial function.\n      * Compute the value for the function.\n      * @param x the point for which the function value should be computed\n      * @return the value\n+     * @exception MathIllegalArgumentException if {@code x} does not\n+     * fulfill functions constraints (argument out of bound, or unsupported\n+     * derivative order for example)\n      */\n-    DerivativeStructure[] value(DerivativeStructure x);\n+    DerivativeStructure[] value(DerivativeStructure x) throws MathIllegalArgumentException;\n \n }", "timestamp": 1347903684, "metainfo": ""}