{"sha": "559bd2d87c475aeca2b312a4e6866b91857c4afe", "log": "Removed entry mutators, making BigMatrix instances immutable (like RealMatrix).   ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/BigMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrix.java\n  * Matrix element indexing is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.\n  *\n- * @version $Revision: 1.8 $ $Date: 2004/10/25 02:21:20 $\n+ * @version $Revision: 1.9 $ $Date: 2004/10/25 03:12:28 $\n  */\n public interface BigMatrix {\n \n      * @return    2-dimensional array of entries\n      */\n     double [][] getDataAsDoubleArray();\n-\n-    /**\n-     * Overwrites the underlying data for the matrix with\n-     * a fresh copy of <code>data</code>.\n-     *\n-     * @param  data  2-dimensional array of entries\n-     */\n-    void setData(BigDecimal[][] data);\n-\n-    /**\n-     * Overwrites the underlying data for the matrix with\n-     * a fresh copy of <code>data</code>.\n-     *\n-     * @param  data  2-dimensional array of entries\n-     */\n-    void setData(double[][] data);\n-    \n-    /**\n-     * Overwrites the underlying data for the matrix with\n-     * <code>BigDecimal</code> entries with values represented by the strings\n-     * in <code>data</code>.\n-     *\n-     * @param  data  2-dimensional array of entries\n-     * @throws NumberFormatException if any of the entries in <code>data</code>\n-     *    are not valid representations of <code>BigDecimal</code> values\n-     */\n-    void setData(String[][] data);\n-\n-    /***\n-     * Sets the rounding mode to use when dividing values\n-     * @see java.math.BigDecimal\n-     * @param roundingMode\n-     */\n-    void setRoundingMode(int roundingMode);\n \n     /***\n      * Gets the rounding mode\n     double getEntryAsDouble(int row, int column) throws MatrixIndexException;\n \n     /**\n-     * Sets the entry in the specified row and column to the specified value.\n-     * <p>\n-     * Row and column indices start at 0 and must satisfy \n-     * <ul>\n-     * <li><code>0 <= row < rowDimension</code></li>\n-     * <li><code> 0 <= column < columnDimension</code></li>\n-     * </ul>\n-     * otherwise a <code>MatrixIndexException</code> is thrown.\n-     * \n-     * @param row    row location of entry to be set \n-     * @param column    column location of entry to be set\n-     * @param value  value to set \n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the row\n-     * or column index is not valid\n-     */\n-    void setEntry(int row, int column, BigDecimal value)\n-        throws MatrixIndexException;\n-    \n-    /**\n-     * Sets the entry in the specified row and column to the specified value.\n-     * <p>\n-     * Row and column indices start at 0 and must satisfy \n-     * <ul>\n-     * <li><code>0 <= row < rowDimension</code></li>\n-     * <li><code> 0 <= column < columnDimension</code></li>\n-     * </ul>\n-     * otherwise a <code>MatrixIndexException</code> is thrown.\n-     * \n-     * @param row    row location of entry to be set \n-     * @param column    column location of entry to be set\n-     * @param value  value to set \n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the row\n-     * or column index is not valid\n-     */\n-    void setEntry(int row, int column, double value)\n-        throws MatrixIndexException;\n-    \n-    /**\n-     * Sets the entry in the specified row and column to the \n-     * <code>BigDecimal</code> value represented by the input string.\n-     * <p>\n-     * Row and column indices start at 0 and must satisfy \n-     * <ul>\n-     * <li><code>0 <= row < rowDimension</code></li>\n-     * <li><code> 0 <= column < columnDimension</code></li>\n-     * </ul>\n-     * otherwise a <code>MatrixIndexException</code> is thrown.\n-     * \n-     * @param row  row location of entry to be set\n-     * @param column  column location of entry to be set\n-     * @param value  value to set\n-     * @throws org.apache.commons.math.linear.MatrixIndexException if the \n-     *     row or column index is not valid\n-     * @throws NumberFormatException if <code>value</code> is not a valid\n-     *     representation of a <code>BigDecimal</code> value\n-     */\n-    void setEntry(int row, int column, String value)\n-    throws MatrixIndexException;\n-\n-    /**\n      * Returns the transpose of this matrix.\n      *\n      * @return transpose matrix\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n  * As specified in the {@link BigMatrix} interface, matrix element indexing\n  * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n  * returns the element in the first row, first column of the matrix.</li></ul>\n- * @version $Revision: 1.7 $ $Date: 2004/10/25 02:21:20 $\n+ * @version $Revision: 1.8 $ $Date: 2004/10/25 03:12:28 $\n  */\n public class BigMatrixImpl implements BigMatrix, Serializable {\n     \n     }\n     \n     /**\n-     * Overwrites the underlying data for the matrix\n-     * with a fresh copy of <code>inData</code>.\n-     *\n-     * @param  inData 2-dimensional array of entries\n-     */\n-    public void setData(BigDecimal[][] inData) {\n-        copyIn(inData);\n-        lu = null;\n-    }\n-    \n-    /**\n-     * Overwrites the underlying data for the matrix\n-     * with a fresh copy of <code>inData</code>.\n-     *\n-     * @param  inData 2-dimensional array of entries\n-     */\n-    public void setData(double[][] inData) {\n-        copyIn(inData);\n-        lu = null;\n-    }\n-    \n-    /**\n-     * Overwrites the underlying data for the matrix with\n-     * <code>BigDecimal</code> entries with values represented by the strings\n-     * in <code>data</code>.\n-     *\n-     * @param  data  2-dimensional array of entries\n-     * @throws NumberFormatException if any of the entries in <code>data</code>\n-     *    are not valid representations of <code>BigDecimal</code> values\n-     */\n-    public void setData(String[][] data) {\n-        copyIn(data);\n-        lu = null;\n-    }\n-    \n-    /**\n      * Returns a reference to the underlying data array.\n      * <p>\n      * Does not make a fresh copy of the underlying data.\n      */\n     public BigDecimal[][] getDataRef() {\n         return data;\n-    }\n-    \n-    /**\n-     * Overwrites the underlying data for the matrix\n-     * with a reference to <code>inData</code>.\n-     * <p>\n-     * Does not make a fresh copy of <code>data</code>.\n-     *\n-     * @param  inData 2-dimensional array of entries\n-     */\n-    public void setDataRef(BigDecimal[][] inData) {\n-        this.data = inData;\n-        lu = null;\n     }\n     \n     /***\n      */\n     public double getEntryAsDouble(int row, int column) throws MatrixIndexException {\n         return getEntry(row,column).doubleValue();\n-    }\n-    \n-    /**\n-     * Sets the entry in the specified row and column to the specified value.\n-     * <p>\n-     * Row and column indices start at 0 and must satisfy \n-     * <ul>\n-     * <li><code>0 <= row < rowDimension</code></li>\n-     * <li><code> 0 <= column < columnDimension</code></li>\n-     * </ul>\n-     * otherwise a <code>MatrixIndexException</code> is thrown.\n-     * \n-     * @param row    row location of entry to be set \n-     * @param column    column location of entry to be set\n-     * @param value  value to set \n-     * @throws MatrixIndexException if the row or column index is not valid\n-     */\n-    public void setEntry(int row, int column, BigDecimal value)\n-    throws MatrixIndexException {\n-        if (!isValidCoordinate(row,column)) {\n-            throw new MatrixIndexException(\"matrix entry does not exist\");\n-        }\n-        data[row][column] = value;\n-        lu = null;\n-    }\n-    \n-    /**\n-     * Sets the entry in the specified row and column to the specified value.\n-     * <p>\n-     * Row and column indices start at 0 and must satisfy \n-     * <ul>\n-     * <li><code>0 <= row < rowDimension</code></li>\n-     * <li><code> 0 <= column < columnDimension</code></li>\n-     * </ul>\n-     * otherwise a <code>MatrixIndexException</code> is thrown.\n-     * \n-     * @param row    row location of entry to be set \n-     * @param column    column location of entry to be set\n-     * @param value  value to set \n-     * @throws MatrixIndexException if the row or column index is not valid\n-     */\n-    public void setEntry(int row, int column, double value) throws MatrixIndexException {\n-        setEntry(row, column, new BigDecimal(value));\n-    }\n-    \n-     /**\n-     * Sets the entry in the specified row and column to the \n-     * <code>BigDecimal</code> value represented by the input string.\n-     * <p>\n-     * Row and column indices start at 0 and must satisfy \n-     * <ul>\n-     * <li><code>0 <= row < rowDimension</code></li>\n-     * <li><code> 0 <= column < columnDimension</code></li>\n-     * </ul>\n-     * otherwise a <code>MatrixIndexException</code> is thrown.\n-     * \n-     * @param row  row location of entry to be set\n-     * @param column  column location of entry to be set\n-     * @param value  value to set\n-     * @throws MatrixIndexException if the row or column index is not valid\n-     * @throws NumberFormatException if <code>value</code> is not a valid\n-     *     representation of a <code>BigDecimal</code> value\n-     */\n-    public void setEntry(int row, int column, String value) throws MatrixIndexException {\n-        setEntry(row, column, new BigDecimal(value));\n     }\n     \n     /**", "timestamp": 1098673948, "metainfo": ""}