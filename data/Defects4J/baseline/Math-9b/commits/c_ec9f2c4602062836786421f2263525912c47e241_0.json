{"sha": "ec9f2c4602062836786421f2263525912c47e241", "log": "removed a Math.min computation that could be avoided improved javadoc   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java\n     /**\n      * Verifies that the interpolation arrays are valid.\n      * <p>\n+     * The arrays features checked by this method are that both arrays have the\n+     * same length and this length is at least 2.\n+     * </p>\n+     * <p>\n      * The interpolating points must be distinct. However it is not\n-     * verified here, it is checked in evaluate() and computeCoefficients().</p>\n+     * verified here, it is checked in evaluate() and computeCoefficients().\n+     * </p>\n      *\n      * @param x the interpolating points array\n      * @param y the interpolating values array\n      * @see #evaluate(double[], double[], double)\n      * @see #computeCoefficients()\n      */\n-    public static void verifyInterpolationArray(double x[], double y[]) throws\n-        IllegalArgumentException {\n-\n-        if (Math.min(x.length, y.length) < 2) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"{0} points are required, got only {1}\",\n-                  2, Math.min(x.length, y.length));\n-        }\n+    public static void verifyInterpolationArray(double x[], double y[])\n+        throws IllegalArgumentException {\n+\n         if (x.length != y.length) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"dimension mismatch {0} != {1}\", x.length, y.length);\n         }\n+\n+        if (x.length < 2) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                  \"{0} points are required, got only {1}\", 2, x.length);\n+        }\n+\n     }\n }", "timestamp": 1255677176, "metainfo": ""}