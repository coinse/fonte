{"sha": "d79f686403d6779e30635649c15f5646423c2b2d", "log": "Patch adds getSkewness and getKurtosis to Univariate and an implimentation in UnivariateImpl. It also adds test for NaN and 0.0 to UnivariateImplTest  PR: Issue 20250 Obtained from: Bugzilla Submitted by: Mark Diggory Reviewed by: Tim O'Brien   ", "commit": "\n--- a/src/java/org/apache/commons/math/Univariate.java\n+++ b/src/java/org/apache/commons/math/Univariate.java\n  * @author Phil Steitz\n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n  * @author Mark Diggory\n- * @version $Revision: 1.7 $ $Date: 2003/05/26 17:40:20 $\n+ * @version $Revision: 1.8 $ $Date: 2003/05/29 19:49:18 $\n  * \n */\n public interface Univariate {\n      */\n     abstract double getStandardDeviation();\n \n+\t/**\n+     * Returns the skewness of a given distribution.  Skewness is a \n+     * measure of the assymetry of a given distribution. <p>\n+\t * Double.NaN is returned for an empty set of values and 0.0 is \n+\t * returned for a value set &lt;=2. \n+\t * \n+\t * @return Value of property skewness.\n+\t */\n+\tabstract double getSkewness();\n+\t\n+\t/**\n+     * Returns the Kurtosis of the available values. Kurtosis is a \n+     * measure of the \"peakedness\" of a distribution <p>\n+     * Double.NaN is returned for an empty set of values and 0.0 is \n+     * returned for a value set &lt;=3. \n+     * \n+     * @return Value of property kurtosis.\n+\t */\n+\tabstract double getKurtosis();\n+\t\t\n     /** \n      * Returns the maximum of the available values <p>\n      * Double.NaN is returned in no values have been added\n--- a/src/java/org/apache/commons/math/UnivariateImpl.java\n+++ b/src/java/org/apache/commons/math/UnivariateImpl.java\n  * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n  * @author Mark Diggory\n  * @author Brent Worden\n- * @version $Revision: 1.8 $ $Date: 2003/05/26 17:40:20 $\n+ * @version $Revision: 1.9 $ $Date: 2003/05/29 19:49:18 $\n  * \n */\n public class UnivariateImpl implements Univariate, Serializable {\n     /** running sum of squares that have been added */\n     private double sumsq = 0.0;\n \n+\t/** running sum of 3rd powers that have been added */\n+\tprivate double sumCube = 0.0;\n+\t\n+\t/** running sum of 4th powers that have been added */\n+\tprivate double sumQuad = 0.0;\n+\t\n     /** count of values that have been added */\n     private int n = 0;\n \n         }\n     }\n    \n+   \n+\t/**\n+\t * Returns the skewness of the values that have been added as described by\n+     * <a href=http://mathworld.wolfram.com/k-Statistic.html>Equation (6) for k-Statistics</a>.\n+     * \n+\t * @return The skew of a set of values.  Double.NaN is returned for\n+\t *         an empty set of values and 0.0 is returned for a &lt;= 2 value set.\n+\t */\n+\tpublic double getSkewness() {\n+\t\t\n+\t\tif( n < 1) return Double.NaN;\n+\t\tif( n <= 2 ) return 0.0;                  \n+\t\t\t\n+\t\treturn ( 2*Math.pow(sum,3) - 3*sum*sumsq + ((double)n)*((double)n)*sumCube ) / \n+\t\t\t   ( ((double)n)*(((double)n)-1)*(((double)n)-2));  \n+\t}\n+\t\n+\t/**\n+\t * Returns the kurtosis of the values that have been added as described by\n+     * <a href=http://mathworld.wolfram.com/k-Statistic.html>Equation (7) for k-Statistics</a>.\n+     * \n+\t * @return The kurtosis of a set of values.  Double.NaN is returned for\n+\t *         an empty set of values and 0.0 is returned for a &lt;= 3 value set.\n+\t */\n+\tpublic double getKurtosis() {\n+\t\t\n+\t\tif( n < 1) return Double.NaN;\n+\t\tif( n <= 3 ) return 0.0;\n+\t\t\n+\t\tdouble x1 = -6*Math.pow(sum,4);\n+\t\tdouble x2 = 12*((double)n)*Math.pow(sum,2)*sumsq;\n+\t\tdouble x3 = -3*((double)n)*(((double)n)-1)*Math.pow(sumsq,2);\n+\t\tdouble x4 = -4*((double)n)*(((double)n)+1)*sum*sumCube;\n+\t\tdouble x5 = Math.pow(((double)n),2)*(((double)n)+1)*sumQuad;\n+\t\treturn (x1 + x2 + x3 + x4 + x5) / \n+\t\t       (((double)n)*(((double)n)-1)*(((double)n)-2)*(((double)n)-3));\n+\t} \n+\t\n     private void insertValue(double v) {\n \n         // The default value of product is NaN, if you\n         }\n \n         if( windowSize != Univariate.INFINITE_WINDOW ) {\n-\n             if( windowSize == n ) {\n                 double discarded = doubleArray.addElementRolling( v );\n \n                 // Remove the influence of the discarded\n                 sum -= discarded;\n                 sumsq -= discarded * discarded;\n-\n+\t\t\t\tsumCube -= Math.pow(discarded,3);\n+\t\t\t\tsumQuad -= Math.pow(discarded,4); \n+\t\t\t\t\n                 if(discarded == min) {\n                     min = doubleArray.getMin();\n                 } else {\n                     }\n                 } \n                 \n-                sum += v;\n-                sumsq += v*v;\n-\n                 if(product != 0.0){\n                     // can safely remove discarded value\n                     product *= v/discarded;\n                     product = 1.0;\n                     double[] elements = doubleArray.getElements();\n                     for( int i = 0; i < elements.length; i++ ) {\n-                    product *= elements[i];\n+                    \tproduct *= elements[i];\n                     }\n                 } // else product = 0 and will still be 0 after discard\n \n                 n += 1.0;\n                 if (v < min) min = v;\n                 if (v > max) max = v;\n-                sum += v;\n-                sumsq += v*v;\n                 product *= v;\n             }\n         } else {\n             n += 1.0;\n             if (v < min) min = v;\n             if (v > max) max = v;\n-            sum += v;\n-            sumsq += v*v;\n             product *= v;\n         }\n+        \n+\t\tsum += v;\n+\t\tsumsq += v*v;\n+\t\tsumCube += Math.pow(v,3);\n+\t\tsumQuad += Math.pow(v,4);\n     }\n \n     /** Getter for property max.\n         return sumsq;\n     }\n \n+\t/** Getter for property sumCube.\n+\t * @return Value of property sumCube.\n+\t */\n+\tpublic double getSumCube() {\n+\t\treturn sumCube;\n+\t}\n+\t\n+\t/** Getter for property sumQuad.\n+\t * @return Value of property sumQuad.\n+\t */\n+\tpublic double getSumQuad() {\n+\t\treturn sumQuad;\n+\t}\n+\t\n     /**\n      * Generates a text report displaying \n      * univariate statistics from values that\n         outBuffer.append(\"max: \" + max + \"\\n\");\n         outBuffer.append(\"mean: \" + getMean() + \"\\n\");\n         outBuffer.append(\"std dev: \" + getStandardDeviation() + \"\\n\");\n+\t\toutBuffer.append(\"skewness: \" + getSkewness() + \"\\n\");\n+\t\toutBuffer.append(\"kurtosis: \" + getKurtosis() + \"\\n\");\n         return outBuffer.toString();\n     }\n     \n     /** Resets all sums to 0, resets min and max */\n     public void clear() {\n-        this.sum = 0.0;\n-        this.sumsq = 0.0;\n+        this.sum = this.sumsq = this.sumCube = this.sumQuad = 0.0;\n         this.n = 0;\n         this.min = Double.MAX_VALUE;\n         this.max = Double.MIN_VALUE;\n--- a/src/test/org/apache/commons/math/UnivariateImplTest.java\n+++ b/src/test/org/apache/commons/math/UnivariateImplTest.java\n  *\n  * @author Phil Steitz\n  * @author Tim Obrien\n- * @version $Revision: 1.3 $ $Date: 2003/05/23 17:33:18 $\n+ * @version $Revision: 1.4 $ $Date: 2003/05/29 19:49:18 $\n  */\n \n public final class UnivariateImplTest extends TestCase {\n     \tUnivariateImpl u = new UnivariateImpl();\n         assertTrue(\"Mean of n = 0 set should be NaN\", \n             Double.isNaN( u.getMean() ) );\n-\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n+\t\tassertTrue(\"Standard Deviation of n = 0 set should be NaN\", \n             Double.isNaN( u.getStandardDeviation() ) );\n-\tassertTrue(\"Variance of n = 0 set should be NaN\", \n+\t\tassertTrue(\"Variance of n = 0 set should be NaN\", \n             Double.isNaN(u.getVariance() ) );\n+\t\tassertTrue(\"skew of n = 0 set should be NaN\",\n+\t\t\tDouble.isNaN(u.getSkewness() ) );\t\n+\t\tassertTrue(\"kurtosis of n = 0 set should be NaN\", \n+\t\t\tDouble.isNaN(u.getKurtosis() ) );\t\t\n+\t\t\n \t\n-        u.addValue(one);\n-\n-\tassertTrue( \"Mean of n = 1 set should be value of single item n1\", \n-            u.getMean() == one);\n-\tassertTrue( \"Mean of n = 1 set should be zero\", \n-            u.getStandardDeviation() == 0);\n-\tassertTrue( \"Variance of n = 1 set should be zero\",\n-            u.getVariance() == 0);\t\n+\t\t/* n=1 */\n+\t\tu.addValue(one);\n+\t\tassertTrue(\"mean should be one (n = 1)\", \n+\t\t\tu.getMean() == one);\n+\t\tassertTrue(\"geometric should be one (n = 1)\", \n+\t\t\tu.getGeometricMean() == one);\n+\t\tassertTrue(\"Std should be zero (n = 1)\", \n+\t\t\tu.getStandardDeviation() == 0.0);\n+\t\tassertTrue(\"variance should be zero (n = 1)\", \n+\t\t\tu.getVariance() == 0.0);\n+\t\tassertTrue(\"skew should be zero (n = 1)\", \n+\t\t\tu.getSkewness() == 0.0);\n+\t\tassertTrue(\"kurtosis should be zero (n = 1)\", \n+\t\t\tu.getKurtosis() == 0.0);\t\t\n+\t\t\t\t\t\n+\t\t/* n=2 */\t\t\t\t\n+\t\tu.addValue(twoF);\n+\t\tassertTrue(\"Std should not be zero (n = 2)\", \n+\t\t\tu.getStandardDeviation() != 0.0);\n+\t\tassertTrue(\"variance should not be zero (n = 2)\", \n+\t\t\tu.getVariance() != 0.0);\n+\t\tassertTrue(\"skew should not be zero (n = 2)\", \n+\t\t\tu.getSkewness() == 0.0);\n+\t\tassertTrue(\"kurtosis should be zero (n = 2)\", \n+\t\t\tu.getKurtosis() == 0.0);\n+\n+\t\t/* n=3 */\n+\t\tu.addValue(twoL);\n+\t\tassertTrue(\"skew should not be zero (n = 3)\", \n+\t\t\tu.getSkewness() != 0.0);\n+\t\tassertTrue(\"kurtosis should be zero (n = 3)\", \n+\t\t\tu.getKurtosis() == 0.0);\n+        \n+\t\t/* n=4 */\n+\t\tu.addValue(three);\n+\t\tassertTrue(\"kurtosis should not be zero (n = 4)\", \n+\t\t\tu.getKurtosis() != 0.0);        \n+            \n     }\n \n     public void testProductAndGeometricMean() throws Exception {\n         \n         //FiXME: test all other NaN contract specs\n     }\n-        \n-        \n-        \n-\n-}\n-\n+\n+}", "timestamp": 1054237758, "metainfo": ""}