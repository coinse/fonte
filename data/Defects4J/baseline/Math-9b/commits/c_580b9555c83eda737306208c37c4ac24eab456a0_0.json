{"sha": "580b9555c83eda737306208c37c4ac24eab456a0", "log": "improved documentation (javadoc, code comments about optimization and userguide) JIRA: MATH-419  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/AbstractWell.java\n+++ b/src/main/java/org/apache/commons/math/random/AbstractWell.java\n  * Pierre L'Ecuyer and Makoto Matsumoto <a\n  * href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf\">Improved\n  * Long-Period Generators Based on Linear Recurrences Modulo 2</a> ACM\n- * Transactions on Mathematical Software, 32, 1 (2006).</p>\n+ * Transactions on Mathematical Software, 32, 1 (2006). The errata for the paper\n+ * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n  * @version $Revision$ $Date$\n public abstract class AbstractWell extends BitsStreamGenerator implements Serializable {\n \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = -8068371019303673353L;\n-\n-    /** Bit mask preserving the first w - p bits in a w bits block. */\n-    protected final int mp;\n-\n-    /** Bit mask preserving the last p bits in a w bits block. */\n-    protected final int mpTilde;\n+    private static final long serialVersionUID = -817701723016583596L;\n \n     /** Current index in the bytes pool. */\n     protected int index;\n \n     /** Bytes pool. */\n     protected final int[] v;\n+\n+    /** Index indirection table giving for each index its predecessor taking table size into account. */\n     protected final int[] iRm1;\n+\n+    /** Index indirection table giving for each index its second predecessor taking table size into account. */\n     protected final int[] iRm2;\n+\n+    /** Index indirection table giving for each index the value index + m1 taking table size into account. */\n     protected final int[] i1;\n+\n+    /** Index indirection table giving for each index the value index + m2 taking table size into account. */\n     protected final int[] i2;\n+\n+    /** Index indirection table giving for each index the value index + m3 taking table size into account. */\n     protected final int[] i3;\n \n     /** Creates a new random number generator.\n         // and p is the number of unused bits in the last block\n         final int w = 32;\n         final int r = (k + w - 1) / w;\n-        final int p = r * w - k;\n+        this.v      = new int[r];\n+        this.index  = 0;\n \n-        // set up  generator parameters\n-        this.mp      = (-1) << p;\n-        this.mpTilde = ~mp;\n-        this.v       = new int[r];\n-        this.index   = 0;\n-\n-        // set up indirection indices\n+        // precompute indirection index tables. These tables are used for optimizing access\n+        // they allow saving computations like \"(j + r - 2) % r\" with costly modulo operations\n         iRm1 = new int[r];\n         iRm2 = new int[r];\n         i1   = new int[r];\n--- a/src/main/java/org/apache/commons/math/random/Well1024a.java\n+++ b/src/main/java/org/apache/commons/math/random/Well1024a.java\n  * Pierre L'Ecuyer and Makoto Matsumoto <a\n  * href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf\">Improved\n  * Long-Period Generators Based on Linear Recurrences Modulo 2</a> ACM\n- * Transactions on Mathematical Software, 32, 1 (2006).</p>\n+ * Transactions on Mathematical Software, 32, 1 (2006). The errata for the paper\n+ * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n  * @version $Revision$ $Date$\n     protected int next(final int bits) {\n \n         final int indexRm1 = iRm1[index];\n-        final int indexRm2 = iRm2[index];\n \n         final int v0       = v[index];\n         final int vM1      = v[i1[index]];\n \n         v[index]     = z3;\n         v[indexRm1]  = z4;\n-        v[indexRm2] &= mp;\n         index        = indexRm1;\n \n         return z4 >>> (32 - bits);\n--- a/src/main/java/org/apache/commons/math/random/Well19937a.java\n+++ b/src/main/java/org/apache/commons/math/random/Well19937a.java\n  * Pierre L'Ecuyer and Makoto Matsumoto <a\n  * href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf\">Improved\n  * Long-Period Generators Based on Linear Recurrences Modulo 2</a> ACM\n- * Transactions on Mathematical Software, 32, 1 (2006).</p>\n+ * Transactions on Mathematical Software, 32, 1 (2006). The errata for the paper\n+ * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n  * @version $Revision$ $Date$\n \n         v[index]     = z3;\n         v[indexRm1]  = z4;\n-        v[indexRm2] &= mp;\n+        v[indexRm2] &= 0x80000000;\n         index        = indexRm1;\n \n         return z4 >>> (32 - bits);\n--- a/src/main/java/org/apache/commons/math/random/Well19937c.java\n+++ b/src/main/java/org/apache/commons/math/random/Well19937c.java\n  * Pierre L'Ecuyer and Makoto Matsumoto <a\n  * href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf\">Improved\n  * Long-Period Generators Based on Linear Recurrences Modulo 2</a> ACM\n- * Transactions on Mathematical Software, 32, 1 (2006).</p>\n+ * Transactions on Mathematical Software, 32, 1 (2006). The errata for the paper\n+ * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n  * @version $Revision$ $Date$\n \n         v[index]     = z3;\n         v[indexRm1]  = z4;\n-        v[indexRm2] &= mp;\n+        v[indexRm2] &= 0x80000000;\n         index        = indexRm1;\n \n \n--- a/src/main/java/org/apache/commons/math/random/Well44497a.java\n+++ b/src/main/java/org/apache/commons/math/random/Well44497a.java\n  * Pierre L'Ecuyer and Makoto Matsumoto <a\n  * href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf\">Improved\n  * Long-Period Generators Based on Linear Recurrences Modulo 2</a> ACM\n- * Transactions on Mathematical Software, 32, 1 (2006).</p>\n+ * Transactions on Mathematical Software, 32, 1 (2006). The errata for the paper\n+ * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n  * @version $Revision$ $Date$\n         final int vM2      = v[i2[index]];\n         final int vM3      = v[i3[index]];\n \n+        // the values below include the errata of the original article\n         final int z0       = (0xFFFF8000 & v[indexRm1]) ^ (0x00007FFF & v[indexRm2]);\n         final int z1       = (v0 ^ (v0 << 24))  ^ (vM1 ^ (vM1 >>> 30));\n         final int z2       = (vM2 ^ (vM2 << 10)) ^ (vM3 << 26);\n \n         v[index]     = z3;\n         v[indexRm1]  = z4;\n-        v[indexRm2] &= mp;\n+        v[indexRm2] &= 0xFFFF8000;\n         index        = indexRm1;\n \n         return z4 >>> (32 - bits);\n--- a/src/main/java/org/apache/commons/math/random/Well44497b.java\n+++ b/src/main/java/org/apache/commons/math/random/Well44497b.java\n  * Pierre L'Ecuyer and Makoto Matsumoto <a\n  * href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf\">Improved\n  * Long-Period Generators Based on Linear Recurrences Modulo 2</a> ACM\n- * Transactions on Mathematical Software, 32, 1 (2006).</p>\n+ * Transactions on Mathematical Software, 32, 1 (2006). The errata for the paper\n+ * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n  * @version $Revision$ $Date$\n         final int vM2      = v[i2[index]];\n         final int vM3      = v[i3[index]];\n \n+        // the values below include the errata of the original article\n         final int z0       = (0xFFFF8000 & v[indexRm1]) ^ (0x00007FFF & v[indexRm2]);\n         final int z1       = (v0 ^ (v0 << 24))  ^ (vM1 ^ (vM1 >>> 30));\n         final int z2       = (vM2 ^ (vM2 << 10)) ^ (vM3 << 26);\n \n         v[index]     = z3;\n         v[indexRm1]  = z4;\n-        v[indexRm2] &= mp;\n+        v[indexRm2] &= 0xFFFF8000;\n         index        = indexRm1;\n \n         // add Matsumoto-Kurita tempering\n--- a/src/main/java/org/apache/commons/math/random/Well512a.java\n+++ b/src/main/java/org/apache/commons/math/random/Well512a.java\n  * Pierre L'Ecuyer and Makoto Matsumoto <a\n  * href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf\">Improved\n  * Long-Period Generators Based on Linear Recurrences Modulo 2</a> ACM\n- * Transactions on Mathematical Software, 32, 1 (2006).</p>\n+ * Transactions on Mathematical Software, 32, 1 (2006). The errata for the paper\n+ * are in <a href=\"http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt\">wellrng-errata.txt</a>.</p>\n \n  * @see <a href=\"http://www.iro.umontreal.ca/~panneton/WELLRNG.html\">WELL Random number generator</a>\n  * @version $Revision$ $Date$\n         final int vi1 = v[i1[index]];\n         final int vi2 = v[i2[index]];\n         final int z0 = v[indexRm1];\n-        // m3: x ^ ((t >= 0) ? (x >>> t) : (x << -t));\n \n+        // the values below include the errata of the original article\n         final int z1 = (vi ^ (vi << 16))   ^ (vi1 ^ (vi1 << 15));\n         final int z2 = vi2 ^ (vi2 >>> 11);\n         final int z3 = z1 ^ z2;", "timestamp": 1285098643, "metainfo": ""}