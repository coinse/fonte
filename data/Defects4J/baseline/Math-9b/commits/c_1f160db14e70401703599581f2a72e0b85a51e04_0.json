{"sha": "1f160db14e70401703599581f2a72e0b85a51e04", "log": "MATH-902 Fixed Javadoc. Added unit tests.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java\n      *\n      * @param relativeThreshold Relative tolerance threshold.\n      * @param absoluteThreshold Absolute tolerance threshold.\n-     * @param maxIter Maximum iteration count. Setting it to a negative\n-     * value will disable this stopping criterion.\n+     * @param maxIter Maximum iteration count.\n      * @throws NotStrictlyPositiveException if {@code maxIter <= 0}.\n      *\n      * @since 3.1\n--- a/src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java\n      *\n      * @param relativeThreshold relative tolerance threshold\n      * @param absoluteThreshold absolute tolerance threshold\n-     * @param maxIter Maximum iteration count. Setting it to a negative\n-     * value will disable this stopping criterion.\n+     * @param maxIter Maximum iteration count.\n      * @throws NotStrictlyPositiveException if {@code maxIter <= 0}.\n      *\n      * @since 3.1\n--- a/src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java\n      *\n      * @param relativeThreshold Relative tolerance threshold.\n      * @param absoluteThreshold Absolute tolerance threshold.\n-     * @param maxIter Maximum iteration count. Setting it to a negative\n-     * value will disable this stopping criterion.\n+     * @param maxIter Maximum iteration count.\n      * @throws NotStrictlyPositiveException if {@code maxIter <= 0}.\n      *\n      * @since 3.1\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/optimization/SimplePointCheckerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.optimization;\n+\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n+import org.junit.Test;\n+import org.junit.Assert;\n+\n+public class SimplePointCheckerTest {\n+    @Test(expected=NotStrictlyPositiveException.class)\n+    public void testIterationCheckPrecondition() {\n+        new SimplePointChecker<PointValuePair>(1e-1, 1e-2, 0);\n+    }\n+\n+    @Test\n+    public void testIterationCheck() {\n+        final int max = 10;\n+        final SimplePointChecker<PointValuePair> checker\n+            = new SimplePointChecker<PointValuePair>(1e-1, 1e-2, max);\n+        Assert.assertTrue(checker.converged(max, null, null)); \n+        Assert.assertTrue(checker.converged(max + 1, null, null));\n+    }\n+\n+    @Test\n+    public void testIterationCheckDisabled() {\n+        final SimplePointChecker<PointValuePair> checker\n+            = new SimplePointChecker<PointValuePair>(1e-8, 1e-8);\n+\n+        final PointValuePair a = new PointValuePair(new double[] { 1d }, 1d);\n+        final PointValuePair b = new PointValuePair(new double[] { 10d }, 10d);\n+\n+        Assert.assertFalse(checker.converged(-1, a, b));\n+        Assert.assertFalse(checker.converged(0, a, b));\n+        Assert.assertFalse(checker.converged(1000000, a, b));\n+\n+        Assert.assertTrue(checker.converged(-1, a, a));\n+        Assert.assertTrue(checker.converged(-1, b, b));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/optimization/SimpleValueCheckerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.optimization;\n+\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n+import org.junit.Test;\n+import org.junit.Assert;\n+\n+public class SimpleValueCheckerTest {\n+    @Test(expected=NotStrictlyPositiveException.class)\n+    public void testIterationCheckPrecondition() {\n+        new SimpleValueChecker(1e-1, 1e-2, 0);\n+    }\n+\n+    @Test\n+    public void testIterationCheck() {\n+        final int max = 10;\n+        final SimpleValueChecker checker = new SimpleValueChecker(1e-1, 1e-2, max);\n+        Assert.assertTrue(checker.converged(max, null, null)); \n+        Assert.assertTrue(checker.converged(max + 1, null, null));\n+    }\n+\n+    @Test\n+    public void testIterationCheckDisabled() {\n+        final SimpleValueChecker checker = new SimpleValueChecker(1e-8, 1e-8);\n+\n+        final PointValuePair a = new PointValuePair(new double[] { 1d }, 1d);\n+        final PointValuePair b = new PointValuePair(new double[] { 10d }, 10d);\n+\n+        Assert.assertFalse(checker.converged(-1, a, b));\n+        Assert.assertFalse(checker.converged(0, a, b));\n+        Assert.assertFalse(checker.converged(1000000, a, b));\n+\n+        Assert.assertTrue(checker.converged(-1, a, a));\n+        Assert.assertTrue(checker.converged(-1, b, b));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/optimization/SimpleVectorValueCheckerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.optimization;\n+\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n+import org.junit.Test;\n+import org.junit.Assert;\n+\n+public class SimpleVectorValueCheckerTest {\n+    @Test(expected=NotStrictlyPositiveException.class)\n+    public void testIterationCheckPrecondition() {\n+        new SimpleVectorValueChecker(1e-1, 1e-2, 0);\n+    }\n+\n+    @Test\n+    public void testIterationCheck() {\n+        final int max = 10;\n+        final SimpleVectorValueChecker checker = new SimpleVectorValueChecker(1e-1, 1e-2, max);\n+        Assert.assertTrue(checker.converged(max, null, null));\n+        Assert.assertTrue(checker.converged(max + 1, null, null));\n+    }\n+\n+    @Test\n+    public void testIterationCheckDisabled() {\n+        final SimpleVectorValueChecker checker = new SimpleVectorValueChecker(1e-8, 1e-8);\n+\n+        final PointVectorValuePair a = new PointVectorValuePair(new double[] { 1d },\n+                                                                new double[] { 1d });\n+        final PointVectorValuePair b = new PointVectorValuePair(new double[] { 10d },\n+                                                                new double[] { 10d });\n+\n+        Assert.assertFalse(checker.converged(-1, a, b));\n+        Assert.assertFalse(checker.converged(0, a, b));\n+        Assert.assertFalse(checker.converged(1000000, a, b));\n+\n+        Assert.assertTrue(checker.converged(-1, a, a));\n+        Assert.assertTrue(checker.converged(-1, b, b));\n+    }\n+\n+}", "timestamp": 1353626269, "metainfo": ""}