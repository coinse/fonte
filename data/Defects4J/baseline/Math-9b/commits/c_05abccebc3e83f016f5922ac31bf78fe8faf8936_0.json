{"sha": "05abccebc3e83f016f5922ac31bf78fe8faf8936", "log": "Clean up linear serialization tests  ", "commit": "\n--- a/src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java\n \n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public void testSerial()  {\n-        try {\n-            File test = File.createTempFile(\"DFM\",\".ser\");\n-            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n-            DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);\n-            out.writeObject(m);\n-            out.close();\n-            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n-            DenseFieldMatrix<Fraction> nm = (DenseFieldMatrix<Fraction>)in.readObject();\n-            in.close();\n-            test.delete();\n-            assertEquals(m,nm);\n-            \n-        } catch (IOException e) {\n-            fail(\"IOException: \"+e);\n-        } catch (ClassNotFoundException e) {\n-            fail(\"Can't happen: \"+e);\n-        }\n-    }\n-  \n+        DenseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);\n+        assertEquals(m,TestUtils.serializeAndRecover(m));\n+    }\n+\n     private static class SetVisitor extends DefaultFieldMatrixChangingVisitor<Fraction> {\n         public SetVisitor() {\n             super(Fraction.ZERO);\n--- a/src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java\n import java.util.Arrays;\n import java.util.Random;\n \n+import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;\n import org.apache.commons.math.linear.decomposition.NonSquareMatrixException;\n \n     }\n     \n     public void testSerial()  {\n-        try {\n-            File test = File.createTempFile(\"DRM\",\".ser\");\n-            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n-            DenseRealMatrix m = new DenseRealMatrix(testData);\n-            out.writeObject(m);\n-            out.close();\n-            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n-            DenseRealMatrix nm = (DenseRealMatrix)in.readObject();\n-            in.close();\n-            test.delete();\n-            assertEquals(m,nm);\n-            \n-        } catch (IOException e) {\n-            fail(\"IOException: \"+e);\n-        } catch (ClassNotFoundException e) {\n-            fail(\"Can't happen: \"+e);\n-        }\n-    }\n-        \n+        DenseRealMatrix m = new DenseRealMatrix(testData);\n+        assertEquals(m,TestUtils.serializeAndRecover(m));\n+    }\n+\n     private static class SetVisitor extends DefaultRealMatrixChangingVisitor {\n         @Override\n         public double visit(int i, int j, double value) {\n--- a/src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java\n \n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public void testSerial()  {\n-        try {\n-            File test = File.createTempFile(\"FMI\",\".ser\");\n-            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n-            FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);\n-            out.writeObject(m);\n-            out.close();\n-            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n-            FieldMatrixImpl<Fraction> nm = (FieldMatrixImpl<Fraction>)in.readObject();\n-            in.close();\n-            test.delete();\n-            assertEquals(m,nm);\n-            \n-        } catch (IOException e) {\n-            fail(\"IOException: \"+e);\n-        } catch (ClassNotFoundException e) {\n-            fail(\"Can't happen: \"+e);\n-        }\n+        FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);\n+        assertEquals(m,TestUtils.serializeAndRecover(m));\n     }\n   \n     private static class SetVisitor extends DefaultFieldMatrixChangingVisitor<Fraction> {\n--- a/src/test/org/apache/commons/math/linear/FieldVectorImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/FieldVectorImplTest.java\n \n import org.apache.commons.math.Field;\n import org.apache.commons.math.FieldElement;\n+import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.fraction.Fraction;\n import org.apache.commons.math.fraction.FractionField;\n \n \n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public void testSerial()  {\n-        try {\n-            File test = File.createTempFile(\"FVI\",\".ser\");\n-            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n-            FieldVectorImpl<Fraction> v = new FieldVectorImpl<Fraction>(vec1);\n-            out.writeObject(v);\n-            out.close();\n-            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n-            FieldVectorImpl<Fraction> nv = (FieldVectorImpl<Fraction>)in.readObject();\n-            in.close();\n-            test.delete();\n-            assertEquals(v,nv);\n-            \n-        } catch (IOException e) {\n-            fail(\"IOException: \"+e);\n-        } catch (ClassNotFoundException e) {\n-            fail(\"Can't happen: \"+e);\n-        }\n+        FieldVectorImpl<Fraction> v = new FieldVectorImpl<Fraction>(vec1);\n+        assertEquals(v,TestUtils.serializeAndRecover(v));\n     }\n   \n     /** verifies that two vectors are equals */\n--- a/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java\n     }\n \n     public void testSerial()  {\n-        try {\n-            File test = File.createTempFile(\"RMI\",\".ser\");\n-            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n-            RealMatrixImpl m = new RealMatrixImpl(testData);\n-            out.writeObject(m);\n-            out.close();\n-            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n-            RealMatrixImpl nm = (RealMatrixImpl)in.readObject();\n-            in.close();\n-            test.delete();\n-            assertEquals(m,nm);\n-            \n-        } catch (IOException e) {\n-            fail(\"IOException: \"+e);\n-        } catch (ClassNotFoundException e) {\n-            fail(\"Can't happen: \"+e);\n-        }\n+        RealMatrixImpl m = new RealMatrixImpl(testData);\n+        assertEquals(m,TestUtils.serializeAndRecover(m));\n     }\n     \n     \n--- a/src/test/org/apache/commons/math/linear/RealVectorImplTest.java\n+++ b/src/test/org/apache/commons/math/linear/RealVectorImplTest.java\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n+\n+import org.apache.commons.math.TestUtils;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n     }\n \n     public void testSerial()  {\n-        try {\n-            File test = File.createTempFile(\"RVI\",\".ser\");\n-            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n-            RealVectorImpl v = new RealVectorImpl(new double[] { 0, 1, 2 });\n-            out.writeObject(v);\n-            out.close();\n-            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n-            RealVectorImpl nv = (RealVectorImpl)in.readObject();\n-            in.close();\n-            test.delete();\n-            assertEquals(v,nv);\n-            \n-        } catch (IOException e) {\n-            fail(\"IOException: \"+e);\n-        } catch (ClassNotFoundException e) {\n-            fail(\"Can't happen: \"+e);\n-        }\n+        RealVectorImpl v = new RealVectorImpl(new double[] { 0, 1, 2 });\n+        assertEquals(v,TestUtils.serializeAndRecover(v));\n     }\n     \n     \n--- a/src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java\n+++ b/src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;\n import org.apache.commons.math.linear.decomposition.NonSquareMatrixException;\n \n     }\n \n     public void testSerial()  {\n-        try {\n-            File test = File.createTempFile(\"OMRM\",\".ser\");\n-            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n-            OpenMapRealMatrix m = createSparseMatrix(testData);\n-            out.writeObject(m);\n-            out.close();\n-            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n-            OpenMapRealMatrix nm = (OpenMapRealMatrix)in.readObject();\n-            in.close();\n-            test.delete();\n-            assertEquals(m,nm);\n-\n-        } catch (IOException e) {\n-            fail(\"IOException: \"+e);\n-        } catch (ClassNotFoundException e) {\n-            fail(\"Can't happen: \"+e);\n-        }\n+        OpenMapRealMatrix m = createSparseMatrix(testData);\n+        assertEquals(m,TestUtils.serializeAndRecover(m));\n     }\n \n     // --------------- -----------------Protected methods\n--- a/src/test/org/apache/commons/math/linear/SparseRealVectorTest.java\n+++ b/src/test/org/apache/commons/math/linear/SparseRealVectorTest.java\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n+\n+import org.apache.commons.math.TestUtils;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n     }\n \n     public void testSerial()  {\n-        try {\n-            File test = File.createTempFile(\"OMV\",\".ser\");\n-            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(test));\n-            OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });\n-            out.writeObject(v);\n-            out.close();\n-            ObjectInputStream in = new ObjectInputStream(new FileInputStream(test));\n-            OpenMapRealVector nv = (OpenMapRealVector)in.readObject();\n-            in.close();\n-            test.delete();\n-            assertEquals(v,nv);\n-            \n-        } catch (IOException e) {\n-            fail(\"IOException: \"+e);\n-        } catch (ClassNotFoundException e) {\n-            fail(\"Can't happen: \"+e);\n-        }\n+        OpenMapRealVector v = new OpenMapRealVector(new double[] { 0, 1, 2 });\n+        assertEquals(v,TestUtils.serializeAndRecover(v));\n     }\n     \n     /** verifies that two vectors are close (sup norm) */", "timestamp": 1243808298, "metainfo": ""}