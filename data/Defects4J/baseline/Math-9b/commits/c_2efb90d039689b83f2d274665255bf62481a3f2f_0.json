{"sha": "2efb90d039689b83f2d274665255bf62481a3f2f", "log": "MATH-153: Corrected nextInt and nextLong to handle wide value ranges.  ", "commit": "\n--- a/src/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/java/org/apache/commons/math/random/RandomDataImpl.java\n                 (\"upper bound must be > lower bound\");\n         }\n         RandomGenerator rand = getRan();\n-        return lower + (int) (rand.nextDouble() * (upper - lower + 1));\n+        double r = rand.nextDouble();\n+        return (int)((r * upper) + ((1.0 - r) * lower) + r);\n     }\n \n     /**\n                 (\"upper bound must be > lower bound\");\n         }\n         RandomGenerator rand = getRan();\n-        return lower + (long) (rand.nextDouble() * (upper - lower + 1));\n+        double r = rand.nextDouble();\n+        return (long)((r * upper) + ((1.0 - r) * lower) + r);\n     }\n \n      /**\n--- a/src/test/org/apache/commons/math/random/RandomDataTest.java\n+++ b/src/test/org/apache/commons/math/random/RandomDataTest.java\n         return suite;\n     }\n \n+    public void testNextIntExtremeValues() {\n+        int x = randomData.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE);\n+        int y = randomData.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE);\n+        assertFalse(x == y);\n+    }\n+\n+    public void testNextLongExtremeValues() {\n+        long x = randomData.nextLong(Long.MIN_VALUE, Long.MAX_VALUE);\n+        long y = randomData.nextLong(Long.MIN_VALUE, Long.MAX_VALUE);\n+        assertFalse(x == y);\n+    }\n+    \n     /** test dispersion and failure modes for nextInt() */\n     public void testNextInt() {\n         try {", "timestamp": 1175786397, "metainfo": ""}