{"sha": "c2663d6867bbd4a8e89cd602141769b74023cde8", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=20390 Submitted by:\tPhil Steitz   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/MathUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution. \n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.math;\n+\n+/**\n+ * Some useful additions to the built-in functions in lang.Math<p>\n+ *\n+ * @author Phil Steitz\n+ * @version $Revision: 1.1 $ $Date: 2003/06/04 02:31:13 $\n+ */\n+public class MathUtils {\n+\n+    /**\n+     * Returns an exact representation of the \n+     * <a href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> \n+     * Binomial Coefficient</a>,  \"<code>n choose k</code>\", \n+     * the number of <code>k</code>-element subsets that can be selected from \n+     * an <code>n</code>-element set.\n+     * <p>\n+     * <Strong>Preconditions</strong>:<ul>\n+     * <li> <code>0 < k <= n </code> (otherwise \n+     *      <code>IllegalArgumentException</code> is thrown)</li>\n+     * <li> The result is small enough to fit into a <code>long</code>.  The \n+     *      largest value of <code>n</code> for which all coefficients are \n+     *      <code> < Long.MAX_VALUE</code> is 66.  If the computed value \n+     *      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException\n+     *      </code> is thrown.</li>\n+     * </ul>\n+     * \n+     * @param n the size of the set\n+     * @param k the size of the subsets to be counted\n+     * @return <code>n choose k</code>\n+     */\n+    public static long binomialCoefficient(int n, int k) {     \n+        if (n < k) {\n+            throw new IllegalArgumentException\n+                (\"must have n >= k for binomial coefficient (n,k)\");\n+        }\n+        if (n <= 0)  {\n+            throw new IllegalArgumentException\n+                (\"must have n > 0 for binomial coefficient (n,k)\");\n+        }\n+        if ((n == k) || (k == 0)) {\n+            return 1;\n+        }\n+        if ((k == 1) || (k == n - 1)) {\n+            return n;\n+        }\n+        \n+        long result = Math.round(binomialCoefficientDouble(n, k));\n+        if (result == Long.MAX_VALUE) {\n+            throw new ArithmeticException\n+                (\"result too large to represent in a long integer\");\n+        }\n+        return result;   \n+    } \n+    \n+    /**\n+     * Returns a <code>double</code> representation of the \n+     * <a href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> \n+     * Binomial Coefficient</a>,  \"<code>n choose k</code>\", \n+     * the number of <code>k</code>-element subsets that can be selected from \n+     * an <code>n</code>-element set.\n+     * <p>\n+     * <Strong>Preconditions</strong>:<ul>\n+     * <li> <code>0 < k <= n </code> (otherwise \n+     *      <code>IllegalArgumentException</code> is thrown)</li>\n+     * <li> The result is small enough to fit into a <code>double</code>.  \n+     *      The largest value of <code>n</code> for which all coefficients are \n+     *      < Double.MAX_VALUE is 1029.  If the computed value exceeds \n+     *      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>\n+     * </ul>\n+     * \n+     * @param n the size of the set\n+     * @param k the size of the subsets to be counted\n+     * @return <code>n choose k</code>\n+     */\n+    public static double binomialCoefficientDouble(int n, int k) {  \n+        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + .5);    \n+    }\n+    \n+    /**\n+     * Returns the natural <code>log</code> of the\n+     * <a href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> \n+     * Binomial Coefficient</a>,  \"<code>n choose k</code>\", \n+     * the number of <code>k</code>-element subsets that can be selected from \n+     * an <code>n</code>-element set.\n+     * <p>\n+     * <Strong>Preconditions</strong>:<ul>\n+     * <li> <code>0 < k <= n </code> (otherwise \n+     *      <code>IllegalArgumentException</code> is thrown)</li>\n+     * </ul>\n+     * \n+     * @param n the size of the set\n+     * @param k the size of the subsets to be counted\n+     * @return <code>n choose k</code>\n+     */\n+    public static double binomialCoefficientLog(int n, int k) {\n+        if (n < k) {\n+            throw new IllegalArgumentException\n+                (\"must have n >= k for binomial coefficient (n,k)\");\n+        }\n+        if (n <= 0)  {\n+            throw new IllegalArgumentException\n+                (\"must have n > 0 for binomial coefficient (n,k)\");\n+        }\n+        if ((n == k) || (k == 0)) {\n+            return 0;\n+        }\n+        if ((k == 1) || (k == n - 1)) {\n+            return Math.log((double) n);\n+        }    \n+        double logSum = 0; \n+        \n+        // n!/k!\n+        for (int i = k + 1; i <= n; i++) {\n+            logSum += Math.log((double) i);\n+        }\n+        \n+        // divide by (n-k)!\n+        for (int i = 2; i <= n - k; i++) {\n+            logSum -= Math.log((double) i);\n+        }\n+        \n+        return logSum;\n+    }\n+    \n+    /**\n+     * Returns <code>n</code>\n+     * <a href=\"http://mathworld.wolfram.com/Factorial.html\"> \n+     * Factorial</a>, or <code>n!</code>,  \n+     * the product of the numbers <code>1,...,n</code>.\n+     * <p>\n+     * <Strong>Preconditions</strong>:<ul>\n+     * <li> <code>n > 0</code> (otherwise \n+     *      <code>IllegalArgumentException</code> is thrown)</li>\n+     * <li> The result is small enough to fit into a <code>long</code>.  The \n+     *      largest value of <code>n</code> for which <code>n!</code> \n+     *      < Long.MAX_VALUE</code> is 20.  If the computed value \n+     *      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException\n+     *      </code> is thrown.</li>\n+     * </ul>\n+     * \n+     * @param n argument\n+     * @return <code>n!</code>\n+     */\n+    public static long factorial(int n) {\n+        long result = Math.round(factorialDouble(n));\n+        if (result == Long.MAX_VALUE) {\n+            throw new ArithmeticException\n+                (\"result too large to represent in a long integer\");\n+        }\n+        return result;  \n+    }\n+    \n+    /**\n+     * Returns <code>n</code>\n+     * <a href=\"http://mathworld.wolfram.com/Factorial.html\"> \n+     * Factorial</a>, or <code>n!</code>,  \n+     * the product of the numbers <code>1,...,n</code>, as as \n+     * <code>double</code>.\n+     * <p>\n+     * <Strong>Preconditions</strong>:<ul>\n+     * <li> <code>n > 0</code> (otherwise \n+     *      <code>IllegalArgumentException</code> is thrown)</li>\n+     * <li> The result is small enough to fit into a <code>double</code>.  The \n+     *      largest value of <code>n</code> for which <code>n!</code> \n+     *      < Double.MAX_VALUE</code> is 170.  If the computed value exceeds \n+     *      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>\n+     * </ul>\n+     * \n+     * @param n argument\n+     * @return <code>n!</code>\n+     */\n+    public static double factorialDouble(int n) {\n+        if (n <= 0)  {\n+            throw new IllegalArgumentException\n+                (\"must have n > 0 for n!\");\n+        }\n+        return Math.floor(Math.exp(factorialLog(n)) + 0.5); \n+    }\n+    \n+   /**\n+     * Returns the natural <code>log</code> of <code>n</code>\n+     * <a href=\"http://mathworld.wolfram.com/Factorial.html\"> \n+     * Factorial</a>, or <code>n!</code>,  \n+     * the product of the numbers <code>1,...,n</code>, as as \n+     * <code>double</code>.\n+     * <p>\n+     * <Strong>Preconditions</strong>:<ul>\n+     * <li> <code>n > 0</code> (otherwise \n+     *      <code>IllegalArgumentException</code> is thrown)</li>\n+     * </ul>\n+     * \n+     * @param n argument\n+     * @return <code>n!</code>\n+     */\n+    public static double factorialLog(int n) {\n+        if (n <= 0)  {\n+            throw new IllegalArgumentException\n+                (\"must have n > 0 for n!\");\n+        }\n+        double logSum = 0;\n+        for (int i = 2; i <= n; i++) {\n+            logSum += Math.log((double) i);\n+        }   \n+        return logSum;\n+    }           \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/MathUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution. \n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.framework.AssertionFailedError;\n+\n+/**\n+ * Test cases for the MathUtils class.\n+ *\n+ * @author Phil Steitz\n+ * @version $Revision: 1.1 $ $Date: 2003/06/04 02:31:14 $\n+ */\n+\n+public final class MathUtilsTest extends TestCase {\n+\n+    public MathUtilsTest(String name) {\n+        super(name);\n+    }   \n+    \n+    public void setUp() { \n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(MathUtilsTest.class);\n+        suite.setName(\"MathUtils Tests\");\n+        return suite;\n+    }\n+    \n+    public void testBinomialCoefficient() {\n+        long[] bcoef5 = {1,5,10,10,5,1};\n+        long[] bcoef6 = {1,6,15,20,15,6,1};\n+        for (int i = 0; i < 6; i++) {\n+            assertEquals(\"5 choose \" + i, bcoef5[i], \n+                MathUtils.binomialCoefficient(5,i));\n+        }\n+        for (int i = 0; i < 7; i++) {\n+            assertEquals(\"6 choose \" + i, bcoef6[i], \n+                MathUtils.binomialCoefficient(6,i));\n+        }\n+        \n+        for (int n = 1; n < 10; n++) {\n+            for (int k = 0; k <= n; k++) {\n+                assertEquals(n + \" choose \" + k, binomialCoefficient(n, k), \n+                    MathUtils.binomialCoefficient(n, k));\n+                assertEquals(n + \" choose \" + k,(double) binomialCoefficient(n, k), \n+                    MathUtils.binomialCoefficientDouble(n, k),Double.MIN_VALUE);\n+                assertEquals(n + \" choose \" + k,\n+                    Math.log((double) binomialCoefficient(n, k)), \n+                    MathUtils.binomialCoefficientLog(n, k),10E-12);\n+            }\n+        }\n+      \n+      /* \n+       * Takes a long time for recursion to unwind, but succeeds \n+       * and yields exact value = 2,333,606,220\n+        \n+        assertEquals(MathUtils.binomialCoefficient(34,17),\n+            binomialCoefficient(34,17));\n+       */\n+    }\n+    \n+    public void testBinomialCoefficientFail() {\n+        try {\n+            long x = MathUtils.binomialCoefficient(0,0);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            long x = MathUtils.binomialCoefficient(4,5);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.binomialCoefficientDouble(0,0);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.binomialCoefficientDouble(4,5);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.binomialCoefficientLog(0,0);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.binomialCoefficientLog(4,5);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            long x = MathUtils.binomialCoefficient(67,34);\n+            fail (\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+            ;\n+        }\n+        double x = MathUtils.binomialCoefficientDouble(1030,515);\n+        assertTrue(\"expecting infinite binomial coefficient\", \n+            Double.isInfinite(x));\n+    }\n+    \n+    public void testFactorial() {\n+        for (int i = 1; i < 10; i++) {\n+            assertEquals(i + \"! \",factorial(i),MathUtils.factorial(i));\n+            assertEquals(i + \"! \",(double)factorial(i),\n+                MathUtils.factorialDouble(i),Double.MIN_VALUE);\n+            assertEquals(i + \"! \",Math.log((double)factorial(i)),\n+                MathUtils.factorialLog(i),10E-12);\n+        }\n+    }\n+    \n+    public void testFactorialFail() {\n+        try {\n+            long x = MathUtils.factorial(0);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.factorialDouble(0);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.factorialLog(0);\n+            fail (\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            ;\n+        }\n+        try {\n+            double x = MathUtils.factorial(21);\n+            fail (\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {\n+            ;\n+        }\n+        assertTrue(\"expecting infinite factorial value\", \n+            Double.isInfinite(MathUtils.factorialDouble(171)));\n+        \n+    }\n+   \n+    \n+    /** \n+     * Exact recursive implementation to test against\n+     */\n+    private long binomialCoefficient(int n, int k) {     \n+        if ((n == k) || (k == 0)) {\n+            return 1;\n+        }\n+        if ((k == 1) || (k == n - 1)) {\n+            return n;\n+        }\n+        return binomialCoefficient(n - 1, k - 1) + \n+            binomialCoefficient(n - 1, k);\n+    } \n+    \n+    /**\n+     * Finds the largest values of n for which binomialCoefficient and\n+     * binomialCoefficientDouble will return values that fit in a long, double,\n+     * resp.  Remove comments around test below to get this in test-report\n+     *\n+        public void testLimits() {\n+            findBinomialLimits();\n+        }\n+     */\n+    \n+    private void findBinomialLimits() {\n+        /**\n+         * will kick out 66 as the limit for long\n+         */\n+        boolean foundLimit = false;\n+        int test = 10;\n+        while (!foundLimit) {\n+            try {\n+                double x = MathUtils.binomialCoefficient(test, test / 2);\n+            } catch (ArithmeticException ex) {\n+                foundLimit = true;\n+                System.out.println\n+                    (\"largest n for binomialCoefficient = \" + (test - 1) );\n+            }\n+            test++;\n+        }     \n+        \n+       /**\n+        * will kick out 1029 as the limit for double\n+        */\n+        foundLimit = false;\n+        test = 10;\n+        while (!foundLimit) {\n+            double x = MathUtils.binomialCoefficientDouble(test, test / 2);\n+            if (Double.isInfinite(x)) {\n+                foundLimit = true;\n+                System.out.println\n+                    (\"largest n for binomialCoefficientD = \" + (test - 1) );\n+            }\n+            test++;\n+        } \n+    }\n+    \n+    /**\n+     * Finds the largest values of n for which factiorial and\n+     * factorialDouble will return values that fit in a long, double,\n+     * resp.  Remove comments around test below to get this in test-report\n+     \n+        public void testFactiorialLimits() {\n+            findFactorialLimits();\n+        }\n+     */\n+    \n+    private void findFactorialLimits() {\n+        /**\n+         * will kick out 20 as the limit for long\n+         */\n+        boolean foundLimit = false;\n+        int test = 10;\n+        while (!foundLimit) {\n+            try {\n+                double x = MathUtils.factorial(test);\n+            } catch (ArithmeticException ex) {\n+                foundLimit = true;\n+                System.out.println\n+                    (\"largest n for factorial = \" + (test - 1) );\n+            }\n+            test++;\n+        }     \n+        \n+       /**\n+        * will kick out 170 as the limit for double\n+        */\n+        foundLimit = false;\n+        test = 10;\n+        while (!foundLimit) {\n+            double x = MathUtils.factorialDouble(test);\n+            if (Double.isInfinite(x)) {\n+                foundLimit = true;\n+                System.out.println\n+                    (\"largest n for factorialDouble = \" + (test - 1) );\n+            }\n+            test++;\n+        } \n+    }\n+    \n+    \n+    /** \n+     * Exact direct multiplication implementation to test against\n+     */\n+    private long factorial(int n) {     \n+        long result = 1;\n+        for (int i = 2; i <= n; i++) {\n+            result *= i;\n+        }\n+        return result;\n+    } \n+ \n+        \n+\n+}", "timestamp": 1054693874, "metainfo": ""}