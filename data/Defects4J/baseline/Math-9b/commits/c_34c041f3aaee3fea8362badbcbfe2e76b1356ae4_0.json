{"sha": "34c041f3aaee3fea8362badbcbfe2e76b1356ae4", "log": "Fixed exception type.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n import java.util.List;\n \n import org.apache.commons.math3.analysis.MultivariateFunction;\n-import org.apache.commons.math3.exception.MultiDimensionMismatchException;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NoDataException;\n import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n         double[] init = getStartPoint();\n         if (boundaries != null) {\n             if (boundaries.length != 2) {\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries.length },\n-                        new Integer[] { 2 });\n+                throw new DimensionMismatchException(boundaries.length, 2);\n             }\n             if (boundaries[0] == null || boundaries[1] == null) {\n                 throw new NoDataException();\n             }\n             if (boundaries[0].length != init.length) {\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[0].length },\n-                        new Integer[] { init.length });\n+                throw new DimensionMismatchException(boundaries[0].length, init.length);\n             }\n             if (boundaries[1].length != init.length) {\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { boundaries[1].length },\n-                        new Integer[] { init.length });\n+                throw new DimensionMismatchException(boundaries[1].length, init.length);\n             }\n             for (int i = 0; i < init.length; i++) {\n                 if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i]) {\n         }\n         if (inputSigma != null) {\n             if (inputSigma.length != init.length) {\n-                throw new MultiDimensionMismatchException(\n-                        new Integer[] { inputSigma.length },\n-                        new Integer[] { init.length });\n+                throw new DimensionMismatchException(inputSigma.length, init.length);\n             }\n             for (int i = 0; i < init.length; i++) {\n                 if (inputSigma[i] < 0) {\n--- a/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java\n import org.apache.commons.math3.Retry;\n import org.apache.commons.math3.RetryRunner;\n import org.apache.commons.math3.analysis.MultivariateFunction;\n-import org.apache.commons.math3.exception.MultiDimensionMismatchException;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NoDataException;\n import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n                 1e-13, 1e-6, 100000, expected);\n     }\n     \n-    @Test(expected = MultiDimensionMismatchException.class)\n+    @Test(expected = DimensionMismatchException.class)\n     public void testBoundariesDimensionMismatch() {\n         double[] startPoint = point(DIM,0.5);\n         double[] insigma = null;\n                 1e-13, 1e-6, 100000, expected);\n     }\n \n-    @Test(expected = MultiDimensionMismatchException.class)\n+    @Test(expected = DimensionMismatchException.class)\n     public void testInputSigmaDimensionMismatch() {\n         double[] startPoint = point(DIM,0.5);\n         double[] insigma = point(DIM+1,-0.5);", "timestamp": 1329521158, "metainfo": ""}