{"sha": "2c281e086ba98e3c2dde12dda126035c2088fac6", "log": "separated ODEWithJacobians from ParameterizedODE: when jacobians are already available, there is no need to have a setParameter method  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java\n+++ b/src/main/java/org/apache/commons/math/ode/jacobians/EventHandlerWithJacobians.java\n      * the step handler itself is called (see below for scheduling). It\n      * allows the user to update his internal data to acknowledge the fact\n      * the event has been handled (for example setting a flag in the {@link\n-     * org.apache.commons.math.ode.jacobians.ParameterizedODEWithJacobians\n+     * org.apache.commons.math.ode.jacobians.ODEWithJacobians\n      * differential equations} to switch the derivatives computation in\n      * case of discontinuity), or to direct the integrator to either stop\n      * or continue integration, possibly with a reset state or derivatives.</p>\n--- a/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java\n+++ b/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java\n  * problem has dimension n and there are p parameters, the compound problem will\n  * have dimension n &times; (1 + n + k).</p>\n  * @see ParameterizedODE\n- * @see ParameterizedODEWithJacobians\n+ * @see ODEWithJacobians\n  * @version $Revision$ $Date$\n  * @since 2.1\n  */\n     private final FirstOrderIntegrator integrator;\n \n     /** Raw equations to integrate. */\n-    private final ParameterizedODEWithJacobians ode;\n+    private final ODEWithJacobians ode;\n \n     /** Maximal number of evaluations allowed. */\n     private int maxEvaluations;\n      * @param hP step sizes to use for computing the jacobian df/dp, must have the\n      * same dimension as the original problem parameters dimension\n      * @see #FirstOrderIntegratorWithJacobians(FirstOrderIntegrator,\n-     * ParameterizedODEWithJacobians)\n+     * ODEWithJacobians)\n      */\n     public FirstOrderIntegratorWithJacobians(final FirstOrderIntegrator integrator,\n                                              final ParameterizedODE ode,\n      * ParameterizedODE, double[], double[], double[])\n      */\n     public FirstOrderIntegratorWithJacobians(final FirstOrderIntegrator integrator,\n-                                             final ParameterizedODEWithJacobians ode) {\n+                                             final ODEWithJacobians ode) {\n         this.integrator = integrator;\n         this.ode = ode;\n         setMaxEvaluations(-1);\n      * @see #clearStepHandlers()\n      */\n     public void addStepHandler(StepHandlerWithJacobians handler) {\n-        integrator.addStepHandler(new StepHandlerWrapper(handler));\n+        final int n = ode.getDimension();\n+        final int k = ode.getParametersDimension();\n+        integrator.addStepHandler(new StepHandlerWrapper(handler, n, k));\n     }\n \n     /** Get all the step handlers that have been added to the integrator.\n                                 double maxCheckInterval,\n                                 double convergence,\n                                 int maxIterationCount) {\n-        integrator.addEventHandler(new EventHandlerWrapper(handler),\n+        final int n = ode.getDimension();\n+        final int k = ode.getParametersDimension();\n+        integrator.addEventHandler(new EventHandlerWrapper(handler, n, k),\n                                    maxCheckInterval, convergence, maxIterationCount);\n     }\n \n \n     /** Wrapper class to compute jacobians by finite differences for ODE which do not compute them themselves. */\n     private class FiniteDifferencesWrapper\n-        implements ParameterizedODEWithJacobians {\n+        implements ODEWithJacobians {\n \n         /** Raw ODE without jacobians computation. */\n         private final ParameterizedODE ode;\n         }\n \n         /** {@inheritDoc} */\n-        public void setParameter(int i, double value) {\n-            ode.setParameter(i, value);\n-        }\n-\n-        /** {@inheritDoc} */\n         public void computeJacobians(double t, double[] y, double[] yDot,\n                                      double[][] dFdY, double[][] dFdP)\n             throws DerivativeException {\n \n-            final int n = ode.getDimension();\n-            final int k = ode.getParametersDimension();\n+            final int n = hY.length;\n+            final int k = hP.length;\n \n             evaluations += n + k;\n             if (evaluations > maxEvaluations) {\n     }\n \n     /** Wrapper for step handlers. */\n-    private class StepHandlerWrapper implements StepHandler {\n+    private static class StepHandlerWrapper implements StepHandler {\n \n         /** Underlying step handler with jacobians. */\n         private final StepHandlerWithJacobians handler;\n \n+        /** Dimension of the original ODE. */\n+        private final int n;\n+\n+        /** Number of parameters. */\n+        private final int k;\n+\n         /** Simple constructor.\n          * @param handler underlying step handler with jacobians\n-         */\n-        public StepHandlerWrapper(final StepHandlerWithJacobians handler) {\n+         * @param n dimension of the original ODE\n+         * @param k number of parameters\n+         */\n+        public StepHandlerWrapper(final StepHandlerWithJacobians handler,\n+                                  final int n, final int k) {\n             this.handler = handler;\n+            this.n       = n;\n+            this.k       = k;\n         }\n \n         /** Get the underlying step handler with jacobians.\n         /** {@inheritDoc} */\n         public void handleStep(StepInterpolator interpolator, boolean isLast)\n             throws DerivativeException {\n-            handler.handleStep(new StepInterpolatorWrapper(interpolator,\n-                                                           ode.getDimension(),\n-                                                           ode.getParametersDimension()),\n-                               isLast);\n+            handler.handleStep(new StepInterpolatorWrapper(interpolator, n, k), isLast);\n         }\n \n         /** {@inheritDoc} */\n     }\n \n     /** Wrapper for event handlers. */\n-    private class EventHandlerWrapper implements EventHandler {\n+    private static class EventHandlerWrapper implements EventHandler {\n \n         /** Underlying event handler with jacobians. */\n         private final EventHandlerWithJacobians handler;\n \n         /** Simple constructor.\n          * @param handler underlying event handler with jacobians\n-         */\n-        public EventHandlerWrapper(final EventHandlerWithJacobians handler) {\n+         * @param n dimension of the original ODE\n+         * @param k number of parameters\n+         */\n+        public EventHandlerWrapper(final EventHandlerWithJacobians handler,\n+                                   final int n, final int k) {\n             this.handler = handler;\n-            final int n = ode.getDimension();\n-            final int k = ode.getParametersDimension();\n             y        = new double[n];\n             dydy0    = new double[n][n];\n             dydp     = new double[n][k];\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/ode/jacobians/ODEWithJacobians.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.ode.jacobians;\n+\n+import org.apache.commons.math.ode.DerivativeException;\n+import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n+\n+\n+/** This interface represents {@link ParameterizedODE\n+ * first order differential equations} with parameters and partial derivatives.\n+ *\n+ * @see FirstOrderIntegratorWithJacobians\n+ *\n+ * @version $Revision$ $Date$\n+ * @since 2.1\n+ */\n+\n+public interface ODEWithJacobians extends FirstOrderDifferentialEquations {\n+\n+    /** Get the number of parameters.\n+     * @return number of parameters\n+     */\n+    int getParametersDimension();\n+\n+    /** Compute the partial derivatives of ODE with respect to state.\n+     * @param t current value of the independent <I>time</I> variable\n+     * @param y array containing the current value of the state vector\n+     * @param yDot array containing the current value of the time derivative of the state vector\n+     * @param dFdY placeholder array where to put the jacobian of the ODE with respect to the state vector\n+     * @param dFdP placeholder array where to put the jacobian of the ODE with respect to the parameters\n+     * @throws DerivativeException this exception is propagated to the caller if the\n+     * underlying user function triggers one\n+     */\n+    void computeJacobians(double t, double[] y, double[] yDot, double[][] dFdY, double[][] dFdP)\n+        throws DerivativeException;\n+\n+}\n--- a/src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java\n         Assert.assertTrue(stopTime < 5.0 * Math.PI);\n     }\n \n-    private static class Brusselator implements ParameterizedODEWithJacobians {\n+    private static class Brusselator implements ParameterizedODE, ODEWithJacobians {\n \n         private double b;\n \n     };\n \n     /** ODE representing a point moving on a circle with provided center and angular rate. */\n-    private static class Circle implements ParameterizedODEWithJacobians {\n+    private static class Circle implements ODEWithJacobians {\n \n         private final double[] y0;\n         private double cx;\n \n         public int getDimension() {\n             return 2;\n-        }\n-\n-        public void setParameter(int i, double p) {\n-            if (i == 0) {\n-                cx = p;\n-            } else if (i == 1) {\n-                cy = p;\n-            } else {\n-                omega = p;\n-            }\n         }\n \n         public int getParametersDimension() {", "timestamp": 1267959573, "metainfo": ""}