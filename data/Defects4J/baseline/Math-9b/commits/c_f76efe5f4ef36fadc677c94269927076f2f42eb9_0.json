{"sha": "f76efe5f4ef36fadc677c94269927076f2f42eb9", "log": "MATH-349 Removed deprecated methods.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java\n  * @version $Revision$ $Date$\n  */\n public interface PoissonDistribution extends IntegerDistribution {\n-\n     /**\n      * Get the mean for the distribution.\n      *\n      * @return the mean for the distribution.\n      */\n     double getMean();\n-\n-    /**\n-     * Set the mean for the distribution.\n-     * The parameter value must be positive; otherwise an\n-     * <code>IllegalArgument</code> is thrown.\n-     *\n-     * @param p the mean\n-     * @throws IllegalArgumentException if p &le; 0\n-     * @deprecated as of v2.1\n-     */\n-    @Deprecated\n-    void setMean(double p);\n \n     /**\n      * Calculates the Poisson distribution function using a normal approximation.\n      * @throws MathException if an error occurs computing the normal approximation\n      */\n     double normalApproximateProbability(int x) throws MathException;\n-\n }\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Gamma;\n import org.apache.commons.math.util.MathUtils;\n      * @throws IllegalArgumentException if p &le; 0\n      */\n     public PoissonDistributionImpl(double p) {\n-        this(p, new NormalDistributionImpl());\n+        this(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);\n     }\n \n     /**\n      * @since 2.1\n      */\n     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n-        setMean(p);\n+        if (p <= 0) {\n+            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+        }\n+        mean = p;\n+        normal = new NormalDistributionImpl(p, FastMath.sqrt(p));\n         this.epsilon = epsilon;\n         this.maxIterations = maxIterations;\n     }\n      * @since 2.1\n      */\n     public PoissonDistributionImpl(double p, double epsilon) {\n-        setMean(p);\n-        this.epsilon = epsilon;\n+        this(p, epsilon, DEFAULT_MAX_ITERATIONS);\n     }\n \n     /**\n      * @since 2.1\n      */\n     public PoissonDistributionImpl(double p, int maxIterations) {\n-        setMean(p);\n-        this.maxIterations = maxIterations;\n-    }\n-\n-\n-    /**\n-     * Create a new Poisson distribution with the given the mean. The mean value\n-     * must be positive; otherwise an <code>IllegalArgument</code> is thrown.\n-     *\n-     * @param p the Poisson mean\n-     * @param z a normal distribution used to compute normal approximations.\n-     * @throws IllegalArgumentException if p &le; 0\n-     * @since 1.2\n-     * @deprecated as of 2.1 (to avoid possibly inconsistent state, the\n-     * \"NormalDistribution\" will be instantiated internally)\n-     */\n-    @Deprecated\n-    public PoissonDistributionImpl(double p, NormalDistribution z) {\n-        super();\n-        setNormalAndMeanInternal(z, p);\n+        this(p, DEFAULT_EPSILON, maxIterations);\n     }\n \n     /**\n      */\n     public double getMean() {\n         return mean;\n-    }\n-\n-    /**\n-     * Set the Poisson mean for the distribution. The mean value must be\n-     * positive; otherwise an <code>IllegalArgument</code> is thrown.\n-     *\n-     * @param p the Poisson mean value\n-     * @throws IllegalArgumentException if p &le; 0\n-     * @deprecated as of 2.1 (class will become immutable in 3.0)\n-     */\n-    @Deprecated\n-    public void setMean(double p) {\n-        setNormalAndMeanInternal(normal, p);\n-    }\n-    /**\n-     * Set the Poisson mean for the distribution. The mean value must be\n-     * positive; otherwise an <code>IllegalArgument</code> is thrown.\n-     *\n-     * @param z the new distribution\n-     * @param p the Poisson mean value\n-     * @throws IllegalArgumentException if p &le; 0\n-     */\n-    private void setNormalAndMeanInternal(NormalDistribution z,\n-                                          double p) {\n-        if (p <= 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);\n-        }\n-        mean = p;\n-        normal = z;\n-        normal.setMean(p);\n-        normal.setStandardDeviation(FastMath.sqrt(p));\n     }\n \n     /**\n     protected int getDomainUpperBound(double p) {\n         return Integer.MAX_VALUE;\n     }\n-\n-    /**\n-     * Modify the normal distribution used to compute normal approximations. The\n-     * caller is responsible for insuring the normal distribution has the proper\n-     * parameter settings.\n-     *\n-     * @param value the new distribution\n-     * @since 1.2\n-     * @deprecated as of 2.1 (class will become immutable in 3.0)\n-     */\n-    @Deprecated\n-    public void setNormal(NormalDistribution value) {\n-        setNormalAndMeanInternal(value, mean);\n-    }\n }\n--- a/src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n \n /**\n  * <code>PoissonDistributionTest</code>\n         double result = dist.normalApproximateProbability(110)\n                 - dist.normalApproximateProbability(89);\n         assertEquals(0.706281887248, result, 1E-10);\n-        dist.setMean(10000);\n+\n+        dist = new PoissonDistributionImpl(10000);\n         result = dist.normalApproximateProbability(10200)\n         - dist.normalApproximateProbability(9899);\n         assertEquals(0.820070051552, result, 1E-10);\n     }\n \n     public void testMean() {\n-        PoissonDistribution dist = new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);\n+        PoissonDistribution dist;\n         try {\n-            dist.setMean(-1);\n-            fail(\"negative mean.  IllegalArgumentException expected\");\n-        } catch(IllegalArgumentException ex) {\n+            dist = new PoissonDistributionImpl(-1);\n+            fail(\"negative mean: NotStrictlyPositiveException expected\");\n+        } catch(NotStrictlyPositiveException ex) {\n+            // Expected.\n         }\n \n-        dist.setMean(10.0);\n+        dist = new PoissonDistributionImpl(10.0);\n         assertEquals(10.0, dist.getMean(), 0.0);\n     }\n \n     public void testLargeMeanCumulativeProbability() {\n-        PoissonDistribution dist = new PoissonDistributionImpl(1.0);\n         double mean = 1.0;\n         while (mean <= 10000000.0) {\n-            dist.setMean(mean);\n+            PoissonDistribution dist = new PoissonDistributionImpl(mean);\n \n             double x = mean * 2.0;\n             double dx = x / 10.0;\n      * JIRA: MATH-282\n      */\n     public void testCumulativeProbabilitySpecial() throws Exception {\n-        PoissonDistribution dist = new PoissonDistributionImpl(1.0);\n-        dist.setMean(9120);\n+        PoissonDistribution dist;\n+        dist = new PoissonDistributionImpl(9120);\n         checkProbability(dist, 9075);\n         checkProbability(dist, 9102);\n-        dist.setMean(5058);\n+        dist = new PoissonDistributionImpl(5058);\n         checkProbability(dist, 5044);\n-        dist.setMean(6986);\n+        dist = new PoissonDistributionImpl(6986);\n         checkProbability(dist, 6950);\n     }\n \n     }\n \n     public void testLargeMeanInverseCumulativeProbability() throws Exception {\n-        PoissonDistribution dist = new PoissonDistributionImpl(1.0);\n         double mean = 1.0;\n         while (mean <= 100000.0) { // Extended test value: 1E7.  Reduced to limit run time.\n-            dist.setMean(mean);\n+            PoissonDistribution dist = new PoissonDistributionImpl(mean);\n             double p = 0.1;\n             double dp = p;\n             while (p < .99) {", "timestamp": 1285455994, "metainfo": ""}