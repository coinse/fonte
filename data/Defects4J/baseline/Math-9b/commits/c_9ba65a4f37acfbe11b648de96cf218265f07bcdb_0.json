{"sha": "9ba65a4f37acfbe11b648de96cf218265f07bcdb", "log": "MATH-795: removed redundant unit tests.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java\n     }\n \n     @Test\n-    public void testBasicFunctions() {\n-        final RealVector v1 = create(vec1);\n-        final RealVector v2 = create(vec2);\n-        final RealVector v5 = create(vec5);\n-        final RealVector v_null = create(vec_null);\n-\n-        final RealVector v2_t = createAlien(vec2);\n-\n-        RealVector v_projection = v1.projection(v2);\n-        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n-        assertClose(\"compare vect\", v_projection.toArray(), result_projection, normTolerance);\n-\n-        RealVector v_projection_2 = v1.projection(v2_t);\n-        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n-        assertClose(\"compare vect\", v_projection_2.toArray(), result_projection_2, normTolerance);\n-    }\n-\n-    @Test\n-    public void testMisc() {\n-        RealVector v1 = create(vec1);\n-        RealVector v4 = create(vec4);\n-        RealVector v4_2 = create(vec4);\n-\n-        String out1 = v1.toString();\n-        Assert.assertTrue(\"some output \",  out1.length()!=0);\n-        try {\n-            v1.checkVectorDimensions(2);\n-            Assert.fail(\"MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n-            // expected behavior\n-        }\n-\n-       try {\n-            v1.checkVectorDimensions(v4);\n-            Assert.fail(\"MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n-            // expected behavior\n-        }\n-\n-        try {\n-            v1.checkVectorDimensions(v4_2);\n-            Assert.fail(\"MathIllegalArgumentException expected\");\n-        } catch (MathIllegalArgumentException ex) {\n-            // expected behavior\n-        }\n-    }\n-\n-    @Test\n-    public void testPredicates() {\n+    public void testEquals() {\n         final RealVector v = create(new double[] { 0, 1, 2 });\n-\n-        v.setEntry(0, 0);\n-        Assert.assertEquals(v, create(new double[] { 0, 1, 2 }));\n-        Assert.assertNotSame(v, create(new double[] { 0, 1, 2 + FastMath.ulp(2)}));\n-        Assert.assertNotSame(v, create(new double[] { 0, 1, 2, 3 }));\n \n         Assert.assertTrue(v.equals(v));\n         Assert.assertTrue(v.equals(v.copy()));", "timestamp": 1341552395, "metainfo": ""}