{"sha": "4456f88239df225ae680b27a9165fbb3c65f9942", "log": "Fixed javadoc warnings.   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n \n /**\n  * Default implementation of\n- * {@link org.apache.commons.math.distribution.NormalDistribution}.<p>\n- * You can choose the algorithm used to calculate cumulative probability\n- * using method {@link #setCdfAlgorithm}. The deafault is the Cody algorithm \n- * {@link org.apache.commons.math.distribution.NormalCDFPreciseAlgorithm}\n+ * {@link org.apache.commons.math.distribution.NormalDistribution}.\n  * \n- * @version $Revision: 1.9 $ $Date: 2004/05/19 14:16:31 $\n+ * @version $Revision: 1.10 $ $Date: 2004/05/19 15:06:44 $\n  */\n public class NormalDistributionImpl extends AbstractContinuousDistribution \n \t\timplements NormalDistribution, Serializable {\n \t\tsetMean(mean);\n \t\tsetStandardDeviation(sd);\n \t}\n+    \n \t/**\n \t * Creates normal distribution with the mean equal to zero and standard\n \t * deviation equal to one. \n \t */\n \tpublic NormalDistributionImpl(){\n \t\tthis(0.0, 1.0);\n-\t}\t\n+\t}\n+    \n \t/**\n \t * Access the mean.\n \t * @return mean for this distribution\n \tpublic double getMean() {\n \t\treturn mean;\n \t}\n+    \n \t/**\n \t * Modify the mean.\n \t * @param mean for this distribution\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java\n /**\n  * An interface for Chi-Square tests.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/05/03 03:02:25 $ \n+ * @version $Revision: 1.2 $ $Date: 2004/05/19 15:06:44 $ \n  */\n public interface ChiSquareTest {\n      \n      * If any of the preconditions are not met, an \n      * <code>IllegalArgumentException</code> is thrown.\n      *\n-     * @param observed array of observed frequency counts\n-     * @param expected array of exptected frequency counts\n+     * @param counts array representation of 2-way table\n      * @param alpha significance level of the test\n      * @return true iff null hypothesis can be rejected with confidence\n      * 1 - alpha\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n /**\n  * Implements Chi-Square test statistics defined in the {@link ChiSquareTest} interface.\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/05/19 14:16:32 $\n+ * @version $Revision: 1.3 $ $Date: 2004/05/19 15:06:44 $\n  */\n public class ChiSquareTestImpl implements ChiSquareTest, Serializable {\n \n     }\n     \n     /**\n-     * @param observed array of observed frequency counts\n-     * @param expected array of expected frequency counts\n+     * @param counts array representation of 2-way table\n      * @return chi-square test statistic\n      * @throws IllegalArgumentException if preconditions are not met\n      */\n-    public double chiSquare(long[][] counts)\n-    throws IllegalArgumentException {\n+    public double chiSquare(long[][] counts) throws IllegalArgumentException {\n         \n         checkArray(counts);\n         int nRows = counts.length;\n     }\n \n     /**\n-     * @param observed array of observed frequency counts\n-     * @param expected array of exptected frequency counts\n+     * @param counts array representation of 2-way table\n      * @return p-value\n      * @throws IllegalArgumentException if preconditions are not met\n      * @throws MathException if an error occurs computing the p-value\n     }\n \n     /**\n-     * @param observed array of observed frequency counts\n-     * @param expected array of exptected frequency counts\n+     * @param counts array representation of 2-way table\n      * @param alpha significance level of the test\n      * @return true iff null hypothesis can be rejected with confidence\n      * 1 - alpha", "timestamp": 1084979204, "metainfo": ""}