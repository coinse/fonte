{"sha": "19ffb8a7d59a24094c6008c3ddde270642f48368", "log": "Removed last use of MaxEvaluationsExceededException.  This exception was now used only in ODE. It has been replaced by MaxCountExceededException, triggered by an Incrementor instance just as what is done in root solvers.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     MAP_MODIFIED_WHILE_ITERATING(\"map has been modified while iterating\"),\n     EVALUATIONS(\"evaluations\"), /* keep */\n     MAX_COUNT_EXCEEDED(\"maximal count ({0}) exceeded\"), /* keep */\n-    MAX_EVALUATIONS_EXCEEDED(\"maximal number of evaluations ({0}) exceeded\"),\n     MAX_ITERATIONS_EXCEEDED(\"maximal number of iterations ({0}) exceeded\"),\n     MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(\"minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}\"),\n     MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(\"Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae\"),\n--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n import java.util.SortedSet;\n import java.util.TreeSet;\n \n-import org.apache.commons.math.MaxEvaluationsExceededException;\n import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;\n import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;\n import org.apache.commons.math.exception.DimensionMismatchException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.util.FastMath;\n+import org.apache.commons.math.util.Incrementor;\n import org.apache.commons.math.util.MathUtils;\n \n /**\n     /** Name of the method. */\n     private final String name;\n \n-    /** Maximal number of evaluations allowed. */\n-    private int maxEvaluations;\n-\n-    /** Number of evaluations already performed. */\n-    private int evaluations;\n+    /** Counter for number of evaluations. */\n+    private Incrementor evaluations;\n \n     /** Differential equations to integrate. */\n     private transient FirstOrderDifferentialEquations equations;\n         stepSize  = Double.NaN;\n         eventsStates = new ArrayList<EventState>();\n         statesInitialized = false;\n+        evaluations = new Incrementor();\n         setMaxEvaluations(-1);\n         resetEvaluations();\n     }\n \n     /** {@inheritDoc} */\n     public void setMaxEvaluations(int maxEvaluations) {\n-        this.maxEvaluations = (maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations;\n+        evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations);\n     }\n \n     /** {@inheritDoc} */\n     public int getMaxEvaluations() {\n-        return maxEvaluations;\n+        return evaluations.getMaximalCount();\n     }\n \n     /** {@inheritDoc} */\n     public int getEvaluations() {\n-        return evaluations;\n+        return evaluations.getCount();\n     }\n \n     /** Reset the number of evaluations to zero.\n      */\n     protected void resetEvaluations() {\n-        evaluations = 0;\n+        evaluations.resetCount();\n     }\n \n     /** Set the differential equations.\n      * @param t current value of the independent <I>time</I> variable\n      * @param y array containing the current value of the state vector\n      * @param yDot placeholder array where to put the time derivative of the state vector\n-     * @throws MathUserException this user-defined exception should be used if an error is\n-     * is triggered by user code\n+     * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n      */\n     public void computeDerivatives(final double t, final double[] y, final double[] yDot)\n-        throws MathUserException {\n-        if (++evaluations > maxEvaluations) {\n-            throw new MathUserException(new MaxEvaluationsExceededException(maxEvaluations));\n-        }\n+        throws MaxCountExceededException {\n+        evaluations.incrementCount();\n         equations.computeDerivatives(t, y, yDot);\n     }\n \n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java\n \n \n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.TestProblem1;\n \n     }\n \n-    @Test(expected = MathUserException.class)\n+    @Test(expected = MaxCountExceededException.class)\n     public void exceedMaxEvaluations() {\n \n         TestProblem1 pb  = new TestProblem1();\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\n \n \n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.MaxCountExceededException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.TestProblem1;\n \n     }\n \n-    @Test(expected = MathUserException.class)\n+    @Test(expected = MaxCountExceededException.class)\n     public void exceedMaxEvaluations() {\n \n         TestProblem1 pb  = new TestProblem1();", "timestamp": 1315336565, "metainfo": ""}