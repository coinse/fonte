{"sha": "62127dccaf77589717829b9f3d73e6da5c7b4177", "log": "Fixed, documented NaN handling; changed internal counter to long; replaced pow with *.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/Sum.java\n  * If there are no values in the dataset, or any of the values are \n  * <code>NaN</code>, then <code>NaN</code> is returned.  \n  * \n- * @version $Revision: 1.21 $ $Date: 2004/06/29 14:50:21 $\n+ * @version $Revision: 1.22 $ $Date: 2004/06/29 15:39:15 $\n  */\n public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     static final long serialVersionUID = -8231831954703408316L;  \n       \n     /** */\n-    private int n = 0;\n+    private long n = 0;\n     \n     /**\n      * The currently running sum.\n--- a/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java\n \n import java.io.Serializable;\n \n-import org\n-    .apache\n-    .commons\n-    .math\n-    .stat\n-    .univariate\n-    .AbstractStorelessUnivariateStatistic;\n+import org .apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n  * Returns the sum of the squares of the available values.\n- *\n- * @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $\n+ * <p>\n+ * If there are no values in the dataset, or any of the values are \n+ * <code>NaN</code>, then <code>NaN</code> is returned.  \n+ * \n+ * @version $Revision: 1.19 $ $Date: 2004/06/29 15:39:15 $\n  */\n public class SumOfSquares extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     static final long serialVersionUID = 1460986908574398008L;  \n       \n     /** */\n-    private int n = 0;\n+    private long n = 0;\n     \n     /**\n      * The currently running sumSq\n      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)\n      */\n     public void increment(final double d) {\n-        if (Double.isNaN(value)) {\n+        if (n == 0) {\n             value = d * d;\n         } else {\n             value += d * d;\n \n     /**\n      * Returns the sum of the squares of the available values.\n+     * \n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length the number of elements to include\n      * @return the sum of the squared values or Double.NaN if the array is empty\n      * @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)\n      */\n-    public double evaluate(\n-        final double[] values,\n-        final int begin,\n-        final int length) {\n+    public double evaluate(final double[] values,final int begin, final int length) {\n         double sumSq = Double.NaN;\n         if (test(values, begin, length)) {\n             sumSq = 0.0;\n             for (int i = begin; i < begin + length; i++) {\n-                sumSq += Math.pow(values[i], 2.0);\n+                sumSq += values[i] * values[i];\n             }\n         }\n         return sumSq;", "timestamp": 1088523555, "metainfo": ""}