{"sha": "3306daa405bc1937506ba64210dc5ae5d408b65d", "log": "new tests  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java\n+++ b/src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java\n         Assert.assertEquals(0.0,\n                             l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -1, -1))),\n                             1.0e-10);\n+        Assert.assertEquals(0.0,\n+                            l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, 1, 0))),\n+                            1.0e-10);\n+        Assert.assertEquals(0.0,\n+                            l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(1, 0, 0))),\n+                            1.0e-10);\n+        Assert.assertEquals(FastMath.sqrt(8),\n+                            l.distance(new Line(new Vector3D(0, -4, 0), new Vector3D(1, 0, 0))),\n+                            1.0e-10);\n+    }\n+\n+    @Test\n+    public void testClosest() {\n+        Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 1, 1));\n+        Assert.assertEquals(0.0,\n+                            l.closestPoint(new Line(new Vector3D(1, 0, 1), Vector3D.PLUS_K)).distance(new Vector3D(0, 0, 0)),\n+                            1.0e-10);\n+        Assert.assertEquals(0.5,\n+                            l.closestPoint(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(0, -1, -1))).distance(new Vector3D(-0.5, 0, 0)),\n+                            1.0e-10);\n+        Assert.assertEquals(0.0,\n+                            l.closestPoint(l).distance(new Vector3D(0, 0, 0)),\n+                            1.0e-10);\n+        Assert.assertEquals(0.0,\n+                            l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -1, -1))).distance(new Vector3D(0, 0, 0)),\n+                            1.0e-10);\n+        Assert.assertEquals(0.0,\n+                            l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, 1, 0))).distance(new Vector3D(0, -4, -4)),\n+                            1.0e-10);\n+        Assert.assertEquals(0.0,\n+                            l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(1, 0, 0))).distance(new Vector3D(0, -4, -4)),\n+                            1.0e-10);\n+        Assert.assertEquals(0.0,\n+                            l.closestPoint(new Line(new Vector3D(0, -4, 0), new Vector3D(1, 0, 0))).distance(new Vector3D(0, -2, -2)),\n+                            1.0e-10);\n+    }\n+\n+    @Test\n+    public void testIntersection() {\n+        Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 1, 1));\n+        Assert.assertNull(l.intersection(new Line(new Vector3D(1, 0, 1), Vector3D.PLUS_K)));\n+        Assert.assertNull(l.intersection(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(0, -1, -1))));\n+        Assert.assertEquals(0.0,\n+                            l.intersection(l).distance(new Vector3D(0, 0, 0)),\n+                            1.0e-10);\n+        Assert.assertEquals(0.0,\n+                            l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -1, -1))).distance(new Vector3D(0, 0, 0)),\n+                            1.0e-10);\n+        Assert.assertEquals(0.0,\n+                            l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(0, 1, 0))).distance(new Vector3D(0, -4, -4)),\n+                            1.0e-10);\n+        Assert.assertEquals(0.0,\n+                            l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(1, 0, 0))).distance(new Vector3D(0, -4, -4)),\n+                            1.0e-10);\n+        Assert.assertNull(l.intersection(new Line(new Vector3D(0, -4, 0), new Vector3D(1, 0, 0))));\n     }\n \n }", "timestamp": 1313432447, "metainfo": ""}