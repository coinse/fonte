{"sha": "92fcf5e7a86d4ed62c6886c087e79bb3055cdd17", "log": "Reverted changes committed in r1353140. In o.a.c.m3.util.Incrementor, a NullPointerException is now thrown if the call-back function specified at construction is null. o.a.c.m3.util.IterationManager was updated accordingly (used to explicitely use the constructor with null argument).   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/Incrementor.java\n+++ b/src/main/java/org/apache/commons/math3/util/Incrementor.java\n      * @param max Maximal count.\n      */\n     public Incrementor(int max) {\n-        this(max, null);\n+        this(max,\n+             new MaxCountExceededCallback() {\n+                 /** {@inheritDoc} */\n+                 public void trigger(int max) {\n+                     throw new MaxCountExceededException(max);\n+                 }\n+             });\n     }\n \n     /**\n      * counter exhaustion.\n      *\n      * @param max Maximal count.\n-     * @param cb Function to be called when the maximal count has been reached\n-     * (can be {@code null}).\n+     * @param cb Function to be called when the maximal count has been reached.\n+     * @throws NullPointerException if {@code cb} is {@code null}\n      */\n     public Incrementor(int max,\n                        MaxCountExceededCallback cb) {\n+        if (cb == null){\n+            throw new NullPointerException();\n+        }\n         maximalCount = max;\n-        if (cb != null) {\n-            maxCountCallback = cb;\n-        } else {\n-            maxCountCallback = new MaxCountExceededCallback() {\n-                /** {@inheritDoc} */\n-                public void trigger(int max) {\n-                    throw new MaxCountExceededException(max);\n-                }\n-            };\n-        }\n+        maxCountCallback = cb;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math3/util/IterationManager.java\n+++ b/src/main/java/org/apache/commons/math3/util/IterationManager.java\n      * @param maxIterations the maximum number of iterations\n      */\n     public IterationManager(final int maxIterations) {\n-        this(maxIterations, null);\n+        this.iterations = new Incrementor(maxIterations);\n+        this.listeners = new CopyOnWriteArrayList<IterationListener>();\n     }\n \n     /**\n      *\n      * @param maxIterations the maximum number of iterations\n      * @param callBack the function to be called when the maximum number of\n-     * iterations has been reached (can be {@code null})\n+     * iterations has been reached\n+     * @throws NullPointerException if {@code callBack} is {@code null}\n      */\n     public IterationManager(final int maxIterations,\n                             final Incrementor.MaxCountExceededCallback callBack) {\n+        if (callBack == null) {\n+            throw new NullPointerException();\n+        }\n         this.iterations = new Incrementor(maxIterations, callBack);\n         this.listeners = new CopyOnWriteArrayList<IterationListener>();\n     }", "timestamp": 1340601778, "metainfo": ""}