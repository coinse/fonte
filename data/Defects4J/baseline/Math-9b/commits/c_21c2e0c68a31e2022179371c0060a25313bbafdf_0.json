{"sha": "21c2e0c68a31e2022179371c0060a25313bbafdf", "log": "removed MathUserException from ODE package  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     ENDPOINTS_NOT_AN_INTERVAL(\"endpoints do not specify an interval: [{0}, {1}]\"),\n     EQUAL_VERTICES_IN_SIMPLEX(\"equal vertices {0} and {1} in simplex configuration\"),\n     EULER_ANGLES_SINGULARITY(\"Euler angles singularity\"),\n-    EVALUATION_FAILED(\"evaluation failed for argument = {0}\"),\n     EVALUATION(\"evaluation\"), /* keep */\n     EXPANSION_FACTOR_SMALLER_THAN_ONE(\"expansion factor smaller than one ({0})\"),\n     FACTORIAL_NEGATIVE_PARAMETER(\"must have n >= 0 for n!, got n = {0}\"),\n--- a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n+++ b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n \n package org.apache.commons.math.ode;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n-import java.io.Serializable;\n-\n-import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.exception.MathUserException;\n+\n+import org.apache.commons.math.exception.DimensionMismatchException;\n+import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n   /** Append another model at the end of the instance.\n    * @param model model to add at the end of the instance\n-   * @exception MathUserException if user code called from step interpolator\n-   * finalization triggers one\n-   * @exception IllegalArgumentException if the model to append is not\n+   * @exception MathIllegalArgumentException if the model to append is not\n    * compatible with the instance (dimension of the state vector,\n    * propagation direction, hole between the dates)\n    */\n   public void append(final ContinuousOutputModel model)\n-    throws MathUserException {\n+    throws MathIllegalArgumentException {\n \n     if (model.steps.size() == 0) {\n       return;\n     } else {\n \n       if (getInterpolatedState().length != model.getInterpolatedState().length) {\n-          throw MathRuntimeException.createIllegalArgumentException(\n-                LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,\n-                getInterpolatedState().length, model.getInterpolatedState().length);\n+          throw new DimensionMismatchException(model.getInterpolatedState().length,\n+                                               getInterpolatedState().length);\n       }\n \n       if (forward ^ model.forward) {\n-          throw MathRuntimeException.createIllegalArgumentException(\n-                LocalizedFormats.PROPAGATION_DIRECTION_MISMATCH);\n+          throw new MathIllegalArgumentException(LocalizedFormats.PROPAGATION_DIRECTION_MISMATCH);\n       }\n \n       final StepInterpolator lastInterpolator = steps.get(index);\n       final double step = current - previous;\n       final double gap = model.getInitialTime() - current;\n       if (FastMath.abs(gap) > 1.0e-3 * FastMath.abs(step)) {\n-        throw MathRuntimeException.createIllegalArgumentException(\n-              LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES, FastMath.abs(gap));\n+        throw new MathIllegalArgumentException(LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES,\n+                                               FastMath.abs(gap));\n       }\n \n     }\n    * the instance for later use.\n    * @param interpolator interpolator for the last accepted step.\n    * @param isLast true if the step is the last one\n-   * @exception MathUserException if user code called from step interpolator\n-   * finalization triggers one\n-   */\n-  public void handleStep(final StepInterpolator interpolator, final boolean isLast)\n-    throws MathUserException {\n+   */\n+  public void handleStep(final StepInterpolator interpolator, final boolean isLast) {\n \n     if (steps.size() == 0) {\n       initialTime = interpolator.getPreviousTime();\n   /**\n    * Get the state vector of the interpolated point.\n    * @return state vector at time {@link #getInterpolatedTime}\n-   * @exception MathUserException if user code called from step interpolator\n-   * finalization triggers one\n-   */\n-  public double[] getInterpolatedState() throws MathUserException {\n+   */\n+  public double[] getInterpolatedState() {\n     return steps.get(index).getInterpolatedState();\n   }\n \n--- a/src/main/java/org/apache/commons/math/ode/FirstOrderConverter.java\n+++ b/src/main/java/org/apache/commons/math/ode/FirstOrderConverter.java\n \n package org.apache.commons.math.ode;\n \n-import org.apache.commons.math.exception.MathUserException;\n \n /** This class converts second order differential equations to first\n  * order ones.\n    * @param t current value of the independent <I>time</I> variable\n    * @param y array containing the current value of the state vector\n    * @param yDot placeholder array where to put the time derivative of the state vector\n-   * @throws MathUserException this exception is propagated to the caller if the\n-   * underlying user function triggers one\n    */\n-  public void computeDerivatives(final double t, final double[] y, final double[] yDot)\n-      throws MathUserException {\n+  public void computeDerivatives(final double t, final double[] y, final double[] yDot) {\n \n     // split the state vector in two\n     System.arraycopy(y, 0,         z,    0, dimension);\n--- a/src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n+++ b/src/main/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n \n package org.apache.commons.math.ode;\n \n-import org.apache.commons.math.exception.MathUserException;\n \n \n /** This interface represents a first order differential equations set.\n      * @param t current value of the independent <I>time</I> variable\n      * @param y array containing the current value of the state vector\n      * @param yDot placeholder array where to put the time derivative of the state vector\n-     * @throws MathUserException this user-defined exception should be used if an error is\n-     * is triggered by user code\n      */\n-    void computeDerivatives(double t, double[] y, double[] yDot)\n-        throws MathUserException;\n+    void computeDerivatives(double t, double[] y, double[] yDot);\n \n }\n--- a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java\n \n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;\n         }\n \n         /** {@inheritDoc} */\n-        public void computeDerivatives(double t, double[] y, double[] dot)\n-                throws MathUserException {\n+        public void computeDerivatives(double t, double[] y, double[] dot) {\n             MultistepIntegrator.this.computeDerivatives(t, y, dot);\n         }\n \n--- a/src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java\n+++ b/src/main/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java\n \n package org.apache.commons.math.ode;\n \n-import org.apache.commons.math.exception.MathUserException;\n \n /** This interface represents a second order differential equations set.\n \n      * of the state vector\n      * @param yDDot placeholder array where to put the second time derivative\n      * of the state vector\n-     * @throws MathUserException this user-defined exception should be used if an error is\n-     * is triggered by user code\n      */\n-    void computeSecondDerivatives(double t, double[] y, double[] yDot, double[] yDDot)\n-        throws MathUserException;\n+    void computeSecondDerivatives(double t, double[] y, double[] yDot, double[] yDDot);\n \n }\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java\n    * @param y1 work array for a state vector\n    * @param yDot1 work array for the first time derivative of y1\n    * @return first integration step\n-   * @exception MathUserException this exception is propagated to\n-   * the caller if the underlying user function triggers one\n    */\n   public double initializeStep(final FirstOrderDifferentialEquations equations,\n                                final boolean forward, final int order, final double[] scale,\n                                final double t0, final double[] y0, final double[] yDot0,\n-                               final double[] y1, final double[] yDot1)\n-      throws MathUserException {\n+                               final double[] y1, final double[] yDot1) {\n \n     if (initialStep > 0) {\n       // use the user provided value\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n /**\n     /** {@inheritDoc} */\n     @Override\n     protected void computeInterpolatedStateAndDerivatives(final double theta,\n-                                            final double oneMinusThetaH)\n-        throws MathUserException {\n+                                            final double oneMinusThetaH) {\n \n         final double fourTheta      = 4 * theta;\n         final double oneMinusTheta  = 1 - theta;\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.AbstractIntegrator;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n   /** {@inheritDoc} */\n   @Override\n   protected void computeInterpolatedStateAndDerivatives(final double theta,\n-                                          final double oneMinusThetaH)\n-    throws MathUserException {\n+                                          final double oneMinusThetaH) {\n \n     if (! vectorsInitialized) {\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.AbstractIntegrator;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n   /** {@inheritDoc} */\n   @Override\n   protected void computeInterpolatedStateAndDerivatives(final double theta,\n-                                          final double oneMinusThetaH)\n-    throws MathUserException {\n+                                          final double oneMinusThetaH) {\n \n     if (! vectorsInitialized) {\n \n \n   /** {@inheritDoc} */\n   @Override\n-  protected void doFinalize()\n-    throws MathUserException {\n+  protected void doFinalize() {\n \n     if (currentState == null) {\n       // we are finalizing an uninitialized instance\n     try {\n       // save the local attributes\n       finalizeStep();\n-    } catch (MathUserException e) {\n+    } catch (Exception e) {\n         IOException ioe = new IOException(e.getLocalizedMessage());\n         ioe.initCause(e);\n         throw ioe;\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n /**\n   /** {@inheritDoc} */\n   @Override\n   protected void computeInterpolatedStateAndDerivatives(final double theta,\n-                                          final double oneMinusThetaH)\n-    throws MathUserException {\n+                                          final double oneMinusThetaH) {\n \n     for (int i = 0; i < interpolatedState.length; ++i) {\n       interpolatedState[i] = currentState[i] - oneMinusThetaH * yDotK[0][i];\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n \n   /** {@inheritDoc} */\n   @Override\n   protected void computeInterpolatedStateAndDerivatives(final double theta,\n-                                          final double oneMinusThetaH)\n-    throws MathUserException {\n+                                          final double oneMinusThetaH) {\n \n     final double twoTheta  = 2 * theta;\n     final double fourTheta = 4 * theta;\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java\n import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.MathIllegalStateException;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.events.EventHandler;\n import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n    * @param yTmp placeholder for one state vector\n    * @return true if computation was done properly,\n    *         false if stability check failed before end of computation\n-   * @throws MathUserException this exception is propagated to the caller if the\n-   * underlying user function triggers one\n    */\n   private boolean tryStep(final double t0, final double[] y0, final double step, final int k,\n                           final double[] scale, final double[][] f,\n                           final double[] yMiddle, final double[] yEnd,\n-                          final double[] yTmp)\n-    throws MathUserException {\n+                          final double[] yTmp) {\n \n     final int    n        = sequence[k];\n     final double subStep  = step / n;\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n /**\n   /** {@inheritDoc} */\n   @Override\n   protected void computeInterpolatedStateAndDerivatives(final double theta,\n-                                          final double oneMinusThetaH)\n-    throws MathUserException {\n+                                          final double oneMinusThetaH) {\n \n     final double theta2 = theta * theta;\n \n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n /**\n   /** {@inheritDoc} */\n   @Override\n   protected void computeInterpolatedStateAndDerivatives(final double theta,\n-                                          final double oneMinusThetaH)\n-    throws MathUserException {\n+                                          final double oneMinusThetaH) {\n \n     final double coeff1    = oneMinusThetaH * theta;\n     final double coeff2    = oneMinusThetaH * (1.0 + theta);\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java\n \n package org.apache.commons.math.ode.nonstiff;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n /**\n   /** {@inheritDoc} */\n   @Override\n   protected void computeInterpolatedStateAndDerivatives(final double theta,\n-                                          final double oneMinusThetaH)\n-      throws MathUserException {\n+                                          final double oneMinusThetaH) {\n \n       final double fourTheta2 = 4 * theta * theta;\n       final double s          = oneMinusThetaH / 8.0;\n--- a/src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n \n-import org.apache.commons.math.exception.MathUserException;\n-\n /** This abstract class represents an interpolator over the last step\n  * during an ODE integration.\n  *\n   }\n \n   /** {@inheritDoc} */\n-   public StepInterpolator copy() throws MathUserException {\n+   public StepInterpolator copy() {\n \n      // finalize the step before performing copy\n      finalizeStep();\n    * (theta is zero at the previous time step and one at the current time step)\n    * @param oneMinusThetaH time gap between the interpolated time and\n    * the current time\n-   * @throws MathUserException this exception is propagated to the caller if the\n-   * underlying user function triggers one\n    */\n   protected abstract void computeInterpolatedStateAndDerivatives(double theta,\n-                                                                 double oneMinusThetaH)\n-    throws MathUserException;\n-\n-  /** {@inheritDoc} */\n-  public double[] getInterpolatedState() throws MathUserException {\n+                                                                 double oneMinusThetaH);\n+\n+  /** {@inheritDoc} */\n+  public double[] getInterpolatedState() {\n \n       // lazy evaluation of the state\n       if (dirtyState) {\n   }\n \n   /** {@inheritDoc} */\n-  public double[] getInterpolatedDerivatives() throws MathUserException {\n+  public double[] getInterpolatedDerivatives() {\n \n       // lazy evaluation of the state\n       if (dirtyState) {\n    * Therefore, subclasses are not allowed not reimplement it, they\n    * should rather reimplement <code>doFinalize</code>.</p>\n \n-   * @throws MathUserException this exception is propagated to the\n-   * caller if the underlying user function triggers one\n-   */\n-  public final void finalizeStep()\n-    throws MathUserException {\n+   */\n+  public final void finalizeStep() {\n     if (! finalized) {\n       doFinalize();\n       finalized = true;\n   /**\n    * Really finalize the step.\n    * The default implementation of this method does nothing.\n-   * @throws MathUserException this exception is propagated to the\n-   * caller if the underlying user function triggers one\n-   */\n-  protected void doFinalize()\n-    throws MathUserException {\n+   */\n+  protected void doFinalize() {\n   }\n \n   /** {@inheritDoc} */\n     // finalize the step (and don't bother saving the now true flag)\n     try {\n       finalizeStep();\n-    } catch (MathUserException e) {\n+    } catch (Exception e) {\n         IOException ioe = new IOException(e.getLocalizedMessage());\n         ioe.initCause(e);\n         throw ioe;\n--- a/src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java\n \n package org.apache.commons.math.ode.sampling;\n \n-import org.apache.commons.math.exception.MathUserException;\n \n /**\n  * This interface represents a handler that should be called after\n    * provide at the end of the integration a complete array of all\n    * steps), it should build a local copy store this copy.\n    * @param isLast true if the step is the last one\n-   * @throws MathUserException if some error condition is encountered\n    */\n-  void handleStep(double t, double[] y, double[] yDot, boolean isLast) throws MathUserException;\n+  void handleStep(double t, double[] y, double[] yDot, boolean isLast);\n \n }\n--- a/src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java\n import java.io.ObjectOutput;\n import java.util.Arrays;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.linear.Array2DRowRealMatrix;\n import org.apache.commons.math.util.FastMath;\n \n      * to be preserved across several calls.</p>\n      * @return state vector at time {@link #getInterpolatedTime}\n      * @see #getInterpolatedDerivatives()\n-     * @throws MathUserException if this call induces an automatic\n-     * step finalization that throws one\n-     */\n-    public double[] getInterpolatedStateVariation()\n-        throws MathUserException {\n+     */\n+    public double[] getInterpolatedStateVariation() {\n         // compute and ignore interpolated state\n         // to make sure state variation is computed as a side effect\n         getInterpolatedState();\n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java\n package org.apache.commons.math.ode.sampling;\n \n import java.io.Externalizable;\n-\n-import org.apache.commons.math.exception.MathUserException;\n \n /** This interface represents an interpolator over the last step\n  * during an ODE integration.\n    * to be preserved across several calls.</p>\n    * @return state vector at time {@link #getInterpolatedTime}\n    * @see #getInterpolatedDerivatives()\n-   * @exception MathUserException if user code called from step interpolator\n-   * finalization triggers one\n    */\n-  double[] getInterpolatedState() throws MathUserException;\n+  double[] getInterpolatedState();\n \n   /**\n    * Get the derivatives of the state vector of the interpolated point.\n    * to be preserved across several calls.</p>\n    * @return derivatives of the state vector at time {@link #getInterpolatedTime}\n    * @see #getInterpolatedState()\n-   * @exception MathUserException if user code called from step interpolator\n-   * finalization triggers one\n    * @since 2.0\n    */\n-  double[] getInterpolatedDerivatives() throws MathUserException;\n+  double[] getInterpolatedDerivatives();\n \n   /** Check if the natural integration direction is forward.\n    * <p>This method provides the integration direction as specified by\n    * original one. Both can be used with different settings for\n    * interpolated time without any side effect.</p>\n    * @return a deep copy of the instance, which can be used independently.\n-   * @exception MathUserException if user code called from step interpolator\n-   * finalization triggers one\n    * @see #setInterpolatedTime(double)\n    */\n-   StepInterpolator copy() throws MathUserException;\n+   StepInterpolator copy();\n \n }\n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java\n \n package org.apache.commons.math.ode.sampling;\n \n-import org.apache.commons.math.exception.MathUserException;\n-import org.apache.commons.math.ode.sampling.FixedStepHandler;\n-import org.apache.commons.math.ode.sampling.StepHandler;\n-import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.util.MathUtils;\n \n      * should build a local copy using the clone method and store this\n      * copy.\n      * @param isLast true if the step is the last one\n-     * @throws MathUserException this exception is propagated to the\n-     * caller if the underlying user function triggers one\n-     */\n-    public void handleStep(final StepInterpolator interpolator,\n-                           final boolean isLast) throws MathUserException {\n+     */\n+    public void handleStep(final StepInterpolator interpolator, final boolean isLast) {\n         // The first time, update the last state with the start information.\n         if (lastState == null) {\n             firstTime = interpolator.getPreviousTime();\n     /**\n      * Invokes the underlying step handler for the current normalized step.\n      * @param isLast true if the step is the last one\n-     * @throws MathUserException this exception is propagated to the\n-     * caller if the underlying user function triggers one\n-     */\n-    private void doNormalizedStep(boolean isLast) throws MathUserException {\n+     */\n+    private void doNormalizedStep(boolean isLast) {\n         if (!bounds.firstIncluded() && firstTime == lastTime) {\n             return;\n         }\n--- a/src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n \n import java.util.Random;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;\n import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;\n import org.apache.commons.math.ode.sampling.DummyStepInterpolator;\n       // theoretical solution: y[0] = cos(t), y[1] = sin(t)\n       FirstOrderDifferentialEquations problem =\n           new FirstOrderDifferentialEquations() {\n-              public void computeDerivatives(double t, double[] y, double[] dot)\n-                  throws MathUserException {\n+              public void computeDerivatives(double t, double[] y, double[] dot) {\n                   dot[0] = -y[1];\n                   dot[1] =  y[0];\n               }\n   }\n \n   @Test\n-  public void testErrorConditions()\n-    throws MathUserException {\n+  public void testErrorConditions() {\n \n       ContinuousOutputModel cm = new ContinuousOutputModel();\n       cm.handleStep(buildInterpolator(0, new double[] { 0.0, 1.0, -2.0 }, 1), true);\n   }\n \n   private boolean checkAppendError(ContinuousOutputModel cm,\n-                                   double t0, double[] y0, double t1)\n-  throws MathUserException {\n+                                   double t0, double[] y0, double t1) {\n       try {\n           ContinuousOutputModel otherCm = new ContinuousOutputModel();\n           otherCm.handleStep(buildInterpolator(t0, y0, t1), true);\n--- a/src/test/java/org/apache/commons/math/ode/TestProblemHandler.java\n+++ b/src/test/java/org/apache/commons/math/ode/TestProblemHandler.java\n \n package org.apache.commons.math.ode;\n \n-import org.apache.commons.math.exception.MathUserException;\n-import org.apache.commons.math.ode.ODEIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n import org.apache.commons.math.util.FastMath;\n     expectedStepStart = Double.NaN;\n   }\n \n-  public void handleStep(StepInterpolator interpolator,\n-                         boolean isLast)\n-    throws MathUserException {\n+  public void handleStep(StepInterpolator interpolator, boolean isLast) {\n \n     double start = integrator.getCurrentStepStart();\n     if (FastMath.abs((start - problem.getInitialTime()) / integrator.getCurrentSignedStepsize()) > 0.001) {\n--- a/src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java\n \n import org.apache.commons.math.analysis.solvers.BaseSecantSolver;\n import org.apache.commons.math.analysis.solvers.PegasusSolver;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;\n     }\n \n     /** {@inheritDoc} */\n-    public void computeDerivatives(double t, double[] y, double[] yDot) throws MathUserException {\n+    public void computeDerivatives(double t, double[] y, double[] yDot) {\n         yDot[0] = 1.0;\n         yDot[1] = 2.0;\n     }\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\n \n \n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n     public void reset() {\n       maxError = 0;\n     }\n-    public void handleStep(StepInterpolator interpolator,\n-                           boolean isLast) throws MathUserException {\n+    public void handleStep(StepInterpolator interpolator, boolean isLast) {\n \n       double[] interpolatedY = interpolator.getInterpolatedState ();\n       double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.TestProblem1;\n       nbSteps = 0;\n       maxError = 0;\n     }\n-    public void handleStep(StepInterpolator interpolator,\n-                           boolean isLast)\n-    throws MathUserException {\n+    public void handleStep(StepInterpolator interpolator, boolean isLast) {\n \n       ++nbSteps;\n       for (int a = 1; a < 10; ++a) {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n                                                                       scalAbsoluteTolerance,\n                                                                       scalRelativeTolerance);\n       integ.addStepHandler(new StepHandler() {\n-        public void handleStep(StepInterpolator interpolator, boolean isLast)\n-          throws MathUserException {\n+        public void handleStep(StepInterpolator interpolator, boolean isLast) {\n               StepInterpolator cloned = interpolator.copy();\n               double tA = cloned.getPreviousTime();\n               double tB = cloned.getCurrentTime();\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n       nbSteps = 0;\n       maxError = 0;\n     }\n-    public void handleStep(StepInterpolator interpolator,\n-                           boolean isLast)\n-    throws MathUserException {\n+    public void handleStep(StepInterpolator interpolator, boolean isLast) {\n \n       ++nbSteps;\n       for (int a = 1; a < 10; ++a) {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n                                                                       scalAbsoluteTolerance,\n                                                                       scalRelativeTolerance);\n     integ.addStepHandler(new StepHandler() {\n-        public void handleStep(StepInterpolator interpolator, boolean isLast)\n-        throws MathUserException {\n+        public void handleStep(StepInterpolator interpolator, boolean isLast) {\n             StepInterpolator cloned = interpolator.copy();\n             double tA = cloned.getPreviousTime();\n             double tB = cloned.getCurrentTime();\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.TestProblem1;\n import org.apache.commons.math.ode.TestProblem3;\n   }\n \n   @Test\n-  public void interpolationAtBounds()\n-    throws MathUserException {\n+  public void interpolationAtBounds() {\n \n     double   t0 = 0;\n     double[] y0 = {0.0, 1.0, -2.0};\n   }\n \n   @Test\n-  public void interpolationInside()\n-  throws MathUserException {\n+  public void interpolationInside() {\n \n     double[]   y    =   { 1.0, 3.0, -4.0 };\n     double[][] yDot = { { 1.0, 2.0, -2.0 } };\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java\n \n \n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.TestProblem1;\n     public void reset() {\n       maxError = 0;\n     }\n-    public void handleStep(StepInterpolator interpolator,\n-                           boolean isLast) throws MathUserException {\n+    public void handleStep(StepInterpolator interpolator, boolean isLast) {\n \n       double[] interpolatedY = interpolator.getInterpolatedState();\n       double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java\n package org.apache.commons.math.ode.nonstiff;\n \n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n \n           public void reset() {}\n \n-          public void handleStep(StepInterpolator interpolator, boolean isLast) throws MathUserException {\n+          public void handleStep(StepInterpolator interpolator, boolean isLast) {\n               double t = interpolator.getCurrentTime();\n               interpolator.setInterpolatedTime(t);\n               double[] y = interpolator.getInterpolatedState();\n       nbSteps = 0;\n       maxError = 0;\n     }\n-    public void handleStep(StepInterpolator interpolator,\n-                           boolean isLast)\n-    throws MathUserException {\n+    public void handleStep(StepInterpolator interpolator, boolean isLast) {\n \n       ++nbSteps;\n       for (int a = 1; a < 100; ++a) {\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n                                                                           scalAbsoluteTolerance,\n                                                                           scalRelativeTolerance);\n     integ.addStepHandler(new StepHandler() {\n-        public void handleStep(StepInterpolator interpolator, boolean isLast)\n-        throws MathUserException {\n+        public void handleStep(StepInterpolator interpolator, boolean isLast) {\n             StepInterpolator cloned = interpolator.copy();\n             double tA = cloned.getPreviousTime();\n             double tB = cloned.getCurrentTime();\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java\n \n \n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.MathIllegalNumberException;\n import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.TooManyEvaluationsException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n           new HighamHall54Integrator(0.0, 1.0, 1.0e-10, 1.0e-10);\n       FirstOrderDifferentialEquations equations =\n           new FirstOrderDifferentialEquations() {\n-            public void computeDerivatives(double t, double[] y, double[] dot)\n-            throws MathUserException {\n+            public void computeDerivatives(double t, double[] y, double[] dot) {\n             if (t < -0.5) {\n-                throw new MathUserException(LocalizedFormats.SIMPLE_MESSAGE, \"oops\");\n+                throw new LocalException(t);\n             } else {\n-                throw new MathUserException(new RuntimeException(\"oops\"));\n+                throw new RuntimeException(\"oops\");\n            }\n           }\n           public int getDimension() {\n       try  {\n         integrator.integrate(equations, -1.0, new double[1], 0.0, new double[1]);\n         Assert.fail(\"an exception should have been thrown\");\n-      } catch(MathUserException de) {\n+      } catch(LocalException de) {\n         // expected behavior\n       }\n \n       try  {\n         integrator.integrate(equations, 0.0, new double[1], 1.0, new double[1]);\n         Assert.fail(\"an exception should have been thrown\");\n-      } catch(MathUserException de) {\n+      } catch(RuntimeException de) {\n         // expected behavior\n       }\n \n \n   }\n \n-  @Test\n-  public void testEventsErrors() throws Exception {\n+  @Test(expected=LocalException.class)\n+  public void testEventsErrors() {\n \n       final TestProblem1 pb = new TestProblem1();\n       double minStep = 0;\n           double middle = (pb.getInitialTime() + pb.getFinalTime()) / 2;\n           double offset = t - middle;\n           if (offset > 0) {\n-            throw new MathUserException(LocalizedFormats.EVALUATION_FAILED, t);\n+            throw new LocalException(t);\n           }\n           return offset;\n         }\n         }\n       }, Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);\n \n-      try {\n-        integ.integrate(pb,\n-                        pb.getInitialTime(), pb.getInitialState(),\n-                        pb.getFinalTime(), new double[pb.getDimension()]);\n-        Assert.fail(\"an exception should have been thrown\");\n-      } catch (MathUserException ie) {\n-        // expected behavior\n-      }\n-\n+      integ.integrate(pb,\n+                      pb.getInitialTime(), pb.getInitialState(),\n+                      pb.getFinalTime(), new double[pb.getDimension()]);\n+\n+  }\n+\n+  private static class LocalException extends MathIllegalNumberException {\n+    private static final long serialVersionUID = 3041292643919807960L;\n+    protected LocalException(Number wrong) {\n+        super(LocalizedFormats.SIMPLE_MESSAGE, wrong);\n+    }\n   }\n \n   @Test\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java\n import java.io.ObjectOutputStream;\n import java.util.Random;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.TestProblem3;\n import org.apache.commons.math.ode.sampling.StepHandler;\n                                                               scalAbsoluteTolerance,\n                                                               scalRelativeTolerance);\n     integ.addStepHandler(new StepHandler() {\n-        public void handleStep(StepInterpolator interpolator, boolean isLast)\n-        throws MathUserException {\n+        public void handleStep(StepInterpolator interpolator, boolean isLast) {\n             StepInterpolator cloned = interpolator.copy();\n             double tA = cloned.getPreviousTime();\n             double tB = cloned.getCurrentTime();\n--- a/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java\n \n \n import org.apache.commons.math.exception.DimensionMismatchException;\n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.TestProblem1;\n       maxError = 0;\n     }\n \n-    public void handleStep(StepInterpolator interpolator,\n-                           boolean isLast) throws MathUserException {\n+    public void handleStep(StepInterpolator interpolator, boolean isLast) {\n \n       double[] interpolatedY = interpolator.getInterpolatedState();\n       double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());\n--- a/src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java\n package org.apache.commons.math.ode.sampling;\n \n \n+import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n-import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.IOException;\n \n-import org.apache.commons.math.exception.MathUserException;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n-import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n-import org.apache.commons.math.ode.sampling.DummyStepInterpolator;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n public class DummyStepInterpolatorTest {\n \n   @Test\n-  public void testNoReset() throws MathUserException {\n+  public void testNoReset() {\n \n     double[]   y    =   { 0.0, 1.0, -2.0 };\n     DummyStepInterpolator interpolator = new DummyStepInterpolator(y, new double[y.length], true);\n   }\n \n   @Test\n-  public void testFixedState()\n-    throws MathUserException {\n+  public void testFixedState() {\n \n     double[]   y    =   { 1.0, 3.0, -4.0 };\n     DummyStepInterpolator interpolator = new DummyStepInterpolator(y, new double[y.length], true);\n \n   @Test\n   public void testSerialization()\n-  throws MathUserException, IOException, ClassNotFoundException {\n+  throws IOException, ClassNotFoundException {\n \n     double[]   y    =   { 0.0, 1.0, -2.0 };\n     DummyStepInterpolator interpolator = new DummyStepInterpolator(y, new double[y.length], true);\n           super(y, new double[y.length], forward);\n       }\n       @Override\n-      protected void doFinalize() throws MathUserException {\n-          throw new MathUserException(LocalizedFormats.SIMPLE_MESSAGE, \"\");\n+      protected void doFinalize() {\n+          throw new MathIllegalStateException(LocalizedFormats.SIMPLE_MESSAGE, \"\");\n       }\n   }\n }\n--- a/src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java\n package org.apache.commons.math.ode.sampling;\n \n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.TestProblemAbstract;\n import org.apache.commons.math.util.FastMath;\n                                                    final double threshold) {\n         integrator.addStepHandler(new StepHandler() {\n \n-            public void handleStep(StepInterpolator interpolator, boolean isLast)\n-                throws MathUserException {\n+            public void handleStep(StepInterpolator interpolator, boolean isLast) {\n \n                 final double h = 0.001 * (interpolator.getCurrentTime() - interpolator.getPreviousTime());\n                 final double t = interpolator.getCurrentTime() - 300 * h;\n--- a/src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java\n+++ b/src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n import org.apache.commons.math.ode.FirstOrderIntegrator;\n import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;\n     }\n \n     /** {@inheritDoc} */\n-    public void computeDerivatives(double t, double[] y, double[] yDot)\n-        throws MathUserException {\n+    public void computeDerivatives(double t, double[] y, double[] yDot) {\n         yDot[0] = y[0];\n     }\n \n     /** {@inheritDoc} */\n-    public void handleStep(double t, double[] y, double[] yDot, boolean isLast)\n-        throws MathUserException {\n+    public void handleStep(double t, double[] y, double[] yDot, boolean isLast) {\n         output.add(t);\n     }\n }", "timestamp": 1315336672, "metainfo": ""}