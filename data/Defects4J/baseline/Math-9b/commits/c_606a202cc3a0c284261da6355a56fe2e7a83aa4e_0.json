{"sha": "606a202cc3a0c284261da6355a56fe2e7a83aa4e", "log": "fixed checkstyle errors  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n- * or agreed to in writing, software distributed under the License is\n- * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the specific language\n- * governing permissions and limitations under the License.\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n package org.apache.commons.math.distribution;\n \n import org.apache.commons.math.MathException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.special.Beta;\n-import org.apache.commons.math.util.MathUtils;\n \n /**\n  * The default implementation of {@link BinomialDistribution}.\n- * \n- * @version $Revision$ $Date: 2009-09-05 12:36:48 -0500 (Sat, 05 Sep\n- *          2009) $\n+ *\n+ * @version $Revision$ $Date$\n  */\n public class BinomialDistributionImpl extends AbstractIntegerDistribution\n         implements BinomialDistribution, Serializable {\n     /**\n      * Create a binomial distribution with the given number of trials and\n      * probability of success.\n-     * \n+     *\n      * @param trials the number of trials.\n      * @param p the probability of success.\n      */\n \n     /**\n      * Access the number of trials for this distribution.\n-     * \n+     *\n      * @return the number of trials.\n      */\n     public int getNumberOfTrials() {\n \n     /**\n      * Access the probability of success for this distribution.\n-     * \n+     *\n      * @return the probability of success.\n      */\n     public double getProbabilityOfSuccess() {\n \n     /**\n      * Change the number of trials for this distribution.\n-     * \n+     *\n      * @param trials the new number of trials.\n      * @throws IllegalArgumentException if <code>trials</code> is not a valid\n      *             number of trials.\n \n     /**\n      * Change the probability of success for this distribution.\n-     * \n+     *\n      * @param p the new probability of success.\n      * @throws IllegalArgumentException if <code>p</code> is not a valid\n      *             probability.\n     /**\n      * Access the domain value lower bound, based on <code>p</code>, used to\n      * bracket a PDF root.\n-     * \n+     *\n      * @param p the desired probability for the critical value\n      * @return domain value lower bound, i.e. P(X &lt; <i>lower bound</i>) &lt;\n      *         <code>p</code>\n     /**\n      * Access the domain value upper bound, based on <code>p</code>, used to\n      * bracket a PDF root.\n-     * \n+     *\n      * @param p the desired probability for the critical value\n      * @return domain value upper bound, i.e. P(X &lt; <i>upper bound</i>) &gt;\n      *         <code>p</code>\n \n     /**\n      * For this distribution, X, this method returns P(X &le; x).\n-     * \n+     *\n      * @param x the value at which the PDF is evaluated.\n      * @return PDF for this distribution.\n      * @throws MathException if the cumulative probability can not be computed\n \n     /**\n      * For this distribution, X, this method returns P(X = x).\n-     * \n+     *\n      * @param x the value at which the PMF is evaluated.\n      * @return PMF for this distribution.\n      */\n      * Returns <code>-1</code> for p=0 and <code>Integer.MAX_VALUE</code> for\n      * p=1.\n      * </p>\n-     * \n+     *\n      * @param p the desired probability\n      * @return the largest x such that P(X &le; x) <= p\n      * @throws MathException if the inverse cumulative probability can not be\n--- a/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n- * or agreed to in writing, software distributed under the License is\n- * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the specific language\n- * governing permissions and limitations under the License.\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n \n package org.apache.commons.math.distribution;\n \n /**\n  * The default implementation of {@link HypergeometricDistribution}.\n- * \n- * @version $Revision$ $Date: 2009-09-05 12:36:48 -0500 (Sat, 05 Sep\n- *          2009) $\n+ *\n+ * @version $Revision$ $Date$\n  */\n public class HypergeometricDistributionImpl extends AbstractIntegerDistribution\n         implements HypergeometricDistribution, Serializable {\n     /**\n      * Construct a new hypergeometric distribution with the given the population\n      * size, the number of successes in the population, and the sample size.\n-     * \n+     *\n      * @param populationSize the population size.\n      * @param numberOfSuccesses number of successes in the population.\n      * @param sampleSize the sample size.\n \n     /**\n      * For this distribution, X, this method returns P(X &le; x).\n-     * \n+     *\n      * @param x the value at which the PDF is evaluated.\n      * @return PDF for this distribution.\n      */\n \n     /**\n      * Return the domain for the given hypergeometric distribution parameters.\n-     * \n+     *\n      * @param n the population size.\n      * @param m number of successes in the population.\n      * @param k the sample size.\n     /**\n      * Access the domain value lower bound, based on <code>p</code>, used to\n      * bracket a PDF root.\n-     * \n+     *\n      * @param p the desired probability for the critical value\n      * @return domain value lower bound, i.e. P(X &lt; <i>lower bound</i>) &lt;\n      *         <code>p</code>\n     /**\n      * Access the domain value upper bound, based on <code>p</code>, used to\n      * bracket a PDF root.\n-     * \n+     *\n      * @param p the desired probability for the critical value\n      * @return domain value upper bound, i.e. P(X &lt; <i>upper bound</i>) &gt;\n      *         <code>p</code>\n     /**\n      * Return the lowest domain value for the given hypergeometric distribution\n      * parameters.\n-     * \n+     *\n      * @param n the population size.\n      * @param m number of successes in the population.\n      * @param k the sample size.\n \n     /**\n      * Access the number of successes.\n-     * \n+     *\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n \n     /**\n      * Access the population size.\n-     * \n+     *\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n \n     /**\n      * Access the sample size.\n-     * \n+     *\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n     /**\n      * Return the highest domain value for the given hypergeometric distribution\n      * parameters.\n-     * \n+     *\n      * @param m number of successes in the population.\n      * @param k the sample size.\n      * @return the highest domain value of the hypergeometric distribution.\n \n     /**\n      * For this distribution, X, this method returns P(X = x).\n-     * \n+     *\n      * @param x the value at which the PMF is evaluated.\n      * @return PMF for this distribution.\n      */\n             double q = (double) (m - sampleSize) / (double) m;\n             double p1 = SaddlePointExpansion.logBinomialProbability(x,\n                     numberOfSuccesses, p, q);\n-            double p2 = SaddlePointExpansion.logBinomialProbability(sampleSize\n-                    - x, f, p, q);\n-            double p3 = SaddlePointExpansion.logBinomialProbability(sampleSize,\n-                    m, p, q);\n+            double p2 =\n+                SaddlePointExpansion.logBinomialProbability(sampleSize - x, f, p, q);\n+            double p3 =\n+                SaddlePointExpansion.logBinomialProbability(sampleSize, m, p, q);\n             ret = Math.exp(p1 + p2 - p3);\n         }\n \n     /**\n      * For the distribution, X, defined by the given hypergeometric distribution\n      * parameters, this method returns P(X = x).\n-     * \n+     *\n      * @param n the population size.\n      * @param m number of successes in the population.\n      * @param k the sample size.\n      * @return PMF for the distribution.\n      */\n     private double probability(int n, int m, int k, int x) {\n-        return Math.exp(MathUtils.binomialCoefficientLog(m, x)\n-                + MathUtils.binomialCoefficientLog(n - m, k - x)\n-                - MathUtils.binomialCoefficientLog(n, k));\n+        return Math.exp(MathUtils.binomialCoefficientLog(m, x) +\n+               MathUtils.binomialCoefficientLog(n - m, k - x) -\n+               MathUtils.binomialCoefficientLog(n, k));\n     }\n \n     /**\n      * Modify the number of successes.\n-     * \n+     *\n      * @param num the new number of successes.\n      * @throws IllegalArgumentException if <code>num</code> is negative.\n      */\n \n     /**\n      * Modify the population size.\n-     * \n+     *\n      * @param size the new population size.\n      * @throws IllegalArgumentException if <code>size</code> is not positive.\n      */\n \n     /**\n      * Modify the sample size.\n-     * \n+     *\n      * @param size the new sample size.\n      * @throws IllegalArgumentException if <code>size</code> is negative.\n      */\n \n     /**\n      * For this distribution, X, this method returns P(X &ge; x).\n-     * \n+     *\n      * @param x the value at which the CDF is evaluated.\n      * @return upper tail CDF for this distribution.\n      * @since 1.1\n      * For this distribution, X, this method returns P(x0 &le; X &le; x1). This\n      * probability is computed by summing the point probabilities for the values\n      * x0, x0 + 1, x0 + 2, ..., x1, in the order directed by dx.\n-     * \n+     *\n      * @param x0 the inclusive, lower bound\n      * @param x1 the inclusive, upper bound\n      * @param dx the direction of summation. 1 indicates summing from x0 to x1.\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n- * or agreed to in writing, software distributed under the License is\n- * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the specific language\n- * governing permissions and limitations under the License.\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n package org.apache.commons.math.distribution;\n \n \n /**\n  * Implementation for the {@link PoissonDistribution}.\n- * \n- * @version $Revision$ $Date: 2009-09-05 12:36:48 -0500 (Sat, 05 Sep\n- *          2009) $\n+ *\n+ * @version $Revision$ $Date$\n  */\n public class PoissonDistributionImpl extends AbstractIntegerDistribution\n         implements PoissonDistribution, Serializable {\n     /**\n      * Create a new Poisson distribution with the given the mean. The mean value\n      * must be positive; otherwise an <code>IllegalArgument</code> is thrown.\n-     * \n+     *\n      * @param p the Poisson mean\n      * @throws IllegalArgumentException if p &le; 0\n      */\n     /**\n      * Create a new Poisson distribution with the given the mean. The mean value\n      * must be positive; otherwise an <code>IllegalArgument</code> is thrown.\n-     * \n+     *\n      * @param p the Poisson mean\n      * @param z a normal distribution used to compute normal approximations.\n      * @throws IllegalArgumentException if p &le; 0\n \n     /**\n      * Get the Poisson mean for the distribution.\n-     * \n+     *\n      * @return the Poisson mean for the distribution.\n      */\n     public double getMean() {\n     /**\n      * Set the Poisson mean for the distribution. The mean value must be\n      * positive; otherwise an <code>IllegalArgument</code> is thrown.\n-     * \n+     *\n      * @param p the Poisson mean value\n      * @throws IllegalArgumentException if p &le; 0\n      */\n \n     /**\n      * The probability mass function P(X = x) for a Poisson distribution.\n-     * \n+     *\n      * @param x the value at which the probability density function is\n      *            evaluated.\n      * @return the value of the probability mass function at x\n         } else if (x == 0) {\n             ret = Math.exp(-mean);\n         } else {\n-            ret = Math.exp(-SaddlePointExpansion.getStirlingError(x)\n-                    - SaddlePointExpansion.getDeviancePart(x, mean))\n-                    / Math.sqrt(2.0 * Math.PI * x); // TODO make MathUtils.PI\n-                                                    // public\n+            ret = Math.exp(-SaddlePointExpansion.getStirlingError(x) -\n+                  SaddlePointExpansion.getDeviancePart(x, mean)) /\n+                  Math.sqrt(MathUtils.TWO_PI * x);\n         }\n         return ret;\n     }\n     /**\n      * The probability distribution function P(X <= x) for a Poisson\n      * distribution.\n-     * \n+     *\n      * @param x the value at which the PDF is evaluated.\n      * @return Poisson distribution function evaluated at x\n      * @throws MathException if the cumulative probability can not be computed\n      * The computation uses \"half-correction\" -- evaluating the normal\n      * distribution function at <code>x + 0.5</code>\n      * </p>\n-     * \n+     *\n      * @param x the upper bound, inclusive\n      * @return the distribution function value calculated using a normal\n      *         approximation\n      * Access the domain value lower bound, based on <code>p</code>, used to\n      * bracket a CDF root. This method is used by\n      * {@link #inverseCumulativeProbability(double)} to find critical values.\n-     * \n+     *\n      * @param p the desired probability for the critical value\n      * @return domain lower bound\n      */\n      * Access the domain value upper bound, based on <code>p</code>, used to\n      * bracket a CDF root. This method is used by\n      * {@link #inverseCumulativeProbability(double)} to find critical values.\n-     * \n+     *\n      * @param p the desired probability for the critical value\n      * @return domain upper bound\n      */\n      * Modify the normal distribution used to compute normal approximations. The\n      * caller is responsible for insuring the normal distribution has the proper\n      * parameter settings.\n-     * \n+     *\n      * @param value the new distribution\n      * @since 1.2\n      */\n--- a/src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java\n+++ b/src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.commons.math.distribution;\n \n import org.apache.commons.math.special.Gamma;\n+import org.apache.commons.math.util.MathUtils;\n \n /**\n  * <p>\n  * http://www.herine.net/stat/papers/dbinom.pdf</a></li>\n  * </ol>\n  * </p>\n- * \n- * @since 1.2\n- * @version $Revision: 1.3 $ $Date: 2007/11/18 23:51:21 $\n+ *\n+ * @since 2.1\n+ * @version $Revision$ $Date$\n  */\n final class SaddlePointExpansion {\n \n-    /** 2 &#960;. */\n-    private static double PI_2 = 2.0 * Math.PI;\n-\n     /** 1/2 * log(2 &#960;). */\n-    private static double HALF_LOG_2_PI = 0.5 * Math.log(PI_2);\n-\n-    /** exact striling expansion error for certain values. */\n+    private static double HALF_LOG_2_PI = 0.5 * Math.log(MathUtils.TWO_PI);\n+\n+    /** exact Stirling expansion error for certain values. */\n     private static final double[] EXACT_STIRLING_ERRORS = { 0.0, /* 0.0 */\n     0.1534264097200273452913848, /* 0.5 */\n     0.0810614667953272582196702, /* 1.0 */\n      * http://mathworld.wolfram.com/StirlingsSeries.html</a></li>\n      * </ol>\n      * </p>\n-     * \n+     *\n      * @param z the value.\n      * @return the Striling's series error.\n      */\n             if (Math.floor(z2) == z2) {\n                 ret = EXACT_STIRLING_ERRORS[(int) z2];\n             } else {\n-                ret = Gamma.logGamma(z + 1.0) - (z + 0.5) * Math.log(z) + z\n-                        - HALF_LOG_2_PI;\n+                ret = Gamma.logGamma(z + 1.0) - (z + 0.5) * Math.log(z) +\n+                      z - HALF_LOG_2_PI;\n             }\n         } else {\n             double z2 = z * z;\n-            ret = (0.083333333333333333333 - (0.00277777777777777777778 - (0.00079365079365079365079365 - (0.000595238095238095238095238 - 0.0008417508417508417508417508 / z2)\n-                    / z2)\n-                    / z2)\n-                    / z2)\n-                    / z;\n+            ret = (0.083333333333333333333 -\n+                    (0.00277777777777777777778 -\n+                            (0.00079365079365079365079365 -\n+                                    (0.000595238095238095238095238 -\n+                                            0.0008417508417508417508417508 /\n+                                            z2) / z2) / z2) / z2) / z;\n         }\n         return ret;\n     }\n      * http://www.herine.net/stat/papers/dbinom.pdf</a></li>\n      * </ol>\n      * </p>\n-     * \n+     *\n      * @param x the x value.\n      * @param mu the average.\n      * @return a part of the deviance.\n     static double getDeviancePart(double x, double mu) {\n         double ret;\n         if (Math.abs(x - mu) < 0.1 * (x + mu)) {\n-            double d = (x - mu);\n+            double d = x - mu;\n             double v = d / (x + mu);\n             double s1 = v * d;\n             double s = Double.NaN;\n     /**\n      * Compute the PMF for a binomial distribution using the saddle point\n      * expansion.\n-     * \n+     *\n      * @param x the value at which the probability is evaluated.\n      * @param n the number of trials.\n      * @param p the probability of success.\n                 ret = n * Math.log(p);\n             }\n         } else {\n-            ret = getStirlingError(n) - getStirlingError(x)\n-                    - getStirlingError(n - x) - getDeviancePart(x, n * p)\n-                    - getDeviancePart(n - x, n * q);\n-            double f = (PI_2 * x * (n - x)) / n;\n+            ret = getStirlingError(n) - getStirlingError(x) -\n+                  getStirlingError(n - x) - getDeviancePart(x, n * p) -\n+                  getDeviancePart(n - x, n * q);\n+            double f = (MathUtils.TWO_PI * x * (n - x)) / n;\n             ret = -0.5 * Math.log(f) + ret;\n         }\n         return ret;", "timestamp": 1256766815, "metainfo": ""}