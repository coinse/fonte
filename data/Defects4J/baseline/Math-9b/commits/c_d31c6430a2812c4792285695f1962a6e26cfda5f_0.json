{"sha": "d31c6430a2812c4792285695f1962a6e26cfda5f", "log": "Commented out sysouts.   ", "commit": "\n--- a/src/test/org/apache/commons/math/analysis/InterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/analysis/InterpolatorTest.java\n /**\n  * Test the interpolation framework.\n  *\n- * @version $Revision: 1.10 $ $Date: 2004/01/29 16:48:49 $ \n+ * @version $Revision: 1.11 $ $Date: 2004/02/16 06:30:21 $ \n  */\n public class InterpolatorTest extends TestCase {\n \n \n     public void testInterpolateLinearDegenerateTwoSegment()\n         throws MathException {\n-        System.out.println(\" deg 2 seg\");\n+        //System.out.println(\" deg 2 seg\");\n         double xval[] = { 0.0, 0.5, 1.0 };\n         double yval[] = { 0.0, 0.5, 1.0 };\n         UnivariateRealInterpolator i = new SplineInterpolator();\n         UnivariateRealFunction f = i.interpolate(xval, yval);\n+        /*  todo: rewrite using assertions\n         double x;\n         x = 0.0;\n         System.out.println(\n             \"x=\"\n-                + x\n-                + \" y=\"\n-                + f.value(x));\n+               + x\n+              + \" y=\"\n+               + f.value(x));\n \n         x = 0.5;\n         System.out.println(\n                 + x\n                 + \" y=\"\n                 + f.value(x));\n+    */\n     }\n \n     public void testInterpolateLinearDegenerateThreeSegment()\n         throws MathException {\n-        System.out.println(\" deg 3 seg\");\n+//       System.out.println(\" deg 3 seg\");\n         double xval[] = { 0.0, 0.5, 1.0, 1.5 };\n         double yval[] = { 0.0, 0.5, 1.0, 1.5 };\n         UnivariateRealInterpolator i = new SplineInterpolator();\n         UnivariateRealFunction f = i.interpolate(xval, yval);\n+\n+    }\n+\n+    public void testInterpolateLinear() throws MathException {\n+       // System.out.println(\" triang 2 seg\");\n+        double xval[] = { 0.0, 0.5, 1.0 };\n+        double yval[] = { 0.0, 0.5, 0.0 };\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(xval, yval);\n+        /* todo: rewrite with assertions\n         double x;\n         x = 0.0;\n         System.out.println(\n                 + x\n                 + \" y=\"\n                 + f.value(x));\n-\n-        x = 1;\n-        System.out.println(\n-            \"x=\"\n-                + x\n-                + \" y=\"\n-                + f.value(x));\n-\n-        x = 1.5 - 1E-6;\n-        System.out.println(\n-            \"x=\"\n-                + x\n-                + \" y=\"\n-                + f.value(x));\n-\n-    }\n-\n-    public void testInterpolateLinear() throws MathException {\n-        System.out.println(\" triang 2 seg\");\n-        double xval[] = { 0.0, 0.5, 1.0 };\n-        double yval[] = { 0.0, 0.5, 0.0 };\n-        UnivariateRealInterpolator i = new SplineInterpolator();\n-        UnivariateRealFunction f = i.interpolate(xval, yval);\n-        double x;\n-        x = 0.0;\n-        System.out.println(\n-            \"x=\"\n-                + x\n-                + \" y=\"\n-                + f.value(x));\n-\n-        x = 0.5 - 1E-6;\n-        System.out.println(\n-            \"x=\"\n-                + x\n-                + \" y=\"\n-                + f.value(x));\n-\n-        x = 0.5;\n-        System.out.println(\n-            \"x=\"\n-                + x\n-                + \" y=\"\n-                + f.value(x));\n-\n-        x = 1 - 1E-6;\n-        System.out.println(\n-            \"x=\"\n-                + x\n-                + \" y=\"\n-                + f.value(x));\n-    }\n-\n+*/\n+    }\n+    \n     public void testInterpolateSin() throws MathException {\n-        System.out.println(\" sin\");\n+        //System.out.println(\" sin\");\n         double xval[] =\n             {\n                 0.0,\n                 2.0 * Math.PI };\n         double yval[] = { 0.0, 0.5, 1.0, 0.5, 0.0, -0.5, -1.0, -0.5, 0.0 };\n \n-        System.out.println(\"n=\" + xval.length);\n-        UnivariateRealInterpolator i = new SplineInterpolator();\n-        UnivariateRealFunction f = i.interpolate(xval, yval);\n+        //System.out.println(\"n=\" + xval.length);\n+        UnivariateRealInterpolator i = new SplineInterpolator();\n+        UnivariateRealFunction f = i.interpolate(xval, yval);\n+        \n+        /* todo: rewrite using assertions\n+        \n         double x;\n         x = 0.0;\n         System.out.println(\n                 + f.value(x));\n \n         //assertEquals(0.5,f.value(Math.PI/6.0),)\n+         \n+  */\n     }\n \n     public void testIllegalArguments() throws MathException {\n--- a/src/test/org/apache/commons/math/analysis/RealSolverTest.java\n+++ b/src/test/org/apache/commons/math/analysis/RealSolverTest.java\n \n import org.apache.commons.math.MathException;\n \n-import junit.framework.Assert;\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  * default absolute accuracy of 10E-8 for sinus and the quintic function around\n  * zero, and 5..10 iterations for the other zeros.\n  * \n- * @version $Revision: 1.9 $ $Date: 2004/01/29 00:48:57 $\n+ * @version $Revision: 1.10 $ $Date: 2004/02/16 06:30:21 $ \n  */\n public final class RealSolverTest extends TestCase {\n \n         UnivariateRealFunction f = new SinFunction();\n         double result;\n         UnivariateRealSolver solver = new BrentSolver(f);\n-        // Somewhat benign interval. The function is monotonous.\n+        // Somewhat benign interval. The function is monotone.\n         result = solver.solve(3, 4);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n         // 4 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 5);\n         // Larger and somewhat less benign interval. The function is grows first.\n         result = solver.solve(1, 4);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n         // 5 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 6);\n         solver = new SecantSolver(f);\n         result = solver.solve(3, 4);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n         // 4 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 5);\n         result = solver.solve(1, 4);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n         // 5 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 6);\n     }\n \n     public void testQuinticZero() throws MathException {\n-        // The quintic function has zeroes at 0, +-0.5 and +-1.\n+        // The quintic function has zeros at 0, +-0.5 and +-1.\n         // Around the root of 0 the function is well behaved, with a second derivative\n         // of zero a 0.\n         // The other roots are less well to find, in particular the root at 1, because\n         // Symmetric bracket around 0. Test whether solvers can handle hitting\n         // the root in the first iteration.\n         result = solver.solve(-0.2, 0.2);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 0, solver.getAbsoluteAccuracy());\n         assertTrue(solver.getIterationCount() <= 2);\n         // 1 iterations on i586 JDK 1.4.1.\n         // Asymmetric bracket around 0, just for fun. Contains extremum.\n         result = solver.solve(-0.1, 0.3);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 0, solver.getAbsoluteAccuracy());\n         // 5 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 6);\n         // Large bracket around 0. Contains two extrema.\n         result = solver.solve(-0.3, 0.45);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 0, solver.getAbsoluteAccuracy());\n         // 6 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 7);\n         // Benign bracket around 0.5, function is monotonous.\n         result = solver.solve(0.3, 0.7);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n         // 6 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 7);\n         // Less benign bracket around 0.5, contains one extremum.\n         result = solver.solve(0.2, 0.6);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n         // 6 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 7);\n         // Large, less benign bracket around 0.5, contains both extrema.\n         result = solver.solve(0.05, 0.95);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n         // 8 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 9);\n         // Relatively benign bracket around 1, function is monotonous. Fast growth for x>1\n         // is still a problem.\n         result = solver.solve(0.85, 1.25);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n         // 8 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 9);\n         // Less benign bracket around 1 with extremum.\n         result = solver.solve(0.8, 1.2);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n         // 8 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 9);\n         // Large bracket around 1. Monotonous.\n         result = solver.solve(0.85, 1.75);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n         // 10 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 11);\n         // Large bracket around 1. Interval contains extremum.\n         result = solver.solve(0.55, 1.45);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n         // 7 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 8);\n         // Very large bracket around 1 for testing fast growth behaviour.\n         result = solver.solve(0.85, 5);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+       //     \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n         // 12 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 13);\n         // Secant solver.\n         solver = new SecantSolver(f);\n         result = solver.solve(-0.2, 0.2);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 0, solver.getAbsoluteAccuracy());\n         // 1 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 2);\n         result = solver.solve(-0.1, 0.3);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 0, solver.getAbsoluteAccuracy());\n         // 5 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 6);\n         result = solver.solve(-0.3, 0.45);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 0, solver.getAbsoluteAccuracy());\n         // 6 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 7);\n         result = solver.solve(0.3, 0.7);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n         // 7 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 8);\n         result = solver.solve(0.2, 0.6);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n         // 6 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 7);\n         result = solver.solve(0.05, 0.95);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n         // 8 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 9);\n         result = solver.solve(0.85, 1.25);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n         // 10 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 11);\n         result = solver.solve(0.8, 1.2);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n         // 8 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 9);\n         result = solver.solve(0.85, 1.75);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n         // 14 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 15);\n         // The followig is especially slow because the solver first has to reduce\n         // the bracket to exclude the extremum. After that, convergence is rapide.\n         result = solver.solve(0.55, 1.45);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n         // 7 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 8);\n         result = solver.solve(0.85, 5);\n-        System.out.println(\n-            \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n+        //System.out.println(\n+        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n         assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n         // 14 iterations on i586 JDK 1.4.1.\n         assertTrue(solver.getIterationCount() <= 15);\n         result = UnivariateRealSolverUtils.solve(f, -0.2, 0.2);\n         assertEquals(result, 0, solver.getAbsoluteAccuracy());\n         result = UnivariateRealSolverUtils.solve(f, -0.1, 0.3);\n-        Assert.assertEquals(result, 0, 1E-8);\n+        assertEquals(result, 0, 1E-8);\n         result = UnivariateRealSolverUtils.solve(f, -0.3, 0.45);\n-        Assert.assertEquals(result, 0, 1E-6);\n+        assertEquals(result, 0, 1E-6);\n         result = UnivariateRealSolverUtils.solve(f, 0.3, 0.7);\n-        Assert.assertEquals(result, 0.5, 1E-6);\n+        assertEquals(result, 0.5, 1E-6);\n         result = UnivariateRealSolverUtils.solve(f, 0.2, 0.6);\n-        Assert.assertEquals(result, 0.5, 1E-6);\n+        assertEquals(result, 0.5, 1E-6);\n         result = UnivariateRealSolverUtils.solve(f, 0.05, 0.95);\n-        Assert.assertEquals(result, 0.5, 1E-6);\n+        assertEquals(result, 0.5, 1E-6);\n         result = UnivariateRealSolverUtils.solve(f, 0.85, 1.25);\n-        Assert.assertEquals(result, 1.0, 1E-6);\n+        assertEquals(result, 1.0, 1E-6);\n         result = UnivariateRealSolverUtils.solve(f, 0.8, 1.2);\n-        Assert.assertEquals(result, 1.0, 1E-6);\n+        assertEquals(result, 1.0, 1E-6);\n         result = UnivariateRealSolverUtils.solve(f, 0.85, 1.75);\n-        Assert.assertEquals(result, 1.0, 1E-6);\n+        assertEquals(result, 1.0, 1E-6);\n         result = UnivariateRealSolverUtils.solve(f, 0.55, 1.45);\n-        Assert.assertEquals(result, 1.0, 1E-6);\n+        assertEquals(result, 1.0, 1E-6);\n         result = UnivariateRealSolverUtils.solve(f, 0.85, 5);\n-        Assert.assertEquals(result, 1.0, 1E-6);\n+        assertEquals(result, 1.0, 1E-6);\n     }\n }\n--- a/src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java\n+++ b/src/test/org/apache/commons/math/stat/DescriptiveStatisticsTest.java\n /**\n  * Test cases for the {@link Univariate} class.\n  *\n- * @version $Revision: 1.3 $ $Date: 2004/01/29 00:49:00 $\n+ * @version $Revision: 1.4 $ $Date: 2004/02/16 06:30:21 $\n  */\n \n public final class DescriptiveStatisticsTest extends TestCase {\n \t\tfor(int i = 0; i < 6; i++){\n \t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n \t\t\ttest3[i], test1[i],0.0);\n-\t\t\tSystem.out.println(test3[i] + \" \"+test1[i]);\n+\t\t\t//System.out.println(test3[i] + \" \"+test1[i]);\n \t\t}     \n \t\t\t\t\n \t\tfor(int i = 0; i < test2.length; i++){\n \t\tfor(int i = 6; i < 12; i++){\n \t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n \t\t\ttest3[i], test2[i-6],0.0);\n-\t\t\tSystem.out.println(test3[i] + \" \"+test2[i-6]);\n+\t\t\t//System.out.println(test3[i] + \" \"+test2[i-6]);\n \t\t}    \n \t\t\n \t\tfor(int i = 0; i < test2.length; i++){\n \t\tfor(int i = 0; i < 6; i++){\n \t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n \t\t\ttest3[i], test2[i],0.0);\n-\t\t\tSystem.out.println(test3[i] + \" \"+test2[i]);\n+\t\t\t//System.out.println(test3[i] + \" \"+test2[i]);\n \t\t}  \n \t\t\n \t\tfor(int i = 6; i < 12; i++){\n \t\t\tassertEquals( \"Added value [\"+i+\"] not equal\", \n \t\t\ttest3[i], test2[i-6],0.0);\n-\t\t\tSystem.out.println(test3[i] + \" \"+test2[i-6]);\n+\t\t\t//System.out.println(test3[i] + \" \"+test2[i-6]);\n \t\t}  \n \t\t \n \t}", "timestamp": 1076913021, "metainfo": ""}