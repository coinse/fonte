{"sha": "a372c5742a04cda112c315207bcef72fab0a54c6", "log": "fixed missing javadoc tags  ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java\n+++ b/src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java\n      * </pre><p>\n      * The computational complexity is O(N^2).\n      *\n+     * @param x the interpolating points array\n+     * @param y the interpolating values array\n      * @return a fresh copy of the divided difference array\n      * @throws DuplicateSampleAbscissaException if any abscissas coincide\n      */\n--- a/src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java\n      * The interpolating points must be distinct. However it is not\n      * verified here, it is checked in evaluate() and computeCoefficients().\n      * \n+     * @param x the interpolating points array\n+     * @param y the interpolating values array\n      * @throws IllegalArgumentException if not valid\n      * @see #evaluate(double[], double[], double)\n      * @see #computeCoefficients()\n--- a/src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java\n+++ b/src/java/org/apache/commons/math/analysis/PolynomialFunctionNewtonForm.java\n      * The centers must be distinct for interpolation purposes, but not\n      * for general use. Thus it is not verified here.\n      * \n+     * @param a the coefficients in Newton form formula\n+     * @param c the centers\n      * @throws IllegalArgumentException if not valid\n      * @see DividedDifferenceInterpolator#computeDividedDifference(double[],\n      * double[])\n--- a/src/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/java/org/apache/commons/math/geometry/Vector3D.java\n    * other.</p>\n    * @param v1 first vector\n    * @param v2 second vector\n+   * @return angular separation between v1 and v2\n    * @exception ArithmeticException if either vector has a null norm\n    */\n   public static double angle(Vector3D v1, Vector3D v2) {\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n     /***\n      * Sets the rounding mode for decimal divisions.\n      * @see BigDecimal\n-     * @param roundingMode\n+     * @param roundingMode rounding mode for decimal divisions\n      */\n     public void setRoundingMode(int roundingMode) {\n         this.roundingMode = roundingMode;\n     /***\n      * Sets the scale for division operations.\n      * @see BigDecimal\n-     * @param scale\n+     * @param scale scale for division operations\n      */\n     public void setScale(int scale) {\n         this.scale = scale;\n--- a/src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java\n     * step has been finalized. It must perform a deep copy\n     * to have an new instance completely independent for the\n     * original instance.\n+    * @return a copy of the finalized instance\n     */\n    protected abstract StepInterpolator doCopy();\n \n--- a/src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java\n   }\n \n   /** Really copy the finalized instance.\n+   * @return a copy of the finalized instance\n    */\n   protected StepInterpolator doCopy() {\n     return new ClassicalRungeKuttaStepInterpolator(this);\n--- a/src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java\n   }\n \n   /** Really copy the finalized instance.\n+   * @return a copy of the finalized instance\n    */\n   protected StepInterpolator doCopy() {\n     return new DormandPrince54StepInterpolator(this);\n--- a/src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java\n   }\n \n   /** Really copy the finalized instance.\n+   * @return a copy of the finalized instance\n    */\n   protected StepInterpolator doCopy() {\n     return new DormandPrince853StepInterpolator(this);\n--- a/src/java/org/apache/commons/math/ode/DummyStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/DummyStepInterpolator.java\n   }\n \n   /** Really copy the finalized instance.\n+   * @return a copy of the finalized instance\n    */\n   protected StepInterpolator doCopy() {\n     return new DummyStepInterpolator(this);\n--- a/src/java/org/apache/commons/math/ode/EulerStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/EulerStepInterpolator.java\n   }\n \n   /** Really copy the finalized instance.\n+   * @return a copy of the finalized instance\n    */\n   protected StepInterpolator doCopy() {\n     return new EulerStepInterpolator(this);\n--- a/src/java/org/apache/commons/math/ode/GillStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/GillStepInterpolator.java\n   }\n \n   /** Really copy the finalized instance.\n+   * @return a copy of the finalized instance\n    */\n   protected StepInterpolator doCopy() {\n     return new GillStepInterpolator(this);\n--- a/src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java\n   }\n \n   /** Really copy the finalized instance.\n+   * @return a copy of the finalized instance\n    */\n   protected StepInterpolator doCopy() {\n     return new GraggBulirschStoerStepInterpolator(this);\n--- a/src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java\n   }\n \n   /** Really copy the finalized instance.\n+   * @return a copy of the finalized instance\n    */\n   protected StepInterpolator doCopy() {\n     return new HighamHall54StepInterpolator(this);\n--- a/src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java\n   }\n \n   /** Really copy the finalized instance.\n+   * @return a copy of the finalized instance\n    */\n   protected StepInterpolator doCopy() {\n     return new MidpointStepInterpolator(this);\n--- a/src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java\n+++ b/src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java\n   }\n \n   /** Really copy the finalized instance.\n+   * @return a copy of the finalized instance\n    */\n   protected StepInterpolator doCopy() {\n     return new ThreeEighthesStepInterpolator(this);", "timestamp": 1200852288, "metainfo": ""}