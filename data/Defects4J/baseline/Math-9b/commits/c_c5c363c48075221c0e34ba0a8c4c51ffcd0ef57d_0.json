{"sha": "c5c363c48075221c0e34ba0a8c4c51ffcd0ef57d", "log": "Cleanup of OnePointCrossover.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java\n  * Example:\n  * <pre>\n  * -C- denotes a crossover point\n- *                   -C-                                -C-\n+ *                   -C-                                 -C-\n  * p1 = (1 0 1 0 0 1  | 0 1 1)    X    p2 = (0 1 1 0 1 0  | 1 1 1)\n- *         \\------------/ \\-----/              \\------------/ \\-----/\n+ *      \\------------/ \\-----/              \\------------/ \\-----/\n  *            ||         (*)                       ||        (**)\n  *            VV         (**)                      VV        (*)\n  *      /------------\\ /-----\\              /------------\\ /-----\\\n- * c1 = (1 0 1 0 0 1  | 1 1 1)    X    p2 = (0 1 1 0 1 0  | 0 1 1)\n+ * c1 = (1 0 1 0 0 1  | 1 1 1)    X    c2 = (0 1 1 0 1 0  | 0 1 1)\n  * </pre>\n  *\n  * This policy works only on {@link AbstractListChromosome}, and therefore it\n- * is parametrized by T. Moreover, the chromosomes must have same lengths.\n+ * is parameterized by T. Moreover, the chromosomes must have same lengths.\n  *\n  * @param <T> generic type of the {@link AbstractListChromosome}s for crossover\n  * @since 2.0\n      * second parts are copied crosswise.\n      *\n      * Example:\n+     * <pre>\n      * -C- denotes a crossover point\n-     *                   -C-                                -C-\n+     *                   -C-                                 -C-\n      * p1 = (1 0 1 0 0 1  | 0 1 1)    X    p2 = (0 1 1 0 1 0  | 1 1 1)\n-     *         \\------------/ \\-----/              \\------------/ \\-----/\n+     *      \\------------/ \\-----/              \\------------/ \\-----/\n      *            ||         (*)                       ||        (**)\n      *            VV         (**)                      VV        (*)\n      *      /------------\\ /-----\\              /------------\\ /-----\\\n-     * c1 = (1 0 1 0 0 1  | 1 1 1)    X    p2 = (0 1 1 0 1 0  | 0 1 1)\n+     * c1 = (1 0 1 0 0 1  | 1 1 1)    X    c2 = (0 1 1 0 1 0  | 0 1 1)\n+     * </pre>\n      *\n      * @param first first parent (p1)\n      * @param second second parent (p2)\n      */\n     private ChromosomePair crossover(final AbstractListChromosome<T> first,\n                                      final AbstractListChromosome<T> second) {\n-        int length = first.getLength();\n+        final int length = first.getLength();\n         if (length != second.getLength()) {\n             throw new DimensionMismatchException(second.getLength(), length);\n         }\n \n         // array representations of the parents\n-        List<T> parent1Rep = first.getRepresentation();\n-        List<T> parent2Rep = second.getRepresentation();\n+        final List<T> parent1Rep = first.getRepresentation();\n+        final List<T> parent2Rep = second.getRepresentation();\n         // and of the children\n-        ArrayList<T> child1Rep = new ArrayList<T> (first.getLength());\n-        ArrayList<T> child2Rep = new ArrayList<T> (second.getLength());\n+        final ArrayList<T> child1Rep = new ArrayList<T> (first.getLength());\n+        final ArrayList<T> child2Rep = new ArrayList<T> (second.getLength());\n \n         // select a crossover point at random (0 and length makes no sense)\n-        int crossoverIndex = 1 + (GeneticAlgorithm.getRandomGenerator().nextInt(length-2));\n+        final int crossoverIndex = 1 + (GeneticAlgorithm.getRandomGenerator().nextInt(length-2));\n \n         // copy the first part\n         for (int i = 0; i < crossoverIndex; i++) {", "timestamp": 1338330382, "metainfo": ""}