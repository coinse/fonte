{"sha": "3bfa7d188e4284defc9089a7fbadfc0415ed42ff", "log": "* Added erfc * Top-coded both erf and erfc to return extreme values when true values   are indistinguishable from extrema * Added tests against reference data JIRA: MATH-465, MATH-364   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/special/Erf.java\n+++ b/src/main/java/org/apache/commons/math/special/Erf.java\n package org.apache.commons.math.special;\n \n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.util.FastMath;\n \n /**\n  * This is a utility class that provides computation methods related to the\n     }\n \n     /**\n-     * Returns the error function erf(x).\n+     * <p>Returns the error function</p>\n+     * <p>erf(x) = 2/&radic;&pi; <sub>0</sub>&int;<sup>x</sup> e<sup>-t<sup>2</sup></sup>dt </p>\n      *\n-     * The implementation of this method is based on:\n-     * <ul>\n-     * <li>\n-     * <a href=\"http://mathworld.wolfram.com/Erf.html\">\n-     * Erf</a>, equation (3).</li>\n-     * </ul>\n+     * <p>This implementation computes erf(x) using the\n+     * {@link Gamma#regularizedGammaP(double, double, double, int) regularized gamma function},\n+     * following <a href=\"http://mathworld.wolfram.com/Erf.html\"> Erf</a>, equation (3)</p>\n+     * \n+     * <p>The value returned is always between -1 and 1 (inclusive).  If {@code abs(x) > 40}, then\n+     * {@code erf(x)} is indistinguishable from either 1 or -1 as a double, so the appropriate extreme\n+     * value is returned.</p>\n      *\n      * @param x the value.\n      * @return the error function erf(x)\n      * @throws MathException if the algorithm fails to converge.\n+     * @see Gamma#regularizedGammaP(double, double, double, int)\n      */\n     public static double erf(double x) throws MathException {\n+        if (FastMath.abs(x) > 40) {\n+            return x > 0 ? 1 : -1;\n+        }\n         double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);\n         if (x < 0) {\n             ret = -ret;\n         }\n         return ret;\n     }\n+    \n+    /**\n+     * <p>Returns the complementary error function</p>\n+     * <p>erfc(x) = 2/&radic;&pi; <sub>x</sub>&int;<sup>&infin;</sup> e<sup>-t<sup>2</sup></sup>dt <br/>\n+     *    = 1 - {@link #erf(double) erf(x)} </p>\n+     *\n+     * <p>This implementation computes erfc(x) using the\n+     * {@link Gamma#regularizedGammaQ(double, double, double, int) regularized gamma function},\n+     * following <a href=\"http://mathworld.wolfram.com/Erf.html\"> Erf</a>, equation (3).</p>\n+     * \n+     * <p>The value returned is always between 0 and 2 (inclusive).  If {@code abs(x) > 40}, then\n+     * {@code erf(x)} is indistinguishable from either 0 or 2 as a double, so the appropriate extreme\n+     * value is returned.</p>\n+     * \n+     * @param x the value\n+     * @return the complementary error function erfc(x)\n+     * @throws MathException if the algorithm fails to converge\n+     * @see Gamma#regularizedGammaQ(double, double, double, int)\n+     * @since 2.2\n+     */\n+    public static double erfc(double x) throws MathException {\n+        if (FastMath.abs(x) > 40) {\n+            return x > 0 ? 0 : 2;\n+        }\n+        final double ret = Gamma.regularizedGammaQ(0.5, x * x, 1.0e-15, 10000);\n+        return x < 0 ? 2 - ret : ret;\n+    }\n }\n+\n--- a/src/test/java/org/apache/commons/math/special/ErfTest.java\n+++ b/src/test/java/org/apache/commons/math/special/ErfTest.java\n package org.apache.commons.math.special;\n \n import org.apache.commons.math.MathException;\n+import org.apache.commons.math.TestUtils;\n import org.apache.commons.math.util.FastMath;\n \n import junit.framework.TestCase;\n     public void testErf0() throws MathException {\n         double actual = Erf.erf(0.0);\n         double expected = 0.0;\n-        assertEquals(expected, actual, 1.0e-5);\n+        assertEquals(expected, actual, 1.0e-15);\n+        assertEquals(1 - expected, Erf.erfc(0.0), 1.0e-15);\n     }\n \n     public void testErf1960() throws MathException {\n         double actual = Erf.erf(x);\n         double expected = 0.95;\n         assertEquals(expected, actual, 1.0e-5);\n+        assertEquals(1 - actual, Erf.erfc(x), 1.0e-15);\n \n         actual = Erf.erf(-x);\n         expected = -expected;\n         assertEquals(expected, actual, 1.0e-5);\n+        assertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);\n     }\n \n     public void testErf2576() throws MathException {\n         double actual = Erf.erf(x);\n         double expected = 0.99;\n         assertEquals(expected, actual, 1.0e-5);\n+        assertEquals(1 - actual, Erf.erfc(x), 1e-15);\n \n         actual = Erf.erf(-x);\n         expected = -expected;\n         assertEquals(expected, actual, 1.0e-5);\n+        assertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);\n     }\n \n     public void testErf2807() throws MathException {\n         double actual = Erf.erf(x);\n         double expected = 0.995;\n         assertEquals(expected, actual, 1.0e-5);\n+        assertEquals(1 - actual, Erf.erfc(x), 1.0e-15);\n \n         actual = Erf.erf(-x);\n         expected = -expected;\n         assertEquals(expected, actual, 1.0e-5);\n+        assertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);\n     }\n \n     public void testErf3291() throws MathException {\n         double actual = Erf.erf(x);\n         double expected = 0.999;\n         assertEquals(expected, actual, 1.0e-5);\n+        assertEquals(1 - expected, Erf.erfc(x), 1.0e-5);\n \n         actual = Erf.erf(-x);\n         expected = -expected;\n         assertEquals(expected, actual, 1.0e-5);\n+        assertEquals(1 - expected, Erf.erfc(-x), 1.0e-5);\n     }\n-\n+    \n     /**\n-     * MATH-301\n+     * MATH-301, MATH-456\n      */\n     public void testLargeValues() throws Exception {\n-        for (int i = 1; i < 200; i++) {\n+        for (int i = 1; i < 200; i*=10) {\n             double result = Erf.erf(i);\n             assertFalse(Double.isNaN(result));\n             assertTrue(result > 0 && result <= 1);\n+            result = Erf.erf(-i);\n+            assertFalse(Double.isNaN(result));\n+            assertTrue(result >= -1 && result < 0);\n+            result = Erf.erfc(i);\n+            assertFalse(Double.isNaN(result));\n+            assertTrue(result >= 0 && result < 1);\n+            result = Erf.erfc(-i);\n+            assertFalse(Double.isNaN(result));\n+            assertTrue(result >= 1 && result <= 2);    \n+        }\n+        assertEquals(-1, Erf.erf(Double.NEGATIVE_INFINITY), 0);\n+        assertEquals(1, Erf.erf(Double.POSITIVE_INFINITY), 0);\n+        assertEquals(2, Erf.erfc(Double.NEGATIVE_INFINITY), 0);\n+        assertEquals(0, Erf.erfc(Double.POSITIVE_INFINITY), 0);\n+    }\n+    \n+    /**\n+     * Compare Erf.erf against reference values computed using GCC 4.2.1 (Apple OSX packaged version)\n+     * erfl (extended precision erf).\n+     */\n+    public void testErfGnu() throws Exception {\n+        final double tol = 1E-15;\n+        final double[] gnuValues = new double[] {-1, -1, -1, -1, -1, \n+        -1, -1, -1, -0.99999999999999997848, \n+        -0.99999999999999264217, -0.99999999999846254017, -0.99999999980338395581, -0.99999998458274209971, \n+        -0.9999992569016276586, -0.99997790950300141459, -0.99959304798255504108, -0.99532226501895273415, \n+        -0.96610514647531072711, -0.84270079294971486948, -0.52049987781304653809,  0, \n+         0.52049987781304653809, 0.84270079294971486948, 0.96610514647531072711, 0.99532226501895273415, \n+         0.99959304798255504108, 0.99997790950300141459, 0.9999992569016276586, 0.99999998458274209971, \n+         0.99999999980338395581, 0.99999999999846254017, 0.99999999999999264217, 0.99999999999999997848, \n+         1,  1,  1,  1, \n+         1,  1,  1,  1};\n+        double x = -10d;\n+        for (int i = 0; i < 41; i++) {\n+            assertEquals(gnuValues[i], Erf.erf(x), tol);\n+            x += 0.5d;\n+        }\n+    }\n+    \n+    /**\n+     * Compare Erf.erfc against reference values computed using GCC 4.2.1 (Apple OSX packaged version)\n+     * erfcl (extended precision erfc).\n+     */\n+    public void testErfcGnu() throws Exception {\n+        final double tol = 1E-15;\n+        final double[] gnuValues = new double[] { 2,  2,  2,  2,  2, \n+        2,  2,  2, 1.9999999999999999785, \n+        1.9999999999999926422, 1.9999999999984625402, 1.9999999998033839558, 1.9999999845827420998, \n+        1.9999992569016276586, 1.9999779095030014146, 1.9995930479825550411, 1.9953222650189527342, \n+        1.9661051464753107271, 1.8427007929497148695, 1.5204998778130465381,  1, \n+        0.47950012218695346194, 0.15729920705028513051, 0.033894853524689272893, 0.0046777349810472658333, \n+        0.00040695201744495893941, 2.2090496998585441366E-05, 7.4309837234141274516E-07, 1.5417257900280018858E-08, \n+        1.966160441542887477E-10, 1.5374597944280348501E-12, 7.3578479179743980661E-15, 2.1519736712498913103E-17, \n+        3.8421483271206474691E-20, 4.1838256077794144006E-23, 2.7766493860305691016E-26, 1.1224297172982927079E-29, \n+        2.7623240713337714448E-33, 4.1370317465138102353E-37, 3.7692144856548799402E-41, 2.0884875837625447567E-45};\n+        double x = -10d;\n+        for (int i = 0; i < 41; i++) {\n+            assertEquals(gnuValues[i], Erf.erfc(x), tol);\n+            x += 0.5d;\n+        }\n+    }\n+    \n+    /**\n+     * Tests erfc against reference data computed using Maple reported in Marsaglia, G,, \n+     * \"Evaluating the Normal Distribution,\" Journal of Statistical Software, July, 2004.\n+     * http//www.jstatsoft.org/v11/a05/paper\n+     */\n+    public void testErfcMaple() throws Exception {\n+        double[][] ref = new double[][]\n+                        {{0.1, 4.60172162722971e-01},\n+                         {1.2, 1.15069670221708e-01},\n+                         {2.3, 1.07241100216758e-02},\n+                         {3.4, 3.36929265676881e-04},\n+                         {4.5, 3.39767312473006e-06},\n+                         {5.6, 1.07175902583109e-08}, \n+                         {6.7, 1.04209769879652e-11},\n+                         {7.8, 3.09535877195870e-15},\n+                         {8.9, 2.79233437493966e-19},\n+                         {10.0, 7.61985302416053e-24},\n+                         {11.1, 6.27219439321703e-29},\n+                         {12.2, 1.55411978638959e-34}, \n+                         {13.3, 1.15734162836904e-40},\n+                         {14.4, 2.58717592540226e-47},\n+                         {15.5, 1.73446079179387e-54},\n+                         {16.6, 3.48454651995041e-62}\n+        };\n+        for (int i = 0; i < 15; i++) {\n+            final double result = 0.5*Erf.erfc(ref[i][0]/Math.sqrt(2));\n+            assertEquals(ref[i][1], result, 1E-15);\n+            TestUtils.assertRelativelyEquals(ref[i][1], result, 1E-13);\n         }\n     }\n }", "timestamp": 1293844982, "metainfo": ""}