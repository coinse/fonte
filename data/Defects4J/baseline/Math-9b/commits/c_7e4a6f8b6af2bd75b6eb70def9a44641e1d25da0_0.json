{"sha": "7e4a6f8b6af2bd75b6eb70def9a44641e1d25da0", "log": "MATH-452 Made all static variables (accuracies) \"private\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java\n  */\n public abstract class BaseAbstractUnivariateRealSolver<FUNC extends UnivariateRealFunction>\n     implements BaseUnivariateRealSolver<FUNC> {\n-    /** Default absolute accuracy */\n-    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n     /** Default relative accuracy. */\n-    public static final double DEFAULT_RELATIVE_ACCURACY = 1e-14;\n+    private static final double DEFAULT_RELATIVE_ACCURACY = 1e-14;\n     /** Default function value accuracy. */\n-    public static final double DEFAULT_FUNCTION_VALUE_ACCURACY = 1e-15;\n+    private static final double DEFAULT_FUNCTION_VALUE_ACCURACY = 1e-15;\n     /** Function value accuracy. */\n     private final double functionValueAccuracy;\n     /** Absolute accuracy. */\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n  */\n public class BisectionSolver extends AbstractUnivariateRealSolver {\n     /** Default absolute accuracy. */\n-    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n \n     /**\n-     * Construct a solver with default accuracy.\n+     * Construct a solver with default accuracy (1e-6).\n      */\n     public BisectionSolver() {\n         this(DEFAULT_ABSOLUTE_ACCURACY);\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n     /** Serializable version identifier */\n     private static final long serialVersionUID = 7694577816772532779L;\n     /** Default absolute accuracy. */\n-    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n-\n-    /**\n-     * Construct a solver with default accuracies.\n+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n+\n+    /**\n+     * Construct a solver with default accuracy (1e-6).\n      */\n     public BrentSolver() {\n         this(DEFAULT_ABSOLUTE_ACCURACY);\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java\n  */\n public class LaguerreSolver extends AbstractPolynomialSolver {\n     /** Default absolute accuracy. */\n-    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n     /** Complex solver. */\n     protected ComplexSolver complexSolver = new ComplexSolver();\n \n     /**\n-     * Construct a solver with default accuracies.\n+     * Construct a solver with default accuracy (1e-6).\n      */\n     public LaguerreSolver() {\n         this(DEFAULT_ABSOLUTE_ACCURACY);\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java\n     /** Serializable version identifier */\n     private static final long serialVersionUID = 7694577816772532779L;\n     /** Default absolute accuracy. */\n-    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n \n     /**\n-     * Construct a solver with default accuracies.\n+     * Construct a solver with default accuracy (1e-6).\n      */\n     public MullerSolver() {\n         this(DEFAULT_ABSOLUTE_ACCURACY);\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java\n     /** Serializable version identifier */\n     private static final long serialVersionUID = 7694577816772532779L;\n     /** Default absolute accuracy. */\n-    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n \n     /**\n-     * Construct a solver with default accuracies.\n+     * Construct a solver with default accuracy (1e-6).\n      */\n     public MullerSolver2() {\n         this(DEFAULT_ABSOLUTE_ACCURACY);\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java\n  */\n public class NewtonSolver extends AbstractDifferentiableUnivariateRealSolver {\n     /** Default absolute accuracy. */\n-    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n \n     /**\n      * Construct a solver.\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java\n  */\n public class RiddersSolver extends AbstractUnivariateRealSolver {\n     /** Default absolute accuracy. */\n-    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n \n     /**\n-     * Construct a solver with default accuracy.\n+     * Construct a solver with default accuracy (1e-6).\n      */\n     public RiddersSolver() {\n         this(DEFAULT_ABSOLUTE_ACCURACY);\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java\n  */\n public class SecantSolver extends AbstractUnivariateRealSolver {\n     /** Default absolute accuracy. */\n-    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n \n     /**\n-     * Construct a solver with default accuracy.\n+     * Construct a solver with default accuracy (1e-6).\n      */\n     public SecantSolver() {\n         this(DEFAULT_ABSOLUTE_ACCURACY);\n--- a/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n     implements ContinuousDistribution, Serializable {\n     /** Serializable version identifier */\n     private static final long serialVersionUID = -38038050983108802L;\n+    /** Default accuracy. */\n+    public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n     /**\n      * RandomData instance used to generate samples from the distribution\n      * @since 2.2\n      */\n     protected final RandomDataImpl randomData = new RandomDataImpl();\n     /**\n-     * Solver absolute accuracy for inverse cumulative computation\n+     * Solver absolute accuracy for inverse cumulative computation.\n      * @since 2.1\n      */\n-    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;\n+    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;\n     /**\n      * Default constructor.\n      */\n         // find root\n         double root = UnivariateRealSolverUtils.solve(rootFindingFunction,\n                 // override getSolverAbsoluteAccuracy() to use a Brent solver with\n-                // absolute accuracy different from BrentSolver default\n+                // absolute accuracy different from the default.\n                 bracket[0],bracket[1], getSolverAbsoluteAccuracy());\n         return root;\n     }\n \n     /**\n      * Returns the solver absolute accuracy for inverse cumulative computation.\n+     * You can override this method in order to use a Brent solver with an\n+     * absolute accuracy different from the default.\n      *\n      * @return the maximum absolute error in inverse cumulative probability estimates\n      * @since 2.1\n     protected double getSolverAbsoluteAccuracy() {\n         return solverAbsoluteAccuracy;\n     }\n-\n }", "timestamp": 1291636586, "metainfo": ""}