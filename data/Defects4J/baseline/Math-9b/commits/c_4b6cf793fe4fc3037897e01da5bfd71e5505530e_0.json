{"sha": "4b6cf793fe4fc3037897e01da5bfd71e5505530e", "log": "The FirstOrderDifferentialEquations and FirstOrderIntegrator interfaces now extends Serializable. This allows users to embed implementations of these interfaces in their objects when their objects needs to be serializable.  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java\n public class ClassicalRungeKuttaIntegrator\n   extends RungeKuttaIntegrator {\n \n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = -8987762131146169612L;\n+\n   /** Integrator method name. */\n   private static final String methodName = \"classical Runge-Kutta\";\n \n--- a/src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java\n+++ b/src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java\n \n public class DormandPrince54Integrator\n   extends EmbeddedRungeKuttaIntegrator {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = -5346655668732043826L;\n \n   /** Integrator method name. */\n   private static final String methodName = \"Dormand-Prince 5(4)\";\n--- a/src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java\n+++ b/src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java\n public class DormandPrince853Integrator\n   extends EmbeddedRungeKuttaIntegrator {\n \n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = 6175337145090754336L;\n+\n   /** Integrator method name. */\n   private static final String methodName = \"Dormand-Prince 8 (5, 3)\";\n \n--- a/src/java/org/apache/commons/math/ode/EulerIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/EulerIntegrator.java\n public class EulerIntegrator\n   extends RungeKuttaIntegrator {\n \n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = -3378479003330094013L;\n+\n   /** Integrator method name. */\n   private static final String methodName = \"Euler\";\n \n--- a/src/java/org/apache/commons/math/ode/FirstOrderConverter.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderConverter.java\n \n public class FirstOrderConverter\n   implements FirstOrderDifferentialEquations {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = -8233657110042144146L;\n \n   /** Simple constructor.\n    * Build a converter around a second order equations set.\n--- a/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java\n  */\n \n package org.apache.commons.math.ode;\n+\n+import java.io.Serializable;\n \n /** This interface represents a first order differential equations set.\n  *\n  * @since 1.2\n  */\n \n-public interface FirstOrderDifferentialEquations {\n+public interface FirstOrderDifferentialEquations extends Serializable {\n     \n     /** Get the dimension of the problem.\n      * @return dimension of the problem\n--- a/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n \n package org.apache.commons.math.ode;\n \n+import java.io.Serializable;\n import java.util.Collection;\n \n /** This interface represents a first order integrator for\n  * @since 1.2\n  */\n \n-public interface FirstOrderIntegrator {\n+public interface FirstOrderIntegrator extends Serializable {\n \n   /** Get the name of the method.\n    * @return name of the method\n--- a/src/java/org/apache/commons/math/ode/GillIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/GillIntegrator.java\n public class GillIntegrator\n   extends RungeKuttaIntegrator {\n \n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = -3270987073897562791L;\n+\n   /** Integrator method name. */\n   private static final String methodName = \"Gill\";\n \n--- a/src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java\n public class GraggBulirschStoerIntegrator\n   extends AdaptiveStepsizeIntegrator {\n \n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = -1263159462413447366L;\n+\n   /** Integrator method name. */\n   private static final String methodName = \"Gragg-Bulirsch-Stoer\";\n \n--- a/src/java/org/apache/commons/math/ode/HighamHall54Integrator.java\n+++ b/src/java/org/apache/commons/math/ode/HighamHall54Integrator.java\n \n public class HighamHall54Integrator\n   extends EmbeddedRungeKuttaIntegrator {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = -1499486749907617454L;\n \n   /** Integrator method name. */\n   private static final String methodName = \"Higham-Hall 5(4)\";\n--- a/src/java/org/apache/commons/math/ode/MidpointIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/MidpointIntegrator.java\n public class MidpointIntegrator\n   extends RungeKuttaIntegrator {\n \n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = 1871083451154005310L;\n+\n   /** Integrator method name. */\n   private static final String methodName = \"midpoint\";\n \n--- a/src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java\n public class ThreeEighthesIntegrator\n   extends RungeKuttaIntegrator {\n \n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = -5738562635641912717L;\n+\n   /** Integrator method name. */\n   private static final String methodName = \"3/8\";\n \n--- a/src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n+++ b/src/test/org/apache/commons/math/ode/ContinuousOutputModelTest.java\n       // theoretical solution: y[0] = cos(t), y[1] = sin(t)\n       FirstOrderDifferentialEquations problem =\n           new FirstOrderDifferentialEquations() {\n-          public void computeDerivatives(double t, double[] y, double[] dot)\n-          throws DerivativeException {\n-              dot[0] = -y[1];\n-              dot[1] =  y[0];\n-          }\n-          public int getDimension() {\n-              return 2;\n-          }\n-      };\n+              private static final long serialVersionUID = 2472449657345878299L;\n+              public void computeDerivatives(double t, double[] y, double[] dot)\n+                  throws DerivativeException {\n+                  dot[0] = -y[1];\n+                  dot[1] =  y[0];\n+              }\n+              public int getDimension() {\n+                  return 2;\n+              }\n+          };\n \n       // integrate backward from &pi; to 0;\n       ContinuousOutputModel cm1 = new ContinuousOutputModel();\n--- a/src/test/org/apache/commons/math/ode/EulerStepInterpolatorTest.java\n+++ b/src/test/org/apache/commons/math/ode/EulerStepInterpolatorTest.java\n \n   private static class DummyEquations\n     implements FirstOrderDifferentialEquations {\n+    private static final long serialVersionUID = 291437140744677100L;\n     public int getDimension() {\n       return 0;\n     }\n--- a/src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java\n+++ b/src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java\n           new HighamHall54Integrator(0.0, 1.0, 1.0e-10, 1.0e-10);\n       FirstOrderDifferentialEquations equations =\n           new FirstOrderDifferentialEquations() {\n-          public void computeDerivatives(double t, double[] y, double[] dot)\n+            private static final long serialVersionUID = -1157081786301178032L;\n+            public void computeDerivatives(double t, double[] y, double[] dot)\n             throws DerivativeException {\n             if (t < -0.5) {\n                 throw new DerivativeException(\"{0}\", new String[] { \"oops\" });\n--- a/src/test/org/apache/commons/math/ode/TestProblem1.java\n+++ b/src/test/org/apache/commons/math/ode/TestProblem1.java\n  */\n class TestProblem1\n   extends TestProblemAbstract {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = 1977870815289373164L;\n \n   /** theoretical state */\n   private double[] y;\n--- a/src/test/org/apache/commons/math/ode/TestProblem2.java\n+++ b/src/test/org/apache/commons/math/ode/TestProblem2.java\n  */\n class TestProblem2\n   extends TestProblemAbstract {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = 8330741783213512366L;\n \n   /** theoretical state */\n   private double[] y;\n--- a/src/test/org/apache/commons/math/ode/TestProblem3.java\n+++ b/src/test/org/apache/commons/math/ode/TestProblem3.java\n  */\n class TestProblem3\n   extends TestProblemAbstract {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = 8567328542728919999L;\n \n   /** Eccentricity */\n   double e;\n--- a/src/test/org/apache/commons/math/ode/TestProblem4.java\n+++ b/src/test/org/apache/commons/math/ode/TestProblem4.java\n  */\n class TestProblem4\n   extends TestProblemAbstract {\n+\n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = -5910438521889015745L;\n \n   /** Time offset. */\n   private double a;\n--- a/src/test/org/apache/commons/math/ode/TestProblem5.java\n+++ b/src/test/org/apache/commons/math/ode/TestProblem5.java\n class TestProblem5\n   extends TestProblem1 {\n \n+  /** Serializable version identifier. */\n+  private static final long serialVersionUID = 7579233102411804237L;\n+\n   /**\n    * Simple constructor.\n    */", "timestamp": 1213613204, "metainfo": ""}