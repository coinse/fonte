{"sha": "d3892cb85f3eb8ccadada228b791170e3e0a9124", "log": "MATH-542 Allow to \"addMessage\" without arguments (avoiding the need to explicitly pass \"null\").   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/MathException.java\n+++ b/src/main/java/org/apache/commons/math/MathException.java\n     }\n \n     /** {@inheritDoc} */\n+    public void addMessage(Localizable pat) {\n+        throw new UnsupportedOperationException(\"This class is deprecated; calling this method is a bug.\");\n+    }\n+\n+    /** {@inheritDoc} */\n     public void addMessage(Localizable pat,\n                            Object ... args) {\n         throw new UnsupportedOperationException(\"This class is deprecated; calling this method is a bug.\");\n--- a/src/main/java/org/apache/commons/math/MathRuntimeException.java\n+++ b/src/main/java/org/apache/commons/math/MathRuntimeException.java\n     }\n \n     /** {@inheritDoc} */\n+    public void addMessage(Localizable pat) {\n+        throw new UnsupportedOperationException(\"This class is deprecated; calling this method is a bug.\");\n+    }\n+\n+    /** {@inheritDoc} */\n     public void addMessage(Localizable pat,\n                            Object ... args) {\n         throw new UnsupportedOperationException(\"This class is deprecated; calling this method is a bug.\");\n--- a/src/main/java/org/apache/commons/math/exception/MathArithmeticException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathArithmeticException.java\n      * Default constructor.\n      */\n     public MathArithmeticException() {\n-        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION, null);\n+        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java\n      * Default constructor.\n      */\n     public MathIllegalStateException() {\n-        addMessage(LocalizedFormats.ILLEGAL_STATE, null);\n+        addMessage(LocalizedFormats.ILLEGAL_STATE);\n     }\n }\n--- a/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\n      */\n     public MathRuntimeException(final Throwable cause) {\n         super(cause);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void addMessage(Localizable pattern) {\n+        messages.add(new SerializablePair<Localizable, Object[]>(pattern, (Object[]) null));\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math/exception/MathThrowable.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathThrowable.java\n * @since 2.2\n */\n public interface MathThrowable {\n+    /**\n+     * Sets a message.\n+     *\n+     * @param pattern Message.\n+     */\n+    void addMessage(Localizable pattern);\n+\n     /**\n      * Sets a message.\n      *\n--- a/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java\n      * Default constructor.\n      */\n     public MathUnsupportedOperationException() {\n-        this(LocalizedFormats.UNSUPPORTED_OPERATION, null);\n+        this(LocalizedFormats.UNSUPPORTED_OPERATION);\n     }\n     /**\n      * @param pattern Message pattern providing the specific context of\n--- a/src/main/java/org/apache/commons/math/exception/MathUserException.java\n+++ b/src/main/java/org/apache/commons/math/exception/MathUserException.java\n      * Build an exception with a default message.\n      */\n     public MathUserException() {\n-        addMessage(LocalizedFormats.USER_EXCEPTION, null);\n+        addMessage(LocalizedFormats.USER_EXCEPTION);\n     }\n \n     /**\n      */\n     public MathUserException(final Throwable cause) {\n         super(cause);\n-        addMessage(LocalizedFormats.USER_EXCEPTION, null);\n+        addMessage(LocalizedFormats.USER_EXCEPTION);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math/exception/MathRuntimeExceptionTest.java\n+++ b/src/test/java/org/apache/commons/math/exception/MathRuntimeExceptionTest.java\n     @Test\n     public void testMessageChain() {\n         final MathRuntimeException mre = new MathRuntimeException();\n-        final String sep = \": \";\n+        final String sep = \" | \"; // Non-default separator.\n         final String m1 = \"column index (0)\";\n         mre.addMessage(LocalizedFormats.COLUMN_INDEX, 0);\n         final String m2 = \"got 1x2 but expected 3x4\";\n             Assert.assertEquals(e.getMessage(Locale.US, sep),\n                                 m1 + sep + m2 + sep + m3);\n         }\n+    }\n+\n+    @Test\n+    public void testNoArgAddMessage() {\n+        final MathRuntimeException mre = new MathRuntimeException();\n+        mre.addMessage(LocalizedFormats.SIMPLE_MESSAGE);\n+        Assert.assertEquals(mre.getMessage(), \"{0}\");\n     }\n \n     @Test", "timestamp": 1300189343, "metainfo": ""}