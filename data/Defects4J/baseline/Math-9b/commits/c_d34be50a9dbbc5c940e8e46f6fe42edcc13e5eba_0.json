{"sha": "d34be50a9dbbc5c940e8e46f6fe42edcc13e5eba", "log": "Added missing method for computing variance from mean with no subarray specified.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Variance.java\n  * one of the threads invokes the <code>increment()</code> or \n  * <code>clear()</code> method, it must be synchronized externally.\n  * \n- * @version $Revision: 1.25 $ $Date: 2004/07/10 17:09:08 $\n+ * @version $Revision: 1.26 $ $Date: 2004/07/11 18:38:12 $\n  */\n public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n         }\n         return var;\n     }\n+    \n+    /**\n+     * Returns the variance of the entries in the input array, using the\n+     * precomputed mean value.  Returns <code>Double.NaN</code> if the array\n+     * is empty.\n+     * <p>\n+     * See {@link Variance} for details on the computing algorithm.\n+     * <p>\n+     * Returns 0 for a single-value (i.e. length = 1) sample.\n+     * <p>\n+     * Throws <code>IllegalArgumentException</code> if the array is null.\n+     * <p>\n+     * Does not change the internal state of the statistic.\n+     * \n+     * @param values the input array\n+     * @param mean the precomputed mean value\n+     * @return the variance of the values or Double.NaN if the array is empty\n+     * @throws IllegalArgumentException if the array is null\n+     */\n+    public double evaluate(final double[] values, final double mean) {\n+        if (values == null) {\n+            throw new IllegalArgumentException(\"input values array is null\");\n+        }\n+        return evaluate(values, mean, 0, values.length);\n+    }\n \n }", "timestamp": 1089571092, "metainfo": ""}