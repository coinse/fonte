{"sha": "bb2ebc759b24276dad4630f81d43cf87b6472280", "log": "MATH-637 Simple benchmarking utility.   ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math/PerfTestUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math;\n+\n+import org.apache.commons.math.analysis.function.Add;\n+import org.apache.commons.math.analysis.MultivariateRealFunction;\n+import org.apache.commons.math.analysis.FunctionUtils;\n+\n+/**\n+ * Simple benchmarking utilities.\n+ */\n+public class PerfTestUtils {\n+    /** Nanoseconds to milliseconds conversion factor ({@value}). */\n+    public static final double NANO_TO_MILLI = 1e-6;\n+\n+    /**\n+     * Timing.\n+     *\n+     * @param repeatChunk Each timing measurement will done done for that\n+     * number of repeats of the code.\n+     * @param repeatStat Timing will be averaged over that number of runs. \n+     * @param methods Code being timed.\n+     * @return for each of the given {@code methods}, the averaged time (in\n+     * milliseconds) taken by a call to {@code run}.\n+     */\n+    public static double[] time(int repeatChunk,\n+                                int repeatStat,\n+                                Runnable ... methods) {\n+        final int numMethods = methods.length;\n+        final double[][] times = new double[numMethods][repeatStat];\n+    \n+        for (int k = 0; k < repeatStat; k++) {\n+            for (int j = 0; j < numMethods; j++) {\n+                final Runnable r = methods[j];\n+                final long start = System.nanoTime();\n+                for (int i = 0; i < repeatChunk; i++) {\n+                    r.run();\n+                }\n+                times[j][k] = (System.nanoTime() - start) * NANO_TO_MILLI;\n+            }\n+        }\n+\n+        final MultivariateRealFunction acc = FunctionUtils.collector(new Add(), 0);\n+        final double[] avgTimes = new double[numMethods];\n+\n+        final double normFactor = 1d / (repeatStat * repeatChunk);\n+        for (int j = 0; j < numMethods; j++) {\n+            avgTimes[j] = normFactor * acc.value(times[j]);\n+        }\n+\n+        return avgTimes;\n+    }\n+\n+    /**\n+     * Timing and report (to standard output).\n+     *\n+     * @param title Title of the test (for the report).\n+     * @param repeatChunk Each timing measurement will done done for that\n+     * number of repeats of the code.\n+     * @param repeatStat Timing will be averaged over that number of runs. \n+     * @param methods Code being timed.\n+     * @return for each of the given {@code methods}, the averaged time (in\n+     * milliseconds) taken by a call to {@code run}.\n+     */\n+    public static double[] timeAndReport(String title,\n+                                         int repeatChunk,\n+                                         int repeatStat,\n+                                         RunTest ... methods) {\n+        System.out.println(title);\n+        final double[] time = time(repeatChunk, repeatStat, methods);\n+        for (int i = 0; i < time.length; i++) {\n+            System.out.println(methods[i].getName() + \": \" + time[i] + \" ms\");\n+        }\n+\n+        return time;\n+    }\n+\n+    /**\n+     * Utility class for storing a test label.\n+     */\n+    public static abstract class RunTest implements Runnable {\n+        private final String name;\n+\n+        /**\n+         * @param name Test name.\n+         */\n+        public RunTest(String name) {\n+            this.name = name;\n+        }\n+\n+        /**\n+         * @return the name of this test.\n+         */\n+        public String getName() {\n+            return name;\n+        }\n+\n+        /** {@inheritDoc} */\n+        public abstract void run();\n+    }\n+}", "timestamp": 1311975988, "metainfo": ""}