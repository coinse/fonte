{"sha": "308a08cd64b8bcbca3f17fd5aecb2494409801d1", "log": "Adjusted the code to be able to control the files used and the tolerance for each file (important, hard tests currently require lower tolerance to pass).   ", "commit": "\n--- a/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n+++ b/src/test/org/apache/commons/math/stat/CertifiedDataTest.java\n import junit.framework.TestSuite;\n \n import java.io.BufferedReader;\n-import java.io.File;\n import java.io.FileNotFoundException;\n-import java.io.FileReader;\n-import java.io.FilenameFilter;\n import java.io.IOException;\n-import java.net.URL;\n+import java.io.InputStreamReader;\n import org.apache.commons.logging.*;\n /**\n  * Test cases for the {@link Univariate} class.\n  *\n  * @author Mark R. Diggory\n- * @version $Revision: 1.4 $ $Date: 2003/06/02 05:21:06 $\n+ * @version $Revision: 1.5 $ $Date: 2003/06/04 04:03:55 $\n  */\n \n public class CertifiedDataTest extends TestCase {\n-\n-\tprotected double tolerance = .01;\n-\n-\tprotected File[] dataFiles = null;\n \n \tprotected Univariate u = null;\n \n \t * @see junit.framework.TestCase#setUp()\n \t */\n \tpublic void setUp() {\n-\t\tURL url = getClass().getResource(\"data\");\n-\t\tFile file = new File(url.getFile());\n-\n-\t\tdataFiles = file.listFiles(new FilenameFilter() {\n-\t\t\tpublic boolean accept(File dir, String name) {\n-\t\t\t\treturn name.endsWith(\".txt\");\n-\t\t\t}\n-\t\t});\n-\n \t}\n \n \t/**\n \n \t/**\n \t * Test UnivariateImpl\n- \t\n+\t*/\n \tpublic void testUnivariateImpl() {\n \n-\t\tfor (int i = 0; i < dataFiles.length; i++) {\n-\n-\t\t\tu = new UnivariateImpl();\n-\n-\t\t\tloadStats(dataFiles[i]);\n-\n-\t\t\tassertEquals(\n-\t\t\t\tdataFiles[i].getName() + \":std\",\n-\t\t\t\tstd,\n-\t\t\t\tu.getStandardDeviation(),\n-\t\t\t\ttolerance);\n-\t\t\t\t\n-\t\t\tassertEquals(\n-\t\t\t\tdataFiles[i].getName() + \":mean\",\n-\t\t\t\tmean,\n-\t\t\t\tu.getMean(),\n-\t\t\t\ttolerance);\n-\n-\t\t}\n-\t}\n-\t*/\n+\t\tu = new UnivariateImpl();\n+\n+\t\tloadStats(\"data/Lew.txt\");\n+\t\tassertEquals(\"Lew: std\", std, u.getStandardDeviation(), .000000000001);\n+\t\tassertEquals(\"Lew: mean\", mean, u.getMean(), .000000000001);\n+\t\t\n+\t\tloadStats(\"data/Lottery.txt\");\n+\t\tassertEquals(\"Lottery: std\", std, u.getStandardDeviation(), .000000000001);\n+\t\tassertEquals(\"Lottery: mean\", mean, u.getMean(), .000000000001);\t\n+\t\t\n+\t\tloadStats(\"data/PiDigits.txt\");\n+\t\tassertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\tassertEquals(\"PiDigits: mean\", mean, u.getMean(), .00000000000001);\t\n+\n+\t\tloadStats(\"data/Mavro.txt\");\n+\t\tassertEquals(\"Mavro: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\tassertEquals(\"Mavro: mean\", mean, u.getMean(), .00000000000001);\n+\t\t\n+\t\t//loadStats(\"data/Michelso.txt\");\n+\t\t//assertEquals(\"Michelso: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\t//assertEquals(\"Michelso: mean\", mean, u.getMean(), .00000000000001);\t\n+\t\t\t\t\t\t\t\t\t\t\n+\t\tloadStats(\"data/NumAcc1.txt\");\n+\t\tassertEquals(\"NumAcc1: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\tassertEquals(\"NumAcc1: mean\", mean, u.getMean(), .00000000000001);\n+\t\t\n+\t\t//loadStats(\"data/NumAcc2.txt\");\n+\t\t//assertEquals(\"NumAcc2: std\", std, u.getStandardDeviation(), .000000001);\n+\t\t//assertEquals(\"NumAcc2: mean\", mean, u.getMean(), .00000000000001);\n+\t}\n+\n \t/**\n \t * Test UnivariateImpl\n \t */\n \tpublic void testStoredUnivariateImpl() {\n \n-\t\tfor (int i = 0; i < dataFiles.length; i++) {\n-\n-\t\t\tu = new StoreUnivariateImpl();\n-\n-\t\t\tloadStats(dataFiles[i]);\n-\n-\t\t\tassertEquals(\n-\t\t\t\tdataFiles[i].getName() + \":std\",\n-\t\t\t\tstd,\n-\t\t\t\tu.getStandardDeviation(),\n-\t\t\t\ttolerance);\n-\t\t\tassertEquals(\n-\t\t\t\tdataFiles[i].getName() + \":mean\",\n-\t\t\t\tmean,\n-\t\t\t\tu.getMean(),\n-\t\t\t\ttolerance);\n-\n-\t\t}\n+\t\tu = new StoreUnivariateImpl();\n+\t\t\n+\t\tloadStats(\"data/Lew.txt\");\n+\t\tassertEquals(\"Lew: std\", std, u.getStandardDeviation(), .000000000001);\n+\t\tassertEquals(\"Lew: mean\", mean, u.getMean(), .000000000001);\n+\t\t\n+\t\tloadStats(\"data/Lottery.txt\");\n+\t\tassertEquals(\"Lottery: std\", std, u.getStandardDeviation(), .000000000001);\n+\t\tassertEquals(\"Lottery: mean\", mean, u.getMean(), .000000000001);\t\t\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n+\t\tloadStats(\"data/PiDigits.txt\");\n+\t\tassertEquals(\"PiDigits: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\tassertEquals(\"PiDigits: mean\", mean, u.getMean(), .00000000000001);\n+\t\t\n+\t\tloadStats(\"data/Mavro.txt\");\n+\t\tassertEquals(\"Mavro: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\tassertEquals(\"Mavro: mean\", mean, u.getMean(), .00000000000001);\t\t\n+\t\t\n+\t\t//loadStats(\"data/Michelso.txt\");\n+\t\t//assertEquals(\"Michelso: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\t//assertEquals(\"Michelso: mean\", mean, u.getMean(), .00000000000001);\t\n+\n+\t\tloadStats(\"data/NumAcc1.txt\");\n+\t\tassertEquals(\"NumAcc1: std\", std, u.getStandardDeviation(), .00000000000001);\n+\t\tassertEquals(\"NumAcc1: mean\", mean, u.getMean(), .00000000000001);\n+\t\t\n+\t\t//loadStats(\"data/NumAcc2.txt\");\n+\t\t//assertEquals(\"NumAcc2: std\", std, u.getStandardDeviation(), .000000001);\n+\t\t//assertEquals(\"NumAcc2: mean\", mean, u.getMean(), .00000000000001);\n \t}\n \n \t/**\n \t * loads a Univariate off of a test file\n \t * @param file\n \t */\n-\tprivate void loadStats(File file) {\n+\tprivate void loadStats(String resource) {\n \n \t\ttry {\n \n \t\t\tu.clear();\n \t\t\tmean = Double.NaN;\n \t\t\tstd = Double.NaN;\n-\t\t\t\n-\t\t\tBufferedReader in = new BufferedReader(new FileReader(file));\n+\n+\t\t\tBufferedReader in =\n+\t\t\t\tnew BufferedReader(\n+\t\t\t\t\tnew InputStreamReader(\n+\t\t\t\t\t\tgetClass().getResourceAsStream(resource)));\n \n \t\t\tString line = null;\n ", "timestamp": 1054699435, "metainfo": ""}