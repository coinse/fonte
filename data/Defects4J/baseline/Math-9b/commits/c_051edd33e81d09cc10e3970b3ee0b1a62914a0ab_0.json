{"sha": "051edd33e81d09cc10e3970b3ee0b1a62914a0ab", "log": "Removed dead code, improved test coverage.  Dead code pointed out in JIRA: MATH-306. Thanks to Joerg Huber.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n      * <pre><code>\n      *    a + bi          ac + bd + (bc - ad)i\n      *    ----------- = -------------------------\n-     *    c + di               c<sup>2</sup> + d<sup>2</sup>\n+     *    c + di         c<sup>2</sup> + d<sup>2</sup>\n      * </code></pre>\n      * but uses\n      * <a href=\"http://doi.acm.org/10.1145/1039813.1039814\">\n         }\n \n         if (Math.abs(c) < Math.abs(d)) {\n-            if (d == 0.0) {\n-                return createComplex(real/c, imaginary/c);\n-            }\n             double q = c / d;\n             double denominator = c * q + d;\n             return createComplex((real * q + imaginary) / denominator,\n                 (imaginary * q - real) / denominator);\n         } else {\n-            if (c == 0.0) {\n-                return createComplex(imaginary/d, -real/c);\n-            }\n             double q = d / c;\n             double denominator = d * q + c;\n             return createComplex((imaginary * q + real) / denominator,\n--- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n+++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java\n         assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);\n         assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);\n     }\n+    \n+    public void testDivideReal() {\n+        Complex x = new Complex(2d, 3d);\n+        Complex y = new Complex(2d, 0d);\n+        assertEquals(new Complex(1d, 1.5), x.divide(y));\n+        \n+    }\n+    \n+    public void testDivideImaginary() {\n+        Complex x = new Complex(2d, 3d);\n+        Complex y = new Complex(0d, 2d);\n+        assertEquals(new Complex(1.5d, -1d), x.divide(y));\n+    }\n \n     public void testDivideInfinite() {\n         Complex x = new Complex(3, 4);\n         z = w.divide(w);\n         assertTrue(Double.isNaN(z.getReal()));\n         assertTrue(Double.isNaN(z.getImaginary()));\n+    }\n+    \n+    public void testDivideZero() {\n+        Complex x = new Complex(3.0, 4.0);\n+        Complex z = x.divide(Complex.ZERO);\n+        assertEquals(z, Complex.NaN);\n     }\n \n     public void testDivideNaN() {", "timestamp": 1256607139, "metainfo": ""}