{"sha": "7512d765a2d539eb035f7169840a1e0bba8ac533", "log": "[MATH-165] basic implementation of a SimpleEstimationProblem  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java\n+package org.apache.commons.math.estimation;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+\n+/**\n+ * Simple implementation of the {@link EstimationProblem\n+ * EstimationProblem} interface for boilerplate data handling.\n+ * <p>This class <em>only</em> handles parameters and measurements\n+ * storage and unbound parameters filtering. It does not compute\n+ * anything by itself. It should either be used with measurements\n+ * implementation that are smart enough to know about the\n+ * various parameters in order to compute the partial derivatives\n+ * appropriately. Since the problem-specific logic is mainly related to\n+ * the various measurements models, the simplest way to use this class\n+ * is by extending it and using one internal class extending\n+ * {@link WeightedMeasurement WeightedMeasurement} for each measurement\n+ * type. The instances of the internal classes would have access to the\n+ * various parameters and their current estimate.</p>\n+ */\n+public class SimpleEstimationProblem implements EstimationProblem {\n+\n+    /**\n+     * Build an empty instance without parameters nor measurements.\n+     */\n+    public SimpleEstimationProblem() {\n+        parameters = new ArrayList();\n+    }\n+\n+    public EstimatedParameter[] getAllParameters() {\n+        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);\n+    }\n+\n+    public EstimatedParameter[] getUnboundParameters() {\n+\n+        // filter the unbound parameters\n+        ArrayList unbound = new ArrayList(parameters.size());\n+        for (Iterator iterator = parameters.iterator(); iterator.hasNext();) {\n+            EstimatedParameter p = (EstimatedParameter) iterator.next();\n+            if (! p.isBound()) {\n+                unbound.add(p);\n+            }\n+        }\n+\n+        // convert to an array\n+        return (EstimatedParameter[]) unbound.toArray(new EstimatedParameter[unbound.size()]);\n+        \n+    }\n+\n+    public WeightedMeasurement[] getMeasurements() {\n+        return (WeightedMeasurement[]) measurements.toArray(new WeightedMeasurement[measurements.size()]);\n+    }\n+\n+    protected void addParameter(EstimatedParameter p) {\n+        parameters.add(p);\n+    }\n+\n+    /**\n+     * Add a new measurement to the set.\n+     * @param m measurement to add\n+     */\n+    protected void addMeasurement(WeightedMeasurement m) {\n+        measurements.add(m);\n+    }\n+\n+    /** Estimated parameters. */\n+    private ArrayList parameters;\n+\n+    /** Measurements. */\n+    private ArrayList measurements;\n+\n+}", "timestamp": 1187368005, "metainfo": ""}