{"sha": "1bb1ae37304fc7d465dba2f30e8b2c66d649cd19", "log": "Added copySign to DerivativeStructure.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n                                        FastMath.floor(data[0]));\n     }\n \n+    /**\n+     * Returns the instance with the sign of the argument.\n+     * A NaN {@code sign} argument is treated as positive.\n+     *\n+     * @param sign the sign for the returned value\n+     * @return the instance with the same sign as the {@code sign} argument\n+     */\n+    public DerivativeStructure copySign(final double sign){\n+        long m = Double.doubleToLongBits(data[0]);\n+        long s = Double.doubleToLongBits(sign);\n+        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n+            return this;\n+        }\n+        return negate(); // flip sign\n+    }\n+\n     /** {@inheritDoc} */\n     public DerivativeStructure reciprocal() {\n         final DerivativeStructure result = new DerivativeStructure(compiler);\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n     }\n \n     @Test\n+    public void testCopySign() {\n+        DerivativeStructure minusOne = new DerivativeStructure(1, 1, 0, -1.0);\n+        Assert.assertEquals(+1.0, minusOne.copySign(+1.0).getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(-1.0, minusOne.copySign(+1.0).getPartialDerivative(1), 1.0e-15);\n+        Assert.assertEquals(-1.0, minusOne.copySign(-1.0).getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(+1.0, minusOne.copySign(-1.0).getPartialDerivative(1), 1.0e-15);\n+        Assert.assertEquals(+1.0, minusOne.copySign(+0.0).getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(-1.0, minusOne.copySign(+0.0).getPartialDerivative(1), 1.0e-15);\n+        Assert.assertEquals(-1.0, minusOne.copySign(-0.0).getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(+1.0, minusOne.copySign(-0.0).getPartialDerivative(1), 1.0e-15);\n+        Assert.assertEquals(+1.0, minusOne.copySign(Double.NaN).getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(-1.0, minusOne.copySign(Double.NaN).getPartialDerivative(1), 1.0e-15);\n+    }\n+\n+    @Test\n     public void testField() {\n         for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n             DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);", "timestamp": 1345111610, "metainfo": ""}