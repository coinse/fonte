{"sha": "3d4d0641c250deb07e9f553d44ab21df67b8b8c8", "log": "MATH-513 Renamed \"o.a.c.math.optimization.fitting.ParametricRealFunction\" to \"o.a.c.math.analysis.ParametricUnivariateRealFunction\". Modified all affected files.   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/analysis/ParametricUnivariateRealFunction.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.math.analysis;\n+\n+/**\n+ * An interface representing a real function that depends on one independent\n+ * variable plus some extra parameters.\n+ *\n+ * @version $Revision$ $Date$\n+ */\n+public interface ParametricUnivariateRealFunction {\n+    /**\n+     * Compute the value of the function.\n+     *\n+     * @param x Point for which the function value should be computed.\n+     * @param parameters Function parameters.\n+     * @return the value.\n+     */\n+    double value(double x, double ... parameters);\n+\n+    /**\n+     * Compute the gradient of the function with respect to its parameters.\n+     *\n+     * @param x Point for which the function value should be computed.\n+     * @param parameters Function parameters.\n+     * @return the value.\n+     */\n+    double[] gradient(double x, double ... parameters);\n+}\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java\n import java.util.List;\n \n import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n+import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;\n import org.apache.commons.math.analysis.MultivariateMatrixFunction;\n import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;\n import org.apache.commons.math.optimization.VectorialPointValuePair;\n      * @throws org.apache.commons.math.exception.MathUserException if the\n      * parametric function throws one.\n      */\n-    public double[] fit(final ParametricRealFunction f, final double[] initialGuess) {\n+    public double[] fit(final ParametricUnivariateRealFunction f, final double[] initialGuess) {\n         return fit(Integer.MAX_VALUE, f, initialGuess);\n     }\n \n      * @throws org.apache.commons.math.exception.MathUserException if the\n      * parametric function throws one.\n      */\n-    public double[] fit(int maxEval, final ParametricRealFunction f,\n+    public double[] fit(int maxEval, final ParametricUnivariateRealFunction f,\n                         final double[] initialGuess) {\n         // prepare least squares problem\n         double[] target  = new double[observations.size()];\n     private class TheoreticalValuesFunction\n         implements DifferentiableMultivariateVectorialFunction {\n         /** Function to fit. */\n-        private final ParametricRealFunction f;\n+        private final ParametricUnivariateRealFunction f;\n \n         /** Simple constructor.\n          * @param f function to fit.\n          */\n-        public TheoreticalValuesFunction(final ParametricRealFunction f) {\n+        public TheoreticalValuesFunction(final ParametricUnivariateRealFunction f) {\n             this.f = f;\n         }\n \n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n     /**\n      * Fits Gaussian function to the observed points.\n      * It will call the base class\n-     * {@link CurveFitter#fit(ParametricRealFunction,double[]) fit} method.\n+     * {@link CurveFitter#fit(ParametricUnivariateRealFunction,double[]) fit} method.\n      *\n      * @return the Gaussian function that best fits the observed points.\n      * @see CurveFitter\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;\n import org.apache.commons.math.optimization.OptimizationException;\n+import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;\n import org.apache.commons.math.util.FastMath;\n \n /** This class implements a curve fitting specialized for sinusoids.\n     }\n \n     /** Parametric harmonic function. */\n-    private static class ParametricHarmonicFunction implements ParametricRealFunction {\n+    private static class ParametricHarmonicFunction implements ParametricUnivariateRealFunction {\n \n         /** {@inheritDoc} */\n         public double value(double x, double[] parameters) {\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.exception.ZeroException;\n import org.apache.commons.math.exception.NullArgumentException;\n-import org.apache.commons.math.optimization.fitting.ParametricRealFunction;\n+import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;\n \n /**\n  * A Gaussian function.  Specifically:\n  * @since 2.2\n  * @version $Revision$ $Date$\n  */\n-public class ParametricGaussianFunction implements ParametricRealFunction, Serializable {\n+public class ParametricGaussianFunction implements ParametricUnivariateRealFunction, Serializable {\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -3875578602503903233L;\n \n--- a/src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java\n package org.apache.commons.math.optimization.fitting;\n \n import org.apache.commons.math.analysis.polynomials.PolynomialFunction;\n+import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;\n import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;\n \n /** This class implements a curve fitting specialized for polynomials.\n     /**\n      * Dedicated parametric polynomial class.\n      */\n-    private static class ParametricPolynomial implements ParametricRealFunction {\n+    private static class ParametricPolynomial implements ParametricUnivariateRealFunction {\n \n         /** {@inheritDoc} */\n         public double[] gradient(double x, double[] parameters) {\n--- a/src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java\n \n import org.apache.commons.math.exception.MathUserException;\n import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;\n+import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;\n import org.apache.commons.math.util.FastMath;\n import org.junit.Assert;\n import org.junit.Test;\n         fitter.addObservedPoint(1.655d, 0.9474675497289684);\n         fitter.addObservedPoint(1.725d, 0.9013594835804194d);\n \n-        ParametricRealFunction sif = new SimpleInverseFunction();\n+        ParametricUnivariateRealFunction sif = new SimpleInverseFunction();\n \n         double[] initialguess1 = new double[1];\n         initialguess1[0] = 1.0d;\n         fitter.addObservedPoint(1.655d, 0.9474675497289684);\n         fitter.addObservedPoint(1.725d, 0.9013594835804194d);\n \n-        ParametricRealFunction sif = new SimpleInverseFunction();\n+        ParametricUnivariateRealFunction sif = new SimpleInverseFunction();\n \n         double[] initialguess1 = new double[1];\n         initialguess1[0] = 1.0d;\n         curveFitter.addObservedPoint(250, 45087);\n         curveFitter.addObservedPoint(500, 50683);\n \n-        ParametricRealFunction f = new ParametricRealFunction() {\n+        ParametricUnivariateRealFunction f = new ParametricUnivariateRealFunction() {\n \n             public double value(double x, double[] parameters) {\n \n \n     }\n \n-    private static class SimpleInverseFunction implements ParametricRealFunction {\n+    private static class SimpleInverseFunction implements ParametricUnivariateRealFunction {\n \n         public double value(double x, double[] parameters) {\n             return parameters[0] / x + (parameters.length < 2 ? 0 : parameters[1]);", "timestamp": 1297896347, "metainfo": ""}