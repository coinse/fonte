{"sha": "8686325727251cd77b77e54adcfba660620488bd", "log": "Modified to extend ContinuousDistributionAbstract test, improved coverage.   ", "commit": "\n--- a/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/TDistributionTest.java\n  */\n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.math.MathException;\n-\n-import junit.framework.TestCase;\n-\n /**\n- * @version $Revision: 1.13 $ $Date: 2004/02/28 21:58:33 $\n+ * Test cases for TDistribution.\n+ * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n+ * ContinuousDistributionAbstractTest for details.\n+ * \n+ * @version $Revision: 1.14 $ $Date: 2004/05/30 22:13:35 $\n  */\n-public class TDistributionTest extends TestCase {\n-    private TDistribution t;\n+public class TDistributionTest extends ContinuousDistributionAbstractTest {\n \n     /**\n-     * Constructor for ChiSquareDistributionTest.\n+     * Constructor for TDistributionTest.\n      * @param name\n      */\n     public TDistributionTest(String name) {\n         super(name);\n     }\n \n-    /*\n-     * @see TestCase#setUp()\n-     */\n-    protected void setUp() throws Exception {\n+//-------------- Implementations for abstract methods -----------------------\n+    \n+    /** Creates the default continuous distribution instance to use in tests. */\n+    public ContinuousDistribution makeDistribution() {\n+        return DistributionFactory.newInstance().createTDistribution(5.0);\n+    }   \n+    \n+    /** Creates the default cumulative probability distribution test input values */\n+    public double[] makeCumulativeTestPoints() {\n+        // quantiles computed using R version 1.8.1 (linux version)\n+        return new double[] {-5.89343,-3.36493, -2.570582, -2.015048,\n+            -1.475884, 5.89343, 3.36493, 2.570582,\n+            2.015048, 1.475884};\n+    }\n+    \n+    /** Creates the default cumulative probability density test expected values */\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n+                0.990d, 0.975d, 0.950d, 0.900d}; \n+    }\n+    \n+    // --------------------- Override tolerance  --------------\n+    protected void setup() throws Exception {\n         super.setUp();\n-        t = DistributionFactory.newInstance().createTDistribution(5.0);\n+        setTolerance(1E-6);\n     }\n \n-    /*\n-     * @see TestCase#tearDown()\n-     */\n-    protected void tearDown() throws Exception {\n-        t = null;\n-        super.tearDown();\n-    }\n-\n-    public void testInverseCumulativeProbability001() {\n-        testValue(-5.893, .001);\n-    }\n-\n-    public void testInverseCumulativeProbability010() {\n-        testValue(-3.365, .010);\n-    }\n-\n-    public void testInverseCumulativeProbability025() {\n-        testValue(-2.571, .025);\n-    }\n-\n-    public void testInverseCumulativeProbability050() {\n-        testValue(-2.015, .050);\n-    }\n-\n-    public void testInverseCumulativeProbability100() {\n-        testValue(-1.476, .100);\n-    }\n-\n-    public void testInverseCumulativeProbability999() {\n-        testValue(5.893, .999);\n-    }\n-\n-    public void testInverseCumulativeProbability990() {\n-        testValue(3.365, .990);\n-    }\n-\n-    public void testInverseCumulativeProbability975() {\n-        testValue(2.571, .975);\n-    }\n-\n-    public void testInverseCumulativeProbability950() {\n-        testValue(2.015, .950);\n-    }\n-\n-    public void testInverseCumulativeProbability900() {\n-        testValue(1.476, .900);\n-    }\n-\n-    public void testCumulativeProbability001() {\n-        testProbability(-5.893, .001);\n-    }\n-\n-    public void testCumulativeProbability010() {\n-        testProbability(-3.365, .010);\n-    }\n-\n-    public void testCumulativeProbability025() {\n-        testProbability(-2.571, .025);\n-    }\n-\n-    public void testCumulativeProbability050() {\n-        testProbability(-2.015, .050);\n-    }\n-\n-    public void testCumulativeProbability100() {\n-        testProbability(-1.476, .100);\n-    }\n-\n-    public void testCumulativeProbability999() {\n-        testProbability(5.893, .999);\n-    }\n-\n-    public void testCumulativeProbability990() {\n-        testProbability(3.365, .990);\n-    }\n-\n-    public void testCumulativeProbability975() {\n-        testProbability(2.571, .975);\n-    }\n-\n-    public void testCumulativeProbability950() {\n-        testProbability(2.015, .950);\n-    }\n-\n-    public void testCumulativeProbability900() {\n-        testProbability(1.476, .900);\n-    }\n-\n+    //---------------------------- Additional test cases -------------------------\n     /**\n      * @see <a href=\"http://nagoya.apache.org/bugzilla/show_bug.cgi?id=27243\">\n      *      Bug report that prompted this unit test.</a>\n      */\n-    public void testCumulativeProbabilityAgaintStackOverflow() {\n-    \ttry {\n-\t    \tTDistributionImpl td = new TDistributionImpl(5.);\n-\t    \tdouble est;\n-\t    \test = td.cumulativeProbability(.1);\n-\t    \test = td.cumulativeProbability(.01);\n-    \t} catch(MathException ex) {\n-    \t\tfail(ex.getMessage());\n-    \t}\n+    public void testCumulativeProbabilityAgaintStackOverflow() throws Exception {\n+    \tTDistributionImpl td = new TDistributionImpl(5.);\n+    \tdouble est;\n+    \test = td.cumulativeProbability(.1);\n+    \test = td.cumulativeProbability(.01);\n     }\n     \n-    private void testProbability(double x, double expected) {\n+    public void testSmallDf() throws Exception {\n+        setDistribution(DistributionFactory.newInstance().createTDistribution(1d));\n+        setTolerance(1E-4);\n+        // quantiles computed using R version 1.8.1 (linux version)\n+        setCumulativeTestPoints(new double[] {-318.3088, -31.82052, -12.70620, -6.313752,\n+            -3.077684, 318.3088, 31.82052, 12.70620,\n+            6.313752, 3.077684});\n+        setInverseCumulativeTestValues(getCumulativeTestPoints());\n+        verifyCumulativeProbabilities();\n+        verifyInverseCumulativeProbabilities();\n+    }\n+    \n+    public void testDfAccessors() {\n+        TDistribution distribution = (TDistribution) getDistribution();\n+        assertEquals(5d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);\n+        distribution.setDegreesOfFreedom(4d);\n+        assertEquals(4d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);\n         try {\n-            double actual = t.cumulativeProbability(x);\n-            assertEquals(expected, actual, 10e-4);\n-        } catch (MathException e) {\n-        \tfail(e.getMessage());\n+            distribution.setDegreesOfFreedom(0d);\n+            fail(\"Expecting IllegalArgumentException for df = 0\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n         }\n-    }\n-    private void testValue(double expected, double p) {\n-        try {\n-            double actual = t.inverseCumulativeProbability(p);\n-            assertEquals(expected, actual, 10e-4);\n-        } catch (MathException e) {\n-        \tfail(e.getMessage());\n-        }\n-    }\n+    } \n+    \n }", "timestamp": 1085955215, "metainfo": ""}