{"sha": "c2b8c0644f662d003134a5bd352e311a5c191d75", "log": "Added (disabled) test case demonstrating MATH-282 impact on poisson distribution for large means.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java\n \n             double x = mean * 2.0;\n             double dx = x / 10.0;\n+            double p = Double.NaN;\n+            double sigma = Math.sqrt(mean);\n             while (x >= 0) {\n                 try {\n-                    dist.cumulativeProbability(x);\n+                    p = dist.cumulativeProbability(x);\n+                    assertFalse(\"NaN cumulative probability returned for mean = \" +\n+                            mean + \" x = \" + x,Double.isNaN(p));\n+                    if (x > mean - 2 * sigma) {\n+                        assertTrue(\"Zero cum probaility returned for mean = \" +\n+                                mean + \" x = \" + x, p > 0);\n+                    }\n                 } catch (MathException ex) {\n                     fail(\"mean of \" + mean + \" and x of \" + x + \" caused \" + ex.getMessage());\n                 }\n                 x -= dx;\n             }\n-\n+ \n             mean *= 10.0;\n         }\n+    }\n+    \n+    /**\n+     * JIRA: MATH-282\n+     * TODO: activate this test when MATH-282 is resolved\n+     */\n+    public void testCumulativeProbabilitySpecial() throws Exception {\n+        /*\n+        PoissonDistribution dist = new PoissonDistributionImpl(1.0);\n+        dist.setMean(9120);\n+        checkProbability(dist, 9075);\n+        checkProbability(dist, 9102);\n+        dist.setMean(5058);\n+        checkProbability(dist, 5044);\n+        dist.setMean(6986);\n+        checkProbability(dist, 6950);\n+        */\n+    }\n+    \n+    private void checkProbability(PoissonDistribution dist, double x) throws Exception {\n+        double p = dist.cumulativeProbability(x);\n+        assertFalse(\"NaN cumulative probability returned for mean = \" +\n+                dist.getMean() + \" x = \" + x, Double.isNaN(p));\n+        assertTrue(\"Zero cum probability returned for mean = \" +\n+                dist.getMean() + \" x = \" + x, p > 0);\n     }\n \n     public void testLargeMeanInverseCumulativeProbability() {", "timestamp": 1255297555, "metainfo": ""}