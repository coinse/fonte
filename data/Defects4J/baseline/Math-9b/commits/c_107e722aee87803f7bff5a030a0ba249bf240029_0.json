{"sha": "107e722aee87803f7bff5a030a0ba249bf240029", "log": "MATH-468 Utility methods to check that an argument is not NaN nor infinite.   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math/exception/NotFiniteNumberException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.exception;\n+\n+import org.apache.commons.math.exception.util.Localizable;\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+/**\n+ * Exception to be thrown when a number is not finite.\n+ *\n+ * @since 3.0\n+ * @version $Revision$ $Date$\n+ */\n+public class NotFiniteNumberException extends MathIllegalNumberException {\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = -6100997100383932834L;\n+\n+    /**\n+     * Construct the exception.\n+     *\n+     * @param wrong Value that is infinite or NaN.\n+     * @param args Optional arguments.\n+     */\n+    public NotFiniteNumberException(Number wrong,\n+                                    Object ... arguments) {\n+        this(null, wrong, arguments);\n+    }\n+\n+    /**\n+     * Construct the exception with a specific context.\n+     *\n+     * @param specific Specific contexte pattern.\n+     * @param wrong Value that is infinite or NaN.\n+     * @param args Optional arguments.\n+     */\n+    public NotFiniteNumberException(Localizable specific,\n+                                    Number wrong,\n+                                    Object ... arguments) {\n+        super(specific, LocalizedFormats.NOT_FINITE_NUMBER,\n+              wrong, arguments);\n+    }\n+}\n--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java\n     INDEX_NOT_POSITIVE(\"index ({0}) is not positive\"),\n     INDEX_OUT_OF_RANGE(\"index {0} out of allowed range [{1}, {2}]\"),\n     INDEX(\"index ({0})\"), /* keep */\n+    NOT_FINITE_NUMBER(\"{0} is not a finite number\"), /* keep */\n+    ARRAY_ELEMENT(\"value {0} at index {1}\"), /* keep */\n     INFINITE_ARRAY_ELEMENT(\"Array contains an infinite element, {0} at index {1}\"),\n     INFINITE_VALUE_CONVERSION(\"cannot convert infinite value\"),\n     INITIAL_CAPACITY_NOT_POSITIVE(\"initial capacity ({0}) is not positive\"),\n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.exception.MathRuntimeException;\n+import org.apache.commons.math.exception.NotFiniteNumberException;\n import org.apache.commons.math.random.RandomDataImpl;\n \n /**\n         }\n     }\n \n+    public void testCheckFinite() {\n+        try {\n+            MathUtils.checkFinite(Double.POSITIVE_INFINITY);\n+            fail(\"an exception should have been thrown\");\n+        } catch (NotFiniteNumberException e) {\n+            // Expected\n+        }\n+        try {\n+            MathUtils.checkFinite(Double.NEGATIVE_INFINITY);\n+            fail(\"an exception should have been thrown\");\n+        } catch (NotFiniteNumberException e) {\n+            // Expected\n+        }\n+        try {\n+            MathUtils.checkFinite(Double.NaN);\n+            fail(\"an exception should have been thrown\");\n+        } catch (NotFiniteNumberException e) {\n+            // Expected\n+        }\n+\n+        try {\n+            MathUtils.checkFinite(new double[] {0, -1, Double.POSITIVE_INFINITY, -2, 3});\n+            fail(\"an exception should have been thrown\");\n+        } catch (NotFiniteNumberException e) {\n+            // Expected\n+        }\n+        try {\n+            MathUtils.checkFinite(new double[] {1, Double.NEGATIVE_INFINITY, -2, 3});\n+            fail(\"an exception should have been thrown\");\n+        } catch (NotFiniteNumberException e) {\n+            // Expected\n+        }\n+        try {\n+            MathUtils.checkFinite(new double[] {4, 3, -1, Double.NaN, -2, 1});\n+            fail(\"an exception should have been thrown\");\n+        } catch (NotFiniteNumberException e) {\n+            // Expected\n+        }\n+    }\n+\n     public void testSortInPlace() {\n         final double[] x1 = {2,   5,  -3, 1,  4};\n         final double[] x2 = {4,  25,   9, 1, 16};", "timestamp": 1294327823, "metainfo": ""}