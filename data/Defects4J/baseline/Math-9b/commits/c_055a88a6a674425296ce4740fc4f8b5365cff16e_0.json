{"sha": "055a88a6a674425296ce4740fc4f8b5365cff16e", "log": "MATH-204.  added root checks for the endpoints.  ", "commit": "\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n         clearResult();\n         verifyInterval(min, max);\n         \n+        double ret = Double.NaN;\n+        \n         double yMin = f.value(min);\n         double yMax = f.value(max);\n         \n         // Verify bracketing\n-        if (yMin * yMax >= 0) {\n-            throw new IllegalArgumentException\n-            (\"Function values at endpoints do not have different signs.\" +\n-                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");       \n-        }\n-\n-        // solve using only the first endpoint as initial guess\n-        return solve(min, yMin, max, yMax, min, yMin);\n-\n+        double sign = yMin * yMax;\n+        if (sign > 0) {\n+            // check if either value is close to a zero\n+            if (Math.abs(yMin) <= functionValueAccuracy) {\n+                setResult(min, 0);\n+                ret = min;\n+            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n+                setResult(max, 0);\n+                ret = max;\n+            } else {\n+                // neither value is close to zero and min and max do not bracket root.\n+                throw new IllegalArgumentException\n+                (\"Function values at endpoints do not have different signs.\" +\n+                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n+                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+            }\n+        } else if (sign < 0){\n+            // solve using only the first endpoint as initial guess\n+            ret = solve(min, yMin, max, yMax, min, yMin);\n+        } else {\n+            // either min or max is a root\n+            if (yMin == 0.0) {\n+                ret = min;\n+            } else {\n+                ret = max;\n+            }\n+        }\n+\n+        return ret;\n     }\n         \n     /**\n--- a/src/test/org/apache/commons/math/analysis/BrentSolverTest.java\n+++ b/src/test/org/apache/commons/math/analysis/BrentSolverTest.java\n         assertEquals(result, 1.0, 1E-6);\n     }\n     \n+    public void testRootEndpoints() throws Exception {\n+        UnivariateRealFunction f = new SinFunction();\n+        UnivariateRealSolver solver = new BrentSolver(f);\n+        \n+        // endpoint is root\n+        double result = solver.solve(Math.PI, 4);\n+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n+\n+        result = solver.solve(3, Math.PI);\n+        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n+    }\n+    \n     public void testBadEndpoints() throws Exception {\n         UnivariateRealFunction f = new SinFunction();\n         UnivariateRealSolver solver = new BrentSolver(f);", "timestamp": 1210167393, "metainfo": ""}