{"sha": "e9b8d5cf7d0bbcdf2c00b9d20717ac9eb69a6801", "log": "Modified to extend ContinuousDistributionAbstractTest, improved coverage.   ", "commit": "\n--- a/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n+++ b/src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java\n \n package org.apache.commons.math.distribution;\n \n-import junit.framework.TestCase;\n-\n /**\n- * @version $Revision: 1.14 $ $Date: 2004/05/23 21:34:19 $\n+ * Test cases for ChiSquareDistribution.\n+ * Extends ContinuousDistributionAbstractTest.  See class javadoc for\n+ * ContinuousDistributionAbstractTest for details.\n+ * \n+ * @version $Revision: 1.15 $ $Date: 2004/05/29 22:52:44 $\n  */\n-public class ChiSquareDistributionTest extends TestCase {\n-    private ChiSquaredDistribution chiSquare;\n+public class ChiSquareDistributionTest extends ContinuousDistributionAbstractTest {\n     \n-\t/**\n-\t * Constructor for ChiSquareDistributionTest.\n-\t * @param name\n-\t */\n-\tpublic ChiSquareDistributionTest(String name) {\n-\t\tsuper(name);\n-\t}\n-\n-\t/*\n-\t * @see TestCase#setUp()\n-\t */\n-\tprotected void setUp() throws Exception {\n-\t\tsuper.setUp();\n-        chiSquare = DistributionFactory.newInstance().createChiSquareDistribution(5.0);\n-\t}\n-\n-\t/*\n-\t * @see TestCase#tearDown()\n-\t */\n-\tprotected void tearDown() throws Exception {\n-        chiSquare = null;\n-\t\tsuper.tearDown();\n-\t}\n-\n-    public void testLowerTailProbability() throws Exception {\n-        testProbability( .210, .001);\n-        testProbability( .554, .010);\n-        testProbability( .831, .025);\n-        testProbability(1.145, .050);\n-        testProbability(1.610, .100);\n+    /**\n+     * Constructor for ChiSquareDistributionTest.\n+     * @param name\n+     */\n+    public ChiSquareDistributionTest(String name) {\n+        super(name);\n+    }\n+    \n+    //-------------- Implementations for abstract methods -----------------------\n+    \n+    /** Creates the default continuous distribution instance to use in tests. */\n+    public ContinuousDistribution makeDistribution() {\n+        return DistributionFactory.newInstance().createChiSquareDistribution(5.0);\n+    }   \n+    \n+    /** Creates the default cumulative probability distribution test input values */\n+    public double[] makeCumulativeTestPoints() {\n+        // quantiles computed using R version 1.8.1 (linux version)\n+        return new double[] {0.210216d, 0.5542981d, 0.8312116d, 1.145476d, 1.610308d, \n+                20.51501d, 15.08627d, 12.83250d, 11.07050d, 9.236357d};\n+    }\n+    \n+    /** Creates the default cumulative probability density test expected values */\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {0.001d, 0.01d, 0.025d, 0.05d, 0.1d, 0.999d,\n+                0.990d, 0.975d, 0.950d, 0.900d}; \n+        }\n+    \n+ // --------------------- Override tolerance  --------------\n+    protected void setup() throws Exception {\n+        super.setUp();\n+        setTolerance(1E-6);\n     }\n \n-    public void testUpperTailProbability() throws Exception {\n-        testProbability(20.515, .999);\n-        testProbability(15.086, .990);\n-        testProbability(12.833, .975);\n-        testProbability(11.070, .950);\n-        testProbability( 9.236, .900);\n+ //---------------------------- Additional test cases -------------------------\n+    \n+    public void testSmallDf() throws Exception {\n+        setDistribution(DistributionFactory.newInstance().createChiSquareDistribution(0.1d));\n+        setTolerance(1E-4);\n+        // quantiles computed using R version 1.8.1 (linux version)\n+        setCumulativeTestPoints(new double[] {1.168926E-60, 1.168926E-40, 1.063132E-32, \n+                1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, \n+                0.5318646, 0.1526342});\n+        setInverseCumulativeTestValues(getCumulativeTestPoints());\n+        verifyCumulativeProbabilities();\n+        verifyInverseCumulativeProbabilities();\n     }\n     \n-    public void testLowerTailValues() throws Exception {\n-        testValue(.001,  .210);\n-        testValue(.010,  .554);\n-        testValue(.025,  .831);\n-        testValue(.050, 1.145);\n-        testValue(.100, 1.610);\n-    }\n+    public void testDfAccessors() {\n+        ChiSquaredDistribution distribution = (ChiSquaredDistribution) getDistribution();\n+        assertEquals(5d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);\n+        distribution.setDegreesOfFreedom(4d);\n+        assertEquals(4d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);\n+        try {\n+            distribution.setDegreesOfFreedom(0d);\n+            fail(\"Expecting IllegalArgumentException for df = 0\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    } \n     \n-    public void testUpperTailValues() throws Exception {\n-        testValue(.999, 20.515);\n-        testValue(.990, 15.086);\n-        testValue(.975, 12.833);\n-        testValue(.950, 11.070);\n-        testValue(.900,  9.236);\n-    }\n-    \n-    private void testProbability(double x, double expected) throws Exception {\n-        double actual = chiSquare.cumulativeProbability(x);\n-        assertEquals(\"probability for \" + x, expected, actual, 10e-4);\n-    }\n-    \n-    private void testValue(double p, double expected) throws Exception {\n-        double actual = chiSquare.inverseCumulativeProbability(p);\n-        assertEquals(\"value for \" + p, expected, actual, 10e-4);\n-    }\n }", "timestamp": 1085871164, "metainfo": ""}