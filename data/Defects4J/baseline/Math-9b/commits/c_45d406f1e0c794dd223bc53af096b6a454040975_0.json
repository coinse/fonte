{"sha": "45d406f1e0c794dd223bc53af096b6a454040975", "log": "Initial Deposit for StatUtils unit testing, this was derived from StoreUnivariateImplTest.   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/math/stat/StatUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.math.stat;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link StatUtils} class.\n+ *\n+ * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n+ * @author <a href=\"mailto:mdiggory@apache.org\">Mark Diggory</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/06/18 15:59:55 $\n+ */\n+\n+public final class StatUtilsTest extends TestCase {\n+\n+    private double one = 1;\n+    private float two = 2;\n+    private int three = 3;\n+    private double mean = 2;\n+    private double sumSq = 18;\n+    private double sum = 8;\n+    private double var = 0.666666666666666666667;\n+    private double std = Math.sqrt(var);\n+    private double n = 4;\n+    private double min = 1;\n+    private double max = 3;\n+    private double skewness = 0;\n+    private double kurtosis = 0.5;\n+    private int kClass = StoreUnivariate.LEPTOKURTIC;\n+    private double tolerance = 10E-15;\n+\n+    public StatUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StatUtilsTest.class);\n+        suite.setName(\"StatUtil Tests\");\n+        return suite;\n+    }\n+\n+    /** test stats */\n+    public void testStats() {\n+        double[] values = new double[] { one, two, two, three };\n+        assertEquals(\"sum\", sum, StatUtils.sum(values), tolerance);\n+        assertEquals(\"sumsq\", sumSq, StatUtils.sumSq(values), tolerance);\n+        assertEquals(\"var\", var, StatUtils.variance(values), tolerance);\n+        assertEquals(\n+            \"std\",\n+            std,\n+            StatUtils.standardDeviation(values),\n+            tolerance);\n+        assertEquals(\"mean\", mean, StatUtils.mean(values), tolerance);\n+        assertEquals(\"min\", min, StatUtils.min(values), tolerance);\n+        assertEquals(\"max\", max, StatUtils.max(values), tolerance);\n+    }\n+\n+    public void testN0andN1Conditions() throws Exception {\n+        double[] values = new double[0];\n+\n+        assertTrue(\n+            \"Mean of n = 0 set should be NaN\",\n+            Double.isNaN(StatUtils.mean(values)));\n+        assertTrue(\n+            \"Standard Deviation of n = 0 set should be NaN\",\n+            Double.isNaN(StatUtils.standardDeviation(values)));\n+        assertTrue(\n+            \"Variance of n = 0 set should be NaN\",\n+            Double.isNaN(StatUtils.variance(values)));\n+\n+        values = new double[] { one };\n+\n+        assertTrue(\n+            \"Mean of n = 1 set should be value of single item n1\",\n+            StatUtils.mean(values) == one);\n+        assertTrue(\n+            \"StdDev of n = 1 set should be zero, instead it is: \"\n+                + StatUtils.standardDeviation(values),\n+            StatUtils.standardDeviation(values) == 0);\n+        assertTrue(\n+            \"Variance of n = 1 set should be zero\",\n+            StatUtils.variance(values) == 0);\n+    }\n+\n+    public void testSkewAndKurtosis() {\n+\n+        double[] values =\n+            {\n+                12.5,\n+                12,\n+                11.8,\n+                14.2,\n+                14.9,\n+                14.5,\n+                21,\n+                8.2,\n+                10.3,\n+                11.3,\n+                14.1,\n+                9.9,\n+                12.2,\n+                12,\n+                12.1,\n+                11,\n+                19.8,\n+                11,\n+                10,\n+                8.8,\n+                9,\n+                12.3 };\n+\n+        assertEquals(\"mean\", 12.40455, StatUtils.mean(values), 0.0001);\n+        assertEquals(\"variance\", 10.00236, StatUtils.variance(values), 0.0001);\n+        assertEquals(\"skewness\", 1.437424, StatUtils.skewness(values), 0.0001);\n+        assertEquals(\"kurtosis\", 2.37719, StatUtils.kurtosis(values), 0.0001);\n+    }\n+\n+    public void testProductAndGeometricMean() throws Exception {\n+        double[] values = { 1.0, 2.0, 3.0, 4.0 };\n+\n+        assertEquals(\n+            \"Product not expected\",\n+            24.0,\n+            StatUtils.product(values),\n+            Double.MIN_VALUE);\n+        assertEquals(\n+            \"Geometric mean not expected\",\n+            2.213364,\n+            StatUtils.geometricMean(values),\n+            0.00001);\n+    }\n+\n+}", "timestamp": 1055951995, "metainfo": ""}