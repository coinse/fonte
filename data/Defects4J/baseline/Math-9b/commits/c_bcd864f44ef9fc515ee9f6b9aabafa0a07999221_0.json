{"sha": "bcd864f44ef9fc515ee9f6b9aabafa0a07999221", "log": "removed BigFraction.clone() as the class is guaranteed to be immutable  ", "commit": "\n--- a/src/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/java/org/apache/commons/math/fraction/BigFraction.java\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public class BigFraction extends Number implements Comparable<BigFraction>, Cloneable {\n+public class BigFraction extends Number implements Comparable<BigFraction> {\n \n     /** A fraction representing \"1\". */\n     public static final BigFraction ONE = new BigFraction(1, 1);\n \n     /**\n      * <p>\n-     * Clones this object. The result {@link BigFraction} isn't reduced and is\n-     * exactly the same as the original.\n-     * </p>\n-     * \n-     * @return an exact copy of this {@link BigFraction}.\n-     * @see java.lang.Object#clone()\n-     */\n-    @Override\n-    public BigFraction clone() {\n-        // don't need to clone numerator and denominator because the object is\n-        // immutable\n-        BigFraction clone = null;\n-\n-        try {\n-            clone = (BigFraction) super.clone();\n-        } catch (CloneNotSupportedException e) {\n-            e.printStackTrace();\n-        }\n-\n-        return clone;\n-    }\n-\n-    /**\n-     * <p>\n      * Compares this object to another based on size.\n      * </p>\n      * \n      *             if the fraction is <code>null</code>.\n      */\n     public BigFraction subtract(final BigFraction fraction) {\n-        BigFraction ret = null;\n-\n         if (ZERO.equals(fraction)) {\n-            ret = clone();\n+            return this;\n+        }\n+\n+        BigInteger num = null;\n+        BigInteger den = null;\n+        if (denominator.equals(fraction.denominator)) {\n+            num = numerator.subtract(fraction.numerator);\n+            den = denominator;\n         } else {\n-            BigInteger num = null;\n-            BigInteger den = null;\n-\n-            if (denominator.equals(fraction.denominator)) {\n-                num = numerator.subtract(fraction.numerator);\n-                den = denominator;\n-            } else {\n-                num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));\n-                den = denominator.multiply(fraction.denominator);\n-            }\n-            ret = new BigFraction(num, den);\n-        }\n-\n-        return ret;\n+            num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));\n+            den = denominator.multiply(fraction.denominator);\n+        }\n+        return new BigFraction(num, den);\n+\n     }\n \n     /**", "timestamp": 1238332273, "metainfo": ""}