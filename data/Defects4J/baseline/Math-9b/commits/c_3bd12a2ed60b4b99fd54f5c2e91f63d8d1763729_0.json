{"sha": "3bd12a2ed60b4b99fd54f5c2e91f63d8d1763729", "log": "improved test coverage  ", "commit": "\n--- a/src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java\n+++ b/src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java\n import org.apache.commons.math.optimization.GoalType;\n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.RealPointValuePair;\n+import org.apache.commons.math.optimization.SimpleRealPointChecker;\n import org.apache.commons.math.optimization.SimpleScalarValueChecker;\n import org.junit.Test;\n \n       try {\n           Powell powell = new Powell();\n           NelderMead optimizer = new NelderMead();\n-          optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));\n+          optimizer.setConvergenceChecker(new SimpleRealPointChecker(-1.0, 1.0e-3));\n           optimizer.setMaxEvaluations(20);\n           optimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });\n       } catch (FunctionEvaluationException fee) {\n--- a/src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java\n+++ b/src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java\n import org.apache.commons.math.linear.BlockRealMatrix;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.optimization.OptimizationException;\n+import org.apache.commons.math.optimization.SimpleVectorialPointChecker;\n import org.apache.commons.math.optimization.SimpleVectorialValueChecker;\n import org.apache.commons.math.optimization.VectorialPointValuePair;\n \n         circle.addPoint( 45.0,  97.0);\n         GaussNewtonOptimizer optimizer = new GaussNewtonOptimizer(true);\n         optimizer.setMaxIterations(100);\n-        optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-15, 1.0e-15));\n+        optimizer.setConvergenceChecker(new SimpleVectorialPointChecker(1.0e-30, 1.0e-30));\n         try {\n             optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 },\n                                new double[] { 1, 1, 1, 1, 1 },", "timestamp": 1248121747, "metainfo": ""}