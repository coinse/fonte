{"sha": "4413f0f5ffc641436d9ed953bba27f9df945ba5d", "log": "svn:eol-style native  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java\n+++ b/src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.math.distribution;\n-\n-import org.apache.commons.math.special.Gamma;\n-import org.apache.commons.math.util.MathUtils;\n-\n-/**\n- * <p>\n- * Utility class used by various distributions to accurately compute their\n- * respective probability mass functions. The implementation for this class is\n- * based on the Catherine Loader's <a target=\"_blank\"\n- * href=\"http://www.herine.net/stat/software/dbinom.html\">dbinom</a> routines.\n- * </p>\n- * <p>\n- * This class is not intended to be called directly.\n- * </p>\n- * <p>\n- * References:\n- * <ol>\n- * <li>Catherine Loader (2000). \"Fast and Accurate Computation of Binomial\n- * Probabilities.\". <a target=\"_blank\"\n- * href=\"http://www.herine.net/stat/papers/dbinom.pdf\">\n- * http://www.herine.net/stat/papers/dbinom.pdf</a></li>\n- * </ol>\n- * </p>\n- *\n- * @since 2.1\n- * @version $Revision$ $Date$\n- */\n-final class SaddlePointExpansion {\n-\n-    /** 1/2 * log(2 &#960;). */\n-    private static final double HALF_LOG_2_PI = 0.5 * Math.log(MathUtils.TWO_PI);\n-\n-    /** exact Stirling expansion error for certain values. */\n-    private static final double[] EXACT_STIRLING_ERRORS = { 0.0, /* 0.0 */\n-    0.1534264097200273452913848, /* 0.5 */\n-    0.0810614667953272582196702, /* 1.0 */\n-    0.0548141210519176538961390, /* 1.5 */\n-    0.0413406959554092940938221, /* 2.0 */\n-    0.03316287351993628748511048, /* 2.5 */\n-    0.02767792568499833914878929, /* 3.0 */\n-    0.02374616365629749597132920, /* 3.5 */\n-    0.02079067210376509311152277, /* 4.0 */\n-    0.01848845053267318523077934, /* 4.5 */\n-    0.01664469118982119216319487, /* 5.0 */\n-    0.01513497322191737887351255, /* 5.5 */\n-    0.01387612882307074799874573, /* 6.0 */\n-    0.01281046524292022692424986, /* 6.5 */\n-    0.01189670994589177009505572, /* 7.0 */\n-    0.01110455975820691732662991, /* 7.5 */\n-    0.010411265261972096497478567, /* 8.0 */\n-    0.009799416126158803298389475, /* 8.5 */\n-    0.009255462182712732917728637, /* 9.0 */\n-    0.008768700134139385462952823, /* 9.5 */\n-    0.008330563433362871256469318, /* 10.0 */\n-    0.007934114564314020547248100, /* 10.5 */\n-    0.007573675487951840794972024, /* 11.0 */\n-    0.007244554301320383179543912, /* 11.5 */\n-    0.006942840107209529865664152, /* 12.0 */\n-    0.006665247032707682442354394, /* 12.5 */\n-    0.006408994188004207068439631, /* 13.0 */\n-    0.006171712263039457647532867, /* 13.5 */\n-    0.005951370112758847735624416, /* 14.0 */\n-    0.005746216513010115682023589, /* 14.5 */\n-    0.005554733551962801371038690 /* 15.0 */\n-    };\n-\n-    /**\n-     * Default constructor.\n-     */\n-    private SaddlePointExpansion() {\n-        super();\n-    }\n-\n-    /**\n-     * Compute the error of Stirling's series at the given value.\n-     * <p>\n-     * References:\n-     * <ol>\n-     * <li>Eric W. Weisstein. \"Stirling's Series.\" From MathWorld--A Wolfram Web\n-     * Resource. <a target=\"_blank\"\n-     * href=\"http://mathworld.wolfram.com/StirlingsSeries.html\">\n-     * http://mathworld.wolfram.com/StirlingsSeries.html</a></li>\n-     * </ol>\n-     * </p>\n-     *\n-     * @param z the value.\n-     * @return the Striling's series error.\n-     */\n-    static double getStirlingError(double z) {\n-        double ret;\n-        if (z < 15.0) {\n-            double z2 = 2.0 * z;\n-            if (Math.floor(z2) == z2) {\n-                ret = EXACT_STIRLING_ERRORS[(int) z2];\n-            } else {\n-                ret = Gamma.logGamma(z + 1.0) - (z + 0.5) * Math.log(z) +\n-                      z - HALF_LOG_2_PI;\n-            }\n-        } else {\n-            double z2 = z * z;\n-            ret = (0.083333333333333333333 -\n-                    (0.00277777777777777777778 -\n-                            (0.00079365079365079365079365 -\n-                                    (0.000595238095238095238095238 -\n-                                            0.0008417508417508417508417508 /\n-                                            z2) / z2) / z2) / z2) / z;\n-        }\n-        return ret;\n-    }\n-\n-    /**\n-     * A part of the deviance portion of the saddle point approximation.\n-     * <p>\n-     * References:\n-     * <ol>\n-     * <li>Catherine Loader (2000). \"Fast and Accurate Computation of Binomial\n-     * Probabilities.\". <a target=\"_blank\"\n-     * href=\"http://www.herine.net/stat/papers/dbinom.pdf\">\n-     * http://www.herine.net/stat/papers/dbinom.pdf</a></li>\n-     * </ol>\n-     * </p>\n-     *\n-     * @param x the x value.\n-     * @param mu the average.\n-     * @return a part of the deviance.\n-     */\n-    static double getDeviancePart(double x, double mu) {\n-        double ret;\n-        if (Math.abs(x - mu) < 0.1 * (x + mu)) {\n-            double d = x - mu;\n-            double v = d / (x + mu);\n-            double s1 = v * d;\n-            double s = Double.NaN;\n-            double ej = 2.0 * x * v;\n-            v = v * v;\n-            int j = 1;\n-            while (s1 != s) {\n-                s = s1;\n-                ej *= v;\n-                s1 = s + ej / ((j * 2) + 1);\n-                ++j;\n-            }\n-            ret = s1;\n-        } else {\n-            ret = x * Math.log(x / mu) + mu - x;\n-        }\n-        return ret;\n-    }\n-\n-    /**\n-     * Compute the PMF for a binomial distribution using the saddle point\n-     * expansion.\n-     *\n-     * @param x the value at which the probability is evaluated.\n-     * @param n the number of trials.\n-     * @param p the probability of success.\n-     * @param q the probability of failure (1 - p).\n-     * @return log(p(x)).\n-     */\n-    static double logBinomialProbability(int x, int n, double p, double q) {\n-        double ret;\n-        if (x == 0) {\n-            if (p < 0.1) {\n-                ret = -getDeviancePart(n, n * q) - n * p;\n-            } else {\n-                ret = n * Math.log(q);\n-            }\n-        } else if (x == n) {\n-            if (q < 0.1) {\n-                ret = -getDeviancePart(n, n * p) - n * q;\n-            } else {\n-                ret = n * Math.log(p);\n-            }\n-        } else {\n-            ret = getStirlingError(n) - getStirlingError(x) -\n-                  getStirlingError(n - x) - getDeviancePart(x, n * p) -\n-                  getDeviancePart(n - x, n * q);\n-            double f = (MathUtils.TWO_PI * x * (n - x)) / n;\n-            ret = -0.5 * Math.log(f) + ret;\n-        }\n-        return ret;\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math.distribution;\n+\n+import org.apache.commons.math.special.Gamma;\n+import org.apache.commons.math.util.MathUtils;\n+\n+/**\n+ * <p>\n+ * Utility class used by various distributions to accurately compute their\n+ * respective probability mass functions. The implementation for this class is\n+ * based on the Catherine Loader's <a target=\"_blank\"\n+ * href=\"http://www.herine.net/stat/software/dbinom.html\">dbinom</a> routines.\n+ * </p>\n+ * <p>\n+ * This class is not intended to be called directly.\n+ * </p>\n+ * <p>\n+ * References:\n+ * <ol>\n+ * <li>Catherine Loader (2000). \"Fast and Accurate Computation of Binomial\n+ * Probabilities.\". <a target=\"_blank\"\n+ * href=\"http://www.herine.net/stat/papers/dbinom.pdf\">\n+ * http://www.herine.net/stat/papers/dbinom.pdf</a></li>\n+ * </ol>\n+ * </p>\n+ *\n+ * @since 2.1\n+ * @version $Revision$ $Date$\n+ */\n+final class SaddlePointExpansion {\n+\n+    /** 1/2 * log(2 &#960;). */\n+    private static final double HALF_LOG_2_PI = 0.5 * Math.log(MathUtils.TWO_PI);\n+\n+    /** exact Stirling expansion error for certain values. */\n+    private static final double[] EXACT_STIRLING_ERRORS = { 0.0, /* 0.0 */\n+    0.1534264097200273452913848, /* 0.5 */\n+    0.0810614667953272582196702, /* 1.0 */\n+    0.0548141210519176538961390, /* 1.5 */\n+    0.0413406959554092940938221, /* 2.0 */\n+    0.03316287351993628748511048, /* 2.5 */\n+    0.02767792568499833914878929, /* 3.0 */\n+    0.02374616365629749597132920, /* 3.5 */\n+    0.02079067210376509311152277, /* 4.0 */\n+    0.01848845053267318523077934, /* 4.5 */\n+    0.01664469118982119216319487, /* 5.0 */\n+    0.01513497322191737887351255, /* 5.5 */\n+    0.01387612882307074799874573, /* 6.0 */\n+    0.01281046524292022692424986, /* 6.5 */\n+    0.01189670994589177009505572, /* 7.0 */\n+    0.01110455975820691732662991, /* 7.5 */\n+    0.010411265261972096497478567, /* 8.0 */\n+    0.009799416126158803298389475, /* 8.5 */\n+    0.009255462182712732917728637, /* 9.0 */\n+    0.008768700134139385462952823, /* 9.5 */\n+    0.008330563433362871256469318, /* 10.0 */\n+    0.007934114564314020547248100, /* 10.5 */\n+    0.007573675487951840794972024, /* 11.0 */\n+    0.007244554301320383179543912, /* 11.5 */\n+    0.006942840107209529865664152, /* 12.0 */\n+    0.006665247032707682442354394, /* 12.5 */\n+    0.006408994188004207068439631, /* 13.0 */\n+    0.006171712263039457647532867, /* 13.5 */\n+    0.005951370112758847735624416, /* 14.0 */\n+    0.005746216513010115682023589, /* 14.5 */\n+    0.005554733551962801371038690 /* 15.0 */\n+    };\n+\n+    /**\n+     * Default constructor.\n+     */\n+    private SaddlePointExpansion() {\n+        super();\n+    }\n+\n+    /**\n+     * Compute the error of Stirling's series at the given value.\n+     * <p>\n+     * References:\n+     * <ol>\n+     * <li>Eric W. Weisstein. \"Stirling's Series.\" From MathWorld--A Wolfram Web\n+     * Resource. <a target=\"_blank\"\n+     * href=\"http://mathworld.wolfram.com/StirlingsSeries.html\">\n+     * http://mathworld.wolfram.com/StirlingsSeries.html</a></li>\n+     * </ol>\n+     * </p>\n+     *\n+     * @param z the value.\n+     * @return the Striling's series error.\n+     */\n+    static double getStirlingError(double z) {\n+        double ret;\n+        if (z < 15.0) {\n+            double z2 = 2.0 * z;\n+            if (Math.floor(z2) == z2) {\n+                ret = EXACT_STIRLING_ERRORS[(int) z2];\n+            } else {\n+                ret = Gamma.logGamma(z + 1.0) - (z + 0.5) * Math.log(z) +\n+                      z - HALF_LOG_2_PI;\n+            }\n+        } else {\n+            double z2 = z * z;\n+            ret = (0.083333333333333333333 -\n+                    (0.00277777777777777777778 -\n+                            (0.00079365079365079365079365 -\n+                                    (0.000595238095238095238095238 -\n+                                            0.0008417508417508417508417508 /\n+                                            z2) / z2) / z2) / z2) / z;\n+        }\n+        return ret;\n+    }\n+\n+    /**\n+     * A part of the deviance portion of the saddle point approximation.\n+     * <p>\n+     * References:\n+     * <ol>\n+     * <li>Catherine Loader (2000). \"Fast and Accurate Computation of Binomial\n+     * Probabilities.\". <a target=\"_blank\"\n+     * href=\"http://www.herine.net/stat/papers/dbinom.pdf\">\n+     * http://www.herine.net/stat/papers/dbinom.pdf</a></li>\n+     * </ol>\n+     * </p>\n+     *\n+     * @param x the x value.\n+     * @param mu the average.\n+     * @return a part of the deviance.\n+     */\n+    static double getDeviancePart(double x, double mu) {\n+        double ret;\n+        if (Math.abs(x - mu) < 0.1 * (x + mu)) {\n+            double d = x - mu;\n+            double v = d / (x + mu);\n+            double s1 = v * d;\n+            double s = Double.NaN;\n+            double ej = 2.0 * x * v;\n+            v = v * v;\n+            int j = 1;\n+            while (s1 != s) {\n+                s = s1;\n+                ej *= v;\n+                s1 = s + ej / ((j * 2) + 1);\n+                ++j;\n+            }\n+            ret = s1;\n+        } else {\n+            ret = x * Math.log(x / mu) + mu - x;\n+        }\n+        return ret;\n+    }\n+\n+    /**\n+     * Compute the PMF for a binomial distribution using the saddle point\n+     * expansion.\n+     *\n+     * @param x the value at which the probability is evaluated.\n+     * @param n the number of trials.\n+     * @param p the probability of success.\n+     * @param q the probability of failure (1 - p).\n+     * @return log(p(x)).\n+     */\n+    static double logBinomialProbability(int x, int n, double p, double q) {\n+        double ret;\n+        if (x == 0) {\n+            if (p < 0.1) {\n+                ret = -getDeviancePart(n, n * q) - n * p;\n+            } else {\n+                ret = n * Math.log(q);\n+            }\n+        } else if (x == n) {\n+            if (q < 0.1) {\n+                ret = -getDeviancePart(n, n * p) - n * q;\n+            } else {\n+                ret = n * Math.log(p);\n+            }\n+        } else {\n+            ret = getStirlingError(n) - getStirlingError(x) -\n+                  getStirlingError(n - x) - getDeviancePart(x, n * p) -\n+                  getDeviancePart(n - x, n * q);\n+            double f = (MathUtils.TWO_PI * x * (n - x)) / n;\n+            ret = -0.5 * Math.log(f) + ret;\n+        }\n+        return ret;\n+    }\n+}", "timestamp": 1269569917, "metainfo": ""}