{"sha": "26cf6d543deeb2e59564ba23568c83eda2b389bd", "log": "replaced inefficient constructors Character(char) by Character.valueOf(char)  ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n      * @param v the value to add.\n      */\n     public void addValue(char v) {\n-        addValue(new Character(v));\n+        addValue(Character.valueOf(v));\n     }\n     \n     /** Clears the frequency table */\n      * @return the frequency of v.\n      */\n     public long getCount(char v) {\n-        return getCount(new Character(v));\n+        return getCount(Character.valueOf(v));\n     }\n     \n     //-------------------------------------------------------------\n      * @return the proportion of values equal to v\n      */\n     public double getPct(char v) {\n-        return getPct(new Character(v));         \n+        return getPct(Character.valueOf(v));         \n     }\n     \n     //-----------------------------------------------------------------------------------------\n      * @return the proportion of values equal to v\n      */\n     public long getCumFreq(char v) {\n-        return getCumFreq(new Character(v));         \n+        return getCumFreq(Character.valueOf(v));         \n     }\n     \n     //----------------------------------------------------------------------------------------------\n      * @return the proportion of values less than or equal to v\n      */\n     public double getCumPct(char v) {\n-        return getCumPct(new Character(v));         \n+        return getCumPct(Character.valueOf(v));         \n     }\n     \n     /**", "timestamp": 1213615714, "metainfo": ""}