{"sha": "cc84446ec3625d53c2c52934ef243cebe19d9fd6", "log": "improved sanity checks at integration start  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java\n     switchesHandler.add(function, maxCheckInterval, convergence);\n   }\n \n+  /** Perform some sanity checks on the integration parameters.\n+   * @param equations differential equations set\n+   * @param t0 start time\n+   * @param y0 state vector at t0\n+   * @param t target time for the integration\n+   * @param y placeholder where to put the state vector\n+   * @exception IntegratorException if some inconsistency is detected\n+   */\n+  protected void sanityChecks(FirstOrderDifferentialEquations equations,\n+                              double t0, double[] y0, double t, double[] y)\n+    throws IntegratorException {\n+      if (equations.getDimension() != y0.length) {\n+          throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\"\n+                                        + \" initial state vector has dimension {1}\",\n+                                        new String[] {\n+                                          Integer.toString(equations.getDimension()),\n+                                          Integer.toString(y0.length)\n+                                        });\n+      }\n+      if (equations.getDimension() != y.length) {\n+          throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\"\n+                                        + \" final state vector has dimension {1}\",\n+                                        new String[] {\n+                                          Integer.toString(equations.getDimension()),\n+                                          Integer.toString(y.length)\n+                                        });\n+      }\n+      if ((vecAbsoluteTolerance != null) && (vecAbsoluteTolerance.length != y0.length)) {\n+          throw new IntegratorException(\"dimensions mismatch: state vector has dimension {0},\"\n+                                        + \" absolute tolerance vector has dimension {1}\",\n+                                        new String[] {\n+                                          Integer.toString(y0.length),\n+                                          Integer.toString(vecAbsoluteTolerance.length)\n+                                        });\n+      }\n+      if ((vecRelativeTolerance != null) && (vecRelativeTolerance.length != y0.length)) {\n+          throw new IntegratorException(\"dimensions mismatch: state vector has dimension {0},\"\n+                                        + \" relative tolerance vector has dimension {1}\",\n+                                        new String[] {\n+                                          Integer.toString(y0.length),\n+                                          Integer.toString(vecRelativeTolerance.length)\n+                                        });\n+      }\n+      if (Math.abs(t - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs(t))) {\n+        throw new IntegratorException(\"too small integration interval: length = {0}\",\n+                                      new String[] {\n+                                        Double.toString(Math.abs(t - t0))\n+                                      });\n+      }\n+      \n+  }\n+\n   /** Initialize the integration step.\n    * @param equations differential equations set\n    * @param forward forward integration indicator\n--- a/src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java\n                         double t0, double[] y0, double t, double[] y)\n   throws DerivativeException, IntegratorException {\n \n-    // sanity check\n-    if (equations.getDimension() != y0.length) {\n-      throw new IntegratorException(\"dimensions mismatch: \"\n-                                    + \"ODE problem has dimension {0}\"\n-                                    + \", state vector has dimension {1}\",\n-                                    new String[] {\n-                                      Integer.toString(equations.getDimension()),\n-                                      Integer.toString(y0.length)\n-                                    });\n-    }\n-    if (Math.abs(t - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs(t))) {\n-      throw new IntegratorException(\"too small integration interval: length = {0}\",\n-                                    new String[] {\n-                                      Double.toString(Math.abs(t - t0))\n-                                    });\n-    }\n-\n+    sanityChecks(equations, t0, y0, t, y);\n     boolean forward = (t > t0);\n \n     // create some internal working arrays\n--- a/src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java\n                         double t, double[] y)\n   throws DerivativeException, IntegratorException {\n \n-    // sanity check\n-    if (equations.getDimension() != y0.length) {\n-      throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\"\n-                                    + \" state vector has dimension {1}\",\n-                                    new String[] {\n-                                      Integer.toString(equations.getDimension()),\n-                                      Integer.toString(y0.length)\n-                                    });\n-    }\n-    if (Math.abs(t - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs(t))) {\n-      throw new IntegratorException(\"too small integration interval: length = {0}\",\n-                                    new String[] {\n-                                      Double.toString(Math.abs(t - t0))\n-                                    });\n-    }\n-    \n+    sanityChecks(equations, t0, y0, t, y);\n     boolean forward = (t > t0);\n \n     // create some internal working arrays\n--- a/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java\n     switchesHandler.add(function, maxCheckInterval, convergence);\n   }\n \n-  public void integrate(FirstOrderDifferentialEquations equations,\n-                        double t0, double[] y0,\n-                        double t, double[] y)\n-  throws DerivativeException, IntegratorException {\n-\n-    // sanity check\n+  /** Perform some sanity checks on the integration parameters.\n+   * @param equations differential equations set\n+   * @param t0 start time\n+   * @param y0 state vector at t0\n+   * @param t target time for the integration\n+   * @param y placeholder where to put the state vector\n+   * @exception IntegratorException if some inconsistency is detected\n+   */\n+  private void sanityChecks(FirstOrderDifferentialEquations equations,\n+                            double t0, double[] y0, double t, double[] y)\n+    throws IntegratorException {\n     if (equations.getDimension() != y0.length) {\n       throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\"\n-                                    + \" state vector has dimension {1}\",\n+                                    + \" initial state vector has dimension {1}\",\n                                     new String[] {\n                                       Integer.toString(equations.getDimension()),\n                                       Integer.toString(y0.length)\n                                     });\n     }\n+    if (equations.getDimension() != y.length) {\n+        throw new IntegratorException(\"dimensions mismatch: ODE problem has dimension {0},\"\n+                                      + \" final state vector has dimension {1}\",\n+                                      new String[] {\n+                                        Integer.toString(equations.getDimension()),\n+                                        Integer.toString(y.length)\n+                                      });\n+      }\n     if (Math.abs(t - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs(t))) {\n       throw new IntegratorException(\"too small integration interval: length = {0}\",\n                                     new String[] {\n                                       Double.toString(Math.abs(t - t0))\n                                     });\n-    }\n-    \n+    }      \n+  }\n+\n+  public void integrate(FirstOrderDifferentialEquations equations,\n+                        double t0, double[] y0,\n+                        double t, double[] y)\n+  throws DerivativeException, IntegratorException {\n+\n+    sanityChecks(equations, t0, y0, t, y);\n     boolean forward = (t > t0);\n \n     // create some internal working arrays", "timestamp": 1189456933, "metainfo": ""}