{"sha": "33df774ca5c3db48af37a9a1c0e2620f082662d4", "log": "Added abs to DerivativeStructure.  We handle +0.0/-0.0 correctly, i.e. we flip derivatives sign when value is negative zero.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n         return ds;\n     }\n \n+    /** absolute value.\n+     * @return abs(this)\n+     */\n+    public DerivativeStructure abs() {\n+        if (Double.doubleToLongBits(data[0]) < 0) {\n+            // we use the bits representation to also handle -0.0\n+            return negate();\n+        } else {\n+            return this;\n+        }\n+    }\n+\n     /** {@inheritDoc} */\n     public DerivativeStructure reciprocal() {\n         final DerivativeStructure result = new DerivativeStructure(compiler);\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n     }\n \n     @Test\n+    public void testAbs() {\n+\n+        DerivativeStructure minusOne = new DerivativeStructure(1, 1, 0, -1.0);\n+        Assert.assertEquals(+1.0, minusOne.abs().getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(-1.0, minusOne.abs().getPartialDerivative(1), 1.0e-15);\n+\n+        DerivativeStructure plusOne = new DerivativeStructure(1, 1, 0, +1.0);\n+        Assert.assertEquals(+1.0, plusOne.abs().getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(+1.0, plusOne.abs().getPartialDerivative(1), 1.0e-15);\n+\n+        DerivativeStructure minusZero = new DerivativeStructure(1, 1, 0, -0.0);\n+        Assert.assertEquals(+0.0, minusZero.abs().getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(-1.0, minusZero.abs().getPartialDerivative(1), 1.0e-15);\n+\n+        DerivativeStructure plusZero = new DerivativeStructure(1, 1, 0, +0.0);\n+        Assert.assertEquals(+0.0, plusZero.abs().getPartialDerivative(0), 1.0e-15);\n+        Assert.assertEquals(+1.0, plusZero.abs().getPartialDerivative(1), 1.0e-15);\n+\n+    }\n+\n+    @Test\n     public void testField() {\n         for (int maxOrder = 1; maxOrder < 5; ++maxOrder) {\n             DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0);", "timestamp": 1345111576, "metainfo": ""}