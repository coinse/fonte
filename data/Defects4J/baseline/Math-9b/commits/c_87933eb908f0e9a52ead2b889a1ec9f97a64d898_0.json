{"sha": "87933eb908f0e9a52ead2b889a1ec9f97a64d898", "log": "MATH-396   ", "commit": "\n--- a/src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java\n     public void testSumSinc() throws MathException {\n         final MultivariateRealFunction func = new SumSincFunction(-1);\n \n-        int dim = 1;\n+        int dim = 10;\n         final double[] minPoint = new double[dim];\n         for (int i = 0; i < dim; i++) {\n             minPoint[i] = 0;\n         for (int i = 0; i < dim; i++) {\n             init[i] = minPoint[i];\n         }\n-        doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-15, 1e-8);\n+        doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-9, 1e-7);\n \n         // Initial is far from minimum.\n         for (int i = 0; i < dim; i++) {\n-            init[i] = minPoint[i] + 4;\n+            init[i] = minPoint[i] + 3;\n         }\n-        doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-15, 1e-8);\n+        doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-9, 1e-7);\n     }\n \n     @Test\n         for (int i = 0; i < dim; i++) {\n             init[i] = minPoint[i];\n         }\n-        doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-15, 1e-8);\n+        doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-9, 1e-8);\n \n         // Initial is far from minimum.\n         for (int i = 0; i < dim; i++) {\n             init[i] = minPoint[i] - 20;\n         }\n-        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-15, 1e-8);\n+        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8);\n     }\n \n     @Test\n         for (int i = 0; i < dim; i++) {\n             init[i] = maxPoint[i];\n         }\n-        doTest(func, maxPoint, init,  GoalType.MAXIMIZE, 1e-15, 1e-8);\n+        doTest(func, maxPoint, init,  GoalType.MAXIMIZE, 1e-9, 1e-8);\n \n         // Initial is far from minimum.\n         for (int i = 0; i < dim; i++) {\n             init[i] = maxPoint[i] - 20;\n         }\n-        doTest(func, maxPoint, init, GoalType.MAXIMIZE, 1e-15, 1e-8);\n+        doTest(func, maxPoint, init, GoalType.MAXIMIZE, 1e-9, 1e-8);\n     }\n \n     /**\n                         double pointTol)\n         throws MathException {\n         final MultivariateRealOptimizer optim = new PowellOptimizer();\n-        final double relTol = 1e-10;\n         optim.setConvergenceChecker(new SimpleScalarValueChecker(objTol, -1));\n \n         final RealPointValuePair result = optim.optimize(func, goal, init);\n         final double[] found = result.getPoint();\n+\n+        System.out.println(\"Function value at initial guess: \" + func.value(init));\n+        System.out.println(\"Function value at optimum: \" + result.getValue());\n+        System.out.println(\"Iterations: \" + optim.getIterations());\n+        System.out.println(\"Function evaluations: \" + optim.getEvaluations());\n+        System.out.println(Arrays.toString(found));\n \n         for (int i = 0, dim = optimum.length; i < dim; i++) {\n             Assert.assertEquals(optimum[i], found[i], pointTol);", "timestamp": 1280321328, "metainfo": ""}