{"sha": "2d8411d7165f92fa0d71a5a01e241198c6d6b58b", "log": "Added a test.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java\n+++ b/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java\n package org.apache.commons.math3.optimization.univariate;\n \n \n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.analysis.QuinticFunction;\n import org.apache.commons.math3.analysis.SinFunction;\n         } catch (TooManyEvaluationsException fee) {\n             // expected\n         }\n+    }\n+\n+    @Test\n+    public void testBoundaries() {\n+        final double lower = -1.0;\n+        final double upper = +1.0;\n+        UnivariateFunction f = new UnivariateFunction() {            \n+            public double value(double x) {\n+                if (x < lower) {\n+                    throw new NumberIsTooSmallException(x, lower, true);\n+                } else if (x > upper) {\n+                    throw new NumberIsTooLargeException(x, upper, true);\n+                } else {\n+                    return x;\n+                }\n+            }\n+        };\n+        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);\n+        Assert.assertEquals(lower,\n+                            optimizer.optimize(100, f, GoalType.MINIMIZE, lower, upper).getPoint(),\n+                            1.0e-8);\n+        Assert.assertEquals(upper,\n+                            optimizer.optimize(100, f, GoalType.MAXIMIZE, lower, upper).getPoint(),\n+                            1.0e-8);\n     }\n \n     @Test", "timestamp": 1330440986, "metainfo": ""}