{"sha": "ce8aff1a7c90e91c207fe0d99732958d3f765365", "log": "simplified arrays allocation and copying  ", "commit": "\n--- a/src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n  */\n \n package org.apache.commons.math.ode.nonstiff;\n+\n+import java.util.Arrays;\n \n import org.apache.commons.math.ode.DerivativeException;\n import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n     if (y != y0) {\n       System.arraycopy(y0, 0, y, 0, y0.length);\n     }\n-    final double[][] yDotK = new double[stages][];\n-    for (int i = 0; i < stages; ++i) {\n-      yDotK [i] = new double[y0.length];\n-    }\n+    final double[][] yDotK = new double[stages][y0.length];\n     final double[] yTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n             scale = vecAbsoluteTolerance;\n           } else {\n             scale = new double[y0.length];\n-            for (int i = 0; i < scale.length; ++i) {\n-              scale[i] = scalAbsoluteTolerance;\n-            }\n+            Arrays.fill(scale, scalAbsoluteTolerance);\n           }\n           hNew = initializeStep(equations, forward, getOrder(), scale,\n                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);", "timestamp": 1245521356, "metainfo": ""}