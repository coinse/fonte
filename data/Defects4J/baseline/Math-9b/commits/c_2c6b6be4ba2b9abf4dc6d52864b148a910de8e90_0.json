{"sha": "2c6b6be4ba2b9abf4dc6d52864b148a910de8e90", "log": "detect numerical problems in Q.R decomposition for Levenberg-Marquardt estimator and report them appropriately JIRA: MATH-199  ", "commit": "\n--- a/src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java\n    * are performed in non-increasing columns norms order thanks to columns\n    * pivoting. The diagonal elements of the R matrix are therefore also in\n    * non-increasing absolute values order.</p>\n-   */\n-  private void qrDecomposition() {\n+   * @exception EstimationException if the decomposition cannot be performed\n+   */\n+  private void qrDecomposition() throws EstimationException {\n \n     // initializations\n     for (int k = 0; k < cols; ++k) {\n           double aki = jacobian[index];\n           norm2 += aki * aki;\n         }\n+        if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n+            throw new EstimationException(\"unable to perform Q.R decomposition on the {0}x{1} jacobian matrix\",\n+                                          new Object[] { new Integer(rows), new Integer(cols) });\n+        }\n         if (norm2 > ak2) {\n           nextColumn = i;\n           ak2        = norm2;\n--- a/src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java\n+++ b/src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.Locale;\n import java.util.Set;\n \n import org.apache.commons.math.estimation.EstimatedParameter;\n     assertEquals( 0.20750021499570379,  circle.getY(),      1.0e-8);\n   }\n \n+  public void testMath199() {\n+      try {\n+          QuadraticProblem problem = new QuadraticProblem();\n+          problem.addPoint (0, -3.182591015485607, 0.0);\n+          problem.addPoint (1, -2.5581184967730577, 4.4E-323);\n+          problem.addPoint (2, -2.1488478161387325, 1.0);\n+          problem.addPoint (3, -1.9122489313410047, 4.4E-323);\n+          problem.addPoint (4, 1.7785661310051026, 0.0);\n+          new LevenbergMarquardtEstimator().estimate(problem);\n+          fail(\"an exception should have been thrown\");\n+      } catch (EstimationException ee) {\n+          // expected behavior\n+      }\n+\n+  }\n+\n   private static class LinearProblem implements EstimationProblem {\n \n     public LinearProblem(LinearMeasurement[] measurements) {\n     private ArrayList points;\n \n   }\n+  public class QuadraticProblem extends SimpleEstimationProblem {\n+\n+      private EstimatedParameter a;\n+      private EstimatedParameter b;\n+      private EstimatedParameter c;\n+\n+      public QuadraticProblem() {\n+          a = new EstimatedParameter(\"a\", 0.0);\n+          b = new EstimatedParameter(\"b\", 0.0);\n+          c = new EstimatedParameter(\"c\", 0.0);\n+          addParameter(a);\n+          addParameter(b);\n+          addParameter(c);\n+      }\n+\n+      public void addPoint(double x, double y, double w) {\n+          addMeasurement(new LocalMeasurement(x, y, w));\n+      }\n+\n+      public double getA() {\n+          return a.getEstimate();\n+      }\n+\n+      public double getB() {\n+          return b.getEstimate();\n+      }\n+\n+      public double getC() {\n+          return c.getEstimate();\n+      }\n+\n+      public double theoreticalValue(double x) {\n+          return ( (a.getEstimate() * x + b.getEstimate() ) * x + c.getEstimate());\n+      }\n+\n+      private double partial(double x, EstimatedParameter parameter) {\n+          if (parameter == a) {\n+              return x * x;\n+          } else if (parameter == b) {\n+              return x;\n+          } else {\n+              return 1.0;\n+          }\n+      }\n+\n+      private class LocalMeasurement extends WeightedMeasurement {\n+\n+         private final double x;\n+\n+          // constructor\n+          public LocalMeasurement(double x, double y, double w) {\n+              super(w, y);\n+              this.x = x;\n+          }\n+\n+          public double getTheoreticalValue() {\n+              return theoreticalValue(x);\n+          }\n+\n+          public double getPartial(EstimatedParameter parameter) {\n+              return partial(x, parameter);\n+          }\n+\n+      }\n+  }\n \n   public static Test suite() {\n     return new TestSuite(LevenbergMarquardtEstimatorTest.class);", "timestamp": 1206279363, "metainfo": ""}