{"sha": "07d2637d8d8f4eb5e3a531178fb5188f4cfd0391", "log": "Corrected javadoc, minor improvment to computation.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java\n import org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;\n \n /**\n- * @version $Revision: 1.17 $ $Date: 2004/03/04 04:25:09 $\n+ * Computes Skewness.\n+ * <p>\n+ * We use the following formula to define skewness:\n+ *  <p>\n+ *  skewness = [n / (n -1) (n - 2)] sum[(x_i - mean)^3] / std^3\n+ *  <p>\n+ *  where n is the number of values, mean is the {@link Mean} and std is the {@link StandardDeviation}\n+ * \n+ * @version $Revision: 1.18 $ $Date: 2004/03/20 23:55:19 $\n  */\n public class Skewness extends AbstractStorelessUnivariateStatistic implements Serializable {\n \n     }\n \n     /**\n-     * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()\n+     * Returns the value of the statistic based on the values that have been added.\n+     * <p>\n+     * See {@link Skewness} for the definition used in the computation.\n      */\n     public double getResult() {\n         if (n < moment.n) {\n     Mean mean = new Mean();\n \n     /**\n-     * Returns the skewness of a collection of values.  Skewness is a\n-     * measure of the assymetry of a given distribution.\n-     * This algorithm uses a corrected two pass algorithm of the following\n-     * <a href=\"http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf\">\n-     * corrected two pass formula (14.1.8)</a>, and also referenced in\n+     * Returns the Skewness of the values array.\n      * <p>\n-     * \"Algorithms for Computing the Sample Variance: Analysis and\n-     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J.\n-     * 1983, American Statistician, vol. 37, pp. 242?247.\n-     * </p>\n+     * See {@link Skewness} for the definition used in the computation.\n+     * \n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length the number of elements to include\n                     accum += Math.pow((values[i] - m), 2.0);\n                     accum2 += (values[i] - m);\n                 }\n-                double stdDev =\n-                    Math.sqrt(\n-                        (accum - (Math.pow(accum2, 2) / ((double) length))) /\n-                            (double) (length - 1));\n+                double stdDev = Math.sqrt((accum - (Math.pow(accum2, 2) / ((double) length))) /\n+                        (double) (length - 1));\n \n-                // Calculate the skew as the sum the cubes of the distance\n-                // from the mean divided by the standard deviation.\n                 double accum3 = 0.0;\n                 for (int i = begin; i < begin + length; i++) {\n-                    accum3 += Math.pow((values[i] - m) / stdDev, 3.0);\n+                    accum3 += Math.pow(values[i] - m, 3.0d);\n                 }\n+                accum3 /= Math.pow(stdDev, 3.0d);\n \n                 // Get N\n                 double n0 = length;", "timestamp": 1079826919, "metainfo": ""}