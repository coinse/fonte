{"sha": "5dcca48038fb6274cc155251d09db12746ccce71", "log": "MATH-482 FastMath.max(50.0f, -50.0f) => -50.0f; should be +50.0f  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n      * @return b if a is lesser or equal to b, a otherwise\n      */\n     public static float max(final float a, final float b) {\n-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n+        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);\n     }\n \n     /** Compute the maximum of two values\n--- a/src/test/java/org/apache/commons/math/util/FastMathTest.java\n+++ b/src/test/java/org/apache/commons/math/util/FastMathTest.java\n \n     @Test\n     public void testMinMaxFloat() {\n-        double[][] pairs = {\n-            { -50.0, 50.0 },\n-            {  Float.POSITIVE_INFINITY, 1.0 },\n-            {  Float.NEGATIVE_INFINITY, 1.0 },\n-            {  Float.NaN, 1.0 },\n-            {  Float.POSITIVE_INFINITY, 0.0 },\n-            {  Float.NEGATIVE_INFINITY, 0.0 },\n-            {  Float.NaN, 0.0 },\n+        float[][] pairs = {\n+            { -50.0f, 50.0f },\n+            {  Float.POSITIVE_INFINITY, 1.0f },\n+            {  Float.NEGATIVE_INFINITY, 1.0f },\n+            {  Float.NaN, 1.0f },\n+            {  Float.POSITIVE_INFINITY, 0.0f },\n+            {  Float.NEGATIVE_INFINITY, 0.0f },\n+            {  Float.NaN, 0.0f },\n             {  Float.NaN, Float.NEGATIVE_INFINITY },\n             {  Float.NaN, Float.POSITIVE_INFINITY }\n         };\n-        for (double[] pair : pairs) {\n+        for (float[] pair : pairs) {\n             Assert.assertEquals(\"min(\" + pair[0] + \", \" + pair[1] + \")\",\n                                 Math.min(pair[0], pair[1]),\n                                 FastMath.min(pair[0], pair[1]),", "timestamp": 1295294101, "metainfo": ""}