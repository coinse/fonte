{"sha": "14b3a111d0e055384d762395770f2240eb1f271a", "log": "Added Javadoc to the ComplexFormat class   ", "commit": "\n--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java\n \n import java.text.NumberFormat;\n \n-// @TODO Maybe, eventually at least, this should work with NumberFormat\n-//       but in the mean time.  This scratches an itch\n+/**\n+ * Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".  'i' can\n+ * be replaced with 'j', and the number of decimal places to display \n+ * can be configured.\n+ *\n+ * @author Apache Software Foundation\n+ * @version $Revision: 1.3 $\n+ */\n public class ComplexFormat {\n \n \tprivate static final ComplexFormat DEFAULT = new ComplexFormat();\n \n \t// @TODO This class only allows for max fraction digits, we might want to allow other parameters\n+    private String imaginaryCharacter = \"i\";\n \n-    private String imaginaryCharacter = \"i\";\n     private int fractionDigits = 2;\n \n+    /**\n+     * Create an instance with the default imaginary character 'i', and the default\n+     * number of decimal places - 2.\n+     */\n     public ComplexFormat() {}\n \n+    /**\n+     * Create an instance with a custom imaginary character, and the default number\n+     * of decimal places - 2.\n+     */\n     public ComplexFormat(String imaginaryCharacter) {\n         this.imaginaryCharacter = imaginaryCharacter;\n     }\n \n+    /**\n+     * Create an instance with a custom imaginary character, and a custom number of\n+     * decimal places.\n+     */\n     public ComplexFormat(String imaginaryCharacter, int fractionDigits) {\n         this.imaginaryCharacter = imaginaryCharacter;\n         this.fractionDigits = fractionDigits;\n     }\n \n-\t// @TODO Javadoc for this format method\n+    /**\n+     * Formats a Complex object and returns a String representing the \"cartesian\n+     * form\" of a complex number.\n+     *\n+     * @param c Complex object to format\n+     * @return A formatted number in the form \"Re(c) + Im(c)i\"\n+     */\n     public String format(Complex c) {\n \n \t\t// @TODO What happens when either a real or imaginary is NaN, INIFINITY, etc?\n \n     }\n     \n+    /**\n+     * This static method calls formatComplex() on a default instance of\n+     * ComplexFormat.\n+     *\n+     * @param c Complex object to format\n+     * @return A formatted number in the form \"Re(c) + Im(c)i\"\n+     */\n     public static String formatComplex( Complex c ) {\n     \treturn DEFAULT.format( c );\n     }", "timestamp": 1078083639, "metainfo": ""}