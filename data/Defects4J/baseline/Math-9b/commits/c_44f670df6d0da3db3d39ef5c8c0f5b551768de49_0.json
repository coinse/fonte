{"sha": "44f670df6d0da3db3d39ef5c8c0f5b551768de49", "log": "MATH-887 Removed usage of \"protected\" fields \"cols\" and \"rows\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java\n         }\n \n         final double[] currentPoint = getStartPoint();\n+        final int nC = currentPoint.length;\n \n         // iterate until convergence is reached\n         PointVectorValuePair current = null;\n             current = new PointVectorValuePair(currentPoint, currentObjective);\n \n             // build the linear problem\n-            final double[]   b = new double[cols];\n-            final double[][] a = new double[cols][cols];\n-            for (int i = 0; i < rows; ++i) {\n+            final double[]   b = new double[nC];\n+            final double[][] a = new double[nC][nC];\n+            for (int i = 0; i < nR; ++i) {\n \n                 final double[] grad   = weightedJacobian.getRow(i);\n                 final double weight   = residualsWeights[i];\n \n                 // compute the normal equation\n                 final double wr = weight * residual;\n-                for (int j = 0; j < cols; ++j) {\n+                for (int j = 0; j < nC; ++j) {\n                     b[j] += wr * grad[j];\n                 }\n \n                 // build the contribution matrix for measurement i\n-                for (int k = 0; k < cols; ++k) {\n+                for (int k = 0; k < nC; ++k) {\n                     double[] ak = a[k];\n                     double wgk = weight * grad[k];\n-                    for (int l = 0; l < cols; ++l) {\n+                    for (int l = 0; l < nC; ++l) {\n                         ak[l] += wgk * grad[l];\n                     }\n                 }\n                         new QRDecomposition(mA).getSolver();\n                 final double[] dX = solver.solve(new ArrayRealVector(b, false)).toArray();\n                 // update the estimated parameters\n-                for (int i = 0; i < cols; ++i) {\n+                for (int i = 0; i < nC; ++i) {\n                     currentPoint[i] += dX[i];\n                 }\n             } catch (SingularMatrixException e) {", "timestamp": 1352476136, "metainfo": ""}