{"sha": "3d57e118e0e3bf40e2f70ef8ff91f19608662331", "log": "Added new tests.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java\n import java.util.HashMap;\n import java.util.Map;\n \n+import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.util.ArithmeticUtils;\n import org.junit.Assert;\n import org.junit.Test;\n         checkIndices(c.getPartialDerivativeOrders(3), 0, 0, 1, 0);\n         checkIndices(c.getPartialDerivativeOrders(4), 0, 0, 0, 1);\n \n+    }\n+\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testIncompatbileParams() {\n+        DSCompiler.getCompiler(3, 2).checkCompatibility(DSCompiler.getCompiler(4, 2));\n+    }\n+\n+    @Test(expected=DimensionMismatchException.class)\n+    public void testIncompatbileOrder() {\n+        DSCompiler.getCompiler(3, 3).checkCompatibility(DSCompiler.getCompiler(3, 2));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java\n                                                     -2, dsZ,\n                                                     1, new DerivativeStructure(8, dsZ.multiply(dsX),\n                                                                                -1, dsY).pow(3));\n+                    DerivativeStructure dsOther =\n+                            new DerivativeStructure(1, dsX,\n+                                                    5, dsX.multiply(dsY),\n+                                                    -2, dsZ).add(new DerivativeStructure(8, dsZ.multiply(dsX),\n+                                                                                         -1, dsY).pow(3));\n                     double f = x + 5 * x * y - 2 * z + FastMath.pow(8 * z * x - y, 3);\n                     Assert.assertEquals(f, ds.getValue(),\n+                                        FastMath.abs(epsilon * f));\n+                    Assert.assertEquals(f, dsOther.getValue(),\n                                         FastMath.abs(epsilon * f));\n \n                     // df/dx = 1 + 5 y + 24 (8 z x - y)^2 z\n                     double dfdx = 1 + 5 * y + 24 * z * FastMath.pow(8 * z * x - y, 2);\n                     Assert.assertEquals(dfdx, ds.getPartialDerivative(1, 0, 0),\n                                         FastMath.abs(epsilon * dfdx));\n+                    Assert.assertEquals(dfdx, dsOther.getPartialDerivative(1, 0, 0),\n+                                        FastMath.abs(epsilon * dfdx));\n \n                     // df/dxdy = 5 + 48 z*(y - 8 z x)\n                     double dfdxdy = 5 + 48 * z * (y - 8 * z * x);\n                     Assert.assertEquals(dfdxdy, ds.getPartialDerivative(1, 1, 0),\n                                         FastMath.abs(epsilon * dfdxdy));\n+                    Assert.assertEquals(dfdxdy, dsOther.getPartialDerivative(1, 1, 0),\n+                                        FastMath.abs(epsilon * dfdxdy));\n \n                     // df/dxdydz = 48 (y - 16 z x)\n                     double dfdxdydz = 48 * (y - 16 * z * x);\n                     Assert.assertEquals(dfdxdydz, ds.getPartialDerivative(1, 1, 1),\n+                                        FastMath.abs(epsilon * dfdxdydz));\n+                    Assert.assertEquals(dfdxdydz, dsOther.getPartialDerivative(1, 1, 1),\n                                         FastMath.abs(epsilon * dfdxdydz));\n \n                 }\n     }\n \n     @Test\n+    public void testPrimitiveRemainder() {\n+        double epsilon = 1.0e-15;\n+        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n+            for (double x = -1.7; x < 2; x += 0.2) {\n+                DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x);\n+                for (double y = -1.7; y < 2; y += 0.2) {\n+                    DerivativeStructure remainder = dsX.remainder(y);\n+                    DerivativeStructure ref = dsX.subtract(x - (x % y));\n+                    DerivativeStructure zero = remainder.subtract(ref);\n+                    for (int n = 0; n <= maxOrder; ++n) {\n+                        for (int m = 0; m <= maxOrder; ++m) {\n+                            if (n + m <= maxOrder) {\n+                                Assert.assertEquals(0, zero.getPartialDerivative(n, m), epsilon);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testRemainder() {\n+        double epsilon = 1.0e-15;\n+        for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n+            for (double x = -1.7; x < 2; x += 0.2) {\n+                DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x);\n+                for (double y = -1.7; y < 2; y += 0.2) {\n+                    DerivativeStructure dsY = new DerivativeStructure(2, maxOrder, 1, y);\n+                    DerivativeStructure remainder = dsX.remainder(dsY);\n+                    DerivativeStructure ref = dsX.subtract(dsY.multiply((x - (x % y)) / y));\n+                    DerivativeStructure zero = remainder.subtract(ref);\n+                    for (int n = 0; n <= maxOrder; ++n) {\n+                        for (int m = 0; m <= maxOrder; ++m) {\n+                            if (n + m <= maxOrder) {\n+                                Assert.assertEquals(0, zero.getPartialDerivative(n, m), epsilon);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n     public void testExp() {\n         double[] epsilon = new double[] { 1.0e-16, 1.0e-16, 1.0e-16, 1.0e-16, 1.0e-16 };\n         for (int maxOrder = 0; maxOrder < 5; ++maxOrder) {\n--- a/src/test/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiatorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiatorTest.java\n             DerivativeStructure dsX  = new DerivativeStructure(1, maxError.length - 1, 0, x);\n             DerivativeStructure yRef = gaussian.value(dsX);\n             DerivativeStructure y    = f.value(dsX);\n+            Assert.assertEquals(f.value(dsX.getValue()), f.value(dsX).getValue(), 1.0e-15);\n             for (int order = 0; order <= yRef.getOrder(); ++order) {\n                 maxError[order] = FastMath.max(maxError[order],\n                                         FastMath.abs(yRef.getPartialDerivative(order) -\n         });\n \n         for (double x = -10; x < 10; x += 0.1) {\n-            DerivativeStructure[] y = f.value(new DerivativeStructure(1, 2, 0, x));\n+            DerivativeStructure dsX = new DerivativeStructure(1, 2, 0, x);\n+            DerivativeStructure[] y = f.value(dsX);\n             double cos = FastMath.cos(x);\n             double sin = FastMath.sin(x);\n+            double[] f1 = f.value(dsX.getValue());\n+            DerivativeStructure[] f2 = f.value(dsX);\n+            Assert.assertEquals(f1.length, f2.length);\n+            for (int i = 0; i < f1.length; ++i) {\n+                Assert.assertEquals(f1[i], f2[i].getValue(), 1.0e-15);\n+            }\n             Assert.assertEquals( cos, y[0].getValue(), 7.0e-16);\n             Assert.assertEquals( sin, y[1].getValue(), 7.0e-16);\n             Assert.assertEquals(-sin, y[0].getPartialDerivative(1), 6.0e-14);\n         });\n \n         for (double x = -1; x < 1; x += 0.02) {\n-            DerivativeStructure[][] y = f.value(new DerivativeStructure(1, 2, 0, x));\n+            DerivativeStructure dsX = new DerivativeStructure(1, 2, 0, x);\n+            DerivativeStructure[][] y = f.value(dsX);\n             double cos = FastMath.cos(x);\n             double sin = FastMath.sin(x);\n             double cosh = FastMath.cosh(x);\n             double sinh = FastMath.sinh(x);\n+            double[][] f1 = f.value(dsX.getValue());\n+            DerivativeStructure[][] f2 = f.value(dsX);\n+            Assert.assertEquals(f1.length, f2.length);\n+            for (int i = 0; i < f1.length; ++i) {\n+                Assert.assertEquals(f1[i].length, f2[i].length);\n+                for (int j = 0; j < f1[i].length; ++j) {\n+                    Assert.assertEquals(f1[i][j], f2[i][j].getValue(), 1.0e-15);\n+                }\n+            }\n             Assert.assertEquals(cos,   y[0][0].getValue(), 7.0e-18);\n             Assert.assertEquals(sin,   y[0][1].getValue(), 6.0e-17);\n             Assert.assertEquals(cosh,  y[1][0].getValue(), 3.0e-16);", "timestamp": 1355951420, "metainfo": ""}