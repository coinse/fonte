{"sha": "58c073d66c48d0f3d91ac41d5fe887011724c42f", "log": "Changed MathUtils.round(double,int,int) to propagate rather than wrap runtime exceptions.  Instead of MathRuntimeException, this method now throws IllegalArgumentException or ArithmeticException under the conditions specified in the javadoc. JIRA: MATH-555     ", "commit": "\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n import org.apache.commons.math.exception.NotPositiveException;\n import org.apache.commons.math.exception.MathArithmeticException;\n import org.apache.commons.math.exception.MathIllegalArgumentException;\n-import org.apache.commons.math.exception.MathRuntimeException;\n import org.apache.commons.math.exception.NumberIsTooLargeException;\n import org.apache.commons.math.exception.NotFiniteNumberException;\n \n     }\n \n     /**\n-     * Round the given value to the specified number of decimal places. The\n+     * <p>Round the given value to the specified number of decimal places. The\n      * value is rounded using the given method which is any method defined in\n-     * {@link BigDecimal}.\n+     * {@link BigDecimal}.</p>\n+     *\n+     * <p>If {@code x} is infinite or NaN, then the value of {@code x} is\n+     * returned unchanged, regardless of the other parameters.</p>\n      *\n      * @param x the value to round.\n      * @param scale the number of digits to the right of the decimal point.\n      * @param roundingMethod the rounding method as defined in\n      *        {@link BigDecimal}.\n      * @return the rounded value.\n+     * @throws ArithmeticException if roundingMethod==ROUND_UNNECESSARY and the\n+     * specified scaling operation would require rounding.\n+     * @throws IllegalArgumentException if roundingMethod does not represent a\n+     * valid rounding mode.\n      * @since 1.1\n      */\n     public static double round(double x, int scale, int roundingMethod) {\n             } else {\n                 return Double.NaN;\n             }\n-        } catch (RuntimeException ex) {\n-            throw new MathRuntimeException(ex);\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math/util/MathUtilsTest.java\n         try {\n             MathUtils.round(1.234, 2, BigDecimal.ROUND_UNNECESSARY);\n             Assert.fail();\n-        } catch (MathRuntimeException ex) { // XXX Loosing semantics?\n-            // success\n+        } catch (ArithmeticException ex) { \n+            // expected\n         }\n \n         Assert.assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);\n         try {\n             MathUtils.round(1.234, 2, 1923);\n             Assert.fail();\n-        } catch (MathRuntimeException ex) { // XXX Loosing semantics?\n-            // success\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n         }\n \n         // MATH-151", "timestamp": 1301892697, "metainfo": ""}