{"sha": "970afd6c78e783ab98b652c8e81c8e07c22a5e52", "log": "Removed deprecated code.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math/distribution/BetaDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistribution.java\n  */\n package org.apache.commons.math.distribution;\n \n-import org.apache.commons.math.MathException;\n-\n /**\n  * Computes the cumulative, inverse cumulative and density functions for the beta distribuiton.\n  *\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n-public interface BetaDistribution extends ContinuousDistribution, HasDensity<Double> {\n-    /**\n-     * Modify the shape parameter, alpha.\n-     * @param alpha the new shape parameter.\n-     * @deprecated as of 2.1\n-     */\n-    @Deprecated\n-    void setAlpha(double alpha);\n-\n+public interface BetaDistribution extends ContinuousDistribution {\n      /**\n-      * Access the shape parameter, alpha\n+      * Access the alpha shape parameter.\n+      *\n       * @return alpha.\n       */\n      double getAlpha();\n \n      /**\n-      * Modify the shape parameter, beta.\n-      * @param beta the new scale parameter.\n-      * @deprecated as of 2.1\n-      */\n-     @Deprecated\n-     void setBeta(double beta);\n-\n-     /**\n-      * Access the shape parameter, beta\n+      * Access the beta shape parameter.\n+      *\n       * @return beta.\n       */\n      double getBeta();\n \n      /**\n       * Return the probability density for a particular point.\n-      * @param x  The point at which the density should be computed.\n-      * @return  The pdf at point x.\n-      * @exception MathException if probability density cannot be computed\n+      *\n+      * @param x  Point at which the density should be computed.\n+      * @return the pdf at point {@code x}.\n       */\n-     double density(Double x) throws MathException;\n-\n+     double density(double x);\n }\n--- a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java\n package org.apache.commons.math.distribution;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NumberIsTooSmallException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Gamma;\n import org.apache.commons.math.special.Beta;\n \n     /**\n      * Build a new instance.\n-     * @param alpha first shape parameter (must be positive)\n-     * @param beta second shape parameter (must be positive)\n-     * @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates\n-     * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})\n+     *\n+     * @param alpha First shape parameter (must be positive).\n+     * @param beta Second shape parameter (must be positive).\n+     * @param inverseCumAccuracy Maximum absolute error in inverse\n+     * cumulative probability estimates (defaults to\n+     * {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).\n      * @since 2.1\n      */\n     public BetaDistributionImpl(double alpha, double beta, double inverseCumAccuracy) {\n \n     /**\n      * Build a new instance.\n-     * @param alpha first shape parameter (must be positive)\n-     * @param beta second shape parameter (must be positive)\n+     *\n+     * @param alpha First shape parameter (must be positive).\n+     * @param beta Second shape parameter (must be positive).\n      */\n     public BetaDistributionImpl(double alpha, double beta) {\n         this(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n     }\n \n-    /** {@inheritDoc}\n-     * @deprecated as of 2.1 (class will become immutable in 3.0)\n-     */\n-    @Deprecated\n-    public void setAlpha(double alpha) {\n-        this.alpha = alpha;\n-        z = Double.NaN;\n-    }\n-\n     /** {@inheritDoc} */\n     public double getAlpha() {\n         return alpha;\n-    }\n-\n-    /** {@inheritDoc}\n-     * @deprecated as of 2.1 (class will become immutable in 3.0)\n-     */\n-    @Deprecated\n-    public void setBeta(double beta) {\n-        this.beta = beta;\n-        z = Double.NaN;\n     }\n \n     /** {@inheritDoc} */\n     /**\n      * Return the probability density for a particular point.\n      *\n-     * @param x The point at which the density should be computed.\n-     * @return The pdf at point x.\n-     * @deprecated\n-     */\n-    public double density(Double x) {\n-        return density(x.doubleValue());\n-    }\n-\n-    /**\n-     * Return the probability density for a particular point.\n-     *\n-     * @param x The point at which the density should be computed.\n-     * @return The pdf at point x.\n+     * @param x Point at which the density should be computed.\n+     * @return the pdf at point x.\n      * @since 2.1\n      */\n     public double density(double x) {\n             return 0;\n         } else if (x == 0) {\n             if (alpha < 1) {\n-                throw MathRuntimeException.createIllegalArgumentException(\n-                        LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, alpha);\n+                throw new NumberIsTooSmallException(LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, alpha, 1, false);\n             }\n             return 0;\n         } else if (x == 1) {\n             if (beta < 1) {\n-                throw MathRuntimeException.createIllegalArgumentException(\n-                        LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, beta);\n+                throw new NumberIsTooSmallException(LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, beta, 1, false);\n             }\n             return 0;\n         } else {\n      * Return the absolute accuracy setting of the solver used to estimate\n      * inverse cumulative probabilities.\n      *\n-     * @return the solver absolute accuracy\n+     * @return the solver absolute accuracy.\n      * @since 2.1\n      */\n     @Override", "timestamp": 1285588393, "metainfo": ""}