{"sha": "966d2eeef17b0b9bc7c07822be8da337bffedf97", "log": "Fixed non-compilable tests.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java\n     @Override\n     RealTransformer createRealTransformer() {\n         if (standard) {\n-            return FastSineTransformer.create();\n+            return new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n         } else {\n-            return FastSineTransformer.createOrthogonal();\n+            return new FastSineTransformer(DstNormalization.ORTHOGONAL_DST_I);\n         }\n     }\n \n      */\n     @Test\n     public void testAdHocData() {\n-        FastSineTransformer transformer = FastSineTransformer.create();\n+        FastSineTransformer transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n         double result[], tolerance = 1E-12;\n \n         double x[] = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 };\n         }\n \n         TransformUtils.scaleArray(x, FastMath.sqrt(x.length / 2.0));\n-        transformer = FastSineTransformer.createOrthogonal();\n+        transformer = new FastSineTransformer(DstNormalization.ORTHOGONAL_DST_I);\n \n         result = transformer.transform(y, TransformType.FORWARD);\n         for (int i = 0; i < result.length; i++) {\n     @Test\n     public void testSinFunction() {\n         UnivariateFunction f = new SinFunction();\n-        FastSineTransformer transformer = FastSineTransformer.create();\n+        FastSineTransformer transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n         double min, max, result[], tolerance = 1E-12; int N = 1 << 8;\n \n         min = 0.0; max = 2.0 * FastMath.PI;\n     @Test\n     public void testParameters() throws Exception {\n         UnivariateFunction f = new SinFunction();\n-        FastSineTransformer transformer = FastSineTransformer.create();\n+        FastSineTransformer transformer = new FastSineTransformer(DstNormalization.STANDARD_DST_I);\n \n         try {\n             // bad interval", "timestamp": 1329217584, "metainfo": ""}