{"sha": "9ee47dda0576c1fa8fabd7ed5416d84e4f9d4561", "log": "MATH-193.  javadoc and style fixes.  ", "commit": "\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n     }\n     \n     /**\n-     * Create a new BigMatrix using the <code>data</code> as the underlying\n+     * Create a new BigMatrix using <code>d</code> as the underlying\n      * data array.\n      * <p>\n      * The input array is copied, not referenced.</p>\n     }\n     \n     /**\n-     * Create a new BigMatrix using the <code>data</code> as the underlying\n+     * Create a new BigMatrix using <code>d</code> as the underlying\n      * data array.\n      * <p>\n      * The input array is copied, not referenced.</p>\n     \n     /**\n      * Create a new BigMatrix using the values represented by the strings in \n-     * <code>data</code> as the underlying data array.\n+     * <code>d</code> as the underlying data array.\n      *\n      * @param d data for new matrix\n      * @throws IllegalArgumentException if <code>d</code> is not rectangular\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n      * The input array is copied, not referenced.</p>\n      *\n      * @param d data for new matrix\n-     * @throws IllegalArgumentException if <code>data</code> is not rectangular\n+     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n      *  (not all rows have the same length) or empty\n-     * @throws NullPointerException if <code>data</code> is null\n+     * @throws NullPointerException if <code>d</code> is null\n      */\n     public RealMatrixImpl(double[][] d) {\n         this.copyIn(d);\n      *\n      * @param m    matrix to be subtracted\n      * @return     this + m\n-     * @throws  IllegalArgumentException if m is not the same size as *this\n+     * @throws  IllegalArgumentException if m is not the same size as this\n      */\n     public RealMatrix subtract(RealMatrix m) throws IllegalArgumentException {\n         if (this.getColumnDimension() != m.getColumnDimension() ||\n--- a/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n+++ b/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n \n import java.util.ArrayList;\n import java.util.Iterator;\n+import java.util.List;\n import java.io.Serializable;\n \n /**\n   private int index;\n \n   /** Steps table. */\n-  private ArrayList steps;\n+  private List steps;\n \n   /** Serializable version identifier */\n   private static final long serialVersionUID = 2259286184268533249L;\n--- a/src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java\n+++ b/src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java\n \n import java.util.ArrayList;\n import java.util.Iterator;\n+import java.util.List;\n \n /** This class handles several {@link SwitchingFunction switching\n  * functions} during integration.\n   }\n \n   /** Switching functions. */\n-  private ArrayList functions;\n+  private List functions;\n \n   /** First active switching function. */\n   private SwitchState first;\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n     private static final long serialVersionUID = -6773236347582113490L;\n \n     /** List of SummaryStatistics objects characterizing the bins */\n-    private ArrayList binStats = null;\n+    private List binStats = null;\n \n     /** Sample statistics */\n     private SummaryStatistics sampleStats = null;\n     }\n \n     /**\n-     * Returns an ArrayList of {@link SummaryStatistics} instances containing\n-     * statistics describing the values in each of the bins.  The ArrayList is\n+     * Returns a List of {@link SummaryStatistics} instances containing\n+     * statistics describing the values in each of the bins.  The list is\n      * indexed on the bin number.\n      * \n      * @return List of bin statistics.\n--- a/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java\n      * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm\">here.</a>\n      * </p><p>\n      * <strong>Preconditions</strong>:<ul>\n-     * <li><code>0 &lt; p &lt; 100</code> (otherwise an \n+     * <li><code>0 &lt; p &le; 100</code> (otherwise an \n      * <code>IllegalArgumentException</code> is thrown)</li>\n      * <li>at least one value must be stored (returns <code>Double.NaN\n      *     </code> otherwise)</li>\n--- a/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n+++ b/src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java\n         dist2 = (EmpiricalDistribution) TestUtils.serializeAndRecover(empiricalDistribution2);\n         verifySame(empiricalDistribution2, dist2);\n     }\n-    \n+\n+    public void testLoadNullDoubleArray() {\n+        EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n+        try {\n+            dist.load((double[]) null);\n+            fail(\"load((double[]) null) expected RuntimeException\");\n+        }\n+        catch (RuntimeException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testLoadNullURL() throws Exception {\n+        EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n+        try {\n+            dist.load((URL) null);\n+            fail(\"load((URL) null) expected NullPointerException\");\n+        }\n+        catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testLoadNullFile() throws Exception {\n+        EmpiricalDistribution dist = new EmpiricalDistributionImpl();\n+        try {\n+            dist.load((File) null);\n+            fail(\"load((File) null) expected NullPointerException\");\n+        }\n+        catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n     private void verifySame(EmpiricalDistribution d1, EmpiricalDistribution d2) {\n         assertEquals(d1.isLoaded(), d2.isLoaded());\n         assertEquals(d1.getBinCount(), d2.getBinCount());", "timestamp": 1205034860, "metainfo": ""}