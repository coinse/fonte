{"sha": "d53fbcb626be3bf5f4c2315060e56e91471e6dbc", "log": "updated errors prior to Mantissa integration  ", "commit": "\n--- a/src/java/org/apache/commons/math/ConvergenceException.java\n+++ b/src/java/org/apache/commons/math/ConvergenceException.java\n  */\n package org.apache.commons.math;\n \n-import java.io.Serializable;\n-\n /**\n  * Error thrown when a numerical computation can not be performed because the\n  * numerical result failed to converge to a finite value.\n  *\n  * @version $Revision$ $Date$\n  */\n-public class ConvergenceException extends MathException implements Serializable{\n+public class ConvergenceException extends MathException {\n     \n     /** Serializable version identifier */\n-    private static final long serialVersionUID = 7426445244781020663L;\n+    private static final long serialVersionUID = 4380655778005469702L;\n \n     /**\n      * Default constructor.\n     }\n     \n     /**\n-     * Construct an exception with the given message.\n-     * @param message descriptive error message\n-     * @deprecated as of 1.2, replaced by {@link #ConvergenceException(String, Object[])}\n-     */\n-    public ConvergenceException(String message) {\n-        super(message);\n-    }\n-\n-    /**\n      * Constructs an exception with specified formatted detail message.\n      * Message formatting is delegated to {@link java.text.MessageFormat}.\n      * @param pattern format specifier\n      */\n     public ConvergenceException(String pattern, Object[] arguments) {\n         super(pattern, arguments);\n-    }\n-\n-    /**\n-     * Construct an exception with the given message and root cause.\n-     * @param message descriptive error message\n-     * @param cause  the exception or error that caused this exception to be thrown\n-     * @deprecated as of 1.2, replaced by {@link #ConvergenceException(String, Object[], Throwable)}\n-     */\n-    public ConvergenceException(String message, Throwable cause) {\n-        super(message, cause);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/math/FunctionEvaluationException.java\n+++ b/src/java/org/apache/commons/math/FunctionEvaluationException.java\n     }\n \n     /**\n+     * Constructs an exception with specified root cause.\n+     * Message formatting is delegated to {@link java.text.MessageFormat}.\n+     * @param argument  the failing function argument \n+     * @param cause  the exception or error that caused this exception to be thrown\n+     */\n+    public FunctionEvaluationException(double argument, Throwable cause) {\n+        super(cause);\n+        this.argument = argument;\n+    }\n+\n+    /**\n      * Constructs an exception with specified formatted detail message and root cause.\n      * Message formatting is delegated to {@link java.text.MessageFormat}.\n      * @param argument  the failing function argument \n--- a/src/java/org/apache/commons/math/MessagesResources_fr.java\n+++ b/src/java/org/apache/commons/math/MessagesResources_fr.java\n     // org.apache.commons.math.MaxIterationsExceededException\n     { \"Maximal number of iterations ({0}) exceeded\",\n       \"Nombre maximal d''it\\u00e9rations ({0}) d\\u00e9pass\\u00e9\" },\n+\n+    // org.apache.commons.math.DimensionMismatchException\n+    { \"dimension mismatch {0} != {1}\",\n+      \"dimensions incompatibles {0} != {1}\" },\n+\n+    // org.apache.commons.math.random.NotPositiveDefiniteMatrixException\n+    { \"not positive definite matrix\",\n+      \"matrice non d\\u00e9finie positive\" },\n \n     // org.apache.commons.math.fraction.FractionConversionException\n     { \"Unable to convert {0} to fraction after {1} iterations\",", "timestamp": 1172529216, "metainfo": ""}