{"sha": "54d5fb54aa1fb463dc17f2dfbd305dd8ad84335b", "log": "added utilities for differentiable functions  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n \n package org.apache.commons.math3.analysis;\n \n+import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;\n+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;\n import org.apache.commons.math3.analysis.function.Identity;\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n                 }\n                 return r;\n             }\n+        };\n+    }\n+\n+    /**\n+     * Composes functions.\n+     * <br/>\n+     * The functions in the argument list are composed sequentially, in the\n+     * given order.  For example, compose(f1,f2,f3) acts like f1(f2(f3(x))).\n+     *\n+     * @param f List of functions.\n+     * @return the composite function.\n+     * @since 3.1\n+     */\n+    public static UnivariateDifferentiable compose(final UnivariateDifferentiable ... f) {\n+        return new UnivariateDifferentiable() {\n+\n+            /** {@inheritDoc} */\n+            public double value(final double t) {\n+                double r = t;\n+                for (int i = f.length - 1; i >= 0; i--) {\n+                    r = f[i].value(r);\n+                }\n+                return r;\n+            }\n+\n+            /** {@inheritDoc} */\n+            public DerivativeStructure value(final DerivativeStructure t) {\n+                DerivativeStructure r = t;\n+                for (int i = f.length - 1; i >= 0; i--) {\n+                    r = f[i].value(r);\n+                }\n+                return r;\n+            }\n+\n         };\n     }\n \n      *\n      * @param f List of functions.\n      * @return a function that computes the sum of the functions.\n+     * @since 3.1\n+     */\n+    public static UnivariateDifferentiable add(final UnivariateDifferentiable ... f) {\n+        return new UnivariateDifferentiable() {\n+\n+            /** {@inheritDoc} */\n+            public double value(final double t) {\n+                double r = f[0].value(t);\n+                for (int i = 1; i < f.length; i++) {\n+                    r += f[i].value(t);\n+                }\n+                return r;\n+            }\n+\n+            /** {@inheritDoc} */\n+            public DerivativeStructure value(final DerivativeStructure t) {\n+                DerivativeStructure r = f[0].value(t);\n+                for (int i = 1; i < f.length; i++) {\n+                    r = r.add(f[i].value(t));\n+                }\n+                return r;\n+            }\n+\n+        };\n+    }\n+\n+    /**\n+     * Adds functions.\n+     *\n+     * @param f List of functions.\n+     * @return a function that computes the sum of the functions.\n      */\n     public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction ... f) {\n         return new DifferentiableUnivariateFunction() {\n                 }\n                 return r;\n             }\n+        };\n+    }\n+\n+    /**\n+     * Multiplies functions.\n+     *\n+     * @param f List of functions.\n+     * @return a function that computes the product of the functions.\n+     * @since 3.1\n+     */\n+    public static UnivariateDifferentiable multiply(final UnivariateDifferentiable ... f) {\n+        return new UnivariateDifferentiable() {\n+\n+            /** {@inheritDoc} */\n+            public double value(final double t) {\n+                double r = f[0].value(t);\n+                for (int i = 1; i < f.length; i++) {\n+                    r  *= f[i].value(t);\n+                }\n+                return r;\n+            }\n+\n+            /** {@inheritDoc} */\n+            public DerivativeStructure value(final DerivativeStructure t) {\n+                DerivativeStructure r = f[0].value(t);\n+                for (int i = 1; i < f.length; i++) {\n+                    r = r.multiply(f[i].value(t));\n+                }\n+                return r;\n+            }\n+\n         };\n     }\n \n         }\n         return s;\n     }\n+\n+    /** Convert a {@link UnivariateDifferentiable} into a {@link DifferentiableUnivariateFunction}.\n+     * @param f function to convert\n+     * @return converted function\n+     * @deprecated this conversion method is temporary in version 3.1, as the {@link\n+     * DifferentiableUnivariateFunction} interface itself is deprecated\n+     */\n+    @Deprecated\n+    public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiable f) {\n+        return new DifferentiableUnivariateFunction() {\n+\n+            /** {@inheritDoc} */\n+            public double value(final double x) {\n+                return f.value(x);\n+            }\n+\n+            /** {@inheritDoc} */\n+            public UnivariateFunction derivative() {\n+                return new UnivariateFunction() {\n+                    /** {@inheritDoc} */\n+                    public double value(final double x) {\n+                        return f.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1);\n+                    }\n+                };\n+            }\n+\n+        };\n+    }\n+\n+    /** Convert a {@link DifferentiableUnivariateFunction} into a {@link UnivariateDifferentiable}.\n+     * <p>\n+     * Note that the converted function is able to handle {@link DerivativeStructure} with\n+     * <em>only</em> one parameter and up to order one. If the function is called with\n+     * more parameters or higher order, a {@link DimensionMismatchException} will be thrown.\n+     * </p>\n+     * @param f function to convert\n+     * @return converted function\n+     * @deprecated this conversion method is temporary in version 3.1, as the {@link\n+     * DifferentiableUnivariateFunction} interface itself is deprecated\n+     */\n+    @Deprecated\n+    public static UnivariateDifferentiable toUnivariateDifferential(final DifferentiableUnivariateFunction f) {\n+        return new UnivariateDifferentiable() {\n+\n+            /** {@inheritDoc} */\n+            public double value(final double x) {\n+                return f.value(x);\n+            }\n+\n+            /** {@inheritDoc}\n+             * @exception DimensionMismatchException if number of parameters or derivation\n+             * order are higher than 1\n+             */\n+            public DerivativeStructure value(final DerivativeStructure t)\n+                throws DimensionMismatchException {\n+                if (t.getFreeParameters() != 1) {\n+                    throw new DimensionMismatchException(t.getFreeParameters(), 1);\n+                }\n+                if (t.getOrder() > 1) {\n+                    throw new DimensionMismatchException(t.getOrder(), 1);\n+                }\n+                return t.compose(new double[] {\n+                    f.value(t.getValue()),\n+                    f.derivative().value(t.getValue())\n+                });\n+            }\n+\n+        };\n+    }\n+\n }", "timestamp": 1345313361, "metainfo": ""}