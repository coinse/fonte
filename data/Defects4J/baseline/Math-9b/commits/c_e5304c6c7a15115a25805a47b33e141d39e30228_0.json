{"sha": "e5304c6c7a15115a25805a47b33e141d39e30228", "log": "Removed double[] solve(double[]) from QRDecompositionImpl.Solver Had to implement toArray() in ArrayRealVectorTest to make QRSolverTest pass.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java\n         }\n \n         /** {@inheritDoc} */\n-        public double[] solve(double[] b) {\n+        public RealVector solve(RealVector b) {\n             final int n = qrt.length;\n             final int m = qrt[0].length;\n-            if (b.length != m) {\n-                throw new DimensionMismatchException(b.length, m);\n+            if (b.getDimension() != m) {\n+                throw new DimensionMismatchException(b.getDimension(), m);\n             }\n             if (!isNonSingular()) {\n                 throw new SingularMatrixException();\n             }\n \n             final double[] x = new double[n];\n-            final double[] y = b.clone();\n+            final double[] y = b.toArray();\n \n             // apply Householder transforms to solve Q.y = b\n             for (int minor = 0; minor < FastMath.min(m, n); minor++) {\n             // solve triangular system R.x = y\n             for (int row = rDiag.length - 1; row >= 0; --row) {\n                 y[row] /= rDiag[row];\n-                final double yRow   = y[row];\n+                final double yRow = y[row];\n                 final double[] qrtRow = qrt[row];\n                 x[row] = yRow;\n                 for (int i = 0; i < row; i++) {\n                 }\n             }\n \n-            return x;\n-        }\n-\n-        /** {@inheritDoc} */\n-        public RealVector solve(RealVector b) {\n-            try {\n-                return solve((ArrayRealVector) b);\n-            } catch (ClassCastException cce) {\n-                return new ArrayRealVector(solve(b.getData()), false);\n-            }\n-        }\n-\n-        /** Solve the linear equation A &times; X = B.\n-         * <p>The A matrix is implicit here. It is </p>\n-         * @param b right-hand side of the equation A &times; X = B\n-         * @return a vector X that minimizes the two norm of A &times; X - B\n-         * @throws DimensionMismatchException if the matrices dimensions do not match.\n-         * @throws SingularMatrixException if the decomposed matrix is singular.\n-         */\n-        public ArrayRealVector solve(ArrayRealVector b) {\n-            return new ArrayRealVector(solve(b.getDataRef()), false);\n+            return new ArrayRealVector(x, false);\n         }\n \n         /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java\n         }\n \n         public double[] toArray() {\n-            throw unsupported();\n+            return data.clone();\n         }\n \n         public boolean isNaN() {", "timestamp": 1315290186, "metainfo": ""}