{"sha": "cab335083a88062c897b2b3da439a9f220a20113", "log": "Fixed javadoc error, replaced depreacated class.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java\n  * be the bin containing x and let K be the within-bin kernel for B.  Let P(B-)\n  * be the sum of the probabilities of the bins below B and let K(B) be the\n  * mass of B under K (i.e., the integral of the kernel density over B).  Then\n- * set P(X < x) = P(B-) + K(x) / K(B) where K(x) is the kernel distribution\n+ * set P(X < x) = P(B-) + P(B) * K(x) / K(B) where K(x) is the kernel distribution\n  * evaluated at x. This results in a cdf that matches the grouped frequency\n  * distribution at the bin endpoints and interpolates within bins using\n  * within-bin kernels.</p>\n     private double[] upperBounds = null;\n \n     /** RandomDataImpl instance to use in repeated calls to getNext() */\n-    private final RandomDataImpl randomData;\n+    private final RandomDataGenerator randomData;\n \n     /**\n      * Creates a new EmpiricalDistribution with the default bin count.\n      */\n     public EmpiricalDistribution() {\n-        this(DEFAULT_BIN_COUNT, new RandomDataImpl());\n+        this(DEFAULT_BIN_COUNT, new RandomDataGenerator());\n     }\n \n     /**\n      * @param binCount number of bins\n      */\n     public EmpiricalDistribution(int binCount) {\n-        this(binCount, new RandomDataImpl());\n+        this(binCount, new RandomDataGenerator());\n     }\n \n     /**\n      * @since 3.0\n      */\n     public EmpiricalDistribution(int binCount, RandomGenerator generator) {\n+        super(generator);\n         this.binCount = binCount;\n-        randomData = new RandomDataImpl(generator);\n-        binStats = new ArrayList<SummaryStatistics>();\n+        this.randomData = new RandomDataGenerator(generator);\n+        this.binStats = new ArrayList<SummaryStatistics>();\n     }\n \n     /**\n      * @param randomData random data generator (may be null, resulting in default JDK generator)\n      * @since 3.0\n      */\n-    public EmpiricalDistribution(int binCount, RandomDataImpl randomData) {\n+    @SuppressWarnings(\"deprecation\")  // Superclass argumentless constructor is deprecated\n+    public EmpiricalDistribution(int binCount, RandomDataGenerator randomData) {\n         this.binCount = binCount;\n         this.randomData = randomData;\n         binStats = new ArrayList<SummaryStatistics>();\n      * @param randomData random data generator (may be null, resulting in default JDK generator)\n      * @since 3.0\n      */\n-    public EmpiricalDistribution(RandomDataImpl randomData) {\n+    public EmpiricalDistribution(RandomDataGenerator randomData) {\n         this(DEFAULT_BIN_COUNT, randomData);\n     }\n \n--- a/src/main/java/org/apache/commons/math3/random/ValueServer.java\n+++ b/src/main/java/org/apache/commons/math3/random/ValueServer.java\n     private BufferedReader filePointer = null;\n \n     /** RandomDataImpl to use for random data generation. */\n-    private final RandomDataImpl randomData;\n+    private final RandomDataGenerator randomData;\n \n     // Data generation modes ======================================\n \n     /** Creates new ValueServer */\n     public ValueServer() {\n-        randomData = new RandomDataImpl();\n+        randomData = new RandomDataGenerator();\n     }\n \n     /**\n      * @param randomData the RandomDataImpl instance used to source random data\n      * @since 3.0\n      */\n-    public ValueServer(RandomDataImpl randomData) {\n+    public ValueServer(RandomDataGenerator randomData) {\n         this.randomData = randomData;\n     }\n ", "timestamp": 1355206208, "metainfo": ""}