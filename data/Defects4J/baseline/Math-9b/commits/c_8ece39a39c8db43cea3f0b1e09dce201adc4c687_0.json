{"sha": "8ece39a39c8db43cea3f0b1e09dce201adc4c687", "log": "removed tests on removed deprecated methods  ", "commit": "\n--- a/src/test/org/apache/commons/math/complex/ComplexUtilsTest.java\n+++ b/src/test/org/apache/commons/math/complex/ComplexUtilsTest.java\n     private double nan = Double.NaN;\n     private double pi = Math.PI;\n     \n-    private Complex oneInf = new Complex(1, inf);\n-    private Complex oneNegInf = new Complex(1, negInf);\n-    private Complex infOne = new Complex(inf, 1);\n-    private Complex negInfOne = new Complex(negInf, 1);\n     private Complex negInfInf = new Complex(negInf, inf);\n     private Complex infNegInf = new Complex(inf, negInf);\n     private Complex infInf = new Complex(inf, inf);\n     private Complex negInfNegInf = new Complex(negInf, negInf);\n     private Complex infNaN = new Complex(inf, nan);\n-    private Complex negInfNaN = new Complex(negInf, nan);\n-    private Complex nanInf = new Complex(nan, inf);\n-    private Complex nanNegInf = new Complex(nan, negInf);\n-    private Complex zeroNaN = new Complex(0, nan);\n-    private Complex nanZero = new Complex(nan, 0);\n-    private Complex infZero = new Complex(inf, 0);\n-    private Complex zeroInf = new Complex(0, inf);\n-    private Complex negInfZero = new Complex(negInf, 0);\n \n-    /** @deprecated to be removed in 2.0 */\n-    public void testAcos() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(0.936812, -2.30551);\n-        TestUtils.assertEquals(expected, ComplexUtils.acos(z), 1.0e-5);\n-        TestUtils.assertEquals(new Complex(Math.acos(0), 0), \n-                ComplexUtils.acos(Complex.ZERO), 1.0e-12);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testAcosInf() {\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(oneInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(oneNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(infOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(negInfOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(infInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(infNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(negInfInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.acos(negInfNegInf));\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testAcosNaN() {\n-        assertTrue(ComplexUtils.acos(Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testAcosNull() {\n-        try {\n-            ComplexUtils.acos(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testAsin() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(0.633984, 2.30551);\n-        TestUtils.assertEquals(expected, ComplexUtils.asin(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testAsinNaN() {\n-        assertTrue(ComplexUtils.asin(Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testAsinInf() {\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(oneInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(oneNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(infOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(negInfOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(infInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(infNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(negInfInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.asin(negInfNegInf));\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testAsinNull() {\n-        try {\n-            ComplexUtils.asin(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testAtan() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(1.44831, 0.158997);\n-        TestUtils.assertEquals(expected, ComplexUtils.atan(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testAtanInf() {\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(oneInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(oneNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(infOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(negInfOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(infInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(infNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(negInfInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.atan(negInfNegInf));\n-    } \n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testAtanNaN() {\n-        assertTrue(ComplexUtils.atan(Complex.NaN).isNaN());\n-        assertTrue(ComplexUtils.atan(Complex.I).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testAtanNull() {\n-        try {\n-            ComplexUtils.atan(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testCos() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(-27.03495, -3.851153);\n-        TestUtils.assertEquals(expected, ComplexUtils.cos(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testCosNaN() {\n-        assertTrue(ComplexUtils.cos(Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testCosInf() {\n-        TestUtils.assertSame(infNegInf, ComplexUtils.cos(oneInf));\n-        TestUtils.assertSame(infInf, ComplexUtils.cos(oneNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(infOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(negInfOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(infInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(infNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(negInfInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.cos(negInfNegInf));\n-    } \n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testCosNull() {\n-        try {\n-            ComplexUtils.cos(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testCosh() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(-6.58066, -7.58155);\n-        TestUtils.assertEquals(expected, ComplexUtils.cosh(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testCoshNaN() {\n-        assertTrue(ComplexUtils.cosh(Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testCoshInf() {  \n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(oneInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(oneNegInf));\n-        TestUtils.assertSame(infInf, ComplexUtils.cosh(infOne));\n-        TestUtils.assertSame(infNegInf, ComplexUtils.cosh(negInfOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(infInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(infNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(negInfInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.cosh(negInfNegInf));\n-    } \n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testCoshNull() {\n-        try {\n-            ComplexUtils.cosh(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testExp() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(-13.12878, -15.20078);\n-        TestUtils.assertEquals(expected, ComplexUtils.exp(z), 1.0e-5);\n-        TestUtils.assertEquals(Complex.ONE, \n-                ComplexUtils.exp(Complex.ZERO), 10e-12);\n-        Complex iPi = Complex.I.multiply(new Complex(pi,0));\n-        TestUtils.assertEquals(Complex.ONE.negate(), \n-                ComplexUtils.exp(iPi), 10e-12);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testExpNaN() {\n-        assertTrue(ComplexUtils.exp(Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testExpInf() {\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(oneInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(oneNegInf));\n-        TestUtils.assertSame(infInf, ComplexUtils.exp(infOne));\n-        TestUtils.assertSame(Complex.ZERO, ComplexUtils.exp(negInfOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(infInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(infNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(negInfInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.exp(negInfNegInf));\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testExpNull() {\n-        try {\n-            ComplexUtils.exp(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testLog() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(1.60944, 0.927295);\n-        TestUtils.assertEquals(expected, ComplexUtils.log(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testLogNaN() {\n-        assertTrue(ComplexUtils.log(Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testLogInf() {\n-        TestUtils.assertEquals(new Complex(inf, pi / 2),\n-                ComplexUtils.log(oneInf), 10e-12);\n-        TestUtils.assertEquals(new Complex(inf, -pi / 2),\n-                ComplexUtils.log(oneNegInf), 10e-12);\n-        TestUtils.assertEquals(infZero, ComplexUtils.log(infOne), 10e-12);\n-        TestUtils.assertEquals(new Complex(inf, pi),\n-                ComplexUtils.log(negInfOne), 10e-12);\n-        TestUtils.assertEquals(new Complex(inf, pi / 4),\n-                ComplexUtils.log(infInf), 10e-12);\n-        TestUtils.assertEquals(new Complex(inf, -pi / 4),\n-                ComplexUtils.log(infNegInf), 10e-12);\n-        TestUtils.assertEquals(new Complex(inf, 3d * pi / 4),\n-                ComplexUtils.log(negInfInf), 10e-12);\n-        TestUtils.assertEquals(new Complex(inf, - 3d * pi / 4),\n-                ComplexUtils.log(negInfNegInf), 10e-12);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testLogZero() {\n-        TestUtils.assertSame(negInfZero, ComplexUtils.log(Complex.ZERO));\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testlogNull() {\n-        try {\n-            ComplexUtils.log(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-    \n     public void testPolar2Complex() {\n         TestUtils.assertEquals(Complex.ONE, \n                 ComplexUtils.polar2Complex(1, 0), 10e-12);\n         }   \n     }\n \n-    /** @deprecated to be removed in 2.0 */\n     protected Complex altPolar(double r, double theta) {\n-        return ComplexUtils.exp(Complex.I.multiply\n-                (new Complex(theta, 0))).multiply(new Complex(r, 0));\n+        return Complex.I.multiply(new Complex(theta, 0)).exp().multiply(new Complex(r, 0));\n     }\n     \n     public void testPolar2ComplexIllegalModulus() {\n         TestUtils.assertSame(negInfNegInf, ComplexUtils.polar2Complex(inf, 5*pi/4));\n     }\n \n-    /** @deprecated to be removed in 2.0 */\n-    public void testPow() {\n-        Complex x = new Complex(3, 4);\n-        Complex y = new Complex(5, 6);\n-        Complex expected = new Complex(-1.860893, 11.83677);\n-        TestUtils.assertEquals(expected, ComplexUtils.pow(x, y), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testPowNaNBase() {\n-        Complex x = new Complex(3, 4);\n-        assertTrue(ComplexUtils.pow(Complex.NaN, x).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testPowNaNExponent() {\n-        Complex x = new Complex(3, 4);\n-        assertTrue(ComplexUtils.pow(x, Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-   public void testPowInf() {\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, oneInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, oneNegInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, infOne));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, infInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, infNegInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, negInfInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, negInfNegInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infOne, Complex.ONE));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfOne, Complex.ONE));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infInf, Complex.ONE));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, Complex.ONE));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfInf, Complex.ONE));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfNegInf, Complex.ONE));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfNegInf, infNegInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfNegInf, negInfNegInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfNegInf, infInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infInf, infNegInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infInf, negInfNegInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infInf, infInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, infNegInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, negInfNegInf));\n-       TestUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, infInf));   \n-   }\n-\n-   /** @deprecated to be removed in 2.0 */\n-   public void testPowZero() {\n-       TestUtils.assertSame(Complex.NaN, \n-               ComplexUtils.pow(Complex.ZERO, Complex.ONE));\n-       TestUtils.assertSame(Complex.NaN, \n-               ComplexUtils.pow(Complex.ZERO, Complex.ZERO));\n-       TestUtils.assertSame(Complex.NaN, \n-               ComplexUtils.pow(Complex.ZERO, Complex.I));\n-       TestUtils.assertEquals(Complex.ONE,\n-               ComplexUtils.pow(Complex.ONE, Complex.ZERO), 10e-12);\n-       TestUtils.assertEquals(Complex.ONE,\n-               ComplexUtils.pow(Complex.I, Complex.ZERO), 10e-12);\n-       TestUtils.assertEquals(Complex.ONE,\n-               ComplexUtils.pow(new Complex(-1, 3), Complex.ZERO), 10e-12);\n-   }\n-\n-   /** @deprecated to be removed in 2.0 */\n-    public void testpowNull() {\n-        try {\n-            ComplexUtils.pow(null, Complex.ONE); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-        try {\n-            ComplexUtils.pow(Complex.ONE, null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSin() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(3.853738, -27.01681);\n-        TestUtils.assertEquals(expected, ComplexUtils.sin(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSinInf() {\n-        TestUtils.assertSame(infInf, ComplexUtils.sin(oneInf));\n-        TestUtils.assertSame(infNegInf, ComplexUtils.sin(oneNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(infOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(negInfOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(infInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(infNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(negInfInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.sin(negInfNegInf));\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSinNaN() {\n-        assertTrue(ComplexUtils.sin(Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSinNull() {\n-        try {\n-            ComplexUtils.sin(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSinh() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(-6.54812, -7.61923);\n-        TestUtils.assertEquals(expected, ComplexUtils.sinh(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSinhNaN() {\n-        assertTrue(ComplexUtils.sinh(Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSinhInf() {\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(oneInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(oneNegInf));\n-        TestUtils.assertSame(infInf, ComplexUtils.sinh(infOne));\n-        TestUtils.assertSame(negInfInf, ComplexUtils.sinh(negInfOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(infInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(infNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(negInfInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.sinh(negInfNegInf));\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testsinhNull() {\n-        try {\n-            ComplexUtils.sinh(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSqrtRealPositive() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(2, 1);\n-        TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSqrtRealZero() {\n-        Complex z = new Complex(0.0, 4);\n-        Complex expected = new Complex(1.41421, 1.41421);\n-        TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSqrtRealNegative() {\n-        Complex z = new Complex(-3.0, 4);\n-        Complex expected = new Complex(1, 2);\n-        TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSqrtImaginaryZero() {\n-        Complex z = new Complex(-3.0, 0.0);\n-        Complex expected = new Complex(0.0, 1.73205);\n-        TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSqrtImaginaryNegative() {\n-        Complex z = new Complex(-3.0, -4.0);\n-        Complex expected = new Complex(1.0, -2.0);\n-        TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSqrtPolar() {\n-        double r = 1;\n-        for (int i = 0; i < 5; i++) {\n-            r += i;\n-            double theta = 0;\n-            for (int j =0; j < 11; j++) {\n-                theta += pi /12;\n-                Complex z = ComplexUtils.polar2Complex(r, theta);\n-                Complex sqrtz = ComplexUtils.polar2Complex(Math.sqrt(r), theta / 2);\n-                TestUtils.assertEquals(sqrtz, ComplexUtils.sqrt(z), 10e-12);\n-            }\n-        }       \n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSqrtNaN() {\n-        assertTrue(ComplexUtils.sqrt(Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSqrtInf() {\n-        TestUtils.assertSame(infNaN, ComplexUtils.sqrt(oneInf));\n-        TestUtils.assertSame(infNaN, ComplexUtils.sqrt(oneNegInf));\n-        TestUtils.assertSame(infZero, ComplexUtils.sqrt(infOne));\n-        TestUtils.assertSame(zeroInf, ComplexUtils.sqrt(negInfOne));\n-        TestUtils.assertSame(infNaN, ComplexUtils.sqrt(infInf));\n-        TestUtils.assertSame(infNaN, ComplexUtils.sqrt(infNegInf));\n-        TestUtils.assertSame(nanInf, ComplexUtils.sqrt(negInfInf));\n-        TestUtils.assertSame(nanNegInf, ComplexUtils.sqrt(negInfNegInf));\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSqrtNull() {\n-        try {\n-            ComplexUtils.sqrt(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSqrt1z() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(4.08033, -2.94094);\n-        TestUtils.assertEquals(expected, ComplexUtils.sqrt1z(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSqrt1zNaN() {\n-        assertTrue(ComplexUtils.sqrt1z(Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testSqrt1zNull() {\n-        try {\n-            ComplexUtils.sqrt1z(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testTan() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(-0.000187346, 0.999356);\n-        TestUtils.assertEquals(expected, ComplexUtils.tan(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testTanNaN() {\n-        assertTrue(ComplexUtils.tan(Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testTanInf() {\n-        TestUtils.assertSame(zeroNaN, ComplexUtils.tan(oneInf));\n-        TestUtils.assertSame(zeroNaN, ComplexUtils.tan(oneNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(infOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(negInfOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(infInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(infNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(negInfInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.tan(negInfNegInf));\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-   public void testTanCritical() {\n-        TestUtils.assertSame(infNaN, ComplexUtils.tan(new Complex(pi/2, 0)));\n-        TestUtils.assertSame(negInfNaN, ComplexUtils.tan(new Complex(-pi/2, 0)));\n-    }\n-\n-   /** @deprecated to be removed in 2.0 */\n-    public void testTanNull() {\n-        try {\n-            ComplexUtils.tan(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testTanh() {\n-        Complex z = new Complex(3, 4);\n-        Complex expected = new Complex(1.00071, 0.00490826);\n-        TestUtils.assertEquals(expected, ComplexUtils.tanh(z), 1.0e-5);\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testTanhNaN() {\n-        assertTrue(ComplexUtils.tanh(Complex.NaN).isNaN());\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testTanhInf() {\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(oneInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(oneNegInf));\n-        TestUtils.assertSame(nanZero, ComplexUtils.tanh(infOne));\n-        TestUtils.assertSame(nanZero, ComplexUtils.tanh(negInfOne));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(infInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(infNegInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(negInfInf));\n-        TestUtils.assertSame(Complex.NaN, ComplexUtils.tanh(negInfNegInf));\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testTanhCritical() {\n-        TestUtils.assertSame(nanInf, ComplexUtils.tanh(new Complex(0, pi/2)));\n-    }\n-\n-    /** @deprecated to be removed in 2.0 */\n-    public void testTanhNull() {\n-        try {\n-            ComplexUtils.tanh(null); \n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {\n-            // expected\n-        }\n-    }\n }", "timestamp": 1209042381, "metainfo": ""}