{"sha": "d30c941b7f5dbd59bd62557cd115af6d82026776", "log": "tighten checkstyle rules for import statements  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java\n+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolator;\n \n /**\n  * Implements the representation of a real polynomial function in\n      * @param a the coefficients in Newton form formula\n      * @param c the centers\n      * @throws IllegalArgumentException if not valid\n-     * @see DividedDifferenceInterpolator#computeDividedDifference(double[],\n+     * @see org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolator#computeDividedDifference(double[],\n      * double[])\n      */\n     protected static void verifyInputArray(double a[], double c[]) throws\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n import java.util.Arrays;\n import java.util.List;\n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.MaxIterationsExceededException;\n import org.apache.commons.math.util.MathUtils;\n      * @param splitTolerance tolerance on the off-diagonal elements relative to the\n      * geometric mean to split the tridiagonal matrix (a suggested value is\n      * {@link MathUtils#SAFE_MIN})\n-     * @exception InvalidMatrixException (wrapping a {@link ConvergenceException}\n-     * if algorithm fails to converge\n+     * @exception InvalidMatrixException (wrapping a {@link\n+     * org.apache.commons.math.ConvergenceException} if algorithm fails to converge\n      */\n     public EigenDecompositionImpl(final RealMatrix matrix,\n                                   final double splitTolerance)\n      * @param splitTolerance tolerance on the off-diagonal elements relative to the\n      * geometric mean to split the tridiagonal matrix (a suggested value is\n      * {@link MathUtils#SAFE_MIN})\n-     * @exception InvalidMatrixException (wrapping a {@link ConvergenceException}\n-     * if algorithm fails to converge\n+     * @exception InvalidMatrixException (wrapping a {@link\n+     * org.apache.commons.math.ConvergenceException} if algorithm fails to converge\n      */\n     public EigenDecompositionImpl(final double[] main, double[] secondary,\n             final double splitTolerance)\n \n     /**\n      * Decompose a tridiagonal symmetric matrix. \n-     * @exception InvalidMatrixException (wrapping a {@link ConvergenceException}\n-     * if algorithm fails to converge\n+     * @exception InvalidMatrixException (wrapping a {@link\n+     * org.apache.commons.math.ConvergenceException} if algorithm fails to converge\n      */\n     private void decompose() {\n \n--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n \n package org.apache.commons.math.linear;\n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.util.MathUtils;\n \n     /**\n      * Calculates the Singular Value Decomposition of the given matrix. \n      * @param matrix The matrix to decompose.\n-     * @exception InvalidMatrixException (wrapping a {@link ConvergenceException}\n-     * if algorithm fails to converge\n+     * @exception InvalidMatrixException (wrapping a {@link\n+     * org.apache.commons.math.ConvergenceException} if algorithm fails to converge\n      */\n     public SingularValueDecompositionImpl(RealMatrix matrix)\n         throws InvalidMatrixException {\n--- a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n+++ b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java\n import java.io.Serializable;\n \n import org.apache.commons.math.MathRuntimeException;\n-import org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;\n import org.apache.commons.math.ode.sampling.StepHandler;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n  * ContinuousOutputModel instance can be important if the state vector\n  * is large, if the integration interval is long or if the steps are\n  * small (which can result from small tolerance settings in {@link\n- * AdaptiveStepsizeIntegrator adaptive step size integrators}).</p>\n+ * org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator adaptive\n+ * step size integrators}).</p>\n  *\n  * @see StepHandler\n  * @see StepInterpolator\n--- a/src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/FirstOrderIntegrator.java\n \n package org.apache.commons.math.ode;\n \n-import org.apache.commons.math.ode.events.EventHandler;\n-import org.apache.commons.math.ode.sampling.StepHandler;\n-\n /** This interface represents a first order integrator for\n  * differential equations.\n \n  * FirstOrderDifferentialEquations} interface.</p>\n  *\n  * @see FirstOrderDifferentialEquations\n- * @see StepHandler\n- * @see EventHandler\n+ * @see org.apache.commons.math.ode.sampling.StepHandler\n+ * @see org.apache.commons.math.ode.events.EventHandler\n  * @version $Revision$ $Date$\n  * @since 1.2\n  */\n    * @param y placeholder where to put the state vector at each successful\n    *  step (and hence at the end of integration), can be the same object as y0\n    * @return stop time, will be the same as target time if integration reached its\n-   * target, but may be different if some {@link EventHandler} stops it at some point.\n+   * target, but may be different if some {@link\n+   * org.apache.commons.math.ode.events.EventHandler} stops it at some point.\n    * @throws IntegratorException if the integrator cannot perform integration\n    * @throws DerivativeException this exception is propagated to the caller if\n    * the underlying user function triggers one\n--- a/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventHandler.java\n  */\n \n package org.apache.commons.math.ode.events;\n-\n-import org.apache.commons.math.ode.FirstOrderDifferentialEquations;\n-import org.apache.commons.math.ode.sampling.StepHandler;\n \n /** This interface represents a handler for discrete events triggered\n  * during ODE integration.\n    * #eventOccurred eventOccurred} method when the integration should\n    * go on after the event ending the current step, with a new derivatives\n    * vector (which will be retrieved thanks to the {@link\n-   * FirstOrderDifferentialEquations#computeDerivatives} method).</p>\n+   * org.apache.commons.math.ode.FirstOrderDifferentialEquations#computeDerivatives}\n+   * method).</p>\n    */\n   public static final int RESET_DERIVATIVES = 2;\n \n    * step handler itself is called. It allows the user to update his\n    * internal data to acknowledge the fact the event has been handled\n    * (for example setting a flag in the {@link\n-   * FirstOrderDifferentialEquations differential equations} to switch\n-   * the derivatives computation in case of discontinuity), or to\n-   * direct the integrator to either stop or continue integration,\n-   * possibly with a reset state or derivatives.</p>\n+   * org.apache.commons.math.ode.FirstOrderDifferentialEquations\n+   * differential equations} to switch the derivatives computation in\n+   * case of discontinuity), or to direct the integrator to either stop\n+   * or continue integration, possibly with a reset state or derivatives.</p>\n \n    * <ul>\n    *   <li>if {@link #STOP} is returned, the step handler will be called\n    *   with the <code>isLast</code> flag of the {@link\n-   *   StepHandler#handleStep handleStep} method set to true and the\n-   *   integration will be stopped,</li>\n+   *   org.apache.commons.math.ode.sampling.StepHandler#handleStep handleStep}\n+   *   method set to true and the integration will be stopped,</li>\n    *   <li>if {@link #RESET_STATE} is returned, the {@link #resetState\n    *   resetState} method will be called once the step handler has\n    *   finished its task, and the integrator will also recompute the\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java\n package org.apache.commons.math.ode.nonstiff;\n \n import org.apache.commons.math.ode.DerivativeException;\n-import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n /**\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n-   * {@link AbstractStepInterpolator#reinitialize} method should be called\n-   * before using the instance in order to initialize the internal arrays. This\n-   * constructor is used only in order to delay the initialization in\n-   * some cases. The {@link RungeKuttaIntegrator} class uses the\n-   * prototyping design pattern to create the step interpolators by\n-   * cloning an uninitialized model and latter initializing the copy.\n+   * {@link\n+   * org.apache.commons.math.ode.sampling.AbstractStepInterpolator#reinitialize}\n+   * method should be called before using the instance in order to\n+   * initialize the internal arrays. This constructor is used only\n+   * in order to delay the initialization in some cases. The {@link\n+   * RungeKuttaIntegrator} class uses the prototyping design pattern\n+   * to create the step interpolators by cloning an uninitialized model\n+   * and later initializing the copy.\n    */\n   public EulerStepInterpolator() {\n   }\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java\n package org.apache.commons.math.ode.nonstiff;\n \n import org.apache.commons.math.ode.DerivativeException;\n-import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n /**\n     \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n-   * {@link AbstractStepInterpolator#reinitialize} method should be called\n-   * before using the instance in order to initialize the internal arrays. This\n-   * constructor is used only in order to delay the initialization in\n-   * some cases. The {@link RungeKuttaIntegrator} class uses the\n-   * prototyping design pattern to create the step interpolators by\n-   * cloning an uninitialized model and latter initializing the copy.\n+   * {@link\n+   * org.apache.commons.math.ode.sampling.AbstractStepInterpolator#reinitialize}\n+   * method should be called before using the instance in order to\n+   * initialize the internal arrays. This constructor is used only\n+   * in order to delay the initialization in some cases. The {@link\n+   * RungeKuttaIntegrator} class uses the prototyping design pattern\n+   * to create the step interpolators by cloning an uninitialized model\n+   * and later initializing the copy.\n    */\n   public GillStepInterpolator() {\n   }\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java\n package org.apache.commons.math.ode.nonstiff;\n \n import org.apache.commons.math.ode.DerivativeException;\n-import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n /**\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n-   * {@link AbstractStepInterpolator#reinitialize} method should be called\n-   * before using the instance in order to initialize the internal arrays. This\n-   * constructor is used only in order to delay the initialization in\n-   * some cases. The {@link EmbeddedRungeKuttaIntegrator} uses the\n-   * prototyping design pattern to create the step interpolators by\n-   * cloning an uninitialized model and latter initializing the copy.\n+   * {@link\n+   * org.apache.commons.math.ode.sampling.AbstractStepInterpolator#reinitialize}\n+   * method should be called before using the instance in order to\n+   * initialize the internal arrays. This constructor is used only\n+   * in order to delay the initialization in some cases. The {@link\n+   * EmbeddedRungeKuttaIntegrator} uses the prototyping design pattern\n+   * to create the step interpolators by cloning an uninitialized model\n+   * and later initializing the copy.\n    */\n   public HighamHall54StepInterpolator() {\n     super();\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java\n package org.apache.commons.math.ode.nonstiff;\n \n import org.apache.commons.math.ode.DerivativeException;\n-import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n /**\n     \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n-   * {@link AbstractStepInterpolator#reinitialize} method should be called\n-   * before using the instance in order to initialize the internal arrays. This\n-   * constructor is used only in order to delay the initialization in\n-   * some cases. The {@link RungeKuttaIntegrator} class uses the\n-   * prototyping design pattern to create the step interpolators by\n-   * cloning an uninitialized model and latter initializing the copy.\n+   * {@link\n+   * org.apache.commons.math.ode.sampling.AbstractStepInterpolator#reinitialize}\n+   * method should be called before using the instance in order to\n+   * initialize the internal arrays. This constructor is used only\n+   * in order to delay the initialization in some cases. The {@link\n+   * RungeKuttaIntegrator} class uses the prototyping design pattern\n+   * to create the step interpolators by cloning an uninitialized model\n+   * and later initializing the copy.\n    */\n   public MidpointStepInterpolator() {\n   }\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java\n package org.apache.commons.math.ode.nonstiff;\n \n import org.apache.commons.math.ode.DerivativeException;\n-import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;\n import org.apache.commons.math.ode.sampling.StepInterpolator;\n \n /**\n     \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n-   * {@link AbstractStepInterpolator#reinitialize} method should be called\n-   * before using the instance in order to initialize the internal arrays. This\n-   * constructor is used only in order to delay the initialization in\n-   * some cases. The {@link RungeKuttaIntegrator} class uses the\n-   * prototyping design pattern to create the step interpolators by\n-   * cloning an uninitialized model and latter initializing the copy.\n+   * {@link\n+   * org.apache.commons.math.ode.sampling.AbstractStepInterpolator#reinitialize}\n+   * method should be called before using the instance in order to\n+   * initialize the internal arrays. This constructor is used only\n+   * in order to delay the initialization in some cases. The {@link\n+   * RungeKuttaIntegrator} class uses the prototyping design pattern\n+   * to create the step interpolators by cloning an uninitialized model\n+   * and later initializing the copy.\n    */\n   public ThreeEighthesStepInterpolator() {\n   }\n--- a/src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java\n \n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.ode.DerivativeException;\n-import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.SecondOrderIntegrator;\n-import org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;\n \n /** This abstract class represents an interpolator over the last step\n  * during an ODE integration.\n  * retrieve the state vector at intermediate times between the\n  * previous and the current grid points (dense output).</p>\n  *\n- * @see FirstOrderIntegrator\n- * @see SecondOrderIntegrator\n+ * @see org.apache.commons.math.ode.FirstOrderIntegrator\n+ * @see org.apache.commons.math.ode.SecondOrderIntegrator\n  * @see StepHandler\n  *\n  * @version $Revision$ $Date$\n    * instance in order to initialize the internal arrays. This\n    * constructor is used only in order to delay the initialization in\n    * some cases. As an example, the {@link\n-   * EmbeddedRungeKuttaIntegrator} uses the prototyping design pattern\n-   * to create the step interpolators by cloning an uninitialized\n-   * model and latter initializing the copy.\n+   * org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator}\n+   * class uses the prototyping design pattern to create the step\n+   * interpolators by cloning an uninitialized model and latter\n+   * initializing the copy.\n    */\n   protected AbstractStepInterpolator() {\n     previousTime            = Double.NaN;\n--- a/src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java\n import java.io.ObjectOutput;\n \n import org.apache.commons.math.ode.DerivativeException;\n-import org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;\n \n /** This class is a step interpolator that does nothing.\n  *\n    * should be called before using the instance in order to initialize\n    * the internal arrays. This constructor is used only in order to delay\n    * the initialization in some cases. As an example, the {@link\n-   * EmbeddedRungeKuttaIntegrator} uses the prototyping design pattern\n-   * to create the step interpolators by cloning an uninitialized\n-   * model and latter initializing the copy.\n+   * org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator} uses\n+   * the prototyping design pattern to create the step interpolators by\n+   * cloning an uninitialized model and latter initializing the copy.\n    */\n   public DummyStepInterpolator() {\n     super();\n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java\n \n package org.apache.commons.math.ode.sampling;\n \n-import org.apache.commons.math.ode.ContinuousOutputModel;\n import org.apache.commons.math.ode.DerivativeException;\n-import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.SecondOrderIntegrator;\n \n /**\n  * This interface represents a handler that should be called after\n  * last one, store the points in an ephemeris, or forward them to\n  * specialized processing or output methods.</p>\n  *\n- * @see FirstOrderIntegrator\n- * @see SecondOrderIntegrator\n+ * @see org.apache.commons.math.ode.FirstOrderIntegrator\n+ * @see org.apache.commons.math.ode.SecondOrderIntegrator\n  * @see StepInterpolator\n  * @version $Revision$ $Date$\n  * @since 1.2\n    * object on each call, so if the instance wants to keep it across\n    * all calls (for example to provide at the end of the integration a\n    * continuous model valid throughout the integration range, as the\n-   * {@link ContinuousOutputModel ContinuousOutputModel} class does),\n-   * it should build a local copy using the clone method of the\n-   * interpolator and store this copy. Keeping only a reference to the\n-   * interpolator and reusing it will result in unpredictable\n-   * behaviour (potentially crashing the application).\n+   * {@link org.apache.commons.math.ode.ContinuousOutputModel\n+   * ContinuousOutputModel} class does), it should build a local copy\n+   * using the clone method of the interpolator and store this copy.\n+   * Keeping only a reference to the interpolator and reusing it will\n+   * result in unpredictable behavior (potentially crashing the application).\n    * @param isLast true if the step is the last one\n    * @throws DerivativeException this exception is propagated to the\n    * caller if the underlying user function triggers one\n--- a/src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java\n import java.io.Externalizable;\n \n import org.apache.commons.math.ode.DerivativeException;\n-import org.apache.commons.math.ode.FirstOrderIntegrator;\n-import org.apache.commons.math.ode.SecondOrderIntegrator;\n \n /** This interface represents an interpolator over the last step\n  * during an ODE integration.\n  * {@link #copy()} method.\n  * </p>\n  *\n- * @see FirstOrderIntegrator\n- * @see SecondOrderIntegrator\n+ * @see org.apache.commons.math.ode.FirstOrderIntegrator\n+ * @see org.apache.commons.math.ode.SecondOrderIntegrator\n  * @see StepHandler\n  * @version $Revision$ $Date$\n  * @since 1.2\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java\n import java.util.Arrays;\n import java.util.Comparator;\n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;\n      * corresponding to the runs that did not converge. This means all\n      * elements will be null if the {@link #optimize(DifferentiableMultivariateRealFunction,\n      * GoalType, double[]) optimize} method did throw a {@link\n-     * ConvergenceException ConvergenceException}). This also means that\n-     * if the first element is non null, it is the best point found across\n-     * all starts.</p>\n+     * org.apache.commons.math.ConvergenceException ConvergenceException}).\n+     * This also means that if the first element is non null, it is the best\n+     * point found across all starts.</p>\n      * @return array containing the optima\n      * @exception IllegalStateException if {@link #optimize(DifferentiableMultivariateRealFunction,\n      * GoalType, double[]) optimize} has not been called\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java\n import java.util.Arrays;\n import java.util.Comparator;\n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;\n      * corresponding to the runs that did not converge. This means all\n      * elements will be null if the {@link #optimize(DifferentiableMultivariateVectorialFunction,\n      * double[], double[], double[]) optimize} method did throw a {@link\n-     * ConvergenceException ConvergenceException}). This also means that\n-     * if the first element is non null, it is the best point found across\n-     * all starts.</p>\n+     * org.apache.commons.math.ConvergenceException ConvergenceException}).\n+     * This also means that if the first element is non null, it is the best\n+     * point found across all starts.</p>\n      * @return array containing the optima\n      * @exception IllegalStateException if {@link #optimize(DifferentiableMultivariateVectorialFunction,\n      * double[], double[], double[]) optimize} has not been called\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java\n import java.util.Arrays;\n import java.util.Comparator;\n \n-import org.apache.commons.math.ConvergenceException;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.analysis.MultivariateRealFunction;\n      * corresponding to the runs that did not converge. This means all\n      * elements will be null if the {@link #optimize(MultivariateRealFunction,\n      * GoalType, double[]) optimize} method did throw a {@link\n-     * ConvergenceException ConvergenceException}). This also means that\n-     * if the first element is non null, it is the best point found across\n-     * all starts.</p>\n+     * org.apache.commons.math.ConvergenceException ConvergenceException}).\n+     * This also means that if the first element is non null, it is the best\n+     * point found across all starts.</p>\n      * @return array containing the optima\n      * @exception IllegalStateException if {@link #optimize(MultivariateRealFunction,\n      * GoalType, double[]) optimize} has not been called\n--- a/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java\n+++ b/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.analysis.MultivariateRealFunction;\n \n /** \n  * This class holds a point and the value of an objective function at this point.\n  * <p>This is a simple immutable container.</p>\n  * @see VectorialPointValuePair\n- * @see MultivariateRealFunction\n+ * @see org.apache.commons.math.analysis.MultivariateRealFunction\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n--- a/src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java\n+++ b/src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java\n \n import java.io.Serializable;\n \n-import org.apache.commons.math.analysis.MultivariateVectorialFunction;\n-\n /** \n  * This class holds a point and the vectorial value of an objective function at this point.\n  * <p>This is a simple immutable container.</p>\n  * @see RealPointValuePair\n- * @see MultivariateVectorialFunction\n+ * @see org.apache.commons.math.analysis.MultivariateVectorialFunction\n  * @version $Revision$ $Date$\n  * @since 2.0\n  */\n--- a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java\n import org.apache.commons.math.linear.QRDecompositionImpl;\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.optimization.OptimizationException;\n-import org.apache.commons.math.optimization.SimpleVectorialValueChecker;\n import org.apache.commons.math.optimization.VectorialPointValuePair;\n \n /** \n     private final boolean useLU;\n \n     /** Simple constructor with default settings.\n-     * <p>The convergence check is set to a {@link SimpleVectorialValueChecker}\n+     * <p>The convergence check is set to a {@link\n+     * org.apache.commons.math.optimization.SimpleVectorialValueChecker}\n      * and the maximal number of evaluation is set to\n      * {@link AbstractLeastSquaresOptimizer#DEFAULT_MAX_ITERATIONS}.\n      * @param useLU if true, the normal equations will be solved using LU\n--- a/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java\n import org.apache.commons.math.optimization.OptimizationException;\n import org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer;\n import org.apache.commons.math.optimization.RealPointValuePair;\n-import org.apache.commons.math.optimization.SimpleVectorialValueChecker;\n \n /** \n  * Non-linear conjugate gradient optimizer.\n     private double initialStep;\n \n     /** Simple constructor with default settings.\n-     * <p>The convergence check is set to a {@link SimpleVectorialValueChecker}\n+     * <p>The convergence check is set to a {@link\n+     * org.apache.commons.math.optimization.SimpleVectorialValueChecker}\n      * and the maximal number of iterations is set to\n      * {@link AbstractScalarDifferentiableOptimizer#DEFAULT_MAX_ITERATIONS}.\n      * @param updateFormula formula to use for updating the &beta; parameter,\n--- a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java\n  */\n package org.apache.commons.math.transform;\n \n-import org.apache.commons.math.analysis.*;\n-import org.apache.commons.math.complex.*;\n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.complex.Complex;\n \n /**\n  * Implements the <a href=\"http://documents.wolfram.com/v5/Add-onsLinks/\n--- a/src/main/java/org/apache/commons/math/transform/RealTransformer.java\n+++ b/src/main/java/org/apache/commons/math/transform/RealTransformer.java\n \n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n-import org.apache.commons.math.complex.Complex;\n \n /**\n  * Interface for one-dimensional data sets transformations producing real results.\n  * {@link FastCosineTransformer cosine transform} or {@link\n  * FastHadamardTransformer Hadamard transform}. {@link FastFourierTransformer\n  * Fourier transform} is of a different kind and does not implement this\n- * interface since it produces {@link Complex complex} results instead of real\n- * ones.\n+ * interface since it produces {@link org.apache.commons.math.complex.Complex complex}\n+ * results instead of real ones.\n  * </p>\n  * @version $Revision$ $Date$\n  * @since 2.0", "timestamp": 1251752355, "metainfo": ""}