{"sha": "0b83d765c1474555c17cb84dd25e6de4cef78850", "log": "improved javadoc (null norm => zero norm) improved exception consistency (ArithmeticException => IllegalArgumentException for zero norm argument vectors)  ", "commit": "\n--- a/src/java/org/apache/commons/math/geometry/Rotation.java\n+++ b/src/java/org/apache/commons/math/geometry/Rotation.java\n    * +j.</p>\n    * @param axis axis around which to rotate\n    * @param angle rotation angle.\n-   * @exception ArithmeticException if the axis norm is null\n+   * @exception ArithmeticException if the axis norm is zero\n    */\n   public Rotation(Vector3D axis, double angle) {\n \n     double norm = axis.getNorm();\n     if (norm == 0) {\n-      throw new ArithmeticException(\"null norm\");\n+      throw new ArithmeticException(\"zero norm for rotation axis\");\n     }\n \n     double halfAngle = -0.5 * angle;\n     // from the matrix. They all involve computing one element from\n     // the diagonal of the matrix, and computing the three other ones\n     // using a formula involving a division by the first element,\n-    // which unfortunately can be null. Since the norm of the\n+    // which unfortunately can be zero. Since the norm of the\n     // quaternion is 1, we know at least one element has an absolute\n     // value greater or equal to 0.5, so it is always possible to\n     // select the right formula and avoid division by zero and even\n    * @param u2 second vector of the origin pair\n    * @param v1 desired image of u1 by the rotation\n    * @param v2 desired image of u2 by the rotation\n+   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n \n   double v1v1 = Vector3D.dotProduct(v1, v1);\n   double v2v2 = Vector3D.dotProduct(v2, v2);\n   if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n-    throw new ArithmeticException(\"null norm\");\n+    throw new IllegalArgumentException(\"zero norm for rotation defining vector\");\n   }\n \n   double u1x = u1.getX();\n \n    * @param u origin vector\n    * @param v desired image of u by the rotation\n-   * @exception ArithmeticException if the norm of one of the vectors is null\n+   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n   public Rotation(Vector3D u, Vector3D v) {\n \n     double normProduct = u.getNorm() * v.getNorm();\n     if (normProduct == 0) {\n-      throw new ArithmeticException(\"null norm\");\n+      throw new IllegalArgumentException(\"zero norm for rotation defining vector\");\n     }\n \n     double dot = Vector3D.dotProduct(u, v);\n   private final double q3;\n \n   /** Serializable version identifier */\n-  private static final long serialVersionUID = 5127795878493115119L;\n+  private static final long serialVersionUID = 8225864499430109352L;\n \n }\n--- a/src/test/org/apache/commons/math/geometry/RotationTest.java\n+++ b/src/test/org/apache/commons/math/geometry/RotationTest.java\n     try {\n         new Rotation(u, new Vector3D());\n         fail(\"an exception should have been thrown\");\n-      } catch (ArithmeticException e) {\n+      } catch (IllegalArgumentException e) {\n+        // expected behavior\n       } catch (Exception e) {\n         fail(\"unexpected exception\");\n     }\n     try {\n         new Rotation(u1, u2, new Vector3D(), v2);\n         fail(\"an exception should have been thrown\");\n-      } catch (ArithmeticException e) {\n-      } catch (Exception e) {\n+    } catch (IllegalArgumentException e) {\n+      // expected behavior\n+    } catch (Exception e) {\n         fail(\"unexpected exception\");\n     }\n ", "timestamp": 1203070419, "metainfo": ""}