{"sha": "206201617aae648e12f63d4ab8aa9751157e7e63", "log": "Documented some runtime exceptions. PR: 29013   ", "commit": "\n--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.20 $ $Date: 2004/04/08 20:45:59 $\n+ * @version $Revision: 1.21 $ $Date: 2004/05/19 14:16:31 $\n  */\n public abstract class AbstractContinuousDistribution\n     implements ContinuousDistribution {\n      * @param x0 the lower bound\n      * @param x1 the upper bound\n      * @return the cumulative probability. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x0, double x1)\n      *\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n-     * @exception MathException if the inverse cumulative probability can not be\n-     *            computed due to convergence or other numerical errors.\n+     * @throws MathException if the inverse cumulative probability can not be\n+     *         computed due to convergence or other numerical errors.\n+     * @throws IllegalArgumentException if <code>p</code> is not a valid\n+     *         probability.\n      */\n     public double inverseCumulativeProbability(final double p)\n         throws MathException {\n--- a/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java\n  * implementations for some of the methods that do not vary from distribution\n  * to distribution.\n  *  \n- * @version $Revision: 1.14 $ $Date: 2004/05/11 02:19:08 $\n+ * @version $Revision: 1.15 $ $Date: 2004/05/19 14:16:31 $\n  */\n public abstract class AbstractDiscreteDistribution\n     implements DiscreteDistribution {\n      * @param x0 the inclusive, lower bound\n      * @param x1 the inclusive, upper bound\n      * @return the cumulative probability. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n-     * @exception IllegalArgumentException if x0 > x1\n+     * @throws IllegalArgumentException if x0 > x1\n      */\n     public double cumulativeProbability(int x0, int x1) throws MathException {\n         if (x0 > x1) {\n      *\n      * @param p the desired probability\n      * @return the largest x such that P(X &le; x) <= p\n-     * @exception MathException if the inverse cumulative probability can not be\n+     * @throws MathException if the inverse cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n-     * @exception IllegalArgumentException if p < 0 or p >= 1\n+     * @throws IllegalArgumentException if p < 0 or p >= 1\n      */\n     public int inverseCumulativeProbability(final double p) throws MathException{\n         if (p < 0.0 || p >= 1.0) {\n--- a/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java\n /**\n  * The default implementation of {@link BinomialDistribution}.\n  * \n- * @version $Revision: 1.13 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.14 $ $Date: 2004/05/19 14:16:31 $\n  */\n public class BinomialDistributionImpl\n     extends AbstractDiscreteDistribution\n     /**\n      * Change the number of trials for this distribution.\n      * @param trials the new number of trials.\n+     * @throws IllegalArgumentException if <code>trials</code> is not a valid\n+     *         number of trials.\n      */\n     public void setNumberOfTrials(int trials) {\n         if (trials < 0) {\n     /**\n      * Change the probability of success for this distribution.\n      * @param p the new probability of success.\n+     * @throws IllegalArgumentException if <code>p</code> is not a valid\n+     *         probability.\n      */\n     public void setProbabilityOfSuccess(double p) {\n         if (p < 0.0 || p > 1.0) {\n      * For this disbution, X, this method returns P(X &le; x).\n      * @param x the value at which the PDF is evaluated.\n      * @return PDF for this distribution. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(int x) throws MathException {\n--- a/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java\n /**\n  * The default implementation of {@link ChiSquaredDistribution}\n  * \n- * @version $Revision: 1.15 $ $Date: 2004/04/08 20:45:59 $\n+ * @version $Revision: 1.16 $ $Date: 2004/05/19 14:16:31 $\n  */\n public class ChiSquaredDistributionImpl\n     extends AbstractContinuousDistribution\n      * For this disbution, X, this method returns P(X &lt; x).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF for this distribution. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n--- a/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/ContinuousDistribution.java\n /**\n  * Base interface for various continuous distributions.\n  * \n- * @version $Revision: 1.13 $ $Date: 2004/04/08 20:45:59 $\n+ * @version $Revision: 1.14 $ $Date: 2004/05/19 14:16:31 $\n  */\n public interface ContinuousDistribution {\n     /**\n      * For this disbution, X, this method returns P(X &lt; x).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF for this distribution. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     double cumulativeProbability(double x) throws MathException;\n      * @param x0 the lower bound\n      * @param x1 the upper bound\n      * @return the cumulative probability. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     double cumulativeProbability(double x0, double x1) throws MathException;\n      * For this disbution, X, this method returns x such that P(X &lt; x) = p.\n      * @param p the cumulative probability.\n      * @return x. \n-     * @exception MathException if the inverse cumulative probability can not be\n+     * @throws MathException if the inverse cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     double inverseCumulativeProbability(double p) throws MathException;\n--- a/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n+++ b/src/java/org/apache/commons/math/distribution/DiscreteDistribution.java\n /**\n  * Base interface for various discrete distributions.\n  * \n- * @version $Revision: 1.13 $ $Date: 2004/05/11 02:19:08 $\n+ * @version $Revision: 1.14 $ $Date: 2004/05/19 14:16:31 $\n  */\n public interface DiscreteDistribution {\n     /**\n      * For this distribution, X, this method returns P(X &le; x).\n      * @param x the value at which the PDF is evaluated.\n      * @return PDF for this distribution. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     double cumulativeProbability(int x) throws MathException;\n      * @param x0 the inclusive, lower bound\n      * @param x1 the inclusive, upper bound\n      * @return the cumulative probability. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n-     * @exception IllegalArgumentException if x0 > x1\n+     * @throws IllegalArgumentException if x0 > x1\n      */\n     double cumulativeProbability(int x0, int x1) throws MathException;\n     \n      * For this distribution, X, this method returns the largest x such that P(X &le; x) <= p.\n      * @param p the cumulative probability.\n      * @return x. \n-     * @exception MathException if the inverse cumulative probability can not be\n+     * @throws MathException if the inverse cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     int inverseCumulativeProbability(double p) throws MathException;\n--- a/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java\n /**\n  * The default implementation of {@link ExponentialDistribution}\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/04/08 20:45:59 $\n+ * @version $Revision: 1.15 $ $Date: 2004/05/19 14:16:31 $\n  */\n public class ExponentialDistributionImpl\n     implements ExponentialDistribution, Serializable  {\n     /**\n      * Modify the mean.\n      * @param mean the new mean.\n+     * @throws IllegalArgumentException if <code>mean</code> is not positive.\n      */\n     public void setMean(double mean) {\n         if (mean <= 0.0) {\n      * \n      * @param x the value at which the CDF is evaluated.\n      * @return CDF for this distribution.\n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x) throws MathException{\n      *\n      * @param p the desired probability\n      * @return x, such that P(X &lt; x) = <code>p</code>\n-     * @exception MathException if the inverse cumulative probability can not be\n+     * @throws MathException if the inverse cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     public double inverseCumulativeProbability(double p) throws MathException{\n      * @param x0 the lower bound\n      * @param x1 the upper bound\n      * @return the cumulative probability. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x0, double x1) throws MathException{\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.FDistribution}.\n  * \n- * @version $Revision: 1.15 $ $Date: 2004/04/08 20:45:59 $\n+ * @version $Revision: 1.16 $ $Date: 2004/05/19 14:16:31 $\n  */\n public class FDistributionImpl\n     extends AbstractContinuousDistribution\n      * \n      * @param x the value at which the CDF is evaluated.\n      * @return CDF for this distribution. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n     /**\n      * Modify the numerator degrees of freedom.\n      * @param degreesOfFreedom the new numerator degrees of freedom.\n+     * @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not\n+     *         positive.\n      */\n     public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n     /**\n      * Modify the denominator degrees of freedom.\n      * @param degreesOfFreedom the new denominator degrees of freedom.\n+     * @throws IllegalArgumentException if <code>degreesOfFreedom</code> is not\n+     *         positive.\n      */\n     public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {\n         if (degreesOfFreedom <= 0.0) {\n--- a/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java\n /**\n  * The default implementation of {@link GammaDistribution}\n  * \n- * @version $Revision: 1.18 $ $Date: 2004/04/08 20:45:59 $\n+ * @version $Revision: 1.19 $ $Date: 2004/05/19 14:16:31 $\n  */\n public class GammaDistributionImpl extends AbstractContinuousDistribution\n     implements GammaDistribution, Serializable  {\n      * \n      * @param x the value at which the CDF is evaluated.\n      * @return CDF for this distribution. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x) throws MathException{\n     /**\n      * Modify the shape parameter, alpha.\n      * @param alpha the new shape parameter.\n+     * @throws IllegalArgumentException if <code>alpha</code> is not positive.\n      */\n     public void setAlpha(double alpha) {\n         if (alpha <= 0.0) {\n     /**\n      * Modify the scale parameter, beta.\n      * @param beta the new scale parameter.\n+     * @throws IllegalArgumentException if <code>beta</code> is not positive.\n      */\n     public void setBeta(double beta) {\n         if (beta <= 0.0) {\n      * @param p the desired probability for the critical value\n      * @return domain value lower bound, i.e.\n      *         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>\n-     * TODO: try to improve on this estimate\n      */\n     protected double getDomainLowerBound(double p) {\n+        // TODO: try to improve on this estimate\n         return Double.MIN_VALUE;\n     }\n \n      * @param p the desired probability for the critical value\n      * @return domain value upper bound, i.e.\n      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> \n-     * TODO: try to improve on this estimate\n      */\n     protected double getDomainUpperBound(double p) {\n+        // TODO: try to improve on this estimate\n         // NOTE: gamma is skewed to the left\n         // NOTE: therefore, P(X < &mu;) > .5\n \n      * \n      * @param p the desired probability for the critical value\n      * @return initial domain value\n-     * TODO: try to improve on this estimate\n      */\n     protected double getInitialDomain(double p) {\n+        // TODO: try to improve on this estimate\n         // Gamma is skewed to the left, therefore, P(X < &mu;) > .5\n \n         double ret;\n--- a/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java\n /**\n  * The default implementation of {@link HypergeometricDistribution}.\n  * \n- * @version $Revision: 1.12 $ $Date: 2004/05/11 02:07:58 $\n+ * @version $Revision: 1.13 $ $Date: 2004/05/19 14:16:31 $\n  */\n public class HypergeometricDistributionImpl extends AbstractDiscreteDistribution\n     implements HypergeometricDistribution, Serializable \n      * For this disbution, X, this method returns P(X &le; x).\n      * @param x the value at which the PDF is evaluated.\n      * @return PDF for this distribution. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(int x) throws MathException{\n     /**\n      * Modify the number of successes.\n      * @param num the new number of successes.\n+     * @throws IllegalArgumentException if <code>num</code> is negative.\n      */\n     public void setNumberOfSuccesses(int num) {\n         if(num < 0){\n     /**\n      * Modify the population size.\n      * @param size the new population size.\n+     * @throws IllegalArgumentException if <code>size</code> is not positive.\n      */\n     public void setPopulationSize(int size) {\n         if(size <= 0){\n     /**\n      * Modify the sample size.\n      * @param size the new sample size.\n+     * @throws IllegalArgumentException if <code>size</code> is negative.\n      */\n     public void setSampleSize(int size) {\n         if (size < 0) {\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n  * using method {@link #setCdfAlgorithm}. The deafault is the Cody algorithm \n  * {@link org.apache.commons.math.distribution.NormalCDFPreciseAlgorithm}\n  * \n- * @version $Revision: 1.8 $ $Date: 2004/05/05 19:59:11 $\n+ * @version $Revision: 1.9 $ $Date: 2004/05/19 14:16:31 $\n  */\n public class NormalDistributionImpl extends AbstractContinuousDistribution \n \t\timplements NormalDistribution, Serializable {\n \t/**\n \t * Modify the standard deviation.\n \t * @param sd standard deviation for this distribution\n+     * @throws IllegalArgumentException if <code>sd</code> is not positive.\n \t */\n \tpublic void setStandardDeviation(double sd) {\n \t\tif (sd <= 0.0) {\n--- a/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/TDistributionImpl.java\n  * Default implementation of\n  * {@link org.apache.commons.math.distribution.TDistribution}.\n  * \n- * @version $Revision: 1.15 $ $Date: 2004/04/08 20:45:59 $\n+ * @version $Revision: 1.16 $ $Date: 2004/05/19 14:16:31 $\n  */\n public class TDistributionImpl\n     extends AbstractContinuousDistribution\n      * For this disbution, X, this method returns P(X &lt; <code>x</code>).\n      * @param x the value at which the CDF is evaluated.\n      * @return CDF evaluted at <code>x</code>. \n-     * @exception MathException if the cumulative probability can not be\n+     * @throws MathException if the cumulative probability can not be\n      *            computed due to convergence or other numerical errors.\n      */\n     public double cumulativeProbability(double x) throws MathException{\n--- a/src/java/org/apache/commons/math/linear/RealMatrix.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java\n \n /**\n  * Interface defining a real-valued matrix with basic algebraic operations\n- * @version $Revision: 1.16 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.17 $ $Date: 2004/05/19 14:16:32 $\n  */\n public interface RealMatrix {\n \n      *\n      * @param m    matrix to be added\n      * @return     this + m\n-     * @exception  IllegalArgumentException if m is not the same size as this\n+     * @throws  IllegalArgumentException if m is not the same size as this\n      */\n     RealMatrix add(RealMatrix m) throws IllegalArgumentException;   \n     \n      *\n      * @param m    matrix to be subtracted\n      * @return     this + m\n-     * @exception  IllegalArgumentException if m is not the same size as this\n+     * @throws  IllegalArgumentException if m is not the same size as this\n      */\n     RealMatrix subtract(RealMatrix m) throws IllegalArgumentException;   \n     \n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n  * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n  * before using any of the methods above.\n  *\n- * @version $Revision: 1.19 $ $Date: 2004/04/27 04:37:58 $\n+ * @version $Revision: 1.20 $ $Date: 2004/05/19 14:16:32 $\n  */\n public class RealMatrixImpl implements RealMatrix, Serializable {\n \n \t *\n \t * @param m    matrix to be added\n \t * @return     this + m\n-\t * @exception  IllegalArgumentException if m is not the same size as this\n+\t * @throws  IllegalArgumentException if m is not the same size as this\n \t */\n \tpublic RealMatrix add(RealMatrix m) throws IllegalArgumentException {\n \t\tif (this.getColumnDimension() != m.getColumnDimension() ||\n \t *\n \t * @param m    matrix to be subtracted\n \t * @return     this + m\n-\t * @exception  IllegalArgumentException if m is not the same size as *this\n+\t * @throws  IllegalArgumentException if m is not the same size as *this\n \t */\n \tpublic RealMatrix subtract(RealMatrix m) throws IllegalArgumentException {\n \t\tif (this.getColumnDimension() != m.getColumnDimension() ||\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n  * The values are ordered using the default (natural order), unless a  <code>Comparator</code>\n  *  is supplied in the constructor.\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/04/24 18:51:01 $\n+ * @version $Revision: 1.20 $ $Date: 2004/05/19 14:16:32 $\n  */\n public class Frequency implements Serializable {\n     \n     /**\n      * Adds 1 to the frequency count for v\n      * @param v the value to add.\n+     * @throws IllegalArgumentException if <code>v</code> is not comparable.\n      */\n     public void addValue(Object v) {\n         try {\n         long result = 0;\n         try { \n             result = freqTable.getCount(v);\n-        } catch (Exception ex) {\n+        } catch (ClassCastException ex) {\n             // ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n         }\n         return result;\n         long result = 0;\n         try { \n             result = freqTable.getCount(new Long(v));\n-        } catch (Exception ex) {\n+        } catch (ClassCastException ex) {\n             // ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n         }\n         return result;\n         long result = 0;\n         try { \n             result = freqTable.getCount(new Long(v));\n-        } catch (Exception ex) {\n+        } catch (ClassCastException ex) {\n             // ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n         }\n         return result;\n         long result = 0;\n         try { \n             result = freqTable.getCount(new Character(v));\n-        } catch (Exception ex) {\n+        } catch (ClassCastException ex) {\n             // ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n         }\n         return result;\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n /**\n  * Implements Chi-Square test statistics defined in the {@link ChiSquareTest} interface.\n  *\n- * @version $Revision: 1.1 $ $Date: 2004/05/03 03:02:25 $\n+ * @version $Revision: 1.2 $ $Date: 2004/05/19 14:16:32 $\n  */\n public class ChiSquareTestImpl implements ChiSquareTest, Serializable {\n \n     \n     /**\n      * Returns true iff input array is rectangular.\n-     * Throws NullPointerException if input array is null\n-     * Throws ArrayIndexOutOfBoundsException if input array is empty\n      * \n      * @param in array to be tested\n      * @return true if the array is rectangular\n+     * @throws NullPointerException if input array is null\n+     * @throws ArrayIndexOutOfBoundsException if input array is empty\n      */\n     private boolean isRectangular(long[][] in) {\n         for (int i = 1; i < in.length; i++) {\n     \n     /**\n      * Returns true iff all entries of the input array are > 0.\n-     * Throws NullPointerException if input array is null.\n      * Returns true if the array is non-null, but empty\n      * \n      * @param in array to be tested\n      * @return true if all entries of the array are positive\n+     * @throws NullPointerException if input array is null\n      */\n     private boolean isPositive(double[] in) {\n         for (int i = 0; i < in.length; i ++) {\n     \n     /**\n      * Returns true iff all entries of the input array are >= 0.\n-     * Throws NullPointerException if input array is null.\n      * Returns true if the array is non-null, but empty\n      * \n      * @param in array to be tested\n      * @return true if all entries of the array are non-negative\n+     * @throws NullPointerException if input array is null\n      */\n     private boolean isNonNegative(double[] in) {\n         for (int i = 0; i < in.length; i ++) {\n     \n     /**\n      * Returns true iff all entries of the input array are > 0.\n-     * Throws NullPointerException if input array is null.\n      * Returns true if the array is non-null, but empty\n      * \n      * @param in array to be tested\n      * @return true if all entries of the array are positive\n+     * @throws NullPointerException if input array is null\n      */\n     private boolean isPositive(long[] in) {\n         for (int i = 0; i < in.length; i ++) {\n     \n     /**\n      * Returns true iff all entries of the input array are >= 0.\n-     * Throws NullPointerException if input array is null.\n      * Returns true if the array is non-null, but empty\n      * \n      * @param in array to be tested\n      * @return true if all entries of the array are non-negative\n+     * @throws NullPointerException if input array is null\n      */\n     private boolean isNonNegative(long[] in) {\n         for (int i = 0; i < in.length; i ++) {\n     \n     /**\n      * Returns true iff all entries of (all subarrays of) the input array are > 0.\n-     * Throws NullPointerException if input array is null.\n      * Returns true if the array is non-null, but empty\n      * \n      * @param in array to be tested\n      * @return true if all entries of the array are positive\n+     * @throws NullPointerException if input array is null\n      */\n     private boolean isPositive(long[][] in) {\n         for (int i = 0; i < in.length; i ++) {\n     \n     /**\n      * Returns true iff all entries of (all subarrays of) the input array are >= 0.\n-     * Throws NullPointerException if input array is null.\n      * Returns true if the array is non-null, but empty\n      * \n      * @param in array to be tested\n      * @return true if all entries of the array are non-negative\n+     * @throws NullPointerException if input array is null\n      */\n     private boolean isNonNegative(long[][] in) {\n         for (int i = 0; i < in.length; i ++) {\n--- a/src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java\n+++ b/src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java\n  * the necessary computations to return the requested statistic.</li>\n  * </ul>\n  *\n- * @version $Revision: 1.2 $ $Date: 2004/04/27 16:42:34 $\n+ * @version $Revision: 1.3 $ $Date: 2004/05/19 14:16:32 $\n  */\n public class BivariateRegression implements Serializable {\n \n      *\n      * @return half-width of 95% confidence interval for the slope estimate\n      * \n-     * @exception MathException if the confidence interval can not be computed.\n+     * @throws MathException if the confidence interval can not be computed.\n      */\n     public double getSlopeConfidenceInterval() throws MathException {\n         return getSlopeConfidenceInterval(0.05d);\n      *\n      * @param alpha the desired significance level \n      * @return half-width of 95% confidence interval for the slope estimate\n-     * @exception MathException if the confidence interval can not be computed.\n+     * @throws MathException if the confidence interval can not be computed.\n      */\n     public double getSlopeConfidenceInterval(double alpha)\n         throws MathException {\n      * <code>Double.NaN</code>.\n      *\n      * @return significance level for slope/correlation\n-     * @exception MathException if the significance level can not be computed.\n+     * @throws MathException if the significance level can not be computed.\n      */\n     public double getSignificance() throws MathException {\n         return (\n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n /**\n  * Abstract factory class for univariate statistical summaries.\n  * \n- * @version $Revision: 1.3 $ $Date: 2004/05/03 14:32:25 $\n+ * @version $Revision: 1.4 $ $Date: 2004/05/19 14:16:31 $\n  */\n public abstract class DescriptiveStatistics implements Serializable, StatisticalSummary {\n \n      * @param cls the type of <code>DescriptiveStatistics</code> object to\n      *        create. \n \t * @return a new factory. \n-     * @exception InstantiationException is thrown if the object can not be\n+     * @throws InstantiationException is thrown if the object can not be\n      *            created.\n-     * @exception IllegalAccessException is thrown if the type's default\n+     * @throws IllegalAccessException is thrown if the type's default\n      *            constructor is not accessible.\n-     * @exception ClassNotFoundException if the named\n+     * @throws ClassNotFoundException if the named\n      *            <code>DescriptiveStatistics</code> type can not be found.\n \t */\n \tpublic static DescriptiveStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n      * @param cls the type of <code>DescriptiveStatistics</code> object to\n      *        create. \n \t * @return a new factory. \n-     * @exception InstantiationException is thrown if the object can not be\n+     * @throws InstantiationException is thrown if the object can not be\n      *            created.\n-     * @exception IllegalAccessException is thrown if the type's default\n+     * @throws IllegalAccessException is thrown if the type's default\n      *            constructor is not accessible.\n \t */\n \tpublic static DescriptiveStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n--- a/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n /**\n  * Abstract factory class for univariate statistical summaries.\n  * \n- * @version $Revision: 1.4 $ $Date: 2004/05/18 04:19:53 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/19 14:16:31 $\n  */\n public abstract class SummaryStatistics implements Serializable, StatisticalSummary {\n \n      * @param cls the type of <code>SummaryStatistics</code> object to\n      *        create. \n      * @return a new factory. \n-     * @exception InstantiationException is thrown if the object can not be\n+     * @throws InstantiationException is thrown if the object can not be\n      *            created.\n-     * @exception IllegalAccessException is thrown if the type's default\n+     * @throws IllegalAccessException is thrown if the type's default\n      *            constructor is not accessible.\n-     * @exception ClassNotFoundException if the named\n+     * @throws ClassNotFoundException if the named\n      *            <code>SummaryStatistics</code> type can not be found.\n \t */\n \tpublic static SummaryStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n      * @param cls the type of <code>SummaryStatistics</code> object to\n      *        create. \n      * @return a new factory. \n-     * @exception InstantiationException is thrown if the object can not be\n+     * @throws InstantiationException is thrown if the object can not be\n      *            created.\n-     * @exception IllegalAccessException is thrown if the type's default\n+     * @throws IllegalAccessException is thrown if the type's default\n      *            constructor is not accessible.\n \t */\n \tpublic static SummaryStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n--- a/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java\n  * follows the first estimation procedure presented\n  * <a href=\"http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm\">here.</a>\n  * \n- * @version $Revision: 1.18 $ $Date: 2004/04/27 16:42:33 $\n+ * @version $Revision: 1.19 $ $Date: 2004/05/19 14:16:32 $\n  */\n public class Percentile extends AbstractUnivariateStatistic implements Serializable {\n \n      * @param length  the number of array elements to include\n      * @return the result of the evaluation or Double.NaN\n      * if the array is empty\n+     * @throws IllegalArgumentException if <code>p</code> is not a valid\n+     *         quantile.\n      */\n     public double evaluate(\n         final double[] values,\n--- a/src/java/org/apache/commons/math/util/ContractableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/ContractableDoubleArray.java\n  * internal storage array is swapped.\n  * </p>\n  * \n- * @version $Revision: 1.13 $ $Date: 2004/04/27 16:42:34 $\n+ * @version $Revision: 1.14 $ $Date: 2004/05/19 14:16:32 $\n  */\n public class ContractableDoubleArray extends ExpandableDoubleArray implements Serializable {\n \n      * \n      * @param expansionFactor factor to be checked\n      * @param contractionCritera critera to be checked\n+     * @throws IllegalArgumentException if the contractionCriteria is less than\n+     *         the expansionCriteria.\n      */\n     protected void checkContractExpand(\n         float contractionCritera,\n--- a/src/java/org/apache/commons/math/util/DoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/DoubleArray.java\n  * Collections API by allowing a user to select from a number of \n  * array implementations with support for various storage mechanisms\n  * such as automatic expansion, contraction, and array \"rolling\".\n- * @version $Revision: 1.9 $ $Date: 2004/02/21 21:35:16 $\n+ * @version $Revision: 1.10 $ $Date: 2004/05/19 14:16:32 $\n  */\n public interface DoubleArray {\n \n      * \n      * @param index index to fetch a value from\n      * @return value stored at the specified index\n-     *\n+     * @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than\n+     *         zero or is greater than <code>getNumElements() - 1</code>.\n      */\n     double getElement(int index);\n \n      * index beyond the current capacity.\n      * @param index index to store a value in\n      * @param value value to store at the specified index\n+     * @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than\n+     *         zero or is greater than <code>getNumElements() - 1</code>.\n      */\n     void setElement(int index, double value);\n \n--- a/src/java/org/apache/commons/math/util/ExpandableDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/ExpandableDoubleArray.java\n  * expand the array 10 times - first from 2 -> 4. then 4 -> 8, 8 -> 16,\n  * and so on until we reach 4096 which is sufficient to hold 3546 elements.\n  * </p>\n- * @version $Revision: 1.14 $ $Date: 2004/04/27 16:42:34 $\n+ * @version $Revision: 1.15 $ $Date: 2004/05/19 14:16:32 $\n  */\n public class ExpandableDoubleArray implements Serializable, DoubleArray {\n \n      * The expansion factor will affect the next expansion of this array.\n      * \n      * @param expansionFactor the expansion factor of this array\n+     * @throws IllegalArgumentException if <code>expansionFactor</code> is less\n+     *         than or equal to 1.0\n      */\n     public void setExpansionFactor(float expansionFactor) {\n \n     /**\n      * Sets the initial capacity\n      * @param initialCapacity of the array\n+     * @throws IllegalArgumentException if <code>initialCapacity</code> is not\n+     *         positive.\n      */\n     public void setInitialCapacity(int initialCapacity) {\n         if (initialCapacity > 0) {\n      * array as needed.\n      * \n      * @param i a new number of elements\n+     * @throws IllegalArgumentException if <code>i</code> is negative.\n      */\n     public synchronized void setNumElements(int i) {\n \n      * \n      * @param index index to fetch a value from\n      * @return value stored at the specified index\n+     * @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than\n+     *         zero or is greater than <code>getNumElements() - 1</code>.\n      */\n     public double getElement(int index) {\n         double value = Double.NaN;\n      *\n      * @param index index to store a value in\n      * @param value value to store at the specified index\n+     * @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than\n+     *         zero.\n      */\n     public synchronized void setElement(int index, double value) {\n \n      * elements from the front of the array.\n      * \n      * @param i number of elements to discard from the front of the array.\n+     * @throws IllegalArgumentException if <code>i</code> is negative of is\n+     *         greater than <code>getNumElements()</code>.\n      */\n     public synchronized void discardFrontElements(int i) {\n \n--- a/src/java/org/apache/commons/math/util/FixedDoubleArray.java\n+++ b/src/java/org/apache/commons/math/util/FixedDoubleArray.java\n  * \"fixed\" in memory, this implementation will never allocate, or copy\n  * the internal storage array to a new array instance.\n  * </p>\n- * @version $Revision: 1.15 $ $Date: 2004/04/27 16:42:34 $\n+ * @version $Revision: 1.16 $ $Date: 2004/05/19 14:16:32 $\n  */\n public class FixedDoubleArray implements DoubleArray, Serializable {\n \n      * array will throw an ArrayIndexOutOfBoundsException.\n      *\n      * @see org.apache.commons.math.util.DoubleArray#getElement(int)\n+     * @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than\n+     *         zero or is greater than <code>getNumElements() - 1</code>.\n      */\n     public double getElement(int index) {\n         if (index > (size - 1)) {\n      * </p>\n      *\n      * @see org.apache.commons.math.util.DoubleArray#setElement(int, double)\n+     * @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than\n+     *         zero or is greater than <code>getNumElements() - 1</code>.\n      */\n     public void setElement(int index, double value) {\n         if (index > (size - 1)) {\n      * of elements\n      *\n      * @see org.apache.commons.math.util.DoubleArray#addElement(double)\n+     * @throws ArrayIndexOutOfBoundsException if array is already at capacity.\n      */\n     public void addElement(double value) {\n         if (size < internalArray.length) {\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n /**\n  * Some useful additions to the built-in functions in {@link Math}.\n  *\n- * @version $Revision: 1.16 $ $Date: 2004/05/09 04:36:08 $\n+ * @version $Revision: 1.17 $ $Date: 2004/05/19 14:16:32 $\n  */\n public final class MathUtils {\n     \n      * @param n the size of the set\n      * @param k the size of the subsets to be counted\n      * @return <code>n choose k</code>\n+     * @throws IllegalArgumentException if preconditions are not met.\n+     * @throws ArithmeticException if the result is too large to be represented\n+     *         by a long integer.\n      */\n     public static long binomialCoefficient(final int n, final int k) {\n         if (n < k) {\n      * @param n the size of the set\n      * @param k the size of the subsets to be counted\n      * @return <code>n choose k</code>\n+     * @throws IllegalArgumentException if preconditions are not met.\n      */\n     public static double binomialCoefficientDouble(final int n, final int k) {\n         return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);\n      * @param n the size of the set\n      * @param k the size of the subsets to be counted\n      * @return <code>n choose k</code>\n+     * @throws IllegalArgumentException if preconditions are not met.\n      */\n     public static double binomialCoefficientLog(final int n, final int k) {\n         if (n < k) {\n      *\n      * @param n argument\n      * @return <code>n!</code>\n+     * @throws ArithmeticException if the result is too large to be represented\n+     *         by a long integer.\n      */\n     public static long factorial(final int n) {\n         long result = Math.round(factorialDouble(n));\n      *\n      * @param n argument\n      * @return <code>n!</code>\n+     * @throws IllegalArgumentException if preconditions are not met.\n      */\n     public static double factorialLog(final int n) {\n         if (n <= 0) {", "timestamp": 1084976192, "metainfo": ""}