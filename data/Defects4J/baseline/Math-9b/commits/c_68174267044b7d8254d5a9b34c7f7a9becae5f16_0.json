{"sha": "68174267044b7d8254d5a9b34c7f7a9becae5f16", "log": "Added exceptions to javadoc comments.   ", "commit": "\n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java\n /**\n  * Abstract factory class for univariate statistical summaries.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:49 $\n+ * @version $Revision: 1.2 $ $Date: 2004/04/23 19:50:27 $\n  */\n public abstract class DescriptiveStatistics implements Serializable, StatisticalSummary {\n \n \t/**\n \t * Create an instance of a <code>DescriptiveStatistics</code>\n+     * @param cls the type of <code>DescriptiveStatistics</code> object to\n+     *        create. \n \t * @return a new factory. \n+     * @exception InstantiationException is thrown if the object can not be\n+     *            created.\n+     * @exception IllegalAccessException is thrown if the type's default\n+     *            constructor is not accessible.\n+     * @exception ClassNotFoundException if the named\n+     *            <code>DescriptiveStatistics</code> type can not be found.\n \t */\n \tpublic static DescriptiveStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n \t\treturn newInstance(Class.forName(cls));\n \t}\n+    \n \t/**\n \t * Create an instance of a <code>DescriptiveStatistics</code>\n+     * @param cls the type of <code>DescriptiveStatistics</code> object to\n+     *        create. \n \t * @return a new factory. \n+     * @exception InstantiationException is thrown if the object can not be\n+     *            created.\n+     * @exception IllegalAccessException is thrown if the type's default\n+     *            constructor is not accessible.\n \t */\n \tpublic static DescriptiveStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n \t\treturn (DescriptiveStatistics)cls.newInstance();\n \t}\n \t\n-\t\t/**\n+\t/**\n \t * Create an instance of a <code>DescriptiveStatistics</code>\n \t * @return a new factory. \n \t */\n--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java\n import org.apache.commons.math.util.ContractableDoubleArray;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:49 $\n+ * @version $Revision: 1.2 $ $Date: 2004/04/23 19:50:27 $\n  */\n public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics implements Serializable {\n \n     \n     /**\n      * Construct a DescriptiveStatisticsImpl with finite window\n+     * @param window the finite window size.\n      */\n     public DescriptiveStatisticsImpl(int window) {\n     \tsuper(window);\n     \teDA = new ContractableDoubleArray();\n     }\n \n+    /**\n+     * Access the window size.\n+     * @return the current window size.\n+     */\n     public int getWindowSize() {\n     \treturn windowSize;\n     }\n--- a/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n+++ b/src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java\n /**\n  * Abstract factory class for univariate statistical summaries.\n  * \n- * @version $Revision: 1.1 $ $Date: 2004/04/12 02:27:49 $\n+ * @version $Revision: 1.2 $ $Date: 2004/04/23 19:50:27 $\n  */\n public abstract class SummaryStatistics implements Serializable, StatisticalSummary{\n \n \t/**\n \t * Create an instance of a <code>SummaryStatistics</code>\n-\t * @return a new factory. \n+     * @param cls the type of <code>SummaryStatistics</code> object to\n+     *        create. \n+     * @return a new factory. \n+     * @exception InstantiationException is thrown if the object can not be\n+     *            created.\n+     * @exception IllegalAccessException is thrown if the type's default\n+     *            constructor is not accessible.\n+     * @exception ClassNotFoundException if the named\n+     *            <code>SummaryStatistics</code> type can not be found.\n \t */\n \tpublic static SummaryStatistics newInstance(String cls) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n \t\treturn newInstance(Class.forName(cls));\n \t}\n+     \n \t/**\n \t * Create an instance of a <code>DescriptiveStatistics</code>\n-\t * @return a new factory. \n+     * @param cls the type of <code>SummaryStatistics</code> object to\n+     *        create. \n+     * @return a new factory. \n+     * @exception InstantiationException is thrown if the object can not be\n+     *            created.\n+     * @exception IllegalAccessException is thrown if the type's default\n+     *            constructor is not accessible.\n \t */\n \tpublic static SummaryStatistics newInstance(Class cls) throws InstantiationException, IllegalAccessException {\n \t\treturn (SummaryStatistics)cls.newInstance();\n \t}\n \t\n-\t\t/**\n+\t/**\n \t * Create an instance of a <code>DescriptiveStatistics</code>\n \t * @return a new factory. \n \t */\n--- a/src/java/org/apache/commons/math/util/TransformerMap.java\n+++ b/src/java/org/apache/commons/math/util/TransformerMap.java\n  * It provides a means to set NumberTransformers that will be selected \n  * based on the Class of the object handed to the Maps\n  * <code>double transform(Object o)</code> method.\n- * @version $Revision: 1.11 $ $Date: 2004/02/21 21:35:16 $\n+ * @version $Revision: 1.12 $ $Date: 2004/04/23 19:50:27 $\n  */\n public class TransformerMap implements NumberTransformer, Serializable {\n \n \t\tif (o instanceof Number || o instanceof String) {\n \t\t\tvalue = defaultTransformer.transform(o);\n \t\t} else {\n-\t\t\tNumberTransformer trans =\n-\t\t\t\t(NumberTransformer) this.getTransformer(o.getClass());\n+\t\t\tNumberTransformer trans = getTransformer(o.getClass());\n \t\t\tif (trans != null) {\n \t\t\t\tvalue = trans.transform(o);\n \t\t\t}", "timestamp": 1082749827, "metainfo": ""}