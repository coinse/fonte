{"sha": "182c84f29162252c3bce5610deae721f940e4304", "log": "Changed default non-secure generator to Well19937c and changed default seeds to add system identity haschode to timestamp.  JIRA: MATH-701.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java\n  * instance to generate non-secure data and a {@link java.security.SecureRandom}\n  * instance to provide data for the <code>nextSecureXxx</code> methods. If no\n  * <code>RandomGenerator</code> is provided in the constructor, the default is\n- * to use a generator based on {@link java.util.Random}. To plug in a different\n+ * to use a {@link Well19937c} generator. To plug in a different\n  * implementation, either implement <code>RandomGenerator</code> directly or\n  * extend {@link AbstractRandomGenerator}.\n  * <p>\n  * When a new <code>RandomDataImpl</code> is created, the underlying random\n  * number generators are <strong>not</strong> initialized. If you do not\n  * explicitly seed the default non-secure generator, it is seeded with the\n- * current time in milliseconds on first use. The same holds for the secure\n- * generator. If you provide a <code>RandomGenerator</code> to the constructor,\n- * however, this generator is not reseeded by the constructor nor is it reseeded\n- * on first use.</li>\n+ * current time in milliseconds plus the system identity hash code on first use.\n+ * The same holds for the secure generator. If you provide a <code>RandomGenerator</code>\n+ * to the constructor, however, this generator is not reseeded by the constructor\n+ * nor is it reseeded on first use.</li>\n  * <li>\n  * The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate to the\n  * corresponding methods on the underlying <code>RandomGenerator</code> and\n     /**\n      * Returns the RandomGenerator used to generate non-secure random data.\n      * <p>\n-     * Creates and initializes a default generator if null.\n+     * Creates and initializes a default generator if null. Uses a {@link Well19937c}\n+     * generator with {@code System.currentTimeMillis() + hashCode()} as the default seed.\n      * </p>\n      *\n      * @return the Random used to generate random data\n      */\n     private RandomGenerator getRan() {\n         if (rand == null) {\n-            rand = new JDKRandomGenerator();\n-            rand.setSeed(System.currentTimeMillis());\n+            rand = new Well19937c(System.currentTimeMillis() + hashCode());\n         }\n         return rand;\n     }\n     /**\n      * Returns the SecureRandom used to generate secure random data.\n      * <p>\n-     * Creates and initializes if null.\n+     * Creates and initializes if null.  Uses \n+     * {@code System.currentTimeMillis() + hashCode()} as the default seed.\n      * </p>\n      *\n      * @return the SecureRandom used to generate secure random data\n     private SecureRandom getSecRan() {\n         if (secRand == null) {\n             secRand = new SecureRandom();\n-            secRand.setSeed(System.currentTimeMillis());\n+            secRand.setSeed(System.currentTimeMillis() + hashCode());\n         }\n         return secRand;\n     }", "timestamp": 1320423605, "metainfo": ""}