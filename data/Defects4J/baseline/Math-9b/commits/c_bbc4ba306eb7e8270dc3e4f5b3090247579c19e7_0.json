{"sha": "bbc4ba306eb7e8270dc3e4f5b3090247579c19e7", "log": "Refactored load methods to eliminate use of URL.toFile(). Addressing PR #25972, reported by Bill Barker.   ", "commit": "\n--- a/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java\n import java.io.BufferedReader;\n import java.io.FileReader;\n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n \n import org.apache.commons.math.stat.DescriptiveStatistics;\n import org.apache.commons.math.stat.StorelessDescriptiveStatisticsImpl;\n  *    entry per line.</li>\n  * </ol></p>\n  *\n- * @version $Revision: 1.11 $ $Date: 2003/11/19 03:28:24 $\n+ * @version $Revision: 1.12 $ $Date: 2004/01/11 07:22:14 $\n  */\n public class EmpiricalDistributionImpl implements Serializable, EmpiricalDistribution {\n \n         binStats = new ArrayList();\n     }\n     \n-    \n     public void load(String filePath) throws IOException {\n-        File file = new File(filePath);\n-        load(file);\n-    }\n-    \n+        BufferedReader in = \n+            new BufferedReader(new InputStreamReader(new FileInputStream(filePath)));  \n+        try {\n+            computeStats(in);\n+            in = new BufferedReader(new InputStreamReader(new FileInputStream(filePath)));  \n+            fillBinStats(in);\n+            loaded = true;\n+        } finally {\n+           if (in != null) try {in.close();} catch (Exception ex) {};\n+        }\n+    }\n+    \n+    public void load(URL url) throws IOException {\n+        BufferedReader in = \n+            new BufferedReader(new InputStreamReader(url.openStream()));\n+        try {\n+            computeStats(in);\n+            in = new BufferedReader(new InputStreamReader(url.openStream()));\n+            fillBinStats(in);\n+            loaded = true;\n+        } finally {\n+           if (in != null) try {in.close();} catch (Exception ex) {};\n+        }\n+    }\n      \n     public void load(File file) throws IOException {\n-        // Pass the file once to get sample stats\n-         BufferedReader in = null;\n-         try {  \n+        BufferedReader in = new BufferedReader(new FileReader(file));\n+        try {\n+            computeStats(in);\n             in = new BufferedReader(new FileReader(file));\n-            String str = null;\n-            double val = 0.0;\n-            sampleStats = new StorelessDescriptiveStatisticsImpl();\n-            while ((str = in.readLine()) != null) {\n-              val = new Double(str).doubleValue();\n-              sampleStats.addValue(val);   \n-            }\n-            in.close();\n-            in = null;\n-         } finally {\n-             if (in != null) try {in.close();} catch (Exception ex) {};\n-         }               \n-        \n-         // Load array of bin upper bounds -- evenly spaced from min - max\n-         double min = sampleStats.getMin();\n-         double max = sampleStats.getMax();\n-         double delta = (max - min)/(new Double(binCount)).doubleValue();\n-         double[] binUpperBounds = new double[binCount];\n-         binUpperBounds[0] = min + delta;\n-         for (int i = 1; i< binCount - 1; i++) {\n-             binUpperBounds[i] = binUpperBounds[i-1] + delta;\n-         }\n-         binUpperBounds[binCount -1] = max;\n-         \n+            fillBinStats(in);\n+            loaded = true;\n+        } finally {\n+           if (in != null) try {in.close();} catch (Exception ex) {};\n+        }\n+    }\n+    \n+    /**\n+     * Computes sampleStats (first pass through data file).\n+     */\n+    private void computeStats(BufferedReader in) throws IOException {\n+        String str = null;\n+        double val = 0.0;\n+        sampleStats = new StorelessDescriptiveStatisticsImpl();\n+        while ((str = in.readLine()) != null) {\n+            val = new Double(str).doubleValue();\n+            sampleStats.addValue(val);\n+        }\n+        in.close();\n+        in = null;\n+    }\n+    \n+    /**\n+     * Fills binStats array (second pass through data file).\n+     */\n+    private void fillBinStats(BufferedReader in) throws IOException {\n+        \n+        // Load array of bin upper bounds -- evenly spaced from min - max\n+        double min = sampleStats.getMin();\n+        double max = sampleStats.getMax();\n+        double delta = (max - min)/(new Double(binCount)).doubleValue();\n+        double[] binUpperBounds = new double[binCount];\n+        binUpperBounds[0] = min + delta;\n+        for (int i = 1; i< binCount - 1; i++) {\n+            binUpperBounds[i] = binUpperBounds[i-1] + delta;\n+        }\n+        binUpperBounds[binCount -1] = max;\n+        \n         // Initialize binStats ArrayList\n         if (!binStats.isEmpty()) {\n             binStats.clear();\n             DescriptiveStatistics stats = new StorelessDescriptiveStatisticsImpl();\n             binStats.add(i,stats);\n         }\n-         \n-        // Pass the data again, filling data in binStats Array \n-         try {\n-            in = new BufferedReader(new FileReader(file));\n-            String str = null;\n-            double val = 0.0d;\n-            while ((str = in.readLine()) != null) {\n-              val = new Double(str).doubleValue();\n-              \n-              // Find bin and add value to binStats for the bin\n-              boolean found = false;\n-              int i = 0; \n-              while (!found) {\n-                  if (i >= binCount) {\n-                      throw new RuntimeException(\"bin alignment error\");\n-                  }\n-                  if (val <= binUpperBounds[i]) {\n-                      found = true;\n-                      DescriptiveStatistics stats = (DescriptiveStatistics)binStats.get(i);\n-                      stats.addValue(val);\n-                  }\n-                  i++;\n-              }       \n+        \n+        // Pass the data again, filling data in binStats Array\n+        String str = null;\n+        double val = 0.0d;\n+        while ((str = in.readLine()) != null) {\n+            val = new Double(str).doubleValue();\n+            \n+            // Find bin and add value to binStats for the bin\n+            boolean found = false;\n+            int i = 0;\n+            while (!found) {\n+                if (i >= binCount) {\n+                    throw new RuntimeException(\"bin alignment error\");\n+                }\n+                if (val <= binUpperBounds[i]) {\n+                    found = true;\n+                    DescriptiveStatistics stats = (DescriptiveStatistics)binStats.get(i);\n+                    stats.addValue(val);\n+                }\n+                i++;\n             }\n-            in.close();\n-            in = null;\n-         } finally {\n-             if (in != null) try {in.close();} catch (Exception ex) {};\n-         }               \n-        \n-         // Assign upperBounds based on bin counts\n-         upperBounds = new double[binCount];\n-         upperBounds[0] = \n-            ((double)((DescriptiveStatistics)binStats.get(0)).getN())/\n-                (double)sampleStats.getN();\n-         for (int i = 1; i < binCount-1; i++) {\n-             upperBounds[i] = upperBounds[i-1] +\n-             ((double)((DescriptiveStatistics)binStats.get(i)).getN())/\n-                (double)sampleStats.getN();\n-         }\n-         upperBounds[binCount-1] = 1.0d;   \n-         \n-         loaded = true;\n+        }\n+        in.close();\n+        in = null;\n+        \n+        // Assign upperBounds based on bin counts\n+        upperBounds = new double[binCount];\n+        upperBounds[0] =\n+        ((double)((DescriptiveStatistics)binStats.get(0)).getN())/\n+        (double)sampleStats.getN();\n+        for (int i = 1; i < binCount-1; i++) {\n+            upperBounds[i] = upperBounds[i-1] +\n+            ((double)((DescriptiveStatistics)binStats.get(i)).getN())/\n+            (double)sampleStats.getN();\n+        }\n+        upperBounds[binCount-1] = 1.0d;\n     }\n     \n     /**", "timestamp": 1073805734, "metainfo": ""}