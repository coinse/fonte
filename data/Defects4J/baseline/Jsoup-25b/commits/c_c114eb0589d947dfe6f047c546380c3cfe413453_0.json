{"sha": "c114eb0589d947dfe6f047c546380c3cfe413453", "log": "Implemented TextNode.splitText", "commit": "\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n package org.jsoup.nodes;\n \n import org.jsoup.helper.StringUtil;\n+import org.jsoup.helper.Validate;\n \n /**\n  A text node.\n         return attributes == null ? text : attributes.get(TEXT_KEY);\n     }\n \n-\n     /**\n      Test if this text node is blank -- that is, empty or only whitespace (including newlines).\n      @return true if this document is empty or only whitespace, false if it contains any text content.\n      */\n     public boolean isBlank() {\n         return StringUtil.isBlank(getWholeText());\n+    }\n+\n+    /**\n+     * Split this text node into two nodes at the specified string offset. After splitting, this node will contain the\n+     * original text up to the offset, and will have a new text node sibling containing the text after the offset.\n+     * @param offset string offset point to split node at.\n+     * @return the newly created text node containing the text after the offset.\n+     */\n+    public TextNode splitText(int offset) {\n+        Validate.isTrue(offset >= 0, \"Split offset must be not be negative\");\n+        Validate.isTrue(offset < text.length(), \"Split offset must not be greater than current text length\");\n+\n+        String head = getWholeText().substring(0, offset);\n+        String tail = getWholeText().substring(offset);\n+        text(head);\n+        TextNode tailNode = new TextNode(tail, this.baseUri());\n+        if (parent() != null)\n+            parent().addChildren(siblingIndex()+1, tailNode);\n+\n+        return tailNode;\n     }\n \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n--- a/src/test/java/org/jsoup/nodes/TextNodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/TextNodeTest.java\n         assertEquals(\"kablam &\", tn.text());\n         assertEquals(\"One <span>two &amp;</span>kablam &amp;\", TextUtil.stripNewlines(p.html()));\n     }\n+\n+    @Test public void testSplitText() {\n+        Document doc = Jsoup.parse(\"<div>Hello there</div>\");\n+        Element div = doc.select(\"div\").first();\n+        TextNode tn = (TextNode) div.childNode(0);\n+        TextNode tail = tn.splitText(6);\n+        assertEquals(\"Hello \", tn.getWholeText());\n+        assertEquals(\"there\", tail.getWholeText());\n+        tail.text(\"there!\");\n+        assertEquals(\"Hello there!\", div.text());\n+        assertTrue(tn.parent() == tail.parent());\n+    }\n }", "timestamp": 1309605126, "metainfo": ""}