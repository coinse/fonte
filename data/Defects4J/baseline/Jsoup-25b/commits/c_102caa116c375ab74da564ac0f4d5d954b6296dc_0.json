{"sha": "102caa116c375ab74da564ac0f4d5d954b6296dc", "log": "URL connection tests", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n     }\n \n     public Connection data(String... keyvals) {\n+        Validate.isTrue(keyvals.length %2 == 0, \"Must supply an even number of key value pairs\");\n         for (int i = 0; i < keyvals.length; i += 2) {\n             req.data(KeyVal.create(keyvals[i], keyvals[i + 1]));\n         }\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n package org.jsoup.integration;\n \n import org.junit.Test;\n+import org.junit.Ignore;\n import static org.junit.Assert.*;\n import org.jsoup.nodes.Document;\n import org.jsoup.Jsoup;\n+import org.jsoup.Connection;\n \n import java.net.URL;\n import java.io.IOException;\n  Tests the URL connection. Not enabled by default, so tests don't require network connection.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n+@Ignore // ignored by default so tests don't require network access. comment out to enable.\n public class UrlConnectTest {\n-    // @Test // uncomment to enable test\n+    private static String echoURL = \"http://infohound.net/tools/q.pl\";\n+\n+    @Test\n     public void fetchURl() throws IOException {\n         String url = \"http://www.google.com\"; // no trailing / to force redir\n         Document doc = Jsoup.parse(new URL(url), 10*1000);\n         assertTrue(doc.title().contains(\"Google\"));\n     }\n \n-    // @Test // uncomment to enble\n+    @Test\n     public void fetchBaidu() throws IOException {\n-        Document doc = Jsoup.parse(new URL(\"http://www.baidu.com/\"), 10*1000);\n+        Connection.Response res = Jsoup.connect(\"http://www.baidu.com/\").timeout(10*1000).execute();\n+        Document doc = res.parse();\n+\n         assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n+        assertEquals(\"GB2312\", res.charset());\n+        assert(res.hasCookie(\"BAIDUID\"));\n+        assertEquals(\"text/html;charset=gb2312\", res.contentType());\n     }\n     \n-    // @Test // uncomment to enable\n+    @Test\n     public void exceptOnUnknownContentType() {\n         String url = \"http://jsoup.org/rez/osi_logo.png\"; // not text/* but image/png, should throw\n         boolean threw = false;\n         assertTrue(threw);\n     }\n \n-    @Test public void noop() {}\n+    @Test\n+    public void doesPost() throws IOException {\n+        Document doc = Jsoup.connect(echoURL)\n+            .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n+            .cookie(\"auth\", \"token\")\n+            .post();\n+\n+        assertEquals(\"POST\", ihVal(\"REQUEST_METHOD\", doc));\n+        assertEquals(\"gzip\", ihVal(\"HTTP_ACCEPT_ENCODING\", doc));\n+        assertEquals(\"auth=token\", ihVal(\"HTTP_COOKIE\", doc));\n+        assertEquals(\"\u5ea6\u4e00\u4e0b\", ihVal(\"\u767e\", doc));\n+        assertEquals(\"Jsoup, Jonathan\", ihVal(\"uname\", doc));\n+    }\n+\n+    @Test\n+    public void doesGet() throws IOException {\n+        Connection con = Jsoup.connect(echoURL + \"?what=the\")\n+            .userAgent(\"Mozilla\")\n+            .referrer(\"http://example.com\")\n+            .data(\"what\", \"about & me?\");\n+\n+        Document doc = con.get();\n+        assertEquals(\"what=the&what=about+%26+me%3F\", ihVal(\"QUERY_STRING\", doc));\n+        assertEquals(\"the, about & me?\", ihVal(\"what\", doc));\n+        assertEquals(\"Mozilla\", ihVal(\"HTTP_USER_AGENT\", doc));\n+        assertEquals(\"http://example.com\", ihVal(\"HTTP_REFERER\", doc));\n+    }\n+\n+    private static String ihVal(String key, Document doc) {\n+        return doc.select(\"th:contains(\"+key+\") + td\").first().text();\n+    }\n+\n }", "timestamp": 1309605119, "metainfo": ""}