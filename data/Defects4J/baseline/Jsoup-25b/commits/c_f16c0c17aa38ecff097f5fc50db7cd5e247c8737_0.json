{"sha": "f16c0c17aa38ecff097f5fc50db7cd5e247c8737", "log": "Fixed CharacterReader to handle unconsuming at EOF correctly. Additional <script> test at EOF.", "commit": "\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n     }\n \n     char consume() {\n-        return isEmpty() ? EOF : input.charAt(pos++);\n+        char val = isEmpty() ? EOF : input.charAt(pos);\n+        pos++;\n+        return val;\n     }\n \n     void unconsume() {\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n                     case '>':\n                         t.emitTagPending();\n                         t.transition(Data);\n+                        break;\n                     default:\n                         t.dataBuffer.append(c);\n                         anythingElse(t, r);\n--- /dev/null\n+++ b/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n+package org.jsoup.parser;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Test suite for character reader.\n+ *\n+ * @author Jonathan Hedley, jonathan@hedley.net\n+ */\n+public class CharacterReaderTest {\n+\n+    @Test public void consume() {\n+        CharacterReader r = new CharacterReader(\"one\");\n+        assertEquals(0, r.pos());\n+        assertEquals('o', r.current());\n+        assertEquals('o', r.consume());\n+        assertEquals(1, r.pos());\n+        assertEquals('n', r.current());\n+        assertEquals(1, r.pos());\n+        assertEquals('n', r.consume());\n+        assertEquals('e', r.consume());\n+        assertTrue(r.isEmpty());\n+        assertEquals(CharacterReader.EOF, r.consume());\n+        assertTrue(r.isEmpty());\n+        assertEquals(CharacterReader.EOF, r.consume());\n+    }\n+\n+    @Test public void unconsume() {\n+        CharacterReader r = new CharacterReader(\"one\");\n+        assertEquals('o', r.consume());\n+        assertEquals('n', r.current());\n+        r.unconsume();\n+        assertEquals('o', r.current());\n+\n+        assertEquals('o', r.consume());\n+        assertEquals('n', r.consume());\n+        assertEquals('e', r.consume());\n+        assertTrue(r.isEmpty());\n+        r.unconsume();\n+        assertFalse(r.isEmpty());\n+        assertEquals('e', r.current());\n+        assertEquals('e', r.consume());\n+        assertTrue(r.isEmpty());\n+\n+        assertEquals(CharacterReader.EOF, r.consume());\n+        r.unconsume();\n+        assertTrue(r.isEmpty());\n+        assertEquals(CharacterReader.EOF, r.current());\n+    }\n+\n+    @Test public void mark() {\n+        CharacterReader r = new CharacterReader(\"one\");\n+        r.consume();\n+        r.mark();\n+        assertEquals('n', r.consume());\n+        assertEquals('e', r.consume());\n+        assertTrue(r.isEmpty());\n+        r.rewindToMark();\n+        assertEquals('n', r.consume());\n+    }\n+}\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n \n     @Test public void handlesUnclosedScriptAtEof() {\n         assertEquals(\"Data\", Jsoup.parse(\"<script>Data\").select(\"script\").first().data());\n+        assertEquals(\"Data<\", Jsoup.parse(\"<script>Data<\").select(\"script\").first().data());\n         assertEquals(\"Data</sc\", Jsoup.parse(\"<script>Data</sc\").select(\"script\").first().data());\n         assertEquals(\"Data</-sc\", Jsoup.parse(\"<script>Data</-sc\").select(\"script\").first().data());\n         assertEquals(\"Data</sc-\", Jsoup.parse(\"<script>Data</sc-\").select(\"script\").first().data());\n         assertEquals(\"Data</sc--\", Jsoup.parse(\"<script>Data</sc--\").select(\"script\").first().data());\n         assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script>\").select(\"script\").first().data());\n         assertEquals(\"Data</script\", Jsoup.parse(\"<script>Data</script\").select(\"script\").first().data());\n+        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script \").select(\"script\").first().data());\n+        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script n\").select(\"script\").first().data());\n+        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script n=\").select(\"script\").first().data());\n+        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script n=\\\"\").select(\"script\").first().data());\n+        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script n=\\\"p\").select(\"script\").first().data());\n     }\n \n     @Test public void handlesUnclosedRawtextAtEof() {\n         Document doc = Jsoup.parse(\"<textarea>One</textarea>\");\n         assertEquals(\"<textarea>One</textarea>\", doc.body().html());\n     }\n+\n+    @Test public void handlesEscapedScript() {\n+        Document doc = Jsoup.parse(\"<script><!-- one <script>Blah</script> --></script>\");\n+        assertEquals(\"<!-- one <script>Blah</script> -->\", doc.select(\"script\").first().data());\n+    }\n }", "timestamp": 1309605131, "metainfo": ""}