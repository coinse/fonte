{"sha": "b25f8506cc212c33c0779864448a2e870dc93f34", "log": "Renaming in some selectors", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/jsoup/select/ng/PrevSiblingSelector.java\n+package org.jsoup.select.ng;\n+\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Evaluator;\n+\n+public class PrevSiblingSelector extends Evaluator {\n+\tEvaluator sel;\n+\t\n+\tpublic PrevSiblingSelector(Evaluator sel) {\n+\t\tthis.sel = sel;\n+\t}\n+\n+\t@Override\n+\tpublic boolean matches(Element element) {\n+\t\tElement prev = element.previousElementSibling();\n+\t\t\n+\t\tif(prev != null && sel.matches(prev))\n+\t\t\treturn true;\n+\t\t\n+\t\treturn false;\n+\t}\n+\n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/select/ng/PreviousSequentSiblingSelector.java\n+package org.jsoup.select.ng;\n+\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Evaluator;\n+\n+public class PreviousSequentSiblingSelector extends Evaluator {\n+\tEvaluator sel;\n+\t\n+\t\n+\n+\tpublic PreviousSequentSiblingSelector(Evaluator sel) {\n+\t\tthis.sel = sel;\n+\t}\n+\n+\n+\n+\t@Override\n+\tpublic boolean matches(Element element) {\n+\t\tElement prev = element.previousElementSibling();\n+\t\t\n+\t\twhile(prev != null) {\n+\t\t\tif(sel.matches(prev))\n+\t\t\t\treturn true;\n+\t\t\t\n+\t\t\tprev = prev.previousElementSibling();\n+\t\t}\n+\t\t\n+\t\treturn false;\n+\t}\n+\n+}\n--- a/src/test/java/org/jsoup/select/SelectorNGTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorNGTest.java\n import org.jsoup.nodes.Evaluator;\n import org.jsoup.select.ng.BasicSelector;\n import org.jsoup.select.ng.ElementSelector;\n+import org.jsoup.select.ng.ImmediateParentSelector;\n+import org.jsoup.select.ng.PrevSiblingSelector;\n import org.jsoup.select.ng.ParentSelector;\n import org.jsoup.select.ng.SelectMatch;\n+import org.jsoup.select.ng.PreviousSequentSiblingSelector;\n import org.junit.Test;\n \n public class SelectorNGTest extends TestCase {\n         assertEquals(\"span\", els.first().tagName());\n     }\n \n-    /*@Test public void parentChildElement() {\n+    @Test \n+    public void testParentChildElement() {\n         String h = \"<div id=1><div id=2><div id = 3></div></div></div><div id=4></div>\";\n         Document doc = Jsoup.parse(h);\n \n-        Elements divs = doc.select(\"div > div\");\n+        Elements divs = SelectMatch.match(doc, \n+        \t\tnew Evaluator.Tag(\"div\"), \n+        \t\tnew ImmediateParentSelector(new Evaluator.Tag(\"div\")));\n         assertEquals(2, divs.size());\n         assertEquals(\"2\", divs.get(0).id()); // 2 is child of 1\n         assertEquals(\"3\", divs.get(1).id()); // 3 is child of 2\n \n-        Elements div2 = doc.select(\"div#1 > div\");\n+        Elements div2 = SelectMatch.match(doc, new Evaluator.Tag(\"div\"),\n+        \t\tnew ImmediateParentSelector(new ElementSelector(\"div\", null, \"1\"))); //\"div#1 > div\";\n         assertEquals(1, div2.size());\n         assertEquals(\"2\", div2.get(0).id());\n     }\n     \n-    @Test public void parentWithClassChild() {\n+    /*@Test public void parentWithClassChild() {\n         String h = \"<h1 class=foo><a href=1 /></h1><h1 class=foo><a href=2 class=bar /></h1><h1><a href=3 /></h1>\";\n         Document doc = Jsoup.parse(h);\n         \n         assertEquals(1, doc.select(\"DIV[TITLE]\").size());\n         assertEquals(1, doc.select(\"DIV[TITLE=BAR]\").size());\n         assertEquals(0, doc.select(\"DIV[TITLE=BARBARELLA\").size());\n-    }\n-    \n-    @Test public void adjacentSiblings() {\n+    }*/\n+    \n+    @Test \n+    public void testAdjacentSiblings() {\n         String h = \"<ol><li>One<li>Two<li>Three</ol>\";\n         Document doc = Jsoup.parse(h);\n-        Elements sibs = doc.select(\"li + li\");\n+        Elements sibs = SelectMatch.match(doc, new Evaluator.Tag(\"li\"), \n+        \t\tnew PrevSiblingSelector(new Evaluator.Tag(\"li\"))); //\"li + li\");\n         assertEquals(2, sibs.size());\n         assertEquals(\"Two\", sibs.get(0).text());\n         assertEquals(\"Three\", sibs.get(1).text());\n     }\n     \n-    @Test public void adjacentSiblingsWithId() {\n+    @Test \n+    public void testAdjacentSiblingsWithId() {\n         String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n         Document doc = Jsoup.parse(h);\n-        Elements sibs = doc.select(\"li#1 + li#2\");\n+        Elements sibs = SelectMatch.match(doc, new ElementSelector(\"li\", null, \"2\"),\n+        \t\tnew PrevSiblingSelector(new ElementSelector(\"li\", null, \"1\")));//doc.select(\"li#1 + li#2\");\n         assertEquals(1, sibs.size());\n         assertEquals(\"Two\", sibs.get(0).text());\n     }\n     \n-    @Test public void notAdjacent() {\n+    @Test public void testNotAdjacent() {\n         String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n         Document doc = Jsoup.parse(h);\n-        Elements sibs = doc.select(\"li#1 + li#3\");\n+        Elements sibs = SelectMatch.match(doc, new ElementSelector(\"li\", null, \"3\"),\n+        \t\tnew PrevSiblingSelector(new ElementSelector(\"li\", null, \"1\")));//doc.select(\"li#1 + li#2\");//doc.select(\"li#1 + li#3\");\n         assertEquals(0, sibs.size());\n     }\n     \n-    @Test public void mixCombinator() {\n+    /*@Test public void mixCombinator() {\n         String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n         Document doc = Jsoup.parse(h);\n         Elements sibs = doc.select(\"body > div.foo li + li\");\n         assertEquals(\"ol\", els.get(0).tagName());\n         assertEquals(\"Two\", els.get(1).text());\n         assertEquals(\"Three\", els.get(2).text());\n-    }\n-    \n-    @Test public void generalSiblings() {\n+    }*/\n+    \n+    @Test \n+    public void testGeneralSiblings() {\n         String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n         Document doc = Jsoup.parse(h);\n-        Elements els = doc.select(\"#1 ~ #3\");\n+        Elements els = SelectMatch.match(doc, new Evaluator.Id(\"3\"), new PreviousSequentSiblingSelector(new Evaluator.Id(\"1\")));//doc.select(\"#1 ~ #3\");\n         assertEquals(1, els.size());\n         assertEquals(\"Three\", els.first().text());\n     }\n     \n     // for http://github.com/jhy/jsoup/issues#issue/10\n-    @Test public void testCharactersInIdAndClass() {\n+  /*  @Test public void testCharactersInIdAndClass() {\n         // using CSS spec for identifiers (id and class): a-z0-9, -, _. NOT . (which is OK in html spec, but not css)\n         String h = \"<div><p id='a1-foo_bar'>One</p><p class='b2-qux_bif'>Two</p></div>\";\n         Document doc = Jsoup.parse(h);\n         doc = Jsoup.parse(h);\n         Element div = doc.select(\"div\").select(\" > div\").first();\n         assertEquals(\"2\", div.id());\n-    }\n-    \n-    @Test public void testPseudoLessThan() {\n+    }*/\n+    \n+    @Test \n+    public void testPseudoLessThan() {\n         Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n-        Elements ps = doc.select(\"div p:lt(2)\");\n+        Elements ps = SelectMatch.match(doc, new Evaluator.Tag(\"p\"), new Evaluator.IndexLessThan(2), \n+        \t\tnew ParentSelector(new Evaluator.Tag(\"div\"))); //\"div p:lt(2)\");\n         assertEquals(3, ps.size());\n         assertEquals(\"One\", ps.get(0).text());\n         assertEquals(\"Two\", ps.get(1).text());\n         assertEquals(\"Four\", ps.get(2).text());\n     }\n     \n-    @Test public void testPseudoGreaterThan() {\n+    /*@Test public void testPseudoGreaterThan() {\n         Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>\");\n         Elements ps = doc.select(\"div p:gt(0)\");\n         assertEquals(2, ps.size());", "timestamp": 1309605123, "metainfo": ""}