{"sha": "5e52f1b266173593fab32fe9d8a4963066b2f2fe", "log": "Fixed support for case-sensitive HTML escape entities.  Fixes #31", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n         base, extended\n     }\n \n-    private static final Map<String, Character> base;\n     private static final Map<String, Character> full;\n     private static final Map<Character, String> baseByVal;\n     private static final Map<Character, String> fullByVal;\n                 } catch (NumberFormatException e) {\n                 } // skip\n             } else {\n-                String name = m.group(1).toLowerCase();\n+                String name = m.group(1);\n                 if (full.containsKey(name))\n                     charval = full.get(name);\n             }\n     };\n \n     static {\n-        base = new HashMap<String, Character>(baseArray.length);\n         full = new HashMap<String, Character>(fullArray.length);\n         baseByVal = new HashMap<Character, String>(baseArray.length);\n         fullByVal = new HashMap<Character, String>(fullArray.length);\n \n         for (Object[] entity : baseArray) {\n             Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());\n-            base.put((String) entity[0], c);\n-            baseByVal.put(c, ((String) entity[0]).toLowerCase());\n+            baseByVal.put(c, ((String) entity[0]));\n         }\n         for (Object[] entity : fullArray) {\n             Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());\n             full.put((String) entity[0], c);\n-            fullByVal.put(c, ((String) entity[0]).toLowerCase());\n+            fullByVal.put(c, ((String) entity[0]));\n         }\n     }\n \n--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java\n+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java\n \n public class EntitiesTest {\n     @Test public void escape() {\n-        String text = \"Hello &<> \u00c5 \u03c0 \u65b0 there\";\n+        String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there\";\n         String escapedAscii = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.base);\n         String escapedAsciiFull = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.extended);\n         String escapedUtf = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n \n-        assertEquals(\"Hello &amp;&lt;&gt; &aring; &#960; &#26032; there\", escapedAscii);\n-        assertEquals(\"Hello &amp;&lt;&gt; &angst; &pi; &#26032; there\", escapedAsciiFull);\n-        assertEquals(\"Hello &amp;&lt;&gt; &aring; \u03c0 \u65b0 there\", escapedUtf);\n+        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#960; &#26032; there\", escapedAscii);\n+        assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#26032; there\", escapedAsciiFull);\n+        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; \u03c0 \u65b0 there\", escapedUtf);\n         // odd that it's defined as aring in base but angst in full\n     }\n \n     @Test public void unescape() {\n-        String text = \"Hello &amp;&LT&gt; &ANGST &#960; &#960 &#x65B0; there &!\";\n+        String text = \"Hello &amp;&LT&gt; &angst &#960; &#960 &#x65B0; there &!\";\n         assertEquals(\"Hello &<> \u00c5 \u03c0 \u03c0 \u65b0 there &!\", Entities.unescape(text));\n \n         assertEquals(\"&0987654321; &unknown\", Entities.unescape(\"&0987654321; &unknown\"));\n     }\n+    \n+    @Test public void caseSensitive() {\n+        String unescaped = \"\u00dc \u00fc & &\";\n+        assertEquals(\"&Uuml; &uuml; &amp; &amp;\", Entities.escape(unescaped, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.extended));\n+        \n+        String escaped = \"&Uuml; &uuml; &amp; &AMP\";\n+        assertEquals(\"\u00dc \u00fc & &\", Entities.unescape(escaped));\n+    }\n }", "timestamp": 1309605118, "metainfo": ""}