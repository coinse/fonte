{"sha": "528b793d86be485f7b4fff51f97e67708eb632da", "log": "Added restricted XHTML output entity option", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n import java.util.regex.Pattern;\n \n /**\n- * HMTL entities, and escape routines.\n+ * HTML entities, and escape routines.\n  * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n  * named character references</a>.\n  */\n public class Entities {\n     public enum EscapeMode {\n-        minimum(minimumByVal), base(baseByVal), extended(fullByVal);\n+        /** Restricted entities suitable for XHTML output: lt, gt, amp, apos, and quot only. */\n+        xhtml(xhtmlByVal),\n+        /** Default HTML output entities. */\n+        base(baseByVal),\n+        /** Complete HTML entities. */\n+        extended(fullByVal);\n \n         private Map<Character, String> map;\n \n     }\n \n     private static final Map<String, Character> full;\n-    private static final Map<Character, String> minimumByVal;\n+    private static final Map<Character, String> xhtmlByVal;\n     private static final Map<Character, String> baseByVal;\n     private static final Map<Character, String> fullByVal;\n     private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");\n         return accum.toString();\n     }\n \n-    private static final Object[][] minimumArray = {\n+    // xhtml has restricted entities\n+    private static final Object[][] xhtmlArray = {\n             {\"quot\", 0x00022},\n             {\"amp\", 0x00026},\n             {\"apos\", 0x00027},\n \n     static {\n         full = new HashMap<String, Character>(fullArray.length);\n-        minimumByVal = new HashMap<Character, String>(minimumArray.length);\n+        xhtmlByVal = new HashMap<Character, String>(xhtmlArray.length);\n         baseByVal = new HashMap<Character, String>(baseArray.length);\n         fullByVal = new HashMap<Character, String>(fullArray.length);\n \n-        for (Object[] entity : minimumArray) {\n+        for (Object[] entity : xhtmlArray) {\n             Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());\n-            minimumByVal.put(c, ((String) entity[0]));\n+            xhtmlByVal.put(c, ((String) entity[0]));\n         }\n         for (Object[] entity : baseArray) {\n             Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n         assertEquals(\"<p title=\\\"&pi;\\\">&pi; &amp; &lt; &gt; </p>\", doc.body().html());\n     }\n \n-    @Test public void testReferences() {\n+    @Test public void testXhtmlReferences() {\n         Document doc = Jsoup.parse(\"&lt; &gt; &amp; &quot; &apos; &times;\");\n-        doc.outputSettings().escapeMode(Entities.EscapeMode.minimum);\n+        doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);\n         assertEquals(\"&lt; &gt; &amp; &quot; &apos; \u00d7\", doc.body().html());\n     }\n \n--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java\n+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java\n         String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there\";\n         String escapedAscii = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.base);\n         String escapedAsciiFull = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.extended);\n+        String escapedAsciiXhtml = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.xhtml);\n         String escapedUtf = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n \n         assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#960; &#26032; there\", escapedAscii);\n         assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#26032; there\", escapedAsciiFull);\n+        assertEquals(\"Hello &amp;&lt;&gt; &#197; &#229; &#960; &#26032; there\", escapedAsciiXhtml);\n         assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; \u03c0 \u65b0 there\", escapedUtf);\n         // odd that it's defined as aring in base but angst in full\n     }", "timestamp": 1309605121, "metainfo": ""}