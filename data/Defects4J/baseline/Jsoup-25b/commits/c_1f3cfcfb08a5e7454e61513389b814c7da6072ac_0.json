{"sha": "1f3cfcfb08a5e7454e61513389b814c7da6072ac", "log": "Implemented select(query, query, query) or group selector.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n         String value = StringEscapeUtils.unescapeHtml(encodedValue);\n         return new Attribute(unencodedKey, value);\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (!(o instanceof Attribute)) return false;\n+\n+        Attribute attribute = (Attribute) o;\n+\n+        if (key != null ? !key.equals(attribute.key) : attribute.key != null) return false;\n+        if (value != null ? !value.equals(attribute.value) : attribute.value != null) return false;\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = key != null ? key.hashCode() : 0;\n+        result = 31 * result + (value != null ? value.hashCode() : 0);\n+        return result;\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n         }\n         return accum.toString();\n     }\n+\n     public String toString() {\n         return html();\n     }\n \n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (!(o instanceof Attributes)) return false;\n \n+        Attributes that = (Attributes) o;\n+\n+        if (attributes != null ? !attributes.equals(that.attributes) : that.attributes != null) return false;\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return attributes != null ? attributes.hashCode() : 0;\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n         return outerHtml();\n     }\n \n-\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (!(o instanceof Element)) return false;\n+        if (!super.equals(o)) return false;\n+\n+        Element element = (Element) o;\n+\n+        if (tag != null ? !tag.equals(element.tag) : element.tag != null) return false;\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = super.hashCode();\n+        result = 31 * result + (tag != null ? tag.hashCode() : 0);\n+        return result;\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     public String toString() {\n         return outerHtml();\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        // todo: have nodes hold a child index, compare against that and parent (not children)\n+        return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = parentNode != null ? parentNode.hashCode() : 0;\n+        // not children, or will block stack as they go back up to parent)\n+        result = 31 * result + (attributes != null ? attributes.hashCode() : 0);\n+        return result;\n+    }\n }\n--- a/src/main/java/org/jsoup/select/ElementList.java\n+++ b/src/main/java/org/jsoup/select/ElementList.java\n \n     public ElementList() {\n         contents = new ArrayList<Element>();\n+    }\n+\n+    public ElementList(Collection<Element> elements) {\n+        contents = new ArrayList<Element>(elements);\n     }\n \n     // implements List<Element> delegates:\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n import org.jsoup.nodes.Element;\n import org.jsoup.parser.TokenQueue;\n \n+import java.util.LinkedHashSet;\n import java.util.List;\n \n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class Selector {\n     private final Element root;\n-    private final ElementList elements;\n+    private final LinkedHashSet<Element> elements; // LHS for unique and ordered elements\n     private final String query;\n     private final TokenQueue tq;\n \n         Validate.notEmpty(query);\n         Validate.notNull(root);\n \n-        this.elements = new ElementList();\n+        this.elements = new LinkedHashSet<Element>();\n         this.query = query.trim();\n         this.root = root;\n         this.tq = new TokenQueue(query);\n                 byTag();\n             } else if (tq.matchChomp(\"[\")) {\n                 byAttribute();\n+            } else if (tq.matchChomp(\",\")) {\n+                groupOr();\n             } else { // unhandled\n                 throw new SelectorParseException(\"Could not parse query \" + query);\n             }\n         }\n-        return elements;\n+        return new ElementList(elements);\n     }\n \n     private void byId() {\n         else {\n             elements.addAll(root.getElementsWithAttribute(key));\n         }\n+    }\n \n+    private void groupOr() {\n+        // no-op; just append uniques\n     }\n \n     public static class SelectorParseException extends IllegalStateException {\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(2, withTitle.size());\n         assertEquals(1, foo.size());\n     }\n+\n+    @Test public void testGroupOr() {\n+        String h = \"<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>\";\n+        ElementList els = Jsoup.parse(h).select(\"p,div,[title]\");\n+\n+        assertEquals(5, els.size());\n+        assertEquals(\"p\", els.get(0).tagName());\n+        assertEquals(\"div\", els.get(1).tagName());\n+        assertEquals(\"foo\", els.get(1).attr(\"title\"));\n+        assertEquals(\"div\", els.get(2).tagName());\n+        assertEquals(\"bar\", els.get(2).attr(\"title\"));\n+        assertEquals(\"div\", els.get(3).tagName());\n+        assertNull(els.get(3).attr(\"title\"));\n+        assertEquals(\"span\", els.get(4).tagName());\n+\n+    }\n }", "timestamp": 1309605101, "metainfo": ""}