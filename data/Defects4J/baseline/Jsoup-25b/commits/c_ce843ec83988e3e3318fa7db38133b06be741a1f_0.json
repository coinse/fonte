{"sha": "ce843ec83988e3e3318fa7db38133b06be741a1f", "log": "Initial implementation of Connection", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n import java.net.URL;\n import java.util.Map;\n import java.util.Collection;\n+import java.io.IOException;\n \n /**\n  * DRAFT interface to support HTTP connections.\n \n     public Connection cookie(String name, String value);\n \n-    public Document get();\n+    public Document get() throws IOException;\n \n-    public Document post();\n+    public Document post() throws IOException;\n \n-    public Response execute();\n+    public Response execute() throws IOException;\n \n     public Request request();\n \n     public interface Response extends Base<Response> {\n         public int statusCode();\n \n+        public String statusMessage();\n+\n+        public String charset();\n+\n+        public Document parse();\n+\n         public String body();\n \n         public byte[] bodyAsBytes();\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n import org.jsoup.parser.Parser;\n import org.jsoup.safety.Cleaner;\n import org.jsoup.safety.Whitelist;\n+import org.jsoup.helper.DataUtil;\n+import org.jsoup.helper.HttpConnection;\n \n import java.io.File;\n import java.io.IOException;\n      the response stream.\n      */\n     public static Document parse(URL url, int timeoutMillis) throws IOException {\n-        return DataUtil.load(url, timeoutMillis);\n+        Connection con = HttpConnection.connect(url);\n+        con.timeout(timeoutMillis / 1000);\n+        return con.get();\n+    }\n+\n+    public static Connection connect(String url) {\n+        return HttpConnection.connect(url);\n     }\n \n     /**\n--- /dev/null\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n+package org.jsoup.helper;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+\n+import java.io.*;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Internal static utilities for handling data.\n+ *\n+ */\n+public class DataUtil {\n+    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=([^\\\\s;]*)\");\n+    static final String defaultCharset = \"UTF-8\"; // used if not found in header or meta charset\n+    private static final int bufferSize = 0x20000; // ~130K.\n+    \n+    /**\n+     * Loads a file to a String.\n+     * @param in\n+     * @param charsetName\n+     * @return\n+     * @throws IOException\n+     */\n+    public static Document load(File in, String charsetName, String baseUri) throws IOException {\n+        InputStream inStream = new FileInputStream(in);\n+        ByteBuffer byteData = readToByteBuffer(inStream);\n+        Document doc = parseByteData(byteData, charsetName, baseUri);\n+        inStream.close();\n+        return doc;\n+    }\n+\n+    // reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\n+    // switching the chartset midstream when a meta http-equiv tag defines the charset.\n+    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {\n+        String docData;\n+        Document doc = null;\n+        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n+            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n+            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n+            doc = Jsoup.parse(docData, baseUri);\n+            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n+            if (meta != null) { // if not found, will keep utf-8 as best attempt\n+                String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n+                if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode\n+                    charsetName = foundCharset;\n+                    byteData.rewind();\n+                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n+                    doc = null;\n+                }\n+            }\n+        } else { // specified by content type header (or by user on file load)\n+            docData = Charset.forName(charsetName).decode(byteData).toString();\n+        }\n+        if (doc == null) {\n+            doc = Jsoup.parse(docData, baseUri);\n+            doc.outputSettings().charset(charsetName);\n+        }\n+        return doc;\n+    }\n+\n+    static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {\n+        byte[] buffer = new byte[bufferSize];\n+        ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);\n+        int read;\n+        while(true) {\n+            read  = inStream.read(buffer);\n+            if (read == -1) break;\n+            outStream.write(buffer, 0, read);\n+        }\n+        ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());\n+        return byteData;\n+    }\n+\n+    /**\n+     * Parse out a charset from a content type header.\n+     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n+     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n+     */\n+    static String getCharsetFromContentType(String contentType) {\n+        if (contentType == null) return null;\n+        \n+        Matcher m = charsetPattern.matcher(contentType);\n+        if (m.find()) {\n+            return m.group(1).trim().toUpperCase();\n+        }\n+        return null;\n+    }\n+    \n+    \n+}\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n \n import org.jsoup.Connection;\n import org.jsoup.nodes.Document;\n-\n+import org.jsoup.parser.TokenQueue;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n import java.net.MalformedURLException;\n import java.net.URL;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.Collection;\n-import java.util.ArrayList;\n-\n-/**\n- * DRAFT implementation of Connection.\n- */\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/** DRAFT implementation of Connection. */\n public class HttpConnection implements Connection {\n+    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=([^\\\\s;]*)\");\n+\n+    public static Connection connect(String url) {\n+        Connection con = new HttpConnection();\n+        con.url(url);\n+        return con;\n+    }\n+\n+    public static Connection connect(URL url) {\n+        Connection con = new HttpConnection();\n+        con.url(url);\n+        return con;\n+    }\n+\n     private Connection.Request req;\n     private Connection.Response res;\n \n     }\n \n     public Connection data(String... keyvals) {\n-        for (int i = 0; i < keyvals.length; i+=2) {\n-            req.data(KeyVal.create(keyvals[i], keyvals[i+1]));\n+        for (int i = 0; i < keyvals.length; i += 2) {\n+            req.data(KeyVal.create(keyvals[i], keyvals[i + 1]));\n         }\n         return this;\n     }\n         return this;\n     }\n \n-    public Document get() {\n+    public Document get() throws IOException {\n         req.method(Method.GET);\n         execute();\n-        // todo: parse for doc\n-        return null;\n-    }\n-\n-    public Document post() {\n+        return res.parse();\n+    }\n+\n+    public Document post() throws IOException {\n         req.method(Method.POST);\n         execute();\n-        // todo: parse for doc\n-        return null;\n-    }\n-\n-    public Connection.Response execute() {\n-        // todo: execute\n+        return res.parse();\n+    }\n+\n+    public Connection.Response execute() throws IOException {\n+        res = Response.execute(req);\n         return res;\n     }\n \n \n     @SuppressWarnings({\"unchecked\"})\n     private static abstract class Base<T extends Connection.Base> implements Connection.Base<T> {\n-        private URL url;\n-        private Method method;\n-        private Map<String, String> headers;\n-        private Map<String, String> cookies;\n+        URL url;\n+        Method method;\n+        Map<String, String> headers;\n+        Map<String, String> cookies;\n \n         private Base() {\n             headers = new LinkedHashMap<String, String>();\n \n         private Request() {\n             data = new ArrayList<Connection.KeyVal>();\n+            method = Connection.Method.GET;\n         }\n \n         public int timeout() {\n \n     public static class Response extends Base<Connection.Response> implements Connection.Response {\n         private int statusCode;\n+        private String statusMessage;\n+        private ByteBuffer byteData;\n+        private String charset;\n+\n+        static Response execute(Connection.Request req) throws IOException {\n+            URL url = req.url();\n+            String protocol = url.getProtocol();\n+            Validate\n+                .isTrue(protocol.equals(\"http\") || protocol.equals(\"https\"), \"Only http & https protocols supported\");\n+\n+            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n+            conn.setRequestMethod(req.method().name());\n+            conn.setInstanceFollowRedirects(true);\n+            conn.setConnectTimeout(req.timeout() * 1000);\n+            conn.setReadTimeout(req.timeout() * 1000);\n+            // todo: handle get params not in url, and post params\n+            conn.connect();\n+\n+            // todo: error handling options, allow user to get !200 without exception\n+            int status = conn.getResponseCode();\n+            if (status != HttpURLConnection.HTTP_OK)\n+                throw new IOException(status + \" error loading URL \" + url.toString());\n+            Response res = new Response();\n+            res.setupFromConnection(conn);\n+\n+            // todo: move to parse\n+            String contentType = conn.getContentType();\n+            if (contentType == null || !contentType.startsWith(\"text/\"))\n+                throw new IOException(String.format(\"Unhandled content type \\\"%s\\\" on URL %s. Must be text/*\",\n+                    contentType, url.toString()));\n+\n+            InputStream inStream = new BufferedInputStream(conn.getInputStream());\n+            res.byteData = DataUtil.readToByteBuffer(inStream);\n+            res.charset = getCharsetFromContentType(contentType); // may be null, readInputStream deals with it\n+            inStream.close();\n+\n+            return res;\n+        }\n \n         public int statusCode() {\n             return statusCode;\n         }\n \n+        public String statusMessage() {\n+            return statusMessage;\n+        }\n+\n+        public String charset() {\n+            return charset;\n+        }\n+\n+        public Document parse() {\n+            Document doc = DataUtil.parseByteData(byteData, charset, url.toExternalForm());\n+            byteData.rewind();\n+            charset = doc.outputSettings().charset().name(); // update charset from meta-equiv, possibly\n+            return doc;\n+        }\n+\n         public String body() {\n-            return null;\n+            // gets set from header on execute, and from meta-equiv on parse. parse may not have happened yet\n+            String body;\n+            if (charset == null)\n+                body = Charset.forName(DataUtil.defaultCharset).decode(byteData).toString();\n+            else\n+                body = Charset.forName(charset).decode(byteData).toString();\n+            byteData.rewind();\n+            return body;\n         }\n \n         public byte[] bodyAsBytes() {\n-            return new byte[0];\n+            return byteData.array();\n+        }\n+\n+        // set up url, method, header, cookies\n+        private void setupFromConnection(HttpURLConnection conn) throws IOException {\n+            method = Connection.Method.valueOf(conn.getRequestMethod());\n+            url = conn.getURL();\n+            statusCode = conn.getResponseCode();\n+            statusMessage = conn.getResponseMessage();\n+\n+            Map<String, List<String>> resHeaders = conn.getHeaderFields();\n+            for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {\n+                String name = entry.getKey();\n+                if (name == null)\n+                    continue; // http/1.1 line\n+\n+                List<String> values = entry.getValue();\n+\n+                if (name.equals(\"Set-Cookie\")) {\n+                    for (String value : values) {\n+                        TokenQueue cd = new TokenQueue(value);\n+                        String cookieName = cd.chompTo(\"=\").trim();\n+                        String cookieVal = cd.consumeTo(\";\").trim();\n+                        // ignores path, date, domain, secure et al. req'd?\n+                        cookie(cookieName, cookieVal);\n+                    }\n+                } else { // only take the first instance of each header\n+                    header(name, values.get(0));\n+                }\n+            }\n         }\n     }\n \n             return value;\n         }\n     }\n+\n+    /**\n+     * Parse out a charset from a content type header.\n+     *\n+     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n+     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n+     */\n+    private static String getCharsetFromContentType(String contentType) {\n+        if (contentType == null) return null;\n+\n+        Matcher m = charsetPattern.matcher(contentType);\n+        if (m.find()) {\n+            return m.group(1).trim().toUpperCase();\n+        }\n+        return null;\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java\n+package org.jsoup.helper;\n+\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n+\n+public class DataUtilTest {\n+    @Test\n+    public void testCharset() {\n+        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=utf-8 \"));\n+        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html; charset=UTF-8\"));\n+        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=ISO-8859-1\"));\n+        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html\"));\n+        assertEquals(null, DataUtil.getCharsetFromContentType(null));\n+    }\n+}\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n-import org.jsoup.nodes.Entities;\n import org.jsoup.select.Elements;\n+import static org.junit.Assert.*;\n import org.junit.Test;\n \n import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n \n-import static org.junit.Assert.*;\n-\n /**\n-\n- Integration test: parses from real-world example HTML.\n-\n- @author Jonathan Hedley, jonathan@hedley.net */\n+ * Integration test: parses from real-world example HTML.\n+ *\n+ * @author Jonathan Hedley, jonathan@hedley.net\n+ */\n public class ParseTest {\n \n-    @Test public void testSmhBizArticle() throws IOException {\n+    @Test\n+    public void testSmhBizArticle() throws IOException {\n         File in = getFile(\"/htmltests/smh-biz-article-1.html\");\n-        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n-        assertEquals(\"The board\u2019s next fear: the female quota\", doc.title()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n+        Document doc = Jsoup.parse(in, \"UTF-8\",\n+            \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n+        assertEquals(\"The board\u2019s next fear: the female quota\",\n+            doc.title()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n         assertEquals(\"en\", doc.select(\"html\").attr(\"xml:lang\"));\n \n         Elements articleBody = doc.select(\".articleBody > *\");\n         assertEquals(17, articleBody.size());\n         // todo: more tests!\n-        \n+\n     }\n-    \n-    @Test public void testNewsHomepage() throws IOException {\n+\n+    @Test\n+    public void testNewsHomepage() throws IOException {\n         File in = getFile(\"/htmltests/news-com-au-home.html\");\n         Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\");\n         assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title());\n         assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim());\n-        \n+\n         Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first();\n         assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\"));\n         assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\"));\n-        \n+\n         Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first();\n-        assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\"));\n+        assertEquals(\n+            \"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\",\n+            hs.attr(\"href\"));\n         assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\"));\n     }\n-    \n-    @Test public void testGoogleSearchIpod() throws IOException {\n+\n+    @Test\n+    public void testGoogleSearchIpod() throws IOException {\n         File in = getFile(\"/htmltests/google-ipod.html\");\n         Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\");\n         assertEquals(\"ipod - Google Search\", doc.title());\n         Elements results = doc.select(\"h3.r > a\");\n         assertEquals(12, results.size());\n-        assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", \n-                results.get(0).attr(\"href\"));\n+        assertEquals(\n+            \"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\",\n+            results.get(0).attr(\"href\"));\n         assertEquals(\"http://www.apple.com/itunes/\",\n-                results.get(1).attr(\"href\"));\n+            results.get(1).attr(\"href\"));\n     }\n-    \n-    @Test public void testBinary() throws IOException {\n+\n+    @Test\n+    public void testBinary() throws IOException {\n         File in = getFile(\"/htmltests/thumb.jpg\");\n         Document doc = Jsoup.parse(in, \"UTF-8\");\n         // nothing useful, but did not blow up\n         assertTrue(doc.text().contains(\"gd-jpeg\"));\n     }\n-    \n-    @Test public void testYahooJp() throws IOException {\n+\n+    @Test\n+    public void testYahooJp() throws IOException {\n         File in = getFile(\"/htmltests/yahoo-jp.html\");\n         Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.yahoo.co.jp/index.html\"); // http charset is utf-8.\n         assertEquals(\"Yahoo! JAPAN\", doc.title());\n         Element a = doc.select(\"a[href=t/2322m2]\").first();\n-        assertEquals(\"http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2\", \n-                a.attr(\"abs:href\")); // session put into <base>\n+        assertEquals(\"http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2\",\n+            a.attr(\"abs:href\")); // session put into <base>\n         assertEquals(\"\u5168\u56fd\u3001\u4eba\u6c17\u306e\u99c5\u30e9\u30f3\u30ad\u30f3\u30b0\", a.text());\n     }\n-    \n-    @Test public void testBaidu() throws IOException {\n+\n+    @Test\n+    public void testBaidu() throws IOException {\n         // tests <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\">\n         File in = getFile(\"/htmltests/baidu-cn-home.html\");\n-        Document doc = Jsoup.parse(in, null, \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n+        Document doc = Jsoup.parse(in, null,\n+            \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n         Element submit = doc.select(\"#su\").first();\n         assertEquals(\"\u767e\u5ea6\u4e00\u4e0b\", submit.attr(\"value\"));\n-        \n+\n         // test from attribute match\n         submit = doc.select(\"input[value=\u767e\u5ea6\u4e00\u4e0b]\").first();\n         assertEquals(\"su\", submit.id());\n         assertEquals(\"\\n<title>\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053      </title>\", doc.select(\"title\").outerHtml());\n \n         doc.outputSettings().charset(\"ascii\");\n-        assertEquals(\"\\n<title>&#30334;&#24230;&#19968;&#19979;&#65292;&#20320;&#23601;&#30693;&#36947;      </title>\", doc.select(\"title\").outerHtml());\n+        assertEquals(\"\\n<title>&#30334;&#24230;&#19968;&#19979;&#65292;&#20320;&#23601;&#30693;&#36947;      </title>\",\n+            doc.select(\"title\").outerHtml());\n     }\n-    \n-    @Test public void testHtml5Charset() throws IOException {\n+\n+    @Test\n+    public void testHtml5Charset() throws IOException {\n         // test that <meta charset=\"gb2312\"> works\n         File in = getFile(\"/htmltests/meta-charset-1.html\");\n         Document doc = Jsoup.parse(in, null, \"http://example.com/\"); //gb2312, has html5 <meta charset>\n         assertEquals(\"\u65b0\", doc.text());\n         assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n-        \n+\n         // double check, no charset, falls back to utf8 which is incorrect\n         in = getFile(\"/htmltests/meta-charset-2.html\"); //\n         doc = Jsoup.parse(in, null, \"http://example.com\"); // gb2312, no charset\n         assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n         assertFalse(\"\u65b0\".equals(doc.text()));\n-        \n+\n         // confirm fallback to utf8\n         in = getFile(\"/htmltests/meta-charset-3.html\");\n         doc = Jsoup.parse(in, null, \"http://example.com/\"); // utf8, no charset\n         assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n         assertEquals(\"\u65b0\", doc.text());\n     }\n-    \n-    @Test public void testNytArticle() throws IOException {\n+\n+    @Test\n+    public void testNytArticle() throws IOException {\n         // has tags like <nyt_text>\n         File in = getFile(\"/htmltests/nyt-article-1.html\");\n         Document doc = Jsoup.parse(in, null, \"http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp\");\n-        \n+\n         Element headline = doc.select(\"nyt_headline[version=1.0]\").first();\n         assertEquals(\"As BP Lays Out Future, It Will Not Include Hayward\", headline.text());\n     }\n-    \n+\n     File getFile(String resourceName) {\n         try {\n             File file = new File(ParseTest.class.getResource(resourceName).toURI());", "timestamp": 1309605118, "metainfo": ""}