{"sha": "cce36eccbc144814d3cef1d4c54cad1bcb75c150", "log": "- added tests  ", "commit": "\n--- a/src/test/org/apache/commons/cli2/validation/DateValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/DateValidatorTest.java\n-/**\n- * Copyright 2003-2004 The Apache Software Foundation\n+/*\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import junit.framework.TestSuite;\n \n /**\n+ * JUnit test case for DateValidator.\n+ *\n  * @author Rob Oxspring\n  * @author John Keyes\n  */\n             cal.set(2002, 1, 12);\n             final Date min = cal.getTime();\n             validator.setMinimum(min);\n+            assertTrue(\"maximum bound is set\", validator.getMaximum() == null);\n+            assertEquals(\"minimum bound is incorrect\", min, validator.getMinimum());\n             validator.validate(list);\n         }\n \n         }\n     }\n \n+    public void testFormats() throws InvalidArgumentException {\n+        final DateValidator validator = new DateValidator(formats);\n+        assertEquals(\"date formats are incorrect\", formats, validator.getFormats());\n+    }\n+\n     public void testMaximumBounds() throws InvalidArgumentException {\n         final DateValidator validator = new DateValidator(formats);\n         final Calendar cal = Calendar.getInstance();\n             cal.set(2004, 1, 12);\n             final Date max = cal.getTime();\n             validator.setMaximum(max);\n+            assertTrue(\"minimum bound is set\", validator.getMinimum() == null);\n+            assertEquals(\"maximum bound is incorrect\", max, validator.getMaximum());\n             validator.validate(list);\n         }\n \n--- a/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java\n         assertTrue(\"is a file validator\", validator.isFile());\n         assertTrue(\"is an existing file validator\", validator.isExisting());\n         assertFalse(\"is not a hidden file validator\", validator.isHidden());\n-        assertTrue(\"is not a readable file validator\", validator.isReadable());\n-        assertFalse(\"is a writable file validator\", validator.isWritable());\n+        assertFalse(\"is not a readable file validator\", validator.isReadable());\n+        assertTrue(\"is a writable file validator\", validator.isWritable());\n \n         try{\n             validator.validate(list);", "timestamp": 1125872111, "metainfo": ""}