{"sha": "24972c5eec9bb74dc7c1617c5df87a7ca60fd371", "log": "- improved code coverage - added leniant date parsing to DateValidator  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n  */\n package org.apache.commons.cli2.option;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n import java.util.Set;\n             return token;\n         }\n \n-        if (token.startsWith(\"\\\"\")) {\n-            token = token.substring(1, token.length());\n-        }\n-\n-        if (token.endsWith(\"\\\"\")) {\n-            token = token.substring(0, token.length() - 1);\n-        }\n+        token = token.substring(1, token.length() - 1);\n \n         return token;\n     }\n--- a/src/java/org/apache/commons/cli2/option/GroupImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/GroupImpl.java\n     }\n \n     public boolean canProcess(final WriteableCommandLine commandLine,\n-                              String arg) {\n+                              final String arg) {\n         if (arg == null) {\n             return false;\n         }\n--- a/src/java/org/apache/commons/cli2/option/ParentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ParentImpl.java\n-/**\n+/*\n  * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * A base implementation of Parent providing limited ground work for further\n  * Parent implementations.\n  */\n-public abstract class ParentImpl extends OptionImpl implements Parent {\n-\n+public abstract class ParentImpl\n+    extends OptionImpl implements Parent {\n     private static final char NUL = '\\0';\n-    \n     private final Group children;\n-\n     private final Argument argument;\n-\n     private final String description;\n \n-    protected ParentImpl(\n-        final Argument argument,\n-        final Group children,\n-        final String description,\n-        final int id,\n-        final boolean required) {\n-        super(id,required);\n+    protected ParentImpl(final Argument argument,\n+                         final Group children,\n+                         final String description,\n+                         final int id,\n+                         final boolean required) {\n+        super(id, required);\n         this.children = children;\n         this.argument = argument;\n         this.description = description;\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.Option#process(org.apache.commons.cli2.CommandLine,\n      *      java.util.ListIterator)\n      */\n-    public void process(\n-        final WriteableCommandLine commandLine,\n-        final ListIterator arguments)\n+    public void process(final WriteableCommandLine commandLine,\n+                        final ListIterator arguments)\n         throws OptionException {\n-\n         if (argument != null) {\n             handleInitialSeparator(arguments, argument.getInitialSeparator());\n         }\n             argument.processValues(commandLine, arguments, this);\n         }\n \n-        if (children != null && children.canProcess(commandLine, arguments)) {\n+        if ((children != null) && children.canProcess(commandLine, arguments)) {\n             children.process(commandLine, arguments);\n         }\n     }\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.Option#canProcess(java.lang.String)\n      */\n-    public boolean canProcess(final WriteableCommandLine commandLine, final String arg) {\n-\n+    public boolean canProcess(final WriteableCommandLine commandLine,\n+                              final String arg) {\n         final Set triggers = getTriggers();\n-        \n+\n         if (argument != null) {\n             final char separator = argument.getInitialSeparator();\n-            \n+\n             // if there is a valid separator character\n             if (separator != NUL) {\n                 final int initialIndex = arg.indexOf(separator);\n-                \n+\n                 // if there is a separator present\n                 if (initialIndex > 0) {\n                     return triggers.contains(arg.substring(0, initialIndex));\n                 }\n             }\n         }\n-        \n+\n         return triggers.contains(arg);\n     }\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.Option#prefixes()\n      */\n     public Set getPrefixes() {\n-        return (children == null)\n-            ? Collections.EMPTY_SET\n-            : children.getPrefixes();\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        return (children == null) ? Collections.EMPTY_SET : children.getPrefixes();\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.Option#validate(org.apache.commons.cli2.CommandLine)\n      */\n     public void validate(WriteableCommandLine commandLine)\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.Option#appendUsage(java.lang.StringBuffer,\n      *      java.util.Set, java.util.Comparator)\n      */\n-    public void appendUsage(\n-        final StringBuffer buffer,\n-        final Set helpSettings,\n-        final Comparator comp) {\n-\n+    public void appendUsage(final StringBuffer buffer,\n+                            final Set helpSettings,\n+                            final Comparator comp) {\n         final boolean displayArgument =\n-            this.argument != null\n-                && helpSettings.contains(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\n+            (this.argument != null) &&\n+            helpSettings.contains(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\n         final boolean displayChildren =\n-            this.children != null\n-                && helpSettings.contains(DisplaySetting.DISPLAY_PARENT_CHILDREN);\n+            (this.children != null) &&\n+            helpSettings.contains(DisplaySetting.DISPLAY_PARENT_CHILDREN);\n \n         if (displayArgument) {\n             buffer.append(' ');\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.Option#helpLines(int, java.util.Set,\n      *      java.util.Comparator)\n      */\n-    public List helpLines(\n-        final int depth,\n-        final Set helpSettings,\n-        final Comparator comp) {\n+    public List helpLines(final int depth,\n+                          final Set helpSettings,\n+                          final Comparator comp) {\n         final List helpLines = new ArrayList();\n         helpLines.add(new HelpLineImpl(this, depth));\n \n-        if (helpSettings.contains(DisplaySetting.DISPLAY_PARENT_ARGUMENT)\n-            && argument != null) {\n+        if (helpSettings.contains(DisplaySetting.DISPLAY_PARENT_ARGUMENT) && (argument != null)) {\n             helpLines.addAll(argument.helpLines(depth + 1, helpSettings, comp));\n         }\n \n-        if (helpSettings.contains(DisplaySetting.DISPLAY_PARENT_CHILDREN)\n-            && children != null) {\n+        if (helpSettings.contains(DisplaySetting.DISPLAY_PARENT_CHILDREN) && (children != null)) {\n             helpLines.addAll(children.helpLines(depth + 1, helpSettings, comp));\n         }\n \n      * @param arguments the current position in the arguments iterator\n      * @param separator the separator char to split on\n      */\n-    private void handleInitialSeparator(\n-        final ListIterator arguments, \n-        final char separator) {\n-        \n+    private void handleInitialSeparator(final ListIterator arguments,\n+                                        final char separator) {\n         // next token\n-        final String newArgument = (String)arguments.next();\n-        \n+        final String newArgument = (String) arguments.next();\n+\n         // split the token\n         final int initialIndex = newArgument.indexOf(separator);\n-        \n+\n         if (initialIndex > 0) {\n             arguments.remove();\n             arguments.add(newArgument.substring(0, initialIndex));\n             arguments.add(newArgument.substring(initialIndex + 1));\n             arguments.previous();\n         }\n-        arguments.previous();        \n-    }\n-    \n-\t/*\n-\t * @see org.apache.commons.cli2.Option#findOption(java.lang.String)\n-\t */\n-\tpublic Option findOption(final String trigger) {\n-\t\tfinal Option found = super.findOption(trigger);\n-\t\tif(found==null && children!=null){\n-\t\t\treturn children.findOption(trigger);\n-\t\t}\n-\t\telse{\n-\t\t\treturn found;\n-\t\t}\n-\t}\n-    \n+\n+        arguments.previous();\n+    }\n+\n+    /*\n+     * @see org.apache.commons.cli2.Option#findOption(java.lang.String)\n+     */\n+    public Option findOption(final String trigger) {\n+        final Option found = super.findOption(trigger);\n+\n+        if ((found == null) && (children != null)) {\n+            return children.findOption(trigger);\n+        } else {\n+            return found;\n+        }\n+    }\n+\n     public void defaults(final WriteableCommandLine commandLine) {\n         super.defaults(commandLine);\n-        \n-        if(argument!=null) {\n-            argument.defaultValues(commandLine,this);\n-        }\n-        \n-        if(children!=null) {\n+\n+        if (argument != null) {\n+            argument.defaultValues(commandLine, this);\n+        }\n+\n+        if (children != null) {\n             children.defaults(commandLine);\n         }\n     }\n--- a/src/java/org/apache/commons/cli2/validation/DateValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/DateValidator.java\n import java.text.ParsePosition;\n \n import java.util.Date;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n \n     /** maximum Date allowed i.e: a valid date occurs earlier than this date */\n     private Date maximum;\n \n+    /** leniant parsing */\n+    private boolean isLenient;\n+\n     /**\n      * Creates a Validator for the default date/time format\n      */\n      *            a List of DateFormats which dates must conform to\n      */\n     public DateValidator(final List formats) {\n+        for (Iterator iter = formats.iterator(); iter.hasNext();) {\n+            DateFormat format = (DateFormat) iter.next();\n+        }\n+\n         setFormats(formats);\n     }\n \n             for (int f = 0; (f < this.formats.length) && (date == null); ++f) {\n                 // reset the parse position\n                 pp.setIndex(0);\n-\n-                // TODO: should we call setLenient(false) on\n-                //       each DateFormat or allow the user\n-                //       to specify the parsing used\n                 date = this.formats[f].parse(value, pp);\n \n                 // if the wrong number of characters have been parsed\n         }\n     }\n \n+    public void setLeniant(final boolean lenient) {\n+        for (int i = 0; i < this.formats.length; i++) {\n+            this.formats[i].setLenient(lenient);\n+        }\n+\n+        this.isLenient = lenient;\n+    }\n+\n+    public boolean isLeniant() {\n+        return this.isLenient;\n+    }\n+\n     /**\n      * Returns the maximum date permitted.\n      *\n      */\n     public void setFormats(final DateFormat[] formats) {\n         this.formats = formats;\n+        setLeniant(this.isLenient);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java\n+++ b/src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java\n \n /**\n  * @author Rob Oxspring\n- *\n- * To change the template for this generated type comment go to\n- * Window - Preferences - Java - Code Generation - Code and Comments\n  */\n public class DefaultingCommandLineTest\n     extends CommandLineTestCase {\n--- a/src/test/org/apache/commons/cli2/option/ArgumentTest.java\n+++ b/src/test/org/apache/commons/cli2/option/ArgumentTest.java\n package org.apache.commons.cli2.option;\n \n import java.text.ParseException;\n+\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import org.apache.commons.cli2.Option;\n import org.apache.commons.cli2.OptionException;\n import org.apache.commons.cli2.WriteableCommandLine;\n+import org.apache.commons.cli2.builder.ArgumentBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;\n+import org.apache.commons.cli2.resource.ResourceConstants;\n import org.apache.commons.cli2.resource.ResourceHelper;\n import org.apache.commons.cli2.validation.DateValidator;\n import org.apache.commons.cli2.validation.DateValidatorTest;\n /**\n  * @author Rob Oxspring\n  */\n-public class ArgumentTest extends ArgumentTestCase {\n-\n+public class ArgumentTest\n+    extends ArgumentTestCase {\n     private ResourceHelper resources = ResourceHelper.getResourceHelper();\n-    \n+\n     public static Argument buildUsernameArgument() {\n-        return new ArgumentImpl(\n-            \"username\",\n-            \"The user to connect as\",\n-            1,\n-            1,\n-            '\\0',\n-            '\\0',\n-            null,\n-            ArgumentImpl.DEFAULT_CONSUME_REMAINING,\n-            null,\n-            0);\n+        return new ArgumentImpl(\"username\", \"The user to connect as\", 1, 1, '\\0', '\\0', null,\n+                                ArgumentImpl.DEFAULT_CONSUME_REMAINING, null, 0);\n     }\n \n     public static Argument buildHostArgument() {\n-        return new ArgumentImpl(\n-            \"host\",\n-            \"The host name\",\n-            2,\n-            3,\n-            '\\0',\n-            ',',\n-            null,\n-            null,\n-            null,\n-            0);\n+        return new ArgumentImpl(\"host\", \"The host name\", 2, 3, '\\0', ',', null, null, null, 0);\n     }\n \n     public static Argument buildPathArgument() {\n-        return new ArgumentImpl(\n-            \"path\",\n-            \"The place to look for files\",\n-            1,\n-            Integer.MAX_VALUE,\n-            '=',\n-            ';',\n-            null,\n-            ArgumentImpl.DEFAULT_CONSUME_REMAINING,\n-            null,\n-            0);\n+        return new ArgumentImpl(\"path\", \"The place to look for files\", 1, Integer.MAX_VALUE, '=',\n+                                ';', null, ArgumentImpl.DEFAULT_CONSUME_REMAINING, null, 0);\n     }\n \n     public static Argument buildDateLimitArgument() {\n-        return new ArgumentImpl(\n-            \"limit\",\n-            \"the last acceptable date\",\n-            0,\n-            1,\n-            '=',\n-            '\\0',\n-            new DateValidator(DateValidatorTest.YYYY_MM_YY),\n-            null,\n-            null,\n-            0);\n+        return new ArgumentImpl(\"limit\", \"the last acceptable date\", 0, 1, '=', '\\0',\n+                                new DateValidator(DateValidatorTest.YYYY_MM_YY), null, null, 0);\n     }\n \n     public static Argument buildTargetsArgument() {\n-        return new ArgumentImpl(\n-            \"target\",\n-            \"The targets ant should build\",\n-            0,\n-            Integer.MAX_VALUE,\n-            '\\0',\n-            ',',\n-            null,\n-            null,\n-            null,\n-            0);\n-    }\n-    \n+        return new ArgumentImpl(\"target\", \"The targets ant should build\", 0, Integer.MAX_VALUE,\n+                                '\\0', ',', null, null, null, 0);\n+    }\n+\n     public static Argument buildSizeArgument() {\n         List defaults = new ArrayList();\n         defaults.add(\"10\");\n \n-        return new ArgumentImpl(\n-            \"size\",\n-            \"The number of units\",\n-            1,\n-            1,\n-            '\\0',\n-            '\\0',\n-            null,\n-            ArgumentImpl.DEFAULT_CONSUME_REMAINING,\n-            defaults,\n-            0);\n+        return new ArgumentImpl(\"size\", \"The number of units\", 1, 1, '\\0', '\\0', null,\n+                                ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);\n     }\n \n     public static Argument buildBoundsArgument() {\n         defaults.add(\"5\");\n         defaults.add(\"10\");\n \n-        return new ArgumentImpl(\n-            \"size\",\n-            \"The number of units\",\n-            2,\n-            2,\n-            '\\0',\n-            '\\0',\n-            null,\n-            ArgumentImpl.DEFAULT_CONSUME_REMAINING,\n-            defaults,\n-            0);\n+        return new ArgumentImpl(\"size\", \"The number of units\", 2, 2, '\\0', '\\0', null,\n+                                ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);\n     }\n \n     public void testNew() {\n+        try {\n+            new ArgumentImpl(\"limit\", \"the last acceptable date\", 10, 5, '=', '\\0',\n+                             new DateValidator(DateValidatorTest.YYYY_MM_YY), null, null, 0);\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(resources.getMessage(\"Argument.minimum.exceeds.maximum\"), e.getMessage());\n+        }\n+\n         {\n-            try {\n-                new ArgumentImpl(\n-                        \"limit\",\n-                        \"the last acceptable date\",\n-                        10,\n-                        5,\n-                        '=',\n-                        '\\0',\n-                        new DateValidator(DateValidatorTest.YYYY_MM_YY),\n-                        null,\n-                        null,\n-                        0);\n-            } catch (IllegalArgumentException e) {\n-                assertEquals(\n-                        resources.getMessage(\"Argument.minimum.exceeds.maximum\"),\n-                        e.getMessage());\n-            }\n-        }\n-        {\n-            ArgumentImpl arg = new ArgumentImpl(\n-                    null,\n-                    \"the last acceptable date\",\n-                    5,\n-                    5,\n-                    '=',\n-                    '\\0',\n-                    new DateValidator(DateValidatorTest.YYYY_MM_YY),\n-                    null,\n-                    null,\n-                    0);\n+            ArgumentImpl arg =\n+                new ArgumentImpl(null, \"the last acceptable date\", 5, 5, '=', '\\0',\n+                                 new DateValidator(DateValidatorTest.YYYY_MM_YY), null, null, 0);\n             assertEquals(\"wrong arg name\", \"arg\", arg.getPreferredName());\n         }\n \n         {\n             List defaults = new ArrayList();\n-            \n+\n             try {\n-                new ArgumentImpl(\n-                    null,\n-                    \"the last acceptable date\",\n-                    1,\n-                    1,\n-                    '=',\n-                    '\\0',\n-                    new DateValidator(DateValidatorTest.YYYY_MM_YY),\n-                    null,\n-                    defaults,\n-                    0);\n+                new ArgumentImpl(null, \"the last acceptable date\", 1, 1, '=', '\\0',\n+                                 new DateValidator(DateValidatorTest.YYYY_MM_YY), null, defaults, 0);\n+            } catch (IllegalArgumentException exp) {\n+                assertEquals(resources.getMessage(\"Argument.too.few.defaults\"), exp.getMessage());\n             }\n-            catch(IllegalArgumentException exp) {\n-                assertEquals(\n-                        resources.getMessage(\"Argument.too.few.defaults\"),\n-                        exp.getMessage());\n-            }\n-        }\n-\n-        {\n-            try {\n-                List defaults = new ArrayList();\n-                defaults.add(\"1\");\n-                defaults.add(\"2\");\n-            \n-                new ArgumentImpl(\n-                    null,\n-                    \"the last acceptable date\",\n-                    1,\n-                    1,\n-                    '=',\n-                    '\\0',\n-                    new DateValidator(DateValidatorTest.YYYY_MM_YY),\n-                    null,\n-                    defaults,\n-                    0);\n-            }\n-            catch(IllegalArgumentException exp) {\n-                assertEquals(\n-                    resources.getMessage(\"Argument.too.many.defaults\"),\n-                    exp.getMessage());\n-            }\n-        }\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        }\n+\n+        try {\n+            List defaults = new ArrayList();\n+            defaults.add(\"1\");\n+            defaults.add(\"2\");\n+\n+            new ArgumentImpl(null, \"the last acceptable date\", 1, 1, '=', '\\0',\n+                             new DateValidator(DateValidatorTest.YYYY_MM_YY), null, defaults, 0);\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(resources.getMessage(\"Argument.too.many.defaults\"), exp.getMessage());\n+        }\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.ArgumentTestCase#testProcessValues()\n      */\n-    public void testProcessValues() throws OptionException {\n+    public void testProcessValues()\n+        throws OptionException {\n         final Argument option = buildUsernameArgument();\n         final List args = list(\"rob\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n         assertEquals(\"rob\", commandLine.getValue(option));\n     }\n \n-    public void testProcessValues_SpareValues() throws OptionException {\n+    public void testProcessValues_BoundaryQuotes()\n+        throws OptionException {\n+        final Argument option = buildUsernameArgument();\n+        final List args = list(\"\\\"rob\\\"\");\n+        final WriteableCommandLine commandLine = commandLine(option, args);\n+        final ListIterator iterator = args.listIterator();\n+        option.processValues(commandLine, iterator, option);\n+\n+        assertFalse(iterator.hasNext());\n+        assertTrue(commandLine.hasOption(option));\n+        assertTrue(commandLine.hasOption(\"username\"));\n+        assertEquals(\"rob\", commandLine.getValue(option));\n+    }\n+\n+    public void testProcessValues_SpareValues()\n+        throws OptionException {\n         final Argument option = buildUsernameArgument();\n         final List args = list(\"rob\", \"secret\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n \n         try {\n             option.processValues(commandLine, iterator, option);\n-        }\n-        catch (final OptionException mve) {\n+        } catch (final OptionException mve) {\n             assertEquals(option, mve.getOption());\n-            assertEquals(\n-                \"Missing value(s) target [target ...]\",\n-                mve.getMessage());\n+            assertEquals(\"Missing value(s) target [target ...]\", mve.getMessage());\n         }\n \n         assertFalse(iterator.hasNext());\n         assertTrue(commandLine.getValues(option).isEmpty());\n     }\n \n-    public void testProcessValues_Multiple() throws OptionException {\n+    public void testProcessValues_Multiple()\n+        throws OptionException {\n         final Argument option = buildTargetsArgument();\n         final List args = list(\"compile\", \"test\", \"docs\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n         assertListContentsEqual(args, commandLine.getValues(option));\n     }\n \n-    public void testProcessValues_Contracted() throws OptionException {\n+    public void testProcessValues_Contracted()\n+        throws OptionException {\n         final Argument option = buildTargetsArgument();\n         final List args = list(\"compile,test,javadoc\", \"checkstyle,jdepend\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n         assertFalse(iterator.hasNext());\n         assertTrue(commandLine.hasOption(option));\n         assertTrue(commandLine.hasOption(\"target\"));\n-        assertListContentsEqual(\n-            list(\"compile\", \"test\", \"javadoc\", \"checkstyle\", \"jdepend\"),\n-            commandLine.getValues(option));\n+        assertListContentsEqual(list(\"compile\", \"test\", \"javadoc\", \"checkstyle\", \"jdepend\"),\n+                                commandLine.getValues(option));\n     }\n \n     public void testProcessValues_ContractedTooFew() {\n         final List args = list(\"box1\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n         final ListIterator iterator = args.listIterator();\n+\n         try {\n             option.processValues(commandLine, iterator, option);\n             option.validate(commandLine);\n             fail(\"Expected MissingValueException\");\n-        }\n-        catch (OptionException mve) {\n+        } catch (OptionException mve) {\n             assertSame(option, mve.getOption());\n         }\n     }\n \n-    /*\n-     * (non-Javadoc)\n-     * \n+    public void testProcessValues_ContractedTooMany() {\n+        final Argument option = buildHostArgument();\n+        final List args = list(\"box1,box2,box3,box4\");\n+        final WriteableCommandLine commandLine = commandLine(option, args);\n+        final ListIterator iterator = args.listIterator();\n+\n+        try {\n+            option.processValues(commandLine, iterator, option);\n+            option.validate(commandLine);\n+            fail(\"Expected MissingValueException\");\n+        } catch (OptionException mve) {\n+            assertSame(option, mve.getOption());\n+        }\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()\n      */\n     public void testCanProcess() {\n         final Argument option = buildTargetsArgument();\n-        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"any value\"));\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), \"any value\"));\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()\n      */\n     public void testPrefixes() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testProcess()\n      */\n-    public void testProcess() throws OptionException {\n+    public void testProcess()\n+        throws OptionException {\n         final Argument option = buildPathArgument();\n         final List args = list(\"-path=/lib;/usr/lib;/usr/local/lib\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n         assertFalse(iterator.hasNext());\n         assertTrue(commandLine.hasOption(option));\n         assertTrue(commandLine.hasOption(\"path\"));\n-        assertListContentsEqual(\n-            list(\"-path=/lib\", \"/usr/lib\", \"/usr/local/lib\"),\n-            commandLine.getValues(option));\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        assertListContentsEqual(list(\"-path=/lib\", \"/usr/lib\", \"/usr/local/lib\"),\n+                                commandLine.getValues(option));\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testTriggers()\n      */\n     public void testTriggers() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testValidate()\n      */\n-    public void testValidate() throws OptionException {\n+    public void testValidate()\n+        throws OptionException {\n         final Argument option = buildUsernameArgument();\n         final WriteableCommandLine commandLine = commandLine(option, list());\n \n         try {\n             option.validate(commandLine);\n             fail(\"UnexpectedValue\");\n-        }\n-        catch (OptionException mve) {\n+        } catch (OptionException mve) {\n             assertEquals(option, mve.getOption());\n+        }\n+    }\n+\n+    public void testRequired() {\n+        {\n+            final Argument arg = buildBoundsArgument();\n+\n+            assertTrue(\"not required\", arg.isRequired());\n+        }\n+\n+        {\n+            final Argument arg = buildTargetsArgument();\n+\n+            assertFalse(\"should not be required\", arg.isRequired());\n         }\n     }\n \n         try {\n             option.validate(commandLine);\n             fail(\"UnexpectedValue\");\n-        }\n-        catch (OptionException uve) {\n+        } catch (OptionException uve) {\n             assertEquals(option, uve.getOption());\n         }\n     }\n         commandLine.addValue(option, \"2004-01-01\");\n \n         option.validate(commandLine, option);\n-        assertContentsEqual(\n-            Arrays.asList(\n-                new Object[] {\n-                     DateValidatorTest.YYYY_MM_YY.parse(\"2004-01-01\")}),\n-            commandLine.getValues(option));\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        assertContentsEqual(Arrays.asList(new Object[] {\n+                                              DateValidatorTest.YYYY_MM_YY.parse(\"2004-01-01\")\n+                                          }), commandLine.getValues(option));\n+    }\n+\n+    public void testValidate_ValidatorInvalidDate()\n+        throws OptionException, ParseException {\n+        final Argument option = buildDateLimitArgument();\n+        final WriteableCommandLine commandLine = commandLine(option, list());\n+\n+        commandLine.addValue(option, \"12-12-2004\");\n+\n+        try {\n+            option.validate(commandLine, option);\n+        } catch (OptionException exp) {\n+            OptionException e =\n+                new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,\n+                                    \"12-12-2004\");\n+            assertEquals(\"wrong exception message\", e.getMessage(), exp.getMessage());\n+        }\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()\n      */\n     public void testAppendUsage() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()\n      */\n     public void testGetPreferredName() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()\n      */\n     public void testGetDescription() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()\n      */\n     public void testHelpLines() {\n         final List lines = option.helpLines(0, DisplaySetting.ALL, null);\n         final Iterator i = lines.iterator();\n \n-        final HelpLine line1 = (HelpLine)i.next();\n+        final HelpLine line1 = (HelpLine) i.next();\n         assertEquals(0, line1.getIndent());\n         assertEquals(option, line1.getOption());\n \n     public void testCanProcess_ConsumeRemaining() {\n         final Option option = buildUsernameArgument();\n \n-        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"--\"));\n-    }\n-\n-    public void testProcess_ConsumeRemaining() throws OptionException {\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), \"--\"));\n+    }\n+\n+    public void testProcess_ConsumeRemaining()\n+        throws OptionException {\n         final Option option = buildPathArgument();\n         final List args = list(\"options\", \"--\", \"--ignored\", \"-Dprop=val\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n         final ListIterator iterator = args.listIterator();\n \n         option.process(commandLine, iterator);\n+\n         final List values = commandLine.getValues(option);\n         assertTrue(values.contains(\"options\"));\n         assertTrue(values.contains(\"--ignored\"));\n             option.process(commandLine, iterator);\n             option.validate(commandLine);\n             fail(\"Missing Value!\");\n-        }\n-        catch (OptionException mve) {\n+        } catch (OptionException mve) {\n             assertEquals(option, mve.getOption());\n             assertEquals(\"Missing value(s) path [path ...]\", mve.getMessage());\n         }\n         assertFalse(iterator.hasNext());\n     }\n \n-//    public void testProcess_DefinedDefaultValue() throws OptionException {\n-//        final Option size = buildSizeArgument();\n-//        final List args = list();\n-//        final WriteableCommandLine commandLine = commandLine(size, args);\n-//        final ListIterator iterator = args.listIterator();\n-//\n-//        size.process(commandLine, iterator);\n-//\n-//        assertEquals(\"10\", commandLine.getValue(size));\n-//    }\n-//\n-//    public void testProcess_DefinedDefaultValues() throws OptionException {\n-//        final Option bounds = buildBoundsArgument();\n-//        final List args = list();\n-//        final WriteableCommandLine commandLine = commandLine(bounds, args);\n-//        final ListIterator iterator = args.listIterator();\n-//\n-//        bounds.process(commandLine, iterator);\n-//\n-//        List values = new ArrayList();\n-//        values.add(\"5\");\n-//        values.add(\"10\");\n-//        assertEquals(values, commandLine.getValues(bounds));\n-//    }\n-\n-    public void testProcess_InterrogatedDefaultValue() throws OptionException {\n+    //    public void testProcess_DefinedDefaultValue() throws OptionException {\n+    //        final Option size = buildSizeArgument();\n+    //        final List args = list();\n+    //        final WriteableCommandLine commandLine = commandLine(size, args);\n+    //        final ListIterator iterator = args.listIterator();\n+    //\n+    //        size.process(commandLine, iterator);\n+    //\n+    //        assertEquals(\"10\", commandLine.getValue(size));\n+    //    }\n+    //\n+    //    public void testProcess_DefinedDefaultValues() throws OptionException {\n+    //        final Option bounds = buildBoundsArgument();\n+    //        final List args = list();\n+    //        final WriteableCommandLine commandLine = commandLine(bounds, args);\n+    //        final ListIterator iterator = args.listIterator();\n+    //\n+    //        bounds.process(commandLine, iterator);\n+    //\n+    //        List values = new ArrayList();\n+    //        values.add(\"5\");\n+    //        values.add(\"10\");\n+    //        assertEquals(values, commandLine.getValues(bounds));\n+    //    }\n+    public void testProcess_InterrogatedDefaultValue()\n+        throws OptionException {\n         final Option size = buildSizeArgument();\n         final List args = list();\n         final WriteableCommandLine commandLine = commandLine(size, args);\n \n         size.process(commandLine, iterator);\n \n-        assertEquals(\n-            new Integer(20),\n-            commandLine.getValue(size, new Integer(20)));\n+        assertEquals(new Integer(20), commandLine.getValue(size, new Integer(20)));\n+    }\n+\n+    public void testTooFewDefaults() {\n+        List defaults = new ArrayList();\n+        defaults.add(\"5\");\n+\n+        try {\n+            new ArgumentImpl(\"size\", \"The number of units\", 2, 2, '\\0', '\\0', null,\n+                             ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testTooManyDefaults() {\n+        List defaults = new ArrayList();\n+        defaults.add(\"5\");\n+        defaults.add(\"10\");\n+        defaults.add(\"15\");\n+\n+        try {\n+            new ArgumentImpl(\"size\", \"The number of units\", 2, 2, '\\0', '\\0', null,\n+                             ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS),\n+                         exp.getMessage());\n+        }\n     }\n \n     public void testProcess_InterrogatedDefaultValues()\n         values.add(\"100\");\n         assertEquals(values, commandLine.getValues(bounds, values));\n     }\n+\n+    public void testProcess_StripBoundaryQuotes()\n+        throws OptionException {\n+        final Option bounds = buildBoundsArgument();\n+        final List args = list();\n+        final WriteableCommandLine commandLine = commandLine(bounds, args);\n+        final ListIterator iterator = args.listIterator();\n+\n+        bounds.process(commandLine, iterator);\n+\n+        List values = new ArrayList();\n+        values.add(\"50\\\"\");\n+        values.add(\"\\\"100\");\n+        assertEquals(values, commandLine.getValues(bounds, values));\n+    }\n+\n+    public void testSourceDestArgument() {\n+        final ArgumentBuilder abuilder = new ArgumentBuilder();\n+        final GroupBuilder gbuilder = new GroupBuilder();\n+        final Argument inputfiles =\n+            abuilder.withName(\"input\").withMinimum(0).withMaximum(0).create();\n+        final Argument bad_outputfile =\n+            abuilder.withName(\"output\").withMinimum(1).withMaximum(2).create();\n+\n+        try {\n+            final Argument targets = new SourceDestArgument(inputfiles, bad_outputfile);\n+        } catch (final IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SOURCE_DEST_MUST_ENFORCE_VALUES),\n+                         exp.getMessage());\n+        }\n+\n+        final Argument outputfile =\n+            abuilder.withName(\"output\").withMinimum(1).withMaximum(1).create();\n+\n+        final Argument targets = new SourceDestArgument(inputfiles, outputfile);\n+        final StringBuffer buffer = new StringBuffer(\"test content\");\n+        targets.appendUsage(buffer, Collections.EMPTY_SET, null);\n+\n+        assertTrue(\"buffer not added\", buffer.toString().startsWith(\"test content\"));\n+        assertFalse(\"space added\", buffer.charAt(12) == ' ');\n+    }\n }\n--- a/src/test/org/apache/commons/cli2/option/CommandTest.java\n+++ b/src/test/org/apache/commons/cli2/option/CommandTest.java\n import org.apache.commons.cli2.Parent;\n import org.apache.commons.cli2.WriteableCommandLine;\n import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;\n+import org.apache.commons.cli2.resource.ResourceConstants;\n+import org.apache.commons.cli2.resource.ResourceHelper;\n \n /**\n  * @author Rob Oxspring\n- * \n+ *\n  * To change the template for this generated type comment go to\n  * Window>Preferences>Java>Code Generation>Code and Comments\n  */\n-public class CommandTest extends ParentTestCase {\n-\n+public class CommandTest\n+    extends ParentTestCase {\n     public static Command buildStartCommand() {\n-        return new Command(\n-            \"start\",\n-            \"Begins the process\",\n-            Collections.singleton(\"go\"),\n-            false,\n-            null,\n-            null,\n-            0);\n+        return new Command(\"start\", \"Begins the process\", Collections.singleton(\"go\"), false, null,\n+                           null, 0);\n     }\n \n     public static Command buildCommitCommand() {\n-        return new Command(\n-            \"commit\",\n-            \"Commit the changes to the database\",\n-            null,\n-            true,\n-            null,\n-            null,\n-            0);\n+        return new Command(\"commit\", \"Commit the changes to the database\", null, true, null, null, 0);\n     }\n \n     public static Command buildLoginCommand() {\n-        return new Command(\n-            \"login\",\n-            \"Initiates a session for the user\",\n-            null,\n-            false,\n-            ArgumentTest.buildUsernameArgument(),\n-            null,\n-            0);\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        return new Command(\"login\", \"Initiates a session for the user\", null, false,\n+                           ArgumentTest.buildUsernameArgument(), null, 0);\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()\n      */\n-    public void testProcessParent() throws OptionException {\n+    public void testProcessParent()\n+        throws OptionException {\n         final Command option = buildStartCommand();\n         final List args = list(\"go\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n         assertTrue(commandLine.getValues(option).isEmpty());\n     }\n \n-    public void testProcessParent_Spare() throws OptionException {\n+    public void testProcessParent_Spare()\n+        throws OptionException {\n         final Command option = buildLoginCommand();\n         final List args = list(\"login\", \"rob\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()\n      */\n     public void testCanProcess() {\n         final Command option = buildStartCommand();\n-        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"start\"));\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), \"start\"));\n     }\n \n     public void testCanProcess_BadMatch() {\n         final Command option = buildStartCommand();\n-        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), \"stop\"));\n+        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), \"stop\"));\n     }\n \n     public void testCanProcess_Alias() {\n         final Command option = buildStartCommand();\n-        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"go\"));\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), \"go\"));\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()\n      */\n     public void testPrefixes() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testProcess()\n      */\n-    public void testProcess() throws OptionException {\n+    public void testProcess()\n+        throws OptionException {\n         final Command option = buildLoginCommand();\n         final List args = list(\"login\", \"rob\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testTriggers()\n      */\n     public void testTriggers() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testValidate()\n      */\n     public void testValidate() {\n         try {\n             option.validate(commandLine);\n             fail(\"Missing an option\");\n-        }\n-        catch (OptionException moe) {\n+        } catch (OptionException moe) {\n             assertSame(option, moe.getOption());\n         }\n     }\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()\n      */\n     public void testAppendUsage() {\n         option.appendUsage(buffer, DisplaySetting.ALL, null);\n \n         assertEquals(\"[start (go)]\", buffer.toString());\n+    }\n+\n+    public void testNullPreferredName() {\n+        try {\n+            new Command(null, \"\", Collections.singleton(\"go\"), false, null, null, 0);\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception name\",\n+                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testEmotyPreferredName() {\n+        try {\n+            new Command(\"\", \"\", Collections.singleton(\"go\"), false, null, null, 0);\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception name\",\n+                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT),\n+                         exp.getMessage());\n+        }\n     }\n \n     public void testAppendUsage_NoOptional() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()\n      */\n     public void testGetPreferredName() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()\n      */\n     public void testGetDescription() {\n         final Option option = buildLoginCommand();\n-        assertEquals(\n-            \"Initiates a session for the user\",\n-            option.getDescription());\n-    }\n-    /*\n-     * (non-Javadoc)\n-     * \n+        assertEquals(\"Initiates a session for the user\", option.getDescription());\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()\n      */\n     public void testHelpLines() {\n         // TODO Auto-generated method stub\n-\n     }\n }\n--- a/src/test/org/apache/commons/cli2/option/GroupTest.java\n+++ b/src/test/org/apache/commons/cli2/option/GroupTest.java\n-/**\n+/*\n  * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n /**\n  * @author Rob Oxspring\n  */\n-public class GroupTest extends GroupTestCase {\n-\n+public class GroupTest\n+    extends GroupTestCase {\n     public static final Command COMMAND_START =\n         new Command(\"start\", \"Starts the server\", null, false, null, null, 0);\n     public static final Command COMMAND_STOP =\n         new Command(\"stop\", \"Stops the server\", null, false, null, null, 0);\n     public static final Command COMMAND_RESTART =\n-        new Command(\n-            \"restart\",\n-            \"Stops and starts the server\",\n-            null,\n-            false,\n-            null,\n-            null,\n-            0);\n+        new Command(\"restart\", \"Stops and starts the server\", null, false, null, null, 0);\n     public static final Command COMMAND_GRACEFUL =\n-        new Command(\n-            \"graceful\",\n-            \"Restarts the server without interruption\",\n-            null,\n-            false,\n-            null,\n-            null,\n-            0);\n+        new Command(\"graceful\", \"Restarts the server without interruption\", null, false, null,\n+                    null, 0);\n \n     public static Group buildApacheCommandGroup() {\n         final List options = new ArrayList();\n         options.add(COMMAND_RESTART);\n         options.add(COMMAND_START);\n         options.add(COMMAND_STOP);\n-        return new GroupImpl(\n-            options,\n-            \"httpd-cmds\",\n-            \"The command to pass to the server\",\n-            1,\n-            1);\n+\n+        return new GroupImpl(options, \"httpd-cmds\", \"The command to pass to the server\", 1, 1);\n     }\n \n     public static Group buildApachectlGroup() {\n         final List options = new ArrayList();\n         options.add(DefaultOptionTest.buildHelpOption());\n         options.add(ParentTest.buildKParent());\n-        return new GroupImpl(\n-            options,\n-            \"apachectl\",\n-            \"Controls the apache http deamon\",\n-            0,\n-            Integer.MAX_VALUE);\n+\n+        return new GroupImpl(options, \"apachectl\", \"Controls the apache http deamon\", 0,\n+                             Integer.MAX_VALUE);\n     }\n \n     public static Group buildAntGroup() {\n         final List options = new ArrayList();\n         options.add(DefaultOptionTest.buildHelpOption());\n         options.add(ArgumentTest.buildTargetsArgument());\n-        return new GroupImpl(\n-            options,\n-            \"ant\",\n-            \"The options for ant\",\n-            0,\n-            Integer.MAX_VALUE);\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+\n+        return new GroupImpl(options, \"ant\", \"The options for ant\", 0, Integer.MAX_VALUE);\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.GroupTestCase#testProcessAnonymousArguments()\n      */\n-    public void testProcessAnonymousArguments() throws OptionException {\n+    public void testProcessAnonymousArguments()\n+        throws OptionException {\n         final Group option = buildAntGroup();\n         final List args = list(\"compile,test\", \"dist\");\n         final ListIterator iterator = args.listIterator();\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.GroupTestCase#testProcessOptions()\n      */\n-    public void testProcessOptions() throws OptionException {\n+    public void testProcessOptions()\n+        throws OptionException {\n         final Group option = buildApachectlGroup();\n         final List args = list(\"-?\", \"-k\");\n         final ListIterator iterator = args.listIterator();\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()\n      */\n     public void testCanProcess() {\n         final Group option = buildApacheCommandGroup();\n-        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"start\"));\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), \"start\"));\n     }\n \n     public void testCanProcess_BadMatch() {\n         final Group option = buildApacheCommandGroup();\n-        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), \"begin\"));\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), \"begin\"));\n+    }\n+\n+    public void testCanProcess_NullMatch() {\n+        final Group option = buildApacheCommandGroup();\n+        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), (String) null));\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()\n      */\n     public void testPrefixes() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testProcess()\n      */\n-    public void testProcess() throws OptionException {\n+    public void testProcess()\n+        throws OptionException {\n         final Group option = buildAntGroup();\n         final List args = list(\"--help\", \"compile,test\", \"dist\");\n         final ListIterator iterator = args.listIterator();\n \n         assertFalse(iterator.hasNext());\n         assertTrue(commandLine.hasOption(\"-?\"));\n-        assertListContentsEqual(\n-            list(\"compile\", \"test\", \"dist\"),\n-            commandLine.getValues(\"target\"));\n-    }\n-\n-    public void testProcess_Nested() throws OptionException {\n+        assertListContentsEqual(list(\"compile\", \"test\", \"dist\"), commandLine.getValues(\"target\"));\n+    }\n+\n+    public void testProcess_Nested()\n+        throws OptionException {\n         final Group option = buildApachectlGroup();\n         final List args = list(\"-h\", \"-k\", \"graceful\");\n         final ListIterator iterator = args.listIterator();\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testTriggers()\n      */\n     public void testTriggers() {\n         final Group option = buildApachectlGroup();\n-        assertContentsEqual(\n-            list(\"--help\", \"-?\", \"-h\", \"-k\"),\n-            option.getTriggers());\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        assertContentsEqual(list(\"--help\", \"-?\", \"-h\", \"-k\"), option.getTriggers());\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testValidate()\n      */\n-    public void testValidate() throws OptionException {\n+    public void testValidate()\n+        throws OptionException {\n         final Group option = buildApacheCommandGroup();\n         final WriteableCommandLine commandLine = commandLine(option, list());\n \n         try {\n             option.validate(commandLine);\n             fail(\"Too many options\");\n-        }\n-        catch (OptionException uoe) {\n+        } catch (OptionException uoe) {\n             assertEquals(option, uoe.getOption());\n         }\n     }\n         try {\n             option.validate(commandLine);\n             fail(\"Missing an option\");\n-        }\n-        catch (OptionException moe) {\n+        } catch (OptionException moe) {\n             assertEquals(option, moe.getOption());\n         }\n     }\n-    \n-    public void testValidate_RequiredChild() throws OptionException {\n-        final Option required = new DefaultOptionBuilder().withLongName(\"required\").withRequired(true).create();\n-        final Option optional = new DefaultOptionBuilder().withLongName(\"optional\").withRequired(false).create();\n-        final Group group = new GroupBuilder()\n-            .withOption(required)\n-            .withOption(optional)\n-            .withMinimum(1)\n-            .create();\n+\n+    public void testValidate_RequiredChild()\n+        throws OptionException {\n+        final Option required =\n+            new DefaultOptionBuilder().withLongName(\"required\").withRequired(true).create();\n+        final Option optional =\n+            new DefaultOptionBuilder().withLongName(\"optional\").withRequired(false).create();\n+        final Group group =\n+            new GroupBuilder().withOption(required).withOption(optional).withMinimum(1).create();\n \n         WriteableCommandLine commandLine;\n-        \n+\n         commandLine = commandLine(group, list());\n+\n         try {\n             group.validate(commandLine);\n             fail(\"Missing option 'required'\");\n-        }\n-        catch (OptionException moe) {\n+        } catch (OptionException moe) {\n             assertEquals(required, moe.getOption());\n         }\n-        \n+\n         commandLine = commandLine(group, list());\n         commandLine.addOption(optional);\n+\n         try {\n             group.validate(commandLine);\n             fail(\"Missing option 'required'\");\n-        }\n-        catch (OptionException moe) {\n+        } catch (OptionException moe) {\n             assertEquals(required, moe.getOption());\n         }\n-        \n+\n         commandLine = commandLine(group, list());\n         commandLine.addOption(required);\n         group.validate(commandLine);\n-        \n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()\n      */\n     public void testAppendUsage() {\n         final Option option = buildApacheCommandGroup();\n         final StringBuffer buffer = new StringBuffer();\n         final Set settings = new HashSet(DisplaySetting.ALL);\n+\n         //settings.remove(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);\n         option.appendUsage(buffer, settings, null);\n \n-        assertEquals(\n-            \"httpd-cmds (graceful|restart|start|stop)\",\n-            buffer.toString());\n+        assertEquals(\"httpd-cmds (graceful|restart|start|stop)\", buffer.toString());\n     }\n \n     public void testAppendUsage_NoOptional() {\n         settings.remove(DisplaySetting.DISPLAY_OPTIONAL);\n         option.appendUsage(buffer, settings, null);\n \n-        assertEquals(\n-            \"httpd-cmds (graceful|restart|start|stop)\",\n-            buffer.toString());\n+        assertEquals(\"httpd-cmds (graceful|restart|start|stop)\", buffer.toString());\n     }\n \n     public void testAppendUsage_NoExpand() {\n         settings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);\n         option.appendUsage(buffer, settings, null);\n \n-        assertEquals(\n-            \"[ant (--help (-?,-h)) [<target1> [<target2> ...]]]\",\n-            buffer.toString());\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        assertEquals(\"[ant (--help (-?,-h)) [<target1> [<target2> ...]]]\", buffer.toString());\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()\n      */\n     public void testGetPreferredName() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()\n      */\n     public void testGetDescription() {\n         final Option option = buildApachectlGroup();\n-        assertEquals(\n-            \"Controls the apache http deamon\",\n-            option.getDescription());\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        assertEquals(\"Controls the apache http deamon\", option.getDescription());\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()\n      */\n     public void testHelpLines() {\n         final List lines = option.helpLines(0, DisplaySetting.ALL, null);\n         final Iterator i = lines.iterator();\n \n-        final HelpLine line1 = (HelpLine)i.next();\n+        final HelpLine line1 = (HelpLine) i.next();\n         assertEquals(0, line1.getIndent());\n         assertEquals(option, line1.getOption());\n \n-        final HelpLine line2 = (HelpLine)i.next();\n+        final HelpLine line2 = (HelpLine) i.next();\n         assertEquals(1, line2.getIndent());\n         assertEquals(COMMAND_GRACEFUL, line2.getOption());\n \n-        final HelpLine line3 = (HelpLine)i.next();\n+        final HelpLine line3 = (HelpLine) i.next();\n         assertEquals(1, line3.getIndent());\n         assertEquals(COMMAND_RESTART, line3.getOption());\n \n-        final HelpLine line4 = (HelpLine)i.next();\n+        final HelpLine line4 = (HelpLine) i.next();\n         assertEquals(1, line4.getIndent());\n         assertEquals(COMMAND_START, line4.getOption());\n \n-        final HelpLine line5 = (HelpLine)i.next();\n+        final HelpLine line5 = (HelpLine) i.next();\n         assertEquals(1, line5.getIndent());\n         assertEquals(COMMAND_STOP, line5.getOption());\n \n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()\n      */\n     public void testHelpLines_NoExpanded() {\n         final Option option = buildApacheCommandGroup();\n         final Set settings = new HashSet(DisplaySetting.ALL);\n         settings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);\n+\n         final List lines = option.helpLines(0, settings, null);\n         final Iterator i = lines.iterator();\n \n-        final HelpLine line1 = (HelpLine)i.next();\n+        final HelpLine line1 = (HelpLine) i.next();\n         assertEquals(0, line1.getIndent());\n         assertEquals(option, line1.getOption());\n \n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()\n      */\n     public void testHelpLines_NoName() {\n         final Option option = buildApacheCommandGroup();\n         final Set settings = new HashSet(DisplaySetting.ALL);\n         settings.remove(DisplaySetting.DISPLAY_GROUP_NAME);\n+\n         final List lines = option.helpLines(0, settings, null);\n         final Iterator i = lines.iterator();\n \n-        final HelpLine line2 = (HelpLine)i.next();\n+        final HelpLine line2 = (HelpLine) i.next();\n         assertEquals(1, line2.getIndent());\n         assertEquals(COMMAND_GRACEFUL, line2.getOption());\n \n-        final HelpLine line3 = (HelpLine)i.next();\n+        final HelpLine line3 = (HelpLine) i.next();\n         assertEquals(1, line3.getIndent());\n         assertEquals(COMMAND_RESTART, line3.getOption());\n \n-        final HelpLine line4 = (HelpLine)i.next();\n+        final HelpLine line4 = (HelpLine) i.next();\n         assertEquals(1, line4.getIndent());\n         assertEquals(COMMAND_START, line4.getOption());\n \n-        final HelpLine line5 = (HelpLine)i.next();\n+        final HelpLine line5 = (HelpLine) i.next();\n         assertEquals(1, line5.getIndent());\n         assertEquals(COMMAND_STOP, line5.getOption());\n \n--- a/src/test/org/apache/commons/cli2/option/GroupTestCase.java\n+++ b/src/test/org/apache/commons/cli2/option/GroupTestCase.java\n-/**\n- * Copyright 2003-2004 The Apache Software Foundation\n+/*\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n \n /**\n  * @author Rob Oxspring\n- * \n- * To change the template for this generated type comment go to\n- * Window>Preferences>Java>Code Generation>Code and Comments\n  */\n-public abstract class GroupTestCase extends OptionTestCase {\n-    public abstract void testProcessOptions() throws OptionException;\n+public abstract class GroupTestCase\n+    extends OptionTestCase {\n+    public abstract void testProcessOptions()\n+        throws OptionException;\n \n     public abstract void testProcessAnonymousArguments()\n         throws OptionException;\n--- a/src/test/org/apache/commons/cli2/option/ParentTest.java\n+++ b/src/test/org/apache/commons/cli2/option/ParentTest.java\n import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n import org.apache.commons.cli2.builder.GroupBuilder;\n import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;\n+import org.apache.commons.cli2.resource.ResourceConstants;\n+import org.apache.commons.cli2.resource.ResourceHelper;\n \n /**\n  * @author Rob Oxspring\n  */\n-public class ParentTest extends ParentTestCase {\n-\n-\tpublic static Parent buildLibParent() {\n-\t\tfinal Argument argument = ArgumentTest.buildPathArgument();\n-\t\treturn new DefaultOption(\n-\t\t\t\"-\",\n-\t\t\t\"--\",\n-\t\t\tfalse,\n-\t\t\t\"--lib\",\n-\t\t\t\"Specifies library search path\",\n-\t\t\tnull,\n-\t\t\tnull,\n-\t\t\tfalse,\n-\t\t\targument,\n-\t\t\tnull, \n-            'l');\n-\t}\n-\n-\tpublic static Parent buildKParent() {\n-\t\tfinal Group children = GroupTest.buildApacheCommandGroup();\n-\t\treturn new DefaultOption(\n-\t\t\t\"-\",\n-\t\t\t\"--\",\n-\t\t\tfalse,\n-\t\t\t\"-k\",\n-\t\t\t\"desc\",\n-\t\t\tnull,\n-\t\t\tnull,\n-\t\t\tfalse,\n-\t\t\tnull,\n-\t\t\tchildren, \n-            'k');\n-\t}\n-\n-\tpublic static final Argument COMPLEX_ARGUMENT =\n-\t\tnew ArgumentBuilder()\n-\t\t\t.withName(\"username\")\n-\t\t\t.withMinimum(1)\n-\t\t\t.withMaximum(1)\n-\t\t\t.create();\n-\n-\tpublic static final Option COMPLEX_CHILD_SSL =\n-\t\tnew DefaultOptionBuilder()\n-\t\t\t.withLongName(\"ssl\")\n-\t\t\t.withShortName(\"s\")\n-\t\t\t.create();\n-\n-\tpublic static final Option COMPLEX_CHILD_BASIC =\n-\t\tnew DefaultOptionBuilder()\n-\t\t\t.withLongName(\"basic\")\n-\t\t\t.withShortName(\"b\")\n-\t\t\t.create();\n-\n-\tpublic static final Option COMPLEX_CHILD_DIGEST =\n-\t\tnew DefaultOptionBuilder()\n-\t\t\t.withLongName(\"digest\")\n-\t\t\t.withShortName(\"d\")\n-\t\t\t.create();\n-\n-\tpublic static final Group COMPLEX_CHILDREN =\n-\t\tnew GroupBuilder()\n-\t\t\t.withName(\"login-opts\")\n-\t\t\t.withOption(COMPLEX_CHILD_BASIC)\n-\t\t\t.withOption(COMPLEX_CHILD_DIGEST)\n-            .withOption(COMPLEX_CHILD_SSL)\n-\t\t\t.create();\n-\n-\tpublic static Parent buildComplexParent() {\n-\t\treturn new CommandBuilder()\n-\t\t\t.withName(\"login\")\n-\t\t\t.withName(\"lo\")\n-\t\t\t.withArgument(COMPLEX_ARGUMENT)\n-\t\t\t.withChildren(COMPLEX_CHILDREN)\n-\t\t\t.create();\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()\n-\t */\n-\tpublic void testProcessParent() throws OptionException {\n-\t\tfinal Parent option = buildKParent();\n-\t\tfinal List args = list(\"-k\", \"start\");\n-\t\tfinal WriteableCommandLine commandLine = commandLine(option, args);\n-\t\tfinal ListIterator iterator = args.listIterator();\n-\t\toption.processParent(commandLine, iterator);\n-\n-\t\tassertEquals(\"start\", iterator.next());\n-\t\tassertFalse(iterator.hasNext());\n-\t\tassertTrue(commandLine.hasOption(option));\n-\t\tassertTrue(commandLine.hasOption(\"-k\"));\n-\t\tassertTrue(commandLine.getValues(option).isEmpty());\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()\n-\t */\n-\tpublic void testCanProcess() {\n-\t\tfinal Parent option = buildKParent();\n-\t\tassertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"-k\"));\n-\t}\n-\n-\tpublic void testCanProcess_BadMatch() {\n-\t\tfinal Parent option = buildKParent();\n-\t\tassertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), \"-K\"));\n-\t}\n-\n-\tpublic void testCanProcess_ContractedArgument() {\n-\t\tfinal Parent option = buildLibParent();\n-\t\tassertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), \"--lib=/usr/lib\"));\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()\n-\t */\n-\tpublic void testPrefixes() {\n-\t\tfinal Parent option = buildKParent();\n-\t\tassertContentsEqual(list(\"-\", \"--\"), option.getPrefixes());\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.cli2.OptionTestCase#testProcess()\n-\t */\n-\tpublic void testProcess() throws OptionException {\n-\t\tfinal Parent option = CommandTest.buildStartCommand();\n-\t\tfinal List args = list(\"start\");\n-\t\tfinal WriteableCommandLine commandLine = commandLine(option, args);\n-\t\tfinal ListIterator iterator = args.listIterator();\n-\t\toption.process(commandLine, iterator);\n-\n-\t\tassertFalse(iterator.hasNext());\n-\t\tassertTrue(commandLine.hasOption(option));\n-\t\tassertTrue(commandLine.hasOption(\"start\"));\n-\t\tassertFalse(commandLine.hasOption(\"stop\"));\n-\t\tassertTrue(commandLine.getValues(option).isEmpty());\n-\t}\n-\n-\tpublic void testProcess_Children() throws OptionException {\n-\t\tfinal Parent option = buildKParent();\n-\t\tfinal List args = list(\"-k\", \"start\");\n-\t\tfinal WriteableCommandLine commandLine = commandLine(option, args);\n-\t\tfinal ListIterator iterator = args.listIterator();\n-\t\toption.process(commandLine, iterator);\n-\n-\t\tassertFalse(iterator.hasNext());\n-\t\tassertTrue(commandLine.hasOption(option));\n-\t\tassertTrue(commandLine.hasOption(\"-k\"));\n-\t\tassertTrue(commandLine.hasOption(\"start\"));\n-\t\tassertFalse(commandLine.hasOption(\"stop\"));\n-\t\tassertTrue(commandLine.getValues(option).isEmpty());\n-\t}\n-\n-\tpublic void testProcess_Argument() throws OptionException {\n-\t\tfinal Parent option = buildLibParent();\n-\t\tfinal List args = list(\"--lib=C:\\\\WINDOWS;C:\\\\WINNT;C:\\\\\");\n-\t\tfinal WriteableCommandLine commandLine = commandLine(option, args);\n-\t\tfinal ListIterator iterator = args.listIterator();\n-\t\toption.process(commandLine, iterator);\n-\n-\t\tassertFalse(iterator.hasNext());\n-\t\tassertTrue(commandLine.hasOption(option));\n-\t\tassertTrue(commandLine.hasOption(\"--lib\"));\n-\t\tassertContentsEqual(\n-\t\t\tlist(\"C:\\\\WINDOWS\", \"C:\\\\WINNT\", \"C:\\\\\"),\n-\t\t\tcommandLine.getValues(option));\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.cli2.OptionTestCase#testTriggers()\n-\t */\n-\tpublic void testTriggers() {\n-\t\tfinal Parent option = buildKParent();\n-\t\tassertContentsEqual(list(\"-k\"), option.getTriggers());\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.cli2.OptionTestCase#testValidate()\n-\t */\n-\tpublic void testValidate() throws OptionException {\n-\t\tfinal Parent option = CommandTest.buildStartCommand();\n-\t\tfinal WriteableCommandLine commandLine = commandLine(option, list());\n-\n-\t\toption.validate(commandLine);\n-\n-\t\tcommandLine.addOption(option);\n-\n-\t\toption.validate(commandLine);\n-\t}\n-\n-\tpublic void testValidate_Children() throws OptionException {\n-\t\tfinal Parent option = buildKParent();\n-\t\tfinal WriteableCommandLine commandLine = commandLine(option, list());\n-\n-\t\toption.validate(commandLine);\n-\t\tcommandLine.addOption(option);\n-\n-\t\ttry {\n-\t\t\toption.validate(commandLine);\n-\t\t\tfail(\"Missing a command\");\n-\t\t} catch (OptionException moe) {\n-\t\t\tassertNotNull(moe.getOption());\n-\t\t\tassertNotSame(option, moe.getOption());\n-\t\t}\n-\t}\n-\n-\tpublic void testValidate_Argument() throws OptionException {\n-\t\tfinal Command option = CommandTest.buildLoginCommand();\n-\t\tfinal WriteableCommandLine commandLine = commandLine(option, list());\n-\n-\t\toption.validate(commandLine);\n-\n-\t\tcommandLine.addOption(option);\n-\n-\t\ttry {\n-\t\t\toption.validate(commandLine);\n-\t\t\tfail(\"Missing a value\");\n-\t\t} catch (OptionException moe) {\n-\t\t\tassertSame(option, moe.getOption());\n-\t\t}\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()\n-\t */\n-\tpublic void testAppendUsage() {\n-\t\tfinal Option option = buildComplexParent();\n-\t\tfinal StringBuffer buffer = new StringBuffer();\n-\t\tfinal Set settings = new HashSet(DisplaySetting.ALL);\n-\t\tsettings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);\n-\t\toption.appendUsage(buffer, settings, null);\n-\n-\t\tassertEquals(\n-\t\t\t\"[login (lo) <username> [login-opts (--basic (-b)|--digest (-d)|--ssl (-s))]]\",\n-\t\t\tbuffer.toString());\n-\t}\n-\n-\tpublic void testAppendUsage_NoArguments() {\n-\t\tfinal Option option = buildComplexParent();\n-\t\tfinal StringBuffer buffer = new StringBuffer();\n-\t\tfinal Set settings = new HashSet(DisplaySetting.ALL);\n-\t\tsettings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\n-\t\tsettings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);\n-\t\toption.appendUsage(buffer, settings, null);\n-\n-\t\tassertEquals(\n-\t\t\t\"[login (lo) [login-opts (--basic (-b)|--digest (-d)|--ssl (-s))]]\",\n-\t\t\tbuffer.toString());\n-\t}\n-\n-\tpublic void testAppendUsage_NoChildren() {\n-\t\tfinal Option option = buildComplexParent();\n-\t\tfinal StringBuffer buffer = new StringBuffer();\n-\t\tfinal Set settings = new HashSet(DisplaySetting.ALL);\n-\t\tsettings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);\n-\t\toption.appendUsage(buffer, settings, null);\n-\n-\t\tassertEquals(\"[login (lo) <username>]\", buffer.toString());\n-\t}\n-\n-\tpublic void testAppendUsage_NoArgumentsOrChildren() {\n-\t\tfinal Option option = buildComplexParent();\n-\t\tfinal StringBuffer buffer = new StringBuffer();\n-\t\tfinal Set settings = new HashSet(DisplaySetting.ALL);\n-\t\tsettings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);\n-\t\tsettings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\n-\t\toption.appendUsage(buffer, settings, null);\n-\n-\t\tassertEquals(\"[login (lo)]\", buffer.toString());\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()\n-\t */\n-\tpublic void testGetPreferredName() {\n-\t\tfinal Option option = buildLibParent();\n-\t\tassertEquals(\"--lib\", option.getPreferredName());\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()\n-\t */\n-\tpublic void testGetDescription() {\n-\t\tfinal Option option = buildLibParent();\n-\t\tassertEquals(\"Specifies library search path\", option.getDescription());\n-\t}\n-\n-\t/* (non-Javadoc)\n-\t * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()\n-\t */\n-\tpublic void testHelpLines() {\n-\t\tfinal Option option = buildComplexParent();\n-\t\tfinal List lines =\n-\t\t\toption.helpLines(0, DisplaySetting.ALL, null);\n-\t\tfinal Iterator i = lines.iterator();\n-\n-\t\tfinal HelpLine line1 = (HelpLine) i.next();\n-\t\tassertEquals(0, line1.getIndent());\n-\t\tassertEquals(option, line1.getOption());\n-\n-\t\tfinal HelpLine line2 = (HelpLine) i.next();\n-\t\tassertEquals(1, line2.getIndent());\n-\t\tassertEquals(COMPLEX_ARGUMENT, line2.getOption());\n-\n-\t\tfinal HelpLine line3 = (HelpLine) i.next();\n-\t\tassertEquals(1, line3.getIndent());\n-\t\tassertEquals(COMPLEX_CHILDREN, line3.getOption());\n-\n-\t\tfinal HelpLine line4 = (HelpLine) i.next();\n-\t\tassertEquals(2, line4.getIndent());\n-\t\tassertEquals(COMPLEX_CHILD_BASIC, line4.getOption());\n-\n-\t\tfinal HelpLine line5 = (HelpLine) i.next();\n-\t\tassertEquals(2, line5.getIndent());\n-\t\tassertEquals(COMPLEX_CHILD_DIGEST, line5.getOption());\n-\n-\t\tfinal HelpLine line6 = (HelpLine) i.next();\n-\t\tassertEquals(2, line6.getIndent());\n-\t\tassertEquals(COMPLEX_CHILD_SSL, line6.getOption());\n-\n-\t\tassertFalse(i.hasNext());\n-\t}\n-\n-\tpublic void testHelpLines_NoArgument() {\n-\t\tfinal Option option = buildComplexParent();\n-\t\tfinal Set settings = new HashSet(DisplaySetting.ALL);\n-\t\tsettings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\n-\t\tfinal List lines = option.helpLines(0, settings, null);\n-\t\tfinal Iterator i = lines.iterator();\n-\n-\t\tfinal HelpLine line1 = (HelpLine) i.next();\n-\t\tassertEquals(0, line1.getIndent());\n-\t\tassertEquals(option, line1.getOption());\n-\n-\t\tfinal HelpLine line3 = (HelpLine) i.next();\n-\t\tassertEquals(1, line3.getIndent());\n-\t\tassertEquals(COMPLEX_CHILDREN, line3.getOption());\n-\n-\t\tfinal HelpLine line4 = (HelpLine) i.next();\n-\t\tassertEquals(2, line4.getIndent());\n-\t\tassertEquals(COMPLEX_CHILD_BASIC, line4.getOption());\n-\n-\t\tfinal HelpLine line5 = (HelpLine) i.next();\n-\t\tassertEquals(2, line5.getIndent());\n-\t\tassertEquals(COMPLEX_CHILD_DIGEST, line5.getOption());\n-\n-\t\tfinal HelpLine line6 = (HelpLine) i.next();\n-\t\tassertEquals(2, line6.getIndent());\n-\t\tassertEquals(COMPLEX_CHILD_SSL, line6.getOption());\n-\n-\t\tassertFalse(i.hasNext());\n-\t}\n-\n-\tpublic void testHelpLines_NoChildren() {\n-\t\tfinal Option option = buildComplexParent();\n-\t\tfinal Set settings = new HashSet(DisplaySetting.ALL);\n-\t\tsettings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);\n-\t\tfinal List lines = option.helpLines(0, settings, null);\n-\t\tfinal Iterator i = lines.iterator();\n-\n-\t\tfinal HelpLine line1 = (HelpLine) i.next();\n-\t\tassertEquals(0, line1.getIndent());\n-\t\tassertEquals(option, line1.getOption());\n-\n-\t\tfinal HelpLine line2 = (HelpLine) i.next();\n-\t\tassertEquals(1, line2.getIndent());\n-\t\tassertEquals(COMPLEX_ARGUMENT, line2.getOption());\n-\n-\t\tassertFalse(i.hasNext());\n-\t}\n-    \n-    public void testGetId(){\n+public class ParentTest\n+    extends ParentTestCase {\n+    public static final Argument COMPLEX_ARGUMENT =\n+        new ArgumentBuilder().withName(\"username\").withMinimum(1).withMaximum(1).create();\n+    public static final Option COMPLEX_CHILD_SSL =\n+        new DefaultOptionBuilder().withLongName(\"ssl\").withShortName(\"s\").create();\n+    public static final Option COMPLEX_CHILD_BASIC =\n+        new DefaultOptionBuilder().withLongName(\"basic\").withShortName(\"b\").create();\n+    public static final Option COMPLEX_CHILD_DIGEST =\n+        new DefaultOptionBuilder().withLongName(\"digest\").withShortName(\"d\").create();\n+    public static final Group COMPLEX_CHILDREN =\n+        new GroupBuilder().withName(\"login-opts\").withOption(COMPLEX_CHILD_BASIC)\n+                          .withOption(COMPLEX_CHILD_DIGEST).withOption(COMPLEX_CHILD_SSL).create();\n+\n+    public static Parent buildLibParent() {\n+        final Argument argument = ArgumentTest.buildPathArgument();\n+\n+        return new DefaultOption(\"-\", \"--\", false, \"--lib\", \"Specifies library search path\", null,\n+                                 null, false, argument, null, 'l');\n+    }\n+\n+    public static Parent buildKParent() {\n+        final Group children = GroupTest.buildApacheCommandGroup();\n+\n+        return new DefaultOption(\"-\", \"--\", false, \"-k\", \"desc\", null, null, false, null, children,\n+                                 'k');\n+    }\n+\n+    public static Parent buildComplexParent() {\n+        return new CommandBuilder().withName(\"login\").withName(\"lo\").withName(\"l\")\n+                                   .withArgument(COMPLEX_ARGUMENT).withChildren(COMPLEX_CHILDREN)\n+                                   .create();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()\n+     */\n+    public void testProcessParent()\n+        throws OptionException {\n+        final Parent option = buildKParent();\n+        final List args = list(\"-k\", \"start\");\n+        final WriteableCommandLine commandLine = commandLine(option, args);\n+        final ListIterator iterator = args.listIterator();\n+        option.processParent(commandLine, iterator);\n+\n+        assertEquals(\"start\", iterator.next());\n+        assertFalse(iterator.hasNext());\n+        assertTrue(commandLine.hasOption(option));\n+        assertTrue(commandLine.hasOption(\"-k\"));\n+        assertTrue(commandLine.getValues(option).isEmpty());\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()\n+     */\n+    public void testCanProcess() {\n+        final Parent option = buildKParent();\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), \"-k\"));\n+    }\n+\n+    public void testCanProcess_BadMatch() {\n+        final Parent option = buildKParent();\n+        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), \"-K\"));\n+    }\n+\n+    public void testCanProcess_ContractedArgument() {\n+        final Parent option = buildLibParent();\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), \"--lib=/usr/lib\"));\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()\n+     */\n+    public void testPrefixes() {\n+        final Parent option = buildKParent();\n+        assertContentsEqual(list(\"-\", \"--\"), option.getPrefixes());\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.cli2.OptionTestCase#testProcess()\n+     */\n+    public void testProcess()\n+        throws OptionException {\n+        final Parent option = CommandTest.buildStartCommand();\n+        final List args = list(\"start\");\n+        final WriteableCommandLine commandLine = commandLine(option, args);\n+        final ListIterator iterator = args.listIterator();\n+        option.process(commandLine, iterator);\n+\n+        assertFalse(iterator.hasNext());\n+        assertTrue(commandLine.hasOption(option));\n+        assertTrue(commandLine.hasOption(\"start\"));\n+        assertFalse(commandLine.hasOption(\"stop\"));\n+        assertTrue(commandLine.getValues(option).isEmpty());\n+    }\n+\n+    public void testProcess_NoMatch()\n+        throws OptionException {\n+        final Parent option = CommandTest.buildStartCommand();\n+        final List args = list(\"whatever\");\n+        final WriteableCommandLine commandLine = commandLine(option, args);\n+        final ListIterator iterator = args.listIterator();\n+\n+        try {\n+            option.process(commandLine, iterator);\n+            fail(\"unexpected token not thrown\");\n+        } catch (OptionException exp) {\n+            OptionException e =\n+                new OptionException(option, ResourceConstants.UNEXPECTED_TOKEN, \"whatever\");\n+            assertEquals(\"wrong exception message\", e.getMessage(), exp.getMessage());\n+        }\n+    }\n+\n+    public void testProcess_Children()\n+        throws OptionException {\n+        final Parent option = buildKParent();\n+        final List args = list(\"-k\", \"start\");\n+        final WriteableCommandLine commandLine = commandLine(option, args);\n+        final ListIterator iterator = args.listIterator();\n+        option.process(commandLine, iterator);\n+\n+        assertNull(option.findOption(\"whatever\"));\n+        assertNotNull(option.findOption(\"start\"));\n+\n+        assertFalse(iterator.hasNext());\n+        assertTrue(commandLine.hasOption(option));\n+        assertTrue(commandLine.hasOption(\"-k\"));\n+        assertTrue(commandLine.hasOption(\"start\"));\n+        assertFalse(commandLine.hasOption(\"stop\"));\n+        assertTrue(commandLine.getValues(option).isEmpty());\n+    }\n+\n+    public void testProcess_Argument()\n+        throws OptionException {\n+        final Parent option = buildLibParent();\n+        final List args = list(\"--lib=C:\\\\WINDOWS;C:\\\\WINNT;C:\\\\\");\n+        final WriteableCommandLine commandLine = commandLine(option, args);\n+        final ListIterator iterator = args.listIterator();\n+        option.process(commandLine, iterator);\n+\n+        assertFalse(iterator.hasNext());\n+        assertTrue(commandLine.hasOption(option));\n+        assertTrue(commandLine.hasOption(\"--lib\"));\n+        assertContentsEqual(list(\"C:\\\\WINDOWS\", \"C:\\\\WINNT\", \"C:\\\\\"), commandLine.getValues(option));\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()\n+     */\n+    public void testTriggers() {\n+        final Parent option = buildKParent();\n+        assertContentsEqual(list(\"-k\"), option.getTriggers());\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.cli2.OptionTestCase#testValidate()\n+     */\n+    public void testValidate()\n+        throws OptionException {\n+        final Parent option = CommandTest.buildStartCommand();\n+        final WriteableCommandLine commandLine = commandLine(option, list());\n+\n+        option.validate(commandLine);\n+\n+        commandLine.addOption(option);\n+\n+        option.validate(commandLine);\n+    }\n+\n+    public void testValidate_Children()\n+        throws OptionException {\n+        final Parent option = buildKParent();\n+        final WriteableCommandLine commandLine = commandLine(option, list());\n+\n+        option.validate(commandLine);\n+        commandLine.addOption(option);\n+\n+        try {\n+            option.validate(commandLine);\n+            fail(\"Missing a command\");\n+        } catch (OptionException moe) {\n+            assertNotNull(moe.getOption());\n+            assertNotSame(option, moe.getOption());\n+        }\n+    }\n+\n+    public void testValidate_Argument()\n+        throws OptionException {\n+        final Command option = CommandTest.buildLoginCommand();\n+        final WriteableCommandLine commandLine = commandLine(option, list());\n+\n+        option.validate(commandLine);\n+\n+        commandLine.addOption(option);\n+\n+        try {\n+            option.validate(commandLine);\n+            fail(\"Missing a value\");\n+        } catch (OptionException moe) {\n+            assertSame(option, moe.getOption());\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()\n+     */\n+    public void testAppendUsage() {\n+        final Option option = buildComplexParent();\n+        final StringBuffer buffer = new StringBuffer();\n+        final Set settings = new HashSet(DisplaySetting.ALL);\n+        settings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);\n+        option.appendUsage(buffer, settings, null);\n+\n+        assertEquals(\"[login (l,lo) <username> [login-opts (--basic (-b)|--digest (-d)|--ssl (-s))]]\",\n+                     buffer.toString());\n+    }\n+\n+    public void testAppendUsage_NoArguments() {\n+        final Option option = buildComplexParent();\n+        final StringBuffer buffer = new StringBuffer();\n+        final Set settings = new HashSet(DisplaySetting.ALL);\n+        settings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\n+        settings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);\n+        option.appendUsage(buffer, settings, null);\n+\n+        assertEquals(\"[login (l,lo) [login-opts (--basic (-b)|--digest (-d)|--ssl (-s))]]\",\n+                     buffer.toString());\n+    }\n+\n+    public void testAppendUsage_NoChildren() {\n+        final Option option = buildComplexParent();\n+        final StringBuffer buffer = new StringBuffer();\n+        final Set settings = new HashSet(DisplaySetting.ALL);\n+        settings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);\n+        option.appendUsage(buffer, settings, null);\n+\n+        assertEquals(\"[login (l,lo) <username>]\", buffer.toString());\n+    }\n+\n+    public void testAppendUsage_NoArgumentsOrChildren() {\n+        final Option option = buildComplexParent();\n+        final StringBuffer buffer = new StringBuffer();\n+        final Set settings = new HashSet(DisplaySetting.ALL);\n+        settings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);\n+        settings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\n+        option.appendUsage(buffer, settings, null);\n+\n+        assertEquals(\"[login (l,lo)]\", buffer.toString());\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()\n+     */\n+    public void testGetPreferredName() {\n+        final Option option = buildLibParent();\n+        assertEquals(\"--lib\", option.getPreferredName());\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()\n+     */\n+    public void testGetDescription() {\n+        final Option option = buildLibParent();\n+        assertEquals(\"Specifies library search path\", option.getDescription());\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()\n+     */\n+    public void testHelpLines() {\n+        final Option option = buildComplexParent();\n+        final List lines = option.helpLines(0, DisplaySetting.ALL, null);\n+        final Iterator i = lines.iterator();\n+\n+        final HelpLine line1 = (HelpLine) i.next();\n+        assertEquals(0, line1.getIndent());\n+        assertEquals(option, line1.getOption());\n+\n+        final HelpLine line2 = (HelpLine) i.next();\n+        assertEquals(1, line2.getIndent());\n+        assertEquals(COMPLEX_ARGUMENT, line2.getOption());\n+\n+        final HelpLine line3 = (HelpLine) i.next();\n+        assertEquals(1, line3.getIndent());\n+        assertEquals(COMPLEX_CHILDREN, line3.getOption());\n+\n+        final HelpLine line4 = (HelpLine) i.next();\n+        assertEquals(2, line4.getIndent());\n+        assertEquals(COMPLEX_CHILD_BASIC, line4.getOption());\n+\n+        final HelpLine line5 = (HelpLine) i.next();\n+        assertEquals(2, line5.getIndent());\n+        assertEquals(COMPLEX_CHILD_DIGEST, line5.getOption());\n+\n+        final HelpLine line6 = (HelpLine) i.next();\n+        assertEquals(2, line6.getIndent());\n+        assertEquals(COMPLEX_CHILD_SSL, line6.getOption());\n+\n+        assertFalse(i.hasNext());\n+    }\n+\n+    public void testHelpLines_NoArgument() {\n+        final Option option = buildComplexParent();\n+        final Set settings = new HashSet(DisplaySetting.ALL);\n+        settings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);\n+\n+        final List lines = option.helpLines(0, settings, null);\n+        final Iterator i = lines.iterator();\n+\n+        final HelpLine line1 = (HelpLine) i.next();\n+        assertEquals(0, line1.getIndent());\n+        assertEquals(option, line1.getOption());\n+\n+        final HelpLine line3 = (HelpLine) i.next();\n+        assertEquals(1, line3.getIndent());\n+        assertEquals(COMPLEX_CHILDREN, line3.getOption());\n+\n+        final HelpLine line4 = (HelpLine) i.next();\n+        assertEquals(2, line4.getIndent());\n+        assertEquals(COMPLEX_CHILD_BASIC, line4.getOption());\n+\n+        final HelpLine line5 = (HelpLine) i.next();\n+        assertEquals(2, line5.getIndent());\n+        assertEquals(COMPLEX_CHILD_DIGEST, line5.getOption());\n+\n+        final HelpLine line6 = (HelpLine) i.next();\n+        assertEquals(2, line6.getIndent());\n+        assertEquals(COMPLEX_CHILD_SSL, line6.getOption());\n+\n+        assertFalse(i.hasNext());\n+    }\n+\n+    public void testHelpLines_NoChildren() {\n+        final Option option = buildComplexParent();\n+        final Set settings = new HashSet(DisplaySetting.ALL);\n+        settings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);\n+\n+        final List lines = option.helpLines(0, settings, null);\n+        final Iterator i = lines.iterator();\n+\n+        final HelpLine line1 = (HelpLine) i.next();\n+        assertEquals(0, line1.getIndent());\n+        assertEquals(option, line1.getOption());\n+\n+        final HelpLine line2 = (HelpLine) i.next();\n+        assertEquals(1, line2.getIndent());\n+        assertEquals(COMPLEX_ARGUMENT, line2.getOption());\n+\n+        assertFalse(i.hasNext());\n+    }\n+\n+    public void testGetId() {\n         assertEquals('h', DefaultOptionTest.buildHelpOption().getId());\n         assertEquals('X', DefaultOptionTest.buildXOption().getId());\n         assertEquals(0, CommandTest.buildStartCommand().getId());\n--- a/src/test/org/apache/commons/cli2/validation/DateValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/DateValidatorTest.java\n                 fail(\"maximum out of bounds exception not caught\");\n             } catch (final InvalidArgumentException exp) {\n                 assertEquals(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,\n-                        new Object[] { \"2004-10-12\" }), exp.getMessage());\n+                                                  new Object[] { \"2004-10-12\" }), exp.getMessage());\n             }\n         }\n     }", "timestamp": 1126625724, "metainfo": ""}