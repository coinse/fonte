{"sha": "28a8c187f1423b5f10654aba41dc2e8ad4719c81", "log": "Changed MissingOptionException to include the list of missing options and build itself the exception message  ", "commit": "\n--- a/src/java/org/apache/commons/cli/MissingOptionException.java\n+++ b/src/java/org/apache/commons/cli/MissingOptionException.java\n \n package org.apache.commons.cli;\n \n+import java.util.List;\n+import java.util.Iterator;\n+\n /**\n  * Thrown when a required option has not been provided.\n  *\n  */\n public class MissingOptionException extends ParseException\n {\n+    /** The list of missing options */\n+    private List missingOptions;\n+\n     /**\n      * Construct a new <code>MissingSelectedException</code>\n      * with the specified detail message.\n     {\n         super(message);\n     }\n+\n+    /**\n+     * Constructs a new <code>MissingSelectedException</code> with the\n+     * specified list of missing options.\n+     *\n+     * @param missingOptions the list of missing options\n+     * @since 1.2\n+     */\n+    public MissingOptionException(List missingOptions)\n+    {\n+        this(createMessage(missingOptions));\n+        this.missingOptions = missingOptions;\n+    }\n+\n+    /**\n+     * Return the list of options (as strings) missing in the command line parsed.\n+     *\n+     * @since 1.2\n+     */\n+    public List getMissingOptions()\n+    {\n+        return missingOptions;\n+    }\n+\n+    /**\n+     * Build the exception message from the specified list of options.\n+     *\n+     * @param missingOptions\n+     * @since 1.2\n+     */\n+    private static String createMessage(List missingOptions)\n+    {\n+        StringBuffer buff = new StringBuffer(\"Missing required option\");\n+        buff.append(missingOptions.size() == 1 ? \"\" : \"s\");\n+        buff.append(\": \");\n+\n+        Iterator it = missingOptions.iterator();\n+        while (it.hasNext())\n+        {\n+            buff.append(it.next());\n+            if (it.hasNext())\n+            {\n+                buff.append(\", \");\n+            }\n+        }\n+\n+        return buff.toString();\n+    }\n }\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n     }\n \n     /**\n-     * <p>Throws a {@link MissingOptionException} if all of the\n-     * required options are no present.</p>\n+     * Throws a {@link MissingOptionException} if all of the required options\n+     * are not present.\n      *\n      * @throws MissingOptionException if any of the required Options\n      * are not present.\n      */\n-    protected void checkRequiredOptions()\n-        throws MissingOptionException\n-    {\n-        // if there are required options that have not been\n-        // processsed\n-        if (getRequiredOptions().size() > 0)\n-        {\n-            Iterator iter = getRequiredOptions().iterator();\n-            StringBuffer buff = new StringBuffer(\"Missing required option\");\n-            buff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");\n-            buff.append(\": \");\n-\n-\n-            // loop through the required options\n-            while (iter.hasNext())\n-            {\n-                buff.append(iter.next());\n-                buff.append(\", \");\n-            }\n-\n-            throw new MissingOptionException(buff.substring(0, buff.length() - 2));\n+    protected void checkRequiredOptions() throws MissingOptionException\n+    {\n+        // if there are required options that have not been processsed\n+        if (!getRequiredOptions().isEmpty())\n+        {\n+            throw new MissingOptionException(getRequiredOptions());\n         }\n     }\n \n--- a/src/test/org/apache/commons/cli/ParseRequiredTest.java\n+++ b/src/test/org/apache/commons/cli/ParseRequiredTest.java\n         catch (MissingOptionException e)\n         {\n             assertEquals( \"Incorrect exception message\", \"Missing required option: b\", e.getMessage() );\n+            assertTrue(e.getMissingOptions().contains(\"b\"));\n         }\n         catch (ParseException e)\n         {\n         catch (MissingOptionException e)\n         {\n             assertEquals( \"Incorrect exception message\", \"Missing required options: b, c\", e.getMessage() );\n+            assertTrue(e.getMissingOptions().contains(\"b\"));\n+            assertTrue(e.getMissingOptions().contains(\"c\"));\n         }\n         catch (ParseException e)\n         {", "timestamp": 1216711818, "metainfo": ""}