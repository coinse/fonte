{"sha": "e503a076f584ca4aacbd8fa785111262f7411098", "log": "- set hidden attribute when running on windows - set readable.txt to read-only prior to running tests  ", "commit": "\n--- a/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java\n package org.apache.commons.cli2.validation;\n \n import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n     }\n \n     public void testValidate_ReadableFile() {\n+    \t// make file readonly\n+    \tFile file = new File(\"src/test/data/readable.txt\");\n+    \tfile.setReadOnly();\n+\n         final Object[] array = new Object[] { \"src/test/data/readable.txt\", \"src/test/data/notreadable.txt\"};\n         final List list = Arrays.asList(array);\n         final FileValidator validator = FileValidator.getExistingFileInstance();\n     }\n \n     public void testValidate_WritableFile() {\n-        final Object[] array = new Object[] { \"src/test/data/writable.txt\", \"src/test/data/readable.txt\"};\n+    \t// make file readonly\n+    \tFile file = new File(\"src/test/data/readable.txt\");\n+    \tfile.setReadOnly();\n+\n+    \tfinal Object[] array = new Object[] { \"src/test/data/writable.txt\", \"src/test/data/readable.txt\"};\n         final List list = Arrays.asList(array);\n         final FileValidator validator = FileValidator.getExistingFileInstance();\n         validator.setWritable(true);\n     }\n \n     public void testValidate_HiddenFile() throws InvalidArgumentException {\n-        final Object[] array = new Object[] { \"src/test/data/hidden.txt\", \"src\"};\n-        final List list = Arrays.asList(array);\n-        final FileValidator validator = FileValidator.getExistingFileInstance();\n-        validator.setHidden(true);\n+    \t// make file hidden on Windows\n+    \tattribute(\"H\");\n+    \t\n+\t\tfinal Object[] array = new Object[] { \".hidden\", \"src\"};\n+\t\tfinal List list = Arrays.asList(array);\n+\t\tfinal FileValidator validator = FileValidator.getExistingFileInstance();\n+\t\tvalidator.setHidden(true);\n+\t\t\n+\t\tassertFalse(\"is not a directory validator\", validator.isDirectory());\n+\t\tassertTrue(\"is a file validator\", validator.isFile());\n+\t\tassertTrue(\"is an existing file validator\", validator.isExisting());\n+\t\tassertTrue(\"is a hidden file validator\", validator.isHidden());\n+\t\n+\t\ttry{\n+\t\t\tvalidator.validate(list);\n+\t\t\tfail(\"InvalidArgumentException\");\n+\t\t}\n+\t\tcatch(InvalidArgumentException e){\n+\t\t\tassertEquals(\"src\",e.getMessage());\n+\t\t}\n+    }\n \n-        assertFalse(\"is not a directory validator\", validator.isDirectory());\n-        assertTrue(\"is a file validator\", validator.isFile());\n-        assertTrue(\"is an existing file validator\", validator.isExisting());\n-        assertTrue(\"is a hidden file validator\", validator.isHidden());\n+    private void attribute(String attr) {\n+\t\tfinal String os = System.getProperty(\"os.name\").toLowerCase();\n \n-        try{\n-            validator.validate(list);\n-            fail(\"InvalidArgumentException\");\n-        }\n-        catch(InvalidArgumentException e){\n-            assertEquals(\"src\",e.getMessage());\n-        }\n+\t\t// if the test is run on windows, run the attrib program\n+\t\t// to set the hidden attribute\n+\t\tif (os.indexOf(\"windows\") != -1) {\n+\t\t\t// windows\n+\t\t\ttry {\n+\t\t\t\tProcess proc = Runtime.getRuntime().exec(\"attrib.exe +\" + attr + \" src/test/data/.hidden.txt\", null, new File(\".\"));\n+\t\t\t} \n+\t\t\tcatch (IOException e) {\n+\t\t\t\t\tSystem.out.println(e.getMessage());\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t} \n     }\n \n     public void testValidate_Existing() {", "timestamp": 1125954463, "metainfo": ""}