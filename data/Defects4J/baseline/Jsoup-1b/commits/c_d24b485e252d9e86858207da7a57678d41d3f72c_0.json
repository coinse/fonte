{"sha": "d24b485e252d9e86858207da7a57678d41d3f72c", "log": "Improved document normalisation.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n \n import org.apache.commons.lang.Validate;\n import org.jsoup.parser.Tag;\n+\n+import java.util.List;\n+import java.util.ArrayList;\n \n /**\n  A HTML Document.\n         return new Element(Tag.valueOf(tagName), this.baseUri());\n     }\n \n+    /**\n+     Normalise the document. This happens after the parse phase so generally does not need to be called.\n+     Moves any text content that is not in the body element into the body.\n+     @return this document after normalisation\n+     */\n+    public Document normalise() {\n+        if (select(\"html\").isEmpty())\n+            appendElement(\"html\");\n+        if (head() == null)\n+            select(\"html\").first().appendElement(\"head\");\n+        if (body() == null)\n+            select(\"html\").first().appendElement(\"body\");\n+\n+        normalise(this);\n+        normalise(select(\"html\").first());\n+        normalise(head());\n+\n+        return this;\n+    }\n+\n+    // does not recurse. the result order isn't great here (not intuitive); they are in the body though.\n+    private void normalise(Element element) {\n+        List<Node> toMove = new ArrayList<Node>();\n+        for (Node node: element.childNodes) {\n+            if (node instanceof TextNode) {\n+                TextNode tn = (TextNode) node;\n+                if (!tn.isBlank())\n+                    toMove.add(tn);\n+            }\n+        }\n+\n+        for (Node node: toMove) {\n+            element.removeChild(node);\n+            body().appendChild(new TextNode(\" \", \"\"));\n+            body().appendChild(node);\n+        }\n+    }\n+\n     @Override\n     public String outerHtml() {\n         return super.html(); // no outer wrapper tag\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     /**\n+     Test if this element has any text content (that is not just whitespace).\n+     @return true if element has non-blank text content.\n+     */\n+    public boolean hasText() {\n+        for (Node child: childNodes) {\n+            if (child instanceof TextNode) {\n+                TextNode textNode = (TextNode) child;\n+                if (!textNode.isBlank())\n+                    return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n      * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n      * @return the data, or empty string if none\n      */\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n \n import org.apache.commons.lang.StringEscapeUtils;\n import org.apache.commons.lang.Validate;\n+import org.apache.commons.lang.StringUtils;\n \n /**\n  A text node.\n      */\n     public String getWholeText() {\n         return attributes.get(TEXT_KEY);\n+    }\n+\n+    /**\n+     Test if this text node is blank -- that is, empty or only whitespace (including newlines).\n+     @return true if this document is empty or only whitespace, false if it contains any text content.\n+     */\n+    public boolean isBlank() {\n+        return StringUtils.isBlank(normaliseWhitespace(getWholeText()));\n     }\n \n     void outerHtml(StringBuilder accum) {\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n                 parseTextNode();\n             }\n         }\n-        return doc;\n+        return doc.normalise();\n     }\n \n     private void parseComment() {\n--- /dev/null\n+++ b/src/test/java/org/jsoup/nodes/TextNodeTest.java\n+package org.jsoup.nodes;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ Test TextNodes\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class TextNodeTest {\n+    @Test public void testBlank() {\n+        TextNode one = new TextNode(\"\", \"\");\n+        TextNode two = new TextNode(\"     \", \"\");\n+        TextNode three = new TextNode(\"  \\n\\n   \", \"\");\n+        TextNode four = new TextNode(\"Hello\", \"\");\n+        TextNode five = new TextNode(\"  \\nHello \", \"\");\n+\n+        assertTrue(one.isBlank());\n+        assertTrue(two.isBlank());\n+        assertTrue(three.isBlank());\n+        assertFalse(four.isBlank());\n+        assertFalse(five.isBlank());\n+    }\n+}\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n     @Test public void handlesFrames() {\n         String h = \"<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>\";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\" /><frame src=\\\"foo\\\" /></frameset></html>\",\n+        assertEquals(\"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\" /><frame src=\\\"foo\\\" /></frameset><body></body></html>\",\n                 TextUtil.stripNewlines(doc.html()));\n     }\n \n         assertEquals(\"http://example.com/foo\", a.attr(\"abs:href\"));\n     }\n \n+    @Test public void normalisesDocument() {\n+        String h = \"<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven \";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(\"<!doctype html><html><head><link /></head><body>Five Six Seven  One Two Four Three</body></html>\",\n+                TextUtil.stripNewlines(doc.html()));\n+    }\n+\n+    @Test public void normlisesEmptyDocument() {\n+        Document doc = Jsoup.parse(\"\");\n+        assertEquals(\"<html><head></head><body></body></html>\",TextUtil.stripNewlines(doc.html()));\n+    }\n+\n \n }", "timestamp": 1309605110, "metainfo": ""}