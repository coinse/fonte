{"sha": "a52e669ca8bc48265accd57d610c0258f7891841", "log": "Improved HTML output (pretty-print)", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n     }\n \n     void outerHtml(StringBuilder accum) {\n+        indent(accum);\n         accum.append(String.format(\"<!--%s-->\", getData()));\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     void outerHtml(StringBuilder accum) {\n- \n+        if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\n+            indent(accum);\n         accum\n                 .append(\"<\")\n                 .append(tagName())\n             accum.append(\" />\");\n         } else {\n             accum.append(\">\");\n-            if (tag.canContainBlock())\n-                accum.append(\"\\n\");\n             html(accum);\n+            if (tag.canContainBlock()) indent(accum);\n             accum.append(\"</\").append(tagName()).append(\">\");\n-            if (tag.isBlock())\n-                accum.append(\"\\n\");\n         }\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n \n import org.apache.commons.lang.NotImplementedException;\n import org.apache.commons.lang.Validate;\n+import org.apache.commons.lang.StringUtils;\n \n import java.net.MalformedURLException;\n import java.net.URL;\n         childNodes.add(in);\n         in.parentNode = this;\n     }\n+\n+    protected int nodeDepth() {\n+        if (parentNode == null)\n+            return 0;\n+        else\n+            return parentNode.nodeDepth() + 1;\n+    }\n     \n     /**\n      Retrieves this node's sibling nodes. Effectively, {@link #childNodes()  node.parent.childNodes()}.\n             return null;\n     }\n \n+    /**\n+     * Get the list index of this node in its node sibling list. I.e. if this is the first node\n+     * sibling, returns 0.\n+     * @return position in node sibling list\n+     * @see org.jsoup.nodes.Element#elementSiblingIndex()\n+     */\n+    public Integer siblingIndex() {\n+        return indexInList(this, parent().childNodes);\n+    }\n+\n     protected static <N extends Node> Integer indexInList(N search, List<N> nodes) {\n         Validate.notNull(search);\n         Validate.notNull(nodes);\n         return outerHtml();\n     }\n \n+    protected void indent(StringBuilder accum) {\n+        accum.append(\"\\n\").append(StringUtils.leftPad(\"\", nodeDepth() -1 * 2));\n+    }\n+\n     @Override\n     public boolean equals(Object o) {\n         if (this == o) return true;\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n             html = normaliseWhitespace(html);\n         }\n \n+        if (!isBlank() && parentNode instanceof Element && ((Element) parentNode).tag().canContainBlock()  && siblingIndex() == 0)\n+            indent(accum);\n         accum.append(html);\n     }\n \n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n \n         // head\n         // all ancestors set to (head, body): so implicitly create head, but allow in body\n-        createInline(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n-        createInline(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n-        createInline(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n-        createInline(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n+        createBlock(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n+        createBlock(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n+        createBlock(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n+        createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n         createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty(); // only within head\n         createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\"); // flow (block/inline) or param\n-        createInline(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n+        createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n         createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n \n         createBlock(\"FRAME\").setAncestor(\"FRAMESET\").setEmpty();\n--- a/src/test/java/org/jsoup/TextUtil.java\n+++ b/src/test/java/org/jsoup/TextUtil.java\n  @author Jonathan Hedley, jonathan@hedley.net */\n public class TextUtil {\n     public static String stripNewlines(String text) {\n-        text = text.replaceAll(\"[\\\\n\\\\r]\", \"\");\n+        text = text.replaceAll(\"\\\\n\\\\s*\", \"\");\n         return text;\n     }\n }\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n \n     @Test public void testFormatHtml() {\n         Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n-        assertEquals(\"<html>\\n<head>\\n</head>\\n<body>\\n<div>\\n<p>Hello</p>\\n</div>\\n</body>\\n</html>\", doc.html());\n+        assertEquals(\"<html>\\n<head>\\n</head>\\n<body>\\n <div>\\n  <p>Hello</p>\\n </div>\\n</body>\\n</html>\", doc.html());\n     }\n \n     @Test public void testSetText() {\n         Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n         Element div = doc.getElementById(\"1\");\n         div.appendText(\" there & now >\");\n-        assertEquals(\"<p>Hello</p>\\n there &amp; now &gt;\", div.html());\n+        assertEquals(\"<p>Hello</p> there &amp; now &gt;\", TextUtil.stripNewlines(div.html()));\n     }\n     \n     @Test public void testPrependText() {\n         Element div = doc.getElementById(\"1\");\n         div.prependText(\"there & now > \");\n         assertEquals(\"there & now > Hello\", div.text());\n-        assertEquals(\"there &amp; now &gt; <p>Hello</p>\", div.html());\n+        assertEquals(\"there &amp; now &gt; <p>Hello</p>\", TextUtil.stripNewlines(div.html()));\n     }\n     \n     @Test public void testAddNewHtml() {\n--- a/src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java\n         String h = \"<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());\n \n-        assertEquals(\"Hello <b>there</b>!\", cleanHtml);\n+        assertEquals(\"Hello <b>there</b>!\", TextUtil.stripNewlines(cleanHtml));\n     }\n     \n     @Test public void simpleBehaviourTest2() {\n         String h = \"Hello <b>there</b>!\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());\n \n-        assertEquals(\"Hello <b>there</b>!\", cleanHtml);\n+        assertEquals(\"Hello <b>there</b>!\", TextUtil.stripNewlines(cleanHtml));\n     }\n \n     @Test public void basicBehaviourTest() {\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n         String h = \"<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven \";\n         Document doc = Jsoup.parse(h);\n         assertEquals(\"<!doctype html><html><head><link /></head><body>Five Six Seven  One Two Four Three</body></html>\",\n-                TextUtil.stripNewlines(doc.html()));\n+                TextUtil.stripNewlines(doc.html())); // is spaced OK if not newline & space stripped\n     }\n \n     @Test public void normlisesEmptyDocument() {", "timestamp": 1309605110, "metainfo": ""}