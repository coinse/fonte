{"sha": "e8e29ca111772980970275662e0027fa695d9f27", "log": "Optimised normaliseWhitespace", "commit": "\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n         }\n         return true;\n     }\n+\n+    public static String normaliseWhitespace(String string) {\n+        StringBuilder sb = new StringBuilder(string.length());\n+\n+        boolean lastWasWhite = false;\n+        boolean modified = false;\n+\n+        int l = string.length();\n+        for (int i = 0; i < l; i++) {\n+            int c = string.codePointAt(i);\n+            if (Character.isWhitespace(c)) {\n+                if (lastWasWhite) {\n+                    modified = true;\n+                    continue;\n+                }\n+                if (c != ' ')\n+                    modified = true;\n+                sb.append(' ');\n+                lastWasWhite = true;\n+            }\n+            else {\n+                sb.appendCodePoint(c);\n+                lastWasWhite = false;\n+            }\n+        }\n+        return modified ? sb.toString() : string;\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n \n     @Override\n     public final Element parent() {\n-        return (Element) super.parent();\n+        return (Element) parentNode;\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n package org.jsoup.nodes;\n \n import org.jsoup.helper.StringUtil;\n-import org.jsoup.helper.Validate;\n-\n-import java.util.regex.Pattern;\n \n /**\n  A text node.\n  @author Jonathan Hedley, jonathan@hedley.net */\n public class TextNode extends Node {\n     private static final String TEXT_KEY = \"text\";\n-    private static final Pattern spaceNormaliser = Pattern.compile(\"\\\\s{2,}|(?:\\\\r\\\\n|\\\\r|\\\\n)\");\n \n     /**\n      Create a new TextNode representing the supplied (unencoded) text).\n     }\n \n     static String normaliseWhitespace(String text) {\n-        text = spaceNormaliser.matcher(text).replaceAll(\" \"); // more than one space, and newlines to \" \"\n+        text = StringUtil.normaliseWhitespace(text);\n         return text;\n     }\n \n--- a/src/test/java/org/jsoup/helper/StringUtilTest.java\n+++ b/src/test/java/org/jsoup/helper/StringUtilTest.java\n         assertTrue(StringUtil.isNumeric(\"1\"));\n         assertTrue(StringUtil.isNumeric(\"1234\"));\n     }\n+\n+    @Test public void normaliseWhiteSpace() {\n+        assertEquals(\" \", StringUtil.normaliseWhitespace(\"    \\r \\n \\r\\n\"));\n+        assertEquals(\" hello there \", StringUtil.normaliseWhitespace(\"   hello   \\r \\n  there    \\n\"));\n+        assertEquals(\"hello\", StringUtil.normaliseWhitespace(\"hello\"));\n+        assertEquals(\"hello there\", StringUtil.normaliseWhitespace(\"hello\\nthere\"));\n+    }\n+\n+    @Test public void normaliseWhiteSpaceModified() {\n+        String check1 = \"Hello there\";\n+        String check2 = \"Hello\\nthere\";\n+        String check3 = \"Hello  there\";\n+\n+        // does not create new string no mods done\n+        assertTrue(check1 == StringUtil.normaliseWhitespace(check1));\n+        assertTrue(check2 != StringUtil.normaliseWhitespace(check2));\n+        assertTrue(check3 != StringUtil.normaliseWhitespace(check3));\n+    }\n }", "timestamp": 1309605118, "metainfo": ""}