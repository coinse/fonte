{"sha": "a0bd16891705bf4087e0766d744a009ac923b5f3", "log": "1. rename methods and variables 2. extend javaDoc", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n \n     /**\n      * Setter to disable\\enable SSL certificates checks during https connection\n+     * <p/>\n+     * By default all connections over HTTPS perform normal validation of certificates.\n+     * <b>NB!</b>Use this feature at your own risk.\n+     * <p/>\n+     * Some websites use self generated certificates to sign data, which sometimes are expired,\n+     * by default request to those websites would fail, this feature allows to communicate to them.\n+     *\n      * @param value\n      */\n-    Connection setSecure (boolean value);\n+    Connection setValidateSSLCertificates(boolean value);\n \n     /**\n      * Set the request URL to fetch. The protocol must be HTTP or HTTPS.\n          *\n          * @return\n          */\n-        boolean isSecure();\n+        boolean isValidateSSLCertificates();\n \n         /**\n          * Disable SSL certificates checks.\n          * @param value\n          */\n-        void setSecure(boolean value);\n+        void setValidateSSLCertificates(boolean value);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n         res = new Response();\n     }\n \n-    public Connection setSecure(boolean value) {\n-        req.setSecure(value);\n+    public Connection setValidateSSLCertificates(boolean value) {\n+        req.setValidateSSLCertificates(value);\n         return this;\n     }\n \n         private boolean ignoreHttpErrors = false;\n         private boolean ignoreContentType = false;\n         private Parser parser;\n-//      always default to secure connections in https\n-        private boolean secure = true;\n+//      always default to validateSSLCertificates connections in https\n+        private boolean validateSSLCertificates = true;\n \n         private Request() {\n             timeoutMilliseconds = 3000;\n             return parser;\n         }\n \n-        public boolean isSecure() {\n-            return secure;\n-        }\n-\n-        public void setSecure(boolean value) {\n-            secure = value;\n+        public boolean isValidateSSLCertificates() {\n+            return validateSSLCertificates;\n+        }\n+\n+        public void setValidateSSLCertificates(boolean value) {\n+            validateSSLCertificates = value;\n         }\n     }\n \n             conn.setInstanceFollowRedirects(false); // don't rely on native redirection support\n             conn.setConnectTimeout(req.timeout());\n             conn.setReadTimeout(req.timeout());\n-            if (!req.isSecure()) {\n+            if (!req.isValidateSSLCertificates()) {\n                 initUnSecureSSL();\n                 if (conn instanceof HttpsURLConnection) {\n                     ((HttpsURLConnection)conn).setSSLSocketFactory(sslSocketFactory);\n                         String cookieVal = cd.consumeTo(\";\").trim();\n                         if (cookieVal == null)\n                             cookieVal = \"\";\n-                        // ignores path, date, domain, secure et al. req'd?\n+                        // ignores path, date, domain, validateSSLCertificates et al. req'd?\n                         // name not blank, value not null\n                         if (cookieName != null && cookieName.length() > 0)\n                             cookie(cookieName, cookieVal);\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n \n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.net.MalformedURLException;\n import java.net.URL;\n         } catch (IOException e) {\n //          that's expected exception\n         }\n-        Connection.Response  defaultRes = Jsoup.connect(url).setSecure(false).execute();\n+        Connection.Response  defaultRes = Jsoup.connect(url).setValidateSSLCertificates(false).execute();\n         assertThat(defaultRes.statusCode(),is(200));\n     }\n ", "timestamp": 1412750711, "metainfo": ""}