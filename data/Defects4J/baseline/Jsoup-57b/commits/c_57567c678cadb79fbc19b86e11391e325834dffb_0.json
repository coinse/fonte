{"sha": "57567c678cadb79fbc19b86e11391e325834dffb", "log": "Added [key~=regex] attribute selector by regular expression", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n     \n     /**\n+     * Find elements that have attributes whose values match the supplied regular expression.\n+     * @param key name of the attribute\n+     * @param pattern compiled regular expression to match against attribute values\n+     * @return elements that have attributes matching this regular expression\n+     */\n+    public Elements getElementsByAttributeValueMatching(String key, Pattern pattern) {\n+        return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this);\n+        \n+    }\n+    \n+    /**\n+     * Find elements that have attributes whose values match the supplied regular expression.\n+     * @param key name of the attribute\n+     * @param regex regular expression to match agaisnt attribute values. You can use <a href=\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\">embedded flags</a> (such as (?i) and (?m) to control regex options.\n+     * @return elements that have attributes matching this regular expression\n+     */\n+    public Elements getElementsByAttributeValueMatching(String key, String regex) {\n+        Pattern pattern;\n+        try {\n+            pattern = Pattern.compile(regex);\n+        } catch (PatternSyntaxException e) {\n+            throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);\n+        }\n+        return getElementsByAttributeValueMatching(key, pattern);\n+    }\n+    \n+    /**\n      * Find elements whose sibling index is less than the supplied index.\n      * @param index 0-based index\n      * @return elements less than index\n     \n     /**\n      * Find elements whose text matches the supplied regular expression.\n-     * @param regex regular expression to match text against\n+     * @param regex regular expression to match text against. You can use <a href=\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\">embedded flags</a> (such as (?i) and (?m) to control regex options.\n      * @return elements matching the supplied regular expression.\n      */\n     public Elements getElementsMatchingText(String regex) {\n--- a/src/main/java/org/jsoup/nodes/Evaluator.java\n+++ b/src/main/java/org/jsoup/nodes/Evaluator.java\n         }\n \n         public boolean matches(Element element) {\n-            return (element.hasAttr(key));\n+            return element.hasAttr(key);\n         }\n     }\n \n         }\n \n         public boolean matches(Element element) {\n-            return (value.equalsIgnoreCase(element.attr(key)));\n+            return element.hasAttr(key) && value.equalsIgnoreCase(element.attr(key));\n         }\n     }\n \n         }\n \n         public boolean matches(Element element) {\n-            return (!value.equalsIgnoreCase(element.attr(key)));\n+            return !value.equalsIgnoreCase(element.attr(key));\n         }\n     }\n \n         }\n \n         public boolean matches(Element element) {\n-            return element.attr(key).toLowerCase().startsWith(value); // value is lower case already\n+            return element.hasAttr(key) && element.attr(key).toLowerCase().startsWith(value); // value is lower case already\n         }\n     }\n \n         }\n \n         public boolean matches(Element element) {\n-            return element.attr(key).toLowerCase().endsWith(value); // value is lower case\n+            return element.hasAttr(key) && element.attr(key).toLowerCase().endsWith(value); // value is lower case\n         }\n     }\n \n         }\n \n         public boolean matches(Element element) {\n-            return element.attr(key).toLowerCase().contains(value); // value is lower case\n+            return element.hasAttr(key) && element.attr(key).toLowerCase().contains(value); // value is lower case\n+        }\n+    }\n+    \n+    static final class AttributeWithValueMatching extends Evaluator{\n+        protected String key;\n+        protected Pattern pattern;\n+        \n+        AttributeWithValueMatching(String key, Pattern pattern) {\n+            this.key = key.trim().toLowerCase();\n+            this.pattern = pattern;\n+        }\n+\n+        public boolean matches(Element element) {\n+            return element.hasAttr(key) && pattern.matcher(element.attr(key)).find();\n         }\n     }\n \n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  <tr><td><code>E[attr^=val]</code></td><td>an Element with the attribute named \"attr\" and value starting with \"val\"</td><td><code>a[href^=http:]</code></code></td></tr>\n  <tr><td><code>E[attr$=val]</code></td><td>an Element with the attribute named \"attr\" and value ending with \"val\"</td><td><code>img[src$=.png]</code></td></tr>\n  <tr><td><code>E[attr*=val]</code></td><td>an Element with the attribute named \"attr\" and value containing \"val\"</td><td><code>a[href*=/search/]</code></td></tr>\n+ <tr><td><code>E[attr~=<em>regex</em>]</code></td><td>an Element with the attribute named \"attr\" and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n  <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n     }\n \n     private Elements byAttribute() {\n-        String key = tq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"]\"); // eq, not, start, end, contain, (no val)\n+        String key = tq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\", \"]\"); // eq, not, start, end, contain, match, (no val)\n         Validate.notEmpty(key);\n \n         if (tq.matchChomp(\"]\")) {\n \n             else if (tq.matchChomp(\"*=\"))\n                 return root.getElementsByAttributeValueContaining(key, tq.chompTo(\"]\"));\n+            \n+            else if (tq.matchChomp(\"~=\"))\n+                return root.getElementsByAttributeValueMatching(key, tq.chompTo(\"]\"));\n             \n             else\n                 throw new SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, tq.remainder());\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(3, contains.size());\n         assertEquals(\"Bar\", contains.first().attr(\"title\"));\n         assertEquals(\"SLAM\", contains.last().attr(\"title\"));\n+    }\n+    \n+    @Test public void testByAttributeRegex() {\n+        Document doc = Jsoup.parse(\"<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif><img></p>\");\n+        Elements imgs = doc.select(\"img[src~=(?i)\\\\.(png|jpe?g)]\");\n+        assertEquals(3, imgs.size());\n+        assertEquals(\"1\", imgs.get(0).id());\n+        assertEquals(\"2\", imgs.get(1).id());\n+        assertEquals(\"3\", imgs.get(2).id());\n     }\n \n     @Test public void testAllElements() {", "timestamp": 1309605114, "metainfo": ""}