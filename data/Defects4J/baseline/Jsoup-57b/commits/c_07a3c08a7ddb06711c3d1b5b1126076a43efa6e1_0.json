{"sha": "07a3c08a7ddb06711c3d1b5b1126076a43efa6e1", "log": "Make copies of all strings returned, vs returning pointers to substrings of input.  The former method is a little faster, and creates less garbage. However when the input is large, and apps retain data pulled from the DOM, the app may perceive a memory leak, as even a small string is actually as large as the original input (although multiple strings are all backed by the one original input).  So, this implementation is a little less performant, but has a potential for greater safety, depending on how the library is used.", "commit": "\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n     }\n \n     String consumeAsString() {\n-        return input.substring(pos, pos++);\n+        return new String(input.substring(pos, pos++));\n     }\n \n     String consumeTo(char c) {\n         int offset = input.indexOf(c, pos);\n         if (offset != -1) {\n-            String consumed = input.substring(pos, offset);\n+            String consumed = new String(input.substring(pos, offset));\n             pos += consumed.length();\n             return consumed;\n         } else {\n     String consumeTo(String seq) {\n         int offset = input.indexOf(seq, pos);\n         if (offset != -1) {\n-            String consumed = input.substring(pos, offset);\n+            String consumed = new String(input.substring(pos, offset));\n             pos += consumed.length();\n             return consumed;\n         } else {\n             pos++;\n         }\n \n-        return pos > start ? input.substring(start, pos) : \"\";\n+        return pos > start ? new String(input.substring(start, pos)) : \"\";\n     }\n \n     String consumeToEnd() {\n-        String data = input.substring(pos, input.length());\n+        String data = new String(input.substring(pos, input.length()));\n         pos = input.length();\n         return data;\n     }\n                 break;\n         }\n \n-        return input.substring(start, pos);\n+        return new String(input.substring(start, pos));\n     }\n \n     String consumeLetterThenDigitSequence() {\n                 break;\n         }\n \n-        return input.substring(start, pos);\n+        return new String(input.substring(start, pos));\n     }\n \n     String consumeHexSequence() {\n             else\n                 break;\n         }\n-        return input.substring(start, pos);\n+        return new String(input.substring(start, pos));\n     }\n \n     String consumeDigitSequence() {\n             else\n                 break;\n         }\n-        return input.substring(start, pos);\n+        return new String(input.substring(start, pos));\n     }\n \n     boolean matches(char c) {", "timestamp": 1338350534, "metainfo": ""}