{"sha": "f6a1ef346c74ca3305ef5f198ac953a4fc208813", "log": "Update links to https://jsoup.org/", "commit": "\n--- a/src/main/java/org/jsoup/examples/package-info.java\n+++ b/src/main/java/org/jsoup/examples/package-info.java\n /**\n- Contains example programs and use of jsoup. See the <a href=\"http://jsoup.org/cookbook/\">jsoup cookbook</a>.\n+ Contains example programs and use of jsoup. See the <a href=\"https://jsoup.org/cookbook/\">jsoup cookbook</a>.\n  */\n package org.jsoup.examples;\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n \n     @Test\n     public void fetchURl() throws IOException {\n-        String url = \"http://jsoup.org\"; // no trailing / to force redir\n+        String url = \"https://jsoup.org\"; // no trailing / to force redir\n         Document doc = Jsoup.parse(new URL(url), 10*1000);\n         assertTrue(doc.title().contains(\"jsoup\"));\n     }\n \n     @Test\n     public void ignoresContentTypeIfSoConfigured() throws IOException {\n-        Document doc = Jsoup.connect(\"http://jsoup.org/rez/osi_logo.png\").ignoreContentType(true).get();\n+        Document doc = Jsoup.connect(\"https://jsoup.org/rez/osi_logo.png\").ignoreContentType(true).get();\n         assertEquals(\"\", doc.title()); // this will cause an ugly parse tree\n     }\n \n         Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/307.pl\"); // http://jsoup.org\n         Document doc = con.get();\n         assertTrue(doc.title().contains(\"jsoup\"));\n-        assertEquals(\"http://jsoup.org\", con.response().url().toString());\n+        assertEquals(\"https://jsoup.org\", con.response().url().toString());\n     }\n \n     @Test\n                 .data(\"Argument\", \"Riposte\")\n                 .method(Connection.Method.POST);\n         Connection.Response res = con.execute();\n-        assertEquals(\"http://jsoup.org\", res.url().toExternalForm());\n+        assertEquals(\"https://jsoup.org\", res.url().toExternalForm());\n         assertEquals(Connection.Method.GET, res.method());\n     }\n \n         Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302.pl\").followRedirects(false);\n         Connection.Response res = con.execute();\n         assertEquals(302, res.statusCode());\n-        assertEquals(\"http://jsoup.org\", res.header(\"Location\"));\n+        assertEquals(\"https://jsoup.org\", res.header(\"Location\"));\n     }\n \n     @Test\n     @Test\n     public void handles201Created() throws IOException {\n         Document doc = Jsoup.connect(\"http://direct.infohound.net/tools/201.pl\").get(); // 201, location=jsoup\n-        assertEquals(\"http://jsoup.org\", doc.location());\n+        assertEquals(\"https://jsoup.org\", doc.location());\n     }\n \n     @Test\n     public void fetchToW3c() throws IOException {\n-        String url = \"http://jsoup.org\";\n+        String url = \"https://jsoup.org\";\n         Document doc = Jsoup.connect(url).get();\n \n         W3CDom dom = new W3CDom();\n \n     @Test\n     public void fetchViaHttpProxy() throws IOException {\n-        String url = \"http://jsoup.org\";\n+        String url = \"https://jsoup.org\";\n         Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(\"localhost\", 8888));\n         Document doc = Jsoup.connect(url).proxy(proxy).get();\n         assertTrue(doc.title().contains(\"jsoup\"));\n \n     @Test\n     public void fetchViaHttpProxySetByArgument() throws IOException {\n-        String url = \"http://jsoup.org\";\n+        String url = \"https://jsoup.org\";\n         Document doc = Jsoup.connect(url).proxy(\"localhost\", 8888).get();\n         assertTrue(doc.title().contains(\"jsoup\"));\n     }\n     @Test\n     public void invalidProxyFails() throws IOException {\n         boolean caught = false;\n-        String url = \"http://jsoup.org\";\n+        String url = \"https://jsoup.org\";\n         try {\n             Document doc = Jsoup.connect(url).proxy(\"localhost\", 8889).get();\n         } catch (IOException e) {\n \n     @Test\n     public void proxyGetAndSet() throws IOException {\n-        String url = \"http://jsoup.org\";\n+        String url = \"https://jsoup.org\";\n         Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(\"localhost\", 8889)); // invalid\n         final Connection con = Jsoup.connect(url).proxy(proxy);\n \n     @Test\n     public void throwsIfRequestBodyForGet() throws IOException {\n         boolean caught = false;\n-        String url = \"http://jsoup.org\";\n+        String url = \"https://jsoup.org\";\n         try {\n             Document doc = Jsoup.connect(url).requestBody(\"fail\").get();\n         } catch (IllegalArgumentException e) {\n--- a/src/test/java/org/jsoup/nodes/NodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/NodeTest.java\n \n     @Test public void setBaseUriIsRecursive() {\n         Document doc = Jsoup.parse(\"<div><p></p></div>\");\n-        String baseUri = \"http://jsoup.org\";\n+        String baseUri = \"https://jsoup.org\";\n         doc.setBaseUri(baseUri);\n         \n         assertEquals(baseUri, doc.baseUri());\n     }\n \n     @Test public void handlesAbsPrefix() {\n-        Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\");\n+        Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"https://jsoup.org/\");\n         Element a = doc.select(\"a\").first();\n         assertEquals(\"/foo\", a.attr(\"href\"));\n-        assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\"));\n+        assertEquals(\"https://jsoup.org/foo\", a.attr(\"abs:href\"));\n         assertTrue(a.hasAttr(\"abs:href\"));\n     }\n \n     @Test public void handlesAbsOnImage() {\n-        Document doc = Jsoup.parse(\"<p><img src=\\\"/rez/osi_logo.png\\\" /></p>\", \"http://jsoup.org/\");\n+        Document doc = Jsoup.parse(\"<p><img src=\\\"/rez/osi_logo.png\\\" /></p>\", \"https://jsoup.org/\");\n         Element img = doc.select(\"img\").first();\n-        assertEquals(\"http://jsoup.org/rez/osi_logo.png\", img.attr(\"abs:src\"));\n+        assertEquals(\"https://jsoup.org/rez/osi_logo.png\", img.attr(\"abs:src\"));\n         assertEquals(img.absUrl(\"src\"), img.attr(\"abs:src\"));\n     }\n \n     @Test public void handlesAbsPrefixOnHasAttr() {\n         // 1: no abs url; 2: has abs url\n-        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='http://jsoup.org/'>Two</a>\");\n+        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org/'>Two</a>\");\n         Element one = doc.select(\"#1\").first();\n         Element two = doc.select(\"#2\").first();\n \n \n         assertTrue(two.hasAttr(\"abs:href\"));\n         assertTrue(two.hasAttr(\"href\"));\n-        assertEquals(\"http://jsoup.org/\", two.absUrl(\"href\"));\n+        assertEquals(\"https://jsoup.org/\", two.absUrl(\"href\"));\n     }\n \n     @Test public void literalAbsPrefix() {\n     Test for an issue with Java's abs URL handler.\n      */\n     @Test public void absHandlesRelativeQuery() {\n-        Document doc = Jsoup.parse(\"<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>\", \"http://jsoup.org/path/file?bar\");\n+        Document doc = Jsoup.parse(\"<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>\", \"https://jsoup.org/path/file?bar\");\n \n         Element a1 = doc.select(\"a\").first();\n-        assertEquals(\"http://jsoup.org/path/file?foo\", a1.absUrl(\"href\"));\n+        assertEquals(\"https://jsoup.org/path/file?foo\", a1.absUrl(\"href\"));\n \n         Element a2 = doc.select(\"a\").get(1);\n-        assertEquals(\"http://jsoup.org/path/bar.html?foo\", a2.absUrl(\"href\"));\n+        assertEquals(\"https://jsoup.org/path/bar.html?foo\", a2.absUrl(\"href\"));\n     }\n \n     @Test public void absHandlesDotFromIndex() {\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n     }\n \n     @Test public void hasAbsAttr() {\n-        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='http://jsoup.org'>Two</a>\");\n+        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org'>Two</a>\");\n         Elements one = doc.select(\"#1\");\n         Elements two = doc.select(\"#2\");\n         Elements both = doc.select(\"a\");\n     }\n \n     @Test public void absAttr() {\n-        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='http://jsoup.org'>Two</a>\");\n+        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org'>Two</a>\");\n         Elements one = doc.select(\"#1\");\n         Elements two = doc.select(\"#2\");\n         Elements both = doc.select(\"a\");\n \n         assertEquals(\"\", one.attr(\"abs:href\"));\n-        assertEquals(\"http://jsoup.org\", two.attr(\"abs:href\"));\n-        assertEquals(\"http://jsoup.org\", both.attr(\"abs:href\"));\n+        assertEquals(\"https://jsoup.org\", two.attr(\"abs:href\"));\n+        assertEquals(\"https://jsoup.org\", both.attr(\"abs:href\"));\n     }\n \n     @Test public void classes() {", "timestamp": 1463777698, "metainfo": ""}