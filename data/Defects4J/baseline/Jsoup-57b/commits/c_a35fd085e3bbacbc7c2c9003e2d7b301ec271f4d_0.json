{"sha": "a35fd085e3bbacbc7c2c9003e2d7b301ec271f4d", "log": "For HTML5 output, use a lowercase doctype", "commit": "\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n package org.jsoup.nodes;\n \n import org.jsoup.helper.StringUtil;\n-import org.jsoup.helper.Validate;\n+import org.jsoup.nodes.Document.OutputSettings.*;\n \n /**\n  * A {@code <!DOCTYPE>} node.\n  */\n public class DocumentType extends Node {\n+    private static final String NAME = \"name\";\n+    private static final String PUBLIC_ID = \"publicId\";\n+    private static final String SYSTEM_ID = \"systemId\";\n     // todo: quirk mode from publicId and systemId\n \n     /**\n     public DocumentType(String name, String publicId, String systemId, String baseUri) {\n         super(baseUri);\n \n-        attr(\"name\", name);\n-        attr(\"publicId\", publicId);\n-        attr(\"systemId\", systemId);\n+        attr(NAME, name);\n+        attr(PUBLIC_ID, publicId);\n+        attr(SYSTEM_ID, systemId);\n     }\n \n     @Override\n \n     @Override\n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        accum.append(\"<!DOCTYPE\");\n-        if (!StringUtil.isBlank(attr(\"name\")))\n-            accum.append(\" \").append(attr(\"name\"));\n-        if (!StringUtil.isBlank(attr(\"publicId\")))\n-            accum.append(\" PUBLIC \\\"\").append(attr(\"publicId\")).append('\"');\n-        if (!StringUtil.isBlank(attr(\"systemId\")))\n-            accum.append(\" \\\"\").append(attr(\"systemId\")).append('\"');\n+        if (out.syntax() == Syntax.html && !has(PUBLIC_ID) && !has(SYSTEM_ID)) {\n+            // looks like a html5 doctype, go lowercase for aesthetics\n+            accum.append(\"<!doctype\");\n+        } else {\n+            accum.append(\"<!DOCTYPE\");\n+        }\n+        if (has(NAME))\n+            accum.append(\" \").append(attr(NAME));\n+        if (has(PUBLIC_ID))\n+            accum.append(\" PUBLIC \\\"\").append(attr(PUBLIC_ID)).append('\"');\n+        if (has(SYSTEM_ID))\n+            accum.append(\" \\\"\").append(attr(SYSTEM_ID)).append('\"');\n         accum.append('>');\n     }\n \n     @Override\n     void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n     }\n+\n+    private boolean has(final String attribute) {\n+        return !StringUtil.isBlank(attr(attribute));\n+    }\n }\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n         Document clone = doc.clone();\n \n         assertEquals(doc.html(), clone.html());\n-        assertEquals(\"<!DOCTYPE html><html><head><title>Doctype test</title></head><body></body></html>\",\n+        assertEquals(\"<!doctype html><html><head><title>Doctype test</title></head><body></body></html>\",\n                 TextUtil.stripNewlines(clone.html()));\n     }\n     \n         Document doc = Jsoup.parse(h);\n \n         doc.outputSettings().syntax(Syntax.html);\n-        assertEquals(\"<!DOCTYPE html>\\n\" +\n+        assertEquals(\"<!doctype html>\\n\" +\n                 \"<html>\\n\" +\n                 \" <head></head>\\n\" +\n                 \" <body>\\n\" +\n--- a/src/test/java/org/jsoup/nodes/DocumentTypeTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTypeTest.java\n \n     @Test public void outerHtmlGeneration() {\n         DocumentType html5 = new DocumentType(\"html\", \"\", \"\", \"\");\n-        assertEquals(\"<!DOCTYPE html>\", html5.outerHtml());\n+        assertEquals(\"<!doctype html>\", html5.outerHtml());\n \n         DocumentType publicDocType = new DocumentType(\"html\", \"-//IETF//DTD HTML//\", \"\", \"\");\n         assertEquals(\"<!DOCTYPE html PUBLIC \\\"-//IETF//DTD HTML//\\\">\", publicDocType.outerHtml());\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n     @Test public void normalisesDocument() {\n         String h = \"<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven \";\n         Document doc = Jsoup.parse(h);\n-        assertEquals(\"<!DOCTYPE html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>\",\n+        assertEquals(\"<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>\",\n                 TextUtil.stripNewlines(doc.html()));\n     }\n \n                 \"<p></b></b></b></b></b></b>X\";\n         Document doc = Jsoup.parse(h);\n         doc.outputSettings().indentAmount(0);\n-        String want = \"<!DOCTYPE html>\\n\" +\n+        String want = \"<!doctype html>\\n\" +\n                 \"<html>\\n\" +\n                 \"<head></head>\\n\" +\n                 \"<body>\\n\" +\n         // would previously throw invalid name exception on empty doctype\n         Document doc = Jsoup.parse(\"<!DOCTYPE>\");\n         assertEquals(\n-                \"<!DOCTYPE> <html> <head></head> <body></body> </html>\",\n+                \"<!doctype> <html> <head></head> <body></body> </html>\",\n                 StringUtil.normaliseWhitespace(doc.outerHtml()));\n \n         doc = Jsoup.parse(\"<!DOCTYPE><html><p>Foo</p></html>\");\n         assertEquals(\n-                \"<!DOCTYPE> <html> <head></head> <body> <p>Foo</p> </body> </html>\",\n+                \"<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>\",\n                 StringUtil.normaliseWhitespace(doc.outerHtml()));\n \n         doc = Jsoup.parse(\"<!DOCTYPE \\u0000>\");\n         assertEquals(\n-                \"<!DOCTYPE \ufffd> <html> <head></head> <body></body> </html>\",\n+                \"<!doctype \ufffd> <html> <head></head> <body></body> </html>\",\n                 StringUtil.normaliseWhitespace(doc.outerHtml()));\n     }\n }", "timestamp": 1413057239, "metainfo": ""}