{"sha": "af61d0720599519828209b3b5f8ef06f61fe7768", "log": "Changes for issue #467", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/jsoup/SerializationException.java\n+package org.jsoup;\n+\n+/**\n+ * SerializationException is raised whenever serialization of a DOM element fails. This exception usually wraps an {@link java.io.IOException} that may be thrown due to an inaccessible\n+ * output stream.\n+ *\n+ * @author Michael Schmid\n+ */\n+public final class SerializationException extends RuntimeException {\n+\n+\tprivate static final long serialVersionUID = -6182985863817230363L;\n+\n+\t/**\n+\t * Creates and initializes a new serialization exception with no error message and cause.\n+\t */\n+\tpublic SerializationException() {\n+\t\tsuper();\n+\t}\n+\n+\t/**\n+\t * Creates and initializes a new serialization exception with the given error message and no cause.\n+\t * \n+\t * @param message\n+\t *            the error message of the new serialization exception (may be <code>null</code>).\n+\t */\n+\tpublic SerializationException(String message) {\n+\t\tsuper(message);\n+\t}\n+\n+\t/**\n+\t * Creates and initializes a new serialization exception with the specified cause and an error message of <code>(cause==null ? null : cause.toString())</code> (which typically\n+\t * contains the class and error message of <code>cause</code>).\n+\t * \n+\t * @param cause\n+\t *            the cause of the new serialization exception (may be <code>null</code>).\n+\t */\n+\tpublic SerializationException(Throwable cause) {\n+\t\tsuper(cause);\n+\t}\n+\n+\t/**\n+\t * Creates and initializes a new serialization exception with the given error message and cause.\n+\t * \n+\t * @param message\n+\t *            the error message of the new serialization exception.\n+\t * @param cause\n+\t *            the cause of the new serialization exception.\n+\t */\n+\tpublic SerializationException(String message, Throwable cause) {\n+\t\tsuper(message, cause);\n+\t}\n+}\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n     \n     protected void html(Appendable accum, Document.OutputSettings out) throws IOException {\n         accum.append(key);\n-        \n         if (!shouldCollapseAttribute(out)) {\n             accum.append(\"=\\\"\");\n             Entities.escape(accum, value, out, true, false, false);\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n package org.jsoup.nodes;\n-\n-import java.io.IOException;\n-import java.util.AbstractMap;\n-import java.util.AbstractSet;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n \n import org.jsoup.SerializationException;\n import org.jsoup.helper.Validate;\n+\n+import java.io.IOException;\n+import java.util.*;\n \n /**\n  * The attributes of an Element.\n         }\n     }\n     \n-    @Override\n-\tpublic String toString() {\n+    public String toString() {\n         return html();\n     }\n     \n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n         attributes.put(COMMENT_KEY, data);\n     }\n \n-    @Override\n-\tpublic String nodeName() {\n+    public String nodeName() {\n         return \"#comment\";\n     }\n \n         return attributes.get(COMMENT_KEY);\n     }\n \n-    @Override\n \tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         if (out.prettyPrint())\n             indent(accum, depth, out);\n-        \n-        accum.append(\"<!--\").append(getData()).append(\"-->\");\n+        accum\n+                .append(\"<!--\")\n+                .append(getData())\n+                .append(\"-->\");\n     }\n \n-    @Override\n \tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n \n-    @Override\n-\tpublic String toString() {\n+    public String toString() {\n         return outerHtml();\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/DataNode.java\n+++ b/src/main/java/org/jsoup/nodes/DataNode.java\n         return this;\n     }\n \n-    @Override\n \tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         accum.append(getWholeData()); // data is not escaped in return from data nodes, so \" in script, style is plain\n     }\n \n-    @Override\n \tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n \n-    @Override\n-\tpublic String toString() {\n+    public String toString() {\n         return outerHtml();\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n      * {@inheritDoc}\n      */\n     @Override\n-    public <T extends Appendable> T serialize(T appendable) {\n+    public <T extends Appendable> T html(T appendable) {\n     \t // Exclude outer wrapper tag.\n     \tfor (Node node : childNodes)\n             node.outerHtml(appendable);\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n import java.io.IOException;\n \n import org.jsoup.helper.StringUtil;\n+import org.jsoup.helper.Validate;\n \n /**\n  * A {@code <!DOCTYPE>} node.\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n package org.jsoup.nodes;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.regex.Pattern;\n-import java.util.regex.PatternSyntaxException;\n \n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.parser.Parser;\n import org.jsoup.parser.Tag;\n-import org.jsoup.select.Collector;\n-import org.jsoup.select.Elements;\n-import org.jsoup.select.Evaluator;\n-import org.jsoup.select.NodeTraversor;\n-import org.jsoup.select.NodeVisitor;\n-import org.jsoup.select.Selector;\n+import org.jsoup.select.*;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n \n /**\n  * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n         return this;\n     }\n     \n-    @Override\n     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n     \tif (out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline())) {\n     \t\tif(accum instanceof StringBuilder) {\n     \t\t\tindent(accum, depth, out);\n     \t\t}\n     \t}\n-        accum.append(\"<\").append(tagName());\n+    \taccum\n+        \t\t.append(\"<\")\n+        \t\t.append(tagName());\n         attributes.html(accum, out);\n \n         // selfclosing includes unknown tags, isEmpty defines tags that are always empty\n             accum.append(\">\");\n     }\n \n-    @Override\n \tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         if (!(childNodes.isEmpty() && tag.isSelfClosing())) {\n             if (out.prettyPrint() && (!childNodes.isEmpty() && (\n         return this;\n     }\n \n-    @Override\n \tpublic String toString() {\n         return outerHtml();\n     }\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n package org.jsoup.nodes;\n+\n+import org.jsoup.helper.StringUtil;\n+import org.jsoup.parser.Parser;\n \n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.CharsetEncoder;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.MissingResourceException;\n-import java.util.Properties;\n-\n-import org.jsoup.helper.StringUtil;\n-import org.jsoup.parser.Parser;\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * HTML entities, and escape routines.\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n import org.jsoup.select.NodeVisitor;\n \n import java.io.IOException;\n-import java.io.OutputStreamWriter;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.ArrayList;\n      * @param appendable the {@link Appendable} that should hold the content of this node and all its child nodes.\n      * @return the given {@link Appendable}, now containing this node and all child nodes.\n      */\n-    public <T extends Appendable> T serialize(T appendable) {\n+    public <T extends Appendable> T html(T appendable) {\n     \touterHtml(appendable);\n     \treturn appendable;\n     }\n     \n-    @Override\n \tpublic String toString() {\n         return outerHtml();\n     }\n         }\n \n         public void tail(Node node, int depth) {\n-            if (!node.nodeName().equals(\"#text\")) {\n+            if (!node.nodeName().equals(\"#text\")) { // saves a void hit.\n \t\t\t\ttry {\n \t\t\t\t\tnode.outerHtmlTail(accum, depth, out);\n \t\t\t\t} catch (IOException exception) {\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n         this.text = text;\n     }\n \n-    @Override\n \tpublic String nodeName() {\n         return \"#text\";\n     }\n         return tailNode;\n     }\n \n-    @Override\n \tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         if (out.prettyPrint() && ((siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().formatAsBlock() && !isBlank()) || (out.outline() && siblingNodes().size()>0 && !isBlank()) ))\n             indent(accum, depth, out);\n         Entities.escape(accum, getWholeText(), out, false, normaliseWhite, false);\n     }\n \n-    @Override\n \tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n \n-    @Override\n \tpublic String toString() {\n         return outerHtml();\n     }\n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n         return attributes.get(DECL_KEY);\n     }\n \n-    @Override\n \tvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n         accum\n                 .append(\"<\")\n                 .append(\">\");\n     }\n \n-    @Override\n \tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\n \n-    @Override\n \tpublic String toString() {\n         return outerHtml();\n     }\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n package org.jsoup.integration;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.UnsupportedEncodingException;\n-import java.net.URISyntaxException;\n \n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n import org.jsoup.select.Elements;\n import org.junit.Test;\n+\n+import java.io.*;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.*;\n \n /**\n  * Integration test: parses from real-world example HTML.\n     public File getFile(String resourceName) {\n         try {\n             File file = new File(ParseTest.class.getResource(resourceName).toURI());\n-            \n             return file;\n         } catch (URISyntaxException e) {\n             throw new IllegalStateException(e);\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.StringWriter;\n \n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.jsoup.integration.ParseTest;\n+import org.jsoup.nodes.Document.OutputSettings;\n import org.junit.Test;\n import org.junit.Ignore;\n \n         Document doc = Jsoup.parse(\"x\");\n         assertEquals(Syntax.html, doc.outputSettings().syntax());\n     }\n+    \n+    @Test public void testHtmlAppendable() {\n+    \tString htmlContent = \"<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>\";\n+    \tDocument document = Jsoup.parse(htmlContent);\n+    \tOutputSettings outputSettings = new OutputSettings();\n+    \t\n+    \toutputSettings.prettyPrint(false);\n+    \tdocument.outputSettings(outputSettings);\n+    \tassertEquals(htmlContent, document.html(new StringWriter()).toString());\n+    }\n \n     // Ignored since this test can take awhile to run.\n     @Ignore", "timestamp": 1413880334, "metainfo": ""}