{"sha": "a76f2e9fa14185dae1e96ae2561e3ff07c966e11", "log": "Support for PUT, DELETE, PATCH", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n      * GET and POST http methods.\n      */\n     public enum Method {\n-        GET, POST\n+        GET(false), POST(true), PUT(true), DELETE(false), PATCH(true);\n+\n+        private final boolean hasBody;\n+\n+        private Method(boolean hasBody) {\n+            this.hasBody = hasBody;\n+        }\n+\n+        /**\n+         * Check if this HTTP method has/needs a request body\n+         * @return if body needed\n+         */\n+        public final boolean hasBody() {\n+            return hasBody;\n+        }\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n import java.util.regex.Pattern;\n import java.util.zip.GZIPInputStream;\n \n+import static org.jsoup.Connection.Method;\n+\n /**\n  * Implementation of {@link Connection}.\n  * @see org.jsoup.Jsoup#connect(String)\n     public static final String  CONTENT_ENCODING = \"Content-Encoding\";\n     private static final String CONTENT_TYPE = \"Content-Type\";\n     private static final String MULTIPART_FORM_DATA = \"multipart/form-data\";\n+    private static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\";\n \n     public static Connection connect(String url) {\n         Connection con = new HttpConnection();\n             maxBodySizeBytes = 1024 * 1024; // 1MB\n             followRedirects = true;\n             data = new ArrayList<Connection.KeyVal>();\n-            method = Connection.Method.GET;\n+            method = Method.GET;\n             headers.put(\"Accept-Encoding\", \"gzip\");\n             parser = Parser.htmlParser();\n         }\n \n             // set up the request for execution\n             String mimeBoundary = null;\n-            if (req.method() == Connection.Method.GET && req.data().size() > 0) {\n+            if (!req.method().hasBody() && req.data().size() > 0) {\n                 serialiseRequestUrl(req); // appends query string\n-            } else {\n-                mimeBoundary = setupMultipartModeIfNeeded(req);\n+            } else if (req.method().hasBody()) {\n+                mimeBoundary = setOutputContentType(req);\n             }\n             HttpURLConnection conn = createConnection(req);\n             Response res;\n             try {\n                 conn.connect();\n-                if (req.method() == Connection.Method.POST)\n+                if (conn.getDoOutput())\n                     writePost(req, conn.getOutputStream(), mimeBoundary);\n \n                 int status = conn.getResponseCode();\n             conn.setInstanceFollowRedirects(false); // don't rely on native redirection support\n             conn.setConnectTimeout(req.timeout());\n             conn.setReadTimeout(req.timeout());\n-            if (req.method() == Method.POST)\n+            if (req.method().hasBody())\n                 conn.setDoOutput(true);\n             if (req.cookies().size() > 0)\n                 conn.addRequestProperty(\"Cookie\", getRequestCookieString(req));\n \n         // set up url, method, header, cookies\n         private void setupFromConnection(HttpURLConnection conn, Connection.Response previousResponse) throws IOException {\n-            method = Connection.Method.valueOf(conn.getRequestMethod());\n+            method = Method.valueOf(conn.getRequestMethod());\n             url = conn.getURL();\n             statusCode = conn.getResponseCode();\n             statusMessage = conn.getResponseMessage();\n             }\n         }\n \n-        private static String setupMultipartModeIfNeeded(final Connection.Request req) {\n+        private static String setOutputContentType(final Connection.Request req) {\n             // multipart mode, for files. add the header if we see something with an inputstream, and return a non-null boundary\n             boolean needsMulti = false;\n             for (Connection.KeyVal keyVal : req.data()) {\n                     break;\n                 }\n             }\n+            String bound = null;\n             if (needsMulti) {\n-                final String bound = DataUtil.mimeBoundary();\n+                bound = DataUtil.mimeBoundary();\n                 req.header(CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bound);\n-                return bound;\n-            }\n-            return null;\n+            } else {\n+                req.header(CONTENT_TYPE, FORM_URL_ENCODED);\n+            }\n+            return bound;\n         }\n \n         private static void writePost(final Connection.Request req, final OutputStream outputStream, final String bound) throws IOException {\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n \n     @Test\n     public void fetchURl() throws IOException {\n-        String url = \"http://www.google.com\"; // no trailing / to force redir\n+        String url = \"http://jsoup.org\"; // no trailing / to force redir\n         Document doc = Jsoup.parse(new URL(url), 10*1000);\n-        assertTrue(doc.title().contains(\"Google\"));\n+        assertTrue(doc.title().contains(\"jsoup\"));\n     }\n \n     @Test\n         assertEquals(\"Mozilla\", ihVal(\"HTTP_USER_AGENT\", doc));\n         assertEquals(\"http://example.com\", ihVal(\"HTTP_REFERER\", doc));\n     }\n+\n+    @Test\n+    public void doesPut() throws IOException {\n+        Connection.Response res = Jsoup.connect(echoURL)\n+                .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n+                .cookie(\"auth\", \"token\")\n+                .method(Connection.Method.PUT)\n+                .execute();\n+\n+        Document doc = res.parse();\n+        assertEquals(\"PUT\", ihVal(\"REQUEST_METHOD\", doc));\n+        //assertEquals(\"gzip\", ihVal(\"HTTP_ACCEPT_ENCODING\", doc)); // current proxy removes gzip on post\n+        assertEquals(\"auth=token\", ihVal(\"HTTP_COOKIE\", doc));\n+    }\n+\n \n     private static String ihVal(String key, Document doc) {\n         return doc.select(\"th:contains(\"+key+\") + td\").first().text();", "timestamp": 1413073420, "metainfo": ""}