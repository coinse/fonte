{"sha": "daf4666075b44c4405f7dc648467bdd39c236556", "log": "Optimised document normalisation", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n      @return {@code head}\n      */\n     public Element head() {\n-        return getElementsByTag(\"head\").first();\n+        return findFirstElementByTagName(\"head\", this);\n     }\n \n     /**\n      @return {@code body}\n      */\n     public Element body() {\n-        return getElementsByTag(\"body\").first();\n+        return findFirstElementByTagName(\"body\", this);\n     }\n \n     /**\n      @return this document after normalisation\n      */\n     public Document normalise() {\n-        if (select(\"html\").isEmpty())\n-            appendElement(\"html\");\n+        Element htmlEl = findFirstElementByTagName(\"html\", this);\n+        if (htmlEl == null)\n+            htmlEl = appendElement(\"html\");\n         if (head() == null)\n-            select(\"html\").first().prependElement(\"head\");\n+            htmlEl.prependElement(\"head\");\n         if (body() == null)\n-            select(\"html\").first().appendElement(\"body\");\n+            htmlEl.appendElement(\"body\");\n \n         // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n         // of. do in inverse order to maintain text order.\n         normalise(head());\n-        normalise(select(\"html\").first());\n+        normalise(htmlEl);\n         normalise(this);        \n \n         return this;\n         }\n     }\n \n+    // fast method to get first by tag name, used for html, head, body finders\n+    private Element findFirstElementByTagName(String tag, Node node) {\n+        if (node.nodeName().equals(tag))\n+            return (Element) node;\n+        else {\n+            for (Node child: node.childNodes) {\n+                Element found = findFirstElementByTagName(tag, child);\n+                if (found != null)\n+                    return found;\n+            }\n+        }\n+        return null;\n+    }\n+\n     @Override\n     public String outerHtml() {\n         return super.html(); // no outer wrapper tag\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n \n     public boolean matchesStartTag() {\n         // micro opt for matching \"<x\"\n-        return (remainingLength() > 2 && queue.charAt(pos) == '<' && Character.isLetterOrDigit(queue.charAt(pos+1)));\n+        return (remainingLength() >= 2 && queue.charAt(pos) == '<' && Character.isLetterOrDigit(queue.charAt(pos+1)));\n     }\n \n     /**", "timestamp": 1309605117, "metainfo": ""}