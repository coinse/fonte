{"sha": "5d00201aec621e81a37447e32baf1a82040ee8e4", "log": "Add wildcard-namespace selector support '*|' Issue #723", "commit": "\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n     }\n     \n     /**\n-     * Consume a CSS element selector (tag name, but | instead of : for namespaces, to not conflict with :pseudo selects).\n+     * Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects).\n      * \n      * @return tag name\n      */\n     public String consumeElementSelector() {\n         int start = pos;\n-        while (!isEmpty() && (matchesWord() || matchesAny('|', '_', '-')))\n+        while (!isEmpty() && (matchesWord() || matchesAny(\"*|\",\"|\", \"_\", \"-\")))\n             pos++;\n         \n         return queue.substring(start, pos);\n--- a/src/main/java/org/jsoup/select/CombiningEvaluator.java\n+++ b/src/main/java/org/jsoup/select/CombiningEvaluator.java\n             updateNumEvaluators();\n         }\n \n+        Or(Evaluator... evaluators) { this(Arrays.asList(evaluators)); }\n+\n         Or() {\n             super();\n         }\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n         @Override\n         public boolean matches(Element root, Element element) {\n             return (element.tagName().equals(tagName));\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return String.format(\"%s\", tagName);\n+        }\n+    }\n+\n+\n+    /**\n+     * Evaluator for tag name that ends with\n+     */\n+    public static final class TagEndsWith extends Evaluator {\n+        private String tagName;\n+\n+        public TagEndsWith(String tagName) {\n+            this.tagName = tagName;\n+        }\n+\n+        @Override\n+        public boolean matches(Element root, Element element) {\n+            return (element.tagName().endsWith(tagName));\n         }\n \n         @Override\n--- a/src/main/java/org/jsoup/select/QueryParser.java\n+++ b/src/main/java/org/jsoup/select/QueryParser.java\n             byId();\n         else if (tq.matchChomp(\".\"))\n             byClass();\n-        else if (tq.matchesWord())\n+        else if (tq.matchesWord() || tq.matches(\"*|\"))\n             byTag();\n         else if (tq.matches(\"[\"))\n             byAttribute();\n \n     private void byTag() {\n         String tagName = tq.consumeElementSelector();\n+\n         Validate.notEmpty(tagName);\n \n-        // namespaces: if element name is \"abc:def\", selector must be \"abc|def\", so flip:\n-        if (tagName.contains(\"|\"))\n-            tagName = tagName.replace(\"|\", \":\");\n-\n-        evals.add(new Evaluator.Tag(tagName.trim().toLowerCase()));\n+        // namespaces: wildcard match equals(tagName) or ending in \":\"+tagName\n+        if (tagName.startsWith(\"*|\")) {\n+            evals.add(new CombiningEvaluator.Or(new Evaluator.Tag(tagName.trim().toLowerCase()), new Evaluator.TagEndsWith(tagName.replace(\"*|\", \":\").trim().toLowerCase())));\n+        } else {\n+            // namespaces: if element name is \"abc:def\", selector must be \"abc|def\", so flip:\n+            if (tagName.contains(\"|\"))\n+                tagName = tagName.replace(\"|\", \":\");\n+\n+            evals.add(new Evaluator.Tag(tagName.trim().toLowerCase()));\n+        }\n     }\n \n     private void byAttribute() {\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  * <tr><th align=\"left\">Pattern</th><th align=\"left\">Matches</th><th align=\"left\">Example</th></tr>\n  * <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n  * <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n+ * <tr><td><code>*|E</code></td><td>elements of type E in any namespace <i>ns</i></td><td><code>*|name</code> finds <code>&lt;fb:name&gt;</code> elements</td></tr>\n  * <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name&gt;</code> elements</td></tr>\n  * <tr><td><code>#id</code></td><td>elements with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n  * <tr><td><code>.class</code></td><td>elements with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(\"2\", byTagAttr.last().id());\n \n         Elements byContains = doc.select(\"abc|def:contains(e)\");\n+        assertEquals(2, byContains.size());\n+        assertEquals(\"1\", byContains.first().id());\n+        assertEquals(\"2\", byContains.last().id());\n+    }\n+\n+    @Test public void testWildcardNamespacedTag() {\n+        Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>\");\n+        Elements byTag = doc.select(\"*|def\");\n+        assertEquals(2, byTag.size());\n+        assertEquals(\"1\", byTag.first().id());\n+        assertEquals(\"2\", byTag.last().id());\n+\n+        Elements byAttr = doc.select(\".bold\");\n+        assertEquals(1, byAttr.size());\n+        assertEquals(\"2\", byAttr.last().id());\n+\n+        Elements byTagAttr = doc.select(\"*|def.bold\");\n+        assertEquals(1, byTagAttr.size());\n+        assertEquals(\"2\", byTagAttr.last().id());\n+\n+        Elements byContains = doc.select(\"*|def:contains(e)\");\n         assertEquals(2, byContains.size());\n         assertEquals(\"1\", byContains.first().id());\n         assertEquals(\"2\", byContains.last().id());", "timestamp": 1467134393, "metainfo": ""}