{"sha": "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8", "log": "configurable parser support added, PosixParser added   ", "commit": "\n--- a/src/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/java/org/apache/commons/cli/CommandLine.java\n /** <p>Represents list of arguments parsed against\n  * a {@link Options} descriptor.<p>\n  *\n- * <p>It allows querying of a boolean {@link #hasOption(char opt)},\n- * in addition to retrieving the {@link #getOptionValue(char opt)}\n+ * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n+ * in addition to retrieving the {@link #getOptionValue(String opt)}\n  * for options requiring arguments.</p>\n  *\n  * <p>Additionally, any left-over or unrecognized arguments,\n  *\n  * @author bob mcwhirter (bob @ werken.com)\n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @author John Keyes (jbjk at mac.com)\n+ *\n  * @version $Revision: 1.4 $\n  */\n public class CommandLine {\n      * @param opt Short single-character name of the option\n      * @return true if set, false if not\n      */\n-    public boolean hasOption(char opt) {\n-        return options.containsKey( new Character(opt) );\n-    }\n-\n-    public Object getOptionObject(char opt) {\n-        String[] result = (String[])options.get( new Character(opt) );\n-        Object type = types.get( new Character(opt) );\n+    public boolean hasOption(String opt) {\n+        return options.containsKey( opt );\n+    }\n+\n+    public Object getOptionObject(String opt) {\n+        String[] result = (String[])options.get( opt );\n+        Object type = types.get( opt );\n         String res = result == null ? null : result[0];\n         if(res == null) {\n             return null;\n      * @param opt Short single-character name of the option\n      * @return Value of the argument if option is set, and has an argument, else null.\n      */\n-    public String getOptionValue(char opt) {\n-        String[] result = (String[])options.get( new Character(opt) );\n+    public String getOptionValue(String opt) {\n+        String[] result = (String[])options.get( opt );\n         return result == null ? null : result[0];\n     }\n \n      * @param opt Single-character name of the option\n      * @return An array of values if the option is set, and has an argument, else null.\n      */\n-    public String[] getOptionValues(char opt) {\n-        String[] result = (String[])options.get( new Character(opt) );\n+    public String[] getOptionValues(String opt) {\n+        String[] result = (String[])options.get( opt );\n         return result == null ? null : result;\n     }\n     \n      * @param defaultValue is the default value to be returned if the option is not specified\n      * @return Value of the argument if option is set, and has an argument, else null.\n      */\n-    public String getOptionValue(char opt, String defaultValue) {\n+    public String getOptionValue(String opt, String defaultValue) {\n         String answer = getOptionValue(opt);\n         return (answer != null) ? answer : defaultValue;\n     }\n      *\n      * @param opt the processed option\n      */\n-    void setOpt(char opt) {\n-        options.put( new Character(opt), null );\n+    void setOpt(String opt) {\n+        options.put( opt, null );\n     }\n     \n     /**\n      * @param opt the processed option\n      * @param value the value of the option\n      */\n-    void setOpt(char opt, String value) {\n-        options.put( new Character(opt), value );\n+    void setOpt(String opt, String value) {\n+        options.put( opt, value );\n     }\n     \n     /**\n      * @param opt the processed option\n      */\n     void setOpt(Option opt) {\n-        Character chr = new Character( opt.getOpt() );\n-        options.put( chr, opt.getValues() );\n-        types.put( chr, opt.getType() );\n+        options.put( opt.getOpt(), opt.getValues() );\n+        types.put( opt.getOpt(), opt.getType() );\n     }\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/cli/CommandLineParser.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/CommandLineParser.java,v 1.1 2002/06/16 23:00:57 jkeyes Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/16 23:00:57 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.cli;\n+\n+import java.util.List;\n+\n+/**\n+ * @author John Keyes (jbjk at mac.com)\n+ */\n+public interface CommandLineParser {\n+    \n+    /**\n+     * Parse the arguments according to the specified options.\n+     * @param options the specified Options\n+     * @param arguments the command line arguments\n+     * @return the list of atomic option and value tokens\n+     */\n+    public List parse( Options options, List arguments );\n+    \n+    /**\n+     * Parse the arguments according to the specified options.\n+     * @param options the specified Options\n+     * @param arguments the command line arguments\n+     * @param stopAtNonOption specifies whether to continue parsing the\n+     * arguments if a non option is encountered.\n+     * @return the list of atomic option and value tokens\n+     */\n+    public List parse( Options options, List arguments, boolean stopAtNonOption );\n+}\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n       {\n          optBuf = (StringBuffer) i.next();\n          opt = optBuf.charAt(optOffset);\n-         option = options.getOption(opt);\n+         option = options.getOption( \"\" + opt);\n          renderWrappedText(sb, width, nextLineTabStop,\n                            optBuf.append(option.getDescription()).toString());\n          if ( i.hasNext() )\n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n public class Option {\n     \n     /** opt the single character representation of the option */\n-    private Character  opt          = null;\n+    private String opt = null;\n \n     /** longOpt is the long representation of the option */\n     private String     longOpt      = null;\n     /**\n      * Creates an Option using the specified parameters.\n      *\n-     * @param opt character representation of the option\n-     * @param hasArg specifies whether the Option takes an argument or not\n-     * @param description describes the function of the option\n-     */\n-    public Option(char opt, boolean hasArg, String description) {\n+     * @param opt short representation of the option\n+     * @param hasArg specifies whether the Option takes an argument or not\n+     * @param description describes the function of the option\n+     */\n+    public Option(String opt, boolean hasArg, String description) {\n         this(opt, null, hasArg, description, false, false);\n     }\n     \n     /**\n      * Creates an Option using the specified parameters.\n      *\n-     * @param opt character representation of the option\n+     * @param opt short representation of the option\n      * @param longOpt the long representation of the option\n      * @param hasArg specifies whether the Option takes an argument or not\n      * @param description describes the function of the option\n      */\n-    public Option(char opt, String longOpt, boolean hasArg, String description) {\n+    public Option(String opt, String longOpt, boolean hasArg, String description) {\n         this(opt, longOpt, hasArg, description, false, false );\n     }\n \n     /**\n      * Creates an Option using the specified parameters.\n      *\n-     * @param opt character representation of the option\n+     * @param opt short representation of the option\n      * @param longOpt the long representation of the option\n      * @param hasArg specifies whether the Option takes an argument or not\n      * @param description describes the function of the option\n      * @param required specifies whether the option is required or not\n      */\n-    public Option(char opt, String longOpt, boolean hasArg, String description,\n+    public Option(String opt, String longOpt, boolean hasArg, String description,\n                   boolean required ) {\n         this(opt, longOpt, hasArg, description, required, false );\n     }\n     /**\n      * Creates an Option using the specified parameters.\n      *\n-     * @param opt character representation of the option\n+     * @param opt short representation of the option\n      * @param longOpt the long representation of the option\n      * @param hasArg specifies whether the Option takes an argument or not\n      * @param description describes the function of the option\n      * @param multipleArgs specifies whether the option has multiple argument \n      * values\n      */\n-    public Option(char opt, String longOpt, boolean hasArg, String description, \n+    public Option(String opt, String longOpt, boolean hasArg, String description, \n                   boolean required, boolean multipleArgs ) {\n         this(opt, longOpt, hasArg, description, required, multipleArgs, null );\n     }\n-    public Option(char opt, String longOpt, boolean hasArg, String description, \n+\n+    /**\n+     * Creates an Option using the specified parameters.\n+     *\n+     * @param opt short representation of the option\n+     * @param longOpt the long representation of the option\n+     * @param hasArg specifies whether the Option takes an argument or not\n+     * @param description describes the function of the option\n+     * @param required specifies whether the option is required or not\n+     * @param multipleArgs specifies whether the option has multiple argument \n+     * values\n+     * @param type specifies the type of the option\n+     */\n+    public Option(String opt, String longOpt, boolean hasArg, String description, \n                   boolean required, boolean multipleArgs, Object type ) {\n-        this.opt          = new Character( opt );\n+        this.opt          = opt;\n         this.longOpt      = longOpt;\n         this.hasArg       = hasArg;\n         this.description  = description;\n     /** <p>Retrieve the single-character name of this Option</p>\n      *\n      * <p>It is this character which can be used with\n-     * {@link CommandLine#hasOption(char opt)} and\n-     * {@link CommandLine#getOptionValue(char opt)} to check\n+     * {@link CommandLine#hasOption(String opt)} and\n+     * {@link CommandLine#getOptionValue(String opt)} to check\n      * for existence and argument.<p>\n      *\n      * @return Single character name of this option\n      */\n-    public char getOpt() {\n-        return this.opt.charValue();\n+    public String getOpt() {\n+        return this.opt;\n     }\n \n     public Object getType() {\n--- a/src/java/org/apache/commons/cli/Options.java\n+++ b/src/java/org/apache/commons/cli/Options.java\n import java.util.List;\n import java.util.ListIterator;\n import java.util.ArrayList;\n-import java.util.LinkedList;\n import java.util.Iterator;\n import java.util.Collections;\n \n  * @version $Revision: 1.5 $\n  */\n public class Options {\n-    \n+\n+    private String defaultParserImpl = \"org.apache.commons.cli.PosixParser\";\n+    private String parserImpl = defaultParserImpl;\n+\n+    private CommandLineParser parser;\n+\n     /** the list of options */\n     private List options      = new ArrayList();\n \n     /** <p>Construct a new Options descriptor</p>\n      */\n     public Options() {        \n+        parserImpl = System.getProperty( \"org.apache.commons.cli.parser\" );\n+        try {\n+            parser = (CommandLineParser)Class.forName( parserImpl ).newInstance();\n+        }\n+        catch( Exception exp ) {\n+            // could not create according to parserImpl so default to\n+            // PosixParser\n+            try {\n+                parser = (CommandLineParser)Class.forName( defaultParserImpl ).newInstance();\n+            }\n+            catch( Exception exp2 ) {\n+                // this will not happen ?\n+            }\n+        }\n+        System.out.println( parser.getClass().getName() );\n     }\n \n     /**\n      * @param description Self-documenting description\n      * @return the resulting Options instance\n      */\n-    public Options addOption(char opt, boolean hasArg, String description) {\n+    public Options addOption(String opt, boolean hasArg, String description) {\n         addOption( opt, null, hasArg, description, false );\n         return this;\n     }\n      * @param description Self-documenting description\n      * @return the resulting Options instance\n      */\n-    public Options addOption(char opt, String longOpt, boolean hasArg, String description) {\n+    public Options addOption(String opt, String longOpt, boolean hasArg, String description) {\n         addOption( opt, longOpt, hasArg, description, false );        \n         return this;\n     }\n      * @param required specifies if this option is required\n      * @return the resulting Options instance\n      */\n-    public Options addOption(char opt, String longOpt, boolean hasArg, String description,\n+    public Options addOption(String opt, String longOpt, boolean hasArg, String description,\n                              boolean required) {\n         addOption( new Option(opt, longOpt, hasArg, description, required) );        \n         return this;\n      * @param multipleArgs specifies if this option can accept multiple argument values\n      * @return the resulting Options instance\n      */\n-    public Options addOption(char opt, String longOpt, boolean hasArg, String description,\n+    public Options addOption(String opt, String longOpt, boolean hasArg, String description,\n                              boolean required, boolean multipleArgs) {\n         addOption( new Option(opt, longOpt, hasArg, description, required, multipleArgs) );        \n         return this;\n     }\n \n-    public Options addOption(char opt, String longOpt, boolean hasArg, String description,\n+    /** <p>Add an option that contains a short-name and a long-name</p>\n+     * <p>It may be specified as requiring an argument.</p>\n+     *\n+     * @param opt Short single-character name of the option.\n+     * @param longOpt Long multi-character name of the option.\n+     * @param hasArg flag signally if an argument is required after this option\n+     * @param description Self-documenting description\n+     * @param required specifies if this option is required\n+     * @param multipleArgs specifies if this option can accept multiple argument values\n+     * @param type specifies the type for the value of the option\n+     * @return the resulting Options instance\n+     */\n+    public Options addOption(String opt, String longOpt, boolean hasArg, String description,\n                              boolean required, boolean multipleArgs, Object type) {\n         addOption( new Option(opt, longOpt, hasArg, description, required, multipleArgs, type) );        \n         return this;\n         MissingOptionException, AlreadySelectedException {\n         CommandLine cl = new CommandLine();\n         \n-        List args = burst( inArgs, stopAtNonOption );\n+        List args = parser.parse( this, inArgs, stopAtNonOption );\n         \n         ListIterator argIter = args.listIterator();\n         String   eachArg = null;\n \n             }\n             else {\n-                //option.addValue( null );\n                 cl.setOpt( option );\n             }\n         }\n     }\n \n-    /**\n-     * <p>Processes the argument list according to POSIX command line\n-     * processing rules.</p>\n-     *\n-     * @param inArgs the argument list\n-     * @param stopAtNonOption stop processing when the first non option\n-     * is encountered.\n-     * @return the processed list of arguments.\n-     */\n-    private List burst(List inArgs, boolean stopAtNonOption) {\n-        List args = new LinkedList();\n-        \n-        Iterator argIter = inArgs.iterator();\n-        String   eachArg = null;\n-        \n-        boolean eatTheRest = false;\n-        \n-        while ( argIter.hasNext() ) {\n-            eachArg = (String) argIter.next();\n-            \n-            if ( eachArg.equals(\"--\") ) {\n-                // Look for -- to indicate end-of-options, and\n-                // just stuff it, along with everything past it\n-                // into the returned list.\n-                \n-                args.add( eachArg );\n-                eatTheRest = true;\n-            }\n-            else if ( eachArg.startsWith(\"--\") ) {\n-                // It's a long-option, so doesn't need any\n-                // bursting applied to it.\n-                \n-                args.add( eachArg );\n-            }\n-            else if ( eachArg.startsWith(\"-\") ) {\n-                // It might be a short arg needing\n-                // some bursting\n-                \n-                if ( eachArg.length() == 1) {\n-                    // It's not really an option, so\n-                    // just drop it on the list\n-                    \n-                    if ( stopAtNonOption ) {\n-                        eatTheRest = true;\n-                    }\n-                    else {\n-                        args.add( eachArg );\n-                    }\n-                }\n-                else if ( eachArg.length() == 2 ) {\n-                    // No bursting required\n-                    \n-                    args.add( eachArg );\n-                }\n-                else {\n-                    // Needs bursting.  Figure out\n-                    // if we have multiple options,\n-                    // or maybe an option plus an arg,\n-                    // or some combination thereof.\n-                    \n-                    for ( int i = 1 ; i < eachArg.length() ; ++i ) {\n-                        String optStr = \"-\" + eachArg.charAt(i);\n-                        Option opt    = (Option) shortOpts.get( optStr );\n-                        \n-                        if ( (opt != null) && (opt.hasArg()) ) {\n-                            // If the current option has an argument,\n-                            // then consider the rest of the eachArg\n-                            // to be that argument.\n-                            \n-                            args.add( optStr );\n-                            \n-                            if ( (i+1) < eachArg.length() ) {\n-                                String optArg = eachArg.substring(i+1);\n-                                args.add( optArg );\n-                            }                            \n-                            break;\n-                        }\n-                        else {\n-                            // No argument, so prepend the single dash,\n-                            // and then drop it into the arglist.\n-                            \n-                            args.add( optStr );\n-                        }\n-                    }\n-                }\n-            }\n-            else {\n-                // It's just a normal non-option arg,\n-                // so dump it into the list of returned\n-                // values.\n-                \n-                args.add( eachArg );\n-                \n-                if ( stopAtNonOption ) {\n-                    eatTheRest = true;\n-                }\n-            }\n-            \n-            if ( eatTheRest ) {\n-                while ( argIter.hasNext() ) {\n-                    args.add( argIter.next() );\n-                }\n-            }\n-        }\n-        \n-        return args;\n-    }\n-    \n     /**\n      * <p>Adds the option to the necessary member lists</p>\n      *\n      * @param opt short single-character name of the {@link Option}\n      * @return the option represented by opt\n      */\n-    public Option getOption(char opt) {\n+    public Option getOption(String opt) {\n+        if( opt.startsWith( \"--\" ) ) {\n+            return (Option) longOpts.get( opt );\n+        }\n         return (Option) shortOpts.get( \"-\" + opt );\n     }\n     \n      * @param longOpt long name of the {@link Option}\n      * @return the option represented by longOpt\n      */\n-    public Option getOption(String longOpt) {\n+    /*public Option getOption(String longOpt) {\n         return (Option) longOpts.get( longOpt );\n-    }\n+    } */\n     \n     /** <p>Dump state, suitable for debugging.</p>\n      *\n--- a/src/java/org/apache/commons/cli/PatternOptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/PatternOptionBuilder.java\n             if(!isValueCode(ch)) {\n                 if(opt != ' ') {\n                     // we have a previous one to deal with\n-                    options.addOption(opt, null, (type != null), \"\", required, false, type);\n+                    options.addOption(\"\" + opt, null, (type != null), \"\", required, false, type);\n                     required = false;\n                     type = null;\n                     opt = ' ';\n \n         if(opt != ' ') {\n             // we have a final one to deal with\n-            options.addOption(opt, null, (type != null), \"\", required, false, type);\n+            options.addOption( \"\" + opt, null, (type != null), \"\", required, false, type);\n         }\n \n         return options;\n--- /dev/null\n+++ b/src/java/org/apache/commons/cli/PosixParser.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.1 2002/06/16 23:00:58 jkeyes Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/16 23:00:58 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.cli;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * PosixParser parses the command line arguments using the Posix style.\n+ * For example, -buildfile can only be interpreted as the option\n+ * 'b' with value 'uildfile' or it could be interpreted as the options\n+ * 'b','u','i','l','d','f','i','l','e'.\n+ *\n+ * @author John Keyes (jbjk at mac.com)\n+ */\n+public class PosixParser implements CommandLineParser {\n+\n+    /**\n+     * Parse the arguments according to the specified options.\n+     * @param options the specified Options\n+     * @param arguments the command line arguments\n+     * @return the list of atomic option and value tokens\n+     */\n+    public List parse( Options options, List arguments ) {\n+        return parse( options, arguments, false );\n+    }\n+\n+    /**\n+     * Parse the arguments according to the specified options.\n+     * @param options the specified Options\n+     * @param arguments the command line arguments\n+     * @param stopAtNonOption specifies whether to continue parsing the\n+     * arguments if a non option is encountered.\n+     * @return the list of atomic option and value tokens\n+     */\n+    public List parse( Options options, List arguments, boolean stopAtNonOption ) {\n+        List args = new LinkedList();\n+        \n+        Iterator argIter = arguments.iterator();\n+        String   eachArg = null;\n+        \n+        boolean eatTheRest = false;\n+        \n+        while ( argIter.hasNext() ) {\n+            eachArg = (String) argIter.next();\n+            \n+            if ( eachArg.equals(\"--\") ) {\n+                // Look for -- to indicate end-of-options, and\n+                // just stuff it, along with everything past it\n+                // into the returned list.\n+                \n+                args.add( eachArg );\n+                eatTheRest = true;\n+            }\n+            else if ( eachArg.startsWith(\"--\") ) {\n+                // It's a long-option, so doesn't need any\n+                // bursting applied to it.\n+                \n+                args.add( eachArg );\n+            }\n+            else if ( eachArg.startsWith(\"-\") ) {\n+                // It might be a short arg needing\n+                // some bursting\n+                \n+                if ( eachArg.length() == 1) {\n+                    // It's not really an option, so\n+                    // just drop it on the list\n+                    \n+                    if ( stopAtNonOption ) {\n+                        eatTheRest = true;\n+                    }\n+                    else {\n+                        args.add( eachArg );\n+                    }\n+                }\n+                else if ( eachArg.length() == 2 ) {\n+                    // No bursting required\n+                    \n+                    args.add( eachArg );\n+                }\n+                else {\n+                    // Needs bursting.  Figure out\n+                    // if we have multiple options,\n+                    // or maybe an option plus an arg,\n+                    // or some combination thereof.\n+                    \n+                    for ( int i = 1 ; i < eachArg.length() ; ++i ) {\n+                        String optStr = \"-\" + eachArg.charAt(i);\n+                        Option opt    = (Option) options.getOption( \"\" + eachArg.charAt(i) );\n+                        \n+                        if ( (opt != null) && (opt.hasArg()) ) {\n+                            // If the current option has an argument,\n+                            // then consider the rest of the eachArg\n+                            // to be that argument.\n+                            \n+                            args.add( optStr );\n+                            \n+                            if ( (i+1) < eachArg.length() ) {\n+                                String optArg = eachArg.substring(i+1);\n+                                args.add( optArg );\n+                            }                            \n+                            break;\n+                        }\n+                        else {\n+                            // No argument, so prepend the single dash,\n+                            // and then drop it into the arglist.\n+                            \n+                            args.add( optStr );\n+                        }\n+                    }\n+                }\n+            }\n+            else {\n+                // It's just a normal non-option arg,\n+                // so dump it into the list of returned\n+                // values.\n+                \n+                args.add( eachArg );\n+                \n+                if ( stopAtNonOption ) {\n+                    eatTheRest = true;\n+                }\n+            }\n+            \n+            if ( eatTheRest ) {\n+                while ( argIter.hasNext() ) {\n+                    args.add( argIter.next() );\n+                }\n+            }\n+        }\n+        \n+        return args;\n+    }\n+}\n--- a/src/test/org/apache/commons/cli/BuildTest.java\n+++ b/src/test/org/apache/commons/cli/BuildTest.java\n     {\n         Options opts = new Options();\n         \n-        opts.addOption('a',\n+        opts.addOption(\"a\",\n                        false,\n                        \"toggle -a\");\n \n-        opts.addOption('b',\n+        opts.addOption(\"b\",\n                        true,\n                        \"toggle -b\");\n /*\n     public void testDuplicateSimple()\n     {\n         Options opts = new Options();\n-        opts.addOption('a',\n+        opts.addOption(\"a\",\n                        false,\n                        \"toggle -a\");\n \n-        opts.addOption('a',\n+        opts.addOption(\"a\",\n                        true,\n                        \"toggle -a*\");\n         \n-        assertEquals( \"last one in wins\", \"toggle -a*\", opts.getOption('a').getDescription() );\n+        assertEquals( \"last one in wins\", \"toggle -a*\", opts.getOption(\"a\").getDescription() );\n /*\n         try\n         {\n     {\n         Options opts = new Options();\n         \n-        opts.addOption('a',\n+        opts.addOption(\"a\",\n                        \"--a\",\n                        false,\n                        \"toggle -a\");\n \n-        opts.addOption('b',\n+        opts.addOption(\"b\",\n                        \"--b\",\n                        true,\n                        \"set -b\");\n     public void testDuplicateLong()\n     {\n         Options opts = new Options();\n-        opts.addOption('a',\n+        opts.addOption(\"a\",\n                        \"--a\",\n                        false,\n                        \"toggle -a\");\n \n-        opts.addOption('a',\n+        opts.addOption(\"a\",\n                        \"--a\",\n                        false,\n                        \"toggle -a*\");\n-        assertEquals( \"last one in wins\", \"toggle -a*\", opts.getOption('a').getDescription() );\n+        assertEquals( \"last one in wins\", \"toggle -a*\", opts.getOption(\"a\").getDescription() );\n /*\n         try\n         {\n--- a/src/test/org/apache/commons/cli/HelpFormatterExamples.java\n+++ b/src/test/org/apache/commons/cli/HelpFormatterExamples.java\n          \"[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...\";\n       Options opts =\n          new Options().\n-         addOption('a', \"all\",            false, \"find all matching manual pages.\").\n-         addOption('d', \"debug\",          false, \"emit debugging messages.\").\n-         addOption('e', \"extension\",      false, \"limit search to extension type 'extension'.\").\n-         addOption('f', \"whatis\",         false, \"equivalent to whatis.\").\n-         addOption('k', \"apropos\",        false, \"equivalent to apropos.\").\n-         addOption('w', \"location\",       false, \"print physical location of man page(s).\").\n-         addOption('l', \"local-file\",     false, \"interpret 'page' argument(s) as local filename(s)\").\n-         addOption('u', \"update\",         false, \"force a cache consistency check.\").\n+         addOption(\"a\", \"all\",            false, \"find all matching manual pages.\").\n+         addOption(\"d\", \"debug\",          false, \"emit debugging messages.\").\n+         addOption(\"e\", \"extension\",      false, \"limit search to extension type 'extension'.\").\n+         addOption(\"f\", \"whatis\",         false, \"equivalent to whatis.\").\n+         addOption(\"k\", \"apropos\",        false, \"equivalent to apropos.\").\n+         addOption(\"w\", \"location\",       false, \"print physical location of man page(s).\").\n+         addOption(\"l\", \"local-file\",     false, \"interpret 'page' argument(s) as local filename(s)\").\n+         addOption(\"u\", \"update\",         false, \"force a cache consistency check.\").\n          //FIXME - should generate -r,--prompt string\n-         addOption('r', \"prompt\",         true,  \"provide 'less' pager with prompt.\").\n-         addOption('c', \"catman\",         false, \"used by catman to reformat out of date cat pages.\").\n-         addOption('7', \"ascii\",          false, \"display ASCII translation or certain latin1 chars.\").\n-         addOption('t', \"troff\",          false, \"use troff format pages.\").\n+         addOption(\"r\", \"prompt\",         true,  \"provide 'less' pager with prompt.\").\n+         addOption(\"c\", \"catman\",         false, \"used by catman to reformat out of date cat pages.\").\n+         addOption(\"7\", \"ascii\",          false, \"display ASCII translation or certain latin1 chars.\").\n+         addOption(\"t\", \"troff\",          false, \"use troff format pages.\").\n          //FIXME - should generate -T,--troff-device device\n-         addOption('T', \"troff-device\",   true,  \"use groff with selected device.\").\n-         addOption('Z', \"ditroff\",        false, \"use groff with selected device.\").\n-         addOption('D', \"default\",        false, \"reset all options to their default values.\").\n+         addOption(\"T\", \"troff-device\",   true,  \"use groff with selected device.\").\n+         addOption(\"Z\", \"ditroff\",        false, \"use groff with selected device.\").\n+         addOption(\"D\", \"default\",        false, \"reset all options to their default values.\").\n          //FIXME - should generate -M,--manpath path\n-         addOption('M', \"manpath\",        true,  \"set search path for manual pages to 'path'.\").\n+         addOption(\"M\", \"manpath\",        true,  \"set search path for manual pages to 'path'.\").\n          //FIXME - should generate -P,--pager pager\n-         addOption('P', \"pager\",          true,  \"use program 'pager' to display output.\").\n+         addOption(\"P\", \"pager\",          true,  \"use program 'pager' to display output.\").\n          //FIXME - should generate -S,--sections list\n-         addOption('S', \"sections\",       true,  \"use colon separated section list.\").\n+         addOption(\"S\", \"sections\",       true,  \"use colon separated section list.\").\n          //FIXME - should generate -m,--systems system\n-         addOption('m', \"systems\",        true,  \"search for man pages from other unix system(s).\").\n+         addOption(\"m\", \"systems\",        true,  \"search for man pages from other unix system(s).\").\n          //FIXME - should generate -L,--locale locale\n-         addOption('L', \"locale\",         true,  \"defaine the locale for this particular man search.\").\n+         addOption(\"L\", \"locale\",         true,  \"defaine the locale for this particular man search.\").\n          //FIXME - should generate -p,--preprocessor string\n-         addOption('p', \"preprocessor\",   true,  \"string indicates which preprocessor to run.\\n\" +\n+         addOption(\"p\", \"preprocessor\",   true,  \"string indicates which preprocessor to run.\\n\" +\n                                                  \" e - [n]eqn  p - pic     t - tbl\\n\" +\n                                                  \" g - grap    r - refer   v - vgrind\").\n-         addOption('V', \"version\",        false, \"show version.\").\n-         addOption('h', \"help\",           false, \"show this usage message.\");\n+         addOption(\"V\", \"version\",        false, \"show version.\").\n+         addOption(\"h\", \"help\",           false, \"show this usage message.\");\n \n       HelpFormatter hf = new HelpFormatter();\n       //hf.printHelp(cmdLine, opts);\n--- a/src/test/org/apache/commons/cli/OptionGroupTest.java\n+++ b/src/test/org/apache/commons/cli/OptionGroupTest.java\n \n     public void setUp()\n     {\n-        Option file = new Option( 'f', \"file\", false, \"file to process\" );\n-        Option dir = new Option( 'd', \"directory\", false, \"directory to process\" );\n+        Option file = new Option( \"f\", \"file\", false, \"file to process\" );\n+        Option dir = new Option( \"d\", \"directory\", false, \"directory to process\" );\n         OptionGroup group = new OptionGroup();\n         group.addOption( file );\n         group.addOption( dir );\n         _options = new Options().addOptionGroup( group );\n \n-        Option section = new Option( 's', \"section\", false, \"section to process\" );\n-        Option chapter = new Option( 'c', \"chapter\", false, \"chapter to process\" );\n+        Option section = new Option( \"s\", \"section\", false, \"section to process\" );\n+        Option chapter = new Option( \"c\", \"chapter\", false, \"chapter to process\" );\n         OptionGroup group2 = new OptionGroup();\n         group2.addOption( section );\n         group2.addOption( chapter );\n \n         _options.addOptionGroup( group2 );\n-        _options.addOption( 'r', \"revision\", false, \"revision number\" );\n+        _options.addOption( \"r\", \"revision\", false, \"revision number\" );\n     }\n \n     public void tearDown()\n         {\n             CommandLine cl = _options.parse(args);\n \n-            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption('r') );\n-            assertTrue( \"Confirm -f is set\", cl.hasOption('f') );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption('d') );\n-            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption('s') );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption('c') );\n+            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n+            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n             assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n         }\n         catch (ParseException e)\n         {\n             CommandLine cl = _options.parse(args);\n \n-            assertTrue( \"Confirm -r is set\", cl.hasOption('r') );\n-            assertTrue( \"Confirm -f is NOT set\", !cl.hasOption('f') );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption('d') );\n-            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption('s') );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption('c') );\n+            assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n+            assertTrue( \"Confirm -f is NOT set\", !cl.hasOption(\"f\") );\n+            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n             assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n         }\n         catch (ParseException e)\n         {\n             CommandLine cl = _options.parse(args);\n \n-            assertTrue( \"Confirm -r is set\", cl.hasOption('r') );\n-            assertTrue( \"Confirm -f is set\", cl.hasOption('f') );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption('d') );\n-            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption('s') );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption('c') );\n+            assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n+            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n             assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n         }\n         catch (ParseException e)\n         {\n             CommandLine cl = _options.parse(args);\n \n-            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption('r') );\n-            assertTrue( \"Confirm -f is set\", cl.hasOption('f') );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption('d') );\n-            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption('s') );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption('c') );\n+            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n+            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n             assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n         }\n         catch (ParseException e)\n         {\n             CommandLine cl = _options.parse(args);\n \n-            assertTrue( \"Confirm -r is set\", cl.hasOption('r') );\n-            assertTrue( \"Confirm -f is set\", cl.hasOption('f') );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption('d') );\n-            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption('s') );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption('c') );\n+            assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n+            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n             assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n         }\n         catch (ParseException e)\n         {\n             CommandLine cl = _options.parse(args);\n \n-            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption('r') );\n-            assertTrue( \"Confirm -f is NOT set\", !cl.hasOption('f') );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption('d') );\n-            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption('s') );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption('c') );\n+            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n+            assertTrue( \"Confirm -f is NOT set\", !cl.hasOption(\"f\") );\n+            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n             assertTrue( \"Confirm TWO extra args\", cl.getArgList().size() == 2);\n         }\n         catch (ParseException e)\n         try\n         {\n             CommandLine cl = _options.parse(args);\n-            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption('r') );\n-            assertTrue( \"Confirm -f is set\", cl.hasOption('f') );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption('d') );\n-            assertTrue( \"Confirm -s is set\", cl.hasOption('s') );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption('c') );\n+            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n+            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+            assertTrue( \"Confirm -s is set\", cl.hasOption(\"s\") );\n+            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n             assertTrue( \"Confirm NO extra args\", cl.getArgList().size() == 0);\n         }\n         catch (ParseException e)\n--- a/src/test/org/apache/commons/cli/ParseRequiredTest.java\n+++ b/src/test/org/apache/commons/cli/ParseRequiredTest.java\n     public void setUp()\n     {\n         _options = new Options()\n-            .addOption('a',\n+            .addOption(\"a\",\n                        \"enable-a\",\n                        false,\n                        \"turn [a] on or off\")\n-            .addOption('b',\n+            .addOption(\"b\",\n                        \"bfile\",\n                        true,\n                        \"set the value of [b]\",\n         {\n             CommandLine cl = _options.parse(args);\n             \n-            assertTrue( \"Confirm -a is NOT set\", !cl.hasOption('a') );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption('b') );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue('b').equals(\"file\") );\n+            assertTrue( \"Confirm -a is NOT set\", !cl.hasOption(\"a\") );\n+            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\") );\n             assertTrue( \"Confirm NO of extra args\", cl.getArgList().size() == 0);\n         }\n         catch (ParseException e)\n         {\n             CommandLine cl = _options.parse(args);\n \n-            assertTrue( \"Confirm -a is set\", cl.hasOption('a') );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption('b') );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue('b').equals(\"file\") );\n+            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\") );\n             assertTrue( \"Confirm NO of extra args\", cl.getArgList().size() == 0);\n         }\n         catch (ParseException e)\n--- a/src/test/org/apache/commons/cli/ParseTest.java\n+++ b/src/test/org/apache/commons/cli/ParseTest.java\n     public void setUp()\n     {\n         _options = new Options()\n-            .addOption('a',\n+            .addOption(\"a\",\n                        \"enable-a\",\n                        false,\n                        \"turn [a] on or off\")\n-            .addOption('b',\n+            .addOption(\"b\",\n                        \"bfile\",\n                        true,\n                        \"set the value of [b]\")\n-            .addOption('c',\n+            .addOption(\"c\",\n                        \"copt\",\n                        false,\n                        \"turn [c] on or off\");\n         {\n             CommandLine cl = _options.parse(args);\n             \n-            assertTrue( \"Confirm -a is set\", cl.hasOption('a') );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption('b') );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue('b').equals(\"toast\") );\n+            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n             assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n         }\n         catch (ParseException e)\n         {\n             CommandLine cl = _options.parse(args);\n             \n-            assertTrue( \"Confirm -a is set\", cl.hasOption('a') );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption('b') );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue('b').equals(\"toast\") );\n+            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n             assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n         } \n         catch (ParseException e)\n         {\n             CommandLine cl = _options.parse(args);\n             \n-            assertTrue( \"Confirm -a is set\", cl.hasOption('a') );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption('b') );\n-            assertTrue( \"Confirm -c is set\", cl.hasOption('c') );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue('b').equals(\"toast\") );\n+            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n             assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n         }\n         catch (ParseException e)\n         {\n             CommandLine cl = _options.parse(args);\n             \n-            assertTrue( \"Confirm -a is set\", cl.hasOption('a') );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption('b') );\n-            assertTrue( \"confirm arg of -b\", cl.getOptionValue('b').equals(\"toast\") );\n+            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+            assertTrue( \"confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n             assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 3);\n         }\n         catch (UnrecognizedOptionException e)\n         {\n             CommandLine cl = _options.parse(args,\n                                             true);\n-            assertTrue( \"Confirm -c is set\", cl.hasOption('c') );\n+            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n             assertTrue( \"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n         }\n         catch (ParseException e)\n         {\n             CommandLine cl = _options.parse(args,\n                                             true);\n-            assertTrue( \"Confirm -c is set\", cl.hasOption('c') );\n+            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n             assertTrue( \"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n \n             cl = _options.parse( cl.getArgList() );\n \n-            assertTrue( \"Confirm -c is not set\", ! cl.hasOption('c') );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption('b') );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue('b').equals(\"toast\") );\n+            assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n+            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n             assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n             assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n         }\n         {\n             CommandLine cl = _options.parse(args,\n                                             true);\n-            assertTrue( \"Confirm -c is set\", cl.hasOption('c') );\n+            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n             assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n \n             cl = _options.parse( cl.getArgList() );\n \n-            assertTrue( \"Confirm -c is not set\", ! cl.hasOption('c') );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption('b') );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue('b').equals(\"toast\") );\n+            assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n+            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n             assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n             assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n         }\n         {\n             CommandLine cl = _options.parse(args);\n \n-            assertTrue( \"Confirm -c is set\", cl.hasOption('c') );\n-            assertTrue( \"Confirm -b is not set\", ! cl.hasOption('b') );\n+            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+            assertTrue( \"Confirm -b is not set\", ! cl.hasOption(\"b\") );\n             assertTrue( \"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n \n         }\n         {\n             CommandLine cl = _options.parse(args);\n \n-            assertTrue( \"Confirm -a is set\", cl.hasOption('a') );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption('b') );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue('b').equals(\"-\") );\n+            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\") );\n             assertTrue( \"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n             assertTrue( \"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\") );\n         }\n--- a/src/test/org/apache/commons/cli/PatternOptionBuilderTest.java\n+++ b/src/test/org/apache/commons/cli/PatternOptionBuilderTest.java\n       String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n       \n       CommandLine line = options.parse(args);\n-      assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));\n-      assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));\n-      assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));\n-      assertEquals(\"boolean true flag c\", true, line.hasOption('c'));\n-      assertEquals(\"boolean false flag d\", false, line.hasOption('d'));\n-      assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));\n-      assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));\n-      assertEquals(\"number flag n\", new Float(4.5), line.getOptionObject('n'));\n-      assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));\n+      assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));\n+      assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));\n+      assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));\n+      assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));\n+      assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));\n+      assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));\n+      assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));\n+      assertEquals(\"number flag n\", new Float(4.5), line.getOptionObject(\"n\"));\n+      assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));\n /// DATES NOT SUPPORTED YET.\n //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n--- a/src/test/org/apache/commons/cli/TestHelpFormatter.java\n+++ b/src/test/org/apache/commons/cli/TestHelpFormatter.java\n       Options options = null;\n       String expected = null;\n \n-      options = new Options().addOption('a', false, \"aaaa aaaa aaaa aaaa aaaa\");\n+      options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n       expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa aaaa aaaa\";\n       hf.renderOptions(sb, 60, options, leftPad, descPad);\n       assertEquals(\"simple non-wrapped option\", expected, sb.toString());\n       assertEquals(\"simple wrapped option\", expected, sb.toString());\n \n \n-      options = new Options().addOption('a', \"aaa\", false, \"dddd dddd dddd dddd\");\n+      options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\");\n       expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd dddd dddd\";\n       sb.setLength(0);\n       hf.renderOptions(sb, 60, options, leftPad, descPad);\n       assertEquals(\"long wrapped option\", expected, sb.toString());\n \n       options = new Options().\n-         addOption('a', \"aaa\", false, \"dddd dddd dddd dddd\").\n-         addOption('b', false, \"feeee eeee eeee eeee\");\n+         addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\").\n+         addOption(\"b\", false, \"feeee eeee eeee eeee\");\n       expected =\n          lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.defaultNewLine +\n          hf.createPadding(nextLineTabStop) + \"dddd dddd\" + hf.defaultNewLine +\n--- a/src/test/org/apache/commons/cli/ValueTest.java\n+++ b/src/test/org/apache/commons/cli/ValueTest.java\n     public void setUp()\n     {\n         Options opts = new Options();\n-        opts.addOption('a',\n+        opts.addOption(\"a\",\n                        false,\n                        \"toggle -a\");\n \n-        opts.addOption('b',\n+        opts.addOption(\"b\",\n                        true,\n                        \"set -b\");\n \n-        opts.addOption('c',\n+        opts.addOption(\"c\",\n                        \"c\",\n                        false,\n                        \"toggle -c\");\n \n-        opts.addOption('d',\n+        opts.addOption(\"d\",\n                        \"d\",\n                        true,\n                        \"set -d\");\n \n     public void testShortNoArg()\n     {\n-        assertTrue( _cl.hasOption('a') );\n-        assertNull( _cl.getOptionValue('a') );\n+        assertTrue( _cl.hasOption(\"a\") );\n+        assertNull( _cl.getOptionValue(\"a\") );\n     }\n \n     public void testShortWithArg()\n     {\n-        assertTrue( _cl.hasOption('b') );\n-        assertNotNull( _cl.getOptionValue('b') );\n-        assertEquals( _cl.getOptionValue('b'), \"foo\");\n+        assertTrue( _cl.hasOption(\"b\") );\n+        assertNotNull( _cl.getOptionValue(\"b\") );\n+        assertEquals( _cl.getOptionValue(\"b\"), \"foo\");\n     }\n \n     public void testLongNoArg()\n     {\n-        assertTrue( _cl.hasOption('c') );\n-        assertNull( _cl.getOptionValue('c') );\n+        assertTrue( _cl.hasOption(\"c\") );\n+        assertNull( _cl.getOptionValue(\"c\") );\n     }\n \n     public void testLongWithArg()\n     {\n-        assertTrue( _cl.hasOption('d') );\n-        assertNotNull( _cl.getOptionValue('d') );\n-        assertEquals( _cl.getOptionValue('d'), \"bar\");\n+        assertTrue( _cl.hasOption(\"d\") );\n+        assertNotNull( _cl.getOptionValue(\"d\") );\n+        assertEquals( _cl.getOptionValue(\"d\"), \"bar\");\n     }\n }\n--- a/src/test/org/apache/commons/cli/ValuesTest.java\n+++ b/src/test/org/apache/commons/cli/ValuesTest.java\n     public void setUp()\n     {\n         Options opts = new Options();\n-        opts.addOption('a',\n+        opts.addOption(\"a\",\n                        false,\n                        \"toggle -a\");\n \n-        opts.addOption('b',\n+        opts.addOption(\"b\",\n                        true,\n                        \"set -b\");\n \n-        opts.addOption('c',\n+        opts.addOption(\"c\",\n                        \"c\",\n                        false,\n                        \"toggle -c\");\n \n-        opts.addOption('d',\n+        opts.addOption(\"d\",\n                        \"d\",\n                        true,\n                        \"set -d\");\n         \n-        opts.addOption('e',\n+        opts.addOption(\"e\",\n                        \"e\",\n                        true,\n                        \"set -e\",\n                        false,\n                        true);\n \n-        opts.addOption('f',\n+        opts.addOption(\"f\",\n                        \"f\",\n                        false,\n                        \"jk\");\n \n     public void testShortArgs()\n     {\n-        assertTrue( _cl.hasOption('a') );\n-        assertTrue( _cl.hasOption('c') );\n+        assertTrue( _cl.hasOption(\"a\") );\n+        assertTrue( _cl.hasOption(\"c\") );\n \n-        assertNull( _cl.getOptionValues('a') );\n-        assertNull( _cl.getOptionValues('c') );\n+        assertNull( _cl.getOptionValues(\"a\") );\n+        assertNull( _cl.getOptionValues(\"c\") );\n     }\n \n     public void testShortArgsWithValue()\n     {\n-        assertTrue( _cl.hasOption('b') );\n-        assertTrue( _cl.getOptionValue('b').equals(\"foo\"));\n-        assertTrue( _cl.getOptionValues('b').length == 1);\n+        assertTrue( _cl.hasOption(\"b\") );\n+        assertTrue( _cl.getOptionValue(\"b\").equals(\"foo\"));\n+        assertTrue( _cl.getOptionValues(\"b\").length == 1);\n \n-        assertTrue( _cl.hasOption('d') );\n-        assertTrue( _cl.getOptionValue('d').equals(\"bar\"));\n-        assertTrue( _cl.getOptionValues('d').length == 1);\n+        assertTrue( _cl.hasOption(\"d\") );\n+        assertTrue( _cl.getOptionValue(\"d\").equals(\"bar\"));\n+        assertTrue( _cl.getOptionValues(\"d\").length == 1);\n     }\n \n     public void testMultipleArgValues()\n     {\n-        String[] result = _cl.getOptionValues('e');\n+        String[] result = _cl.getOptionValues(\"e\");\n         String[] values = new String[] { \"one\", \"two\" };\n-        assertTrue( _cl.hasOption('e') );\n-        assertTrue( _cl.getOptionValues('e').length == 2);\n-        assertTrue( java.util.Arrays.equals( values, _cl.getOptionValues('e') ) );\n+        assertTrue( _cl.hasOption(\"e\") );\n+        assertTrue( _cl.getOptionValues(\"e\").length == 2);\n+        assertTrue( java.util.Arrays.equals( values, _cl.getOptionValues(\"e\") ) );\n     }\n \n     public void testExtraArgs()", "timestamp": 1024268459, "metainfo": ""}