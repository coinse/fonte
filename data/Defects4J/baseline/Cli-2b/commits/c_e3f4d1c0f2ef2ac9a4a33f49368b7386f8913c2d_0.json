{"sha": "e3f4d1c0f2ef2ac9a4a33f49368b7386f8913c2d", "log": "- added tests (100% clover coverage)  ", "commit": "\n--- a/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java\n-/**\n- * Copyright 2004 The Apache Software Foundation\n+/*\n+ * Copyright 2004-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n \n import junit.framework.TestCase;\n \n+/**\n+ * JUnit test case for the FileValidator.\n+ *\n+ * @author Rob Oxspring\n+ * @author John Keyes\n+ */\n public class FileValidatorTest extends TestCase {\n-    \n+\n     public void testValidate() throws InvalidArgumentException {\n         final Object[] array = new Object[] { \"src\", \"project.xml\", \"veryunlikelyfilename\"};\n         final List list = Arrays.asList(array);\n         assertEquals(new File(\"veryunlikelyfilename\"), i.next());\n         assertFalse(i.hasNext());\n     }\n-    \n+\n     public void testValidate_Directory() {\n         final Object[] array = new Object[] { \"src\", \"project.xml\"};\n         final List list = Arrays.asList(array);\n-        final Validator validator = FileValidator.getExistingDirectoryInstance();\n+        final FileValidator validator = FileValidator.getExistingDirectoryInstance();\n+\n+        assertTrue(\"is a directory validator\", validator.isDirectory());\n+        assertFalse(\"is not a file validator\", validator.isFile());\n+        assertTrue(\"is an existing file validator\", validator.isExisting());\n+        assertFalse(\"is not a hidden file validator\", validator.isHidden());\n \n         try{\n             validator.validate(list);\n             assertEquals(\"project.xml\",e.getMessage());\n         }\n     }\n-    \n+\n+    public void testValidate_ReadableFile() {\n+        final Object[] array = new Object[] { \"src/test/data/readable.txt\", \"src/test/data/notreadable.txt\"};\n+        final List list = Arrays.asList(array);\n+        final FileValidator validator = FileValidator.getExistingFileInstance();\n+        validator.setReadable(true);\n+\n+        assertFalse(\"is not a directory validator\", validator.isDirectory());\n+        assertTrue(\"is a file validator\", validator.isFile());\n+        assertTrue(\"is an existing file validator\", validator.isExisting());\n+        assertFalse(\"is not a hidden file validator\", validator.isHidden());\n+        assertTrue(\"is a readable file validator\", validator.isReadable());\n+        assertFalse(\"is not a writable file validator\", validator.isWritable());\n+\n+        try{\n+            validator.validate(list);\n+            fail(\"InvalidArgumentException\");\n+        }\n+        catch(InvalidArgumentException e){\n+            assertEquals(\"src/test/data/notreadable.txt\",e.getMessage());\n+        }\n+    }\n+\n+    public void testValidate_WritableFile() {\n+        final Object[] array = new Object[] { \"src/test/data/writable.txt\", \"src/test/data/readable.txt\"};\n+        final List list = Arrays.asList(array);\n+        final FileValidator validator = FileValidator.getExistingFileInstance();\n+        validator.setWritable(true);\n+\n+        assertFalse(\"is not a directory validator\", validator.isDirectory());\n+        assertTrue(\"is a file validator\", validator.isFile());\n+        assertTrue(\"is an existing file validator\", validator.isExisting());\n+        assertFalse(\"is not a hidden file validator\", validator.isHidden());\n+        assertTrue(\"is not a readable file validator\", validator.isReadable());\n+        assertFalse(\"is a writable file validator\", validator.isWritable());\n+\n+        try{\n+            validator.validate(list);\n+            fail(\"InvalidArgumentException\");\n+        }\n+        catch(InvalidArgumentException e){\n+            assertEquals(\"src/test/data/readable.txt\",e.getMessage());\n+        }\n+    }\n+\n+    public void testValidate_HiddenFile() throws InvalidArgumentException {\n+        final Object[] array = new Object[] { \"src/test/data/hidden.txt\", \"src\"};\n+        final List list = Arrays.asList(array);\n+        final FileValidator validator = FileValidator.getExistingFileInstance();\n+        validator.setHidden(true);\n+\n+        assertFalse(\"is not a directory validator\", validator.isDirectory());\n+        assertTrue(\"is a file validator\", validator.isFile());\n+        assertTrue(\"is an existing file validator\", validator.isExisting());\n+        assertTrue(\"is a hidden file validator\", validator.isHidden());\n+\n+        try{\n+            validator.validate(list);\n+            fail(\"InvalidArgumentException\");\n+        }\n+        catch(InvalidArgumentException e){\n+            assertEquals(\"src\",e.getMessage());\n+        }\n+    }\n+\n+    public void testValidate_Existing() {\n+        final Object[] array = new Object[] { \"project.xml\", \"veryunlikelyfilename\"};\n+        final List list = Arrays.asList(array);\n+        final FileValidator validator = FileValidator.getExistingInstance();\n+\n+        assertFalse(\"is not a directory validator\", validator.isDirectory());\n+        assertFalse(\"is not a file validator\", validator.isFile());\n+        assertTrue(\"is an existing file validator\", validator.isExisting());\n+        assertFalse(\"is not a hidden file validator\", validator.isHidden());\n+\n+        try{\n+            validator.validate(list);\n+            fail(\"InvalidArgumentException\");\n+        }\n+        catch(InvalidArgumentException e){\n+            assertEquals(\"veryunlikelyfilename\",e.getMessage());\n+        }\n+    }\n+\n     public void testValidate_File() {\n         final Object[] array = new Object[] { \"project.xml\", \"src\"};\n         final List list = Arrays.asList(array);\n             assertEquals(\"src\",e.getMessage());\n         }\n     }\n-    \n-    public void testValidate_Existing() {\n-        final Object[] array = new Object[] { \"project.xml\", \"veryunlikelyfilename\"};\n-        final List list = Arrays.asList(array);\n-        final Validator validator = FileValidator.getExistingInstance();\n-\n-        try{\n-            validator.validate(list);\n-            fail(\"InvalidArgumentException\");\n-        }\n-        catch(InvalidArgumentException e){\n-            assertEquals(\"veryunlikelyfilename\",e.getMessage());\n-        }\n-    }\n }", "timestamp": 1125870659, "metainfo": ""}