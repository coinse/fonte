{"sha": "37eb331acce08142ad027f127c355f9b462fe9e0", "log": "Fix #196", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n     protected int _currentState;\n \n     protected int _attributeCount;\n-    \n+\n+    /**\n+     * If true we have a START_ELEMENT with mixed text\n+     *\n+     * @since 2.8\n+     */\n+    protected boolean _mixedText;\n+\n     /**\n      * Index of the next attribute of the current START_ELEMENT\n      * to return (as field name and value pair), if any; -1\n         // Anything to do in failed case? Roll back whatever we found or.. ?\n         return null;\n     }\n-    \n+\n     /*\n     /**********************************************************************\n     /* Internal methods, parsing\n             }\n             // otherwise need to find START/END_ELEMENT or text\n             String text = _collectUntilTag();\n-            // If it's START_ELEMENT, ignore any text\n-            if (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT) {\n-                return _initStartElement();\n+            final boolean startElementNext = _xmlReader.getEventType() == XMLStreamReader.START_ELEMENT;\n+            // If we have no/all-whitespace text followed by START_ELEMENT, ignore text\n+            if (startElementNext) {\n+                if (text == null || _allWs(text)) {\n+                    _mixedText = false;\n+                    return _initStartElement();\n+                }\n+                _mixedText = true;\n+                _textValue = text;\n+                return (_currentState = XML_TEXT);\n             }\n             // For END_ELEMENT we will return text, if any\n             if (text != null) {\n+                _mixedText = false;\n                 _textValue = text;\n                 return (_currentState = XML_TEXT);\n             }\n+            _mixedText = false;\n             return _handleEndElement();\n+\n         case XML_ATTRIBUTE_NAME:\n             // if we just returned name, will need to just send value next\n             return (_currentState = XML_ATTRIBUTE_VALUE);\n         case XML_TEXT:\n-            // text is always followed by END_ELEMENT\n+            // mixed text with other elements\n+            if (_mixedText){\n+                _mixedText = false;\n+                return _initStartElement();\n+            }\n+            // text followed by END_ELEMENT\n             return _handleEndElement();\n         case XML_END:\n             return XML_END;\n                 location.getColumnNumber());\n     }\n \n+\n+    protected boolean _allWs(String str)\n+    {\n+        final int len = (str == null) ? 0 : str.length();\n+        if (len > 0) {\n+            for (int i = 0; i < len; ++i) {\n+                if (str.charAt(i) > ' ') {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+    \n     // for DEBUGGING\n     @Override\n     public String toString()\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/UnwrappingWithXMLTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/UnwrappingWithXMLTest.java\n      */\n \n     /**\n-   * Simple test to verify that explicit schema mapping works fine\n+     * Simple test to verify that explicit schema mapping works fine\n      * with unwrapped entities\n      */\n     public void testSimpleUnwrappingRoundtrip()\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/XmlTextTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/XmlTextTest.java\n         public String phoneNumber = \"555-1234\";\n     }\n \n+    static class WindSpeed {\n+        @JacksonXmlProperty(isAttribute = true)\n+        public String units;\n+\n+        @JacksonXmlText\n+        public int value;\n+\n+        public Radius radius;\n+    }\n+\n+    static class Radius {\n+        @JacksonXmlText\n+        public int value;\n+    }\n+\n+        \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = xmlMapper(true);\n+    \n     public void testXmlTextWithSuppressedValue() throws Exception\n     {\n         final XmlMapper mapper = new XmlMapper();\n         assertEquals(expectedXml, xml);\n     }\n \n+    // for [dataformat-xml#196]\n+    public void testMixedContent() throws Exception\n+    {\n+        WindSpeed result = MAPPER.readValue(\"<windSpeed units='kt'> 27 <radius>20</radius></windSpeed>\",\n+                WindSpeed.class);\n+        assertEquals(27, result.value);\n+        assertNotNull(result.radius);\n+        assertEquals(20, result.radius.value);\n+    }\n+\n     // for [dataformat-xml#198]\n     public void testSimple198() throws Exception\n     {\n-        final XmlMapper mapper = new XmlMapper();\n-        String xml = mapper.writeValueAsString(new Phone());\n-        Phone result = mapper.readValue(xml, Phone.class);\n+        String xml = MAPPER.writeValueAsString(new Phone());\n+        Phone result = MAPPER.readValue(xml, Phone.class);\n         assertNotNull(result);\n     }\n }", "timestamp": 1465531779, "metainfo": ""}