{"sha": "4bce41423eb3b2b78264fad2e62e008420c66dc3", "log": "Fix #236", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n         try {\n             sr = _xmlInputFactory.createXMLStreamReader(in);\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwAsParseException(e);\n+            return StaxUtil.throwAsParseException(e, null);\n         }\n         sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n         try {\n             sr = _xmlInputFactory.createXMLStreamReader(r);\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwAsParseException(e);\n+            return StaxUtil.throwAsParseException(e, null);\n         }\n         sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n         try {\n             sr = _xmlInputFactory.createXMLStreamReader(new Stax2CharArraySource(data, offset, len));\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwAsParseException(e);\n+            return StaxUtil.throwAsParseException(e, null);\n         }\n         sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n         try {\n             sr = _xmlInputFactory.createXMLStreamReader(new Stax2ByteArraySource(data, offset, len));\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwAsParseException(e);\n+            return StaxUtil.throwAsParseException(e, null);\n         }\n         sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n                 ;\n             }\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwAsParseException(e);\n+            return StaxUtil.throwAsParseException(e, null);\n         }\n         return sr;\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n import java.math.BigInteger;\n import java.util.Set;\n \n+import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamReader;\n import javax.xml.stream.XMLStreamWriter;\n \n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n import com.fasterxml.jackson.dataformat.xml.PackageVersion;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n \n /**\n  * {@link JsonParser} implementation that exposes XML structure as\n                 } else {\n                     _xmlTokens.close();\n                 }\n+            } catch (XMLStreamException e) {\n+                StaxUtil.throwAsParseException(e, this);\n             } finally {\n-                // as per [JACKSON-324], do in finally block\n                 // Also, internal buffer(s) can now be released as well\n                 _releaseBuffers();\n             }\n             }\n             return t;\n         }\n-        int token = _xmlTokens.next();\n-\n+        int token;\n+        try {\n+            token = _xmlTokens.next();\n+        } catch (XMLStreamException e) {\n+            token = StaxUtil.throwAsParseException(e, this);\n+        }\n         // Need to have a loop just because we may have to eat/convert\n         // a start-element that indicates an array element.\n         while (token == XmlTokenStream.XML_START_ELEMENT) {\n             if (_parsingContext.inArray()) {\n                 // Yup: in array, so this element could be verified; but it won't be\n                 // reported anyway, and we need to process following event.\n-                token = _xmlTokens.next();\n+                try {\n+                    token = _xmlTokens.next();\n+                } catch (XMLStreamException e) {\n+                    StaxUtil.throwAsParseException(e, this);\n+                }\n                 _mayBeLeaf = true;\n                 continue;\n             }\n                     // we had an empty String (or all white space), and we are\n                     // deserializing an array, we better hide the empty text.\n                     // Also: must skip following END_ELEMENT\n-                    _xmlTokens.skipEndElement();\n+                    try {\n+                        _xmlTokens.skipEndElement();\n+                    } catch (XMLStreamException e) {\n+                        StaxUtil.throwAsParseException(e, this);\n+                    }\n                     if (_parsingContext.inArray()) {\n                         if (_isEmpty(_currText)) {\n                             // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n                     // loop over again\n                     if (_parsingContext.inObject()) {\n                         if ((_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {\n-                            token = _xmlTokens.next();\n+                            try {\n+                                token = _xmlTokens.next();\n+                            } catch (XMLStreamException e) {\n+                                StaxUtil.throwAsParseException(e, this);\n+                            }\n                             continue;\n                         }\n                     }\n             }\n         }\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Overrides of specialized nextXxx() methods\n             return null;\n         }\n \n-        int token = _xmlTokens.next();\n+        int token;\n+\n+        try {\n+            token = _xmlTokens.next();\n+        } catch (XMLStreamException e) {\n+            token = StaxUtil.throwAsParseException(e, this);\n+        }\n \n         // mostly copied from 'nextToken()'\n         while (token == XmlTokenStream.XML_START_ELEMENT) {\n                 return null;\n             }\n             if (_parsingContext.inArray()) {\n-                token = _xmlTokens.next();\n+                try {\n+                    token = _xmlTokens.next();\n+                } catch (XMLStreamException e) {\n+                    StaxUtil.throwAsParseException(e, this);\n+                }\n                 _mayBeLeaf = true;\n                 continue;\n             }\n             if (_mayBeLeaf) {\n                 _mayBeLeaf = false;\n                 // Also: must skip following END_ELEMENT\n-                _xmlTokens.skipEndElement();\n-\n+                try {\n+                    _xmlTokens.skipEndElement();\n+                } catch (XMLStreamException e) {\n+                    StaxUtil.throwAsParseException(e, this);\n+                }\n                 // NOTE: this is different from nextToken() -- NO work-around\n                 // for otherwise empty List/array\n                 _currToken = JsonToken.VALUE_STRING;\n             // the interesting case; may be able to convert certain kinds of\n             // elements (specifically, ones with attributes, CDATA only content)\n             // into VALUE_STRING\n-            {\n+            try {\n                 String str = _xmlTokens.convertToString();\n                 if (str != null) {\n                     // need to convert token, as well as \"undo\" START_OBJECT\n                     _namesToWrap = _parsingContext.getNamesToWrap();\n                     _currToken = JsonToken.VALUE_STRING;\n                     _nextToken = null;\n-                    /* One more thing: must explicitly skip the END_OBJECT that\n-                     * would follow.\n-                     */\n-                    _xmlTokens.skipEndElement();\n+                    // One more thing: must explicitly skip the END_OBJECT that would follow\n+                    try {\n+                        _xmlTokens.skipEndElement();\n+                    } catch (XMLStreamException e) {\n+                        StaxUtil.throwAsParseException(e, this);\n+                    }\n                     return (_currText = str);\n                 }\n-                \n+            } catch (XMLStreamException e) {\n+                StaxUtil.throwAsParseException(e, this);\n             }\n             return null;\n         default:\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n     }\n     */\n \n-    public int next() throws IOException \n+    public int next() throws XMLStreamException \n     {\n         if (_repeatElement != 0) {\n             return (_currentState = _handleRepeatElement());\n         }\n-        try {\n-            return _next();\n-        } catch (XMLStreamException e) {\n-            StaxUtil.throwAsParseException(e);\n-            return -1;\n-        }\n-    }\n-    \n-    public void skipEndElement() throws IOException\n+        return _next();\n+    }\n+\n+    public void skipEndElement() throws IOException, XMLStreamException\n     {\n         int type = next();\n         if (type != XML_END_ELEMENT) {\n         return (_currentState == XML_START_ELEMENT) && (_attributeCount > 0);\n     }\n     \n-    public void closeCompletely() throws IOException\n-    {\n-        try {\n-            _xmlReader.closeCompletely();\n-        } catch (XMLStreamException e) {\n-            StaxUtil.throwAsParseException(e);\n-        }\n-    }\n-\n-    public void close() throws IOException\n-    {\n-        try {\n-            _xmlReader.close();\n-        } catch (XMLStreamException e) {\n-            StaxUtil.throwAsParseException(e);\n-        }\n+    public void closeCompletely() throws XMLStreamException {\n+        _xmlReader.closeCompletely();\n+    }\n+\n+    public void close() throws XMLStreamException {\n+        _xmlReader.close();\n     }\n \n     public JsonLocation getCurrentLocation() {\n         }\n     }\n \n-    protected String convertToString() throws IOException\n+    protected String convertToString() throws XMLStreamException\n     {\n         // only applicable to cases where START_OBJECT was induced by attributes\n         if (_currentState != XML_ATTRIBUTE_NAME || _nextAttributeIndex != 0) {\n             return null;\n         }\n-        try {\n-            String text = _collectUntilTag();\n-            // 23-Dec-2015, tatu: Used to require text not to be null, but as per\n-            //   [dataformat-xml#167], empty tag does count\n-            if (_xmlReader.getEventType() == XMLStreamReader.END_ELEMENT) {\n-                if (text == null) {\n-                    text = \"\";\n-                }\n-                if (_currentWrapper != null) {\n-                    _currentWrapper = _currentWrapper.getParent();\n-                }\n-                // just for diagnostics, reset to element name (from first attribute name)\n-                _localName = _xmlReader.getLocalName();\n-                _namespaceURI = _xmlReader.getNamespaceURI();\n-                _attributeCount = 0;\n-                _currentState = XML_TEXT;\n-                _textValue = text;\n-                return text;\n-            }\n-        } catch (XMLStreamException e) {\n-            StaxUtil.throwAsParseException(e);\n+        String text = _collectUntilTag();\n+        // 23-Dec-2015, tatu: Used to require text not to be null, but as per\n+        //   [dataformat-xml#167], empty tag does count\n+        if (_xmlReader.getEventType() == XMLStreamReader.END_ELEMENT) {\n+            if (text == null) {\n+                text = \"\";\n+            }\n+            if (_currentWrapper != null) {\n+                _currentWrapper = _currentWrapper.getParent();\n+            }\n+            // just for diagnostics, reset to element name (from first attribute name)\n+            _localName = _xmlReader.getLocalName();\n+            _namespaceURI = _xmlReader.getNamespaceURI();\n+            _attributeCount = 0;\n+            _currentState = XML_TEXT;\n+            _textValue = text;\n+            return text;\n         }\n         // Anything to do in failed case? Roll back whatever we found or.. ?\n         return null;\n      * Method called to handle details of repeating \"virtual\"\n      * start/end elements, needed for handling 'unwrapped' lists.\n      */\n-    protected int _handleRepeatElement() throws IOException \n+    protected int _handleRepeatElement() throws XMLStreamException \n     {\n         int type = _repeatElement;\n         _repeatElement = 0;\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/StaxUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/StaxUtil.java\n import java.io.IOException;\n \n import javax.xml.stream.*;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.JsonParser;\n \n public class StaxUtil\n {\n     /**\n      * @since 2.9\n      */\n-    public static <T> T throwAsParseException(XMLStreamException e) throws IOException\n+    public static <T> T throwAsParseException(XMLStreamException e,\n+            JsonParser p) throws IOException\n     {\n         Throwable t = _unwrap(e);\n         if (t instanceof Error) throw (Error) t;\n         if (t instanceof RuntimeException) throw (RuntimeException) t;\n-        throw new IOException(t);\n+        throw new JsonParseException(p, e.getMessage(), t);\n     }\n \n     /**\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/DeserErrorHandling236Test.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/DeserErrorHandling236Test.java\n         try {\n             MAPPER.readValue(XML, Employee.class);\n         } catch (JsonProcessingException e) {\n-            verifyException(e, \"foobar\");\n+            verifyException(e, \"Unexpected character\");\n         } catch (Exception e) {\n-            e.printStackTrace();\n             fail(\"Wrong exception: \"+e);\n         }\n     }", "timestamp": 1500334870, "metainfo": ""}