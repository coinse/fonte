{"sha": "656e965a10aaab948b0c2a21a0d9fa177411299f", "log": "Fix a minor regression caused by `jackson-databind` 2.9.4 changes wrt special handling of String deserialization", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlModule.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlModule.java\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n import com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier;\n+import com.fasterxml.jackson.dataformat.xml.deser.XmlStringDeserializer;\n import com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier;\n \n /**\n     public JacksonXmlModule()\n     {\n         super(\"JacksonXmlModule\", PackageVersion.VERSION);\n+        XmlStringDeserializer deser = new XmlStringDeserializer();\n+        addDeserializer(String.class, deser);\n+        addDeserializer(CharSequence.class, deser);\n     }\n-    \n+\n     @Override\n     public void setupModule(SetupContext context)\n     {\n             m.setXMLTextElementName(_cfgNameForTextElement);\n         }\n \n-        /* Usually this would be the first call; but here anything added will\n-         * be stuff user may has added, so do it afterwards instead.\n-         */\n+        // Usually this would be the first call; but here anything added will\n+        // be stuff user may has added, so do it afterwards instead.\n         super.setupModule(context);\n     }    \n \n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlStringDeserializer.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+\n+/**\n+ * Custom variant used instead of \"plain\" {@code StringDeserializer} to handle\n+ * couple of edge cases that XML parser exposes.\n+ *<p>\n+ * NOTE: mostly copy-pasted from standard {@code StringDeserializer}\n+ *\n+ * @since 2.9.4\n+ */\n+public class XmlStringDeserializer\n+    extends StdScalarDeserializer<String>\n+{\n+    private static final long serialVersionUID = 1L;\n+\n+    public XmlStringDeserializer() { super(String.class); }\n+\n+    @Override\n+    public boolean isCachable() { return true; }\n+\n+    @Override\n+    public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n+    {\n+        if (p.hasToken(JsonToken.VALUE_STRING)) {\n+            return p.getText();\n+        }\n+        JsonToken t = p.getCurrentToken();\n+        if (t == JsonToken.START_ARRAY) {\n+            return _deserializeFromArray(p, ctxt);\n+        }\n+        if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n+            Object ob = p.getEmbeddedObject();\n+            if (ob == null) {\n+                return null;\n+            }\n+            if (ob instanceof byte[]) {\n+                return ctxt.getBase64Variant().encode((byte[]) ob, false);\n+            }\n+            // otherwise, try conversion using toString()...\n+            return ob.toString();\n+        }\n+        // allow coercions, as handled by `FromXmlParser.getValueAsString()`: this includes\n+        // START_OBJECT in some cases.\n+        String text = p.getValueAsString(null);\n+        if ((text != null) || (t == JsonToken.VALUE_NULL)) {\n+            return text;\n+        }\n+        return (String) ctxt.handleUnexpectedToken(_valueClass, p);\n+    }\n+\n+    // Since we can never have type info (\"natural type\"; String, Boolean, Integer, Double):\n+    // (is it an error to even call this version?)\n+    @Override\n+    public String deserializeWithType(JsonParser p, DeserializationContext ctxt,\n+            TypeDeserializer typeDeserializer) throws IOException {\n+        return deserialize(p, ctxt);\n+    }\n+}", "timestamp": 1516813983, "metainfo": ""}