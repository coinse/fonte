{"sha": "737105e583f803a54ebed0b987489676001bd607", "log": "Fix #171", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup.java\n             return name;\n         }\n \n+        // 06-Dec-2015, tatu: as per [dataformat-xlm#171], need to actually do\n+        //    bit more of syncing, unfortunately. Jackson 2.7 should resolve\n+        //    the actual problem, but until then...\n+        name = _findRootName(rootType, config);\n+\n+        synchronized (_rootNames) {\n+            _rootNames.put(key, name);\n+        }\n+        return name;\n+    }\n+    \n+    protected synchronized QName _findRootName(Class<?> rootType, MapperConfig<?> config)\n+    {\n         BeanDescription beanDesc = config.introspectClassAnnotations(rootType);\n         AnnotationIntrospector intr = config.getAnnotationIntrospector();\n         AnnotatedClass ac = beanDesc.getClassInfo();\n             // Should we strip out enclosing class tho? For now, nope:\n             // one caveat: array simple names end with \"[]\"; also, \"$\" needs replacing\n             localName = StaxUtil.sanitizeXmlTypeName(rootType.getSimpleName());\n-            name = new QName(\"\", localName);\n-        } else {\n-            // Otherwise let's see if there's namespace, too (if we are missing it)\n-            if (ns == null || ns.length() == 0) {\n-                ns = findNamespace(intr, ac);\n-            }\n+            return new QName(\"\", localName);\n+        }\n+        // Otherwise let's see if there's namespace, too (if we are missing it)\n+        if (ns == null || ns.length() == 0) {\n+            ns = findNamespace(intr, ac);\n         }\n         if (ns == null) { // some QName impls barf on nulls...\n             ns = \"\";\n         }\n-        name = new QName(ns, localName);\n-        synchronized (_rootNames) {\n-            _rootNames.put(key, name);\n-        }\n-        return name;\n+        return new QName(ns, localName);\n     }\n \n     private String findNamespace(AnnotationIntrospector ai, AnnotatedClass ann)\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ManualTest.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class ManualTest extends XmlTestBase\n+{\n+\n+    @JacksonXmlRootElement(localName = \"model\")\n+    static class TestModel { public int a; }\n+\n+    public static void main(String[] s) throws Exception {\n+\n+        final XmlMapper xmlMapper = new XmlMapper();\n+\n+        for (int i=0;i < 40; i++) {\n+            new Thread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        System.out.println(xmlMapper.writeValueAsString(new TestModel()));\n+                    } catch (JsonProcessingException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }).start();\n+        }\n+\n+        Thread.sleep(10000L);\n+\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/TextValueTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/TextValueTest.java\n         public String text = \"something\";\n     }\n \t\n-    // [Issue#24]\n+    // [dataformat-xml#24]\n \n     static class Main {\n         @JsonProperty(\"com.test.stack\") public Stack stack;\n         public String value;\n     }\n \n-    // [Issue#66]\n+    // [dataformat-xml#66]\n     static class Issue66Bean\n     {\n         @JacksonXmlProperty(isAttribute = true)\n         protected String textValue;\n     }\n \n-    // [Issue#72]\n+    // [dataformat-xml#72]\n     \n     static class TextOnlyBean\n     {\n         assertEquals(TEXT, main.stack.slot.value);\n     }\n \n-    // for [Issue#36]\n+    // for [dataformat-xml#36]\n     public void testAlternateTextElementName() throws IOException\n     {\n         final String XML = \"<JAXBStyle>foo</JAXBStyle>\";\n         assertEquals(\"foo\", pojo.value);\n     }\n \n-    // [Issue#66], implicit property from \"XmlText\"\n+    // [dataformat-xml#66], implicit property from \"XmlText\"\n     public void testIssue66() throws Exception\n     {\n         JacksonXmlModule module = new JacksonXmlModule();\n         assertEquals(XML, json);\n     }\n \n-    // [Issue#72]\n+    // [dataformat-xml#72]\n     public void testTextOnlyPojo() throws Exception\n     {\n         XmlMapper mapper = xmlMapper(true);", "timestamp": 1449462709, "metainfo": ""}