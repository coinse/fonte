{"sha": "b1cce7cb29c5b2ae78a3bbc42c4cf8f1b9d298ea", "log": "Adding a unit test; preliminary support for upcoming [jackson-core/issue-25]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n * Implements {@link JsonFactory} since interface for constructing XML backed\n * parsers and generators is quite similar to dealing with JSON.\n * \n-* @author tatu\n+* @author Tatu Saloranta (tatu.saloranta@iki.fi)\n */\n public class XmlFactory extends JsonFactory\n {\n     /**\n-     * Name used to identify JSON format\n+     * Name used to identify XML format\n      * (and returned by {@link #getFormatName()}\n      */\n     public final static String FORMAT_NAME_XML = \"XML\";\n     {\n         return hasXMLFormat(acc);\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Overridden parts of public API\n-    /**********************************************************\n-     */\n-\n-    /**\n-     *<p>\n-     * note: co-variant return type\n-     */\n-    @Override\n-    public ToXmlGenerator createJsonGenerator(OutputStream out, JsonEncoding enc)\n-        throws IOException\n+\n+    /*\n+    /**********************************************************\n+    /* Upcoming parts of public API (for 2.1)\n+    /**********************************************************\n+     */\n+\n+    // @Override\n+    public ToXmlGenerator createGenerator(OutputStream out, JsonEncoding enc) throws IOException\n     {\n         // false -> we won't manage the stream unless explicitly directed to\n-        IOContext ctxt = _createContext(out, false);\n-        return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n+        return new ToXmlGenerator(_createContext(out, false),\n+                _generatorFeatures, _xmlGeneratorFeatures,\n                 _objectCodec, _createXmlWriter(out));\n     }\n \n-    @Override\n-    public ToXmlGenerator createJsonGenerator(Writer out)\n-        throws IOException\n-    {\n-        IOContext ctxt = _createContext(out, false);\n-        return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n+    // @Override\n+    public ToXmlGenerator createGenerator(Writer out) throws IOException\n+    {\n+        return new ToXmlGenerator(_createContext(out, false),\n+                _generatorFeatures, _xmlGeneratorFeatures,\n                 _objectCodec, _createXmlWriter(out));\n     }\n \n-    @Override\n-    public ToXmlGenerator createJsonGenerator(File f, JsonEncoding enc)\n-        throws IOException\n+    // @Override\n+    public ToXmlGenerator createGenerator(File f, JsonEncoding enc) throws IOException\n     {\n         OutputStream out = new FileOutputStream(f);\n         // true -> yes, we have to manage the stream since we created it\n     \n     /*\n     /**********************************************************\n-    /* Overridden internal factory methods\n+    /* Overridden parts of public API for generator creation\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     *<p>\n+     * note: co-variant return type\n+     */\n+    @Override\n+    public ToXmlGenerator createJsonGenerator(OutputStream out, JsonEncoding enc)\n+        throws IOException\n+    {\n+        // false -> we won't manage the stream unless explicitly directed to\n+        return new ToXmlGenerator(_createContext(out, false),\n+                _generatorFeatures, _xmlGeneratorFeatures,\n+                _objectCodec, _createXmlWriter(out));\n+    }\n+\n+    @Override\n+    public ToXmlGenerator createJsonGenerator(Writer out)\n+        throws IOException\n+    {\n+        return new ToXmlGenerator(_createContext(out, false),\n+                _generatorFeatures, _xmlGeneratorFeatures,\n+                _objectCodec, _createXmlWriter(out));\n+    }\n+\n+    @Override\n+    public ToXmlGenerator createJsonGenerator(File f, JsonEncoding enc)\n+        throws IOException\n+    {\n+        OutputStream out = new FileOutputStream(f);\n+        // true -> yes, we have to manage the stream since we created it\n+        IOContext ctxt = _createContext(out, true);\n+        ctxt.setEncoding(enc);\n+        return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n+                _objectCodec, _createXmlWriter(out));\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Upcoming parts of public API (for 2.1)\n+    /**********************************************************\n+     */\n+\n+//  @Override\n+    protected FromXmlParser _createParser(InputStream in, IOContext ctxt)\n+        throws IOException, JsonParseException\n+    {\n+        return _createJsonParser(in, ctxt);\n+    }\n+\n+//    @Override\n+    protected FromXmlParser _createParser(Reader r, IOContext ctxt)\n+        throws IOException, JsonParseException\n+    {\n+        return _createJsonParser(r, ctxt);\n+    }\n+\n+//  @Override\n+    protected FromXmlParser _createParser(byte[] data, int offset, int len, IOContext ctxt)\n+        throws IOException, JsonParseException\n+    {\n+        return _createJsonParser(data, offset, len, ctxt);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Overridden internal factory methods for parser creation\n     /**********************************************************\n      */\n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/MediaItem.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+@JsonPropertyOrder({\"content\", \"images\"})\n+public class MediaItem\n+{\n+    public enum Player { JAVA, FLASH;  }\n+    public enum Size { SMALL, LARGE; }\n+\n+    private List<Photo> _photos;\n+    private Content _content;\n+\n+    public MediaItem() { }\n+\n+    public MediaItem(Content c)\n+    {\n+        _content = c;\n+    }\n+\n+    public void addPhoto(Photo p) {\n+        if (_photos == null) {\n+            _photos = new ArrayList<Photo>();\n+        }\n+        _photos.add(p);\n+    }\n+    \n+    public List<Photo> getImages() { return _photos; }\n+    public void setImages(List<Photo> p) { _photos = p; }\n+\n+    public Content getContent() { return _content; }\n+    public void setContent(Content c) { _content = c; }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+    \n+    @JsonPropertyOrder({\"uri\",\"title\",\"width\",\"height\",\"size\"})\n+    public static class Photo\n+    {\n+        private String _uri;\n+        private String _title;\n+        private int _width;\n+        private int _height;\n+        private Size _size;\n+    \n+        public Photo() {}\n+        public Photo(String uri, String title, int w, int h, Size s)\n+        {\n+          _uri = uri;\n+          _title = title;\n+          _width = w;\n+          _height = h;\n+          _size = s;\n+        }\n+    \n+      public String getUri() { return _uri; }\n+      public String getTitle() { return _title; }\n+      public int getWidth() { return _width; }\n+      public int getHeight() { return _height; }\n+      public Size getSize() { return _size; }\n+    \n+      public void setUri(String u) { _uri = u; }\n+      public void setTitle(String t) { _title = t; }\n+      public void setWidth(int w) { _width = w; }\n+      public void setHeight(int h) { _height = h; }\n+      public void setSize(Size s) { _size = s; }\n+    }\n+      \n+    @JsonPropertyOrder({\"uri\",\"title\",\"width\",\"height\",\"format\",\"duration\",\"size\",\"bitrate\",\"persons\",\"player\",\"copyright\"})\n+    public static class Content\n+    {\n+        private Player _player;\n+        private String _uri;\n+        private String _title;\n+        private int _width;\n+        private int _height;\n+        private String _format;\n+        private long _duration;\n+        private long _size;\n+        private int _bitrate;\n+        private List<String> _persons;\n+        private String _copyright;\n+    \n+        public Content() { }\n+\n+        public void addPerson(String p) {\n+            if (_persons == null) {\n+                _persons = new ArrayList<String>();\n+            }\n+            _persons.add(p);\n+        }\n+        \n+        public Player getPlayer() { return _player; }\n+        public String getUri() { return _uri; }\n+        public String getTitle() { return _title; }\n+        public int getWidth() { return _width; }\n+        public int getHeight() { return _height; }\n+        public String getFormat() { return _format; }\n+        public long getDuration() { return _duration; }\n+        public long getSize() { return _size; }\n+        public int getBitrate() { return _bitrate; }\n+        public List<String> getPersons() { return _persons; }\n+        public String getCopyright() { return _copyright; }\n+    \n+        public void setPlayer(Player p) { _player = p; }\n+        public void setUri(String u) {  _uri = u; }\n+        public void setTitle(String t) {  _title = t; }\n+        public void setWidth(int w) {  _width = w; }\n+        public void setHeight(int h) {  _height = h; }\n+        public void setFormat(String f) {  _format = f;  }\n+        public void setDuration(long d) {  _duration = d; }\n+        public void setSize(long s) {  _size = s; }\n+        public void setBitrate(int b) {  _bitrate = b; }\n+        public void setPersons(List<String> p) {  _persons = p; }\n+        public void setCopyright(String c) {  _copyright = c; }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestComplex.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+public class TestComplex extends XmlTestBase\n+{\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    \n+    public void testRoundtrip() throws Exception\n+    {\n+        MediaItem.Content content = new MediaItem.Content();\n+        content.setTitle(\"content\");\n+        content.addPerson(\"William\");\n+        content.addPerson(\"Robert\");\n+\n+        MediaItem input = new MediaItem(content);\n+        input.addPhoto(new MediaItem.Photo(\"http://a\", \"title1\", 200, 100, MediaItem.Size.LARGE));\n+        input.addPhoto(new MediaItem.Photo(\"http://b\", \"title2\", 640, 480, MediaItem.Size.SMALL));\n+\n+        ObjectWriter w = MAPPER.writerWithType(MediaItem.class);\n+        String xml = w.writeValueAsString(input);\n+\n+//System.err.println(\"DEBUG: Xml == \"+xml);\n+\n+        ObjectReader r = MAPPER.reader(MediaItem.class);\n+        MediaItem result = r.readValue(xml);\n+        assertNotNull(result);\n+    }\n+}", "timestamp": 1343024579, "metainfo": ""}