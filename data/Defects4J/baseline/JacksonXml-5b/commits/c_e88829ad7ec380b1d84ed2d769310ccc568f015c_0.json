{"sha": "e88829ad7ec380b1d84ed2d769310ccc568f015c", "log": "Further work on issue #17", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n     @Override\n     public String findSerializationName(AnnotatedField af)\n     {\n-        JacksonXmlProperty pann = af.getAnnotation(JacksonXmlProperty.class);\n-        if (pann != null) {\n-            return pann.localName();\n+        String name = _findXmlName(af);\n+        if (name != null) {\n+            return name;\n         }\n         return super.findSerializationName(af);\n     }\n     @Override\n     public String findSerializationName(AnnotatedMethod am)\n     {\n-        JacksonXmlProperty pann = am.getAnnotation(JacksonXmlProperty.class);\n-        if (pann != null) {\n-            return pann.localName();\n+        String name = _findXmlName(am);\n+        if (name != null) {\n+            return name;\n         }\n         return super.findSerializationName(am);\n     }\n     @Override\n     public String findDeserializationName(AnnotatedField af)\n     {\n-    \t// Slightly more complicated if we have a wrapper:\n-    \tJacksonXmlElementWrapper wann = af.getAnnotation(JacksonXmlElementWrapper.class);\n-    \tif (wann != null) {\n-    \t\treturn wann.localName();\n-    \t}\n-    \t// if not, use basic property name:\n-        JacksonXmlProperty pann = af.getAnnotation(JacksonXmlProperty.class);\n-        if (pann != null) {\n-            return pann.localName();\n+        String name = _findXmlName(af);\n+        if (name != null) {\n+            return name;\n         }\n         return super.findDeserializationName(af);\n     }\n \n     @Override\n+    public String findDeserializationName(AnnotatedMethod am)\n+    {\n+        String name = _findXmlName(am);\n+        if (name != null) {\n+            return name;\n+        }\n+        return super.findDeserializationName(am);\n+    }\n+    \n+    @Override\n     public String findDeserializationName(AnnotatedParameter ap)\n     {\n-    \tJacksonXmlElementWrapper wann = ap.getAnnotation(JacksonXmlElementWrapper.class);\n-    \tif (wann != null) {\n-    \t\t// empty name not acceptable...\n-            String name = wann.localName();\n-            if (name.length() > 0) {\n-                return name;\n-            }\n-    \t}\n-\n-    \tJacksonXmlProperty pann = ap.getAnnotation(JacksonXmlProperty.class);\n-        // can not return empty String here, so:\n-        if (pann != null) {\n-            String name = pann.localName();\n-            if (name.length() > 0) {\n-                return name;\n-            }\n+        String name = _findXmlName(ap);\n+        // empty name not acceptable...\n+        if (name != null && name.length() > 0) {\n+            return name;\n         }\n         return super.findDeserializationName(ap);\n     }\n \n+    protected String _findXmlName(Annotated a)\n+    {\n+        JacksonXmlProperty pann = a.getAnnotation(JacksonXmlProperty.class);\n+        if (pann != null) {\n+            return pann.localName();\n+        }\n+        return null;\n+    }\n+    \n     /*\n     /**********************************************************************\n     /* Overrides for non-public helper methods\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlModule.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlModule.java\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier;\n import com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier;\n \n \n     @Override\n     public void setupModule(SetupContext context)\n     {\n-        // Need to modify BeanSerializer that is used\n+        // Need to modify BeanDeserializer, BeanSerializer that are used\n         context.addBeanSerializerModifier(new XmlBeanSerializerModifier());\n+        context.addBeanDeserializerModifier(new XmlBeanDeserializerModifier());\n+\n         // as well as AnnotationIntrospector\n         context.insertAnnotationIntrospector(XML_ANNOTATION_INTROSPECTOR);\n     }    \n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import java.util.*;\n+\n+import javax.xml.namespace.QName;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil;\n+\n+/**\n+ * The main reason for a modifier is to support handling of\n+ * 'wrapped' Collection types.\n+ */\n+public class XmlBeanDeserializerModifier\n+    extends BeanDeserializerModifier\n+{\n+    @Override\n+    public List<BeanPropertyDefinition> updateProperties(DeserializationConfig config,\n+            BeanDescription beanDesc, List<BeanPropertyDefinition> propDefs)\n+    {\n+        final AnnotationIntrospector intr = config.getAnnotationIntrospector();\n+        int changed = 0;\n+        for (int i = 0, len = propDefs.size(); i < len; ++i) {\n+            BeanPropertyDefinition prop = propDefs.get(i);\n+            AnnotatedMember acc = prop.getAccessor();\n+            // should not be null, but just in case:\n+            if (acc == null) {\n+                continue;\n+            }\n+            QName wrapperName = AnnotationUtil.findWrapperName(intr, acc);\n+            if (wrapperName == null) {\n+                continue;\n+            }\n+            String localName = wrapperName.getLocalPart();\n+            if ((localName == null || localName.length() == 0)\n+                   || localName.equals(prop.getName())) {\n+                continue;\n+            }\n+            // make copy-on-write as necessary\n+            if (changed == 0) {\n+                propDefs = new ArrayList<BeanPropertyDefinition>(propDefs);\n+            }\n+            ++changed;\n+            // Also, must do upcast unfortunately\n+            propDefs.set(i, prop.withName(localName));\n+        }\n+        return propDefs;\n+    }\n+\n+}\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n-import com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector;\n+import com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil;\n import com.fasterxml.jackson.dataformat.xml.util.XmlInfo;\n \n \n     public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\n             BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties)\n     {\n-        AnnotationIntrospector intr = config.getAnnotationIntrospector();\n+        final AnnotationIntrospector intr = config.getAnnotationIntrospector();\n         for (int i = 0, len = beanProperties.size(); i < len; ++i) {\n             BeanPropertyWriter bpw = beanProperties.get(i);\n             final AnnotatedMember member = bpw.getMember();\n-            String ns = findNamespaceAnnotation(intr, member);\n-            Boolean isAttribute = findIsAttributeAnnotation(intr, member);\n+            String ns = AnnotationUtil.findNamespaceAnnotation(intr, member);\n+            Boolean isAttribute = AnnotationUtil.findIsAttributeAnnotation(intr, member);\n             bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n \n             // Actually: if we have a Collection type, easiest place to add wrapping would be here...\n+            //  or: let's also allow wrapping of \"untyped\" (Object): assuming it is a dynamically\n+            //   typed Collection...\n             if (_isContainerType(bpw.getType())) {\n                 String localName = null, wrapperNs = null;\n \n                 QName wrappedName = new QName(ns, bpw.getName());\n-                QName wrapperName = findWrapperName(intr, member);\n+                QName wrapperName = AnnotationUtil.findWrapperName(intr, member);\n                 if (wrapperName != null) {\n                     localName = wrapperName.getLocalPart();\n                     wrapperNs = wrapperName.getNamespaceURI();\n             return true;\n         }\n         return false;\n-    }\n-    \n-    private static String findNamespaceAnnotation(AnnotationIntrospector ai, AnnotatedMember prop)\n-    {\n-        for (AnnotationIntrospector intr : ai.allIntrospectors()) {\n-            if (intr instanceof XmlAnnotationIntrospector) {\n-                String ns = ((XmlAnnotationIntrospector) intr).findNamespace(prop);\n-                if (ns != null) {\n-                    return ns;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private static Boolean findIsAttributeAnnotation(AnnotationIntrospector ai, AnnotatedMember prop)\n-    {\n-        for (AnnotationIntrospector intr : ai.allIntrospectors()) {\n-            if (intr instanceof XmlAnnotationIntrospector) {\n-                Boolean b = ((XmlAnnotationIntrospector) intr).isOutputAsAttribute(prop);\n-                if (b != null) {\n-                    return b;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private static QName findWrapperName(AnnotationIntrospector ai, AnnotatedMember prop)\n-    {\n-        for (AnnotationIntrospector intr : ai.allIntrospectors()) {\n-            if (intr instanceof XmlAnnotationIntrospector) {\n-                QName n = ((XmlAnnotationIntrospector) intr).findWrapperElement(prop);\n-                if (n != null) {\n-                    return n;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-    \n+    }    \n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/AnnotationUtil.java\n+package com.fasterxml.jackson.dataformat.xml.util;\n+\n+import javax.xml.namespace.QName;\n+\n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector;\n+\n+public class AnnotationUtil\n+{\n+    public static String findNamespaceAnnotation(AnnotationIntrospector ai,\n+            AnnotatedMember prop)\n+    {\n+        for (AnnotationIntrospector intr : ai.allIntrospectors()) {\n+            if (intr instanceof XmlAnnotationIntrospector) {\n+                String ns = ((XmlAnnotationIntrospector) intr).findNamespace(prop);\n+                if (ns != null) {\n+                    return ns;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static Boolean findIsAttributeAnnotation(AnnotationIntrospector ai,\n+            AnnotatedMember prop)\n+    {\n+        for (AnnotationIntrospector intr : ai.allIntrospectors()) {\n+            if (intr instanceof XmlAnnotationIntrospector) {\n+                Boolean b = ((XmlAnnotationIntrospector) intr).isOutputAsAttribute(prop);\n+                if (b != null) {\n+                    return b;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static QName findWrapperName(AnnotationIntrospector ai, AnnotatedMember prop)\n+    {\n+        for (AnnotationIntrospector intr : ai.allIntrospectors()) {\n+            if (intr instanceof XmlAnnotationIntrospector) {\n+                QName n = ((XmlAnnotationIntrospector) intr).findWrapperElement(prop);\n+                if (n != null) {\n+                    return n;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListDeserialization.java\n \t   public int age;\n \n \t   @JacksonXmlElementWrapper(localName = \"notes\")\n-\t   @JacksonXmlProperty( localName = \"note\" )\n+\t   @JacksonXmlProperty(localName = \"note\" )\n \t   public List<String> notes = new ArrayList<String>();\n \t   \n \t   public Person() { }\n \t\t   this.age = age;\n \t   }\n \t}\n-\t\n+\n+    public static class PersonWithGetters\n+    {\n+       @JacksonXmlProperty( isAttribute = true )\n+       public String id;\n+\n+       private List<String> _notes = new ArrayList<String>();\n+              \n+       public PersonWithGetters() { }\n+       public PersonWithGetters(String id) {\n+           this.id = id;\n+       }\n+\n+       @JacksonXmlElementWrapper(localName = \"notes\")\n+       @JacksonXmlProperty( localName = \"note\" )\n+       public List<String> getStuff() {\n+           return _notes;\n+       }\n+\n+       public void setStuff(List<String> n) {\n+           _notes = n;\n+       }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Unit tests\n     \tassertEquals(\"note 1\", result.notes.get(0));\n     \tassertEquals(\"note 2\", result.notes.get(1));\n     }\n+\n+    public void testWrappedListWithGetters() throws Exception\n+    {\n+        PersonWithGetters p = new PersonWithGetters(\"abc\");\n+        p._notes.add(\"note 1\");\n+        p._notes.add(\"note 2\");\n+        String xml = MAPPER.writeValueAsString( p );\n+        PersonWithGetters result = MAPPER.readValue(xml, PersonWithGetters.class);\n+        assertNotNull(result);\n+        assertEquals(\"abc\", result.id);\n+        assertEquals(2, result._notes.size());\n+        assertEquals(\"note 1\", result._notes.get(0));\n+        assertEquals(\"note 2\", result._notes.get(1));\n+    }\n }", "timestamp": 1331780244, "metainfo": ""}