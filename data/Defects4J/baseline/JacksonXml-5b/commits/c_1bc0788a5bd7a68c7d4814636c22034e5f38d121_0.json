{"sha": "1bc0788a5bd7a68c7d4814636c22034e5f38d121", "log": "Add final (?) fixes to handling of attributes for text-only elements, when binding String values", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n      */\n     public void addVirtualWrapping(Set<String> namesToWrap)\n     {\n-//System.out.println(\"AddWraps: \"+namesToWrap+\" (current name=\"+_parsingContext.getCurrentName()+\")\");        \n-\n         /* 17-Sep-2012, tatu: Not 100% sure why, but this is necessary to avoid\n          *   problems with Lists-in-Lists properties\n          */\n         String name = _xmlTokens.getLocalName();\n         if (name != null && namesToWrap.contains(name)) {\n-//System.out.println(\"!!! AddWraps matches CURRENT name... flash repeat; nextToken=\"+_nextToken);\n             _xmlTokens.repeatStartElement();\n         }\n         _namesToWrap = namesToWrap;\n     }\n \n     // DEBUGGING\n-/*\n+    /*\n     @Override\n     public JsonToken nextToken() throws IOException, JsonParseException\n     {\n \n     // @since 2.1\n     @Override\n-    public String getValueAsString() throws IOException, JsonParseException {\n+    public final String getValueAsString() throws IOException, JsonParseException {\n         return getValueAsString(null);\n     }\n \n     @Override\n     public String getValueAsString(String defValue) throws IOException, JsonParseException\n     {\n-//System.err.println(\"getValue, t==\"+_currToken);       \n-        if (_currToken == null) {\n+        JsonToken t = _currToken;\n+        if (t == null) {\n             return null;\n         }\n-        switch (_currToken) {\n+        switch (t) {\n         case FIELD_NAME:\n             return getCurrentName();\n         case VALUE_STRING:\n             return _currText;\n+        case START_OBJECT:\n+            // the interesting case; may be able to convert certain kinds of\n+            // elements (specifically, ones with attributes, CDATA only content)\n+            // into VALUE_STRING\n+            {\n+                String str = _xmlTokens.convertToString();\n+                if (str != null) {\n+                    // need to convert token, as well as \"undo\" START_OBJECT\n+                    // note: Should NOT update context, because we will still be getting\n+                    // matching END_OBJECT, which will undo contexts properly\n+                    _parsingContext = _parsingContext.getParent();\n+                    _namesToWrap = _parsingContext.getNamesToWrap();\n+                    _currToken = JsonToken.VALUE_STRING;\n+                    _nextToken = null;\n+                    /* One more thing: must explicitly skip the END_OBJECT that\n+                     * would follow.\n+                     */\n+                    _xmlTokens.skipEndElement();\n+                    return (_currText = str);\n+                }\n+                \n+            }\n+            return null;\n         default:\n             if (_currToken.isScalarValue()) {\n                 return _currToken.asString();\n             }\n         }\n-        return null;\n+        return defValue;\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n             throw new IllegalStateException(\"Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (\"\n                     +XML_START_ELEMENT+\") but \"+_currentState);\n         }\n+    }\n+\n+    protected String convertToString() throws IOException\n+    {\n+        // only applicable to cases where START_OBJECT was induced by attributes\n+        if (_currentState != XML_ATTRIBUTE_NAME || _nextAttributeIndex != 0) {\n+            return null;\n+        }\n+        try {\n+            String text = _collectUntilTag();\n+            if (text != null && _xmlReader.getEventType() == XMLStreamReader.END_ELEMENT) {\n+                if (_currentWrapper != null) {\n+                    _currentWrapper = _currentWrapper.getParent();\n+                }\n+                // just for diagnostics, reset to element name (from first attribute name)\n+                _localName = _xmlReader.getLocalName();\n+                _namespaceURI = _xmlReader.getNamespaceURI();\n+                _attributeCount = 0;\n+                _currentState = XML_TEXT;\n+                _textValue = text;\n+                return text;\n+            }\n+        } catch (XMLStreamException e) {\n+            StaxUtil.throwXmlAsIOException(e);\n+        }\n+        // Anything to do in failed case? Roll back whatever we found or.. ?\n+        return null;\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestStringValues.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestStringValues.java\n package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.util.Arrays;\n \n public class TestStringValues extends XmlTestBase\n {\n+    protected static class Bean2\n+    {\n+        public String a, b;\n+\n+        @Override\n+        public String toString() {\n+            return \"[a=\"+a+\",b=\"+b+\"]\";\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Unit tests\n \n     public void testStringWithAttribute() throws Exception\n     {\n-    // and then the money shot: with 'standard' attribute...\n+        // and then the money shot: with 'standard' attribute...\n         StringBean bean = MAPPER.readValue(\"<StringBean><text xml:lang='fi'>Pulla</text></StringBean>\", StringBean.class);\n         assertNotNull(bean);\n         assertEquals(\"Pulla\", bean.text);\n     }\n+\n+    public void testStringsWithAttribute() throws Exception\n+    {\n+        Bean2 bean = MAPPER.readValue(\n+                \"<Bean2>\\n\"\n+                +\"<a xml:lang='fi'>abc</a>\"\n+                +\"<b xml:lang='en'>def</b>\"\n+//                +\"<a>abc</a><b>def</b>\"\n+                +\"</Bean2>\\n\",\n+                Bean2.class);\n+        assertNotNull(bean);\n+        assertEquals(\"abc\", bean.a);\n+        assertEquals(\"def\", bean.b);\n+    }\n     \n+    public void testStringArrayWithAttribute() throws Exception\n+    {\n+        // should even work for arrays of those\n+        StringBean[] beans = MAPPER.readValue(\n+                \"<StringBean>\\n\"\n+                +\"<StringBean><text xml:lang='fi'>Pulla</text></StringBean>\"\n+                +\"<StringBean><text xml:lang='se'>Bulla</text></StringBean>\"\n+                +\"<StringBean><text xml:lang='en'>Good stuff</text></StringBean>\"\n+\n+                /*\n+                +\"<StringBean><text>Pulla</text></StringBean>\"\n+                +\"<StringBean><text>Bulla</text></StringBean>\"\n+                +\"<StringBean><text>Good stuff</text></StringBean>\"\n+                */\n+\n+                +\"</StringBean>\",\n+                StringBean[].class);\n+        assertNotNull(beans);\n+System.out.println(\"-> \"+Arrays.asList(beans));        \n+//        assertEquals(3, beans.length);\n+        assertEquals(\"Pulla\", beans[0].text);\n+        assertEquals(\"Bulla\", beans[1].text);\n+        assertEquals(\"Good stuff\", beans[2].text);\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n \n         public StringBean() { this(\"foobar\"); }\n         public StringBean(String s) { text = s; }\n+\n+        @Override\n+        public String toString() {\n+            if (text == null) return \"NULL\";\n+            return \"\\\"\"+text+\"\\\"\";\n+        }\n     }\n     \n     /**", "timestamp": 1348451830, "metainfo": ""}