{"sha": "4e43d66d0359077203061e2bfad8f5b2d637ae78", "log": "Fix Issue #19, problems with attribute serialization ordering", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n      * Note: writer instance will always be of type\n      * {@link org.codehaus.stax2.XMLStreamWriter2} (including\n      * Typed Access API) so upcasts are safe.\n-     * \n-     * @since 1.7\n      */\n     public XMLStreamWriter getStaxWriter() {\n         return _xmlWriter;\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n     public XmlBeanSerializer(BeanSerializerBase src)\n     {\n         super(src);\n-\n-        // Ok, first: collect namespace information\n-        _xmlNames = new QName[_props.length];\n-        // First, find namespace information\n-        for (int i = 0, len = _props.length; i < len; ++i) {\n-            BeanPropertyWriter bpw = _props[i];\n-            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n-            String ns = null;\n-            if (info != null) {\n-                ns = info.getNamespace();\n-            }\n-            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n-        }      \n         \n         /* Then make sure attributes are sorted before elements, keep track\n          * of how many there are altogether\n             }\n         }\n         _attributeCount = attrCount;\n+\n+        // And then collect namespace information\n+        _xmlNames = new QName[_props.length];\n+        for (int i = 0, len = _props.length; i < len; ++i) {\n+            BeanPropertyWriter bpw = _props[i];\n+            XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n+            String ns = null;\n+            if (info != null) {\n+                ns = info.getNamespace();\n+            }\n+            _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n+        }      \n+    \n     }\n \n     protected XmlBeanSerializer(XmlBeanSerializer src, ObjectIdWriter objectIdWriter)\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestSerialization.java\n     {\n         @JacksonXmlProperty(namespace=\"http://foo\")\n         public String text = \"blah\";\n-    }\n-\n-    static class NsAttrBean\n-    {\n-        @JacksonXmlProperty(namespace=\"http://foo\", isAttribute=true)\n-        public String attr = \"3\";\n     }\n \n     @JacksonXmlRootElement(localName=\"root\")\n         assertEquals(\"<NsElemBean><wstxns1:text xmlns:wstxns1=\\\"http://foo\\\">blah</wstxns1:text></NsElemBean>\", xml);\n     }\n \n-    public void testSimpleNsAttr() throws IOException\n-    {\n-        String xml = _xmlMapper.writeValueAsString(new NsAttrBean());\n-        xml = removeSjsxpNamespace(xml);\n-        // here we assume woodstox automatic prefixes, not very robust but:\n-        assertEquals(\"<NsAttrBean xmlns:wstxns1=\\\"http://foo\\\" wstxns1:attr=\\\"3\\\"/>\", xml);\n-    }\n-\n     public void testMap() throws IOException\n     {\n         // First, map in a general wrapper\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestSerializationAttr.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class TestSerializationAttr extends XmlTestBase\n+{\n+    static class NsAttrBean\n+    {\n+        @JacksonXmlProperty(namespace=\"http://foo\", isAttribute=true)\n+        public String attr = \"3\";\n+    }\n+\n+    @JacksonXmlRootElement(localName=\"test\", namespace=\"http://root\")\n+    static class Issue19Bean\n+    {\n+    \t@JsonProperty\n+        @JacksonXmlProperty(namespace = \"http://my.ns\")\n+    \tpublic boolean booleanA = true;\n+\n+    \t@JsonProperty\n+        @JacksonXmlProperty(isAttribute=true)\n+    \tpublic String id = \"abc\";\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Set up\n+    /**********************************************************\n+     */\n+\n+    protected XmlMapper _xmlMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        _xmlMapper = new XmlMapper();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testSimpleNsAttr() throws IOException\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new NsAttrBean());\n+        xml = removeSjsxpNamespace(xml);\n+        // here we assume woodstox automatic prefixes, not very robust but:\n+        assertEquals(\"<NsAttrBean xmlns:wstxns1=\\\"http://foo\\\" wstxns1:attr=\\\"3\\\"/>\", xml);\n+    }\n+\n+    public void testIssue19() throws IOException\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new Issue19Bean());\n+        xml = removeSjsxpNamespace(xml);\n+        xml = xml.replaceAll(\"\\\"\", \"'\");\n+        // as with above, assumes exact NS allocation strategy, not optimal:\n+        assertEquals(\"<wstxns1:test xmlns:wstxns1='http://root' id='abc'>\"\n+        \t\t+\"<wstxns2:booleanA xmlns:wstxns2='http://my.ns'>true</wstxns2:booleanA></wstxns1:test>\",\n+        \txml);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+    \n+    // manual 'test' to see \"what would JAXB do?\"\n+    /*\n+    public void testJAXB() throws Exception\n+    {\n+        StringWriter sw = new StringWriter();\n+        javax.xml.bind.JAXB.marshal(new StringListBean(\"a\", \"b\", \"c\"), sw);\n+        System.out.println(\"JAXB -> \"+sw);\n+    }\n+    */\n+}", "timestamp": 1332378174, "metainfo": ""}