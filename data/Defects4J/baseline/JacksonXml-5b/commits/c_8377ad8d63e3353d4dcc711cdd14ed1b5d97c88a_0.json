{"sha": "8377ad8d63e3353d4dcc711cdd14ed1b5d97c88a", "log": "Start 2.1 changes", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n         _xmlOutputFactory = xmlOut;\n     }\n \n+    /**\n+     * Note: compared to base implementation by {@link ObjectMapper},\n+     * here the copy will actually share underlying XML input and\n+     * output factories, as there is no way to make copies of those.\n+     * \n+     * @since 2.1\n+     */\n+    @Override\n+    public XmlFactory copy()\n+    {\n+        _checkInvalidCopy(XmlFactory.class);\n+        // note: as with base class, must NOT copy mapper reference\n+        // as to XML factories... must pass as-is, unfortunately?\n+        return new XmlFactory(_xmlInputFactory, _xmlOutputFactory);\n+    }\n+\n     @Override\n     public Version version() {\n         return ModuleVersion.instance.version();\n     /**********************************************************\n      */\n \n-    // @Override\n+    @Override\n     public ToXmlGenerator createGenerator(OutputStream out, JsonEncoding enc) throws IOException\n     {\n         // false -> we won't manage the stream unless explicitly directed to\n                 _objectCodec, _createXmlWriter(out));\n     }\n \n-    // @Override\n+    @Override\n     public ToXmlGenerator createGenerator(Writer out) throws IOException\n     {\n         return new ToXmlGenerator(_createContext(out, false),\n                 _objectCodec, _createXmlWriter(out));\n     }\n \n-    // @Override\n+    @Override\n     public ToXmlGenerator createGenerator(File f, JsonEncoding enc) throws IOException\n     {\n         OutputStream out = new FileOutputStream(f);\n     /**********************************************************\n      */\n \n-//  @Override\n+    @Override\n     protected FromXmlParser _createParser(InputStream in, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n         return _createJsonParser(in, ctxt);\n     }\n \n-//    @Override\n+    @Override\n     protected FromXmlParser _createParser(Reader r, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n         return _createJsonParser(r, ctxt);\n     }\n \n-//  @Override\n+    @Override\n     protected FromXmlParser _createParser(byte[] data, int offset, int len, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n             }\n             b = (byte) ch;\n             // If we did not get an LT, shouldn't be valid XML (minus encoding issues etc)\n-            if (b != BYTE_LT) {\n+           if (b != BYTE_LT) {\n                 return MatchStrength.NO_MATCH;\n             }\n         }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;\n+import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;\n import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n \n \n         this.registerModule(new JacksonXmlModule());\n     }\n \n+    // @since 2.1\n+    @Override\n+    public XmlMapper copy()\n+    {\n+        _checkInvalidCopy(XmlMapper.class);\n+        return new XmlMapper((XmlFactory) _jsonFactory.copy());\n+    }\n+    \n     @Override\n     public Version version() {\n         return ModuleVersion.instance.version();\n      */\n     @Override\n     protected PrettyPrinter _defaultPrettyPrinter() {\n-        return null; // new DefaultPrettyPrinter();\n+        return new DefaultXmlPrettyPrinter();\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestBinaryData.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestBinaryData.java\n     /**********************************************************\n      */\n \n-    private final XmlMapper MAPPER = new XmlMapper();\n+//    private final XmlMapper MAPPER = new XmlMapper();\n     \n     // for [https://github.com/FasterXML/jackson-dataformat-xml/issues/29]\n     public void testTwoBinaryProps() throws Exception\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestComplex.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestComplex.java\n         ObjectWriter w = MAPPER.writerWithType(MediaItem.class);\n         String xml = w.writeValueAsString(input);\n \n-//System.err.println(\"DEBUG: Xml == \"+xml);\n+System.err.println(\"DEBUG: Xml == \"+xml);\n \n         ObjectReader r = MAPPER.reader(MediaItem.class);\n         MediaItem result = r.readValue(xml);\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestVersions.java\n \n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.core.Versioned;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n \n      * Not a good to do this, but has to do, for now...\n      */\n     private final static int MAJOR_VERSION = 2;\n-    private final static int MINOR_VERSION = 0;\n+    private final static int MINOR_VERSION = 1;\n \n     // could inject using Maven filters as well...\n     private final static String GROUP_ID = \"com.fasterxml.jackson.dataformat\";\n         assertVersion(new XmlFactory());\n     }\n \n+    // @since 2.1\n+    // [Issue#28]: ObjectMapper.copy()\n+    public void testMapperCopy()\n+    {\n+        XmlMapper mapper1 = new XmlMapper();\n+        ObjectMapper mapper2 = mapper1.copy();\n+        assertNotSame(mapper1, mapper2);\n+        assertNotSame(mapper1.getJsonFactory(), mapper2.getJsonFactory());\n+        assertEquals(XmlFactory.class, mapper2.getJsonFactory().getClass());\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Helper methods\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/TestWithJAXBAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/TestWithJAXBAnnotations.java\n         person.lastName = \"Unit\";\n     \n         String json = _jaxbMapper.writeValueAsString(person);\n-        System.out.println(\"Person: \" + json);\n+// System.out.println(\"Person: \" + json);\n     \n         String expected = \"<Individual identifier=\\\"1\\\"><givenName>Jay</givenName>\"\n                 +\"<surName>Unit</surName></Individual>\";", "timestamp": 1344131290, "metainfo": ""}