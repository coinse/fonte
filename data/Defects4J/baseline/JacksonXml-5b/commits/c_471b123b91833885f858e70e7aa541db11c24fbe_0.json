{"sha": "471b123b91833885f858e70e7aa541db11c24fbe", "log": "Fixed #172 completely for 2.7.0-rc2", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlPrettyPrinter.java\n      */\n     public void writeEndElement(XMLStreamWriter2 sw, int nrOfEntries) throws XMLStreamException;\n \n+    /**\n+     * Method for trying to write a linefeed to separate entities outside of the\n+     * root element (that is, in prolog or epilog), most often called to separate\n+     * XML declaration from the root element.\n+     *\n+     * @since 2.7\n+     */\n+    public void writePrologLinefeed(XMLStreamWriter2 sw) throws XMLStreamException;\n+    \n     public void writeLeafElement(XMLStreamWriter2 sw,\n     \t\tString nsURI, String localName, String text, boolean isCData)\n         throws XMLStreamException;\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n      * {@link ToXmlGenerator.Feature}s\n      * are enabled.\n      */\n-    protected int _xmlFeatures;\n+    protected int _formatFeatures;\n \n     /**\n      * We may need to use XML-specific indentation as well\n     /**********************************************************\n      */\n \n-    public ToXmlGenerator(IOContext ctxt, int genericGeneratorFeatures, int xmlFeatures,\n+    public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures,\n             ObjectCodec codec, XMLStreamWriter sw)\n     {\n-        super(genericGeneratorFeatures, codec);\n-        _xmlFeatures = xmlFeatures;\n+        super(stdFeatures, codec);\n+        _formatFeatures = xmlFeatures;\n         _ioContext = ctxt;\n         _originalXmlWriter = sw;\n         _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw);\n         }\n         _initialized = true;\n         try {\n-            if ((_xmlFeatures & Feature.WRITE_XML_1_1.getMask()) != 0) {\n+            if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) {\n                 _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\");\n-            } else if ((_xmlFeatures & Feature.WRITE_XML_DECLARATION.getMask()) != 0) {\n+            } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) {\n                 _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\");\n+            } else {\n+                return;\n+            }\n+            // as per [dataformat-xml#172], try adding indentation\n+            if (_xmlPrettyPrinter != null) {\n+                // ... but only if it is likely to succeed:\n+                if (!_stax2Emulation) {\n+                    _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter);\n+                }\n             }\n         } catch (XMLStreamException e) {\n             StaxUtil.throwXmlAsIOException(e);\n      * default XML indenter instead.\n      *<p>\n      * !!! TODO: same as implementation in core 2.6; override may be\n-     * removed from 2.7\n+     * removed from 2.8\n      */\n     @Override\n     public final JsonGenerator useDefaultPrettyPrinter()\n         return -1;\n     }\n \n+    @Override\n+    public int getFormatFeatures() {\n+        return _formatFeatures;\n+    }\n+\n+    @Override // since 2.7\n+    public JsonGenerator overrideFormatFeatures(int values, int mask)\n+    {\n+        int oldF = _formatFeatures;\n+        int newF = (_formatFeatures & ~mask) | (values & mask);\n+\n+        if (oldF != newF) {\n+            _formatFeatures = newF;\n+        }\n+        return this;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Extended API, configuration\n      */\n \n     public ToXmlGenerator enable(Feature f) {\n-        _xmlFeatures |= f.getMask();\n+        _formatFeatures |= f.getMask();\n         return this;\n     }\n \n     public ToXmlGenerator disable(Feature f) {\n-        _xmlFeatures &= ~f.getMask();\n+        _formatFeatures &= ~f.getMask();\n         return this;\n     }\n \n     public final boolean isEnabled(Feature f) {\n-        return (_xmlFeatures & f.getMask()) != 0;\n+        return (_formatFeatures & f.getMask()) != 0;\n     }\n \n     public ToXmlGenerator configure(Feature f, boolean state) {\n      */\n \n     @Override\n-    public final void writeFieldName(String name)  throws IOException\n+    public final void writeFieldName(String name) throws IOException\n     {\n         if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) {\n             _reportError(\"Can not write a field name, expecting a value\");\n             // note: since attributes don't nest, can only have one attribute active, so:\n             _nextIsAttribute = false;\n             _xmlWriter.writeEndElement();\n+            // [databind-xml#172]: possibly also need indentation\n+            if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) {\n+                // ... but only if it is likely to succeed:\n+                if (!_stax2Emulation) {\n+                    _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter);\n+                }\n+            }\n         } catch (XMLStreamException e) {\n             StaxUtil.throwXmlAsIOException(e);\n         }\n     @Override\n     public void writeRaw(String text) throws IOException\n     {\n-        // [Issue#39]\n+        // [dataformat-xml#39]\n         if (_stax2Emulation) {\n             _reportUnimplementedStax2(\"writeRaw\");\n         }\n     @Override\n     public void writeRaw(String text, int offset, int len) throws IOException\n     {\n-        // [Issue#39]\n+        // [dataformat-xml#39]\n         if (_stax2Emulation) {\n             _reportUnimplementedStax2(\"writeRaw\");\n         }\n     @Override\n     public void writeRaw(char[] text, int offset, int len) throws IOException\n     {\n-        // [Issue#39]\n+        // [dataformat-xml#39]\n         if (_stax2Emulation) {\n             _reportUnimplementedStax2(\"writeRaw\");\n         }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n      */\n     public interface Indenter\n     {\n-        public void writeIndentation(JsonGenerator jg, int level)\n-            throws IOException, JsonGenerationException;\n-\n-        public void writeIndentation(XMLStreamWriter2 sw, int level)\n-            throws XMLStreamException;\n-        \n+        public void writeIndentation(JsonGenerator g, int level) throws IOException;\n+\n+        public void writeIndentation(XMLStreamWriter2 sw, int level) throws XMLStreamException;\n+\n         /**\n          * @return True if indenter is considered inline (does not add linefeeds),\n          *   false otherwise\n      */\n \n     @Override\n-    public void writeRootValueSeparator(JsonGenerator jgen) throws IOException, JsonGenerationException {\n+    public void writeRootValueSeparator(JsonGenerator gen) throws IOException {\n         // Not sure if this should ever be applicable; but if multiple roots were allowed, we'd use linefeed\n-        jgen.writeRaw('\\n');\n+        gen.writeRaw('\\n');\n     }\n     \n     /*\n      */\n     \n     @Override\n-    public void beforeArrayValues(JsonGenerator jgen) throws IOException, JsonGenerationException {\n+    public void beforeArrayValues(JsonGenerator gen) throws IOException {\n         // never called for ToXmlGenerator\n     }\n \n     @Override\n-    public void writeStartArray(JsonGenerator jgen)\n-    \t\tthrows IOException, JsonGenerationException\n-    {\n+    public void writeStartArray(JsonGenerator gen) throws IOException {\n         // anything to do here?\n     }\n \n     @Override\n-    public void writeArrayValueSeparator(JsonGenerator jgen)  throws IOException, JsonGenerationException {\n+    public void writeArrayValueSeparator(JsonGenerator gen)  throws IOException {\n         // never called for ToXmlGenerator\n     }\n \n     @Override\n-    public void writeEndArray(JsonGenerator jgen, int nrOfValues)\n-    \t\tthrows IOException, JsonGenerationException\n-    {\n+    public void writeEndArray(JsonGenerator gen, int nrOfValues) throws IOException {\n         // anything to do here?\n     }\n     \n      */\n \n     @Override\n-    public void beforeObjectEntries(JsonGenerator jgen)\n+    public void beforeObjectEntries(JsonGenerator gen)\n         throws IOException, JsonGenerationException\n     {\n         // never called for ToXmlGenerator\n     }\n \n     @Override\n-    public void writeStartObject(JsonGenerator jgen) throws IOException, JsonGenerationException\n+    public void writeStartObject(JsonGenerator gen) throws IOException\n     {\n         if (!_objectIndenter.isInline()) {\n             if (_nesting > 0) {\n-                _objectIndenter.writeIndentation(jgen, _nesting);\n+                _objectIndenter.writeIndentation(gen, _nesting);\n             }\n             ++_nesting;\n         }\n         _justHadStartElement = true;\n-        ((ToXmlGenerator) jgen)._handleStartObject();\n-    }\n-\n-    @Override\n-    public void writeObjectEntrySeparator(JsonGenerator jgen)\n-            throws IOException, JsonGenerationException\n-    {\n+        ((ToXmlGenerator) gen)._handleStartObject();\n+    }\n+\n+    @Override\n+    public void writeObjectEntrySeparator(JsonGenerator gen) throws IOException {\n         // never called for ToXmlGenerator\n     }\n \n     @Override\n-    public void writeObjectFieldValueSeparator(JsonGenerator jgen) throws IOException, JsonGenerationException {\n+    public void writeObjectFieldValueSeparator(JsonGenerator gen) throws IOException {\n         // never called for ToXmlGenerator\n     }\n     \n     @Override\n-    public void writeEndObject(JsonGenerator jgen, int nrOfEntries) throws IOException, JsonGenerationException\n+    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n     {\n         if (!_objectIndenter.isInline()) {\n             --_nesting;\n         if (_justHadStartElement) {\n             _justHadStartElement = false;\n         } else {\n-            _objectIndenter.writeIndentation(jgen, _nesting);\n-        }\n-        ((ToXmlGenerator) jgen)._handleEndObject();\n+            _objectIndenter.writeIndentation(gen, _nesting);\n+        }\n+        ((ToXmlGenerator) gen)._handleEndObject();\n     }\n     \n     /*\n         sw.writeEmptyElement(nsURI, localName);\n         _justHadStartElement = false;\n     }\n-    \n+\n+    @Override // since 2.7\n+    public void writePrologLinefeed(XMLStreamWriter2 sw) throws XMLStreamException\n+    {\n+        // 06-Dec-2015, tatu: Alternatively could try calling `writeSpace()`...\n+        sw.writeRaw(Lf2SpacesIndenter.SYSTEM_LINE_SEPARATOR);\n+    }\n+\n     /*\n     /**********************************************************\n     /* Helper classes\n         }\n         \n         @Override\n-        public void writeIndentation(JsonGenerator jg, int level)\n-            throws IOException, JsonGenerationException\n+        public void writeIndentation(JsonGenerator g, int level) throws IOException\n         {\n-            jg.writeRaw(' ');\n+            g.writeRaw(' ');\n         }\n \n         @Override\n         public boolean isInline() { return false; }\n \n         @Override\n-        public void writeIndentation(XMLStreamWriter2 sw, int level)\n-            throws XMLStreamException\n+        public void writeIndentation(XMLStreamWriter2 sw, int level) throws XMLStreamException\n         {\n             sw.writeRaw(SYSTEM_LINE_SEPARATOR);\n             level += level; // 2 spaces per level\n         }\n         \n         @Override\n-        public void writeIndentation(JsonGenerator jg, int level)\n-            throws IOException, JsonGenerationException\n+        public void writeIndentation(JsonGenerator jg, int level) throws IOException\n         {\n             jg.writeRaw(SYSTEM_LINE_SEPARATOR);\n             level += level; // 2 spaces per level\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n     /**********************************************************\n      */\n \n+    protected static String aposToQuotes(String json) {\n+        return json.replace(\"'\", \"\\\"\");\n+    }\n+\n     protected byte[] utf8Bytes(String str) {\n         try {\n             return str.getBytes(\"UTF-8\");\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/TextValueTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/TextValueTest.java\n     {\n         String xml = MAPPER.writeValueAsString(new Simple());\n         assertEquals(\"<Simple a=\\\"13\\\">something</Simple>\", xml);\n-        // [Issue#56]: should work with indentation as well\n+        // [dataformat-xml#56]: should work with indentation as well\n         xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(new Simple());\n-        assertEquals(\"<Simple a=\\\"13\\\">something</Simple>\", xml);\n+        assertEquals(\"<Simple a=\\\"13\\\">something</Simple>\\n\", xml);\n     }\n \n     public void testDeserializeAsText() throws IOException\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestIndentation.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestIndentation.java\n     /**********************************************************\n      */\n \n-    // Verify [JACKSON-444], Issue #1\n+    // Verify [dataformat-xml#1]\n     public void testSimpleStringBean() throws Exception\n     {\n         StringWrapperBean input = new StringWrapperBean(\"abc\");\n     public void testWithAttr() throws Exception\n     {\n         String xml = _xmlMapper.writeValueAsString(new AttrBean());\n-        assertEquals(\"<AttrBean count=\\\"3\\\"/>\", xml);\n+        assertEquals(\"<AttrBean count=\\\"3\\\"/>\\n\", xml);\n         String xml2 = _xmlMapper.writeValueAsString(new AttrBean2());\n-        assertEquals(\"<AttrBean2 count=\\\"3\\\">\\n  <value>14</value>\\n</AttrBean2>\", xml2);\n+        assertEquals(\"<AttrBean2 count=\\\"3\\\">\\n  <value>14</value>\\n</AttrBean2>\\n\", xml2);\n     }\n \n     public void testEmptyElem() throws Exception\n     {\n         PojoFor123 simple = new PojoFor123(\"foobar\");\n         String xml = _xmlMapper.writeValueAsString(simple);\n-        assertEquals(\"<PojoFor123 name=\\\"foobar\\\"/>\", xml);\n+        assertEquals(\"<PojoFor123 name=\\\"foobar\\\"/>\\n\", xml);\n     }\n \n     public void testMultiLevel172() throws Exception\n     {\n         Company root = new Company();\n         root.employee.add(new Employee(\"abc\"));\n-        String xml = _xmlMapper.writeValueAsString(root);\n-        assertEquals(\"<Company>\\n\"\n+        String xml = _xmlMapper.writer()\n+                .with(ToXmlGenerator.Feature.WRITE_XML_DECLARATION)\n+                .writeValueAsString(root);\n+        // unify possible apostrophes to quotes\n+        xml = aposToQuotes(xml);\n+        // with indentation, should get linefeeds in prolog/epilog too\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n+                +\"<Company>\\n\"\n                 +\"  <e>\\n\"\n                 +\"    <employee>\\n\"\n                 +\"      <id>abc</id>\\n\"\n                 +\"      <type>FULL_TIME</type>\\n\"\n                 +\"    </employee>\\n\"\n                 +\"  </e>\\n\"\n-                +\"</Company>\",\n+                +\"</Company>\\n\",\n                 xml);\n     }\n }", "timestamp": 1449439467, "metainfo": ""}