{"sha": "0bf40173692e5fc566f4e1307952c289bf788d17", "log": "add a failing test for #170", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n         this(new XmlFactory());\n     }\n \n-    /** @since 2.4 */\n+    /**\n+     * @since 2.4\n+     */\n     public XmlMapper(XMLInputFactory inputF, XMLOutputFactory outF) {\n         this(new XmlFactory(inputF, outF));\n     }\n \n-    /** @since 2.4 */\n+    /**\n+     * @since 2.4\n+     */\n     public XmlMapper(XMLInputFactory inputF) {\n         this(new XmlFactory(inputF));\n     }\n     protected void setXMLTextElementName(String name) {\n         ((XmlFactory) _jsonFactory).setXMLTextElementName(name);\n     }\n+\n     /**\n      * Since 2.7\n      */\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/DeserializePolyList178Test.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class DeserializePolyList178Test extends XmlTestBase\n+{\n+    static class Company {\n+        public List<Computer> computers;\n+\n+        public Company() {\n+            computers = new ArrayList<Computer>();\n+        }\n+\n+        public Company add(Computer computer) {\n+            if (computers == null) {\n+                computers = new ArrayList<Computer>();\n+            }\n+            computers.add(computer);\n+            return this;\n+        }\n+    }\n+\n+// 02-Jan-2015, tatu: Does not seem to matter; was included in the original reproduction\n+//    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME,\n+            include = JsonTypeInfo.As.WRAPPER_OBJECT,\n+            property = \"type\")\n+    @JsonSubTypes({\n+            @JsonSubTypes.Type(value = DesktopComputer.class, name = \"desktop\"),\n+            @JsonSubTypes.Type(value = LaptopComputer.class, name = \"laptop\")\n+    })\n+    static class Computer {\n+        public String id;\n+    }\n+\n+    @JsonTypeName(\"desktop\")\n+    static class DesktopComputer extends Computer {\n+        public String location;\n+\n+        protected DesktopComputer() { }\n+        public DesktopComputer with(String id0, String l) {\n+            id = id0;\n+            location = l;\n+            return this;\n+        }\n+    }\n+\n+    @JsonTypeName(\"laptop\")\n+    static class LaptopComputer extends Computer {\n+        public String vendor;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    \n+    // for [dataformat-xml#178]\n+    public void testPolyIdList178() throws Exception\n+    {\n+        Company input = new Company();\n+        input.add(new DesktopComputer().with(\"1\", \"http://foo.com\"));\n+        input.add(new DesktopComputer().with(\"2\", \"http://bar.com\"));\n+        String xml = MAPPER.writerWithDefaultPrettyPrinter()\n+                .writeValueAsString(input);\n+//System.out.println(\"XML:\\n\"+xml);\n+\n+        Company result = MAPPER.readValue(xml, Company.class);\n+        assertNotNull(result.computers);\n+        assertEquals(2, result.computers.size());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JAXBObjectId170Test.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+import com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector;\n+\n+public class JAXBObjectId170Test extends XmlTestBase\n+{\n+    static class Company {\n+        public List<Computer> computers;\n+        public List<Employee> employees;\n+        \n+        public Company() {\n+            computers = new ArrayList<Computer>();\n+        }\n+\n+        public Company add(Computer computer) {\n+            if (computers == null) {\n+                computers = new ArrayList<Computer>();\n+            }\n+            computers.add(computer);\n+            return this;\n+        }\n+    }\n+\n+    @XmlType(name = \"employee\")\n+    @XmlAccessorType(XmlAccessType.FIELD)\n+    static class Employee {\n+      @XmlAttribute\n+      @XmlID\n+      public String id;\n+\n+      @XmlAttribute\n+      public String name;\n+\n+      @XmlIDREF\n+      public Computer computer;\n+    }\n+\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME,\n+            include = JsonTypeInfo.As.WRAPPER_OBJECT,\n+            property = \"type\")\n+    @JsonSubTypes({\n+            @JsonSubTypes.Type(value = DesktopComputer.class, name = \"desktop\"),\n+            @JsonSubTypes.Type(value = LaptopComputer.class, name = \"laptop\")\n+    })\n+    static class Computer {\n+        public String id;\n+    }\n+\n+    static class DesktopComputer extends Computer {\n+        public String location;\n+\n+        protected DesktopComputer() { }\n+        public DesktopComputer with(String id0, String l) {\n+            id = id0;\n+            location = l;\n+            return this;\n+        }\n+    }\n+\n+    static class LaptopComputer extends Computer {\n+        public String vendor;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    // for [dataformat-xml#178]\n+    public void testPolyIdList178() throws Exception\n+    {\n+        final String XML =\n+\"<company>\\n\"+\n+\"<computers>\\n\"+\n+\"    <computers>\\n\"+\n+\"      <desktop id='computer-1'>\\n\"+\n+\"        <location>Bangkok</location>\\n\"+\n+\"      </desktop>\\n\"+\n+\"    </computers>\\n\"+\n+\"    <computers>\\n\"+\n+\"      <desktop id='computer-2'>\\n\"+\n+\"        <location>Pattaya</location>\\n\"+\n+\"      </desktop>\\n\"+\n+\"    </computers>\\n\"+\n+\"    <computers>\\n\"+\n+\"      <laptop id='computer-3'>\\n\"+\n+\"        <vendor>Apple</vendor>\\n\"+\n+\"      </laptop>\\n\"+\n+\"    </computers>\\n\"+\n+\"  </computers>\\n\"+\n+\"  <employees>\\n\"+\n+\"    <employee id='emp-1' name='Robert Patrick'>\\n\"+\n+\"      <computer>computer-3</computer>\\n\"+\n+\"    </employee>\\n\"+\n+\"    <employee id='emp-2' name='Michael Smith'>\\n\"+\n+\"      <computer>computer-2</computer>\\n\"+\n+\"    </employee>\\n\"+\n+\"  </employees>\\n\"+\n+\"</company>\\n\"\n+                ;\n+\n+        XmlMapper mapper = new XmlMapper();\n+        AnnotationIntrospector intr = XmlAnnotationIntrospector.Pair.instance\n+                (new XmlJaxbAnnotationIntrospector(mapper.getTypeFactory()), new JacksonAnnotationIntrospector());\n+        mapper.setAnnotationIntrospector(intr);\n+        // should be default but doesn't seem to be?\n+        mapper.setDefaultUseWrapper(true);\n+\n+        Company result = mapper.readValue(XML, Company.class);\n+        assertNotNull(result);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListDeserializationTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListDeserializationTest.java\n         assertEquals(Integer.valueOf(3), bean.values.get(2));\n     }\n \n-    // for [Issue#33]\n+    // for [dataformat-xml#33]\n     public void testWrappedListWithAttribute() throws Exception\n     {\n         ListBeanWrapped bean = MAPPER.readValue(", "timestamp": 1451799329, "metainfo": ""}