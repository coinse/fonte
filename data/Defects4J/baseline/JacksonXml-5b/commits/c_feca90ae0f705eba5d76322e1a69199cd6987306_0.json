{"sha": "feca90ae0f705eba5d76322e1a69199cd6987306", "log": "Merge pull request #31 from simonetripodi/master  Parent update", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n \n                 QName wrappedName = new QName(ns, bpw.getName());\n                 QName wrapperName = AnnotationUtil.findWrapperName(intr, member);\n+                \n                 if (wrapperName != null) {\n                     localName = wrapperName.getLocalPart();\n                     wrapperNs = wrapperName.getNamespaceURI();\n                 }\n-                /* Empty/missing localName means \"use property name as wrapper\"; later on\n-                 * should probably make missing (null) mean \"don't add a wrapper\"\n+                /* 21-Aug-2012, tatu: Missing localName means \"use property name as wrapper\",\n+                 *   empty \"no wrapper\"\n                  */\n-                if (localName == null || localName.length() == 0) {\n+                if (localName == null) {\n                     wrapperName = wrappedName;\n+                } else if (localName.length() == 0) {\n+                    // Empty wrapper name is explicit \"DO NOT wrap\" Lists indicator, so:\n+                    continue;\n                 } else {\n                     wrapperName = new QName((wrapperNs == null) ? \"\" : wrapperNs, localName);\n                 }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestConflictingGetters.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class TestConflictingGetters extends XmlTestBase\n+{\n+    @JacksonXmlRootElement(localName = \"output\")\n+    static class Bean {\n+        public BeanInfo[] beanInfo;\n+        public BeanInfo[] beanOther;\n+\n+        @JacksonXmlElementWrapper(localName = \"beanInfo\")\n+        @JacksonXmlProperty(localName = \"item\")\n+        public BeanInfo[] getBeanInfo() {\n+            return beanInfo;\n+        }\n+\n+        public void setBeanInfo(BeanInfo[] beanInfo) {\n+            this.beanInfo = beanInfo;\n+        }\n+\n+        @JacksonXmlElementWrapper(localName = \"beanOther\")\n+        @JacksonXmlProperty(localName = \"item\")\n+        public BeanInfo[] getBeanOther() {\n+            return beanOther;\n+        }\n+\n+        public void setBeanOther(BeanInfo[] beanOther) {\n+            this.beanOther = beanOther;\n+        }\n+    }    \n+    static class BeanInfo {\n+        public String name;\n+\n+        public BeanInfo() { }\n+        public BeanInfo(String n) { name = n; }\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    public void testIssue27() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+\n+        Bean bean = new Bean();\n+        BeanInfo beanInfo = new BeanInfo(\"name\");\n+        BeanInfo beanOther = new BeanInfo(\"name\");\n+        bean.setBeanInfo(new BeanInfo[] { beanInfo });\n+        bean.setBeanOther(new BeanInfo[] { beanOther });\n+\n+        String json = mapper.writeValueAsString(bean);\n+        assertNotNull(json);\n+//        System.out.println(output);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestUnwrappedLists.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import java.io.*;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.annotation.*;\n+\n+import com.fasterxml.jackson.annotation.JsonRootName;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class TestUnwrappedLists extends XmlTestBase\n+{\n+    static class Value {\n+        public String v;\n+\n+        public Value() { }\n+        public Value(String str) { v = str; }\n+    }\n+\n+    @XmlRootElement(name=\"list\")\n+    @JsonRootName(\"list\")\n+    static class WrappedList {\n+        @XmlElementWrapper(name=\"WRAP\")\n+        @JacksonXmlElementWrapper(localName = \"WRAP\")\n+        public Value[] value;\n+    }\n+\n+    @XmlRootElement(name=\"list\")\n+    @JsonRootName(\"list\")\n+    static class UnwrappedList {\n+//        @XmlElementWrapper(name=\"\")\n+        @JacksonXmlElementWrapper(localName = \"\")\n+        public Value[] value;\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    public void testWrappedLists() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        WrappedList list = new WrappedList();\n+        list.value = new Value[] { new Value(\"a\"), new Value(\"b\") };\n+\n+        // First, serialize:\n+        \n+        String json = mapper.writeValueAsString(list);\n+//      withJAXB(list);\n+        assertEquals(\"<list><WRAP><value><v>a</v></value><value><v>b</v></value></WRAP></list>\", json);\n+\n+        // then deserialize back\n+        WrappedList output = mapper.readValue(json, WrappedList.class);\n+        assertNotNull(output);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+    }\n+    \n+    public void testUnwrappedLists() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        UnwrappedList list = new UnwrappedList();\n+        list.value = new Value[] { new Value(\"c\"), new Value(\"d\") };\n+\n+        String json = mapper.writeValueAsString(list);\n+        \n+        System.out.println(\"Unwrapped == \"+json);\n+//        withJAXB(list);\n+        assertEquals(\"<list><value><v>c</v></value><value><v>d</v></value></list>\", json);\n+\n+        // then deserialize back\n+        UnwrappedList output = mapper.readValue(json, UnwrappedList.class);\n+        assertNotNull(output);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+    \n+    }\n+\n+    void withJAXB(Object ob) throws Exception\n+    {\n+        JAXBContext jc = JAXBContext.newInstance(ob.getClass());\n+        Marshaller m = jc.createMarshaller();\n+        System.out.print(\"JAXB      -> \");\n+        StringWriter sw = new StringWriter();\n+        m.marshal(ob, sw);\n+        String xml = sw.toString();\n+        if (xml.indexOf(\"<?xml\") == 0) {\n+            xml = xml.substring(xml.indexOf(\"?>\")+2);\n+        }\n+        System.out.println(xml);\n+\n+   }\n+}", "timestamp": 1345659886, "metainfo": ""}