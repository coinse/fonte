{"sha": "662d9d47a69c6c37f8cee6a9b953867c53dd2a1e", "log": "Add support for FormatFeature", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n import com.fasterxml.jackson.core.format.MatchStrength;\n import com.fasterxml.jackson.core.io.IOContext;\n import com.fasterxml.jackson.core.util.VersionUtil;\n+\n import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n import com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n */\n public class XmlFactory extends JsonFactory\n {\n-    // For 2.5:\n-    private static final long serialVersionUID = 1897624416641000209L;\n+    private static final long serialVersionUID = 1; // 2.6\n \n     /**\n      * Name used to identify XML format\n \n     /*\n     /**********************************************************\n-    /* Capability overrides\n-    /**********************************************************\n-     */\n-    \n+    /* Capability introspection\n+    /**********************************************************\n+     */\n+\n     /**\n      * As of 2.4, we do have actual capability for passing char arrays\n      * efficiently, but unfortunately\n      */\n     @Override\n     public boolean canUseCharArrays() { return false; }\n+\n+    @Override // since 2.6\n+    public Class<FromXmlParser.Feature> getFormatReadFeatureType() {\n+        return FromXmlParser.Feature.class;\n+    }\n+\n+    @Override // since 2.6\n+    public Class<ToXmlGenerator.Feature> getFormatWriteFeatureType() {\n+        return ToXmlGenerator.Feature.class;\n+    }\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n     public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";\n     \n     /**\n-     * Enumeration that defines all togglable features for XML parsers\n-     */\n-    public enum Feature {\n+     * Enumeration that defines all togglable features for XML parsers.\n+     * None defined so far (2.6), so just a placeholder.\n+     */\n+    public enum Feature implements FormatFeature\n+    {\n         ;\n \n         final boolean _defaultState;\n             _defaultState = defaultState;\n             _mask = (1 << ordinal());\n         }\n-        \n-        public boolean enabledByDefault() { return _defaultState; }\n-        public int getMask() { return _mask; }\n+\n+        @Override public boolean enabledByDefault() { return _defaultState; }\n+        @Override public int getMask() { return _mask; }\n+        @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\n     }\n \n     /**\n      * {@link FromXmlParser.Feature}s\n      * are enabled.\n      */\n-    protected int _xmlFeatures;\n-    \n+    protected int _formatFeatures;\n+\n     protected ObjectCodec _objectCodec;\n \n     /*\n      * ({@link #close}) or when end-of-input is reached.\n      */\n     protected boolean _closed;\n-    \n+\n     final protected IOContext _ioContext;\n \n     /*\n             ObjectCodec codec, XMLStreamReader xmlReader)\n     {\n         super(genericParserFeatures);\n-        _xmlFeatures = xmlFeatures;\n+        _formatFeatures = xmlFeatures;\n         _ioContext = ctxt;\n         _objectCodec = codec;\n         _parsingContext = XmlReadContext.createRootContext(-1, -1);\n      */\n \n     public FromXmlParser enable(Feature f) {\n-        _xmlFeatures |= f.getMask();\n+        _formatFeatures |= f.getMask();\n         return this;\n     }\n \n     public FromXmlParser disable(Feature f) {\n-        _xmlFeatures &= ~f.getMask();\n+        _formatFeatures &= ~f.getMask();\n         return this;\n     }\n \n     public final boolean isEnabled(Feature f) {\n-        return (_xmlFeatures & f.getMask()) != 0;\n+        return (_formatFeatures & f.getMask()) != 0;\n     }\n \n     public FromXmlParser configure(Feature f, boolean state) {\n         } else {\n             disable(f);\n         }\n+        return this;\n+    }\n+\n+    /*                                                                                       \n+    /**********************************************************                              \n+    /* FormatFeature support                                                                             \n+    /**********************************************************                              \n+     */\n+\n+    @Override\n+    public int getFormatFeatures() {\n+        return _formatFeatures;\n+    }\n+\n+    @Override\n+    public JsonParser overrideFormatFeatures(int values, int mask) {\n+        _formatFeatures = (_formatFeatures & ~mask) | (values & mask);\n         return this;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n     /**\n      * Enumeration that defines all togglable extra XML-specific features\n      */\n-    public enum Feature {\n+    public enum Feature implements FormatFeature\n+    {\n         /**\n          * Feature that controls whether XML declaration should be written before\n          * when generator is initialized (true) or not (false)\n             _mask = (1 << ordinal());\n         }\n \n-        public boolean enabledByDefault() { return _defaultState; }\n-        public int getMask() { return _mask; }\n+        @Override public boolean enabledByDefault() { return _defaultState; }\n+        @Override public int getMask() { return _mask; }\n+        @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\n     }\n \n     /*", "timestamp": 1432793593, "metainfo": ""}