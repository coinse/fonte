{"sha": "4b9b1b037059855f5d4bf19f7c96de29408725b1", "log": "warnings cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java\n             return encodeXmlClassName(super.idFromValue(value));\n         }\n \n+        @SuppressWarnings(\"deprecation\")\n         @Override\n         public JavaType typeFromId(String id) {\n             return super.typeFromId(decodeXmlClassName(id));\n             return encodeXmlClassName(super.idFromValue(value));\n         }\n \n+        @SuppressWarnings(\"deprecation\")\n         @Override\n         public JavaType typeFromId(String id) {\n             return super.typeFromId(decodeXmlClassName(id));\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestXmlText.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestXmlText.java\n \n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.JsonInclude.Include;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText;\n \n-public class TestXmlText extends XmlTestBase{\n+public class TestXmlText extends XmlTestBase\n+{\n     @JsonPropertyOrder({\"first\",\"second\"})\n     class Data{\n         @JacksonXmlText\n             this.second = second;\n         }\n     }\n-    \n-    private final XmlMapper MAPPER = new XmlMapper();\n-    { // easier for eye, uncomment for testing\n-//        MAPPER.enable(SerializationFeature.INDENT_OUTPUT);\n-    }\n-    \n-    public void testXmlTextWithSuppressedValue() throws Exception {\n-        MAPPER.setSerializationInclusion(Include.NON_EMPTY);\n-        String xml = MAPPER.writeValueAsString(new Data(\"\",\"second\"));\n+\n+    public void testXmlTextWithSuppressedValue() throws Exception\n+    {\n+        final XmlMapper mapper = new XmlMapper();\n+        mapper.setSerializationInclusion(Include.NON_EMPTY);\n+        String xml = mapper.writeValueAsString(new Data(\"\",\"second\"));\n         String expectedXml = \"<Data><second>second</second></Data>\";\n         assertEquals(expectedXml, xml);\n     }", "timestamp": 1388030207, "metainfo": ""}