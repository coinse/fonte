{"sha": "54d6421f4a45248da246f64f802cd00f2b8789a9", "log": "rearranging test hierarchy...", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ObjectId104Test.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n+\n+/**\n+ * Unit test to showcase issue #104, based on TestObjectIdDeserialization unit test in databind package.\n+ */\n+public class ObjectId104Test extends XmlTestBase {\n+    // // Classes for external id from property annotations:\n+    \n+    static class IdWrapper\n+    {\n+        @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")\n+        public ValueNode node;\n+\n+        public IdWrapper() { }\n+        public IdWrapper(int v) {\n+            node = new ValueNode(v);\n+        }\n+    }\n+\n+    static class ValueNode {\n+        public List<Integer> value= new ArrayList<Integer>();\n+        public IdWrapper next;\n+        \n+        public ValueNode() { this(0); }\n+        public ValueNode(int v) { value.add(v); }\n+    }\n+    \n+    private final XmlMapper MAPPER = new XmlMapper();\n+    \n+    // Another test to ensure ordering is not required (i.e. can do front references)\n+    public void testSimpleCollectionDeserWithForwardRefs() throws Exception\n+    {\n+        IdWrapper result = MAPPER.readValue(\"<IdWrapper><node><value><value>7</value></value><next><node>1</node></next><id>1</id></node></IdWrapper>\"\n+                ,IdWrapper.class);\n+        assertEquals(7, (int)result.node.value.get(0));\n+        assertSame(result.node, result.node.next.node);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n     /**\n      * Sample class from Jackson tutorial (\"JacksonInFiveMinutes\")\n      */\n-    protected static class FiveMinuteUser {\n+    public static class FiveMinuteUser {\n         public enum Gender { MALE, FEMALE };\n \n         public static class Name\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/TestBinaryData.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class TestBinaryData extends XmlTestBase\n+{\n+    public static class Data {\n+        public byte[] bytes;\n+    }\n+\n+    public static class TwoData {\n+        public Data data1;\n+        public Data data2;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+//    private final XmlMapper MAPPER = new XmlMapper();\n+    \n+    // for [https://github.com/FasterXML/jackson-dataformat-xml/issues/29]\n+    public void testTwoBinaryProps() throws Exception\n+    {\n+        /* Hmmh. Looks like XmlMapper has some issues with convertValue:\n+         * should investigate at some point. But not now...\n+         */\n+        final ObjectMapper jsonMapper = new ObjectMapper();\n+        String BIN1 = jsonMapper.convertValue(\"Hello\".getBytes(\"UTF-8\"), String.class);\n+        String BIN2 = jsonMapper.convertValue(\"world!!\".getBytes(\"UTF-8\"), String.class);\n+        String xml = \n+            \"<TwoData>\" +\n+                    \"<data1><bytes>\" + BIN1 + \"</bytes></data1>\" +\n+                    \"<data2><bytes>\" + BIN2 + \"</bytes></data2>\" +\n+            \"</TwoData>\";\n+\n+        TwoData two = new XmlMapper().readValue(xml, TwoData.class);\n+        assertEquals(\"Hello\", new String(two.data1.bytes, \"UTF-8\"));\n+        assertEquals(\"world!!\", new String(two.data2.bytes, \"UTF-8\"));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/TestDeserialization.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText;\n+\n+public class TestDeserialization extends XmlTestBase\n+{\n+    static class AttributeBean\n+    {\n+        @JacksonXmlProperty(isAttribute=true, localName=\"attr\")\n+        public String text = \"?\";\n+    }\n+\n+    static class Optional {\n+        @JacksonXmlText\n+        public String number = \"NOT SET\";\n+        public String type = \"NOT SET\";\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    \n+    /**\n+     * Unit test to ensure that we can successfully also round trip\n+     * example Bean used in Jackson tutorial\n+     */\n+    public void testRoundTripWithJacksonExample() throws Exception\n+    {\n+        FiveMinuteUser user = new FiveMinuteUser(\"Joe\", \"Sixpack\",\n+                true, FiveMinuteUser.Gender.MALE, new byte[] { 1, 2, 3 , 4, 5 });\n+        String xml = MAPPER.writeValueAsString(user);\n+        FiveMinuteUser result = MAPPER.readValue(xml, FiveMinuteUser.class);\n+        assertEquals(user, result);\n+    }\n+\n+    public void testFromAttribute() throws Exception\n+    {\n+        AttributeBean bean = MAPPER.readValue(\"<AttributeBean attr=\\\"abc\\\"></AttributeBean>\", AttributeBean.class);\n+        assertNotNull(bean);\n+        assertEquals(\"abc\", bean.text);\n+    }\n+    \n+    // [Issue#14]\n+    public void testMapWithAttr() throws Exception\n+    {\n+        final String xml = \"<order><person lang='en'>John Smith</person></order>\";\n+        Map<?,?> map = MAPPER.readValue(xml, Map.class);\n+    \t\n+    \t// Will result in equivalent of:\n+    \t// { \"person\" : {\n+    \t//     \"lang\" : \"en\",\n+    \t//     \"\" : \"John Smith\"\n+    \t//   }\n+    \t// }\n+    \t//\n+    \t// which may or may not be what we want. Without attribute\n+    \t// we would just have '{ \"person\" : \"John Smith\" }'\n+    \t\n+    \t    assertNotNull(map);\n+    }\n+\n+    // // Tests for [Issue#64]\n+\n+    public void testOptionalAttr() throws Exception\n+    {\n+        Optional ob = MAPPER.readValue(\"<Optional type='work'>123-456-7890</Optional>\",\n+                Optional.class);\n+        assertNotNull(ob);\n+        assertEquals(\"123-456-7890\", ob.number);\n+        assertEquals(\"work\", ob.type);\n+    }\n+\n+    public void testMissingOptionalAttr() throws Exception\n+    {\n+        Optional ob = MAPPER.readValue(\"<Optional>123-456-7890</Optional>\",\n+                Optional.class);\n+        assertNotNull(ob);\n+        assertEquals(\"123-456-7890\", ob.number);\n+        assertEquals(\"NOT SET\", ob.type);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/TestEnums.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class TestEnums extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    static enum TestEnum { A, B, C; }\n+\n+    static class EnumBean\n+    {\n+        public TestEnum value;\n+\n+        public EnumBean() { }\n+        public EnumBean(TestEnum v) { value = v; }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testEnum() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        String str = mapper.writeValueAsString(new EnumBean(TestEnum.B));\n+        EnumBean result = mapper.readValue(str, EnumBean.class);\n+        assertNotNull(result);\n+        assertEquals(TestEnum.B, result.value);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/TestStringValues.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class TestStringValues extends XmlTestBase\n+{\n+    protected static class Bean2\n+    {\n+        public String a, b;\n+\n+        @Override\n+        public String toString() {\n+            return \"[a=\"+a+\",b=\"+b+\"]\";\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    \n+    public void testSimpleStringElement() throws Exception\n+    {\n+        // first, simple one to verify baseline\n+        StringBean bean = MAPPER.readValue(\"<StringBean><text>text!</text></StringBean>\", StringBean.class);\n+        assertNotNull(bean);\n+        assertEquals(\"text!\", bean.text);\n+    }\n+    \n+    public void testEmptyStringElement() throws Exception\n+    {\n+        // then with empty element\n+        StringBean bean = MAPPER.readValue(\"<StringBean><text></text></StringBean>\", StringBean.class);\n+        assertNotNull(bean);\n+        // empty String or null?\n+        // 22-Sep-2012, tatu: Seems to be 'null', but should probably be fixed to \"\"\n+//        assertEquals(\"\", bean.text);\n+        assertNull(bean.text);\n+    }\n+    \n+    public void testMissingString() throws Exception\n+    {\n+        StringBean baseline = new StringBean();\n+        // then missing\n+        StringBean bean = MAPPER.readValue(\"<StringBean />\", StringBean.class);\n+        assertNotNull(bean);\n+        assertEquals(baseline.text, bean.text);\n+    }\n+\n+    public void testStringWithAttribute() throws Exception\n+    {\n+        // and then the money shot: with 'standard' attribute...\n+        StringBean bean = MAPPER.readValue(\"<StringBean><text xml:lang='fi'>Pulla</text></StringBean>\", StringBean.class);\n+        assertNotNull(bean);\n+        assertEquals(\"Pulla\", bean.text);\n+    }\n+\n+    public void testStringsWithAttribute() throws Exception\n+    {\n+        Bean2 bean = MAPPER.readValue(\n+                \"<Bean2>\\n\"\n+                +\"<a xml:lang='fi'>abc</a>\"\n+                +\"<b xml:lang='en'>def</b>\"\n+//                +\"<a>abc</a><b>def</b>\"\n+                +\"</Bean2>\\n\",\n+                Bean2.class);\n+        assertNotNull(bean);\n+        assertEquals(\"abc\", bean.a);\n+        assertEquals(\"def\", bean.b);\n+    }\n+    \n+    public void testStringArrayWithAttribute() throws Exception\n+    {\n+        // should even work for arrays of those\n+        StringBean[] beans = MAPPER.readValue(\n+                \"<StringBean>\\n\"\n+                +\"<StringBean><text xml:lang='fi'>Pulla</text></StringBean>\"\n+                +\"<StringBean><text xml:lang='se'>Bulla</text></StringBean>\"\n+                +\"<StringBean><text xml:lang='en'>Good stuff</text></StringBean>\"\n+                +\"</StringBean>\",\n+                StringBean[].class);\n+        assertNotNull(beans);\n+        assertEquals(3, beans.length);\n+        assertEquals(\"Pulla\", beans[0].text);\n+        assertEquals(\"Bulla\", beans[1].text);\n+        assertEquals(\"Good stuff\", beans[2].text);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/TestViews.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.ser.FilterProvider;\n+import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;\n+import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+/*\n+ * Tests for ('JSON') Views, other filtering.\n+ */\n+public class TestViews extends XmlTestBase\n+{\n+    static class RestrictedView { };\n+\n+    static class Foo\n+    {\n+        @JsonView(RestrictedView.class)\n+        @JsonProperty\n+        public String restrictedFooProperty;\n+\n+        @JsonView(RestrictedView.class)\n+        @JsonProperty\n+        public Bar[] bars;\n+    }\n+\n+    static class Bar\n+    {\n+        @JsonView(RestrictedView.class)\n+        @JsonProperty\n+        public int restrictedBarProperty;\n+    }\n+\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    static class NonNullBean\n+    {\n+        public String nullName = null;\n+        public String name = \"Bob\";\n+    }\n+\n+    @JsonFilter(\"filter44\")\n+    public class Issue44Bean {\n+        @JacksonXmlProperty(isAttribute=true)\n+        protected String first = \"abc\";\n+\n+        public int second = 13;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Set up\n+    /**********************************************************\n+     */\n+\n+    protected XmlMapper _xmlMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        _xmlMapper = new XmlMapper();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+    \n+    public void testIssue7() throws Exception\n+    {\n+        Foo foo = new Foo();\n+        foo.restrictedFooProperty = \"test\";\n+\n+        Bar bar1 = new Bar();\n+        bar1.restrictedBarProperty = 10;\n+\n+        Bar bar2 = new Bar();\n+        bar2.restrictedBarProperty = 11;\n+\n+        foo.bars = new Bar[] { bar1, bar2 };\n+\n+        ObjectMapper xmlMapper = new XmlMapper();\n+\n+        xmlMapper.configure(MapperFeature.AUTO_DETECT_FIELDS, false );\n+        xmlMapper.configure(MapperFeature.AUTO_DETECT_GETTERS, false );\n+        xmlMapper.configure(MapperFeature.AUTO_DETECT_IS_GETTERS, false );\n+        xmlMapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false );\n+\n+        String xml = xmlMapper.writerWithView(RestrictedView.class).writeValueAsString(foo);\n+        \n+        // views not used for deserialization\n+        Foo result = xmlMapper.readValue(xml, Foo.class);\n+        assertEquals(\"test\", result.restrictedFooProperty);\n+        assertNotNull(result.bars);\n+        assertEquals(2, result.bars.length);\n+        assertEquals(10, result.bars[0].restrictedBarProperty);\n+        assertEquals(11, result.bars[1].restrictedBarProperty);\n+        \n+    }\n+\n+    public void testNullSuppression() throws Exception\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new NonNullBean());\n+        assertEquals(\"<NonNullBean><name>Bob</name></NonNullBean>\", xml);\n+    }\n+\n+    public void testIssue44() throws IOException\n+    {\n+        String exp = \"<Issue44Bean first=\\\"abc\\\"><second>13</second></Issue44Bean>\";\n+        Issue44Bean bean = new Issue44Bean();\n+\n+        FilterProvider prov = new SimpleFilterProvider().addFilter(\"filter44\",\n+                SimpleBeanPropertyFilter.serializeAllExcept(\"filterMe\"));\n+        ObjectWriter writer = _xmlMapper.writer(prov);\n+\n+        // as well as with proper filter\n+        assertEquals(exp, writer.writeValueAsString(bean));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/Issue101UnwrappedListAttributesTest.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+// Failing unit test(s) wrt [Issue#64]\n+public class Issue101UnwrappedListAttributesTest extends XmlTestBase\n+{\n+    static class Optional {\n+        @JacksonXmlText\n+        public String number = \"NOT SET\";\n+\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String type = \"NOT SET\";\n+\n+        public Optional() { }\n+        \n+        // uncommenting this ALSO works:\n+//        public Optional(String n) { number = n; }\n+    }\n+\n+    static class Optionals {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Optional> optional;\n+    } \n+\n+    // For [Issue#101]\n+    @JacksonXmlRootElement(localName = \"root\")    \n+    @JsonPropertyOrder({ \"unwrapped\", \"name\" })\n+    static class Root {\n+        @JacksonXmlProperty(localName = \"unwrapped\")\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<UnwrappedElement> unwrapped;\n+\n+        public String name;\n+    }\n+\n+     static class UnwrappedElement {\n+        public UnwrappedElement () {}\n+\n+        public UnwrappedElement (String id, String type) {\n+            this.id = id;\n+            this.type = type;\n+        }\n+\n+        @JacksonXmlProperty(isAttribute = true)\n+        public String id;\n+\n+        @JacksonXmlProperty(isAttribute = true)\n+        public String type;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n+    // // [Issue#64]\n+    public void testOptionalsWithMissingType() throws Exception\n+    {\n+//        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>\",\n+        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional>123-456-7890</optional></MultiOptional>\",\n+                Optionals.class);\n+        assertNotNull(ob);\n+        assertNotNull(ob.optional);\n+        assertEquals(1, ob.optional.size());\n+\n+//            System.err.println(\"ob: \" + ob); // works fine\n+\n+        Optional opt = ob.optional.get(0);\n+        assertEquals(\"123-456-7890\", opt.number);\n+        assertEquals(\"NOT SET\", opt.type);\n+    }\n+\n+    // [Issue#101]\n+    public void testWithTwoAttributes() throws Exception\n+    {\n+        final String EXP = \"<root>\"\n+                +\"<unwrapped id=\\\"1\\\" type=\\\"string\\\"/>\"\n+                +\"<unwrapped id=\\\"2\\\" type=\\\"string\\\"/>\"\n+                +\"<name>test</name>\"\n+                +\"</root>\";\n+        Root rootOb = new Root();\n+        rootOb.unwrapped = Arrays.asList(\n+                new UnwrappedElement(\"1\", \"string\"),\n+                new UnwrappedElement(\"2\", \"string\")\n+        );\n+        rootOb.name = \"test\";\n+\n+        // First, serialize, which works\n+        String xml = MAPPER.writeValueAsString(rootOb);\n+        assertEquals(EXP, xml);\n+\n+        // then try deserialize\n+        Root result = MAPPER.readValue(xml, Root.class);\n+        assertNotNull(result);\n+        assertEquals(rootOb.name, result.name);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/Issue37AdapterTest.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.*;\n+import java.util.*;\n+\n+import javax.xml.bind.annotation.*;\n+import javax.xml.bind.annotation.adapters.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.dataformat.xml.*;\n+import com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector;\n+\n+public class Issue37AdapterTest extends XmlTestBase\n+{\n+    @XmlJavaTypeAdapter(URLEncoderMapDataAdapter.class)\n+    public static class MapData\n+    {\n+        public String key;\n+        public String value;\n+\n+        public MapData() { }\n+\n+        public MapData(String key, String value) {\n+            super();\n+            this.key = key;\n+            this.value = value;\n+        }\n+    }\n+\n+    public static class URLEncoderMapDataAdapter extends XmlAdapter<MapData[], Map<String, String>>\n+    {\n+        public URLEncoderMapDataAdapter() { }\n+\n+        @Override\n+        public MapData[] marshal(Map<String, String> arg0) throws Exception {\n+            MapData[] mapElements = new MapData[arg0.size()];\n+            int i = 0;\n+            for (Map.Entry<String, String> entry : arg0.entrySet()) {\n+                mapElements[i++] = new MapData(encodeKey(entry.getKey()), entry.getValue());\n+            }\n+\n+            return mapElements;\n+        }\n+\n+        @Override\n+        public Map<String, String> unmarshal(MapData[] arg0) throws Exception {\n+            Map<String, String> r = new HashMap<String, String>();\n+            for (MapData mapelement : arg0) {\n+                r.put(decodeKey(mapelement.key), mapelement.value);\n+            }\n+            return r;\n+        }\n+\n+        private final static String ENCODING = \"UTF-8\";\n+\n+        private String encodeKey(String key) throws UnsupportedEncodingException {\n+            return URLEncoder.encode(key, ENCODING);\n+        }\n+\n+        private String decodeKey(String key) throws UnsupportedEncodingException {\n+            return URLDecoder.decode(key, ENCODING);\n+        }\n+    }\n+\n+    @XmlRootElement(name = \"DocWithMapData\")\n+    public static class DocWithMapData\n+    {\n+        @XmlJavaTypeAdapter(value = URLEncoderMapDataAdapter.class) // type = MapData[].class)\n+        public Map<String, String> mapDatas;\n+    }\n+\n+    @XmlRootElement(name = \"DocWithMapDataSimpleAnnotation\")\n+    public static class DocWithMapDataSimpleAnnotation\n+    {\n+        @XmlJavaTypeAdapter(URLEncoderMapDataAdapter.class)\n+        public Map<String, String> mapDatas;\n+    }\n+\n+    private Map<String, String> simpleMapData = singletonMap(\"key\", \"value\");\n+\n+    private Map<String, String> needEncodingMapData = singletonMap(\"my/key\", \"my/value\");\n+\n+    private Map<String,String> singletonMap(String a, String b) {\n+        Map<String,String> map = new HashMap<String,String>();\n+        map.put(a,b);\n+        return map;\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Set up\n+    /***********************************************************************\n+     */\n+\n+    protected XmlMapper _jaxbMapper;\n+\n+    protected XmlMapper _nonJaxbMapper;\n+\n+    @Override\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+        _jaxbMapper = new XmlMapper();\n+        _nonJaxbMapper = new XmlMapper();\n+        // Use JAXB-then-Jackson annotation introspector\n+        AnnotationIntrospector intr =\n+            XmlAnnotationIntrospector.Pair.instance(new XmlJaxbAnnotationIntrospector(TypeFactory.defaultInstance()),\n+                new JacksonAnnotationIntrospector());\n+        _jaxbMapper.setAnnotationIntrospector(intr);\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    public void testSimpleKeyMap() throws Exception\n+    {\n+        DocWithMapData bean = new DocWithMapData();\n+        bean.mapDatas = simpleMapData;\n+\n+        assertEquals(\"<DocWithMapData><mapDatas><key>value</key></mapDatas></DocWithMapData>\",\n+            _jaxbMapper.writeValueAsString(bean));\n+    }\n+\n+    public void testNeedEncodingKeyMap() throws Exception\n+    {\n+        DocWithMapData bean = new DocWithMapData();\n+        bean.mapDatas = needEncodingMapData;\n+\n+        String xml = _jaxbMapper.writeValueAsString(bean);\n+        \n+        assertEquals(\"<DocWithMapData><mapDatas><my%2Fkey>my/value</my%2Fkey></mapDatas></DocWithMapData>\",\n+                xml);\n+    }\n+\n+    public void testSimpleKeyMapSimpleAnnotation() throws Exception\n+    {\n+        DocWithMapDataSimpleAnnotation bean = new DocWithMapDataSimpleAnnotation();\n+        bean.mapDatas = simpleMapData;\n+\n+        assertEquals(\n+            \"<DocWithMapDataSimpleAnnotation><mapDatas><key>value</key></mapDatas></DocWithMapDataSimpleAnnotation>\",\n+            _jaxbMapper.writeValueAsString(bean));\n+    }\n+\n+    public void testNeedEncodingKeyMapSimpleAnnotation() throws Exception\n+    {\n+        DocWithMapDataSimpleAnnotation bean = new DocWithMapDataSimpleAnnotation();\n+        bean.mapDatas = needEncodingMapData;\n+\n+        assertEquals(\n+            \"<DocWithMapDataSimpleAnnotation><mapDatas><my%2Fkey>my/value</my%2Fkey></mapDatas></DocWithMapDataSimpleAnnotation>\",\n+            _jaxbMapper.writeValueAsString(bean));\n+    }\n+\n+    public void testNeedEncodingKeyMap_nonJaxb() throws Exception\n+    {\n+        DocWithMapData bean = new DocWithMapData();\n+        bean.mapDatas = needEncodingMapData;\n+\n+        assertEquals(\n+            \"<DocWithMapData><mapDatas><my%2Fkey>my/value</my%2Fkey></mapDatas></DocWithMapData>\",\n+            _nonJaxbMapper.writeValueAsString(bean));\n+    }\n+\n+    public void testNeedEncodingKeyMapSimpleAnnotation_nonJaxb() throws Exception\n+    {\n+        DocWithMapDataSimpleAnnotation bean = new DocWithMapDataSimpleAnnotation();\n+        bean.mapDatas = needEncodingMapData;\n+\n+        assertEquals(\n+            \"<DocWithMapDataSimpleAnnotation><mapDatas><my%2Fkey>my/value</my%2Fkey></mapDatas></DocWithMapDataSimpleAnnotation>\",\n+            _nonJaxbMapper.writeValueAsString(bean));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/Issue97Test.java\n+/*\n+ * Copyright (c) 2002-2014 Nu Echo Inc. All rights reserved.\n+ */\n+\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import static org.junit.Assert.*;\n+import static org.hamcrest.CoreMatchers.*;\n+\n+import java.util.*;\n+\n+import org.junit.*;\n+import org.junit.runner.*;\n+import org.junit.runners.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.*;\n+import com.fasterxml.jackson.dataformat.xml.*;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+/**\n+ * @author Nu Echo Inc.\n+ */\n+@RunWith(JUnit4.class)\n+public class Issue97Test extends XmlTestBase\n+{\n+    @JsonTypeInfo(property = \"type\", use = Id.NAME)\n+    public static abstract class Foo {\n+        @JacksonXmlProperty(isAttribute = true)\n+        public String data;\n+    }\n+\n+    @JsonTypeName(\"good\")\n+    public static class FooGood extends Foo {\n+        public String bar;\n+    }\n+\n+    @JsonTypeName(\"bad\")\n+    public static class FooBad extends Foo {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<String> bar;\n+    }\n+\n+    @Test\n+    public void testGood() throws Exception {\n+        XmlMapper mapper = new XmlMapper();\n+        mapper.registerSubtypes(FooGood.class);\n+\n+        String xml = \"<Foo type=\\\"good\\\" data=\\\"dummy\\\"><bar>FOOBAR</bar></Foo>\";\n+        Foo fooRead = mapper.readValue(xml, Foo.class);\n+        assertThat(fooRead, instanceOf(FooGood.class));\n+\n+        xml = \"<Foo data=\\\"dummy\\\" type=\\\"good\\\" ><bar>FOOBAR</bar></Foo>\";\n+        fooRead = mapper.readValue(xml, Foo.class);\n+        assertThat(fooRead, instanceOf(FooGood.class));\n+    }\n+    \n+    @Test\n+    public void testBad() throws Exception {\n+        XmlMapper mapper = new XmlMapper();\n+        mapper.registerSubtypes(FooBad.class);\n+\n+        String xml = \"<Foo type=\\\"bad\\\" data=\\\"dummy\\\"><bar><bar>FOOBAR</bar></bar></Foo>\";\n+        Foo fooRead = mapper.readValue(xml, Foo.class);\n+        assertThat(fooRead, instanceOf(FooBad.class));\n+\n+        xml = \"<Foo data=\\\"dummy\\\" type=\\\"bad\\\"><bar><bar>FOOBAR</bar></bar></Foo>\";\n+        fooRead = mapper.readValue(xml, Foo.class);\n+        assertThat(fooRead, instanceOf(FooBad.class));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListAnnotationSharingTest.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+\n+// for [Issue#55]\n+public class ListAnnotationSharingTest extends XmlTestBase\n+{\n+    static class Wrapper {\n+        @JacksonXmlElementWrapper(localName = \"Points\", useWrapping = true)\n+        @JsonProperty(\"Point\")\n+        private List<Point> points = new ArrayList<Point>();\n+\n+        public List<Point> getPoints() {\n+            return points;\n+        }\n+    }\n+\n+    static class Point {\n+        public int x, y;\n+\n+        public Point() { }\n+        public Point(int x, int y) { this.x = x;\n+            this.y = y;\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    \n+     public void testAnnotationSharing() throws Exception\n+     {\n+         Wrapper input = new Wrapper();\n+         input.points.add(new Point(1, 2));\n+         String xml = MAPPER.writeValueAsString(input);\n+\n+         assertEquals(\"<Wrapper><Points><Point><x>1</x><y>2</y></Point></Points></Wrapper>\", xml);\n+\n+         // and then back\n+         Wrapper result = MAPPER.readValue(xml, Wrapper.class);\n+         assertEquals(1, result.points.size());\n+     }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/RootListHandlingTest.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+import com.fasterxml.jackson.dataformat.xml.JacksonXmlModule;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+/**\n+ * Tests for verifying that Lists (and arrays) can be serialized even\n+ * when they are root values.\n+ */\n+public class RootListHandlingTest extends XmlTestBase\n+{\n+    @JacksonXmlRootElement(localName=\"SR\")\n+    @JsonPropertyOrder({ \"id\", \"name\", \"description\" })\n+    public static class SampleResource {\n+        private Long id;\n+        private String name;\n+        private String description;\n+\n+        public SampleResource() { }\n+        public SampleResource(long id, String n, String d) {\n+            this.id = id;\n+            name = n;\n+            description = d;\n+        }\n+        \n+        public Long getId() {\n+            return id;\n+        }\n+\n+        public void setId(Long id) {\n+            this.id = id;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+\n+        public String getDescription() {\n+            return description;\n+        }\n+\n+        public void setDescription(String description) {\n+            this.description = description;\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    // Test for ensuring that we can use \".withRootName()\" to override\n+    // default name AND annotation\n+    public void testRenamedRootItem() throws Exception\n+    {\n+        XmlMapper xmlMapper = new XmlMapper();\n+        String xml = xmlMapper\n+                .writer()\n+                .withRootName(\"Shazam\")\n+                .writeValueAsString(new SampleResource(123, \"Foo\", \"Barfy!\"))\n+                .trim();\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<Shazam><id>123</id><name>Foo</name><description>Barfy!</description></Shazam>\", xml);\n+    }\n+    \n+    // for [Issue#38] -- root-level Collections not supported\n+    public void testListSerialization() throws Exception\n+    {\n+        _testListSerialization(true);\n+        _testListSerialization(false);\n+    }\n+        \n+    private void _testListSerialization(boolean useWrapping) throws Exception\n+    {\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(useWrapping);\n+        XmlMapper xmlMapper = new XmlMapper(module);\n+        AnnotationIntrospector introspector = new JacksonAnnotationIntrospector();\n+        xmlMapper.setAnnotationIntrospector(introspector);\n+\n+        SampleResource r1 = new SampleResource();\n+        r1.setId(123L);\n+        r1.setName(\"Albert\");\n+        r1.setDescription(\"desc\");\n+\n+        SampleResource r2 = new SampleResource();\n+        r2.setId(123L);\n+        r2.setName(\"William\");\n+        r2.setDescription(\"desc2\");\n+\n+        List<SampleResource> l = new ArrayList<SampleResource>();\n+        l.add(r1);\n+        l.add(r2);\n+\n+        // to see what JAXB might do, uncomment:\n+//System.out.println(\"By JAXB: \"+jaxbSerialized(l)); //  ArrayList.class, SampleResource.class));\n+\n+        String xml = xmlMapper\n+            .writerWithDefaultPrettyPrinter()\n+            .writeValueAsString(l)\n+            .trim();\n+\n+        // first trivial sanity checks\n+        assertNotNull(xml);\n+        if (xml.indexOf(\"<ArrayList>\") < 0) {\n+            fail(\"Unexpected output: should have <ArrayList> as root element, got: \"+xml);\n+        }\n+\n+        // and then try reading back\n+        JavaType resListType = xmlMapper.getTypeFactory()\n+                .constructCollectionType(List.class, SampleResource.class);\n+        Object ob = xmlMapper.reader(resListType).readValue(xml);\n+        assertNotNull(ob);\n+\n+//      System.err.println(\"XML -> \"+xmlMapper.writerWithDefaultPrettyPrinter().writeValueAsString(ob));\n+        \n+        assertTrue(ob instanceof List);\n+        List<?> resultList = (List<?>) ob;\n+        assertEquals(2, resultList.size());\n+        assertEquals(SampleResource.class, resultList.get(0).getClass());\n+        assertEquals(SampleResource.class, resultList.get(1).getClass());\n+        SampleResource rr = (SampleResource) resultList.get(1);\n+        assertEquals(\"William\", rr.getName());\n+    }\n+\n+    // Related to #38 as well\n+    public void testArraySerialization() throws Exception\n+    {\n+        _testArraySerialization(true);\n+        _testArraySerialization(false);\n+    }\n+    \n+    private void _testArraySerialization(boolean useWrapping) throws Exception\n+    {\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(useWrapping);\n+        XmlMapper xmlMapper = new XmlMapper(module);\n+        AnnotationIntrospector introspector = new JacksonAnnotationIntrospector();\n+        xmlMapper.setAnnotationIntrospector(introspector);\n+\n+        SampleResource r1 = new SampleResource();\n+        r1.setId(123L);\n+        r1.setName(\"Albert\");\n+        r1.setDescription(\"desc\");\n+\n+        SampleResource r2 = new SampleResource();\n+        r2.setId(123L);\n+        r2.setName(\"William\");\n+        r2.setDescription(\"desc2\");\n+\n+        SampleResource[] input = new SampleResource[] { r1, r2 };\n+\n+        // to see what JAXB might do, uncomment:\n+//System.out.println(\"By JAXB: \"+jaxbSerialized(input));\n+\n+        String xml = xmlMapper\n+            .writerWithDefaultPrettyPrinter()\n+            .writeValueAsString(input)\n+            .trim();\n+\n+        // first trivial sanity checks\n+        assertNotNull(xml);\n+        // Is this good name? If not, what should be used instead?\n+        if (xml.indexOf(\"<SampleResources>\") < 0) {\n+            fail(\"Unexpected output: should have <SampleResources> as root element, got: \"+xml);\n+        }\n+\n+        // and then try reading back\n+        SampleResource[] result = xmlMapper.reader(SampleResource[].class).readValue(xml);\n+        assertNotNull(result);\n+\n+//      System.err.println(\"XML -> \"+xmlMapper.writerWithDefaultPrettyPrinter().writeValueAsString(ob));\n+        \n+        assertEquals(2, result.length);\n+        SampleResource rr = result[1];\n+        assertEquals(\"desc2\", rr.getDescription());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/TestListDeserialization.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class TestListDeserialization extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    @JacksonXmlRootElement(localName = \"person\", namespace =\"http://example.org/person\" )\n+    public static class Person\n+    {\n+        @JacksonXmlProperty( isAttribute = true )\n+        public String id;\n+        public String name;\n+        public int age;\n+\n+        @JacksonXmlElementWrapper(localName = \"notes\")\n+        @JacksonXmlProperty(localName = \"note\" )\n+        public List<String> notes = new ArrayList<String>();\n+\n+        public Person() { }\n+        public Person(String name, int age) {\n+            this.name = name;\n+            this.age = age;\n+        }\n+    }\n+\n+    public static class PersonWithGetters\n+    {\n+       @JacksonXmlProperty( isAttribute = true )\n+       public String id;\n+\n+       protected List<String> _notes = new ArrayList<String>();\n+              \n+       public PersonWithGetters() { }\n+       public PersonWithGetters(String id) {\n+           this.id = id;\n+       }\n+\n+       @JacksonXmlElementWrapper(localName = \"notes\")\n+       @JacksonXmlProperty( localName = \"note\" )\n+       public List<String> getStuff() {\n+           return _notes;\n+       }\n+\n+       public void setStuff(List<String> n) {\n+           _notes = n;\n+       }\n+    }\n+\n+    static class ListBeanWrapped\n+    {\n+        @JacksonXmlElementWrapper\n+        public List<Integer> values;\n+    }\n+\n+    static class ListBeanUnwrapped\n+    {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Integer> values;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    {\n+        // easier for eye:\n+        MAPPER.enable(SerializationFeature.INDENT_OUTPUT);\n+    }\n+\n+    /* Issue#17 [https://github.com/FasterXML/jackson-dataformat-xml/issues/17]\n+     * \n+     * Problems deserializing otherwise properly wrapped lists\n+     */\n+    public void testWrappedList() throws Exception\n+    {\n+        Person p = new Person( \"Name\", 30 );\n+        p.notes.add(\"note 1\");\n+        p.notes.add(\"note 2\");\n+        String xml = MAPPER.writeValueAsString( p );\n+        Person result = MAPPER.readValue(xml, Person.class);\n+        assertNotNull(result);\n+        assertEquals(\"Name\", result.name);\n+        assertEquals(30, result.age);\n+        assertEquals(2, result.notes.size());\n+        assertEquals(\"note 1\", result.notes.get(0));\n+        assertEquals(\"note 2\", result.notes.get(1));\n+    }\n+\n+    public void testWrappedListWithGetters() throws Exception\n+    {\n+        PersonWithGetters p = new PersonWithGetters(\"abc\");\n+        p._notes.add(\"note 1\");\n+        p._notes.add(\"note 2\");\n+        String xml = MAPPER.writeValueAsString( p );\n+        PersonWithGetters result = MAPPER.readValue(xml, PersonWithGetters.class);\n+        assertNotNull(result);\n+        assertEquals(\"abc\", result.id);\n+        assertEquals(2, result._notes.size());\n+        assertEquals(\"note 1\", result._notes.get(0));\n+        assertEquals(\"note 2\", result._notes.get(1));\n+    }\n+\n+    public void testWrappedListBeanDeser() throws Exception\n+    {\n+        ListBeanWrapped bean = MAPPER.readValue(\n+                \"<ListBeanWrapped><values><values>1</values><values>2</values><values>3</values></values></ListBeanWrapped>\",\n+                ListBeanWrapped.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.values);\n+        assertEquals(3, bean.values.size());\n+        assertEquals(Integer.valueOf(1), bean.values.get(0));\n+        assertEquals(Integer.valueOf(2), bean.values.get(1));\n+        assertEquals(Integer.valueOf(3), bean.values.get(2));\n+    }\n+\n+    // for [Issue#33]\n+    public void testWrappedListWithAttribute() throws Exception\n+    {\n+        ListBeanWrapped bean = MAPPER.readValue(\n+                \"<ListBeanWrapped><values id='123'><values>1</values><values>2</values></values></ListBeanWrapped>\",\n+                ListBeanWrapped.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.values);\n+        if (bean.values.size() < 2) { // preliminary check\n+            fail(\"List should have 2 entries, had \"+bean.values.size());\n+        }\n+        assertEquals(Integer.valueOf(1), bean.values.get(0));\n+        assertEquals(Integer.valueOf(2), bean.values.get(1));\n+        assertEquals(2, bean.values.size());\n+    }\n+\n+    public void testUnwrappedListBeanDeser() throws Exception\n+    {\n+        /*\n+        ListBeanUnwrapped foo = new ListBeanUnwrapped();\n+        foo.values = new ArrayList<Integer>();\n+        foo.values.add(1);\n+        foo.values.add(2);\n+        foo.values.add(3);\n+System.out.println(\"List -> \"+MAPPER.writeValueAsString(foo));\n+*/\n+        \n+        ListBeanUnwrapped bean = MAPPER.readValue(\n+                \"<ListBeanUnwrapped><values>1</values><values>2</values><values>3</values></ListBeanUnwrapped>\",\n+                ListBeanUnwrapped.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.values);\n+        assertEquals(3, bean.values.size());\n+        assertEquals(Integer.valueOf(1), bean.values.get(0));\n+        assertEquals(Integer.valueOf(2), bean.values.get(1));\n+        assertEquals(Integer.valueOf(3), bean.values.get(2));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/TestListRoundtrip.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class TestListRoundtrip extends XmlTestBase\n+{\n+    @JacksonXmlRootElement(localName=\"parents\")\n+    public static class Parents {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Parent> parent = new ArrayList<Parent>();\n+    }\n+\n+    @JsonPropertyOrder({ \"name\", \"desc\", \"prop\" })\n+    public static class Parent {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String name;\n+\n+        public String description;\n+      \n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Prop> prop = new ArrayList<Prop>();\n+\n+        public Parent() { }\n+        public Parent(String name, String desc) {\n+            this.name = name;\n+            description = desc;\n+        }\n+    }\n+\n+    static class Prop {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String name;\n+\n+        public String value;\n+\n+        public Prop() { }\n+        public Prop(String name, String value) {\n+            this.name = name;\n+            this.value = value;\n+        }\n+    }\n+\n+    // For [Issue#58]\n+    @JacksonXmlRootElement(localName = \"point\")\n+    static class Point {\n+        @JacksonXmlProperty(localName = \"x\", isAttribute = true)\n+        int x;\n+        @JacksonXmlProperty(localName = \"y\", isAttribute = true)\n+        int y;\n+\n+        public Point() { }\n+        public Point(int x, int y) { this.x = x; this.y = y; }\n+    }\n+\n+    @JacksonXmlRootElement(localName = \"Points\")\n+    static class PointContainer {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        @JacksonXmlProperty(localName = \"point\")\n+        public List<Point> points;\n+    }\n+\n+    // For [Issue#64]\n+    static class Optional {\n+        @JacksonXmlText\n+        public String number = \"NOT SET\";\n+\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String type = \"NOT SET\";\n+    }\n+\n+    static class Optionals {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Optional> optional;\n+    } \n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    { // easier for eye, uncomment for testing\n+//        MAPPER.enable(SerializationFeature.INDENT_OUTPUT);\n+    }\n+    \n+    public void testParentListRoundtrip() throws Exception\n+    {\n+        Parents root = new Parents();\n+        Parent parent1 = new Parent(\"a\", \"First\");\n+        root.parent.add(parent1);\n+        parent1.prop.add(new Prop(\"width\", \"13\"));\n+        parent1.prop.add(new Prop(\"height\", \"10\"));\n+        Parent parent2 = new Parent(\"b\", \"Second\");\n+        parent2.prop.add(new Prop(\"x\", \"1\"));\n+        parent2.prop.add(new Prop(\"y\", \"2\"));\n+        root.parent.add(parent2);\n+\n+        String xml = MAPPER.writeValueAsString(root);\n+        assertNotNull(xml);\n+\n+        // then bring it back\n+        Parents result = MAPPER.readValue(xml, Parents.class);\n+        assertNotNull(result.parent);\n+        assertEquals(2, result.parent.size());\n+        Parent p2 = result.parent.get(1);\n+        assertNotNull(p2);\n+        assertEquals(\"b\", p2.name);\n+        assertEquals(\"Second\", p2.description);\n+\n+        assertEquals(2, p2.prop.size());\n+        Prop prop2 = p2.prop.get(1);\n+        assertNotNull(prop2);\n+        assertEquals(\"2\", prop2.value);\n+    }\n+\n+    public void testListWithAttrOnlyValues() throws Exception\n+    {\n+        PointContainer obj = new PointContainer();\n+        obj.points = new ArrayList<Point>();\n+        obj.points.add(new Point(1, 2));\n+        obj.points.add(new Point(3, 4));\n+        obj.points.add(new Point(5, 6));\n+\n+        String xml = MAPPER.writeValueAsString(obj);\n+\n+        PointContainer converted = MAPPER.readValue(xml, PointContainer.class);\n+\n+        assertEquals(3, converted.points.size());\n+        assertNotNull(converted.points.get(0));\n+        assertNotNull(converted.points.get(1));\n+        assertNotNull(converted.points.get(2));\n+\n+        assertEquals(2, converted.points.get(0).y);\n+        assertEquals(4, converted.points.get(1).y);\n+        assertEquals(6, converted.points.get(2).y);\n+    }\n+\n+    // // [Issue#64]\n+    \n+    public void testOptionals() throws Exception\n+    {\n+        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>\",\n+                Optionals.class);\n+        assertNotNull(ob);\n+        assertNotNull(ob.optional);\n+        assertEquals(1, ob.optional.size());\n+//        System.err.println(\"ob: \" + ob); // works fine\n+        Optional opt = ob.optional.get(0);\n+        assertEquals(\"123-456-7890\", opt.number);\n+        assertEquals(\"work\", opt.type);\n+    }\n+\n+    /*// comment out for release\n+    public void testOptionalsWithMissingType() throws Exception\n+    {\n+//        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>\",\n+        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional>123-456-7890</optional></MultiOptional>\",\n+                Optionals.class);\n+        assertNotNull(ob);\n+        assertNotNull(ob.optional);\n+        assertEquals(1, ob.optional.size());\n+\n+//            System.err.println(\"ob: \" + ob); // works fine\n+\n+        Optional opt = ob.optional.get(0);\n+        assertEquals(\"123-456-7890\", opt.number);\n+        assertEquals(\"NOT SET\", opt.type);\n+    }\n+*/    \n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/TestListSerialization.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+\n+public class TestListSerialization extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+    static class ListBean\n+    {\n+        public final List<Integer> values = new ArrayList<Integer>();\n+\n+        public ListBean() { }\n+        public ListBean(int... ints) {\n+            for (int i : ints) {\n+                values.add(Integer.valueOf(i));\n+            }\n+        }\n+    }\n+\n+    static class StringListBean\n+    {\n+        // to see what JAXB gives, uncomment:\n+        //@javax.xml.bind.annotation.XmlElementWrapper(name=\"stringList\")\n+        @JacksonXmlElementWrapper(localName=\"stringList\")\n+        public List<StringBean> strings;\n+        \n+        public StringListBean() { strings = new ArrayList<StringBean>(); }\n+        public StringListBean(String... texts)\n+        {\n+            strings = new ArrayList<StringBean>();\n+            for (String text : texts) {\n+                strings.add(new StringBean(text));\n+            }\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+ \n+    public void testSimpleWrappedList() throws IOException\n+    {\n+        String xml = MAPPER.writeValueAsString(new ListBean(1, 2, 3));\n+        xml = removeSjsxpNamespace(xml);\n+        // 06-Dec-2010, tatu: Not completely ok; should default to not using wrapper...\n+        assertEquals(\"<ListBean><values><values>1</values><values>2</values><values>3</values></values></ListBean>\", xml);\n+    }\n+\n+    public void testStringList() throws IOException\n+    {\n+        StringListBean list = new StringListBean(\"a\", \"b\", \"c\");\n+        String xml = MAPPER.writeValueAsString(list);\n+        xml = removeSjsxpNamespace(xml);\n+        // 06-Dec-2010, tatu: Not completely ok; should default to not using wrapper... but it's what we have now\n+        assertEquals(\"<StringListBean><stringList>\"\n+                +\"<strings><text>a</text></strings>\"\n+                +\"<strings><text>b</text></strings>\"\n+                +\"<strings><text>c</text></strings>\"\n+                +\"</stringList></StringListBean>\", xml);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/WrappedListsTest.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+public class WrappedListsTest extends XmlTestBase\n+{\n+    static class Order  {\n+        @JacksonXmlElementWrapper(localName = \"line_items\")\n+        @JacksonXmlProperty(localName = \"item\")  \n+        private List<ListItem> line_items; // new ArrayList<ListItem>();\n+    }\n+\n+    static class ListItem {\n+        public int id;\n+        \n+        public ListItem(int id) { this.id = id; }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = xmlMapper(true);\n+\n+    // For [Issue#103]\n+    public void testEmptyList() throws Exception\n+    {\n+        String xml = MAPPER.writeValueAsString(new Order());\n+        assertEquals(\"<Order/>\", xml);\n+        // If we expected Empty list, it'd be:\n+//        assertEquals(\"<Order><line_items/></Order>\", xml);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestIndentation.java\n+package com.fasterxml.jackson.dataformat.xml.ser;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+public class TestIndentation extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    static class StringWrapperBean {\n+        public StringWrapper string;\n+        \n+        public StringWrapperBean() { }\n+        public StringWrapperBean(String s) { string = new StringWrapper(s); }\n+    }\n+\n+    static class IntWrapperBean {\n+        public IntWrapper wrapped;\n+        \n+        public IntWrapperBean() { }\n+        public IntWrapperBean(int i) { wrapped = new IntWrapper(i); }\n+    }\n+\n+    // [Issue#45]\n+    static class AttrBean {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public int count = 3;\n+    }\n+\n+    static class AttrBean2 {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public int count = 3;\n+\n+        public int value = 14;\n+    }\n+\n+    public class PojoFor123\n+    {\n+        @JacksonXmlProperty(isAttribute = true)\n+        public String name;\n+\n+        @JsonInclude(JsonInclude.Include.NON_EMPTY) \n+        public String property;\n+        \n+        public PojoFor123(String name) {\n+            this.name = name;       \n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Set up\n+    /**********************************************************\n+     */\n+\n+    protected XmlMapper _xmlMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        _xmlMapper = new XmlMapper();\n+        _xmlMapper.configure(SerializationFeature.INDENT_OUTPUT, true);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    // Verify [JACKSON-444], Issue #1\n+    public void testSimpleStringBean() throws Exception\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new StringWrapperBean(\"abc\")); \n+        // should have at least one linefeed, space...\n+        if (xml.indexOf('\\n') < 0 || xml.indexOf(' ') < 0) {\n+        \tfail(\"No indentation: XML == \"+xml);\n+        }\n+        // Let's verify we get similar stuff back, first:\n+        StringWrapperBean result = _xmlMapper.readValue(xml, StringWrapperBean.class);\n+        assertNotNull(result);\n+        assertEquals(\"abc\", result.string.str);\n+\n+    }\n+\n+    public void testSimpleIntBean() throws Exception\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new IntWrapperBean(42)); \n+        // should have at least one linefeed, space...\n+        if (xml.indexOf('\\n') < 0 || xml.indexOf(' ') < 0) {\n+        \tfail(\"No indentation: XML == \"+xml);\n+        }\n+        // Let's verify we get similar stuff back, first:\n+        IntWrapperBean result = _xmlMapper.readValue(xml, IntWrapperBean.class);\n+        assertNotNull(result);\n+        assertEquals(42, result.wrapped.i);\n+    }\n+    \n+    public void testSimpleMap() throws Exception\n+    {\n+        Map<String,String> map = new HashMap<String,String>();\n+        map.put(\"a\", \"b\");\n+        String xml = _xmlMapper.writeValueAsString(map);\n+\n+        // should have at least one linefeed, space...\n+        if (xml.indexOf('\\n') < 0 || xml.indexOf(' ') < 0) {\n+            fail(\"No indentation: XML == \"+xml);\n+        }\n+        \n+        // Let's verify we get similar stuff back, first:\n+        Map<?,?> result = _xmlMapper.readValue(xml, Map.class);\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        assertEquals(\"b\", map.get(\"a\"));\n+    }\n+\n+    // [Issue#45]: Use of attributes should not force linefeed for empty elements\n+    public void testWithAttr() throws Exception\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new AttrBean());\n+        assertEquals(\"<AttrBean count=\\\"3\\\"/>\", xml);\n+        String xml2 = _xmlMapper.writeValueAsString(new AttrBean2());\n+        assertEquals(\"<AttrBean2 count=\\\"3\\\">\\n  <value>14</value>\\n</AttrBean2>\", xml2);\n+    }\n+\n+    public void testEmptyElem() throws Exception\n+    {\n+        PojoFor123 simple = new PojoFor123(\"foobar\");\n+        String xml = _xmlMapper.writeValueAsString(simple);\n+        assertEquals(\"<PojoFor123 name=\\\"foobar\\\"/>\", xml);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestJDKSerializability.java\n+package com.fasterxml.jackson.dataformat.xml.ser;\n+\n+import java.io.*;\n+\n+import javax.xml.namespace.QName;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n+\n+/**\n+ * Unit test related to core [Issue#31] (https://github.com/FasterXML/jackson-core/issues/31)\n+ * as it relates to XmlFactory.\n+ */\n+public class TestJDKSerializability extends XmlTestBase\n+{\n+    @JacksonXmlRootElement(localName=\"MyPojo\")\n+    static class MyPojo {\n+        public int x;\n+        private int y;\n+        \n+        public MyPojo() { }\n+        public MyPojo(int x0, int y0) {\n+            x = x0;\n+            y = y0;\n+        }\n+        \n+        public int getY() { return y; }\n+        public void setY(int y) { this.y = y; }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */    \n+\n+    public void testXmlFactory() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        String origXml = \"<root><a>text</a></root>\";\n+        assertEquals(origXml, _writeXml(f, false));\n+\n+        // Ok: freeze dry factory, thaw, and try to use again:\n+        byte[] frozen = jdkSerialize(f);\n+        XmlFactory f2 = jdkDeserialize(frozen);\n+        assertNotNull(f2);\n+        assertEquals(origXml, _writeXml(f2, false));\n+\n+        // Let's also try byte-based variant, for fun...\n+        assertEquals(origXml, _writeXml(f2, true));\n+    }\n+\n+    public void testMapper() throws IOException\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        final String EXP = \"<MyPojo><x>2</x><y>3</y></MyPojo>\";\n+        final MyPojo p = new MyPojo(2, 3);\n+        assertEquals(EXP, mapper.writeValueAsString(p));\n+\n+        byte[] bytes = jdkSerialize(mapper);\n+        XmlMapper mapper2 = jdkDeserialize(bytes);\n+        assertEquals(EXP, mapper2.writeValueAsString(p));\n+        MyPojo p2 = mapper2.readValue(EXP, MyPojo.class);\n+        assertEquals(p.x, p2.x);\n+        assertEquals(p.y, p2.y);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+    \n+    protected byte[] jdkSerialize(Object o) throws IOException\n+    {\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream(1000);\n+        ObjectOutputStream obOut = new ObjectOutputStream(bytes);\n+        obOut.writeObject(o);\n+        obOut.close();\n+        return bytes.toByteArray();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T> T jdkDeserialize(byte[] raw) throws IOException\n+    {\n+        ObjectInputStream objIn = new ObjectInputStream(new ByteArrayInputStream(raw));\n+        try {\n+            return (T) objIn.readObject();\n+        } catch (ClassNotFoundException e) {\n+            fail(\"Missing class: \"+e.getMessage());\n+            return null;\n+        } finally {\n+            objIn.close();\n+        }\n+    }\n+    \n+    @SuppressWarnings(\"resource\")\n+    protected String _writeXml(XmlFactory f, boolean useBytes) throws IOException\n+    {\n+        if (useBytes) {\n+            ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+            ToXmlGenerator jg = f.createGenerator(bytes);\n+            _write(f, jg);\n+            return bytes.toString(\"UTF-8\");\n+        }\n+        StringWriter sw = new StringWriter();\n+        ToXmlGenerator jg = f.createGenerator(sw);\n+        _write(f, jg);\n+        return sw.toString();\n+    }\n+        \n+    protected void _write(JsonFactory f, ToXmlGenerator jg) throws IOException\n+    {\n+        jg.setNextName(new QName(\"root\"));\n+        jg.writeStartObject();\n+        jg.writeFieldName(\"a\");\n+        jg.writeString(\"text\");\n+        jg.writeEndObject();\n+        jg.close();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestNamespaces.java\n+package com.fasterxml.jackson.dataformat.xml.ser;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class TestNamespaces extends XmlTestBase\n+{\n+    @JacksonXmlRootElement(localName=\"person\", namespace=\"http://example.org/person\" )\n+    static class Person\n+    {\n+        private String name;\n+\n+        @JacksonXmlProperty(namespace = \"http://example.org/person\")\n+        public String getName() { return name; }\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+    \n+    // [Issue-26]: should prefer the \"default namespace\"\n+    public void testRootNamespace() throws Exception\n+    {\n+        Person person = new Person();\n+        person.setName( \"hello\" );\n+        \n+        XmlMapper xmlMapper = new XmlMapper();\n+        String xml = xmlMapper.writeValueAsString(person);\n+\n+        // should use \"the default namespace\"...\n+        final String PREFIX = \"<person xmlns=\";\n+        if (!xml.startsWith(PREFIX)) {\n+            fail(\"Expected XML to begin with '\"+PREFIX+\"', instead got: \"+xml);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerialization.java\n+package com.fasterxml.jackson.dataformat.xml.ser;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdScalarSerializer;\n+import com.fasterxml.jackson.dataformat.xml.JacksonXmlModule;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+@SuppressWarnings(\"serial\")\n+public class TestSerialization extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    static class StringBean2\n+    {\n+        public String text = \"foobar\";\n+    }\n+\n+    static class AttributeBean\n+    {\n+        @JacksonXmlProperty(isAttribute=true, localName=\"attr\")\n+        public String text = \"something\";\n+    }\n+\n+    static class AttrAndElem\n+    {\n+        public String elem = \"whatever\";\n+        \n+        @JacksonXmlProperty(isAttribute=true, localName=\"id\")\n+        public int attr = 42;\n+    }\n+\n+    static class WrapperBean<T>\n+    {\n+        public T value;\n+\n+        public WrapperBean() { }\n+        public WrapperBean(T v) { value = v; }\n+    }\n+\n+    static class MapBean\n+    {\n+        public Map<String,Integer> map;\n+\n+        public MapBean() { }\n+        public MapBean(Map<String,Integer> v) { map = v; }\n+    }\n+    \n+    static class NsElemBean\n+    {\n+        @JacksonXmlProperty(namespace=\"http://foo\")\n+        public String text = \"blah\";\n+    }\n+\n+    @JacksonXmlRootElement(localName=\"root\")\n+    static class RootBean\n+    {\n+        public String value = \"123\";\n+    }\n+\n+    @JacksonXmlRootElement(localName=\"nsRoot\", namespace=\"http://foo\")\n+    static class NsRootBean\n+    {\n+        public String value = \"abc\";\n+    }\n+\n+    static class CustomSerializer extends StdScalarSerializer<String>\n+    {\n+        public CustomSerializer() { super(String.class); }\n+        \n+        @Override\n+        public void serialize(String value, JsonGenerator jgen,\n+                SerializerProvider provider) throws IOException {\n+            jgen.writeString(\"custom:\"+value);\n+        }\n+    }\n+\n+    static class CustomMap extends LinkedHashMap<String, Integer> { }\n+    \n+    /*\n+    /**********************************************************\n+    /* Set up\n+    /**********************************************************\n+     */\n+\n+    protected XmlMapper _xmlMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        _xmlMapper = new XmlMapper();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    // Unit test to verify that root name is properly set\n+    public void testRootName() throws IOException\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new StringBean());\n+        \n+        // Hmmh. Looks like JDK Stax may adds bogus ns declaration. As such,\n+        // let's just check that name starts ok...\n+        if (!xml.startsWith(\"<StringBean\")) {\n+            fail(\"Expected root name of 'StringBean'; but XML document is [\"+xml+\"]\");\n+        }\n+\n+        // and then see that basic non-namespace root is ok\n+        xml = _xmlMapper.writeValueAsString(new RootBean());\n+        assertEquals(\"<root><value>123</value></root>\", xml);\n+\n+        // and namespace one too\n+        xml = _xmlMapper.writeValueAsString(new NsRootBean());\n+        if (xml.indexOf(\"nsRoot\") < 0) { // verify localName\n+            fail(\"Expected root name of 'nsRoot'; but XML document is [\"+xml+\"]\");\n+        }\n+        // and NS declaration\n+        if (xml.indexOf(\"http://foo\") < 0) {\n+            fail(\"Expected NS declaration for 'http://foo', not found, XML document is [\"+xml+\"]\");\n+        }\n+    }\n+    \n+    public void testSimpleAttribute() throws IOException\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new AttributeBean());\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<AttributeBean attr=\\\"something\\\"/>\", xml);\n+    }\n+\n+    public void testSimpleAttrAndElem() throws IOException\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new AttrAndElem());\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<AttrAndElem id=\\\"42\\\"><elem>whatever</elem></AttrAndElem>\", xml);\n+    }\n+\n+    public void testSimpleNsElem() throws IOException\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new NsElemBean());\n+        xml = removeSjsxpNamespace(xml);\n+        // here we assume woodstox automatic prefixes, not very robust but:\n+        assertEquals(\"<NsElemBean><wstxns1:text xmlns:wstxns1=\\\"http://foo\\\">blah</wstxns1:text></NsElemBean>\", xml);\n+    }\n+\n+    @SuppressWarnings(\"boxing\")\n+    public void testMap() throws IOException\n+    {\n+        // First, map in a general wrapper\n+        LinkedHashMap<String,Integer> map = new LinkedHashMap<String,Integer>();\n+        map.put(\"a\", 1);\n+        map.put(\"b\", 2);\n+\n+        String xml;\n+        \n+        xml = _xmlMapper.writeValueAsString(new WrapperBean<Map<?,?>>(map));\n+        assertEquals(\"<WrapperBean><value>\"\n+                +\"<a>1</a>\"\n+                +\"<b>2</b>\"\n+                +\"</value></WrapperBean>\",\n+                xml);\n+\n+        // then as strongly typed\n+        xml = _xmlMapper.writeValueAsString(new MapBean(map));\n+        assertEquals(\"<MapBean><map>\"\n+                +\"<a>1</a>\"\n+                +\"<b>2</b>\"\n+                +\"</map></MapBean>\",\n+                xml);\n+    }\n+\n+    public void testNakedMap() throws IOException\n+    {\n+        CustomMap input = new CustomMap();        \n+        input.put(\"a\", 123);\n+        input.put(\"b\", 456);\n+        String xml = _xmlMapper.writeValueAsString(input);\n+\n+        \n+//        System.err.println(\"XML = \"+xml);\n+        \n+        CustomMap result = _xmlMapper.readValue(xml, CustomMap.class);\n+        assertEquals(2, result.size());\n+\n+        assertEquals(Integer.valueOf(456), result.get(\"b\"));\n+    }\n+    \n+    // for [Issue#41]\n+    public void testCustomSerializer() throws Exception\n+    {\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.addSerializer(String.class, new CustomSerializer());\n+        XmlMapper xml = new XmlMapper(module);\n+        assertEquals(\"<String>custom:foo</String>\", xml.writeValueAsString(\"foo\"));\n+    }\n+    \n+    // manual 'test' to see \"what would JAXB do?\"\n+    /*\n+    public void testJAXB() throws Exception\n+    {\n+        StringWriter sw = new StringWriter();\n+        javax.xml.bind.JAXB.marshal(new StringListBean(\"a\", \"b\", \"c\"), sw);\n+        System.out.println(\"JAXB -> \"+sw);\n+    }\n+    */\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerializationAttr.java\n+package com.fasterxml.jackson.dataformat.xml.ser;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class TestSerializationAttr extends XmlTestBase\n+{\n+    static class NsAttrBean\n+    {\n+        @JacksonXmlProperty(namespace=\"http://foo\", isAttribute=true)\n+        public String attr = \"3\";\n+    }\n+\n+    @JacksonXmlRootElement(localName=\"test\", namespace=\"http://root\")\n+    static class Issue19Bean\n+    {\n+        @JsonProperty\n+        @JacksonXmlProperty(namespace = \"http://my.ns\")\n+        public boolean booleanA = true;\n+\n+        @JsonProperty\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String id = \"abc\";\n+    }\n+\n+    public class Jurisdiction {\n+        @JacksonXmlProperty(isAttribute=true)\n+        protected String name = \"Foo\";\n+        @JacksonXmlProperty(isAttribute=true)\n+        protected int value = 13;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Set up\n+    /**********************************************************\n+     */\n+\n+    protected XmlMapper _xmlMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        _xmlMapper = new XmlMapper();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testSimpleNsAttr() throws IOException\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new NsAttrBean());\n+        xml = removeSjsxpNamespace(xml);\n+        // here we assume woodstox automatic prefixes, not very robust but:\n+        assertEquals(\"<NsAttrBean xmlns:wstxns1=\\\"http://foo\\\" wstxns1:attr=\\\"3\\\"/>\", xml);\n+    }\n+\n+    public void testIssue19() throws IOException\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new Issue19Bean());\n+        xml = removeSjsxpNamespace(xml);\n+        xml = xml.replaceAll(\"\\\"\", \"'\");\n+        // as with above, assumes exact NS allocation strategy, not optimal:\n+        assertEquals(\"<test xmlns='http://root' id='abc'>\"\n+        \t\t+\"<wstxns1:booleanA xmlns:wstxns1='http://my.ns'>true</wstxns1:booleanA></test>\",\n+        \txml);\n+    }\n+\n+    public void testIssue6() throws IOException\n+    {\n+        assertEquals(\"<Jurisdiction name=\\\"Foo\\\" value=\\\"13\\\"/>\",\n+                _xmlMapper.writeValueAsString(new Jurisdiction()));\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+    \n+    // manual 'test' to see \"what would JAXB do?\"\n+    /*\n+    public void testJAXB() throws Exception\n+    {\n+        StringWriter sw = new StringWriter();\n+        javax.xml.bind.JAXB.marshal(new StringListBean(\"a\", \"b\", \"c\"), sw);\n+        System.out.println(\"JAXB -> \"+sw);\n+    }\n+    */\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerializationManual.java\n+package com.fasterxml.jackson.dataformat.xml.ser;\n+\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+\n+import javax.xml.namespace.QName;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n+\n+public class TestSerializationManual extends XmlTestBase\n+{\n+    public static class Value {\n+        public int num;\n+\n+        public Value(int n) { num = n; }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testIssue54() throws Exception\n+    {\n+        XmlMapper xmlMapper = new XmlMapper();\n+        xmlMapper.enable(ToXmlGenerator.Feature.WRITE_XML_DECLARATION);\n+        StringWriter sw = new StringWriter();\n+        ToXmlGenerator generator = (ToXmlGenerator) xmlMapper.getFactory().createGenerator(sw);\n+        generator.initGenerator();\n+\n+        generator.setNextName(new QName(\"items\"));\n+        generator.writeStartObject();\n+        ArrayList<Value> values = new ArrayList<Value>();\n+        values.add(new Value(13));\n+        values.add(new Value(456));\n+        for (Value value : values) {\n+            generator.writeFieldName(\"foo\");\n+            generator.setNextName(new QName(\"item\"));\n+            generator.writeObject(value);\n+        }\n+        generator.writeEndObject();\n+        generator.close();\n+        \n+        String xml = sw.toString();\n+        \n+        // Remove XML declaration\n+        assertTrue(xml.startsWith(\"<?xml version\"));\n+        int ix = xml.indexOf(\"?>\");\n+        xml = xml.substring(ix+2).trim();\n+        \n+        assertEquals(\"<items><item><num>13</num></item><item><num>456</num></item></items>\", xml);\n+   }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerializationOrdering.java\n+package com.fasterxml.jackson.dataformat.xml.ser;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import com.fasterxml.jackson.dataformat.xml.*;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+public class TestSerializationOrdering extends XmlTestBase\n+{\n+    @JsonPropertyOrder({\"a\", \"c\" })\n+    static class Bean91 {\n+        public String a;\n+        @JacksonXmlProperty(isAttribute = true)\n+        public String b;\n+        public String c;\n+\n+        public Bean91(String a, String b, String c) {\n+            this.a = a;\n+            this.b = b;\n+            this.c = c;\n+        }\n+    }\n+\n+    public void testOrdering() throws Exception\n+    {\n+        XmlMapper xmlMapper = new XmlMapper();\n+        String xml = xmlMapper.writeValueAsString(new Bean91(\"1\", \"2\", \"3\"));\n+        assertEquals(\"<Bean91 b=\\\"2\\\"><a>1</a><c>3</c></Bean91>\", xml);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerializerCustom.java\n+package com.fasterxml.jackson.dataformat.xml.ser;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+/**\n+ * Unit test(s) for [Issue#42], problems with custom (de)serializer.\n+ */\n+@SuppressWarnings(\"serial\")\n+public class TestSerializerCustom extends XmlTestBase\n+{\n+    @JsonPropertyOrder({ \"name\", \"obj\" })\n+    static class Item {\n+        public String name;\n+        public Foo obj;\n+        public Item(String name, Foo obj) {\n+          this.name = name;\n+          this.obj = obj;\n+        }\n+    }\n+\n+    static class Foo {\n+        public String name;\n+        protected Foo() { }\n+        public Foo(String name) {\n+          this.name = name;\n+        }\n+    }\n+\n+    static class ItemDeserializer extends StdDeserializer<Item> {\n+        public ItemDeserializer() {\n+          super(Item.class);\n+        }\n+\n+        @Override\n+        public Item deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n+          ObjectCodec oc = jp.getCodec();\n+          JsonNode json = oc.readTree(jp);\n+          JsonNode foo = json.get(\"obj\");\n+          if (foo == null) {\n+              throw new IllegalStateException(\"missing foo property\");\n+          }\n+          return new Item(json.path(\"name\").asText(),\n+                  oc.treeToValue(foo, Foo.class));\n+        }\n+    }\n+\n+    public class ItemSerializer extends StdSerializer<Item> {\n+        public ItemSerializer() {\n+          super(Item.class);\n+        }\n+\n+        @Override\n+        public void serialize(Item value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n+          jgen.writeStartObject();\n+          jgen.writeObjectField(\"obj\", value.obj);\n+          jgen.writeStringField(\"name\", value.name);\n+          jgen.writeEndObject();\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testIssue42() throws Exception\n+    {\n+        XmlMapper xmlMapper = new XmlMapper();\n+        SimpleModule m = new SimpleModule(\"module\", new Version(1,0,0,null,null,null));\n+        m.addSerializer(Item.class, new ItemSerializer());\n+        m.addDeserializer(Item.class, new ItemDeserializer());\n+        xmlMapper.registerModule(m);\n+\n+        Item value = new Item(\"itemName\", new Foo(\"fooName\"));\n+        String xml = xmlMapper.writeValueAsString(value);\n+        \n+        Item result = xmlMapper.readValue(xml, Item.class);\n+        assertNotNull(result);\n+        assertEquals(\"itemName\", result.name);\n+        assertNotNull(result.obj);\n+        assertEquals(\"fooName\", result.obj.name);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestXmlDeclaration.java\n+package com.fasterxml.jackson.dataformat.xml.ser;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n+\n+public class TestXmlDeclaration extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+    \n+    public void testXml10Declaration() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        mapper.configure(ToXmlGenerator.Feature.WRITE_XML_DECLARATION, true);\n+        String xml = mapper.writeValueAsString(new StringBean(\"123\"));\n+        assertEquals(xml, \"<?xml version='1.0' encoding='UTF-8'?><StringBean><text>123</text></StringBean>\");\n+    }\n+\n+    public void testXml11Declaration() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        mapper.configure(ToXmlGenerator.Feature.WRITE_XML_1_1, true);\n+        String xml = mapper.writeValueAsString(new StringBean(\"abcd\"));\n+        assertEquals(xml, \"<?xml version='1.1' encoding='UTF-8'?><StringBean><text>abcd</text></StringBean>\");\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/text/TestTextValue.java\n+package com.fasterxml.jackson.dataformat.xml.text;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.dataformat.xml.JacksonXmlModule;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class TestTextValue extends XmlTestBase\n+{\n+    static class Simple\n+    {\n+        @JacksonXmlProperty(isAttribute=true)\n+        // same as: @javax.xml.bind.annotation.XmlAttribute\n+        public int a = 13;\n+\n+        @JacksonXmlText\n+        // about same as: @javax.xml.bind.annotation.XmlValue\n+        public String text = \"something\";\n+    }\n+\t\n+    // [Issue#24]\n+\n+    static class Main {\n+        @JsonProperty(\"com.test.stack\") public Stack stack;\n+    }\n+    static class Stack {\n+        public String name;\n+\n+        @JsonProperty(\"com.test.stack.slot\")\n+        public Slot slot;\n+    }\n+    static class Slot {\n+        @JsonProperty(\"name\")\n+        public String name;\n+\n+        @JsonProperty(\"id\")\n+        public String id;\n+\n+        @JsonProperty(\"height\")\n+        public String height;\n+\n+        @JsonProperty(\"width\")\n+        public String width;\n+\n+        @JacksonXmlText\n+        public String value;\n+    }\n+\n+    static class JAXBStyle\n+    {\n+        public String value;\n+    }\n+\n+    // [Issue#66]\n+    static class Issue66Bean\n+    {\n+        @JacksonXmlProperty(isAttribute = true)\n+        protected String id;\n+\n+        @JacksonXmlText\n+        protected String textValue;\n+    }\n+\n+    // [Issue#72]\n+    \n+    static class TextOnlyBean\n+    {\n+        @JacksonXmlText\n+        protected String textValue;\n+\n+        public TextOnlyBean() { }\n+        public TextOnlyBean(String str, boolean foo) { textValue = str; }\n+    }\n+\n+    @JsonPropertyOrder({ \"a\", \"b\" })\n+    static class TextOnlyWrapper\n+    {\n+        public TextOnlyBean a, b;\n+\n+        public TextOnlyWrapper() { }\n+        public TextOnlyWrapper(String a, String b) {\n+            this.a = new TextOnlyBean(a, true);\n+            this.b = new TextOnlyBean(b, true);\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    \n+    public void testSerializeAsText() throws IOException\n+    {\n+        String xml = MAPPER.writeValueAsString(new Simple());\n+        assertEquals(\"<Simple a=\\\"13\\\">something</Simple>\", xml);\n+        // [Issue#56]: should work with indentation as well\n+        xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(new Simple());\n+        assertEquals(\"<Simple a=\\\"13\\\">something</Simple>\", xml);\n+    }\n+\n+    public void testDeserializeAsText() throws IOException\n+    {\n+        Simple result = MAPPER.readValue(\"<Simple a='99'>else</Simple>\", Simple.class);\n+        assertEquals(99, result.a);\n+        assertEquals(\"else\", result.text);\n+    }\n+    \n+    public void testIssue24() throws Exception\n+    {\n+        final String TEXT = \"+/null/this is a long string\";\n+        final String XML =\n+    \t\t\t\"<main>\\n\"\n+    \t\t\t+\"<com.test.stack name='stack1'>\\n\"\n+    \t\t\t+\"<com.test.stack.slot height='0' id='0' name='slot0' width='0'>\"\n+    \t\t\t+TEXT\n+    \t\t\t+\"</com.test.stack.slot>\\n\"\n+    \t\t\t+\"</com.test.stack>\\n\"\n+    \t\t\t+\"</main>\";\n+        Main main = MAPPER.readValue(XML, Main.class);\n+        assertNotNull(main.stack);\n+        assertNotNull(main.stack.slot);\n+        assertEquals(TEXT, main.stack.slot.value);\n+    }\n+\n+    // for [Issue#36]\n+    public void testAlternateTextElementName() throws IOException\n+    {\n+        final String XML = \"<JAXBStyle>foo</JAXBStyle>\";\n+        // first: verify that without change, POJO would not match:\n+        try {\n+            MAPPER.readValue(XML, JAXBStyle.class);\n+            fail(\"Should have failed\");\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"Unrecognized\");\n+        }\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setXMLTextElementName(\"value\");\n+        XmlMapper mapper = new XmlMapper(module);\n+        JAXBStyle pojo = mapper.readValue(XML, JAXBStyle.class);\n+        assertEquals(\"foo\", pojo.value);\n+    }\n+\n+    // [Issue#66], implicit property from \"XmlText\"\n+    public void testIssue66() throws Exception\n+    {\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(false);\n+        XmlMapper mapper = new XmlMapper(module);\n+        final String XML = \"<Issue66Bean id=\\\"id\\\">text</Issue66Bean>\";\n+\n+        // let's start with deserialization\n+        Issue66Bean node = mapper.readValue(XML, Issue66Bean.class);\n+        assertEquals(\"id\", node.id);\n+        assertEquals(\"text\", node.textValue);\n+\n+        // Let's serialize too\n+        String json = mapper.writeValueAsString(node);\n+        assertEquals(XML, json);\n+    }\n+\n+    // [Issue#72]\n+    public void testTextOnlyPojo() throws Exception\n+    {\n+        XmlMapper mapper = xmlMapper(true);\n+        TextOnlyWrapper input = new TextOnlyWrapper(\"foo\", \"bar\");\n+        // serialization should work fine\n+        String xml = mapper.writeValueAsString(input);\n+        assertEquals(\"<TextOnlyWrapper><a>foo</a><b>bar</b></TextOnlyWrapper>\", xml);\n+        // but how about deser?\n+        TextOnlyWrapper result = mapper.readValue(xml, TextOnlyWrapper.class);\n+        assertNotNull(result);\n+        assertEquals(\"foo\", result.a.textValue);\n+        assertEquals(\"bar\", result.b.textValue);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/text/TestXmlText.java\n+package com.fasterxml.jackson.dataformat.xml.text;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText;\n+\n+public class TestXmlText extends XmlTestBase\n+{\n+    @JsonPropertyOrder({\"first\",\"second\"})\n+    class Data{\n+        @JacksonXmlText\n+        public String first;\n+        public String second;\n+        public Data(String first, String second) {\n+            this.first = first;\n+            this.second = second;\n+        }\n+    }\n+\n+    public void testXmlTextWithSuppressedValue() throws Exception\n+    {\n+        final XmlMapper mapper = new XmlMapper();\n+        mapper.setSerializationInclusion(Include.NON_EMPTY);\n+        String xml = mapper.writeValueAsString(new Data(\"\",\"second\"));\n+        String expectedXml = \"<Data><second>second</second></Data>\";\n+        assertEquals(expectedXml, xml);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/Issue43Test.java\n+package com.fasterxml.jackson.dataformat.xml.unwrapped;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class Issue43Test extends XmlTestBase\n+{\n+    static class Name {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String language;\n+\n+        @JacksonXmlText\n+        public String text;\n+\n+//        public String data;\n+\n+        public Name() { }\n+    }\n+\n+    static class RoomName {\n+        @JacksonXmlElementWrapper(localName = \"names\", useWrapping=true)\n+        @JsonProperty(\"name\")\n+        public List<Name> names;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+    \n+    public void testIssue43() throws Exception\n+    {\n+        String xmlData = \"<roomName><names>\"\n+                +\"<name language=\\\"en\\\">SPECIAL</name>\"\n+                +\"</names></roomName>\";\n+\n+        XmlMapper xmlMapper = new XmlMapper();\n+        RoomName roomName = xmlMapper.readValue(xmlData, RoomName.class);\n+        assertEquals(1, roomName.names.size());\n+        assertEquals(\"SPECIAL\", roomName.names.get(0).text);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestListsUnwrapped.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestListsUnwrapped.java\n package com.fasterxml.jackson.dataformat.xml.unwrapped;\n+\n+import java.util.List;\n \n import javax.xml.bind.annotation.*;\n \n \n     static class DefaultList {\n         public Value[] value;\n+    }\n+\n+    // [Issue#64]\n+    static class Optionals {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Optional> optional;\n+    } \n+\n+    static class Optional {\n+        @JacksonXmlText\n+        public String number = \"NOT SET\";\n+\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String type = \"NOT SET\";\n+\n+        public Optional() { }\n     }\n     \n     /*\n         assertNotNull(output.value);\n         assertEquals(1, output.value.length);\n     }\n-    \n+\n+    // // [Issue#64]\n+    public void testOptionalsWithMissingType() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+//        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>\",\n+        Optionals ob = mapper.readValue(\"<MultiOptional><optional>123-456-7890</optional></MultiOptional>\",\n+                Optionals.class);\n+        assertNotNull(ob);\n+        assertNotNull(ob.optional);\n+        assertEquals(1, ob.optional.size());\n+\n+//            System.err.println(\"ob: \" + ob); // works fine\n+\n+        Optional opt = ob.optional.get(0);\n+        assertEquals(\"123-456-7890\", opt.number);\n+        assertEquals(\"NOT SET\", opt.type);\n+    }\n+\n     /*\n     void withJAXB(Object ob) throws Exception\n     {", "timestamp": 1395430973, "metainfo": ""}