{"sha": "09c556f435e63c5265c5a01af59b4346ad15f456", "log": "...", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/Issue43Test.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class Issue43Test extends XmlTestBase\n+{\n+    static class Name {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String language;\n+\n+        @JacksonXmlText\n+        public String text;\n+\n+//        public String data;\n+\n+        public Name() { }\n+    }\n+\n+    static class RoomName {\n+        @JacksonXmlElementWrapper(localName = \"names\", useWrapping=true)\n+        @JsonProperty(\"name\")\n+        public List<Name> names;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+    \n+    public void testIssue43() throws Exception\n+    {\n+        String xmlData = \"<roomName><names>\"\n+                +\"<name language=\\\"en\\\">SPECIAL</name>\"\n+                +\"</names></roomName>\";\n+\n+        XmlMapper xmlMapper = new XmlMapper();\n+        RoomName roomName = xmlMapper.readValue(xmlData, RoomName.class);\n+        assertEquals(1, roomName.names.size());\n+        assertEquals(\"SPECIAL\", roomName.names.get(0).text);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListDeserializationTest.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class ListDeserializationTest extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    @JacksonXmlRootElement(localName = \"person\", namespace =\"http://example.org/person\" )\n+    public static class Person\n+    {\n+        @JacksonXmlProperty( isAttribute = true )\n+        public String id;\n+        public String name;\n+        public int age;\n+\n+        @JacksonXmlElementWrapper(localName = \"notes\")\n+        @JacksonXmlProperty(localName = \"note\" )\n+        public List<String> notes = new ArrayList<String>();\n+\n+        public Person() { }\n+        public Person(String name, int age) {\n+            this.name = name;\n+            this.age = age;\n+        }\n+    }\n+\n+    public static class PersonWithGetters\n+    {\n+       @JacksonXmlProperty( isAttribute = true )\n+       public String id;\n+\n+       protected List<String> _notes = new ArrayList<String>();\n+              \n+       public PersonWithGetters() { }\n+       public PersonWithGetters(String id) {\n+           this.id = id;\n+       }\n+\n+       @JacksonXmlElementWrapper(localName = \"notes\")\n+       @JacksonXmlProperty( localName = \"note\" )\n+       public List<String> getStuff() {\n+           return _notes;\n+       }\n+\n+       public void setStuff(List<String> n) {\n+           _notes = n;\n+       }\n+    }\n+\n+    static class ListBeanWrapped\n+    {\n+        @JacksonXmlElementWrapper\n+        public List<Integer> values;\n+    }\n+\n+    static class ListBeanUnwrapped\n+    {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Integer> values;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    {\n+        // easier for eye:\n+        MAPPER.enable(SerializationFeature.INDENT_OUTPUT);\n+    }\n+\n+    /* Issue#17 [https://github.com/FasterXML/jackson-dataformat-xml/issues/17]\n+     * \n+     * Problems deserializing otherwise properly wrapped lists\n+     */\n+    public void testWrappedList() throws Exception\n+    {\n+        Person p = new Person( \"Name\", 30 );\n+        p.notes.add(\"note 1\");\n+        p.notes.add(\"note 2\");\n+        String xml = MAPPER.writeValueAsString( p );\n+        Person result = MAPPER.readValue(xml, Person.class);\n+        assertNotNull(result);\n+        assertEquals(\"Name\", result.name);\n+        assertEquals(30, result.age);\n+        assertEquals(2, result.notes.size());\n+        assertEquals(\"note 1\", result.notes.get(0));\n+        assertEquals(\"note 2\", result.notes.get(1));\n+    }\n+\n+    public void testWrappedListWithGetters() throws Exception\n+    {\n+        PersonWithGetters p = new PersonWithGetters(\"abc\");\n+        p._notes.add(\"note 1\");\n+        p._notes.add(\"note 2\");\n+        String xml = MAPPER.writeValueAsString( p );\n+        PersonWithGetters result = MAPPER.readValue(xml, PersonWithGetters.class);\n+        assertNotNull(result);\n+        assertEquals(\"abc\", result.id);\n+        assertEquals(2, result._notes.size());\n+        assertEquals(\"note 1\", result._notes.get(0));\n+        assertEquals(\"note 2\", result._notes.get(1));\n+    }\n+\n+    public void testWrappedListBeanDeser() throws Exception\n+    {\n+        ListBeanWrapped bean = MAPPER.readValue(\n+                \"<ListBeanWrapped><values><values>1</values><values>2</values><values>3</values></values></ListBeanWrapped>\",\n+                ListBeanWrapped.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.values);\n+        assertEquals(3, bean.values.size());\n+        assertEquals(Integer.valueOf(1), bean.values.get(0));\n+        assertEquals(Integer.valueOf(2), bean.values.get(1));\n+        assertEquals(Integer.valueOf(3), bean.values.get(2));\n+    }\n+\n+    // for [Issue#33]\n+    public void testWrappedListWithAttribute() throws Exception\n+    {\n+        ListBeanWrapped bean = MAPPER.readValue(\n+                \"<ListBeanWrapped><values id='123'><values>1</values><values>2</values></values></ListBeanWrapped>\",\n+                ListBeanWrapped.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.values);\n+        if (bean.values.size() < 2) { // preliminary check\n+            fail(\"List should have 2 entries, had \"+bean.values.size());\n+        }\n+        assertEquals(Integer.valueOf(1), bean.values.get(0));\n+        assertEquals(Integer.valueOf(2), bean.values.get(1));\n+        assertEquals(2, bean.values.size());\n+    }\n+\n+    public void testUnwrappedListBeanDeser() throws Exception\n+    {\n+        /*\n+        ListBeanUnwrapped foo = new ListBeanUnwrapped();\n+        foo.values = new ArrayList<Integer>();\n+        foo.values.add(1);\n+        foo.values.add(2);\n+        foo.values.add(3);\n+System.out.println(\"List -> \"+MAPPER.writeValueAsString(foo));\n+*/\n+        \n+        ListBeanUnwrapped bean = MAPPER.readValue(\n+                \"<ListBeanUnwrapped><values>1</values><values>2</values><values>3</values></ListBeanUnwrapped>\",\n+                ListBeanUnwrapped.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.values);\n+        assertEquals(3, bean.values.size());\n+        assertEquals(Integer.valueOf(1), bean.values.get(0));\n+        assertEquals(Integer.valueOf(2), bean.values.get(1));\n+        assertEquals(Integer.valueOf(3), bean.values.get(2));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListRoundtripTest.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class ListRoundtripTest extends XmlTestBase\n+{\n+    @JacksonXmlRootElement(localName=\"parents\")\n+    public static class Parents {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Parent> parent = new ArrayList<Parent>();\n+    }\n+\n+    @JsonPropertyOrder({ \"name\", \"desc\", \"prop\" })\n+    public static class Parent {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String name;\n+\n+        public String description;\n+      \n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Prop> prop = new ArrayList<Prop>();\n+\n+        public Parent() { }\n+        public Parent(String name, String desc) {\n+            this.name = name;\n+            description = desc;\n+        }\n+    }\n+\n+    static class Prop {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String name;\n+\n+        public String value;\n+\n+        public Prop() { }\n+        public Prop(String name, String value) {\n+            this.name = name;\n+            this.value = value;\n+        }\n+    }\n+\n+    // For [Issue#58]\n+    @JacksonXmlRootElement(localName = \"point\")\n+    static class Point {\n+        @JacksonXmlProperty(localName = \"x\", isAttribute = true)\n+        int x;\n+        @JacksonXmlProperty(localName = \"y\", isAttribute = true)\n+        int y;\n+\n+        public Point() { }\n+        public Point(int x, int y) { this.x = x; this.y = y; }\n+    }\n+\n+    @JacksonXmlRootElement(localName = \"Points\")\n+    static class PointContainer {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        @JacksonXmlProperty(localName = \"point\")\n+        public List<Point> points;\n+    }\n+\n+    // For [Issue#64]\n+    static class Optional {\n+        @JacksonXmlText\n+        public String number = \"NOT SET\";\n+\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String type = \"NOT SET\";\n+    }\n+\n+    static class Optionals {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Optional> optional;\n+    } \n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    { // easier for eye, uncomment for testing\n+//        MAPPER.enable(SerializationFeature.INDENT_OUTPUT);\n+    }\n+    \n+    public void testParentListRoundtrip() throws Exception\n+    {\n+        Parents root = new Parents();\n+        Parent parent1 = new Parent(\"a\", \"First\");\n+        root.parent.add(parent1);\n+        parent1.prop.add(new Prop(\"width\", \"13\"));\n+        parent1.prop.add(new Prop(\"height\", \"10\"));\n+        Parent parent2 = new Parent(\"b\", \"Second\");\n+        parent2.prop.add(new Prop(\"x\", \"1\"));\n+        parent2.prop.add(new Prop(\"y\", \"2\"));\n+        root.parent.add(parent2);\n+\n+        String xml = MAPPER.writeValueAsString(root);\n+        assertNotNull(xml);\n+\n+        // then bring it back\n+        Parents result = MAPPER.readValue(xml, Parents.class);\n+        assertNotNull(result.parent);\n+        assertEquals(2, result.parent.size());\n+        Parent p2 = result.parent.get(1);\n+        assertNotNull(p2);\n+        assertEquals(\"b\", p2.name);\n+        assertEquals(\"Second\", p2.description);\n+\n+        assertEquals(2, p2.prop.size());\n+        Prop prop2 = p2.prop.get(1);\n+        assertNotNull(prop2);\n+        assertEquals(\"2\", prop2.value);\n+    }\n+\n+    public void testListWithAttrOnlyValues() throws Exception\n+    {\n+        PointContainer obj = new PointContainer();\n+        obj.points = new ArrayList<Point>();\n+        obj.points.add(new Point(1, 2));\n+        obj.points.add(new Point(3, 4));\n+        obj.points.add(new Point(5, 6));\n+\n+        String xml = MAPPER.writeValueAsString(obj);\n+\n+        PointContainer converted = MAPPER.readValue(xml, PointContainer.class);\n+\n+        assertEquals(3, converted.points.size());\n+        assertNotNull(converted.points.get(0));\n+        assertNotNull(converted.points.get(1));\n+        assertNotNull(converted.points.get(2));\n+\n+        assertEquals(2, converted.points.get(0).y);\n+        assertEquals(4, converted.points.get(1).y);\n+        assertEquals(6, converted.points.get(2).y);\n+    }\n+\n+    // // [Issue#64]\n+    \n+    public void testOptionals() throws Exception\n+    {\n+        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>\",\n+                Optionals.class);\n+        assertNotNull(ob);\n+        assertNotNull(ob.optional);\n+        assertEquals(1, ob.optional.size());\n+//        System.err.println(\"ob: \" + ob); // works fine\n+        Optional opt = ob.optional.get(0);\n+        assertEquals(\"123-456-7890\", opt.number);\n+        assertEquals(\"work\", opt.type);\n+    }\n+\n+    /*// comment out for release\n+    public void testOptionalsWithMissingType() throws Exception\n+    {\n+//        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>\",\n+        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional>123-456-7890</optional></MultiOptional>\",\n+                Optionals.class);\n+        assertNotNull(ob);\n+        assertNotNull(ob.optional);\n+        assertEquals(1, ob.optional.size());\n+\n+//            System.err.println(\"ob: \" + ob); // works fine\n+\n+        Optional opt = ob.optional.get(0);\n+        assertEquals(\"123-456-7890\", opt.number);\n+        assertEquals(\"NOT SET\", opt.type);\n+    }\n+*/    \n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListSerializationTest.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+\n+public class ListSerializationTest extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+    static class ListBean\n+    {\n+        public final List<Integer> values = new ArrayList<Integer>();\n+\n+        public ListBean() { }\n+        public ListBean(int... ints) {\n+            for (int i : ints) {\n+                values.add(Integer.valueOf(i));\n+            }\n+        }\n+    }\n+\n+    static class StringListBean\n+    {\n+        // to see what JAXB gives, uncomment:\n+        //@javax.xml.bind.annotation.XmlElementWrapper(name=\"stringList\")\n+        @JacksonXmlElementWrapper(localName=\"stringList\")\n+        public List<StringBean> strings;\n+        \n+        public StringListBean() { strings = new ArrayList<StringBean>(); }\n+        public StringListBean(String... texts)\n+        {\n+            strings = new ArrayList<StringBean>();\n+            for (String text : texts) {\n+                strings.add(new StringBean(text));\n+            }\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+ \n+    public void testSimpleWrappedList() throws IOException\n+    {\n+        String xml = MAPPER.writeValueAsString(new ListBean(1, 2, 3));\n+        xml = removeSjsxpNamespace(xml);\n+        // 06-Dec-2010, tatu: Not completely ok; should default to not using wrapper...\n+        assertEquals(\"<ListBean><values><values>1</values><values>2</values><values>3</values></values></ListBean>\", xml);\n+    }\n+\n+    public void testStringList() throws IOException\n+    {\n+        StringListBean list = new StringListBean(\"a\", \"b\", \"c\");\n+        String xml = MAPPER.writeValueAsString(list);\n+        xml = removeSjsxpNamespace(xml);\n+        // 06-Dec-2010, tatu: Not completely ok; should default to not using wrapper... but it's what we have now\n+        assertEquals(\"<StringListBean><stringList>\"\n+                +\"<strings><text>a</text></strings>\"\n+                +\"<strings><text>b</text></strings>\"\n+                +\"<strings><text>c</text></strings>\"\n+                +\"</stringList></StringListBean>\", xml);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedListsTest.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.dataformat.xml.JacksonXmlModule;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class NestedUnwrappedListsTest  extends XmlTestBase\n+{\n+    // // // Test\n+\n+    static class ServiceDelivery {\n+        public String responseTimestamp;\n+        public List<VehicleMonitoringDelivery> vehicleMonitoringDelivery;    \n+    }\n+\n+    static class VehicleMonitoringDelivery {\n+        public String responseTimestamp;\n+        public String validUntil;\n+        public List<VehicleActivity> vehicleActivity;\n+    }\n+\n+    static class VehicleActivity {\n+        public String recordedAtTime;    \n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Set up\n+    /**********************************************************************\n+     */\n+\n+    protected XmlMapper _xmlMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(false);\n+        _xmlMapper = new XmlMapper(module);\n+        _xmlMapper.setPropertyNamingStrategy(new PropertyNamingStrategy.PascalCaseStrategy());\n+        _xmlMapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    public void testNested1_2() throws Exception\n+    {\n+        final String XML =\n+\"<ServiceDelivery>\\n\"\n++\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"  <VehicleMonitoringDelivery>\\n\"\n++\"    <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"    <ValidUntil>2012-09-12T09:29:17.213-04:00</ValidUntil>\\n\"\n++\"    <VehicleActivity>\\n\"\n++\"      <RecordedAtTime>2012-09-12T09:28:07.536-04:00</RecordedAtTime>\\n\"\n++\"    </VehicleActivity>\\n\"\n++\"    <VehicleActivity>\\n\"\n++\"      <RecordedAtTime>2013-09-12T09:29:07.536-04:00</RecordedAtTime>\\n\"\n++\"    </VehicleActivity>\\n\"\n++\"  </VehicleMonitoringDelivery>\\n\"\n++\"</ServiceDelivery>\\n\"\n+                ;\n+        \n+        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n+        assertNotNull(svc);\n+        assertNotNull(svc.vehicleMonitoringDelivery);\n+        assertEquals(1, svc.vehicleMonitoringDelivery.size());\n+        VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);\n+        assertEquals(\"2012-09-12T09:28:17.213-04:00\", del.responseTimestamp);\n+        assertNotNull(del);\n+        assertNotNull(del.vehicleActivity);\n+        assertEquals(2, del.vehicleActivity.size());\n+        VehicleActivity act = del.vehicleActivity.get(1);\n+        assertNotNull(act);\n+        assertEquals(\"2013-09-12T09:29:07.536-04:00\", act.recordedAtTime);\n+    }\n+\n+    public void testNestedWithEmpty() throws Exception\n+    {\n+        final String XML =\n+\"<ServiceDelivery>\\n\"\n++\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"  <VehicleMonitoringDelivery>\\n\"\n++\"  </VehicleMonitoringDelivery>\\n\"\n++\"</ServiceDelivery>\\n\"\n+                ;\n+        \n+        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n+        assertNotNull(svc);\n+        assertNotNull(svc.vehicleMonitoringDelivery);\n+        assertEquals(0, svc.vehicleMonitoringDelivery.size());\n+    }\n+\n+    public void testNestedWithEmpty2() throws Exception\n+    {\n+        final String XML =\n+\"<ServiceDelivery>\\n\"\n++\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"  <VehicleMonitoringDelivery>\\n\"\n++\"    <VehicleActivity>\\n\"\n++\"    </VehicleActivity>\\n\"\n++\"  </VehicleMonitoringDelivery>\\n\"\n++\"</ServiceDelivery>\\n\"\n+                ;\n+        \n+        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n+        assertNotNull(svc);\n+        assertNotNull(svc.vehicleMonitoringDelivery);\n+        assertEquals(1, svc.vehicleMonitoringDelivery.size());\n+        VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);\n+        assertNotNull(del.vehicleActivity);\n+        assertEquals(0, del.vehicleActivity.size());\n+    }\n+    \n+    public void testNested1_2b() throws Exception\n+    {\n+        final String XML =\n+\"<ServiceDelivery>\\n\"\n++\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"  <VehicleMonitoringDelivery>\\n\"\n++\"    <VehicleActivity>\\n\"\n++\"      <RecordedAtTime>2012-09-12T09:28:07.536-04:00</RecordedAtTime>\\n\"\n++\"    </VehicleActivity>\\n\"\n++\"    <VehicleActivity>\\n\"\n++\"      <RecordedAtTime>2013-09-12T09:29:07.536-04:00</RecordedAtTime>\\n\"\n++\"    </VehicleActivity>\\n\"\n++\"    <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"    <ValidUntil>2012-09-12T09:29:17.213-04:00</ValidUntil>\\n\"\n++\"  </VehicleMonitoringDelivery>\\n\"\n++\"</ServiceDelivery>\\n\"\n+                ;\n+        \n+        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n+        assertNotNull(svc);\n+        assertEquals(\"2012-09-12T09:28:17.213-04:00\", svc.responseTimestamp);\n+        assertNotNull(svc.vehicleMonitoringDelivery);\n+        assertEquals(1, svc.vehicleMonitoringDelivery.size());\n+        VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);\n+        assertEquals(\"2012-09-12T09:29:17.213-04:00\", del.validUntil);\n+        assertNotNull(del);\n+        assertNotNull(del.vehicleActivity);\n+        assertEquals(2, del.vehicleActivity.size());\n+        VehicleActivity act = del.vehicleActivity.get(1);\n+        assertNotNull(act);\n+        assertEquals(\"2013-09-12T09:29:07.536-04:00\", act.recordedAtTime);\n+    }\n+    \n+    public void testNested2_1() throws Exception\n+    {\n+        final String XML =\n+\"<ServiceDelivery>\\n\"\n++\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"  <VehicleMonitoringDelivery>\\n\"\n++\"    <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"    <ValidUntil>2012-09-12T09:29:17.213-04:00</ValidUntil>\\n\"\n++\"    <VehicleActivity>\\n\"\n++\"      <RecordedAtTime>2012-09-12T09:28:07.536-04:00</RecordedAtTime>\\n\"\n++\"    </VehicleActivity>\\n\"\n++\"  </VehicleMonitoringDelivery>\\n\"\n++\"  <VehicleMonitoringDelivery>\\n\"\n++\"    <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"    <ValidUntil>2012-09-12T09:29:17.213-04:00</ValidUntil>\\n\"\n++\"    <VehicleActivity>\\n\"\n++\"      <RecordedAtTime>2012-09-12T09:28:07.536-04:00</RecordedAtTime>\\n\"\n++\"    </VehicleActivity>\\n\"\n++\"  </VehicleMonitoringDelivery>\\n\"\n++\"</ServiceDelivery>\\n\"\n+                ;\n+        \n+        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n+        assertNotNull(svc);\n+        assertEquals(\"2012-09-12T09:28:17.213-04:00\", svc.responseTimestamp);\n+        assertNotNull(svc.vehicleMonitoringDelivery);\n+        assertEquals(2, svc.vehicleMonitoringDelivery.size());\n+        VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(1);\n+        assertNotNull(del);\n+        assertNotNull(del.vehicleActivity);\n+        assertEquals(1, del.vehicleActivity.size());\n+        assertEquals(\"2012-09-12T09:28:07.536-04:00\", del.vehicleActivity.get(0).recordedAtTime);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/UnwrappedListsTest.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.*;\n+\n+import com.fasterxml.jackson.annotation.JsonRootName;\n+import com.fasterxml.jackson.dataformat.xml.JacksonXmlModule;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class UnwrappedListsTest extends XmlTestBase\n+{\n+    static class Value {\n+        public String v;\n+\n+        public Value() { }\n+        public Value(String str) { v = str; }\n+    }\n+\n+    @XmlRootElement(name=\"list\")\n+    @JsonRootName(\"list\")\n+    static class WrappedList {\n+        @XmlElementWrapper(name=\"WRAP\")\n+        @JacksonXmlElementWrapper(localName = \"WRAP\")\n+        public Value[] value;\n+    }\n+\n+    @XmlRootElement(name=\"list\")\n+    @JsonRootName(\"list\")\n+    static class UnwrappedList {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public Value[] value;\n+    }\n+\n+    static class DefaultList {\n+        public Value[] value;\n+    }\n+\n+    // [Issue#64]\n+    static class Optionals {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Optional> optional;\n+    } \n+\n+    static class Optional {\n+        @JacksonXmlText\n+        public String number = \"NOT SET\";\n+\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String type = \"NOT SET\";\n+\n+        public Optional() { }\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    public void testWrappedLists() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        WrappedList list = new WrappedList();\n+        list.value = new Value[] { new Value(\"a\"), new Value(\"b\") };\n+\n+        // First, serialize:\n+        \n+        String json = mapper.writeValueAsString(list);\n+//      withJAXB(list);\n+        assertEquals(\"<list><WRAP><value><v>a</v></value><value><v>b</v></value></WRAP></list>\", json);\n+\n+        // then deserialize back\n+        WrappedList output = mapper.readValue(json, WrappedList.class);\n+        assertNotNull(output);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+    }\n+    \n+    public void testUnwrappedLists() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+\n+        UnwrappedList list = new UnwrappedList();\n+        list.value = new Value[] { new Value(\"c\"), new Value(\"d\") };\n+        String json = mapper.writeValueAsString(list);\n+        \n+//        System.out.println(\"Unwrapped == \"+json);\n+//        withJAXB(list);\n+        assertEquals(\"<list><value><v>c</v></value><value><v>d</v></value></list>\", json);\n+\n+        // then deserialize back\n+        UnwrappedList output = mapper.readValue(json, UnwrappedList.class);\n+        assertNotNull(output);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+    \n+    }\n+\n+    /**\n+     * Test to verify that default wrapping setting is used\n+     */\n+    public void testDefaultWrapping() throws Exception\n+    {\n+        // by default, should be using wrapping, so:\n+        XmlMapper mapper = new XmlMapper();\n+        DefaultList input = new DefaultList();\n+        input.value = new Value[] { new Value(\"a\"), new Value(\"b\") };\n+        String json = mapper.writeValueAsString(input);\n+        assertEquals(\"<DefaultList><value><value><v>a</v></value><value><v>b</v></value></value></DefaultList>\", json);\n+        DefaultList output = mapper.readValue(json, DefaultList.class);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+\n+        // but can be changed not to use wrapping by default\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(false);\n+        mapper = new XmlMapper(module);\n+        json = mapper.writeValueAsString(input);\n+        assertEquals(\"<DefaultList><value><v>a</v></value><value><v>b</v></value></DefaultList>\", json);\n+        output = mapper.readValue(json, DefaultList.class);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+    }\n+\n+    public void testDefaultWrappingWithEmptyLists() throws Exception\n+    {\n+        // by default, should be using wrapping, so:\n+        XmlMapper mapper = new XmlMapper();\n+        String json = \"<DefaultList><value><value></value></value></DefaultList>\";\n+        DefaultList output = mapper.readValue(json, DefaultList.class);\n+        assertNotNull(output.value);\n+        assertEquals(1, output.value.length);\n+\n+        // but without, should work as well\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(false);\n+        mapper = new XmlMapper(module);\n+        json = \"<DefaultList><value></value></DefaultList>\";\n+        output = mapper.readValue(json, DefaultList.class);\n+        assertNotNull(output.value);\n+        assertEquals(1, output.value.length);\n+    }\n+\n+    // // [Issue#64]\n+    public void testOptionalsWithMissingType() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+//        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>\",\n+        Optionals ob = mapper.readValue(\"<MultiOptional><optional>123-456-7890</optional></MultiOptional>\",\n+                Optionals.class);\n+        assertNotNull(ob);\n+        assertNotNull(ob.optional);\n+        assertEquals(1, ob.optional.size());\n+\n+//            System.err.println(\"ob: \" + ob); // works fine\n+\n+        Optional opt = ob.optional.get(0);\n+        assertEquals(\"123-456-7890\", opt.number);\n+        assertEquals(\"NOT SET\", opt.type);\n+    }\n+\n+    /*\n+    void withJAXB(Object ob) throws Exception\n+    {\n+        JAXBContext jc = JAXBContext.newInstance(ob.getClass());\n+        Marshaller m = jc.createMarshaller();\n+        System.out.print(\"JAXB      -> \");\n+        StringWriter sw = new StringWriter();\n+        m.marshal(ob, sw);\n+        String xml = sw.toString();\n+        if (xml.indexOf(\"<?xml\") == 0) {\n+            xml = xml.substring(xml.indexOf(\"?>\")+2);\n+        }\n+        System.out.println(xml);\n+   }\n+   */\n+}", "timestamp": 1395431471, "metainfo": ""}