{"sha": "61d552a1231ccc9c61dad5ce4ad690fcddefe3a3", "log": "Fixing #45, sub-optimal indentation with attributes", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n \n     public void setNextIsUnwrapped(boolean isUnwrapped)\n     {\n-    \t_nextIsUnwrapped = isUnwrapped;\n+        _nextIsUnwrapped = isUnwrapped;\n     }\n     \n     public final void setNextName(QName name)\n         }\n         _writeContext = _writeContext.getParent();\n         if (_cfgPrettyPrinter != null) {\n-            _cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());\n+            // as per [Issue#45], need to suppress indentation if only attributes written:\n+            int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount();\n+            _cfgPrettyPrinter.writeEndObject(this, count);\n         } else {\n             _handleEndObject();\n         }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n     @Override\n     public void writeLeafElement(XMLStreamWriter2 sw,\n             String nsURI, String localName, int value)\n-                    throws XMLStreamException\n+        throws XMLStreamException\n     {\n         if (!_objectIndenter.isInline()) {\n             _objectIndenter.writeIndentation(sw, _nesting);\n     @Override\n     public void writeLeafElement(XMLStreamWriter2 sw,\n             String nsURI, String localName, long value)\n-                    throws XMLStreamException\n+        throws XMLStreamException\n     {\n         if (!_objectIndenter.isInline()) {\n             _objectIndenter.writeIndentation(sw, _nesting);\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestIndentation.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestIndentation.java\n \n import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n \n public class TestIndentation extends XmlTestBase\n {\n         \n         public IntWrapperBean() { }\n         public IntWrapperBean(int i) { wrapped = new IntWrapper(i); }\n+    }\n+\n+    // [Issue#45]\n+    static class AttrBean {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public int count = 3;\n+    }\n+\n+    static class AttrBean2 {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public int count = 3;\n+\n+        public int value = 14;\n     }\n     \n     /*\n \n         // should have at least one linefeed, space...\n         if (xml.indexOf('\\n') < 0 || xml.indexOf(' ') < 0) {\n-        \tfail(\"No indentation: XML == \"+xml);\n+            fail(\"No indentation: XML == \"+xml);\n         }\n         \n         // Let's verify we get similar stuff back, first:\n         assertEquals(1, result.size());\n         assertEquals(\"b\", map.get(\"a\"));\n     }\n-}\n+\n+    // [Issue#45]: Use of attributes should not force linefeed for empty elements\n+    public void testWithAttr() throws Exception\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new AttrBean());\n+        assertEquals(\"<AttrBean count=\\\"3\\\"/>\", xml);\n+        String xml2 = _xmlMapper.writeValueAsString(new AttrBean2());\n+        assertEquals(\"<AttrBean2 count=\\\"3\\\">\\n  <value>14</value>\\n</AttrBean2>\", xml2);\n+    }\n+}", "timestamp": 1358035392, "metainfo": ""}