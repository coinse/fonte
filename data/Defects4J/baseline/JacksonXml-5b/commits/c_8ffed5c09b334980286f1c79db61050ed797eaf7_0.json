{"sha": "8ffed5c09b334980286f1c79db61050ed797eaf7", "log": "Fix #117", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n         }\n \n         final int attrCount = _attributeCount;\n-        boolean isAttribute = xgen._nextIsAttribute;\n+        final boolean isAttribute = xgen._nextIsAttribute;\n         if (attrCount > 0) {\n             xgen.setNextIsAttribute(true);\n         }\n                 }\n             }\n             if (_anyGetterWriter != null) {\n+                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n+                // with accidental attributes otherwise\n+                xgen.setNextIsAttribute(false);\n                 _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n             }\n         } catch (Exception e) {\n             return;\n         }\n \n+        final boolean isAttribute = xgen._nextIsAttribute;\n         final int attrCount = _attributeCount;\n         if (attrCount > 0) {\n             xgen.setNextIsAttribute(true);\n         int i = 0;\n         try {\n             for (final int len = props.length; i < len; ++i) {\n-                if (i == attrCount) {\n+                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n+                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n+                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                     xgen.setNextIsAttribute(false);\n                 }\n                 // also: if this is property to write as text (\"unwrap\"), need to:\n                 }\n             }\n             if (_anyGetterWriter != null) {\n+                // For [#117]: not a clean fix, but with @JsonTypeInfo, we'll end up\n+                // with accidental attributes otherwise\n+                xgen.setNextIsAttribute(false);\n                 _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n             }\n         } catch (Exception e) {\n             _serializeWithObjectId(bean, jgen, provider, typeSer);\n             return;\n         }\n-\n         /* Ok: let's serialize type id as attribute, but if (and only if!)\n          * we are using AS_PROPERTY\n          */\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n     \n     /**\n      * Helper method that tries to remove unnecessary namespace\n-     * declaration that default JDK XML parser (SJSXP) seems fit\n+     * declaration that default JDK XML parser (SJSXP) sees fit\n      * to add.\n      */\n     protected static String removeSjsxpNamespace(String xml)\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerializationAttr.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerializationAttr.java\n package com.fasterxml.jackson.dataformat.xml.ser;\n \n import java.io.IOException;\n+import java.util.*;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.*;\n \n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n         @JacksonXmlProperty(isAttribute=true)\n         protected int value = 13;\n     }\n+\n+    @JacksonXmlRootElement(localName = \"dynaBean\", namespace = \"\")\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"class\", include = JsonTypeInfo.As.PROPERTY)\n+    public class DynaBean {\n+        private final Map<String, String> _properties = new TreeMap<String, String>();\n+\n+        public DynaBean(Map<String, String> values) {\n+            _properties.putAll(values);\n+        }\n+\n+        @JsonAnyGetter\n+        @JacksonXmlProperty(isAttribute = false)\n+        public Map<String, String> getProperties() {\n+            return _properties;\n+        }\n+    }    \n     \n     /*\n     /**********************************************************\n         assertEquals(\"<Jurisdiction name=\\\"Foo\\\" value=\\\"13\\\"/>\",\n                 _xmlMapper.writeValueAsString(new Jurisdiction()));\n     }\n+\n+    public void testIssue117AnySetterAttrs() throws IOException\n+    {\n+        Map<String, String> values = new HashMap<String, String>();\n+        values.put(\"prop1\", \"val1\");\n+\n+        String xml = _xmlMapper.writeValueAsString(new DynaBean(values));\n+        assertEquals(\"<dynaBean class=\\\"TestSerializationAttr$DynaBean\\\"><prop1>val1</prop1></dynaBean>\",\n+                removeSjsxpNamespace(xml));\n+    }\n     \n     /*\n     /**********************************************************", "timestamp": 1402550578, "metainfo": ""}