{"sha": "b7e0ed9125c16c2035feac70833b09dd1c5322f4", "log": "minor test cleanup", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n \n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n \n public abstract class XmlTestBase\n         super();\n     }\n \n-    protected static ObjectMapper newObjectMapper() {\n+    protected static XmlMapper newMapper() {\n         return new XmlMapper();\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/CaseInsensitiveDeserTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/CaseInsensitiveDeserTest.java\n     /********************************************************\n      */\n \n-    private final ObjectMapper MAPPER = newObjectMapper();\n+    private final ObjectMapper MAPPER = newMapper();\n \n-    private final ObjectMapper INSENSITIVE_MAPPER = newObjectMapper()\n+    private final ObjectMapper INSENSITIVE_MAPPER = newMapper()\n             .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\n \n     public void testCaseInsensitive1036() throws Exception\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/CaseInsensitiveDeser273Test.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/CaseInsensitiveDeser273Test.java\n     /********************************************************\n      */\n \n-    private final ObjectMapper INSENSITIVE_MAPPER = newObjectMapper()\n+    private final ObjectMapper INSENSITIVE_MAPPER = newMapper()\n             .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\n \n     // [dataformat-xml#273]\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/PolymorphicIssue4Test.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/PolymorphicIssue4Test.java\n \n     /*\n     /**********************************************************\n-    /* Set up\n+    /* Test methods\n     /**********************************************************\n      */\n \n-    protected XmlMapper _xmlMapper;\n+    protected final XmlMapper MAPPER = newMapper();\n \n-    // let's actually reuse XmlMapper to make things bit faster\n-    @Override\n-    public void setUp() throws Exception {\n-        super.setUp();\n-        _xmlMapper = new XmlMapper();\n-    }\n-    \n-    /*\n-    /**********************************************************\n-    /* Unit tests\n-    /**********************************************************\n-     */\n-    \n     /* 19-Dec-2010, tatu: Let's hold off these tests, due to issues with inclusions.\n      */\n     // Does not work since array wrapping is not explicitly forced (unlike with collection\n     // property of a bean\n     public void testAsClassArray() throws Exception\n     {\n-        String xml = _xmlMapper.writeValueAsString(new SubTypeWithClassArray(\"Foobar\"));\n-        Object result = _xmlMapper.readValue(xml, BaseTypeWithClassArray.class);\n+        String xml = MAPPER.writeValueAsString(new SubTypeWithClassArray(\"Foobar\"));\n+        Object result = MAPPER.readValue(xml, BaseTypeWithClassArray.class);\n         assertNotNull(result);\n         assertEquals(SubTypeWithClassArray.class, result.getClass());\n         assertEquals(\"Foobar\", ((SubTypeWithClassArray) result).name);\n     // array context when writing...\n     public void testAsWrappedClassArray() throws Exception\n     {\n-        String xml = _xmlMapper.writeValueAsString(new ClassArrayWrapper(\"Foobar\"));\n-        ClassArrayWrapper result = _xmlMapper.readValue(xml, ClassArrayWrapper.class);\n+        String xml = MAPPER.writeValueAsString(new ClassArrayWrapper(\"Foobar\"));\n+        ClassArrayWrapper result = MAPPER.readValue(xml, ClassArrayWrapper.class);\n         assertNotNull(result);\n         assertEquals(SubTypeWithClassArray.class, result.wrapped.getClass());\n         assertEquals(\"Foobar\", ((SubTypeWithClassArray) result.wrapped).name);\n     }\n }\n-   ", "timestamp": 1516947822, "metainfo": ""}