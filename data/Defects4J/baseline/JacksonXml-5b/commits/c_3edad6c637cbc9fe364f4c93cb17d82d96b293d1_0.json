{"sha": "3edad6c637cbc9fe364f4c93cb17d82d96b293d1", "log": "...", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JAXBObjectId170Test.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JAXBObjectId170Test.java\n \n public class JAXBObjectId170Test extends XmlTestBase\n {\n-    static class Company {\n-        public List<Computer> computers;\n-        public List<Employee> employees;\n-        \n-        public Company() {\n-            computers = new ArrayList<Computer>();\n-        }\n+    static class Company\n+    {\n+        @XmlElementWrapper(name = \"computers\")\n+        @XmlElement(name = \"computer\")\n+        public List<Computer> computers = new ArrayList<Computer>();\n+\n+        @XmlElementWrapper(name = \"employees\")\n+        @XmlElement(name = \"employee\")\n+        public List<Employee> employees = new ArrayList<Employee>();\n+\n+        public Company() { }\n \n         public Company add(Computer computer) {\n             if (computers == null) {\n                 ;\n \n         XmlMapper mapper = new XmlMapper();\n+        XmlJaxbAnnotationIntrospector xmlIntr = new XmlJaxbAnnotationIntrospector(mapper.getTypeFactory());\n+        xmlIntr.setDefaultUseWrapper(false);\n         AnnotationIntrospector intr = XmlAnnotationIntrospector.Pair.instance\n-                (new XmlJaxbAnnotationIntrospector(mapper.getTypeFactory()), new JacksonAnnotationIntrospector());\n+                (xmlIntr, new JacksonAnnotationIntrospector());\n+\n+        // should be default but doesn't seem to be?\n         mapper.setAnnotationIntrospector(intr);\n-        // should be default but doesn't seem to be?\n-        mapper.setDefaultUseWrapper(true);\n \n         Company result = mapper.readValue(XML, Company.class);\n         assertNotNull(result);\n+        assertNotNull(result.employees);\n+        assertEquals(2, result.employees.size());\n+        Employee empl2 = result.employees.get(1);\n+        Computer comp2 = empl2.computer;\n+        assertEquals(DesktopComputer.class, comp2.getClass());\n+        assertEquals(\"Pattaya\", ((DesktopComputer) comp2).location);\n     }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/NestedUnwrappedLists180Test.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+public class NestedUnwrappedLists180Test  extends XmlTestBase\n+{\n+    static class Records {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Record> records = new ArrayList<Record>();\n+    }\n+\n+    static class Record {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Field> fields = new ArrayList<Field>();\n+    }\n+\n+    static class Field {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String name;\n+\n+        protected Field() { }\n+        public Field(String n) { name = n; }\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n+    public void testNestedUnwrappedLists180() throws Exception\n+    {\n+        /*\n+        Records recs = new Records();\n+        recs.records.add(new Record());\n+        recs.records.add(new Record());\n+        recs.records.add(new Record());\n+        recs.records.get(0).fields.add(new Field(\"a\"));\n+        recs.records.get(2).fields.add(new Field(\"b\"));\n+\n+        String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(recs);\n+        */\n+\n+        String xml =\n+\"<Records>\\n\"\n++\"  <records>\\n\"\n++\"    <fields name='a'/>\\n\"\n++\"  </records>\\n\"\n+\n+// Important: it's the empty CDATA here that causes breakage -- empty element would be fine\n+\n++\"  <records>\\n\"\n++\"  </records>\\n\"\n++\"  <records>\\n\"\n++\"   <fields name='b'/>\\n\"\n++\"  </records>\\n\"\n++\"</Records>\\n\"\n+;\n+        \n+//System.out.println(\"XML: \"+xml);\n+\n+        Records result = MAPPER.readValue(xml, Records.class);\n+        assertNotNull(result.records);\n+        assertEquals(3, result.records.size());\n+        assertEquals(1, result.records.get(2).fields.size());\n+        assertEquals(\"b\", result.records.get(2).fields.get(0).name);\n+    }\n+}", "timestamp": 1452094251, "metainfo": ""}