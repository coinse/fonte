{"sha": "f561a4a17bc073dffbb0d4505106d91491b59fb6", "log": "Merge branch 'master' of https://github.com/FasterXML/jackson-dataformat-xml", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n \n         // false -> not managed\n         FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n-                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n+                _parserFeatures, _xmlParserFeatures, _objectCodec, sr);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         }\n         return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n                 _objectCodec, sw);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Internal factory method overrides\n         } catch (XMLStreamException e) {\n             return StaxUtil.throwXmlAsIOException(e);\n         }\n-        FromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n+        FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n                 _objectCodec, sr);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         } catch (XMLStreamException e) {\n             return StaxUtil.throwXmlAsIOException(e);\n         }\n-        FromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n+        FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n                 _objectCodec, sr);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         } catch (XMLStreamException e) {\n             return StaxUtil.throwXmlAsIOException(e);\n         }\n-        FromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n+        FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n                 _objectCodec, sr);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         } catch (XMLStreamException e) {\n             return StaxUtil.throwXmlAsIOException(e);\n         }\n-        FromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n+        FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n                 _objectCodec, sr);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n         }\n         // 19-May-2015, tatu: Must ensure we use XML-specific indenter\n         _serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);\n+        // 21-Jun-2017, tatu: Seems like there are many cases in XML where ability to coerce empty\n+        //    String into `null` (where it otherwise is an error) is very useful.\n+        enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n \n     /**\n      * Enumeration that defines all togglable features for XML parsers.\n-     * None defined so far (2.6), so just a placeholder.\n      */\n     public enum Feature implements FormatFeature\n     {\n+        /**\n+         * Feature that indicates whether XML Empty elements (ones where there are\n+         * no separate start and end tages, but just one tag that ends with \"/>\")\n+         * are exposed as {@link JsonToken#VALUE_NULL}) or not. If they are not\n+         * returned as `null` tokens, they will be returned as {@link JsonToken#VALUE_STRING}\n+         * tokens with textual value of \"\" (empty String).\n+         *<p>\n+         * Default setting is `true` for backwards compatibility.\n+         *\n+         * @since 2.9\n+         */\n+        EMPTY_ELEMENT_AS_NULL(true)\n         ;\n \n         final boolean _defaultState;\n         _parsingContext = XmlReadContext.createRootContext(-1, -1);\n         // and thereby start a scope\n         _nextToken = JsonToken.START_OBJECT;\n-        _xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference());\n+        _xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference(),\n+                _formatFeatures);\n     }\n \n     @Override\n \n     public FromXmlParser enable(Feature f) {\n         _formatFeatures |= f.getMask();\n+        _xmlTokens.setFormatFeatures(_formatFeatures);\n         return this;\n     }\n \n     public FromXmlParser disable(Feature f) {\n         _formatFeatures &= ~f.getMask();\n+        _xmlTokens.setFormatFeatures(_formatFeatures);\n         return this;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n     final protected XMLStreamReader2 _xmlReader;\n \n     final protected Object _sourceReference;\n+\n+    /**\n+     * Bit flag composed of bits that indicate which\n+     * {@link FromXmlParser.Feature}s\n+     * are enabled.\n+     */\n+    protected int _formatFeatures;\n     \n     /*\n     /**********************************************************************\n     /**********************************************************************\n      */\n \n-    public XmlTokenStream(XMLStreamReader xmlReader, Object sourceRef)\n+    public XmlTokenStream(XMLStreamReader xmlReader, Object sourceRef,\n+            int formatFeatures)\n     {\n         _sourceReference = sourceRef;\n         // Let's ensure we point to START_ELEMENT...\n         _localName = _xmlReader.getLocalName();\n         _namespaceURI = _xmlReader.getNamespaceURI();\n         _attributeCount = _xmlReader.getAttributeCount();\n+        _formatFeatures = formatFeatures;\n     }\n \n     public XMLStreamReader2 getXmlReader() {\n         return _xmlReader;\n     }\n \n+    /**\n+     * @since 2.9\n+     */\n+    protected void setFormatFeatures(int f) {\n+        _formatFeatures = f;\n+    }\n+    \n     /*\n     /**********************************************************************\n     /* Public API\n         // START_ELEMENT...\n         return _initStartElement();\n     }\n-    \n+\n     private final String _collectUntilTag() throws XMLStreamException\n     {\n+        // 21-Jun-2017, tatu: Whether exposed as `null` or \"\" is now configurable...\n         if (_xmlReader.isEmptyElement()) {\n             _xmlReader.next();\n-            return null;\n-        }\n-\n-        StringBuilder text = new StringBuilder();\n-\n+            if (FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL.enabledIn(_formatFeatures)) {\n+                return null;\n+            }\n+            return \"\";\n+        }\n+\n+        String text = null;\n         while (true) {\n             switch (_xmlReader.next()) {\n             case XMLStreamConstants.START_ELEMENT:\n             case XMLStreamConstants.END_ELEMENT:\n             case XMLStreamConstants.END_DOCUMENT:\n-                return text.toString();\n+                return (text == null) ? \"\" : text;\n             // note: SPACE is ignorable (and seldom seen), not to be included\n             case XMLStreamConstants.CHARACTERS:\n             case XMLStreamConstants.CDATA:\n-                text.append(_xmlReader.getText());\n+                if (text == null) {\n+                    text = _xmlReader.getText();\n+                } else {\n+                    text += _xmlReader.getText();\n+                }\n                 break;\n             default:\n                 // any other type (proc instr, comment etc) is just ignored\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/EmptyStringValueTest.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class EmptyStringValueTest extends XmlTestBase\n+{\n+    static class Name {\n+        public String first;\n+        public String last;\n+\n+        public Name() { }\n+        public Name(String f, String l) {\n+            first = f;\n+            last = l;\n+        }\n+    }\n+\n+    static class Names {\n+        public List<Name> names = new ArrayList<Name>();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n+    public void testEmptyString162() throws Exception\n+    {\n+        Name name = MAPPER.readValue(\"<name><first>Ryan</first><last></last></name>\",\n+                Name.class);\n+        assertNotNull(name);\n+        assertEquals(\"Ryan\", name.first);\n+        assertEquals(\"\", name.last);\n+    }\n+\n+    public void testEmptyElement() throws Exception\n+    {\n+        final String XML = \"<name><first/><last></last></name>\";\n+        // Default settings: empty element becomes `null`:\n+        Name name = MAPPER.readValue(XML, Name.class);\n+        assertNotNull(name);\n+        assertNull(name.first);\n+        assertEquals(\"\", name.last);\n+\n+        // but can be changed\n+        XmlMapper mapper2 = new XmlMapper();\n+        mapper2.disable(FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL);\n+        name = mapper2.readValue(XML, Name.class);\n+        assertNotNull(name);\n+        assertEquals(\"\", name.first);\n+        assertEquals(\"\", name.last);\n+    }\n+\n+    public void testEmptyStringElement() throws Exception\n+    {\n+        // then with empty element\n+        StringBean bean = MAPPER.readValue(\"<StringBean><text></text></StringBean>\", StringBean.class);\n+        assertNotNull(bean);\n+        // empty String or null?\n+        // As per [dataformat-xml#162], really should be \"\", not null:\n+        assertEquals(\"\", bean.text);\n+//        assertNull(bean.text);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/SimpleStringValuesTest.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.Name;\n+import com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest.Names;\n+\n+public class SimpleStringValuesTest extends XmlTestBase\n+{\n+    protected static class Bean2\n+    {\n+        public String a, b;\n+\n+        @Override\n+        public String toString() {\n+            return \"[a=\"+a+\",b=\"+b+\"]\";\n+        }\n+    }\n+\n+    static class Issue167Bean {\n+        public String d;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests, basic\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    \n+    public void testSimpleStringElement() throws Exception\n+    {\n+        // first, simple one to verify baseline\n+        StringBean bean = MAPPER.readValue(\"<StringBean><text>text!</text></StringBean>\", StringBean.class);\n+        assertNotNull(bean);\n+        assertEquals(\"text!\", bean.text);\n+    }\n+\n+    public void testMissingString() throws Exception\n+    {\n+        StringBean baseline = new StringBean();\n+        // then missing\n+        StringBean bean = MAPPER.readValue(\"<StringBean />\", StringBean.class);\n+        assertNotNull(bean);\n+        assertEquals(baseline.text, bean.text);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests, with attributes\n+    /**********************************************************\n+     */\n+    \n+    public void testStringWithAttribute() throws Exception\n+    {\n+        // and then the money shot: with 'standard' attribute...\n+        StringBean bean = MAPPER.readValue(\"<StringBean><text xml:lang='fi'>Pulla</text></StringBean>\", StringBean.class);\n+        assertNotNull(bean);\n+        assertEquals(\"Pulla\", bean.text);\n+    }\n+\n+    public void testStringsWithAttribute() throws Exception\n+    {\n+        Bean2 bean = MAPPER.readValue(\n+                \"<Bean2>\\n\"\n+                +\"<a xml:lang='fi'>abc</a>\"\n+                +\"<b xml:lang='en'>def</b>\"\n+//                +\"<a>abc</a><b>def</b>\"\n+                +\"</Bean2>\\n\",\n+                Bean2.class);\n+        assertNotNull(bean);\n+        assertEquals(\"abc\", bean.a);\n+        assertEquals(\"def\", bean.b);\n+    }\n+    \n+    public void testStringArrayWithAttribute() throws Exception\n+    {\n+        // should even work for arrays of those\n+        StringBean[] beans = MAPPER.readValue(\n+                \"<StringBean>\\n\"\n+                +\"<StringBean><text xml:lang='fi'>Pulla</text></StringBean>\"\n+                +\"<StringBean><text xml:lang='se'>Bulla</text></StringBean>\"\n+                +\"<StringBean><text xml:lang='en'>Good stuff</text></StringBean>\"\n+                +\"</StringBean>\",\n+                StringBean[].class);\n+        assertNotNull(beans);\n+        assertEquals(3, beans.length);\n+        assertEquals(\"Pulla\", beans[0].text);\n+        assertEquals(\"Bulla\", beans[1].text);\n+        assertEquals(\"Good stuff\", beans[2].text);\n+    }\n+\n+    public void testEmptyElementToString() throws Exception\n+    {\n+        final String XML =\n+\"<a xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>\\n\"+\n+\"<d xsi:nil='true'/>\\n\"+\n+\"</a>\\n\";\n+        Issue167Bean result = MAPPER.readValue(XML, Issue167Bean.class);\n+        assertNotNull(result);\n+        assertEquals(\"\", result.d);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests, Lists\n+    /**********************************************************\n+     */\n+    \n+    public void testStringsInList() throws Exception\n+    {\n+        Names input = new Names();\n+        input.names.add(new Name(\"Bob\", \"Lee\"));\n+        input.names.add(new Name(\"\", \"\"));\n+        input.names.add(new Name(\"Sponge\", \"Bob\"));\n+        String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(input);\n+        \n+//System.err.println(\"XML:\\n\"+xml);\n+\n+        Names result = MAPPER.readValue(xml, Names.class);\n+        assertNotNull(result);\n+        assertNotNull(result.names);\n+        assertEquals(3, result.names.size());\n+        assertEquals(\"Bob\", result.names.get(2).last);\n+\n+        // [dataformat-xml#162]: should get empty String, not null\n+        assertEquals(\"\", result.names.get(1).first);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStreamTest.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import java.io.*;\n+\n+import javax.xml.stream.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n+import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;\n+\n+public class XmlTokenStreamTest extends XmlTestBase\n+{\n+    private final XMLInputFactory _staxInputFactory = XMLInputFactory.newInstance();\n+\n+    public void testSimple() throws Exception\n+    {\n+        String XML = \"<root><leaf id='123'>abc</leaf></root>\";\n+        XMLStreamReader sr = _staxInputFactory.createXMLStreamReader(new StringReader(XML));\n+        // must point to START_ELEMENT, so:\n+        sr.nextTag();\n+        XmlTokenStream tokens = new XmlTokenStream(sr, XML,\n+                FromXmlParser.Feature.collectDefaults());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.getCurrentToken());\n+        assertEquals(\"root\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"leaf\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_ATTRIBUTE_NAME, tokens.next());\n+        assertEquals(\"id\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_ATTRIBUTE_VALUE, tokens.next());\n+        assertEquals(\"123\", tokens.getText());\n+        assertEquals(XmlTokenStream.XML_TEXT, tokens.next());\n+        assertEquals(\"abc\", tokens.getText());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END, tokens.next());\n+    }\n+\n+    public void testRootAttributes() throws Exception\n+    {\n+        _testRootAttributes(true); // empty tag as null\n+        _testRootAttributes(false); // empty tag as \"\"\n+    }\n+\n+    public void _testRootAttributes(boolean emptyAsNull) throws Exception\n+    {\n+\n+        String XML = \"<root id='x' />\";\n+        XMLStreamReader sr = _staxInputFactory.createXMLStreamReader(new StringReader(XML));\n+        // must point to START_ELEMENT, so:\n+        sr.nextTag();\n+        int f = FromXmlParser.Feature.collectDefaults();\n+        if (emptyAsNull) {\n+            f |= FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL.getMask();\n+        } else {\n+            f &= ~FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL.getMask();\n+        }\n+        XmlTokenStream tokens = new XmlTokenStream(sr, XML, f);\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.getCurrentToken());\n+        assertEquals(\"root\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_ATTRIBUTE_NAME, tokens.next());\n+        assertEquals(\"id\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_ATTRIBUTE_VALUE, tokens.next());\n+        assertEquals(\"x\", tokens.getText());\n+        if (!emptyAsNull) {\n+            assertEquals(XmlTokenStream.XML_TEXT, tokens.next());\n+            assertEquals(\"\", tokens.getText());\n+        }\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END, tokens.next());\n+    }\n+\n+    public void testEmptyTags() throws Exception\n+    {\n+        _testEmptyTags(true); // empty tag as null\n+        _testEmptyTags(false); // empty tag as \"\"\n+    }\n+        \n+    private void _testEmptyTags(boolean emptyAsNull) throws Exception\n+    {\n+        String XML = \"<root><leaf /></root>\";\n+        XMLStreamReader sr = _staxInputFactory.createXMLStreamReader(new StringReader(XML));\n+        // must point to START_ELEMENT, so:\n+        sr.nextTag();\n+        int f = FromXmlParser.Feature.collectDefaults();\n+        if (emptyAsNull) {\n+            f |= FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL.getMask();\n+        } else {\n+            f &= ~FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL.getMask();\n+        }\n+        XmlTokenStream tokens = new XmlTokenStream(sr, XML, f);\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.getCurrentToken());\n+        assertEquals(\"root\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"leaf\", tokens.getLocalName());\n+        if (!emptyAsNull) {\n+            assertEquals(XmlTokenStream.XML_TEXT, tokens.next());\n+            assertEquals(\"\", tokens.getText());\n+        }\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END, tokens.next());\n+    }\n+\n+    public void testNested() throws Exception\n+    {\n+        String XML = \"<root><a><b><c>abc</c></b></a></root>\";\n+        XMLStreamReader sr = _staxInputFactory.createXMLStreamReader(new StringReader(XML));\n+        sr.nextTag();\n+        XmlTokenStream tokens = new XmlTokenStream(sr, XML,\n+                FromXmlParser.Feature.collectDefaults());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.getCurrentToken());\n+        assertEquals(\"root\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"a\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"b\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"c\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_TEXT, tokens.next());\n+        assertEquals(\"abc\", tokens.getText());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END, tokens.next());\n+    }\n+    \n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java\n \n     public void testSimpleWithEmpty() throws Exception\n     {\n-        // 06-Jan-2015, tatu: Not superbly simple, actually; whether we'll have `null`\n-        //    or `{}` depends on context; if in array context, latter; otherwise former\n+        // 21-Jun-2017, tatu: Depends on setting actually...\n+        XmlFactory f = new XmlFactory();\n+\n+        f.enable(FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL);\n         assertEquals(\"{\\\"leaf\\\":null}\",\n-                _readXmlWriteJson(\"<root><leaf /></root>\"));\n+                _readXmlWriteJson(f, \"<root><leaf /></root>\"));\n+        f.disable(FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL);\n+        assertEquals(\"{\\\"leaf\\\":\\\"\\\"}\",\n+                _readXmlWriteJson(f, \"<root><leaf /></root>\"));\n     }\n \n     public void testSimpleNested() throws Exception\n     /* Helper methods\n     /**********************************************************\n      */\n-    \n+\n     private String _readXmlWriteJson(String xml) throws IOException\n     {\n+        return _readXmlWriteJson(_xmlFactory, xml);\n+    }\n+\n+    private String _readXmlWriteJson(XmlFactory xmlFactory, String xml) throws IOException\n+    {\n         StringWriter w = new StringWriter();\n \n-        JsonParser p = _xmlFactory.createParser(xml);\n+        JsonParser p = xmlFactory.createParser(xml);\n         JsonGenerator jg = _jsonFactory.createGenerator(w);\n         while (p.nextToken() != null) {\n             jg.copyCurrentEvent(p);", "timestamp": 1498852807, "metainfo": ""}