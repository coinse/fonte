{"sha": "6554588bb7295fbd2d0c580efd8b9cbc0b501418", "log": "Minor test refactoring, javadoc adds", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n         writeFieldName(fieldName);\n         writeString(value);\n     }\n-    \n+\n+    // 03-Aug-2017, tatu: We could use this as mentioned in comment below BUT\n+    //    since there is no counterpart for deserialization this will not\n+    //    help us. Approaches that could/would help probably require different\n+    //    handling...\n+    //\n+    //    See [dataformat-xml#4] for more context.\n+    \n+    /*\n+    // @since 2.9\n+    public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef) throws IOException\n+    {\n+        // 03-Aug-2017, tatu: Due to XML oddities, we do need to massage things\n+        //     a bit: specifically, change WRAPPER_ARRAY into WRAPPER_OBJECT, always\n+        if (typeIdDef.include == WritableTypeId.Inclusion.WRAPPER_ARRAY) {\n+            typeIdDef.include = WritableTypeId.Inclusion.WRAPPER_OBJECT;\n+        }\n+        return super.writeTypePrefix(typeIdDef);\n+    }\n+    */\n+\n     /*\n     /**********************************************************\n     /* JsonGenerator output method implementations, structural\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/EnumIssue9Test.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+// related to [dataformat-xml#9] (and possibly others)\n+public class EnumIssue9Test extends XmlTestBase\n+{\n+    static enum TestEnum { A, B, C; }\n+    \n+    static class UntypedEnumBean\n+    {\n+       @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY, property=\"__type\")\n+// this would actually work:\n+//        @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n+        public Object value;\n+\n+        public UntypedEnumBean() { }\n+        public UntypedEnumBean(TestEnum v) { value = v; }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    \n+    public void testUntypedEnum() throws Exception\n+    {\n+        ObjectMapper mapper = new XmlMapper();\n+        String xml = mapper.writeValueAsString(new UntypedEnumBean(TestEnum.B));\n+        \n+        UntypedEnumBean result = mapper.readValue(xml, UntypedEnumBean.class);\n+        assertNotNull(result);\n+        assertNotNull(result.value);\n+        Object ob = result.value;\n+        \n+        if (TestEnum.class != ob.getClass()) {\n+            fail(\"Failed to deserialize TestEnum (got \"+ob.getClass().getName()+\") from: \"+xml);\n+        }\n+\n+        assertEquals(TestEnum.B, result.value);\n+    }\n+\n+    // [dataformat-xml#121]\n+    public void testRootEnumIssue121() throws Exception\n+    {\n+        String xml = MAPPER.writeValueAsString(TestEnum.B);\n+        TestEnum result = MAPPER.readValue(xml, TestEnum.class);\n+        assertNotNull(result);\n+        assertEquals(TestEnum.B, result);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/PolymorphicIssue4Test.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+// for:\n+//\n+// [dataformat-xml#4]\n+// [dataformat-xml#9] (enums)\n+\n+public class PolymorphicIssue4Test extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    /*\n+    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY)\n+    static class BaseTypeWithClassProperty { }\n+\n+    static class SubTypeWithClassProperty extends BaseTypeWithClassProperty {\n+        public String name;\n+\n+        public SubTypeWithClassProperty() { }\n+        public SubTypeWithClassProperty(String s) { name = s; }\n+    }\n+    */\n+\n+    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_ARRAY)\n+    static class BaseTypeWithClassArray { }\n+\n+    static class SubTypeWithClassArray extends BaseTypeWithClassArray {\n+        public String name;\n+\n+        public SubTypeWithClassArray() { }\n+        public SubTypeWithClassArray(String s) { name = s; }\n+    }\n+\n+    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n+    static class BaseTypeWithClassObject { }\n+\n+    static class SubTypeWithClassObject extends BaseTypeWithClassObject {\n+        public String name;\n+    \n+        public SubTypeWithClassObject() { }\n+        public SubTypeWithClassObject(String s) { name = s; }\n+    }\n+\n+    /**\n+     * If not used as root element, need to use a wrapper\n+     */\n+    static class ClassArrayWrapper\n+    {\n+        public BaseTypeWithClassArray wrapped;\n+\n+        public ClassArrayWrapper() { }\n+        public ClassArrayWrapper(String s) { wrapped = new SubTypeWithClassArray(s); }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Set up\n+    /**********************************************************\n+     */\n+\n+    protected XmlMapper _xmlMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        _xmlMapper = new XmlMapper();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+    \n+    /* 19-Dec-2010, tatu: Let's hold off these tests, due to issues with inclusions.\n+     */\n+    // Does not work since array wrapping is not explicitly forced (unlike with collection\n+    // property of a bean\n+    public void testAsClassArray() throws Exception\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new SubTypeWithClassArray(\"Foobar\"));\n+        Object result = _xmlMapper.readValue(xml, BaseTypeWithClassArray.class);\n+        assertNotNull(result);\n+        assertEquals(SubTypeWithClassArray.class, result.getClass());\n+        assertEquals(\"Foobar\", ((SubTypeWithClassArray) result).name);\n+    }\n+\n+    // Hmmh. Does not yet quite work either, since we do not properly force\n+    // array context when writing...\n+    public void testAsWrappedClassArray() throws Exception\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new ClassArrayWrapper(\"Foobar\"));\n+        ClassArrayWrapper result = _xmlMapper.readValue(xml, ClassArrayWrapper.class);\n+        assertNotNull(result);\n+        assertEquals(SubTypeWithClassArray.class, result.wrapped.getClass());\n+        assertEquals(\"Foobar\", ((SubTypeWithClassArray) result.wrapped).name);\n+    }\n+}\n+   \n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TypeAttributeOrder242Test.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TypeAttributeOrder242Test.java\n \n     /*\n     /**********************************************************\n-    /* Unit tests\n+    /* Test methods\n     /**********************************************************\n      */\n ", "timestamp": 1501793287, "metainfo": ""}