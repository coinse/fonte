{"sha": "51408b837e9bb0119f92c01fc7f31ca743f23f7b", "log": "Fix #101 for master branch", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n     {\n         final String ns = _xmlReader.getNamespaceURI();\n         final String localName = _xmlReader.getLocalName();\n+        _attributeCount = _xmlReader.getAttributeCount();\n         _nextAttributeIndex = 0;\n+\n         /* Support for virtual wrapping: in wrapping, may either\n          * create a new wrapper scope (if in sub-tree, or matches\n          * wrapper element itself), or implicitly close existing\n                 return (_currentState = XML_END_ELEMENT);\n             }\n         }\n-        _attributeCount = _xmlReader.getAttributeCount();\n         _localName = localName;\n         _namespaceURI = ns;\n         return (_currentState = XML_START_ELEMENT);\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/Issue101UnwrappedListAttributesTest.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+// Failing unit test(s) wrt [Issue#64]\n+public class Issue101UnwrappedListAttributesTest extends XmlTestBase\n+{\n+    static class Optional {\n+        @JacksonXmlText\n+        public String number = \"NOT SET\";\n+\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String type = \"NOT SET\";\n+\n+        public Optional() { }\n+        \n+        // uncommenting this ALSO works:\n+//        public Optional(String n) { number = n; }\n+    }\n+\n+    static class Optionals {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Optional> optional;\n+    } \n+\n+    // For [Issue#101]\n+    @JacksonXmlRootElement(localName = \"root\")    \n+    @JsonPropertyOrder({ \"unwrapped\", \"name\" })\n+    static class Root {\n+        @JacksonXmlProperty(localName = \"unwrapped\")\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<UnwrappedElement> unwrapped;\n+\n+        public String name;\n+    }\n+\n+     static class UnwrappedElement {\n+        public UnwrappedElement () {}\n+\n+        public UnwrappedElement (String id, String type) {\n+            this.id = id;\n+            this.type = type;\n+        }\n+\n+        @JacksonXmlProperty(isAttribute = true)\n+        public String id;\n+\n+        @JacksonXmlProperty(isAttribute = true)\n+        public String type;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n+    // // [Issue#64]\n+    public void testOptionalsWithMissingType() throws Exception\n+    {\n+//        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>\",\n+        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional>123-456-7890</optional></MultiOptional>\",\n+                Optionals.class);\n+        assertNotNull(ob);\n+        assertNotNull(ob.optional);\n+        assertEquals(1, ob.optional.size());\n+\n+//            System.err.println(\"ob: \" + ob); // works fine\n+\n+        Optional opt = ob.optional.get(0);\n+        assertEquals(\"123-456-7890\", opt.number);\n+        assertEquals(\"NOT SET\", opt.type);\n+    }\n+\n+    // [Issue#101]\n+    public void testWithTwoAttributes() throws Exception\n+    {\n+        final String EXP = \"<root>\"\n+                +\"<unwrapped id=\\\"1\\\" type=\\\"string\\\"/>\"\n+                +\"<unwrapped id=\\\"2\\\" type=\\\"string\\\"/>\"\n+                +\"<name>test</name>\"\n+                +\"</root>\";\n+        Root rootOb = new Root();\n+        rootOb.unwrapped = Arrays.asList(\n+                new UnwrappedElement(\"1\", \"string\"),\n+                new UnwrappedElement(\"2\", \"string\")\n+        );\n+        rootOb.name = \"test\";\n+\n+        // First, serialize, which works\n+        String xml = MAPPER.writeValueAsString(rootOb);\n+        assertEquals(EXP, xml);\n+\n+        // then try deserialize\n+        Root result = MAPPER.readValue(xml, Root.class);\n+        assertNotNull(result);\n+        assertEquals(rootOb.name, result.name);\n+    }\n+}", "timestamp": 1396546264, "metainfo": ""}