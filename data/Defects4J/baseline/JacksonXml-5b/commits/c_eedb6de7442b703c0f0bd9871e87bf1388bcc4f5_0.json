{"sha": "eedb6de7442b703c0f0bd9871e87bf1388bcc4f5", "log": "Fix #133", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n         _xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference());\n     }\n \n+    @Override\n+    public Version version() {\n+        return PackageVersion.VERSION;\n+    }\n+    \n     @Override\n     public ObjectCodec getCodec() {\n         return _objectCodec;\n         }        \n         return _binaryValue;\n     }\n-    \n-    @SuppressWarnings(\"resource\")\n-    protected byte[] _decodeBase64(Base64Variant b64variant)\n-        throws IOException, JsonParseException\n+\n+    protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException\n     {\n         ByteArrayBuilder builder = _getByteArrayBuilder();\n         final String str = getText();\n      */\n \n     @Override\n-    public BigInteger getBigIntegerValue() throws IOException, JsonParseException\n-    {\n+    public BigInteger getBigIntegerValue() throws IOException {\n         // TODO Auto-generated method stub\n         return null;\n     }\n \n     @Override\n-    public BigDecimal getDecimalValue() throws IOException, JsonParseException\n-    {\n+    public BigDecimal getDecimalValue() throws IOException {\n         // TODO Auto-generated method stub\n         return null;\n     }\n \n     @Override\n-    public double getDoubleValue() throws IOException, JsonParseException\n-    {\n+    public double getDoubleValue() throws IOException {\n         // TODO Auto-generated method stub\n         return 0;\n     }\n \n     @Override\n-    public float getFloatValue() throws IOException, JsonParseException\n-    {\n+    public float getFloatValue() throws IOException {\n         // TODO Auto-generated method stub\n         return 0;\n     }\n \n     @Override\n-    public int getIntValue() throws IOException, JsonParseException\n-    {\n+    public int getIntValue() throws IOException {\n         // TODO Auto-generated method stub\n         return 0;\n     }\n \n     @Override\n-    public long getLongValue() throws IOException, JsonParseException\n-    {\n+    public long getLongValue() throws IOException {\n         // TODO Auto-generated method stub\n         return 0;\n     }\n \n     @Override\n-    public NumberType getNumberType() throws IOException, JsonParseException\n-    {\n+    public NumberType getNumberType() throws IOException {\n         // TODO Auto-generated method stub\n         return null;\n     }\n \n     @Override\n-    public Number getNumberValue() throws IOException, JsonParseException\n-    {\n+    public Number getNumberValue() throws IOException {\n         // TODO Auto-generated method stub\n         return null;\n     }\n         }\n         return true;\n     }\n-\n-    @Override\n-    public Version version() {\n-        return PackageVersion.VERSION;\n-    }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/WrapperHandlingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/WrapperHandlingDeserializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer;\n      */\n     protected final Set<String> _namesToWrap;\n \n+    protected final JavaType _type;\n+    \n     /*\n     /**********************************************************************\n     /* Construction\n     {\n         super(delegate);\n         _namesToWrap = namesToWrap;\n+        _type = delegate.getValueType();\n     }\n \n     /*\n             BeanProperty property)\n         throws JsonMappingException\n     {\n+        // !!! 16-Jan-2015, tatu: TODO: change to be like so in 2.6.0 -- leaving\n+        //    out for 2.5 just to increase compatibility slightly with 2.4 databind\n+        /*\n+        JavaType vt = _type;\n+        if (vt == null) {\n+            vt = ctxt.constructType(_delegatee.handledType());\n+        }\n+        JsonDeserializer<?> del = ctxt.handleSecondaryContextualization(_delegatee, property, vt);\n+        */\n+\n         JsonDeserializer<?> del = ctxt.handleSecondaryContextualization(_delegatee, property);\n         BeanDeserializerBase newDelegatee = _verifyDeserType(del);\n         \n      */\n \n     @Override\n-    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n+    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n         _configureParser(jp);\n         return _delegatee.deserialize(jp,  ctxt);\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n-            Object intoValue)\n-        throws IOException, JsonProcessingException\n+            Object intoValue) throws IOException\n     {\n         _configureParser(jp);\n         return ((JsonDeserializer<Object>)_delegatee).deserialize(jp, ctxt, intoValue);\n \n     @Override\n     public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n-            TypeDeserializer typeDeserializer)\n-        throws IOException, JsonProcessingException\n+            TypeDeserializer typeDeserializer) throws IOException\n     {\n         _configureParser(jp);\n         return _delegatee.deserializeWithType(jp, ctxt, typeDeserializer);\n     /**********************************************************************\n      */\n \n-    protected final void _configureParser(JsonParser jp)\n-        throws IOException, JsonProcessingException\n+    protected final void _configureParser(JsonParser jp) throws IOException\n     {\n         /* 19-Aug-2013, tatu: Although we should not usually get called with\n          *   parser of other types, there are some cases where this may happen:\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/UnwrappingXmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/UnwrappingXmlBeanSerializer.java\n  * @author Pascal G\u00e9linas\n  * \n  */\n-public class UnwrappingXmlBeanSerializer extends XmlBeanSerializerBase {\n+public class UnwrappingXmlBeanSerializer extends XmlBeanSerializerBase\n+{\n+    private static final long serialVersionUID = 1L;\n+ \n     /**\n      * Transformer used to add prefix and/or suffix for properties of unwrapped\n      * POJO.\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n  */\n public class XmlBeanSerializer extends XmlBeanSerializerBase\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /*\n     /**********************************************************\n     /* Life-cycle: constructors\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n package com.fasterxml.jackson.dataformat.xml.ser;\n \n import java.io.IOException;\n+import java.util.BitSet;\n \n import javax.xml.namespace.QName;\n \n  * of some xml-specific aspects, such as distinction between attributes\n  * and elements.\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class XmlBeanSerializerBase extends BeanSerializerBase\n {\n     /**\n      */\n     protected final QName[] _xmlNames;\n \n+    /**\n+     * Optional set of indexes of properties that should be serialized as CDATA,\n+     * instead of regular XML text segment. Left as null in cases where none of\n+     * element values are to be written in such a way.\n+     */\n+    protected final BitSet _cdata;\n+    \n     public XmlBeanSerializerBase(BeanSerializerBase src)\n     {\n         super(src);\n-        \n+\n         /* Then make sure attributes are sorted before elements, keep track\n          * of how many there are altogether\n          */\n         }\n         _attributeCount = attrCount;\n \n+        // also: pre-compute need, if any, for CDATA handling:\n+        BitSet cdata = null;\n+        for (int i = 0, len = _props.length; i < len; ++i) {\n+            BeanPropertyWriter bpw = _props[i];\n+            if (_isCData(bpw)) {\n+                if (cdata == null) {\n+                    cdata = new BitSet(len);\n+                }\n+                cdata.set(i);\n+            }\n+        }\n+        _cdata = cdata;\n+        \n         // And then collect namespace information\n         _xmlNames = new QName[_props.length];\n         int textIndex = -1;\n         _attributeCount = src._attributeCount;\n         _textPropertyIndex = src._textPropertyIndex;\n         _xmlNames = src._xmlNames;\n+        _cdata = src._cdata;\n     }\n \n     protected XmlBeanSerializerBase(XmlBeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId)\n         _attributeCount = src._attributeCount;\n         _textPropertyIndex = src._textPropertyIndex;\n         _xmlNames = src._xmlNames;\n+        _cdata = src._cdata;\n     }\n \n     protected XmlBeanSerializerBase(XmlBeanSerializerBase src, String[] toIgnore)\n         _attributeCount = src._attributeCount;\n         _textPropertyIndex = src._textPropertyIndex;\n         _xmlNames = src._xmlNames;\n+        _cdata = src._cdata;\n     }\n     \n     public XmlBeanSerializerBase(XmlBeanSerializerBase src, NameTransformer transformer)\n         _attributeCount = src._attributeCount;\n         _textPropertyIndex = src._textPropertyIndex;\n         _xmlNames = src._xmlNames;\n+        _cdata = src._cdata;\n     }\n \n     /*\n      * elements.\n      */\n     @Override\n-    protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider)\n+        throws IOException\n     {\n         // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n-        if (!(jgen0 instanceof ToXmlGenerator)) {\n-            super.serializeFields(bean, jgen0, provider);\n+        if (!(gen0 instanceof ToXmlGenerator)) {\n+            super.serializeFields(bean, gen0, provider);\n             return;\n         }\n         \n-        final ToXmlGenerator xgen = (ToXmlGenerator) jgen0;\n+        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n         final BeanPropertyWriter[] props;\n         if (_filteredProps != null && provider.getActiveView() != null) {\n             props = _filteredProps;\n         final int textIndex = _textPropertyIndex;\n         final QName[] xmlNames = _xmlNames;\n         int i = 0;\n+        final BitSet cdata = _cdata;\n \n         try {\n             for (final int len = props.length; i < len; ++i) {\n                 xgen.setNextName(xmlNames[i]);\n                 BeanPropertyWriter prop = props[i];\n                 if (prop != null) { // can have nulls in filtered list\n-                    if(_isCData(prop)) {\n+                    if ((cdata != null) && cdata.get(i)) {\n                         xgen.setNextIsCData(true);\n-                    }\n-\n-                    prop.serializeAsField(bean, xgen, provider);\n-\n-                    if(_isCData(prop)) {\n+                        prop.serializeAsField(bean, xgen, provider);\n                         xgen.setNextIsCData(false);\n+                    } else {\n+                        prop.serializeAsField(bean, xgen, provider);\n                     }\n                 }\n                 // Reset to avoid next value being written as unwrapped, \n     }\n \n     @Override\n-    protected void serializeFieldsFiltered(Object bean, JsonGenerator jgen0,\n+    protected void serializeFieldsFiltered(Object bean, JsonGenerator gen0,\n             SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+        throws IOException\n     {\n         // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n-        if (!(jgen0 instanceof ToXmlGenerator)) {\n-            super.serializeFieldsFiltered(bean, jgen0, provider);\n+        if (!(gen0 instanceof ToXmlGenerator)) {\n+            super.serializeFieldsFiltered(bean, gen0, provider);\n             return;\n         }\n         \n-        final ToXmlGenerator xgen = (ToXmlGenerator) jgen0;\n+        final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n         \n         final BeanPropertyWriter[] props;\n         if (_filteredProps != null && provider.getActiveView() != null) {\n         final PropertyFilter filter = findPropertyFilter(provider, _propertyFilterId, bean);\n         // better also allow missing filter actually..\n         if (filter == null) {\n-            serializeFields(bean, jgen0, provider);\n+            serializeFields(bean, gen0, provider);\n             return;\n         }\n \n         }\n         final int textIndex = _textPropertyIndex;\n         final QName[] xmlNames = _xmlNames;\n+        final BitSet cdata = _cdata;\n \n         int i = 0;\n         try {\n                 xgen.setNextName(xmlNames[i]);\n                 BeanPropertyWriter prop = props[i];\n                 if (prop != null) { // can have nulls in filtered list\n-                    filter.serializeAsField(bean, xgen, provider, prop);\n+                    if ((cdata != null) && cdata.get(i)) {\n+                        xgen.setNextIsCData(true);\n+                        filter.serializeAsField(bean, xgen, provider, prop);\n+                        xgen.setNextIsCData(false);\n+                    } else {\n+                        filter.serializeAsField(bean, xgen, provider, prop);\n+                    }\n                 }\n             }\n             if (_anyGetterWriter != null) {\n     }\n     \n     @Override\n-    public void serializeWithType(Object bean, JsonGenerator jgen, SerializerProvider provider,\n+    public void serializeWithType(Object bean, JsonGenerator gen, SerializerProvider provider,\n             TypeSerializer typeSer)\n-        throws IOException, JsonGenerationException\n+        throws IOException\n     {\n         if (_objectIdWriter != null) {\n-            _serializeWithObjectId(bean, jgen, provider, typeSer);\n+            _serializeWithObjectId(bean, gen, provider, typeSer);\n             return;\n         }\n         /* Ok: let's serialize type id as attribute, but if (and only if!)\n          * we are using AS_PROPERTY\n          */\n         if (typeSer.getTypeInclusion() == JsonTypeInfo.As.PROPERTY) {\n-            ToXmlGenerator xgen = (ToXmlGenerator)jgen;\n+            ToXmlGenerator xgen = (ToXmlGenerator)gen;\n             xgen.setNextIsAttribute(true);\n-            super.serializeWithType(bean, jgen, provider, typeSer);\n+            super.serializeWithType(bean, gen, provider, typeSer);\n             if (_attributeCount == 0) { // if no attributes, need to reset\n                 xgen.setNextIsAttribute(false);\n             }\n         } else {\n-            super.serializeWithType(bean, jgen, provider, typeSer);\n+            super.serializeWithType(bean, gen, provider, typeSer);\n         }\n     }\n     \n     @Override\n-    protected void _serializeObjectId(Object bean, JsonGenerator jgen, SerializerProvider provider,\n+    protected void _serializeObjectId(Object bean, JsonGenerator gen, SerializerProvider provider,\n             TypeSerializer typeSer, WritableObjectId objectId) throws IOException\n     {\n         // Ok: let's serialize type id as attribute, but if (and only if!) we are using AS_PROPERTY\n         if (typeSer.getTypeInclusion() == JsonTypeInfo.As.PROPERTY) {\n-            ToXmlGenerator xgen = (ToXmlGenerator)jgen;\n+            ToXmlGenerator xgen = (ToXmlGenerator)gen;\n             xgen.setNextIsAttribute(true);\n-            super._serializeObjectId(bean, jgen, provider, typeSer, objectId);\n+            super._serializeObjectId(bean, gen, provider, typeSer, objectId);\n             if (_attributeCount == 0) { // if no attributes, need to reset\n                 xgen.setNextIsAttribute(false);\n             }\n         } else {\n-            super._serializeObjectId(bean, jgen, provider, typeSer, objectId);\n+            super._serializeObjectId(bean, gen, provider, typeSer, objectId);\n         }\n     }\n ", "timestamp": 1421452589, "metainfo": ""}