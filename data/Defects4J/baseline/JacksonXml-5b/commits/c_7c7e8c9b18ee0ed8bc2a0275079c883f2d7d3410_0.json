{"sha": "7c7e8c9b18ee0ed8bc2a0275079c883f2d7d3410", "log": "Fix a compatibility problem with 2.6.0-rc1 of databind, need indenter for default pretty printer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n     private static final long serialVersionUID = 1L;\n \n     protected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();\n-    \n+\n+    protected final static DefaultXmlPrettyPrinter DEFAULT_XML_PRETTY_PRINTER = new DefaultXmlPrettyPrinter();\n+\n     // need to hold on to module instance just in case copy() is used\n     protected final JacksonXmlModule _xmlModule;\n \n     public XmlMapper(XmlFactory xmlFactory) {\n         this(xmlFactory, DEFAULT_XML_MODULE);\n     }\n-    \n+\n     public XmlMapper(JacksonXmlModule module) {\n         this(new XmlFactory(), module);\n     }\n-    \n+\n     public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module)\n     {\n         /* Need to override serializer provider (due to root name handling);\n         if (module != null) {\n             registerModule(module);\n         }\n-    }\n-    \n+        // 19-May-2015, tatu: Must ensure we use XML-specific indenter\n+        _serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);\n+    }\n+\n     // @since 2.1\n     @Override\n     public XmlMapper copy()\n         _checkInvalidCopy(XmlMapper.class);\n         return new XmlMapper((XmlFactory) _jsonFactory.copy(), _xmlModule);\n     }\n-    \n+\n     @Override\n     public Version version() {\n         return PackageVersion.VERSION;\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n     implements XmlPrettyPrinter, Instantiatable<DefaultXmlPrettyPrinter>,\n         java.io.Serializable\n {\n-    private static final long serialVersionUID = -1811120944652457526L;\n+    private static final long serialVersionUID = 1L; // since 2.6\n \n     /**\n      * Interface that defines objects that can produce indentation used\n      * Dummy implementation that adds no indentation whatsoever\n      */\n     protected static class NopIndenter\n-        implements Indenter\n-    {\n+        implements Indenter, java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n         public NopIndenter() { }\n         @Override public void writeIndentation(JsonGenerator jg, int level) { }\n         @Override public boolean isInline() { return true; }\n      * indenter for array values.\n      */\n     protected static class FixedSpaceIndenter\n-        implements Indenter\n-    {\n+        implements Indenter, java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n         public FixedSpaceIndenter() { }\n \n         @Override\n      * 2 spaces for indentation per level.\n      */\n     protected static class Lf2SpacesIndenter\n-        implements Indenter\n-    {\n+        implements Indenter, java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n         final static String SYSTEM_LINE_SEPARATOR;\n         static {\n             String lf = null;\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestIndentation.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestIndentation.java\n         StringWrapperBean input = new StringWrapperBean(\"abc\");\n         String xml = _xmlMapper.writeValueAsString(input); \n \n+System.err.println(\"XML == \"+xml);        \n+        \n         // should have at least one linefeed, space...\n         if (xml.indexOf('\\n') < 0 || xml.indexOf(' ') < 0) {\n             fail(\"No indentation: XML == \"+xml);", "timestamp": 1432068893, "metainfo": ""}