{"sha": "3a8fd77b983653b123cafee949608fa22507d609", "log": "Update master to 2.8.0-SNAPSHOT", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n     /**********************************************************\n      */\n \n-    /**\n-     * XML indentation differs from JSON indentation, thereby\n-     * need to change default pretty-printer\n-     */\n+    // 09-May-2016, tatu: Was removed from `jackson-databind` in 2.8; remove from\n+    //    here in 2.9.\n     @Deprecated // since 2.6\n-    @Override\n+//    @Override\n     protected PrettyPrinter _defaultPrettyPrinter() {\n         return new DefaultXmlPrettyPrinter();\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java\n             return encodeXmlClassName(super.idFromValue(value));\n         }\n \n-        @SuppressWarnings(\"deprecation\")\n-        @Override\n-        public JavaType typeFromId(String id) {\n-            return super.typeFromId(decodeXmlClassName(id));\n-        }\n-\n         @Override\n         public JavaType typeFromId(DatabindContext context, String id) {\n             return super.typeFromId(context, decodeXmlClassName(id));\n             return encodeXmlClassName(super.idFromValue(value));\n         }\n \n-        @SuppressWarnings(\"deprecation\")\n-        @Override\n-        public JavaType typeFromId(String id) {\n-            return super.typeFromId(decodeXmlClassName(id));\n-        }\n-\n         @Override\n         public JavaType typeFromId(DatabindContext context, String id) {\n             return super.typeFromId(context, decodeXmlClassName(id));\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/UnwrappingXmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/UnwrappingXmlBeanSerializer.java\n package com.fasterxml.jackson.dataformat.xml.ser;\n \n import java.io.IOException;\n+import java.util.Set;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n         _nameTransformer = src._nameTransformer;\n     }\n \n-    protected UnwrappingXmlBeanSerializer(UnwrappingXmlBeanSerializer src, String[] toIgnore)\n+    protected UnwrappingXmlBeanSerializer(UnwrappingXmlBeanSerializer src, Set<String> toIgnore)\n     {\n         super(src, toIgnore);\n         _nameTransformer = src._nameTransformer;\n         return new UnwrappingXmlBeanSerializer(this, _objectIdWriter, filterId);\n     }\n \n-    @Override\n-    protected BeanSerializerBase withIgnorals(String[] toIgnore)\n-    {\n+    @Override // since 2.8\n+    protected BeanSerializerBase withIgnorals(Set<String> toIgnore) {\n         return new UnwrappingXmlBeanSerializer(this, toIgnore);\n     }\n \n      * so implementation will simply return 'this'.\n      */\n     @Override\n-    protected BeanSerializerBase asArraySerializer()\n-    {\n+    protected BeanSerializerBase asArraySerializer() {\n         return this;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n package com.fasterxml.jackson.dataformat.xml.ser;\n \n import java.io.IOException;\n+import java.util.Set;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n-\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n         super(src, objectIdWriter);\n     }\n \n-    public XmlBeanSerializer(XmlBeanSerializerBase src, String[] toIgnore) {\n+    public XmlBeanSerializer(XmlBeanSerializerBase src, Set<String> toIgnore) {\n         super(src, toIgnore);\n     }\n \n     /* Life-cycle: factory methods, fluent factories\n     /**********************************************************\n      */\n-\n \n     @Override\n     public JsonSerializer<Object> unwrappingSerializer(NameTransformer unwrapper) {\n     }\n \n     @Override\n-    protected BeanSerializerBase withIgnorals(String[] toIgnore) {\n+    protected BeanSerializerBase withIgnorals(Set<String> toIgnore) {\n         return new XmlBeanSerializer(this, toIgnore);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n \n import java.io.IOException;\n import java.util.BitSet;\n+import java.util.Set;\n \n import javax.xml.namespace.QName;\n \n         _cdata = src._cdata;\n     }\n \n-    protected XmlBeanSerializerBase(XmlBeanSerializerBase src, String[] toIgnore)\n+    protected XmlBeanSerializerBase(XmlBeanSerializerBase src, Set<String> toIgnore)\n     {\n         super(src, toIgnore);\n         _attributeCount = src._attributeCount;", "timestamp": 1462857227, "metainfo": ""}