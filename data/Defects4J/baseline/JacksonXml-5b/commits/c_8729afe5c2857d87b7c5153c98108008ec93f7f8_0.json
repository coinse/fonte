{"sha": "8729afe5c2857d87b7c5153c98108008ec93f7f8", "log": "...", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/ListAsObjectTest.java\n+package com.fasterxml.jackson.dataformat.xml.misc;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlElement;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+@SuppressWarnings(\"serial\")\n+public class ListAsObjectTest extends XmlTestBase\n+{\n+    static final class Value {\n+        @XmlElement(name = \"v\")\n+        public String v;\n+    \n+        public String getV() { return v; }\n+    \n+        public void setV(final String v) { this.v = v; }\n+    }\n+\n+    @JsonFormat(shape=JsonFormat.Shape.OBJECT)\n+    static final class Values extends LinkedList<Value>\n+    {\n+        @XmlAttribute(name = \"type\")\n+        private String type;\n+    \n+        @JacksonXmlElementWrapper(localName = \"value\", useWrapping = false)\n+        @JacksonXmlProperty(localName = \"value\")\n+         List<Value> values = new ArrayList<Value>();\n+    \n+        String getType() { return type; }\n+    \n+        void setType(final String type) { this.type = type; }\n+    \n+        List<Value> getValues() { return values; }\n+    \n+        void setValues(final List<Value> values) { this.values = values; }\n+    }\n+\n+    public void testCollection() throws Exception {\n+        final Values values = new XmlMapper().readValue(\"<values type=\\\"array\\\">\" +\n+                                                        \"  <value><v>c</v></value>\" +\n+                                                        \"  <value><v>d</v></value>\" +\n+                                                        \"</values>\",\n+                                                        Values.class);\n+        assertEquals(2, values.getValues().size(), 2);\n+        assertEquals(\"c\", values.getValues().get(0).getV());\n+        assertEquals(\"d\", values.getValues().get(1).getV());\n+    \n+        assertEquals(\"array\", values.getType());\n+\n+        // Passes with 2.1.2\n+        /*\n+        assertEquals(2, values.size());\n+        assertEquals(\"c\", values.get(0).getV());\n+        assertEquals(\"d\", values.get(1).getV());\n+        */\n+    }\n+}", "timestamp": 1396671767, "metainfo": ""}