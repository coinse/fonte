{"sha": "5cb108da85d545201a37f758b896351d504ba4a4", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n      * that cleans up type id property name to be a valid xml name.\n      */\n     @Override\n-    protected StdTypeResolverBuilder _constructStdTypeResolverBuilder()\n-    {\n+    protected StdTypeResolverBuilder _constructStdTypeResolverBuilder() {\n         return new XmlTypeResolverBuilder();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n */\n public class XmlFactory extends JsonFactory\n {\n-    private static final long serialVersionUID = -2793875812715996133L;\n+    // For 2.5:\n+    private static final long serialVersionUID = 1897624416641000209L;\n \n     /**\n      * Name used to identify XML format\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n  */\n public class XmlSerializerProvider extends DefaultSerializerProvider\n {\n-    private static final long serialVersionUID = -141838337907252911L;\n+    // As of 2.5\n+    private static final long serialVersionUID = -4138605166320336475L;\n \n     /**\n      * If all we get to serialize is a null, there's no way to figure out\n \n     @Override\n     public DefaultSerializerProvider createInstance(SerializationConfig config,\n-            SerializerFactory jsf)\n-    {\n+            SerializerFactory jsf) {\n         return new XmlSerializerProvider(this, config, jsf);\n     }\n     \n     @SuppressWarnings(\"resource\")\n     @Override\n     public void serializeValue(JsonGenerator jgen, Object value)\n-        throws IOException, JsonProcessingException\n+        throws IOException\n     {\n         if (value == null) {\n             _serializeXmlNull(jgen);\n     @SuppressWarnings(\"resource\")\n     @Override\n     public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType)\n-        throws IOException, JsonProcessingException\n+        throws IOException\n     {\n         if (value == null) {\n             _serializeXmlNull(jgen);\n     @SuppressWarnings(\"resource\")\n     @Override\n     public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType,\n-            JsonSerializer<Object> ser)\n-        throws IOException, JsonGenerationException\n+            JsonSerializer<Object> ser) throws IOException\n     {\n         if (value == null) {\n             _serializeXmlNull(jgen);\n         }\n     }\n \n-    protected void _serializeXmlNull(JsonGenerator jgen)\n-            throws IOException, JsonProcessingException\n+    protected void _serializeXmlNull(JsonGenerator jgen) throws IOException\n     {\n         if (jgen instanceof ToXmlGenerator)\n         _initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);\n         super.serializeValue(jgen, null);\n     }\n     \n-    protected void _startRootArray(ToXmlGenerator xgen, QName rootName)\n-        throws IOException, JsonProcessingException\n+    protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException\n     {\n         xgen.writeStartObject();\n         // Could repeat root name, but what's the point? How to customize?\n         xgen.writeFieldName(\"item\");\n     }    \n \n-    protected void _initWithRootName(ToXmlGenerator xgen, QName rootName)\n-            throws IOException, JsonProcessingException\n+    protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException\n     {\n         /* 28-Nov-2012, tatu: We should only initialize the root\n          *  name if no name has been set, as per [Issue#42],", "timestamp": 1412655829, "metainfo": ""}