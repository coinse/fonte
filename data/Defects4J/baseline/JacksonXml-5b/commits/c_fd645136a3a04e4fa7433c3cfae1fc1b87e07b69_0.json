{"sha": "fd645136a3a04e4fa7433c3cfae1fc1b87e07b69", "log": "minor test code refactoring", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/PolymorphicList97Test.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import static org.junit.Assert.*;\n+import static org.hamcrest.CoreMatchers.*;\n+\n+import java.util.*;\n+\n+import org.junit.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.*;\n+import com.fasterxml.jackson.dataformat.xml.*;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+/**\n+ * @author pgelinas\n+ */\n+public class PolymorphicList97Test extends XmlTestBase\n+{\n+    @JsonTypeInfo(property = \"type\", use = Id.NAME)\n+    public static abstract class Foo {\n+        @JacksonXmlProperty(isAttribute = true)\n+        public String data;\n+    }\n+\n+    @JsonTypeName(\"good\")\n+    public static class FooGood extends Foo {\n+        public String bar;\n+    }\n+\n+    @JsonTypeName(\"bad\")\n+    public static class FooBad extends Foo {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<String> bar;\n+    }\n+\n+    @Test\n+    public void testGood() throws Exception {\n+        XmlMapper mapper = new XmlMapper();\n+        mapper.registerSubtypes(FooGood.class);\n+\n+        String xml = \"<Foo type=\\\"good\\\" data=\\\"dummy\\\"><bar>FOOBAR</bar></Foo>\";\n+        Foo fooRead = mapper.readValue(xml, Foo.class);\n+        assertThat(fooRead, instanceOf(FooGood.class));\n+\n+        xml = \"<Foo data=\\\"dummy\\\" type=\\\"good\\\" ><bar>FOOBAR</bar></Foo>\";\n+        fooRead = mapper.readValue(xml, Foo.class);\n+        assertThat(fooRead, instanceOf(FooGood.class));\n+    }\n+    \n+    @Test\n+    public void testBad() throws Exception {\n+        XmlMapper mapper = new XmlMapper();\n+        mapper.registerSubtypes(FooBad.class);\n+\n+        String xml = \"<Foo type=\\\"bad\\\" data=\\\"dummy\\\"><bar><bar>FOOBAR</bar></bar></Foo>\";\n+        Foo fooRead = mapper.readValue(xml, Foo.class);\n+        assertThat(fooRead, instanceOf(FooBad.class));\n+\n+        xml = \"<Foo data=\\\"dummy\\\" type=\\\"bad\\\"><bar><bar>FOOBAR</bar></bar></Foo>\";\n+        fooRead = mapper.readValue(xml, Foo.class);\n+        assertThat(fooRead, instanceOf(FooBad.class));\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestDeserialization.java\n \n     private final XmlMapper MAPPER = new XmlMapper();\n \n-    // [Issue#25]\n+    // [dataformat-xml#25]\n     public void testEmptyStringFromElemAndAttr() throws Exception\n     {\n         EmptyStrings ob = MAPPER.readValue(\"<EmptyString a=''><b /></EmptyString>\",\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestUntypedListSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestUntypedListSerialization.java\n     private final XmlMapper MAPPER = new XmlMapper();\n \n     /*\n-     *  For [Issue#8] -- Will not use wrapping, if type is not statically known\n+     *  For [dataformat-xml#8] -- Will not use wrapping, if type is not statically known\n      *  to be a Collection\n      */\n     public void testListAsObject() throws IOException", "timestamp": 1461291154, "metainfo": ""}