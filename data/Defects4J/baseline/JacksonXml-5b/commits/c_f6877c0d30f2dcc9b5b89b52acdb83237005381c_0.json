{"sha": "f6877c0d30f2dcc9b5b89b52acdb83237005381c", "log": "Add JsonParser.getText(Writer) impl for xml backend", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n package com.fasterxml.jackson.dataformat.xml.deser;\n \n import java.io.IOException;\n+import java.io.Writer;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.util.Set;\n         return false;\n     }\n \n+    @Override // since 2.8\n+    public int getText(Writer writer) throws IOException\n+    {\n+        String str = getText();\n+        if (str == null) {\n+            return 0;\n+        }\n+        writer.write(str);\n+        return str.length();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Public API, access to token information, binary\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n \n-\n public class XmlParserTest extends XmlTestBase\n {\n     /*\n         // Former could be worked around; latter less so at this point.\n \n         // So, for now, let's just do sort of minimal verification, manually\n-        JsonParser jp = _xmlMapper.getFactory().createParser(xml);\n-        \n-        assertToken(JsonToken.START_OBJECT, jp.nextToken()); // main object\n-\n-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Image'\n-        verifyFieldName(jp, \"Image\");\n-        assertToken(JsonToken.START_OBJECT, jp.nextToken()); // 'image' object\n-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Width'\n-        verifyFieldName(jp, \"Width\");\n-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_WIDTH), jp.getText());\n-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Height'\n-        verifyFieldName(jp, \"Height\");\n-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_HEIGHT), jp.getText());\n-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Title'\n-        verifyFieldName(jp, \"Title\");\n-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n-        assertEquals(SAMPLE_SPEC_VALUE_TITLE, getAndVerifyText(jp));\n-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Thumbnail'\n-        verifyFieldName(jp, \"Thumbnail\");\n-        assertToken(JsonToken.START_OBJECT, jp.nextToken()); // 'thumbnail' object\n-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Url'\n-        verifyFieldName(jp, \"Url\");\n-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n-        assertEquals(SAMPLE_SPEC_VALUE_TN_URL, getAndVerifyText(jp));\n-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Height'\n-        verifyFieldName(jp, \"Height\");\n-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_HEIGHT), jp.getText());\n-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Width'\n-        verifyFieldName(jp, \"Width\");\n+        JsonParser p = _xmlMapper.getFactory().createParser(xml);\n+        \n+        assertToken(JsonToken.START_OBJECT, p.nextToken()); // main object\n+\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Image'\n+        verifyFieldName(p, \"Image\");\n+        assertToken(JsonToken.START_OBJECT, p.nextToken()); // 'image' object\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Width'\n+        verifyFieldName(p, \"Width\");\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_WIDTH), p.getText());\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Height'\n+        verifyFieldName(p, \"Height\");\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_HEIGHT), p.getText());\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Title'\n+        verifyFieldName(p, \"Title\");\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(SAMPLE_SPEC_VALUE_TITLE, getAndVerifyText(p));\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Thumbnail'\n+        verifyFieldName(p, \"Thumbnail\");\n+        assertToken(JsonToken.START_OBJECT, p.nextToken()); // 'thumbnail' object\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Url'\n+        verifyFieldName(p, \"Url\");\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(SAMPLE_SPEC_VALUE_TN_URL, getAndVerifyText(p));\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Height'\n+        verifyFieldName(p, \"Height\");\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_HEIGHT), p.getText());\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'Width'\n+        verifyFieldName(p, \"Width\");\n         // Width value is actually a String in the example\n-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n-        assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, getAndVerifyText(jp));\n-\n-        assertToken(JsonToken.END_OBJECT, jp.nextToken()); // 'thumbnail' object\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, getAndVerifyText(p));\n+\n+        assertToken(JsonToken.END_OBJECT, p.nextToken()); // 'thumbnail' object\n \n         // Note: arrays are \"eaten\"; wrapping is done using BeanPropertyWriter, so:\n-        //assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'IDs'\n-        //verifyFieldName(jp, \"IDs\");\n-        //assertToken(JsonToken.START_OBJECT, jp.nextToken()); // 'ids' array\n-\n-        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n-        verifyFieldName(jp, \"IDs\");\n-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID1), getAndVerifyText(jp));\n-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); \n-        verifyFieldName(jp, \"IDs\");\n-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID2), getAndVerifyText(jp));\n-        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n-        verifyFieldName(jp, \"IDs\");\n-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID3), getAndVerifyText(jp));\n-        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); \n-        verifyFieldName(jp, \"IDs\");\n-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n-        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID4), getAndVerifyText(jp));\n+        //assertToken(JsonToken.FIELD_NAME, p.nextToken()); // 'IDs'\n+        //verifyFieldName(p, \"IDs\");\n+        //assertToken(JsonToken.START_OBJECT, p.nextToken()); // 'ids' array\n+\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken());\n+        verifyFieldName(p, \"IDs\");\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID1), getAndVerifyText(p));\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); \n+        verifyFieldName(p, \"IDs\");\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID2), getAndVerifyText(p));\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken());\n+        verifyFieldName(p, \"IDs\");\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID3), getAndVerifyText(p));\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken()); \n+        verifyFieldName(p, \"IDs\");\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID4), getAndVerifyText(p));\n \n         // no matching entry for array:\n-        //assertToken(JsonToken.END_OBJECT, jp.nextToken()); // 'ids' array\n-\n-        assertToken(JsonToken.END_OBJECT, jp.nextToken()); // 'image' object\n-\n-        assertToken(JsonToken.END_OBJECT, jp.nextToken()); // main object\n-        \n-        jp.close();\n+        //assertToken(JsonToken.END_OBJECT, p.nextToken()); // 'ids' array\n+\n+        assertToken(JsonToken.END_OBJECT, p.nextToken()); // 'image' object\n+\n+        assertToken(JsonToken.END_OBJECT, p.nextToken()); // main object\n+        \n+        p.close();\n     }\n \n     /**\n         assertEquals(\"property\", xp.getCurrentName());\n         assertToken(JsonToken.VALUE_STRING, xp.nextToken());\n         assertEquals(\"123\", xp.getText());\n+\n+        StringWriter w = new StringWriter();\n+        assertEquals(3, xp.getText(w));\n+        assertEquals(\"123\", w.toString());\n+        \n         assertTrue(xp.getParsingContext().inObject());\n         assertToken(JsonToken.END_OBJECT, xp.nextToken()); // </property>\n         assertTrue(xp.getParsingContext().inArray());\n \n         assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <offset>\n         assertEquals(\"offset\", xp.getCurrentName());\n+\n+        StringWriter w = new StringWriter();\n+        assertEquals(6, xp.getText(w));\n+        assertEquals(\"offset\", w.toString());\n+        \n         assertToken(JsonToken.VALUE_STRING, xp.nextToken());\n         assertEquals(\"9\", xp.getText());\n \n+        w = new StringWriter();\n+        assertEquals(1, xp.getText(w));\n+        assertEquals(\"9\", w.toString());\n+        \n         assertToken(JsonToken.END_OBJECT, xp.nextToken()); // </data>\n         xp.close();\n     }\n     {\n         StringWriter w = new StringWriter();\n \n-        JsonParser jp = _xmlFactory.createParser(xml);\n+        JsonParser p = _xmlFactory.createParser(xml);\n         JsonGenerator jg = _jsonFactory.createGenerator(w);\n-        while (jp.nextToken() != null) {\n-            jg.copyCurrentEvent(jp);\n+        while (p.nextToken() != null) {\n+            jg.copyCurrentEvent(p);\n         }\n-        jp.close();\n+        p.close();\n         jg.close();\n         return w.toString();\n     }", "timestamp": 1463589493, "metainfo": ""}