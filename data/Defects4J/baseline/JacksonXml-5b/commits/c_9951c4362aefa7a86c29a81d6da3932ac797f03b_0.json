{"sha": "9951c4362aefa7a86c29a81d6da3932ac797f03b", "log": "Add `@JsonSetter` tests wrt #285", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n import junit.framework.TestCase;\n \n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n import com.fasterxml.jackson.core.*;\n+\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n \n public abstract class XmlTestBase\n             i = value;\n         }\n     }\n+\n+    // since 2.9.6\n+    public static class Point {\n+        public int x, y;\n+\n+        protected Point() { } // for deser\n+        public Point(int x0, int y0) {\n+            x = x0;\n+            y = y0;\n+        }\n+    \n+        @Override\n+        public boolean equals(Object o) {\n+            if (!(o instanceof Point)) {\n+                return false;\n+            }\n+            Point other = (Point) o;\n+            return (other.x == x) && (other.y == y);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return String.format(\"[x=%d, y=%d]\", x, y);\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/NullConversionsGenericTest.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import com.fasterxml.jackson.annotation.JsonSetter;\n+import com.fasterxml.jackson.annotation.Nulls;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+// Copied from `com.fasterxml.jackson.databind.deser.filter.` in `jackson-databind`\n+public class NullConversionsGenericTest extends XmlTestBase\n+{\n+    static class PointWrapper {\n+        @JsonSetter(nulls=Nulls.AS_EMPTY)\n+        public Point p;\n+    }\n+\n+    static class GeneralEmpty<T> {\n+        // 09-Feb-2017, tatu: Should only need annotation either for field OR setter, not both:\n+//        @JsonSetter(nulls=Nulls.AS_EMPTY)\n+        T value;\n+\n+        protected GeneralEmpty() { }\n+        public GeneralEmpty(T v) { value = v; }\n+\n+        @JsonSetter(nulls=Nulls.AS_EMPTY)\n+        public void setValue(T v) {\n+            value = v;\n+        }\n+\n+        public T getValue() { return value; }\n+    }\n+\n+    static class NoCtorWrapper {\n+        @JsonSetter(nulls=Nulls.AS_EMPTY)\n+        public NoCtorPOJO value;\n+    }\n+\n+    static class NoCtorPOJO {\n+        public NoCtorPOJO(boolean b) { }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = newMapper();\n+\n+    private final static String EMPTY_XML = \"<GeneralEmpty><value /></GeneralEmpty>\";\n+\n+    public void testNullsToEmptyPojo() throws Exception\n+    {\n+        PointWrapper pw = MAPPER.readValue(\"<PointWrapper><p /></PointWrapper>\",\n+                PointWrapper.class);\n+        assertNotNull(pw);\n+        assertNotNull(pw.p);\n+        assertEquals(0, pw.p.x);\n+        assertEquals(0, pw.p.y);\n+    }\n+\n+    public void testNullsToGenericPojo() throws Exception\n+    {\n+        String xml = MAPPER.writeValueAsString(new GeneralEmpty<Point>(new Point(1, 2)));\n+        GeneralEmpty<Point> result = MAPPER.readValue(EMPTY_XML,\n+                new TypeReference<GeneralEmpty<Point>>() { });\n+        assertNotNull(result.value);\n+        Point p = result.value;\n+        assertEquals(0, p.x);\n+        assertEquals(0, p.y);\n+\n+        // and then also failing case with no suitable creator:\n+        try {\n+            /* NoCtorWrapper nogo =*/ MAPPER.readValue(EMPTY_XML,\n+                    NoCtorWrapper.class);\n+            fail(\"Should not pass\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"Cannot create empty instance\");\n+        }\n+    }\n+\n+    // 04-May-2018, tatu: In theory could be supportable, but wrapping (or not)\n+    //   of Collections, other requirements, make it... not that easy.\n+/*\n+    public void testNullsToEmptyCollection() throws Exception\n+    {\n+        GeneralEmpty<List<String>> result = MAPPER.readValue(EMPTY_XML,\n+                new TypeReference<GeneralEmpty<List<String>>>() { });\n+        assertNotNull(result.value);\n+        assertEquals(0, result.value.size());\n+\n+        // but also non-String type, since impls vary\n+        GeneralEmpty<List<Integer>> result2 = MAPPER.readValue(EMPTY_XML,\n+                new TypeReference<GeneralEmpty<List<Integer>>>() { });\n+        assertNotNull(result2.value);\n+        assertEquals(0, result2.value.size());\n+    }\n+    */\n+\n+    // 04-May-2018, tatu: Maps and XML do not mix well, alas:\n+    /*\n+    public void testNullsToEmptyMap() throws Exception\n+    {\n+        GeneralEmpty<Map<String,String>> result = MAPPER.readValue(EMPTY_XML,\n+                new TypeReference<GeneralEmpty<Map<String,String>>>() { });\n+        assertNotNull(result.value);\n+        assertEquals(0, result.value.size());\n+    }\n+    */\n+\n+    public void testNullsToEmptyArrays() throws Exception\n+    {\n+        final String doc = EMPTY_XML;\n+\n+        GeneralEmpty<Object[]> result = MAPPER.readValue(doc,\n+                new TypeReference<GeneralEmpty<Object[]>>() { });\n+        assertNotNull(result.value);\n+        assertEquals(0, result.value.length);\n+\n+        GeneralEmpty<String[]> result2 = MAPPER.readValue(doc,\n+                new TypeReference<GeneralEmpty<String[]>>() { });\n+        assertNotNull(result2.value);\n+        assertEquals(0, result2.value.length);\n+\n+        GeneralEmpty<int[]> result3 = MAPPER.readValue(doc,\n+                new TypeReference<GeneralEmpty<int[]>>() { });\n+        assertNotNull(result3.value);\n+        assertEquals(0, result3.value.length);\n+\n+        GeneralEmpty<double[]> result4 = MAPPER.readValue(doc,\n+                new TypeReference<GeneralEmpty<double[]>>() { });\n+        assertNotNull(result4.value);\n+        assertEquals(0, result4.value.length);\n+\n+        GeneralEmpty<boolean[]> result5 = MAPPER.readValue(doc,\n+                new TypeReference<GeneralEmpty<boolean[]>>() { });\n+        assertNotNull(result5.value);\n+        assertEquals(0, result5.value.length);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/NullConversionsSkipTest.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import com.fasterxml.jackson.annotation.JsonSetter;\n+import com.fasterxml.jackson.annotation.Nulls;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+// for [databind#1402]; configurable null handling, specifically with SKIP\n+public class NullConversionsSkipTest extends XmlTestBase\n+{\n+    static class NullSkipField {\n+        public String nullsOk = \"a\";\n+\n+        @JsonSetter(nulls=Nulls.SKIP)\n+        public String noNulls = \"b\";\n+    }\n+\n+    static class NullSkipMethod {\n+        String _nullsOk = \"a\";\n+        String _noNulls = \"b\";\n+\n+        public void setNullsOk(String v) {\n+            _nullsOk = v;\n+        }\n+\n+        @JsonSetter(nulls=Nulls.SKIP)\n+        public void setNoNulls(String v) {\n+            _noNulls = v;\n+        }\n+    }\n+    \n+    static class StringValue {\n+        String value = \"default\";\n+\n+        public void setValue(String v) {\n+            value = v;\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods, straight annotation\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = newMapper();\n+\n+    public void testSkipNullField1() throws Exception\n+    {\n+        // first, ok if assigning non-null to not-nullable, null for nullable\n+        NullSkipField result = MAPPER.readValue(\n+//\"<NullSkipField><noNulls>foo</noNulls><nullsOk></nullsOk></NullSkipField>\",\n+\"<NullSkipField><noNulls>foo</noNulls><nullsOk /></NullSkipField>\",\n+                NullSkipField.class);\n+        assertEquals(\"foo\", result.noNulls);\n+        assertNull(result.nullsOk);\n+    }\n+\n+    public void testSkipNullField2() throws Exception\n+    {\n+        // and then see that nulls are not ok for non-nullable\n+        NullSkipField result = MAPPER.readValue(\"<NullSkipField><noNulls /></NullSkipField>\",\n+                NullSkipField.class);\n+        assertEquals(\"b\", result.noNulls);\n+        assertEquals(\"a\", result.nullsOk);\n+    }\n+\n+    public void testSkipNullMethod1() throws Exception\n+    {\n+        NullSkipMethod result = MAPPER.readValue(\n+//\"<NullSkipMethod><noNulls>foo<noNulls><nullsOk></nullsOk></NullSkipMethod>\",\n+\"<NullSkipMethod><noNulls>foo</noNulls><nullsOk /></NullSkipMethod>\",\n+                NullSkipMethod.class);\n+        assertEquals(\"foo\", result._noNulls);\n+        assertNull(result._nullsOk);\n+    }\n+\n+    public void testSkipNullMethod2() throws Exception\n+    {\n+        NullSkipMethod result = MAPPER.readValue(\"<NullSkipMethod><noNulls /></NullSkipMethod>\",\n+                NullSkipMethod.class);\n+        assertEquals(\"b\", result._noNulls);\n+        assertEquals(\"a\", result._nullsOk);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods, defaulting\n+    /**********************************************************\n+     */\n+    \n+    public void testSkipNullWithDefaults() throws Exception\n+    {\n+//        String doc = \"<StringValue><value></value></StringValue>\";\n+        String doc = \"<StringValue><value /></StringValue>\";\n+        StringValue result = MAPPER.readValue(doc, StringValue.class);\n+        assertNull(result.value);\n+\n+        ObjectMapper mapper = newMapper();\n+        mapper.configOverride(String.class)\n+            .setSetterInfo(JsonSetter.Value.forValueNulls(Nulls.SKIP));\n+        result = mapper.readValue(doc, StringValue.class);\n+        assertEquals(\"default\", result.value);\n+    }\n+}", "timestamp": 1525459577, "metainfo": ""}