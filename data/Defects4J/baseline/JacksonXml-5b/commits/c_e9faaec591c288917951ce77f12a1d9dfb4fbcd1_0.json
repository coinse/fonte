{"sha": "e9faaec591c288917951ce77f12a1d9dfb4fbcd1", "log": "Fix [Issue-26]; root element should use 'default namespace', not explicit prefix", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n     {\n         _nextName = name;\n     }\n-\n+    \n     /**\n      * Methdod called when a structured (collection, array, map) is being\n      * output.\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n \n import java.io.IOException;\n import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLStreamException;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializationConfig;\n import com.fasterxml.jackson.databind.ser.SerializerFactory;\n import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n+import com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n \n \n     {\n         QName rootName = (value == null) ? ROOT_NAME_FOR_NULL\n                 : _rootNameLookup.findRootName(value.getClass(), _config);\n-        ToXmlGenerator xgen = (ToXmlGenerator) jgen;\n-        xgen.setNextName(rootName);\n-        xgen.initGenerator();\n+        _initWithRootName(jgen, rootName);\n         super.serializeValue(jgen, value);\n     }\n \n         throws IOException, JsonProcessingException\n     {\n         QName rootName = _rootNameLookup.findRootName(rootType, _config);\n+        _initWithRootName(jgen, rootName);\n+        super.serializeValue(jgen, value, rootType);\n+    }\n+\n+    protected void _initWithRootName(JsonGenerator jgen, QName rootName)\n+            throws IOException, JsonProcessingException\n+    {\n         ToXmlGenerator xgen = (ToXmlGenerator) jgen;\n         xgen.setNextName(rootName);\n         xgen.initGenerator();\n-        super.serializeValue(jgen, value, rootType);\n+        String ns = rootName.getNamespaceURI();\n+        /* [Issue-26] If we just try writing root element with namespace,\n+         * we will get an explicit prefix. But we'd rather use the default\n+         * namespace, so let's try to force that.\n+         */\n+        if (ns != null && ns.length() > 0) {\n+            try {\n+                xgen.getStaxWriter().setDefaultNamespace(ns);\n+            } catch (XMLStreamException e) {\n+                StaxUtil.throwXmlAsIOException(e);\n+            }\n+        }\n     }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestNamespaces.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class TestNamespaces extends XmlTestBase\n+{\n+    @JacksonXmlRootElement(localName=\"person\", namespace=\"http://example.org/person\" )\n+    static class Person\n+    {\n+        private String name;\n+\n+        @JacksonXmlProperty(namespace = \"http://example.org/person\")\n+        public String getName() { return name; }\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+    \n+    // [Issue-26]: should prefer the \"default namespace\"\n+    public void testRootNamespace() throws Exception\n+    {\n+        Person person = new Person();\n+        person.setName( \"hello\" );\n+        \n+        XmlMapper xmlMapper = new XmlMapper();\n+        String xml = xmlMapper.writeValueAsString(person);\n+\n+        // should use \"the default namespace\"...\n+        final String PREFIX = \"<person xmlns=\";\n+        if (!xml.startsWith(PREFIX)) {\n+            fail(\"Expected XML to begin with '\"+PREFIX+\"', instead got: \"+xml);\n+        }\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestSerializationAttr.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestSerializationAttr.java\n         xml = removeSjsxpNamespace(xml);\n         xml = xml.replaceAll(\"\\\"\", \"'\");\n         // as with above, assumes exact NS allocation strategy, not optimal:\n-        assertEquals(\"<wstxns1:test xmlns:wstxns1='http://root' id='abc'>\"\n-        \t\t+\"<wstxns2:booleanA xmlns:wstxns2='http://my.ns'>true</wstxns2:booleanA></wstxns1:test>\",\n+        assertEquals(\"<test xmlns='http://root' id='abc'>\"\n+        \t\t+\"<wstxns1:booleanA xmlns:wstxns1='http://my.ns'>true</wstxns1:booleanA></test>\",\n         \txml);\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/TestElementWrapper.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/TestElementWrapper.java\n         person.children.add(child);\n \n         String xml = _jaxbMapper.writer().writeValueAsString(person);\n-\n-System.err.println(\"XML == \"+xml);        \n         \n         String expected = \"<Individual><name>Jay</name>\"\n                 + \"<offspring><kid><name>Junior</name><offspring/></kid></offspring></Individual>\";", "timestamp": 1337838353, "metainfo": ""}