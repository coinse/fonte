{"sha": "91067db79930b61aa63ea4fb3aca143c276eec69", "log": "Fixed (partially) #172", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n         if (!_objectIndenter.isInline()) {\n             if (_justHadStartElement) {\n                 _justHadStartElement = false;\n-            } else {\n-                _objectIndenter.writeIndentation(sw, _nesting);\n             }\n+            _objectIndenter.writeIndentation(sw, _nesting);\n             ++_nesting;\n         }\n         sw.writeStartElement(nsURI, localName);\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestIndentation.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestIndentation.java\n import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n \n public class TestIndentation extends XmlTestBase\n {\n-    /*\n-    /**********************************************************\n-    /* Helper types\n-    /**********************************************************\n-     */\n-\n     static class StringWrapperBean {\n         public StringWrapper string;\n         \n         public IntWrapperBean(int i) { wrapped = new IntWrapper(i); }\n     }\n \n-    // [Issue#45]\n+    // [dataformat-xml#45]\n     static class AttrBean {\n         @JacksonXmlProperty(isAttribute=true)\n         public int count = 3;\n         public PojoFor123(String name) {\n             this.name = name;       \n         }\n+    }\n+\n+    // for [dataformat-xml#172]\n+    static class Company {\n+        @JacksonXmlElementWrapper(localName=\"e\")\n+        public List<Employee> employee = new ArrayList<Employee>();\n+    }\n+\n+    static class Employee {\n+        public String id;\n+        public EmployeeType type;\n+\n+        public Employee(String id) {\n+            this.id = id;\n+            type = EmployeeType.FULL_TIME;\n+        }\n+    }\n+\n+    static enum EmployeeType {\n+        FULL_TIME;\n     }\n \n     /*\n         StringWrapperBean input = new StringWrapperBean(\"abc\");\n         String xml = _xmlMapper.writeValueAsString(input); \n \n-System.err.println(\"XML == \"+xml);        \n-        \n         // should have at least one linefeed, space...\n         if (xml.indexOf('\\n') < 0 || xml.indexOf(' ') < 0) {\n             fail(\"No indentation: XML == \"+xml);\n         assertEquals(\"b\", map.get(\"a\"));\n     }\n \n-    // [Issue#45]: Use of attributes should not force linefeed for empty elements\n+    // [dataformat-xml#45]: Use of attributes should not force linefeed for empty elements\n     public void testWithAttr() throws Exception\n     {\n         String xml = _xmlMapper.writeValueAsString(new AttrBean());\n         assertEquals(\"<PojoFor123 name=\\\"foobar\\\"/>\", xml);\n     }\n \n-}\n+    public void testMultiLevel172() throws Exception\n+    {\n+        Company root = new Company();\n+        root.employee.add(new Employee(\"abc\"));\n+        String xml = _xmlMapper.writeValueAsString(root);\n+        assertEquals(\"<Company>\\n\"\n+                +\"  <e>\\n\"\n+                +\"    <employee>\\n\"\n+                +\"      <id>abc</id>\\n\"\n+                +\"      <type>FULL_TIME</type>\\n\"\n+                +\"    </employee>\\n\"\n+                +\"  </e>\\n\"\n+                +\"</Company>\",\n+                xml);\n+    }\n+}", "timestamp": 1449430401, "metainfo": ""}