{"sha": "5de2c95b2191d939b9aeeade0c1361d9e5fbec78", "log": "test refactoring", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/MediaItem.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/MediaItem.java\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n \n @JsonPropertyOrder({\"content\", \"images\"})\n-public class MediaItem\n+class MediaItem\n {\n     public enum Player { JAVA, FLASH;  }\n     public enum Size { SMALL, LARGE; }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/RoundtripContentTest.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+public class RoundtripContentTest extends XmlTestBase\n+{\n+    public void testRoundtrip() throws Exception\n+    {\n+        final XmlMapper MAPPER = new XmlMapper();\n+        \n+        MediaItem.Content content = new MediaItem.Content();\n+        content.setTitle(\"content\");\n+        content.addPerson(\"William\");\n+        content.addPerson(\"Robert\");\n+\n+        MediaItem input = new MediaItem(content);\n+        input.addPhoto(new MediaItem.Photo(\"http://a\", \"title1\", 200, 100, MediaItem.Size.LARGE));\n+        input.addPhoto(new MediaItem.Photo(\"http://b\", \"title2\", 640, 480, MediaItem.Size.SMALL));\n+\n+        ObjectWriter w = MAPPER.writerWithType(MediaItem.class);\n+\n+        /*\n+        StringWriter sw = new StringWriter();\n+        try {\n+        w.writeValue(sw, input);\n+        } finally {\n+            System.err.println(\"So far -> [\"+sw+\"]\");\n+        }\n+        */\n+        \n+        String xml = w.writeValueAsString(input);\n+\n+//System.err.println(\"DEBUG: Xml == \"+xml);\n+\n+        ObjectReader r = MAPPER.reader(MediaItem.class);\n+        MediaItem result = r.readValue(xml);\n+        assertNotNull(result);\n+        assertEquals(content.getTitle(), result.getContent().getTitle());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/VersionInfoTest.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.Versioned;\n+import com.fasterxml.jackson.dataformat.xml.PackageVersion;\n+import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n+\n+public class VersionInfoTest extends XmlTestBase\n+{\n+    public void testMapperVersions()\n+    {\n+        assertVersion(new XmlMapper());\n+        assertVersion(new XmlFactory());\n+    }\n+\n+    // @since 2.1\n+    // [Issue#48]: ObjectMapper.copy()\n+    public void testMapperCopy()\n+    {\n+        XmlMapper mapper1 = new XmlMapper();\n+        mapper1.setXMLTextElementName(\"foo\");\n+        mapper1.configure(ToXmlGenerator.Feature.WRITE_XML_DECLARATION, true);\n+        \n+        XmlMapper mapper2 = mapper1.copy();\n+        assertNotSame(mapper1, mapper2);\n+        XmlFactory xf1 = mapper1.getFactory();\n+        XmlFactory xf2 = mapper2.getFactory();\n+        assertNotSame(xf1, xf2);\n+        assertEquals(XmlFactory.class, xf2.getClass());\n+\n+        // and [Issue#48] as well, incomplete copy...\n+        assertEquals(xf1.getXMLTextElementName(), xf2.getXMLTextElementName());\n+        assertEquals(xf1._xmlGeneratorFeatures, xf2._xmlGeneratorFeatures);\n+        assertEquals(xf1._xmlParserFeatures, xf2._xmlParserFeatures);\n+    }\n+\n+    // Another test for [Issue#48]\n+    public void testMapperSerialization() throws Exception\n+    {\n+        XmlMapper mapper1 = new XmlMapper();\n+        mapper1.setXMLTextElementName(\"foo\");\n+        assertEquals(\"foo\", mapper1.getFactory().getXMLTextElementName());\n+\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+        ObjectOutputStream objectStream = new ObjectOutputStream(bytes);\n+        objectStream.writeObject(mapper1);\n+        objectStream.close();\n+        \n+        ObjectInputStream input = new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));\n+        XmlMapper mapper2 = (XmlMapper) input.readObject();\n+        input.close();\n+\n+        assertEquals(\"foo\", mapper2.getFactory().getXMLTextElementName());\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+    \n+    private void assertVersion(Versioned vers)\n+    {\n+        final Version v = vers.version();\n+        assertFalse(\"Should find version information (got \"+v+\")\", v.isUknownVersion());\n+        Version exp = PackageVersion.VERSION;\n+        assertEquals(exp.toFullString(), v.toFullString());\n+        assertEquals(exp, v);\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/UnwrappingWithXMLTest.java\n+package com.fasterxml.jackson.dataformat.xml.misc;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+// for #12\n+public class UnwrappingWithXMLTest extends XmlTestBase\n+{\n+    @JsonPropertyOrder({\"x\", \"y\"})\n+    final static class Location {\n+        public int x;\n+        public int y;\n+\n+        public Location() { }\n+        public Location(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+    }\n+\n+    // IMPORTANT: ordering DOES matter here\n+    @JsonPropertyOrder({ \"name\", \"location\" })\n+    static class Unwrapping {\n+        public String name;\n+        @JsonUnwrapped(prefix=\"loc.\")\n+        public Location location;\n+\n+        public Unwrapping() { }\n+        public Unwrapping(String str, int x, int y) {\n+            name = str;\n+            location = new Location(x, y);\n+        }\n+    }\n+\n+    static class UnwrappingWithAttributes{\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String name;\n+        @JacksonXmlProperty(isAttribute=true)\n+        @JsonUnwrapped(prefix=\"loc.\")\n+        public Location location;\n+\n+        public UnwrappingWithAttributes() { }\n+        public UnwrappingWithAttributes(String str, int x, int y) {\n+            name = str;\n+            location = new Location(x, y);\n+        }\n+    }\n+\n+    static class UnwrappingSubWithAttributes{\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String name;\n+        @JsonUnwrapped(prefix=\"loc.\")\n+        public LocationWithAttributes location;\n+\n+        public UnwrappingSubWithAttributes() { }\n+        public UnwrappingSubWithAttributes(String str, int x, int y) {\n+            name = str;\n+            location = new LocationWithAttributes(x, y);\n+        }\n+    }\n+\n+    @JsonPropertyOrder({\"x\", \"y\"})\n+    final static class LocationWithAttributes {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public int x;\n+        public int y;\n+\n+        public LocationWithAttributes() { }\n+        public LocationWithAttributes(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests\n+    /**********************************************************\n+     */\n+\n+    /**\n+   * Simple test to verify that explicit schema mapping works fine\n+     * with unwrapped entities\n+     */\n+    public void testSimpleUnwrappingRoundtrip()\n+        throws Exception\n+    {\n+        final String XML = \"<Unwrapping><name>Joe</name><loc.x>15</loc.x><loc.y>27</loc.y></Unwrapping>\";\n+        ObjectMapper mapper = xmlMapper(false);\n+        Unwrapping wrapper = mapper.reader(Unwrapping.class).readValue(XML);\n+        assertNotNull(wrapper);\n+        assertNotNull(wrapper.location);\n+        assertEquals(15, wrapper.location.x);\n+        assertEquals(27, wrapper.location.y);\n+\n+        // should also write out the same way\n+        assertEquals(XML, mapper.writerWithType(Unwrapping.class).writeValueAsString(wrapper));\n+    }\n+\n+    public void testUnwrappingWithAttribute()\n+        throws Exception\n+    {\n+        final String XML = \"<UnwrappingWithAttributes name=\\\"Joe\\\" loc.x=\\\"15\\\" loc.y=\\\"27\\\"/>\";\n+        ObjectMapper mapper = xmlMapper(false);\n+        UnwrappingWithAttributes wrapper = mapper.reader(UnwrappingWithAttributes.class).readValue(XML);\n+        assertNotNull(wrapper);\n+        assertNotNull(wrapper.location);\n+        assertEquals(15, wrapper.location.x);\n+        assertEquals(27, wrapper.location.y);\n+\n+        // should also write out the same way\n+        assertEquals(XML, mapper.writerWithType(UnwrappingWithAttributes.class).writeValueAsString(wrapper));\n+    }\n+\n+    public void testUnwrappingSubWithAttribute()\n+        throws Exception\n+    {\n+        final String XML = \"<UnwrappingSubWithAttributes name=\\\"Joe\\\" loc.x=\\\"15\\\"><loc.y>27</loc.y></UnwrappingSubWithAttributes>\";\n+        ObjectMapper mapper = xmlMapper(false);\n+        UnwrappingSubWithAttributes wrapper = mapper.reader(UnwrappingSubWithAttributes.class).readValue(XML);\n+        assertNotNull(wrapper);\n+        assertNotNull(wrapper.location);\n+        assertEquals(15, wrapper.location.x);\n+        assertEquals(27, wrapper.location.y);\n+\n+        // should also write out the same way\n+        assertEquals(XML, mapper.writerWithType(UnwrappingSubWithAttributes.class).writeValueAsString(wrapper));\n+    }\n+}", "timestamp": 1396671430, "metainfo": ""}