{"sha": "ce61138456e10580c6bf78bc4009de926105c4d6", "log": "Add a reproduction of #282", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/MapperCopyTest.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n+import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;\n+import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n+\n+public class MapperCopyTest extends XmlTestBase\n+{\n+    @JacksonXmlRootElement(localName = \"AnnotatedName\")\n+    static class Pojo282\n+    {\n+        public int a = 3;\n+    }\n+\n+    public void testMapperCopy()\n+    {\n+        XmlMapper mapper1 = new XmlMapper();\n+        mapper1.setXMLTextElementName(\"foo\");\n+        mapper1.configure(ToXmlGenerator.Feature.WRITE_XML_DECLARATION, true);\n+        mapper1.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n+\n+        XmlMapper mapper2 = mapper1.copy();\n+        assertNotSame(mapper1, mapper2);\n+        XmlFactory xf1 = mapper1.getFactory();\n+        XmlFactory xf2 = mapper2.getFactory();\n+        assertNotSame(xf1, xf2);\n+        assertEquals(XmlFactory.class, xf2.getClass());\n+\n+        // and incomplete copy as well\n+        assertEquals(xf1.getXMLTextElementName(), xf2.getXMLTextElementName());\n+        assertEquals(xf1._xmlGeneratorFeatures, xf2._xmlGeneratorFeatures);\n+        assertEquals(xf1._xmlParserFeatures, xf2._xmlParserFeatures);\n+\n+        SerializationConfig sc1 = mapper1.getSerializationConfig();\n+        SerializationConfig sc2 = mapper2.getSerializationConfig();\n+        assertNotSame(sc1, sc2);\n+        assertEquals(\n+            \"serialization features did not get copied\",\n+            sc1.getSerializationFeatures(),\n+            sc2.getSerializationFeatures()\n+        );\n+    }\n+\n+    public void testSerializerProviderCopy() {\n+        DefaultSerializerProvider provider = new XmlSerializerProvider(new XmlRootNameLookup());\n+        DefaultSerializerProvider copy = provider.copy();\n+        assertNotSame(provider, copy);\n+    }\n+\n+    public void testMapperSerialization() throws Exception\n+    {\n+        XmlMapper mapper1 = newMapper();\n+        mapper1.setXMLTextElementName(\"foo\");\n+        assertEquals(\"foo\", mapper1.getFactory().getXMLTextElementName());\n+\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+        ObjectOutputStream objectStream = new ObjectOutputStream(bytes);\n+        objectStream.writeObject(mapper1);\n+        objectStream.close();\n+        \n+        ObjectInputStream input = new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));\n+        XmlMapper mapper2 = (XmlMapper) input.readObject();\n+        input.close();\n+\n+        assertEquals(\"foo\", mapper2.getFactory().getXMLTextElementName());\n+    }\n+\n+    /*\n+    // [dataformat-xml#282]\n+    public void testCopyWith() throws Exception\n+    {\n+        XmlMapper xmlMapper = newMapper();\n+        final ObjectMapper xmlMapperNoAnno = xmlMapper.copy()\n+                .disable(MapperFeature.USE_ANNOTATIONS)\n+                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n+\n+        String xml1 = xmlMapper.writeValueAsString(new Pojo282());\n+        String xml2 = xmlMapperNoAnno.writeValueAsString(new Pojo282());\n+\n+        if (!xml1.contains(\"AnnotatedName\")) {\n+            fail(\"Should use name 'AnnotatedName', xml = \"+xml1);\n+        }\n+        if (!xml2.contains(\"Pojo282\")\n+                || xml2.contains(\"AnnotatedName\")) {\n+            fail(\"Should NOT use name 'AnnotatedName' but 'Pojo282', xml = \"+xml1);\n+        }\n+    }\n+    */\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/VersionInfoTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/VersionInfoTest.java\n package com.fasterxml.jackson.dataformat.xml;\n-\n-import java.io.*;\n \n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.core.Versioned;\n-import com.fasterxml.jackson.databind.SerializationConfig;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n-import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n-import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;\n-import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n \n public class VersionInfoTest extends XmlTestBase\n {\n     {\n         assertVersion(new XmlMapper());\n         assertVersion(new XmlFactory());\n-    }\n-\n-    // @since 2.1\n-    // [Issue#48]: ObjectMapper.copy()\n-    public void testMapperCopy()\n-    {\n-        XmlMapper mapper1 = new XmlMapper();\n-        mapper1.setXMLTextElementName(\"foo\");\n-        mapper1.configure(ToXmlGenerator.Feature.WRITE_XML_DECLARATION, true);\n-        mapper1.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n-\n-        XmlMapper mapper2 = mapper1.copy();\n-        assertNotSame(mapper1, mapper2);\n-        XmlFactory xf1 = mapper1.getFactory();\n-        XmlFactory xf2 = mapper2.getFactory();\n-        assertNotSame(xf1, xf2);\n-        assertEquals(XmlFactory.class, xf2.getClass());\n-\n-        // and [Issue#48] as well, incomplete copy...\n-        assertEquals(xf1.getXMLTextElementName(), xf2.getXMLTextElementName());\n-        assertEquals(xf1._xmlGeneratorFeatures, xf2._xmlGeneratorFeatures);\n-        assertEquals(xf1._xmlParserFeatures, xf2._xmlParserFeatures);\n-\n-        // and [Issue#233]\n-        SerializationConfig sc1 = mapper1.getSerializationConfig();\n-        SerializationConfig sc2 = mapper2.getSerializationConfig();\n-        assertNotSame(sc1, sc2);\n-        assertEquals(\n-            \"serialization features did not get copied\",\n-            sc1.getSerializationFeatures(),\n-            sc2.getSerializationFeatures()\n-        );\n-    }\n-\n-    public void testSerializerProviderCopy() {\n-        DefaultSerializerProvider provider = new XmlSerializerProvider(new XmlRootNameLookup());\n-        DefaultSerializerProvider copy = provider.copy();\n-        assertNotSame(provider, copy);\n-    }\n-\n-    // Another test for [Issue#48]\n-    public void testMapperSerialization() throws Exception\n-    {\n-        XmlMapper mapper1 = new XmlMapper();\n-        mapper1.setXMLTextElementName(\"foo\");\n-        assertEquals(\"foo\", mapper1.getFactory().getXMLTextElementName());\n-\n-        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n-        ObjectOutputStream objectStream = new ObjectOutputStream(bytes);\n-        objectStream.writeObject(mapper1);\n-        objectStream.close();\n-        \n-        ObjectInputStream input = new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));\n-        XmlMapper mapper2 = (XmlMapper) input.readObject();\n-        input.close();\n-\n-        assertEquals(\"foo\", mapper2.getFactory().getXMLTextElementName());\n     }\n     \n     /*\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/MapperCopyTest.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class MapperCopyTest extends XmlTestBase\n+{\n+    @JacksonXmlRootElement(localName = \"AnnotatedName\")\n+    static class Pojo282\n+    {\n+        public int a = 3;\n+    }\n+\n+    // [dataformat-xml#282]\n+    public void testCopyWith() throws Exception\n+    {\n+        XmlMapper xmlMapper = newMapper();\n+        final ObjectMapper xmlMapperNoAnno = xmlMapper.copy()\n+                .disable(MapperFeature.USE_ANNOTATIONS)\n+                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n+\n+        String xml1 = xmlMapper.writeValueAsString(new Pojo282());\n+        String xml2 = xmlMapperNoAnno.writeValueAsString(new Pojo282());\n+\n+        if (!xml1.contains(\"AnnotatedName\")) {\n+            fail(\"Should use name 'AnnotatedName', xml = \"+xml1);\n+        }\n+        if (!xml2.contains(\"Pojo282\")\n+                || xml2.contains(\"AnnotatedName\")) {\n+            fail(\"Should NOT use name 'AnnotatedName' but 'Pojo282', xml = \"+xml1);\n+        }\n+    }\n+}", "timestamp": 1526928903, "metainfo": ""}