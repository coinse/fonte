{"sha": "0ad0c4977f7b1e93036152641042437523de7eb5", "log": "Fix [Issue#42]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/annotation/JacksonXmlText.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/annotation/JacksonXmlText.java\n @Retention(RetentionPolicy.RUNTIME)\n public @interface JacksonXmlText\n {\n-\t/**\n-\t * Whether serialization of the property should always be done as basic\n-\t * XML text or not; if true, will be, if false, not.\n-\t */\n-\tpublic boolean value() default true;\n+    /**\n+     * Whether serialization of the property should always be done as basic\n+     * XML text or not; if true, will be, if false, not.\n+     */\n+    public boolean value() default true;\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n     public final void setNextName(QName name)\n     {\n         _nextName = name;\n+    }\n+\n+    /**\n+     * Method that does same as {@link #setNextName}, unless\n+     * a name has already been set.\n+     * \n+     * @since 2.1.2\n+     */\n+    public final void setNextNameIfMissing(QName name)\n+    {\n+        if (_nextName == null) {\n+            _nextName = name;\n+        }\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n             throws IOException, JsonProcessingException\n     {\n         ToXmlGenerator xgen = (ToXmlGenerator) jgen;\n-        xgen.setNextName(rootName);\n+        /* 28-Nov-2012, tatu: We should only initialize the root\n+         *  name if no name has been set, as per [Issue#42],\n+         *  to allow for custom serializers to work.\n+         */\n+        xgen.setNextNameIfMissing(rootName);\n         xgen.initGenerator();\n         String ns = rootName.getNamespaceURI();\n         /* [Issue-26] If we just try writing root element with namespace,\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestSerializerCustom.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+/**\n+ * Unit test(s) for [Issue#42], problems with custom (de)serializer.\n+ */\n+@SuppressWarnings(\"serial\")\n+public class TestSerializerCustom extends XmlTestBase\n+{\n+    @JsonPropertyOrder({ \"name\", \"obj\" })\n+    static class Item {\n+        public String name;\n+        public Foo obj;\n+        public Item(String name, Foo obj) {\n+          this.name = name;\n+          this.obj = obj;\n+        }\n+    }\n+\n+    static class Foo {\n+        public String name;\n+        protected Foo() { }\n+        public Foo(String name) {\n+          this.name = name;\n+        }\n+    }\n+\n+    static class ItemDeserializer extends StdDeserializer<Item> {\n+        public ItemDeserializer() {\n+          super(Item.class);\n+        }\n+\n+        @Override\n+        public Item deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+          ObjectCodec oc = jp.getCodec();\n+          JsonNode json = oc.readTree(jp);\n+          JsonNode foo = json.get(\"obj\");\n+          if (foo == null) {\n+              throw new IllegalStateException(\"missing foo property\");\n+          }\n+          return new Item(json.path(\"name\").asText(),\n+                  oc.treeToValue(foo, Foo.class));\n+        }\n+    }\n+\n+    public class ItemSerializer extends StdSerializer<Item> {\n+        public ItemSerializer() {\n+          super(Item.class);\n+        }\n+\n+        @Override\n+        public void serialize(Item value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+          jgen.writeStartObject();\n+          jgen.writeObjectField(\"obj\", value.obj);\n+          jgen.writeStringField(\"name\", value.name);\n+          jgen.writeEndObject();\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testIssue42() throws Exception\n+    {\n+        XmlMapper xmlMapper = new XmlMapper();\n+        SimpleModule m = new SimpleModule(\"module\", new Version(1,0,0,null,null,null));\n+        m.addSerializer(Item.class, new ItemSerializer());\n+        m.addDeserializer(Item.class, new ItemDeserializer());\n+        xmlMapper.registerModule(m);\n+\n+        Item value = new Item(\"itemName\", new Foo(\"fooName\"));\n+        String xml = xmlMapper.writeValueAsString(value);\n+        \n+        Item result = xmlMapper.readValue(xml, Item.class);\n+        assertNotNull(result);\n+        assertEquals(\"itemName\", result.name);\n+        assertNotNull(result.obj);\n+        assertEquals(\"fooName\", result.obj.name);\n+    }\n+}", "timestamp": 1354165092, "metainfo": ""}