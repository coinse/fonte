{"sha": "a55e73c6f69ee4dc75ab81d1644d5b4da41bae50", "log": "Fix #169 (actual main fix in `jackson-databind`)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n      */\n     @Override\n     public boolean requiresCustomCodec() {\n-        return false;\n+        return true;\n     }\n     \n     /*\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/EmptyPolymorphicTest.java\n+package com.fasterxml.jackson.dataformat.xml.misc;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+// test(s) for [dataformat-xml#111]\n+public class EmptyPolymorphicTest extends XmlTestBase\n+{\n+    static class Data {\n+        public String name;\n+\n+        @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)\n+        @JsonSubTypes({ @JsonSubTypes.Type(EmptyProxy.class) })\n+        public Proxy proxy;\n+\n+        public Data() { }\n+        public Data(String n) {\n+            name = n;\n+            proxy = new EmptyProxy();\n+        }\n+    }\n+\n+    static interface Proxy { }\n+\n+    @JsonTypeName(\"empty\")\n+    static class EmptyProxy implements Proxy { }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n+    protected XmlMapper MAPPER = new XmlMapper();\n+    \n+    public void testEmpty() throws Exception\n+    {\n+        String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(new Data(\"Foobar\"));\n+        System.out.println(\"XML:\\n\"+xml);\n+        final Data data = MAPPER.readValue(xml, Data.class);\n+//                \"<data><name>Foobar</name><proxy><empty></empty></proxy></data>\"\n+        assertNotNull(data);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/PolymorphicTypesTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/PolymorphicTypesTest.java\n         public SubTypeWithClassProperty() { }\n         public SubTypeWithClassProperty(String s) { name = s; }\n     }\n-    \n+\n     @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n     protected static class BaseTypeWithClassObject { }\n \n         super.setUp();\n         _xmlMapper = new XmlMapper();\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Unit tests\n         String xml = _xmlMapper.writeValueAsString(new SubTypeWithClassProperty(\"Foobar\"));\n \n         // Type info should be written as an attribute, so:\n-        /* 13-Jan-2010, tatu: With Jackson 1.7.1, it is possible to override type information\n-         *   inclusion, which allows use of attribute over element, so:\n-         */\n         final String exp = \n             \"<SubTypeWithClassProperty _class=\\\"com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest..SubTypeWithClassProperty\\\">\"\n             //\"<SubTypeWithClassProperty><_class>com.fasterxml.jackson.xml.types.TestPolymorphic..SubTypeWithClassProperty</_class>\"\n     }\n \n     /**\n-     * Test for issue 81\n+     * Test for [dataformat-xml#81]\n      */\n     public void testAsPropertyWithObjectId() throws Exception\n     {", "timestamp": 1450422782, "metainfo": ""}