{"sha": "d9d9325bce00e8c444003dc47c208d7d6dc5b68e", "log": "Implemented [Issue-23]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n             if (acc == null) {\n                 continue;\n             }\n+            // first: do we need to handle wrapping (for Lists)?\n             QName wrapperName = AnnotationUtil.findWrapperName(intr, acc);\n-            if (wrapperName == null) {\n-                continue;\n+            if (wrapperName != null) {\n+                String localName = wrapperName.getLocalPart();\n+                if ((localName != null && localName.length() >= 0)\n+                        && !localName.equals(prop.getName())) {\n+                    // make copy-on-write as necessary\n+                    if (changed == 0) {\n+                        propDefs = new ArrayList<BeanPropertyDefinition>(propDefs);\n+                    }\n+                    ++changed;\n+                    propDefs.set(i, prop.withName(localName));\n+                    continue;\n+                }\n+            } else {\n+                /* If not, how about \"as text\" unwrapping? Such properties\n+                 * are exposed as values of 'unnamed' fields; so one way to\n+                 * map them is to rename property to have name \"\"... (and\n+                 * hope this does not break other parts...)\n+                 */\n+                Boolean b = AnnotationUtil.findIsTextAnnotation(intr, acc);\n+                if (b != null && b.booleanValue()) {\n+                    // unwrapped properties will appear as 'unnamed' (empty String)\n+                    propDefs.set(i, prop.withName(\"\"));\n+                    continue;\n+                }\n             }\n-            String localName = wrapperName.getLocalPart();\n-            if ((localName == null || localName.length() == 0)\n-                   || localName.equals(prop.getName())) {\n-                continue;\n-            }\n-            // make copy-on-write as necessary\n-            if (changed == 0) {\n-                propDefs = new ArrayList<BeanPropertyDefinition>(propDefs);\n-            }\n-            ++changed;\n-            // Also, must do upcast unfortunately\n-            propDefs.set(i, prop.withName(localName));\n         }\n         return propDefs;\n     }", "timestamp": 1333593640, "metainfo": ""}