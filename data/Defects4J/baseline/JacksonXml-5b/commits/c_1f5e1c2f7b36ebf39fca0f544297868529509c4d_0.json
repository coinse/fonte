{"sha": "1f5e1c2f7b36ebf39fca0f544297868529509c4d", "log": "Clear up new eclipse warnings, add a test to ensure file-backed generation methods work", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n                 _generatorFeatures, _xmlGeneratorFeatures,\n                 _objectCodec, _createXmlWriter(out));\n     }\n-\n+    \n     @Override\n     public ToXmlGenerator createGenerator(Writer out) throws IOException\n     {\n      * parser.\n      */\n     @Override\n+    @Deprecated\n     protected FromXmlParser _createJsonParser(InputStream in, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n      * parser.\n      */\n     @Override\n+    @Deprecated\n     protected FromXmlParser _createJsonParser(Reader r, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n      * parser.\n      */\n     @Override\n+    @Deprecated\n     protected FromXmlParser _createJsonParser(byte[] data, int offset, int len, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n     /**********************************************************\n      */\n \n+    /**\n+     * @deprecated Since 2.1, use {@link #getFactory} instead\n+     */\n     @Override\n+    @Deprecated\n     public XmlFactory getJsonFactory() {\n+        return (XmlFactory) _jsonFactory;\n+    }\n+\n+    @Override\n+    public XmlFactory getFactory() {\n         return (XmlFactory) _jsonFactory;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n             props = _props;\n         }\n \n-\t\tfinal int attrCount = _attributeCount;\n+        final int attrCount = _attributeCount;\n         if (attrCount > 0) {\n-        \txgen.setNextIsAttribute(true);\n+            xgen.setNextIsAttribute(true);\n         }\n         final int textIndex = _textPropertyIndex;\n         final QName[] xmlNames = _xmlNames;\n         }\n         return attrCount;\n     }\n-    \n }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestVersions.java\n         XmlMapper mapper1 = new XmlMapper();\n         ObjectMapper mapper2 = mapper1.copy();\n         assertNotSame(mapper1, mapper2);\n-        assertNotSame(mapper1.getJsonFactory(), mapper2.getFactory());\n+        assertNotSame(mapper1.getFactory(), mapper2.getFactory());\n         assertEquals(XmlFactory.class, mapper2.getFactory().getClass());\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestXmlGenerator.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestXmlGenerator.java\n \n import javax.xml.namespace.QName;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n \n         String xml = removeSjsxpNamespace(out.toString());\n         assertEquals(\"<root attr=\\\"-3\\\"><elem>13</elem></root>\", xml);\n     }\n-    \n+\n+    // [Issue#6], missing overrides for File-backed generator\n+    public void testWriteToFile() throws Exception\n+    {\n+        ObjectMapper mapper = new XmlMapper();\n+        File f = File.createTempFile(\"test\", \".tst\");\n+        mapper.writeValue(f, new IntWrapper(42));\n+\n+        String xml = readAll(f).trim();\n+\n+        assertEquals(\"<IntWrapper><i>42</i></IntWrapper>\", xml);\n+        f.delete();\n+    }    \n }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestXmlParser.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestXmlParser.java\n         // Former could be worked around; latter less so at this point.\n \n         // So, for now, let's just do sort of minimal verification, manually\n-        JsonParser jp = _xmlMapper.getJsonFactory().createJsonParser(xml);\n+        JsonParser jp = _xmlMapper.getFactory().createJsonParser(xml);\n         \n         assertToken(JsonToken.START_OBJECT, jp.nextToken()); // main object\n \n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n package com.fasterxml.jackson.dataformat.xml;\n \n-import java.io.IOException;\n+import java.io.*;\n \n import junit.framework.TestCase;\n \n         }\n         return xml;\n     }\n+\n+    protected String readAll(File f) throws IOException\n+    {\n+        StringBuilder sb = new StringBuilder();\n+        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(f), \"UTF-8\"));\n+        String line;\n+        \n+        while ((line = br.readLine()) != null) {\n+            sb.append(line).append(\"\\n\");\n+        }\n+        br.close();\n+        return sb.toString();\n+    }\n }", "timestamp": 1345745305, "metainfo": ""}