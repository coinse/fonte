{"sha": "5dee19ee645f2f4996acfa1f8fa79c3ab6875f84", "log": "Fix #246", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/EmptyStringValueTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/EmptyStringValueTest.java\n \n     public void testEmptyElement() throws Exception\n     {\n-        Name name = MAPPER.readValue(\"<name><first/><last></last></name>\", Name.class);\n+        final String XML = \"<name><first/><last></last></name>\";\n+        // Default settings: empty element becomes `null`:\n+        Name name = MAPPER.readValue(XML, Name.class);\n         assertNotNull(name);\n         assertNull(name.first);\n+        assertEquals(\"\", name.last);\n+\n+        // but can be changed\n+        XmlMapper mapper2 = new XmlMapper();\n+        mapper2.disable(FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL);\n+        name = mapper2.readValue(XML, Name.class);\n+        assertNotNull(name);\n+        assertEquals(\"\", name.first);\n         assertEquals(\"\", name.last);\n     }\n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStreamTest.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import java.io.*;\n+\n+import javax.xml.stream.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n+import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;\n+\n+public class XmlTokenStreamTest extends XmlTestBase\n+{\n+    private final XMLInputFactory _staxInputFactory = XMLInputFactory.newInstance();\n+\n+    public void testSimple() throws Exception\n+    {\n+        String XML = \"<root><leaf id='123'>abc</leaf></root>\";\n+        XMLStreamReader sr = _staxInputFactory.createXMLStreamReader(new StringReader(XML));\n+        // must point to START_ELEMENT, so:\n+        sr.nextTag();\n+        XmlTokenStream tokens = new XmlTokenStream(sr, XML,\n+                FromXmlParser.Feature.collectDefaults());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.getCurrentToken());\n+        assertEquals(\"root\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"leaf\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_ATTRIBUTE_NAME, tokens.next());\n+        assertEquals(\"id\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_ATTRIBUTE_VALUE, tokens.next());\n+        assertEquals(\"123\", tokens.getText());\n+        assertEquals(XmlTokenStream.XML_TEXT, tokens.next());\n+        assertEquals(\"abc\", tokens.getText());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END, tokens.next());\n+    }\n+\n+    public void testRootAttributes() throws Exception\n+    {\n+        _testRootAttributes(true); // empty tag as null\n+        _testRootAttributes(false); // empty tag as \"\"\n+    }\n+\n+    public void _testRootAttributes(boolean emptyAsNull) throws Exception\n+    {\n+\n+        String XML = \"<root id='x' />\";\n+        XMLStreamReader sr = _staxInputFactory.createXMLStreamReader(new StringReader(XML));\n+        // must point to START_ELEMENT, so:\n+        sr.nextTag();\n+        int f = FromXmlParser.Feature.collectDefaults();\n+        if (emptyAsNull) {\n+            f |= FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL.getMask();\n+        } else {\n+            f &= ~FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL.getMask();\n+        }\n+        XmlTokenStream tokens = new XmlTokenStream(sr, XML, f);\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.getCurrentToken());\n+        assertEquals(\"root\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_ATTRIBUTE_NAME, tokens.next());\n+        assertEquals(\"id\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_ATTRIBUTE_VALUE, tokens.next());\n+        assertEquals(\"x\", tokens.getText());\n+        if (!emptyAsNull) {\n+            assertEquals(XmlTokenStream.XML_TEXT, tokens.next());\n+            assertEquals(\"\", tokens.getText());\n+        }\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END, tokens.next());\n+    }\n+\n+    public void testEmptyTags() throws Exception\n+    {\n+        _testEmptyTags(true); // empty tag as null\n+        _testEmptyTags(false); // empty tag as \"\"\n+    }\n+        \n+    private void _testEmptyTags(boolean emptyAsNull) throws Exception\n+    {\n+        String XML = \"<root><leaf /></root>\";\n+        XMLStreamReader sr = _staxInputFactory.createXMLStreamReader(new StringReader(XML));\n+        // must point to START_ELEMENT, so:\n+        sr.nextTag();\n+        int f = FromXmlParser.Feature.collectDefaults();\n+        if (emptyAsNull) {\n+            f |= FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL.getMask();\n+        } else {\n+            f &= ~FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL.getMask();\n+        }\n+        XmlTokenStream tokens = new XmlTokenStream(sr, XML, f);\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.getCurrentToken());\n+        assertEquals(\"root\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"leaf\", tokens.getLocalName());\n+        if (!emptyAsNull) {\n+            assertEquals(XmlTokenStream.XML_TEXT, tokens.next());\n+            assertEquals(\"\", tokens.getText());\n+        }\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END, tokens.next());\n+    }\n+\n+    public void testNested() throws Exception\n+    {\n+        String XML = \"<root><a><b><c>abc</c></b></a></root>\";\n+        XMLStreamReader sr = _staxInputFactory.createXMLStreamReader(new StringReader(XML));\n+        sr.nextTag();\n+        XmlTokenStream tokens = new XmlTokenStream(sr, XML,\n+                FromXmlParser.Feature.collectDefaults());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.getCurrentToken());\n+        assertEquals(\"root\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"a\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"b\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"c\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_TEXT, tokens.next());\n+        assertEquals(\"abc\", tokens.getText());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END, tokens.next());\n+    }\n+    \n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java\n \n     public void testSimpleWithEmpty() throws Exception\n     {\n-        // 06-Jan-2015, tatu: Not superbly simple, actually; whether we'll have `null`\n-        //    or `{}` depends on context; if in array context, latter; otherwise former\n+        // 21-Jun-2017, tatu: Depends on setting actually...\n+        XmlFactory f = new XmlFactory();\n+\n+        f.enable(FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL);\n         assertEquals(\"{\\\"leaf\\\":null}\",\n-                _readXmlWriteJson(\"<root><leaf /></root>\"));\n+                _readXmlWriteJson(f, \"<root><leaf /></root>\"));\n+        f.disable(FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL);\n+        assertEquals(\"{\\\"leaf\\\":\\\"\\\"}\",\n+                _readXmlWriteJson(f, \"<root><leaf /></root>\"));\n     }\n \n     public void testSimpleNested() throws Exception\n     /* Helper methods\n     /**********************************************************\n      */\n-    \n+\n     private String _readXmlWriteJson(String xml) throws IOException\n     {\n+        return _readXmlWriteJson(_xmlFactory, xml);\n+    }\n+\n+    private String _readXmlWriteJson(XmlFactory xmlFactory, String xml) throws IOException\n+    {\n         StringWriter w = new StringWriter();\n \n-        JsonParser p = _xmlFactory.createParser(xml);\n+        JsonParser p = xmlFactory.createParser(xml);\n         JsonGenerator jg = _jsonFactory.createGenerator(w);\n         while (p.nextToken() != null) {\n             jg.copyCurrentEvent(p);", "timestamp": 1498112245, "metainfo": ""}