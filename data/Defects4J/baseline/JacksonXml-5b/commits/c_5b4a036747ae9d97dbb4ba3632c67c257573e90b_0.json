{"sha": "5b4a036747ae9d97dbb4ba3632c67c257573e90b", "log": "Fix [Issue#46], indentation for unwrapped lists", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlPrettyPrinter.java\n  */\n public interface XmlPrettyPrinter extends PrettyPrinter\n {\n+    /**\n+     * Method for forcibly writing a start element, without going\n+     * through Jackson generator (and thus, without updating currently\n+     * active element stack)\n+     * \n+     * @since 2.1\n+     */\n+    public void writeStartElement(XMLStreamWriter2 sw,\n+            String nsURI, String localName) throws XMLStreamException;\n+\n+    /**\n+     * Method for forcibly writing an end element, without going\n+     * through Jackson generator (and thus, without updating currently\n+     * active element stack)\n+     * \n+     * @since 2.1\n+     */\n+    public void writeEndElement(XMLStreamWriter2 sw, int nrOfEntries) throws XMLStreamException;\n+\n     public void writeLeafElement(XMLStreamWriter2 sw,\n     \t\tString nsURI, String localName, String text)\n         throws XMLStreamException;\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n     {\n         if (wrapperName != null) {\n             try {\n-                _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart());\n+                if (_xmlPrettyPrinter != null) {\n+                    _xmlPrettyPrinter.writeStartElement(_xmlWriter,\n+                            wrapperName.getNamespaceURI(), wrapperName.getLocalPart());\n+                } else {\n+                    _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart());\n+                }\n             } catch (XMLStreamException e) {\n                 StaxUtil.throwXmlAsIOException(e);\n             }\n         // First: wrapper to close?\n         if (wrapperName != null) {\n             try {\n-                _xmlWriter.writeEndElement();\n+                if (_xmlPrettyPrinter != null) {\n+                    _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount());\n+                } else {\n+                    _xmlWriter.writeEndElement();\n+                }\n             } catch (XMLStreamException e) {\n                 StaxUtil.throwXmlAsIOException(e);\n             }\n                 _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text);\n             } else {\n                 if (_xmlPrettyPrinter != null) {\n-                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n-                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n-                \t\t\ttext);\n+                    _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n+                            _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n+                            text);\n                 } else if (checkNextIsUnwrapped()) {\n-\t                _xmlWriter.writeCharacters(text);\n-                } else {\n-\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n-\t                _xmlWriter.writeCharacters(text);\n-\t                _xmlWriter.writeEndElement();\n+                    _xmlWriter.writeCharacters(text);\n+                } else {\n+                    _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n+                    _xmlWriter.writeCharacters(text);\n+                    _xmlWriter.writeEndElement();\n                 }\n             } \n         } catch (XMLStreamException e) {\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n     \n     @Override\n     public void beforeArrayValues(JsonGenerator jgen) throws IOException, JsonGenerationException {\n-\t\t// never called for ToXmlGenerator\n+        // never called for ToXmlGenerator\n     }\n \n     @Override\n     public void writeStartArray(JsonGenerator jgen)\n     \t\tthrows IOException, JsonGenerationException\n     {\n-\t\t// anything to do here?\n+        // anything to do here?\n     }\n \n     @Override\n     public void writeArrayValueSeparator(JsonGenerator jgen)  throws IOException, JsonGenerationException {\n-\t\t// never called for ToXmlGenerator\n+        // never called for ToXmlGenerator\n     }\n \n     @Override\n     public void writeEndArray(JsonGenerator jgen, int nrOfValues)\n     \t\tthrows IOException, JsonGenerationException\n     {\n-\t\t// anything to do here?\n+        // anything to do here?\n     }\n     \n     /*\n     public void beforeObjectEntries(JsonGenerator jgen)\n         throws IOException, JsonGenerationException\n     {\n-\t\t// never called for ToXmlGenerator\n+        // never called for ToXmlGenerator\n     }\n \n     @Override\n     public void writeStartObject(JsonGenerator jgen) throws IOException, JsonGenerationException\n     {\n-\t\tif (!_objectIndenter.isInline()) {\n-\t\t\tif (_nesting > 0) {\n-\t        \t_objectIndenter.writeIndentation(jgen, _nesting);\n-\t\t\t}\n+        if (!_objectIndenter.isInline()) {\n+            if (_nesting > 0) {\n+                _objectIndenter.writeIndentation(jgen, _nesting);\n+            }\n             ++_nesting;\n         }\n         ((ToXmlGenerator) jgen)._handleStartObject();\n \n     @Override\n     public void writeObjectEntrySeparator(JsonGenerator jgen)\n-    \t\tthrows IOException, JsonGenerationException\n-    {\n-\t\t// never called for ToXmlGenerator\n+            throws IOException, JsonGenerationException\n+    {\n+        // never called for ToXmlGenerator\n     }\n \n     @Override\n     public void writeObjectFieldValueSeparator(JsonGenerator jgen) throws IOException, JsonGenerationException {\n-\t\t// never called for ToXmlGenerator\n+        // never called for ToXmlGenerator\n     }\n     \n     @Override\n         }\n         // for empty elements, no need for linefeeds etc:\n         if (nrOfEntries > 0) {\n-        \t_objectIndenter.writeIndentation(jgen, _nesting);\n+            _objectIndenter.writeIndentation(jgen, _nesting);\n         }\n         ((ToXmlGenerator) jgen)._handleEndObject();\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* XML-specific additions\n     /**********************************************************\n      */\n \n+    @Override\n+    public void writeStartElement(XMLStreamWriter2 sw,\n+            String nsURI, String localName) throws XMLStreamException\n+    {\n+        if (!_objectIndenter.isInline()) {\n+            if (_nesting > 0) {\n+                _objectIndenter.writeIndentation(sw, _nesting);\n+            }\n+            ++_nesting;\n+        }\n+        sw.writeStartElement(nsURI, localName);\n+    }\n+\n+    @Override\n+    public void writeEndElement(XMLStreamWriter2 sw, int nrOfEntries) throws XMLStreamException\n+    {\n+        if (!_objectIndenter.isInline()) {\n+            --_nesting;\n+        }\n+        // for empty elements, no need for linefeeds etc:\n+        if (nrOfEntries > 0) {\n+            _objectIndenter.writeIndentation(sw, _nesting);\n+        }\n+        sw.writeEndElement();\n+    }\n+    \n     @Override\n     public void writeLeafElement(XMLStreamWriter2 sw,\n     \t\tString nsURI, String localName, String text)\n   \t\tthrows XMLStreamException\n     {\n-\t\tif (!_objectIndenter.isInline()) {\n-\t\t\t_objectIndenter.writeIndentation(sw, _nesting);\n-        }\n-\t\tsw.writeStartElement(nsURI, localName);\n-\t\tsw.writeCharacters(text);\n-\t\tsw.writeEndElement();\n+        if (!_objectIndenter.isInline()) {\n+            _objectIndenter.writeIndentation(sw, _nesting);\n+        }\n+        sw.writeStartElement(nsURI, localName);\n+        sw.writeCharacters(text);\n+        sw.writeEndElement();\n     }\n \n     @Override\n     \t\tchar[] buffer, int offset, int len)\n         throws XMLStreamException\n     {\n-\t\tif (!_objectIndenter.isInline()) {\n-\t\t\t_objectIndenter.writeIndentation(sw, _nesting);\n-        }\n-\t\tsw.writeStartElement(nsURI, localName);\n-\t\tsw.writeCharacters(buffer, offset, len);\n-\t\tsw.writeEndElement();\n+        if (!_objectIndenter.isInline()) {\n+            _objectIndenter.writeIndentation(sw, _nesting);\n+        }\n+        sw.writeStartElement(nsURI, localName);\n+        sw.writeCharacters(buffer, offset, len);\n+        sw.writeEndElement();\n     }\n \t\n     @Override\n         sw.writeEndElement();\n     }\n \n-\t@Override\n+    @Override\n     public void writeLeafElement(XMLStreamWriter2 sw,\n     \t\tString nsURI, String localName, float value)\n   \t\tthrows XMLStreamException\n     {\n-\t\tif (!_objectIndenter.isInline()) {\n-\t\t\t_objectIndenter.writeIndentation(sw, _nesting);\n-        }\n-\t\tsw.writeStartElement(nsURI, localName);\n-\t\tsw.writeFloat(value);\n-\t\tsw.writeEndElement();\n+        if (!_objectIndenter.isInline()) {\n+            _objectIndenter.writeIndentation(sw, _nesting);\n+        }\n+        sw.writeStartElement(nsURI, localName);\n+        sw.writeFloat(value);\n+        sw.writeEndElement();\n     }\n \t\n-\t@Override\n-    public void writeLeafElement(XMLStreamWriter2 sw,\n-    \t\tString nsURI, String localName, BigInteger value)\n-  \t\tthrows XMLStreamException\n-    {\n-\t\tif (!_objectIndenter.isInline()) {\n-\t\t\t_objectIndenter.writeIndentation(sw, _nesting);\n-        }\n-\t\tsw.writeStartElement(nsURI, localName);\n-\t\tsw.writeInteger(value);\n-\t\tsw.writeEndElement();\n+    @Override\n+    public void writeLeafElement(XMLStreamWriter2 sw,\n+            String nsURI, String localName, BigInteger value)\n+        throws XMLStreamException\n+    {\n+        if (!_objectIndenter.isInline()) {\n+            _objectIndenter.writeIndentation(sw, _nesting);\n+        }\n+        sw.writeStartElement(nsURI, localName);\n+        sw.writeInteger(value);\n+        sw.writeEndElement();\n     }\n \n     @Override", "timestamp": 1354167898, "metainfo": ""}