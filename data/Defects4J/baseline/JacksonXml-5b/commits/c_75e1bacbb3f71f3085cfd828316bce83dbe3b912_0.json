{"sha": "75e1bacbb3f71f3085cfd828316bce83dbe3b912", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n     public JacksonXmlAnnotationIntrospector(boolean defaultUseWrapper) {\n         _cfgDefaultUseWrapper = defaultUseWrapper;\n     }\n-    \n+\n     /*\n     /**********************************************************************\n     /* Overrides of JacksonAnnotationIntrospector impls\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlModule.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlModule.java\n  */\n public class JacksonXmlModule extends SimpleModule\n {\n-    private final static AnnotationIntrospector XML_ANNOTATION_INTROSPECTOR = new JacksonXmlAnnotationIntrospector();\n-\n+    /**\n+     * Determination of whether indexed properties (arrays, Lists) that are not explicitly\n+     * annotated (with {@link com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper}\n+     * or equivalent) should default to using implicit wrapper (with same name as property) or not.\n+     * If enabled, wrapping is used by default; if false, it is not.\n+     *<p>\n+     * Note that JAXB annotation introspector always assumes \"do not wrap by default\".\n+     * Jackson annotations have different default due to backwards compatibility.\n+     * \n+     * @since 2.1\n+     */\n+    protected boolean _cfgDefaultUseWrapper = JacksonXmlAnnotationIntrospector.DEFAULT_USE_WRAPPER;\n+    \n+    /*\n+    /**********************************************************************\n+    /* Life-cycle\n+    /**********************************************************************\n+     */\n+    \n     public JacksonXmlModule()\n     {\n         super(\"JackxonXmlModule\", ModuleVersion.instance.version());\n         context.addBeanDeserializerModifier(new XmlBeanDeserializerModifier());\n \n         // as well as AnnotationIntrospector\n-        context.insertAnnotationIntrospector(XML_ANNOTATION_INTROSPECTOR);\n+        context.insertAnnotationIntrospector(_constructIntrospector());\n     }    \n+\n+    /**\n+     * Method that can be used to define whether {@link AnnotationIntrospector}\n+     * we register will use wrapper for indexed (List, array) properties or not,\n+     * if there are no explicit annotations.\n+     * See {@link com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper}\n+     * for details.\n+     * \n+     * @param state Whether to enable or disable \"use wrapper for non-annotated List properties\"\n+     */\n+    public void setDefaultUseWrapper(boolean state) {\n+        _cfgDefaultUseWrapper = state;\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* Internal methods\n+    /**********************************************************************\n+     */\n+    \n+    protected AnnotationIntrospector _constructIntrospector()\n+    {\n+        return new JacksonXmlAnnotationIntrospector(_cfgDefaultUseWrapper);\n+    }\n }", "timestamp": 1347331934, "metainfo": ""}