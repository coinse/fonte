{"sha": "7cebda943332cec620720fe47dd9ecd7c7edffa4", "log": "minor refactoring", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n     /* Parsing state\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * Information about parser context, context in which\n      * the next token is to be parsed (root, array, object).\n      */\n     protected XmlReadContext _parsingContext;\n-    \n+\n     protected final XmlTokenStream _xmlTokens;\n-\n-    /**\n+    /**\n+     * \n      * We need special handling to keep track of whether a value\n      * may be exposed as simple leaf value.\n      */\n     protected String _currText;\n \n     protected Set<String> _namesToWrap;\n-    \n+\n     /*\n     /**********************************************************\n     /* Parsing state, parsed values\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * ByteArrayBuilder is needed if 'getBinaryValue' is called. If so,\n      * we better reuse it for remainder of content.\n     /* Life-cycle\n     /**********************************************************\n      */\n-    \n+\n     public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\n             ObjectCodec codec, XMLStreamReader xmlReader)\n     {\n         // should never get here\n         _throwInternal();\n         return null;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Overrides of specialized nextXxx() methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method overridden to support more reliable deserialization of\n+     * String collections.\n+     */\n+    @Override\n+    public String nextTextValue() throws IOException, JsonParseException {\n+        // !!! TODO: optimize\n+        return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;\n     }\n     \n     /*", "timestamp": 1419920389, "metainfo": ""}