{"sha": "2d7683ed820116b77cba9b4b290cd7ce7dfa5cf4", "log": "Fix #180", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n     @Override\n     public String getCurrentName() throws IOException\n     {\n-        // [JACKSON-395]: start markers require information from parent\n+        // start markers require information from parent\n         String name;\n         if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n             XmlReadContext parent = _parsingContext.getParent();\n     }\n \n     // DEBUGGING\n-    /*\n+/*\n     @Override\n     public JsonToken nextToken() throws IOException\n     {\n             }\n         }\n         return t;\n-    } \n-    */\n+    }\n+*/\n \n     @Override\n     public JsonToken nextToken() throws IOException\n             // Simple, except that if this is a leaf, need to suppress end:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf = false;\n+                if (_parsingContext.inArray()) {\n+                    // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n+                    //    expose as empty Object, not null\n+                    _nextToken = JsonToken.END_OBJECT;\n+                    _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n+                    return (_currToken = JsonToken.START_OBJECT);\n+                }\n                 return (_currToken = JsonToken.VALUE_NULL);\n             }\n             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n             _currText = _xmlTokens.getText();\n             if (_mayBeLeaf) {\n                 _mayBeLeaf = false;\n+                /* One more refinement (pronunced like \"hack\") is that if\n+                 * we had an empty String (or all white space), and we are\n+                 * deserializing an array, we better hide the empty text.\n+                 */\n                 // Also: must skip following END_ELEMENT\n                 _xmlTokens.skipEndElement();\n-                /* One more refinement (pronunced like \"hack\") is that if\n-                 * we had an empty String (or all white space), and we are\n-                 * deserializing an array, we better just hide the text\n-                 * altogether.\n-                 */\n                 if (_parsingContext.inArray()) {\n                     if (_isEmpty(_currText)) {\n-                        _currToken = JsonToken.END_ARRAY;\n-                        _parsingContext = _parsingContext.getParent();\n-                        _namesToWrap = _parsingContext.getNamesToWrap();\n-                        return _currToken;\n+                        // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n+                        //    expose as empty Object, not null (or, worse, as used to\n+                        //    be done, by swallowing the token)\n+                        _nextToken = JsonToken.END_OBJECT;\n+                        _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n+                        return (_currToken = JsonToken.START_OBJECT);\n                     }\n                 }\n                 return (_currToken = JsonToken.VALUE_STRING);\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/RoundtripContentTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/RoundtripContentTest.java\n \n public class RoundtripContentTest extends XmlTestBase\n {\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n     public void testRoundtrip() throws Exception\n     {\n-        final XmlMapper MAPPER = new XmlMapper();\n-        \n         MediaItem.Content content = new MediaItem.Content();\n         content.setTitle(\"content\");\n         content.addPerson(\"William\");\n \n         ObjectWriter w = MAPPER.writerFor(MediaItem.class);\n \n-        /*\n-        StringWriter sw = new StringWriter();\n-        try {\n-        w.writeValue(sw, input);\n-        } finally {\n-            System.err.println(\"So far -> [\"+sw+\"]\");\n-        }\n-        */\n-        \n-        String xml = w.writeValueAsString(input);\n+        // two variants; first without indentation\n+        _verifyRoundtrip(w.writeValueAsString(input), input);\n \n-//System.err.println(\"DEBUG: Xml == \"+xml);\n+        // and then with indentation\n+        _verifyRoundtrip(w.withDefaultPrettyPrinter()\n+                .writeValueAsString(input), input);\n+    }\n \n+    private void _verifyRoundtrip(String xml, MediaItem exp) throws Exception\n+    {\n         ObjectReader r = MAPPER.readerFor(MediaItem.class);\n         MediaItem result = r.readValue(xml);\n         assertNotNull(result);\n-        assertEquals(content.getTitle(), result.getContent().getTitle());\n+        assertEquals(exp.getContent().getTitle(), result.getContent().getTitle());\n     }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/JAXBObjectId170Test.java\n+package com.fasterxml.jackson.dataformat.xml.jaxb;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+import com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector;\n+\n+public class JAXBObjectId170Test extends XmlTestBase\n+{\n+    static class Company\n+    {\n+        @XmlElementWrapper(name = \"computers\")\n+        @XmlElement(name = \"computer\")\n+        public List<Computer> computers = new ArrayList<Computer>();\n+\n+        @XmlElementWrapper(name = \"employees\")\n+        @XmlElement(name = \"employee\")\n+        public List<Employee> employees = new ArrayList<Employee>();\n+\n+        public Company() { }\n+\n+        public Company add(Computer computer) {\n+            if (computers == null) {\n+                computers = new ArrayList<Computer>();\n+            }\n+            computers.add(computer);\n+            return this;\n+        }\n+    }\n+\n+    @XmlType(name = \"employee\")\n+    @XmlAccessorType(XmlAccessType.FIELD)\n+    static class Employee {\n+      @XmlAttribute\n+      @XmlID\n+      public String id;\n+\n+      @XmlAttribute\n+      public String name;\n+\n+      @XmlIDREF\n+      public Computer computer;\n+    }\n+\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME,\n+            include = JsonTypeInfo.As.WRAPPER_OBJECT,\n+            property = \"type\")\n+    @JsonSubTypes({\n+            @JsonSubTypes.Type(value = DesktopComputer.class, name = \"desktop\"),\n+            @JsonSubTypes.Type(value = LaptopComputer.class, name = \"laptop\")\n+    })\n+    static class Computer {\n+        public String id;\n+    }\n+\n+    static class DesktopComputer extends Computer {\n+        public String location;\n+\n+        protected DesktopComputer() { }\n+        public DesktopComputer with(String id0, String l) {\n+            id = id0;\n+            location = l;\n+            return this;\n+        }\n+    }\n+\n+    static class LaptopComputer extends Computer {\n+        public String vendor;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    // for [dataformat-xml#178]\n+    public void testPolyIdList178() throws Exception\n+    {\n+        final String XML =\n+\"<company>\\n\"+\n+\"<computers>\\n\"+\n+\"    <computers>\\n\"+\n+\"      <desktop id='computer-1'>\\n\"+\n+\"        <location>Bangkok</location>\\n\"+\n+\"      </desktop>\\n\"+\n+\"    </computers>\\n\"+\n+\"    <computers>\\n\"+\n+\"      <desktop id='computer-2'>\\n\"+\n+\"        <location>Pattaya</location>\\n\"+\n+\"      </desktop>\\n\"+\n+\"    </computers>\\n\"+\n+\"    <computers>\\n\"+\n+\"      <laptop id='computer-3'>\\n\"+\n+\"        <vendor>Apple</vendor>\\n\"+\n+\"      </laptop>\\n\"+\n+\"    </computers>\\n\"+\n+\"  </computers>\\n\"+\n+\"  <employees>\\n\"+\n+\"    <employee id='emp-1' name='Robert Patrick'>\\n\"+\n+\"      <computer>computer-3</computer>\\n\"+\n+\"    </employee>\\n\"+\n+\"    <employee id='emp-2' name='Michael Smith'>\\n\"+\n+\"      <computer>computer-2</computer>\\n\"+\n+\"    </employee>\\n\"+\n+\"  </employees>\\n\"+\n+\"</company>\\n\"\n+                ;\n+\n+        XmlMapper mapper = new XmlMapper();\n+        XmlJaxbAnnotationIntrospector xmlIntr = new XmlJaxbAnnotationIntrospector(mapper.getTypeFactory());\n+        xmlIntr.setDefaultUseWrapper(false);\n+        AnnotationIntrospector intr = XmlAnnotationIntrospector.Pair.instance\n+                (xmlIntr, new JacksonAnnotationIntrospector());\n+\n+        // should be default but doesn't seem to be?\n+        mapper.setAnnotationIntrospector(intr);\n+\n+        Company result = mapper.readValue(XML, Company.class);\n+        assertNotNull(result);\n+        assertNotNull(result.employees);\n+        assertEquals(2, result.employees.size());\n+        Employee empl2 = result.employees.get(1);\n+        Computer comp2 = empl2.computer;\n+        assertEquals(DesktopComputer.class, comp2.getClass());\n+        assertEquals(\"Pattaya\", ((DesktopComputer) comp2).location);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListRoundtripTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListRoundtripTest.java\n         public List<Point> points;\n     }\n \n-    // For [Issue#64]\n+    // For [dataformat-xml#64]\n     static class Optional {\n         @JacksonXmlText\n         public String number = \"NOT SET\";\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedLists180Test.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+public class NestedUnwrappedLists180Test  extends XmlTestBase\n+{\n+    static class Records {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Record> records = new ArrayList<Record>();\n+    }\n+\n+    static class Record {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Field> fields = new ArrayList<Field>();\n+    }\n+\n+    static class Field {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String name;\n+\n+        protected Field() { }\n+        public Field(String n) { name = n; }\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n+    public void testNestedUnwrappedLists180() throws Exception\n+    {\n+        /*\n+        Records recs = new Records();\n+        recs.records.add(new Record());\n+        recs.records.add(new Record());\n+        recs.records.add(new Record());\n+        recs.records.get(0).fields.add(new Field(\"a\"));\n+        recs.records.get(2).fields.add(new Field(\"b\"));\n+\n+        String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(recs);\n+        */\n+\n+        String xml =\n+\"<Records>\\n\"\n+// Important: it's the empty CDATA here that causes breakage -- empty element alone would be fine\n+//+\"<records>\\n</records>\\n\"\n++\"<records></records>\\n\"\n++\"  <records>\\n\"\n++\"   <fields name='b'/>\\n\"\n++\"  </records>\\n\"\n++\"</Records>\\n\"\n+;\n+        \n+//System.out.println(\"XML: \"+xml);\n+\n+        Records result = MAPPER.readValue(xml, Records.class);\n+        assertNotNull(result.records);\n+        assertEquals(2, result.records.size());\n+        assertNotNull(result.records.get(1));\n+        assertEquals(1, result.records.get(1).fields.size());\n+        assertEquals(\"b\", result.records.get(1).fields.get(0).name);\n+\n+        // also, first one ought not be null should it? Ideally not...\n+        assertNotNull(result.records.get(0));\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedListsTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedListsTest.java\n         ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n         assertNotNull(svc);\n         assertNotNull(svc.vehicleMonitoringDelivery);\n-        assertEquals(0, svc.vehicleMonitoringDelivery.size());\n+        // 06-Jan-2015, tatu: Really should have one empty entry, not 0\n+        assertEquals(1, svc.vehicleMonitoringDelivery.size());\n     }\n \n     public void testNestedWithEmpty2() throws Exception\n         assertEquals(1, svc.vehicleMonitoringDelivery.size());\n         VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);\n         assertNotNull(del.vehicleActivity);\n-        assertEquals(0, del.vehicleActivity.size());\n+        // 06-Jan-2015, tatu: Really should have one empty entry, not 0\n+        assertEquals(1, del.vehicleActivity.size());\n     }\n     \n     public void testNested1_2b() throws Exception\n         assertNotNull(act);\n         assertEquals(\"2013-09-12T09:29:07.536-04:00\", act.recordedAtTime);\n     }\n-    \n+\n     public void testNested2_1() throws Exception\n     {\n         final String XML =\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/EmptyPolymorphicTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/EmptyPolymorphicTest.java\n     public void testEmpty() throws Exception\n     {\n         String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(new Data(\"Foobar\"));\n-        System.out.println(\"XML:\\n\"+xml);\n+//System.out.println(\"XML:\\n\"+xml);\n         final Data data = MAPPER.readValue(xml, Data.class);\n //                \"<data><name>Foobar</name><proxy><empty></empty></proxy></data>\"\n         assertNotNull(data);\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserTest.java\n \n     public void testSimpleWithEmpty() throws Exception\n     {\n+        // 06-Jan-2015, tatu: Not superbly simple, actually; whether we'll have `null`\n+        //    or `{}` depends on context; if in array context, latter; otherwise former\n         assertEquals(\"{\\\"leaf\\\":null}\",\n                 _readXmlWriteJson(\"<root><leaf /></root>\"));\n     }", "timestamp": 1452137747, "metainfo": ""}