{"sha": "38e7afea5efe2ca6ec71c470ad1cd2b9707c5f43", "log": "Issue#233 XmlMapper.copy() doesn't properly copy internal configurations", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n package com.fasterxml.jackson.dataformat.xml;\n \n-import java.io.IOException;\n-\n-import javax.xml.stream.XMLInputFactory;\n-import javax.xml.stream.XMLOutputFactory;\n-import javax.xml.stream.XMLStreamReader;\n-import javax.xml.stream.XMLStreamWriter;\n-\n-import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.PrettyPrinter;\n+import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.core.type.TypeReference;\n-import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;\n import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;\n import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n+\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.io.IOException;\n \n /**\n  * Customized {@link ObjectMapper} that will read and write XML instead of JSON,\n         _serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);\n     }\n \n+    protected XmlMapper(XmlMapper mapper) {\n+        super(mapper);\n+        this._xmlModule = mapper._xmlModule;\n+    }\n+\n     @Override\n     public XmlMapper copy()\n     {\n         _checkInvalidCopy(XmlMapper.class);\n-        return new XmlMapper((XmlFactory) _jsonFactory.copy(), _xmlModule);\n+        return new XmlMapper(this);\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n package com.fasterxml.jackson.dataformat.xml.ser;\n \n-import java.io.IOException;\n-\n-import javax.xml.namespace.QName;\n-import javax.xml.stream.XMLStreamException;\n-\n-import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.databind.ser.SerializerFactory;\n-import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n import com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n import com.fasterxml.jackson.dataformat.xml.util.TypeUtil;\n import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n+\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLStreamException;\n+import java.io.IOException;\n \n /**\n  * We need to override some parts of\n     /* Overridden methods\n     /**********************************************************************\n      */\n+\n+    @Override\n+    public DefaultSerializerProvider copy() {\n+        return this;\n+    }\n \n     @Override\n     public DefaultSerializerProvider createInstance(SerializationConfig config,\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/VersionInfoTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/VersionInfoTest.java\n package com.fasterxml.jackson.dataformat.xml;\n-\n-import java.io.*;\n \n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.core.Versioned;\n-import com.fasterxml.jackson.dataformat.xml.PackageVersion;\n-import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n-import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n \n public class VersionInfoTest extends XmlTestBase\n {\n         XmlMapper mapper1 = new XmlMapper();\n         mapper1.setXMLTextElementName(\"foo\");\n         mapper1.configure(ToXmlGenerator.Feature.WRITE_XML_DECLARATION, true);\n-        \n+        mapper1.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n+\n         XmlMapper mapper2 = mapper1.copy();\n         assertNotSame(mapper1, mapper2);\n         XmlFactory xf1 = mapper1.getFactory();\n         assertEquals(xf1.getXMLTextElementName(), xf2.getXMLTextElementName());\n         assertEquals(xf1._xmlGeneratorFeatures, xf2._xmlGeneratorFeatures);\n         assertEquals(xf1._xmlParserFeatures, xf2._xmlParserFeatures);\n+\n+        // and [Issue#233]\n+        SerializationConfig sc1 = mapper1.getSerializationConfig();\n+        SerializationConfig sc2 = mapper2.getSerializationConfig();\n+        assertNotSame(sc1, sc2);\n+        assertEquals(\n+            \"serialization features did not get copied\",\n+            sc1.getSerializationFeatures(),\n+            sc2.getSerializationFeatures()\n+        );\n     }\n \n     // Another test for [Issue#48]", "timestamp": 1494965105, "metainfo": ""}