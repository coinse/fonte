{"sha": "6eda875e8ba7eab24d12c2ad632f34289b02201d", "log": "Fix issue #162", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n     \n     private final String _collectUntilTag() throws XMLStreamException\n     {\n-        String text = null;\n+        if (_xmlReader.isEmptyElement()) {\n+            _xmlReader.next();\n+            return null;\n+        }\n+\n+        StringBuilder text = new StringBuilder();\n+\n         while (true) {\n             switch (_xmlReader.next()) {\n             case XMLStreamConstants.START_ELEMENT:\n             case XMLStreamConstants.END_ELEMENT:\n             case XMLStreamConstants.END_DOCUMENT:\n-                return text;\n-                // note: SPACE is ignorable (and seldom seen), not to be included\n+                return text.toString();\n+            // note: SPACE is ignorable (and seldom seen), not to be included\n             case XMLStreamConstants.CHARACTERS:\n             case XMLStreamConstants.CDATA:\n-                if (text == null) {\n-                    text = _xmlReader.getText();\n-                } else { // can be optimized in future, if need be:\n-                    text += _xmlReader.getText();\n-                }\n+                text.append(_xmlReader.getText());\n                 break;\n             default:\n                 // any other type (proc instr, comment etc) is just ignored\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/TestStringValues162.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class TestStringValues162 extends XmlTestBase\n+{\n+    static class Name {\n+        public String first;\n+        public String last;\n+\n+        public Name() { }\n+        public Name(String f, String l) {\n+            first = f;\n+            last = l;\n+        }\n+    }\n+\n+    static class Names {\n+        public List<Name> names = new ArrayList<Name>();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n+    public void testEmptyString162() throws Exception\n+    {\n+        Name name = MAPPER.readValue(\"<name><first>Ryan</first><last></last></name>\",\n+                Name.class);\n+        assertNotNull(name);\n+        assertEquals(\"Ryan\", name.first);\n+        assertEquals(\"\", name.last);\n+    }\n+\n+    public void testEmptyElement() throws Exception\n+    {\n+        Name name = MAPPER.readValue(\"<name><first/><last></last></name>\", Name.class);\n+        assertNotNull(name);\n+        assertNull(name.first);\n+        assertEquals(\"\", name.last);\n+    }\n+\n+    public void testEmptyStringElement() throws Exception\n+    {\n+        // then with empty element\n+        StringBean bean = MAPPER.readValue(\"<StringBean><text></text></StringBean>\", StringBean.class);\n+        assertNotNull(bean);\n+        // empty String or null?\n+        // As per [dataformat-xml#162], really should be \"\", not null:\n+        assertEquals(\"\", bean.text);\n+//        assertNull(bean.text);\n+    }\n+\n+    public void testStringsInList() throws Exception\n+    {\n+        Names input = new Names();\n+        input.names.add(new Name(\"Bob\", \"Lee\"));\n+        input.names.add(new Name(\"\", \"\"));\n+        input.names.add(new Name(\"Sponge\", \"Bob\"));\n+        String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(input);\n+        \n+//System.err.println(\"XML:\\n\"+xml);\n+\n+        Names result = MAPPER.readValue(xml, Names.class);\n+        assertNotNull(result);\n+        assertNotNull(result.names);\n+        assertEquals(3, result.names.size());\n+        assertEquals(\"Bob\", result.names.get(2).last);\n+\n+        // [dataformat-xml#162]: should get empty String, not null\n+        assertEquals(\"\", result.names.get(1).first);\n+    }\n+}", "timestamp": 1482400996, "metainfo": ""}