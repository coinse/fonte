{"sha": "b2e92327571e7b2e83be4b1cca89db89dc495160", "log": "Merge branch '2.8'", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n         _serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);\n     }\n \n-    protected XmlMapper(XmlMapper mapper) {\n-        super(mapper);\n-        this._xmlModule = mapper._xmlModule;\n+    /**\n+     * @since 2.8.9\n+     */\n+    protected XmlMapper(XmlMapper src) {\n+        super(src);\n+        _xmlModule = src._xmlModule;\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n         _rootNameLookup  = src._rootNameLookup;\n     }\n \n-    protected XmlSerializerProvider(XmlSerializerProvider toCopy) {\n-        super(toCopy);\n-        this._rootNameLookup = toCopy._rootNameLookup;\n+    /**\n+     * @since 2.8.9\n+     */\n+    protected XmlSerializerProvider(XmlSerializerProvider src) {\n+        super(src);\n+        _rootNameLookup = src._rootNameLookup;\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n     /**\n      * @since 2.8.9\n      */\n-    protected XmlMapper(XmlMapper mapper) {\n-        super(mapper);\n-        this._xmlModule = mapper._xmlModule;\n+    protected XmlMapper(XmlMapper src) {\n+        super(src);\n+        _xmlModule = src._xmlModule;\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlReadContext.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlReadContext.java\n \n     @Override\n     public final String getCurrentName() { return _currentName; }\n+\n+    // @since 2.9\n+    @Override public boolean hasCurrentName() { return _currentName != null; }\n \n     @Override\n     public final XmlReadContext getParent() { return _parent; }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n     /* Output method implementations, unprocessed (\"raw\")\n     /**********************************************************\n      */\n+\n+    @Override\n+    public void writeRawValue(String text) throws IOException {\n+        // [dataformat-xml#39]\n+        if (_stax2Emulation) {\n+            _reportUnimplementedStax2(\"writeRawValue\");\n+        }\n+        try {\n+            _verifyValueWrite(\"write raw value\");\n+            if (_nextName == null) {\n+                handleMissingName();\n+            }\n+\n+            if (_nextIsAttribute) {\n+                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text);\n+            } else {\n+                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n+                _xmlWriter.writeRaw(text);\n+                _xmlWriter.writeEndElement();\n+            }\n+        } catch (XMLStreamException e) {\n+            StaxUtil.throwXmlAsIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRawValue(String text, int offset, int len) throws IOException {\n+        // [dataformat-xml#39]\n+        if (_stax2Emulation) {\n+            _reportUnimplementedStax2(\"writeRawValue\");\n+        }\n+        try {\n+            _verifyValueWrite(\"write raw value\");\n+            if (_nextName == null) {\n+                handleMissingName();\n+            }\n+\n+            if (_nextIsAttribute) {\n+                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len));\n+            } else {\n+                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n+                _xmlWriter.writeRaw(text, offset, len);\n+                _xmlWriter.writeEndElement();\n+            }\n+        } catch (XMLStreamException e) {\n+            StaxUtil.throwXmlAsIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+        // [dataformat-xml#39]\n+        if (_stax2Emulation) {\n+            _reportUnimplementedStax2(\"writeRawValue\");\n+        }\n+        _verifyValueWrite(\"write raw value\");\n+        if (_nextName == null) {\n+            handleMissingName();\n+        }\n+        try {\n+            if (_nextIsAttribute) {\n+                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));\n+            } else {\n+                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n+                _xmlWriter.writeRaw(text, offset, len);\n+                _xmlWriter.writeEndElement();\n+            }\n+        } catch (XMLStreamException e) {\n+            StaxUtil.throwXmlAsIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRawValue(SerializableString text) throws IOException {\n+        _reportUnsupportedOperation();\n+    }\n \n     @Override\n     public void writeRaw(String text) throws IOException\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n     /**\n      * @since 2.8.9\n      */\n-    protected XmlSerializerProvider(XmlSerializerProvider toCopy) {\n-        super(toCopy);\n-        this._rootNameLookup = toCopy._rootNameLookup;\n+    protected XmlSerializerProvider(XmlSerializerProvider src) {\n+        super(src);\n+        _rootNameLookup = src._rootNameLookup;\n     }\n \n     /*\n         final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n         try {\n             ser.serialize(value, gen, this);\n-        } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is\n-            throw ioe;\n         } catch (Exception e) { // but wrap RuntimeExceptions, to get path information\n-            String msg = e.getMessage();\n-            if (msg == null) {\n-                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n-            }\n-            throw JsonMappingException.from(gen, msg, e);\n+            throw _wrapAsIOE(gen, e);\n         }\n         // end of super-class implementation\n \n         }\n     }\n \n+    // @since 2.1\n     @SuppressWarnings(\"resource\")\n     @Override\n-    public void serializeValue(JsonGenerator gen, Object value, JavaType rootType)\n-        throws IOException\n+    public void serializeValue(JsonGenerator gen, Object value, JavaType rootType,\n+            JsonSerializer<Object> ser) throws IOException\n     {\n         if (value == null) {\n             _serializeXmlNull(gen);\n                 _startRootArray(xgen, rootName);\n             }\n         }\n-\n-        final JsonSerializer<Object> ser = findTypedValueSerializer(rootType, true, null);\n+        if (ser == null) {\n+            ser = findTypedValueSerializer(rootType, true, null);\n+        }\n         // From super-class implementation\n         try {\n             ser.serialize(value, gen, this);\n-        } catch (IOException ioe) { // no wrapping for IO (and derived)\n-            throw ioe;\n         } catch (Exception e) { // but others do need to be, to get path etc\n-            String msg = e.getMessage();\n-            if (msg == null) {\n-                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n-            }\n-            throw JsonMappingException.from(gen, msg, e);\n-        }\n-        // end of super-class implementation\n-\n-        if (asArray) {\n-            gen.writeEndObject();\n-        }\n-    }\n-    \n-    // @since 2.1\n-    @SuppressWarnings(\"resource\")\n-    @Override\n-    public void serializeValue(JsonGenerator gen, Object value, JavaType rootType,\n-            JsonSerializer<Object> ser) throws IOException\n-    {\n-        if (value == null) {\n-            _serializeXmlNull(gen);\n-            return;\n-        }\n-        final boolean asArray;\n-        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n-        if (xgen == null) { // called by convertValue()\n-            asArray = false;\n-        } else {\n-            QName rootName = _rootNameFromConfig();\n-            if (rootName == null) {\n-                rootName = _rootNameLookup.findRootName(rootType, _config);\n-            }\n-            _initWithRootName(xgen, rootName);\n-            asArray = TypeUtil.isIndexedType(rootType);\n-            if (asArray) {\n-                _startRootArray(xgen, rootName);\n-            }\n-        }\n-        if (ser == null) {\n-            ser = findTypedValueSerializer(rootType, true, null);\n-        }\n-        // From super-class implementation\n-        try {\n-            ser.serialize(value, gen, this);\n-        } catch (IOException ioe) { // no wrapping for IO (and derived)\n-            throw ioe;\n-        } catch (Exception e) { // but others do need to be, to get path etc\n-            String msg = e.getMessage();\n-            if (msg == null) {\n-                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n-            }\n-            throw JsonMappingException.from(gen, msg, e);\n+            throw _wrapAsIOE(gen, e);\n         }\n         // end of super-class implementation\n         if (asArray) {\n         }\n         return (ToXmlGenerator) gen;\n     }    \n+\n+    protected IOException _wrapAsIOE(JsonGenerator g, Exception e) {\n+        if (e instanceof IOException) {\n+            return (IOException) e;\n+        }\n+        String msg = e.getMessage();\n+        if (msg == null) {\n+            msg = \"[no message for \"+e.getClass().getName()+\"]\";\n+        }\n+        return new JsonMappingException(g, msg, e);\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/VersionInfoTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/VersionInfoTest.java\n \n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.core.Versioned;\n-import com.fasterxml.jackson.dataformat.xml.PackageVersion;\n-import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n-import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n+import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;\n+import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n \n public class VersionInfoTest extends XmlTestBase\n {\n         XmlMapper mapper1 = new XmlMapper();\n         mapper1.setXMLTextElementName(\"foo\");\n         mapper1.configure(ToXmlGenerator.Feature.WRITE_XML_DECLARATION, true);\n-        \n+        mapper1.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n+\n         XmlMapper mapper2 = mapper1.copy();\n         assertNotSame(mapper1, mapper2);\n         XmlFactory xf1 = mapper1.getFactory();\n         assertEquals(xf1.getXMLTextElementName(), xf2.getXMLTextElementName());\n         assertEquals(xf1._xmlGeneratorFeatures, xf2._xmlGeneratorFeatures);\n         assertEquals(xf1._xmlParserFeatures, xf2._xmlParserFeatures);\n+\n+        // and [Issue#233]\n+        SerializationConfig sc1 = mapper1.getSerializationConfig();\n+        SerializationConfig sc2 = mapper2.getSerializationConfig();\n+        assertNotSame(sc1, sc2);\n+        assertEquals(\n+            \"serialization features did not get copied\",\n+            sc1.getSerializationFeatures(),\n+            sc2.getSerializationFeatures()\n+        );\n+    }\n+\n+    public void testSerializerProviderCopy() {\n+        DefaultSerializerProvider provider = new XmlSerializerProvider(new XmlRootNameLookup());\n+        DefaultSerializerProvider copy = provider.copy();\n+        assertNotSame(provider, copy);\n     }\n \n     // Another test for [Issue#48]\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/MixedContentTreeRead226Test.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class MixedContentTreeRead226Test extends XmlTestBase\n+{\n+    public void testMixed226() throws Exception\n+    {\n+        final String XML = \"<root>\\n<a>lorem <b>ipsum</b> dolor</a>\\n</root>\";\n+        XmlMapper mapper = new XmlMapper();\n+        JsonNode root = mapper.readTree(XML);\n+        assertNotNull(root);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlGeneratorTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlGeneratorTest.java\n \n         assertEquals(\"<IntWrapper><i>42</i></IntWrapper>\", xml);\n         f.delete();\n-    }    \n+    }\n+\n+    public void testRawSimpleValue() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        gen.writeFieldName(\"elem\");\n+        gen.writeRawValue(\"value\");\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root><elem>value</elem></root>\", xml);\n+    }\n+\n+    public void testRawOffsetValue() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        gen.writeFieldName(\"elem\");\n+        gen.writeRawValue(\"NotAValue_value_NotAValue\", 10, 5);\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root><elem>value</elem></root>\", xml);\n+    }\n+\n+    public void testRawCharArrayValue() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        gen.writeFieldName(\"elem\");\n+        gen.writeRawValue(new char[] {'!', 'v', 'a', 'l', 'u', 'e', '!'}, 1, 5);\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root><elem>value</elem></root>\", xml);\n+    }\n+\n+    public void testRawSimpleAttribute() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        // and also need to force attribute\n+        gen.setNextIsAttribute(true);\n+        gen.writeFieldName(\"attr\");\n+        gen.writeRawValue(\"value\");\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root attr=\\\"value\\\"/>\", xml);\n+    }\n+\n+    public void testRawOffsetAttribute() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        // and also need to force attribute\n+        gen.setNextIsAttribute(true);\n+        gen.writeFieldName(\"attr\");\n+        gen.writeRawValue(\"NotAValue_value_NotAValue\", 10, 5);\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root attr=\\\"value\\\"/>\", xml);\n+    }\n+\n+    public void testRawCharArratAttribute() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        // and also need to force attribute\n+        gen.setNextIsAttribute(true);\n+        gen.writeFieldName(\"attr\");\n+        gen.writeRawValue(new char[]{'!', 'v', 'a', 'l', 'u', 'e', '!'}, 1, 5);\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root attr=\\\"value\\\"/>\", xml);\n+    }\n }", "timestamp": 1495066580, "metainfo": ""}