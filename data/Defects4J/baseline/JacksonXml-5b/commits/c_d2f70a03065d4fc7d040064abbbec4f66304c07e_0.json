{"sha": "d2f70a03065d4fc7d040064abbbec4f66304c07e", "log": "Further work to clean up exceptio unwrapping, propagation.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n         try {\n             sw = _xmlOutputFactory.createXMLStreamWriter(out, \"UTF-8\");\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwAsGenerationException(e);\n+            return StaxUtil.throwAsGenerationException(e, null);\n         }\n         return _initializeXmlWriter(sw);\n     }\n         try {\n             sw = _xmlOutputFactory.createXMLStreamWriter(w);\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwAsGenerationException(e);\n+            return StaxUtil.throwAsGenerationException(e, null);\n         }\n         return _initializeXmlWriter(sw);\n     }\n         try {\n             sw.setDefaultNamespace(\"\");\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwAsGenerationException(e);\n+            return StaxUtil.throwAsGenerationException(e, null);\n         }\n         return sw;\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n import org.codehaus.stax2.ri.Stax2ReaderAdapter;\n \n import com.fasterxml.jackson.core.JsonLocation;\n-import com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n \n /**\n  * Simple helper class used on top of STAX {@link XMLStreamReader} to further\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                     _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart());\n                 }\n             } catch (XMLStreamException e) {\n-                StaxUtil.throwAsGenerationException(e);\n+                StaxUtil.throwAsGenerationException(e, this);\n             }\n         }\n         this.setNextName(wrappedName);\n                     _xmlWriter.writeEndElement();\n                 }\n             } catch (XMLStreamException e) {\n-                StaxUtil.throwAsGenerationException(e);\n+                StaxUtil.throwAsGenerationException(e, this);\n             }\n         }\n     }\n         try {\n             _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n     \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n     \n                 _xmlWriter.writeEndElement();\n             } \n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }    \n     \n                 _xmlWriter.writeEndElement();\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                 _xmlWriter.writeEndElement();\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                 _xmlWriter.writeEndElement();\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                 _xmlWriter.writeEndElement();\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n         try {\n             _xmlWriter.writeRaw(text);\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n         try {\n             _xmlWriter.writeRaw(text, offset, len);\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n         try {\n             _xmlWriter.writeRaw(text, offset, len);\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n             try {\n                 _xmlWriter.flush();\n             } catch (XMLStreamException e) {\n-                StaxUtil.throwAsGenerationException(e);\n+                StaxUtil.throwAsGenerationException(e, this);\n             }\n         }\n     }\n                 _xmlWriter.close();\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwAsGenerationException(e);\n+            StaxUtil.throwAsGenerationException(e, this);\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n             try {\n                 xgen.getStaxWriter().setDefaultNamespace(ns);\n             } catch (XMLStreamException e) {\n-                StaxUtil.throwAsGenerationException(e);\n+                StaxUtil.throwAsGenerationException(e, xgen);\n             }\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/StaxUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/StaxUtil.java\n \n import javax.xml.stream.*;\n \n+import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.JsonParseException;\n import com.fasterxml.jackson.core.JsonParser;\n \n     public static <T> T throwXmlAsIOException(XMLStreamException e) throws IOException\n     {\n         Throwable t = _unwrap(e);\n-        if (t instanceof Error) throw (Error) t;\n-        if (t instanceof RuntimeException) throw (RuntimeException) t;\n         throw new IOException(t);\n     }\n \n             JsonParser p) throws IOException\n     {\n         Throwable t = _unwrap(e);\n-        if (t instanceof Error) throw (Error) t;\n-        if (t instanceof RuntimeException) throw (RuntimeException) t;\n-        throw new JsonParseException(p, e.getMessage(), t);\n+        throw new JsonParseException(p, _message(t, e), t);\n     }\n \n     /**\n      * @since 2.9\n      */\n-    public static <T> T throwAsGenerationException(XMLStreamException e) throws IOException\n+    public static <T> T throwAsGenerationException(XMLStreamException e,\n+            JsonGenerator g) throws IOException\n     {\n         Throwable t = _unwrap(e);\n-        if (t instanceof Error) throw (Error) t;\n-        if (t instanceof RuntimeException) throw (RuntimeException) t;\n-        throw new IOException(t);\n+        throw new JsonGenerationException(_message(t, e), t, g);\n     }\n \n-    private final static Throwable _unwrap(Throwable t) {\n+    private static Throwable _unwrap(Throwable t) {\n         while (t.getCause() != null) {\n             t = t.getCause();\n         }\n+        if (t instanceof Error) throw (Error) t;\n+        if (t instanceof RuntimeException) throw (RuntimeException) t;\n         return t;\n+    }\n+\n+    private static String _message(Throwable t1, Throwable t2) {\n+        String msg = t1.getMessage();\n+        if (msg == null) {\n+            msg = t2.getMessage();\n+        }\n+        return msg;\n     }\n \n     /**\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/DeserErrorHandling236Test.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.dataformat.xml.*;\n+\n+public class DeserErrorHandling236Test extends XmlTestBase\n+{\n+    static class Employee {\n+        public String name;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    protected XmlMapper MAPPER = new XmlMapper();\n+\n+    // [dataformat-xml#236]\n+    public void testExceptionWrapping() throws Exception\n+    {\n+        final String XML = \"<name>monica&</name>\";\n+        try {\n+            MAPPER.readValue(XML, Employee.class);\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"Unexpected character\");\n+        } catch (Exception e) {\n+            fail(\"Wrong exception: \"+e);\n+        }\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestPolymorphic.java\n     /**********************************************************\n      */\n \n+    /*\n     @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY)\n     static class BaseTypeWithClassProperty { }\n \n         public SubTypeWithClassProperty() { }\n         public SubTypeWithClassProperty(String s) { name = s; }\n     }\n-    \n+    */\n+\n     @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_ARRAY)\n     static class BaseTypeWithClassArray { }\n \n         public SubTypeWithClassObject() { }\n         public SubTypeWithClassObject(String s) { name = s; }\n     }\n-    \n+\n     /**\n      * If not used as root element, need to use a wrapper\n      */", "timestamp": 1500335383, "metainfo": ""}