{"sha": "57e37475b41031863f530545c113b9d2b7fb4bd2", "log": "minor cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n package com.fasterxml.jackson.dataformat.xml.jaxb;\n-\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.AnnotatedElement;\n-import java.lang.reflect.Member;\n \n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n     public void setDefaultUseWrapper(boolean b) {\n         // nothing to do with JAXB\n     }\n-\n-    /*\n-    /**********************************************************************\n-    /* Helper methods\n-    /**********************************************************************\n-     */\n- \n-    /*\n-    private String handleJaxbDefault(String value)\n-    {\n-        return MARKER_FOR_DEFAULT.equals(value) ? \"\" : value;\n-    }\n-    */\n-\n-    @Deprecated // since 2.4; not used by this module\n-    protected <A extends Annotation> A findAnnotation(Class<A> annotationClass, Annotated annotated,\n-            boolean includePackage, boolean includeClass, boolean includeSuperclasses)\n-    {\n-        A annotation = annotated.getAnnotation(annotationClass);\n-        if (annotation != null) {\n-            return annotation;\n-        }\n-        Class<?> memberClass = null;\n-        if (annotated instanceof AnnotatedParameter) {\n-            memberClass = ((AnnotatedParameter) annotated).getDeclaringClass();\n-        } else {\n-            AnnotatedElement annType = annotated.getAnnotated();\n-            if (annType instanceof Member) {\n-                memberClass = ((Member) annType).getDeclaringClass();\n-                if (includeClass) {\n-                    annotation = (A) memberClass.getAnnotation(annotationClass);\n-                    if (annotation != null) {\n-                        return annotation;\n-                    }\n-                }\n-            } else if (annType instanceof Class<?>) {\n-                memberClass = (Class<?>) annType;\n-            } else {\n-                throw new IllegalStateException(\"Unsupported annotated member: \" + annotated.getClass().getName());\n-            }\n-        }\n-        if (memberClass != null) {\n-            if (includeSuperclasses) {\n-                Class<?> superclass = memberClass.getSuperclass();\n-                while (superclass != null && superclass != Object.class) {\n-                    annotation = (A) superclass.getAnnotation(annotationClass);\n-                    if (annotation != null) {\n-                        return annotation;\n-                    }\n-                    superclass = superclass.getSuperclass();\n-                }\n-            }\n-            if (includePackage) {\n-                Package pkg = memberClass.getPackage();\n-                if (pkg != null) {\n-                    return memberClass.getPackage().getAnnotation(annotationClass);\n-                }\n-            }\n-        }\n-        return null;\n-    }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n          * \n          * - have Object Id (may be allowed in future)\n          * - have any getter\n-         * \n          */\n         if ((_objectIdWriter == null)\n                 && (_anyGetterWriter == null)\n      * {@link BeanPropertyWriter} instances.\n      */\n     @Override\n-    public void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException\n+    public void serialize(Object bean, JsonGenerator g, SerializerProvider provider) throws IOException\n     {\n         if (_objectIdWriter != null) {\n-            _serializeWithObjectId(bean, jgen, provider, true);\n+            _serializeWithObjectId(bean, g, provider, true);\n             return;\n         }\n-        jgen.writeStartObject();\n+        g.writeStartObject();\n         if (_propertyFilterId != null) {\n-            serializeFieldsFiltered(bean, jgen, provider);\n+            serializeFieldsFiltered(bean, g, provider);\n         } else {\n-            serializeFields(bean, jgen, provider);\n+            serializeFields(bean, g, provider);\n         }\n-        jgen.writeEndObject();\n+        g.writeEndObject();\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n             super.serializeFields(bean, gen0, provider);\n             return;\n         }\n-        \n         final ToXmlGenerator xgen = (ToXmlGenerator) gen0;\n         final BeanPropertyWriter[] props;\n         if (_filteredProps != null && provider.getActiveView() != null) {", "timestamp": 1500336502, "metainfo": ""}