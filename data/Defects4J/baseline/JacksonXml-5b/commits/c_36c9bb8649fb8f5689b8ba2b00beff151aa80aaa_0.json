{"sha": "36c9bb8649fb8f5689b8ba2b00beff151aa80aaa", "log": "clean up", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n \n import java.io.IOException;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n+\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n- * Variant of {@link BeanSerializer} for Xml handling.\n+ * Variant of {@link BeanSerializer} for XML handling.\n  * \n  * @author Pascal G\u00e9linas\n  */\n-public class XmlBeanSerializer extends XmlBeanSerializerBase {\n+public class XmlBeanSerializer extends XmlBeanSerializerBase\n+{\n     /*\n     /**********************************************************\n     /* Life-cycle: constructors\n     /**********************************************************\n      */\n-    public XmlBeanSerializer(BeanSerializerBase src)\n-    {\n+    public XmlBeanSerializer(BeanSerializerBase src) {\n         super(src);\n     }\n \n-    public XmlBeanSerializer(XmlBeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId)\n-    {\n+    public XmlBeanSerializer(XmlBeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId) {\n         super(src, objectIdWriter, filterId);\n     }\n \n-    public XmlBeanSerializer(XmlBeanSerializerBase src, ObjectIdWriter objectIdWriter)\n-    {\n+    public XmlBeanSerializer(XmlBeanSerializerBase src, ObjectIdWriter objectIdWriter) {\n         super(src, objectIdWriter);\n     }\n \n-    public XmlBeanSerializer(XmlBeanSerializerBase src, String[] toIgnore)\n-    {\n+    public XmlBeanSerializer(XmlBeanSerializerBase src, String[] toIgnore) {\n         super(src, toIgnore);\n     }\n \n     }\n     \n     @Override\n-    public BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter)\n-    {\n+    public BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter) {\n         return new XmlBeanSerializer(this, objectIdWriter, _propertyFilterId);\n     }\n \n     @Override\n-    protected BeanSerializerBase withFilterId(Object filterId)\n-    {\n+    protected BeanSerializerBase withFilterId(Object filterId) {\n         return new XmlBeanSerializer(this, _objectIdWriter, filterId);\n     }\n \n     @Override\n-    protected BeanSerializerBase withIgnorals(String[] toIgnore)\n-    {\n+    protected BeanSerializerBase withIgnorals(String[] toIgnore) {\n         return new XmlBeanSerializer(this, toIgnore);\n     }\n \n      * {@link BeanPropertyWriter} instances.\n      */\n     @Override\n-    public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    public void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException\n     {\n         if (_objectIdWriter != null) {\n             _serializeWithObjectId(bean, jgen, provider, true);\n      */\n \n     @Override\n-    public String toString()\n-    {\n+    public String toString() {\n         return \"XmlBeanSerializer for \" + handledType().getName();\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n import javax.xml.namespace.QName;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.core.JsonGenerationException;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n         \n         final ToXmlGenerator xgen = (ToXmlGenerator) jgen0;\n         final BeanPropertyWriter[] props;\n-        // !!! TODO: change to use non-deprecated version in 2.3\n         if (_filteredProps != null && provider.getActiveView() != null) {\n             props = _filteredProps;\n         } else {\n         final ToXmlGenerator xgen = (ToXmlGenerator) jgen0;\n         \n         final BeanPropertyWriter[] props;\n-        // !!! TODO: change to use non-deprecated version in 2.3\n         if (_filteredProps != null && provider.getActiveView() != null) {\n             props = _filteredProps;\n         } else {\n     }\n     \n     @Override\n-    protected void _serializeObjectId(Object bean,\n-                                      JsonGenerator jgen,\n-                                      SerializerProvider provider,\n-                                      TypeSerializer typeSer,\n-                                      WritableObjectId objectId) throws IOException, JsonProcessingException,\n-            JsonGenerationException {\n-        /* Ok: let's serialize type id as attribute, but if (and only if!)\n-         * we are using AS_PROPERTY\n-         */\n+    protected void _serializeObjectId(Object bean, JsonGenerator jgen, SerializerProvider provider,\n+            TypeSerializer typeSer, WritableObjectId objectId) throws IOException\n+    {\n+        // Ok: let's serialize type id as attribute, but if (and only if!) we are using AS_PROPERTY\n         if (typeSer.getTypeInclusion() == JsonTypeInfo.As.PROPERTY) {\n             ToXmlGenerator xgen = (ToXmlGenerator)jgen;\n             xgen.setNextIsAttribute(true);\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n     private static final long serialVersionUID = 1L;\n \n     public XmlBeanSerializerModifier() { }\n-    \n+\n     /*\n     /**********************************************************\n     /* Overridden methods\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/UnwrappingWithXMLTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/UnwrappingWithXMLTest.java\n package com.fasterxml.jackson.dataformat.xml.misc;\n-\n-import static org.junit.Assert.*;\n-\n-import org.junit.Test;\n \n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.JsonUnwrapped;", "timestamp": 1397622999, "metainfo": ""}