{"sha": "a1385769994b70a44c058ea391a4401b94f93505", "log": "Merge branch 'master' of github.com:FasterXML/jackson-dataformat-xml", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n import javax.xml.stream.*;\n \n import org.codehaus.stax2.io.Stax2ByteArraySource;\n+import org.codehaus.stax2.io.Stax2CharArraySource;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.format.InputAccessor;\n import com.fasterxml.jackson.core.format.MatchStrength;\n import com.fasterxml.jackson.core.io.IOContext;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n import com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n      * @since 2.1\n      */\n     @Override\n-    public XmlFactory copy()\n-    {\n+    public XmlFactory copy() {\n         _checkInvalidCopy(XmlFactory.class);\n         return new XmlFactory(this, null);\n     }\n     \n     /*\n     /**********************************************************\n-    /* Configuration, parser settings\n+    /* Configuration, XML, parser setting\n     /**********************************************************\n      */\n \n \n     /*\n     /******************************************************\n-    /* Configuration, generator settings\n+    /* Configuration, XML, generator settings\n     /******************************************************\n      */\n \n \n     /*\n     /**********************************************************\n-    /* Format detection functionality (since 1.8)\n+    /* Format detection functionality\n     /**********************************************************\n      */\n \n      * implementation will return null for all sub-classes\n      */\n     @Override\n-    public String getFormatName()\n-    {\n+    public String getFormatName() {\n         return FORMAT_NAME_XML;\n     }\n \n     @Override\n-    public MatchStrength hasFormat(InputAccessor acc) throws IOException\n-    {\n+    public MatchStrength hasFormat(InputAccessor acc) throws IOException {\n         return hasXMLFormat(acc);\n     }\n \n      * @return True since XML format does require support from codec\n      */\n     @Override\n-    public boolean requiresCustomCodec() {\n-        return false;\n-    }\n-    \n-    /*\n-    /**********************************************************\n-    /* New factory methods (since 2.1)\n-    /**********************************************************\n-     */\n-\n-    @Override\n-    public ToXmlGenerator createGenerator(OutputStream out) throws IOException\n-    {\n+    public boolean requiresCustomCodec() { return true; }\n+\n+    /*\n+    /**********************************************************\n+    /* Capability overrides\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * As of 2.4, we do have actual capability for passing char arrays\n+     * efficiently, but unfortunately\n+     * have no working mechanism for recycling buffers. So we have to \n+     * admit that can not make efficient use.\n+     */\n+    public boolean canUseCharArrays() { return false; }\n+\n+    /*\n+    /**********************************************************\n+    /* Overrides of public methods: parsing\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Overridden just to prevent trying to optimize access via char array;\n+     * while nice idea, problem is that we don't have proper hooks to ensure\n+     * that temporary buffer gets recycled; so let's just use StringReader.\n+     */\n+    @SuppressWarnings(\"resource\")\n+    public JsonParser createParser(String content) throws IOException, JsonParseException {\n+        Reader r = new StringReader(content);\n+        IOContext ctxt = _createContext(r, true);\n+        if (_inputDecorator != null) {\n+            r = _inputDecorator.decorate(ctxt, r);\n+        }\n+        return _createParser(r, ctxt);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Overrides of public methods: generation\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public ToXmlGenerator createGenerator(OutputStream out) throws IOException {\n         return createGenerator(out, JsonEncoding.UTF8);\n     }\n     \n         return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n                 _objectCodec, _createXmlWriter(out));\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Deprecated methods (remove in 2.4?)\n-    /**********************************************************\n-     */\n-    \n-    @Deprecated\n-    @Override\n-    public ToXmlGenerator createJsonGenerator(OutputStream out, JsonEncoding enc) throws IOException {\n-        return createGenerator(out, enc);\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public ToXmlGenerator createJsonGenerator(Writer out) throws IOException {\n-        return createGenerator(out);\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public ToXmlGenerator createJsonGenerator(File f, JsonEncoding enc) throws IOException {\n-        return createGenerator(f, enc);\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* Upcoming parts of public API (for 2.1)\n-    /**********************************************************\n-     */\n-\n-    @Override\n-    protected FromXmlParser _createParser(InputStream in, IOContext ctxt)\n-        throws IOException, JsonParseException\n+\n+    /*\n+    /**********************************************************\n+    /* Internal factory method overrides\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    protected FromXmlParser _createParser(InputStream in, IOContext ctxt) throws IOException\n     {\n         XMLStreamReader sr;\n         try {\n     }\n \n     @Override\n-    protected FromXmlParser _createParser(Reader r, IOContext ctxt)\n-        throws IOException, JsonParseException\n+    protected FromXmlParser _createParser(Reader r, IOContext ctxt) throws IOException\n     {\n         XMLStreamReader sr;\n         try {\n     }\n \n     @Override\n-    protected FromXmlParser _createParser(byte[] data, int offset, int len, IOContext ctxt)\n-        throws IOException, JsonParseException\n+    protected FromXmlParser _createParser(char[] data, int offset, int len, IOContext ctxt,\n+            boolean recycleBuffer) throws IOException\n+    {\n+        // !!! TODO: add proper handling of 'recycleBuffer'; currently its handling\n+        //    is always same as if 'false' was passed\n+        XMLStreamReader sr;\n+        try {\n+            sr = _xmlInputFactory.createXMLStreamReader(new Stax2CharArraySource(data, offset, len));\n+            sr = _initializeXmlReader(sr);\n+        } catch (XMLStreamException e) {\n+            return StaxUtil.throwXmlAsIOException(e);\n+        }\n+        FromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n+                _objectCodec, sr);\n+        if (_cfgNameForTextElement != null) {\n+            xp.setXMLTextElementName(_cfgNameForTextElement);\n+        }\n+        return xp;\n+    }\n+    \n+    @Override\n+    protected FromXmlParser _createParser(byte[] data, int offset, int len, IOContext ctxt) throws IOException\n     {\n         XMLStreamReader sr;\n         try {\n         }\n         return xp;\n     }\n-    \n+\n+    @Override\n+    protected JsonGenerator _createGenerator(Writer out, IOContext ctxt) throws IOException {\n+        // this method should never get called here, so:\n+        VersionUtil.throwInternal();\n+        return null;\n+    }\n \n     /*\n     /**********************************************************************", "timestamp": 1398908292, "metainfo": ""}