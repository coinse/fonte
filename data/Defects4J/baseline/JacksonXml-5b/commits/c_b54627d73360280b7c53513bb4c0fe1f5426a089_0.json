{"sha": "b54627d73360280b7c53513bb4c0fe1f5426a089", "log": "Add a simple test to verify that case-insensitive handling works for regular cases (wrt #273)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n \n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n \n public abstract class XmlTestBase\n         super();\n     }\n \n+    protected static ObjectMapper newObjectMapper() {\n+        return new XmlMapper();\n+    }\n+\n     protected XmlMapper xmlMapper(boolean useListWrapping)\n     {\n         JacksonXmlModule module = new JacksonXmlModule();\n         module.setDefaultUseWrapper(useListWrapping);\n         return new XmlMapper(module);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Additional assertion methods\n                 return;\n             }\n         }\n-        fail(\"Expected an exception with one of substrings (\"+Arrays.asList(matches)+\"): got one with message \\\"\"+msg+\"\\\"\");\n+        fail(\"Expected an exception with one of substrings (\"+Arrays.asList(matches)+\"): got one (\"+\n+                e.getClass().getName()+\") with message \\\"\"+msg+\"\\\"\");\n     }\n     \n     /*\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/CaseInsensitiveDeserTest.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class CaseInsensitiveDeserTest extends XmlTestBase\n+{\n+    // [databind#1036]\n+    static class BaseResponse {\n+        public int errorCode;\n+        public String debugMessage;\n+    }\n+\n+    // [databind#1438]\n+    static class InsensitiveCreator\n+    {\n+        int v;\n+\n+        @JsonCreator\n+        public InsensitiveCreator(@JsonProperty(\"value\") int v0) {\n+            v = v0;\n+        }\n+    }\n+\n+    /*\n+    /********************************************************\n+    /* Test methods\n+    /********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = newObjectMapper();\n+\n+    private final ObjectMapper INSENSITIVE_MAPPER = newObjectMapper();\n+    {\n+        INSENSITIVE_MAPPER.enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\n+        \n+    }\n+\n+    // [databind#1036]\n+    public void testCaseInsensitive1036() throws Exception\n+    {\n+        final String DOC =\n+\"<BaseResponse><ErrorCode>2</ErrorCode><DebugMessage>Signature not valid!</DebugMessage></BaseResponse>\";\n+\n+        // Ok with insensitive\n+        BaseResponse response = INSENSITIVE_MAPPER.readValue(DOC, BaseResponse.class);\n+        assertEquals(2, response.errorCode);\n+        assertEquals(\"Signature not valid!\", response.debugMessage);\n+\n+        // but not without\n+        try {\n+            MAPPER.readValue(DOC, BaseResponse.class);\n+            fail(\"Should not pass\");\n+        } catch (UnrecognizedPropertyException e) {\n+            verifyException(e, \"ErrorCode\");\n+        }\n+    }\n+\n+    // [databind#1438]\n+    public void testCreatorWithInsensitive() throws Exception\n+    {\n+        final String DOC = aposToQuotes(\"<root><VALUE>3</VALUE></root>\");\n+        InsensitiveCreator bean = INSENSITIVE_MAPPER.readValue(DOC, InsensitiveCreator.class);\n+        assertEquals(3, bean.v);\n+    }\n+}", "timestamp": 1512520166, "metainfo": ""}