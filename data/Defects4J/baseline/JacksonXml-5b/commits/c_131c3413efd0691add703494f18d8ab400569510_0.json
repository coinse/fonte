{"sha": "131c3413efd0691add703494f18d8ab400569510", "log": "Trying to arrange unit tests in better way", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/TestXMLFormatDetection.java\n+package com.fasterxml.jackson.dataformat.xml.stream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.format.*;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+\n+public class TestXMLFormatDetection extends XmlTestBase\n+{\n+    static class POJO {\n+        public int x, y;\n+        \n+        public POJO() { }\n+        public POJO(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+    }\n+\n+    static class ListPOJO {\n+        @JacksonXmlElementWrapper(localName=\"list\")\n+        public List<POJO> v = new ArrayList<POJO>();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods, success\n+    /**********************************************************\n+     */\n+    \n+    public void testSimpleValidXmlDecl() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        DataFormatDetector detector = new DataFormatDetector(f);\n+        String XML = \"<?xml version='1.0'?><root/>\";\n+        DataFormatMatcher matcher = detector.findFormat(new ByteArrayInputStream(XML.getBytes(\"UTF-8\")));\n+        assertTrue(matcher.hasMatch());\n+        assertEquals(\"XML\", matcher.getMatchedFormatName());\n+        assertSame(f, matcher.getMatch());\n+        assertEquals(MatchStrength.FULL_MATCH, matcher.getMatchStrength());\n+        // ensure we could build a parser...\n+        JsonParser jp = matcher.createParserWithMatch();\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        jp.close();\n+    }\n+\n+    public void testSimpleValidRoot() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        DataFormatDetector detector = new DataFormatDetector(f);\n+        String XML = \"<root/>\";\n+        DataFormatMatcher matcher = detector.findFormat(new ByteArrayInputStream(XML.getBytes(\"UTF-8\")));\n+        assertTrue(matcher.hasMatch());\n+        assertEquals(\"XML\", matcher.getMatchedFormatName());\n+        assertSame(f, matcher.getMatch());\n+        assertEquals(MatchStrength.SOLID_MATCH, matcher.getMatchStrength());\n+        // ensure we could build a parser...\n+        JsonParser jp = matcher.createParserWithMatch();\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        jp.close();\n+    }\n+\n+    public void testSimpleValidDoctype() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        DataFormatDetector detector = new DataFormatDetector(f);\n+        String XML = \"<!DOCTYPE root [ ]>   <root />\";\n+        DataFormatMatcher matcher = detector.findFormat(new ByteArrayInputStream(XML.getBytes(\"UTF-8\")));\n+        assertTrue(matcher.hasMatch());\n+        assertEquals(\"XML\", matcher.getMatchedFormatName());\n+        assertSame(f, matcher.getMatch());\n+        assertEquals(MatchStrength.SOLID_MATCH, matcher.getMatchStrength());\n+        // ensure we could build a parser...\n+        JsonParser jp = matcher.createParserWithMatch();\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        jp.close();\n+    }\n+    \n+    public void testSimpleValidComment() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        DataFormatDetector detector = new DataFormatDetector(f);\n+        String XML = \"  <!-- comment -->  <root></root>\";\n+        DataFormatMatcher matcher = detector.findFormat(new ByteArrayInputStream(XML.getBytes(\"UTF-8\")));\n+        assertTrue(matcher.hasMatch());\n+        assertEquals(\"XML\", matcher.getMatchedFormatName());\n+        assertSame(f, matcher.getMatch());\n+        assertEquals(MatchStrength.SOLID_MATCH, matcher.getMatchStrength());\n+        // ensure we could build a parser...\n+        JsonParser jp = matcher.createParserWithMatch();\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        jp.close();\n+    }\n+\n+    public void testSimpleValidPI() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        DataFormatDetector detector = new DataFormatDetector(f);\n+        String XML = \"<?target foo?><root />\";\n+        DataFormatMatcher matcher = detector.findFormat(new ByteArrayInputStream(XML.getBytes(\"UTF-8\")));\n+        assertTrue(matcher.hasMatch());\n+        assertEquals(\"XML\", matcher.getMatchedFormatName());\n+        assertSame(f, matcher.getMatch());\n+        assertEquals(MatchStrength.SOLID_MATCH, matcher.getMatchStrength());\n+        // ensure we could build a parser...\n+        JsonParser jp = matcher.createParserWithMatch();\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        jp.close();\n+    }\n+\n+    public void testSimpleViaObjectReader() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        XmlMapper xmlMapper = new XmlMapper();\n+\n+        ObjectReader detecting = mapper.reader(POJO.class);\n+        detecting = detecting\n+                .withFormatDetection(detecting, xmlMapper.reader(POJO.class));\n+        POJO pojo = detecting.readValue(utf8Bytes(\"<POJO><y>3</y><x>1</x></POJO>\"));\n+        assertNotNull(pojo);\n+        assertEquals(1, pojo.x);\n+        assertEquals(3, pojo.y);\n+    }\n+    \n+    public void testListViaObjectReader() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        XmlMapper xmlMapper = new XmlMapper();\n+        ListPOJO list = new ListPOJO();\n+        list.v.add(new POJO(1, 2));\n+        list.v.add(new POJO(3, 4));\n+        String xml = xmlMapper.writeValueAsString(list);\n+\n+        ObjectReader detecting = mapper.reader(ListPOJO.class);\n+        ListPOJO resultList = detecting\n+                .withFormatDetection(detecting, xmlMapper.reader(ListPOJO.class))\n+                .readValue(utf8Bytes(xml));\n+        assertNotNull(resultList);\n+        assertEquals(2, resultList.v.size());\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods, error handling\n+    /**********************************************************\n+     */\n+    \n+    public void testSimpleInvalid() throws Exception\n+    {\n+        DataFormatDetector detector = new DataFormatDetector(new XmlFactory());\n+        final String NON_XML = \"{\\\"foo\\\":\\\"bar\\\"}\";\n+        DataFormatMatcher matcher = detector.findFormat(new ByteArrayInputStream(NON_XML.getBytes(\"UTF-8\")));\n+        // should not have match\n+        assertFalse(matcher.hasMatch());\n+        // and thus:\n+        assertEquals(MatchStrength.INCONCLUSIVE, matcher.getMatchStrength());\n+        // also:\n+        assertNull(matcher.createParserWithMatch());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/TestXmlGenerator.java\n+package com.fasterxml.jackson.dataformat.xml.stream;\n+\n+import java.io.*;\n+\n+import javax.xml.namespace.QName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n+\n+public class TestXmlGenerator extends XmlTestBase\n+{\n+    public void testSimpleElement() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        gen.writeFieldName(\"elem\");\n+        gen.writeString(\"value\");\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root><elem>value</elem></root>\", xml);\n+    }\n+\n+    public void testSimpleAttribute() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        // and also need to force attribute\n+        gen.setNextIsAttribute(true);\n+        gen.writeFieldName(\"attr\");\n+        gen.writeString(\"value\");\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root attr=\\\"value\\\"/>\", xml);\n+    }\n+\n+    public void testSecondLevelAttribute() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        gen.writeFieldName(\"elem\");\n+        gen.writeStartObject();\n+        // and also need to force attribute\n+        gen.setNextIsAttribute(true);\n+        gen.writeFieldName(\"attr\");\n+        gen.writeString(\"value\");\n+        gen.writeEndObject();\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root><elem attr=\\\"value\\\"/></root>\", xml);\n+    }\n+\n+    public void testAttrAndElem() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        // and also need to force attribute\n+        gen.writeFieldName(\"attr\");\n+        gen.setNextIsAttribute(true);\n+        gen.writeNumber(-3);\n+\n+        // Also let's add child element as well\n+        gen.setNextIsAttribute(false);\n+        gen.writeFieldName(\"elem\");\n+        gen.writeNumber(13);\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = removeSjsxpNamespace(out.toString());\n+        assertEquals(\"<root attr=\\\"-3\\\"><elem>13</elem></root>\", xml);\n+    }\n+\n+    // [Issue#6], missing overrides for File-backed generator\n+    public void testWriteToFile() throws Exception\n+    {\n+        ObjectMapper mapper = new XmlMapper();\n+        File f = File.createTempFile(\"test\", \".tst\");\n+        mapper.writeValue(f, new IntWrapper(42));\n+\n+        String xml = readAll(f).trim();\n+\n+        assertEquals(\"<IntWrapper><i>42</i></IntWrapper>\", xml);\n+        f.delete();\n+    }    \n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/TestXmlParser.java\n+package com.fasterxml.jackson.dataformat.xml.stream;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n+\n+\n+public class TestXmlParser extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Set up\n+    /**********************************************************\n+     */\n+\n+    protected JsonFactory _jsonFactory;\n+    protected XmlFactory _xmlFactory;\n+    protected XmlMapper _xmlMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        _jsonFactory = new JsonFactory();\n+        _xmlFactory = new XmlFactory();\n+        _xmlMapper = new XmlMapper();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+    \n+    public void testSimplest() throws Exception\n+    {\n+        assertEquals(\"{\\\"leaf\\\":\\\"abc\\\"}\",\n+                _readXmlWriteJson(\"<root><leaf>abc</leaf></root>\"));\n+    }\n+\n+    public void testSimpleWithEmpty() throws Exception\n+    {\n+        assertEquals(\"{\\\"leaf\\\":null}\",\n+                _readXmlWriteJson(\"<root><leaf /></root>\"));\n+    }\n+\n+    public void testSimpleNested() throws Exception\n+    {\n+        assertEquals(\"{\\\"a\\\":{\\\"b\\\":{\\\"c\\\":\\\"xyz\\\"}}}\",\n+                _readXmlWriteJson(\"<root><a><b><c>xyz</c></b></a></root>\"));\n+    }\n+\n+    /**\n+     * Unit test that verifies that we can write sample document from JSON\n+     * specification as XML, and read it back in \"as JSON\", with\n+     * expected transformation.\n+     */\n+    public void testRoundTripWithSample() throws Exception\n+    {\n+        // First: let's convert from sample JSON doc to default xml output\n+        JsonNode root = new ObjectMapper().readTree(SAMPLE_DOC_JSON_SPEC);\n+        String xml = _xmlMapper.writeValueAsString(root);\n+        \n+        // Here we would ideally use base class test method. Alas, it won't\n+        // work due to couple of problems;\n+        // (a) All values are reported as Strings (not ints, for example\n+        // (b) XML mangles arrays, so all we see are objects.\n+        // Former could be worked around; latter less so at this point.\n+\n+        // So, for now, let's just do sort of minimal verification, manually\n+        JsonParser jp = _xmlMapper.getFactory().createParser(xml);\n+        \n+        assertToken(JsonToken.START_OBJECT, jp.nextToken()); // main object\n+\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Image'\n+        verifyFieldName(jp, \"Image\");\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken()); // 'image' object\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Width'\n+        verifyFieldName(jp, \"Width\");\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_WIDTH), jp.getText());\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Height'\n+        verifyFieldName(jp, \"Height\");\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_HEIGHT), jp.getText());\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Title'\n+        verifyFieldName(jp, \"Title\");\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertEquals(SAMPLE_SPEC_VALUE_TITLE, getAndVerifyText(jp));\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Thumbnail'\n+        verifyFieldName(jp, \"Thumbnail\");\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken()); // 'thumbnail' object\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Url'\n+        verifyFieldName(jp, \"Url\");\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertEquals(SAMPLE_SPEC_VALUE_TN_URL, getAndVerifyText(jp));\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Height'\n+        verifyFieldName(jp, \"Height\");\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_HEIGHT), jp.getText());\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'Width'\n+        verifyFieldName(jp, \"Width\");\n+        // Width value is actually a String in the example\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, getAndVerifyText(jp));\n+\n+        assertToken(JsonToken.END_OBJECT, jp.nextToken()); // 'thumbnail' object\n+\n+        // Note: arrays are \"eaten\"; wrapping is done using BeanPropertyWriter, so:\n+        //assertToken(JsonToken.FIELD_NAME, jp.nextToken()); // 'IDs'\n+        //verifyFieldName(jp, \"IDs\");\n+        //assertToken(JsonToken.START_OBJECT, jp.nextToken()); // 'ids' array\n+\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+        verifyFieldName(jp, \"IDs\");\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID1), getAndVerifyText(jp));\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); \n+        verifyFieldName(jp, \"IDs\");\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID2), getAndVerifyText(jp));\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+        verifyFieldName(jp, \"IDs\");\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID3), getAndVerifyText(jp));\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken()); \n+        verifyFieldName(jp, \"IDs\");\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertEquals(String.valueOf(SAMPLE_SPEC_VALUE_TN_ID4), getAndVerifyText(jp));\n+\n+        // no matching entry for array:\n+        //assertToken(JsonToken.END_OBJECT, jp.nextToken()); // 'ids' array\n+\n+        assertToken(JsonToken.END_OBJECT, jp.nextToken()); // 'image' object\n+\n+        assertToken(JsonToken.END_OBJECT, jp.nextToken()); // main object\n+        \n+        jp.close();\n+    }\n+\n+    /**\n+     * Test to ensure functionality used to force an element to be reported\n+     * as \"JSON\" Array, instead of default Object.\n+     */\n+    public void testForceElementAsArray() throws Exception\n+    {\n+        final String XML = \"<array><elem>value</elem><elem><property>123</property></elem><elem>1</elem></array>\";\n+\n+        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n+\n+        // First: verify handling without forcing array handling:\n+        assertToken(JsonToken.START_OBJECT, xp.nextToken()); // <array>\n+        assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <elem>\n+        assertEquals(\"elem\", xp.getCurrentName());\n+        assertToken(JsonToken.VALUE_STRING, xp.nextToken());\n+        assertEquals(\"value\", xp.getText());\n+\n+        assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <elem>\n+        assertEquals(\"elem\", xp.getCurrentName());\n+        assertToken(JsonToken.START_OBJECT, xp.nextToken()); // <property>\n+        assertToken(JsonToken.FIELD_NAME, xp.nextToken());\n+        assertEquals(\"property\", xp.getCurrentName());\n+        assertToken(JsonToken.VALUE_STRING, xp.nextToken());\n+        assertEquals(\"123\", xp.getText());\n+        assertToken(JsonToken.END_OBJECT, xp.nextToken()); // <object>\n+\n+        assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <elem>\n+        assertEquals(\"elem\", xp.getCurrentName());\n+        assertToken(JsonToken.VALUE_STRING, xp.nextToken());\n+        assertEquals(\"1\", xp.getText());\n+\n+        assertToken(JsonToken.END_OBJECT, xp.nextToken()); // </array>\n+        xp.close();\n+\n+        // And then with array handling:\n+        xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n+        assertTrue(xp.getParsingContext().inRoot());\n+\n+        assertToken(JsonToken.START_OBJECT, xp.nextToken()); // <array>\n+        assertTrue(xp.getParsingContext().inObject()); // true until we do following:\n+\n+        // must request 'as-array' handling, which will \"convert\" current token:\n+        assertTrue(\"Should 'convert' START_OBJECT to START_ARRAY\", xp.isExpectedStartArrayToken());\n+        assertToken(JsonToken.START_ARRAY, xp.getCurrentToken()); // <elem>\n+        assertTrue(xp.getParsingContext().inArray());\n+\n+        assertToken(JsonToken.VALUE_STRING, xp.nextToken());\n+        assertTrue(xp.getParsingContext().inArray());\n+        assertEquals(\"value\", xp.getText());\n+\n+        assertToken(JsonToken.START_OBJECT, xp.nextToken()); // <property>\n+        assertTrue(xp.getParsingContext().inObject());\n+        assertToken(JsonToken.FIELD_NAME, xp.nextToken());\n+        assertEquals(\"property\", xp.getCurrentName());\n+        assertToken(JsonToken.VALUE_STRING, xp.nextToken());\n+        assertEquals(\"123\", xp.getText());\n+        assertTrue(xp.getParsingContext().inObject());\n+        assertToken(JsonToken.END_OBJECT, xp.nextToken()); // </property>\n+        assertTrue(xp.getParsingContext().inArray());\n+\n+        assertToken(JsonToken.VALUE_STRING, xp.nextToken());\n+        assertTrue(xp.getParsingContext().inArray());\n+        assertEquals(\"1\", xp.getText());\n+\n+        assertToken(JsonToken.END_ARRAY, xp.nextToken()); // </array>\n+        assertTrue(xp.getParsingContext().inRoot());\n+        xp.close();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+\n+\n+    public void testXmlAttributes() throws Exception\n+    {\n+        final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n+\n+        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n+\n+        // First: verify handling without forcing array handling:\n+        assertToken(JsonToken.START_OBJECT, xp.nextToken()); // <data>\n+        assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <max>\n+        assertEquals(\"max\", xp.getCurrentName());\n+        assertToken(JsonToken.VALUE_STRING, xp.nextToken());\n+        assertEquals(\"7\", xp.getText());\n+\n+        assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <offset>\n+        assertEquals(\"offset\", xp.getCurrentName());\n+        assertToken(JsonToken.VALUE_STRING, xp.nextToken());\n+        assertEquals(\"9\", xp.getText());\n+\n+        assertToken(JsonToken.END_OBJECT, xp.nextToken()); // </data>\n+        xp.close();\n+    }\n+\n+    private String _readXmlWriteJson(String xml) throws IOException\n+    {\n+        StringWriter w = new StringWriter();\n+\n+        JsonParser jp = _xmlFactory.createParser(xml);\n+        JsonGenerator jg = _jsonFactory.createGenerator(w);\n+        while (jp.nextToken() != null) {\n+            jg.copyCurrentEvent(jp);\n+        }\n+        jp.close();\n+        jg.close();\n+        return w.toString();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/TestXmlTokenStream.java\n+package com.fasterxml.jackson.dataformat.xml.stream;\n+\n+import java.io.*;\n+\n+import javax.xml.stream.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;\n+\n+public class TestXmlTokenStream extends XmlTestBase\n+{\n+    public void testSimple() throws Exception\n+    {\n+        String XML = \"<root><leaf id='123'>abc</leaf></root>\";\n+        XMLStreamReader sr = XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(XML));\n+        // must point to START_ELEMENT, so:\n+        sr.nextTag();\n+        XmlTokenStream tokens = new XmlTokenStream(sr, XML);\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.getCurrentToken());\n+        assertEquals(\"root\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"leaf\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_ATTRIBUTE_NAME, tokens.next());\n+        assertEquals(\"id\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_ATTRIBUTE_VALUE, tokens.next());\n+        assertEquals(\"123\", tokens.getText());\n+        assertEquals(XmlTokenStream.XML_TEXT, tokens.next());\n+        assertEquals(\"abc\", tokens.getText());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END, tokens.next());\n+    }\n+\n+    public void testRootAttributes() throws Exception\n+    {\n+        String XML = \"<root id='x' />\";\n+        XMLStreamReader sr = XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(XML));\n+        // must point to START_ELEMENT, so:\n+        sr.nextTag();\n+        XmlTokenStream tokens = new XmlTokenStream(sr, XML);\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.getCurrentToken());\n+        assertEquals(\"root\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_ATTRIBUTE_NAME, tokens.next());\n+        assertEquals(\"id\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_ATTRIBUTE_VALUE, tokens.next());\n+        assertEquals(\"x\", tokens.getText());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END, tokens.next());\n+    }\n+    \n+    public void testEmptyTags() throws Exception\n+    {\n+        String XML = \"<root><leaf /></root>\";\n+        XMLStreamReader sr = XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(XML));\n+        // must point to START_ELEMENT, so:\n+        sr.nextTag();\n+        XmlTokenStream tokens = new XmlTokenStream(sr, XML);\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.getCurrentToken());\n+        assertEquals(\"root\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"leaf\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END, tokens.next());\n+    }\n+\n+    public void testNested() throws Exception\n+    {\n+        String XML = \"<root><a><b><c>abc</c></b></a></root>\";\n+        XMLStreamReader sr = XMLInputFactory.newInstance().createXMLStreamReader(new StringReader(XML));\n+        sr.nextTag();\n+        XmlTokenStream tokens = new XmlTokenStream(sr, XML);\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.getCurrentToken());\n+        assertEquals(\"root\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"a\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"b\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_START_ELEMENT, tokens.next());\n+        assertEquals(\"c\", tokens.getLocalName());\n+        assertEquals(XmlTokenStream.XML_TEXT, tokens.next());\n+        assertEquals(\"abc\", tokens.getText());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END_ELEMENT, tokens.next());\n+        assertEquals(XmlTokenStream.XML_END, tokens.next());\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/types/TestPolymorphic.java\n+package com.fasterxml.jackson.dataformat.xml.types;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+\n+public class TestPolymorphic extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY)\n+    static class BaseTypeWithClassProperty { }\n+\n+    static class SubTypeWithClassProperty extends BaseTypeWithClassProperty {\n+        public String name;\n+\n+        public SubTypeWithClassProperty() { }\n+        public SubTypeWithClassProperty(String s) { name = s; }\n+    }\n+    \n+    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_ARRAY)\n+    static class BaseTypeWithClassArray { }\n+\n+    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n+    protected static class BaseTypeWithClassObject { }\n+\n+    protected static class SubTypeWithClassObject extends BaseTypeWithClassObject {\n+        public String name;\n+    \n+        public SubTypeWithClassObject() { }\n+        public SubTypeWithClassObject(String s) { name = s; }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Set up\n+    /**********************************************************\n+     */\n+\n+    protected XmlMapper _xmlMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        _xmlMapper = new XmlMapper();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testAsClassProperty() throws Exception\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new SubTypeWithClassProperty(\"Foobar\"));\n+\n+        // Type info should be written as an attribute, so:\n+        /* 08-Jan-2010, tatu: Alas, the simplest way to implement support requires a change\n+         *   to Jackson (since BeanSerializer.serializeWithType() is final; shouldn't be!).\n+         *   Need to wait...\n+         */\n+        /* 13-Jan-2010, tatu: With Jackson 1.7.1, it is possible to override type information\n+         *   inclusion, which allows use of attribute over element, so:\n+         */\n+        final String exp = \n+            \"<SubTypeWithClassProperty _class=\\\"com.fasterxml.jackson.dataformat.xml.TestPolymorphic..SubTypeWithClassProperty\\\">\"\n+            //\"<SubTypeWithClassProperty><_class>com.fasterxml.jackson.xml.TestPolymorphic..SubTypeWithClassProperty</_class>\"\n+            +\"<name>Foobar</name></SubTypeWithClassProperty>\"\n+                ;\n+        assertEquals(exp, xml);\n+        \n+        Object result = _xmlMapper.readValue(xml, BaseTypeWithClassProperty.class);\n+        assertNotNull(result);\n+        assertEquals(SubTypeWithClassProperty.class, result.getClass());\n+        assertEquals(\"Foobar\", ((SubTypeWithClassProperty) result).name);\n+    }\n+        \n+    public void testAsClassObject() throws Exception\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new SubTypeWithClassObject(\"Foobar\"));\n+        Object result = _xmlMapper.readValue(xml, BaseTypeWithClassObject.class);\n+        assertNotNull(result);\n+        assertEquals(SubTypeWithClassObject.class, result.getClass());\n+        assertEquals(\"Foobar\", ((SubTypeWithClassObject) result).name);\n+    }\n+}\n+   ", "timestamp": 1381377197, "metainfo": ""}