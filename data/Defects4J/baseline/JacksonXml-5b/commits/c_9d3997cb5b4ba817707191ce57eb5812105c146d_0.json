{"sha": "9d3997cb5b4ba817707191ce57eb5812105c146d", "log": "Improve handling of empty unwrapped lists", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n     }\n \n     // DEBUGGING\n-    /*\n+/*\n     @Override\n     public JsonToken nextToken() throws IOException, JsonParseException\n     {\n             }\n             _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n             _parsingContext = _parsingContext.getParent();\n+            _namesToWrap = _parsingContext.getNamesToWrap();\n             return _currToken;\n             \n         case XmlTokenStream.XML_ATTRIBUTE_NAME:\n                 _mayBeLeaf = false;\n                 // Also: must skip following END_ELEMENT\n                 _xmlTokens.skipEndElement();\n+                /* One more refinement (pronunced like \"hack\") is that if\n+                 * we had an empty String (or all white space), and we are\n+                 * deserializing an array, we better just hide the text\n+                 * altogether.\n+                 */\n+                if (_parsingContext.inArray()) {\n+                    if (_isEmpty(_currText)) {\n+                        _currToken = JsonToken.END_ARRAY;\n+                        _parsingContext = _parsingContext.getParent();\n+                        _namesToWrap = _parsingContext.getNamesToWrap();\n+                        return _currToken;\n+                    }\n+                }\n                 return (_currToken = JsonToken.VALUE_STRING);\n             }\n             // If not a leaf, need to transform into property...\n         }\n         return _byteArrayBuilder;\n     }\n+\n+    protected boolean _isEmpty(String str)\n+    {\n+        int len = (str == null) ? 0 : str.length();\n+        if (len > 0) {\n+            for (int i = 0; i < len; ++i) {\n+                if (str.charAt(i) > ' ') {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n      */\n     protected void repeatStartElement()\n     {\n+//System.out.println(\" -> repeatStartElement for \"+_localName);        \n         // sanity check: can only be used when just returned START_ELEMENT:\n         if (_currentState != XML_START_ELEMENT) {\n             throw new IllegalStateException(\"Current state not XML_START_ELEMENT (\"\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestNestedUnwrappedLists.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestNestedUnwrappedLists.java\n package com.fasterxml.jackson.dataformat.xml.unwrapped;\n \n-import java.util.Date;\n import java.util.List;\n \n import com.fasterxml.jackson.databind.DeserializationFeature;\n         assertEquals(\"2013-09-12T09:29:07.536-04:00\", act.recordedAtTime);\n     }\n \n+    public void testNestedWithEmpty() throws Exception\n+    {\n+        final String XML =\n+\"<ServiceDelivery>\\n\"\n++\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"  <VehicleMonitoringDelivery>\\n\"\n++\"  </VehicleMonitoringDelivery>\\n\"\n++\"</ServiceDelivery>\\n\"\n+                ;\n+        \n+        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n+        assertNotNull(svc);\n+        assertNotNull(svc.vehicleMonitoringDelivery);\n+        assertEquals(0, svc.vehicleMonitoringDelivery.size());\n+    }\n+\n+    public void testNestedWithEmpty2() throws Exception\n+    {\n+        final String XML =\n+\"<ServiceDelivery>\\n\"\n++\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"  <VehicleMonitoringDelivery>\\n\"\n++\"    <VehicleActivity>\\n\"\n++\"    </VehicleActivity>\\n\"\n++\"  </VehicleMonitoringDelivery>\\n\"\n++\"</ServiceDelivery>\\n\"\n+                ;\n+        \n+        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n+        assertNotNull(svc);\n+        assertNotNull(svc.vehicleMonitoringDelivery);\n+        assertEquals(1, svc.vehicleMonitoringDelivery.size());\n+        VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);\n+        assertNotNull(del.vehicleActivity);\n+        assertEquals(0, del.vehicleActivity.size());\n+    }\n+    \n     public void testNested1_2b() throws Exception\n     {\n         final String XML =", "timestamp": 1348120532, "metainfo": ""}