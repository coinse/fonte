{"sha": "d54aade4b167dfa1085beb8eff8551145dd46830", "log": "More refactoring, clean up, to make use of cleaner way of obtaining property wrapper name", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/WrapperHandlingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/WrapperHandlingDeserializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.dataformat.xml.util.TypeUtil;\n \n         \n         // Let's go through the properties now...\n         Iterator<SettableBeanProperty> it = newDelegatee.properties();\n-        final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n         HashSet<String> unwrappedNames = null;\n         while (it.hasNext()) {\n             SettableBeanProperty prop = it.next();\n             if (!TypeUtil.isIndexedType(type)) {\n                 continue;\n             }\n-            AnnotatedMember acc = prop.getMember();\n-            PropertyName wrapperName = (acc == null) ? null : intr.findWrapperName(acc);\n+            PropertyName wrapperName = prop.getWrapperName();\n             // skip anything with wrapper (should work as is)\n             if (wrapperName != null && wrapperName != PropertyName.NO_NAME) {\n                 continue;\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n         int changed = 0;\n         for (int i = 0, len = propDefs.size(); i < len; ++i) {\n             BeanPropertyDefinition prop = propDefs.get(i);\n-            AnnotatedMember acc = prop.getMutator();\n+            AnnotatedMember acc = prop.getPrimaryMember();\n             // should not be null, but just in case:\n             if (acc == null) {\n                 continue;\n              * map them is to rename property to have name \"\"... (and\n              * hope this does not break other parts...)\n              */\n-\n             Boolean b = AnnotationUtil.findIsTextAnnotation(intr, acc);\n             if (b != null && b.booleanValue()) {\n                 // unwrapped properties will appear as 'unnamed' (empty String)\n                 continue;\n             }\n             // second: do we need to handle wrapping (for Lists)?\n-            PropertyName wrapperName = intr.findWrapperName(acc);\n+            PropertyName wrapperName = prop.getWrapperName();\n             \n             if (wrapperName != null && wrapperName != PropertyName.NO_NAME) {\n                 String localName = wrapperName.getSimpleName();\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n     extends JaxbAnnotationIntrospector\n     implements XmlAnnotationIntrospector\n {\n-    @Deprecated\n+\tprivate static final long serialVersionUID = 6477843393758275877L;\n+\n+\t@Deprecated\n     public XmlJaxbAnnotationIntrospector() {\n         super();\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n                 continue;\n             }\n             PropertyName wrappedName = PropertyName.construct(bpw.getName(), ns);\n-            PropertyName wrapperName = intr.findWrapperName(member);\n+            PropertyName wrapperName = bpw.getWrapperName();\n \n             // first things first: no wrapping?\n             if (wrapperName == null || wrapperName == PropertyName.NO_NAME) {", "timestamp": 1363215674, "metainfo": ""}