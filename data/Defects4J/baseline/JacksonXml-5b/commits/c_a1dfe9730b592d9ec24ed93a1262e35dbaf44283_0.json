{"sha": "a1dfe9730b592d9ec24ed93a1262e35dbaf44283", "log": "Add a way to change defaultwrapper...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n  */\n public class XmlMapper extends ObjectMapper\n {\n+    protected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();\n+    \n+    // need to hold on to module instance just in case copy() is used\n+    protected final JacksonXmlModule _xmlModule;\n+    \n     /*\n     /**********************************************************\n     /* Life-cycle: construction, configuration\n     /**********************************************************\n      */\n \n-    public XmlMapper()\n-    {\n+    public XmlMapper() {\n         this(new XmlFactory());\n     }\n     \n-    public XmlMapper(XmlFactory xmlFactory)\n+    public XmlMapper(XmlFactory xmlFactory) {\n+        this(xmlFactory, DEFAULT_XML_MODULE);\n+    }\n+    \n+    public XmlMapper(JacksonXmlModule module)\n+    {\n+        this(new XmlFactory(), module);\n+    }\n+\n+    public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module)\n     {\n         /* Need to override serializer provider (due to root name handling);\n          * deserializer provider fine as is\n          */\n         super(xmlFactory, new XmlSerializerProvider(new XmlRootNameLookup()), null);\n+        _xmlModule = module;\n         // but all the rest is done via Module interface!\n-        this.registerModule(new JacksonXmlModule());\n+        if (module != null) {\n+            registerModule(module);\n+        }\n     }\n \n     // @since 2.1\n     public XmlMapper copy()\n     {\n         _checkInvalidCopy(XmlMapper.class);\n-        return new XmlMapper((XmlFactory) _jsonFactory.copy());\n+        return new XmlMapper((XmlFactory) _jsonFactory.copy(), _xmlModule);\n     }\n     \n     @Override\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListsUnwrapped.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListsUnwrapped.java\n package com.fasterxml.jackson.dataformat.xml;\n \n-import java.io.*;\n-\n-import javax.xml.bind.JAXBContext;\n-import javax.xml.bind.Marshaller;\n import javax.xml.bind.annotation.*;\n \n import com.fasterxml.jackson.annotation.JsonRootName;\n     @JsonRootName(\"list\")\n     static class UnwrappedList {\n         @JacksonXmlElementWrapper(useWrapping=false)\n+        public Value[] value;\n+    }\n+\n+    static class DefaultList {\n         public Value[] value;\n     }\n     \n         list.value = new Value[] { new Value(\"c\"), new Value(\"d\") };\n         String json = mapper.writeValueAsString(list);\n         \n-        System.out.println(\"Unwrapped == \"+json);\n+//        System.out.println(\"Unwrapped == \"+json);\n //        withJAXB(list);\n         assertEquals(\"<list><value><v>c</v></value><value><v>d</v></value></list>\", json);\n \n     \n     }\n \n+    /**\n+     * Test to verify that default wrapping setting is used\n+     */\n+    public void testDefaultWrapping() throws Exception\n+    {\n+        // by default, should be using wrapping, so:\n+        XmlMapper mapper = new XmlMapper();\n+        DefaultList input = new DefaultList();\n+        input.value = new Value[] { new Value(\"a\"), new Value(\"b\") };\n+        String json = mapper.writeValueAsString(input);\n+        assertEquals(\"<DefaultList><value><value><v>a</v></value><value><v>b</v></value></value></DefaultList>\", json);\n+        DefaultList output = mapper.readValue(json, DefaultList.class);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+\n+        // but can be changed not to use wrapping by default\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(false);\n+        mapper = new XmlMapper(module);\n+        json = mapper.writeValueAsString(input);\n+        assertEquals(\"<DefaultList><value><v>a</v></value><value><v>b</v></value></DefaultList>\", json);\n+        output = mapper.readValue(json, DefaultList.class);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+    }\n+    \n+    /*\n     void withJAXB(Object ob) throws Exception\n     {\n         JAXBContext jc = JAXBContext.newInstance(ob.getClass());\n             xml = xml.substring(xml.indexOf(\"?>\")+2);\n         }\n         System.out.println(xml);\n-\n    }\n+   */\n }", "timestamp": 1347333927, "metainfo": ""}