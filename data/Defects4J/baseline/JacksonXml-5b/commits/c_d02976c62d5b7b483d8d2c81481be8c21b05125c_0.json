{"sha": "d02976c62d5b7b483d8d2c81481be8c21b05125c", "log": "fix eclipse warnings", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n     extends JacksonAnnotationIntrospector\n     implements XmlAnnotationIntrospector\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * For backwards compatibility with 2.0, the default behavior is\n      * to assume use of List wrapper if no annotations are used.\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlAnnotationIntrospector.java\n     public static class Pair extends AnnotationIntrospectorPair\n         implements XmlAnnotationIntrospector\n     {\n+        private static final long serialVersionUID = 1L;\n+        \n         protected final XmlAnnotationIntrospector _xmlPrimary;\n         protected final XmlAnnotationIntrospector _xmlSecondary;\n         \n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestXmlParser.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestXmlParser.java\n         // Former could be worked around; latter less so at this point.\n \n         // So, for now, let's just do sort of minimal verification, manually\n-        JsonParser jp = _xmlMapper.getFactory().createJsonParser(xml);\n+        JsonParser jp = _xmlMapper.getFactory().createParser(xml);\n         \n         assertToken(JsonToken.START_OBJECT, jp.nextToken()); // main object\n \n     {\n         final String XML = \"<array><elem>value</elem><elem><property>123</property></elem><elem>1</elem></array>\";\n \n-        FromXmlParser xp = (FromXmlParser) _xmlFactory.createJsonParser(new StringReader(XML));\n+        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n \n         // First: verify handling without forcing array handling:\n         assertToken(JsonToken.START_OBJECT, xp.nextToken()); // <array>\n         xp.close();\n \n         // And then with array handling:\n-        xp = (FromXmlParser) _xmlFactory.createJsonParser(new StringReader(XML));\n+        xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n         assertTrue(xp.getParsingContext().inRoot());\n \n         assertToken(JsonToken.START_OBJECT, xp.nextToken()); // <array>\n     {\n         final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n \n-        FromXmlParser xp = (FromXmlParser) _xmlFactory.createJsonParser(new StringReader(XML));\n+        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n \n         // First: verify handling without forcing array handling:\n         assertToken(JsonToken.START_OBJECT, xp.nextToken()); // <data>\n     {\n         StringWriter w = new StringWriter();\n \n-        JsonParser jp = _xmlFactory.createJsonParser(xml);\n-        JsonGenerator jg = _jsonFactory.createJsonGenerator(w);\n+        JsonParser jp = _xmlFactory.createParser(xml);\n+        JsonGenerator jg = _jsonFactory.createGenerator(w);\n         while (jp.nextToken() != null) {\n             jg.copyCurrentEvent(jp);\n         }", "timestamp": 1357444197, "metainfo": ""}