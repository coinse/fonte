{"sha": "4f700643c936288fd57b152c3aae0e7906baea17", "log": "Add a unit test to show issues with format detection, XML backend", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestXMLFormatDetection.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestXMLFormatDetection.java\n package com.fasterxml.jackson.dataformat.xml;\n \n import java.io.ByteArrayInputStream;\n+import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.format.*;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+\n import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n \n public class TestXMLFormatDetection extends XmlTestBase\n {\n+    static class POJO {\n+        public int x, y;\n+        \n+        public POJO() { }\n+        public POJO(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+    }\n+\n+    static class ListPOJO {\n+        @JacksonXmlElementWrapper(localName=\"list\")\n+        public List<POJO> v = new ArrayList<POJO>();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods, success\n+    /**********************************************************\n+     */\n+    \n     public void testSimpleValidXmlDecl() throws Exception\n     {\n         XmlFactory f = new XmlFactory();\n         assertToken(JsonToken.START_OBJECT, jp.nextToken());\n         jp.close();\n     }\n+\n+    public void testSimpleViaObjectReader() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        XmlMapper xmlMapper = new XmlMapper();\n+\n+        ObjectReader detecting = mapper.reader(POJO.class)\n+                .withFormatDetection(new JsonFactory(), xmlMapper.getFactory());\n+        POJO pojo = detecting.readValue(utf8Bytes(\"<POJO><y>3</y><x>1</x></POJO>\"));\n+        assertNotNull(pojo);\n+        assertEquals(1, pojo.x);\n+        assertEquals(3, pojo.y);\n+    }\n+    \n+    public void testListViaObjectReader() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        XmlMapper xmlMapper = new XmlMapper();\n+        ListPOJO list = new ListPOJO();\n+        list.v.add(new POJO(1, 2));\n+        list.v.add(new POJO(3, 4));\n+        String xml = xmlMapper.writeValueAsString(list);\n+\n+        ListPOJO resultList = mapper.reader(ListPOJO.class)\n+                .withFormatDetection(new JsonFactory(), xmlMapper.getFactory())\n+                .readValue(utf8Bytes(xml));\n+        assertNotNull(resultList);\n+        assertEquals(2, resultList.v.size());\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods, error handling\n+    /**********************************************************\n+     */\n     \n     public void testSimpleInvalid() throws Exception\n     {\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n     /* Helper methods, other\n     /**********************************************************\n      */\n+\n+    protected byte[] utf8Bytes(String str) {\n+        try {\n+            return str.getBytes(\"UTF-8\");\n+        } catch (IOException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n     \n     /**\n      * Helper method that tries to remove unnecessary namespace", "timestamp": 1345783714, "metainfo": ""}