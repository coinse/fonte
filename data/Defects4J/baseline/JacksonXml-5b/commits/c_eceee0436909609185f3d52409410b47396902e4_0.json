{"sha": "eceee0436909609185f3d52409410b47396902e4", "log": "Merge branch 'master' of github.com:pgelinas/jackson-dataformat-xml into pgelinas-master  Conflicts: \tpom.xml", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n         return name;\n     }\n \n-    /* Ok, now: following contains quite a bit of duplication.\n-     * But it is still needed since trying to refactor things tends\n-     * to end in infinite loop or stack overflow... we can eventually\n-     * remove these methods once we are certain that core databinding\n-     * never calls these methods (perhaps with 2.3 or at latest 2.4)\n-     */\n-    \n-    @Deprecated\n-    @Override\n-    public String findSerializationName(AnnotatedField a)\n-    {\n-        PropertyName pname = _findXmlName(a);\n-        if (pname != null) {\n-            return pname.getSimpleName();\n-        }\n-        String name = super.findSerializationName(a);\n-        if (name == null) {\n-            if (a.hasAnnotation(JacksonXmlText.class)) {\n-                return \"\";\n-            }\n-        }\n-        return name;\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public String findSerializationName(AnnotatedMethod a)\n-    {\n-        PropertyName pname = _findXmlName(a);\n-        if (pname != null) {\n-            return pname.getSimpleName();\n-        }\n-        String name = super.findSerializationName(a);\n-        if (name == null) {\n-            if (a.hasAnnotation(JacksonXmlText.class)) {\n-                return \"\";\n-            }\n-        }\n-        return name;\n-    }\n-\n     @Override\n     public PropertyName findNameForDeserialization(Annotated a)\n     {\n             }\n         }\n         return name;\n-    }\n-    \n-    @Deprecated\n-    @Override\n-    public String findDeserializationName(AnnotatedField a)\n-    {\n-        PropertyName pname = _findXmlName(a);\n-        if (pname != null) {\n-            return pname.getSimpleName();\n-        }\n-        String name = super.findDeserializationName(a);\n-        if (name == null) {\n-            if (a.hasAnnotation(JacksonXmlText.class)) {\n-                return \"\";\n-            }\n-        }\n-        return name;\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public String findDeserializationName(AnnotatedMethod a)\n-    {\n-        PropertyName pname = _findXmlName(a);\n-        if (pname != null) {\n-            return pname.getSimpleName();\n-        }\n-        String name = super.findDeserializationName(a);\n-        if (name == null) {\n-            if (a.hasAnnotation(JacksonXmlText.class)) {\n-                return \"\";\n-            }\n-        }\n-        return name;\n-    }\n-    \n-    @Deprecated\n-    @Override\n-    public String findDeserializationName(AnnotatedParameter a)\n-    {\n-        PropertyName pname = _findXmlName(a);\n-        if (pname != null) {\n-            // empty name not acceptable...\n-            String local = pname.getSimpleName();\n-            if (local != null && local.length() > 0) {\n-                return local;\n-            }\n-        }\n-        // xml text still has special handling...\n-        String name = super.findDeserializationName(a);\n-        if (name == null) {\n-            if (a.hasAnnotation(JacksonXmlText.class)) {\n-                return \"\";\n-            }\n-        }\n-        return super.findDeserializationName(a);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n         return xp;\n     }\n     \n-    /*\n-    /**********************************************************\n-    /* Deprecated internal factory methods for parser creation\n-    /**********************************************************\n-     */\n-\n-    //protected IOContext _createContext(Object srcRef, boolean resourceManaged)\n-\n-    /**\n-     * Overridable factory method that actually instantiates desired\n-     * parser.\n-     */\n-    @Override\n-    @Deprecated\n-    protected FromXmlParser _createJsonParser(InputStream in, IOContext ctxt)\n-        throws IOException, JsonParseException\n-    {\n-        return _createParser(in, ctxt);\n-    }\n-\n-    /**\n-     * Overridable factory method that actually instantiates desired\n-     * parser.\n-     */\n-    @Override\n-    @Deprecated\n-    protected FromXmlParser _createJsonParser(Reader r, IOContext ctxt)\n-        throws IOException, JsonParseException\n-    {\n-        return _createParser(r, ctxt);\n-    }\n-\n-    /**\n-     * Overridable factory method that actually instantiates desired\n-     * parser.\n-     */\n-    @Override\n-    @Deprecated\n-    protected FromXmlParser _createJsonParser(byte[] data, int offset, int len, IOContext ctxt)\n-        throws IOException, JsonParseException\n-    {\n-        return _createParser(data, offset, len, ctxt);\n-    }\n \n     /*\n     /**********************************************************************\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n import com.fasterxml.jackson.core.base.ParserMinimalBase;\n import com.fasterxml.jackson.core.io.IOContext;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n+import com.fasterxml.jackson.dataformat.xml.PackageVersion;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n \n /**\n         }\n         return true;\n     }\n+\n+    @Override\n+    public Version version()\n+    {\n+        return PackageVersion.VERSION;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n import com.fasterxml.jackson.databind.ser.BeanSerializer;\n import com.fasterxml.jackson.databind.ser.PropertyFilter;\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n+import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n import com.fasterxml.jackson.dataformat.xml.util.XmlInfo;\n         \n         final ToXmlGenerator xgen = (ToXmlGenerator) jgen0;\n         final BeanPropertyWriter[] props;\n-        // !!! TODO: change to use non-deprecated version in 2.3\n         if (_filteredProps != null && provider.getActiveView() != null) {\n             props = _filteredProps;\n         } else {\n         final ToXmlGenerator xgen = (ToXmlGenerator) jgen0;\n         \n         final BeanPropertyWriter[] props;\n-        // !!! TODO: change to use non-deprecated version in 2.3\n         if (_filteredProps != null && provider.getActiveView() != null) {\n             props = _filteredProps;\n         } else {\n             TypeSerializer typeSer)\n         throws IOException, JsonGenerationException\n     {\n+        if (_objectIdWriter != null) {\n+            _serializeWithObjectId(bean, jgen, provider, typeSer);\n+            return;\n+        }\n+\n         /* Ok: let's serialize type id as attribute, but if (and only if!)\n          * we are using AS_PROPERTY\n          */\n         }\n     }\n     \n+    @Override\n+    protected void _serializeObjectId(Object bean,\n+                                      JsonGenerator jgen,\n+                                      SerializerProvider provider,\n+                                      TypeSerializer typeSer,\n+                                      WritableObjectId objectId) throws IOException, JsonProcessingException,\n+            JsonGenerationException {\n+        /* Ok: let's serialize type id as attribute, but if (and only if!)\n+         * we are using AS_PROPERTY\n+         */\n+        if (typeSer.getTypeInclusion() == JsonTypeInfo.As.PROPERTY) {\n+            ToXmlGenerator xgen = (ToXmlGenerator)jgen;\n+            xgen.setNextIsAttribute(true);\n+            super._serializeObjectId(bean, jgen, provider, typeSer, objectId);\n+            if (_attributeCount == 0) { // if no attributes, need to reset\n+                xgen.setNextIsAttribute(false);\n+            }\n+        } else {\n+            super._serializeObjectId(bean, jgen, provider, typeSer, objectId);\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Helper methods\n \n         for (int i = 0, len = properties.length; i < len; ++i) {\n             BeanPropertyWriter bpw = properties[i];\n-            \n+\n             if (!_isAttribute(bpw)) {\n                 continue;\n             }\n-            // Swap if attribute and there are preceding elements:\n-            if (attrCount < i) {\n-                properties[i] = properties[attrCount];\n+\n+            // Move attribute a few places done as necessary\n+            int moveBy = i-attrCount;\n+            if (moveBy > 0) {\n+                System.arraycopy(properties, attrCount, properties, attrCount+1, moveBy);\n                 properties[attrCount] = bpw;\n                 if (filteredProperties != null) {\n                     BeanPropertyWriter fbpw = filteredProperties[i];\n-                    filteredProperties[i] = filteredProperties[attrCount];\n+                    System.arraycopy(filteredProperties, attrCount, filteredProperties, attrCount+1, moveBy);\n                     filteredProperties[attrCount] = fbpw;\n                 }\n             }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestSerializationOrdering.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import com.fasterxml.jackson.dataformat.xml.*;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+public class TestSerializationOrdering extends XmlTestBase\n+{\n+    @JsonPropertyOrder({\"a\", \"c\" })\n+    static class Bean91 {\n+        public String a;\n+        @JacksonXmlProperty(isAttribute = true)\n+        public String b;\n+        public String c;\n+\n+        public Bean91(String a, String b, String c) {\n+            this.a = a;\n+            this.b = b;\n+            this.c = c;\n+        }\n+    }\n+\n+    public void testOrdering() throws Exception\n+    {\n+        XmlMapper xmlMapper = new XmlMapper();\n+        String xml = xmlMapper.writeValueAsString(new Bean91(\"1\", \"2\", \"3\"));\n+        assertEquals(\"<Bean91 b=\\\"2\\\"><a>1</a><c>3</c></Bean91>\", xml);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestPolymorphic.java\n package com.fasterxml.jackson.dataformat.xml.failing;\n \n-import java.util.*;\n-\n-import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n-import com.fasterxml.jackson.dataformat.xml.*;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n \n public class TestPolymorphic extends XmlTestBase\n {\n         public ClassArrayWrapper(String s) { wrapped = new SubTypeWithClassArray(s); }\n     }\n \n-    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)\n-    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n-    protected static class TypeWithClassPropertyAndObjectId {\n-        public String id;\n-\n-        public TypeWithClassPropertyAndObjectId(String id) { this.id = id; }\n-    }\n-\n-    protected static class Wrapper {\n-        public List<TypeWithClassPropertyAndObjectId> data;\n-\n-        public Wrapper(List<TypeWithClassPropertyAndObjectId> data) { this.data = data; }\n-    }\n-    \n     /*\n     /**********************************************************\n     /* Set up\n         assertEquals(SubTypeWithClassArray.class, result.wrapped.getClass());\n         assertEquals(\"Foobar\", ((SubTypeWithClassArray) result.wrapped).name);\n     }\n-\n-    /**\n-     * Test for issue 81\n-     */\n-    public void testAsPropertyWithObjectId() throws Exception\n-    {\n-        List<TypeWithClassPropertyAndObjectId> data = new ArrayList<TestPolymorphic.TypeWithClassPropertyAndObjectId>();\n-        TypeWithClassPropertyAndObjectId object = new TypeWithClassPropertyAndObjectId(\"Foobar\");\n-        data.add(object);\n-        // This will be written as an id reference instead of object; as such, no type info will be written.\n-        data.add(object);\n-        String xml = _xmlMapper.writeValueAsString(new Wrapper(data));\n-        Wrapper result = _xmlMapper.readValue(xml, Wrapper.class);\n-        assertNotNull(result);\n-        assertSame(result.data.get(0), result.data.get(1));\n-        assertEquals(\"Foobar\", result.data.get(0).id);\n-    }\n }\n    \n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/types/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/types/TestPolymorphic.java\n package com.fasterxml.jackson.dataformat.xml.types;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n \n         public SubTypeWithClassProperty(String s) { name = s; }\n     }\n     \n-    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_ARRAY)\n-    static class BaseTypeWithClassArray { }\n-\n     @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n     protected static class BaseTypeWithClassObject { }\n \n     \n         public SubTypeWithClassObject() { }\n         public SubTypeWithClassObject(String s) { name = s; }\n+    }\n+\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n+    protected static class TypeWithClassPropertyAndObjectId {\n+        public String id;\n+\n+        public TypeWithClassPropertyAndObjectId() {}\n+        public TypeWithClassPropertyAndObjectId(String id) { this.id = id; }\n+    }\n+\n+    protected static class Wrapper {\n+        public List<TypeWithClassPropertyAndObjectId> data;\n+\n+        public Wrapper(){}\n+        public Wrapper(List<TypeWithClassPropertyAndObjectId> data) { this.data = data; }\n     }\n \n     /*\n         assertEquals(SubTypeWithClassObject.class, result.getClass());\n         assertEquals(\"Foobar\", ((SubTypeWithClassObject) result).name);\n     }\n+\n+    /**\n+     * Test for issue 81\n+     */\n+    public void testAsPropertyWithObjectId() throws Exception\n+    {\n+        List<TypeWithClassPropertyAndObjectId> data = new ArrayList<TestPolymorphic.TypeWithClassPropertyAndObjectId>();\n+        TypeWithClassPropertyAndObjectId object = new TypeWithClassPropertyAndObjectId(\"Foobar\");\n+        data.add(object);\n+        // This will be written as an id reference instead of object; as such, no type info will be written.\n+        data.add(object);\n+        String xml = _xmlMapper.writeValueAsString(new Wrapper(data));\n+        Wrapper result = _xmlMapper.readValue(xml, Wrapper.class);\n+        assertNotNull(result);\n+        assertSame(result.data.get(0), result.data.get(1));\n+        assertEquals(\"Foobar\", result.data.get(0).id);\n+    }\n }\n    ", "timestamp": 1390953209, "metainfo": ""}