{"sha": "37390be3c1c2d43fc8a87faa6536bd229caafd22", "log": "Mark #99 as fixed, test now passes", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/AttributeIssue108Test.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.*;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class AttributeIssue108Test extends XmlTestBase\n+{\n+    static class Foo {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Bar> firstBar = new ArrayList<Bar>();\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Bar> secondBar = new ArrayList<Bar>();\n+    }\n+\n+    static class Bar {\n+        public String value;\n+\n+        @JacksonXmlProperty(isAttribute = true)\n+        public int id;\n+    }\n+\n+    public void testIdsFromAttributes() throws Exception {\n+        XmlMapper xmlMapper = new XmlMapper();\n+        Foo foo = new Foo();\n+        Bar bar1 = new Bar();\n+        bar1.id = 1;\n+        bar1.value = \"FIRST\";\n+        foo.firstBar.add(bar1);\n+        Bar bar2 = new Bar();\n+        bar2.value = \"SECOND\";\n+        bar2.id = 2;\n+        foo.secondBar.add(bar2);\n+        String string = xmlMapper.writeValueAsString(foo);\n+        Foo fooRead = xmlMapper.readValue(string, Foo.class);\n+        assertEquals(foo.secondBar.get(0).id, fooRead.secondBar.get(0).id);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/AttributeIssue99Test.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.*;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class AttributeIssue99Test extends XmlTestBase\n+{\n+    static class Root {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        @JacksonXmlProperty(localName = \"value\")\n+        public List<Value> values;\n+    }\n+\n+    public static class Value {\n+        @JacksonXmlProperty(isAttribute = true)\n+        public int id;\n+    }\n+\n+    public void testListWithAttributes() throws Exception\n+    {\n+        String source = \"<Root>\"\n+                + \"     <value id=\\\"1\\\"/>\"\n+                + \"     <fail/>\"\n+                + \"</Root>\";\n+        ObjectMapper mapper = new XmlMapper()\n+                .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n+        Root root = mapper.readValue(source, Root.class);\n+        mapper.writeValue(System.out, root);\n+        System.out.println();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/ListAsObjectTest.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlElement;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+@SuppressWarnings(\"serial\")\n+public class ListAsObjectTest extends XmlTestBase\n+{\n+    static final class Value {\n+        @XmlElement(name = \"v\")\n+        public String v;\n+    \n+        public String getV() { return v; }\n+    \n+        public void setV(final String v) { this.v = v; }\n+    }\n+\n+    @JsonFormat(shape=JsonFormat.Shape.OBJECT)\n+    static final class Values extends LinkedList<Value>\n+    {\n+        @XmlAttribute(name = \"type\")\n+        private String type;\n+    \n+        @JacksonXmlElementWrapper(localName = \"value\", useWrapping = false)\n+        @JacksonXmlProperty(localName = \"value\")\n+         List<Value> values = new ArrayList<Value>();\n+    \n+        String getType() { return type; }\n+    \n+        void setType(final String type) { this.type = type; }\n+    \n+        List<Value> getValues() { return values; }\n+    \n+        void setValues(final List<Value> values) { this.values = values; }\n+    }\n+\n+    public void testCollection() throws Exception {\n+        final Values values = new XmlMapper().readValue(\"<values type=\\\"array\\\">\" +\n+                                                        \"  <value><v>c</v></value>\" +\n+                                                        \"  <value><v>d</v></value>\" +\n+                                                        \"</values>\",\n+                                                        Values.class);\n+        assertEquals(2, values.getValues().size(), 2);\n+        assertEquals(\"c\", values.getValues().get(0).getV());\n+        assertEquals(\"d\", values.getValues().get(1).getV());\n+    \n+        assertEquals(\"array\", values.getType());\n+\n+        // Passes with 2.1.2\n+        /*\n+        assertEquals(2, values.size());\n+        assertEquals(\"c\", values.get(0).getV());\n+        assertEquals(\"d\", values.get(1).getV());\n+        */\n+    }\n+}", "timestamp": 1396672267, "metainfo": ""}