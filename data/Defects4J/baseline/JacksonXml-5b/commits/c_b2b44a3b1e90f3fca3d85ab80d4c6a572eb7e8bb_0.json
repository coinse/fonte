{"sha": "b2b44a3b1e90f3fca3d85ab80d4c6a572eb7e8bb", "log": "added a test that repos issue #86 - https://github.com/FasterXML/jackson-dataformat-xml/issues/86 - can not deserialize unwrapped list when   @JacksonXmlProperty.localName matches JacksonXmlRootElement.localName - related: http://stackoverflow.com/questions/20673153/can-not-deserialize-unwrapped-list-when-jacksonxmlproperty-localname-matches-j", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestIssue86.java\n+package com.fasterxml.jackson.dataformat.xml.unwrapped;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import junit.framework.Assert;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class TestIssue86 {\n+\n+  @Test\n+  public void deserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch() throws Exception {\n+    final String source =\n+        \"<test id=\\\"0\\\">\" +\n+            \"<test id=\\\"0.1\\\">\" +\n+                \"<test id=\\\"0.1.1\\\"/>\" +\n+            \"</test>\" +\n+            \"<test id=\\\"0.2\\\"/>\" +\n+            \"<test id=\\\"0.3\\\">\" +\n+                \"<test id=\\\"0.3.1\\\"/>\" +\n+            \"</test>\" +\n+        \"</test>\";\n+\n+    final Issue86 before = new Issue86(\n+        \"0\",\n+        Arrays.asList(\n+            new Issue86(\n+                \"0.1\",\n+                Arrays.asList(\n+                    new Issue86(\n+                        \"0.1.1\",\n+                        null))),\n+            new Issue86(\n+                \"0.2\",\n+                null),\n+            new Issue86(\n+                \"0.3\",\n+                Arrays.asList(\n+                    new Issue86(\n+                        \"0.3.1\",\n+                        null)))));\n+\n+    final XmlMapper mapper = new XmlMapper();\n+    mapper.setSerializationInclusion(Include.NON_NULL);\n+\n+    final String xml = mapper.writeValueAsString(before);\n+    Assert.assertEquals(source, xml);\n+\n+    final Issue86 after = mapper.readValue(xml, Issue86.class);\n+    Assert.assertEquals(before, after);\n+  }\n+\n+  @JacksonXmlRootElement(localName = \"test\")\n+  public static class Issue86 {\n+\n+    @JacksonXmlProperty(localName = \"id\", isAttribute = true)\n+    private String id;\n+\n+    @JacksonXmlElementWrapper(useWrapping = false)\n+    @JacksonXmlProperty(localName = \"test\")\n+    private List<Issue86> children;\n+\n+    public Issue86() {}\n+\n+    public Issue86(final String id, final List<Issue86> children) {\n+      this.id = id;\n+      this.children = children;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object other) {\n+      if (other == null) {\n+        return false;\n+      }\n+\n+      if (other == this) {\n+        return true;\n+      }\n+\n+      if (!(other instanceof Issue86)) {\n+        return false;\n+      }\n+\n+      final Issue86 otherIssue86 = (Issue86) other;\n+      return otherIssue86.id.equals(id) && otherIssue86.children.equals(children);\n+    }\n+  }\n+\n+}", "timestamp": 1387577255, "metainfo": ""}