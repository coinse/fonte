{"sha": "4c6bad9dcae822f35c11818f08e85af92ed887e3", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n     {\n         final AnnotationIntrospector intr = config.getAnnotationIntrospector();\n         int changed = 0;\n-        for (int i = 0, len = propDefs.size(); i < len; ++i) {\n+        \n+        for (int i = 0, propCount = propDefs.size(); i < propCount; ++i) {\n             BeanPropertyDefinition prop = propDefs.get(i);\n             AnnotatedMember acc = prop.getPrimaryMember();\n             // should not be null, but just in case:\n \n     @Override\n     public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,\n-            BeanDescription beanDesc, JsonDeserializer<?> deserializer)\n+            BeanDescription beanDesc, JsonDeserializer<?> deser0)\n     {\n-        if (!(deserializer instanceof BeanDeserializerBase)) {\n-            return deserializer;\n+        if (!(deser0 instanceof BeanDeserializerBase)) {\n+            return deser0;\n         }\n-        return new WrapperHandlingDeserializer((BeanDeserializerBase) deserializer);\n+        /* 17-Aug-2013, tatu: One important special case first: if we have one \"XML Text\"\n+         * property, it may be exposed as VALUE_STRING token (depending on whether any attribute\n+         * values are exposed): and to deserialize from that, we need special handling unless POJO\n+         * has appropriate single-string creator method.\n+         */\n+        BeanDeserializerBase deser = (BeanDeserializerBase) deser0;\n+\n+        // Heuristics are bit tricky; but for now let's assume that if POJO\n+        // can already work with VALUE_STRING, it's ok and doesn't need extra support\n+        if (!deser.getValueInstantiator().canCreateFromString()) {\n+            SettableBeanProperty textProp = _findSoleTextProp(config, deser.properties());\n+            if (textProp != null) {\n+//                System.err.println(\"DEBUG: gotcha! \"+textProp);\n+                // !!! TODO\n+            }\n+        }\n+        return new WrapperHandlingDeserializer(deser);\n+    }\n+\n+    private SettableBeanProperty _findSoleTextProp(DeserializationConfig config,\n+            Iterator<SettableBeanProperty> propIt)\n+    {\n+        final AnnotationIntrospector ai = config.getAnnotationIntrospector();\n+        SettableBeanProperty textProp = null;\n+        while (propIt.hasNext()) {\n+            SettableBeanProperty prop = propIt.next();\n+            AnnotatedMember m = prop.getMember();\n+            if (m != null) {\n+                // Ok, let's use a simple check: we should have renamed it earlier so:\n+                PropertyName n = prop.getFullName();\n+                if (_cfgNameForTextValue.equals(n.getSimpleName())) {\n+                    // should we verify we only got one?\n+                    textProp = prop;\n+                    continue;\n+                }\n+                // as-attribute are ok as well\n+                Boolean b = AnnotationUtil.findIsAttributeAnnotation(ai, m);\n+                if (b != null && b.booleanValue()) {\n+                    continue;\n+                }\n+            }\n+            // Otherwise, it's something else; no go\n+            return null;\n+        }\n+        return textProp;\n     }\n }", "timestamp": 1376966650, "metainfo": ""}