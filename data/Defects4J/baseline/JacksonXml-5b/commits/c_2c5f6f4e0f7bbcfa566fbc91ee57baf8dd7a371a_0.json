{"sha": "2c5f6f4e0f7bbcfa566fbc91ee57baf8dd7a371a", "log": "Fix #213", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n \n     protected void _serializeXmlNull(JsonGenerator jgen) throws IOException\n     {\n-        if (jgen instanceof ToXmlGenerator)\n-        _initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);\n+        // 14-Nov-2016, tatu: As per [dataformat-xml#213], we may have explicitly\n+        //    configured root name...\n+        QName rootName = _rootNameFromConfig();\n+        if (rootName == null) {\n+            rootName = ROOT_NAME_FOR_NULL;\n+        }\n+        if (jgen instanceof ToXmlGenerator) {\n+            _initWithRootName((ToXmlGenerator) jgen, rootName);\n+        }\n         super.serializeValue(jgen, null);\n     }\n     \n         }\n         xgen.initGenerator();\n         String ns = rootName.getNamespaceURI();\n-        /* [Issue#26] If we just try writing root element with namespace,\n+        /* [dataformat-xml#26] If we just try writing root element with namespace,\n          * we will get an explicit prefix. But we'd rather use the default\n          * namespace, so let's try to force that.\n          */\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/RootNameTest.java\n+package com.fasterxml.jackson.dataformat.xml.misc;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.dataformat.xml.*;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class RootNameTest extends XmlTestBase\n+{\n+    static class RootBeanBase\n+    {\n+        public String value;\n+\n+        protected RootBeanBase() { this(\"123\"); }\n+        public RootBeanBase(String v) {\n+            value = v;\n+        }\n+    }\n+\n+    @JacksonXmlRootElement(localName=\"root\")\n+    static class RootBean extends RootBeanBase\n+    {\n+        protected RootBean() { super(); }\n+    }\n+\n+    @JacksonXmlRootElement(localName=\"nsRoot\", namespace=\"http://foo\")\n+    static class NsRootBean\n+    {\n+        public String value = \"abc\";\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    protected XmlMapper _xmlMapper = new XmlMapper();\n+\n+    // Unit test to verify that root name is properly set\n+    public void testRootNameAnnotation() throws IOException\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new StringBean());\n+        \n+        // Hmmh. Looks like JDK Stax may adds bogus ns declaration. As such,\n+        // let's just check that name starts ok...\n+        if (!xml.startsWith(\"<StringBean\")) {\n+            fail(\"Expected root name of 'StringBean'; but XML document is [\"+xml+\"]\");\n+        }\n+\n+        // and then see that basic non-namespace root is ok\n+        xml = _xmlMapper.writeValueAsString(new RootBean());\n+        assertEquals(\"<root><value>123</value></root>\", xml);\n+\n+        // and namespace one too\n+        xml = _xmlMapper.writeValueAsString(new NsRootBean());\n+        if (xml.indexOf(\"nsRoot\") < 0) { // verify localName\n+            fail(\"Expected root name of 'nsRoot'; but XML document is [\"+xml+\"]\");\n+        }\n+        // and NS declaration\n+        if (xml.indexOf(\"http://foo\") < 0) {\n+            fail(\"Expected NS declaration for 'http://foo', not found, XML document is [\"+xml+\"]\");\n+        }\n+    }\n+\n+    public void testDynamicRootName() throws IOException\n+    {\n+        String xml;\n+\n+        ObjectWriter w = _xmlMapper.writer().withRootName(\"rudy\");\n+\n+        xml = w.writeValueAsString(new StringBean(\"foo\"));\n+        assertEquals(\"<rudy><text>foo</text></rudy>\", xml);\n+\n+        xml = w.writeValueAsString(new StringBean(null));\n+        assertEquals(\"<rudy><text/></rudy>\", xml);\n+\n+        // and even with null will respect configured root name\n+        xml = w.writeValueAsString(null);\n+        assertEquals(\"<rudy/>\", xml);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerialization.java\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n \n @SuppressWarnings(\"serial\")\n public class TestSerialization extends XmlTestBase\n {\n-    /*\n-    /**********************************************************\n-    /* Helper types\n-    /**********************************************************\n-     */\n-\n     static class StringBean2\n     {\n         public String text = \"foobar\";\n         public MapBean() { }\n         public MapBean(Map<String,Integer> v) { map = v; }\n     }\n-    \n+\n     static class NsElemBean\n     {\n         @JacksonXmlProperty(namespace=\"http://foo\")\n         public String text = \"blah\";\n-    }\n-\n-    @JacksonXmlRootElement(localName=\"root\")\n-    static class RootBean\n-    {\n-        public String value = \"123\";\n-    }\n-\n-    @JacksonXmlRootElement(localName=\"nsRoot\", namespace=\"http://foo\")\n-    static class NsRootBean\n-    {\n-        public String value = \"abc\";\n     }\n \n     static class CDataStringBean\n     }\n \n     static class CustomMap extends LinkedHashMap<String, Integer> { }\n-    \n-    /*\n-    /**********************************************************\n-    /* Set up\n-    /**********************************************************\n-     */\n \n-    protected XmlMapper _xmlMapper;\n-\n-    // let's actually reuse XmlMapper to make things bit faster\n-    @Override\n-    public void setUp() throws Exception {\n-        super.setUp();\n-        _xmlMapper = new XmlMapper();\n-    }\n-    \n     /*\n     /**********************************************************\n     /* Unit tests\n     /**********************************************************\n      */\n \n-    // Unit test to verify that root name is properly set\n-    public void testRootName() throws IOException\n-    {\n-        String xml = _xmlMapper.writeValueAsString(new StringBean());\n-        \n-        // Hmmh. Looks like JDK Stax may adds bogus ns declaration. As such,\n-        // let's just check that name starts ok...\n-        if (!xml.startsWith(\"<StringBean\")) {\n-            fail(\"Expected root name of 'StringBean'; but XML document is [\"+xml+\"]\");\n-        }\n+    protected XmlMapper _xmlMapper = new XmlMapper();\n \n-        // and then see that basic non-namespace root is ok\n-        xml = _xmlMapper.writeValueAsString(new RootBean());\n-        assertEquals(\"<root><value>123</value></root>\", xml);\n-\n-        // and namespace one too\n-        xml = _xmlMapper.writeValueAsString(new NsRootBean());\n-        if (xml.indexOf(\"nsRoot\") < 0) { // verify localName\n-            fail(\"Expected root name of 'nsRoot'; but XML document is [\"+xml+\"]\");\n-        }\n-        // and NS declaration\n-        if (xml.indexOf(\"http://foo\") < 0) {\n-            fail(\"Expected NS declaration for 'http://foo', not found, XML document is [\"+xml+\"]\");\n-        }\n-    }\n-    \n     public void testSimpleAttribute() throws IOException\n     {\n         String xml = _xmlMapper.writeValueAsString(new AttributeBean());\n         xml = removeSjsxpNamespace(xml);\n         assertEquals(\"<AttributeBean attr=\\\"something\\\"/>\", xml);\n-    }\n-\n-    public void testSimpleAttrAndElem() throws IOException\n-    {\n-        String xml = _xmlMapper.writeValueAsString(new AttrAndElem());\n-        xml = removeSjsxpNamespace(xml);\n-        assertEquals(\"<AttrAndElem id=\\\"42\\\"><elem>whatever</elem></AttrAndElem>\", xml);\n     }\n \n     public void testSimpleNsElem() throws IOException\n         xml = removeSjsxpNamespace(xml);\n         // here we assume woodstox automatic prefixes, not very robust but:\n         assertEquals(\"<NsElemBean><wstxns1:text xmlns:wstxns1=\\\"http://foo\\\">blah</wstxns1:text></NsElemBean>\", xml);\n+    }\n+    \n+    public void testSimpleAttrAndElem() throws IOException\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new AttrAndElem());\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<AttrAndElem id=\\\"42\\\"><elem>whatever</elem></AttrAndElem>\", xml);\n     }\n \n     @SuppressWarnings(\"boxing\")\n         assertEquals(\"<CDataStringArrayBean><value><value><![CDATA[<some<data\\\"]]></value><value><![CDATA[abc]]></value></value></CDataStringArrayBean>\", xml);\n     }\n     \n-    // for [Issue#41]\n+    // for [dataformat-xml#41]\n     public void testCustomSerializer() throws Exception\n     {\n         JacksonXmlModule module = new JacksonXmlModule();", "timestamp": 1479191657, "metainfo": ""}