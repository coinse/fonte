{"sha": "ebc13fdf7060249de3789ea3417de0c0b32d39ff", "log": "Fix #103", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanPropertyWriter.java\n         throws Exception\n     {\n         Object value = get(bean);\n-        \n-        /* Hmmh. Does the default null serialization work ok here? For now let's assume\n-         * it does; can change later if not.\n+\n+        /* 13-Feb-2014, tatu: As per [#103], default handling does not really\n+         *   work here. Rather, we need just a wrapping and should NOT call\n+         *   null handler, as it does not know what to do...\n+         *   \n+         *   Question, however, is what should it be serialized as. We have two main\n+         *   choices; equivalent empty List, and \"nothing\" (missing). Let's start with\n+         *   empty List? But producing missing entry is non-trivial...\n          */\n         if (value == null) {\n-            if (_nullSerializer != null) {\n-                jgen.writeFieldName(_name);\n-                _nullSerializer.serialize(null, jgen, prov);\n+            // if (_nullSerializer != null) { ... }\n+\n+            // For Empty List, we'd do this:\n+            /*\n+            @SuppressWarnings(\"resource\")\n+            final ToXmlGenerator xmlGen = (jgen instanceof ToXmlGenerator) ? (ToXmlGenerator) jgen : null;\n+            if (xmlGen != null) {\n+                xmlGen.startWrappedValue(_wrapperQName, _wrappedQName);\n+                xmlGen.finishWrappedValue(_wrapperQName, _wrappedQName);\n             }\n+            */\n+            // but for missing thing, well, just output nothing\n+            \n             return;\n         }\n-        \n+\n         // then find serializer to use\n         JsonSerializer<Object> ser = _serializer;\n         if (ser == null) {\n         }\n         // For non-nulls: simple check for direct cycles\n         if (value == bean) {\n-            _handleSelfReference(bean, ser);\n+            // NOTE: method signature here change 2.3->2.4\n+            if (_handleSelfReference(bean, jgen, prov, ser)) {\n+                return;\n+            }\n         }\n \n+        @SuppressWarnings(\"resource\")\n+        final ToXmlGenerator xmlGen = (jgen instanceof ToXmlGenerator) ? (ToXmlGenerator) jgen : null;\n         // Ok then; addition we want to do is to add wrapper element, and that's what happens here\n         // 19-Aug-2013, tatu: ... except for those nasty 'convertValue()' calls...\n-        @SuppressWarnings(\"resource\")\n-        final ToXmlGenerator xmlGen = (jgen instanceof ToXmlGenerator) ? (ToXmlGenerator) jgen : null;\n         if (xmlGen != null) {\n             xmlGen.startWrappedValue(_wrapperQName, _wrappedQName);\n         }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/TestWrappedLists.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+public class TestWrappedLists extends XmlTestBase\n+{\n+    static class Order  {\n+        @JacksonXmlElementWrapper(localName = \"line_items\")\n+        @JacksonXmlProperty(localName = \"item\")  \n+        private List<ListItem> line_items; // new ArrayList<ListItem>();\n+    }\n+\n+    static class ListItem {\n+        public int id;\n+        \n+        public ListItem(int id) { this.id = id; }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = xmlMapper(true);\n+\n+    /* For [Issue#103]\n+     */\n+    public void testEmptyList() throws Exception\n+    {\n+        String xml = MAPPER.writeValueAsString(new Order());\n+        assertEquals(\"<Order/>\", xml);\n+        // If we expected Empty list, it'd be:\n+//        assertEquals(\"<Order><line_items/></Order>\", xml);\n+    }\n+}", "timestamp": 1392354097, "metainfo": ""}