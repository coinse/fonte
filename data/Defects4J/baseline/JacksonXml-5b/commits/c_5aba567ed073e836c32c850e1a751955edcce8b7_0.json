{"sha": "5aba567ed073e836c32c850e1a751955edcce8b7", "log": "Add a (failing) test for #129", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n      * Enumeration that defines all togglable features for XML parsers\n      */\n     public enum Feature {\n-        DUMMY_PLACEHOLDER(false)\n         ;\n \n         final boolean _defaultState;\n     public boolean isClosed() { return _closed; }\n \n     @Override\n-    public XmlReadContext getParsingContext()\n-    {\n+    public XmlReadContext getParsingContext() {\n         return _parsingContext;\n     }\n \n      * that starts the current token.\n      */\n     @Override\n-    public JsonLocation getTokenLocation()\n-    {\n+    public JsonLocation getTokenLocation() {\n         return _xmlTokens.getTokenLocation();\n     }\n \n      * usually for error reporting purposes\n      */\n     @Override\n-    public JsonLocation getCurrentLocation()\n-    {\n+    public JsonLocation getCurrentLocation() {\n         return _xmlTokens.getCurrentLocation();\n     }\n \n             return t;\n         }\n         int token = _xmlTokens.next();\n-        \n+\n         /* Need to have a loop just because we may have to eat/convert\n          * a start-element that indicates an array element.\n          */\n      * Method called to release internal buffers owned by the base\n      * parser.\n      */\n-    protected void _releaseBuffers() throws IOException\n-    {\n+    protected void _releaseBuffers() throws IOException {\n         // anything we can/must release? Underlying parser should do all of it, for now?\n     }\n \n     }\n \n     @Override\n-    public Version version()\n-    {\n+    public Version version() {\n         return PackageVersion.VERSION;\n     }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/UnwrappedListWithEmptyCData129Test.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+\n+public class UnwrappedListWithEmptyCData129Test extends XmlTestBase\n+{\n+    static class ListValues {\n+        @XmlElement(name = \"value\", required = true)\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<String> value;\n+    }\n+\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    {\n+        // easier for eye:\n+        MAPPER.enable(SerializationFeature.INDENT_OUTPUT);\n+    }\n+\n+    // for [#129]\n+    public void testListWithEmptyCData() throws Exception\n+    {\n+        String SECOND = \" \";\n+        ListValues result = MAPPER.readValue(\"<root>\\n\"\n+                + \"<value>A</value>\\n\"\n+//                + \"<value><![CDATA[\"+SECOND+\"]]></value>\\n\"\n+                + \"<value> </value>\\n\"\n+                + \"<value>C</value>\\n\"\n+                + \"</root>\", ListValues.class);\n+\n+        List<String> values = result.value;\n+\n+        assertEquals(3, values.size()); // expecting 3 values, getting only 1\n+        assertEquals(\"A\", values.get(0));\n+        assertEquals(SECOND, values.get(1)); // expecting empty string in second position\n+        assertEquals(\"C\", values.get(2));\n+    }    \n+}", "timestamp": 1419913035, "metainfo": ""}