{"sha": "bf64350569be97d9dcb419fdd70379a7d7e7d72d", "log": "Start adding incremental read/write support", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n      * and this reuse only works within context of a single\n      * factory instance.\n      */\n-    public XmlFactory() { this(null); }\n+    public XmlFactory() { this(null, null, null); }\n \n     public XmlFactory(ObjectCodec oc) {\n         this(oc, null, null);\n     }\n \n-    public XmlFactory(XMLInputFactory xmlIn, XMLOutputFactory xmlOut)\n-    {\n+    public XmlFactory(XMLInputFactory xmlIn) {\n+        this(null, xmlIn, null);\n+    }\n+    \n+    public XmlFactory(XMLInputFactory xmlIn, XMLOutputFactory xmlOut) {\n         this(null, xmlIn, xmlOut);\n     }\n     \n     /**********************************************************\n      */\n \n+    /** @since 2.4 */\n+    public XMLInputFactory getXMLInputFactory() {\n+        return _xmlInputFactory;\n+    }\n+\n     public void setXMLInputFactory(XMLInputFactory f) {\n         _xmlInputFactory = f;\n     }\n \n+    /** @since 2.4 */\n+    public XMLOutputFactory getXMLOutputFactory() {\n+        return _xmlOutputFactory;\n+    }\n+    \n     public void setXMLOutputFactory(XMLOutputFactory f) {\n         _xmlOutputFactory = f;\n     }\n                 _objectCodec, _createXmlWriter(out));\n     }\n \n+    /*\n+    /**********************************************************\n+    /* Extended public API, mostly for XmlMapper\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Factory method that wraps given {@link XMLStreamReader}, usually to allow\n+     * partial data-binding.\n+     * \n+     * @since 2.4\n+     */\n+    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n+    {\n+        try {\n+            sr = _initializeXmlReader(sr);\n+        } catch (XMLStreamException e) {\n+            return StaxUtil.throwXmlAsIOException(e);\n+        }\n+        // false -> not managed\n+        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n+                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n+        if (_cfgNameForTextElement != null) {\n+            xp.setXMLTextElementName(_cfgNameForTextElement);\n+        }\n+        return xp;\n+    }\n+\n+    /**\n+     * Factory method that wraps given {@link XMLStreamWriter}, usually to allow\n+     * incremental serialization to compose large output by serializing a sequence\n+     * of individual objects.\n+     *\n+     * @since 2.4\n+     */\n+    public ToXmlGenerator createGenerator(XMLStreamWriter sw) throws IOException\n+    {\n+        try {\n+            sw = _initializeXmlWriter(sw);\n+        } catch (XMLStreamException e) {\n+            return StaxUtil.throwXmlAsIOException(e);\n+        }\n+        IOContext ctxt = _createContext(sw, false);\n+        return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n+                _objectCodec, sw);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Internal factory method overrides\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.io.IOException;\n+\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.stream.XMLStreamWriter;\n \n import com.fasterxml.jackson.core.PrettyPrinter;\n import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;\n import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;\n import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n-\n \n /**\n  * Customized {@link ObjectMapper} that will read and write XML instead of JSON,\n     public XmlMapper() {\n         this(new XmlFactory());\n     }\n-    \n+\n+    /** @since 2.4 */\n+    public XmlMapper(XMLInputFactory inputF, XMLOutputFactory outF) {\n+        this(new XmlFactory(inputF, outF));\n+    }\n+\n+    /** @since 2.4 */\n+    public XmlMapper(XMLInputFactory inputF) {\n+        this(new XmlFactory(inputF));\n+    }\n+\n     public XmlMapper(XmlFactory xmlFactory) {\n         this(xmlFactory, DEFAULT_XML_MODULE);\n     }\n     \n-    public XmlMapper(JacksonXmlModule module)\n-    {\n+    public XmlMapper(JacksonXmlModule module) {\n         this(new XmlFactory(), module);\n     }\n-\n+    \n     public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module)\n     {\n         /* Need to override serializer provider (due to root name handling);\n     {\n         ((XmlFactory) _jsonFactory).setXMLTextElementName(name);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Access to configuration settings\n         ((XmlFactory)_jsonFactory).disable(f);\n         return this;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* XML-specific access\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for reading a single XML value from given XML-specific input\n+     * source; useful for incremental data-binding, combining traversal using\n+     * basic Stax {@link XMLStreamReader} with data-binding by Jackson.\n+     * \n+     * @since 2.4\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T readValue(XMLStreamReader r, Class<T> valueType) throws IOException {\n+        return (T) _readMapAndClose(getFactory().createParser(r),\n+                _typeFactory.constructType(valueType));\n+    } \n+\n+    /**\n+     * Method for reading a single XML value from given XML-specific input\n+     * source; useful for incremental data-binding, combining traversal using\n+     * basic Stax {@link XMLStreamReader} with data-binding by Jackson.\n+     * \n+     * @since 2.4\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public <T> T readValue(XMLStreamReader r, TypeReference valueTypeRef) throws IOException {\n+        return (T) _readMapAndClose(getFactory().createParser(r),\n+                _typeFactory.constructType(valueTypeRef));\n+    } \n+\n+    /**\n+     * Method for reading a single XML value from given XML-specific input\n+     * source; useful for incremental data-binding, combining traversal using\n+     * basic Stax {@link XMLStreamReader} with data-binding by Jackson.\n+     * \n+     * @since 2.4\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T readValue(XMLStreamReader r, JavaType valueType) throws IOException {\n+        return (T) _readMapAndClose(getFactory().createParser(r), valueType);\n+    } \n+\n+    /**\n+     * Method for serializing given value using specific {@link XMLStreamReader}:\n+     * useful when building large XML files by binding individual items, one at\n+     * a time.\n+     * \n+     * @since 2.4\n+     */\n+    public void writeValue(XMLStreamWriter w0, Object value) throws IOException {\n+        @SuppressWarnings(\"resource\")\n+        ToXmlGenerator g = getFactory().createGenerator(w0);\n+        super.writeValue(g, value);\n+        /* NOTE: above call should do flush(); and we should NOT close here.\n+         * Finally, 'g' has no buffers to release.\n+         */\n+    }\n     \n     /*\n     /**********************************************************\n     protected PrettyPrinter _defaultPrettyPrinter() {\n         return new DefaultXmlPrettyPrinter();\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n     }\n \n     @Override\n-    public void close()\n-        throws IOException\n+    public void close() throws IOException\n     {\n //        boolean wasClosed = _closed;\n         super.close();\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n \n import junit.framework.TestCase;\n \n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n \n public abstract class XmlTestBase\n     extends TestCase\n {\n+    @JsonPropertyOrder({ \"first\", \"last\", \"id\" })\n+    protected static class NameBean {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public int age;\n+        public String last, first;\n+\n+        public NameBean() { }\n+        public NameBean(int age, String f, String l) {\n+            this.age = age;\n+            first = f;\n+            last = l;\n+        }\n+    }\n+\n     /**\n      * Sample class from Jackson tutorial (\"JacksonInFiveMinutes\")\n      */\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/incr/IncrementalWritingTest.java\n+package com.fasterxml.jackson.dataformat.xml.incr;\n+\n+import java.io.*;\n+\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class IncrementalWritingTest extends XmlTestBase\n+{\n+    private final XmlMapper MAPPER = xmlMapper(true);\n+    \n+    public void testSimple() throws Exception\n+    {\n+        StringWriter strw = new StringWriter();\n+        XMLStreamWriter sw = MAPPER.getFactory().getXMLOutputFactory().createXMLStreamWriter(strw);\n+        sw.writeStartElement(\"root\");\n+\n+        MAPPER.writeValue(sw, new NameBean(13, \"Grizabella\", \"Glamour\"));\n+        MAPPER.writeValue(sw, new NameBean(17, \"Growl\", \"Tiger\"));\n+\n+        sw.writeEndElement();\n+        sw.writeEndDocument();\n+        sw.close();\n+\n+        String xml = strw.toString().trim();\n+\n+        assertEquals(\"<root>\"\n+                +\"<NameBean age=\\\"13\\\"><first>Grizabella</first><last>Glamour</last></NameBean>\"\n+                +\"<NameBean age=\\\"17\\\"><first>Growl</first><last>Tiger</last></NameBean></root>\",\n+                xml);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/incr/PartialReadTest.java\n+package com.fasterxml.jackson.dataformat.xml.incr;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class PartialReadTest extends XmlTestBase\n+{\n+    public void testSimpleRead() throws Exception\n+    {\n+        \n+    }\n+}", "timestamp": 1401480521, "metainfo": ""}