{"sha": "06c4283e36375908d29af960e3cc834309df544b", "log": "Test refactoring; initial work to address #236", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n     {\n         // note: should NOT move parser if already pointing to START_ELEMENT\n         if (sr.getEventType() != XMLStreamConstants.START_ELEMENT) {\n-            try {\n-                sr = _initializeXmlReader(sr);\n-            } catch (XMLStreamException e) {\n-                return StaxUtil.throwXmlAsIOException(e);\n-            }\n+            sr = _initializeXmlReader(sr);\n         }\n \n         // false -> not managed\n      */\n     public ToXmlGenerator createGenerator(XMLStreamWriter sw) throws IOException\n     {\n-        try {\n-            sw = _initializeXmlWriter(sw);\n-        } catch (XMLStreamException e) {\n-            return StaxUtil.throwXmlAsIOException(e);\n-        }\n+        sw = _initializeXmlWriter(sw);\n         IOContext ctxt = _createContext(sw, false);\n         return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n                 _objectCodec, sw);\n         XMLStreamReader sr;\n         try {\n             sr = _xmlInputFactory.createXMLStreamReader(in);\n-            sr = _initializeXmlReader(sr);\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwXmlAsIOException(e);\n-        }\n+            return StaxUtil.throwAsParseException(e);\n+        }\n+        sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n                 _objectCodec, sr);\n         if (_cfgNameForTextElement != null) {\n         XMLStreamReader sr;\n         try {\n             sr = _xmlInputFactory.createXMLStreamReader(r);\n-            sr = _initializeXmlReader(sr);\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwXmlAsIOException(e);\n-        }\n+            return StaxUtil.throwAsParseException(e);\n+        }\n+        sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n                 _objectCodec, sr);\n         if (_cfgNameForTextElement != null) {\n         XMLStreamReader sr;\n         try {\n             sr = _xmlInputFactory.createXMLStreamReader(new Stax2CharArraySource(data, offset, len));\n-            sr = _initializeXmlReader(sr);\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwXmlAsIOException(e);\n-        }\n+            return StaxUtil.throwAsParseException(e);\n+        }\n+        sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n                 _objectCodec, sr);\n         if (_cfgNameForTextElement != null) {\n         XMLStreamReader sr;\n         try {\n             sr = _xmlInputFactory.createXMLStreamReader(new Stax2ByteArraySource(data, offset, len));\n-            sr = _initializeXmlReader(sr);\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwXmlAsIOException(e);\n-        }\n+            return StaxUtil.throwAsParseException(e);\n+        }\n+        sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n                 _objectCodec, sr);\n         if (_cfgNameForTextElement != null) {\n \n     protected XMLStreamWriter _createXmlWriter(OutputStream out) throws IOException\n     {\n+        XMLStreamWriter sw;\n         try {\n-            return _initializeXmlWriter(_xmlOutputFactory.createXMLStreamWriter(out, \"UTF-8\"));\n+            sw = _xmlOutputFactory.createXMLStreamWriter(out, \"UTF-8\");\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwXmlAsIOException(e);\n-        }\n+            return StaxUtil.throwAsGenerationException(e);\n+        }\n+        return _initializeXmlWriter(sw);\n     }\n \n     protected XMLStreamWriter _createXmlWriter(Writer w) throws IOException\n     {\n+        XMLStreamWriter sw;\n         try {\n-            return _initializeXmlWriter(_xmlOutputFactory.createXMLStreamWriter(w));\n+            sw = _xmlOutputFactory.createXMLStreamWriter(w);\n         } catch (XMLStreamException e) {\n-            return StaxUtil.throwXmlAsIOException(e);\n-        }\n-    }\n-\n-    protected final XMLStreamWriter _initializeXmlWriter(XMLStreamWriter sw) throws IOException, XMLStreamException\n+            return StaxUtil.throwAsGenerationException(e);\n+        }\n+        return _initializeXmlWriter(sw);\n+    }\n+\n+    protected final XMLStreamWriter _initializeXmlWriter(XMLStreamWriter sw) throws IOException\n     {\n         // And just for Sun Stax parser (JDK default), seems that we better define default namespace\n         // (Woodstox doesn't care) -- otherwise it'll add unnecessary odd declaration\n-        sw.setDefaultNamespace(\"\");\n+        try {\n+            sw.setDefaultNamespace(\"\");\n+        } catch (XMLStreamException e) {\n+            return StaxUtil.throwAsGenerationException(e);\n+        }\n         return sw;\n     }\n \n-    protected final XMLStreamReader _initializeXmlReader(XMLStreamReader sr) throws IOException, XMLStreamException\n-    {\n-        // for now, nothing to do... except let's find the root element\n-        while (sr.next() != XMLStreamConstants.START_ELEMENT) {\n-            ;\n+    protected final XMLStreamReader _initializeXmlReader(XMLStreamReader sr) throws IOException\n+    {\n+        try {\n+            // for now, nothing to do... except let's find the root element\n+            while (sr.next() != XMLStreamConstants.START_ELEMENT) {\n+                ;\n+            }\n+        } catch (XMLStreamException e) {\n+            return StaxUtil.throwAsParseException(e);\n         }\n         return sr;\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlReadContext.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlReadContext.java\n      * @return Location pointing to the point where the context\n      *   start marker was found\n      */\n+    @Override\n     public final JsonLocation getStartLocation(Object srcRef) {\n         // We don't keep track of offsets at this level (only reader does)\n         long totalChars = -1L;\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n         try {\n             return _next();\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsParseException(e);\n             return -1;\n         }\n     }\n         try {\n             _xmlReader.closeCompletely();\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsParseException(e);\n         }\n     }\n \n         try {\n             _xmlReader.close();\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsParseException(e);\n         }\n     }\n \n     public JsonLocation getCurrentLocation() {\n         return _extractLocation(_xmlReader.getLocationInfo().getCurrentLocation());\n     }\n+\n     public JsonLocation getTokenLocation() {\n         return _extractLocation(_xmlReader.getLocationInfo().getStartLocation());\n     }\n                 return text;\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsParseException(e);\n         }\n         // Anything to do in failed case? Roll back whatever we found or.. ?\n         return null;\n             // note: SPACE is ignorable (and seldom seen), not to be included\n             case XMLStreamConstants.CHARACTERS:\n             case XMLStreamConstants.CDATA:\n-                if (text == null) {\n-                    text = _xmlReader.getText();\n-                } else {\n-                    text += _xmlReader.getText();\n+                // 17-Jul-2017, tatu: as per [dataformat-xml#236], need to try to...\n+                {\n+                    String str = _getText(_xmlReader);\n+                    if (text == null) {\n+                        text = str;\n+                    } else {\n+                        text += str;\n+                    }\n                 }\n                 break;\n             default:\n         }\n         throw new IllegalStateException(\"Expected to find a tag, instead reached end of input\");\n     }\n-    \n+\n+    private final String _getText(XMLStreamReader2 r) throws XMLStreamException\n+    {\n+        try {\n+            return r.getText();\n+        } catch (RuntimeException e) {\n+            Throwable cause = e.getCause();\n+            if (cause instanceof XMLStreamException) {\n+                throw (XMLStreamException) cause;\n+            }\n+            throw e;\n+        }\n+    }\n+\n     /*\n     /**********************************************************************\n     /* Internal methods, other\n         }\n         return true;\n     }\n-    \n+\n     // for DEBUGGING\n     @Override\n     public String toString()\n     {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"(Token stream:\");\n-        sb.append(\" state=\").append(_currentState);\n-        sb.append(\" attr#=\").append(_attributeCount);\n-        sb.append(\" nextAttr#=\").append(_nextAttributeIndex);\n-        sb.append(\" name=\").append(_localName);\n-        sb.append(\" text=\").append(_textValue);\n-        sb.append(\" repeat?=\").append(_repeatElement);\n-        sb.append(\" wrapper=[\").append(_currentWrapper);\n-        sb.append(\"] repeatElement=\").append(_repeatElement);\n-        sb.append(\" nextName=\").append(_nextLocalName);\n-        sb.append(\")\");\n-        return sb.toString();\n+        return String.format(\"(Token stream: state=%s attr=%s nextAttr=%s\"\n+                +\" name=%s text=%s repeat?=%s wrapper=[%s] repeatElement=%s nextName=%s)\",\n+                _currentState, _attributeCount, _nextAttributeIndex,\n+                _localName, _textValue, _repeatElement, _currentWrapper, _repeatElement, _nextLocalName);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                     _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart());\n                 }\n             } catch (XMLStreamException e) {\n-                StaxUtil.throwXmlAsIOException(e);\n+                StaxUtil.throwAsGenerationException(e);\n             }\n         }\n         this.setNextName(wrappedName);\n                     _xmlWriter.writeEndElement();\n                 }\n             } catch (XMLStreamException e) {\n-                StaxUtil.throwXmlAsIOException(e);\n+                StaxUtil.throwAsGenerationException(e);\n             }\n         }\n     }\n         try {\n             _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n     \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n     \n                 _xmlWriter.writeEndElement();\n             } \n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }    \n     \n                 _xmlWriter.writeEndElement();\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                 _xmlWriter.writeEndElement();\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                 _xmlWriter.writeEndElement();\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                 _xmlWriter.writeEndElement();\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n         try {\n             _xmlWriter.writeRaw(text);\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n         try {\n             _xmlWriter.writeRaw(text, offset, len);\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n         try {\n             _xmlWriter.writeRaw(text, offset, len);\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n                 }\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n     /* Implementations, overrides for other methods\n     /**********************************************************\n      */\n-    \n+\n     @Override\n     protected final void _verifyValueWrite(String typeMsg) throws IOException\n     {\n             try {\n                 _xmlWriter.flush();\n             } catch (XMLStreamException e) {\n-                StaxUtil.throwXmlAsIOException(e);\n+                StaxUtil.throwAsGenerationException(e);\n             }\n         }\n     }\n                 _xmlWriter.close();\n             }\n         } catch (XMLStreamException e) {\n-            StaxUtil.throwXmlAsIOException(e);\n+            StaxUtil.throwAsGenerationException(e);\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n             try {\n                 xgen.getStaxWriter().setDefaultNamespace(ns);\n             } catch (XMLStreamException e) {\n-                StaxUtil.throwXmlAsIOException(e);\n+                StaxUtil.throwAsGenerationException(e);\n             }\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/StaxUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/StaxUtil.java\n      *<p>\n      * Note: dummy type variable is used for convenience, to allow caller to claim\n      * that this method returns result of any necessary type.\n+     *\n+     * @deprecated Since 2.9\n      */\n+    @Deprecated\n     public static <T> T throwXmlAsIOException(XMLStreamException e) throws IOException\n     {\n-        Throwable t = e;\n+        Throwable t = _unwrap(e);\n+        if (t instanceof Error) throw (Error) t;\n+        if (t instanceof RuntimeException) throw (RuntimeException) t;\n+        throw new IOException(t);\n+    }\n+\n+    /**\n+     * @since 2.9\n+     */\n+    public static <T> T throwAsParseException(XMLStreamException e) throws IOException\n+    {\n+        Throwable t = _unwrap(e);\n+        if (t instanceof Error) throw (Error) t;\n+        if (t instanceof RuntimeException) throw (RuntimeException) t;\n+        throw new IOException(t);\n+    }\n+\n+    /**\n+     * @since 2.9\n+     */\n+    public static <T> T throwAsGenerationException(XMLStreamException e) throws IOException\n+    {\n+        Throwable t = _unwrap(e);\n+        if (t instanceof Error) throw (Error) t;\n+        if (t instanceof RuntimeException) throw (RuntimeException) t;\n+        throw new IOException(t);\n+    }\n+\n+    private final static Throwable _unwrap(Throwable t) {\n         while (t.getCause() != null) {\n             t = t.getCause();\n         }\n-        if (t instanceof Error) throw (Error) t;\n-        if (t instanceof RuntimeException) throw (RuntimeException) t;\n-        throw new IOException(t);\n+        return t;\n     }\n \n     /**\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/DeserErrorHandling236Test.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.dataformat.xml.*;\n+\n+public class DeserErrorHandling236Test extends XmlTestBase\n+{\n+    static class Employee {\n+        public String name;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    protected XmlMapper MAPPER = new XmlMapper();\n+\n+    // [dataformat-xml#236]\n+    public void testExceptionWrapping() throws Exception\n+    {\n+        final String XML = \"<name>monica&</name>\";\n+        try {\n+            MAPPER.readValue(XML, Employee.class);\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"foobar\");\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(\"Wrong exception: \"+e);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TypeAttributeOrder242Test.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+public class TypeAttributeOrder242Test extends XmlTestBase\n+{\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"type\", defaultImpl = B.class)\n+    @JsonSubTypes({\n+            @JsonSubTypes.Type(value = B.class, name = \"B\")\n+    })\n+    static abstract class A {\n+        @JacksonXmlProperty(isAttribute = true)\n+        public Integer id;\n+    }\n+\n+    static class Attr {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Param> param;\n+    }\n+\n+    static class Param {\n+        public String name;\n+    }\n+\n+    static class B extends A {\n+        public Attr attr;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n+    public void testAttributeOrder() throws Exception\n+    {\n+        String content1 = \"<A type='B' id='1'><attr><param name='1'/><param name='2'/></attr></A>\";\n+        B b1 = (B) MAPPER.readValue(content1, A.class);\n+        assertEquals(2, b1.attr.param.size());\n+        String content2 = \"<A id='1' type='B'><attr><param name='1'/><param name='2'/></attr></A>\";\n+        B b2 = (B) MAPPER.readValue(content2, A.class);\n+        assertEquals(2, b2.attr.param.size());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/DTDSupportTest.java\n+package com.fasterxml.jackson.dataformat.xml.misc;\n+\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.dataformat.xml.*;\n+\n+// for [databind-xml#211]\n+public class DTDSupportTest extends XmlTestBase\n+{\n+    public void testDTDAttempt() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        String XML = \"<?xml version='1.0' encoding='UTF-8'?><!DOCTYPE foo SYSTEM 'http://127.0.0.1:8001' [ ]>\\n\"\n+                +\"<foo/>\";\n+\n+        try {\n+            /*Map<String, String> info =*/ mapper.readValue(XML, Map.class);\n+            //At this point a GET request would have been sent to localhost:8001. You will see a Connection Refused in case you don't have a server listening there.\n+        } catch (Exception e){\n+            fail(\"Should not try to resolve external DTD subset: \"+e);\n+        }\n+    }\n+}", "timestamp": 1500333855, "metainfo": ""}