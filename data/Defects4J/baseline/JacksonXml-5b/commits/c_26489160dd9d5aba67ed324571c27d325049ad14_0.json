{"sha": "26489160dd9d5aba67ed324571c27d325049ad14", "log": "Merge pull request #218 from oistein/issue162  Fix for #162 (XML Empty tag to Empty string)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n     \n     private final String _collectUntilTag() throws XMLStreamException\n     {\n-        String text = null;\n+        if (_xmlReader.isEmptyElement()) {\n+            _xmlReader.next();\n+            return null;\n+        }\n+\n+        StringBuilder text = new StringBuilder();\n+\n         while (true) {\n             switch (_xmlReader.next()) {\n             case XMLStreamConstants.START_ELEMENT:\n             case XMLStreamConstants.END_ELEMENT:\n             case XMLStreamConstants.END_DOCUMENT:\n-                return text;\n-                // note: SPACE is ignorable (and seldom seen), not to be included\n+                return text.toString();\n+            // note: SPACE is ignorable (and seldom seen), not to be included\n             case XMLStreamConstants.CHARACTERS:\n             case XMLStreamConstants.CDATA:\n-                if (text == null) {\n-                    text = _xmlReader.getText();\n-                } else { // can be optimized in future, if need be:\n-                    text += _xmlReader.getText();\n-                }\n+                text.append(_xmlReader.getText());\n                 break;\n             default:\n                 // any other type (proc instr, comment etc) is just ignored\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/deser/TestStringValues162.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class TestStringValues162 extends XmlTestBase\n+{\n+    static class Name {\n+        public String first;\n+        public String last;\n+\n+        public Name() { }\n+        public Name(String f, String l) {\n+            first = f;\n+            last = l;\n+        }\n+    }\n+\n+    static class Names {\n+        public List<Name> names = new ArrayList<Name>();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n+    public void testEmptyString162() throws Exception\n+    {\n+        Name name = MAPPER.readValue(\"<name><first>Ryan</first><last></last></name>\",\n+                Name.class);\n+        assertNotNull(name);\n+        assertEquals(\"Ryan\", name.first);\n+        assertEquals(\"\", name.last);\n+    }\n+\n+    public void testEmptyElement() throws Exception\n+    {\n+        Name name = MAPPER.readValue(\"<name><first/><last></last></name>\", Name.class);\n+        assertNotNull(name);\n+        assertNull(name.first);\n+        assertEquals(\"\", name.last);\n+    }\n+\n+    public void testEmptyStringElement() throws Exception\n+    {\n+        // then with empty element\n+        StringBean bean = MAPPER.readValue(\"<StringBean><text></text></StringBean>\", StringBean.class);\n+        assertNotNull(bean);\n+        // empty String or null?\n+        // As per [dataformat-xml#162], really should be \"\", not null:\n+        assertEquals(\"\", bean.text);\n+//        assertNull(bean.text);\n+    }\n+\n+    public void testStringsInList() throws Exception\n+    {\n+        Names input = new Names();\n+        input.names.add(new Name(\"Bob\", \"Lee\"));\n+        input.names.add(new Name(\"\", \"\"));\n+        input.names.add(new Name(\"Sponge\", \"Bob\"));\n+        String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(input);\n+        \n+//System.err.println(\"XML:\\n\"+xml);\n+\n+        Names result = MAPPER.readValue(xml, Names.class);\n+        assertNotNull(result);\n+        assertNotNull(result.names);\n+        assertEquals(3, result.names.size());\n+        assertEquals(\"Bob\", result.names.get(2).last);\n+\n+        // [dataformat-xml#162]: should get empty String, not null\n+        assertEquals(\"\", result.names.get(1).first);\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n         _serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);\n     }\n \n+    /**\n+     * @since 2.8.9\n+     */\n+    protected XmlMapper(XmlMapper src) {\n+        super(src);\n+        _xmlModule = src._xmlModule;\n+    }\n+\n     @Override\n     public XmlMapper copy()\n     {\n         _checkInvalidCopy(XmlMapper.class);\n-        return new XmlMapper((XmlFactory) _jsonFactory.copy(), _xmlModule);\n+        return new XmlMapper(this);\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlReadContext.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlReadContext.java\n \n     protected String _currentName;\n \n+    /**\n+     * @since 2.9\n+     */\n+    protected Object _currentValue;\n+\n     protected Set<String> _namesToWrap;\n \n     /**\n      * Name of property that requires wrapping\n      */\n     protected String _wrappedName;\n-    \n+\n     /*\n     /**********************************************************\n     /* Simple instance reuse slots; speeds up things\n         _lineNr = lineNr;\n         _columnNr = colNr;\n         _currentName = null;\n+        _currentValue = null;\n         _namesToWrap = null;\n     }\n-    \n-    // // // Factory methods\n+\n+    @Override\n+    public Object getCurrentValue() {\n+        return _currentValue;\n+    }\n+\n+    @Override\n+    public void setCurrentValue(Object v) {\n+        _currentValue = v;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Factory methods\n+    /**********************************************************\n+     */\n \n     public static XmlReadContext createRootContext(int lineNr, int colNr) {\n         return new XmlReadContext(null, TYPE_ROOT, lineNr, colNr);\n \n     @Override\n     public final String getCurrentName() { return _currentName; }\n+\n+    // @since 2.9\n+    @Override public boolean hasCurrentName() { return _currentName != null; }\n \n     @Override\n     public final XmlReadContext getParent() { return _parent; }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n     /* Output method implementations, unprocessed (\"raw\")\n     /**********************************************************\n      */\n+\n+    @Override\n+    public void writeRawValue(String text) throws IOException {\n+        // [dataformat-xml#39]\n+        if (_stax2Emulation) {\n+            _reportUnimplementedStax2(\"writeRawValue\");\n+        }\n+        try {\n+            _verifyValueWrite(\"write raw value\");\n+            if (_nextName == null) {\n+                handleMissingName();\n+            }\n+\n+            if (_nextIsAttribute) {\n+                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text);\n+            } else {\n+                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n+                _xmlWriter.writeRaw(text);\n+                _xmlWriter.writeEndElement();\n+            }\n+        } catch (XMLStreamException e) {\n+            StaxUtil.throwXmlAsIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRawValue(String text, int offset, int len) throws IOException {\n+        // [dataformat-xml#39]\n+        if (_stax2Emulation) {\n+            _reportUnimplementedStax2(\"writeRawValue\");\n+        }\n+        try {\n+            _verifyValueWrite(\"write raw value\");\n+            if (_nextName == null) {\n+                handleMissingName();\n+            }\n+\n+            if (_nextIsAttribute) {\n+                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len));\n+            } else {\n+                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n+                _xmlWriter.writeRaw(text, offset, len);\n+                _xmlWriter.writeEndElement();\n+            }\n+        } catch (XMLStreamException e) {\n+            StaxUtil.throwXmlAsIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+        // [dataformat-xml#39]\n+        if (_stax2Emulation) {\n+            _reportUnimplementedStax2(\"writeRawValue\");\n+        }\n+        _verifyValueWrite(\"write raw value\");\n+        if (_nextName == null) {\n+            handleMissingName();\n+        }\n+        try {\n+            if (_nextIsAttribute) {\n+                _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));\n+            } else {\n+                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n+                _xmlWriter.writeRaw(text, offset, len);\n+                _xmlWriter.writeEndElement();\n+            }\n+        } catch (XMLStreamException e) {\n+            StaxUtil.throwXmlAsIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRawValue(SerializableString text) throws IOException {\n+        _reportUnsupportedOperation();\n+    }\n \n     @Override\n     public void writeRaw(String text) throws IOException\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n         _rootNameLookup  = src._rootNameLookup;\n     }\n \n+    /**\n+     * @since 2.8.9\n+     */\n+    protected XmlSerializerProvider(XmlSerializerProvider src) {\n+        super(src);\n+        _rootNameLookup = src._rootNameLookup;\n+    }\n+\n     /*\n     /**********************************************************************\n     /* Overridden methods\n     /**********************************************************************\n      */\n+\n+    @Override\n+    public DefaultSerializerProvider copy() {\n+        return new XmlSerializerProvider(this);\n+    }\n \n     @Override\n     public DefaultSerializerProvider createInstance(SerializationConfig config,\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n      * is encountered. Used for suppressing indentation to allow empty\n      * elements.\n      * \n-     * @since 2.3.0\n+     * @since 2.3\n      */\n     protected transient boolean _justHadStartElement;\n     \n \n     public DefaultXmlPrettyPrinter() { }\n \n+    protected DefaultXmlPrettyPrinter(DefaultXmlPrettyPrinter base)\n+    {\n+        _arrayIndenter = base._arrayIndenter;\n+        _objectIndenter = base._objectIndenter;\n+        _spacesInObjectEntries = base._spacesInObjectEntries;\n+        _nesting = base._nesting;\n+    }\n+\n     public void indentArraysWith(Indenter i)\n     {\n         _arrayIndenter = (i == null) ? new NopIndenter() : i;\n     \n     @Override\n     public DefaultXmlPrettyPrinter createInstance() {\n-        return new DefaultXmlPrettyPrinter();\n+        return new DefaultXmlPrettyPrinter(this);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/TypeUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/TypeUtil.java\n package com.fasterxml.jackson.dataformat.xml.util;\n \n import java.util.Collection;\n-import java.util.Map;\n \n import com.fasterxml.jackson.databind.JavaType;\n \n             if (cls == byte[].class || cls == char[].class) {\n                 return false;\n             }\n-            // issue#5: also, should not add wrapping for Maps\n-            if (Map.class.isAssignableFrom(cls)) {\n+            // Also, should not add wrapping for Maps\n+            // [dataformat-xml#220]: nor map-like (Scala Map) types\n+            if (type.isMapLikeType()) {\n                 return false;\n             }\n             return true;\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/VersionInfoTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/VersionInfoTest.java\n \n import com.fasterxml.jackson.core.Version;\n import com.fasterxml.jackson.core.Versioned;\n-import com.fasterxml.jackson.dataformat.xml.PackageVersion;\n-import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n-import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n+import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;\n+import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;\n \n public class VersionInfoTest extends XmlTestBase\n {\n         XmlMapper mapper1 = new XmlMapper();\n         mapper1.setXMLTextElementName(\"foo\");\n         mapper1.configure(ToXmlGenerator.Feature.WRITE_XML_DECLARATION, true);\n-        \n+        mapper1.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n+\n         XmlMapper mapper2 = mapper1.copy();\n         assertNotSame(mapper1, mapper2);\n         XmlFactory xf1 = mapper1.getFactory();\n         assertEquals(xf1.getXMLTextElementName(), xf2.getXMLTextElementName());\n         assertEquals(xf1._xmlGeneratorFeatures, xf2._xmlGeneratorFeatures);\n         assertEquals(xf1._xmlParserFeatures, xf2._xmlParserFeatures);\n+\n+        // and [Issue#233]\n+        SerializationConfig sc1 = mapper1.getSerializationConfig();\n+        SerializationConfig sc2 = mapper2.getSerializationConfig();\n+        assertNotSame(sc1, sc2);\n+        assertEquals(\n+            \"serialization features did not get copied\",\n+            sc1.getSerializationFeatures(),\n+            sc2.getSerializationFeatures()\n+        );\n+    }\n+\n+    public void testSerializerProviderCopy() {\n+        DefaultSerializerProvider provider = new XmlSerializerProvider(new XmlRootNameLookup());\n+        DefaultSerializerProvider copy = provider.copy();\n+        assertNotSame(provider, copy);\n     }\n \n     // Another test for [Issue#48]\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/MixedContentTreeRead226Test.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class MixedContentTreeRead226Test extends XmlTestBase\n+{\n+    public void testMixed226() throws Exception\n+    {\n+        final String XML = \"<root>\\n<a>lorem <b>ipsum</b> dolor</a>\\n</root>\";\n+        XmlMapper mapper = new XmlMapper();\n+        JsonNode root = mapper.readTree(XML);\n+        assertNotNull(root);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestTypeAttributeOrder.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Issue #242\n+ */\n+public class TestTypeAttributeOrder {\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"type\", defaultImpl = B.class)\n+    @JsonSubTypes({\n+            @JsonSubTypes.Type(value = B.class, name = \"B\")\n+    })\n+    static abstract class A {\n+        @JacksonXmlProperty(isAttribute = true)\n+        public Integer id;\n+    }\n+\n+    static class Attr {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Param> param;\n+    }\n+\n+    static class Param {\n+        public String name;\n+    }\n+\n+    static class B extends A {\n+        public Attr attr;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+    */\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n+    @Test\n+    public void testAttributeOrder() throws Exception {\n+        String content1 = \"<A type=\\\"B\\\" id=\\\"1\\\"><attr><param name=\\\"1\\\"/><param name=\\\"2\\\"/></attr></A>\";\n+        B b1 = (B) MAPPER.readValue(content1, A.class);\n+        assertEquals(2, b1.attr.param.size());\n+        String content2 = \"<A id=\\\"1\\\" type=\\\"B\\\"><attr><param name=\\\"1\\\"/><param name=\\\"2\\\"/></attr></A>\";\n+        B b2 = (B) MAPPER.readValue(content2, A.class);\n+        assertEquals(2, b2.attr.param.size());\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestUnwrappedDeserIssue86.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestUnwrappedDeserIssue86.java\n package com.fasterxml.jackson.dataformat.xml.failing;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n import com.fasterxml.jackson.annotation.JsonInclude.Include;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlGeneratorTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlGeneratorTest.java\n \n         assertEquals(\"<IntWrapper><i>42</i></IntWrapper>\", xml);\n         f.delete();\n-    }    \n+    }\n+\n+    public void testRawSimpleValue() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        gen.writeFieldName(\"elem\");\n+        gen.writeRawValue(\"value\");\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root><elem>value</elem></root>\", xml);\n+    }\n+\n+    public void testRawOffsetValue() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        gen.writeFieldName(\"elem\");\n+        gen.writeRawValue(\"NotAValue_value_NotAValue\", 10, 5);\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root><elem>value</elem></root>\", xml);\n+    }\n+\n+    public void testRawCharArrayValue() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        gen.writeFieldName(\"elem\");\n+        gen.writeRawValue(new char[] {'!', 'v', 'a', 'l', 'u', 'e', '!'}, 1, 5);\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root><elem>value</elem></root>\", xml);\n+    }\n+\n+    public void testRawSimpleAttribute() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        // and also need to force attribute\n+        gen.setNextIsAttribute(true);\n+        gen.writeFieldName(\"attr\");\n+        gen.writeRawValue(\"value\");\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root attr=\\\"value\\\"/>\", xml);\n+    }\n+\n+    public void testRawOffsetAttribute() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        // and also need to force attribute\n+        gen.setNextIsAttribute(true);\n+        gen.writeFieldName(\"attr\");\n+        gen.writeRawValue(\"NotAValue_value_NotAValue\", 10, 5);\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root attr=\\\"value\\\"/>\", xml);\n+    }\n+\n+    public void testRawCharArratAttribute() throws Exception\n+    {\n+        XmlFactory f = new XmlFactory();\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = f.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        // and also need to force attribute\n+        gen.setNextIsAttribute(true);\n+        gen.writeFieldName(\"attr\");\n+        gen.writeRawValue(new char[]{'!', 'v', 'a', 'l', 'u', 'e', '!'}, 1, 5);\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root attr=\\\"value\\\"/>\", xml);\n+    }\n }", "timestamp": 1498068012, "metainfo": ""}