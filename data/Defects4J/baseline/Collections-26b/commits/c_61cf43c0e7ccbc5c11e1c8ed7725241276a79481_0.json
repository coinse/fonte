{"sha": "61cf43c0e7ccbc5c11e1c8ed7725241276a79481", "log": "add primitive collections, and tests   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractIntArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:27 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * @author Rodney Waldhoff \n+ */\n+public abstract class AbstractIntArrayList extends AbstractList implements List, Serializable {\n+\n+    //------------------------------------------------------ Abstract Accessors\n+    \n+    abstract public int capacity();\n+    abstract public int size();\n+    abstract public int getInt(int index);\n+    abstract public boolean containsInt(int value);\n+    abstract public int indexOfInt(int value);\n+    abstract public int lastIndexOfInt(int value);\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    /** Returns <code>new Integer({@link #getInt getInteger(index)})</code>. */\n+    public Object get(int index) {\n+        return new Integer(getInt(index));\n+    }\n+\n+    /** Returns <code>{@link #containsInt containsInt(((Integer)value).intValue())}</code>. */\n+    public boolean contains(Object value) {\n+        return containsInt(((Integer)value).intValue());\n+    }\n+\n+    /** Returns <code>({@link #size} == 0)</code>. */\n+    public boolean isEmpty() {\n+        return (0 == size());\n+    }\n+\n+    /** Returns <code>{@link #indexOfInt indexOfInt(((Integer)value).intValue())}</code>. */\n+    public int indexOf(Object value) {\n+        return indexOfInt(((Integer)value).intValue());\n+    }\n+\n+    /** Returns <code>{@link #lastIndexOfInt lastIndexOfInt(((Integer)value).intValue())}</code>. */\n+    public int lastIndexOf(Object value) {\n+        return lastIndexOfInt(((Integer)value).intValue());\n+    }\n+\n+    //------------------------------------------------------ Abstract Modifiers\n+\n+    abstract public int setInt(int index, int value);\n+    abstract public boolean addInt(int value);\n+    abstract public void addInt(int index, int value);\n+    abstract public int removeIntAt(int index);\n+    abstract public boolean removeInt(int value);\n+    abstract public void clear();\n+    abstract public void ensureCapacity(int mincap);\n+    abstract public void trimToSize();\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    /** Returns <code>new Integer({@link #setInt(int,int) setInt(index,((Integer)value).intValue())})</code>. */\n+    public Object set(int index, Object value) {\n+        return new Integer(setInt(index,((Integer)value).intValue()));\n+    }\n+\n+    /** Invokes <code>{@link #addInt(int) addInt(((Integer)value).intValue())})</code>. */\n+    public boolean add(Object value) {\n+        return addInt(((Integer)value).intValue());\n+    }    \n+\n+    /** Invokes <code>{@link #addInt(int,int) addInt(index,((Integer)value).intValue())})</code>. */\n+    public void add(int index, Object value) {\n+        addInt(index,((Integer)value).intValue());\n+    }\n+\n+    /** Returns <code>new Integer({@link #removeIntAt(int) removeIntAt(index)})</code>. */\n+    public Object remove(int index) {\n+        return new Integer(removeIntAt(index));\n+    }\n+\n+    /** Returns <code>{@link #removeInt(int) removeInt(((Integer)value).intValue())}</code>. */\n+    public boolean remove(Object value) {\n+        return removeInt(((Integer)value).intValue());\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractLongArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:27 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * @author Rodney Waldhoff \n+ */\n+public abstract class AbstractLongArrayList extends AbstractList implements List, Serializable {\n+\n+    //------------------------------------------------------ Abstract Accessors\n+    \n+    abstract public int capacity();\n+    abstract public int size();\n+    abstract public long getLong(int index);\n+    abstract public boolean containsLong(long value);\n+    abstract public int indexOfLong(long value);\n+    abstract public int lastIndexOfLong(long value);\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    /** Returns <code>new Long({@link #getLong getLong(index)})</code>. */\n+    public Object get(int index) {\n+        return new Long(getLong(index));\n+    }\n+\n+    /** Returns <code>{@link #containsLong containsLong(((Long)value).longValue())}</code>. */\n+    public boolean contains(Object value) {\n+        return containsLong(((Long)value).longValue());\n+    }\n+\n+    /** Returns <code>({@link #size} == 0)</code>. */\n+    public boolean isEmpty() {\n+        return (0 == size());\n+    }\n+\n+    /** Returns <code>{@link #indexOfLong indexOfLong(((Long)value).longValue())}</code>. */\n+    public int indexOf(Object value) {\n+        return indexOfLong(((Long)value).longValue());\n+    }\n+\n+    /** Returns <code>{@link #lastIndexOfLong lastIndexOfLong(((Long)value).longValue())}</code>. */\n+    public int lastIndexOf(Object value) {\n+        return lastIndexOfLong(((Long)value).longValue());\n+    }\n+\n+    //------------------------------------------------------ Abstract Modifiers\n+\n+    abstract public long setLong(int index, long value);\n+    abstract public boolean addLong(long value);\n+    abstract public void addLong(int index, long value);\n+    abstract public long removeLongAt(int index);\n+    abstract public boolean removeLong(long value);\n+    abstract public void clear();\n+    abstract public void ensureCapacity(int mincap);\n+    abstract public void trimToSize();\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    /** Returns <code>new Long({@link #setLong(int,long) setLong(index,((Long)value).longValue())})</code>. */\n+    public Object set(int index, Object value) {\n+        return new Long(setLong(index,((Long)value).longValue()));\n+    }\n+\n+    /** Invokes <code>{@link #addLong(long) addLong(((Long)value).longValue())})</code>. */\n+    public boolean add(Object value) {\n+        return addLong(((Long)value).longValue());\n+    }    \n+\n+    /** Invokes <code>{@link #addLong(int,long) addLong(index,((Long)value).longValue())})</code>. */\n+    public void add(int index, Object value) {\n+        addLong(index,((Long)value).longValue());\n+    }\n+\n+    /** Returns <code>new Long({@link #removeLongAt(int) removeLongAt(index)})</code>. */\n+    public Object remove(int index) {\n+        return new Long(removeLongAt(index));\n+    }\n+\n+    /** Returns <code>{@link #removeLong(long) removeLong(((Long)value).longValue())}</code>. */\n+    public boolean remove(Object value) {\n+        return removeLong(((Long)value).longValue());\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractShortArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:27 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * @author Rodney Waldhoff \n+ */\n+public abstract class AbstractShortArrayList extends AbstractList implements List, Serializable {\n+\n+    //------------------------------------------------------ Abstract Accessors\n+    \n+    abstract public int capacity();\n+    abstract public int size();\n+    abstract public short getShort(int index);\n+    abstract public boolean containsShort(short value);\n+    abstract public int indexOfShort(short value);\n+    abstract public int lastIndexOfShort(short value);\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    /** Returns <code>new Short({@link #getShort getShort(index)})</code>. */\n+    public Object get(int index) {\n+        return new Short(getShort(index));\n+    }\n+\n+    /** Returns <code>{@link #containsShort containsShort(((Short)value).shortValue())}</code>. */\n+    public boolean contains(Object value) {\n+        return containsShort(((Short)value).shortValue());\n+    }\n+\n+    /** Returns <code>({@link #size} == 0)</code>. */\n+    public boolean isEmpty() {\n+        return (0 == size());\n+    }\n+\n+    /** Returns <code>{@link #indexOfShort indexOfShort(((Short)value).shortValue())}</code>. */\n+    public int indexOf(Object value) {\n+        return indexOfShort(((Short)value).shortValue());\n+    }\n+\n+    /** Returns <code>{@link #lastIndexOfShort lastIndexOfShort(((Short)value).shortValue())}</code>. */\n+    public int lastIndexOf(Object value) {\n+        return lastIndexOfShort(((Short)value).shortValue());\n+    }\n+\n+    //------------------------------------------------------ Abstract Modifiers\n+\n+    abstract public short setShort(int index, short value);\n+    abstract public boolean addShort(short value);\n+    abstract public void addShort(int index, short value);\n+    abstract public short removeShortAt(int index);\n+    abstract public boolean removeShort(short value);\n+    abstract public void clear();\n+    abstract public void ensureCapacity(int mincap);\n+    abstract public void trimToSize();\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    /** Returns <code>new Short({@link #setShort(int,short) setShort(index,((Short)value).shortValue())})</code>. */\n+    public Object set(int index, Object value) {\n+        return new Short(setShort(index,((Short)value).shortValue()));\n+    }\n+\n+    /** Invokes <code>{@link #addShort(short) addShort(((Short)value).shortValue())})</code>. */\n+    public boolean add(Object value) {\n+        return addShort(((Short)value).shortValue());\n+    }    \n+\n+    /** Invokes <code>{@link #addShort(int,short) addShort(index,((Short)value).shortValue())})</code>. */\n+    public void add(int index, Object value) {\n+        addShort(index,((Short)value).shortValue());\n+    }\n+\n+    /** Returns <code>new Short({@link #removeShortAt(int) removeShortAt(index)})</code>. */\n+    public Object remove(int index) {\n+        return new Short(removeShortAt(index));\n+    }\n+\n+    /** Returns <code>{@link #removeShort(short) removeShort(((Short)value).shortValue())}</code>. */\n+    public boolean remove(Object value) {\n+        return removeShort(((Short)value).shortValue());\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/IntArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:27 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * @author Rodney Waldhoff \n+ */\n+public class IntArrayList extends AbstractIntArrayList implements List, Serializable {\n+\n+    //------------------------------------------------------------ Constructors\n+    \n+    public IntArrayList() {\n+        this(8);\n+    }\n+\n+    public IntArrayList(int capacity) {\n+        _data = new int[capacity];\n+    }\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    public int capacity() {\n+        return _data.length;\n+    }\n+\n+    public int size() {\n+        return _size;\n+    }\n+\n+    public int getInt(int index) {\n+        checkRange(index);\n+        return _data[index];\n+    }\n+\n+    public boolean containsInt(int value) {\n+        return (-1 != indexOfInt(value));\n+    }\n+\n+    public int indexOfInt(int value) {\n+        for(int i=0;i<_size;i++) {\n+            if(value == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOfInt(int value) {\n+        for(int i=_size-1;i>=0;i--) {\n+            if(value == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    public int setInt(int index, int value) {\n+        checkRange(index);\n+        int old = _data[index];\n+        _data[index] = value;\n+        return old;\n+    }\n+\n+    public boolean addInt(int value) {\n+        ensureCapacity(_size+1);\n+        _data[_size++] = value;\n+        return true;\n+    }\n+\n+    public void addInt(int index, int value) {\n+        checkRangeIncludingEndpoint(index);\n+        ensureCapacity(_size+1);\n+        int numtomove = _size-index;\n+        System.arraycopy(_data,index,_data,index+1,numtomove);\n+        _data[index] = value;\n+        _size++;\n+    }\n+\n+    public void clear() {\n+        modCount++;\n+        _size = 0;\n+    }\n+\n+    public int removeIntAt(int index) {\n+        checkRange(index);\n+        modCount++;\n+        int oldval = _data[index];\n+        int numtomove = _size - index - 1;\n+        if(numtomove > 0) {\n+            System.arraycopy(_data,index+1,_data,index,numtomove);\n+        }\n+        _size--;\n+        return oldval;\n+    }\n+\n+    public boolean removeInt(int value) {\n+        int index = indexOfInt(value);\n+        if(-1 == index) {\n+            return false;\n+        } else {\n+            removeIntAt(index);\n+            return true;\n+        }\n+    }\n+\n+    public void ensureCapacity(int mincap) {\n+        modCount++;\n+        if(mincap > _data.length) {\n+            int newcap = (_data.length * 3)/2 + 1;\n+            int[] olddata = _data;\n+            _data = new int[newcap < mincap ? mincap : newcap];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    public void trimToSize() {\n+        modCount++;\n+        if(_size < _data.length) {\n+            int[] olddata = _data;\n+            _data = new int[_size];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    //---------------------------------------------------------------\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException{\n+        out.defaultWriteObject();\n+        out.writeInt(_data.length);\n+        for(int i=0;i<_size;i++) {\n+            out.writeInt(_data[i]);\n+        }\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        _data = new int[in.readInt()];\n+        for(int i=0;i<_size;i++) {\n+            _data[i] = in.readInt();\n+        }\n+    }\n+    \n+    private final void checkRange(int index) {\n+        if(index < 0 || index >= _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and less than \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private final void checkRangeIncludingEndpoint(int index) {\n+        if(index < 0 || index > _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and at most \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private transient int[] _data = null;\n+    private int _size = 0;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/LongArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/LongArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:27 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * @author Rodney Waldhoff \n+ */\n+public class LongArrayList extends AbstractLongArrayList implements List, Serializable {\n+\n+    //------------------------------------------------------------ Constructors\n+    \n+    public LongArrayList() {\n+        this(8);\n+    }\n+\n+    public LongArrayList(int capacity) {\n+        _data = new long[capacity];\n+    }\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    public int capacity() {\n+        return _data.length;\n+    }\n+\n+    public int size() {\n+        return _size;\n+    }\n+\n+    public long getLong(int index) {\n+        checkRange(index);\n+        return _data[index];\n+    }\n+\n+    public boolean containsLong(long value) {\n+        return (-1 != indexOfLong(value));\n+    }\n+\n+    public int indexOfLong(long value) {\n+        for(int i=0;i<_size;i++) {\n+            if(value == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOfLong(long value) {\n+        for(int i=_size-1;i>=0;i--) {\n+            if(value == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    public long setLong(int index, long value) {\n+        checkRange(index);\n+        long old = _data[index];\n+        _data[index] = value;\n+        return old;\n+    }\n+\n+    public boolean addLong(long value) {\n+        ensureCapacity(_size+1);\n+        _data[_size++] = value;\n+        return true;\n+    }\n+\n+    public void addLong(int index, long value) {\n+        checkRangeIncludingEndpoint(index);\n+        ensureCapacity(_size+1);\n+        int numtomove = _size-index;\n+        System.arraycopy(_data,index,_data,index+1,numtomove);\n+        _data[index] = value;\n+        _size++;\n+    }\n+\n+    public void add(int index, Object value) {\n+        addLong(index,((Long)value).longValue());\n+    }\n+\n+    public void clear() {\n+        modCount++;\n+        _size = 0;\n+    }\n+\n+    public long removeLongAt(int index) {\n+        checkRange(index);\n+        modCount++;\n+        long oldval = _data[index];\n+        int numtomove = _size - index - 1;\n+        if(numtomove > 0) {\n+            System.arraycopy(_data,index+1,_data,index,numtomove);\n+        }\n+        _size--;\n+        return oldval;\n+    }\n+\n+    public boolean removeLong(long value) {\n+        int index = indexOfLong(value);\n+        if(-1 == index) {\n+            return false;\n+        } else {\n+            removeLongAt(index);\n+            return true;\n+        }\n+    }\n+\n+    public void ensureCapacity(int mincap) {\n+        modCount++;\n+        if(mincap > _data.length) {\n+            int newcap = (_data.length * 3)/2 + 1;\n+            long[] olddata = _data;\n+            _data = new long[newcap < mincap ? mincap : newcap];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    public void trimToSize() {\n+        modCount++;\n+        if(_size < _data.length) {\n+            long[] olddata = _data;\n+            _data = new long[_size];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    //---------------------------------------------------------------\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException{\n+        out.defaultWriteObject();\n+        out.writeInt(_data.length);\n+        for(int i=0;i<_size;i++) {\n+            out.writeLong(_data[i]);\n+        }\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        _data = new long[in.readInt()];\n+        for(int i=0;i<_size;i++) {\n+            _data[i] = in.readLong();\n+        }\n+    }\n+    \n+    private final void checkRange(int index) {\n+        if(index < 0 || index >= _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and less than \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private final void checkRangeIncludingEndpoint(int index) {\n+        if(index < 0 || index > _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and at most \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private transient long[] _data = null;\n+    private int _size = 0;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/ShortArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ShortArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:27 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * @author Rodney Waldhoff \n+ */\n+public class ShortArrayList extends AbstractShortArrayList implements List, Serializable {\n+\n+    //------------------------------------------------------------ Constructors\n+    \n+    public ShortArrayList() {\n+        this(8);\n+    }\n+\n+    public ShortArrayList(int capacity) {\n+        _data = new short[capacity];\n+    }\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    public int capacity() {\n+        return _data.length;\n+    }\n+\n+    public int size() {\n+        return _size;\n+    }\n+\n+    public short getShort(int index) {\n+        checkRange(index);\n+        return _data[index];\n+    }\n+\n+    public boolean containsShort(short value) {\n+        return (-1 != indexOfShort(value));\n+    }\n+\n+    public int indexOfShort(short value) {\n+        for(int i=0;i<_size;i++) {\n+            if(value == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOfShort(short value) {\n+        for(int i=_size-1;i>=0;i--) {\n+            if(value == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    public short setShort(int index, short value) {\n+        checkRange(index);\n+        short old = _data[index];\n+        _data[index] = value;\n+        return old;\n+    }\n+\n+    public boolean addShort(short value) {\n+        ensureCapacity(_size+1);\n+        _data[_size++] = value;\n+        return true;\n+    }\n+\n+    public void addShort(int index, short value) {\n+        checkRangeIncludingEndpoint(index);\n+        ensureCapacity(_size+1);\n+        int numtomove = _size-index;\n+        System.arraycopy(_data,index,_data,index+1,numtomove);\n+        _data[index] = value;\n+        _size++;\n+    }\n+\n+    public void clear() {\n+        modCount++;\n+        _size = 0;\n+    }\n+\n+    public short removeShortAt(int index) {\n+        checkRange(index);\n+        modCount++;\n+        short oldval = _data[index];\n+        int numtomove = _size - index - 1;\n+        if(numtomove > 0) {\n+            System.arraycopy(_data,index+1,_data,index,numtomove);\n+        }\n+        _size--;\n+        return oldval;\n+    }\n+\n+    public boolean removeShort(short value) {\n+        int index = indexOfShort(value);\n+        if(-1 == index) {\n+            return false;\n+        } else {\n+            removeShortAt(index);\n+            return true;\n+        }\n+    }\n+\n+    public void ensureCapacity(int mincap) {\n+        modCount++;\n+        if(mincap > _data.length) {\n+            int newcap = (_data.length * 3)/2 + 1;\n+            short[] olddata = _data;\n+            _data = new short[newcap < mincap ? mincap : newcap];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    public void trimToSize() {\n+        modCount++;\n+        if(_size < _data.length) {\n+            short[] olddata = _data;\n+            _data = new short[_size];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    //---------------------------------------------------------------\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException{\n+        out.defaultWriteObject();\n+        out.writeInt(_data.length);\n+        for(int i=0;i<_size;i++) {\n+            out.writeShort(_data[i]);\n+        }\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        _data = new short[in.readInt()];\n+        for(int i=0;i<_size;i++) {\n+            _data[i] = in.readShort();\n+        }\n+    }\n+    \n+    private final void checkRange(int index) {\n+        if(index < 0 || index >= _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and less than \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private final void checkRangeIncludingEndpoint(int index) {\n+        if(index < 0 || index > _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and at most \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private transient short[] _data = null;\n+    private int _size = 0;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedByteArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedByteArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:27 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * @author Rodney Waldhoff \n+ */\n+public class UnsignedByteArrayList extends AbstractShortArrayList implements List, Serializable {\n+\n+    //------------------------------------------------------------ Constructors\n+    \n+    public UnsignedByteArrayList() {\n+        this(8);\n+    }\n+\n+    public UnsignedByteArrayList(int capacity) {\n+        _data = new byte[capacity];\n+    }\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    public int capacity() {\n+        return _data.length;\n+    }\n+\n+    public int size() {\n+        return _size;\n+    }\n+\n+    public short getShort(int index) {\n+        checkRange(index);\n+        return toShort(_data[index]);\n+    }\n+\n+    public boolean containsShort(short value) {\n+        assertValidUnsignedByte(value);\n+        return (-1 != indexOfShort(value));\n+    }\n+\n+    public int indexOfShort(short value) {\n+        assertValidUnsignedByte(value);\n+        int ivalue = fromShort(value);\n+        for(int i=0;i<_size;i++) {\n+            if(ivalue == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOfShort(short value) {\n+        assertValidUnsignedByte(value);\n+        int ivalue = fromShort(value);\n+        for(int i=_size-1;i>=0;i--) {\n+            if(ivalue == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    public short setShort(int index, short value) {\n+        assertValidUnsignedByte(value);\n+        checkRange(index);\n+        short old = toShort(_data[index]);\n+        _data[index] = fromShort(value);\n+        return old;\n+    }\n+\n+    public boolean addShort(short value) {\n+        assertValidUnsignedByte(value);\n+        ensureCapacity(_size+1);\n+        _data[_size++] = fromShort(value);\n+        return true;\n+    }\n+\n+    public void addShort(int index, short value) {\n+        assertValidUnsignedByte(value);\n+        checkRangeIncludingEndpoint(index);\n+        ensureCapacity(_size+1);\n+        int numtomove = _size-index;\n+\tSystem.arraycopy(_data,index,_data,index+1,numtomove);\n+\t_data[index] = fromShort(value);\n+\t_size++;\n+    }\n+\n+    public void clear() {\n+\tmodCount++;\n+        _size = 0;\n+    }\n+\n+    public short removeShortAt(int index) {\n+        checkRange(index);\n+\tmodCount++;\n+        short oldval = toShort(_data[index]);\n+\tint numtomove = _size - index - 1;\n+\tif(numtomove > 0) {\n+\t    System.arraycopy(_data,index+1,_data,index,numtomove);\n+        }\n+        _size--;\n+\treturn oldval;\n+    }\n+\n+    public boolean removeShort(short value) {\n+        assertValidUnsignedByte(value);\n+        int index = indexOfShort(value);\n+        if(-1 == index) {\n+            return false;\n+        } else {\n+            removeShortAt(index);\n+            return true;\n+        }\n+    }\n+\n+    public void ensureCapacity(int mincap) {\n+\tmodCount++;\n+\tif(mincap > _data.length) {\n+\t    int newcap = (_data.length * 3)/2 + 1;\n+\t    byte[] olddata = _data;\n+\t    _data = new byte[newcap < mincap ? mincap : newcap];\n+\t    System.arraycopy(olddata,0,_data,0,_size);\n+\t}\n+    }\n+\n+    public void trimToSize() {\n+\tmodCount++;\n+\tif(_size < _data.length) {\n+\t    byte[] olddata = _data;\n+\t    _data = new byte[_size];\n+\t    System.arraycopy(olddata,0,_data,0,_size);\n+\t}\n+    }\n+\n+    //---------------------------------------------------------------\n+\n+    private final short toShort(byte value) { \n+        return (short)(((short)value)&MAX_VALUE);\n+    }\n+\n+    private final byte fromShort(short value) {\n+        return (byte)(value&MAX_VALUE);\n+    }\n+\n+    private final void assertValidUnsignedByte(short value) throws IllegalArgumentException {\n+        if(value > MAX_VALUE) {\n+            throw new IllegalArgumentException(value + \" > \" + MAX_VALUE);\n+        }\n+        if(value < MIN_VALUE) {\n+            throw new IllegalArgumentException(value + \" < \" + MIN_VALUE);\n+        }\n+    }\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException{\n+\tout.defaultWriteObject();\n+        out.writeInt(_data.length);\n+\tfor(int i=0;i<_size;i++) {\n+            out.writeByte(_data[i]);\n+        }\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+\tin.defaultReadObject();\n+        _data = new byte[in.readInt()];\n+\tfor(int i=0;i<_size;i++) {\n+            _data[i] = in.readByte();\n+        }\n+    }\n+    \n+    private final void checkRange(int index) {\n+        if(index < 0 || index >= _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and less than \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private final void checkRangeIncludingEndpoint(int index) {\n+        if(index < 0 || index > _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and at most \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private transient byte[] _data = null;\n+    private int _size = 0;\n+    public static final short MAX_VALUE = 0xFF;\n+    public static final short MIN_VALUE = 0;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:27 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * @author Rodney Waldhoff \n+ */\n+public class UnsignedIntArrayList extends AbstractLongArrayList implements List, Serializable {\n+\n+    //------------------------------------------------------------ Constructors\n+    \n+    public UnsignedIntArrayList() {\n+        this(8);\n+    }\n+\n+    public UnsignedIntArrayList(int capacity) {\n+        _data = new int[capacity];\n+    }\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    public int capacity() {\n+        return _data.length;\n+    }\n+\n+    public int size() {\n+        return _size;\n+    }\n+\n+    public long getLong(int index) {\n+        checkRange(index);\n+        return toLong(_data[index]);\n+    }\n+\n+    public boolean containsLong(long value) {\n+        assertValidUnsignedInt(value);\n+        return (-1 != indexOfLong(value));\n+    }\n+\n+    public int indexOfLong(long value) {\n+        assertValidUnsignedInt(value);\n+        int ivalue = fromLong(value);\n+        for(int i=0;i<_size;i++) {\n+            if(ivalue == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOfLong(long value) {\n+        assertValidUnsignedInt(value);\n+        int ivalue = fromLong(value);\n+        for(int i=_size-1;i>=0;i--) {\n+            if(ivalue == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    public long setLong(int index, long value) {\n+        assertValidUnsignedInt(value);\n+        checkRange(index);\n+        long old = toLong(_data[index]);\n+        _data[index] = fromLong(value);\n+        return old;\n+    }\n+\n+    public boolean addLong(long value) {\n+        assertValidUnsignedInt(value);\n+        ensureCapacity(_size+1);\n+        _data[_size++] = fromLong(value);\n+        return true;\n+    }\n+\n+    public void addLong(int index, long value) {\n+        assertValidUnsignedInt(value);\n+        checkRangeIncludingEndpoint(index);\n+        ensureCapacity(_size+1);\n+        int numtomove = _size-index;\n+\tSystem.arraycopy(_data,index,_data,index+1,numtomove);\n+\t_data[index] = fromLong(value);\n+\t_size++;\n+    }\n+\n+    public void clear() {\n+\tmodCount++;\n+        _size = 0;\n+    }\n+\n+    public long removeLongAt(int index) {\n+        checkRange(index);\n+\tmodCount++;\n+        long oldval = toLong(_data[index]);\n+\tint numtomove = _size - index - 1;\n+\tif(numtomove > 0) {\n+\t    System.arraycopy(_data,index+1,_data,index,numtomove);\n+        }\n+        _size--;\n+\treturn oldval;\n+    }\n+\n+    public boolean removeLong(long value) {\n+        assertValidUnsignedInt(value);\n+        int index = indexOfLong(value);\n+        if(-1 == index) {\n+            return false;\n+        } else {\n+            removeLongAt(index);\n+            return true;\n+        }\n+    }\n+\n+    public void ensureCapacity(int mincap) {\n+\tmodCount++;\n+\tif(mincap > _data.length) {\n+\t    int newcap = (_data.length * 3)/2 + 1;\n+\t    int[] olddata = _data;\n+\t    _data = new int[newcap < mincap ? mincap : newcap];\n+\t    System.arraycopy(olddata,0,_data,0,_size);\n+\t}\n+    }\n+\n+    public void trimToSize() {\n+\tmodCount++;\n+\tif(_size < _data.length) {\n+\t    int[] olddata = _data;\n+\t    _data = new int[_size];\n+\t    System.arraycopy(olddata,0,_data,0,_size);\n+\t}\n+    }\n+\n+    //---------------------------------------------------------------\n+\n+    private final long toLong(int value) { \n+        return ((long)value)&MAX_VALUE;\n+    }\n+\n+    private final int fromLong(long value) {\n+        return (int)(value&MAX_VALUE);\n+    }\n+\n+    private final void assertValidUnsignedInt(long value) throws IllegalArgumentException {\n+        if(value > MAX_VALUE) {\n+            throw new IllegalArgumentException(value + \" > \" + MAX_VALUE);\n+        }\n+        if(value < MIN_VALUE) {\n+            throw new IllegalArgumentException(value + \" < \" + MIN_VALUE);\n+        }\n+    }\n+    private void writeObject(ObjectOutputStream out) throws IOException{\n+\tout.defaultWriteObject();\n+        out.writeInt(_data.length);\n+\tfor(int i=0;i<_size;i++) {\n+            out.writeInt(_data[i]);\n+        }\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+\tin.defaultReadObject();\n+        _data = new int[in.readInt()];\n+\tfor(int i=0;i<_size;i++) {\n+            _data[i] = in.readInt();\n+        }\n+    }\n+    \n+    private final void checkRange(int index) {\n+        if(index < 0 || index >= _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and less than \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private final void checkRangeIncludingEndpoint(int index) {\n+        if(index < 0 || index > _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and at most \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private transient int[] _data = null;\n+    private int _size = 0;\n+    public static final long MAX_VALUE = 0xFFFFFFFFL;\n+    public static final long MIN_VALUE = 0L;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedShortArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedShortArrayList.java,v 1.1 2002/06/04 16:01:27 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:27 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:27 $\n+ * @author Rodney Waldhoff \n+ */\n+public class UnsignedShortArrayList extends AbstractIntArrayList implements List, Serializable {\n+\n+    //------------------------------------------------------------ Constructors\n+    \n+    public UnsignedShortArrayList() {\n+        this(8);\n+    }\n+\n+    public UnsignedShortArrayList(int capacity) {\n+        _data = new short[capacity];\n+    }\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    public int capacity() {\n+        return _data.length;\n+    }\n+\n+    public int size() {\n+        return _size;\n+    }\n+\n+    public int getInt(int index) {\n+        checkRange(index);\n+        return toInt(_data[index]);\n+    }\n+\n+    public boolean containsInt(int value) {\n+        assertValidUnsignedShort(value);\n+        return (-1 != indexOfInt(value));\n+    }\n+\n+    public int indexOfInt(int value) {\n+        assertValidUnsignedShort(value);\n+        int ivalue = fromInt(value);\n+        for(int i=0;i<_size;i++) {\n+            if(ivalue == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOfInt(int value) {\n+        assertValidUnsignedShort(value);\n+        int ivalue = fromInt(value);\n+        for(int i=_size-1;i>=0;i--) {\n+            if(ivalue == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    public int setInt(int index, int value) {\n+        assertValidUnsignedShort(value);\n+        checkRange(index);\n+        int old = toInt(_data[index]);\n+        _data[index] = fromInt(value);\n+        return old;\n+    }\n+\n+    public boolean addInt(int value) {\n+        assertValidUnsignedShort(value);\n+        ensureCapacity(_size+1);\n+        _data[_size++] = fromInt(value);\n+        return true;\n+    }\n+\n+    public void addInt(int index, int value) {\n+        assertValidUnsignedShort(value);\n+        checkRangeIncludingEndpoint(index);\n+        ensureCapacity(_size+1);\n+        int numtomove = _size-index;\n+\tSystem.arraycopy(_data,index,_data,index+1,numtomove);\n+\t_data[index] = fromInt(value);\n+\t_size++;\n+    }\n+\n+    public void clear() {\n+\tmodCount++;\n+        _size = 0;\n+    }\n+\n+    public int removeIntAt(int index) {\n+        checkRange(index);\n+\tmodCount++;\n+        int oldval = toInt(_data[index]);\n+\tint numtomove = _size - index - 1;\n+\tif(numtomove > 0) {\n+\t    System.arraycopy(_data,index+1,_data,index,numtomove);\n+        }\n+        _size--;\n+\treturn oldval;\n+    }\n+\n+    public boolean removeInt(int value) {\n+        assertValidUnsignedShort(value);\n+        int index = indexOfInt(value);\n+        if(-1 == index) {\n+            return false;\n+        } else {\n+            removeIntAt(index);\n+            return true;\n+        }\n+    }\n+\n+    public void ensureCapacity(int mincap) {\n+\tmodCount++;\n+\tif(mincap > _data.length) {\n+\t    int newcap = (_data.length * 3)/2 + 1;\n+\t    short[] olddata = _data;\n+\t    _data = new short[newcap < mincap ? mincap : newcap];\n+\t    System.arraycopy(olddata,0,_data,0,_size);\n+\t}\n+    }\n+\n+    public void trimToSize() {\n+\tmodCount++;\n+\tif(_size < _data.length) {\n+\t    short[] olddata = _data;\n+\t    _data = new short[_size];\n+\t    System.arraycopy(olddata,0,_data,0,_size);\n+\t}\n+    }\n+\n+    //---------------------------------------------------------------\n+\n+    private final int toInt(short value) { \n+        return ((int)value)&MAX_VALUE;\n+    }\n+\n+    private final short fromInt(int value) {\n+        return (short)(value&MAX_VALUE);\n+    }\n+\n+    private final void assertValidUnsignedShort(int value) throws IllegalArgumentException {\n+        if(value > MAX_VALUE) {\n+            throw new IllegalArgumentException(value + \" > \" + MAX_VALUE);\n+        }\n+        if(value < MIN_VALUE) {\n+            throw new IllegalArgumentException(value + \" < \" + MIN_VALUE);\n+        }\n+    }\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException{\n+\tout.defaultWriteObject();\n+        out.writeInt(_data.length);\n+\tfor(int i=0;i<_size;i++) {\n+            out.writeShort(_data[i]);\n+        }\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+\tin.defaultReadObject();\n+        _data = new short[in.readInt()];\n+\tfor(int i=0;i<_size;i++) {\n+            _data[i] = in.readShort();\n+        }\n+    }\n+    \n+    private final void checkRange(int index) {\n+        if(index < 0 || index >= _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and less than \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private final void checkRangeIncludingEndpoint(int index) {\n+        if(index < 0 || index > _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and at most \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private transient short[] _data = null;\n+    private int _size = 0;\n+    public static final int MAX_VALUE = 0xFFFF;\n+    public static final int MIN_VALUE = 0;\n+}\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.25 2002/04/10 16:33:23 morgand Exp $\n- * $Revision: 1.25 $\n- * $Date: 2002/04/10 16:33:23 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.26 2002/06/04 16:01:27 rwaldhoff Exp $\n+ * $Revision: 1.26 $\n+ * $Date: 2002/06/04 16:01:27 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.25 2002/04/10 16:33:23 morgand Exp $\n+ * @version $Id: TestAll.java,v 1.26 2002/06/04 16:01:27 rwaldhoff Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestSingletonIterator.suite());\n         suite.addTest(TestTreeBag.suite());\n         suite.addTest(TestUniqueFilterIterator.suite());\n+        suite.addTest(org.apache.commons.collections.primitives.TestAll.suite());\n         return suite;\n     }\n         \n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestAbstractIntArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractIntArrayList.java,v 1.1 2002/06/04 16:01:28 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:28 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import org.apache.commons.collections.TestList;\n+import java.util.List;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public abstract class TestAbstractIntArrayList extends /* TestList */ TestCase {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public TestAbstractIntArrayList(String testName) {\n+        super(testName);\n+    }\n+\n+    //---------------------------------------------------------------- Abstract\n+\n+    abstract protected AbstractIntArrayList createList();\n+\n+    //------------------------------------------------------- TestList interface\n+\n+    public List makeEmptyList() {\n+        return createList();\n+    }\n+\n+    //------------------------------------------------------------------- Tests\n+\n+    public void testAddGet() {\n+        AbstractIntArrayList list = createList();\n+        for(int i=0;i<1000;i++) {\n+            list.addInt(i);\n+        }\n+        for(int i=0;i<1000;i++) {\n+            assertEquals(i,list.getInt(i));\n+        }\n+    }\n+\n+    public void testAddGetLargeValues() {\n+        AbstractIntArrayList list = createList();\n+        for(int i=0;i<1000;i++) {\n+            int value = ((int)(Short.MAX_VALUE));\n+            value += i;\n+            list.addInt(value);\n+        }\n+        for(int i=0;i<1000;i++) {\n+            int value = ((int)(Short.MAX_VALUE));\n+            value += i;\n+            assertEquals(value,list.getInt(i));\n+        }\n+    }\n+\n+   public void testAddAndShift() {\n+      AbstractIntArrayList list = createList();\n+      list.addInt(0, 1);\n+      assertEquals(\"Should have one entry\", 1, list.size());\n+      list.addInt(3);\n+      list.addInt(4);\n+      list.addInt(1, 2);\n+      for (int i = 0; i < 4; i++) {\n+         assertEquals(\"Should get entry back\", i + 1, list.getInt(i));\n+      }\n+      list.addInt(0, 0);\n+      for (int i = 0; i < 5; i++) {\n+         assertEquals(\"Should get entry back\", i, list.getInt(i));\n+      }\n+   }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestAbstractLongArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractLongArrayList.java,v 1.1 2002/06/04 16:01:28 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:28 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import org.apache.commons.collections.TestList;\n+import java.util.List;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public abstract class TestAbstractLongArrayList extends /* TestList */ TestCase {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public TestAbstractLongArrayList(String testName) {\n+        super(testName);\n+    }\n+\n+    //---------------------------------------------------------------- Abstract\n+\n+    abstract protected AbstractLongArrayList createList();\n+\n+    //------------------------------------------------------- TestList interface\n+\n+    public List makeEmptyList() {\n+        return createList();\n+    }\n+\n+    //------------------------------------------------------------------- Tests\n+\n+    public void testAddGet() {\n+        AbstractLongArrayList list = createList();\n+        for(long i=0L;i<1000L;i++) {\n+            list.addLong(i);\n+        }\n+        for(int i=0;i<1000;i++) {\n+            assertEquals((long)i,list.getLong(i));\n+        }\n+    }\n+\n+    public void testAddGetLargeValues() {\n+        AbstractLongArrayList list = createList();\n+        for(long i=0L;i<1000L;i++) {\n+            long value = ((long)(Integer.MAX_VALUE));\n+            value += i;\n+            list.addLong(value);\n+        }\n+        for(long i=0L;i<1000L;i++) {\n+            long value = ((long)(Integer.MAX_VALUE));\n+            value += i;\n+            assertEquals(value,list.getLong((int)i));\n+        }\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestAbstractShortArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractShortArrayList.java,v 1.1 2002/06/04 16:01:28 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:28 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import org.apache.commons.collections.TestList;\n+import java.util.List;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public abstract class TestAbstractShortArrayList extends /* TestList */ TestCase {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public TestAbstractShortArrayList(String testName) {\n+        super(testName);\n+    }\n+\n+    //---------------------------------------------------------------- Abstract\n+\n+    abstract protected AbstractShortArrayList createList();\n+\n+    //------------------------------------------------------- TestList interface\n+\n+    public List makeEmptyList() {\n+        return createList();\n+    }\n+\n+    //------------------------------------------------------------------- Tests\n+\n+    public void testAddGet() {\n+        AbstractShortArrayList list = createList();\n+        for(short i=0;i<100;i++) {\n+            list.addShort(i);\n+        }\n+        for(int i=0;i<100;i++) {\n+            assertEquals((short)i,list.getShort(i));\n+        }\n+    }\n+\n+    public void testAddGetLargeValues() {\n+        AbstractShortArrayList list = createList();\n+        for(short i=128;i<256;i++) {\n+            list.addShort(i);\n+        }\n+        for(int i=0;i<128;i++) {\n+            assertEquals((short)(i+128),list.getShort(i));\n+        }\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestAll.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.1 2002/06/04 16:01:28 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:28 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestAll extends TestCase {\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestAll.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.addTest(TestUnsignedByteArrayList.suite());\n+        suite.addTest(TestShortArrayList.suite());\n+        suite.addTest(TestUnsignedShortArrayList.suite());\n+        suite.addTest(TestIntArrayList.suite());\n+        suite.addTest(TestUnsignedIntArrayList.suite());\n+        suite.addTest(TestLongArrayList.suite());\n+        return suite;\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntArrayList.java,v 1.1 2002/06/04 16:01:28 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:28 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestIntArrayList extends TestAbstractIntArrayList {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public TestIntArrayList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(TestIntArrayList.class);\n+        return suite;\n+    }\n+\n+    //---------------------------------------------------------------- Abstract\n+\n+    protected AbstractIntArrayList createList() {\n+        return new IntArrayList();\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestLongArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongArrayList.java,v 1.1 2002/06/04 16:01:28 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:28 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestLongArrayList extends TestAbstractLongArrayList {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public TestLongArrayList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(TestLongArrayList.class);\n+        return suite;\n+    }\n+\n+    //---------------------------------------------------------- Abstract Impls\n+\n+    protected AbstractLongArrayList createList() {\n+        return new LongArrayList();\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestShortArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestShortArrayList.java,v 1.1 2002/06/04 16:01:28 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:28 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestShortArrayList extends TestAbstractShortArrayList {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public TestShortArrayList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(TestShortArrayList.class);\n+        return suite;\n+    }\n+\n+    //---------------------------------------------------------------- Abstract\n+\n+    protected AbstractShortArrayList createList() {\n+        return new ShortArrayList();\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestUnsignedByteArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedByteArrayList.java,v 1.1 2002/06/04 16:01:28 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:28 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestUnsignedByteArrayList extends TestAbstractShortArrayList {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public TestUnsignedByteArrayList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(TestUnsignedByteArrayList.class);\n+        return suite;\n+    }\n+\n+    //---------------------------------------------------------------- Abstract\n+\n+    protected AbstractShortArrayList createList() {\n+        return new UnsignedByteArrayList();\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestUnsignedIntArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedIntArrayList.java,v 1.1 2002/06/04 16:01:28 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:28 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestUnsignedIntArrayList extends TestAbstractLongArrayList {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public TestUnsignedIntArrayList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(TestUnsignedIntArrayList.class);\n+        return suite;\n+    }\n+\n+    //---------------------------------------------------------- Abstract Impls\n+\n+    protected AbstractLongArrayList createList() {\n+        return new UnsignedIntArrayList();\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestUnsignedShortArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedShortArrayList.java,v 1.1 2002/06/04 16:01:28 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:01:28 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestUnsignedShortArrayList extends TestAbstractIntArrayList {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public TestUnsignedShortArrayList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(TestUnsignedShortArrayList.class);\n+        return suite;\n+    }\n+\n+    //---------------------------------------------------------------- Abstract\n+\n+    protected AbstractIntArrayList createList() {\n+        return new UnsignedShortArrayList();\n+    }\n+\n+}\n+", "timestamp": 1023206488, "metainfo": ""}