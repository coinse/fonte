{"sha": "335f3c48020033d2e0407949690e9f409b660c1e", "log": "Cleanup of comparators package.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/comparators/BooleanComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/BooleanComparator.java\n  * @see #booleanComparator(boolean)\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Rodney Waldhoff\n+ * @version $Id$\n  */\n public final class BooleanComparator implements Comparator<Boolean>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/comparators/ComparableComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/ComparableComparator.java\n import java.util.Comparator;\n \n /**\n- * A {@link Comparator Comparator} that compares \n- * {@link Comparable Comparable} objects.\n- * <p />\n- * This Comparator is useful, for example,\n- * for enforcing the natural order in custom implementations\n- * of SortedSet and SortedMap.\n- * <p />\n- * Note: In the 2.0 and 2.1 releases of Commons Collections, \n- * this class would throw a {@link ClassCastException} if\n- * either of the arguments to {@link #compare(Object, Object) compare}\n- * were <code>null</code>, not {@link Comparable Comparable},\n- * or for which {@link Comparable#compareTo(Object) compareTo} gave\n- * inconsistent results.  This is no longer the case.  See\n- * {@link #compare(Object, Object) compare} for details.\n- *\n+ * A {@link Comparator Comparator} that compares {@link Comparable Comparable}\n+ * objects.\n+ * <p>\n+ * This Comparator is useful, for example, for enforcing the natural order in\n+ * custom implementations of {@link SortedSet} and {@link SortedMap}.\n+ * <p>\n+ * Note: In the 2.0 and 2.1 releases of Commons Collections, this class would\n+ * throw a {@link ClassCastException} if either of the arguments to\n+ * {@link #compare(Object, Object) compare} were <code>null</code>, not\n+ * {@link Comparable Comparable}, or for which\n+ * {@link Comparable#compareTo(Object) compareTo} gave inconsistent results.\n+ * This is no longer the case. See {@link #compare(Object, Object) compare} for\n+ * details.\n+ * \n  * @since Commons Collections 2.0\n- * @version $Revision$\n- *\n+ * @version $Id$\n+ * \n  * @see java.util.Collections#reverseOrder()\n  */\n public class ComparableComparator<E extends Comparable<? super E>> implements Comparator<E>, Serializable {\n      * instead of constructing a new instance to reduce allocation and GC overhead\n      * when multiple comparable comparators may be used in the same VM.\n      * \n+     * @param <E>  the element type\n      * @return the singleton ComparableComparator\n      */\n     @SuppressWarnings(\"unchecked\")\n      * @param obj1  the first object to compare\n      * @param obj2  the second object to compare\n      * @return negative if obj1 is less, positive if greater, zero if equal\n-     * @throws NullPointerException when <i>obj1</i> is <code>null</code>, \n+     * @throws NullPointerException if <i>obj1</i> is <code>null</code>, \n      *         or when <code>((Comparable)obj1).compareTo(obj2)</code> does\n-     * @throws ClassCastException when <i>obj1</i> is not a <code>Comparable</code>,\n+     * @throws ClassCastException if <i>obj1</i> is not a <code>Comparable</code>,\n      *         or when <code>((Comparable)obj1).compareTo(obj2)</code> does\n      */\n     public int compare(E obj1, E obj2) {\n     }\n \n     /**\n-     * Returns <code>true</code> iff <i>that</i> Object is \n-     * is a {@link Comparator Comparator} whose ordering is \n-     * known to be equivalent to mine.\n+     * Returns {@code true} iff <i>that</i> Object is is a {@link Comparator Comparator}\n+     * whose ordering is known to be equivalent to mine.\n      * <p>\n-     * This implementation returns <code>true</code>\n-     * iff <code><i>object</i>.{@link Object#getClass() getClass()}</code>\n-     * equals <code>this.getClass()</code>.\n-     * Subclasses may want to override this behavior to remain consistent\n-     * with the {@link Comparator#equals(Object)} contract.\n+     * This implementation returns {@code true} iff\n+     * <code><i>object</i>.{@link Object#getClass() getClass()}</code> equals\n+     * <code>this.getClass()</code>. Subclasses may want to override this behavior to remain\n+     * consistent with the {@link Comparator#equals(Object)} contract.\n      * \n      * @param object  the object to compare with\n-     * @return true if equal\n+     * @return {@code true} if equal\n      * @since Commons Collections 3.0\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections/comparators/ComparatorChain.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/ComparatorChain.java\n import java.util.List;\n \n /**\n- * <p>A ComparatorChain is a Comparator that wraps one or\n- * more Comparators in sequence.  The ComparatorChain\n- * calls each Comparator in sequence until either 1)\n- * any single Comparator returns a non-zero result\n- * (and that result is then returned),\n- * or 2) the ComparatorChain is exhausted (and zero is\n- * returned).  This type of sorting is very similar\n- * to multi-column sorting in SQL, and this class\n- * allows Java classes to emulate that kind of behaviour\n- * when sorting a List.</p>\n- *\n- * <p>To further facilitate SQL-like sorting, the order of\n- * any single Comparator in the list can be reversed.</p>\n- *\n- * <p>Calling a method that adds new Comparators or\n- * changes the ascend/descend sort <i>after compare(Object,\n- * Object) has been called</i> will result in an\n- * UnsupportedOperationException.  However, <i>take care</i>\n- * to not alter the underlying List of Comparators\n- * or the BitSet that defines the sort order.</p>\n- *\n- * <p>Instances of ComparatorChain are not synchronized.\n- * The class is not thread-safe at construction time, but\n- * it <i>is</i> thread-safe to perform multiple comparisons\n- * after all the setup operations are complete.</p>\n- *\n+ * A ComparatorChain is a Comparator that wraps one or more Comparators in\n+ * sequence. The ComparatorChain calls each Comparator in sequence until either\n+ * 1) any single Comparator returns a non-zero result (and that result is then\n+ * returned), or 2) the ComparatorChain is exhausted (and zero is returned).\n+ * This type of sorting is very similar to multi-column sorting in SQL, and this\n+ * class allows Java classes to emulate that kind of behaviour when sorting a\n+ * List.\n+ * <p>\n+ * To further facilitate SQL-like sorting, the order of any single Comparator in\n+ * the list can be reversed.\n+ * <p>\n+ * Calling a method that adds new Comparators or changes the ascend/descend sort\n+ * <i>after compare(Object, Object) has been called</i> will result in an\n+ * UnsupportedOperationException. However, <i>take care</i> to not alter the\n+ * underlying List of Comparators or the BitSet that defines the sort order.\n+ * <p>\n+ * Instances of ComparatorChain are not synchronized. The class is not\n+ * thread-safe at construction time, but it <i>is</i> thread-safe to perform\n+ * multiple comparisons after all the setup operations are complete.\n+ * \n  * @since Commons Collections 2.0\n- * @author Morgan Delagrange\n- * @version $Revision$\n+ * @version $Id$\n  */\n public class ComparatorChain<E> implements Comparator<E>, Serializable {\n \n         return isLocked;\n     }\n \n-    // throw an exception if the ComparatorChain is locked\n+    /**\n+     * Throws an exception if the {@link ComparatorChain} is locked.\n+     * \n+     * @throws UnsupportedOperationException if the {@link ComparatorChain} is locked\n+     */\n     private void checkLocked() {\n         if (isLocked == true) {\n-            throw new UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\");\n-        }\n-    }\n-\n+            throw new UnsupportedOperationException(\n+                    \"Comparator ordering cannot be changed after the first comparison is performed\");\n+        }\n+    }\n+\n+    /**\n+     * Throws an exception if the {@link ComparatorChain} is empty.\n+     * \n+     * @throws UnsupportedOperationException if the {@link ComparatorChain} is empty\n+     */\n     private void checkChainIntegrity() {\n         if (comparatorChain.size() == 0) {\n             throw new UnsupportedOperationException(\"ComparatorChains must contain at least one Comparator\");\n--- a/src/main/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n  * multiple comparisons  after all the setup operations are complete.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author David Leppik\n- * @author Stephen Colebourne\n- * @author Janek Bogucki\n+ * @version $Id$\n  */\n public class FixedOrderComparator<T> implements Comparator<T> {\n \n     /**\n      * Unknown object behavior enum.\n-     * @since Commons Collections 5\n+     * @since Commons Collections 4.0\n      */\n     public static enum UnknownObjectBehavior {\n         BEFORE, AFTER, EXCEPTION;\n--- a/src/main/java/org/apache/commons/collections/comparators/NullComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/NullComparator.java\n  * other objects.\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision$\n- *\n- * @author Michael A. Smith\n+ * @version $Id$\n  */\n public class NullComparator<E> implements Comparator<E>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/comparators/ReverseComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/ReverseComparator.java\n  * to its {@link #compare(Object, Object) compare} method.\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision$\n- *\n- * @author Michael A. Smith\n+ * @version $Id$\n  *\n  * @see java.util.Collections#reverseOrder()\n  */\n--- a/src/main/java/org/apache/commons/collections/comparators/TransformingComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/TransformingComparator.java\n  * return value from the transform operation will be passed to the decorated\n  * {@link Comparator#compare(Object,Object) compare} method.\n  *\n- * @since Commons Collections 2.0 (?)\n- * @version $Revision$\n+ * @since Commons Collections 2.1\n+ * @version $Id$\n  *\n  * @see org.apache.commons.collections.Transformer\n  * @see org.apache.commons.collections.comparators.ComparableComparator\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/comparators/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * This package contains implementations of the\n+ * {@link java.util.Comparator Comparator} interface.\n+ * <p>\n+ * You may also consider using \n+ * {@link org.apache.commons.collections.ComparatorUtils ComparatorUtils},\n+ * which is a single class that uses static methods to construct instances\n+ * of the classes in this package.\n+ * \n+ * @version $Id$\n+ */\n+package org.apache.commons.collections.comparators;", "timestamp": 1341350013, "metainfo": ""}