{"sha": "8157a72408922697fb720b5529961ca6fc08ebd3", "log": "Added an AbstractQueueTest as base class for all queue tests.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.queue;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Queue;\n+\n+import org.apache.commons.collections4.collection.AbstractCollectionTest;\n+\n+/**\n+ * Abstract test class for {@link java.util.Queue} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeObject} method.\n+ * <p>\n+ * If your {@link Queue} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link Queue} fails or override one of the\n+ * protected methods from AbstractCollectionTest.\n+ *\n+ * @since 4.0\n+ * @version $Id$\n+ */\n+public abstract class AbstractQueueTest<E> extends AbstractCollectionTest<E> {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param testName  the test class name\n+     */\n+    public AbstractQueueTest(final String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns true if the collections produced by\n+     *  {@link #makeObject()} and {@link #makeFullCollection()}\n+     *  support the <code>set operation.<p>\n+     *  Default implementation returns true.  Override if your collection\n+     *  class does not support set.\n+     */\n+    public boolean isSetSupported() {\n+        return true;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Verifies that the test queue implementation matches the confirmed queue\n+     *  implementation.\n+     */\n+    @Override\n+    public void verify() {\n+        super.verify();\n+        final Iterator<E> iterator1 = getCollection().iterator();\n+        final Iterator<E> iterator2 = getConfirmed().iterator();\n+        while (iterator2.hasNext()) {\n+            assertTrue(iterator1.hasNext());\n+            final Object o1 = iterator1.next();\n+            final Object o2 = iterator2.next();\n+            assertEquals(o1, o2);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns an empty {@link ArrayList}.\n+     */\n+    @Override\n+    public Collection<E> makeConfirmedCollection() {\n+        final ArrayList<E> list = new ArrayList<E>();\n+        return list;\n+    }\n+\n+    /**\n+     * Returns a full {@link ArrayList}.\n+     */\n+    @Override\n+    public Collection<E> makeConfirmedFullCollection() {\n+        final ArrayList<E> list = new ArrayList<E>();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+    /**\n+     * Returns {@link #makeObject()}.\n+     *\n+     * @return an empty queue to be used for testing\n+     */\n+    @Override\n+    public abstract Queue<E> makeObject();\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Queue<E> makeFullCollection() {\n+        // only works if queue supports optional \"addAll(Collection)\"\n+        final Queue<E> queue = makeObject();\n+        queue.addAll(Arrays.asList(getFullElements()));\n+        return queue;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the {@link #collection} field cast to a {@link Queue}.\n+     *\n+     * @return the collection field as a Queue\n+     */\n+    @Override\n+    public Queue<E> getCollection() {\n+        return (Queue<E>) super.getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testEmptyQueueSerialization() throws IOException, ClassNotFoundException {\n+        final Queue<E> queue = makeObject();\n+        if (!(queue instanceof Serializable && isTestSerialization())) {\n+            return;\n+        }\n+\n+        final byte[] objekt = writeExternalFormToBytes((Serializable) queue);\n+        final Queue<E> queue2 = (Queue<E>) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Both queues are empty\", 0, queue.size());\n+        assertEquals(\"Both queues are empty\", 0, queue2.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testFullQueueSerialization() throws IOException, ClassNotFoundException {\n+        final Queue<E> queue = makeFullCollection();\n+        final int size = getFullElements().length;\n+        if (!(queue instanceof Serializable && isTestSerialization())) {\n+            return;\n+        }\n+\n+        final byte[] objekt = writeExternalFormToBytes((Serializable) queue);\n+        final Queue<E> queue2 = (Queue<E>) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Both queues are same size\", size, queue.size());\n+        assertEquals(\"Both queues are same size\", size, queue2.size());\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the Queue\n+     * against the canonical version in SVN.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testEmptyQueueCompatibility() throws IOException, ClassNotFoundException {\n+        /**\n+         * Create canonical objects with this code\n+        Queue queue = makeEmptyQueue();\n+        if (!(queue instanceof Serializable)) return;\n+\n+        writeExternalFormToDisk((Serializable) queue, getCanonicalEmptyCollectionName(queue));\n+        */\n+\n+        // test to make sure the canonical form has been preserved\n+        final Queue<E> queue = makeObject();\n+        if (queue instanceof Serializable && !skipSerializedCanonicalTests()\n+                && isTestSerialization()) {\n+            final Queue<E> queue2 = (Queue<E>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(queue));\n+            assertEquals(\"Queue is empty\", 0, queue2.size());\n+        }\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the Queue\n+     * against the canonical version in SVN.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testFullQueueCompatibility() throws IOException, ClassNotFoundException {\n+        /**\n+         * Create canonical objects with this code\n+        Queue queue = makeFullQueue();\n+        if (!(queue instanceof Serializable)) return;\n+\n+        writeExternalFormToDisk((Serializable) queue, getCanonicalFullCollectionName(queue));\n+        */\n+\n+        // test to make sure the canonical form has been preserved\n+        final Queue<E> queue = makeFullCollection();\n+        if(queue instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n+            final Queue<E> queue2 = (Queue<E>) readExternalFormFromDisk(getCanonicalFullCollectionName(queue));\n+            assertEquals(\"Queues is the right size\",queue.size(), queue2.size());\n+        }\n+    }\n+\n+}\n--- a/src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java\n+++ b/src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java\n import java.util.NoSuchElementException;\n import java.util.Queue;\n \n-import junit.framework.Test;\n-\n-import org.apache.commons.collections4.BulkTest;\n-import org.apache.commons.collections4.collection.AbstractCollectionTest;\n-\n /**\n  * Test cases for CircularFifoQueue.\n  *\n  * @since 4.0\n  * @version $Id$\n  */\n-public class CircularFifoQueueTest<E> extends AbstractCollectionTest<E> {\n-\n-    public CircularFifoQueueTest(final String n) {\n-        super(n);\n-    }\n-\n-    public static Test suite() {\n-        return BulkTest.makeSuite(CircularFifoQueueTest.class);\n+public class CircularFifoQueueTest<E> extends AbstractQueueTest<E> {\n+\n+    public CircularFifoQueueTest(final String testName) {\n+        super(testName);\n     }\n \n     //-----------------------------------------------------------------------\n      * @return an empty CircularFifoQueue\n      */\n     @Override\n-    public Collection<E> makeObject() {\n+    public Queue<E> makeObject() {\n         return new CircularFifoQueue<E>(100);\n     }\n \n         final int size = getConfirmed().size();\n         for (int i = 0; i < size; i++) {\n             final Object o1 = getCollection().remove();\n-            final Object o2 = getConfirmed().remove(0);\n+            final Object o2 = ((List<?>) getConfirmed()).remove(0);\n             assertEquals(\"Removed objects should be equal\", o1, o2);\n             verify();\n         }\n         resetFull();\n         \n         final CircularFifoQueue<E> queue = getCollection();\n-        final List<E> confirmed = getConfirmed();\n+        final List<E> confirmed = (List<E>) getConfirmed();\n         for (int i = 0; i < confirmed.size(); i++) {\n             assertEquals(confirmed.get(i), queue.get(i));\n         }\n         return (CircularFifoQueue<E>) super.getCollection();\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public List<E> getConfirmed() {\n-        return (List<E>) super.getConfirmed();\n-    }\n }\n--- a/src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java\n+++ b/src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java\n \n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.collection.PredicatedCollectionTest;\n+import org.apache.commons.collections4.functors.TruePredicate;\n \n /**\n  * Extension of {@link PredicatedCollectionTest} for exercising the\n  * @since 4.0\n  * @version $Id$\n  */\n-public class PredicatedQueueTest<E> extends PredicatedCollectionTest<E> {\n+public class PredicatedQueueTest<E> extends AbstractQueueTest<E> {\n \n     public PredicatedQueueTest(final String testName) {\n         super(testName);\n     }\n \n     //---------------------------------------------------------------\n+\n+    protected Predicate<E> truePredicate = TruePredicate.<E>truePredicate();\n \n     protected Queue<E> decorateCollection(final Queue<E> queue, final Predicate<E> predicate) {\n         return PredicatedQueue.predicatedQueue(queue, predicate);\n     }\n     \n     @Override\n-    public Collection<E> makeFullCollection() {\n+    public Queue<E> makeFullCollection() {\n         final Queue<E> queue = new LinkedList<E>();\n         queue.addAll(Arrays.asList(getFullElements()));\n         return decorateCollection(queue, truePredicate);\n     }\n \n     //------------------------------------------------------------\n+\n+    protected Predicate<E> testPredicate =\n+            new Predicate<E>() {\n+                public boolean evaluate(final E o) {\n+                    return o instanceof String;\n+                }\n+            };\n \n     public Queue<E> makeTestQueue() {\n         return decorateCollection(new LinkedList<E>(), testPredicate);\n--- a/src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java\n+++ b/src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java\n  * @since 4.0\n  * @version $Id$\n  */\n-public class TransformedQueueTest<E> extends AbstractCollectionTest<E> {\n+public class TransformedQueueTest<E> extends AbstractQueueTest<E> {\n     \n     public TransformedQueueTest(final String testName) {\n         super(testName);\n--- a/src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java\n+++ b/src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java\n  * @since 4.0\n  * @version $Id$\n  */\n-public class UnmodifiableQueueTest<E> extends AbstractCollectionTest<E> {\n+public class UnmodifiableQueueTest<E> extends AbstractQueueTest<E> {\n \n     public UnmodifiableQueueTest(final String testName) {\n         super(testName);\n \n     //-----------------------------------------------------------------------\n     @Override\n-    public Collection<E> makeObject() {\n+    public Queue<E> makeObject() {\n         return UnmodifiableQueue.unmodifiableQueue(new LinkedList<E>());\n     }\n \n     @Override\n-    public Collection<E> makeFullCollection() {\n+    public Queue<E> makeFullCollection() {\n         final Queue<E> queue = new LinkedList<E>();\n         queue.addAll(Arrays.asList(getFullElements()));\n         return UnmodifiableQueue.unmodifiableQueue(queue);", "timestamp": 1366925838, "metainfo": ""}