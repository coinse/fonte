{"sha": "91d751cc0c32c9aef45f1b0ec1cf8dde9e2478b5", "log": "Replace calls to Utils classes with direct references to implementations   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ClosureUtils.java\n+++ b/src/java/org/apache/commons/collections/ClosureUtils.java\n import java.util.Map;\n \n import org.apache.commons.collections.functors.ChainedClosure;\n+import org.apache.commons.collections.functors.EqualPredicate;\n import org.apache.commons.collections.functors.ExceptionClosure;\n import org.apache.commons.collections.functors.ForClosure;\n import org.apache.commons.collections.functors.IfClosure;\n+import org.apache.commons.collections.functors.InvokerTransformer;\n import org.apache.commons.collections.functors.NOPClosure;\n import org.apache.commons.collections.functors.SwitchClosure;\n import org.apache.commons.collections.functors.TransformerClosure;\n  * All the supplied closures are Serializable.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2004/04/14 21:47:47 $\n+ * @version $Revision: 1.9 $ $Date: 2004/05/26 21:50:52 $\n  *\n  * @author Stephen Colebourne\n  */\n      */\n     public static Closure invokerClosure(String methodName) {\n         // reuse transformer as it has caching - this is lazy really, should have inner class here\n-        return asClosure(TransformerUtils.invokerTransformer(methodName, null, null));\n+        return asClosure(InvokerTransformer.getInstance(methodName));\n     }\n \n     /**\n      */\n     public static Closure invokerClosure(String methodName, Class[] paramTypes, Object[] args) {\n         // reuse transformer as it has caching - this is lazy really, should have inner class here\n-        return asClosure(TransformerUtils.invokerTransformer(methodName, paramTypes, args));\n+        return asClosure(InvokerTransformer.getInstance(methodName, paramTypes, args));\n     }\n \n     /**\n         int i = 0;\n         for (Iterator it = objectsAndClosures.entrySet().iterator(); it.hasNext();) {\n             Map.Entry entry = (Map.Entry) it.next();\n-            preds[i] = PredicateUtils.equalPredicate(entry.getKey());\n+            preds[i] = EqualPredicate.getInstance(entry.getKey());\n             trs[i] = (Closure) entry.getValue();\n             i++;\n         }\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n import org.apache.commons.collections.functors.FalsePredicate;\n import org.apache.commons.collections.functors.IdentityPredicate;\n import org.apache.commons.collections.functors.InstanceofPredicate;\n+import org.apache.commons.collections.functors.InvokerTransformer;\n import org.apache.commons.collections.functors.NonePredicate;\n import org.apache.commons.collections.functors.NotNullPredicate;\n import org.apache.commons.collections.functors.NotPredicate;\n  * <li>False - always return false\n  * <li>Exception - always throws an exception\n  * <li>NullIsException/NullIsFalse/NullIsTrue - check for null input\n+ * <li>Transformed - transforms the input before calling the predicate\n  * </ul>\n  * All the supplied predicates are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.18 $ $Date: 2004/04/14 21:47:47 $\n+ * @version $Revision: 1.19 $ $Date: 2004/05/26 21:50:52 $\n  * \n  * @author Stephen Colebourne\n  * @author Ola Berg\n      */\n     public static Predicate invokerPredicate(String methodName){\n         // reuse transformer as it has caching - this is lazy really, should have inner class here\n-        return asPredicate(TransformerUtils.invokerTransformer(methodName));\n+        return asPredicate(InvokerTransformer.getInstance(methodName));\n     }\n \n     /**\n      */\n     public static Predicate invokerPredicate(String methodName, Class[] paramTypes, Object[] args){\n         // reuse transformer as it has caching - this is lazy really, should have inner class here\n-        return asPredicate(TransformerUtils.invokerTransformer(methodName, paramTypes, args));\n+        return asPredicate(InvokerTransformer.getInstance(methodName, paramTypes, args));\n     }\n \n     // Boolean combinations\n--- a/src/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/java/org/apache/commons/collections/TransformerUtils.java\n import org.apache.commons.collections.functors.CloneTransformer;\n import org.apache.commons.collections.functors.ClosureTransformer;\n import org.apache.commons.collections.functors.ConstantTransformer;\n+import org.apache.commons.collections.functors.EqualPredicate;\n import org.apache.commons.collections.functors.ExceptionTransformer;\n import org.apache.commons.collections.functors.FactoryTransformer;\n import org.apache.commons.collections.functors.InstantiateTransformer;\n  * All the supplied transformers are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.12 $ $Date: 2004/04/14 21:47:47 $\n+ * @version $Revision: 1.13 $ $Date: 2004/05/26 21:50:52 $\n  * \n  * @author Stephen Colebourne\n  * @author James Carman\n         int i = 0;\n         for (Iterator it = objectsAndTransformers.entrySet().iterator(); it.hasNext();) {\n             Map.Entry entry = (Map.Entry) it.next();\n-            preds[i] = PredicateUtils.equalPredicate(entry.getKey());\n+            preds[i] = EqualPredicate.getInstance(entry.getKey());\n             trs[i] = (Transformer) entry.getValue();\n             i++;\n         }", "timestamp": 1085608252, "metainfo": ""}