{"sha": "20be12841f4b1ced6a5a91510f3d7f593f1adfa8", "log": "Add functor utility implementation tests   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.42 2003/04/26 15:13:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.43 2003/05/16 13:42:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *    distribution.\n  *\n  * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n+ *    any, must include the following acknowledgment:\n  *       \"This product includes software developed by the\n  *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n  *\n  * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n  *    Foundation\" must not be used to endorse or promote products derived\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n /**\n  * Entry point for all Collections tests.\n  * \n- * @version $Revision: 1.42 $ $Date: 2003/04/26 15:13:54 $\n+ * @version $Revision: 1.43 $ $Date: 2003/05/16 13:42:57 $\n  * \n  * @author Rodney Waldhoff\n  * @author Stephen Colebourne\n         suite.addTest(TestBoundedFifoBuffer.suite());\n         suite.addTest(TestBoundedFifoBuffer2.suite());\n         suite.addTest(TestCircularFifoBuffer.suite());\n+        suite.addTest(TestClosureUtils.suite());\n         suite.addTest(TestCollectionUtils.suite());\n         suite.addTest(TestCommonsLinkedList.suite());\n         suite.addTest(TestBufferUtils.suite());\n         suite.addTest(TestCursorableLinkedList.suite());\n         suite.addTest(TestDoubleOrderedMap.suite());\n         suite.addTest(TestExtendedProperties.suite());\n+        suite.addTest(TestFactoryUtils.suite());\n         suite.addTest(TestFastArrayList.suite());\n         suite.addTest(TestFastArrayList1.suite());\n         suite.addTest(TestFastHashMap.suite());\n         suite.addTest(TestMultiHashMap.suite());\n         suite.addTest(TestMultiKey.suite());\n         suite.addTest(TestNodeCachingLinkedList.suite());\n+        suite.addTest(TestPredicateUtils.suite());\n         suite.addTest(TestSequencedHashMap.suite());\n         suite.addTest(TestStaticBucketMap.suite());\n+        suite.addTest(TestTransformerUtils.suite());\n         suite.addTest(TestTreeBag.suite());\n         suite.addTest(TestUnboundedFifoBuffer.suite());\n         suite.addTest(TestReferenceMap.suite());\n         suite.addTest(TestIteratorUtils.suite());\n         suite.addTest(org.apache.commons.collections.comparators.TestAll.suite());\n+        suite.addTest(org.apache.commons.collections.decorators.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.iterators.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.primitives.TestAll.suite());\n         return suite;\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestClosureUtils.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestClosureUtils.java,v 1.1 2003/05/16 13:42:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests the org.apache.commons.collections.ClosureUtils class.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/16 13:42:57 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestClosureUtils extends junit.framework.TestCase {\n+\n+    private static final Object cObject = new Object();\n+    private static final Object cString = \"Hello\";\n+    private static final Object cInteger = new Integer(6);\n+\n+    /**\n+     * Construct\n+     */\n+    public TestClosureUtils(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Main.\n+     * @param args\n+     */    \n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Return class as a test suite.\n+     */\n+    public static Test suite() {\n+        return new TestSuite(TestClosureUtils.class);\n+    }\n+\n+    /**\n+     * Set up instance variables required by this test case.\n+     */\n+    public void setUp() {\n+    }\n+\n+    /**\n+     * Tear down instance variables required by this test case.\n+     */\n+    public void tearDown() {\n+    }\n+    \n+    static class MockClosure implements Closure {\n+        int count = 0;\n+        \n+        public void execute(Object object) {\n+            count++;\n+        }\n+\n+    }\n+\n+    // exceptionClosure\n+    //------------------------------------------------------------------\n+\n+    public void testExceptionClosure() {\n+        assertNotNull(ClosureUtils.exceptionClosure());\n+        assertSame(ClosureUtils.exceptionClosure(), ClosureUtils.exceptionClosure());\n+        try {\n+            ClosureUtils.exceptionClosure().execute(null);\n+        } catch (FunctorException ex) {\n+            try {\n+                ClosureUtils.exceptionClosure().execute(cString);\n+            } catch (FunctorException ex2) {\n+                return;\n+            }\n+        }\n+        fail();\n+    }\n+    \n+    // nopClosure\n+    //------------------------------------------------------------------\n+\n+    public void testNopClosure() {\n+        StringBuffer buf = new StringBuffer(\"Hello\");\n+        ClosureUtils.nopClosure().execute(null);\n+        assertEquals(\"Hello\", buf.toString());\n+        ClosureUtils.nopClosure().execute(\"Hello\");\n+        assertEquals(\"Hello\", buf.toString());\n+    }\n+\n+    // invokeClosure\n+    //------------------------------------------------------------------\n+\n+    public void testInvokeClosure() {\n+        StringBuffer buf = new StringBuffer(\"Hello\");\n+        ClosureUtils.invokerClosure(\"reverse\").execute(buf);\n+        assertEquals(\"olleH\", buf.toString());\n+        buf = new StringBuffer(\"Hello\");\n+        ClosureUtils.invokerClosure(\"setLength\", new Class[] {Integer.TYPE}, new Object[] {new Integer(2)}).execute(buf);\n+        assertEquals(\"He\", buf.toString());\n+    }\n+\n+    // forClosure\n+    //------------------------------------------------------------------\n+\n+    public void testForClosure() {\n+        MockClosure cmd = new MockClosure();\n+        ClosureUtils.forClosure(5, cmd).execute(null);\n+        assertEquals(5, cmd.count);\n+        try {\n+            ClosureUtils.forClosure(-1, new MockClosure());\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    // whileClosure\n+    //------------------------------------------------------------------\n+\n+    public void testWhileClosure() {\n+        MockClosure cmd = new MockClosure();\n+        ClosureUtils.whileClosure(PredicateUtils.falsePredicate(), cmd).execute(null);\n+        assertEquals(0, cmd.count);\n+        try {\n+            ClosureUtils.whileClosure(null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    // doWhileClosure\n+    //------------------------------------------------------------------\n+\n+    public void testDoWhileClosure() {\n+        MockClosure cmd = new MockClosure();\n+        ClosureUtils.doWhileClosure(cmd, PredicateUtils.falsePredicate()).execute(null);\n+        assertEquals(1, cmd.count);\n+        try {\n+            ClosureUtils.doWhileClosure(null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    // chainedClosure\n+    //------------------------------------------------------------------\n+\n+    public void testChainedClosure() {\n+        MockClosure a = new MockClosure();\n+        MockClosure b = new MockClosure();\n+        ClosureUtils.chainedClosure(a, b).execute(null);\n+        assertEquals(1, a.count);\n+        assertEquals(1, b.count);\n+        \n+        a = new MockClosure();\n+        b = new MockClosure();\n+        ClosureUtils.chainedClosure(new Closure[] {a, b, a}).execute(null);\n+        assertEquals(2, a.count);\n+        assertEquals(1, b.count);\n+        \n+        a = new MockClosure();\n+        b = new MockClosure();\n+        Collection coll = new ArrayList();\n+        coll.add(b);\n+        coll.add(a);\n+        coll.add(b);\n+        ClosureUtils.chainedClosure(coll).execute(null);\n+        assertEquals(1, a.count);\n+        assertEquals(2, b.count);\n+    }\n+\n+    public void testChainedClosureEx1a() {\n+        try {\n+            ClosureUtils.chainedClosure(null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testChainedClosureEx1b() {\n+        try {\n+            ClosureUtils.chainedClosure((Closure[]) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testChainedClosureEx1c() {\n+        try {\n+            ClosureUtils.chainedClosure((Collection) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testChainedClosureEx2() {\n+        try {\n+            ClosureUtils.chainedClosure(new Closure[0]);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testChainedClosureEx3() {\n+        try {\n+            ClosureUtils.chainedClosure(new Closure[] {null, null});\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testChainedClosureEx4() {\n+        try {\n+            ClosureUtils.chainedClosure(Collections.EMPTY_LIST);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testChainedClosureEx5() {\n+        try {\n+            Collection coll = new ArrayList();\n+            coll.add(null);\n+            coll.add(null);\n+            ClosureUtils.chainedClosure(coll);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // switchClosure\n+    //------------------------------------------------------------------\n+\n+    public void testSwitchClosure() {\n+        MockClosure a = new MockClosure();\n+        MockClosure b = new MockClosure();\n+        ClosureUtils.switchClosure(PredicateUtils.truePredicate(), a, b).execute(null);\n+        assertEquals(1, a.count);\n+        assertEquals(0, b.count);\n+        \n+        a = new MockClosure();\n+        b = new MockClosure();\n+        ClosureUtils.switchClosure(PredicateUtils.falsePredicate(), a, b).execute(null);\n+        assertEquals(0, a.count);\n+        assertEquals(1, b.count);\n+        \n+        a = new MockClosure();\n+        b = new MockClosure();\n+        ClosureUtils.switchClosure(\n+            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n+            new Closure[] {a, b}).execute(\"WELL\");\n+        assertEquals(0, a.count);\n+        assertEquals(0, b.count);\n+        \n+        a = new MockClosure();\n+        b = new MockClosure();\n+        ClosureUtils.switchClosure(\n+            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n+            new Closure[] {a, b}).execute(\"HELLO\");\n+        assertEquals(1, a.count);\n+        assertEquals(0, b.count);\n+        \n+        a = new MockClosure();\n+        b = new MockClosure();\n+        MockClosure c = new MockClosure();\n+        ClosureUtils.switchClosure(\n+            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n+            new Closure[] {a, b}, c).execute(\"WELL\");\n+        assertEquals(0, a.count);\n+        assertEquals(0, b.count);\n+        assertEquals(1, c.count);\n+        \n+        a = new MockClosure();\n+        b = new MockClosure();\n+        Map map = new HashMap();\n+        map.put(PredicateUtils.equalPredicate(\"HELLO\"), a);\n+        map.put(PredicateUtils.equalPredicate(\"THERE\"), b);\n+        ClosureUtils.switchClosure(map).execute(null);\n+        assertEquals(0, a.count);\n+        assertEquals(0, b.count);\n+\n+        a = new MockClosure();\n+        b = new MockClosure();\n+        map = new HashMap();\n+        map.put(PredicateUtils.equalPredicate(\"HELLO\"), a);\n+        map.put(PredicateUtils.equalPredicate(\"THERE\"), b);\n+        ClosureUtils.switchClosure(map).execute(\"THERE\");\n+        assertEquals(0, a.count);\n+        assertEquals(1, b.count);\n+\n+        a = new MockClosure();\n+        b = new MockClosure();\n+        c = new MockClosure();\n+        map = new HashMap();\n+        map.put(PredicateUtils.equalPredicate(\"HELLO\"), a);\n+        map.put(PredicateUtils.equalPredicate(\"THERE\"), b);\n+        map.put(null, c);\n+        ClosureUtils.switchClosure(map).execute(\"WELL\");\n+        assertEquals(0, a.count);\n+        assertEquals(0, b.count);\n+        assertEquals(1, c.count);\n+    }\n+\n+    public void testSwitchClosureEx1a() {\n+        try {\n+            ClosureUtils.switchClosure(null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchClosureEx1b() {\n+        try {\n+            ClosureUtils.switchClosure((Predicate[]) null, (Closure[]) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchClosureEx1c() {\n+        try {\n+            ClosureUtils.switchClosure((Map) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchClosureEx2() {\n+        try {\n+            ClosureUtils.switchClosure(new Predicate[0], new Closure[0]);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchClosureEx3() {\n+        try {\n+            ClosureUtils.switchClosure(new Predicate[2], new Closure[2]);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchClosureEx4() {\n+        try {\n+            ClosureUtils.switchClosure(new HashMap());\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchClosureEx5() {\n+        try {\n+            Map map = new HashMap();\n+            map.put(null, null);\n+            map.put(null, null);\n+            ClosureUtils.switchClosure(map);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchClosureEx6() {\n+        try {\n+            ClosureUtils.switchClosure(new Predicate[2], new Closure[1]);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // switchMapClosure\n+    //------------------------------------------------------------------\n+\n+    public void testSwitchMapClosure() {\n+        MockClosure a = new MockClosure();\n+        MockClosure b = new MockClosure();\n+        Map map = new HashMap();\n+        map.put(\"HELLO\", a);\n+        map.put(\"THERE\", b);\n+        ClosureUtils.switchMapClosure(map).execute(null);\n+        assertEquals(0, a.count);\n+        assertEquals(0, b.count);\n+\n+        a = new MockClosure();\n+        b = new MockClosure();\n+        map = new HashMap();\n+        map.put(\"HELLO\", a);\n+        map.put(\"THERE\", b);\n+        ClosureUtils.switchMapClosure(map).execute(\"THERE\");\n+        assertEquals(0, a.count);\n+        assertEquals(1, b.count);\n+\n+        a = new MockClosure();\n+        b = new MockClosure();\n+        MockClosure c = new MockClosure();\n+        map = new HashMap();\n+        map.put(\"HELLO\", a);\n+        map.put(\"THERE\", b);\n+        map.put(null, c);\n+        ClosureUtils.switchMapClosure(map).execute(\"WELL\");\n+        assertEquals(0, a.count);\n+        assertEquals(0, b.count);\n+        assertEquals(1, c.count);\n+    }\n+\n+    public void testSwitchMapClosureEx1() {\n+        try {\n+            ClosureUtils.switchMapClosure(null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchMapClosureEx2() {\n+        try {\n+            ClosureUtils.switchMapClosure(new HashMap());\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestFactoryUtils.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFactoryUtils.java,v 1.1 2003/05/16 13:42:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests the org.apache.commons.collections.FactoryUtils class.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/16 13:42:57 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestFactoryUtils extends junit.framework.TestCase {\n+\n+    /**\n+     * Construct\n+     */\n+    public TestFactoryUtils(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Main.\n+     * @param args\n+     */    \n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Return class as a test suite.\n+     */\n+    public static Test suite() {\n+        return new TestSuite(TestFactoryUtils.class);\n+    }\n+\n+    /**\n+     * Set up instance variables required by this test case.\n+     */\n+    public void setUp() {\n+    }\n+\n+    /**\n+     * Tear down instance variables required by this test case.\n+     */\n+    public void tearDown() {\n+    }\n+\n+    // exceptionFactory\n+    //------------------------------------------------------------------\n+\n+    public void testExceptionFactory() {\n+        assertNotNull(FactoryUtils.exceptionFactory());\n+        assertSame(FactoryUtils.exceptionFactory(), FactoryUtils.exceptionFactory());\n+        try {\n+            FactoryUtils.exceptionFactory().create();\n+        } catch (FunctorException ex) {\n+            try {\n+                FactoryUtils.exceptionFactory().create();\n+            } catch (FunctorException ex2) {\n+                return;\n+            }\n+        }\n+        fail();\n+    }\n+    \n+    // nullFactory\n+    //------------------------------------------------------------------\n+    \n+    public void testNullFactory() {\n+        Factory factory = FactoryUtils.nullFactory();\n+        assertNotNull(factory);\n+        Object created = factory.create();\n+        assertNull(created);\n+    }\n+\n+    // constantFactory\n+    //------------------------------------------------------------------\n+    \n+    public void testConstantFactoryNull() {\n+        Factory factory = FactoryUtils.constantFactory(null);\n+        assertNotNull(factory);\n+        Object created = factory.create();\n+        assertNull(created);\n+    }\n+\n+    public void testConstantFactoryConstant() {\n+        Integer constant = new Integer(9);\n+        Factory factory = FactoryUtils.constantFactory(constant);\n+        assertNotNull(factory);\n+        Object created = factory.create();\n+        assertSame(constant, created);\n+    }\n+\n+    // prototypeFactory\n+    //------------------------------------------------------------------\n+    \n+    public void testPrototypeFactoryNull() {\n+        try {\n+            Factory factory = FactoryUtils.prototypeFactory(null);\n+            \n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testPrototypeFactoryPublicCloneMethod() {\n+        Date proto = new Date();\n+        Factory factory = FactoryUtils.prototypeFactory(proto);\n+        assertNotNull(factory);\n+        Object created = factory.create();\n+        assertTrue(proto != created);\n+        assertEquals(proto, created);\n+    }\n+\n+    public void testPrototypeFactoryPublicCopyConstructor() {\n+        Mock1 proto = new Mock1(6);\n+        Factory factory = FactoryUtils.prototypeFactory(proto);\n+        assertNotNull(factory);\n+        Object created = factory.create();\n+        assertTrue(proto != created);\n+        assertEquals(proto, created);\n+    }\n+\n+    public void testPrototypeFactoryPublicSerialization() {\n+        Integer proto = new Integer(9);\n+        Factory factory = FactoryUtils.prototypeFactory(proto);\n+        assertNotNull(factory);\n+        Object created = factory.create();\n+        assertTrue(proto != created);\n+        assertEquals(proto, created);\n+    }\n+\n+    public void testPrototypeFactoryPublicSerializationError() {\n+        Mock2 proto = new Mock2(new Object());\n+        Factory factory = FactoryUtils.prototypeFactory(proto);\n+        assertNotNull(factory);\n+        try {\n+            Object created = factory.create();\n+            \n+        } catch (FunctorException ex) {\n+            assertTrue(ex.getCause() instanceof IOException);\n+            ex.printStackTrace();\n+            ex.printStackTrace(System.out);\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testPrototypeFactoryPublicBad() {\n+        Object proto = new Object();\n+        try {\n+            Factory factory = FactoryUtils.prototypeFactory(proto);\n+            \n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public static class Mock1 {\n+        private final int iVal;\n+        public Mock1(int val) {\n+            iVal = val;\n+        }\n+        public Mock1(Mock1 mock) {\n+            iVal = mock.iVal;\n+        }\n+        public boolean equals(Object obj) {\n+            if (obj instanceof Mock1) {\n+                if (iVal == ((Mock1) obj).iVal) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+    }\n+    \n+    public static class Mock2 implements Serializable {\n+        private final Object iVal;\n+        public Mock2(Object val) {\n+            iVal = val;\n+        }\n+        public boolean equals(Object obj) {\n+            if (obj instanceof Mock2) {\n+                if (iVal == ((Mock2) obj).iVal) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+    }\n+    \n+    // reflectionFactory\n+    //------------------------------------------------------------------\n+    \n+    public void testReflectionFactoryNull() {\n+        try {\n+            Factory factory = FactoryUtils.reflectionFactory(null);\n+            \n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testReflectionFactorySimple() {\n+        Factory factory = FactoryUtils.reflectionFactory(Date.class);\n+        assertNotNull(factory);\n+        Object created = factory.create();\n+        assertTrue(created instanceof Date);\n+        assertEquals((double) System.currentTimeMillis(), (double) ((Date) created).getTime(), 0.05d);\n+    }\n+\n+    public void testReflectionFactoryMismatch() {\n+        try {\n+            Factory factory = FactoryUtils.reflectionFactory(Date.class, null, new Object[] {null});\n+            \n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testReflectionFactoryNoConstructor() {\n+        try {\n+            Factory factory = FactoryUtils.reflectionFactory(Date.class, new Class[] {Long.class}, new Object[] {null});\n+            \n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testReflectionFactoryComplex() {\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n+        Factory factory = FactoryUtils.reflectionFactory(Date.class,\n+            new Class[] {Integer.TYPE, Integer.TYPE, Integer.TYPE},\n+            new Object[] {new Integer(70), new Integer(0), new Integer(2)});\n+        assertNotNull(factory);\n+        Object created = factory.create();\n+        assertTrue(created instanceof Date);\n+        assertEquals(new Date(1000 * 60 * 60 * 24), created);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestPredicateUtils.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestPredicateUtils.java,v 1.1 2003/05/16 13:42:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests the org.apache.commons.collections.PredicateUtils class.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/16 13:42:57 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPredicateUtils extends junit.framework.TestCase {\n+\n+    private static final Object cObject = new Object();\n+    private static final Object cString = \"Hello\";\n+    private static final Object cInteger = new Integer(6);\n+\n+    /**\n+     * Construct\n+     */\n+    public TestPredicateUtils(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Main.\n+     * @param args\n+     */    \n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Return class as a test suite.\n+     */\n+    public static Test suite() {\n+        return new TestSuite(TestPredicateUtils.class);\n+    }\n+\n+    /**\n+     * Set up instance variables required by this test case.\n+     */\n+    public void setUp() {\n+    }\n+\n+    /**\n+     * Tear down instance variables required by this test case.\n+     */\n+    public void tearDown() {\n+    }\n+\n+    // exceptionPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testExceptionPredicate() {\n+        assertNotNull(PredicateUtils.exceptionPredicate());\n+        assertSame(PredicateUtils.exceptionPredicate(), PredicateUtils.exceptionPredicate());\n+        try {\n+            PredicateUtils.exceptionPredicate().evaluate(null);\n+        } catch (FunctorException ex) {\n+            try {\n+                PredicateUtils.exceptionPredicate().evaluate(cString);\n+            } catch (FunctorException ex2) {\n+                return;\n+            }\n+        }\n+        fail();\n+    }\n+    \n+    // nullPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testNullPredicate() {\n+        assertNotNull(PredicateUtils.nullPredicate());\n+        assertSame(PredicateUtils.nullPredicate(), PredicateUtils.nullPredicate());\n+        assertEquals(true, PredicateUtils.nullPredicate().evaluate(null));\n+        assertEquals(false, PredicateUtils.nullPredicate().evaluate(cObject));\n+        assertEquals(false, PredicateUtils.nullPredicate().evaluate(cString));\n+        assertEquals(false, PredicateUtils.nullPredicate().evaluate(cInteger));\n+    }\n+\n+    // notNullPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testIsNotNullPredicate() {\n+        assertNotNull(PredicateUtils.notNullPredicate());\n+        assertSame(PredicateUtils.notNullPredicate(), PredicateUtils.notNullPredicate());\n+        assertEquals(false, PredicateUtils.notNullPredicate().evaluate(null));\n+        assertEquals(true, PredicateUtils.notNullPredicate().evaluate(cObject));\n+        assertEquals(true, PredicateUtils.notNullPredicate().evaluate(cString));\n+        assertEquals(true, PredicateUtils.notNullPredicate().evaluate(cInteger));\n+    }\n+\n+    // equalPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testEqualPredicate() {\n+        assertSame(PredicateUtils.nullPredicate(), PredicateUtils.equalPredicate(null));\n+        assertNotNull(PredicateUtils.equalPredicate(new Integer(6)));\n+        assertEquals(false, PredicateUtils.equalPredicate(new Integer(6)).evaluate(null));\n+        assertEquals(false, PredicateUtils.equalPredicate(new Integer(6)).evaluate(cObject));\n+        assertEquals(false, PredicateUtils.equalPredicate(new Integer(6)).evaluate(cString));\n+        assertEquals(true, PredicateUtils.equalPredicate(new Integer(6)).evaluate(cInteger));\n+    }\n+\n+    // identityPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testIdentityPredicate() {\n+        assertSame(PredicateUtils.nullPredicate(), PredicateUtils.identityPredicate(null));\n+        assertNotNull(PredicateUtils.identityPredicate(new Integer(6)));\n+        assertEquals(false, PredicateUtils.identityPredicate(new Integer(6)).evaluate(null));\n+        assertEquals(false, PredicateUtils.identityPredicate(new Integer(6)).evaluate(cObject));\n+        assertEquals(false, PredicateUtils.identityPredicate(new Integer(6)).evaluate(cString));\n+        assertEquals(false, PredicateUtils.identityPredicate(new Integer(6)).evaluate(cInteger));\n+        assertEquals(true, PredicateUtils.identityPredicate(cInteger).evaluate(cInteger));\n+    }\n+\n+    // truePredicate\n+    //------------------------------------------------------------------\n+\n+    public void testTruePredicate() {\n+        assertNotNull(PredicateUtils.truePredicate());\n+        assertSame(PredicateUtils.truePredicate(), PredicateUtils.truePredicate());\n+        assertEquals(true, PredicateUtils.truePredicate().evaluate(null));\n+        assertEquals(true, PredicateUtils.truePredicate().evaluate(cObject));\n+        assertEquals(true, PredicateUtils.truePredicate().evaluate(cString));\n+        assertEquals(true, PredicateUtils.truePredicate().evaluate(cInteger));\n+    }\n+\n+    // falsePredicate\n+    //------------------------------------------------------------------\n+\n+    public void testFalsePredicate() {\n+        assertNotNull(PredicateUtils.falsePredicate());\n+        assertSame(PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate());\n+        assertEquals(false, PredicateUtils.falsePredicate().evaluate(null));\n+        assertEquals(false, PredicateUtils.falsePredicate().evaluate(cObject));\n+        assertEquals(false, PredicateUtils.falsePredicate().evaluate(cString));\n+        assertEquals(false, PredicateUtils.falsePredicate().evaluate(cInteger));\n+    }\n+\n+    // notPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testNotPredicate() {\n+        assertNotNull(PredicateUtils.notPredicate(PredicateUtils.truePredicate()));\n+        assertEquals(false, PredicateUtils.notPredicate(PredicateUtils.truePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.notPredicate(PredicateUtils.truePredicate()).evaluate(cObject));\n+        assertEquals(false, PredicateUtils.notPredicate(PredicateUtils.truePredicate()).evaluate(cString));\n+        assertEquals(false, PredicateUtils.notPredicate(PredicateUtils.truePredicate()).evaluate(cInteger));\n+    }\n+    \n+    public void testNotPredicateEx() {\n+        try {\n+            PredicateUtils.notPredicate(null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // andPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testAndPredicate() {\n+        assertEquals(true, PredicateUtils.andPredicate(PredicateUtils.truePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.andPredicate(PredicateUtils.truePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.andPredicate(PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.andPredicate(PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n+    }\n+\n+    public void testAndPredicateEx() {\n+        try {\n+            PredicateUtils.andPredicate(null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // allPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testAllPredicate() {\n+        assertEquals(true, PredicateUtils.allPredicate(new Predicate[] {\n+            PredicateUtils.truePredicate(), PredicateUtils.truePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+        assertEquals(false, PredicateUtils.allPredicate(new Predicate[] {\n+            PredicateUtils.truePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+        assertEquals(false, PredicateUtils.allPredicate(new Predicate[] {\n+            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+        assertEquals(false, PredicateUtils.allPredicate(new Predicate[] {\n+            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()}).evaluate(null));\n+        Collection coll = new ArrayList();\n+        coll.add(PredicateUtils.truePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        assertEquals(true, PredicateUtils.allPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.truePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        assertEquals(false, PredicateUtils.allPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        assertEquals(false, PredicateUtils.allPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        assertEquals(false, PredicateUtils.allPredicate(coll).evaluate(null));\n+    }\n+\n+    public void testAllPredicateEx1() {\n+        try {\n+            PredicateUtils.allPredicate((Predicate[]) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testAllPredicateEx2() {\n+        try {\n+            PredicateUtils.allPredicate(new Predicate[] {null});\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testAllPredicateEx3() {\n+        try {\n+            PredicateUtils.allPredicate(new Predicate[] {null, null});\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testAllPredicateEx4() {\n+        try {\n+            PredicateUtils.allPredicate((Collection) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testAllPredicateEx5() {\n+        try {\n+            PredicateUtils.allPredicate(Collections.EMPTY_LIST);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testAllPredicateEx6() {\n+        try {\n+            Collection coll = new ArrayList();\n+            coll.add(null);\n+            coll.add(null);\n+            PredicateUtils.allPredicate(coll);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // orPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testOrPredicate() {\n+        assertEquals(true, PredicateUtils.orPredicate(PredicateUtils.truePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.orPredicate(PredicateUtils.truePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.orPredicate(PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.orPredicate(PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n+    }\n+    \n+    public void testOrPredicateEx() {\n+        try {\n+            PredicateUtils.orPredicate(null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // anyPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testAnyPredicate() {\n+        assertEquals(true, PredicateUtils.anyPredicate(new Predicate[] {\n+            PredicateUtils.truePredicate(), PredicateUtils.truePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+        assertEquals(true, PredicateUtils.anyPredicate(new Predicate[] {\n+            PredicateUtils.truePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+        assertEquals(true, PredicateUtils.anyPredicate(new Predicate[] {\n+            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+        assertEquals(false, PredicateUtils.anyPredicate(new Predicate[] {\n+            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()}).evaluate(null));\n+        Collection coll = new ArrayList();\n+        coll.add(PredicateUtils.truePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        assertEquals(true, PredicateUtils.anyPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.truePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        assertEquals(true, PredicateUtils.anyPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        assertEquals(true, PredicateUtils.anyPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        assertEquals(false, PredicateUtils.anyPredicate(coll).evaluate(null));\n+    }\n+\n+    public void testAnyPredicateEx1() {\n+        try {\n+            PredicateUtils.anyPredicate((Predicate[]) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testAnyPredicateEx2() {\n+        try {\n+            PredicateUtils.anyPredicate(new Predicate[] {null});\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testAnyPredicateEx3() {\n+        try {\n+            PredicateUtils.anyPredicate(new Predicate[] {null, null});\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testAnyPredicateEx4() {\n+        try {\n+            PredicateUtils.anyPredicate((Collection) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testAnyPredicateEx5() {\n+        try {\n+            PredicateUtils.anyPredicate(Collections.EMPTY_LIST);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testAnyPredicateEx6() {\n+        try {\n+            Collection coll = new ArrayList();\n+            coll.add(null);\n+            coll.add(null);\n+            PredicateUtils.anyPredicate(coll);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // eitherPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testEitherPredicate() {\n+        assertEquals(false, PredicateUtils.eitherPredicate(PredicateUtils.truePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.eitherPredicate(PredicateUtils.truePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.eitherPredicate(PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.eitherPredicate(PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n+    }\n+\n+    public void testEitherPredicateEx() {\n+        try {\n+            PredicateUtils.eitherPredicate(null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // onePredicate\n+    //------------------------------------------------------------------\n+\n+    public void testOnePredicate() {\n+        assertEquals(false, PredicateUtils.onePredicate(new Predicate[] {\n+            PredicateUtils.truePredicate(), PredicateUtils.truePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+        assertEquals(false, PredicateUtils.onePredicate(new Predicate[] {\n+            PredicateUtils.truePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+        assertEquals(true, PredicateUtils.onePredicate(new Predicate[] {\n+            PredicateUtils.truePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()}).evaluate(null));\n+        assertEquals(true, PredicateUtils.onePredicate(new Predicate[] {\n+            PredicateUtils.falsePredicate(), PredicateUtils.truePredicate(), PredicateUtils.falsePredicate()}).evaluate(null));\n+        assertEquals(true, PredicateUtils.onePredicate(new Predicate[] {\n+            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+        assertEquals(false, PredicateUtils.onePredicate(new Predicate[] {\n+            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()}).evaluate(null));\n+        Collection coll = new ArrayList();\n+        coll.add(PredicateUtils.truePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        assertEquals(false, PredicateUtils.onePredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.truePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        assertEquals(false, PredicateUtils.onePredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        assertEquals(true, PredicateUtils.onePredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        assertEquals(false, PredicateUtils.onePredicate(coll).evaluate(null));\n+    }\n+\n+    public void testOnePredicateEx1() {\n+        try {\n+            PredicateUtils.onePredicate((Predicate[]) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testOnePredicateEx2() {\n+        try {\n+            PredicateUtils.onePredicate(new Predicate[] {null});\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testOnePredicateEx3() {\n+        try {\n+            PredicateUtils.onePredicate(new Predicate[] {null, null});\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testOnePredicateEx4() {\n+        try {\n+            PredicateUtils.onePredicate((Collection) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testOnePredicateEx5() {\n+        try {\n+            PredicateUtils.onePredicate(Collections.EMPTY_LIST);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testOnePredicateEx6() {\n+        try {\n+            Collection coll = new ArrayList();\n+            coll.add(null);\n+            coll.add(null);\n+            PredicateUtils.onePredicate(coll);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // neitherPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testNeitherPredicate() {\n+        assertEquals(false, PredicateUtils.neitherPredicate(PredicateUtils.truePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.neitherPredicate(PredicateUtils.truePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.neitherPredicate(PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.neitherPredicate(PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n+    }\n+\n+    public void testNeitherPredicateEx() {\n+        try {\n+            PredicateUtils.neitherPredicate(null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // nonePredicate\n+    //------------------------------------------------------------------\n+\n+    public void testNonePredicate() {\n+        assertEquals(false, PredicateUtils.nonePredicate(new Predicate[] {\n+            PredicateUtils.truePredicate(), PredicateUtils.truePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+        assertEquals(false, PredicateUtils.nonePredicate(new Predicate[] {\n+            PredicateUtils.truePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+        assertEquals(false, PredicateUtils.nonePredicate(new Predicate[] {\n+            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+        assertEquals(true, PredicateUtils.nonePredicate(new Predicate[] {\n+            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()}).evaluate(null));\n+        Collection coll = new ArrayList();\n+        coll.add(PredicateUtils.truePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        assertEquals(false, PredicateUtils.nonePredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.truePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        assertEquals(false, PredicateUtils.nonePredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.truePredicate());\n+        assertEquals(false, PredicateUtils.nonePredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(PredicateUtils.falsePredicate());\n+        assertEquals(true, PredicateUtils.nonePredicate(coll).evaluate(null));\n+    }\n+\n+    public void testNonePredicateEx1() {\n+        try {\n+            PredicateUtils.nonePredicate((Predicate[]) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testNonePredicateEx2() {\n+        try {\n+            PredicateUtils.nonePredicate(new Predicate[] {null});\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testNonePredicateEx3() {\n+        try {\n+            PredicateUtils.nonePredicate(new Predicate[] {null, null});\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testNonePredicateEx4() {\n+        try {\n+            PredicateUtils.nonePredicate((Collection) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testNonePredicateEx5() {\n+        try {\n+            PredicateUtils.nonePredicate(Collections.EMPTY_LIST);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testNonePredicateEx6() {\n+        try {\n+            Collection coll = new ArrayList();\n+            coll.add(null);\n+            coll.add(null);\n+            PredicateUtils.nonePredicate(coll);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // instanceofPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testInstanceOfPredicate() {\n+        assertNotNull(PredicateUtils.instanceofPredicate(String.class));\n+        assertEquals(false, PredicateUtils.instanceofPredicate(String.class).evaluate(null));\n+        assertEquals(false, PredicateUtils.instanceofPredicate(String.class).evaluate(cObject));\n+        assertEquals(true, PredicateUtils.instanceofPredicate(String.class).evaluate(cString));\n+        assertEquals(false, PredicateUtils.instanceofPredicate(String.class).evaluate(cInteger));\n+    }\n+\n+    // uniquePredicate\n+    //------------------------------------------------------------------\n+\n+    public void testUniquePredicate() {\n+        Predicate p = PredicateUtils.uniquePredicate();\n+        assertEquals(true, p.evaluate(new Object()));\n+        assertEquals(true, p.evaluate(new Object()));\n+        assertEquals(true, p.evaluate(new Object()));\n+        assertEquals(true, p.evaluate(cString));\n+        assertEquals(false, p.evaluate(cString));\n+        assertEquals(false, p.evaluate(cString));\n+    }\n+    \n+    // asPredicate(Transformer)\n+    //------------------------------------------------------------------\n+\n+    public void testAsPredicateTransformer() {\n+        assertEquals(false, PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(Boolean.FALSE));\n+        assertEquals(true, PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(Boolean.TRUE));\n+    }\n+\n+    public void testAsPredicateTransformerEx1() {\n+        try {\n+            PredicateUtils.asPredicate(null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testAsPredicateTransformerEx2() {\n+        try {\n+            PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(null);\n+        } catch (FunctorException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // invokerPredicate\n+    //------------------------------------------------------------------\n+\n+    public void testInvokerPredicate() {\n+        List list = new ArrayList();\n+        assertEquals(true, PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(list));\n+        list.add(new Object());\n+        assertEquals(false, PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(list));\n+    }\n+\n+    public void testInvokerPredicateEx1() {\n+        try {\n+            PredicateUtils.invokerPredicate(null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testInvokerPredicateEx2() {\n+        try {\n+            PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(null);\n+        } catch (FunctorException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testInvokerPredicateEx3() {\n+        try {\n+            PredicateUtils.invokerPredicate(\"noSuchMethod\").evaluate(new Object());\n+        } catch (FunctorException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // invokerPredicate2\n+    //------------------------------------------------------------------\n+\n+    public void testInvokerPredicate2() {\n+        List list = new ArrayList();\n+        assertEquals(false, PredicateUtils.invokerPredicate(\n+            \"contains\", new Class[] {Object.class}, new Object[] {cString}).evaluate(list));\n+        list.add(cString);\n+        assertEquals(true, PredicateUtils.invokerPredicate(\n+            \"contains\", new Class[] {Object.class}, new Object[] {cString}).evaluate(list));\n+    }\n+\n+    public void testInvokerPredicate2Ex1() {\n+        try {\n+            PredicateUtils.invokerPredicate(null, null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testInvokerPredicate2Ex2() {\n+        try {\n+            PredicateUtils.invokerPredicate(\"contains\", new Class[] {Object.class}, new Object[] {cString}).evaluate(null);\n+        } catch (FunctorException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testInvokerPredicate2Ex3() {\n+        try {\n+            PredicateUtils.invokerPredicate(\n+                \"noSuchMethod\", new Class[] {Object.class}, new Object[] {cString}).evaluate(new Object());\n+        } catch (FunctorException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // nullIsException\n+    //------------------------------------------------------------------\n+\n+    public void testNullIsExceptionPredicate() {\n+        assertEquals(true, PredicateUtils.nullIsExceptionPredicate(PredicateUtils.truePredicate()).evaluate(new Object()));\n+        try {\n+            PredicateUtils.nullIsExceptionPredicate(PredicateUtils.truePredicate()).evaluate(null);\n+        } catch (FunctorException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testNullIsExceptionPredicateEx1() {\n+        try {\n+            PredicateUtils.nullIsExceptionPredicate(null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // nullIsTrue\n+    //------------------------------------------------------------------\n+\n+    public void testNullIsTruePredicate() {\n+        assertEquals(true, PredicateUtils.nullIsTruePredicate(PredicateUtils.truePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.nullIsTruePredicate(PredicateUtils.truePredicate()).evaluate(new Object()));\n+        assertEquals(false, PredicateUtils.nullIsTruePredicate(PredicateUtils.falsePredicate()).evaluate(new Object()));\n+    }\n+\n+    public void testNullIsTruePredicateEx1() {\n+        try {\n+            PredicateUtils.nullIsTruePredicate(null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // nullIsFalse\n+    //------------------------------------------------------------------\n+\n+    public void testNullIsFalsePredicate() {\n+        assertEquals(false, PredicateUtils.nullIsFalsePredicate(PredicateUtils.truePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.nullIsFalsePredicate(PredicateUtils.truePredicate()).evaluate(new Object()));\n+        assertEquals(false, PredicateUtils.nullIsFalsePredicate(PredicateUtils.falsePredicate()).evaluate(new Object()));\n+    }\n+\n+    public void testNullIsFalsePredicateEx1() {\n+        try {\n+            PredicateUtils.nullIsFalsePredicate(null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestTransformerUtils.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTransformerUtils.java,v 1.1 2003/05/16 13:42:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests the org.apache.commons.collections.TransformerUtils class.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/16 13:42:57 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestTransformerUtils extends junit.framework.TestCase {\n+\n+    private static final Object cObject = new Object();\n+    private static final Object cString = \"Hello\";\n+    private static final Object cInteger = new Integer(6);\n+\n+    /**\n+     * Construct\n+     */\n+    public TestTransformerUtils(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Main.\n+     * @param args\n+     */    \n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Return class as a test suite.\n+     */\n+    public static Test suite() {\n+        return new TestSuite(TestTransformerUtils.class);\n+    }\n+\n+    /**\n+     * Set up instance variables required by this test case.\n+     */\n+    public void setUp() {\n+    }\n+\n+    /**\n+     * Tear down instance variables required by this test case.\n+     */\n+    public void tearDown() {\n+    }\n+\n+    // exceptionTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testExceptionTransformer() {\n+        assertNotNull(TransformerUtils.exceptionTransformer());\n+        assertSame(TransformerUtils.exceptionTransformer(), TransformerUtils.exceptionTransformer());\n+        try {\n+            TransformerUtils.exceptionTransformer().transform(null);\n+        } catch (FunctorException ex) {\n+            try {\n+                TransformerUtils.exceptionTransformer().transform(cString);\n+            } catch (FunctorException ex2) {\n+                return;\n+            }\n+        }\n+        fail();\n+    }\n+    \n+    // nullTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testNullTransformer() {\n+        assertNotNull(TransformerUtils.nullTransformer());\n+        assertSame(TransformerUtils.nullTransformer(), TransformerUtils.nullTransformer());\n+        assertEquals(null, TransformerUtils.nullTransformer().transform(null));\n+        assertEquals(null, TransformerUtils.nullTransformer().transform(cObject));\n+        assertEquals(null, TransformerUtils.nullTransformer().transform(cString));\n+        assertEquals(null, TransformerUtils.nullTransformer().transform(cInteger));\n+    }\n+\n+    // nopTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testNopTransformer() {\n+        assertNotNull(TransformerUtils.nullTransformer());\n+        assertSame(TransformerUtils.nullTransformer(), TransformerUtils.nullTransformer());\n+        assertEquals(null, TransformerUtils.nopTransformer().transform(null));\n+        assertEquals(cObject, TransformerUtils.nopTransformer().transform(cObject));\n+        assertEquals(cString, TransformerUtils.nopTransformer().transform(cString));\n+        assertEquals(cInteger, TransformerUtils.nopTransformer().transform(cInteger));\n+    }\n+\n+    // constantTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testConstantTransformer() {\n+        assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(null));\n+        assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(cObject));\n+        assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(cString));\n+        assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(cInteger));\n+    }\n+\n+    // cloneTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testCloneTransformer() {\n+        assertEquals(null, TransformerUtils.cloneTransformer().transform(null));\n+        assertEquals(cString, TransformerUtils.cloneTransformer().transform(cString));\n+        assertEquals(cInteger, TransformerUtils.cloneTransformer().transform(cInteger));\n+        try {\n+            assertEquals(cObject, TransformerUtils.cloneTransformer().transform(cObject));\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    // mapTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testMapTransformer() {\n+        Map map = new HashMap();\n+        map.put(null, new Integer(0));\n+        map.put(cObject, new Integer(1));\n+        map.put(cString, new Integer(2));\n+        assertEquals(new Integer(0), TransformerUtils.mapTransformer(map).transform(null));\n+        assertEquals(new Integer(1), TransformerUtils.mapTransformer(map).transform(cObject));\n+        assertEquals(new Integer(2), TransformerUtils.mapTransformer(map).transform(cString));\n+        assertEquals(null, TransformerUtils.mapTransformer(map).transform(cInteger));\n+    }\n+\n+    // commandTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testExecutorTransformer() {\n+        assertEquals(null, TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(null));\n+        assertEquals(cObject, TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cObject));\n+        assertEquals(cString, TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cString));\n+        assertEquals(cInteger, TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cInteger));\n+        try {\n+            TransformerUtils.asTransformer((Closure) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    // predicateTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testPredicateTransformer() {\n+        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(PredicateUtils.truePredicate()).transform(null));\n+        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(PredicateUtils.truePredicate()).transform(cObject));\n+        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(PredicateUtils.truePredicate()).transform(cString));\n+        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(PredicateUtils.truePredicate()).transform(cInteger));\n+        try {\n+            TransformerUtils.asTransformer((Predicate) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    // factoryTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testFactoryTransformer() {\n+        assertEquals(null, TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(null));\n+        assertEquals(null, TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cObject));\n+        assertEquals(null, TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cString));\n+        assertEquals(null, TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cInteger));\n+        try {\n+            TransformerUtils.asTransformer((Factory) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    // chainedTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testChainedTransformer() {\n+        Transformer a = TransformerUtils.constantTransformer(\"A\");\n+        Transformer b = TransformerUtils.constantTransformer(\"B\");\n+        \n+        assertEquals(\"A\", TransformerUtils.chainedTransformer(b, a).transform(null));\n+        assertEquals(\"B\", TransformerUtils.chainedTransformer(a, b).transform(null));\n+        assertEquals(\"A\", TransformerUtils.chainedTransformer(new Transformer[] {b, a}).transform(null));\n+        Collection coll = new ArrayList();\n+        coll.add(b);\n+        coll.add(a);\n+        assertEquals(\"A\", TransformerUtils.chainedTransformer(coll).transform(null));\n+    }\n+\n+    public void testChainedTransformerEx1a() {\n+        try {\n+            TransformerUtils.chainedTransformer(null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testChainedTransformerEx1b() {\n+        try {\n+            TransformerUtils.chainedTransformer((Transformer[]) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testChainedTransformerEx1c() {\n+        try {\n+            TransformerUtils.chainedTransformer((Collection) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testChainedTransformerEx2() {\n+        try {\n+            TransformerUtils.chainedTransformer(new Transformer[0]);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testChainedTransformerEx3() {\n+        try {\n+            TransformerUtils.chainedTransformer(new Transformer[] {null, null});\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testChainedTransformerEx4() {\n+        try {\n+            TransformerUtils.chainedTransformer(Collections.EMPTY_LIST);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testChainedTransformerEx5() {\n+        try {\n+            Collection coll = new ArrayList();\n+            coll.add(null);\n+            coll.add(null);\n+            TransformerUtils.chainedTransformer(coll);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // switchTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testSwitchTransformer() {\n+        Transformer a = TransformerUtils.constantTransformer(\"A\");\n+        Transformer b = TransformerUtils.constantTransformer(\"B\");\n+        Transformer c = TransformerUtils.constantTransformer(\"C\");\n+        \n+        assertEquals(\"A\", TransformerUtils.switchTransformer(PredicateUtils.truePredicate(), a, b).transform(null));\n+        assertEquals(\"B\", TransformerUtils.switchTransformer(PredicateUtils.falsePredicate(), a, b).transform(null));\n+        \n+        assertEquals(null, TransformerUtils.switchTransformer(\n+            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n+            new Transformer[] {a, b}).transform(\"WELL\"));\n+        assertEquals(\"A\", TransformerUtils.switchTransformer(\n+            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n+            new Transformer[] {a, b}).transform(\"HELLO\"));\n+        assertEquals(\"B\", TransformerUtils.switchTransformer(\n+            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n+            new Transformer[] {a, b}).transform(\"THERE\"));\n+            \n+        assertEquals(\"C\", TransformerUtils.switchTransformer(\n+            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n+            new Transformer[] {a, b}, c).transform(\"WELL\"));\n+            \n+        Map map = new HashMap();\n+        map.put(PredicateUtils.equalPredicate(\"HELLO\"), a);\n+        map.put(PredicateUtils.equalPredicate(\"THERE\"), b);\n+        assertEquals(null, TransformerUtils.switchTransformer(map).transform(\"WELL\"));\n+        assertEquals(\"A\", TransformerUtils.switchTransformer(map).transform(\"HELLO\"));\n+        assertEquals(\"B\", TransformerUtils.switchTransformer(map).transform(\"THERE\"));\n+        map.put(null, c);\n+        assertEquals(\"C\", TransformerUtils.switchTransformer(map).transform(\"WELL\"));\n+    }\n+\n+    public void testSwitchTransformerEx1a() {\n+        try {\n+            TransformerUtils.switchTransformer(null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchTransformerEx1b() {\n+        try {\n+            TransformerUtils.switchTransformer((Predicate[]) null, (Transformer[]) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchTransformerEx1c() {\n+        try {\n+            TransformerUtils.switchTransformer((Map) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchTransformerEx2() {\n+        try {\n+            TransformerUtils.switchTransformer(new Predicate[0], new Transformer[0]);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchTransformerEx3() {\n+        try {\n+            TransformerUtils.switchTransformer(new Predicate[2], new Transformer[2]);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchTransformerEx4() {\n+        try {\n+            TransformerUtils.switchTransformer(new HashMap());\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchTransformerEx5() {\n+        try {\n+            Map map = new HashMap();\n+            map.put(null, null);\n+            map.put(null, null);\n+            TransformerUtils.switchTransformer(map);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchTransformerEx6() {\n+        try {\n+            TransformerUtils.switchTransformer(new Predicate[2], new Transformer[1]);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // switchMapTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testSwitchMapTransformer() {\n+        Transformer a = TransformerUtils.constantTransformer(\"A\");\n+        Transformer b = TransformerUtils.constantTransformer(\"B\");\n+        Transformer c = TransformerUtils.constantTransformer(\"C\");\n+        \n+        Map map = new HashMap();\n+        map.put(\"HELLO\", a);\n+        map.put(\"THERE\", b);\n+        assertEquals(null, TransformerUtils.switchMapTransformer(map).transform(\"WELL\"));\n+        assertEquals(\"A\", TransformerUtils.switchMapTransformer(map).transform(\"HELLO\"));\n+        assertEquals(\"B\", TransformerUtils.switchMapTransformer(map).transform(\"THERE\"));\n+        map.put(null, c);\n+        assertEquals(\"C\", TransformerUtils.switchMapTransformer(map).transform(\"WELL\"));\n+    }\n+\n+    public void testSwitchMapTransformerEx1() {\n+        try {\n+            TransformerUtils.switchMapTransformer(null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSwitchMapTransformerEx2() {\n+        try {\n+            TransformerUtils.switchMapTransformer(new HashMap());\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // invokerTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testInvokerTransformer() {\n+        List list = new ArrayList();\n+        assertEquals(new Integer(0), TransformerUtils.invokerTransformer(\"size\").transform(list));\n+        list.add(new Object());\n+        assertEquals(new Integer(1), TransformerUtils.invokerTransformer(\"size\").transform(list));\n+        assertEquals(null, TransformerUtils.invokerTransformer(\"size\").transform(null));\n+    }\n+\n+    public void testInvokerTransformerEx1() {\n+        try {\n+            TransformerUtils.invokerTransformer(null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testInvokerTransformerEx3() {\n+        try {\n+            TransformerUtils.invokerTransformer(\"noSuchMethod\").transform(new Object());\n+        } catch (FunctorException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    // invokerTransformer2\n+    //------------------------------------------------------------------\n+\n+    public void testInvokerTransformer2() {\n+        List list = new ArrayList();\n+        assertEquals(Boolean.FALSE, TransformerUtils.invokerTransformer(\n+            \"contains\", new Class[] {Object.class}, new Object[] {cString}).transform(list));\n+        list.add(cString);\n+        assertEquals(Boolean.TRUE, TransformerUtils.invokerTransformer(\n+            \"contains\", new Class[] {Object.class}, new Object[] {cString}).transform(list));\n+        assertEquals(null, TransformerUtils.invokerTransformer(\n+            \"contains\", new Class[] {Object.class}, new Object[] {cString}).transform(null));\n+    }\n+\n+    public void testInvokerTransformer2Ex1() {\n+        try {\n+            TransformerUtils.invokerTransformer(null, null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testInvokerTransformer2Ex3() {\n+        try {\n+            TransformerUtils.invokerTransformer(\n+                \"noSuchMethod\", new Class[] {Object.class}, new Object[] {cString}).transform(new Object());\n+        } catch (FunctorException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+}", "timestamp": 1053092577, "metainfo": ""}