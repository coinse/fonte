{"sha": "cb19f2d73fb6ff6cbad5fa568534d1d05a5d47ff", "log": "PR: COLLECTIONS-323 Submitted-By: Maarten Brak <maarten.brak@quinity.com> Allow to use an initial capacity of 0 on certain maps.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n      * default load factor.\n      *\n      * @param initialCapacity  the initial capacity\n-     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the initial capacity is negative\n      */\n     protected AbstractHashedMap(int initialCapacity) {\n         this(initialCapacity, DEFAULT_LOAD_FACTOR);\n      *\n      * @param initialCapacity  the initial capacity\n      * @param loadFactor  the load factor\n-     * @throws IllegalArgumentException if the initial capacity is less than one\n-     * @throws IllegalArgumentException if the load factor is less than or equal to zero\n+     * @throws IlleagalArgumentException if the initial capacity is negative\n+     * @throws IllegalArgumentException if the load factor is less than or equal to zero \n      */\n     @SuppressWarnings(\"unchecked\")\n     protected AbstractHashedMap(int initialCapacity, float loadFactor) {\n         super();\n-        if (initialCapacity < 1) {\n-            throw new IllegalArgumentException(\"Initial capacity must be greater than 0\");\n+        if (initialCapacity < 0) {\n+            throw new IllegalArgumentException(\"Initial capacity must be a non negative number\");  \n         }\n         if (loadFactor <= 0.0f || Float.isNaN(loadFactor)) {\n             throw new IllegalArgumentException(\"Load factor must be greater than 0\");\n--- a/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n      * Constructs a new, empty map with the specified initial capacity. \n      *\n      * @param initialCapacity  the initial capacity\n-     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the initial capacity is negative\n      */\n     protected AbstractLinkedMap(int initialCapacity) {\n         super(initialCapacity);\n      *\n      * @param initialCapacity  the initial capacity\n      * @param loadFactor  the load factor\n-     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the initial capacity is negative\n      * @throws IllegalArgumentException if the load factor is less than zero\n      */\n     protected AbstractLinkedMap(int initialCapacity, float loadFactor) {\n--- a/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n+++ b/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n      * Constructs a new, empty map with the specified initial capacity. \n      *\n      * @param initialCapacity  the initial capacity\n-     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the initial capacity is negative\n      */\n     public CaseInsensitiveMap(int initialCapacity) {\n         super(initialCapacity);\n      *\n      * @param initialCapacity  the initial capacity\n      * @param loadFactor  the load factor\n-     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the initial capacity is negative\n      * @throws IllegalArgumentException if the load factor is less than zero\n      */\n     public CaseInsensitiveMap(int initialCapacity, float loadFactor) {\n--- a/src/java/org/apache/commons/collections/map/HashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/HashedMap.java\n      * Constructs a new, empty map with the specified initial capacity.\n      *\n      * @param initialCapacity  the initial capacity\n-     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the initial capacity is negative\n      */\n     public HashedMap(int initialCapacity) {\n         super(initialCapacity);\n      *\n      * @param initialCapacity  the initial capacity\n      * @param loadFactor  the load factor\n-     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the initial capacity is negative\n      * @throws IllegalArgumentException if the load factor is less than zero\n      */\n     public HashedMap(int initialCapacity, float loadFactor) {\n--- a/src/java/org/apache/commons/collections/map/IdentityMap.java\n+++ b/src/java/org/apache/commons/collections/map/IdentityMap.java\n      * Constructs a new, empty map with the specified initial capacity.\n      *\n      * @param initialCapacity  the initial capacity\n-     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the initial capacity is negative\n      */\n     public IdentityMap(int initialCapacity) {\n         super(initialCapacity);\n      *\n      * @param initialCapacity  the initial capacity\n      * @param loadFactor  the load factor\n-     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the initial capacity is negative\n      * @throws IllegalArgumentException if the load factor is less than zero\n      */\n     public IdentityMap(int initialCapacity, float loadFactor) {\n--- a/src/java/org/apache/commons/collections/map/LinkedMap.java\n+++ b/src/java/org/apache/commons/collections/map/LinkedMap.java\n      * Constructs a new, empty map with the specified initial capacity. \n      *\n      * @param initialCapacity  the initial capacity\n-     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the initial capacity is negative\n      */\n     public LinkedMap(int initialCapacity) {\n         super(initialCapacity);\n      *\n      * @param initialCapacity  the initial capacity\n      * @param loadFactor  the load factor\n-     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the initial capacity is negative\n      * @throws IllegalArgumentException if the load factor is less than zero\n      */\n     public LinkedMap(int initialCapacity, float loadFactor) {\n--- a/src/test/org/apache/commons/collections/map/TestCaseInsensitiveMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestCaseInsensitiveMap.java\n         }\n     }\n \n+    /**\n+     * Test for <a href=\"https://issues.apache.org/jira/browse/COLLECTIONS-323\">COLLECTIONS-323</a>.\n+     */\n+    public void testInitialCapacityZero() {\n+        final CaseInsensitiveMap<String,String> map = new CaseInsensitiveMap<String,String>(0);\n+        assertEquals(1, map.data.length);\n+    }\n }\n--- a/src/test/org/apache/commons/collections/map/TestHashedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestHashedMap.java\n //        resetFull();\n //        writeExternalFormToDisk((java.io.Serializable) map, \"D:/dev/collections/data/test/HashedMap.fullCollection.version3.obj\");\n //    }\n+\n+    /**\n+     * Test for <a href=\"https://issues.apache.org/jira/browse/COLLECTIONS-323\">COLLECTIONS-323</a>.\n+     */\n+    public void testInitialCapacityZero() {\n+        final HashedMap<String,String> map = new HashedMap<String,String>(0);\n+        assertEquals(1, map.data.length);\n+    }\n }\n--- a/src/test/org/apache/commons/collections/map/TestIdentityMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestIdentityMap.java\n //        map.put(I2A, I2B);\n //        writeExternalFormToDisk((java.io.Serializable) map, \"D:/dev/collections/data/test/IdentityMap.fullCollection.version3.obj\");\n //    }\n+\n+    /**\n+     * Test for <a href=\"https://issues.apache.org/jira/browse/COLLECTIONS-323\">COLLECTIONS-323</a>.\n+     */\n+    public void testInitialCapacityZero() {\n+        final IdentityMap<String,String> map = new IdentityMap<String,String>(0);\n+        assertEquals(1, map.data.length);\n+    }\n }\n--- a/src/test/org/apache/commons/collections/map/TestLinkedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLinkedMap.java\n     public LinkedMap<K, V> getMap() {\n         return (LinkedMap<K, V>) super.getMap();\n     }\n+\n+    /**\n+     * Test for <a href=\"https://issues.apache.org/jira/browse/COLLECTIONS-323\">COLLECTIONS-323</a>.\n+     */\n+    public void testInitialCapacityZero() {\n+        final LinkedMap<String,String> map = new LinkedMap<String,String>(0);\n+        assertEquals(1, map.data.length);\n+    }\n }", "timestamp": 1299627421, "metainfo": ""}