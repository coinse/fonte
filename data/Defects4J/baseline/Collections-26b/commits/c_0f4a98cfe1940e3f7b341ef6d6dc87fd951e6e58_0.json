{"sha": "0f4a98cfe1940e3f7b341ef6d6dc87fd951e6e58", "log": "[COLLECTIONS-395] Added LRUMap#get(Object, boolean) to query the map without affecting the lru order. Thanks to David Hawthorne.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/map/LRUMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/LRUMap.java\n      * Constructs a new, empty map with the specified initial capacity and\n      * load factor.\n      *\n-     * @param maxSize  the maximum size of the ma\n+     * @param maxSize  the maximum size of the map\n      * @param loadFactor  the load factor\n      * @param scanUntilRemovable  scan until a removeable entry is found, default false\n      * @throws IllegalArgumentException if the maximum size is less than one\n      * Gets the value mapped to the key specified.\n      * <p>\n      * This operation changes the position of the key in the map to the\n-     * most recently used position (first).\n+     * most recently used position (last).\n      *\n      * @param key  the key\n      * @return the mapped value, null if no match\n      */\n     @Override\n     public V get(final Object key) {\n+        return get(key, true);\n+    }\n+\n+    /**\n+     * Gets the value mapped to the key specified.\n+     * <p>\n+     * If {@code updateToMRU} is {@code true}, the position of the key in the map\n+     * is changed to the most recently used position (last), otherwise the iteration\n+     * order is not changed by this operation.\n+     *\n+     * @param key  the key\n+     * @param updateToMRU  whether the key shall be updated to the\n+     *   most recently used position\n+     * @return the mapped value, null if no match\n+     */\n+    public V get(final Object key, final boolean updateToMRU) {\n         final LinkEntry<K, V> entry = getEntry(key);\n         if (entry == null) {\n             return null;\n         }\n-        moveToMRU(entry);\n+        if (updateToMRU) {\n+            moveToMRU(entry);\n+        }\n         return entry.getValue();\n     }\n \n     /**\n      * Updates an existing key-value mapping.\n      * <p>\n-     * This implementation moves the updated entry to the top of the list\n+     * This implementation moves the updated entry to the end of the list\n      * using {@link #moveToMRU(AbstractLinkedMap.LinkEntry)}.\n      *\n      * @param entry  the entry to update\n--- a/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java\n         assertSame(values[3], vit.next());\n     }\n \n+    public void testAccessOrder2() {\n+        if (!isPutAddSupported() || !isPutChangeSupported()) {\n+            return;\n+        }\n+        final K[] keys = getSampleKeys();\n+        final V[] values = getSampleValues();\n+        Iterator<K> kit = null;\n+        Iterator<V> vit = null;\n+\n+        resetEmpty();\n+        LRUMap<K, V> lruMap = (LRUMap<K, V>) map;\n+        \n+        lruMap.put(keys[0], values[0]);\n+        lruMap.put(keys[1], values[1]);\n+        kit = lruMap.keySet().iterator();\n+        assertSame(keys[0], kit.next());\n+        assertSame(keys[1], kit.next());\n+        vit = lruMap.values().iterator();\n+        assertSame(values[0], vit.next());\n+        assertSame(values[1], vit.next());\n+\n+        // no change to order\n+        lruMap.put(keys[1], values[1]);\n+        kit = lruMap.keySet().iterator();\n+        assertSame(keys[0], kit.next());\n+        assertSame(keys[1], kit.next());\n+        vit = lruMap.values().iterator();\n+        assertSame(values[0], vit.next());\n+        assertSame(values[1], vit.next());\n+\n+        // no change to order\n+        lruMap.get(keys[1], false);\n+        kit = lruMap.keySet().iterator();\n+        assertSame(keys[0], kit.next());\n+        assertSame(keys[1], kit.next());\n+        vit = lruMap.values().iterator();\n+        assertSame(values[0], vit.next());\n+        assertSame(values[1], vit.next());\n+\n+        // change to order\n+        lruMap.get(keys[0], true);\n+        kit = lruMap.keySet().iterator();\n+        assertSame(keys[1], kit.next());\n+        assertSame(keys[0], kit.next());\n+        vit = lruMap.values().iterator();\n+        assertSame(values[1], vit.next());\n+        assertSame(values[0], vit.next());\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     public void testClone() {\n         final LRUMap<K, V> map = new LRUMap<K, V>(10);", "timestamp": 1428409518, "metainfo": ""}