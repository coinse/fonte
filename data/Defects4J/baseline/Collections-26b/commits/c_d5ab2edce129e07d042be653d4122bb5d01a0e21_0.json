{"sha": "d5ab2edce129e07d042be653d4122bb5d01a0e21", "log": "changed compatibility version to a method, and had it default to the maximum level of compatibility: version 1   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestMap.java\n+++ b/src/test/org/apache/commons/collections/TestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.12 2002/02/25 20:57:08 morgand Exp $\n- * $Revision: 1.12 $\n- * $Date: 2002/02/25 20:57:08 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.13 2002/02/26 00:08:07 morgand Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2002/02/26 00:08:07 $\n  *\n  * ====================================================================\n  *\n  *\n  * @author Michael Smith\n  * @author Rodney Waldhoff\n- * @version $Id: TestMap.java,v 1.12 2002/02/25 20:57:08 morgand Exp $\n+ * @version $Id: TestMap.java,v 1.13 2002/02/26 00:08:07 morgand Exp $\n  */\n public abstract class TestMap extends TestObject {\n \n         mapName = mapName.substring(mapName.lastIndexOf(\".\")+1,mapName.length());\n         retval.append(mapName);\n         retval.append(\".emptyMap.version\");\n-        retval.append(COMPATIBILITY_VERSION);\n+        retval.append(getCompatibilityVersion());\n         retval.append(\".obj\");\n         return retval.toString();\n     }\n         mapName = mapName.substring(mapName.lastIndexOf(\".\")+1,mapName.length());\n         retval.append(mapName);\n         retval.append(\".fullMap.version\");\n-        retval.append(COMPATIBILITY_VERSION);\n+        retval.append(getCompatibilityVersion());\n         retval.append(\".obj\");\n         return retval.toString();\n     }\n--- a/src/test/org/apache/commons/collections/TestObject.java\n+++ b/src/test/org/apache/commons/collections/TestObject.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.6 2002/02/25 20:57:08 morgand Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/02/25 20:57:08 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.7 2002/02/26 00:08:07 morgand Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/02/26 00:08:07 $\n  *\n  * ====================================================================\n  *\n  * test case (method) your {@link Object} fails.\n  *\n  * @author Rodney Waldhoff\n- * @version $Id: TestObject.java,v 1.6 2002/02/25 20:57:08 morgand Exp $\n+ * @version $Id: TestObject.java,v 1.7 2002/02/26 00:08:07 morgand Exp $\n  */\n public abstract class TestObject extends TestCase {\n     public TestObject(String testName) {\n \n     // current major release for Collections\n     public static final int COLLECTIONS_MAJOR_VERSION = 2;\n-    // This constant makes it possible for TestMap (and other subclasses, \n-    // if necessary) to automatically check CVS for a versionX copy of a \n-    // Serialized object, so we can make sure that compatibility is maintained.  \n-    // See, for example, TestMap.getCanonicalFullMapName(Map map).\n-    // Subclasses can override this variable, indicating compatibility\n-    // with earlier Collections versions.\n-    public int COMPATIBILITY_VERSION = COLLECTIONS_MAJOR_VERSION;\n+\n+    /**\n+     * This constant makes it possible for TestMap (and other subclasses,\n+     * if necessary) to automatically check CVS for a versionX copy of a\n+     * Serialized object, so we can make sure that compatibility is maintained.\n+     * See, for example, TestMap.getCanonicalFullMapName(Map map).\n+     * Subclasses can override this variable, indicating compatibility\n+     * with earlier Collections versions.\n+     * Defaults to 1, the earliest Collections version.  (Note: some\n+     * collections did not even exist in this version).\n+     * \n+     * @return 1\n+     */\n+    public int getCompatibilityVersion() {\n+        return 1;\n+    }\n \n     /**\n      * Return a new, empty {@link Object} to used for testing.\n--- a/src/test/org/apache/commons/collections/TestSequencedHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestSequencedHashMap.java\n         return new TestSuite(TestSequencedHashMap.class);\n     }\n \n+    // current versions of SequencedHashMap and subclasses are not\n+    // compatible with Collections 1.x\n+    public int getCompatibilityVersion() {\n+        return 2;\n+    }\n+\n     public static void main(String[] args[]) {\n         String[] testCaseName = { TestSequencedHashMap.class.getName() };\n         junit.textui.TestRunner.main(testCaseName);", "timestamp": 1014682087, "metainfo": ""}