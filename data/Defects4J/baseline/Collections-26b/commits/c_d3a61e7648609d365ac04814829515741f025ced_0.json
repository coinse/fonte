{"sha": "d3a61e7648609d365ac04814829515741f025ced", "log": "added base class for testing iterators   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestFilterIterator.java\n+++ b/src/test/org/apache/commons/collections/TestFilterIterator.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.framework.Test;\n+import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n /**\n  *\n  * @author  Jan Sorensen\n  */\n-public class TestFilterIterator extends TestCase {\n+public class TestFilterIterator extends TestIterator {\n \n     /** Creates new TestFilterIterator */\n     public TestFilterIterator(String name) {\n      */\n     public static Test suite() {\n         return (new TestSuite(TestFilterIterator.class));\n+    }\n+\n+    /**\n+     * Returns an full iterator wrapped in a\n+     * FilterIterator that blocks all the elements\n+     * \n+     * @return \"empty\" FilterIterator\n+     */\n+    public Iterator makeEmptyIterator() {\n+        return makeBlockAllFilter(new ArrayIterator(array));\n+    }\n+\n+    /**\n+     * Returns an array with elements wrapped in a pass-through\n+     * FilterIterator\n+     * \n+     * @return \n+     */\n+    public Iterator makeFullIterator() {\n+        return makePassThroughFilter(new ArrayIterator(array));\n+    }\n+\n+    public Object makeObject() {\n+        return makeFullIterator();\n     }\n \n     public void testRepeatedHasNext() {\n     }\n \n     private void initIterator() {\n-        iterator = new FilterIterator(new ArrayIterator(array));\n+        iterator = makePassThroughFilter(new ArrayIterator(array));\n+    }\n+\n+    /**\n+     * Returns a FilterIterator that does not filter\n+     * any of its elements\n+     * \n+     * @param i      the Iterator to \"filter\"\n+     * @return \"filtered\" iterator\n+     */\n+    protected FilterIterator makePassThroughFilter(Iterator i) {\n         Predicate pred = new Predicate() {\n-            public boolean evaluate(Object x) { return true; }\n+                public boolean evaluate(Object x) { return true; }\n         };\n-        iterator.setPredicate(pred);\n+        return new FilterIterator(i,pred);\n+    }\n+\n+    /**\n+     * Returns a FilterIterator that blocks\n+     * all of its elements\n+     * \n+     * @param i      the Iterator to \"filter\"\n+     * @return \"filtered\" iterator\n+     */\n+    protected FilterIterator makeBlockAllFilter(Iterator i) {\n+        Predicate pred = new Predicate() {\n+                public boolean evaluate(Object x) { return false; }\n+        };\n+        return new FilterIterator(i,pred);\n     }\n }\n ", "timestamp": 1014679603, "metainfo": ""}