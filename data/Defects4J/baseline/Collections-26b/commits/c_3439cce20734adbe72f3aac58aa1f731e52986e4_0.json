{"sha": "3439cce20734adbe72f3aac58aa1f731e52986e4", "log": "Improve testing for SortedSet includes some code from Dieter Wimberger   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestCollection.java\n+++ b/src/test/org/apache/commons/collections/TestCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCollection.java,v 1.12 2003/07/12 15:11:25 scolebourne Exp $\n- * $Revision: 1.12 $\n- * $Date: 2003/07/12 15:11:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCollection.java,v 1.13 2003/07/12 15:47:53 scolebourne Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2003/07/12 15:47:53 $\n  *\n  * ====================================================================\n  *\n  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n  * @author Neil O'Toole\n  * @author Stephen Colebourne\n- * @version $Id: TestCollection.java,v 1.12 2003/07/12 15:11:25 scolebourne Exp $\n+ * @version $Id: TestCollection.java,v 1.13 2003/07/12 15:47:53 scolebourne Exp $\n  */\n public abstract class TestCollection extends TestObject {\n \n         return getOtherNonNullElements();\n     }\n     \n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns a list of elements suitable for return by\n+     *  {@link getFullElements()}.  The array returned by this method\n+     *  does not include null, but does include a variety of objects \n+     *  of different types.  Override getFullElements to return\n+     *  the results of this method if your collection does not support\n+     *  the null element.\n+     */\n+    protected Object[] getFullNonNullElements() {\n+        return new Object[] {\n+            new String(\"\"),\n+            new String(\"One\"),\n+            new Integer(2),\n+            \"Three\",\n+            new Integer(4),\n+            \"One\",\n+            new Double(5),\n+            new Float(6),\n+            \"Seven\",\n+            \"Eight\",\n+            new String(\"Nine\"),\n+            new Integer(10),\n+            new Short((short)11),\n+            new Long(12),\n+            \"Thirteen\",\n+            \"14\",\n+            \"15\",\n+            new Byte((byte)16)\n+        };\n+    }\n+\n+    /**\n+     *  Returns the default list of objects returned by \n+     *  {@link getOtherElements()}.  Includes many objects\n+     *  of different types.\n+     */\n+    protected Object[] getOtherNonNullElements() {\n+        return new Object[] {\n+            new Integer(0),\n+            new Float(0),\n+            new Double(0),\n+            \"Zero\",\n+            new Short((short)0),\n+            new Byte((byte)0),\n+            new Long(0),\n+            new Character('\\u0000'),\n+            \"0\"\n+        };\n+    }\n+\n+    /**\n+     *  Returns a list of string elements suitable for return by\n+     *  {@link getFullElements()}.  Override getFullElements to return\n+     *  the results of this method if your collection does not support\n+     *  heterogenous elements or the null element.\n+     */\n+    protected Object[] getFullNonNullStringElements() {\n+        return new Object[] {\n+            \"If\",\"the\",\"dull\",\"substance\",\"of\",\"my\",\"flesh\",\"were\",\"thought\",\n+            \"Injurious\",\"distance\",\"could\",\"not\",\"stop\",\"my\",\"way\",\n+        };\n+    }\n+\n+    /**\n+     *  Returns a list of string elements suitable for return by\n+     *  {@link getOtherElements()}.  Override getOtherElements to return\n+     *  the results of this method if your collection does not support\n+     *  heterogenous elements or the null element.\n+     */\n+    protected Object[] getOtherNonNullStringElements() {\n+        return new Object[] {\n+            \"For\",\"then\",\"despite\",/* of */\"space\",\"I\",\"would\",\"be\",\"brought\",\n+            \"From\",\"limits\",\"far\",\"remote\",\"where\",\"thou\",\"dost\",\"stay\"\n+        };\n+    }\n+\n+    // Tests    \n     //-----------------------------------------------------------------------\n     /**\n      *  Tests {@link Collection#add(Object)}.\n         }\n     }\n \n-\n-    /**\n-     *  Returns a list of elements suitable for return by\n-     *  {@link getFullElements()}.  The array returned by this method\n-     *  does not include null, but does include a variety of objects \n-     *  of different types.  Override getFullElements to return\n-     *  the results of this method if your collection does not support\n-     *  the null element.\n-     */\n-    public static Object[] getFullNonNullElements() {\n-        return new Object[] {\n-            new String(\"\"),\n-            new String(\"One\"),\n-            new Integer(2),\n-            \"Three\",\n-            new Integer(4),\n-            \"One\",\n-            new Double(5),\n-            new Float(6),\n-            \"Seven\",\n-            \"Eight\",\n-            new String(\"Nine\"),\n-            new Integer(10),\n-            new Short((short)11),\n-            new Long(12),\n-            \"Thirteen\",\n-            \"14\",\n-            \"15\",\n-            new Byte((byte)16)\n-        };\n-    }\n-\n-\n-    /**\n-     *  Returns the default list of objects returned by \n-     *  {@link getOtherElements()}.  Includes many objects\n-     *  of different types.\n-     */\n-    public static Object[] getOtherNonNullElements() {\n-        return new Object[] {\n-            new Integer(0),\n-            new Float(0),\n-            new Double(0),\n-            \"Zero\",\n-            new Short((short)0),\n-            new Byte((byte)0),\n-            new Long(0),\n-            new Character('\\u0000'),\n-            \"0\"\n-        };\n-    }\n-\n-\n-\n-    /**\n-     *  Returns a list of string elements suitable for return by\n-     *  {@link getFullElements()}.  Override getFullElements to return\n-     *  the results of this method if your collection does not support\n-     *  heterogenous elements or the null element.\n-     */\n-    public static Object[] getFullNonNullStringElements() {\n-        return new Object[] {\n-            \"If\",\"the\",\"dull\",\"substance\",\"of\",\"my\",\"flesh\",\"were\",\"thought\",\n-            \"Injurious\",\"distance\",\"could\",\"not\",\"stop\",\"my\",\"way\",\n-        };\n-    }\n-\n-\n-    /**\n-     *  Returns a list of string elements suitable for return by\n-     *  {@link getOtherElements()}.  Override getOtherElements to return\n-     *  the results of this method if your collection does not support\n-     *  heterogenous elements or the null element.\n-     */\n-    public static Object[] getOtherNonNullStringElements() {\n-        return new Object[] {\n-            \"For\",\"then\",\"despite\",/* of */\"space\",\"I\",\"would\",\"be\",\"brought\",\n-            \"From\",\"limits\",\"far\",\"remote\",\"where\",\"thou\",\"dost\",\"stay\"\n-        };\n-    }\n }\n--- a/src/test/org/apache/commons/collections/TestMap.java\n+++ b/src/test/org/apache/commons/collections/TestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.23 2003/02/26 01:33:22 rwaldhoff Exp $\n- * $Revision: 1.23 $\n- * $Date: 2003/02/26 01:33:22 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.24 2003/07/12 15:47:53 scolebourne Exp $\n+ * $Revision: 1.24 $\n+ * $Date: 2003/07/12 15:47:53 $\n  *\n  * ====================================================================\n  *\n  * @author Michael Smith\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n- * @version $Revision: 1.23 $ $Date: 2003/02/26 01:33:22 $\n+ * @version $Revision: 1.24 $ $Date: 2003/07/12 15:47:53 $\n  */\n public abstract class TestMap extends TestObject {\n \n \n \n     protected Object[] getOtherKeys() {\n-        return TestCollection.getOtherNonNullStringElements();\n+        return getOtherNonNullStringElements();\n     }\n \n     protected Object[] getOtherValues() {\n-        return TestCollection.getOtherNonNullStringElements();\n+        return getOtherNonNullStringElements();\n+    }\n+\n+    /**\n+     *  Returns a list of string elements suitable for return by\n+     *  {@link getOtherElements()}.  Override getOtherElements to return\n+     *  the results of this method if your collection does not support\n+     *  heterogenous elements or the null element.\n+     */\n+    protected Object[] getOtherNonNullStringElements() {\n+        return new Object[] {\n+            \"For\",\"then\",\"despite\",/* of */\"space\",\"I\",\"would\",\"be\",\"brought\",\n+            \"From\",\"limits\",\"far\",\"remote\",\"where\",\"thou\",\"dost\",\"stay\"\n+        };\n     }\n \n     /**\n--- a/src/test/org/apache/commons/collections/TestSet.java\n+++ b/src/test/org/apache/commons/collections/TestSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestSet.java,v 1.3 2003/07/12 15:11:25 scolebourne Exp $\n- * $Revision: 1.3 $\n- * $Date: 2003/07/12 15:11:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestSet.java,v 1.4 2003/07/12 15:47:53 scolebourne Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2003/07/12 15:47:53 $\n  *\n  * ====================================================================\n  *\n  *  elements may be added; see {@link TestCollection} for more details.<P>\n  *\n  *  @author Paul Jack\n- *  @version $Id: TestSet.java,v 1.3 2003/07/12 15:11:25 scolebourne Exp $\n+ *  @version $Id: TestSet.java,v 1.4 2003/07/12 15:47:53 scolebourne Exp $\n  */\n public abstract class TestSet extends TestCollection {\n \n         assertEquals(\"Sets should be equal\", confirmed, collection);\n         assertEquals(\"Sets should have equal hashCodes\", \n                      confirmed.hashCode(), collection.hashCode());\n-        HashSet set = new HashSet();\n+        Collection set = makeConfirmedCollection();\n         Iterator iterator = collection.iterator();\n         while (iterator.hasNext()) {\n             assertTrue(\"Set.iterator should only return unique elements\", \n \n     //-----------------------------------------------------------------------\n     /**\n-     *  Returns an empty {@link HashSet} for use in modification testing.\n+     *  Returns an empty Set for use in modification testing.\n      *\n      *  @return a confirmed empty collection\n      */\n     }\n \n     /**\n-     *  Returns a full {@link HashSet} for use in modification testing.\n+     *  Returns a full Set for use in modification testing.\n      *\n      *  @return a confirmed full collection\n      */\n     protected Collection makeConfirmedFullCollection() {\n-        HashSet set = new HashSet();\n+        Collection set = makeConfirmedCollection();\n         set.addAll(Arrays.asList(getFullElements()));\n         return set;\n     }\n                      getSet(), getConfirmedSet());\n         verify();\n \n-        HashSet set2 = new HashSet();\n+        Collection set2 = makeConfirmedCollection();\n         set2.add(\"foo\");\n         assertTrue(\"Empty set shouldn't equal nonempty set\", \n                    !getSet().equals(set2));\n--- a/src/test/org/apache/commons/collections/TestSortedSet.java\n+++ b/src/test/org/apache/commons/collections/TestSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestSortedSet.java,v 1.1 2003/05/11 13:11:37 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestSortedSet.java,v 1.2 2003/07/12 15:47:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n /**\n- * Tests base {@link java.util.SortedSet} methods and contracts.\n+ * Tests base {@link SortedSet} methods and contracts.\n+ * <p>\n+ * To use, subclass and override the {@link #makeEmptySet()}\n+ * method.  You may have to override other protected methods if your\n+ * set is not modifiable, or if your set restricts what kinds of\n+ * elements may be added; see {@link TestCollection} for more details.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/11 13:11:37 $\n+ * @version $Revision: 1.2 $ $Date: 2003/07/12 15:47:53 $\n  * \n  * @author Stephen Colebourne\n+ * @author Dieter Wimberger\n  */\n public abstract class TestSortedSet extends TestSet {\n \n-    public TestSortedSet(String testName) {\n-        super(testName);\n-    }\n-    \n-    protected Object[] getFullElements() {\n-        return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n-    }\n-\n-    protected Object[] getOtherElements() {\n-        return new Object[] {\"9\", \"88\", \"678\", \"87\", \"98\", \"78\", \"99\"};\n-    }\n-\n-    // TODO: Add the SortedSet tests!\n+    /**\n+     * Constructor.\n+     *\n+     * @param name  name for test\n+     */\n+    public TestSortedSet(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Verification extension, will check the order of elements,\n+     * the sets should already be verified equal.\n+     */\n+    protected void verify() {\n+        super.verify();\n+        //Sorted sets should return in-order iterators by contract\n+        Iterator colliter = collection.iterator();\n+        Iterator confiter = confirmed.iterator();\n+        while (colliter.hasNext()) {\n+            assertEquals(\"Element appears to be out of order.\", colliter.next(), confiter.next());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Overridden because UnboundedFifoBuffer doesn't allow null elements.\n+     * @return false\n+     */\n+    protected boolean isNullSupported() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns an empty {@link TreeSet} for use in modification testing.\n+     *\n+     * @return a confirmed empty collection\n+     */\n+    protected Collection makeConfirmedCollection() {\n+        return new TreeSet();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Return the {@link TestCollection#confirmed} fixture, but cast as a\n+     * SortedSet.\n+     */\n+    protected SortedSet getConfirmedSortedSet() {\n+        return (SortedSet) confirmed;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Override to return comparable objects.\n+     */\n+    protected Object[] getFullNonNullElements() {\n+        Object[] elements = new Object[30];\n+\n+        for (int i = 0; i < 30; i++) {\n+            elements[i] = new Integer(i + i + 1);\n+        }\n+        return elements;\n+    }\n+\n+    /**\n+     * Override to return comparable objects.\n+     */\n+    protected Object[] getOtherNonNullElements() {\n+        Object[] elements = new Object[30];\n+        for (int i = 0; i < 30; i++) {\n+            elements[i] = new Integer(i + i + 2);\n+        }\n+        return elements;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Bulk test {@link SortedSet#subSet(Object, Object)}.  This method runs through all of\n+     *  the tests in {@link TestSortedSet}.\n+     *  After modification operations, {@link #verify()} is invoked to ensure\n+     *  that the set and the other collection views are still valid.\n+     *\n+     *  @return a {@link TestSet} instance for testing a subset.\n+     */\n+    public BulkTest bulkTestSortedSetSubSet() {\n+        int length = getFullElements().length;\n+\n+        int lobound = length / 3;\n+        int hibound = lobound * 2;\n+        return new TestSortedSetSubSet(lobound, hibound);\n+\n+    }\n+\n+    /**\n+     *  Bulk test {@link SortedSet#headSet(Object)}.  This method runs through all of\n+     *  the tests in {@link TestSortedSet}.\n+     *  After modification operations, {@link #verify()} is invoked to ensure\n+     *  that the set and the other collection views are still valid.\n+     *\n+     *  @return a {@link TestSet} instance for testing a headset.\n+     */\n+    public BulkTest bulkTestSortedSetHeadSet() {\n+        int length = getFullElements().length;\n+\n+        int lobound = length / 3;\n+        int hibound = lobound * 2;\n+        return new TestSortedSetSubSet(hibound, true);\n+\n+    }\n+\n+    /**\n+     *  Bulk test {@link SortedSet#tailSet(Object)}.  This method runs through all of\n+     *  the tests in {@link TestSortedSet}.\n+     *  After modification operations, {@link #verify()} is invoked to ensure\n+     *  that the set and the other collection views are still valid.\n+     *\n+     *  @return a {@link TestSet} instance for testing a tailset.\n+     */\n+    public BulkTest bulkTestSortedSetTailSet() {\n+        int length = getFullElements().length;\n+        int lobound = length / 3;\n+        return new TestSortedSetSubSet(lobound, false);\n+    }\n+\n+    class TestSortedSetSubSet extends TestSortedSet {\n+\n+        private int m_Type;\n+        private int m_LowBound;\n+        private int m_HighBound;\n+        private Object[] m_FullElements;\n+        private Object[] m_OtherElements;\n+\n+        public TestSortedSetSubSet(int bound, boolean head) {\n+            super(\"TestSortedSetSubSet\");\n+            if (head) {\n+                //System.out.println(\"HEADSET\");\n+                m_Type = TYPE_HEADSET;\n+                m_HighBound = bound;\n+                m_FullElements = new Object[bound];\n+                System.arraycopy(TestSortedSet.this.getFullElements(), 0, m_FullElements, 0, bound);\n+                m_OtherElements = new Object[bound - 1];\n+                System.arraycopy(//src src_pos dst dst_pos length\n+                TestSortedSet.this.getOtherElements(), 0, m_OtherElements, 0, bound - 1);\n+                //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n+                //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n+            } else {\n+                //System.out.println(\"TAILSET\");\n+                m_Type = TYPE_TAILSET;\n+                m_LowBound = bound;\n+                Object[] allelements = TestSortedSet.this.getFullElements();\n+                //System.out.println(\"bound = \"+bound +\"::length=\"+allelements.length);\n+                m_FullElements = new Object[allelements.length - bound];\n+                System.arraycopy(allelements, bound, m_FullElements, 0, allelements.length - bound);\n+                m_OtherElements = new Object[allelements.length - bound - 1];\n+                System.arraycopy(//src src_pos dst dst_pos length\n+                TestSortedSet.this.getOtherElements(), bound, m_OtherElements, 0, allelements.length - bound - 1);\n+                //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n+                //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n+                //resetFull();\n+                //System.out.println(collection);\n+                //System.out.println(confirmed);\n+\n+            }\n+\n+        } //type\n+\n+        public TestSortedSetSubSet(int lobound, int hibound) {\n+            super(\"TestSortedSetSubSet\");\n+            //System.out.println(\"SUBSET\");\n+            m_Type = TYPE_SUBSET;\n+            m_LowBound = lobound;\n+            m_HighBound = hibound;\n+            int length = hibound - lobound;\n+            //System.out.println(\"Low=\" + lobound + \"::High=\" + hibound + \"::Length=\" + length);\n+            m_FullElements = new Object[length];\n+            System.arraycopy(TestSortedSet.this.getFullElements(), lobound, m_FullElements, 0, length);\n+            m_OtherElements = new Object[length - 1];\n+            System.arraycopy(//src src_pos dst dst_pos length\n+            TestSortedSet.this.getOtherElements(), lobound, m_OtherElements, 0, length - 1);\n+\n+            //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n+            //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n+\n+        } //TestSortedSetSubSet\n+\n+        public boolean isNullSupported() {\n+            return TestSortedSet.this.isNullSupported();\n+        } //useNullValue\n+\n+        protected Object[] getFullElements() {\n+            //System.out.println(\"getFullElements()\");\n+            return m_FullElements;\n+        }\n+\n+        protected Object[] getOtherElements() {\n+            return m_OtherElements;\n+        }\n+\n+        private SortedSet getSubSet(SortedSet set) {\n+            Object[] elements = TestSortedSet.this.getFullElements();\n+            switch (m_Type) {\n+                case TYPE_SUBSET :\n+                    return set.subSet(elements[m_LowBound], elements[m_HighBound]);\n+                case TYPE_HEADSET :\n+                    return set.headSet(elements[m_HighBound]);\n+                case TYPE_TAILSET :\n+                    return set.tailSet(elements[m_LowBound]);\n+                default :\n+                    return null;\n+            }\n+        } //getSubSet\n+\n+        protected Set makeEmptySet() {\n+            SortedSet s = (SortedSet) TestSortedSet.this.makeFullSet();\n+            s = getSubSet(s);\n+            s.clear();\n+            return s;\n+        } //makeEmptySet\n+\n+        protected Set makeFullSet() {\n+            SortedSet s = (SortedSet) TestSortedSet.this.makeFullCollection();\n+            return getSubSet(s);\n+        } //makeFullSet\n+\n+        protected void resetFull() {\n+            TestSortedSet.this.resetFull();\n+            TestSortedSetSubSet.this.confirmed = getSubSet((SortedSet) TestSortedSet.this.confirmed);\n+            TestSortedSetSubSet.this.collection = getSubSet((SortedSet) TestSortedSet.this.collection);\n+        }\n+\n+        protected void resetEmpty() {\n+            TestSortedSetSubSet.this.resetFull();\n+            TestSortedSetSubSet.this.confirmed.clear();\n+            TestSortedSetSubSet.this.collection.clear();\n+        }\n+\n+        public BulkTest bulkTestSortedSetSubSet() {\n+            //Override returning null to prevent endless\n+            //loop of bulk tests\n+            return null;\n+        } //bulkTestSortedSetSubSet\n+\n+        public BulkTest bulkTestSortedSetHeadSet() {\n+            return null;\n+        }\n+\n+        public BulkTest bulkTestSortedSetTailSet() {\n+            return null;\n+        }\n+\n+        static final int TYPE_SUBSET = 0;\n+        static final int TYPE_TAILSET = 1;\n+        static final int TYPE_HEADSET = 2;\n+\n+    }\n+\n }\n--- a/src/test/org/apache/commons/collections/decorators/TestTransformedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestTransformedSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedSortedSet.java,v 1.1 2003/05/11 13:18:27 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedSortedSet.java,v 1.2 2003/07/12 15:47:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n package org.apache.commons.collections.decorators;\n \n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n import java.util.TreeSet;\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/11 13:18:27 $\n+ * @version $Revision: 1.2 $ $Date: 2003/07/12 15:47:53 $\n  * \n  * @author Stephen Colebourne\n  */\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    public Collection makeConfirmedCollection() {\n-        return new TreeSet();\n-    }\n-\n-    protected Collection makeConfirmedFullCollection() {\n-        Set set = new TreeSet();\n-        set.addAll(Arrays.asList(getFullElements()));\n-        return set;\n-    }\n-    \n-    public Set makeEmptySet() {\n-        return TransformedSortedSet.decorate(new HashSet(), TestTransformedCollection.NOOP_TRANSFORMER);\n+    //-----------------------------------------------------------------------\n+    protected Set makeEmptySet() {\n+        return TransformedSortedSet.decorate(new TreeSet(), TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n     protected Set makeFullSet() {\n-        Set list = new TreeSet();\n-        list.addAll(Arrays.asList(getFullElements()));\n-        return TransformedSortedSet.decorate(list, TestTransformedCollection.NOOP_TRANSFORMER);\n+        Set set = new TreeSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return TransformedSortedSet.decorate(set, TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n     \n+    //-----------------------------------------------------------------------\n     public void testTransformedSet() {\n         Set set = TransformedSortedSet.decorate(new HashSet(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(0, set.size());", "timestamp": 1058024873, "metainfo": ""}