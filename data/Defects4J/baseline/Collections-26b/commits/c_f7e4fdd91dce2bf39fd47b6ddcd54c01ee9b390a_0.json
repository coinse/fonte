{"sha": "f7e4fdd91dce2bf39fd47b6ddcd54c01ee9b390a", "log": "Added better class-level documentation as suggested by Jonathan Carlson. Also provided default implementations for many of the abstract methods in Abstract*List.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/AbstractIntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/21 23:54:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/22 01:50:54 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * Abstract base class for lists backed by an <Code>int</Code> array.\n+ * Abstract base class for lists of primitive <Code>int</Code> elements\n+ * backed by an array.<P>\n  *\n- * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n+ * Extending this class is essentially the same as extending its superclass\n+ * ({@link AbstractIntList}.  However, this class assumes that the \n+ * primitive values will be stored in an underlying primitive array, and\n+ * provides methods for manipulating the capacity of that array.<P>\n+ *\n+ * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n  * @author Rodney Waldhoff \n  */\n public abstract class AbstractIntArrayList extends AbstractIntList {\n--- a/src/java/org/apache/commons/collections/primitives/AbstractIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntList.java,v 1.2 2002/08/21 23:54:18 pjack Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/21 23:54:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntList.java,v 1.3 2002/08/22 01:50:54 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/22 01:50:54 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * Abstract base class for lists backed by an <Code>int</Code> array.\n- *\n- * @version $Revision: 1.2 $ $Date: 2002/08/21 23:54:18 $\n+ * Abstract base class for lists of primitive <Code>int</Code> elements.<P>\n+ *\n+ * The {@link List} methods are all implemented, but they forward to \n+ * abstract methods that operate on <Code>int</Code> elements.  For \n+ * instance, the {@link #get(int)} method simply forwards to \n+ * {@link #getInt(int)}.  The primitive <Code>int</Code> that is \n+ * returned from {@link #getInt(int)} is wrapped in a {@link java.lang.Integer}\n+ * and returned from {@link #get(int)}.<p>\n+ *\n+ * Concrete implementations offer substantial memory savings by not storing\n+ * primitives as wrapped objects.  If you excuslively use the primitive \n+ * signatures, there can also be substantial performance gains, since \n+ * temporary wrapper objects do not need to be created.<p>\n+ *\n+ * To implement a read-only list of <Code>int</Code> elements, you need\n+ * only implement the {@link #getInt(int)} and {@link #size()} methods.\n+ * To implement a modifiable list, you will also need to implement the\n+ * {@link #setInt(int,int)}, {@link #addInt(int,int)}, \n+ * {@link #removeIntAt(int)} and {@link #clear()} methods.  You may want \n+ * to override the other methods to increase performance.<P>\n+ *\n+ * @version $Revision: 1.3 $ $Date: 2002/08/22 01:50:54 $\n  * @author Rodney Waldhoff \n  */\n public abstract class AbstractIntList extends AbstractList {\n      */\n     abstract public int getInt(int index);\n \n-\n+    //--------------------------------------------------------------- Accessors\n+    \n     /**\n      *  Returns <Code>true</Code> if this list contains the given \n-     *  <Code>int</Code> element.\n+     *  <Code>int</Code> element.  The default implementation uses \n+     *  {@link #indexOfInt(int)} to determine if the given value is\n+     *  in this list.\n      *\n      *  @param value  the element to search for\n      *  @return true if this list contains the given value, false otherwise\n      */\n-    abstract public boolean containsInt(int value);\n-\n+    public boolean containsInt(int value) {\n+        return indexOfInt(value) >= 0;\n+    }\n \n     /**\n      *  Returns the first index of the given <Code>int</Code> element, or\n-     *  -1 if the value is not in this list.\n+     *  -1 if the value is not in this list.  The default implementation is:\n+     *\n+     *  <pre>\n+     *   for (int i = 0; i < size(); i++) {\n+     *       if (getInt(i) == value) return i;\n+     *   }\n+     *   return -1;\n+     *  </pre>\n      *\n      *  @param value  the element to search for\n      *  @return  the first index of that element, or -1 if the element is\n      *    not in this list\n      */\n-    abstract public int indexOfInt(int value);\n-\n+    public int indexOfInt(int value) {\n+        for (int i = 0; i < size(); i++) {\n+            if (getInt(i) == value) return i;\n+        }\n+        return -1;\n+    }\n \n     /**\n      *  Returns the last index of the given <Code>int</Code> element, or\n-     *  -1 if the value is not in this list.\n+     *  -1 if the value is not in this list.  The default implementation is:\n+     *\n+     *  <pre>\n+     *   for (int i = size() - 1; i >= 0; i--) {\n+     *       if (getInt(i) == value) return i;\n+     *   }\n+     *   return -1;\n+     *  </pre>\n      *\n      *  @param value  the element to search for\n      *  @return  the last index of that element, or -1 if the element is\n      *    not in this list\n      */\n-    abstract public int lastIndexOfInt(int value);\n-\n-    //--------------------------------------------------------------- Accessors\n-    \n+    public int lastIndexOfInt(int value) {\n+        for (int i = size() - 1; i >= 0; i--) {\n+            if (getInt(i) == value) return i;\n+        }\n+        return -1;\n+    }\n+\n     /** \n      *  Returns <code>new Integer({@link #getInt getInt(index)})</code>. \n      *\n     abstract public int setInt(int index, int value);\n \n     /**\n-     *  Adds the given <Code>int</Code> value to the end of this list.\n-     *\n-     *  @param value  the value to add\n-     *  @return  true, always\n-     */\n-    abstract public boolean addInt(int value);\n-\n-\n-    /**\n      *  Inserts the given <Code>int</Code> value into this list at the\n      *  specified index.\n      *\n      */\n     abstract public int removeIntAt(int index);\n \n-\n-    /**\n-     *  Removes the first occurrence of the given <Code>int</COde> value\n-     *  from this list.\n+    /**\n+     *  Removes all <Code>int</Code> values from this list.\n+     */\n+    abstract public void clear();\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    /**\n+     *  Adds the given <Code>int</Code> value to the end of this list.\n+     *  The default implementation invokes {@link #addInt(int,int)\n+     *  addInt(size(), value)}.\n+     *\n+     *  @param value  the value to add\n+     *  @return  true, always\n+     */\n+    public boolean addInt(int value) {\n+        addInt(size(), value);\n+        return true;\n+    }\n+\n+    /**\n+     *  Removes the first occurrence of the given <Code>int</Code> value\n+     *  from this list.  The default implementation is:\n+     *\n+     *  <pre>\n+     *   int i = indexOfInt(value);\n+     *   if (i < 0) return false;\n+     *   removeIntAt(i);\n+     *   return true;\n+     *  </pre>\n      *\n      *  @param value  the value to remove\n      *  @return  true if this list contained that value and removed it,\n      *   or false if this list didn't contain the value\n      */\n-    abstract public boolean removeInt(int value);\n-\n-    /**\n-     *  Removes all <Code>int</Code> values from this list.\n-     */\n-    abstract public void clear();\n-\n-    //--------------------------------------------------------------- Modifiers\n-    \n+    public boolean removeInt(int value) {\n+        int i = indexOfInt(value);\n+        if (i < 0) return false;\n+        removeIntAt(i);\n+        return true;\n+    }\n+\n     /** \n      * Returns <code>new Integer({@link #setInt(int,int) \n      * setInt(index,((Integer)value).intValue())})</code>. \n--- a/src/java/org/apache/commons/collections/primitives/AbstractLongArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractLongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/21 23:54:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/22 01:50:54 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * Abstract base class for lists backed by a <Code>long</Code> array.\n+ * Abstract base class for lists of primitive <Code>long</Code> elements\n+ * backed by an array.<P>\n  *\n- * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n+ * Extending this class is essentially the same as extending its superclass\n+ * ({@link AbstractLongList}.  However, this class assumes that the \n+ * primitive values will be stored in an underlying primitive array, and\n+ * provides methods for manipulating the capacity of that array.<P>\n+ *\n+ * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n  * @author Rodney Waldhoff \n  */\n public abstract class AbstractLongArrayList extends AbstractLongList {\n--- a/src/java/org/apache/commons/collections/primitives/AbstractLongList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractLongList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongList.java,v 1.2 2002/08/21 23:54:18 pjack Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/21 23:54:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongList.java,v 1.3 2002/08/22 01:50:54 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/22 01:50:54 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * Abstract base class for lists backed by a <Code>long</Code> array.\n- *\n- * @version $Revision: 1.2 $ $Date: 2002/08/21 23:54:18 $\n+ * Abstract base class for lists of primitive <Code>long</Code> elements.<P>\n+ *\n+ * The {@link List} methods are all implemented, but they forward to \n+ * abstract methods that operate on <Code>long</Code> elements.  For \n+ * instance, the {@link #get(int)} method simply forwards to \n+ * {@link #getLong(int)}.  The primitive <Code>long</Code> that is \n+ * returned from {@link #getLong(int)} is wrapped in a {@link java.lang.Long}\n+ * and returned from {@link #get(int)}.<p>\n+ *\n+ * Concrete implementations offer substantial memory savings by not storing\n+ * primitives as wrapped objects.  If you excuslively use the primitive \n+ * signatures, there can also be substantial performance gains, since \n+ * temporary wrapper objects do not need to be created.<p>\n+ *\n+ * To implement a read-only list of <Code>long</Code> elements, you need\n+ * only implement the {@link #getLong(int)} and {@link #size()} methods.\n+ * To implement a modifiable list, you will also need to implement the\n+ * {@link #setLong(int,long)}, {@link #addLong(int,long)}, \n+ * {@link #removeLongAt(int)} and {@link #clear()} methods.  You may want \n+ * to override the other methods to increase performance.<P>\n+ *\n+ * @version $Revision: 1.3 $ $Date: 2002/08/22 01:50:54 $\n  * @author Rodney Waldhoff \n  */\n public abstract class AbstractLongList extends AbstractList {\n      */\n     abstract public long getLong(int index);\n \n+    //--------------------------------------------------------------- Accessors\n+    \n     /**\n      *  Returns <Code>true</Code> if this list contains the given \n-     *  <Code>long</Code> element.\n+     *  <Code>long</Code> element.  The default implementation uses \n+     *  {@link #indexOfLong(long)} to determine if the given value is\n+     *  in this list.\n      *\n      *  @param value  the element to search for\n      *  @return true if this list contains the given value, false otherwise\n      */\n-    abstract public boolean containsLong(long value);\n+    public boolean containsLong(long value) {\n+        return indexOfLong(value) >= 0;\n+    }\n \n     /**\n      *  Returns the first index of the given <Code>long</Code> element, or\n-     *  -1 if the value is not in this list.\n+     *  -1 if the value is not in this list.  The default implementation is:\n+     *\n+     *  <pre>\n+     *   for (int i = 0; i < size(); i++) {\n+     *       if (getLong(i) == value) return i;\n+     *   }\n+     *   return -1;\n+     *  </pre>\n      *\n      *  @param value  the element to search for\n      *  @return  the first index of that element, or -1 if the element is\n      *    not in this list\n      */\n-    abstract public int indexOfLong(long value);\n+    public int indexOfLong(long value) {\n+        for (int i = 0; i < size(); i++) {\n+            if (getLong(i) == value) return i;\n+        }\n+        return -1;\n+    }\n \n     /**\n      *  Returns the last index of the given <Code>long</Code> element, or\n-     *  -1 if the value is not in this list.\n+     *  -1 if the value is not in this list.  The default implementation is:\n+     *\n+     *  <pre>\n+     *   for (int i = size() - 1; i >= 0; i--) {\n+     *       if (getLong(i) == value) return i;\n+     *   }\n+     *   return -1;\n+     *  </pre>\n      *\n      *  @param value  the element to search for\n      *  @return  the last index of that element, or -1 if the element is\n      *    not in this list\n      */\n-    abstract public int lastIndexOfLong(long value);\n-\n-    //--------------------------------------------------------------- Accessors\n-    \n+    public int lastIndexOfLong(long value) {\n+        for (int i = size() - 1; i >= 0; i--) {\n+            if (getLong(i) == value) return i;\n+        }\n+        return -1;\n+    }\n+\n     /** \n      *  Returns <code>new Long({@link #getLong getLong(index)})</code>. \n      *\n     abstract public long setLong(int index, long value);\n \n     /**\n-     *  Adds the given <Code>long</Code> value to the end of this list.\n-     *\n-     *  @param value  the value to add\n-     *  @return  true, always\n-     */\n-    abstract public boolean addLong(long value);\n-\n-    /**\n      *  Inserts the given <Code>long</Code> value into this list at the\n      *  specified index.\n      *\n     abstract public long removeLongAt(int index);\n \n     /**\n+     *  Removes all <Code>long</Code> values from this list.\n+     */\n+    abstract public void clear();\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    /**\n+     *  Adds the given <Code>long</Code> value to the end of this list.\n+     *  The default implementation invokes {@link #addLong(int,long)\n+     *  addLong(size(), value)}.\n+     *\n+     *  @param value  the value to add\n+     *  @return  true, always\n+     */\n+    public boolean addLong(long value) {\n+        addLong(size(), value);\n+        return true;\n+    }\n+\n+    /**\n      *  Removes the first occurrence of the given <Code>long</Code> value\n-     *  from this list.\n+     *  from this list.  The default implementation is:\n+     *\n+     *  <pre>\n+     *   int i = indexOfLong(value);\n+     *   if (i < 0) return false;\n+     *   removeLongAt(i);\n+     *   return true;\n+     *  </pre>\n      *\n      *  @param value  the value to remove\n      *  @return  true if this list contained that value and removed it,\n      *   or false if this list didn't contain the value\n      */\n-    abstract public boolean removeLong(long value);\n-\n-    /**\n-     *  Removes all <Code>long</Code> values from this list.\n-     */\n-    abstract public void clear();\n-\n-    //--------------------------------------------------------------- Modifiers\n-    \n+    public boolean removeLong(long value) {\n+        int i = indexOfLong(value);\n+        if (i < 0) return false;\n+        removeLongAt(i);\n+        return true;\n+    }\n+\n     /** \n      * Returns <code>new Long({@link #setLong(int,long) \n      * setLong(index,((Long).longValue())})</code>. \n--- a/src/java/org/apache/commons/collections/primitives/AbstractShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/21 23:54:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/22 01:50:54 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * Abstract base class for lists backed by a <Code>short</Code> array.\n+ * Abstract base class for lists of primitive <Code>short</Code> elements\n+ * backed by an array.<P>\n  *\n- * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n+ * Extending this class is essentially the same as extending its superclass\n+ * ({@link AbstractShortList}.  However, this class assumes that the \n+ * primitive values will be stored in an underlying primitive array, and\n+ * provides methods for manipulating the capacity of that array.<P>\n+ *\n+ * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n  * @author Rodney Waldhoff \n  */\n public abstract class AbstractShortArrayList extends AbstractShortList {\n--- a/src/java/org/apache/commons/collections/primitives/AbstractShortList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortList.java,v 1.2 2002/08/21 23:54:18 pjack Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/21 23:54:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortList.java,v 1.3 2002/08/22 01:50:54 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/22 01:50:54 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * Abstract base class for lists backed by a <Code>short</Code> array.\n- *\n- * @version $Revision: 1.2 $ $Date: 2002/08/21 23:54:18 $\n+ * Abstract base class for lists of primitive <Code>short</Code> elements.<P>\n+ *\n+ * The {@link List} methods are all implemented, but they forward to \n+ * abstract methods that operate on <Code>short</Code> elements.  For \n+ * instance, the {@link #get(int)} method simply forwards to \n+ * {@link #getShort(int)}.  The primitive <Code>short</Code> that is \n+ * returned from {@link #getShort(int)} is wrapped in a {@link java.lang.Short}\n+ * and returned from {@link #get(int)}.<p>\n+ *\n+ * Concrete implementations offer substantial memory savings by not storing\n+ * primitives as wrapped objects.  If you excuslively use the primitive \n+ * signatures, there can also be substantial performance gains, since \n+ * temporary wrapper objects do not need to be created.<p>\n+ *\n+ * To implement a read-only list of <Code>short</Code> elements, you need\n+ * only implement the {@link #getShort(int)} and {@link #size()} methods.\n+ * To implement a modifiable list, you will also need to implement the\n+ * {@link #setShort(int,short)}, {@link #addShort(int,short)}, \n+ * {@link #removeShortAt(int)} and {@link #clear()} methods.  You may want \n+ * to override the other methods to increase performance.<P>\n+ *\n+ * @version $Revision: 1.3 $ $Date: 2002/08/22 01:50:54 $\n  * @author Rodney Waldhoff \n  */\n public abstract class AbstractShortList extends AbstractList {\n      */\n     abstract public short getShort(int index);\n \n+    //--------------------------------------------------------------- Accessors\n+    \n     /**\n      *  Returns <Code>true</Code> if this list contains the given \n-     *  <Code>short</Code> element.\n+     *  <Code>short</Code> element.  The default implementation uses \n+     *  {@link #indexOfShort(short)} to determine if the given value is\n+     *  in this list.\n      *\n      *  @param value  the element to search for\n      *  @return true if this list contains the given value, false otherwise\n      */\n-    abstract public boolean containsShort(short value);\n+    public boolean containsShort(short value) {\n+        return indexOfShort(value) >= 0;\n+    }\n \n     /**\n      *  Returns the first index of the given <Code>short</Code> element, or\n-     *  -1 if the value is not in this list.\n+     *  -1 if the value is not in this list.  The default implementation is:\n+     *\n+     *  <pre>\n+     *   for (int i = 0; i < size(); i++) {\n+     *       if (getShort(i) == value) return i;\n+     *   }\n+     *   return -1;\n+     *  </pre>\n      *\n      *  @param value  the element to search for\n      *  @return  the first index of that element, or -1 if the element is\n      *    not in this list\n      */\n-    abstract public int indexOfShort(short value);\n+    public int indexOfShort(short value) {\n+        for (int i = 0; i < size(); i++) {\n+            if (getShort(i) == value) return i;\n+        }\n+        return -1;\n+    }\n \n     /**\n      *  Returns the last index of the given <Code>short</Code> element, or\n-     *  -1 if the value is not in this list.\n+     *  -1 if the value is not in this list.  The default implementation is:\n+     *\n+     *  <pre>\n+     *   for (int i = size() - 1; i >= 0; i--) {\n+     *       if (getShort(i) == value) return i;\n+     *   }\n+     *   return -1;\n+     *  </pre>\n      *\n      *  @param value  the element to search for\n      *  @return  the last index of that element, or -1 if the element is\n      *    not in this list\n      */\n-    abstract public int lastIndexOfShort(short value);\n-\n-    //--------------------------------------------------------------- Accessors\n-    \n+    public int lastIndexOfShort(short value) {\n+        for (int i = size() - 1; i >= 0; i--) {\n+            if (getShort(i) == value) return i;\n+        }\n+        return -1;\n+    }\n+\n     /** \n      *  Returns <code>new Short({@link #getShort getShort(index)})</code>. \n      *\n     abstract public short setShort(int index, short value);\n \n     /**\n-     *  Adds the given <Code>short</Code> value to the end of this list.\n-     *\n-     *  @param value  the value to add\n-     *  @return  true, always\n-     */\n-    abstract public boolean addShort(short value);\n-\n-    /**\n      *  Inserts the given <Code>short</Code> value into this list at the\n      *  specified index.\n      *\n     abstract public short removeShortAt(int index);\n \n     /**\n+     *  Removes all <Code>short</Code> values from this list.\n+     */\n+    abstract public void clear();\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    /**\n+     *  Adds the given <Code>short</Code> value to the end of this list.\n+     *  The default implementation invokes {@link #addShort(int,short)\n+     *  addShort(size(), value)}.\n+     *\n+     *  @param value  the value to add\n+     *  @return  true, always\n+     */\n+    public boolean addShort(short value) {\n+        addShort(size(), value);\n+        return true;\n+    }\n+\n+    /**\n      *  Removes the first occurrence of the given <Code>short</Code> value\n-     *  from this list.\n+     *  from this list.  The default implementation is:\n+     *\n+     *  <pre>\n+     *   int i = indexOfShort(value);\n+     *   if (i < 0) return false;\n+     *   removeShortAt(i);\n+     *   return true;\n+     *  </pre>\n      *\n      *  @param value  the value to remove\n      *  @return  true if this list contained that value and removed it,\n      *   or false if this list didn't contain the value\n      */\n-    abstract public boolean removeShort(short value);\n-\n-    /**\n-     *  Removes all <Code>short</Code> values from this list.\n-     */\n-    abstract public void clear();\n-\n-    //--------------------------------------------------------------- Modifiers\n-    \n+    public boolean removeShort(short value) {\n+        int i = indexOfShort(value);\n+        if (i < 0) return false;\n+        removeShortAt(i);\n+        return true;\n+    }\n+\n     /** \n      * Returns <code>new Short({@link #setShort(int,short) \n      * setShort(index,((Short)value.shortValue())})</code>. \n--- a/src/java/org/apache/commons/collections/primitives/IntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/21 23:54:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/22 01:50:54 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * A list of <Code>int</Code> elements.\n- *\n- * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n+ * A list of <Code>int</Code> elements backed by an <Code>int</Code> array.\n+ * This class implements the {@link List} interface for an array of \n+ * <Code>int</Code> values.  This class uses less memory than an\n+ * {@link java.util.ArrayList} of {@link Integer} values and allows for\n+ * better compile-time type checking.<P>\n+ *\n+ * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n  * @author Rodney Waldhoff \n  */\n public class IntArrayList extends AbstractIntArrayList implements Serializable {\n--- a/src/java/org/apache/commons/collections/primitives/LongArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/LongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/LongArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/21 23:54:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/LongArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/22 01:50:54 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * A list of <Code>long</COde> elements.\n- *\n- * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n+ * A list of <Code>long</Code> elements backed by a <Code>long</Code> array.\n+ * This class implements the {@link List} interface for an array of \n+ * <Code>long</Code> values.  This class uses less memory than an\n+ * {@link java.util.ArrayList} of {@link Long} values and allows for\n+ * better compile-time type checking.<P>\n+ *\n+ * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n  * @author Rodney Waldhoff \n  */\n public class LongArrayList extends AbstractLongArrayList implements Serializable {\n--- a/src/java/org/apache/commons/collections/primitives/ShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ShortArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/21 23:54:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ShortArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/22 01:50:54 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * A list of <Code>short</Code> elements.\n- * \n- * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n+ * A list of <Code>short</Code> elements backed by an <Code>short</Code> array.\n+ * This class implements the {@link List} interface for an array of \n+ * <Code>short</Code> values.  This class uses less memory than an\n+ * {@link java.util.ArrayList} of {@link Short} values and allows for\n+ * better compile-time type checking.<P>\n+ *\n+ * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n  * @author Rodney Waldhoff \n  */\n public class ShortArrayList extends AbstractShortArrayList implements Serializable {\n--- a/src/java/org/apache/commons/collections/primitives/UnsignedByteArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedByteArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedByteArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/21 23:54:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedByteArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/22 01:50:54 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * A list of unsigned 8-bit values, stored in a <Code>short</Code> array.\n+ * A list of unsigned 8-bit values backed by a <Code>byte</Code> array.\n+ * The unsigned 8-bit values are converted to and from a signed 8-bit\n+ * <code>byte</code> that's stored in the stored in the array.  \n  * Mutators on this class will reject any <Code>short</Code> that does not\n- * express an unsigned 8-bit value.\n- *\n- * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n+ * express an unsigned 8-bit value.  This implementation uses less memory\n+ * than a {@link java.util.ArrayList} and offers better compile-time type\n+ * checking.\n+ *\n+ * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n  * @author Rodney Waldhoff \n  */\n public class UnsignedByteArrayList extends AbstractShortArrayList implements Serializable {\n--- a/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/21 23:54:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/22 01:50:54 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * A list of unsigned 32-bit values, stored in a <Code>long</Code> array.\n+ * A list of unsigned 32-bit values backed by an <Code>int</Code> array.\n+ * The unsigned 32-bit values are converted to and from a signed 32-bit\n+ * <code>int</code> that's stored in the stored in the array.  \n  * Mutators on this class will reject any <Code>long</Code> that does not\n- * express an unsigned 16-bit value.\n- *\n- * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n+ * express an unsigned 32-bit value.  This implementation uses less memory\n+ * than a {@link java.util.ArrayList} and offers better compile-time type\n+ * checking.\n+ *\n+ * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n  * @author Rodney Waldhoff \n  */\n public class UnsignedIntArrayList extends AbstractLongArrayList implements Serializable {\n--- a/src/java/org/apache/commons/collections/primitives/UnsignedShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedShortArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/21 23:54:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedShortArrayList.java,v 1.5 2002/08/22 01:50:54 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/22 01:50:54 $\n  *\n  * ====================================================================\n  *\n import java.util.ListIterator;\n \n /**\n- * A list of unsigned 16-bit values, stored in an <Code>int</Code> array.\n+ * A list of unsigned 16-bit values backed by a <Code>short</Code> array.\n+ * The unsigned 8-bit values are converted to and from a signed 16-bit\n+ * <code>short</code> that's stored in the stored in the array.  \n  * Mutators on this class will reject any <Code>int</Code> that does not\n- * express an unsigned 16-bit value.\n- *\n- * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n+ * express an unsigned 16-bit value.  This implementation uses less memory\n+ * than a {@link java.util.ArrayList} and offers better compile-time type\n+ * checking.\n+ *\n+ * @version $Revision: 1.5 $ $Date: 2002/08/22 01:50:54 $\n  * @author Rodney Waldhoff \n  */\n public class UnsignedShortArrayList extends AbstractIntArrayList implements Serializable {", "timestamp": 1029981054, "metainfo": ""}