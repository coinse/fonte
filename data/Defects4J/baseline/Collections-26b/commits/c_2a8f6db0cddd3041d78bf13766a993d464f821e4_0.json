{"sha": "2a8f6db0cddd3041d78bf13766a993d464f821e4", "log": "Removing javadoc errors bug 31519, from Olaf Krische   ", "commit": "\n--- a/src/java/org/apache/commons/collections/comparators/BooleanComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/BooleanComparator.java\n  * @see #getBooleanComparator(boolean)\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.14 $ $Date: 2004/05/16 11:56:47 $\n+ * @version $Revision: 1.15 $ $Date: 2004/10/16 21:26:14 $\n  * \n  * @author Rodney Waldhoff\n  */\n     \n     /**\n      * Compares two non-<code>null</code> <code>Boolean</code> objects\n-     * according to the value of {@link #trueFirst}.\n+     * according to the value of {@link #sortsTrueFirst()}.\n      * \n      * @param b1  the first boolean to compare\n      * @param b2  the second boolean to compare\n      * <p>\n      * This implementation returns <code>true</code>\n      * iff <code><i>that</i></code> is a {@link BooleanComparator} \n-     * whose {@link #trueFirst} value is equal to mine.\n+     * whose value of {@link #sortsTrueFirst()} is equal to mine.\n      * \n      * @param object  the object to compare to\n      * @return true if equal\n--- a/src/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/java/org/apache/commons/collections/map/LRUMap.java\n  * <code>ResettableIterator</code> and calling <code>reset()</code>.\n  * \n  * @since Commons Collections 3.0 (previously in main package v1.0)\n- * @version $Revision: 1.14 $ $Date: 2004/06/07 22:13:53 $\n+ * @version $Revision: 1.15 $ $Date: 2004/10/16 21:26:14 $\n  *\n  * @author James Strachan\n  * @author Morgan Delagrange\n      * Updates an existing key-value mapping.\n      * <p>\n      * This implementation moves the updated entry to the top of the list\n-     * using {@link #moveToMRU(LinkEntry)}.\n+     * using {@link #moveToMRU(AbstractLinkedMap.LinkEntry)}.\n      * \n      * @param entry  the entry to update\n      * @param newValue  the new value to store\n      * Adds a new key-value mapping into this map.\n      * <p>\n      * This implementation checks the LRU size and determines whether to\n-     * discard an entry or not using {@link #removeLRU(LinkEntry)}.\n+     * discard an entry or not using {@link #removeLRU(AbstractLinkedMap.LinkEntry)}.\n      * <p>\n      * From Commons Collections 3.1 this method uses {@link #isFull()} rather\n      * than accessing <code>size</code> and <code>maxSize</code> directly.\n--- a/src/java/org/apache/commons/collections/map/MultiKeyMap.java\n+++ b/src/java/org/apache/commons/collections/map/MultiKeyMap.java\n  * </pre>\n  *\n  * @since Commons Collections 3.1\n- * @version $Revision: 1.3 $ $Date: 2004/06/07 21:00:58 $\n+ * @version $Revision: 1.4 $ $Date: 2004/10/16 21:26:14 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Puts all the keys and values into this map.\n+     * Copies all of the keys and values from the specified map to this map.\n      * Each key must be non-null and a MultiKey object.\n      * \n-     * @param key  the non-null MultiKey object\n-     * @param value  the value to store\n-     * @return the previous value for the key\n+     * @param mapToCopy  to this map\n      * @throws NullPointerException if the mapToCopy or any key within is null\n-     * @throws ClassCastException if any key is not a MultiKey\n+     * @throws ClassCastException if any key in mapToCopy is not a MultiKey\n      */\n     public void putAll(Map mapToCopy) {\n         for (Iterator it = mapToCopy.keySet().iterator(); it.hasNext();) {\n--- a/src/java/org/apache/commons/collections/map/ReferenceIdentityMap.java\n+++ b/src/java/org/apache/commons/collections/map/ReferenceIdentityMap.java\n  * This map will violate the detail of various Map and map view contracts.\n  * As a general rule, don't compare this map to other maps.\n  * <p>\n- * This {@link Map} implementation does <i>not</i> allow null elements.\n+ * This {@link java.util.Map Map} implementation does <i>not</i> allow null elements.\n  * Attempting to add a null key or value to the map will raise a <code>NullPointerException</code>.\n  * <p>\n  * This implementation is not synchronized.\n  * @see java.lang.ref.Reference\n  * \n  * @since Commons Collections 3.0 (previously in main package v2.1)\n- * @version $Revision: 1.1 $ $Date: 2004/04/27 21:37:32 $\n+ * @version $Revision: 1.2 $ $Date: 2004/10/16 21:26:14 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/map/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/map/ReferenceMap.java\n  * If non-hard references are used, then the garbage collector can remove\n  * mappings if a key or value becomes unreachable, or if the JVM's memory is\n  * running low. For information on how the different reference types behave,\n- * see {@link Reference}.\n+ * see {@link java.lang.ref.Reference Reference}.\n  * <p>\n  * Different types of references can be specified for keys and values.\n  * The keys can be configured to be weak but the values hard,\n  * {@link org.apache.commons.collections.map.ReferenceIdentityMap ReferenceIdentityMap}.\n  * It differs in that keys and values in this class are compared using <code>equals()</code>.\n  * <p>\n- * This {@link Map} implementation does <i>not</i> allow null elements.\n+ * This {@link java.util.Map Map} implementation does <i>not</i> allow null elements.\n  * Attempting to add a null key or value to the map will raise a <code>NullPointerException</code>.\n  * <p>\n  * This implementation is not synchronized.\n  * @see java.lang.ref.Reference\n  * \n  * @since Commons Collections 3.0 (previously in main package v2.1)\n- * @version $Revision: 1.13 $ $Date: 2004/04/27 21:35:23 $\n+ * @version $Revision: 1.14 $ $Date: 2004/10/16 21:26:14 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/map/SingletonMap.java\n+++ b/src/java/org/apache/commons/collections/map/SingletonMap.java\n  * </ul>\n  * \n  * @since Commons Collections 3.1\n- * @version $Revision: 1.1 $ $Date: 2004/04/09 14:46:35 $\n+ * @version $Revision: 1.2 $ $Date: 2004/10/16 21:26:14 $\n  *\n  * @author Stephen Colebourne\n  */\n     /**\n      * Constructor specifying the key and value as a <code>MapEntry</code>.\n      *\n-     * @param keyValue  the key value pair to use\n-     */\n-    public SingletonMap(Map.Entry entry) {\n+     * @param mapEntry  the mapEntry to use\n+     */\n+    public SingletonMap(Map.Entry mapEntry) {\n         super();\n-        this.key = entry.getKey();\n-        this.value = entry.getValue();\n+        this.key = mapEntry.getKey();\n+        this.value = mapEntry.getValue();\n     }\n \n     /**", "timestamp": 1097961974, "metainfo": ""}