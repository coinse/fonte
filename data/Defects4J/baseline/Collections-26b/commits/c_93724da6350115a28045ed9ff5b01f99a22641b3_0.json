{"sha": "93724da6350115a28045ed9ff5b01f99a22641b3", "log": "CollectionUtils/MapUtils.isEmpty/isNotEmpty - Null-safe checks of collection emptyness bug 35890, from Stephen Smith CollectionUtils.sizeIsEmpty - Checks if a collection, array, map, iterator or enumeration is empty  ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * @author Steven Melzer\n  * @author Jon Schewe\n  * @author Neil O'Toole\n+ * @author Stephen Smith\n  */\n public class CollectionUtils {\n \n     }\n     \n     /**\n+     * Checks if the specified collection/array/iterator is empty.\n+     * <p>\n+     * This method can handles objects as follows\n+     * <ul>\n+     * <li>Collection - via collection isEmpty\n+     * <li>Map - via map isEmpty\n+     * <li>Array - using array size\n+     * <li>Iterator - via hasNext\n+     * <li>Enumeration - via hasMoreElements\n+     * </ul>\n+     * <p>\n+     * Note: This method is named to avoid clashing with\n+     * {@link #isEmpty(Collection)}.\n+     * \n+     * @param object  the object to get the size of, not null\n+     * @return true if empty\n+     * @throws IllegalArgumentException thrown if object is not recognised or null\n+     * @since Commons Collections 3.2\n+     */\n+    public static boolean sizeIsEmpty(Object object) {\n+        if (object instanceof Collection) {\n+            return ((Collection) object).isEmpty();\n+        } else if (object instanceof Map) {\n+            return ((Map) object).isEmpty();\n+        } else if (object instanceof Object[]) {\n+            return ((Object[]) object).length == 0;\n+        } else if (object instanceof Iterator) {\n+            return ((Iterator) object).hasNext() == false;\n+        } else if (object instanceof Enumeration) {\n+            return ((Enumeration) object).hasMoreElements() == false;\n+        } else if (object == null) {\n+            throw new IllegalArgumentException(\"Unsupported object type: null\");\n+        } else {\n+            try {\n+                return Array.getLength(object) == 0;\n+            } catch (IllegalArgumentException ex) {\n+                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n+            }\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Null-safe check if the specified collection is empty.\n+     * <p>\n+     * Null returns true.\n+     * \n+     * @param coll  the collection to check, may be null\n+     * @return true if empty or null\n+     * @since Commons Collections 3.2\n+     */\n+    public static boolean isEmpty(Collection coll) {\n+        return (coll == null || coll.isEmpty());\n+    }\n+\n+    /**\n+     * Null-safe check if the specified collection is not empty.\n+     * <p>\n+     * Null returns false.\n+     * \n+     * @param coll  the collection to check, may be null\n+     * @return true if non-null and non-empty\n+     * @since Commons Collections 3.2\n+     */\n+    public static boolean isNotEmpty(Collection coll) {\n+        return !CollectionUtils.isEmpty(coll);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Reverses the order of the given array.\n      * \n      * @param array  the array to reverse\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n import java.io.PrintStream;\n import java.text.NumberFormat;\n import java.text.ParseException;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.Enumeration;\n import java.util.HashMap;\n         return map;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Null-safe check if the specified map is empty.\n+     * <p>\n+     * Null returns true.\n+     * \n+     * @param map  the map to check, may be null\n+     * @return true if empty or null\n+     * @since Commons Collections 3.2\n+     */\n+    public static boolean isEmpty(Map map) {\n+        return (map == null || map.isEmpty());\n+    }\n+\n+    /**\n+     * Null-safe check if the specified map is not empty.\n+     * <p>\n+     * Null returns false.\n+     * \n+     * @param map  the map to check, may be null\n+     * @return true if non-null and non-empty\n+     * @since Commons Collections 3.2\n+     */\n+    public static boolean isNotEmpty(Map map) {\n+        return !MapUtils.isEmpty(map);\n+    }\n+\n     // Map decorators\n     //-----------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * @author Phil Steitz\n  * @author Steven Melzer\n  * @author Neil O'Toole\n+ * @author Stephen Smith\n  * \n  * @version $Revision$ $Date$\n  */\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testSize_List() {\n         List list = new ArrayList();\n         assertEquals(0, CollectionUtils.size(list));\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {}\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n+    public void testSizeIsEmpty_List() {\n+        List list = new ArrayList();\n+        assertEquals(true, CollectionUtils.sizeIsEmpty(list));\n+        list.add(\"a\");\n+        assertEquals(false, CollectionUtils.sizeIsEmpty(list));\n+    }\n+    public void testSizeIsEmpty_Map() {\n+        Map map = new HashMap();\n+        assertEquals(true, CollectionUtils.sizeIsEmpty(map));\n+        map.put(\"1\", \"a\");\n+        assertEquals(false, CollectionUtils.sizeIsEmpty(map));\n+    }\n+    public void testSizeIsEmpty_Array() {\n+        Object[] objectArray = new Object[0];\n+        assertEquals(true, CollectionUtils.sizeIsEmpty(objectArray));\n+        \n+        String[] stringArray = new String[3];\n+        assertEquals(false, CollectionUtils.sizeIsEmpty(stringArray));\n+        stringArray[0] = \"a\";\n+        stringArray[1] = \"b\";\n+        stringArray[2] = \"c\";\n+        assertEquals(false, CollectionUtils.sizeIsEmpty(stringArray));\n+    }\n+    public void testSizeIsEmpty_PrimitiveArray() {\n+        int[] intArray = new int[0];\n+        assertEquals(true, CollectionUtils.sizeIsEmpty(intArray));\n+        \n+        double[] doubleArray = new double[3];\n+        assertEquals(false, CollectionUtils.sizeIsEmpty(doubleArray));\n+        doubleArray[0] = 0.0d;\n+        doubleArray[1] = 1.0d;\n+        doubleArray[2] = 2.5d;\n+        assertEquals(false, CollectionUtils.sizeIsEmpty(doubleArray));\n+    }\n+    public void testSizeIsEmpty_Enumeration() {\n+        Vector list = new Vector();\n+        assertEquals(true, CollectionUtils.sizeIsEmpty(list.elements()));\n+        list.add(\"a\");\n+        assertEquals(false, CollectionUtils.sizeIsEmpty(list.elements()));\n+        Enumeration en = list.elements();\n+        en.nextElement();\n+        assertEquals(true, CollectionUtils.sizeIsEmpty(en));\n+    }\n+    public void testSizeIsEmpty_Iterator() {\n+        List list = new ArrayList();\n+        assertEquals(true, CollectionUtils.sizeIsEmpty(list.iterator()));\n+        list.add(\"a\");\n+        assertEquals(false, CollectionUtils.sizeIsEmpty(list.iterator()));\n+        Iterator it = list.iterator();\n+        it.next();\n+        assertEquals(true, CollectionUtils.sizeIsEmpty(it));\n+    }\n+    public void testSizeIsEmpty_Other() {\n+        try {\n+            CollectionUtils.sizeIsEmpty(null);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            CollectionUtils.sizeIsEmpty(\"not a list\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsEmptyWithEmptyCollection() {\n+        Collection coll = new ArrayList();\n+        assertEquals(true, CollectionUtils.isEmpty(coll));\n+    }\n+\n+    public void testIsEmptyWithNonEmptyCollection() {\n+        Collection coll = new ArrayList();\n+        coll.add(\"item\");\n+        assertEquals(false, CollectionUtils.isEmpty(coll));\n+    }\n+\n+    public void testIsEmptyWithNull() {\n+        Collection coll = null;\n+        assertEquals(true, CollectionUtils.isEmpty(coll));\n+    }\n+\n+    public void testIsNotEmptyWithEmptyCollection() {\n+        Collection coll = new ArrayList();\n+        assertEquals(false, CollectionUtils.isNotEmpty(coll));\n+    }\n+\n+    public void testIsNotEmptyWithNonEmptyCollection() {\n+        Collection coll = new ArrayList();\n+        coll.add(\"item\");\n+        assertEquals(true, CollectionUtils.isNotEmpty(coll));\n+    }\n+\n+    public void testIsNotEmptyWithNull() {\n+        Collection coll = null;\n+        assertEquals(false, CollectionUtils.isNotEmpty(coll));\n+    }\n+\n     //-----------------------------------------------------------------------\n     private static Predicate EQUALS_TWO = new Predicate() {\n         public boolean evaluate(Object input) {\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n     \n+    //-----------------------------------------------------------------------\n+    public void testIsEmptyWithEmptyMap() {\n+        Map map = new HashMap();\n+        assertEquals(true, MapUtils.isEmpty(map));\n+    }\n+\n+    public void testIsEmptyWithNonEmptyMap() {\n+        Map map = new HashMap();\n+        map.put(\"item\", \"value\");\n+        assertEquals(false, MapUtils.isEmpty(map));\n+    }\n+\n+    public void testIsEmptyWithNull() {\n+        Map map = null;\n+        assertEquals(true, MapUtils.isEmpty(map));\n+    }\n+\n+    public void testIsNotEmptyWithEmptyMap() {\n+        Map map = new HashMap();\n+        assertEquals(false, MapUtils.isNotEmpty(map));\n+    }\n+\n+    public void testIsNotEmptyWithNonEmptyMap() {\n+        Map map = new HashMap();\n+        map.put(\"item\", \"value\");\n+        assertEquals(true, MapUtils.isNotEmpty(map));\n+    }\n+\n+    public void testIsNotEmptyWithNull() {\n+        Map map = null;\n+        assertEquals(false, MapUtils.isNotEmpty(map));\n+    }\n+\n }", "timestamp": 1123283220, "metainfo": ""}