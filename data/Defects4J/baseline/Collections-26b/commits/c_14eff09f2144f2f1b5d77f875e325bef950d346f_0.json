{"sha": "14eff09f2144f2f1b5d77f875e325bef950d346f", "log": "Cleanup of functors package.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/functors/AllPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/AllPredicate.java\n  * threw an exception.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Matt Benson\n- * @author Stephen Kestle\n+ * @version $Id$\n  */\n public final class AllPredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n \n      * If the array is size zero, the predicate always returns true.\n      * If the array is size one, then that predicate is returned.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * If the collection is size zero, the predicate always returns true.\n      * If the collection is size one, then that predicate is returned.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n--- a/src/main/java/org/apache/commons/collections/functors/AndPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/AndPredicate.java\n  * Predicate implementation that returns true if both the predicates return true.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class AndPredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n \n     /**\n      * Factory to create the predicate.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param predicate1  the first predicate to check, not null\n      * @param predicate2  the second predicate to check, not null\n      * @return the <code>and</code> predicate\n--- a/src/main/java/org/apache/commons/collections/functors/AnyPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/AnyPredicate.java\n  * threw an exception.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Matt Benson\n+ * @version $Id$\n  */\n public final class AnyPredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n \n      * If the array is size zero, the predicate always returns false.\n      * If the array is size one, then that predicate is returned.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * If the collection is size zero, the predicate always returns false.\n      * If the collection is size one, then that predicate is returned.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n--- a/src/main/java/org/apache/commons/collections/functors/CatchAndRethrowClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/CatchAndRethrowClosure.java\n  * </pre>\n  * \n  * @since 4.0\n- * @version $Revision$\n+ * @version $Id$\n  */\n public abstract class CatchAndRethrowClosure<E> implements Closure<E> {\n \n--- a/src/main/java/org/apache/commons/collections/functors/ChainedClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ChainedClosure.java\n  * Closure implementation that chains the specified closures together.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class ChainedClosure<E> implements Closure<E>, Serializable {\n \n     /**\n      * Factory method that performs validation and copies the parameter array.\n      * \n+     * @param <E> the type that the closure acts on\n      * @param closures  the closures to chain, copied, no nulls\n      * @return the <code>chained</code> closure\n      * @throws IllegalArgumentException if the closures array is null\n      * result into the next closure. The ordering is that of the iterator()\n      * method on the collection.\n      * \n+     * @param <E> the type that the closure acts on\n      * @param closures  a collection of closures to chain\n      * @return the <code>chained</code> closure\n      * @throws IllegalArgumentException if the closures collection is null\n--- a/src/main/java/org/apache/commons/collections/functors/ChainedTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ChainedTransformer.java\n  * is passed to the second transformer and so on.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class ChainedTransformer<T> implements Transformer<T, T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/CloneTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/CloneTransformer.java\n  * Clone is performed using <code>PrototypeFactory.getInstance(input).create()</code>.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class CloneTransformer<T> implements Transformer<T, T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/ClosureTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ClosureTransformer.java\n  * and then returns the input.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class ClosureTransformer<T> implements Transformer<T, T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/ComparatorPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ComparatorPredicate.java\n  * return <code>true</code> if the comparator returns a value greater than <code>0</code>.\n  *\n  * @since 4.0\n- * @version $Revision$\n- *\n- * @author Rune Peter Bjrnstad.\n+ * @version $Id$\n  */\n public class ComparatorPredicate<T> implements Predicate<T>, Serializable {\n \n     /**\n      * Factory to create the comparator predicate\n      *\n+     * @param <T> the type that the predicate queries\n      * @param object  the object to compare to\n      * @param comparator  the comparator to use for comparison\n      * @return the predicate\n     /**\n      * Factory to create the comparator predicate\n      *\n+     * @param <T> the type that the predicate queries\n      * @param object  the object to compare to\n      * @param comparator  the comparator to use for comparison\n      * @param criterion  the criterion to use to evaluate comparison\n      *\n      * @see org.apache.commons.collections.Predicate#evaluate(java.lang.Object)\n      * @see java.util.Comparator#compare(java.lang.Object first, java.lang.Object second)\n-     *\n+     * \n      * @throws IllegalStateException if the criterion is invalid (really not possible)\n      */\n     public boolean evaluate(T target) {\n--- a/src/main/java/org/apache/commons/collections/functors/ConstantFactory.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ConstantFactory.java\n  * use the prototype factory.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class ConstantFactory<T> implements Factory<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/ConstantTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ConstantTransformer.java\n  * use the prototype factory.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class ConstantTransformer<I, O> implements Transformer<I, O>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/DefaultEquator.java\n+++ b/src/main/java/org/apache/commons/collections/functors/DefaultEquator.java\n  * \n  * @param <T>\n  * @since 4.0\n- * @version $Revision$\n+ * @version $Id$\n  */\n public class DefaultEquator<T> implements Equator<T> {\n     /** Static instance */\n--- a/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java\n  * as the one stored in this predicate by equals.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class EqualPredicate<T> implements Predicate<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/Equator.java\n+++ b/src/main/java/org/apache/commons/collections/functors/Equator.java\n  */\n package org.apache.commons.collections.functors;\n \n-import org.apache.commons.collections.map.HashedMap;\n-\n /**\n  * <p>\n  * An equation function, which determines equality between objects of type T.\n  * </p>\n  * \n  * @param <T> the types of object this {@link Equator} can evaluate.\n- * @author Stephen Kestle\n  * @since 4.0\n- * @version $Revision$\n+ * @version $Id$\n  */\n public interface Equator<T> {\n     /**\n      * Calculates the hash for the object, based on the method of equality used in the equate\n      * method. This is used for classes that delegate their {@link Object#equals(Object) equals(Object)} method to an\n      * Equator (and so must also delegate their {@link Object#hashCode() hashCode()} method), or for implementations\n-     * of {@link HashedMap} that use an Equator for the key objects.\n+     * of {@link org.apache.commons.collections.map.HashedMap} that use an Equator for the key objects.\n      * \n      * @param o the object to calculate the hash for.\n      * @return the hash of the object.\n--- a/src/main/java/org/apache/commons/collections/functors/ExceptionClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ExceptionClosure.java\n  * Closure implementation that always throws an exception.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class ExceptionClosure<E> implements Closure<E>, Serializable {\n \n     /**\n      * Factory returning the singleton instance.\n      * \n+     * @param <E> the type that the closure acts on\n      * @return the singleton instance\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections/functors/ExceptionFactory.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ExceptionFactory.java\n  * Factory implementation that always throws an exception.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class ExceptionFactory<T> implements Factory<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n  * Predicate implementation that always throws an exception.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class ExceptionPredicate<T> implements Predicate<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n  * Transformer implementation that always throws an exception.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class ExceptionTransformer<I, O> implements Transformer<I, O>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/FactoryTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/FactoryTransformer.java\n  * Transformer implementation that calls a Factory and returns the result.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class FactoryTransformer<I, O> implements Transformer<I, O>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/FalsePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/FalsePredicate.java\n  * Predicate implementation that always returns false.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class FalsePredicate<T> implements Predicate<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/ForClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ForClosure.java\n  * Closure implementation that calls another closure n times, like a for loop.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class ForClosure<E> implements Closure<E>, Serializable {\n \n      * A null closure or zero count returns the <code>NOPClosure</code>.\n      * A count of one returns the specified closure.\n      * \n+     * @param <E> the type that the closure acts on\n      * @param count  the number of times to execute the closure\n      * @param closure  the closure to execute, not null\n      * @return the <code>for</code> closure\n--- a/src/main/java/org/apache/commons/collections/functors/FunctorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/functors/FunctorUtils.java\n  * Internal utilities for functors.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Matt Benson\n+ * @version $Id$\n  */\n class FunctorUtils {\n \n         }\n         for (int i = 0; i < predicates.length; i++) {\n             if (predicates[i] == null) {\n-                throw new IllegalArgumentException(\"The predicate array must not contain a null predicate, index \" + i + \" was null\");\n+                throw new IllegalArgumentException(\n+                        \"The predicate array must not contain a null predicate, index \" + i + \" was null\");\n             }\n         }\n     }\n--- a/src/main/java/org/apache/commons/collections/functors/IdentityPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/IdentityPredicate.java\n  * as the one stored in this predicate.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class IdentityPredicate<T> implements Predicate<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/IfClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/IfClosure.java\n  * based on a predicate.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Matt Benson\n+ * @version $Id$\n  */\n public class IfClosure<E> implements Closure<E>, Serializable {\n \n      * This factory creates a closure that performs no action when\n      * the predicate is false.\n      * \n+     * @param <E> the type that the closure acts on\n      * @param predicate  predicate to switch on\n      * @param trueClosure  closure used if true\n      * @return the <code>if</code> closure\n     /**\n      * Factory method that performs validation.\n      * \n+     * @param <E> the type that the closure acts on\n      * @param predicate  predicate to switch on\n      * @param trueClosure  closure used if true\n      * @param falseClosure  closure used if false\n      * @return the <code>if</code> closure\n      * @throws IllegalArgumentException if any argument is null\n      */\n-    public static <E> Closure<E> ifClosure(Predicate<? super E> predicate, Closure<? super E> trueClosure, Closure<? super E> falseClosure) {\n+    public static <E> Closure<E> ifClosure(Predicate<? super E> predicate,\n+                                           Closure<? super E> trueClosure,\n+                                           Closure<? super E> falseClosure) {\n         if (predicate == null) {\n             throw new IllegalArgumentException(\"Predicate must not be null\");\n         }\n--- a/src/main/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n  * the type stored in this predicate.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class InstanceofPredicate implements Predicate<Object>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/InstantiateFactory.java\n+++ b/src/main/java/org/apache/commons/collections/functors/InstantiateFactory.java\n  * Factory implementation that creates a new object instance by reflection.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class InstantiateFactory<T> implements Factory<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n  * Transformer implementation that creates a new object instance by reflection.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class InstantiateTransformer<T> implements Transformer<Class<? extends T>, T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/InvokerTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/InvokerTransformer.java\n  * Transformer implementation that creates a new object instance by reflection.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class InvokerTransformer<I, O> implements Transformer<I, O>, Serializable {\n \n             Method method = cls.getMethod(iMethodName, iParamTypes);\n             return (O) method.invoke(input, iArgs);\n         } catch (NoSuchMethodException ex) {\n-            throw new FunctorException(\"InvokerTransformer: The method '\" + iMethodName + \"' on '\" + input.getClass() + \"' does not exist\");\n+            throw new FunctorException(\"InvokerTransformer: The method '\" + iMethodName + \"' on '\" +\n+                                       input.getClass() + \"' does not exist\");\n         } catch (IllegalAccessException ex) {\n-            throw new FunctorException(\"InvokerTransformer: The method '\" + iMethodName + \"' on '\" + input.getClass() + \"' cannot be accessed\");\n+            throw new FunctorException(\"InvokerTransformer: The method '\" + iMethodName + \"' on '\" +\n+                                       input.getClass() + \"' cannot be accessed\");\n         } catch (InvocationTargetException ex) {\n-            throw new FunctorException(\"InvokerTransformer: The method '\" + iMethodName + \"' on '\" + input.getClass() + \"' threw an exception\", ex);\n+            throw new FunctorException(\"InvokerTransformer: The method '\" + iMethodName + \"' on '\" +\n+                                       input.getClass() + \"' threw an exception\", ex);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections/functors/MapTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/MapTransformer.java\n  * using the input parameter as a key.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class MapTransformer<I, O> implements Transformer<I, O>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/NOPClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NOPClosure.java\n  * Closure implementation that does nothing.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class NOPClosure<E> implements Closure<E>, Serializable {\n \n     /**\n      * Factory returning the singleton instance.\n      *\n+     * @param <E> the type that the closure acts on\n      * @return the singleton instance\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections/functors/NOPTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NOPTransformer.java\n  * Transformer implementation that does nothing.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class NOPTransformer<T> implements Transformer<T, T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/NonePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NonePredicate.java\n  * threw an exception.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Matt Benson\n+ * @version $Id$\n  */\n public final class NonePredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/NotNullPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NotNullPredicate.java\n  * Predicate implementation that returns true if the input is not null.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class NotNullPredicate<T> implements Predicate<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/NotPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NotPredicate.java\n  * Predicate implementation that returns the opposite of the decorated predicate.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class NotPredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n  * Predicate implementation that throws an exception if the input is null.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class NullIsExceptionPredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n  * Predicate implementation that returns false if the input is null.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class NullIsFalsePredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n  * Predicate implementation that returns true if the input is null.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class NullIsTruePredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/NullPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullPredicate.java\n  * Predicate implementation that returns true if the input is null.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class NullPredicate<T> implements Predicate<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/OnePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/OnePredicate.java\n  * threw an exception.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Matt Benson\n+ * @version $Id$\n  */\n public final class OnePredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/OrPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/OrPredicate.java\n  * Predicate implementation that returns true if either of the predicates return true.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class OrPredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/PredicateDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/functors/PredicateDecorator.java\n  * This interface enables tools to access the decorated predicates.\n  *\n  * @since 3.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Stephen Kestle\n+ * @version $Id$\n  */\n public interface PredicateDecorator<T> extends Predicate<T> {\n \n--- a/src/main/java/org/apache/commons/collections/functors/PredicateTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/PredicateTransformer.java\n  * and then returns the result.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class PredicateTransformer<T> implements Transformer<T, Boolean>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/PrototypeFactory.java\n+++ b/src/main/java/org/apache/commons/collections/functors/PrototypeFactory.java\n  * Factory implementation that creates a new instance each time based on a prototype.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class PrototypeFactory {\n \n--- a/src/main/java/org/apache/commons/collections/functors/StringValueTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/StringValueTransformer.java\n  * <code>String.valueOf</code> on the input object.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class StringValueTransformer<T> implements Transformer<T, String>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/SwitchClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/SwitchClosure.java\n  * like a switch statement.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class SwitchClosure<E> implements Closure<E>, Serializable {\n \n     /**\n      * Factory method that performs validation and copies the parameter arrays.\n      *\n+     * @param <E> the type that the closure acts on\n      * @param predicates  array of predicates, cloned, no nulls\n      * @param closures  matching array of closures, cloned, no nulls\n      * @param defaultClosure  the closure to use if no match, null means nop\n      * @throws IllegalArgumentException if any element in the array is null\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <E> Closure<E> switchClosure(Predicate<? super E>[] predicates, Closure<? super E>[] closures, Closure<? super E> defaultClosure) {\n+    public static <E> Closure<E> switchClosure(Predicate<? super E>[] predicates,\n+                                               Closure<? super E>[] closures,\n+                                               Closure<? super E> defaultClosure) {\n         FunctorUtils.validate(predicates);\n         FunctorUtils.validate(closures);\n         if (predicates.length != closures.length) {\n      * null key. The ordering is that of the iterator() method on the entryset\n      * collection of the map.\n      *\n+     * @param <E> the type that the closure acts on\n      * @param predicatesAndClosures  a map of predicates to closures\n      * @return the <code>switch</code> closure\n      * @throws IllegalArgumentException if the map is null\n      * @param defaultClosure  the closure to use if no match, null means nop\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public SwitchClosure(Predicate<? super E>[] predicates, Closure<? super E>[] closures, Closure<? super E> defaultClosure) {\n+    public SwitchClosure(Predicate<? super E>[] predicates, Closure<? super E>[] closures,\n+                         Closure<? super E> defaultClosure) {\n         super();\n         iPredicates = predicates;\n         iClosures = closures;\n--- a/src/main/java/org/apache/commons/collections/functors/SwitchTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/SwitchTransformer.java\n  * like a switch statement.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class SwitchTransformer<I, O> implements Transformer<I, O>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/TransformedPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/TransformedPredicate.java\n  * another <code>Predicate</code>.\n  *\n  * @since 3.1\n- * @version $Revision$\n- * @author Alban Peignier\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class TransformedPredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/TransformerClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/TransformerClosure.java\n  * and ignore the result.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TransformerClosure<E> implements Closure<E>, Serializable {\n \n      * <p>\n      * A null transformer will return the <code>NOPClosure</code>.\n      * \n+     * @param <E> the type that the closure acts on\n      * @param transformer  the transformer to call, null means nop\n      * @return the <code>transformer</code> closure\n      */\n--- a/src/main/java/org/apache/commons/collections/functors/TransformerPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/TransformerPredicate.java\n  * Predicate implementation that returns the result of a transformer.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class TransformerPredicate<T> implements Predicate<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/TruePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/TruePredicate.java\n  * Predicate implementation that always returns true.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Stephen Kestle\n+ * @version $Id$\n  */\n public final class TruePredicate<T> implements Predicate<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/UniquePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/UniquePredicate.java\n  * passed into the predicate.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UniquePredicate<T> implements Predicate<T>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/functors/WhileClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/WhileClosure.java\n  * like a do-while or while loop.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class WhileClosure<E> implements Closure<E>, Serializable {\n \n     /**\n      * Factory method that performs validation.\n      * \n+     * @param <E> the type that the closure acts on\n      * @param predicate  the predicate used to evaluate when the loop terminates, not null\n      * @param closure  the closure the execute, not null\n      * @param doLoop  true to act as a do-while loop, always executing the closure once\n      * @return the <code>while</code> closure\n      * @throws IllegalArgumentException if the predicate or closure is null\n      */\n-    public static <E> Closure<E> whileClosure(Predicate<? super E> predicate, Closure<? super E> closure, boolean doLoop) {\n+    public static <E> Closure<E> whileClosure(Predicate<? super E> predicate,\n+                                              Closure<? super E> closure, boolean doLoop) {\n         if (predicate == null) {\n             throw new IllegalArgumentException(\"Predicate must not be null\");\n         }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/functors/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * This package contains implementations of the\n+ * {@link org.apache.commons.collections.Closure Closure},\n+ * {@link org.apache.commons.collections.Predicate Predicate},\n+ * {@link org.apache.commons.collections.Transformer Transformer} and\n+ * {@link org.apache.commons.collections.Factory Factory} interfaces.\n+ * These provide simple callbacks for processing with collections.\n+ * \n+ * @version $Id$\n+ */\n+package org.apache.commons.collections.functors;", "timestamp": 1343330619, "metainfo": ""}