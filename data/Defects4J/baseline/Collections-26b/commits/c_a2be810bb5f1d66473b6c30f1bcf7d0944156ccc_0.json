{"sha": "a2be810bb5f1d66473b6c30f1bcf7d0944156ccc", "log": "[COLLECTIONS-451] Hide constructors for *Utils classes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/main/java/org/apache/commons/collections/BagUtils.java\n             UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());\n \n     /**\n-     * Instantiation of BagUtils is not intended or required. However, some\n-     * tools require an instance to operate.\n-     */\n-    public BagUtils() {\n-    }\n+     * Instantiation of BagUtils is not intended or required.\n+     */\n+    private BagUtils() {}\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/apache/commons/collections/ClosureUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ClosureUtils.java\n     /**\n      * This class is not normally instantiated.\n      */\n-    public ClosureUtils() {\n-        super();\n-    }\n+    private ClosureUtils() {}\n \n     /**\n      * Gets a Closure that always throws an exception.\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n     /**\n      * <code>CollectionUtils</code> should not normally be instantiated.\n      */\n-    public CollectionUtils() {\n-    }\n+    private CollectionUtils() {}\n \n     /**\n      * Returns the immutable EMPTY_COLLECTION with generic type safety.\n--- a/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n     /**\n      * ComparatorUtils should not normally be instantiated.\n      */\n-    public ComparatorUtils() {\n-    }\n+    private ComparatorUtils() {}\n \n     /**\n      * Comparator for natural sort order.\n--- a/src/main/java/org/apache/commons/collections/EnumerationUtils.java\n+++ b/src/main/java/org/apache/commons/collections/EnumerationUtils.java\n     /**\n      * EnumerationUtils is not normally instantiated.\n      */\n-    public EnumerationUtils() {\n-        // no init.\n-    }\n+    private EnumerationUtils() {}\n     \n     /**\n      * Creates a list based on an enumeration.\n--- a/src/main/java/org/apache/commons/collections/FactoryUtils.java\n+++ b/src/main/java/org/apache/commons/collections/FactoryUtils.java\n     /**\n      * This class is not normally instantiated.\n      */\n-    public FactoryUtils() {\n-        super();\n-    }\n+    private FactoryUtils() {}\n \n     /**\n      * Gets a Factory that always throws an exception.\n--- a/src/main/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/IteratorUtils.java\n     /**\n      * IteratorUtils is not normally instantiated.\n      */\n-    public IteratorUtils() {\n-    }\n+    private IteratorUtils() {}\n \n     // Empty\n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ListUtils.java\n     /**\n      * <code>ListUtils</code> should not normally be instantiated.\n      */\n-    public ListUtils() {\n-    }\n+    private ListUtils() {}\n \n     //-----------------------------------------------------------------------\n     \n--- a/src/main/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections/MapUtils.java\n     /**\n      * <code>MapUtils</code> should not normally be instantiated.\n      */\n-    public MapUtils() {\n-    }\n+    private MapUtils() {}\n \n     // Type safe getters\n     //-------------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/main/java/org/apache/commons/collections/PredicateUtils.java\n     /**\n      * This class is not normally instantiated.\n      */\n-    public PredicateUtils() {\n-        super();\n-    }\n+    private PredicateUtils() {}\n \n     // Simple predicates\n     //-----------------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/main/java/org/apache/commons/collections/SetUtils.java\n     /**\n      * <code>SetUtils</code> should not normally be instantiated.\n      */\n-    public SetUtils() {\n-    }\n+    private SetUtils() {}\n \n     //-----------------------------------------------------------------------\n     \n--- a/src/main/java/org/apache/commons/collections/SplitMapUtils.java\n+++ b/src/main/java/org/apache/commons/collections/SplitMapUtils.java\n     /**\n      * <code>SplitMapUtils</code> should not normally be instantiated.\n      */\n-    public SplitMapUtils() {\n-    }\n+    private SplitMapUtils() {}\n+\n+    //-----------------------------------------------------------------------\n \n     private static class WrappedGet<K, V> implements IterableMap<K, V>, Unmodifiable {\n         private final Get<K, V> get;\n             throw new UnsupportedOperationException();\n         }\n     }\n+\n+    //-----------------------------------------------------------------------\n \n     /**\n      * Get the specified {@link Get} as an instance of {@link IterableMap}.\n--- a/src/main/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/main/java/org/apache/commons/collections/TransformerUtils.java\n     /**\n      * This class is not normally instantiated.\n      */\n-    public TransformerUtils() {\n-        super();\n-    }\n+    private TransformerUtils() {}\n \n     /**\n      * Gets a transformer that always throws an exception.\n--- a/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n                 (Object)map, 0));\n     }\n \n-    /**\n-     * TODO: Should {@link CollectionUtils} be able to be extended? If it is extended, subclasses must 'override' the static methods with\n-     * call-throughs anyhow, otherwise java compiler warnings will result\n-     */\n-    @Test\n-    public void ensureCollectionUtilsCanBeExtended() {\n-        new CollectionUtils() {};\n-    }\n-\n     @Test\n     public void reverse() {\n         CollectionUtils.reverseArray(new Object[] {});", "timestamp": 1363544518, "metainfo": ""}