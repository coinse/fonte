{"sha": "29e063ff3f765ce97088a4cf71162855d1f24e3e", "log": "Fix various javadoc link warnings bug 23680, from Eric Johnson   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BufferOverflowException.java\n+++ b/src/java/org/apache/commons/collections/BufferOverflowException.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferOverflowException.java,v 1.6 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferOverflowException.java,v 1.7 2003/10/09 20:58:52 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * exceeded.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.6 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.7 $ $Date: 2003/10/09 20:58:52 $\n  * \n  * @author Avalon\n  * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n      * Construct a new <code>BufferOverflowException</code>.\n      * \n      * @param message  the detail message for this exception\n-     * @param throwable  the root cause of the exception\n+     * @param exception  the root cause of the exception\n      */\n     public BufferOverflowException(String message, Throwable exception) {\n         super(message);\n--- a/src/java/org/apache/commons/collections/BufferUnderflowException.java\n+++ b/src/java/org/apache/commons/collections/BufferUnderflowException.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUnderflowException.java,v 1.7 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUnderflowException.java,v 1.8 2003/10/09 20:58:52 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * The BufferUnderflowException is used when the buffer is already empty.\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.7 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.8 $ $Date: 2003/10/09 20:58:52 $\n  *\n  * @author Avalon\n  * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n      * Construct a new <code>BufferUnderflowException</code>.\n      * \n      * @param message  the detail message for this exception\n-     * @param throwable  the root cause of the exception\n+     * @param exception  the root cause of the exception\n      */\n     public BufferUnderflowException(String message, Throwable exception) {\n         super(message);\n--- a/src/java/org/apache/commons/collections/CommonsLinkedList.java\n+++ b/src/java/org/apache/commons/collections/CommonsLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/CommonsLinkedList.java,v 1.8 2003/10/05 06:41:08 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/CommonsLinkedList.java,v 1.9 2003/10/09 20:58:52 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * subclasses to extend.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2003/10/05 06:41:08 $\n+ * @version $Revision: 1.9 $ $Date: 2003/10/09 20:58:52 $\n  * \n- * @author <a href=\"mailto:rich@rd.gen.nz\">Rich Dougherty</a>\n+ * @author Rich Dougherty\n  * @author Phil Steitz\n  */\n class CommonsLinkedList extends LinkedList\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ExtendedProperties.java,v 1.16 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ExtendedProperties.java,v 1.17 2003/10/09 20:58:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * it, go ahead and tune it up!\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.16 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.17 $ $Date: 2003/10/09 20:58:53 $\n  * \n  * @author <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>\n  * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n         /**\n          * Read a property.\n          *\n-         * @return A String.\n-         * @throws IOException.\n+         * @return a String property\n+         * @throws IOException if there is difficulty reading the source.\n          */\n         public String readProperty() throws IOException {\n             StringBuffer buffer = new StringBuffer();\n         Enumeration theKeys = keys();\n         while (theKeys.hasMoreElements()) {\n             String key = (String) theKeys.nextElement();\n-            Object value = get((Object) key);\n+            Object value = get(key);\n             if (value != null) {\n                 if (value instanceof String) {\n                     StringBuffer currentOutput = new StringBuffer();\n      * <p>\n      * Warning: It will overwrite previous entries without warning.\n      *\n-     * @param ExtendedProperties\n-     */\n-    public void combine(ExtendedProperties c) {\n-        for (Iterator i = c.getKeys(); i.hasNext();) {\n-            String key = (String) i.next();\n-            setProperty(key, c.get(key));\n+     * @param props  the properties to combine\n+     */\n+    public void combine(ExtendedProperties props) {\n+        for (Iterator it = props.getKeys(); it.hasNext();) {\n+            String key = (String) it.next();\n+            setProperty(key, props.get(key));\n         }\n     }\n     \n             // we also need to rebuild the keysAsListed or else\n             // things get *very* confusing\n             for (int i = 0; i < keysAsListed.size(); i++) {\n-                if (((String) keysAsListed.get(i)).equals(key)) {\n+                if (( keysAsListed.get(i)).equals(key)) {\n                     keysAsListed.remove(i);\n                     break;\n                 }\n         Object value = get(key);\n \n         if (value instanceof String) {\n-            return (String) interpolate((String) value);\n+            return interpolate((String) value);\n             \n         } else if (value == null) {\n             if (defaults != null) {\n             \n         } else if (value instanceof String) {\n             Vector v = new Vector(1);\n-            v.addElement((String) value);\n+            v.addElement(value);\n             put(key, v);\n             return v;\n             \n      * object that is not a Boolean.\n      */\n     public boolean getBoolean(String key) {\n-        Boolean b = getBoolean(key, (Boolean) null);\n+        Boolean b = getBoolean(key, null);\n         if (b != null) {\n             return b.booleanValue();\n         } else {\n      * <code>false</code> boolean values.  Case of value to test for\n      * boolean status is ignored.\n      *\n-     * @param String The value to test for boolean state.\n+     * @param value  the value to test for boolean state\n      * @return <code>true</code> or <code>false</code> if the supplied\n      * text maps to a boolean value, or <code>null</code> otherwise.\n      */\n     public String testBoolean(String value) {\n-        String s = ((String) value).toLowerCase();\n+        String s = value.toLowerCase();\n \n         if (s.equals(\"true\") || s.equals(\"on\") || s.equals(\"yes\")) {\n             return \"true\";\n--- a/src/java/org/apache/commons/collections/MultiHashMap.java\n+++ b/src/java/org/apache/commons/collections/MultiHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MultiHashMap.java,v 1.12 2003/08/31 17:26:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MultiHashMap.java,v 1.13 2003/10/09 20:58:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>coll</code> will be a list containing \"A\", \"B\", \"C\".\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.12 $ $Date: 2003/08/31 17:26:43 $\n+ * @version $Revision: 1.13 $ $Date: 2003/10/09 20:58:53 $\n  * \n  * @author Christopher Berry\n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @author James Strachan\n  * @author Steve Downey\n  * @author Stephen Colebourne\n- * @author <a href=\"mailto:jburet@yahoo.com\">Julien Buret</a>\n+ * @author Julien Buret\n  * @author Serhiy Yevtushenko\n  */\n public class MultiHashMap extends HashMap implements MultiMap {\n      * The item is removed from the collection mapped to the specified key.\n      * \n      * @param key  the key to remove from\n-     * @param value  the value to remove\n+     * @param item  the value to remove\n      * @return the value removed (which was passed in)\n      */\n     public Object remove(Object key, Object item) {\n--- a/src/java/org/apache/commons/collections/MultiMap.java\n+++ b/src/java/org/apache/commons/collections/MultiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MultiMap.java,v 1.7 2003/08/31 17:26:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MultiMap.java,v 1.8 2003/10/09 20:58:52 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>coll</code> will be a list containing \"A\", \"B\", \"C\".\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.7 $ $Date: 2003/08/31 17:26:43 $\n+ * @version $Revision: 1.8 $ $Date: 2003/10/09 20:58:52 $\n  * \n  * @author Christopher Berry\n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @author James Strachan\n  * @author Stephen Colebourne\n  */\n public interface MultiMap extends Map {\n      * The item is removed from the collection mapped to the specified key.\n      * \n      * @param key  the key to remove from\n-     * @param value  the value to remove\n+     * @param item  the item to remove\n      * @return the value removed (which was passed in)\n      */\n     public Object remove(Object key, Object item);\n--- a/src/java/org/apache/commons/collections/NodeCachingLinkedList.java\n+++ b/src/java/org/apache/commons/collections/NodeCachingLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/NodeCachingLinkedList.java,v 1.8 2003/10/05 06:41:08 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/NodeCachingLinkedList.java,v 1.9 2003/10/09 20:58:52 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * improvement.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2003/10/05 06:41:08 $\n+ * @version $Revision: 1.9 $ $Date: 2003/10/09 20:58:52 $\n  * \n  * @author Jeff Varszegi\n  * @author <a href=\"mailto:rich@rd.gen.nz\">Rich Dougherty</a>\n      * Calls the superclass' implementation then calls\n      * <code>addNodeToCache</code> on the node which has \n      * been removed.\n-     * \n-     * @see CommonsLinkedList#removeNode(Node)\n      */\n     protected void removeNode(Node node) {\n         super.removeNode(node);\n--- a/src/java/org/apache/commons/collections/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/ReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.15 2003/10/03 23:19:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.16 2003/10/09 20:58:52 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see java.lang.ref.Reference\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.15 $ $Date: 2003/10/03 23:19:32 $\n+ * @version $Revision: 1.16 $ $Date: 2003/10/09 20:58:52 $\n  * \n  * @author Paul Jack\n  */\n \n     /**\n      *  ReferenceQueue used to eliminate stale mappings.\n-     *  @see #purge\n+     *  See purge.\n      */\n     private transient ReferenceQueue queue = new ReferenceQueue();\n \n \n     /**\n      *  When size reaches threshold, the map is resized.  \n-     *  @see resize\n+     *  See resize().\n      */\n     private transient int threshold;\n \n--- a/src/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/java/org/apache/commons/collections/TransformerUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TransformerUtils.java,v 1.4 2003/09/17 20:28:30 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TransformerUtils.java,v 1.5 2003/10/09 20:58:52 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * All the supplied transformers are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/09/17 20:28:30 $\n+ * @version $Revision: 1.5 $ $Date: 2003/10/09 20:58:52 $\n  * \n  * @author Stephen Colebourne\n  * @author James Carman\n      * Creates a Transformer that calls a Closure each time the transformer is used.\n      * The transformer returns the input object.\n      *\n-     * @param command  the command to run each time in the transformer\n+     * @param closure  the closure to run each time in the transformer\n      * @return the transformer.\n      */\n     public static Transformer asTransformer(Closure closure) {\n--- a/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java,v 1.8 2003/09/07 08:48:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java,v 1.9 2003/10/09 20:58:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * This buffer prevents null objects from being added.\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.8 $ $Date: 2003/09/07 08:48:46 $\n+ * @version $Revision: 1.9 $ $Date: 2003/10/09 20:58:53 $\n  *\n  * @author Avalon\n  * @author Federico Barbieri\n     /**\n      * Adds the given element to this buffer.\n      *\n-     * @param element  the element to add\n+     * @param o  the element to add\n      * @return true, always\n      * @throws NullPointerException  if the given element is null\n      * @throws BufferOverflowException  if this buffer is full", "timestamp": 1065733133, "metainfo": ""}