{"sha": "23fcdc1e0adcec177d1c7da3245e9483481a9b24", "log": "Undeprecate, as is only implementation of PriorityQueue   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BinaryHeap.java\n+++ b/src/java/org/apache/commons/collections/BinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.15 2003/11/29 18:04:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.16 2004/01/01 19:00:20 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n \n /**\n- * Binary heap implementation of {@link PriorityQueue} and {@link Buffer}.\n+ * Binary heap implementation of <code>PriorityQueue</code>.\n+ * <p>\n+ * The <code>PriorityQueue</code> interface has now been replaced for most uses\n+ * by the <code>Buffer</code> interface. This class and the interface are\n+ * retained for backwards compatability. The intended replacement is\n+ * {@link org.apache.commons.collections.buffer.BinaryBuffer BinaryBuffer}.\n  * <p>\n  * The removal order of a binary heap is based on either the natural sort\n  * order of its elements or a specified {@link Comparator}.  The \n- * {@link #remove()} method always returns the first element as determined\n+ * {@link #pop()} method always returns the first element as determined\n  * by the sort order.  (The <code>isMinHeap</code> flag in the constructors\n- * can be used to reverse the sort order, in which case {@link #remove()}\n+ * can be used to reverse the sort order, in which case {@link #pop()}\n  * will always remove the last element.)  The removal order is \n  * <i>not</i> the same as the order of iteration; elements are\n  * returned by the iterator in no particular order.\n  * <p>\n- * The {@link #add(Object)} and {@link #remove()} operations perform\n- * in logarithmic time.  The {@link #get()} operation performs in constant\n+ * The {@link #insert(Object)} and {@link #pop()} operations perform\n+ * in logarithmic time.  The {@link #peek()} operation performs in constant\n  * time.  All other operations perform in linear time or worse.\n  * <p>\n  * Note that this implementation is not synchronized.  Use \n- * {@link BufferUtils#synchronizedBuffer(Buffer)} to provide\n- * synchronized access to a <code>BinaryHeap</code>:\n+ * {@link PriorityQueueUtils#synchronizedPriorityQueue(PriorityQueue)}\n+ * to provide synchronized access to a <code>BinaryHeap</code>:\n  *\n  * <pre>\n- * Buffer heap = BufferUtils.synchronizedBuffer(new BinaryHeap());\n+ * PriorityQueue heap = PriorityQueueUtils.synchronizedPriorityQueue(new BinaryHeap());\n  * </pre>\n  *\n- * @deprecated Moved to buffer subpackage. Due to be removed in v4.0.\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.15 $ $Date: 2003/11/29 18:04:57 $\n+ * @version $Revision: 1.16 $ $Date: 2004/01/01 19:00:20 $\n  * \n- * @author <a href=\"mailto:donaldp@apache.org\">Peter Donald</a>\n- * @author <a href=\"mailto:ram.chidambaram@telus.com\">Ram Chidambaram</a>\n- * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n+ * @author Peter Donald\n+ * @author Ram Chidambaram\n+ * @author Michael A. Smith\n  * @author Paul Jack\n  * @author Stephen Colebourne\n  */\n         m_comparator = comparator;\n     }\n \n-    \n+    //-----------------------------------------------------------------------\n     /**\n      * Clears all elements from queue.\n      */", "timestamp": 1072983620, "metainfo": ""}