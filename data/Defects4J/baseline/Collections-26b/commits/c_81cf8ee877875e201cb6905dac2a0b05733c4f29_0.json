{"sha": "81cf8ee877875e201cb6905dac2a0b05733c4f29", "log": "Fixes to javadoc. Remove unecessary casts. bug 25936, from Gary Gregory   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.53 2004/01/05 22:46:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.54 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.collection.TypedCollection;\n import org.apache.commons.collections.collection.UnmodifiableBoundedCollection;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n-import org.apache.commons.collections.iterators.ArrayIterator;\n-import org.apache.commons.collections.iterators.EnumerationIterator;\n \n /**\n  * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.53 $ $Date: 2004/01/05 22:46:33 $\n+ * @version $Revision: 1.54 $ $Date: 2004/01/08 22:26:07 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/DefaultMapBag.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapBag.java,v 1.13 2003/12/24 23:22:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapBag.java,v 1.14 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n  * @deprecated Moved to bag subpackage as AbstractMapBag. Due to be removed in v4.0.\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.13 $ $Date: 2003/12/24 23:22:54 $\n+ * @version $Revision: 1.14 $ $Date: 2004/01/08 22:26:07 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n         Iterator i = other.uniqueSet().iterator();\n         while (i.hasNext()) {\n             Object current = i.next();\n-            boolean contains = getCount(current) >= ((Bag) other).getCount(current);\n+            boolean contains = getCount(current) >= other.getCount(current);\n             result = result && contains;\n         }\n         return result;\n--- a/src/java/org/apache/commons/collections/DoubleOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/DoubleOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DoubleOrderedMap.java,v 1.11 2004/01/06 22:07:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DoubleOrderedMap.java,v 1.12 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see org.apache.commons.collections.bidimap.DualTreeBidiMap\n  * @see org.apache.commons.collections.bidimap.DualHashBidiMap\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.11 $ $Date: 2004/01/06 22:07:47 $\n+ * @version $Revision: 1.12 $ $Date: 2004/01/08 22:26:07 $\n  * \n  * @author Marc Johnson\n  */\n      *         value if o1 > o2\n      */\n     private static int compare(final Comparable o1, final Comparable o2) {\n-        return ((Comparable) o1).compareTo(o2);\n+        return o1.compareTo(o2);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/OrderedMap.java\n+++ b/src/java/org/apache/commons/collections/OrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/OrderedMap.java,v 1.3 2003/12/02 23:51:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/OrderedMap.java,v 1.4 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * iteration through that order.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/02 23:51:49 $\n+ * @version $Revision: 1.4 $ $Date: 2004/01/08 22:26:07 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Gets the first key currently in this map.\n      *\n      * @return the first key currently in this map\n-     * @throws NoSuchElementException if this map is empty\n+     * @throws java.util.NoSuchElementException if this map is empty\n      */\n     public Object firstKey();\n \n      * Gets the last key currently in this map.\n      *\n      * @return the last key currently in this map\n-     * @throws NoSuchElementException if this map is empty\n+     * @throws java.util.NoSuchElementException if this map is empty\n      */\n     public Object lastKey();\n     \n--- a/src/java/org/apache/commons/collections/OrderedMapIterator.java\n+++ b/src/java/org/apache/commons/collections/OrderedMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/OrderedMapIterator.java,v 1.1 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/OrderedMapIterator.java,v 1.2 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * This iterator allows both forward and reverse iteration through the map.\n  *  \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/08 22:26:07 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Gets the previous <em>key</em> from the <code>Map</code>.\n      *\n      * @return the previous key in the iteration\n-     * @throws NoSuchElementException if the iteration is finished\n+     * @throws java.util.NoSuchElementException if the iteration is finished\n      */\n     Object previous();\n \n--- a/src/java/org/apache/commons/collections/PriorityQueue.java\n+++ b/src/java/org/apache/commons/collections/PriorityQueue.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PriorityQueue.java,v 1.11 2004/01/06 21:31:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PriorityQueue.java,v 1.12 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @deprecated Replaced by the Buffer interface and implementations in buffer subpackage.\n  *  Due to be removed in v4.0.\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.11 $ $Date: 2004/01/06 21:31:32 $\n+ * @version $Revision: 1.12 $ $Date: 2004/01/08 22:26:07 $\n  * \n  * @author Peter Donald\n  */\n      * Return element on top of heap but don't remove it.\n      *\n      * @return the element at top of heap\n-     * @throws NoSuchElementException if <code>isEmpty() == true</code>\n+     * @throws java.util.NoSuchElementException if <code>isEmpty() == true</code>\n      */\n     Object peek();\n \n      * Return element on top of heap and remove it.\n      *\n      * @return the element at top of heap\n-     * @throws NoSuchElementException if <code>isEmpty() == true</code>\n+     * @throws java.util.NoSuchElementException if <code>isEmpty() == true</code>\n      */\n     Object pop();\n     \n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.10 2004/01/02 01:36:51 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.11 2004/01/08 22:26:08 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * the number of occurrences of that element in the bag.\n  *\n  * @since Commons Collections 3.0 (previously DefaultMapBag v2.0)\n- * @version $Revision: 1.10 $ $Date: 2004/01/02 01:36:51 $\n+ * @version $Revision: 1.11 $ $Date: 2004/01/08 22:26:08 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n         Iterator it = other.uniqueSet().iterator();\n         while (it.hasNext()) {\n             Object current = it.next();\n-            boolean contains = getCount(current) >= ((Bag) other).getCount(current);\n+            boolean contains = getCount(current) >= other.getCount(current);\n             result = result && contains;\n         }\n         return result;\n--- a/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java,v 1.7 2004/01/02 01:36:51 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java,v 1.8 2004/01/08 22:26:08 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * UnsupportedOperationException on attempts to call that method.\n  *\n  * @since Commons Collections 3.0 (previously DoubleOrderedMap v2.0)\n- * @version $Revision: 1.7 $ $Date: 2004/01/02 01:36:51 $\n+ * @version $Revision: 1.8 $ $Date: 2004/01/08 22:26:08 $\n  * \n  * @author Marc Johnson\n  * @author Stephen Colebourne\n      * @param o1  the first object\n      * @param o2  the second object\n      *\n-     * @return negative value if o1 < o2; 0 if o1 == o2; positive\n-     *         value if o1 > o2\n+     * @return negative value if o1 &lt; o2; 0 if o1 == o2; positive\n+     *         value if o1 &gt; o2\n      */\n     private static int compare(final Comparable o1, final Comparable o2) {\n-        return ((Comparable) o1).compareTo(o2);\n+        return o1.compareTo(o2);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/collection/TransformedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/TransformedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/TransformedCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/TransformedCollection.java,v 1.2 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * use the Integer form to remove objects.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/08 22:26:07 $\n  * \n  * @author Stephen Colebourne\n  */\n      * The transformer itself may throw an exception if necessary.\n      * \n      * @param object  the object to transform\n-     * @throws the transformed object\n+     * @return a transformed object\n      */\n     protected Object transform(Object object) {\n         return transformer.transform(object);\n      * The transformer itself may throw an exception if necessary.\n      * \n      * @param coll  the collection to transform\n-     * @throws the transformed object\n+     * @return a transformed object\n      */\n     protected Collection transform(Collection coll) {\n         List list = new ArrayList(coll.size());\n--- a/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/PrototypeFactory.java,v 1.3 2003/12/29 01:18:23 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/PrototypeFactory.java,v 1.4 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Factory implementation that creates a new instance each time based on a prototype.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/29 01:18:23 $\n+ * @version $Revision: 1.4 $ $Date: 2004/01/08 22:26:07 $\n  *\n  * @author Stephen Colebourne\n  */\n     /**\n      * Constructor that performs no validation.\n      * Use <code>getInstance</code> if you want that.\n-     * \n-     * @param constantToReturn  the constant to return each time\n      */\n     private PrototypeFactory() {\n     }\n--- a/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java,v 1.4 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java,v 1.5 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * </pre>\n  *  \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.5 $ $Date: 2004/01/08 22:26:07 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Gets the next <em>key</em> from the <code>Map</code>.\n      *\n      * @return the next key in the iteration\n-     * @throws NoSuchElementException if the iteration is finished\n+     * @throws java.util.NoSuchElementException if the iteration is finished\n      */\n     public Object next() {\n         last = (Map.Entry) iterator.next();\n--- a/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorChain.java,v 1.8 2003/12/29 16:07:53 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorChain.java,v 1.9 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * iterators. In this case the class will function as an empty iterator.\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.8 $ $Date: 2003/12/29 16:07:53 $\n+ * @version $Revision: 1.9 $ $Date: 2004/01/08 22:26:07 $\n  * \n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n      * Returns the next Object of the current Iterator\n      * \n      * @return Object from the current Iterator\n-     * @throws NoSuchElementException if all the Iterators are exhausted\n+     * @throws java.util.NoSuchElementException if all the Iterators are exhausted\n      */\n     public Object next() {\n         lockChain();\n--- a/src/java/org/apache/commons/collections/iterators/IteratorEnumeration.java\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorEnumeration.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorEnumeration.java,v 1.5 2003/10/28 02:44:51 ggregory Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorEnumeration.java,v 1.6 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Adapter to make an {@link Iterator Iterator} instance appear to be an {@link Enumeration Enumeration} instance.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.5 $ $Date: 2003/10/28 02:44:51 $\n+ * @version $Revision: 1.6 $ $Date: 2004/01/08 22:26:07 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  */\n      *  Returns the next element from the underlying iterator.\n      *\n      *  @return the next element from the underlying iterator.\n-     *  @throws NoSuchElementException  if the underlying iterator has no\n+     *  @throws java.util.NoSuchElementException  if the underlying iterator has no\n      *    more elements\n      */\n     public Object nextElement() {\n--- a/src/java/org/apache/commons/collections/iterators/ProxyIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ProxyIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ProxyIterator.java,v 1.7 2004/01/04 18:04:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ProxyIterator.java,v 1.8 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n  * @deprecated Use AbstractIteratorDecorator. Will be removed in v4.0\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.7 $ $Date: 2004/01/04 18:04:16 $\n+ * @version $Revision: 1.8 $ $Date: 2004/01/08 22:26:07 $\n  * \n  * @author James Strachan\n  */\n      *  Returns the next element from the underlying iterator.\n      *\n      *  @return the next element from the underlying iterator\n-     *  @throws NoSuchElementException  if the underlying iterator \n+     *  @throws java.util.NoSuchElementException  if the underlying iterator \n      *    raises it because it has no more elements\n      */\n     public Object next() {\n--- a/src/java/org/apache/commons/collections/iterators/TransformIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/TransformIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/TransformIterator.java,v 1.6 2003/11/02 16:29:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/TransformIterator.java,v 1.7 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates an iterator such that each element returned is transformed.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.6 $ $Date: 2003/11/02 16:29:12 $\n+ * @version $Revision: 1.7 $ $Date: 2004/01/08 22:26:07 $\n  * \n  * @author James Strachan\n  * @author Stephen Colebourne\n      * occurs and the object from the iterator is returned directly.\n      * \n      * @return the next object\n-     * @throws NoSuchElementException if there are no more elements\n+     * @throws java.util.NoSuchElementException if there are no more elements\n      */\n     public Object next() {\n         return transform(iterator.next());\n--- a/src/java/org/apache/commons/collections/map/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/map/ReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ReferenceMap.java,v 1.7 2004/01/05 22:15:14 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ReferenceMap.java,v 1.8 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see java.lang.ref.Reference\n  * \n  * @since Commons Collections 3.0 (previously in main package v2.1)\n- * @version $Revision: 1.7 $ $Date: 2004/01/05 22:15:14 $\n+ * @version $Revision: 1.8 $ $Date: 2004/01/08 22:26:07 $\n  * \n  * @author Paul Jack\n  */\n     /**\n      *  Reads the contents of this object from the given input stream.\n      *\n-     *  @param inp  the input stream to read from\n+     *  @param in  the input stream to read from\n      *  @throws IOException  if the stream raises it\n      *  @throws ClassNotFoundException  if the stream raises it\n      */\n     public void clear() {\n         Arrays.fill(table, null);\n         size = 0;\n-        while (queue.poll() != null) {}; // drain the queue\n+        while (queue.poll() != null) {} // drain the queue\n     }\n \n \n--- a/src/java/org/apache/commons/collections/set/ListOrderedSet.java\n+++ b/src/java/org/apache/commons/collections/set/ListOrderedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/ListOrderedSet.java,v 1.3 2003/12/25 00:50:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/ListOrderedSet.java,v 1.4 2004/01/08 22:26:07 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * various interface methods (notably equals/hashCode) are incompatable with a set.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/25 00:50:10 $\n+ * @version $Revision: 1.4 $ $Date: 2004/01/08 22:26:07 $\n  * \n  * @author Stephen Colebourne\n  * @author Henning P. Schmiedehausen\n             setOrder.clear();\n         } else {\n             for (Iterator it = setOrder.iterator(); it.hasNext();) {\n-                Object object = (Object) it.next();\n+                Object object = it.next();\n                 if (collection.contains(object) == false) {\n                     it.remove();\n                 }\n     public boolean addAll(int index, Collection coll) {\n         boolean changed = false;\n         for (Iterator it = coll.iterator(); it.hasNext();) {\n-            Object object = (Object) it.next();\n+            Object object = it.next();\n             if (contains(object) == false) {\n                 collection.add(object);\n                 setOrder.add(index, object);", "timestamp": 1073600768, "metainfo": ""}