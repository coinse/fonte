{"sha": "2cdf3b0ba885f3b800ae475ebadf551729036c15", "log": "Fix CursorableLinkedList iterator remove/set not throwing IllegalStateException after next-previous-removeByIndex bug 35766  ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/CursorableLinkedList.java\n+++ b/src/java/org/apache/commons/collections/list/CursorableLinkedList.java\n          * @param node  the node that was removed\n          */\n         protected void nodeRemoved(Node node) {\n-            if (node == next) {\n+            if (node == next && node == current) {\n+                // state where next() followed by previous()\n+                next = node.next;\n+                current = null;\n+            } else if (node == next) {\n+                // state where next() not followed by previous()\n+                // and we are matching next node\n                 next = node.next;\n             } else if (node == current) {\n+                // state where next() not followed by previous()\n+                // and we are matching current (last returned) node\n                 current = null;\n                 nextIndex--;\n             } else {\n--- a/src/test/org/apache/commons/collections/list/TestCursorableLinkedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestCursorableLinkedList.java\n         assertEquals(1, c1.nextIndex());\n         assertEquals(\"0\", c1.next());\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n+    public void testInternalState_CursorNextNextPreviousRemoveIndex1ByList() {\n+        list.add(\"A\");\n+        list.add(\"B\");\n+        list.add(\"C\");\n+\n+        CursorableLinkedList.Cursor c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+        assertEquals(\"B\", c1.previous());\n+        \n+        assertEquals(\"B\", list.remove(1));\n+        \n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(1, c1.nextIndex);\n+        assertEquals(null, c1.current);\n+        assertEquals(\"C\", c1.next.value);\n+    }\n+\n+    public void testInternalState_CursorNextRemoveIndex1ByList() {\n+        list.add(\"A\");\n+        list.add(\"B\");\n+        list.add(\"C\");\n+\n+        CursorableLinkedList.Cursor c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        \n+        assertEquals(\"B\", list.remove(1));\n+        \n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(1, c1.nextIndex);\n+        assertEquals(\"A\", c1.current.value);\n+        assertEquals(\"C\", c1.next.value);\n+    }\n+\n+    public void testInternalState_CursorNextNextRemoveIndex1ByList() {\n+        list.add(\"A\");\n+        list.add(\"B\");\n+        list.add(\"C\");\n+\n+        CursorableLinkedList.Cursor c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+        \n+        assertEquals(\"B\", list.remove(1));\n+        \n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(1, c1.nextIndex);\n+        assertEquals(null, c1.current);\n+        assertEquals(\"C\", c1.next.value);\n+    }\n+\n+    public void testInternalState_CursorNextNextNextRemoveIndex1ByList() {\n+        list.add(\"A\");\n+        list.add(\"B\");\n+        list.add(\"C\");\n+        list.add(\"D\");\n+\n+        CursorableLinkedList.Cursor c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+        assertEquals(\"C\", c1.next());\n+        \n+        assertEquals(\"B\", list.remove(1));\n+        \n+        assertEquals(false, c1.nextIndexValid);\n+        assertEquals(\"C\", c1.current.value);\n+        assertEquals(\"D\", c1.next.value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testEqualsAndHashCode() {\n         assertTrue(list.equals(list));\n         assertEquals(list.hashCode(),list.hashCode());", "timestamp": 1121523582, "metainfo": ""}