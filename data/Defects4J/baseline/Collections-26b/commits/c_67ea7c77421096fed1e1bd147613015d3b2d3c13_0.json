{"sha": "67ea7c77421096fed1e1bd147613015d3b2d3c13", "log": "Moved TestPredicatedCollection to decorators test package. Added TestPredicatedBuffer, TestPredicatedList, TestPredicatedSet. Modified TestBufferUtils, TestCollectionUtils, TestListUtils and TestSetUtils to eliminate BlkTests based on TestPredicatedCollection with simple factory tests, delegating (full coverage) functional testing to the decorator tests.   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestBufferUtils.java\n+++ b/src/test/org/apache/commons/collections/TestBufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBufferUtils.java,v 1.4 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBufferUtils.java,v 1.5 2003/09/12 03:59:00 psteitz Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/09/12 03:59:00 $\n  *\n  * ====================================================================\n  *\n \n import java.util.Arrays;\n import java.util.Collection;\n+import org.apache.commons.collections.decorators.PredicatedBuffer;\n \n import junit.framework.Test;\n \n     public void testNothing() {\n     }\n \n-    public BulkTest bulkTestPredicatedBuffer() {\n-        return new TestPredicatedCollection(\"\") {\n-\n-            public Collection predicatedCollection() {\n-                Predicate p = getPredicate();\n-                return BufferUtils.predicatedBuffer(new ArrayStack(), p);\n-            }\n-\n-            public BulkTest bulkTestAll() {\n-                return new TestCollection(\"\") {\n-                    public Collection makeCollection() {\n-                        return predicatedCollection();\n-                    }\n-\n-                    public Collection makeConfirmedCollection() {\n-                        return new ArrayStack();\n-                    }\n-\n-                    public Collection makeConfirmedFullCollection() {\n-                        ArrayStack list = new ArrayStack();\n-                        list.addAll(java.util.Arrays.asList(getFullElements()));\n-                        return list;\n-                    }\n-\n-                    public Object[] getFullElements() {\n-                        return getFullNonNullStringElements();\n-                    }\n-\n-                    public Object[] getOtherElements() {\n-                        return getOtherNonNullStringElements();\n-                    }\n-\n-                };\n+    public void testpredicatedBuffer() {\n+        Predicate predicate = new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n             }\n         };\n+        Buffer buffer = BufferUtils.predicatedBuffer(new ArrayStack(), predicate);\n+        assertTrue(\"returned object should be a PredicatedBuffer\",\n+            buffer instanceof PredicatedBuffer);\n+        try {\n+            buffer = BufferUtils.predicatedBuffer(new ArrayStack(), null);\n+            fail(\"Expecting IllegalArgumentException for null predicate.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            buffer = BufferUtils.predicatedBuffer(null, predicate);\n+            fail(\"Expecting IllegalArgumentException for null buffer.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n     }\n \n \n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Id: TestCollectionUtils.java,v 1.18 2003/09/05 02:16:33 psteitz Exp $\n- * $Revision: 1.18 $\n- * $Date: 2003/09/05 02:16:33 $\n+ * $Id: TestCollectionUtils.java,v 1.19 2003/09/12 03:59:00 psteitz Exp $\n+ * $Revision: 1.19 $\n+ * $Date: 2003/09/12 03:59:00 $\n  *\n  * ====================================================================\n  *\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.decorators.PredicatedCollection;\n+\n /**\n  * Tests for CollectionUtils.\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n  * \n- * @version $Revision: 1.18 $ $Date: 2003/09/05 02:16:33 $\n+ * @version $Revision: 1.19 $ $Date: 2003/09/12 03:59:00 $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n         assertEquals(new Integer(4), set.iterator().next());\n     }\n \n-\n-    public BulkTest bulkTestPredicatedCollection1() {\n-        return new TestPredicatedCollection(\"\") {\n-            public Collection predicatedCollection() {\n-                Predicate p = getPredicate();\n-                return CollectionUtils.predicatedCollection(new ArrayList(), p);\n-            }\n-\n-            public BulkTest bulkTestAll() {\n-                return new TestCollection(\"\") {\n-                    public Collection makeCollection() {\n-                        return predicatedCollection();\n-                    }\n-\n-                    public Collection makeConfirmedCollection() {\n-                        return new ArrayList();\n-                    }\n-\n-                    public Collection makeConfirmedFullCollection() {\n-                        ArrayList list = new ArrayList();\n-                        list.addAll(java.util.Arrays.asList(getFullElements()));\n-                        return list;\n-                    }\n-\n-                    public Object[] getFullElements() {\n-                        return getFullNonNullStringElements();\n-                    }\n-\n-                    public Object[] getOtherElements() {\n-                        return getOtherNonNullStringElements();\n-                    }\n-\n-                };\n+    public void testPredicatedCollection() {\n+        Predicate predicate = new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n             }\n         };\n-    }\n+        Collection collection = \n+            CollectionUtils.predicatedCollection(new ArrayList(), predicate);\n+        assertTrue(\"returned object should be a PredicatedCollection\",\n+            collection instanceof PredicatedCollection);\n+        try { \n+           collection = \n+                CollectionUtils.predicatedCollection(new ArrayList(), null); \n+           fail(\"Expecting IllegalArgumentException for null predicate.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try { \n+           collection = \n+                CollectionUtils.predicatedCollection(null, predicate); \n+           fail(\"Expecting IllegalArgumentException for null collection.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }             \n+    }\n+        \n+   \n \n     public BulkTest bulkTestTypedCollection() {\n         return new TestTypedCollection(\"\") {\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.10 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.10 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.11 2003/09/12 03:59:00 psteitz Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2003/09/12 03:59:00 $\n  *\n  * ====================================================================\n  *\n import java.util.Collection;\n import java.util.List;\n \n+import org.apache.commons.collections.decorators.PredicatedList;\n+\n import junit.framework.Test;\n \n /**\n \n     public void testNothing() {\n     }\n-\n-    public BulkTest bulkTestPredicatedList() {\n-        return new TestPredicatedCollection(\"\") {\n-\n-            public Collection predicatedCollection() {\n-                Predicate p = getPredicate();\n-                return ListUtils.predicatedList(new ArrayList(), p);\n-            }\n-\n-            public BulkTest bulkTestAll() {\n-                return new TestList(\"\") {\n-                    public List makeEmptyList() {\n-                        return (List)predicatedCollection();\n-                    }\n-\n-                    public Object[] getFullElements() {\n-                        return getFullNonNullStringElements();\n-                    }\n-\n-                    public Object[] getOtherElements() {\n-                        return getOtherNonNullStringElements();\n-                    }\n-\n-                };\n+    \n+    public void testpredicatedList() {\n+        Predicate predicate = new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n             }\n         };\n+        List list =\n+        ListUtils.predicatedList(new ArrayStack(), predicate);\n+        assertTrue(\"returned object should be a PredicatedList\",\n+            list instanceof PredicatedList);\n+        try {\n+            list =\n+            ListUtils.predicatedList(new ArrayStack(), null);\n+            fail(\"Expecting IllegalArgumentException for null predicate.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            list =\n+            ListUtils.predicatedList(null, predicate);\n+            fail(\"Expecting IllegalArgumentException for null list.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n     }\n \n     public BulkTest bulkTestTypedList() {\n--- a/src/test/org/apache/commons/collections/TestSetUtils.java\n+++ b/src/test/org/apache/commons/collections/TestSetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.7 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.7 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.8 2003/09/12 03:59:00 psteitz Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2003/09/12 03:59:00 $\n  *\n  * ====================================================================\n  *\n import java.util.HashSet;\n import java.util.Set;\n \n+import org.apache.commons.collections.decorators.PredicatedSet;\n+\n import junit.framework.Test;\n \n \n \n     public void testNothing() {\n     }\n-\n-    public BulkTest bulkTestPredicatedSet() {\n-        return new TestPredicatedCollection(\"\") {\n-\n-            public Collection predicatedCollection() {\n-                Predicate p = getPredicate();\n-                return SetUtils.predicatedSet(new HashSet(), p);\n-            }\n-\n-            public BulkTest bulkTestAll() {\n-                return new TestSet(\"\") {\n-                    public Set makeEmptySet() {\n-                        return (Set)predicatedCollection();\n-                    }\n-\n-                    public Object[] getFullElements() {\n-                        return getFullNonNullStringElements();\n-                    }\n-\n-                    public Object[] getOtherElements() {\n-                        return getOtherNonNullStringElements();\n-                    }\n-\n-                };\n+    \n+    public void testpredicatedSet() {\n+        Predicate predicate = new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n             }\n         };\n+        Set set = SetUtils.predicatedSet(new HashSet(), predicate);\n+        assertTrue(\"returned object should be a PredicatedSet\",\n+            set instanceof PredicatedSet);\n+        try {\n+            set = SetUtils.predicatedSet(new HashSet(), null);\n+            fail(\"Expecting IllegalArgumentException for null predicate.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            set = SetUtils.predicatedSet(null, predicate);\n+            fail(\"Expecting IllegalArgumentException for null set.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n     }\n+\n \n     public BulkTest bulkTestTypedSet() {\n         return new TestTypedCollection(\"\") {\n--- a/src/test/org/apache/commons/collections/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.9 2003/09/09 22:28:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.10 2003/09/12 03:59:00 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections decorators tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.9 $ $Date: 2003/09/09 22:28:36 $\n+ * @version $Revision: 1.10 $ $Date: 2003/09/12 03:59:00 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestTransformedSortedSet.suite());\n         suite.addTest(TestPredicatedBag.suite());\n         suite.addTest(TestPredicatedSortedBag.suite());\n+        suite.addTest(TestPredicatedCollection.suite());\n+        suite.addTest(TestPredicatedBuffer.suite());\n+        suite.addTest(TestPredicatedList.suite());\n+        suite.addTest(TestPredicatedSet.suite());\n         \n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedBuffer.java,v 1.1 2003/09/12 03:59:00 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.ArrayStack;\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.BufferUnderflowException;\n+\n+/**\n+ * Extension of {@link TestPredicatedCollection} for exercising the \n+ * {@link PredicatedBuffer} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/12 03:59:00 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedBuffer extends TestPredicatedCollection {\n+    \n+    public TestPredicatedBuffer(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedBuffer.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedBuffer.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //---------------------------------------------------------------\n+    \n+    protected Buffer decorateBuffer(Buffer buffer, Predicate predicate) {\n+        return PredicatedBuffer.decorate(buffer, predicate);\n+    }\n+    \n+    public Collection makeCollection() {\n+        return decorateBuffer(new ArrayStack(), truePredicate);\n+    }\n+    \n+    public Collection makeConfirmedCollection() {\n+        return new ArrayStack();\n+    }\n+    \n+    public Collection makeConfirmedFullCollection() {\n+        ArrayStack list = new ArrayStack();\n+        list.addAll(java.util.Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+    \n+    //------------------------------------------------------------\n+    \n+    public Buffer makeTestBuffer() {\n+        return decorateBuffer(new ArrayStack(), testPredicate);\n+    }\n+    \n+    public void testGet() {\n+        Buffer buffer = makeTestBuffer();\n+        try {\n+            Object o = buffer.get();\n+            fail(\"Expecting BufferUnderflowException\");\n+        } catch (BufferUnderflowException ex) {\n+            // expected\n+        }\n+        buffer.add(\"one\");\n+        buffer.add(\"two\");\n+        buffer.add(\"three\");\n+        assertEquals(\"Buffer get\", buffer.get(), \"three\");\n+    }\n+    \n+    public void testRemove() {\n+        Buffer buffer = makeTestBuffer();\n+        buffer.add(\"one\");\n+        assertEquals(\"Buffer get\", buffer.remove(), \"one\");\n+        try {\n+            buffer.remove();\n+            fail(\"Expecting BufferUnderflowException\");\n+        } catch (BufferUnderflowException ex) {\n+            // expected\n+        }      \n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedCollection.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Turbine\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Arrays;\n+import org.apache.commons.collections.TestCollection;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Extension of {@link TestCollection} for exercising the \n+ * {@link PredicatedCollection} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/12 03:59:00 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedCollection extends TestCollection {\n+\n+    public TestPredicatedCollection(String name) {\n+        super(name);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedCollection.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedCollection.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+ \n+ //------------------------------------------------------------------------\n+        \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    \n+    protected Collection decorateCollection(Collection collection, \n+        Predicate predicate) {\n+        return PredicatedCollection.decorate(collection, predicate);\n+    }\n+    \n+    public Collection makeCollection() {\n+        return decorateCollection(new ArrayList(), truePredicate);\n+    }\n+    \n+    public Collection makeConfirmedCollection() {\n+        return new ArrayList();\n+    }\n+    \n+    protected Object[] getFullElements() {\n+        return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+    }\n+    \n+    protected Collection makeFullCollection() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return decorateCollection(list, truePredicate);\n+    }\n+    \n+    protected Collection makeConfirmedFullCollection() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+ //-----------------------------------------------------------------\n+    protected Predicate testPredicate =  \n+        new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n+            }\n+        };\n+    \n+    public Collection makeTestCollection() {\n+        return decorateCollection(new ArrayList(), testPredicate);\n+    }\n+     \n+    public void testIllegalAdd() {\n+        Collection c = makeTestCollection();\n+        Integer i = new Integer(3);\n+        try {\n+            c.add(i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(i));   \n+    }\n+\n+    public void testIllegalAddAll() {\n+        Collection c = makeTestCollection();\n+        List elements = new ArrayList();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            c.addAll(elements);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(\"one\"));   \n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(\"two\"));   \n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(new Integer(3)));   \n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(\"four\"));   \n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedList.java,v 1.1 2003/09/12 03:59:00 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+/**\n+ * Extension of {@link TestList} for exercising the \n+ * {@link PredicatedList} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/12 03:59:00 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedList extends TestList{\n+    \n+    public TestPredicatedList(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedList.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedList.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------\n+    \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    \n+    protected List decorateList(List list, Predicate predicate) {\n+        return PredicatedList.decorate(list, predicate);\n+    }\n+    \n+    public List makeEmptyList() {\n+        return decorateList(new ArrayList(), truePredicate);\n+    }\n+    \n+    protected Object[] getFullElements() {\n+        return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+    }\n+    \n+//--------------------------------------------------------------------   \n+    \n+     protected Predicate testPredicate =  \n+        new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n+            }\n+        };      \n+    \n+    public List makeTestList() {\n+        return decorateList(new ArrayList(), testPredicate);\n+    }\n+    \n+    public void testIllegalAdd() {\n+        List list = makeTestList();\n+        Integer i = new Integer(3);\n+        try {\n+            list.add(i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !list.contains(i));   \n+    }\n+\n+    public void testIllegalAddAll() {\n+        List list = makeTestList();\n+        List elements = new ArrayList();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            list.addAll(0,elements);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"List shouldn't contain illegal element\", \n+         !list.contains(\"one\"));   \n+        assertTrue(\"List shouldn't contain illegal element\", \n+         !list.contains(\"two\"));   \n+        assertTrue(\"List shouldn't contain illegal element\", \n+         !list.contains(new Integer(3)));   \n+        assertTrue(\"List shouldn't contain illegal element\", \n+         !list.contains(\"four\"));   \n+    }\n+    \n+    public void testIllegalSet() {\n+        List list = makeTestList();\n+        try {\n+            list.set(0,new Integer(3));\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testLegalAddAll() {\n+        List list = makeTestList();\n+        list.add(\"zero\");\n+        List elements = new ArrayList();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(\"three\");\n+        list.addAll(1,elements);\n+        assertTrue(\"List should contain legal element\", \n+         list.contains(\"zero\"));   \n+        assertTrue(\"List should contain legal element\", \n+         list.contains(\"one\"));   \n+        assertTrue(\"List should contain legal element\", \n+         list.contains(\"two\"));   \n+        assertTrue(\"List should contain legal element\", \n+         list.contains(\"three\"));   \n+    }       \n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedSet.java,v 1.1 2003/09/12 03:59:00 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.TestSet;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+/**\n+ * Extension of {@link TestSet} for exercising the \n+ * {@link PredicatedSet} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/12 03:59:00 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedSet extends TestSet{\n+    \n+    public TestPredicatedSet(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedSet.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------\n+    \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    \n+    protected Set decorateSet(Set set, Predicate predicate) {\n+        return PredicatedSet.decorate(set, predicate);\n+    }\n+    \n+    public Set makeEmptySet() {\n+        return decorateSet(new HashSet(), truePredicate);\n+    }\n+    \n+    protected Object[] getFullElements() {\n+        return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+    }\n+    \n+//--------------------------------------------------------------------   \n+    \n+     protected Predicate testPredicate =  \n+        new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n+            }\n+        };      \n+    \n+    public Set makeTestSet() {\n+        return decorateSet(new HashSet(), testPredicate);\n+    }\n+    \n+    public void testGetSet() {\n+         Set set = makeTestSet();\n+        assertTrue(\"returned set should not be null\",\n+            ((PredicatedSet) set).getSet() != null);\n+    }\n+    \n+    public void testIllegalAdd() {\n+        Set set = makeTestSet();\n+        Integer i = new Integer(3);\n+        try {\n+            set.add(i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !set.contains(i));   \n+    }\n+\n+    public void testIllegalAddAll() {\n+        Set set = makeTestSet();\n+        Set elements = new HashSet();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            set.addAll(elements);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"one\"));   \n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"two\"));   \n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(new Integer(3)));   \n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"four\"));   \n+    }\n+        \n+}", "timestamp": 1063339140, "metainfo": ""}