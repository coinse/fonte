{"sha": "e6c2735e952c4972095afcd9f286d5c5c6f933a7", "log": "[COLLECTIONS-537] Harmonized signature of functor-related factory methods: collection and array based methods did not have the same generic bounds. Thanks to Frank Jakop.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/ClosureUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/ClosureUtils.java\n      * @throws IllegalArgumentException if the closures collection is empty\n      * @throws IllegalArgumentException if any closure in the collection is null\n      */\n-    public static <E> Closure<E> chainedClosure(final Collection<Closure<E>> closures) {\n+    public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures) {\n         return ChainedClosure.chainedClosure(closures);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/PredicateUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/PredicateUtils.java\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      * @see org.apache.commons.collections4.functors.AllPredicate\n      */\n-    public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<T>> predicates) {\n+    public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         return AllPredicate.allPredicate(predicates);\n     }\n \n      * @throws IllegalArgumentException if any predicate in the collection is null\n      * @see org.apache.commons.collections4.functors.AnyPredicate\n      */\n-    public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<T>> predicates) {\n+    public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         return AnyPredicate.anyPredicate(predicates);\n     }\n \n      * @throws IllegalArgumentException if any predicate in the collection is null\n      * @see org.apache.commons.collections4.functors.OnePredicate\n      */\n-    public static <T> Predicate<T> onePredicate(final Collection<Predicate<T>> predicates) {\n+    public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         return OnePredicate.onePredicate(predicates);\n     }\n \n      * @throws IllegalArgumentException if any predicate in the collection is null\n      * @see org.apache.commons.collections4.functors.NonePredicate\n      */\n-    public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<T>> predicates) {\n+    public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         return NonePredicate.nonePredicate(predicates);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/TransformerUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/TransformerUtils.java\n      * @see org.apache.commons.collections4.functors.ChainedTransformer\n      */\n     public static <T> Transformer<T, T> chainedTransformer(\n-            final Collection<? extends Transformer<T, T>> transformers) {\n+            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n         return ChainedTransformer.chainedTransformer(transformers);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n-    public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<T>> predicates) {\n-        final Predicate<T>[] preds = validate(predicates);\n+    public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n+        final Predicate<? super T>[] preds = validate(predicates);\n         if (preds.length == 0) {\n             return truePredicate();\n         }\n         if (preds.length == 1) {\n-            return preds[0];\n+            return coerce(preds[0]);\n         }\n         return new AllPredicate<T>(preds);\n     }\n--- a/src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<T>> predicates) {\n+    public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         final Predicate<? super T>[] preds = FunctorUtils.validate(predicates);\n         if (preds.length == 0) {\n             return FalsePredicate.<T>falsePredicate();\n--- a/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java\n      * @throws IllegalArgumentException if any closure in the collection is null\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <E> Closure<E> chainedClosure(final Collection<Closure<E>> closures) {\n+    public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures) {\n         if (closures == null) {\n             throw new IllegalArgumentException(\"Closure collection must not be null\");\n         }\n--- a/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java\n      * @throws IllegalArgumentException if any transformer in the collection is null\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<T, T>> transformers) {\n+    public static <T> Transformer<T, T> chainedTransformer(\n+            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n         if (transformers == null) {\n             throw new IllegalArgumentException(\"Transformer collection must not be null\");\n         }\n--- a/src/main/java/org/apache/commons/collections4/functors/FunctorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/FunctorUtils.java\n      * @return the coerced predicate.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    static <T> Predicate<T> coerce(final Predicate<? super T> predicate){\n+    static <T> Predicate<T> coerce(final Predicate<? super T> predicate) {\n         return (Predicate<T>) predicate;\n     }\n \n      * @param predicates  the predicates to validate\n      * @return predicate array\n      */\n-    static <T> Predicate<T>[] validate(final Collection<? extends Predicate<T>> predicates) {\n+    static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates) {\n         if (predicates == null) {\n             throw new IllegalArgumentException(\"The predicate collection must not be null\");\n         }\n         // convert to array like this to guarantee iterator() ordering\n         @SuppressWarnings(\"unchecked\") // OK\n-        final Predicate<T>[] preds = new Predicate[predicates.size()];\n+        final Predicate<? super T>[] preds = new Predicate[predicates.size()];\n         int i = 0;\n-        for (final Predicate<T> predicate : predicates) {\n+        for (final Predicate<? super T> predicate : predicates) {\n             preds[i] = predicate;\n             if (preds[i] == null) {\n                 throw new IllegalArgumentException(\n      * @return the coerced closure.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    static <T> Closure<T> coerce(final Closure<? super T> closure){\n+    static <T> Closure<T> coerce(final Closure<? super T> closure) {\n         return (Closure<T>) closure;\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/functors/NonePredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/NonePredicate.java\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n-    public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<T>> predicates) {\n+    public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         final Predicate<? super T>[] preds = FunctorUtils.validate(predicates);\n         if (preds.length == 0) {\n             return TruePredicate.<T>truePredicate();\n--- a/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n-    public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<T>> predicates) {\n+    public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         final Predicate<? super T>[] preds = FunctorUtils.validate(predicates);\n         return new OnePredicate<T>(preds);\n     }", "timestamp": 1419963854, "metainfo": ""}