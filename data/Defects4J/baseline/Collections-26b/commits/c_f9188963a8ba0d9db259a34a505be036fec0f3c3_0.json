{"sha": "f9188963a8ba0d9db259a34a505be036fec0f3c3", "log": "Added test cases for new methods in ListUtils #retainAll(Collection, Collection) #removeAll(Collection, Collection) #unmodifiableListCopy(Collection)   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n /**\n  * Tests for ListUtils.\n  * \n- * @version $Revision: 1.19 $ $Date: 2004/06/02 22:12:14 $\n+ * @version $Revision: 1.20 $ $Date: 2004/12/11 06:24:10 $\n  * \n  * @author Stephen Colebourne\n  * @author Neil O'Toole\n  */\n public class TestListUtils extends BulkTest {\n \n-    public TestListUtils(String name) {\n+\tprivate static final String a = \"a\";\n+\tprivate static final String b = \"b\";\n+\tprivate static final String c = \"c\";\n+\tprivate static final String d = \"d\";\n+\tprivate static final String e = \"e\";\n+\tprivate static final String x = \"x\";\n+\n+\tprivate String[] fullArray;\n+\tprivate List fullList;\n+\t\n+\tpublic TestListUtils(String name) {\n         super(name);\n     }\n \n         return BulkTest.makeSuite(TestListUtils.class);\n     }\n \n+\tpublic void setUp() {\n+\t\tfullArray = new String[]{a, b, c, d, e};\n+\t\tfullList = new ArrayList(Arrays.asList(fullArray));\n+\t}\n+    \n+    \n     public void testNothing() {\n     }\n     \n         a.clear();\n         assertEquals(false, ListUtils.hashCodeForList(a) == ListUtils.hashCodeForList(b));\n         assertEquals(0, ListUtils.hashCodeForList(null));\n-\t}\t\n+\t}\n+\t\n+\tpublic void testUnmodifiableListCopy() {\n+\t\tList list = new ArrayList();\n+\t\tlist.add(\"a\");\n+\t\tList copy = ListUtils.unmodifiableListCopy(list);\n+\n+\t\tassertTrue(copy instanceof Unmodifiable);\n+\t\tassertTrue(list.equals(copy));\n+\t\tlist.clear();\n+\t\tassertTrue(copy.isEmpty() == false);\n+\n+\t\ttry\n+\t\t{\n+\t\t\tcopy.clear();\n+\t\t\tfail(\"should be unmodifiable.\");\n+\t\t}\n+\t\tcatch (UnsupportedOperationException uoe)\n+\t\t{\n+\t\t\t// this is what we want\n+\t\t}\n+\t\t\n+\t\ttry\n+\t\t{\n+\t\t\tlist = ListUtils.unmodifiableListCopy(null);\n+\t\t\tfail(\"expecting IllegalArgumentException\");\n+\t\t}\n+\t\tcatch (IllegalArgumentException iae)\n+\t\t{\n+\t\t\t// this is what we want\n+\t\t}\n+\t}\n+\t\n+\tpublic void testRetainAll() {\n+\t\tList sub = new ArrayList();\n+\t\tsub.add(a);\n+\t\tsub.add(b);\n+\t\tsub.add(x);\n+\n+\t\tList retained = ListUtils.retainAll(fullList, sub);\n+\t\tassertTrue(retained.size() == 2);\n+\t\tsub.remove(x);\n+\t\tassertTrue(retained.equals(sub));\n+\t\tfullList.retainAll(sub);\n+\t\tassertTrue(retained.equals(fullList));\n+\t\t\n+\t\ttry\n+\t\t{\n+\t\t\tList list = ListUtils.retainAll(null, null);\n+\t\t\tfail(\"expecting NullPointerException\");\n+\t\t}\n+\t\tcatch(NullPointerException npe)\n+\t\t{} // this is what we want\n+\t}\n+\n+\tpublic void testRemoveAll() {\n+\t\tList sub = new ArrayList();\n+\t\tsub.add(a);\n+\t\tsub.add(b);\n+\t\tsub.add(x);\n+\n+\t\tList remainder = ListUtils.removeAll(fullList, sub);\n+\t\tassertTrue(remainder.size() == 3);\n+\t\tfullList.removeAll(sub);\n+\t\tassertTrue(remainder.equals(fullList));\n+\t\t\n+\t\ttry\n+\t\t{\n+\t\t\tList list = ListUtils.removeAll(null, null);\n+\t\t\tfail(\"expecting NullPointerException\");\n+\t\t}\n+\t\tcatch(NullPointerException npe)\n+\t\t{} // this is what we want\n+\t}\n \t\n }", "timestamp": 1102746250, "metainfo": ""}