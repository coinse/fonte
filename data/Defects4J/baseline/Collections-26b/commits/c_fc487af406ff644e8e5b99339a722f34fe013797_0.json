{"sha": "fc487af406ff644e8e5b99339a722f34fe013797", "log": "Make new Bag implementations Serializable   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.1 2003/12/02 23:36:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.2 2003/12/03 00:49:38 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.bag;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.lang.reflect.Array;\n import java.util.Collection;\n import java.util.Collections;\n  * the number of occurrences of that element in the bag.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/02 23:36:12 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 00:49:38 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n public abstract class AbstractMapBag implements Bag {\n     \n     /** The map to use to store the data */\n-    private final Map map;\n+    private transient Map map;\n     /** The current total size of the bag */\n     private int size;\n     /** The modification count for fail fast iterators */\n     private transient Set uniqueSet;\n \n     /**\n+     * Constructor needed for subclass serialisation.\n+     * \n+     * @param map  the map to assign\n+     */\n+    protected AbstractMapBag() {\n+        super();\n+    }\n+\n+    /**\n      * Constructor that assigns the specified Map as the backing store.\n-     * The map must be empty.\n+     * The map must be empty and non-null.\n      * \n      * @param map  the map to assign\n      */\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Write the map out using a custom routine.\n+     */\n+    protected void doWriteObject(ObjectOutputStream out) throws IOException {\n+        out.writeInt(map.size());\n+        for (Iterator it = map.entrySet().iterator(); it.hasNext();) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            out.writeObject(entry.getKey());\n+            out.writeInt(((MutableInteger) entry.getValue()).value);\n+        }\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     */\n+    protected void doReadObject(Map map, ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        this.map = map;\n+        int entrySize = in.readInt();\n+        for (int i = 0; i < entrySize; i++) {\n+            Object key = in.readObject();\n+            int value = in.readInt();\n+            map.put(key, new MutableInteger(value));\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n      * Returns true if the given object is not null, has the precise type \n      * of this bag, and contains the same number of occurrences of all the\n      * same elements.\n--- a/src/java/org/apache/commons/collections/bag/HashBag.java\n+++ b/src/java/org/apache/commons/collections/bag/HashBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/HashBag.java,v 1.1 2003/12/02 23:36:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/HashBag.java,v 1.2 2003/12/03 00:49:38 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.bag;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n import java.util.Collection;\n import java.util.HashMap;\n \n  * data storage. This is the standard implementation of a bag.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/02 23:36:12 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 00:49:38 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n  */\n-public class HashBag extends AbstractMapBag implements Bag {\n+public class HashBag extends AbstractMapBag implements Bag, Serializable {\n \n+    /** Serial version lock */\n+    static final long serialVersionUID = -6561115435802554013L;\n+    \n     /**\n-     * Constructs an empty <Code>HashBag</Code>.\n+     * Constructs an empty <code>HashBag</code>.\n      */\n     public HashBag() {\n         super(new HashMap());\n     }\n \n     /**\n-     * Constructs a {@link Bag} containing all the members of the given collection.\n+     * Constructs a bag containing all the members of the given collection.\n      * \n      * @param coll  a collection to copy into this bag\n      */\n         addAll(coll);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the bag out using a custom routine.\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        super.doWriteObject(out);\n+    }\n+\n+    /**\n+     * Read the bag in using a custom routine.\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        super.doReadObject(new HashMap(), in);\n+    }\n+    \n }\n--- a/src/java/org/apache/commons/collections/bag/TreeBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TreeBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TreeBag.java,v 1.1 2003/12/02 23:36:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TreeBag.java,v 1.2 2003/12/03 00:49:38 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.bag;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n import java.util.Collection;\n import java.util.Comparator;\n import java.util.SortedMap;\n  * iterator.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/02 23:36:12 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 00:49:38 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n  */\n-public class TreeBag extends AbstractMapBag implements SortedBag {\n+public class TreeBag extends AbstractMapBag implements SortedBag, Serializable {\n \n+    /** Serial version lock */\n+    static final long serialVersionUID = -7740146511091606676L;\n+    \n     /**\n      * Constructs an empty <code>TreeBag</code>.\n      */\n         addAll(coll);\n     }\n \n+    //-----------------------------------------------------------------------\n     public Object first() {\n         return ((SortedMap) getMap()).firstKey();\n     }\n     public Comparator comparator() {\n         return ((SortedMap) getMap()).comparator();\n     }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the bag out using a custom routine.\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(comparator());\n+        super.doWriteObject(out);\n+    }\n+\n+    /**\n+     * Read the bag in using a custom routine.\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        Comparator comp = (Comparator) in.readObject();\n+        super.doReadObject(new TreeMap(comp), in);\n+    }\n     \n }\n--- a/src/test/org/apache/commons/collections/bag/TestHashBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestHashBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestHashBag.java,v 1.1 2003/12/02 23:36:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestHashBag.java,v 1.2 2003/12/03 00:49:38 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Extension of {@link TestBag} for exercising the {@link HashBag}\n  * implementation.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/12/02 23:36:12 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 00:49:38 $\n  *\n  * @author Chuck Burdick\n  */\n         return new HashBag();\n     }\n     \n+    public String getCompatibilityVersion() {\n+        return \"3\";\n+    }\n+    \n+//    public void testCreate() throws Exception {\n+//        Bag bag = makeBag();\n+//        writeExternalFormToDisk((Serializable) bag, \"D:/dev/collections/data/test/HashBag.emptyCollection.version3.obj\");\n+//        bag = makeBag();\n+//        bag.add(\"A\");\n+//        bag.add(\"A\");\n+//        bag.add(\"B\");\n+//        bag.add(\"B\");\n+//        bag.add(\"C\");\n+//        writeExternalFormToDisk((Serializable) bag, \"D:/dev/collections/data/test/HashBag.fullCollection.version3.obj\");\n+//    }\n }\n--- a/src/test/org/apache/commons/collections/bag/TestTreeBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTreeBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTreeBag.java,v 1.1 2003/12/02 23:36:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTreeBag.java,v 1.2 2003/12/03 00:49:38 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Extension of {@link TestBag} for exercising the {@link TreeBag}\n  * implementation.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/12/02 23:36:12 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 00:49:38 $\n  *\n  * @author Chuck Burdick\n  */\n       assertEquals(\"Should get last key\",\n                    \"D\", ((SortedBag)bag).last());\n    }\n+   \n+   public String getCompatibilityVersion() {\n+       return \"3\";\n+   }\n+    \n+//   public void testCreate() throws Exception {\n+//       Bag bag = makeBag();\n+//       writeExternalFormToDisk((Serializable) bag, \"D:/dev/collections/data/test/TreeBag.emptyCollection.version3.obj\");\n+//       bag = makeBag();\n+//       bag.add(\"A\");\n+//       bag.add(\"A\");\n+//       bag.add(\"B\");\n+//       bag.add(\"B\");\n+//       bag.add(\"C\");\n+//       writeExternalFormToDisk((Serializable) bag, \"D:/dev/collections/data/test/TreeBag.fullCollection.version3.obj\");\n+//   }\n }", "timestamp": 1070412578, "metainfo": ""}