{"sha": "c676de25d3a49f143b99a6998dad22515415238b", "log": "Make DualHashBidiMap serialiizable   ", "commit": "\n--- a/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n+++ b/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.1 2003/10/06 23:47:17 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.2 2003/10/09 20:21:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>createMap</code> method.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: AbstractDualBidiMap.java,v 1.1 2003/10/06 23:47:17 scolebourne Exp $\n+ * @version $Id: AbstractDualBidiMap.java,v 1.2 2003/10/09 20:21:32 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n     protected transient Set entrySet = null;\n \n     /**\n-     * Creates an empty map.\n+     * Creates an empty map, initialised by <code>createMap</code>.\n      * <p>\n-     * The maps passed in are not validated, so subclasses need to ensure\n-     * that they are non-null, empty and compatible.\n-     * \n-     * @param normalMap  the normal direction map\n-     * @param reverseMap  the reverse direction map\n-     */\n-    protected AbstractDualBidiMap(Map normalMap, Map reverseMap) {\n+     * The map array must be populated by the subclass.\n+     */\n+    protected AbstractDualBidiMap() {\n         super();\n-        maps[0] = normalMap;\n-        maps[1] = reverseMap;\n+        maps[0] = createMap();\n+        maps[1] = createMap();\n     }\n \n     /** \n-     * Constructs a map that decorates the specified maps.\n+     * Constructs a map that decorates the specified maps,\n+     * used by the subclass <code>createBidiMap</code> implementation.\n      *\n      * @param normalMap  the normal direction map\n      * @param reverseMap  the reverse direction map\n         maps[1] = reverseMap;\n         this.inverseBidiMap = inverseBidiMap;\n     }\n-    \n+\n+    /**\n+     * Creates a new instance of the map used by the subclass to store data.\n+     * <p>\n+     * Do not change any instance variables from this method.\n+     * \n+     * @return the map to be used for internal storage\n+     */\n+    protected abstract Map createMap();\n+\n     /**\n      * Creates a new instance of the subclass.\n      * \n--- a/src/java/org/apache/commons/collections/DualHashBidiMap.java\n+++ b/src/java/org/apache/commons/collections/DualHashBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/DualHashBidiMap.java,v 1.1 2003/10/06 23:47:17 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/DualHashBidiMap.java,v 1.2 2003/10/09 20:21:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n \n  * Implementation of <code>BidiMap</code> that uses two <code>HashMap</code> instances.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: DualHashBidiMap.java,v 1.1 2003/10/06 23:47:17 scolebourne Exp $\n+ * @version $Id: DualHashBidiMap.java,v 1.2 2003/10/09 20:21:32 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n  */\n-public class DualHashBidiMap extends AbstractDualBidiMap {\n+public class DualHashBidiMap extends AbstractDualBidiMap implements Serializable {\n+\n+    /** Ensure serialization compatability */\n+    private static final long serialVersionUID = 721969328361808L;\n \n     /**\n      * Creates an empty <code>HashBidiMap</code>\n      */\n     public DualHashBidiMap() {\n-        super(new HashMap(), new HashMap());\n+        super();\n     }\n \n     /** \n      * @param map  the map whose mappings are to be placed in this map\n      */\n     public DualHashBidiMap(Map map) {\n-        super(new HashMap(), new HashMap());\n+        super();\n         putAll(map);\n     }\n-\n+    \n     /** \n      * Constructs a <code>HashBidiMap</code> that decorates the specified maps.\n      *\n     protected DualHashBidiMap(Map normalMap, Map reverseMap, BidiMap inverseBidiMap) {\n         super(normalMap, reverseMap, inverseBidiMap);\n     }\n-    \n+\n+    /**\n+     * Creates a new instance of the map used by the subclass to store data.\n+     * \n+     * @return the map to be used for internal storage\n+     */\n+    protected Map createMap() {\n+        return new HashMap();\n+    }\n+\n     /**\n      * Creates a new instance of this object.\n      * \n         return new DualHashBidiMap(normalMap, reverseMap, inverseMap);\n     }\n \n+    // Serialization\n+    //-----------------------------------------------------------------------\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(maps[0]);\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        Map map = (Map) in.readObject();\n+        putAll(map);\n+    }\n \n }\n--- a/src/test/org/apache/commons/collections/TestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/TestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.6 2003/10/07 22:20:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.7 2003/10/09 20:21:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/10/07 22:20:57 $\n+ * @version $Revision: 1.7 $ $Date: 2003/10/09 20:21:32 $\n  * \n  * @author Matthew Hawthorne\n  */\n         return false;\n     }\n     \n+    /**\n+     * Override as DualHashBidiMap didn't exist until version 3.\n+     */\n+    protected String getCompatibilityVersion() {\n+        return \"3\";\n+    }\n+\n     // BidiPut\n     //-----------------------------------------------------------------------\n     public void testBidiPut() {\n         protected BidiMap makeEmptyBidiMap() {\n             return main.makeEmptyBidiMap().inverseBidiMap();\n         }\n-        \n         protected BidiMap makeFullBidiMap() {\n             return main.makeFullBidiMap().inverseBidiMap();\n         }\n+        \n+        protected String getCompatibilityVersion() {\n+            return main.getCompatibilityVersion();\n+        }\n+        protected boolean isAllowNullKey() {\n+            return main.isAllowNullKey();\n+        }\n+        protected boolean isAllowNullValue() {\n+            return main.isAllowNullValue();\n+        }\n+        protected boolean isPutAddSupported() {\n+            return main.isPutAddSupported();\n+        }\n+        protected boolean isPutChangeSupported() {\n+            return main.isPutChangeSupported();\n+        }\n+        protected boolean isRemoveSupported() {\n+            return main.isRemoveSupported();\n+        }\n+\n     }\n     \n }", "timestamp": 1065730892, "metainfo": ""}