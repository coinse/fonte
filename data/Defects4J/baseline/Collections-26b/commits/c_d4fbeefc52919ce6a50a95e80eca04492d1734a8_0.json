{"sha": "d4fbeefc52919ce6a50a95e80eca04492d1734a8", "log": "Convert to Junit 4 tests.  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections4/BagUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/BagUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n-import junit.framework.Test;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import org.apache.commons.collections4.bag.HashBag;\n import org.apache.commons.collections4.bag.PredicatedBag;\n import org.apache.commons.collections4.bag.UnmodifiableBag;\n import org.apache.commons.collections4.bag.UnmodifiableSortedBag;\n import org.apache.commons.collections4.functors.TruePredicate;\n+import org.junit.Test;\n \n /**\n  * Tests for BagUtils factory methods.\n  *\n  * @version $Id$\n  */\n-public class BagUtilsTest extends BulkTest {\n+public class BagUtilsTest {\n \n-    public BagUtilsTest(final String name) {\n-        super(name);\n-    }\n-\n-\n-    public static Test suite() {\n-        return BulkTest.makeSuite(BagUtilsTest.class);\n-    }\n-\n-    //----------------------------------------------------------------------\n-\n-    protected Class<?> stringClass = this.getName().getClass();\n     protected Predicate<Object> truePredicate = TruePredicate.truePredicate();\n     protected Transformer<Object, Object> nopTransformer = TransformerUtils.nopTransformer();\n \n     //----------------------------------------------------------------------\n \n+    @Test\n     public void testSynchronizedBag() {\n         Bag<Object> bag = BagUtils.synchronizedBag(new HashBag<Object>());\n         assertTrue(\"Returned object should be a SynchronizedBag.\",\n         }\n     }\n \n+    @Test\n     public void testUnmodifiableBag() {\n         Bag<Object> bag = BagUtils.unmodifiableBag(new HashBag<Object>());\n         assertTrue(\"Returned object should be an UnmodifiableBag.\",\n         assertSame(\"UnmodifiableBag shall not be decorated\", bag, BagUtils.unmodifiableBag(bag));\n     }\n \n+    @Test\n     public void testPredicatedBag() {\n         Bag<Object> bag = BagUtils.predicatedBag(new HashBag<Object>(), truePredicate);\n         assertTrue(\"Returned object should be a PredicatedBag.\",\n         }\n     }\n \n-     public void testTransformedBag() {\n+    @Test\n+    public void testTransformedBag() {\n         Bag<Object> bag = BagUtils.transformingBag(new HashBag<Object>(), nopTransformer);\n         assertTrue(\"Returned object should be an TransformedBag.\",\n             bag instanceof TransformedBag);\n         }\n     }\n \n+    @Test\n     public void testSynchronizedSortedBag() {\n         Bag<Object> bag = BagUtils.synchronizedSortedBag(new TreeBag<Object>());\n         assertTrue(\"Returned object should be a SynchronizedSortedBag.\",\n         }\n     }\n \n+    @Test\n     public void testUnmodifiableSortedBag() {\n         SortedBag<Object> bag = BagUtils.unmodifiableSortedBag(new TreeBag<Object>());\n         assertTrue(\"Returned object should be an UnmodifiableSortedBag.\",\n         assertSame(\"UnmodifiableSortedBag shall not be decorated\", bag, BagUtils.unmodifiableSortedBag(bag));\n     }\n \n+    @Test\n     public void testPredicatedSortedBag() {\n         Bag<Object> bag = BagUtils.predicatedSortedBag(new TreeBag<Object>(), truePredicate);\n         assertTrue(\"Returned object should be a PredicatedSortedBag.\",\n         }\n     }\n \n+    @Test\n     public void testTransformedSortedBag() {\n         Bag<Object> bag = BagUtils.transformingSortedBag(new TreeBag<Object>(), nopTransformer);\n         assertTrue(\"Returned object should be an TransformedSortedBag\",\n--- a/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.fail;\n+\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.collections4.functors.EqualPredicate;\n import org.apache.commons.collections4.functors.ExceptionClosure;\n import org.apache.commons.collections4.functors.FalsePredicate;\n import org.apache.commons.collections4.functors.NOPClosure;\n import org.apache.commons.collections4.functors.TruePredicate;\n+import org.junit.Test;\n \n /**\n  * Tests the ClosureUtils class.\n  * @since 3.0\n  * @version $Id$\n  */\n-public class ClosureUtilsTest extends TestCase {\n+public class ClosureUtilsTest {\n \n     private static final Object cString = \"Hello\";\n \n     // exceptionClosure\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testExceptionClosure() {\n         assertNotNull(ClosureUtils.exceptionClosure());\n         assertSame(ClosureUtils.exceptionClosure(), ClosureUtils.exceptionClosure());\n     // nopClosure\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testNopClosure() {\n         final StringBuilder buf = new StringBuilder(\"Hello\");\n         ClosureUtils.nopClosure().execute(null);\n     // invokeClosure\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testInvokeClosure() {\n         StringBuffer buf = new StringBuffer(\"Hello\"); // Only StringBuffer has setLength() method\n         ClosureUtils.invokerClosure(\"reverse\").execute(buf);\n     // forClosure\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testForClosure() {\n         final MockClosure<Object> cmd = new MockClosure<Object>();\n         ClosureUtils.forClosure(5, cmd).execute(null);\n     // whileClosure\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testWhileClosure() {\n         MockClosure<Object> cmd = new MockClosure<Object>();\n         ClosureUtils.whileClosure(FalsePredicate.falsePredicate(), cmd).execute(null);\n     // doWhileClosure\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testDoWhileClosure() {\n         MockClosure<Object> cmd = new MockClosure<Object>();\n         ClosureUtils.doWhileClosure(cmd, FalsePredicate.falsePredicate()).execute(null);\n     // chainedClosure\n     //------------------------------------------------------------------\n \n+    @Test\n     @SuppressWarnings(\"unchecked\")\n     public void testChainedClosure() {\n         MockClosure<Object> a = new MockClosure<Object>();\n     // ifClosure\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testIfClosure() {\n         MockClosure<Object> a = new MockClosure<Object>();\n         MockClosure<Object> b = null;\n     // switchClosure\n     //------------------------------------------------------------------\n \n+    @Test\n     @SuppressWarnings(\"unchecked\")\n     public void testSwitchClosure() {\n         final MockClosure<String> a = new MockClosure<String>();\n     // switchMapClosure\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testSwitchMapClosure() {\n         final MockClosure<String> a = new MockClosure<String>();\n         final MockClosure<String> b = new MockClosure<String>();\n     // asClosure\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testTransformerClosure() {\n         final MockTransformer<Object> mock = new MockTransformer<Object>();\n         final Closure<Object> closure = ClosureUtils.asClosure(mock);\n     //------------------------------------------------------------------\n \n     /**\n-     * Test that all Closure singletones hold singleton pattern in\n+     * Test that all Closure singletons hold singleton pattern in\n      * serialization/deserialization process.\n      */\n+    @Test\n     public void testSingletonPatternInSerialization() {\n         final Object[] singletones = new Object[] {\n                 ExceptionClosure.INSTANCE,\n--- a/src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n  * @since 3.0\n  * @version $Id$\n  */\n-public class FactoryUtilsTest extends junit.framework.TestCase {\n-\n-    /**\n-     * Set up instance variables required by this test case.\n-     */\n-    @Override\n-    public void setUp() {\n-    }\n-\n-    /**\n-     * Tear down instance variables required by this test case.\n-     */\n-    @Override\n-    public void tearDown() {\n-    }\n+public class FactoryUtilsTest {\n \n     // exceptionFactory\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testExceptionFactory() {\n         assertNotNull(FactoryUtils.exceptionFactory());\n         assertSame(FactoryUtils.exceptionFactory(), FactoryUtils.exceptionFactory());\n     // nullFactory\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testNullFactory() {\n         final Factory<Object> factory = FactoryUtils.nullFactory();\n         assertNotNull(factory);\n     // constantFactory\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testConstantFactoryNull() {\n         final Factory<Object> factory = FactoryUtils.constantFactory(null);\n         assertNotNull(factory);\n         assertNull(created);\n     }\n \n+    @Test\n     public void testConstantFactoryConstant() {\n         final Integer constant = Integer.valueOf(9);\n         final Factory<Integer> factory = FactoryUtils.constantFactory(constant);\n     // prototypeFactory\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testPrototypeFactoryNull() {\n         assertSame(ConstantFactory.NULL_INSTANCE, FactoryUtils.prototypeFactory(null));\n     }\n \n+    @Test\n     public void testPrototypeFactoryPublicCloneMethod() throws Exception {\n         final Date proto = new Date();\n         final Factory<Date> factory = FactoryUtils.prototypeFactory(proto);\n         in.close();\n     }\n \n+    @Test\n     public void testPrototypeFactoryPublicCopyConstructor() throws Exception {\n         final Mock1 proto = new Mock1(6);\n         Factory<Object> factory = FactoryUtils.<Object>prototypeFactory(proto);\n         in.close();\n     }\n \n+    @Test\n     public void testPrototypeFactoryPublicSerialization() throws Exception {\n         final Integer proto = Integer.valueOf(9);\n         final Factory<Integer> factory = FactoryUtils.prototypeFactory(proto);\n         in.close();\n     }\n \n+    @Test\n     public void testPrototypeFactoryPublicSerializationError() {\n         final Mock2 proto = new Mock2(new Object());\n         final Factory<Object> factory = FactoryUtils.<Object>prototypeFactory(proto);\n         fail();\n     }\n \n+    @Test\n     public void testPrototypeFactoryPublicBad() {\n         final Object proto = new Object();\n         try {\n      * Test that all Factory singletones hold singleton pattern in\n      * serialization/deserialization process.\n      */\n+    @Test\n     public void testSingletonPatternInSerialization() {\n         final Object[] singletones = new Object[] {\n                 ExceptionFactory.INSTANCE,\n--- a/src/test/java/org/apache/commons/collections4/ListUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/ListUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n \n-import junit.framework.Test;\n-\n import org.apache.commons.collections4.functors.EqualPredicate;\n import org.apache.commons.collections4.list.PredicatedList;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * Tests for ListUtils.\n  *\n  * @version $Id$\n  */\n-public class ListUtilsTest extends BulkTest {\n+public class ListUtilsTest {\n \n     private static final String a = \"a\";\n     private static final String b = \"b\";\n     private String[] fullArray;\n     private List<String> fullList;\n \n-    public ListUtilsTest(final String name) {\n-        super(name);\n-    }\n-\n-    public static Test suite() {\n-        return BulkTest.makeSuite(ListUtilsTest.class);\n-    }\n-\n-    @Override\n+    @Before\n     public void setUp() {\n         fullArray = new String[]{a, b, c, d, e};\n         fullList = new ArrayList<String>(Arrays.asList(fullArray));\n     }\n \n-    public void testNothing() {\n-    }\n-\n     /**\n      * Tests intersecting a non-empty list with an empty list.\n      */\n+    @Test\n     public void testIntersectNonEmptyWithEmptyList() {\n         final List<String> empty = Collections.<String>emptyList();\n         assertTrue(\"result not empty\", ListUtils.intersection(empty, fullList).isEmpty());\n     /**\n      * Tests intersecting a non-empty list with an empty list.\n      */\n+    @Test\n     public void testIntersectEmptyWithEmptyList() {\n         final List<?> empty = Collections.EMPTY_LIST;\n         assertTrue(\"result not empty\", ListUtils.intersection(empty, empty).isEmpty());\n     }\n \n     /**\n-     * Tests intersecting a non-empty list with an subset of iteself.\n-     */\n+     * Tests intersecting a non-empty list with an subset of itself.\n+     */\n+    @Test\n     public void testIntersectNonEmptySubset() {\n         // create a copy\n         final List<String> other = new ArrayList<String>(fullList);\n     }\n \n     /**\n-     * Tests intersecting a non-empty list with an subset of iteself.\n-     */\n+     * Tests intersecting a non-empty list with an subset of itself.\n+     */\n+    @Test\n     public void testIntersectListWithNoOverlapAndDifferentTypes() {\n         @SuppressWarnings(\"boxing\")\n         final List<Integer> other = Arrays.asList(1, 23);\n     }\n \n     /**\n-     * Tests intersecting a non-empty list with iteself.\n-     */\n+     * Tests intersecting a non-empty list with itself.\n+     */\n+    @Test\n     public void testIntersectListWithSelf() {\n         assertEquals(fullList, ListUtils.intersection(fullList, fullList));\n     }\n     /**\n      * Tests intersecting two lists in different orders.\n      */\n+    @Test\n     public void testIntersectionOrderInsensitivity() {\n         final List<String> one = new ArrayList<String>();\n         final List<String> two = new ArrayList<String>();\n         assertEquals(ListUtils.intersection(one,two),ListUtils.intersection(two, one));\n     }\n \n+    @Test\n     public void testPredicatedList() {\n         final Predicate<Object> predicate = new Predicate<Object>() {\n             public boolean evaluate(final Object o) {\n         }\n     }\n \n+    @Test\n     public void testLazyList() {\n         final List<Integer> list = ListUtils.lazyList(new ArrayList<Integer>(), new Factory<Integer>() {\n \n         assertEquals(6, list.size());\n     }\n \n+    @Test\n     public void testEmptyIfNull() {\n         assertTrue(ListUtils.emptyIfNull(null).isEmpty());\n \n         assertSame(list, ListUtils.emptyIfNull(list));\n     }\n \n+    @Test\n     public void testDefaultIfNull() {\n         assertTrue(ListUtils.defaultIfNull(null, Collections.emptyList()).isEmpty());\n \n         assertSame(list, ListUtils.defaultIfNull(list, Collections.<Long>emptyList()));\n     }\n \n+    @Test\n     public void testEquals() {\n         final Collection<String> data = Arrays.asList(\"a\", \"b\", \"c\");\n \n         assertEquals(true, ListUtils.isEqualList(null, null));\n     }\n \n+    @Test\n     public void testHashCode() {\n         final Collection<String> data = Arrays.asList(\"a\", \"b\", \"c\");\n \n         assertEquals(0, ListUtils.hashCodeForList(null));\n     }\n \n+    @Test\n     public void testRetainAll() {\n         final List<String> sub = new ArrayList<String>();\n         sub.add(a);\n         } catch(final NullPointerException npe){} // this is what we want\n     }\n \n+    @Test\n     public void testRemoveAll() {\n         final List<String> sub = new ArrayList<String>();\n         sub.add(a);\n         } catch(final NullPointerException npe) {} // this is what we want\n     }\n \n+    @Test\n     public void testSubtract() {\n         final List<String> list = new ArrayList<String>();\n         list.add(a);\n         } catch(final NullPointerException npe) {} // this is what we want\n     }\n \n+    @Test\n     public void testSubtractNullElement() {\n         final List<String> list = new ArrayList<String>();\n         list.add(a);\n     /**\n      * Tests the <code>indexOf</code> method in <code>ListUtils</code> class..\n      */\n+    @Test\n     public void testIndexOf() {\n         Predicate<String> testPredicate = EqualPredicate.equalPredicate(\"d\");\n         int index = ListUtils.indexOf(fullList, testPredicate);\n         assertEquals(ListUtils.indexOf(fullList, null), -1);\n     }\n \n+    @Test\n     @SuppressWarnings(\"boxing\") // OK in test code\n     public void testLongestCommonSubsequence() {\n \n         assertTrue(lcs.isEmpty());\n     }\n \n+    @Test\n     public void testLongestCommonSubsequenceWithString() {\n \n       try {\n       lcs = ListUtils.longestCommonSubsequence(banana, zorro);\n \n       assertEquals(0, lcs.length());\n-  }\n-\n+    }\n+\n+    @Test\n     @SuppressWarnings(\"boxing\") // OK in test code\n     public void testPartition() {\n         final List<Integer> strings = new ArrayList<Integer>();\n         }\n     };\n \n+    @Test\n     @SuppressWarnings(\"boxing\") // OK in test code\n     public void testSelect() {\n         final List<Integer> list = new ArrayList<Integer>();\n         assertEquals(2, output2.iterator().next());\n     }\n \n+    @Test\n     @SuppressWarnings(\"boxing\") // OK in test code\n     public void testSelectRejected() {\n         final List<Long> list = new ArrayList<Long>();\n--- a/src/test/java/org/apache/commons/collections4/MapUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/MapUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.PrintStream;\n import java.util.Collection;\n import java.util.List;\n import java.util.ArrayList;\n \n-import junit.framework.Test;\n-\n import org.apache.commons.collections4.collection.TransformedCollectionTest;\n import org.apache.commons.collections4.keyvalue.DefaultKeyValue;\n import org.apache.commons.collections4.keyvalue.DefaultMapEntry;\n import org.apache.commons.collections4.map.LazyMap;\n import org.apache.commons.collections4.map.MultiValueMap;\n import org.apache.commons.collections4.map.PredicatedMap;\n+import org.junit.Test;\n \n /**\n  * Tests for MapUtils.\n  * @version $Id$\n  */\n @SuppressWarnings(\"boxing\")\n-public class MapUtilsTest extends BulkTest {\n-\n-    public MapUtilsTest(final String name) {\n-        super(name);\n-    }\n-\n-    public static Test suite() {\n-        return BulkTest.makeSuite(MapUtilsTest.class);\n-    }\n+public class MapUtilsTest {\n \n     public Predicate<Object> getPredicate() {\n         return new Predicate<Object>() {\n         };\n     }\n \n+    @Test\n     public void testPredicatedMap() {\n         final Predicate<Object> p = getPredicate();\n         Map<Object, Object> map = MapUtils.predicatedMap(new HashMap<Object, Object>(), p, p);\n         }\n     }\n \n+    @Test\n     public void testLazyMapFactory() {\n         final Factory<Integer> factory = FactoryUtils.constantFactory(Integer.valueOf(5));\n         Map<Object, Object> map = MapUtils.lazyMap(new HashMap<Object, Object>(), factory);\n         }\n     }\n \n+    @Test\n     public void testLazyMapTransformer() {\n         final Map<Object, Object> map = MapUtils.lazyMap(new HashMap<Object, Object>(), new Transformer<Object, Object>() {\n             public Object transform(final Object mapKey) {\n         assertSame(i1, i2);\n     }\n \n+    @Test\n     public void testInvertMap() {\n         final Map<String, String> in = new HashMap<String, String>(5, 1);\n         in.put(\"1\", \"A\");\n         assertEquals( \"5\", out.get(\"E\"));\n     }\n \n+    @Test\n     public void testPutAll_Map_array() {\n         try {\n             MapUtils.putAll(null, null);\n         assertEquals(3, test.size());\n     }\n \n+    @Test\n     public void testConvertResourceBundle() {\n         final Map<String, String> in = new HashMap<String, String>( 5 , 1 );\n         in.put(\"1\", \"A\");\n         assertTrue( in.equals(out));\n     }\n \n+    @Test\n     public void testDebugAndVerbosePrintCasting() {\n         final Map<Integer, String> inner = new HashMap<Integer, String>(2, 1);\n         inner.put(2, \"B\");\n         }\n     }\n \n+    @Test\n     public void testDebugAndVerbosePrintNullMap() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testVerbosePrintNullLabel() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testDebugPrintNullLabel() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testVerbosePrintNullLabelAndMap() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testDebugPrintNullLabelAndMap() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testVerbosePrintNullStream() {\n         try {\n             MapUtils.verbosePrint(null, \"Map\", new HashMap<Object, Object>());\n         }\n     }\n \n+    @Test\n     public void testDebugPrintNullStream() {\n         try {\n             MapUtils.debugPrint(null, \"Map\", new HashMap<Object, Object>());\n         }\n     }\n \n+    @Test\n     public void testDebugPrintNullKey() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testVerbosePrintNullKey() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testDebugPrintNullKeyToMap1() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testVerbosePrintNullKeyToMap1() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testDebugPrintNullKeyToMap2() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testVerbosePrintNullKeyToMap2() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testVerbosePrint() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testDebugPrint() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testVerbosePrintSelfReference() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n \n+    @Test\n     public void testDebugPrintSelfReference() {\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final PrintStream outPrint = new PrintStream(out);\n \n     //-----------------------------------------------------------------------\n \n+    @Test\n     public void testEmptyIfNull() {\n         assertTrue(MapUtils.emptyIfNull(null).isEmpty());\n \n         assertSame(map, MapUtils.emptyIfNull(map));\n     }\n \n+    @Test\n     public void testIsEmptyWithEmptyMap() {\n         final Map<Object, Object> map = new HashMap<Object, Object>();\n         assertEquals(true, MapUtils.isEmpty(map));\n     }\n \n+    @Test\n     public void testIsEmptyWithNonEmptyMap() {\n         final Map<String, String> map = new HashMap<String, String>();\n         map.put(\"item\", \"value\");\n         assertEquals(false, MapUtils.isEmpty(map));\n     }\n \n+    @Test\n     public void testIsEmptyWithNull() {\n         final Map<Object, Object> map = null;\n         assertEquals(true, MapUtils.isEmpty(map));\n     }\n \n+    @Test\n     public void testIsNotEmptyWithEmptyMap() {\n         final Map<Object, Object> map = new HashMap<Object, Object>();\n         assertEquals(false, MapUtils.isNotEmpty(map));\n     }\n \n+    @Test\n     public void testIsNotEmptyWithNonEmptyMap() {\n         final Map<String, String> map = new HashMap<String, String>();\n         map.put(\"item\", \"value\");\n         assertEquals(true, MapUtils.isNotEmpty(map));\n     }\n \n+    @Test\n     public void testIsNotEmptyWithNull() {\n         final Map<Object, Object> map = null;\n         assertEquals(false, MapUtils.isNotEmpty(map));\n     }\n \n+    @Test\n     public void testPopulateMap() {\n         // Setup Test Data\n         final List<String> list = new ArrayList<String>();\n \n     }\n \n+    @Test\n     public void testPopulateMultiMap() {\n         // Setup Test Data\n         final List<X> list = new ArrayList<X>();\n         }\n     }\n \n+    @Test\n     public void testIterableMap() {\n         try {\n             MapUtils.iterableMap(null);\n         assertSame(hMap, MapUtils.iterableMap(hMap));\n     }\n \n+    @Test\n     public void testIterableSortedMap() {\n         try {\n             MapUtils.iterableSortedMap(null);\n--- a/src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n \n import org.apache.commons.collections4.multimap.MultiValuedHashMap;\n-\n-import junit.framework.Test;\n+import org.junit.Test;\n \n /**\n  * Tests for MultiMapUtils\n  * @since 4.1\n  * @version $Id$\n  */\n-public class MultiMapUtilsTest extends BulkTest {\n+public class MultiMapUtilsTest {\n \n-    public static Test suite() {\n-        return BulkTest.makeSuite(MultiMapUtilsTest.class);\n-    }\n-\n-    public MultiMapUtilsTest(String name) {\n-        super(name);\n-    }\n-\n+    @Test\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public void testEmptyUnmodifiableMultiValuedMap() {\n         final MultiValuedMap map = MultiMapUtils.EMPTY_MULTI_VALUED_MAP;\n         }\n     }\n \n+    @Test\n     public void testTypeSafeEmptyMultiValuedMap() {\n         final MultiValuedMap<String, String> map = MultiMapUtils.<String, String>emptyMultiValuedMap();\n         assertTrue(map.isEmpty());\n         }\n     }\n \n+    @Test\n     public void testEmptyIfNull() {\n         assertTrue(MultiMapUtils.emptyIfNull(null).isEmpty());\n \n         assertFalse(MultiMapUtils.emptyIfNull(map).isEmpty());\n     }\n \n+    @Test\n     public void testIsEmptyWithEmptyMap() {\n         final MultiValuedMap<Object, Object> map = new MultiValuedHashMap<Object, Object>();\n         assertEquals(true, MultiMapUtils.isEmpty(map));\n     }\n \n+    @Test\n     public void testIsEmptyWithNonEmptyMap() {\n         final MultiValuedMap<String, String> map = new MultiValuedHashMap<String, String>();\n         map.put(\"item\", \"value\");\n         assertEquals(false, MultiMapUtils.isEmpty(map));\n     }\n \n+    @Test\n     public void testIsEmptyWithNull() {\n         final MultiValuedMap<Object, Object> map = null;\n         assertEquals(true, MultiMapUtils.isEmpty(map));\n     }\n \n+    @Test\n     public void testGetCollection() {\n         assertNull(MultiMapUtils.getCollection(null, \"key1\"));\n \n         }\n     }\n \n+    @Test\n     public void testGetList() {\n         assertNull(MultiMapUtils.getList(null, \"key1\"));\n \n         }\n     }\n \n+    @Test\n     public void testGetSet() {\n         assertNull(MultiMapUtils.getList(null, \"key1\"));\n \n         }\n     }\n \n+    @Test\n     public void testGetBag() {\n         assertNull(MultiMapUtils.getBag(null, \"key1\"));\n \n--- a/src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java\n  */\n @SuppressWarnings(\"boxing\")\n public class PredicateUtilsTest extends AbstractPredicateTest {\n-    /**\n-     * Set up instance variables required by this test case.\n-     */\n-    public void setUp() {\n-    }\n-\n-    /**\n-     * Tear down instance variables required by this test case.\n-     */\n-    public void tearDown() {\n-    }\n \n     // exceptionPredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testExceptionPredicate() {\n+    @Test\n+    public void testExceptionPredicate() {\n         assertNotNull(PredicateUtils.exceptionPredicate());\n         assertSame(PredicateUtils.exceptionPredicate(), PredicateUtils.exceptionPredicate());\n         try {\n     // notNullPredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testIsNotNullPredicate() {\n+    @Test\n+    public void testIsNotNullPredicate() {\n         assertNotNull(PredicateUtils.notNullPredicate());\n         assertSame(PredicateUtils.notNullPredicate(), PredicateUtils.notNullPredicate());\n         assertEquals(false, PredicateUtils.notNullPredicate().evaluate(null));\n     // identityPredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testIdentityPredicate() {\n+    @Test\n+    public void testIdentityPredicate() {\n         assertSame(nullPredicate(), PredicateUtils.identityPredicate(null));\n         assertNotNull(PredicateUtils.identityPredicate(Integer.valueOf(6)));\n         assertEquals(false, PredicateUtils.identityPredicate(Integer.valueOf(6)).evaluate(null));\n     // truePredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testTruePredicate() {\n+    @Test\n+    public void testTruePredicate() {\n         assertNotNull(TruePredicate.truePredicate());\n         assertSame(TruePredicate.truePredicate(), TruePredicate.truePredicate());\n         assertEquals(true, TruePredicate.truePredicate().evaluate(null));\n     // falsePredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testFalsePredicate() {\n+    @Test\n+    public void testFalsePredicate() {\n         assertNotNull(FalsePredicate.falsePredicate());\n         assertSame(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate());\n         assertEquals(false, FalsePredicate.falsePredicate().evaluate(null));\n     // notPredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testNotPredicate() {\n+    @Test\n+    public void testNotPredicate() {\n         assertNotNull(PredicateUtils.notPredicate(TruePredicate.truePredicate()));\n         assertEquals(false, PredicateUtils.notPredicate(TruePredicate.truePredicate()).evaluate(null));\n         assertEquals(false, PredicateUtils.notPredicate(TruePredicate.truePredicate()).evaluate(cObject));\n     // andPredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testAndPredicate() {\n+    @Test\n+    public void testAndPredicate() {\n         assertEquals(true, PredicateUtils.andPredicate(TruePredicate.truePredicate(), TruePredicate.truePredicate()).evaluate(null));\n         assertEquals(false, PredicateUtils.andPredicate(TruePredicate.truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n         assertEquals(false, PredicateUtils.andPredicate(FalsePredicate.falsePredicate(), TruePredicate.truePredicate()).evaluate(null));\n     //------------------------------------------------------------------\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test public void testAllPredicate() {\n+    @Test\n+    public void testAllPredicate() {\n         assertTrue(AllPredicate.allPredicate(new Predicate[] {}), null);\n         assertEquals(true, AllPredicate.allPredicate(new Predicate[] {\n                 TruePredicate.truePredicate(), TruePredicate.truePredicate(), TruePredicate.truePredicate()}).evaluate(null));\n         AllPredicate.allPredicate((Collection<Predicate<Object>>) null);\n     }\n \n-    @Test public void testAllPredicateEx5() {\n+    @Test\n+    public void testAllPredicateEx5() {\n         AllPredicate.allPredicate(Collections.<Predicate<Object>>emptyList());\n     }\n \n     // orPredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testOrPredicate() {\n+    @Test\n+    public void testOrPredicate() {\n         assertEquals(true, PredicateUtils.orPredicate(TruePredicate.truePredicate(), TruePredicate.truePredicate()).evaluate(null));\n         assertEquals(true, PredicateUtils.orPredicate(TruePredicate.truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n         assertEquals(true, PredicateUtils.orPredicate(FalsePredicate.falsePredicate(), TruePredicate.truePredicate()).evaluate(null));\n     //------------------------------------------------------------------\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test public void testAnyPredicate() {\n+    @Test\n+    public void testAnyPredicate() {\n         assertFalse(PredicateUtils.anyPredicate(new Predicate[] {}), null);\n \n         assertEquals(true, PredicateUtils.anyPredicate(new Predicate[] {\n         PredicateUtils.anyPredicate((Collection<Predicate<Object>>) null);\n     }\n \n-    @Test public void testAnyPredicateEx5() {\n+    @Test\n+    public void testAnyPredicateEx5() {\n         PredicateUtils.anyPredicate(Collections.<Predicate<Object>>emptyList());\n     }\n \n     // eitherPredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testEitherPredicate() {\n+    @Test\n+    public void testEitherPredicate() {\n         assertEquals(false, PredicateUtils.eitherPredicate(TruePredicate.truePredicate(), TruePredicate.truePredicate()).evaluate(null));\n         assertEquals(true, PredicateUtils.eitherPredicate(TruePredicate.truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n         assertEquals(true, PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(), TruePredicate.truePredicate()).evaluate(null));\n     //------------------------------------------------------------------\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test public void testOnePredicate() {\n+    @Test\n+    public void testOnePredicate() {\n         assertFalse(PredicateUtils.onePredicate((Predicate<Object>[]) new Predicate[] {}), null);\n         assertEquals(false, PredicateUtils.onePredicate(new Predicate[] {\n             TruePredicate.truePredicate(), TruePredicate.truePredicate(), TruePredicate.truePredicate()}).evaluate(null));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test public void testOnePredicateEx5() {\n+    @Test\n+    public void testOnePredicateEx5() {\n         PredicateUtils.onePredicate(Collections.EMPTY_LIST);\n     }\n \n     // neitherPredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testNeitherPredicate() {\n+    @Test\n+    public void testNeitherPredicate() {\n         assertEquals(false, PredicateUtils.neitherPredicate(TruePredicate.truePredicate(), TruePredicate.truePredicate()).evaluate(null));\n         assertEquals(false, PredicateUtils.neitherPredicate(TruePredicate.truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n         assertEquals(false, PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(), TruePredicate.truePredicate()).evaluate(null));\n     //------------------------------------------------------------------\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test public void testNonePredicate() {\n+    @Test\n+    public void testNonePredicate() {\n         assertTrue(PredicateUtils.nonePredicate(new Predicate[] {}), null);\n         assertEquals(false, PredicateUtils.nonePredicate(new Predicate[] {\n                 TruePredicate.truePredicate(), TruePredicate.truePredicate(), TruePredicate.truePredicate() }).evaluate(null));\n         PredicateUtils.nonePredicate((Collection<Predicate<Object>>) null);\n     }\n \n-    @Test public void testNonePredicateEx5() {\n+    @Test\n+    public void testNonePredicateEx5() {\n         PredicateUtils.nonePredicate(Collections.<Predicate<Object>>emptyList());\n     }\n \n     // instanceofPredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testInstanceOfPredicate() {\n+    @Test\n+    public void testInstanceOfPredicate() {\n         assertNotNull(PredicateUtils.instanceofPredicate(String.class));\n         assertEquals(false, PredicateUtils.instanceofPredicate(String.class).evaluate(null));\n         assertEquals(false, PredicateUtils.instanceofPredicate(String.class).evaluate(cObject));\n     // uniquePredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testUniquePredicate() {\n+    @Test\n+    public void testUniquePredicate() {\n         final Predicate<Object> p = PredicateUtils.uniquePredicate();\n         assertEquals(true, p.evaluate(new Object()));\n         assertEquals(true, p.evaluate(new Object()));\n     // asPredicate(Transformer)\n     //------------------------------------------------------------------\n \n-    @Test public void testAsPredicateTransformer() {\n+    @Test\n+    public void testAsPredicateTransformer() {\n         assertEquals(false, PredicateUtils.asPredicate(TransformerUtils.<Boolean>nopTransformer()).evaluate(false));\n         assertEquals(true, PredicateUtils.asPredicate(TransformerUtils.<Boolean>nopTransformer()).evaluate(true));\n     }\n     // invokerPredicate\n     //------------------------------------------------------------------\n \n-    @Test public void testInvokerPredicate() {\n+    @Test\n+    public void testInvokerPredicate() {\n         final List<Object> list = new ArrayList<Object>();\n         assertEquals(true, PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(list));\n         list.add(new Object());\n     // invokerPredicate2\n     //------------------------------------------------------------------\n \n-    @Test public void testInvokerPredicate2() {\n+    @Test\n+    public void testInvokerPredicate2() {\n         final List<String> list = new ArrayList<String>();\n         assertEquals(false, PredicateUtils.invokerPredicate(\n             \"contains\", new Class[] {Object.class}, new Object[] {cString}).evaluate(list));\n     // nullIsTrue\n     //------------------------------------------------------------------\n \n-    @Test public void testNullIsTruePredicate() {\n+    @Test\n+    public void testNullIsTruePredicate() {\n         assertEquals(true, PredicateUtils.nullIsTruePredicate(TruePredicate.truePredicate()).evaluate(null));\n         assertEquals(true, PredicateUtils.nullIsTruePredicate(TruePredicate.truePredicate()).evaluate(new Object()));\n         assertEquals(false, PredicateUtils.nullIsTruePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));\n     // nullIsFalse\n     //------------------------------------------------------------------\n \n-    @Test public void testNullIsFalsePredicate() {\n+    @Test\n+    public void testNullIsFalsePredicate() {\n         assertEquals(false, PredicateUtils.nullIsFalsePredicate(TruePredicate.truePredicate()).evaluate(null));\n         assertEquals(true, PredicateUtils.nullIsFalsePredicate(TruePredicate.truePredicate()).evaluate(new Object()));\n         assertEquals(false, PredicateUtils.nullIsFalsePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));\n     // transformed\n     //------------------------------------------------------------------\n \n-    @Test public void testTransformedPredicate() {\n+    @Test\n+    public void testTransformedPredicate() {\n         assertEquals(true, PredicateUtils.transformedPredicate(\n                 TransformerUtils.nopTransformer(),\n                 TruePredicate.truePredicate()).evaluate(new Object()));\n      * Test that all Predicate singletones hold singleton pattern in\n      * serialization/deserialization process.\n      */\n-    @Test public void testSingletonPatternInSerialization() {\n+    @Test\n+    public void testSingletonPatternInSerialization() {\n         final Object[] singletones = new Object[] {\n                 ExceptionPredicate.INSTANCE,\n                 FalsePredicate.INSTANCE,\n--- a/src/test/java/org/apache/commons/collections4/QueueUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/QueueUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.LinkedList;\n import java.util.Queue;\n-\n-import junit.framework.Test;\n \n import org.apache.commons.collections4.functors.TruePredicate;\n import org.apache.commons.collections4.queue.PredicatedQueue;\n import org.apache.commons.collections4.queue.TransformedQueue;\n import org.apache.commons.collections4.queue.UnmodifiableQueue;\n+import org.junit.Test;\n \n /**\n  * Tests for QueueUtils factory methods.\n  * \n  * @version $Id$\n  */\n-public class QueueUtilsTest extends BulkTest {\n+public class QueueUtilsTest {\n \n-    public QueueUtilsTest(final String name) {\n-        super(name);\n-    }\n-\n-    public static Test suite() {\n-        return BulkTest.makeSuite(QueueUtilsTest.class);\n-    }\n-\n-    // ----------------------------------------------------------------------\n-\n-    protected Class<?> stringClass = this.getName().getClass();\n     protected Predicate<Object> truePredicate = TruePredicate.truePredicate();\n     protected Transformer<Object, Object> nopTransformer = TransformerUtils.nopTransformer();\n \n     // ----------------------------------------------------------------------\n \n+    @Test\n     public void testUnmodifiableQueue() {\n         Queue<Object> queue = QueueUtils.unmodifiableQueue(new LinkedList<Object>());\n         assertTrue(\"Returned object should be an UnmodifiableQueue.\", queue instanceof UnmodifiableQueue);\n         assertSame(\"UnmodifiableQueue shall not be decorated\", queue, QueueUtils.unmodifiableQueue(queue));\n     }\n \n+    @Test\n     public void testPredicatedQueue() {\n         Queue<Object> queue = QueueUtils.predicatedQueue(new LinkedList<Object>(), truePredicate);\n         assertTrue(\"Returned object should be a PredicatedQueue.\", queue instanceof PredicatedQueue);\n         }\n     }\n \n+    @Test\n     public void testTransformedQueue() {\n         Queue<Object> queue = QueueUtils.transformingQueue(new LinkedList<Object>(), nopTransformer);\n         assertTrue(\"Returned object should be an TransformedQueue.\", queue instanceof TransformedQueue);\n         }\n     }\n \n+    @Test\n     public void testEmptyQueue() {\n         Queue<Object> queue = QueueUtils.emptyQueue();\n         assertTrue(\"Returned object should be an UnmodifiableQueue.\", queue instanceof UnmodifiableQueue);\n--- a/src/test/java/org/apache/commons/collections4/SetUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/SetUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n \n-import junit.framework.Test;\n-\n import org.apache.commons.collections4.set.PredicatedSet;\n+import org.junit.Test;\n \n /**\n  * Tests for SetUtils.\n  *\n  * @version $Id$\n  */\n-public class SetUtilsTest extends BulkTest {\n+public class SetUtilsTest {\n \n-    public SetUtilsTest(final String name) {\n-        super(name);\n-    }\n-\n-    public static Test suite() {\n-        return BulkTest.makeSuite(SetUtilsTest.class);\n-    }\n-\n-    public void testNothing() {\n-    }\n-\n+    @Test\n     public void testpredicatedSet() {\n         final Predicate<Object> predicate = new Predicate<Object>() {\n             public boolean evaluate(final Object o) {\n         }\n     }\n \n+    @Test\n     public void testEmptyIfNull() {\n         assertTrue(SetUtils.emptyIfNull(null).isEmpty());\n \n         assertSame(set, SetUtils.emptyIfNull(set));\n     }\n \n+    @Test\n     public void testEquals() {\n         final Collection<String> data = Arrays.asList(\"a\", \"b\", \"c\");\n \n         assertEquals(true, SetUtils.isEqualSet(null, null));\n     }\n \n+    @Test\n     public void testHashCode() {\n         final Collection<String> data = Arrays.asList(\"a\", \"b\", \"c\");\n \n         assertEquals(0, SetUtils.hashCodeForSet(null));\n     }\n \n+    @Test\n     public void testNewIdentityHashSet() {\n         Set<String> set = SetUtils.newIdentityHashSet();\n         String a = new String(\"a\");\n--- a/src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.HashMap;\n import java.util.Map;\n \n import org.apache.commons.collections4.functors.NOPTransformer;\n import org.apache.commons.collections4.map.HashedMap;\n import org.apache.commons.collections4.splitmap.TransformedSplitMap;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * Tests for {@link TransformedSplitMap}\n  * @version $Id$\n  */\n @SuppressWarnings(\"boxing\")\n-public class SplitMapUtilsTest extends BulkTest {\n+public class SplitMapUtilsTest {\n     private Map<String, Integer> backingMap;\n     private TransformedSplitMap<String, String, String, Integer> transformedMap;\n \n         }\n     };\n \n-    public SplitMapUtilsTest(final String testName) {\n-        super(testName);\n-    }\n-\n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+    @Before\n+    public void setUp() throws Exception {\n         backingMap = new HashMap<String, Integer>();\n         transformedMap = TransformedSplitMap.transformingMap(backingMap, NOPTransformer.<String> nopTransformer(),\n                 stringToInt);\n \n     // -----------------------------------------------------------------------\n \n+    @Test\n     public void testReadableMap() {\n         final IterableMap<String, Integer> map = SplitMapUtils.readableMap(transformedMap);\n \n         assertSame(map, SplitMapUtils.readableMap(map));\n     }\n \n+    @Test\n     public void testAlreadyReadableMap() {\n         final HashedMap<String, Integer> hashedMap = new HashedMap<String, Integer>();\n         assertSame(hashedMap, SplitMapUtils.readableMap(hashedMap));\n     }\n \n+    @Test\n     @SuppressWarnings(\"unchecked\")\n     public void testWritableMap() {\n         final Map<String, String> map = SplitMapUtils.writableMap(transformedMap);\n         assertSame(map, SplitMapUtils.writableMap((Put<String, String>) map));\n     }\n \n+    @Test\n     public void testAlreadyWritableMap() {\n         final HashedMap<String, String> hashedMap = new HashedMap<String, String>();\n         assertSame(hashedMap, SplitMapUtils.writableMap(hashedMap));\n--- a/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.fail;\n+\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import org.apache.commons.collections4.functors.NOPTransformer;\n import org.apache.commons.collections4.functors.StringValueTransformer;\n import org.apache.commons.collections4.functors.TruePredicate;\n+import org.junit.Test;\n \n /**\n  * Tests the TransformerUtils class.\n  * @since 3.0\n  * @version $Id$\n  */\n-public class TransformerUtilsTest extends junit.framework.TestCase {\n+public class TransformerUtilsTest {\n \n     private static final Object cObject = new Object();\n     private static final Object cString = \"Hello\";\n     private static final Object cInteger = Integer.valueOf(6);\n \n-    /**\n-     * Set up instance variables required by this test case.\n-     */\n-    @Override\n-    public void setUp() {\n-    }\n-\n-    /**\n-     * Tear down instance variables required by this test case.\n-     */\n-    @Override\n-    public void tearDown() {\n-    }\n-\n     // exceptionTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testExceptionTransformer() {\n         assertNotNull(TransformerUtils.exceptionTransformer());\n         assertSame(TransformerUtils.exceptionTransformer(), TransformerUtils.exceptionTransformer());\n     // nullTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testNullTransformer() {\n         assertNotNull(TransformerUtils.nullTransformer());\n         assertSame(TransformerUtils.nullTransformer(), TransformerUtils.nullTransformer());\n     // nopTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testNopTransformer() {\n         assertNotNull(TransformerUtils.nullTransformer());\n         assertSame(TransformerUtils.nullTransformer(), TransformerUtils.nullTransformer());\n     // constantTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testConstantTransformer() {\n         assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(null));\n         assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(cObject));\n     // cloneTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testCloneTransformer() {\n         assertEquals(null, TransformerUtils.cloneTransformer().transform(null));\n         assertEquals(cString, TransformerUtils.cloneTransformer().transform(cString));\n     // mapTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     @SuppressWarnings(\"boxing\") // OK in test code\n     public void testMapTransformer() {\n         final Map<Object, Integer> map = new HashMap<Object, Integer>();\n     // commandTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testExecutorTransformer() {\n         assertEquals(null, TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(null));\n         assertEquals(cObject, TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cObject));\n     // predicateTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testPredicateTransformer() {\n         assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(null));\n         assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(cObject));\n     // factoryTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testFactoryTransformer() {\n         assertEquals(null, TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(null));\n         assertEquals(null, TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cObject));\n     // chainedTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     @SuppressWarnings(\"unchecked\")\n     public void testChainedTransformer() {\n         final Transformer<Object, Object> a = TransformerUtils.<Object, Object>constantTransformer(\"A\");\n     // ifTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testIfTransformer() {\n         final Transformer<Object, String> a = TransformerUtils.constantTransformer(\"A\");\n         final Transformer<Object, String> b = TransformerUtils.constantTransformer(\"B\");\n     // switchTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     @SuppressWarnings(\"unchecked\")\n     public void testSwitchTransformer() {\n         final Transformer<String, String> a = TransformerUtils.constantTransformer(\"A\");\n     // switchMapTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testSwitchMapTransformer() {\n         final Transformer<String, String> a = TransformerUtils.constantTransformer(\"A\");\n         final Transformer<String, String> b = TransformerUtils.constantTransformer(\"B\");\n     // invokerTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testInvokerTransformer() {\n         final List<Object> list = new ArrayList<Object>();\n         assertEquals(Integer.valueOf(0), TransformerUtils.invokerTransformer(\"size\").transform(list));\n     // invokerTransformer2\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testInvokerTransformer2() {\n         final List<Object> list = new ArrayList<Object>();\n         assertEquals(Boolean.FALSE, TransformerUtils.invokerTransformer(\"contains\",\n     // stringValueTransformer\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testStringValueTransformer() {\n         assertNotNull( \"StringValueTransformer should NEVER return a null value.\",\n            TransformerUtils.stringValueTransformer().transform(null));\n     // instantiateFactory\n     //------------------------------------------------------------------\n \n+    @Test\n     public void testInstantiateTransformerNull() {\n         try {\n             TransformerUtils.instantiateTransformer(null, new Object[] { \"str\" });\n      * Test that all Transformer singletons hold singleton pattern in\n      * serialization/deserialization process.\n      */\n+    @Test\n     public void testSingletonPatternInSerialization() {\n         final Object[] singletones = new Object[] {\n                 CloneTransformer.INSTANCE,\n--- a/src/test/java/org/apache/commons/collections4/TrieUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/TrieUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n-import junit.framework.Test;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import org.apache.commons.collections4.trie.PatriciaTrie;\n import org.apache.commons.collections4.trie.UnmodifiableTrie;\n+import org.junit.Test;\n \n /**\n  * Tests for TrieUtils factory methods.\n  *\n  * @version $Id$\n  */\n-public class TrieUtilsTest extends BulkTest {\n-\n-    public TrieUtilsTest(final String name) {\n-        super(name);\n-    }\n-\n-\n-    public static Test suite() {\n-        return BulkTest.makeSuite(TrieUtilsTest.class);\n-    }\n+public class TrieUtilsTest {\n \n     //----------------------------------------------------------------------\n \n+    @Test\n     public void testUnmodifiableTrie() {\n         Trie<String, Object> trie = TrieUtils.unmodifiableTrie(new PatriciaTrie<Object>());\n         assertTrue(\"Returned object should be an UnmodifiableTrie.\",", "timestamp": 1433195691, "metainfo": ""}