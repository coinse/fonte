{"sha": "76c1efb61c1934c99bb3743d34c17384598a9f29", "log": "javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/java/org/apache/commons/collections/ComparatorUtils.java\n  * Provides convenient static utility methods for <Code>Comparator</Code>\n  * objects.\n  * <p>\n- * Most of the utility in this class can also be found in the \n+ * Most of the functionality in this class can also be found in the \n  * <code>comparators</code> package. This class merely provides a \n  * convenient central place if you have use for more than one class\n  * in the <code>comparators</code> subpackage.\n- * <p>\n- * Note that <i>every</i> method in this class allows you to specify\n- * <code>null</code> instead of a comparator, in which case \n- * {@link #NATURAL_COMPARATOR} will be used.\n  *\n  * @since Commons Collections 2.1\n  * @version $Revision: $ $Date: $\n public class ComparatorUtils {\n \n     /**\n-     * ComparatorUtils should not normally be constructed.\n+     * ComparatorUtils should not normally be instantiated.\n      */\n     public ComparatorUtils() {\n     }\n     /**\n      * Gets a comparator that compares using two {@link Comparator}s.\n      * <p>\n-     * The second comparator is used if the first comparator returns\n-     * that equal.\n+     * The second comparator is used if the first comparator returns equal.\n      *\n      * @param comparator1  the first comparator to use, not null\n      * @param comparator2  the first comparator to use, not null\n-     * @return a combination comparator over the comparators\n+     * @return a {@link ComparatorChain} formed from the two comparators\n      * @throws NullPointerException if either comparator is null\n+     * @see ComparatorChain\n      */\n     public static Comparator chainedComparator(Comparator comparator1, Comparator comparator2) {\n         return chainedComparator(new Comparator[] {comparator1, comparator2});\n     }\n \n     /**\n-     * Gets a comparator that compares using an array of {@link Comparator}s.\n-     * <p>\n-     * The second comparator is used if the first comparator returns\n-     * that equal and so on.\n-     *\n-     * @param comparators  the comparators to use, not null or empty or contain nulls\n-     * @return a combination comparator over the comparators\n+     * Gets a comparator that compares using an array of {@link Comparator}s, applied\n+     * in sequence until one returns not equal or the array is exhausted.\n+     *\n+     * @param comparators  the comparators to use, not null or empty or containing nulls\n+     * @return a {@link ComparatorChain} formed from the input comparators\n      * @throws NullPointerException if comparators array is null or contains a null\n+     * @see ComparatorChain\n      */\n     public static Comparator chainedComparator(Comparator[] comparators) {\n         ComparatorChain chain = new ComparatorChain();\n     }\n \n     /**\n-     * Gets a comparator that compares using a collection of {@link Comparator}s.\n-     * <p>\n-     * The second comparator is used if the first comparator returns\n-     * that equal and so on.\n-     *\n-     * @param comparators  the comparators to use, not null or empty or contain nulls\n-     * @return a combination comparator over the comparators\n+     * Gets a comparator that compares using a collection of {@link Comparator}s,\n+     * applied in (default iterator) sequence until one returns not equal or the \n+     * collection is exhausted.\n+     *\n+     * @param comparators  the comparators to use, not null or empty or containing nulls\n+     * @return a {@link ComparatorChain} formed from the input comparators\n      * @throws NullPointerException if comparators collection is null or contains a null\n      * @throws ClassCastException if the comparators collection contains the wrong object type\n+     * @see ComparatorChain\n      */\n     public static Comparator chainedComparator(Collection comparators) {\n         return chainedComparator(\n     }\n \n     /**\n-     * Gets a comparator that reverses the order of the given \n-     * comparator.\n-     *\n-     * @param comparator  the comparator whose order to reverse\n-     * @return  a comparator who reverses that order\n+     * Gets a comparator that reverses the order of the given comparator.\n+     *\n+     * @param comparator  the comparator to reverse\n+     * @return  a comparator that reverses the order of the input comparator\n      * @see ReverseComparator\n      */\n     public static Comparator reversedComparator(Comparator comparator) {\n      * <p>\n      * The returned comparator will consider a null value to be less than\n      * any nonnull value, and equal to any other null value.  Two nonnull\n-     * values will be evaluated with the given comparator.<P>\n+     * values will be evaluated with the given comparator.\n      *\n      * @param comparator the comparator that wants to allow nulls\n      * @return  a version of that comparator that allows nulls\n      * <p>\n      * The returned comparator will consider a null value to be greater than\n      * any nonnull value, and equal to any other null value.  Two nonnull\n-     * values will be evaluated with the given comparator.<P>\n+     * values will be evaluated with the given comparator.\n      *\n      * @param comparator the comparator that wants to allow nulls\n      * @return  a version of that comparator that allows nulls\n \n     /**\n      *  Returns the smaller of the given objects according to the given \n-     *  comparator.\n+     *  comparator, returning the second object if the comparator\n+     *  returns equal.\n      * \n      *  @param o1  the first object to compare\n      *  @param o2  the second object to compare\n     }\n \n     /**\n-     *  Returns the smaller of the given objects according to the given \n-     *  comparator.\n+     *  Returns the larger of the given objects according to the given \n+     *  comparator, returning the second object if the comparator \n+     *  returns equal.\n      * \n      *  @param o1  the first object to compare\n      *  @param o2  the second object to compare\n      *  @param comparator  the sort order to use\n-     *  @return  the smaller of the two objects\n+     *  @return  the larger of the two objects\n      */\n     public static Object max(Object o1, Object o2, Comparator comparator) {\n         if (comparator == null) {", "timestamp": 1066284296, "metainfo": ""}