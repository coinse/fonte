{"sha": "2199ec2fdf22de3e75fdc821b80b2528c49d0604", "log": "Add accessor methods for value field in Node from Mike Pettypiece   ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/java/org/apache/commons/collections/list/AbstractLinkedList.java\n  * is here.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2004/02/18 01:12:26 $\n+ * @version $Revision: 1.9 $ $Date: 2004/04/20 23:33:54 $\n  *\n  * @author Rich Dougherty\n  * @author Phil Steitz\n \n     public Object get(int index) {\n         Node node = getNode(index, false);\n-        return node.value;\n+        return node.getValue();\n     }\n \n     //-----------------------------------------------------------------------\n     public int indexOf(Object value) {\n         int i = 0;\n         for (Node node = header.next; node != header; node = node.next) {\n-            if (isEqualValue(node.value, value)) {\n+            if (isEqualValue(node.getValue(), value)) {\n                 return i;\n             }\n             i++;\n     public int lastIndexOf(Object value) {\n         int i = size - 1;\n         for (Node node = header.previous; node != header; node = node.previous) {\n-            if (isEqualValue(node.value, value)) {\n+            if (isEqualValue(node.getValue(), value)) {\n                 return i;\n             }\n             i--;\n         // Copy the values into the array\n         int i = 0;\n         for (Node node = header.next; node != header; node = node.next, i++) {\n-            array[i] = node.value;\n+            array[i] = node.getValue();\n         }\n         // Set the value after the last value to null\n         if (array.length > size) {\n     //-----------------------------------------------------------------------\n     public Object remove(int index) {\n         Node node = getNode(index, false);\n-        Object oldValue = node.value;\n+        Object oldValue = node.getValue();\n         removeNode(node);\n         return oldValue;\n     }\n \n     public boolean remove(Object value) {\n         for (Node node = header.next; node != header; node = node.next) {\n-            if (isEqualValue(node.value, value)) {\n+            if (isEqualValue(node.getValue(), value)) {\n                 removeNode(node);\n                 return true;\n             }\n \n     public Object set(int index, Object value) {\n         Node node = getNode(index, false);\n-        Object oldValue = node.value;\n+        Object oldValue = node.getValue();\n         updateNode(node, value);\n         return oldValue;\n     }\n         if (node == header) {\n             throw new NoSuchElementException();\n         }\n-        return node.value;\n+        return node.getValue();\n     }\n \n     public Object getLast() {\n         if (node == header) {\n             throw new NoSuchElementException();\n         }\n-        return node.value;\n+        return node.getValue();\n     }\n \n     public boolean addFirst(Object o) {\n         if (node == header) {\n             throw new NoSuchElementException();\n         }\n-        Object oldValue = node.value;\n+        Object oldValue = node.getValue();\n         removeNode(node);\n         return oldValue;\n     }\n         if (node == header) {\n             throw new NoSuchElementException();\n         }\n-        Object oldValue = node.value;\n+        Object oldValue = node.getValue();\n         removeNode(node);\n         return oldValue;\n     }\n      * @param value  new value of the node\n      */\n     protected void updateNode(Node node, Object value) {\n-        node.value = value;\n+        node.setValue(value);\n     }\n \n     /**\n     //-----------------------------------------------------------------------\n     /**\n      * A node within the linked list.\n+     * <p>\n+     * From Commons Collections 3.1, all access to the <code>value</code> property\n+     * is via the methods on this class.\n      */\n     protected static class Node {\n \n             this.next = next;\n             this.value = value;\n         }\n+        \n+        /**\n+         * Gets the value of the node.\n+         * \n+         * @return the value\n+         * @since Commons Collections 3.1\n+         */\n+        protected Object getValue() {\n+            return value;\n+        }\n+        \n+        /**\n+         * Sets the value of the node.\n+         * \n+         * @param value  the value\n+         * @since Commons Collections 3.1\n+         */\n+        protected void setValue(Object value) {\n+            this.value = value;\n+        }\n+        \n+        /**\n+         * Gets the previous node.\n+         * \n+         * @return the previous node\n+         * @since Commons Collections 3.1\n+         */\n+        protected Node getPreviousNode() {\n+            return previous;\n+        }\n+        \n+        /**\n+         * Sets the previous node.\n+         * \n+         * @param previous  the previous node\n+         * @since Commons Collections 3.1\n+         */\n+        protected void setPreviousNode(Node previous) {\n+            this.previous = previous;\n+        }\n+        \n+        /**\n+         * Gets the next node.\n+         * \n+         * @return the next node\n+         * @since Commons Collections 3.1\n+         */\n+        protected Node getNextNode() {\n+            return next;\n+        }\n+        \n+        /**\n+         * Sets the next node.\n+         * \n+         * @param next  the next node\n+         * @since Commons Collections 3.1\n+         */\n+        protected void setNextNode(Node next) {\n+            this.next = next;\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n         public Object next() {\n             checkModCount();\n             if (!hasNext()) {\n-                throw new NoSuchElementException(\"No element at index \" +\n-                        nextIndex + \".\");\n-            }\n-            Object value = next.value;\n+                throw new NoSuchElementException(\"No element at index \" + nextIndex + \".\");\n+            }\n+            Object value = next.getValue();\n             current = next;\n             next = next.next;\n             nextIndex++;\n                 throw new NoSuchElementException(\"Already at start of list.\");\n             }\n             next = next.previous;\n-            Object value = next.value;\n+            Object value = next.getValue();\n             current = next;\n             nextIndex--;\n             return value;\n \n         public void set(Object obj) {\n             checkModCount();\n-            getLastNodeReturned().value = obj;\n+            getLastNodeReturned().setValue(obj);\n         }\n \n         public void add(Object obj) {", "timestamp": 1082504034, "metainfo": ""}