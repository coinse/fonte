{"sha": "ac06284e5a7c43b27aa5a5346f9e31590e0b82b3", "log": "Fix FastArrayList iterator to work in thread-safe environments   ", "commit": "\n--- a/src/java/org/apache/commons/collections/FastArrayList.java\n+++ b/src/java/org/apache/commons/collections/FastArrayList.java\n  * Double-Checked Locking Idiom Is Broken Declaration</a>.</p>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.15 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.16 $ $Date: 2004/06/23 21:41:49 $\n  * \n  * @author Craig R. McClanahan\n+ * @author Stephen Colebourne\n  */\n public class FastArrayList extends ArrayList {\n \n \n     /**\n      * Return an iterator over the elements in this list in proper sequence.\n-     * <br><br>\n-     * <strong>IMPLEMENTATION NOTE</strong> - If the list is operating in fast\n-     * mode, an Iterator is returned, and a structural modification to the\n-     * list is made, then the Iterator will continue over the previous contents\n-     * of the list (at the time that the Iterator was created), rather than\n-     * failing due to concurrent modifications.\n+     * <p>\n+     * <b>Thread safety</b><br />\n+     * The iterator returned is thread-safe ONLY in FAST mode.\n+     * In slow mode there is no way to synchronize, or make the iterator thread-safe.\n+     * <p>\n+     * In fast mode iteration and modification may occur in parallel on different threads,\n+     * however there is a restriction. Modification must be EITHER via the Iterator\n+     * interface methods OR the List interface. If a mixture of modification\n+     * methods is used a ConcurrentModificationException is thrown from the iterator\n+     * modification method. If the List modification methods are used the changes are\n+     * NOT visible in the iterator (it shows the list contents at the time the iterator\n+     * was created).\n+     * \n+     * @return the iterator\n      */\n     public Iterator iterator() {\n         if (fast) {\n \n     /**\n      * Return an iterator of the elements of this list, in proper sequence.\n-     * See the implementation note on <code>iterator()</code>.\n+     * <p>\n+     * <b>Thread safety</b><br />\n+     * The iterator returned is thread-safe ONLY in FAST mode.\n+     * In slow mode there is no way to synchronize, or make the iterator thread-safe.\n+     * <p>\n+     * In fast mode iteration and modification may occur in parallel on different threads,\n+     * however there is a restriction. Modification must be EITHER via the Iterator\n+     * interface methods OR the List interface. If a mixture of modification\n+     * methods is used a ConcurrentModificationException is thrown from the iterator\n+     * modification method. If the List modification methods are used the changes are\n+     * NOT visible in the iterator (it shows the list contents at the time the iterator\n+     * was created).\n+     * \n+     * @return the list iterator\n      */\n     public ListIterator listIterator() {\n         if (fast) {\n     /**\n      * Return an iterator of the elements of this list, in proper sequence,\n      * starting at the specified position.\n-     * See the implementation note on <code>iterator()</code>.\n+     * <p>\n+     * <b>Thread safety</b><br />\n+     * The iterator returned is thread-safe ONLY in FAST mode.\n+     * In slow mode there is no way to synchronize, or make the iterator thread-safe.\n+     * <p>\n+     * In fast mode iteration and modification may occur in parallel on different threads,\n+     * however there is a restriction. Modification must be EITHER via the Iterator\n+     * interface methods OR the List interface. If a mixture of modification\n+     * methods is used a ConcurrentModificationException is thrown from the iterator\n+     * modification method. If the List modification methods are used the changes are\n+     * NOT visible in the iterator (it shows the list contents at the time the iterator\n+     * was created).\n      *\n      * @param index The starting position of the iterator to return\n-     *\n+     * @return the list iterator\n      * @exception IndexOutOfBoundsException if the index is out of range\n      */\n     public ListIterator listIterator(int index) {\n             int i = nextIndex();\n             get().add(i, o);\n             last++;\n+            expected = list;\n             iter = get().listIterator(i + 1);\n-            lastReturnedIndex = 1;\n+            lastReturnedIndex = -1;\n         }\n \n    }\n         }\n \n         public boolean hasNext() {\n-            checkMod();\n             return iter.hasNext();     \n         }\n \n         public Object next() {\n-            checkMod();\n             lastReturnedIndex = iter.nextIndex();\n             return iter.next();\n         }\n \n         public boolean hasPrevious() {\n-            checkMod();\n             return iter.hasPrevious();\n         }\n \n         public Object previous() {\n-            checkMod();\n             lastReturnedIndex = iter.previousIndex();\n             return iter.previous();\n         }\n \n         public int previousIndex() {\n-            checkMod();\n             return iter.previousIndex();\n         }\n \n         public int nextIndex() {\n-            checkMod();\n             return iter.nextIndex();\n         }\n \n             checkMod();\n             int i = nextIndex();\n             get().add(i, o);\n+            expected = list;\n             iter = get().listIterator(i + 1);\n             lastReturnedIndex = -1;\n         }\n--- a/src/test/org/apache/commons/collections/TestFastArrayList1.java\n+++ b/src/test/org/apache/commons/collections/TestFastArrayList1.java\n package org.apache.commons.collections;\n \n import java.util.ArrayList;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.ListIterator;\n \n import junit.framework.Test;\n \n /**\n  * Test FastArrayList implementation in <strong>fast</strong> mode.\n  * \n- * @version $Revision: 1.9 $ $Date: 2004/02/18 01:20:35 $\n+ * @version $Revision: 1.10 $ $Date: 2004/06/23 21:41:49 $\n  *\n  * @author Jason van Zyl\n  */\n         fal.setFast(true);\n         return (fal);\n     }\n-    \n-    public String[] ignoredTests() {\n-        // subList impl result in...\n-        return new String[] {\n-            \"TestFastArrayList1.bulkTestSubList.bulkTestListIterator.testAddThenSet\",\n-            \"TestFastArrayList1.bulkTestSubList.bulkTestListIterator.testAddThenRemove\",\n-        };\n+\n+    public void testIterateModify1() {\n+        List list = makeEmptyList();\n+        list.add(\"A\");\n+        list.add(\"B\");\n+        list.add(\"C\");\n+        assertEquals(3, list.size());\n+        \n+        Iterator it = list.iterator();\n+        assertEquals(\"A\", it.next());\n+        assertEquals(3, list.size());\n+        list.add(1, \"Z\");\n+        assertEquals(4, list.size());\n+        assertEquals(\"B\", it.next());\n+        assertEquals(\"C\", it.next());\n+        assertEquals(false, it.hasNext());\n+    }\n+\n+    public void testIterateModify2() {\n+        List list = makeEmptyList();\n+        list.add(\"A\");\n+        list.add(\"B\");\n+        list.add(\"C\");\n+        assertEquals(3, list.size());\n+        \n+        ListIterator it = list.listIterator();\n+        assertEquals(\"A\", it.next());\n+        it.add(\"M\");  // change via Iterator interface\n+        assertEquals(4, list.size());\n+        list.add(2, \"Z\");  // change via List interface\n+        assertEquals(5, list.size());\n+        assertEquals(\"B\", it.next());\n+        try {\n+            it.set(\"N\"); // fails as previously changed via List interface\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+        try {\n+            it.remove();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+        try {\n+            it.add(\"N\");\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+        assertEquals(\"C\", it.next());\n+        assertEquals(false, it.hasNext());\n     }\n \n }", "timestamp": 1088026909, "metainfo": ""}