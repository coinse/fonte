{"sha": "2282bf731f8fdadd5cd8b54451e5424d559a436d", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r751857 | mbenson | 2009-03-09 14:43:53 -0700 (Mon, 09 Mar 2009) | 1 line          handle more ListIterator functionality when possible     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper.java\n package org.apache.commons.collections.iterators;\n \n import java.util.ArrayList;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n import java.util.NoSuchElementException;\n  *\n  * @author Morgan Delagrange\n  */\n-public class TestListIteratorWrapper extends AbstractTestIterator {\n+public class TestListIteratorWrapper<E> extends AbstractTestIterator<E> {\n \n     protected String[] testArray = {\n         \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n     };\n \n-    protected List list1 = null;\n+    protected List<E> list1 = null;\n \n     public static Test suite() {\n         return new TestSuite(TestListIteratorWrapper.class);\n         super(testName);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void setUp() {\n-        list1 = new ArrayList();\n-        list1.add(\"One\");\n-        list1.add(\"Two\");\n-        list1.add(\"Three\");\n-        list1.add(\"Four\");\n-        list1.add(\"Five\");\n-        list1.add(\"Six\");\n-    }\n-\n-    public Iterator makeEmptyIterator() {\n-        ArrayList list = new ArrayList();\n-        return new ListIteratorWrapper(list.iterator());\n-    }\n-\n-    public Iterator makeFullIterator() {\n-        Iterator i = list1.iterator();\n-\n-        return new ListIteratorWrapper(i);\n+        list1 = new ArrayList<E>();\n+        list1.add((E) \"One\");\n+        list1.add((E) \"Two\");\n+        list1.add((E) \"Three\");\n+        list1.add((E) \"Four\");\n+        list1.add((E) \"Five\");\n+        list1.add((E) \"Six\");\n+    }\n+\n+    public ResettableListIterator<E> makeEmptyIterator() {\n+        ArrayList<E> list = new ArrayList<E>();\n+        return new ListIteratorWrapper<E>(list.iterator());\n+    }\n+\n+    public ResettableListIterator<E> makeObject() {\n+        return new ListIteratorWrapper<E>(list1.iterator());\n     }\n \n     public void testIterator() {\n-        ListIterator iter = (ListIterator) makeFullIterator();\n-        for ( int i = 0; i < testArray.length; i++ ) {\n-            Object testValue = testArray[i];            \n+        ListIterator<E> iter = makeObject();\n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n             Object iterValue = iter.next();\n \n-            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n-        }\n-\n-        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n \n         try {\n             iter.next();\n         } catch (Exception e) {\n-            assertTrue(\"NoSuchElementException must be thrown\", \n+            assertTrue(\"NoSuchElementException must be thrown\",\n                        e.getClass().equals((new NoSuchElementException()).getClass()));\n         }\n \n         // now, read it backwards\n         for (int i = testArray.length - 1; i > -1; --i) {\n             Object testValue = testArray[i];\n-            Object iterValue = iter.previous();\n+            E iterValue = iter.previous();\n \n             assertEquals( \"Iteration value is correct\", testValue, iterValue );\n         }\n         try {\n             iter.previous();\n         } catch (Exception e) {\n-            assertTrue(\"NoSuchElementException must be thrown\", \n+            assertTrue(\"NoSuchElementException must be thrown\",\n                        e.getClass().equals((new NoSuchElementException()).getClass()));\n         }\n \n         // now, read it forwards again\n-        for ( int i = 0; i < testArray.length; i++ ) {\n-            Object testValue = testArray[i];            \n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n             Object iterValue = iter.next();\n \n-            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n         }\n \n     }\n \n     public void testRemove() {\n-        Iterator iter = (Iterator) makeFullIterator();\n+        ListIterator<E> iter = makeObject();\n+\n+        //initial state:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n \n         try {\n             iter.remove();\n-            fail(\"FilterIterator does not support the remove() method\");\n-        } catch (UnsupportedOperationException e) {\n-\n-        }\n+            fail(\"ListIteratorWrapper#remove() should fail; must be initially positioned first\");\n+        } catch (IllegalStateException e) {\n+        }\n+\n+        //no change from invalid op:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //establish size:\n+        int sz = list1.size();\n+\n+        //verify initial next() call:\n+        assertEquals(list1.get(0), iter.next());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        //verify remove():\n+        iter.remove();\n+        assertEquals(--sz, list1.size());\n+        //like we never started iterating:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+ \n+        try {\n+            iter.remove();\n+            fail(\"ListIteratorWrapper#remove() should fail; must be repositioned first\");\n+        } catch (IllegalStateException e) {\n+        }\n+\n+        //no change from invalid op:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //two consecutive next() calls:\n+        assertEquals(list1.get(0), iter.next());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        assertEquals(list1.get(1), iter.next());\n+        assertEquals(1, iter.previousIndex());\n+        assertEquals(2, iter.nextIndex());\n+\n+        //call previous():\n+        assertEquals(list1.get(1), iter.previous());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        //should support remove() after calling previous() once from tip because we haven't changed the underlying iterator's position:\n+        iter.remove();\n+        assertEquals(--sz, list1.size());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        //dig into cache\n+        assertEquals(list1.get(0), iter.previous());\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        try {\n+            iter.remove();\n+            fail(\"ListIteratorWrapper does not support the remove() method while dug into the cache via previous()\");\n+        } catch (IllegalStateException e) {\n+        }\n+\n+        //no change from invalid op:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //dig out of cache, first next() maintains current position:\n+        assertEquals(list1.get(0), iter.next());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+        //continue traversing underlying iterator with this next() call, and we're out of the hole, so to speak:\n+        assertEquals(list1.get(1), iter.next());\n+        assertEquals(1, iter.previousIndex());\n+        assertEquals(2, iter.nextIndex());\n+\n+        //verify remove() works again:\n+        iter.remove();\n+        assertEquals(--sz, list1.size());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        assertEquals(list1.get(1), iter.next());\n+        assertEquals(1, iter.previousIndex());\n+        assertEquals(2, iter.nextIndex());\n \n     }\n \n     public void testReset() {\n-        ResettableListIterator iter = (ResettableListIterator) makeFullIterator();\n-        Object first = iter.next();\n-        Object second = iter.next();\n-        \n+        ResettableListIterator<E> iter = makeObject();\n+        E first = iter.next();\n+        E second = iter.next();\n+\n         iter.reset();\n-        \n+\n         // after reset, there shouldn't be any previous elements\n         assertFalse(\"No previous elements after reset()\", iter.hasPrevious());\n \n         // after reset, the results should be the same as before\n         assertEquals(\"First element should be the same\", first, iter.next());\n         assertEquals(\"Second elment should be the same\", second, iter.next());\n-        \n+\n         // after passing the point, where we resetted, continuation should work as expected\n         for (int i = 2; i < testArray.length; i++) {\n             Object testValue = testArray[i];\n-            Object iterValue = iter.next();\n+            E iterValue = iter.next();\n \n             assertEquals(\"Iteration value is correct\", testValue, iterValue);\n         }", "timestamp": 1252994229, "metainfo": ""}