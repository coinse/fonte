{"sha": "3254e85306a614287311447ec68da5ee47249ae7", "log": "Added missing javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n \n         /**\n          * Resolve enum from int.\n-         * @param value\n+         * @param value  the int value\n          * @return ReferenceType\n          * @throws IllegalArgumentException if the specified value is invalid.\n          */\n          * Constructs a reference of the given type to the given referent.\n          * The reference is registered with the queue for later purging.\n          *\n+         * @param <T> the type of the referenced object\n          * @param type  HARD, SOFT or WEAK\n          * @param referent  the object to refer to\n          * @param hash  the hash code of the <i>key</i> of the mapping;\n          *    this number might be different from referent.hashCode() if\n          *    the referent represents a value and not a key\n+         * @return the reference to the object\n          */\n         protected <T> Object toReference(ReferenceStrength type, T referent, int hash) {\n             if (type == ReferenceStrength.HARD) {\n     /**\n      * The EntrySet iterator.\n      */\n-    static class ReferenceEntrySetIterator<K, V> extends ReferenceBaseIterator<K, V> implements Iterator<Map.Entry<K, V>> {\n+    static class ReferenceEntrySetIterator<K, V>\n+            extends ReferenceBaseIterator<K, V> implements Iterator<Map.Entry<K, V>> {\n \n         public ReferenceEntrySetIterator(AbstractReferenceMap<K, V> parent) {\n             super(parent);\n     }\n \n     /**\n-     * Replaces the superclassm method to read the state of this class.\n+     * Replaces the superclass method to read the state of this class.\n      * <p>\n      * Serialization is not one of the JDK's nicest topics. Normal serialization will\n      * initialise the superclass before the subclass. Sometimes however, this isn't\n--- a/src/main/java/org/apache/commons/collections/map/DefaultedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/DefaultedMap.java\n      * \n      * @param map  the map to decorate, must not be null\n      * @param defaultValue  the default value to return when the key is not found\n+     * @return a new defaulting map\n      * @throws IllegalArgumentException if map is null\n      */\n     public static <K, V> DefaultedMap<K, V> defaultedMap(Map<K, V> map, V defaultValue) {\n      * \n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use to create entries, must not be null\n+     * @return a new defaulting map\n      * @throws IllegalArgumentException if map or factory is null\n      */\n     public static <K, V> DefaultedMap<K, V> defaultedMap(Map<K, V> map, Factory<? extends V> factory) {\n      * \n      * @param map  the map to decorate, must not be null\n      * @param transformer  the transformer to use as a factory to create entries, must not be null\n+     * @return a new defaulting map\n      * @throws IllegalArgumentException if map or factory is null\n      */\n     public static <K, V> Map<K, V> defaultedMap(Map<K, V> map, Transformer<? super K, ? extends V> transformer) {\n--- a/src/main/java/org/apache/commons/collections/map/FixedSizeMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/FixedSizeMap.java\n      * Factory method to create a fixed size map.\n      * \n      * @param map  the map to decorate, must not be null\n+     * @return a new fixed size map\n      * @throws IllegalArgumentException if map is null\n      */\n     public static <K, V> FixedSizeMap<K, V> fixedSizeMap(Map<K, V> map) {\n--- a/src/main/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n      * Factory method to create a fixed size sorted map.\n      * \n      * @param map  the map to decorate, must not be null\n+     * @return a new fixed size sorted map\n      * @throws IllegalArgumentException if map is null\n      */\n     public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(SortedMap<K, V> map) {\n--- a/src/main/java/org/apache/commons/collections/map/LazyMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LazyMap.java\n      * \n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use, must not be null\n+     * @return a new lazy map\n      * @throws IllegalArgumentException if map or factory is null\n      */\n     public static <K, V> LazyMap<K, V> lazyMap(Map<K, V> map, Factory< ? extends V> factory) {\n      * \n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use, must not be null\n+     * @return a new lazy map\n      * @throws IllegalArgumentException if map or factory is null\n      */\n     public static <V, K> LazyMap<K, V> lazyMap(Map<K, V> map, Transformer<? super K, ? extends V> factory) {", "timestamp": 1344692867, "metainfo": ""}