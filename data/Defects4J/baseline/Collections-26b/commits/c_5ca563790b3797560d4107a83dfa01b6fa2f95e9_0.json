{"sha": "5ca563790b3797560d4107a83dfa01b6fa2f95e9", "log": "Ensure constructor and clone method correctly clone multimaps bug 28972   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MultiHashMap.java\n+++ b/src/java/org/apache/commons/collections/MultiHashMap.java\n  * <code>list</code> will be a list containing \"A\", \"B\", \"C\".\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.17 $ $Date: 2004/03/14 17:05:24 $\n+ * @version $Revision: 1.18 $ $Date: 2004/05/14 22:33:31 $\n  * \n  * @author Christopher Berry\n  * @author James Strachan\n     }\n \n     /**\n-     * Constructor.\n+     * Constructor that copies the input map creating an independent copy.\n+     * <p>\n+     * This method performs different behaviour depending on whether the map\n+     * specified is a MultiMap or not. If a MultiMap is specified, each internal\n+     * collection is also cloned. If the specified map only implements Map, then\n+     * the values are not cloned.\n+     * <p>\n+     * NOTE: From Commons Collections 3.1 this method correctly copies a MultiMap\n+     * to form a truly independent new map.\n      * \n      * @param mapToCopy  a Map to copy\n      */\n     public MultiHashMap(Map mapToCopy) {\n         super(mapToCopy);\n+        if (mapToCopy instanceof MultiMap) {\n+            for (Iterator it = entrySet().iterator(); it.hasNext();) {\n+                Map.Entry entry = (Map.Entry) it.next();\n+                Collection coll = (Collection) entry.getValue();\n+                Collection newColl = createCollection(coll);\n+                entry.setValue(newColl);\n+            }\n+        }\n     }\n \n     /**\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Clone the map.\n+     * Clones the map creating an independent copy.\n      * <p>\n      * The clone will shallow clone the collections as well as the map.\n      * \n      * @return the cloned map\n      */\n     public Object clone() {\n-        MultiHashMap obj = (MultiHashMap) super.clone();\n+        MultiHashMap cloned = (MultiHashMap) super.clone();\n \n         // clone each Collection container\n-        for (Iterator it = entrySet().iterator(); it.hasNext();) {\n+        for (Iterator it = cloned.entrySet().iterator(); it.hasNext();) {\n             Map.Entry entry = (Map.Entry) it.next();\n             Collection coll = (Collection) entry.getValue();\n             Collection newColl = createCollection(coll);\n             entry.setValue(newColl);\n         }\n-        return obj;\n-    }\n-    \n+        return cloned;\n+    }\n+\n     /** \n      * Creates a new instance of the map value Collection container.\n      * <p>\n--- a/src/test/org/apache/commons/collections/TestMultiHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestMultiHashMap.java\n /**\n  * Unit Tests for <code>MultiHashMap</code>.\n  * \n- * @version $Revision: 1.18 $ $Date: 2004/03/14 17:05:24 $\n+ * @version $Revision: 1.19 $ $Date: 2004/05/14 22:33:58 $\n  *\n  * @author Unknown\n  */\n         assertEquals(true, map.containsValue(\"A\", \"Z\"));\n         assertEquals(true, map.containsValue(\"A\", \"M\"));\n     }\n-    \n+\n+    public void testClone() {\n+        MultiHashMap map = new MultiHashMap();\n+        map.put(\"A\", \"1\");\n+        map.put(\"A\", \"2\");\n+        Collection coll = (Collection) map.get(\"A\");\n+        assertEquals(1, map.size());\n+        assertEquals(2, coll.size());\n+        \n+        MultiHashMap cloned = (MultiHashMap) map.clone();\n+        Collection clonedColl = (Collection) cloned.get(\"A\");\n+        assertNotSame(map, cloned);\n+        assertNotSame(coll, clonedColl);\n+        assertEquals(1, map.size());\n+        assertEquals(2, coll.size());\n+        assertEquals(1, cloned.size());\n+        assertEquals(2, clonedColl.size());\n+        map.put(\"A\", \"3\");\n+        assertEquals(1, map.size());\n+        assertEquals(3, coll.size());\n+        assertEquals(1, cloned.size());\n+        assertEquals(2, clonedColl.size());\n+    }\n+\n+    public void testConstructor() {\n+        MultiHashMap map = new MultiHashMap();\n+        map.put(\"A\", \"1\");\n+        map.put(\"A\", \"2\");\n+        Collection coll = (Collection) map.get(\"A\");\n+        assertEquals(1, map.size());\n+        assertEquals(2, coll.size());\n+        \n+        MultiHashMap newMap = new MultiHashMap(map);\n+        Collection newColl = (Collection) newMap.get(\"A\");\n+        assertNotSame(map, newMap);\n+        assertNotSame(coll, newColl);\n+        assertEquals(1, map.size());\n+        assertEquals(2, coll.size());\n+        assertEquals(1, newMap.size());\n+        assertEquals(2, newColl.size());\n+        map.put(\"A\", \"3\");\n+        assertEquals(1, map.size());\n+        assertEquals(3, coll.size());\n+        assertEquals(1, newMap.size());\n+        assertEquals(2, newColl.size());\n+    }\n }", "timestamp": 1084574038, "metainfo": ""}