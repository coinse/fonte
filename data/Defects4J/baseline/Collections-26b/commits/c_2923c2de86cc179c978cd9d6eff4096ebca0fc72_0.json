{"sha": "2923c2de86cc179c978cd9d6eff4096ebca0fc72", "log": "AbstractMapBag.BagIterator.remove breaks class invariants when removing last entry bug 35747, from Steve Clark  ", "commit": "\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n  * @author Michael A. Smith\n  * @author Stephen Colebourne\n  * @author Janek Bogucki\n+ * @author Steve Clark\n  */\n public abstract class AbstractMapBag implements Bag {\n     \n                 throw new IllegalStateException();\n             }\n             MutableInteger mut = (MutableInteger) current.getValue();\n-            if (mut.value > 0) {\n+            if (mut.value > 1) {\n                 mut.value--;\n-                parent.size--;\n             } else {\n                 entryIterator.remove();\n             }\n+            parent.size--;\n             canRemove = false;\n         }\n     }\n--- a/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n+++ b/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n         assertEquals(1, bag.size());\n     }\n     \n+    public void testIteratorRemoveProtectsInvariants() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        assertEquals(2, bag.size());\n+        Iterator it = bag.iterator();\n+        assertEquals(\"A\", it.next());\n+        assertEquals(true, it.hasNext());\n+        it.remove();\n+        assertEquals(1, bag.size());\n+        assertEquals(true, it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertEquals(false, it.hasNext());\n+        it.remove();\n+        assertEquals(0, bag.size());\n+        assertEquals(false, it.hasNext());\n+        \n+        Iterator it2 = bag.iterator();\n+        assertEquals(false, it2.hasNext());\n+    }\n+    \n     public void testToArray() {\n         Bag bag = makeBag();\n         bag.add(\"A\");", "timestamp": 1121382672, "metainfo": ""}