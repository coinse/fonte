{"sha": "bb0a4b6b038bf912873d10fc0f124ac3238d3e32", "log": "[COLLECTIONS-531] Use proper type bounds for CollectionUtils.isEqualCollection(C, C, Equator). Thanks to Dipanjan Laha.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n      * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n      * equal to the cardinality of <i>e</i> in <i>b</i>,\n      * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n-     *\n+     * <p>\n+     * <b>Note:</b> from version 4.1 onwards this method requires the input\n+     * collections and equator to be of compatible type (using bounded wildcards).\n+     * Providing incompatible arguments (e.g. by casting to their rawtypes)\n+     * will result in a {@code ClassCastException} thrown at runtime.\n+     *\n+     * @param <E>  the element type\n      * @param a  the first collection, must not be null\n      * @param b  the second collection, must not be null\n      * @param equator  the Equator used for testing equality\n      * @throws IllegalArgumentException if the equator is null\n      * @since 4.0\n      */\n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // we don't know the types due to wildcards in the signature\n-    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b, final Equator<?> equator) {\n+    public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n+                                                final Collection<? extends E> b,\n+                                                final Equator<? super E> equator) {\n         if (equator == null) {\n             throw new IllegalArgumentException(\"equator may not be null\");\n         }\n             return false;\n         }\n \n-        final Transformer transformer = new Transformer() {\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        final Transformer<E, ?> transformer = new Transformer() {\n             public EquatorWrapper<?> transform(final Object input) {\n                 return new EquatorWrapper(equator, input);\n             }", "timestamp": 1401388316, "metainfo": ""}