{"sha": "340c5f0af9d7fd86b665f03aae56ee76053a4c41", "log": "Reformat file layout   ", "commit": "\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedCollection.java,v 1.2 2003/05/07 11:20:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedCollection.java,v 1.3 2003/05/11 13:14:51 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/07 11:20:21 $\n+ * @version $Revision: 1.3 $ $Date: 2003/05/11 13:14:51 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n         }\n     }\n \n+    /**\n+     * Validates the object being added to ensure it matches the predicate.\n+     * <p>\n+     * The predicate itself should not throw an exception, but return false to\n+     * indicate that the object cannot be added.\n+     * \n+     * @param object  the object being added\n+     * @throws IllegalArgumentException if the add is invalid\n+     */\n+    protected void validate(Object object) {\n+        if (predicate.evaluate(object) == false) {\n+            throw new IllegalArgumentException(\"Cannot add Object '\" + object + \"' - Predicate rejected it\");\n+        }\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Override to validate the object being added to ensure it matches\n         return getCollection().addAll(coll);\n     }\n \n-    /**\n-     * Validates the object being added to ensure it matches the predicate.\n-     * <p>\n-     * The predicate itself should not throw an exception, but return false to\n-     * indicate that the object cannot be added.\n-     * \n-     * @param object  the object being added\n-     * @throws IllegalArgumentException if the add is invalid\n-     */\n-    protected void validate(Object object) {\n-        if (predicate.evaluate(object) == false) {\n-            throw new IllegalArgumentException(\"Cannot add Object '\" + object + \"' - Predicate rejected it\");\n-        }\n-    }\n-\n }\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedList.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedList.java,v 1.2 2003/05/07 11:20:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedList.java,v 1.3 2003/05/11 13:14:51 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/07 11:20:21 $\n+ * @version $Revision: 1.3 $ $Date: 2003/05/11 13:14:51 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n     }\n \n     //-----------------------------------------------------------------------\n+    public Object get(int index) {\n+        return getList().get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return getList().indexOf(object);\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        return getList().lastIndexOf(object);\n+    }\n+\n+    public Object remove(int index) {\n+        return getList().remove(index);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void add(int index, Object object) {\n         validate(object);\n         getList().add(index, object);\n         return getList().addAll(index, coll);\n     }\n \n-    public Object get(int index) {\n-        return getList().get(index);\n-    }\n-\n-    public int indexOf(Object object) {\n-        return getList().indexOf(object);\n-    }\n-\n-    public int lastIndexOf(Object object) {\n-        return getList().lastIndexOf(object);\n-    }\n-\n     public ListIterator listIterator() {\n         return listIterator(0);\n     }\n \n     public ListIterator listIterator(int i) {\n-        return new AbstractListIteratorDecorator(getList().listIterator(i)) {\n-            public void add(Object object) {\n-                validate(object);\n-                getIterator().add(object);\n-            }\n-\n-            public void set(Object object) {\n-                validate(object);\n-                getIterator().set(object);\n-            }\n-        };\n-    }\n-\n-    public Object remove(int index) {\n-        return getList().remove(index);\n+        return new PredicatedListIterator(getList().listIterator(i));\n     }\n \n     public Object set(int index, Object object) {\n         return new PredicatedList(sub, predicate);\n     }\n \n+    /**\n+     * Inner class Iterator for the PredicatedList\n+     */\n+    protected class PredicatedListIterator extends AbstractListIteratorDecorator {\n+        \n+        protected PredicatedListIterator(ListIterator iterator) {\n+            super(iterator);\n+        }\n+        \n+        public void add(Object object) {\n+            validate(object);\n+            getIterator().add(object);\n+        }\n+        \n+        public void set(Object object) {\n+            validate(object);\n+            getIterator().set(object);\n+        }\n+    }\n+\n }", "timestamp": 1052658891, "metainfo": ""}