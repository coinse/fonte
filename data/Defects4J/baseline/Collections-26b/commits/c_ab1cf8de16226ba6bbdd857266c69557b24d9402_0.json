{"sha": "ab1cf8de16226ba6bbdd857266c69557b24d9402", "log": "* fix ComparatorChain for the case in which an underlying comparator returns Integer.MIN_VALUE, add test that demonstrates * minor javadocs   ", "commit": "\n--- a/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ComparatorChain.java,v 1.9 2003/01/10 20:21:25 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ComparatorChain.java,v 1.10 2003/01/13 22:52:34 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * \n  * @since Commons Collections 2.0\n  * @author Morgan Delagrange\n- * @version $Revision: 1.9 $ $Date: 2003/01/10 20:21:25 $\n+ * @version $Revision: 1.10 $ $Date: 2003/01/13 22:52:34 $\n  */\n public class ComparatorChain implements Comparator,Serializable {\n \n     protected List comparatorChain = null;\n-    // 0 = ascend; 1 = descend\n+    // false (clear) = ascend; true (set) = descend\n     protected BitSet orderingBits = null;\n \n     // ComparatorChain is \"locked\" after the first time\n      * @param index      index of the Comparator to replace\n      * @param comparator Comparator to place at the given index\n      * @exception IndexOutOfBoundsException\n-     *                   if index < 0 or index > size()\n+     *                   if index &lt; 0 or index &gt; size()\n      */\n     public void setComparator(int index, Comparator comparator) \n     throws IndexOutOfBoundsException {\n             if (retval != 0) {\n                 // invert the order if it is a reverse sort\n                 if (orderingBits.get(comparatorIndex) == true) {\n-                    retval *= -1;\n+                    if(Integer.MIN_VALUE == retval) {\n+                        retval = Integer.MAX_VALUE;\n+                    } else {                        \n+                        retval *= -1;\n+                    }\n                 }\n \n                 return retval;\n--- a/src/java/org/apache/commons/collections/comparators/TransformingComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/TransformingComparator.java\n-package org.apache.commons.collections.comparators;\n-\n-/* ====================================================================\n+/*\n+ * $Header:$ \n+ * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n+package org.apache.commons.collections.comparators;\n \n import java.util.Comparator;\n \n /**\n  * Decorates another Comparator with transformation behavior. That is, the\n  * return value from the transform operation will be passed to the decorated\n- * <CODE>Comparator#compare</CODE> method.\n- * <p>\n+ * {@link Comparator#compare compare} method.\n+ * <p />\n+ * \n+ * @since Commons Collections 2.0 (?)\n+ * @version $Revision:$ $Date:$\n+ * \n  * @see org.apache.commons.collections.Transformer\n  * @see org.apache.commons.collections.comparators.ComparableComparator\n  */\n     protected Transformer transformer;\n \n     /**\n-     * Constructs an instance with the given Transformer and a ComparableComparator.\n-     * @param transformer what will transform the instance.\n+     * Constructs an instance with the given Transformer and a \n+     * {@link ComparableComparator ComparableComparator}.\n+     * @param transformer what will transform the arguments to \n+     *        {@link #compare compare}\n      */\n     public TransformingComparator(Transformer transformer)\n     {\n \n     /**\n      * Constructs an instance with the given Transformer and Comparator\n-     * @param decorated  the decorated Comparator\n-     * @param getterName    the getter name\n+     * @param transformer what will transform the arguments to {@link #compare compare}\n+     * @param decorated the decorated Comparator\n      */\n     public TransformingComparator(Transformer transformer, Comparator decorated)\n     {\n--- a/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n /* \n- * $Id: TestComparatorChain.java,v 1.4 2003/01/07 23:44:20 rwaldhoff Exp $\n+ * $Id: TestComparatorChain.java,v 1.5 2003/01/13 22:52:34 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n         }\n     }\n \n+\n+    public void testComparatorChainOnMinvaluedCompatator() {\n+        // -1 * Integer.MIN_VALUE is less than 0,\n+        // test that ComparatorChain handles this edge case correctly\n+        ComparatorChain chain = new ComparatorChain();\n+        chain.addComparator(\n+            new Comparator() {\n+                public int compare(Object a, Object b) {\n+                    int result = ((Comparable)a).compareTo(b);\n+                    if(result < 0) {\n+                        return Integer.MIN_VALUE;\n+                    } else if(result > 0) {\n+                        return Integer.MAX_VALUE;\n+                    } else {\n+                        return 0;\n+                    }\n+                }\n+            }, true);\n+\n+        assertTrue(chain.compare(new Integer(4), new Integer(5)) > 0);            \n+        assertTrue(chain.compare(new Integer(5), new Integer(4)) < 0);            \n+        assertTrue(chain.compare(new Integer(4), new Integer(4)) == 0);            \n+    }\n+\n     public List getComparableObjectsOrdered() {\n         List list = new LinkedList();\n         // this is the correct order assuming a", "timestamp": 1042498354, "metainfo": ""}