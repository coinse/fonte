{"sha": "41f5524e9260bdb8771d450c51ee91764ee30ffc", "log": "[COLLECTIONS-446] Added method isEqualCollection(Collection, Collection, Equator) to CollectionUtils.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n import org.apache.commons.collections.collection.TransformedCollection;\n import org.apache.commons.collections.collection.UnmodifiableBoundedCollection;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.functors.Equator;\n import org.apache.commons.collections.functors.TruePredicate;\n \n /**\n         return true;\n     }\n \n+    /**\n+     * Returns <tt>true</tt> iff the given {@link Collection}s contain\n+     * exactly the same elements with exactly the same cardinalities.\n+     * <p>\n+     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n+     * equal to the cardinality of <i>e</i> in <i>b</i>,\n+     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n+     *\n+     * @param a  the first collection, must not be null\n+     * @param b  the second collection, must not be null\n+     * @param equator  the Equator used for testing equality\n+     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n+     * @throws IllegalArgumentException if the equator is null\n+     * @since 4.0\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // we don't know the types due to wildcards in the signature\n+    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b, final Equator<?> equator) {\n+        if (equator == null) {\n+            throw new IllegalArgumentException(\"equator may not be null\");\n+        }\n+\n+        if(a.size() != b.size()) {\n+            return false;\n+        }\n+\n+        final Transformer transformer = new Transformer() {\n+            public EquatorWrapper<?> transform(Object input) {\n+                return new EquatorWrapper(equator, input);\n+            }\n+        };\n+        \n+        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n+    }\n+\n+    /**\n+     * Wraps another object and uses the provided Equator to implement\n+     * {@link #equals(Object)} and {@link #hashCode()}.\n+     * <p>\n+     * This class can be used to store objects into a Map.\n+     *  \n+     * @param <O>  the element type\n+     * @since 4.0\n+     */\n+    private static class EquatorWrapper<O> {\n+        private final Equator<O> equator;\n+        private final O object;\n+        \n+        public EquatorWrapper(final Equator<O> equator, final O object) {\n+            this.equator = equator;\n+            this.object = object;\n+        }\n+        \n+        public O getObject() {\n+            return object; \n+        }\n+        \n+        @Override\n+        public boolean equals(Object obj) {\n+            if (!(obj instanceof EquatorWrapper)) {\n+                return false;\n+            }\n+            @SuppressWarnings(\"unchecked\")\n+            EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n+            return equator.equate(object, otherObj.getObject());\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return equator.hash(object);\n+        }        \n+    }\n+    \n     /**\n      * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n      *\n--- a/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n import org.apache.commons.collections.collection.SynchronizedCollection;\n import org.apache.commons.collections.collection.TransformedCollection;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.functors.DefaultEquator;\n+import org.apache.commons.collections.functors.Equator;\n import org.junit.Before;\n import org.junit.Test;\n \n     }\n \n     @Test\n+    public void testIsEqualCollectionEquator() {\n+        Collection<Integer> collB = CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);\n+\n+        // odd / even equator\n+        final Equator<Integer> e = new Equator<Integer>() {\n+            public boolean equate(Integer o1, Integer o2) {\n+                if (o1.intValue() % 2 == 0 ^ o2.intValue() % 2 == 0) return false;\n+                else return true;\n+            }\n+\n+            public int hash(Integer o) {\n+                return o.intValue() % 2 == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();\n+            }\n+        };\n+        \n+        assertTrue(CollectionUtils.isEqualCollection(collectionA, collectionA, e));\n+        assertTrue(CollectionUtils.isEqualCollection(collectionA, collB, e));\n+        assertTrue(CollectionUtils.isEqualCollection(collB, collectionA, e));\n+        \n+        final Equator<Number> defaultEquator = new DefaultEquator<Number>();\n+        assertFalse(CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));\n+        assertFalse(CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));        \n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testIsEqualCollectionNullEquator() {\n+        CollectionUtils.isEqualCollection(collectionA, collectionA, null);\n+    }\n+\n+    @Test\n     public void testIsProperSubCollection() {\n         final Collection<String> a = new ArrayList<String>();\n         final Collection<String> b = new ArrayList<String>();", "timestamp": 1362518990, "metainfo": ""}