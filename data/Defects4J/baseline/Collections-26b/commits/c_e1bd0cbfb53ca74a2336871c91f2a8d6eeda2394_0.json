{"sha": "e1bd0cbfb53ca74a2336871c91f2a8d6eeda2394", "log": "Minor formatting.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/comparators/ComparatorChain.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/ComparatorChain.java\n      * @param o1  the first object to compare\n      * @param o2  the second object to compare\n      * @return -1, 0, or 1\n-     * @exception UnsupportedOperationException\n-     *                   if the ComparatorChain does not contain at least one\n-     *                   Comparator\n+     * @throws UnsupportedOperationException if the ComparatorChain does not contain at least one Comparator\n      */\n     public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n         if (isLocked == false) {\n             if (retval != 0) {\n                 // invert the order if it is a reverse sort\n                 if (orderingBits.get(comparatorIndex) == true) {\n-                    if(Integer.MIN_VALUE == retval) {\n+                    if (Integer.MIN_VALUE == retval) {\n                         retval = Integer.MAX_VALUE;\n                     } else {\n                         retval *= -1;\n         }\n         if (object.getClass().equals(this.getClass())) {\n             final ComparatorChain<?> chain = (ComparatorChain<?>) object;\n-            return (null == orderingBits ? null == chain.orderingBits : orderingBits\n-                    .equals(chain.orderingBits)) && (null == comparatorChain ? null == chain.comparatorChain\n-                    : comparatorChain.equals(chain.comparatorChain));\n+            return (null == orderingBits ? null == chain.orderingBits : orderingBits.equals(chain.orderingBits)) &&\n+                   (null == comparatorChain ? null == chain.comparatorChain :\n+                                              comparatorChain.equals(chain.comparatorChain));\n         }\n         return false;\n     }", "timestamp": 1358870853, "metainfo": ""}