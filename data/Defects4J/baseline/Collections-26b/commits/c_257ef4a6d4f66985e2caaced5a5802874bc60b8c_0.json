{"sha": "257ef4a6d4f66985e2caaced5a5802874bc60b8c", "log": "Better testing of MapIterators   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java,v 1.2 2003/11/19 23:58:11 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java,v 1.3 2003/11/20 00:31:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n+import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.Iterator;\n import java.util.ListIterator;\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n-import org.apache.commons.collections.iterators.ListIteratorWrapper;\n import org.apache.commons.collections.iterators.OrderedMapIterator;\n import org.apache.commons.collections.iterators.ResettableIterator;\n import org.apache.commons.collections.map.AbstractSortedMapDecorator;\n  * not store each object twice, which can save on memory use.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: DualTreeBidiMap.java,v 1.2 2003/11/19 23:58:11 scolebourne Exp $\n+ * @version $Id: DualTreeBidiMap.java,v 1.3 2003/11/20 00:31:42 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n         protected BidiOrderedMapIterator(AbstractDualBidiMap map) {\n             super();\n             this.map = map;\n-            iterator = new ListIteratorWrapper(map.entrySet().iterator());\n+            iterator = new ArrayList(map.entrySet()).listIterator();\n         }\n         \n         public boolean hasNext() {\n         public void remove() {\n             iterator.remove();\n             map.remove(last.getKey());\n+            last = null;\n         }\n         \n         public Object getKey() {\n         }\n         \n         public void reset() {\n-            iterator = new ListIteratorWrapper(map.entrySet().iterator());\n+            iterator = new ArrayList(map.entrySet()).listIterator();\n             last = null;\n         }\n         \n--- a/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java,v 1.1 2003/11/16 20:35:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java,v 1.2 2003/11/20 00:31:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * UnsupportedOperationException on attempts to call that method.\n  *\n  * @since Commons Collections 3.0 (previously DoubleOrderedMap v2.0)\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 20:35:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/20 00:31:42 $\n  * \n  * @author Marc Johnson\n  * @author Stephen Colebourne\n         }\n         \n         public Object getKey() {\n+            if (lastReturnedNode == null) {\n+                throw new IllegalStateException(\"Iterator getKey() can only be called after next() and before remove()\");\n+            }\n             return lastReturnedNode.getData(dataType);\n         }\n \n         public Object getValue() {\n+            if (lastReturnedNode == null) {\n+                throw new IllegalStateException(\"Iterator getValue() can only be called after next() and before remove()\");\n+            }\n             return lastReturnedNode.getData(oppositeType);\n         }\n \n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestOrderedBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestOrderedBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestOrderedBidiMap.java,v 1.1 2003/11/16 20:35:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestOrderedBidiMap.java,v 1.2 2003/11/20 00:31:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n import java.util.NoSuchElementException;\n \n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n import org.apache.commons.collections.iterators.MapIterator;\n-import org.apache.commons.collections.iterators.OrderedMapIterator;\n \n /**\n  * Abstract test class for {@link OrderedBidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/11/16 20:35:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/20 00:31:42 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n     }\n     \n     //-----------------------------------------------------------------------\n-    public void testMapIteratorOrder() {\n-        resetFull();\n-        OrderedBidiMap bidi = (OrderedBidiMap) map;\n-        List ordered = new ArrayList(map.keySet());\n-        List ordered2 = new ArrayList(map.keySet());\n-        assertEquals(\"KeySet iterator is not consistent\", ordered, ordered2);\n-        \n-        int i = 0;\n-        for (MapIterator it = bidi.mapIterator(); it.hasNext(); i++) {\n-            Object key = (Object) it.next();\n-            assertEquals(\"Inconsistent order\", ordered.get(i), key);\n-            assertEquals(\"Incorrect value for key\", bidi.get(key), it.getValue());\n-        }\n-        i = 0;\n-        OrderedMapIterator it = bidi.orderedMapIterator();\n-        for (; it.hasNext(); i++) {\n-            Object key = (Object) it.next();\n-            assertEquals(\"Inconsistent order\", ordered.get(i), key);\n-            assertEquals(\"Incorrect value for key\", bidi.get(key), it.getValue());\n-            assertEquals(true, it.hasPrevious());\n-        }\n-        i--;\n-        for (; it.hasPrevious(); i--) {\n-            Object key = (Object) it.previous();\n-            assertEquals(\"Inconsistent order\", ordered.get(i), key);\n-            assertEquals(\"Incorrect value for key\", bidi.get(key), it.getValue());\n-            assertEquals(true, it.hasNext());\n+    public BulkTest bulkTestOrderedMapIterator() {\n+        return new TestBidiOrderedMapIterator();\n+    }\n+    \n+    public class TestBidiOrderedMapIterator extends AbstractTestMapIterator {\n+        public TestBidiOrderedMapIterator() {\n+            super(\"TestBidiOrderedMapIterator\");\n+        }\n+        \n+        public Object[] addSetValues() {\n+            return AbstractTestOrderedBidiMap.this.getNewSampleValues();\n+        }\n+        \n+        public boolean supportsRemove() {\n+            return AbstractTestOrderedBidiMap.this.isRemoveSupported();\n+        }\n+\n+        public boolean supportsSetValue() {\n+            return AbstractTestOrderedBidiMap.this.isSetValueSupported();\n+        }\n+\n+        public MapIterator makeEmptyMapIterator() {\n+            resetEmpty();\n+            return ((OrderedBidiMap) AbstractTestOrderedBidiMap.this.map).orderedMapIterator();\n+        }\n+\n+        public MapIterator makeFullMapIterator() {\n+            resetFull();\n+            return ((OrderedBidiMap) AbstractTestOrderedBidiMap.this.map).orderedMapIterator();\n+        }\n+        \n+        public Map getMap() {\n+            // assumes makeFullMapIterator() called first\n+            return AbstractTestOrderedBidiMap.this.map;\n+        }\n+        \n+        public Map getConfirmedMap() {\n+            // assumes makeFullMapIterator() called first\n+            return AbstractTestOrderedBidiMap.this.confirmed;\n+        }\n+        \n+        public void verify() {\n+            super.verify();\n+            AbstractTestOrderedBidiMap.this.verify();\n         }\n     }\n     \n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java,v 1.5 2003/11/20 00:03:05 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java,v 1.6 2003/11/20 00:31:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * overriding the supportsXxx() methods if necessary.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/11/20 00:03:05 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/20 00:31:42 $\n  * \n  * @author Stephen Colebourne\n  */\n         verify();\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testMapIteratorRemoveGetKey() {\n+        if (supportsRemove() == false) {\n+            return;\n+        }\n+        MapIterator it = makeFullMapIterator();\n+        Map map = getMap();\n+        Map confirmed = getConfirmedMap();\n+        \n+        assertEquals(true, it.hasNext());\n+        Object key = it.next();\n+        \n+        it.remove();\n+        confirmed.remove(key);\n+        verify();\n+        \n+        try {\n+            it.getKey();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMapIteratorRemoveGetValue() {\n+        if (supportsRemove() == false) {\n+            return;\n+        }\n+        MapIterator it = makeFullMapIterator();\n+        Map map = getMap();\n+        Map confirmed = getConfirmedMap();\n+        \n+        assertEquals(true, it.hasNext());\n+        Object key = it.next();\n+        \n+        it.remove();\n+        confirmed.remove(key);\n+        verify();\n+        \n+        try {\n+            it.getValue();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        verify();\n+    }\n+\n }", "timestamp": 1069288302, "metainfo": ""}