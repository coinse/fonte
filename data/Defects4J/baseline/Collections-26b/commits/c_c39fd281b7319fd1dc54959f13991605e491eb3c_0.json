{"sha": "c39fd281b7319fd1dc54959f13991605e491eb3c", "log": "Renamed unit tests for functors package.  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections/TestPredicateUtils.java\n+++ b/src/test/java/org/apache/commons/collections/TestPredicateUtils.java\n import java.util.Map;\n \n import org.apache.commons.collections.functors.AllPredicate;\n-import org.apache.commons.collections.functors.BasicPredicateTestBase;\n+import org.apache.commons.collections.functors.AbstractPredicateTest;\n import org.apache.commons.collections.functors.EqualPredicate;\n import org.apache.commons.collections.functors.ExceptionPredicate;\n import org.apache.commons.collections.functors.FalsePredicate;\n  * @author Matt Benson\n  */\n @SuppressWarnings(\"boxing\")\n-public class TestPredicateUtils extends BasicPredicateTestBase {\n+public class TestPredicateUtils extends AbstractPredicateTest {\n     /**\n      * Set up instance variables required by this test case.\n      */\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/functors/AbstractAnyAllOnePredicateTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import org.apache.commons.collections.Predicate;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+\n+/**\n+ * Base class for tests of AnyPredicate, AllPredicate, and OnePredicate.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public abstract class AbstractAnyAllOnePredicateTest<T> extends AbstractCompositePredicateTest<T> {\n+\n+    /**\n+     * Creates a new <code>TestCompositePredicate</code>.\n+     *\n+     * @param testValue the value which the mock predicates should expect to see (may be null).\n+     */\n+    protected AbstractAnyAllOnePredicateTest(final T testValue) {\n+        super(testValue);\n+    }\n+\n+    /**\n+     * Tests whether <code>getInstance</code> with a one element array returns the first element in the array.\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public final void singleElementArrayToGetInstance() {\n+        final Predicate<T> predicate = createMockPredicate(null);\n+        final Predicate<T> allPredicate = getPredicateInstance(predicate);\n+        assertSame(\"expected argument to be returned by getInstance()\", predicate, allPredicate);\n+    }\n+\n+    /**\n+     * Tests that passing a singleton collection to <code>getInstance</code> returns the single element in the\n+     * collection.\n+     */\n+    @Override\n+    @Test\n+    public final void singletonCollectionToGetInstance() {\n+        final Predicate<T> predicate = createMockPredicate(null);\n+        final Predicate<T> allPredicate = getPredicateInstance(\n+                Collections.<Predicate<T>>singleton(predicate));\n+        assertSame(\"expected singleton collection member to be returned by getInstance()\",\n+                predicate, allPredicate);\n+    }\n+\n+    /**\n+     * Tests creating composite predicate instances with single predicates and verifies that the composite returns\n+     * the same value as the single predicate does. \n+     */\n+    @SuppressWarnings(\"boxing\")\n+    public final void singleValues() {\n+        assertTrue(getPredicateInstance(true).evaluate(null));\n+        assertFalse(getPredicateInstance(false).evaluate(null));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/functors/AbstractClosureTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import org.apache.commons.collections.Closure;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public abstract class AbstractClosureTest {\n+\n+    @Test\n+    public void closureSanityTests() throws Exception {\n+        Closure<?> closure = generateClosure();\n+        Assert.assertNotNull(closure);\n+    }\n+\n+    /**\n+     * @return a closure for general sanity tests.\n+     */\n+    protected abstract <T> Closure<T> generateClosure();\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/functors/AbstractCompositePredicateTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+\n+/**\n+ * Base class for tests of composite predicates.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public abstract class AbstractCompositePredicateTest<T> extends AbstractMockPredicateTest<T> {\n+\n+    /**\n+     * Creates a new <code>TestCompositePredicate</code>.\n+     *\n+     * @param testValue the value which the mock predicates should expect to see (may be null).\n+     */\n+    protected AbstractCompositePredicateTest(final T testValue) {\n+        super(testValue);\n+    }\n+\n+    /**\n+     * Creates an instance of the predicate to test.\n+     *\n+     * @param predicates the arguments to <code>getInstance</code>.\n+     *\n+     * @return a predicate to test.\n+     */\n+    protected abstract Predicate<T> getPredicateInstance(final Predicate<? super T> ... predicates);\n+\n+    /**\n+     * Creates an instance of the predicate to test.\n+     *\n+     * @param predicates the argument to <code>getInstance</code>.\n+     *\n+     * @return a predicate to test.\n+     */\n+    protected abstract Predicate<T> getPredicateInstance(final Collection<Predicate<T>> predicates);\n+\n+    /**\n+     * Creates an instance of the predicate to test.\n+     *\n+     * @param mockReturnValues the return values for the mock predicates, or null if that mock is not expected\n+     *                         to be called\n+     *\n+     * @return a predicate to test.\n+     */\n+    protected final Predicate<T> getPredicateInstance(final Boolean... mockReturnValues) {\n+        final List<Predicate<T>> predicates = new ArrayList<Predicate<T>>();\n+        for (Boolean returnValue : mockReturnValues) {\n+            predicates.add(createMockPredicate(returnValue));\n+        }\n+        return getPredicateInstance(predicates);\n+    }\n+\n+    /**\n+     * Tests whether <code>getInstance</code> with a one element array returns the first element in the array.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void singleElementArrayToGetInstance() {\n+        final Predicate<T> predicate = createMockPredicate(null);\n+        final Predicate<T> allPredicate = getPredicateInstance(predicate);\n+        Assert.assertSame(\"expected argument to be returned by getInstance()\", predicate, allPredicate);\n+    }\n+\n+    /**\n+     * Tests that passing a singleton collection to <code>getInstance</code> returns the single element in the\n+     * collection.\n+     */\n+    public void singletonCollectionToGetInstance() {\n+        final Predicate<T> predicate = createMockPredicate(null);\n+        final Predicate<T> allPredicate = getPredicateInstance(\n+                Collections.<Predicate<T>>singleton(predicate));\n+        Assert.assertSame(\"expected argument to be returned by getInstance()\", predicate, allPredicate);\n+    }\n+\n+    /**\n+     * Tests <code>getInstance</code> with a null predicate array.\n+     */\n+    @Test(expected = IllegalArgumentException.class)\n+    public final void nullArrayToGetInstance() {\n+        getPredicateInstance((Predicate<T>[]) null);\n+    }\n+\n+    /**\n+     * Tests <code>getInstance</code> with a single null element in the predicate array.\n+     */\n+    @SuppressWarnings({\"unchecked\"})\n+    @Test(expected = IllegalArgumentException.class)\n+    public final void nullElementInArrayToGetInstance() {\n+        getPredicateInstance(new Predicate[] { null });\n+    }\n+\n+    /**\n+     * Tests <code>getInstance</code> with two null elements in the predicate array.\n+     */\n+    @SuppressWarnings({\"unchecked\"})\n+    @Test(expected = IllegalArgumentException.class)\n+    public final void nullElementsInArrayToGetInstance() {\n+        getPredicateInstance(new Predicate[] { null, null });\n+    }\n+\n+\n+    /**\n+     * Tests <code>getInstance</code> with a null predicate collection\n+     */\n+    @Test(expected = IllegalArgumentException.class)\n+    public final void nullCollectionToGetInstance() {\n+        getPredicateInstance((Collection<Predicate<T>>) null);\n+    }\n+\n+    /**\n+     * Tests <code>getInstance</code> with a predicate collection that contains null elements\n+     */\n+    @Test(expected = IllegalArgumentException.class)\n+    public final void nullElementsInCollectionToGetInstance() {\n+        final Collection<Predicate<T>> coll = new ArrayList<Predicate<T>>();\n+        coll.add(null);\n+        coll.add(null);\n+        getPredicateInstance(coll);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/functors/AbstractMockPredicateTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import static org.easymock.EasyMock.verify;\n+import static org.easymock.EasyMock.replay;\n+import org.junit.Before;\n+import org.junit.After;\n+import org.apache.commons.collections.Predicate;\n+import org.easymock.EasyMock;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Base class for tests of predicates which delegate to other predicates when evaluating an object.  This class\n+ * provides methods to create and verify mock predicates to which to delegate.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public abstract class AbstractMockPredicateTest<T> {\n+    /**\n+     * Mock predicates created by a single test case which need to be verified after the test completes.\n+     */\n+    private List<Predicate<? super T>> mockPredicatesToVerify;\n+    \n+    /**\n+     * The value to pass to mocks.\n+     */\n+    private final T testValue;\n+\n+    /**\n+     * Creates a new <code>PredicateTestBase</code>.\n+     *\n+     * @param testValue the value to pass to mock predicates.\n+     */\n+    protected AbstractMockPredicateTest(final T testValue) {\n+        this.testValue = testValue;\n+    }\n+\n+    /**\n+     * Creates the list of predicates to verify.\n+     */\n+    @Before\n+    public final void createVerifyList()\n+    {\n+        mockPredicatesToVerify = new ArrayList<Predicate<? super T>>();\n+    }\n+\n+    /**\n+     * Verifies all the mock predicates created for the test.\n+     */\n+    @After\n+    public final void verifyPredicates()\n+    {\n+        for (Predicate<? super T> predicate : mockPredicatesToVerify) {\n+            verify(predicate);\n+        }\n+    }\n+\n+    /**\n+     * Gets the value which will be passed to the mock predicates.\n+     *\n+     * @return the test value.\n+     */\n+    protected final T getTestValue() {\n+        return testValue;\n+    }\n+\n+    /**\n+     * Creates a single mock predicate.\n+     *\n+     * @param returnValue the return value for the mock predicate, or null if the mock is not expected to be called.\n+     *\n+     * @return a single mock predicate.\n+     */\n+    @SuppressWarnings({\"unchecked\", \"boxing\"})\n+    protected final Predicate<T> createMockPredicate(final Boolean returnValue) {\n+        final Predicate<T> mockPredicate = EasyMock.createMock(Predicate.class);\n+        if (returnValue != null) {\n+            EasyMock.expect(mockPredicate.evaluate(testValue)).andReturn(returnValue);\n+        }\n+        replay(mockPredicate);\n+        mockPredicatesToVerify.add(mockPredicate);\n+\n+        return mockPredicate;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/functors/AbstractPredicateTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public abstract class AbstractPredicateTest {\n+    protected Object cObject;\n+    protected String cString;\n+    protected Integer cInteger;\n+\n+    @Before\n+    public void initialiseTestObjects() throws Exception {\n+        cObject = new Object();\n+        cString = \"Hello\";\n+        cInteger = new Integer(6);\n+    }\n+    \n+    @Test\n+    public void predicateSanityTests() throws Exception {\n+        Predicate<?> predicate = generatePredicate();\n+        Assert.assertNotNull(predicate);\n+    }\n+\n+    /**\n+     * @return a predicate for general sanity tests.\n+     */\n+    protected abstract Predicate<?> generatePredicate();\n+\n+    protected <T> void assertFalse(Predicate<T> predicate, T testObject) {\n+        Assert.assertFalse(predicate.evaluate(testObject));\n+    }\n+\n+    protected <T> void assertTrue(Predicate<T> predicate, T testObject) {\n+        Assert.assertTrue(predicate.evaluate(testObject));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/functors/AllPredicateTest.java\n+package org.apache.commons.collections.functors;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+import static org.apache.commons.collections.functors.AllPredicate.allPredicate;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Test;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Tests the org.apache.commons.collections.functors.AllPredicate class.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+@SuppressWarnings(\"boxing\")\n+public class AllPredicateTest extends AbstractAnyAllOnePredicateTest<Integer> {\n+\n+    /**\n+     * Creates a new <code>TestAllPredicate</code>.\n+     */\n+    public AllPredicateTest() {\n+        super(42);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected final Predicate<Integer> getPredicateInstance(final Predicate<? super Integer> ... predicates) {\n+        return AllPredicate.allPredicate(predicates);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */    \n+    @Override\n+    protected final Predicate<Integer> getPredicateInstance(final Collection<Predicate<Integer>> predicates) {\n+        return AllPredicate.allPredicate(predicates);\n+    }\n+\n+    /**\n+     * Verifies that providing an empty predicate array evaluates to true.\n+     */\n+    @SuppressWarnings({\"unchecked\"})\n+    @Test\n+    public void emptyArrayToGetInstance() {\n+        assertTrue(\"empty array not true\", getPredicateInstance(new Predicate[] {}).evaluate(null));\n+    }\n+\n+    /**\n+     * Verifies that providing an empty predicate collection evaluates to true.\n+     */\n+    @Test\n+    public void emptyCollectionToGetInstance() {\n+        final Predicate<Integer> allPredicate = getPredicateInstance(\n+                Collections.<Predicate<Integer>>emptyList());\n+        assertTrue(\"empty collection not true\", allPredicate.evaluate(getTestValue()));\n+    }\n+\n+    /**\n+     * Tests whether a single true predicate evaluates to true.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void oneTruePredicate() {\n+        // use the constructor directly, as getInstance() returns the original predicate when passed\n+        // an array of size one.\n+        final Predicate<Integer> predicate = createMockPredicate(true);\n+        \n+        assertTrue(\"single true predicate evaluated to false\",\n+                allPredicate(predicate).evaluate(getTestValue()));\n+    }\n+\n+    /**\n+     * Tests whether a single false predicate evaluates to true.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void oneFalsePredicate() {\n+        // use the constructor directly, as getInstance() returns the original predicate when passed\n+        // an array of size one.\n+        final Predicate<Integer> predicate = createMockPredicate(false);\n+        assertFalse(\"single false predicate evaluated to true\",\n+                allPredicate(predicate).evaluate(getTestValue()));\n+    }\n+\n+    /**\n+     * Tests whether multiple true predicates evaluates to true.\n+     */\n+    @Test\n+    public void allTrue() {\n+        assertTrue(\"multiple true predicates evaluated to false\",\n+                getPredicateInstance(true, true).evaluate(getTestValue()));\n+        assertTrue(\"multiple true predicates evaluated to false\",\n+                getPredicateInstance(true, true, true).evaluate(getTestValue()));\n+    }\n+\n+    /**\n+     * Tests whether combining some true and one false evalutes to false.  Also verifies that only the first\n+     * false predicate is actually evaluated\n+     */\n+    @Test\n+    public void trueAndFalseCombined() {\n+        assertFalse(\"false predicate evaluated to true\",\n+                getPredicateInstance(false, null).evaluate(getTestValue()));\n+        assertFalse(\"false predicate evaluated to true\",\n+                getPredicateInstance(false, null, null).evaluate(getTestValue()));\n+        assertFalse(\"false predicate evaluated to true\",\n+                getPredicateInstance(true, false, null).evaluate(getTestValue()));\n+        assertFalse(\"false predicate evaluated to true\",\n+                getPredicateInstance(true, true, false).evaluate(getTestValue()));\n+        assertFalse(\"false predicate evaluated to true\",\n+                getPredicateInstance(true, true, false, null).evaluate(getTestValue()));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/functors/CatchAndRethrowClosureTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.IOException;\n+\n+import org.apache.commons.collections.Closure;\n+import org.apache.commons.collections.FunctorException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class CatchAndRethrowClosureTest extends AbstractClosureTest {\n+\n+    private static <T> Closure<T> generateIOExceptionClosure() {\n+        return new CatchAndRethrowClosure<T>() {\n+\n+            @Override\n+            protected void executeAndThrow(T input) throws IOException  {\n+                throw new IOException();\n+            }\n+        };\n+    }\n+\n+    private static <T> Closure<T> generateNullPointerExceptionClosure() {\n+        return new CatchAndRethrowClosure<T>() {\n+\n+            @Override\n+            protected void executeAndThrow(T input) {\n+                throw new NullPointerException();\n+            }\n+        };\n+    }\n+\n+    private static <T> Closure<T> generateNoExceptionClosure() {\n+        return new CatchAndRethrowClosure<T>() {\n+\n+            @Override\n+            protected void executeAndThrow(T input) {\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected <T> Closure<T> generateClosure() {\n+        return generateNoExceptionClosure();\n+    }\n+    \n+    @Test\n+    public void testThrowingClosure() {\n+        Closure<Integer> closure = generateNoExceptionClosure();\n+        try {\n+            closure.execute(Integer.valueOf(0));\n+        } catch (FunctorException ex) {\n+            Assert.fail();\n+        } catch (RuntimeException ex) {\n+            Assert.fail();\n+        }\n+        \n+        closure = generateIOExceptionClosure();\n+        try {\n+            closure.execute(Integer.valueOf(0));\n+            Assert.fail();\n+        } catch (FunctorException ex) {\n+            Assert.assertTrue(ex.getCause() instanceof IOException);\n+        } catch (RuntimeException ex) {\n+            Assert.fail();\n+        }\n+\n+        closure = generateNullPointerExceptionClosure();\n+        try {\n+            closure.execute(Integer.valueOf(0));\n+            Assert.fail();\n+        } catch (FunctorException ex) {\n+            Assert.fail();\n+        } catch (RuntimeException ex) {\n+            Assert.assertTrue(ex instanceof NullPointerException);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/functors/ComparatorPredicateTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import static org.apache.commons.collections.functors.ComparatorPredicate.*;\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.junit.Test;\n+\n+\n+public class ComparatorPredicateTest extends AbstractPredicateTest {\n+    private class TestComparator<T extends Comparable<T>> implements Comparator<T> {\n+        public int compare(T first, T second) {\n+            return first.compareTo(second);\n+        }\n+    }\n+\n+    @Test\n+    public void compareEquals() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>());\n+        assertFalse(p, Integer.valueOf(value.intValue() - 1));\n+        assertTrue(p, Integer.valueOf(value.intValue()));\n+        assertFalse(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+\n+    @Test\n+    public void compareGreater() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>(), Criterion.GREATER);\n+        assertTrue(p, Integer.valueOf(value.intValue() - 1));\n+        assertFalse(p, Integer.valueOf(value.intValue()));\n+        assertFalse(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+\n+    @Test\n+    public void compareLess() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>(), Criterion.LESS);\n+        assertFalse(p, Integer.valueOf(value.intValue() - 1));\n+        assertFalse(p, Integer.valueOf(value.intValue()));\n+        assertTrue(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+\n+    @Test\n+    public void compareGreaterOrEqual() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>(), Criterion.GREATER_OR_EQUAL);\n+        assertTrue(p, Integer.valueOf(value.intValue() - 1));\n+        assertTrue(p, Integer.valueOf(value.intValue()));\n+        assertFalse(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+\n+    @Test\n+    public void compareLessOrEqual() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>(), Criterion.LESS_OR_EQUAL);\n+        assertFalse(p, Integer.valueOf(value.intValue() - 1));\n+        assertTrue(p, Integer.valueOf(value.intValue()));\n+        assertTrue(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+    \n+    @Override\n+    protected Predicate<?> generatePredicate() {\n+        return comparatorPredicate(Integer.valueOf(10), new TestComparator<Integer>());\n+    }    \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/functors/EqualPredicateTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import static org.apache.commons.collections.functors.EqualPredicate.equalPredicate;\n+import static org.apache.commons.collections.functors.NullPredicate.nullPredicate;\n+import static org.junit.Assert.assertSame;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.junit.Test;\n+\n+\n+public class EqualPredicateTest extends AbstractPredicateTest {\n+    private static final EqualsTestObject FALSE_OBJECT = new EqualsTestObject(false);\n+    private static final EqualsTestObject TRUE_OBJECT = new EqualsTestObject(true);\n+\n+    @Override\n+    protected Predicate<Object> generatePredicate() {\n+       return equalPredicate(null);\n+    }\n+    \n+    @Test\n+    public void testNullArgumentEqualsNullPredicate() throws Exception {\n+        assertSame(nullPredicate(), equalPredicate(null));\n+    }\n+    \n+    @Test\n+    public void objectFactoryUsesEqualsForTest() throws Exception {\n+        Predicate<EqualsTestObject> predicate = equalPredicate(FALSE_OBJECT);\n+        assertFalse(predicate, FALSE_OBJECT);\n+        assertTrue(equalPredicate(TRUE_OBJECT), TRUE_OBJECT);\n+    }\n+    \n+    @SuppressWarnings(\"boxing\")\n+    @Test\n+    public void testPredicateTypeCanBeSuperClassOfObject() throws Exception {\n+        Predicate<Number> predicate = equalPredicate((Number) 4);\n+        assertTrue(predicate, 4);\n+    }\n+\n+    public static class EqualsTestObject {\n+        private final boolean b;\n+\n+        public EqualsTestObject(boolean b) {\n+            this.b = b;\n+        }\n+        \n+        @Override\n+        public boolean equals(Object obj) {\n+            return b;\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/functors/NullPredicateTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import static org.apache.commons.collections.functors.NullPredicate.nullPredicate;\n+import static org.junit.Assert.assertSame;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.junit.Test;\n+\n+\n+public class NullPredicateTest extends AbstractPredicateTest {\n+    @Test\n+    public void testNullPredicate() {\n+        assertSame(NullPredicate.nullPredicate(), NullPredicate.nullPredicate());\n+        assertTrue(nullPredicate(), null);\n+    }\n+    \n+    public void ensurePredicateCanBeTypedWithoutWarning() throws Exception {\n+        Predicate<String> predicate = NullPredicate.nullPredicate();\n+        assertFalse(predicate, cString);\n+    }\n+\n+    @Override\n+    protected Predicate<?> generatePredicate() {\n+        return nullPredicate();\n+    }    \n+}", "timestamp": 1345230695, "metainfo": ""}