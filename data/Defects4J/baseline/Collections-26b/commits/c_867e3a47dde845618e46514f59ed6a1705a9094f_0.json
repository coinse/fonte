{"sha": "867e3a47dde845618e46514f59ed6a1705a9094f", "log": "checkstyle fixes  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n                 swapPosition(nextGreater(deletedNode, dataElement), deletedNode, dataElement);\n             }\n \n-            Node<K, V> replacement =\n-                ((deletedNode.getLeft(dataElement) != null) ? deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement));\n+            Node<K, V> replacement = ((deletedNode.getLeft(dataElement) != null) ?\n+                    deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement));\n \n             if (replacement != null) {\n                 replacement.setParent(deletedNode.getParent(dataElement), dataElement);\n         Node<K, V> yFormerParent = y.getParent(dataElement);\n         Node<K, V> yFormerLeftChild = y.getLeft(dataElement);\n         Node<K, V> yFormerRightChild = y.getRight(dataElement);\n-        boolean xWasLeftChild = (x.getParent(dataElement) != null) && (x == x.getParent(dataElement).getLeft(dataElement));\n-        boolean yWasLeftChild = (y.getParent(dataElement) != null) && (y == y.getParent(dataElement).getLeft(dataElement));\n+        boolean xWasLeftChild =\n+                (x.getParent(dataElement) != null) && (x == x.getParent(dataElement).getLeft(dataElement));\n+        boolean yWasLeftChild =\n+                (y.getParent(dataElement) != null) && (y == y.getParent(dataElement).getLeft(dataElement));\n \n         // Swap, handling special cases of one being the other's parent.\n         if (x == yFormerParent) { // x was y's parent\n \n         public K getKey() {\n             if (lastReturnedNode == null) {\n-                throw new IllegalStateException(\"Iterator getKey() can only be called after next() and before remove()\");\n+                throw new IllegalStateException(\n+                        \"Iterator getKey() can only be called after next() and before remove()\");\n             }\n             return lastReturnedNode.getKey();\n         }\n \n         public V getValue() {\n             if (lastReturnedNode == null) {\n-                throw new IllegalStateException(\"Iterator getValue() can only be called after next() and before remove()\");\n+                throw new IllegalStateException(\n+                        \"Iterator getValue() can only be called after next() and before remove()\");\n             }\n             return lastReturnedNode.getValue();\n         }\n \n         public V getKey() {\n             if (lastReturnedNode == null) {\n-                throw new IllegalStateException(\"Iterator getKey() can only be called after next() and before remove()\");\n+                throw new IllegalStateException(\n+                        \"Iterator getKey() can only be called after next() and before remove()\");\n             }\n             return lastReturnedNode.getValue();\n         }\n \n         public K getValue() {\n             if (lastReturnedNode == null) {\n-                throw new IllegalStateException(\"Iterator getValue() can only be called after next() and before remove()\");\n+                throw new IllegalStateException(\n+                        \"Iterator getValue() can only be called after next() and before remove()\");\n             }\n             return lastReturnedNode.getKey();\n         }", "timestamp": 1342368825, "metainfo": ""}