{"sha": "dd7f71e66df8f54e312e5a0823d4abee2757c88f", "log": "canonical forms for serialized maps in Collections 2.0   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestHashMap.java,v 1.3 2002/02/22 02:18:50 mas Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/02/22 02:18:50 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestHashMap.java,v 1.4 2002/02/22 22:01:48 morgand Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/02/22 22:01:48 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n- * @version $Id: TestHashMap.java,v 1.3 2002/02/22 02:18:50 mas Exp $\n+ * @version $Id: TestHashMap.java,v 1.4 2002/02/22 22:01:48 morgand Exp $\n  */\n public class TestHashMap extends TestMap\n {\n         assertEquals(\"Top item is 'Second Item'\", map.get(\"first\"), \"First Item\");\n         assertEquals(\"Next Item is 'First Item'\", map.get(\"second\"), \"Second Item\");\n     }\n+\n+\n+    /**\n+     * We don't need to test compatibility for JVM collections.  Override in \n+     * subclasses.\n+     */\n+    public void testEmptyMapCompatibility() {\n+\n+    }\n+\n+    /**\n+     * We don't need to test compatibility for JVM collections.  Override in \n+     * subclasses.\n+     */\n+    public void testFullMapCompatibility() {\n+\n+    }\n }\n--- a/src/test/org/apache/commons/collections/TestMap.java\n+++ b/src/test/org/apache/commons/collections/TestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.9 2002/02/22 06:16:35 morgand Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/02/22 06:16:35 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.10 2002/02/22 22:01:48 morgand Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/02/22 22:01:48 $\n  *\n  * ====================================================================\n  *\n  *\n  * @author Michael Smith\n  * @author Rodney Waldhoff\n- * @version $Id: TestMap.java,v 1.9 2002/02/22 06:16:35 morgand Exp $\n+ * @version $Id: TestMap.java,v 1.10 2002/02/22 22:01:48 morgand Exp $\n  */\n public abstract class TestMap extends TestObject {\n+\n     public TestMap(String testName) {\n         super(testName);\n     }\n-\n     /**\n      *  Override if your map does not allow a <code>null</code> key.  The\n      *  default implementation returns <code>true</code>\n \n         assertEquals(\"Both maps are same size\",map.size(), getSampleKeys().length);\n         assertEquals(\"Both maps are same size\",map2.size(),getSampleKeys().length);\n-    } \n+    }\n+\n+\n+    public String getCanonicalEmptyMapName(Map map) {\n+        StringBuffer retval = new StringBuffer();\n+        retval.append(\"data/test/\");\n+        String mapName = map.getClass().getName();\n+        mapName = mapName.substring(mapName.lastIndexOf(\".\")+1,mapName.length());\n+        retval.append(mapName);\n+        retval.append(\".emptyMap.\");\n+        retval.append(COLLECTIONS_VERSION);\n+        retval.append(\".obj\");\n+        return retval.toString();\n+    }\n+\n+    public String getCanonicalFullMapName(Map map) {\n+        StringBuffer retval = new StringBuffer();\n+        retval.append(\"data/test/\");\n+        String mapName = map.getClass().getName();\n+        mapName = mapName.substring(mapName.lastIndexOf(\".\")+1,mapName.length());\n+        retval.append(mapName);\n+        retval.append(\".fullMap.\");\n+        retval.append(COLLECTIONS_VERSION);\n+        retval.append(\".obj\");\n+        return retval.toString();\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the Map\n+     * against the canonical version in CVS.\n+     */\n+    public void testEmptyMapCompatibility() throws IOException, ClassNotFoundException {\n+        /**\n+         * Create canonical objects with this code\n+        Map map = makeEmptyMap();\n+        if (!(map instanceof Serializable)) return;\n+        \n+        writeExternalFormToDisk((Serializable) map, getCanonicalEmptyMapName(map));\n+        */\n+\n+        // test to make sure the canonical form has been preserved\n+        if (!(makeEmptyMap() instanceof Serializable)) return;\n+        Map map = (Map) readExternalFormFromDisk(getCanonicalEmptyMapName(makeEmptyMap()));\n+        assertTrue(\"Maps is empty\",map.isEmpty()  == true);\n+    }\n+\n+        /**\n+     * Compare the current serialized form of the Map\n+     * against the canonical version in CVS.\n+     */\n+    public void testFullMapCompatibility() throws IOException, ClassNotFoundException {\n+        /**\n+         * Create canonical objects with this code\n+        Map map = makeFullMap();\n+        if (!(map instanceof Serializable)) return;\n+        \n+        writeExternalFormToDisk((Serializable) map, getCanonicalFullMapName(map));\n+        */\n+\n+        // test to make sure the canonical form has been preserved\n+        if (!(makeFullMap() instanceof Serializable)) return;\n+        Map map = (Map) readExternalFormFromDisk(getCanonicalFullMapName(makeFullMap()));\n+        assertEquals(\"Both maps are same size\",map.size(), getSampleKeys().length);\n+    }\n \n     /*\n         // optional operation", "timestamp": 1014415308, "metainfo": ""}