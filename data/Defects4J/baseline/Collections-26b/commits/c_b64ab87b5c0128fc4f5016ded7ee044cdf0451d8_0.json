{"sha": "b64ab87b5c0128fc4f5016ded7ee044cdf0451d8", "log": "Javadoc changes for v3.2  ", "commit": "\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n /*\n- *  Copyright 2001-2005 The Apache Software Foundation\n+ *  Copyright 2001-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  </li>\n  *  <li>\n  *   If a <i>key</i> is used more than once, the values are appended\n- *   like if they were on the same line separated with commas.\n+ *   as if they were on the same line separated with commas.\n  *  </li>\n  *  <li>\n  *   Blank lines and lines starting with character '#' are skipped.\n--- a/src/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n  * behaviour to another buffer. If you just want a bounded buffer then\n  * you should use {@link BoundedFifoBuffer} or {@link CircularFifoBuffer}.\n  * <p>\n- * The decoration methods allow you to specify a timeout value, which\n- * causes the add methods to wait for up to the specified wait period.\n+ * The decoration methods allow you to specify a timeout value.\n+ * This alters the behaviour of the add methods when the buffer is full.\n+ * Normally, when the buffer is full, the add method will throw an exception.\n+ * With a timeout, the add methods will wait for up to the timeout period\n+ * to try and add the elements.\n  *\n  * @author James Carman\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n /*\n- *  Copyright 2002-2004 The Apache Software Foundation\n+ *  Copyright 2002-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n /**\n  * The BoundedFifoBuffer is a very efficient implementation of\n- * Buffer that does not alter the size of the buffer at runtime.\n+ * <code>Buffer</code> that is of a fixed size.\n  * <p>\n  * The removal order of a <code>BoundedFifoBuffer</code> is based on the \n  * insertion order; elements are removed in the same order in which they\n--- a/src/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n  * {@link org.apache.commons.collections.BufferUtils#synchronizedBuffer(Buffer)} or\n  * {@link org.apache.commons.collections.buffer.SynchronizedBuffer#decorate(Buffer)}\n  * to provide synchronized access to a <code>PriorityBuffer</code>:\n- *\n  * <pre>\n  * Buffer heap = SynchronizedBuffer.decorate(new PriorityBuffer());\n  * </pre>\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.2.\n  *\n  * @since Commons Collections 3.0 (previously BinaryHeap v1.0)\n  * @version $Revision$ $Date$\n--- a/src/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n /*\n- *  Copyright 2002-2004 The Apache Software Foundation\n+ *  Copyright 2002-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import org.apache.commons.collections.BufferUnderflowException;\n \n /**\n- * UnboundedFifoBuffer is a very efficient buffer implementation.\n+ * UnboundedFifoBuffer is a very efficient implementation of\n+ * <code>Buffer</code> that can grow to any size.\n  * According to performance testing, it exhibits a constant access time, but it\n  * also outperforms ArrayList when used for the same purpose.\n  * <p>\n--- a/src/java/org/apache/commons/collections/functors/AllPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AllPredicate.java\n     \n     /**\n      * Factory to create the predicate.\n-     * \n+     * <p>\n+     * If the array is size zero, the predicate always returns true.\n+     * If the array is size one, then that predicate is returned.\n+     *\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n \n     /**\n      * Factory to create the predicate.\n-     * \n+     * <p>\n+     * If the collection is size zero, the predicate always returns true.\n+     * If the collection is size one, then that predicate is returned.\n+     *\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n--- a/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n     \n     /**\n      * Factory to create the predicate.\n-     * \n+     * <p>\n+     * If the array is size zero, the predicate always returns false.\n+     * If the array is size one, then that predicate is returned.\n+     *\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n \n     /**\n      * Factory to create the predicate.\n-     * \n+     * <p>\n+     * If the collection is size zero, the predicate always returns false.\n+     * If the collection is size one, then that predicate is returned.\n+     *\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n--- a/src/java/org/apache/commons/collections/functors/NonePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NonePredicate.java\n     \n     /**\n      * Factory to create the predicate.\n-     * \n+     * <p>\n+     * If the array is size zero, the predicate always returns true.\n+     *\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n \n     /**\n      * Factory to create the predicate.\n-     * \n+     * <p>\n+     * If the collection is size zero, the predicate always returns true.\n+     *\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n--- a/src/java/org/apache/commons/collections/functors/OnePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/OnePredicate.java\n     \n     /**\n      * Factory to create the predicate.\n-     * \n+     * <p>\n+     * If the array is size zero, the predicate always returns false.\n+     * If the array is size one, then that predicate is returned.\n+     *\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n \n     /**\n      * Factory to create the predicate.\n-     * \n+     *\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n--- a/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import org.apache.commons.collections.Transformer;\n \n /**\n- * Transformer implementation that returns the <code>String.valueOf</code>.\n- * \n+ * Transformer implementation that returns the result of calling\n+ * <code>String.valueOf</code> on the input object.\n+ *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n--- a/src/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java\n /*\n- *  Copyright 2003-2004 The Apache Software Foundation\n+ *  Copyright 2003-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import org.apache.commons.collections.KeyValue;\n \n /**\n- * Abstract pair class to assist with creating KeyValue and MapEntry implementations.\n+ * Abstract pair class to assist with creating <code>KeyValue</code>\n+ * and {@link java.util.Map.Entry Map.Entry} implementations.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  * @author Stephen Colebourne\n  */\n public abstract class AbstractKeyValue implements KeyValue {\n-    \n+\n     /** The key */\n     protected Object key;\n     /** The value */\n     protected Object value;\n-    \n+\n     /**\n      * Constructs a new pair with the specified key and given value.\n      *\n--- a/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n /*\n- *  Copyright 2003-2004 The Apache Software Foundation\n+ *  Copyright 2003-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.util.Map;\n \n /**\n- * Abstract Pair class to assist with creating correct Map Entry implementations.\n+ * Abstract Pair class to assist with creating correct\n+ * {@link java.util.Map.Entry Map.Entry} implementations.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  * @author Stephen Colebourne\n  */\n public abstract class AbstractMapEntry extends AbstractKeyValue implements Map.Entry {\n-    \n+\n     /**\n      * Constructs a new entry with the given key and given value.\n      *\n     // Map.Entry interface\n     //-------------------------------------------------------------------------\n     /** \n-     * Sets the value stored in this Map Entry.\n+     * Sets the value stored in this <code>Map.Entry</code>.\n      * <p>\n-     * This Map Entry is not connected to a Map, so only the local data is changed.\n+     * This <code>Map.Entry</code> is not connected to a Map, so only the\n+     * local data is changed.\n      *\n      * @param value  the new value\n      * @return the previous value\n     }\n \n     /**\n-     * Compares this Map Entry with another Map Entry.\n+     * Compares this <code>Map.Entry</code> with another <code>Map.Entry</code>.\n      * <p>\n      * Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}\n      * \n             (getKey() == null ? other.getKey() == null : getKey().equals(other.getKey())) &&\n             (getValue() == null ? other.getValue() == null : getValue().equals(other.getValue()));\n     }\n-     \n+\n     /**\n      * Gets a hashCode compatible with the equals method.\n      * <p>\n--- a/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n /*\n- *  Copyright 2003-2004 The Apache Software Foundation\n+ *  Copyright 2003-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import org.apache.commons.collections.KeyValue;\n \n /**\n- * Provides a base decorator that allows additional functionality to be added\n- * to a Map Entry.\n+ * Provides a base decorator that allows additional functionality to be\n+ * added to a {@link java.util.Map.Entry Map.Entry}.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n--- a/src/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n /*\n- *  Copyright 2003-2004 The Apache Software Foundation\n+ *  Copyright 2003-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import org.apache.commons.collections.KeyValue;\n \n /**\n- * A mutable KeyValue pair that does not implement MapEntry.\n+ * A mutable <code>KeyValue</code> pair that does not implement\n+ * {@link java.util.Map.Entry Map.Entry}.\n  * <p>\n  * Note that a <code>DefaultKeyValue</code> instance may not contain\n  * itself as a key or value.\n     }\n \n     /**\n-     * Constructs a new pair from the specified KeyValue.\n+     * Constructs a new pair from the specified <code>KeyValue</code>.\n      *\n      * @param pair  the pair to copy, must not be null\n      * @throws NullPointerException if the entry is null\n     }\n \n     /**\n-     * Constructs a new pair from the specified MapEntry.\n+     * Constructs a new pair from the specified <code>Map.Entry</code>.\n      *\n      * @param entry  the entry to copy, must not be null\n      * @throws NullPointerException if the entry is null\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Compares this Map Entry with another Map Entry.\n+     * Compares this <code>Map.Entry</code> with another <code>Map.Entry</code>.\n      * <p>\n      * Returns true if the compared object is also a <code>DefaultKeyValue</code>,\n      * and its key and value are equal to this object's key and value.\n--- a/src/java/org/apache/commons/collections/keyvalue/DefaultMapEntry.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/DefaultMapEntry.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n /**\n  * A restricted implementation of {@link java.util.Map.Entry} that prevents\n- * the MapEntry contract from being broken.\n+ * the <code>Map.Entry</code> contract from being broken.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  * @author Stephen Colebourne\n  */\n public final class DefaultMapEntry extends AbstractMapEntry {\n-    \n+\n     /**\n      * Constructs a new entry with the specified key and given value.\n      *\n     }\n \n     /**\n-     * Constructs a new entry from the specified KeyValue.\n+     * Constructs a new entry from the specified <code>KeyValue</code>.\n      *\n      * @param pair  the pair to copy, must not be null\n      * @throws NullPointerException if the entry is null\n     }\n \n     /**\n-     * Constructs a new entry from the specified MapEntry.\n+     * Constructs a new entry from the specified <code>Map.Entry</code>.\n      *\n      * @param entry  the entry to copy, must not be null\n      * @throws NullPointerException if the entry is null\n--- a/src/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java\n /*\n- *  Copyright 2003-2004 The Apache Software Foundation\n+ *  Copyright 2003-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import org.apache.commons.collections.KeyValue;\n \n /**\n- * A Map Entry tied to a map underneath.\n+ * A {@link java.util.Map.Entry Map.Entry} tied to a map underneath.\n  * <p>\n  * This can be used to enable a map entry to make changes on the underlying\n  * map, however this will probably mess up any iterators.\n     private final Map map;\n     /** The key */\n     private final Object key;\n-    \n+\n     /**\n      * Constructs a new entry with the given Map and key.\n      *\n     }\n \n     /**\n-     * Compares this Map Entry with another Map Entry.\n+     * Compares this <code>Map.Entry</code> with another <code>Map.Entry</code>.\n      * <p>\n      * Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}\n      * \n             (key == null ? other.getKey() == null : key.equals(other.getKey())) &&\n             (value == null ? other.getValue() == null : value.equals(other.getValue()));\n     }\n-     \n+\n     /**\n      * Gets a hashCode compatible with the equals method.\n      * <p>\n         return (getKey() == null ? 0 : getKey().hashCode()) ^\n                (value == null ? 0 : value.hashCode()); \n     }\n-    \n+\n     /**\n      * Gets a string version of the entry.\n      * \n--- a/src/java/org/apache/commons/collections/keyvalue/UnmodifiableMapEntry.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/UnmodifiableMapEntry.java\n /*\n- *  Copyright 2003-2004 The Apache Software Foundation\n+ *  Copyright 2003-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import org.apache.commons.collections.Unmodifiable;\n \n /**\n- * A {@link java.util.Map.Entry} that throws UnsupportedOperationException\n- * when <code>setValue</code> is called.\n+ * A {@link java.util.Map.Entry Map.Entry} that throws\n+ * UnsupportedOperationException when <code>setValue</code> is called.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  * @author Stephen Colebourne\n  */\n public final class UnmodifiableMapEntry extends AbstractMapEntry implements Unmodifiable {\n-    \n+\n     /**\n      * Constructs a new entry with the specified key and given value.\n      *\n     }\n \n     /**\n-     * Constructs a new entry from the specified KeyValue.\n+     * Constructs a new entry from the specified <code>KeyValue</code>.\n      *\n      * @param pair  the pair to copy, must not be null\n      * @throws NullPointerException if the entry is null\n     }\n \n     /**\n-     * Constructs a new entry from the specified MapEntry.\n+     * Constructs a new entry from the specified <code>Map.Entry</code>.\n      *\n      * @param entry  the entry to copy, must not be null\n      * @throws NullPointerException if the entry is null\n     public UnmodifiableMapEntry(final Map.Entry entry) {\n         super(entry.getKey(), entry.getValue());\n     }\n-    \n+\n     /**\n      * Throws UnsupportedOperationException.\n      * \n--- a/src/java/org/apache/commons/collections/list/GrowthList.java\n+++ b/src/java/org/apache/commons/collections/list/GrowthList.java\n /*\n- *  Copyright 2005 The Apache Software Foundation\n+ *  Copyright 2005-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.util.List;\n \n /**\n- * Decorates another <code>List</code> to make it seemlessly grow when\n+ * Decorates another <code>List</code> to make it seamlessly grow when\n  * indices larger than the list size are used on add and set,\n  * avoiding most IndexOutOfBoundsExceptions.\n  * <p>\n  * not to use excessively large indices, as the internal list will grow to\n  * match.\n  * <p>\n- * Trying to use any method other than add or set with an invalid inde will\n+ * Trying to use any method other than add or set with an invalid index will\n  * call the underlying list and probably result in an IndexOutOfBoundsException.\n  * <p>\n  * Take care when using this list with <code>null</code> values, as\n  * <p>\n  * This class differs from {@link LazyList} because here growth occurs on\n  * set and add, where <code>LazyList</code> grows on get. However, they\n- * could easily be used together by decorating twice.\n+ * can be used together by decorating twice.\n  *\n  * @see LazyList\n  * @since Commons Collections 3.2\n  * @version $Revision: 155406 $ $Date$\n- * \n+ *\n  * @author Stephen Colebourne\n  * @author Paul Legato\n  */", "timestamp": 1147474623, "metainfo": ""}