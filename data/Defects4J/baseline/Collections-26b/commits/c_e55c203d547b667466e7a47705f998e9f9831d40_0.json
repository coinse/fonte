{"sha": "e55c203d547b667466e7a47705f998e9f9831d40", "log": "Javadoc and code tidy   ", "commit": "\n--- a/src/java/org/apache/commons/collections/comparators/BooleanComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/BooleanComparator.java\n \n /**\n  * A {@link Comparator} for {@link Boolean} objects.\n- * \n- * @see #getTrueFirstComparator\n- * @see #getFalseFirstComparator\n- * @see #getBooleanComparator\n+ * <p>\n+ * @see #getTrueFirstComparator()\n+ * @see #getFalseFirstComparator()\n+ * @see #getBooleanComparator(boolean)\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.12 $ $Date: 2004/04/27 22:57:00 $\n+ * @version $Revision: 1.13 $ $Date: 2004/05/15 13:24:11 $\n  * \n  * @author Rodney Waldhoff\n  */\n public final class BooleanComparator implements Comparator, Serializable {\n-\n-    /**\n-     * Creates a <code>BooleanComparator</code> that sorts\n-     * <code>false</code> values before <code>true</code> values.\n-     * <p>\n-     * Equivalent to {@link #BooleanComparator(boolean) BooleanComparator(false)}.\n-     * <p>\n-     * Please use the static factory instead whenever possible.\n-     */\n-    public BooleanComparator() {\n-        this(false);\n-    }\n-\n-    /**\n-     * Creates a <code>BooleanComparator</code> that sorts\n-     * <code><i>trueFirst</i></code> values before \n-     * <code>&#x21;<i>trueFirst</i></code> values.\n-     * <p>\n-     * Please use the static factories instead whenever possible.\n-     * \n-     * @param trueFirst when <code>true</code>, sort \n-     *  <code>true</code> boolean values before <code>false</code>\n-     */\n-    public BooleanComparator(boolean trueFirst) {\n-        this.trueFirst = trueFirst;\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Compares two arbitrary Objects.\n-     * When both arguments are <code>Boolean</code>, this method is equivalent to \n-     * {@link #compare(Boolean,Boolean) compare((Boolean)<i>o1</i>,(Boolean)<i>o2</i>)}.\n-     * When either argument is not a <code>Boolean</code>, this methods throws\n-     * a {@link ClassCastException}.\n-     * \n-     * @throws ClassCastException when either argument is not <code>Boolean</code>\n-     */\n-    public int compare(Object o1, Object o2) {\n-        return compare((Boolean)o1,(Boolean)o2);\n-    }\n     \n-    /**\n-     * Compares two non-<code>null</code> <code>Boolean</code> objects\n-     * according to the value of {@link #sortsTrueFirst}.\n-     * \n-     * @throws NullPointerException when either argument <code>null</code>\n-     */\n-    public int compare(Boolean b1, Boolean b2) {\n-        boolean v1 = b1.booleanValue();\n-        boolean v2 = b2.booleanValue();\n-\n-        return (v1 ^ v2) ? ( (v1 ^ trueFirst) ? 1 : -1 ) : 0;\n-    }\n-\n-    /**\n-     * Implement a hash code for this comparator that is consistent with\n-     * {@link #equals equals}.\n-     *\n-     * @return a hash code for this comparator.\n-     */\n-    public int hashCode() {\n-        int hash = \"BooleanComparator\".hashCode();\n-        return trueFirst ? -1 * hash : hash;\n-    }\n-\n-    /**\n-     * Returns <code>true</code> iff <i>that</i> Object is \n-     * is a {@link Comparator} whose ordering is known to be \n-     * equivalent to mine.\n-     * <p>\n-     * This implementation returns <code>true</code>\n-     * iff <code><i>that</i></code> is a {@link BooleanComparator} \n-     * whose {@link #sortsTrueFirst} value is equal to mine.\n-     */\n-    public boolean equals(Object that) {\n-        return (this == that) || \n-               ((that instanceof BooleanComparator) && \n-                (this.trueFirst == ((BooleanComparator)that).trueFirst));\n-    }\n-\n-    /**\n-     * Returns <code>true</code> iff\n-     * I sort <code>true</code> values before \n-     * <code>false</code> values.  In other words,\n-     * returns <code>true</code> iff\n-     * {@link #compare(Boolean,Boolean) compare(Boolean.FALSE,Boolean.TRUE)}\n-     * returns a positive value.\n-     */\n-    public boolean sortsTrueFirst() {\n-        return trueFirst;\n-    }\n-    \n+    // TODO: Serialization version\n+\n+    /** Constant \"true first\" reference. */\n+    private static final BooleanComparator TRUE_FIRST = new BooleanComparator(true);\n+\n+    /** Constant \"false first\" reference. */\n+    private static final BooleanComparator FALSE_FIRST = new BooleanComparator(false);\n+\n+    /** <code>true</code> iff <code>true</code> values sort before <code>false</code> values. */\n+    private boolean trueFirst = false;\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Returns a BooleanComparator instance that sorts \n      * to reduce allocation and garbage collection overhead when\n      * multiple BooleanComparators may be used in the same \n      * virtual machine.\n+     * \n+     * @return the true first singleton BooleanComparator\n      */\n     public static BooleanComparator getTrueFirstComparator() {\n         return TRUE_FIRST;\n      * to reduce allocation and garbage collection overhead when\n      * multiple BooleanComparators may be used in the same \n      * virtual machine.\n+     * \n+     * @return the false first singleton BooleanComparator\n      */\n     public static BooleanComparator getFalseFirstComparator() {\n         return FALSE_FIRST;\n      * \n      * @param trueFirst when <code>true</code>, sort \n      * <code>true</code> <code>Boolean</code>s before <code>false</code>\n-     * @return a cached BooleanComparator instance\n+     * @return a singleton BooleanComparator instance\n      */\n     public static BooleanComparator getBooleanComparator(boolean trueFirst) {\n         return trueFirst ? TRUE_FIRST : FALSE_FIRST;\n     }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Creates a <code>BooleanComparator</code> that sorts\n+     * <code>false</code> values before <code>true</code> values.\n+     * <p>\n+     * Equivalent to {@link #BooleanComparator(boolean) BooleanComparator(false)}.\n+     * <p>\n+     * Please use the static factory instead whenever possible.\n+     */\n+    public BooleanComparator() {\n+        this(false);\n+    }\n+\n+    /**\n+     * Creates a <code>BooleanComparator</code> that sorts\n+     * <code><i>trueFirst</i></code> values before \n+     * <code>&#x21;<i>trueFirst</i></code> values.\n+     * <p>\n+     * Please use the static factories instead whenever possible.\n+     * \n+     * @param trueFirst when <code>true</code>, sort \n+     *  <code>true</code> boolean values before <code>false</code>\n+     */\n+    public BooleanComparator(boolean trueFirst) {\n+        this.trueFirst = trueFirst;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compares two arbitrary Objects.\n+     * When both arguments are <code>Boolean</code>, this method is equivalent to \n+     * {@link #compare(Boolean,Boolean) compare((Boolean)<i>obj1</i>,(Boolean)<i>obj2</i>)}.\n+     * When either argument is not a <code>Boolean</code>, this methods throws\n+     * a {@link ClassCastException}.\n+     * \n+     * @param obj1  the first object to compare\n+     * @param obj2  the second object to compare\n+     * @return negative if obj1 is less, positive if greater, zero if equal\n+     * @throws ClassCastException when either argument is not <code>Boolean</code>\n+     */\n+    public int compare(Object obj1, Object obj2) {\n+        return compare((Boolean)obj1, (Boolean)obj2);\n+    }\n     \n-    /** <code>true</code> iff <code>true</code> values sort before <code>false</code> values. */\n-    private boolean trueFirst = false;\n-\n-    /** My static \"true first\" reference. */\n-    private static final BooleanComparator TRUE_FIRST = new BooleanComparator(true);\n-\n-    /** My static \"false first\" reference. */\n-    private static final BooleanComparator FALSE_FIRST = new BooleanComparator(false);\n+    /**\n+     * Compares two non-<code>null</code> <code>Boolean</code> objects\n+     * according to the value of {@link #trueFirst}.\n+     * \n+     * @param b1  the first boolean to compare\n+     * @param b2  the second boolean to compare\n+     * @return negative if obj1 is less, positive if greater, zero if equal\n+     * @throws NullPointerException when either argument <code>null</code>\n+     */\n+    public int compare(Boolean b1, Boolean b2) {\n+        boolean v1 = b1.booleanValue();\n+        boolean v2 = b2.booleanValue();\n+\n+        return (v1 ^ v2) ? ( (v1 ^ trueFirst) ? 1 : -1 ) : 0;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implement a hash code for this comparator that is consistent with\n+     * {@link #equals(Object) equals}.\n+     *\n+     * @return a hash code for this comparator.\n+     */\n+    public int hashCode() {\n+        int hash = \"BooleanComparator\".hashCode();\n+        return trueFirst ? -1 * hash : hash;\n+    }\n+\n+    /**\n+     * Returns <code>true</code> iff <i>that</i> Object is \n+     * is a {@link Comparator} whose ordering is known to be \n+     * equivalent to mine.\n+     * <p>\n+     * This implementation returns <code>true</code>\n+     * iff <code><i>that</i></code> is a {@link BooleanComparator} \n+     * whose {@link #trueFirst} value is equal to mine.\n+     * \n+     * @param object  the object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object object) {\n+        return (this == object) || \n+               ((object instanceof BooleanComparator) && \n+                (this.trueFirst == ((BooleanComparator)object).trueFirst));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns <code>true</code> iff\n+     * I sort <code>true</code> values before \n+     * <code>false</code> values.  In other words,\n+     * returns <code>true</code> iff\n+     * {@link #compare(Boolean,Boolean) compare(Boolean.FALSE,Boolean.TRUE)}\n+     * returns a positive value.\n+     * \n+     * @return the trueFirst flag\n+     */\n+    public boolean sortsTrueFirst() {\n+        return trueFirst;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n  * <p />\n  * Note: In the 2.0 and 2.1 releases of Commons Collections, \n  * this class would throw a {@link ClassCastException} if\n- * either of the arguments to {@link #compare compare}\n+ * either of the arguments to {@link #compare(Object, Object) compare}\n  * were <code>null</code>, not {@link Comparable Comparable},\n- * or for which {@link Comparable#compareTo compareTo} gave\n+ * or for which {@link Comparable#compareTo(Object) compareTo} gave\n  * inconsistent results.  This is no longer the case.  See\n- * {@link #compare} for details.\n+ * {@link #compare(Object, Object) compare} for details.\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.14 $ $Date: 2004/02/18 00:59:06 $\n+ * @version $Revision: 1.15 $ $Date: 2004/05/15 13:24:11 $\n  *\n  * @author Henri Yandell\n  *\n- * @see java.util.Collections#reverseOrder\n+ * @see java.util.Collections#reverseOrder()\n  */\n public class ComparableComparator implements Comparator, Serializable {\n \n+    /** Serialization version. */\n+    private static final long serialVersionUID=-291439688585137865L;\n+\n+    /** The singleton instance. */\n+    private static final ComparableComparator instance = new ComparableComparator();\n+\n+    //-----------------------------------------------------------------------\n     /**\n-     *  Return a shared instance of a ComparableComparator.  Developers are\n-     *  encouraged to use the comparator returned from this method instead of\n-     *  constructing a new instance to reduce allocation and GC overhead when\n-     *  multiple comparable comparators may be used in the same VM.\n-     **/\n+     * Gets the singleton instance of a ComparableComparator.\n+     * <p>\n+     * Developers are encouraged to use the comparator returned from this method\n+     * instead of constructing a new instance to reduce allocation and GC overhead\n+     * when multiple comparable comparators may be used in the same VM.\n+     * \n+     * @return the singleton ComparableComparator\n+     */\n     public static ComparableComparator getInstance() {\n         return instance;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor whose use should be avoided.\n+     * <p>\n+     * Please use the {@link #getInstance()} method whenever possible.\n+     */\n     public ComparableComparator() {\n+        super();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Compare the two {@link Comparable Comparable} arguments.\n      * This method is equivalent to:\n-     * <pre>(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)</pre>\n-     * @throws NullPointerException when <i>o1</i> is <code>null</code>, \n-     *         or when <code>((Comparable)o1).compareTo(o2)</code> does\n-     * @throws ClassCastException when <i>o1</i> is not a {@link Comparable Comparable}, \n-     *         or when <code>((Comparable)o1).compareTo(o2)</code> does\n+     * <pre>((Comparable)obj1).compareTo(obj2)</pre>\n+     * \n+     * @param obj1  the first object to compare\n+     * @param obj2  the second object to compare\n+     * @return negative if obj1 is less, positive if greater, zero if equal\n+     * @throws NullPointerException when <i>obj1</i> is <code>null</code>, \n+     *         or when <code>((Comparable)obj1).compareTo(obj2)</code> does\n+     * @throws ClassCastException when <i>obj1</i> is not a <code>Comparable</code>,\n+     *         or when <code>((Comparable)obj1).compareTo(obj2)</code> does\n      */\n-    public int compare(Object o1, Object o2) {\n-        return ((Comparable)o1).compareTo(o2);\n+    public int compare(Object obj1, Object obj2) {\n+        return ((Comparable)obj1).compareTo(obj2);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Implement a hash code for this comparator that is consistent with\n-     * {@link #equals}.\n+     * {@link #equals(Object) equals}.\n      *\n      * @return a hash code for this comparator.\n      * @since Commons Collections 3.0\n      * known to be equivalent to mine.\n      * <p>\n      * This implementation returns <code>true</code>\n-     * iff <code><i>that</i>.{@link Object#getClass getClass()}</code>\n-     * equals <code>this.getClass()</code>.  Subclasses may want to override\n-     * this behavior to remain consistent with the {@link Comparator#equals}\n-     * contract.\n+     * iff <code><i>object</i>.{@link Object#getClass() getClass()}</code>\n+     * equals <code>this.getClass()</code>.\n+     * Subclasses may want to override this behavior to remain consistent\n+     * with the {@link Comparator#equals(Object)} contract.\n+     * \n+     * @param object  the object to compare with\n+     * @return true if equal\n      * @since Commons Collections 3.0\n      */\n-    public boolean equals(Object that) {\n-        return (this == that) || \n-               ((null != that) && (that.getClass().equals(this.getClass())));\n+    public boolean equals(Object object) {\n+        return (this == object) || \n+               ((null != object) && (object.getClass().equals(this.getClass())));\n     }\n \n-    private static final ComparableComparator instance = \n-        new ComparableComparator();\n-\n-    private static final long serialVersionUID=-291439688585137865L;\n-\n }\n--- a/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n  * \n  * @since Commons Collections 2.0\n  * @author Morgan Delagrange\n- * @version $Revision: 1.16 $ $Date: 2004/02/18 00:59:06 $\n+ * @version $Revision: 1.17 $ $Date: 2004/05/15 13:24:11 $\n  */\n public class ComparatorChain implements Comparator,Serializable {\n \n+    /** Serialization version from Collections 2.0. */\n+    private static final long serialVersionUID = -721644942746081630L;\n+    \n+    /** The list of comparators in the chain. */\n     protected List comparatorChain = null;\n-    // false (clear) = ascend; true (set) = descend\n+    /** Order - false (clear) = ascend; true (set) = descend. */\n     protected BitSet orderingBits = null;\n-\n-    // ComparatorChain is \"locked\" after the first time\n-    // compare(Object,Object) is called\n+   /** Whether the chain has been \"locked\". */\n     protected boolean isLocked = false;\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Construct a ComparatorChain with no Comparators.\n      * You must add at least one Comparator before calling\n         orderingBits = bits;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Add a Comparator to the end of the chain using the\n      * forward sort order\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Perform comparisons on the Objects as per\n      * Comparator.compare(o1,o2).\n      * \n-     * @param o1     object 1\n-     * @param o2     object 2\n+     * @param o1  the first object to compare\n+     * @param o2  the second object to compare\n      * @return -1, 0, or 1\n      * @exception UnsupportedOperationException\n      *                   if the ComparatorChain does not contain at least one\n         return 0;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Implement a hash code for this comparator that is consistent with\n-     * {@link #equals}.\n-     * \n+     * {@link #equals(Object) equals}.\n+     * \n+     * @return a suitable hash code\n      * @since Commons Collections 3.0\n      */\n     public int hashCode() {\n      * equivalent to mine.\n      * <p>\n      * This implementation returns <code>true</code>\n-     * iff <code><i>that</i>.{@link Object#getClass getClass()}</code>\n+     * iff <code><i>object</i>.{@link Object#getClass() getClass()}</code>\n      * equals <code>this.getClass()</code>, and the underlying \n-     * comparators and order bits are equal.  Subclasses may want \n-     * to override this behavior to remain consistent with the \n-     * {@link Comparator#equals} contract.\n-     * \n+     * comparators and order bits are equal.\n+     * Subclasses may want to override this behavior to remain consistent\n+     * with the {@link Comparator#equals(Object)} contract.\n+     * \n+     * @param object  the object to compare with\n+     * @return true if equal\n      * @since Commons Collections 3.0\n      */\n-    public boolean equals(Object that) {\n-        if(this == that) {\n+    public boolean equals(Object object) {\n+        if(this == object) {\n             return true;\n-        } else if(null == that) {\n+        } else if(null == object) {\n             return false;\n-        } else if(that.getClass().equals(this.getClass())) {\n-            ComparatorChain chain = (ComparatorChain)that;\n+        } else if(object.getClass().equals(this.getClass())) {\n+            ComparatorChain chain = (ComparatorChain)object;\n             return ( (null == orderingBits ? null == chain.orderingBits : orderingBits.equals(chain.orderingBits))\n                    && (null == comparatorChain ? null == chain.comparatorChain : comparatorChain.equals(chain.comparatorChain)) );\n         } else {\n         }\n     }\n \n-    // use serialVersionUID from Collections 2.0 for interoperability\n-    private static final long serialVersionUID = -721644942746081630L;\n }\n--- a/src/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n /** \n  * A Comparator which imposes a specific order on a specific set of Objects.\n  * Objects are presented to the FixedOrderComparator in a specified order and\n- * subsequent calls to {@link #compare} yield that order.\n+ * subsequent calls to {@link #compare(Object, Object) compare} yield that order.\n  * For example:\n  * <pre>\n  * String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"};\n  * Arrays.sort(planets, distanceFromSun);    // Back to original order\n  * </pre>\n  * <p>\n- * Once {@link #compare} has been called, the FixedOrderComparator is locked and\n- * attempts to modify it yield an UnsupportedOperationException.\n+ * Once <code>compare</code> has been called, the FixedOrderComparator is locked\n+ * and attempts to modify it yield an UnsupportedOperationException.\n  * <p>\n  * Instances of FixedOrderComparator are not synchronized.  The class is not\n  * thread-safe at construction time, but it is thread-safe to perform\n  * multiple comparisons  after all the setup operations are complete.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.9 $ $Date: 2004/02/18 00:59:06 $\n+ * @version $Revision: 1.10 $ $Date: 2004/05/15 13:24:11 $\n  *\n  * @author David Leppik\n  * @author Stephen Colebourne\n \n     /** \n      * Gets the behavior for comparing unknown objects.\n+     * \n+     * @return the flag for unknown behaviour - UNKNOWN_AFTER,\n+     * UNKNOWN_BEFORE or UNKNOWN_THROW_EXCEPTION\n      */\n     public int getUnknownObjectBehavior() {\n         return unknownObjectBehavior;\n     /** \n      * Sets the behavior for comparing unknown objects.\n      * \n+     * @param unknownObjectBehavior  the flag for unknown behaviour -\n+     * UNKNOWN_AFTER, UNKNOWN_BEFORE or UNKNOWN_THROW_EXCEPTION\n      * @throws UnsupportedOperationException if a comparison has been performed\n      * @throws IllegalArgumentException if the unknown flag is not valid\n      */\n      * \n      * @param obj1  the first object to compare\n      * @param obj2  the second object to compare\n-     * @throws IllegalArgumentException if o1 or o2 are not known \n+     * @return negative if obj1 is less, positive if greater, zero if equal\n+     * @throws IllegalArgumentException if obj1 or obj2 are not known \n      *  to this Comparator and an alternative behavior has not been set\n      *  via {@link #setUnknownObjectBehavior(int)}.\n      */\n--- a/src/java/org/apache/commons/collections/comparators/NullComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/NullComparator.java\n  * other objects.\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.12 $ $Date: 2004/02/18 00:59:06 $ \n+ * @version $Revision: 1.13 $ $Date: 2004/05/15 13:24:11 $ \n  *\n  * @author Michael A. Smith\n  */\n public class NullComparator implements Comparator, Serializable {\n+\n+    /** Serialization version. */\n+    private static final long serialVersionUID = -5820772575483504339L;\n \n     /**\n      *  The comparator to use when comparing two non-<code>null</code> objects.\n      **/\n     private boolean nullsAreHigh;\n \n-    /** \n+    //-----------------------------------------------------------------------\n+    /**\n      *  Construct an instance that sorts <code>null</code> higher than any\n      *  non-<code>null</code> object it is compared with. When comparing two\n      *  non-<code>null</code> objects, the {@link ComparableComparator} is\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      *  Perform a comparison between two objects.  If both objects are\n      *  <code>null</code>, a <code>0</code> value is returned.  If one object\n      *  underlying comparator specified in the constructor (or the default) is\n      *  used to compare the non-<code>null</code> objects.\n      *\n-     *  @param o1 the first object to compare\n-     *\n-     *  @param o2 the object to compare it to.\n-     *\n+     *  @param o1  the first object to compare\n+     *  @param o2  the object to compare it to.\n      *  @return <code>-1</code> if <code>o1</code> is \"lower\" than (less than,\n      *  before, etc.) <code>o2</code>; <code>1</code> if <code>o1</code> is\n      *  \"higher\" than (greater than, after, etc.) <code>o2</code>; or\n         return this.nonNullComparator.compare(o1, o2);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      *  Implement a hash code for this comparator that is consistent with\n      *  {@link #equals(Object)}.\n                 (this.nonNullComparator.equals(other.nonNullComparator)));\n     }\n \n-    private static final long serialVersionUID = -5820772575483504339L;\n }\n--- a/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n import java.util.Comparator;\n \n /**\n- * Reverses the order of another comparator by \n- * reversing the arguments to its {@link #compare compare} \n- * method.\n+ * Reverses the order of another comparator by reversing the arguments\n+ * to its {@link #compare(Object, Object) compare} method.\n  * \n  * @since Commons Collections 2.0\n- * @version $Revision: 1.18 $ $Date: 2004/02/18 00:59:06 $\n+ * @version $Revision: 1.19 $ $Date: 2004/05/15 13:24:11 $\n  *\n  * @author Henri Yandell\n  * @author Michael A. Smith\n  * \n- * @see java.util.Collections#reverseOrder\n+ * @see java.util.Collections#reverseOrder()\n  */\n public class ReverseComparator implements Comparator,Serializable {\n \n+    /** Serialization version from Collections 2.0. */\n+    private static final long serialVersionUID = 2858887242028539265L;\n+\n+    /** The comparator being decorated. */\n+    private Comparator comparator;\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Creates a comparator that compares objects based on the inverse of their\n      * natural ordering.  Using this Constructor will create a ReverseComparator\n      * that is functionally identical to the Comparator returned by\n      * java.util.Collections.<b>reverseOrder()</b>.\n      * \n-     * @see java.util.Collections#reverseOrder\n+     * @see java.util.Collections#reverseOrder()\n      */\n     public ReverseComparator() {\n         this(null);\n      * of the given comparator.  If you pass in <code>null</code>,\n      * the ReverseComparator defaults to reversing the\n      * natural order, as per \n-     * {@link java.util.Collections#reverseOrder}</b>.\n+     * {@link java.util.Collections#reverseOrder()}</b>.\n      * \n      * @param comparator Comparator to reverse\n      */\n         }\n     }\n \n-    public int compare(Object o1, Object o2) {\n-        return comparator.compare(o2, o1);\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compares two objects in reverse order.\n+     * \n+     * @param obj1  the first object to compare\n+     * @param obj2  the second object to compare\n+     * @return negative if obj1 is less, positive if greater, zero if equal\n+     */\n+    public int compare(Object obj1, Object obj2) {\n+        return comparator.compare(obj2, obj1);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Implement a hash code for this comparator that is consistent with\n-     * {@link #equals}.\n+     * {@link #equals(Object) equals}.\n      * \n+     * @return a suitable hash code\n      * @since Commons Collections 3.0\n      */\n     public int hashCode() {\n      * equivalent to mine.\n      * <p>\n      * This implementation returns <code>true</code>\n-     * iff <code><i>that</i>.{@link Object#getClass getClass()}</code>\n+     * iff <code><i>object</i>.{@link Object#getClass() getClass()}</code>\n      * equals <code>this.getClass()</code>, and the underlying \n-     * comparators are equal.  Subclasses may want to override\n-     * this behavior to remain consistent with the \n-     * {@link Comparator#equals} contract.\n+     * comparators are equal.\n+     * Subclasses may want to override this behavior to remain consistent\n+     * with the {@link Comparator#equals(Object) equals} contract.\n      * \n+     * @param object  the object to compare to\n+     * @return true if equal\n      * @since Commons Collections 3.0\n      */\n-    public boolean equals(Object that) {\n-        if(this == that) {\n+    public boolean equals(Object object) {\n+        if(this == object) {\n             return true;\n-        } else if(null == that) {\n+        } else if(null == object) {\n             return false;\n-        } else if(that.getClass().equals(this.getClass())) {\n-            ReverseComparator thatrc = (ReverseComparator)that;\n+        } else if(object.getClass().equals(this.getClass())) {\n+            ReverseComparator thatrc = (ReverseComparator)object;\n             return comparator.equals(thatrc.comparator);\n         } else {\n             return false;\n         }\n     }\n \n-    // use serialVersionUID from Collections 2.0 for interoperability\n-    private static final long serialVersionUID = 2858887242028539265L;\n-\n-    private Comparator comparator;\n }\n--- a/src/java/org/apache/commons/collections/comparators/TransformingComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/TransformingComparator.java\n /**\n  * Decorates another Comparator with transformation behavior. That is, the\n  * return value from the transform operation will be passed to the decorated\n- * {@link Comparator#compare compare} method.\n- * <p />\n+ * {@link Comparator#compare(Object,Object) compare} method.\n  * \n  * @since Commons Collections 2.0 (?)\n  * @version $Revision$ $Date$\n  * @see org.apache.commons.collections.Transformer\n  * @see org.apache.commons.collections.comparators.ComparableComparator\n  */\n-public class TransformingComparator implements Comparator\n-{\n+public class TransformingComparator implements Comparator {\n+    \n+    /** The decorated comparator. */\n     protected Comparator decorated;\n+    /** The transformer being used. */    \n     protected Transformer transformer;\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Constructs an instance with the given Transformer and a \n      * {@link ComparableComparator ComparableComparator}.\n-     * @param transformer what will transform the arguments to \n-     *        {@link #compare compare}\n+     * \n+     * @param transformer what will transform the arguments to <code>compare</code>\n      */\n-    public TransformingComparator(Transformer transformer)\n-    {\n+    public TransformingComparator(Transformer transformer) {\n         this(transformer, new ComparableComparator());\n     }\n \n     /**\n-     * Constructs an instance with the given Transformer and Comparator\n-     * @param transformer what will transform the arguments to {@link #compare compare}\n-     * @param decorated the decorated Comparator\n+     * Constructs an instance with the given Transformer and Comparator.\n+     * \n+     * @param transformer  what will transform the arguments to <code>compare</code>\n+     * @param decorated  the decorated Comparator\n      */\n-    public TransformingComparator(Transformer transformer, Comparator decorated)\n-    {\n+    public TransformingComparator(Transformer transformer, Comparator decorated) {\n         this.decorated = decorated;\n         this.transformer = transformer;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns the result of comparing the values from the transform operation.\n-     * @return the result of comparing the values from the transform operation\n+     * \n+     * @param obj1  the first object to transform then compare\n+     * @param obj2  the second object to transform then compare\n+     * @return negative if obj1 is less, positive if greater, zero if equal\n      */\n-    public int compare(Object o1, Object o2)\n-    {\n-        Object value1 = this.transformer.transform(o1);\n-        Object value2 = this.transformer.transform(o2);\n+    public int compare(Object obj1, Object obj2) {\n+        Object value1 = this.transformer.transform(obj1);\n+        Object value2 = this.transformer.transform(obj2);\n         return this.decorated.compare(value1, value2);\n     }\n ", "timestamp": 1084627451, "metainfo": ""}