{"sha": "cdacd4a987755572bd4d6d328b371644ac07ecd2", "log": "[COLLECTIONS-460] Change IteratorChain to use a Queue internally.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java\n  */\n package org.apache.commons.collections4.iterators;\n \n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n-import java.util.List;\n-\n-import org.apache.commons.collections4.list.UnmodifiableList;\n+import java.util.LinkedList;\n+import java.util.Queue;\n \n /**\n  * An IteratorChain is an Iterator that wraps a number of Iterators.\n  * <p>\n  * Calling a method that adds new Iterator <i>after a method in the Iterator\n  * interface has been called</i> will result in an UnsupportedOperationException.\n- * Subclasses should <i>take care</i> to not alter the underlying List of Iterators.\n  * <p>\n  * NOTE: As from version 3.0, the IteratorChain may contain no iterators. In\n  * this case the class will function as an empty iterator.\n+ * <p>\n+ * NOTE: As from version 4.0, the IteratorChain stores the iterators in a queue\n+ * and removes any reference to them as soon as they are not used anymore. Thus\n+ * the methods {@code setIterator(Iterator)} and {@code getIterators()} have been\n+ * removed and {@link #size()} will return the number of remaining iterators in\n+ * the queue.\n  *\n  * @since 2.1\n  * @version $Id$\n public class IteratorChain<E> implements Iterator<E> {\n \n     /** The chain of iterators */\n-    private final List<Iterator<? extends E>> iteratorChain = new ArrayList<Iterator<? extends E>>();\n-\n-    /** The index of the current iterator */\n-    private int currentIteratorIndex = 0;\n+    private final Queue<Iterator<? extends E>> iteratorChain = new LinkedList<Iterator<? extends E>>();\n \n     /** The current iterator */\n     private Iterator<? extends E> currentIterator = null;\n     }\n \n     /**\n-     * Set the Iterator at the given index\n-     *\n-     * @param index index of the Iterator to replace\n-     * @param iterator Iterator to place at the given index\n-     * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt; size()\n-     * @throws IllegalStateException if I've already started iterating\n-     * @throws NullPointerException if the iterator is null\n-     */\n-    public void setIterator(final int index, final Iterator<? extends E> iterator)\n-            throws IndexOutOfBoundsException {\n-        checkLocked();\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n-        iteratorChain.set(index, iterator);\n-    }\n-\n-    /**\n-     * Get the list of Iterators (unmodifiable)\n-     *\n-     * @return the unmodifiable list of iterators added\n-     */\n-    public List<Iterator<? extends E>> getIterators() {\n-        return UnmodifiableList.unmodifiableList(iteratorChain);\n-    }\n-\n-    /**\n-     * Number of Iterators in the current IteratorChain.\n+     * Returns the remaining number of Iterators in the current IteratorChain.\n      *\n      * @return Iterator count\n      */\n             if (iteratorChain.isEmpty()) {\n                 currentIterator = EmptyIterator.<E> emptyIterator();\n             } else {\n-                currentIterator = iteratorChain.get(0);\n+                currentIterator = iteratorChain.remove();\n             }\n             // set last used iterator here, in case the user calls remove\n             // before calling hasNext() or next() (although they shouldn't)\n             lastUsedIterator = currentIterator;\n         }\n \n-        while (currentIterator.hasNext() == false\n-                && currentIteratorIndex < iteratorChain.size() - 1) {\n-            currentIteratorIndex++;\n-            currentIterator = iteratorChain.get(currentIteratorIndex);\n+        while (currentIterator.hasNext() == false && !iteratorChain.isEmpty()) {\n+            currentIterator = iteratorChain.remove();\n         }\n     }\n ", "timestamp": 1368556572, "metainfo": ""}