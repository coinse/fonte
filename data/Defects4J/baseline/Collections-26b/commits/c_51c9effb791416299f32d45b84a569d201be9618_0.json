{"sha": "51c9effb791416299f32d45b84a569d201be9618", "log": "Bug 34267: IteratorChain.remove() in combination with FilterIterator  ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n  * <p>\n  * NOTE: As from version 3.0, the IteratorChain may contain no\n  * iterators. In this case the class will function as an empty iterator.\n- * \n+ *\n  * @since Commons Collections 2.1\n  * @version $Revision$ $Date$\n- * \n+ *\n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n  */\n \n     /**\n      * Construct an IteratorChain with a single Iterator.\n-     * \n+     *\n      * @param iterator first Iterator in the IteratorChain\n      * @throws NullPointerException if the iterator is null\n      */\n     \n     //-----------------------------------------------------------------------\n     /**\n-     * Add an Iterator to the end of the chain \n-     * \n+     * Add an Iterator to the end of the chain\n+     *\n      * @param iterator Iterator to add\n      * @throws IllegalStateException if I've already started iterating\n      * @throws NullPointerException if the iterator is null\n     }\n \n     /**\n-     * Set the Iterator at the given index     \n-     * \n+     * Set the Iterator at the given index\n+     *\n      * @param index      index of the Iterator to replace\n      * @param iterator   Iterator to place at the given index\n      * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt; size()\n \n     /**\n      * Get the list of Iterators (unmodifiable)\n-     * \n+     *\n      * @return the unmodifiable list of iterators added\n      */\n     public List getIterators() {\n \n     /**\n      * Number of Iterators in the current IteratorChain.\n-     * \n+     *\n      * @return Iterator count\n      */\n     public int size() {\n      * Determine if modifications can still be made to the IteratorChain.\n      * IteratorChains cannot be modified once they have executed a method\n      * from the Iterator interface.\n-     * \n-     * @return true if IteratorChain cannot be modified, false if it can \n+     *\n+     * @return true if IteratorChain cannot be modified, false if it can\n      */\n     public boolean isLocked() {\n         return isLocked;\n     //-----------------------------------------------------------------------\n     /**\n      * Return true if any Iterator in the IteratorChain has a remaining element.\n-     * \n+     *\n      * @return true if elements remain\n      */\n     public boolean hasNext() {\n \n     /**\n      * Returns the next Object of the current Iterator\n-     * \n+     *\n      * @return Object from the current Iterator\n      * @throws java.util.NoSuchElementException if all the Iterators are exhausted\n      */\n     }\n \n     /**\n-     * Removes from the underlying collection the last element \n+     * Removes from the underlying collection the last element\n      * returned by the Iterator.  As with next() and hasNext(),\n      * this method calls remove() on the underlying Iterator.\n-     * Therefore, this method may throw an \n+     * Therefore, this method may throw an\n      * UnsupportedOperationException if the underlying\n-     * Iterator does not support this method. \n-     * \n+     * Iterator does not support this method.\n+     *\n      * @throws UnsupportedOperationException\n      *   if the remove operator is not supported by the underlying Iterator\n      * @throws IllegalStateException\n      */\n     public void remove() {\n         lockChain();\n-        updateCurrentIterator();\n-\n+        if( currentIterator == null ) {\n+            updateCurrentIterator();\n+        }\n         lastUsedIterator.remove();\n     }\n \n--- a/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java\n import java.util.Iterator;\n import java.util.List;\n import java.util.NoSuchElementException;\n+import java.util.LinkedList;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.Predicate;\n \n /**\n  * Tests the IteratorChain class.\n         }\n     }\n \n+    public void testRemoveFromFilteredIterator() {\n+\n+        final Predicate myPredicate = new Predicate() {\n+            public boolean evaluate( Object object ) {\n+                Integer i = (Integer) object;\n+                if (i.compareTo(new Integer(4)) < 0)\n+                    return true;\n+                return false;\n+            }\n+        };\n+\n+        List list1 = new ArrayList();\n+        List list2 = new ArrayList();\n+\n+        list1.add(new Integer(1));\n+        list1.add(new Integer(2));\n+        list2.add(new Integer(3));\n+        list2.add(new Integer(4)); // will be ignored by the predicate\n+\n+        Iterator it1 = IteratorUtils.filteredIterator(list1.iterator(), myPredicate );\n+        Iterator it2 = IteratorUtils.filteredIterator(list2.iterator(), myPredicate );\n+\n+        Iterator it = IteratorUtils.chainedIterator(it1, it2);\n+        while (it.hasNext()) {\n+            it.next();\n+            it.remove();\n+        }\n+        assertEquals( 0, list1.size() );\n+        assertEquals( 1, list2.size() );\n+\n+    }\n+    \n     public void testRemove() {\n         Iterator iter = (Iterator) makeFullIterator();\n ", "timestamp": 1116330996, "metainfo": ""}