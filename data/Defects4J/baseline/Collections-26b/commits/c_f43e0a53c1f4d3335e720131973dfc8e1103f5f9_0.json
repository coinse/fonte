{"sha": "f43e0a53c1f4d3335e720131973dfc8e1103f5f9", "log": "Applying Joe Kelly's fix for COLLECTIONS-249 - SetUniqueList.addAll(int, Collection ) was always inserting at the end of the list  ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/SetUniqueList.java\n+++ b/src/java/org/apache/commons/collections/list/SetUniqueList.java\n     }\n \n     /**\n-     * Adds an element to the end of the list if it is not already present.\n-     * <p>\n-     * <i>(Violation)</i>\n-     * The <code>List</code> interface makes the assumption that the element is\n-     * always inserted. This may not happen with this implementation.\n-     * \n-     * @param coll  the collection to add\n-     */\n-    public boolean addAll(Collection coll) {\n-        return addAll(size(), coll);\n-    }\n-\n-    /**\n      * Adds a collection of objects to the end of the list avoiding duplicates.\n      * <p>\n      * Only elements that are not already in this list will be added, and\n      * The <code>List</code> interface makes the assumption that the elements\n      * are always inserted. This may not happen with this implementation.\n      * \n+     * @param coll  the collection to add in iterator order\n+     * @return true if this collection changed\n+     */\n+    public boolean addAll(Collection coll) {\n+        return addAll(size(), coll);\n+    }\n+\n+    /**\n+     * Adds a collection of objects a specific index in the list avoiding \n+     * duplicates.\n+     * <p>\n+     * Only elements that are not already in this list will be added, and\n+     * duplicates from the specified collection will be ignored.\n+     * <p>\n+     * <i>(Violation)</i>\n+     * The <code>List</code> interface makes the assumption that the elements\n+     * are always inserted. This may not happen with this implementation.\n+     * \n      * @param index  the index to insert at\n      * @param coll  the collection to add in iterator order\n      * @return true if this collection changed\n \n         // adds all elements\n         for (final Iterator it = coll.iterator(); it.hasNext();) {\n-            add(it.next());\n+            int sizeBeforeAddNext = size();\n+            add(index, it.next());\n+            // if it was inserted, then increase the target index\n+            if (sizeBeforeAddNext != size()) {\n+              index++;\n+            }\n         }\n \n         // compares sizes to detect if collection changed\n--- a/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n+++ b/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n         assertEquals(\"Size should increase after addAll\", \n                      size + elements.length, collection.size());\n     }\n+\n+    public void testIntCollectionAddAll() {\n+      // make a SetUniqueList with one element\n+      List list = new SetUniqueList(new ArrayList(), new HashSet());\n+      final Integer existingElement = new Integer(1);\n+      list.add(existingElement);\n+\n+      // add two new unique elements at index 0\n+      final Integer firstNewElement = new Integer(2);\n+      final Integer secondNewElement = new Integer(3);\n+      collection = Arrays.asList(new Integer[] {firstNewElement, secondNewElement});\n+      list.addAll(0, collection);\n+      assertEquals(\"Unique elements should be added.\", 3, list.size());\n+      assertEquals(\"First new element should be at index 0\", firstNewElement, list.get(0));\n+      assertEquals(\"Second new element should be at index 1\", secondNewElement, list.get(1));\n+      assertEquals(\"Existing element should shift to index 2\", existingElement, list.get(2));\n+\n+      // add a duplicate element and a unique element at index 0\n+      final Integer thirdNewElement = new Integer(4);\n+      collection = Arrays.asList(new Integer[] {existingElement, thirdNewElement});\n+      list.addAll(0, collection);\n+      assertEquals(\"Duplicate element should not be added, unique element should be added.\",\n+        4, list.size());\n+      assertEquals(\"Third new element should be at index 0\", thirdNewElement, list.get(0));\n+    }\n     \n     public void testListSetByIndex() {\n         // override for set behaviour", "timestamp": 1177163086, "metainfo": ""}