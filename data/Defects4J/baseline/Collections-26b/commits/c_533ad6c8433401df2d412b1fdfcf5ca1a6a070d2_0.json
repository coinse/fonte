{"sha": "533ad6c8433401df2d412b1fdfcf5ca1a6a070d2", "log": "Update MapIterator to remove asMapEntry Add OrderedMapIterator Rename DefaultMapIterator   ", "commit": "\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.14 2003/11/02 15:27:53 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.15 2003/11/08 18:43:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.ListIterator;\n import java.util.Map;\n import java.util.NoSuchElementException;\n-import java.util.Map.Entry;\n \n import org.apache.commons.collections.iterators.ArrayIterator;\n import org.apache.commons.collections.iterators.ArrayListIterator;\n import org.apache.commons.collections.iterators.ResetableIterator;\n import org.apache.commons.collections.iterators.ResetableListIterator;\n import org.apache.commons.collections.iterators.ResetableMapIterator;\n+import org.apache.commons.collections.iterators.ResetableOrderedMapIterator;\n import org.apache.commons.collections.iterators.SingletonIterator;\n import org.apache.commons.collections.iterators.SingletonListIterator;\n import org.apache.commons.collections.iterators.TransformIterator;\n  * {@link org.apache.commons.collections.iterators} subpackage.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.14 $ $Date: 2003/11/02 15:27:53 $\n+ * @version $Revision: 1.15 $ $Date: 2003/11/08 18:43:12 $\n  * \n  * @author Stephen Colebourne\n  * @author Phil Steitz\n      * A map iterator over no elements\n      */    \n     public static final ResetableMapIterator EMPTY_MAP_ITERATOR = new EmptyMapIterator();\n+    /**\n+     * A map iterator over no elements\n+     */    \n+    public static final ResetableOrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = new EmptyOrderedMapIterator();\n \n     /**\n      * Prevents instantiation.\n      */\n     public static ResetableMapIterator emptyMapIterator() {\n         return EMPTY_MAP_ITERATOR;\n+    }\n+\n+    /**\n+     * Gets an empty ordered map iterator.\n+     * <p>\n+     * This iterator is a valid map iterator object that will iterate \n+     * over nothing.\n+     *\n+     * @return  a list iterator over nothing\n+     */\n+    public static ResetableOrderedMapIterator emptyOrderedMapIterator() {\n+        return EMPTY_ORDERED_MAP_ITERATOR;\n     }\n \n     /**\n         EmptyMapIterator() {\n             super();\n         }\n-\n+        \n         public Object getKey() {\n             throw new IllegalStateException(\"Iterator contains no elements\");\n         }\n         public Object setValue(Object value) {\n             throw new IllegalStateException(\"Iterator contains no elements\");\n         }\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    /**\n+     * EmptyOrderedMapIterator class\n+     */\n+    static class EmptyOrderedMapIterator extends EmptyMapIterator implements ResetableOrderedMapIterator {\n         \n-        public Entry asMapEntry() {\n-            throw new IllegalStateException(\"Iterator contains no elements\");\n+        EmptyOrderedMapIterator() {\n+            super();\n+        }\n+        \n+        public boolean hasPrevious() {\n+            return false;\n+        }\n+        \n+        public Object previous() {\n+            throw new NoSuchElementException(\"Iterator contains no elements\");\n         }\n     }\n \n--- a/src/java/org/apache/commons/collections/decorators/OrderedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/OrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedMap.java,v 1.5 2003/11/04 23:36:23 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedMap.java,v 1.6 2003/11/08 18:43:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.collections.iterators.DefaultMapIterator;\n+import org.apache.commons.collections.iterators.EntrySetMapIterator;\n import org.apache.commons.collections.iterators.MapIterator;\n import org.apache.commons.collections.pairs.AbstractMapEntry;\n \n  * original position in the iteration.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/11/04 23:36:23 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/08 18:43:12 $\n  * \n  * @author Henri Yandell\n  * @author Stephen Colebourne\n \n     //-----------------------------------------------------------------------\n     public MapIterator mapIterator() {\n-        return new DefaultMapIterator(this);\n+        return new EntrySetMapIterator(this);\n     }\n     \n     public Set keySet() {\n--- a/src/java/org/apache/commons/collections/iterators/AbstractMapIteratorDecorator.java\n+++ b/src/java/org/apache/commons/collections/iterators/AbstractMapIteratorDecorator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/AbstractMapIteratorDecorator.java,v 1.1 2003/11/02 16:29:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/AbstractMapIteratorDecorator.java,v 1.2 2003/11/08 18:43:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.iterators;\n \n-import java.util.Map;\n-\n /**\n  * Provides basic behaviour for decorating a map iterator with extra functionality.\n  * <p>\n  * All methods are forwarded to the decorated map iterator.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/02 16:29:12 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/08 18:43:12 $\n  * \n  * @author Stephen Colebourne\n  */\n         return iterator.setValue(obj);\n     }\n \n-    public Map.Entry asMapEntry() {\n-        return iterator.asMapEntry();\n-    }\n-\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java,v 1.1 2003/11/08 18:43:13 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * Implements a <code>MapIterator</code> using a Map entrySet.\n+ * Reverse iteration is not supported.\n+ * <pre>\n+ * MapIterator it = map.mapIterator();\n+ * while (it.hasNext()) {\n+ *   Object key = it.next();\n+ *   Object value = it.getValue();\n+ *   it.setValue(newValue);\n+ * }\n+ * </pre>\n+ *  \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/08 18:43:13 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class EntrySetMapIterator implements MapIterator, ResetableMapIterator {\n+    \n+    private final Map map;\n+    private Iterator iterator;\n+    private Map.Entry last;\n+    private boolean canRemove = false;\n+    \n+    /**\n+     * Constructor.\n+     * \n+     * @param map  the map to iterate over\n+     */\n+    public EntrySetMapIterator(Map map) {\n+        super();\n+        this.map = map;\n+        this.iterator = map.entrySet().iterator();\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    /**\n+     * Checks to see if there are more entries still to be iterated.\n+     *\n+     * @return <code>true</code> if the iterator has more elements\n+     */\n+    public boolean hasNext() {\n+        return iterator.hasNext();\n+    }\n+\n+    /**\n+     * Gets the next <em>key</em> from the <code>Map</code>.\n+     *\n+     * @return the next key in the iteration\n+     * @throws NoSuchElementException if the iteration is finished\n+     */\n+    public Object next() {\n+        last = (Map.Entry) iterator.next();\n+        canRemove = true;\n+        return last.getKey();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Removes the last returned key from the underlying <code>Map</code>.\n+     * <p>\n+     * This method can be called once per call to <code>next()</code>.\n+     *\n+     * @throws UnsupportedOperationException if remove is not supported by the map\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     * @throws IllegalStateException if <code>remove()</code> has already been called\n+     *  since the last call to <code>next()</code>\n+     */\n+    public void remove() {\n+        if (canRemove == false) {\n+            throw new IllegalStateException(\"Iterator remove() can only be called once after next()\");\n+        }\n+        iterator.remove();\n+        last = null;\n+        canRemove = false;\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the current key, which is the key returned by the last call\n+     * to <code>next()</code>.\n+     *\n+     * @return the current key\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     */\n+    public Object getKey() {\n+        if (last == null) {\n+            throw new IllegalStateException(\"Iterator getKey() can only be called after next() and before remove()\");\n+        }\n+        return last.getKey();\n+    }\n+\n+    /**\n+     * Gets the current value, which is the value associated with the last key\n+     * returned by <code>next()</code>.\n+     *\n+     * @return the current value\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     */\n+    public Object getValue() {\n+        if (last == null) {\n+            throw new IllegalStateException(\"Iterator getValue() can only be called after next() and before remove()\");\n+        }\n+        return last.getValue();\n+    }\n+\n+    /**\n+     * Sets the value associated with the current key.\n+     *\n+     * @param value  the new value\n+     * @return the previous value\n+     * @throws UnsupportedOperationException if setValue is not supported by the map\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     * @throws IllegalStateException if <code>remove()</code> has been called since the\n+     *  last call to <code>next()</code>\n+     */\n+    public Object setValue(Object value) {\n+        if (last == null) {\n+            throw new IllegalStateException(\"Iterator setValue() can only be called after next() and before remove()\");\n+        }\n+        return last.setValue(value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Resets the state of the iterator.\n+     */\n+    public void reset() {\n+        iterator = map.entrySet().iterator();\n+        last = null;\n+        canRemove = false;\n+    }\n+    \n+    /**\n+     * Gets the iterator as a String.\n+     * \n+     * @return a string version of the iterator\n+     */    \n+    public String toString() {\n+        if (last == null) {\n+            return \"MapIterator[\" + getKey() + \"=\" + getValue() + \"]\";\n+        } else {\n+            return \"MapIterator[]\";\n+        }\n+    }\n+    \n+}\n--- a/src/java/org/apache/commons/collections/iterators/MapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/MapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/MapIterator.java,v 1.1 2003/11/02 15:27:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/MapIterator.java,v 1.2 2003/11/08 18:43:13 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n package org.apache.commons.collections.iterators;\n \n import java.util.Iterator;\n-import java.util.Map;\n \n /**\n  * Defines an iterator that operates over a <code>Map</code>.\n  * </pre>\n  *  \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/02 15:27:54 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/08 18:43:13 $\n  *\n  * @author Stephen Colebourne\n  */\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the last returned key-value pair from the underlying <code>Map</code>\n-     * as a Map Entry instance.\n-     * <p>\n-     * The returned entry must not change when <code>next</code> is called.\n-     * Changes made to the entry via <code>setValue</code> must change the map.\n-     * \n-     * @return the last return key-value pair as an independent Map Entry\n-     * @throws IllegalStateException if <code>next()</code> has not yet been called\n-     * @throws IllegalStateException if <code>remove()</code> has been called since the\n-     *  last call to <code>next()</code>\n-     */\n-    Map.Entry asMapEntry();\n-    \n-    //-----------------------------------------------------------------------\n-    /**\n      * Removes the last returned key from the underlying <code>Map</code> (optional operation).\n      * <p>\n      * This method can be called once per call to <code>next()</code>.\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/OrderedMapIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/OrderedMapIterator.java,v 1.1 2003/11/08 18:43:12 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+/**\n+ * Defines an iterator that operates over an ordered <code>Map</code>.\n+ * <p>\n+ * This iterator allows both forward and reverse iteration through the map.\n+ *  \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/08 18:43:12 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public interface OrderedMapIterator extends MapIterator {\n+    \n+    /**\n+     * Checks to see if there is a previous entry that can be iterated to.\n+     *\n+     * @return <code>true</code> if the iterator has a previous element\n+     */\n+    boolean hasPrevious();\n+\n+    /**\n+     * Gets the previous <em>key</em> from the <code>Map</code>.\n+     *\n+     * @return the previous key in the iteration\n+     * @throws NoSuchElementException if the iteration is finished\n+     */\n+    Object previous();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ResetableOrderedMapIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/ResetableOrderedMapIterator.java,v 1.1 2003/11/08 18:43:13 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+/** \n+ * Interface implemented by those map iterators that can be reset back \n+ * to an initial state.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/08 18:43:13 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public interface ResetableOrderedMapIterator extends OrderedMapIterator, ResetableMapIterator {\n+\n+    /**\n+     * Resets the iterator back to the position at which the iterator\n+     * was created.\n+     */\n+    public void reset();\n+\n+}\n--- a/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java,v 1.1 2003/11/02 18:29:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java,v 1.2 2003/11/08 18:43:13 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.iterators;\n \n-import java.util.Map.Entry;\n-\n import org.apache.commons.collections.Unmodifiable;\n-import org.apache.commons.collections.pairs.UnmodifiableMapEntry;\n \n /** \n  * Decorates a map iterator such that it cannot be modified.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/02 18:29:59 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/08 18:43:13 $\n  * \n  * @author Stephen Colebourne\n  */\n         return iterator.getValue();\n     }\n \n-    public Entry asMapEntry() {\n-        return new UnmodifiableMapEntry(getKey(), getValue());\n-    }\n-\n     public Object setValue(Object value) {\n         throw new UnsupportedOperationException(\"setValue() is not supported\");\n     }", "timestamp": 1068316993, "metainfo": ""}