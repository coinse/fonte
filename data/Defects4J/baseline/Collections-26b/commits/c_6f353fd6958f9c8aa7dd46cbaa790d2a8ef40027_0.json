{"sha": "6f353fd6958f9c8aa7dd46cbaa790d2a8ef40027", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r555925 | skestle | 2007-07-13 03:39:24 -0700 (Fri, 13 Jul 2007) | 2 lines          Added Edwin Tellman's patch for COLLECTIONS-243.       It all seems pretty reasonable, and it should all be checked again as the project is worked through     ------------------------------------------------------------------------     r471202 | scolebourne | 2006-11-04 06:21:44 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getCollection() - use covariant decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/PredicatedList.java\n+++ b/src/java/org/apache/commons/collections/list/PredicatedList.java\n  */\n package org.apache.commons.collections.list;\n \n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.ListIterator;\n-\n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.collection.PredicatedCollection;\n import org.apache.commons.collections.iterators.AbstractListIteratorDecorator;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.ListIterator;\n \n /**\n  * Decorates another <code>List</code> to validate that all additions\n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n-public class PredicatedList extends PredicatedCollection implements List {\n+public class PredicatedList<E> extends PredicatedCollection<E> implements List<E> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = -5722039223898659102L;\n      * \n      * @param list  the list to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n+     * @return the decorated list\n      * @throws IllegalArgumentException if list or predicate is null\n      * @throws IllegalArgumentException if the list contains invalid elements\n      */\n-    public static List decorate(List list, Predicate predicate) {\n-        return new PredicatedList(list, predicate);\n+    public static <T> List<T> decorate(List<T> list, Predicate<? super T> predicate) {\n+        return new PredicatedList<T>(list, predicate);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if list or predicate is null\n      * @throws IllegalArgumentException if the list contains invalid elements\n      */\n-    protected PredicatedList(List list, Predicate predicate) {\n+    protected PredicatedList(List<E> list, Predicate<? super E> predicate) {\n         super(list, predicate);\n     }\n \n      * \n      * @return the decorated list\n      */\n-    protected List getList() {\n-        return (List) getCollection();\n+    protected List<E> decorated() {\n+        return (List<E>) super.decorated();\n     }\n \n     //-----------------------------------------------------------------------\n-    public Object get(int index) {\n-        return getList().get(index);\n+    public E get(int index) {\n+        return decorated().get(index);\n     }\n \n     public int indexOf(Object object) {\n-        return getList().indexOf(object);\n+        return decorated().indexOf(object);\n     }\n \n     public int lastIndexOf(Object object) {\n-        return getList().lastIndexOf(object);\n+        return decorated().lastIndexOf(object);\n     }\n \n-    public Object remove(int index) {\n-        return getList().remove(index);\n+    public E remove(int index) {\n+        return decorated().remove(index);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void add(int index, Object object) {\n+    public void add(int index, E object) {\n         validate(object);\n-        getList().add(index, object);\n+        decorated().add(index, object);\n     }\n \n-    public boolean addAll(int index, Collection coll) {\n-        for (Iterator it = coll.iterator(); it.hasNext(); ) {\n-            validate(it.next());\n+    public boolean addAll(int index, Collection<? extends E> coll) {\n+        for (E aColl : coll) {\n+            validate(aColl);\n         }\n-        return getList().addAll(index, coll);\n+        return decorated().addAll(index, coll);\n     }\n \n-    public ListIterator listIterator() {\n+    public ListIterator<E> listIterator() {\n         return listIterator(0);\n     }\n \n-    public ListIterator listIterator(int i) {\n-        return new PredicatedListIterator(getList().listIterator(i));\n+    public ListIterator<E> listIterator(int i) {\n+        return new PredicatedListIterator(decorated().listIterator(i));\n     }\n \n-    public Object set(int index, Object object) {\n+    public E set(int index, E object) {\n         validate(object);\n-        return getList().set(index, object);\n+        return decorated().set(index, object);\n     }\n \n-    public List subList(int fromIndex, int toIndex) {\n-        List sub = getList().subList(fromIndex, toIndex);\n-        return new PredicatedList(sub, predicate);\n+    public List<E> subList(int fromIndex, int toIndex) {\n+        List<E> sub = decorated().subList(fromIndex, toIndex);\n+        return new PredicatedList<E>(sub, predicate);\n     }\n \n     /**\n      * Inner class Iterator for the PredicatedList\n      */\n-    protected class PredicatedListIterator extends AbstractListIteratorDecorator {\n+    protected class PredicatedListIterator extends AbstractListIteratorDecorator<E> {\n         \n-        protected PredicatedListIterator(ListIterator iterator) {\n+        protected PredicatedListIterator(ListIterator<E> iterator) {\n             super(iterator);\n         }\n         \n-        public void add(Object object) {\n+        public void add(E object) {\n             validate(object);\n             iterator.add(object);\n         }\n         \n-        public void set(Object object) {\n+        public void set(E object) {\n             validate(object);\n             iterator.set(object);\n         }", "timestamp": 1252994143, "metainfo": ""}