{"sha": "0d0a25fdfb20069255ded96d6858eb93f1f6de8d", "log": "Tidy up formatting and tests afetr initial checkin  ", "commit": "\n--- a/src/java/org/apache/commons/collections/buffer/TimeoutBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/TimeoutBuffer.java\n /*\n- *  Copyright 2001-2005 The Apache Software Foundation\n+ *  Copyright 2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n package org.apache.commons.collections.buffer;\n \n import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.BufferUnderflowException;\n \n /**\n  * Decorates another <code>Buffer</code> to make {@link #get()} and\n- * {@link #remove()} block (until timeout expires) when the <code>Buffer</code> is empty.\n+ * {@link #remove()} block (until timeout expires) when the <code>Buffer</code>\n+ * is empty.\n  * <p>\n  * If either <code>get</code> or <code>remove</code> is called on an empty\n- * <code>Buffer</code>, the calling thread waits (until timeout expires) for notification that\n- * an <code>add</code> or <code>addAll</code> operation has completed.\n+ * <code>Buffer</code>, the calling thread waits (until timeout expires) for\n+ * notification that an <code>add</code> or <code>addAll</code> operation\n+ * has completed.\n  * <p>\n- * When one or more entries are added to an empty <code>Buffer</code>,\n- * all threads blocked in <code>get</code> or <code>remove</code> are notified.\n+ * When one or more entries are added to an empty <code>Buffer</code>, all\n+ * threads blocked in <code>get</code> or <code>remove</code> are notified.\n  * There is no guarantee that concurrent blocked <code>get</code> or\n  * <code>remove</code> requests will be \"unblocked\" and receive data in the\n  * order that they arrive.\n- * <p>\n- * This class is Serializable from Commons Collections 3.2.\n- *\n+ * \n  * @author James Carman\n- * @version $Revision$ $Date$\n+ * @version $Revision: $ $Date: $\n  * @since Commons Collections 3.2\n  */\n public class TimeoutBuffer extends BlockingBuffer {\n-//----------------------------------------------------------------------------------------------------------------------\n-// Fields\n-//----------------------------------------------------------------------------------------------------------------------\n+\n+    /** The serialization lock. */\n     private static final long serialVersionUID = 1719328905017860541L;\n \n+    /** The timeout length. */\n     private final long timeout;\n \n-//----------------------------------------------------------------------------------------------------------------------\n-// Static Methods\n-//----------------------------------------------------------------------------------------------------------------------\n-\n-    public static Buffer decorate( Buffer buffer, long timeout ) {\n-        return new TimeoutBuffer( buffer, timeout );\n+    /**\n+     * Decorates the specified buffer adding timeout behaviour.\n+     *\n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param timeout  the timeout value in milliseconds\n+     * @return the decorated buffer\n+     * @throws IllegalArgumentException if the buffer is null\n+     * @throws IllegalArgumentException if the timeout is negative\n+     */\n+    public static Buffer decorate(Buffer buffer, long timeout) {\n+        return new TimeoutBuffer(buffer, timeout);\n     }\n \n-//----------------------------------------------------------------------------------------------------------------------\n-// Constructors\n-//----------------------------------------------------------------------------------------------------------------------\n-\n-    public TimeoutBuffer( Buffer buffer, long timeout ) {\n-        super( buffer );\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param timeout  the timeout value in milliseconds\n+     * @throws IllegalArgumentException if the buffer is null\n+     * @throws IllegalArgumentException if the timeout is negative\n+     */\n+    protected TimeoutBuffer(Buffer buffer, long timeout) {\n+        super(buffer);\n+        if (timeout < 0) {\n+            throw new IllegalArgumentException(\"The timeout cannot be negative\");\n+        }\n         this.timeout = timeout;\n     }\n \n+    /**\n+     * Gets the length of the timeout.\n+     *\n+     * @return the timeout value\n+     */\n     public long getTimeout() {\n         return timeout;\n     }\n-//----------------------------------------------------------------------------------------------------------------------\n-// Buffer Implementation\n-//----------------------------------------------------------------------------------------------------------------------\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the next value from the buffer, waiting until an object is\n+     * added for up to the specified timeout value if the buffer is empty.\n+     *\n+     * @throws BufferUnderflowException if an interrupt is received\n+     * @throws BufferUnderflowException if the timeout expires\n+     */\n     public Object get() {\n-        return get( timeout );\n+        return get(timeout);\n     }\n \n+    /**\n+     * Removes the next value from the buffer, waiting until an object is\n+     * added for up to the specified timeout value if the buffer is empty.\n+     *\n+     * @throws BufferUnderflowException if an interrupt is received\n+     * @throws BufferUnderflowException if the timeout expires\n+     */\n     public Object remove() {\n-        return remove( timeout );\n+        return remove(timeout);\n     }\n \n-    public boolean equals( Object o ) {\n-        if( this == o ) {\n-            return true;\n-        }\n-        if( o == null || getClass() != o.getClass() ) {\n-            return false;\n-        }\n-        if( !super.equals( o ) ) {\n-            return false;\n-        }\n-        final TimeoutBuffer that = ( TimeoutBuffer ) o;\n-        if( timeout != that.timeout ) {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    public int hashCode() {\n-        int result = super.hashCode();\n-        result = 29 * result + ( int ) ( timeout ^ ( timeout >>> 32 ) );\n-        return result;\n-    }\n }\n-\n--- a/src/test/org/apache/commons/collections/buffer/TestTimeoutBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestTimeoutBuffer.java\n //----------------------------------------------------------------------------------------------------------------------\n // Other Methods\n //----------------------------------------------------------------------------------------------------------------------\n+    public void testDecorationExceptions() {\n+        try {\n+            TimeoutBuffer.decorate((Buffer) null, 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            TimeoutBuffer.decorate(new CircularFifoBuffer(4), -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n \n     public String getCompatibilityVersion() {\n         return \"3.2\";", "timestamp": 1131899015, "metainfo": ""}