{"sha": "63a4d98529c64cff9ceb01880b26a0739e32c220", "log": "Add tests for pairs package   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestAllPackages.java\n+++ b/src/test/org/apache/commons/collections/TestAllPackages.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAllPackages.java,v 1.3 2003/09/07 16:49:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAllPackages.java,v 1.4 2003/10/01 22:36:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Entry point for all Collections project tests.\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/09/07 16:49:41 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/01 22:36:49 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(org.apache.commons.collections.decorators.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.iterators.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.observed.TestAll.suite());\n+        suite.addTest(org.apache.commons.collections.pairs.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.primitives.TestAll.suite());\n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/pairs/AbstractTestMapEntry.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/pairs/Attic/AbstractTestMapEntry.java,v 1.1 2003/10/01 22:36:49 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.pairs;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Abstract tests that can be extended to test any Map.Entry implementation.\n+ * Subclasses must implement {@link #makeMapEntry(Object, Object)} to return\n+ * a new Map.Entry of the type being tested. Subclasses must also implement\n+ * {@link #testConstructors()} to test the constructors of the Map.Entry\n+ * type being tested.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/01 22:36:49 $\n+ * \n+ * @author Neil O'Toole\n+ */\n+public abstract class AbstractTestMapEntry extends TestCase {\n+    \n+    protected final String key = \"name\";\n+    protected final String value = \"duke\";\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test name\n+     */\n+    public AbstractTestMapEntry(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Make an instance of Map.Entry with the default (null) key and value.\n+     * This implementation simply calls {@link #makeMapEntry(Object, Object)}\n+     * with null for key and value. Subclasses can override this method if desired.\n+     */\n+    protected Map.Entry makeMapEntry() {\n+        return makeMapEntry(null, null);\n+    }\n+\n+    /**\n+     * Make an instance of Map.Entry with the specified key and value.\n+     * Subclasses should override this method to return a Map.Entry\n+     * of the type being tested.\n+     */\n+    protected abstract Map.Entry makeMapEntry(Object key, Object value);\n+\n+    /**\n+     * Makes a Map.Entry of a type that's known to work correctly.\n+     */\n+    protected Map.Entry makeKnownMapEntry() {\n+        return makeKnownMapEntry(null, null);\n+    }\n+\n+    /**\n+     * Makes a Map.Entry of a type that's known to work correctly.\n+     */\n+    protected Map.Entry makeKnownMapEntry(Object key, Object value) {\n+        Map map = new HashMap(1);\n+        map.put(key, value);\n+        Map.Entry entry = (Map.Entry) map.entrySet().iterator().next();\n+        return entry;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAccessorsAndMutators() {\n+        Map.Entry entry = makeMapEntry(key, value);\n+\n+        assertTrue(entry.getKey() == key);\n+\n+        entry.setValue(value);\n+        assertTrue(entry.getValue() == value);\n+\n+        // check that null doesn't do anything funny\n+        entry = makeMapEntry(null, null);\n+        assertTrue(entry.getKey() == null);\n+\n+        entry.setValue(null);\n+        assertTrue(entry.getValue() == null);\n+    }\n+\n+    /**\n+     * Subclasses should override this method to test the\n+     * desired behaviour of the class with respect to\n+     * handling of self-references.\n+     *\n+     */\n+\n+    public void testSelfReferenceHandling() {\n+        // test that #setValue does not permit\n+        //  the MapEntry to contain itself (and thus cause infinite recursion\n+        //  in #hashCode and #toString)\n+\n+        Map.Entry entry = makeMapEntry();\n+\n+        try {\n+            entry.setValue(entry);\n+            fail(\"Should throw an IllegalArgumentException\");\n+        } catch (IllegalArgumentException iae) {\n+            // expected to happen...\n+\n+            // check that the KVP's state has not changed\n+            assertTrue(entry.getKey() == null && entry.getValue() == null);\n+        }\n+    }\n+\n+    /**\n+     * Subclasses should provide tests for their constructors.\n+     *\n+     */\n+    public abstract void testConstructors();\n+\n+    public void testEqualsAndHashCode() {\n+        // 1. test with object data\n+        Map.Entry e1 = makeMapEntry(key, value);\n+        Map.Entry e2 = makeKnownMapEntry(key, value);\n+\n+        assertTrue(e1.equals(e1));\n+        assertTrue(e2.equals(e1));\n+        assertTrue(e1.equals(e2));\n+        assertTrue(e1.hashCode() == e2.hashCode());\n+\n+        // 2. test with nulls\n+        e1 = makeMapEntry();\n+        e2 = makeKnownMapEntry();\n+\n+        assertTrue(e1.equals(e1));\n+        assertTrue(e2.equals(e1));\n+        assertTrue(e1.equals(e2));\n+        assertTrue(e1.hashCode() == e2.hashCode());\n+    }\n+\n+    public void testToString() {\n+        Map.Entry entry = makeMapEntry(key, value);\n+        assertTrue(entry.toString().equals(\"[\" + entry.getKey() + \"=\" + entry.getValue() + \"]\"));\n+\n+        // test with nulls\n+        entry = makeMapEntry();\n+        assertTrue(entry.toString().equals(\"[\" + entry.getKey() + \"=\" + entry.getValue() + \"]\"));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/pairs/TestAll.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/pairs/Attic/TestAll.java,v 1.1 2003/10/01 22:36:49 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.pairs;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for key-value test cases.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/01 22:36:49 $\n+ * \n+ * @author Neil O'Toole\n+ */\n+public class TestAll extends TestCase {\n+    \n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestAll.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestDefaultKeyValue.suite());\n+        suite.addTest(TestDefaultMapEntry.suite());\n+        return suite;\n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/pairs/TestDefaultKeyValue.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/pairs/Attic/TestDefaultKeyValue.java,v 1.1 2003/10/01 22:36:49 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.pairs;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test the DefaultKeyValue class.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/01 22:36:49 $\n+ * \n+ * @author Neil O'Toole\n+ */\n+public class TestDefaultKeyValue extends TestCase {\n+    \n+    private final String key = \"name\";\n+    private final String value = \"duke\";\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test name\n+     */\n+    public TestDefaultKeyValue(String testName) {\n+        super(testName);\n+\n+    }\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(TestDefaultKeyValue.class);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestDefaultKeyValue.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Make an instance of DefaultKeyValue with the default (null) key and value.\n+     * Subclasses should override this method to return a DefaultKeyValue\n+     * of the type being tested.\n+     */\n+    protected DefaultKeyValue makeDefaultKeyValue() {\n+        return new DefaultKeyValue(null, null);\n+    }\n+\n+    /**\n+     * Make an instance of DefaultKeyValue with the specified key and value.\n+     * Subclasses should override this method to return a DefaultKeyValue\n+     * of the type being tested.\n+     */\n+    protected DefaultKeyValue makeDefaultKeyValue(Object key, Object value) {\n+        return new DefaultKeyValue(key, value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAccessorsAndMutators() {\n+        DefaultKeyValue kv = makeDefaultKeyValue();\n+\n+        kv.setKey(key);\n+        assertTrue(kv.getKey() == key);\n+\n+        kv.setValue(value);\n+        assertTrue(kv.getValue() == value);\n+\n+        // check that null doesn't do anything funny\n+        kv.setKey(null);\n+        assertTrue(kv.getKey() == null);\n+\n+        kv.setValue(null);\n+        assertTrue(kv.getValue() == null);\n+\n+    }\n+\n+    public void testSelfReferenceHandling() {\n+        // test that #setKey and #setValue do not permit\n+        //  the KVP to contain itself (and thus cause infinite recursion\n+        //  in #hashCode and #toString)\n+\n+        DefaultKeyValue kv = makeDefaultKeyValue();\n+\n+        try {\n+            kv.setKey(kv);\n+            fail(\"Should throw an IllegalArgumentException\");\n+        } catch (IllegalArgumentException iae) {\n+            // expected to happen...\n+\n+            // check that the KVP's state has not changed\n+            assertTrue(kv.getKey() == null && kv.getValue() == null);\n+        }\n+\n+        try {\n+            kv.setValue(kv);\n+            fail(\"Should throw an IllegalArgumentException\");\n+        } catch (IllegalArgumentException iae) {\n+            // expected to happen...\n+\n+            // check that the KVP's state has not changed\n+            assertTrue(kv.getKey() == null && kv.getValue() == null);\n+        }\n+    }\n+\n+    /**\n+     * Subclasses should override this method to test their own constructors.\n+     */\n+    public void testConstructors() {\n+        // 1. test default constructor\n+        DefaultKeyValue kv = new DefaultKeyValue();\n+        assertTrue(kv.getKey() == null && kv.getValue() == null);\n+\n+        // 2. test key-value constructor\n+        kv = new DefaultKeyValue(key, value);\n+        assertTrue(kv.getKey() == key && kv.getValue() == value);\n+\n+        // 3. test copy constructor\n+        DefaultKeyValue kv2 = new DefaultKeyValue(kv);\n+        assertTrue(kv2.getKey() == key && kv2.getValue() == value);\n+\n+        // test that the KVPs are independent\n+        kv.setKey(null);\n+        kv.setValue(null);\n+\n+        assertTrue(kv2.getKey() == key && kv2.getValue() == value);\n+\n+        // 4. test Map.Entry constructor\n+        Map map = new HashMap();\n+        map.put(key, value);\n+        Map.Entry entry = (Map.Entry) map.entrySet().iterator().next();\n+\n+        kv = new DefaultKeyValue(entry);\n+        assertTrue(kv.getKey() == key && kv.getValue() == value);\n+\n+        // test that the KVP is independent of the Map.Entry\n+        entry.setValue(null);\n+        assertTrue(kv.getValue() == value);\n+\n+    }\n+\n+    public void testEqualsAndHashCode() {\n+        // 1. test with object data\n+        DefaultKeyValue kv = makeDefaultKeyValue(key, value);\n+        DefaultKeyValue kv2 = makeDefaultKeyValue(key, value);\n+\n+        assertTrue(kv.equals(kv));\n+        assertTrue(kv.equals(kv2));\n+        assertTrue(kv.hashCode() == kv2.hashCode());\n+\n+        // 2. test with nulls\n+        kv = makeDefaultKeyValue(null, null);\n+        kv2 = makeDefaultKeyValue(null, null);\n+\n+        assertTrue(kv.equals(kv));\n+        assertTrue(kv.equals(kv2));\n+        assertTrue(kv.hashCode() == kv2.hashCode());\n+    }\n+\n+    public void testToString() {\n+        DefaultKeyValue kv = makeDefaultKeyValue(key, value);\n+        assertTrue(kv.toString().equals(\"[\" + kv.getKey() + \"=\" + kv.getValue() + \"]\"));\n+\n+        // test with nulls\n+        kv = makeDefaultKeyValue(null, null);\n+        assertTrue(kv.toString().equals(\"[\" + kv.getKey() + \"=\" + kv.getValue() + \"]\"));\n+    }\n+\n+    public void testToMapEntry() {\n+        DefaultKeyValue kv = makeDefaultKeyValue(key, value);\n+\n+        Map map = new HashMap();\n+        map.put(kv.getKey(), kv.getValue());\n+        Map.Entry entry = (Map.Entry) map.entrySet().iterator().next();\n+\n+        assertTrue(entry.equals(kv.toMapEntry()));\n+        assertTrue(entry.hashCode() == kv.hashCode());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/pairs/TestDefaultMapEntry.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/pairs/Attic/TestDefaultMapEntry.java,v 1.1 2003/10/01 22:36:49 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.pairs;\n+\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test the DefaultMapEntry class.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/01 22:36:49 $\n+ * \n+ * @author Neil O'Toole\n+ */\n+public class TestDefaultMapEntry extends AbstractTestMapEntry {\n+\n+    public TestDefaultMapEntry(String testName) {\n+        super(testName);\n+\n+    }\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(TestDefaultMapEntry.class);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestDefaultMapEntry.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Make an instance of Map.Entry with the default (null) key and value.\n+     * Subclasses should override this method to return a Map.Entry\n+     * of the type being tested.\n+     */\n+    public Map.Entry makeMapEntry() {\n+        return new DefaultMapEntry(null, null);\n+    }\n+\n+    /**\n+     * Make an instance of Map.Entry with the specified key and value.\n+     * Subclasses should override this method to return a Map.Entry\n+     * of the type being tested.\n+     */\n+    public Map.Entry makeMapEntry(Object key, Object value) {\n+        return new DefaultMapEntry(key, value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Subclasses should override this method.\n+     *\n+     */\n+    public void testConstructors() {\n+        // 1. test key-value constructor\n+        Map.Entry entry = new DefaultMapEntry(key, value);\n+        assertSame(key, entry.getKey());\n+        assertSame(value, entry.getValue());\n+\n+        // 2. test pair constructor\n+        KeyValue pair = new DefaultKeyValue(key, value);\n+        assertSame(key, pair.getKey());\n+        assertSame(value, pair.getValue());\n+\n+        // 3. test copy constructor\n+        Map.Entry entry2 = new DefaultMapEntry(entry);\n+        assertSame(key, entry2.getKey());\n+        assertSame(value, entry2.getValue());\n+\n+        // test that the objects are independent\n+        entry.setValue(null);\n+        assertSame(value, entry2.getValue());\n+    }\n+\n+    public void testSelfReferenceHandling() {\n+        Map.Entry entry = makeMapEntry();\n+\n+        try {\n+            entry.setValue(entry);\n+            assertSame(entry, entry.getValue());\n+\n+        } catch (Exception e) {\n+            fail(\"This Map.Entry implementation supports value self-reference.\");\n+        }\n+    }\n+\n+}", "timestamp": 1065047809, "metainfo": ""}