{"sha": "ce5d208b9291f4655f614d4674af38314cd7a6e9", "log": "Removing tabs  ", "commit": "\n--- a/src/java/org/apache/commons/collections/keyvalue/MultiKey.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/MultiKey.java\n         return \"MultiKey\" + Arrays.asList(keys).toString();\n     }\n \n-\t/**\n-\t * Calculate the hash code of the instance using the provided keys.\n-\t * @param keys\n-\t */\n-\tprivate void calculateHashCode(Object[] keys)\n-\t{\n-\t\tint total = 0;\n+    /**\n+     * Calculate the hash code of the instance using the provided keys.\n+     * @param keys\n+     */\n+    private void calculateHashCode(Object[] keys)\n+    {\n+        int total = 0;\n         for (int i = 0; i < keys.length; i++) {\n             if (keys[i] != null) {\n                 total ^= keys[i].hashCode();\n             }\n         }\n         hashCode = total;\n-\t}\n-\t\n-\t/**\n-\t * Recalculate the hash code after deserialization. The hash code of some\n-\t * keys might have change (hash codes based on the system hash code are\n-\t * only stable for the same process). \n-\t * @return the instance with recalculated hash code\n-\t */\n-\tprivate Object readResolve() {\n-\t\tcalculateHashCode(keys);\n-\t\treturn this;\n-\t}\n+    }\n+    \n+    /**\n+     * Recalculate the hash code after deserialization. The hash code of some\n+     * keys might have change (hash codes based on the system hash code are\n+     * only stable for the same process). \n+     * @return the instance with recalculated hash code\n+     */\n+    private Object readResolve() {\n+        calculateHashCode(keys);\n+        return this;\n+    }\n }\n--- a/src/test/org/apache/commons/collections/TestIteratorUtils.java\n+++ b/src/test/org/apache/commons/collections/TestIteratorUtils.java\n     }\n     \n     //-----------------------------------------------------------------------\n-\t/**\n-\t * Test next() and hasNext() for an immutable Iterator.\n-\t */\n+    /**\n+     * Test next() and hasNext() for an immutable Iterator.\n+     */\n     public void testUnmodifiableIteratorIteration() {\n         Iterator iterator = getImmutableIterator();\n \n      * Test remove() for an immutable ListIterator.\n      */\n     public void testUnmodifiableListIteratorImmutability() {\n-    \tListIterator listIterator = getImmutableListIterator();\n+        ListIterator listIterator = getImmutableListIterator();\n \n         try {\n             listIterator.remove();\n--- a/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n             // test to make sure the canonical form has been preserved\n             try {\n                 comparator = (Comparator) readExternalFormFromDisk(getCanonicalComparatorName(makeComparator()));\n-        \t} catch (FileNotFoundException exception) {\n+            } catch (FileNotFoundException exception) {\n     \n                 boolean autoCreateSerialized = false;\n     \n-        \t    if(autoCreateSerialized) {\n-    \t          \tcomparator = makeComparator();\n-            \t\tString fileName = getCanonicalComparatorName(comparator);\n-            \t\twriteExternalFormToDisk((Serializable) comparator, fileName);\n-            \t\tfail(\"Serialized form could not be found.  A serialized version \" +\n-            \t\t     \"has now been written (and should be added to SVN): \" + fileName);\n+                if(autoCreateSerialized) {\n+                    comparator = makeComparator();\n+                    String fileName = getCanonicalComparatorName(comparator);\n+                    writeExternalFormToDisk((Serializable) comparator, fileName);\n+                    fail(\"Serialized form could not be found.  A serialized version \" +\n+                         \"has now been written (and should be added to SVN): \" + fileName);\n                 } else {\n                     fail(\"The Serialized form could be located to test serialization \" +\n                         \"compatibility: \" + exception.getMessage());\n--- a/src/test/org/apache/commons/collections/comparators/TestNullComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestNullComparator.java\n      **/\n     public static class TestNullComparator1 extends TestNullComparator {\n \n-\tpublic TestNullComparator1(String testName) {\n-\t    super(testName);\n-\t}\n+        public TestNullComparator1(String testName) {\n+            super(testName);\n+        }\n \n     public Comparator makeComparator() {\n-\t    return new NullComparator();\n-\t}\n-\t\n+            return new NullComparator();\n+        }\n+        \n     public List getComparableObjectsOrdered() {\n         List list = new LinkedList();\n-\t    list.add(new Integer(1));\n-\t    list.add(new Integer(2));\n-\t    list.add(new Integer(3));\n-\t    list.add(new Integer(4));\n-\t    list.add(new Integer(5));\n-\t    list.add(null);\n-\t    return list;\n-\t}\n+            list.add(new Integer(1));\n+            list.add(new Integer(2));\n+            list.add(new Integer(3));\n+            list.add(new Integer(4));\n+            list.add(new Integer(5));\n+            list.add(null);\n+            return list;\n+        }\n \n-\tpublic String getCanonicalComparatorName(Object object) {\n-\t    return super.getCanonicalComparatorName(object) + \"1\";\n-\t}\n+        public String getCanonicalComparatorName(Object object) {\n+            return super.getCanonicalComparatorName(object) + \"1\";\n+        }\n     }\n \n     /**\n--- a/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n         assertEquals( \"Iteration next index\", 1, iter.nextIndex() );\n         assertEquals( \"Iteration previous index\", 0, iter.previousIndex() );\n \n-    \ttry {\n-    \t    iter.next();\n-    \t} catch (Exception e) {\n-    \t  assertTrue(\"NoSuchElementException must be thrown\", \n-    \t\t e.getClass().equals((new NoSuchElementException()).getClass()));\n-    \t}\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+          assertTrue(\"NoSuchElementException must be thrown\", \n+             e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n         iter.previous();\n         try {\n             iter.previous();\n--- a/src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java\n+++ b/src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java\n     }\n     \n     static class SystemHashCodeSimulatingKey implements Serializable {\n-    \t\n-\t\tprivate static final long serialVersionUID = 1L;\n-\t\tprivate final String name;\n-    \tprivate int hashCode = 1;\n-\n-\t\tpublic SystemHashCodeSimulatingKey(String name)\n-\t\t{\n-\t\t\tthis.name = name;\n-\t\t}\n-\n-\t\tpublic boolean equals(Object obj)\n-\t\t{\n-\t\t\treturn obj instanceof SystemHashCodeSimulatingKey \n-\t\t\t\t&& name.equals(((SystemHashCodeSimulatingKey)obj).name);\n-\t\t}\n-\n-\t\tpublic int hashCode()\n-\t\t{\n-\t\t\treturn hashCode;\n-\t\t}\n-\n-\t\tprivate Object readResolve() {\n-\t\t\thashCode=2; // simulate different hashCode after deserialization in another process\n-\t\t\treturn this;\n-\t\t}\n+\n+        private static final long serialVersionUID = 1L;\n+        private final String name;\n+        private int hashCode = 1;\n+\n+        public SystemHashCodeSimulatingKey(String name)\n+        {\n+            this.name = name;\n+        }\n+\n+        public boolean equals(Object obj)\n+        {\n+            return obj instanceof SystemHashCodeSimulatingKey \n+                && name.equals(((SystemHashCodeSimulatingKey)obj).name);\n+        }\n+\n+        public int hashCode()\n+        {\n+            return hashCode;\n+        }\n+\n+        private Object readResolve() {\n+            hashCode=2; // simulate different hashCode after deserialization in another process\n+            return this;\n+        }\n     }\n     \n     public void testEqualsAfterSerialization() throws IOException, ClassNotFoundException\n-\t{\n+    {\n         SystemHashCodeSimulatingKey sysKey = new SystemHashCodeSimulatingKey(\"test\");\n-\t\tMultiKey mk = new MultiKey(ONE, sysKey);\n+        MultiKey mk = new MultiKey(ONE, sysKey);\n         Map map = new HashMap();\n         map.put(mk, TWO);\n \n         assertEquals(2, sysKey.hashCode()); // different hashCode now\n \n         MultiKey mk2 = new MultiKey(ONE, sysKey);\n-        assertEquals(TWO, map2.get(mk2));\t\t\n-\t}\n+        assertEquals(TWO, map2.get(mk2));        \n+    }\n }\n--- a/src/test/org/apache/commons/collections/list/TestTreeList.java\n+++ b/src/test/org/apache/commons/collections/list/TestTreeList.java\n  */\n public class TestTreeList extends AbstractTestList {\n     \n-\tpublic TestTreeList(String name) {\n-\t\tsuper(name);\n-\t}\n+    public TestTreeList(String name) {\n+        super(name);\n+    }\n \n     public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n     }\n \n     //-----------------------------------------------------------------------\n-\tpublic List makeEmptyList() {\n-\t\treturn new TreeList();\n-\t}\n+    public List makeEmptyList() {\n+        return new TreeList();\n+    }\n \n     //-----------------------------------------------------------------------\n-\tpublic void testAddMultiple() {\n-\t\tList l = makeEmptyList();\n-\t\tl.add(\"hugo\");\n-\t\tl.add(\"erna\");\n-\t\tl.add(\"daniel\");\n-\t\tl.add(\"andres\");\n-\t\tl.add(\"harald\");\n-\t\tl.add(0, null);\n-\t\tassertEquals(null, l.get(0));\n-\t\tassertEquals(\"hugo\", l.get(1));\n-\t\tassertEquals(\"erna\", l.get(2));\n-\t\tassertEquals(\"daniel\", l.get(3));\n-\t\tassertEquals(\"andres\", l.get(4));\n-\t\tassertEquals(\"harald\", l.get(5));\n-\t}\n-\n-\tpublic void testRemove() {\n-\t\tList l = makeEmptyList();\n-\t\tl.add(\"hugo\");\n-\t\tl.add(\"erna\");\n-\t\tl.add(\"daniel\");\n-\t\tl.add(\"andres\");\n-\t\tl.add(\"harald\");\n-\t\tl.add(0, null);\n-\t\tint i = 0;\n-\t\tassertEquals(null, l.get(i++));\n-\t\tassertEquals(\"hugo\", l.get(i++));\n-\t\tassertEquals(\"erna\", l.get(i++));\n-\t\tassertEquals(\"daniel\", l.get(i++));\n-\t\tassertEquals(\"andres\", l.get(i++));\n-\t\tassertEquals(\"harald\", l.get(i++));\n-\n-\t\tl.remove(0);\n-\t\ti = 0;\n-\t\tassertEquals(\"hugo\", l.get(i++));\n-\t\tassertEquals(\"erna\", l.get(i++));\n-\t\tassertEquals(\"daniel\", l.get(i++));\n-\t\tassertEquals(\"andres\", l.get(i++));\n-\t\tassertEquals(\"harald\", l.get(i++));\n-\n-\t\ti = 0;\n-\t\tl.remove(1);\n-\t\tassertEquals(\"hugo\", l.get(i++));\n-\t\tassertEquals(\"daniel\", l.get(i++));\n-\t\tassertEquals(\"andres\", l.get(i++));\n-\t\tassertEquals(\"harald\", l.get(i++));\n-\n-\t\ti = 0;\n-\t\tl.remove(2);\n-\t\tassertEquals(\"hugo\", l.get(i++));\n-\t\tassertEquals(\"daniel\", l.get(i++));\n-\t\tassertEquals(\"harald\", l.get(i++));\n-\t}\n-\n-\tpublic void testInsertBefore() {\n-\t\tList l = makeEmptyList();\n-\t\tl.add(\"erna\");\n-\t\tl.add(0, \"hugo\");\n-\t\tassertEquals(\"hugo\", l.get(0));\n-\t\tassertEquals(\"erna\", l.get(1));\n-\t}\n+    public void testAddMultiple() {\n+        List l = makeEmptyList();\n+        l.add(\"hugo\");\n+        l.add(\"erna\");\n+        l.add(\"daniel\");\n+        l.add(\"andres\");\n+        l.add(\"harald\");\n+        l.add(0, null);\n+        assertEquals(null, l.get(0));\n+        assertEquals(\"hugo\", l.get(1));\n+        assertEquals(\"erna\", l.get(2));\n+        assertEquals(\"daniel\", l.get(3));\n+        assertEquals(\"andres\", l.get(4));\n+        assertEquals(\"harald\", l.get(5));\n+    }\n+\n+    public void testRemove() {\n+        List l = makeEmptyList();\n+        l.add(\"hugo\");\n+        l.add(\"erna\");\n+        l.add(\"daniel\");\n+        l.add(\"andres\");\n+        l.add(\"harald\");\n+        l.add(0, null);\n+        int i = 0;\n+        assertEquals(null, l.get(i++));\n+        assertEquals(\"hugo\", l.get(i++));\n+        assertEquals(\"erna\", l.get(i++));\n+        assertEquals(\"daniel\", l.get(i++));\n+        assertEquals(\"andres\", l.get(i++));\n+        assertEquals(\"harald\", l.get(i++));\n+\n+        l.remove(0);\n+        i = 0;\n+        assertEquals(\"hugo\", l.get(i++));\n+        assertEquals(\"erna\", l.get(i++));\n+        assertEquals(\"daniel\", l.get(i++));\n+        assertEquals(\"andres\", l.get(i++));\n+        assertEquals(\"harald\", l.get(i++));\n+\n+        i = 0;\n+        l.remove(1);\n+        assertEquals(\"hugo\", l.get(i++));\n+        assertEquals(\"daniel\", l.get(i++));\n+        assertEquals(\"andres\", l.get(i++));\n+        assertEquals(\"harald\", l.get(i++));\n+\n+        i = 0;\n+        l.remove(2);\n+        assertEquals(\"hugo\", l.get(i++));\n+        assertEquals(\"daniel\", l.get(i++));\n+        assertEquals(\"harald\", l.get(i++));\n+    }\n+\n+    public void testInsertBefore() {\n+        List l = makeEmptyList();\n+        l.add(\"erna\");\n+        l.add(0, \"hugo\");\n+        assertEquals(\"hugo\", l.get(0));\n+        assertEquals(\"erna\", l.get(1));\n+    }\n \n     public void testIndexOf() {\n         List l = makeEmptyList();", "timestamp": 1242794899, "metainfo": ""}