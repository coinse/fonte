{"sha": "ac2fee884533d3c44acb7a1241b2fefef2da5fba", "log": "More work around the MapIterator   ", "commit": "\n--- a/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n+++ b/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.6 2003/11/01 18:47:18 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.7 2003/11/02 15:27:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.AbstractCollectionDecorator;\n import org.apache.commons.collections.decorators.AbstractIteratorDecorator;\n import org.apache.commons.collections.decorators.AbstractMapEntryDecorator;\n+import org.apache.commons.collections.iterators.MapIterator;\n+import org.apache.commons.collections.iterators.ResetableMapIterator;\n+import org.apache.commons.collections.pairs.AbstractMapEntry;\n \n /**\n  * Abstract <code>BidiMap</code> implemented using two maps.\n  * <code>createMap</code> method.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: AbstractDualBidiMap.java,v 1.6 2003/11/01 18:47:18 scolebourne Exp $\n+ * @version $Id: AbstractDualBidiMap.java,v 1.7 2003/11/02 15:27:53 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n \n     // BidiMap\n     //-----------------------------------------------------------------------\n+    /**\n+     * Obtains a <code>MapIterator</code> over the map.\n+     * The iterator implements <code>ResetableMapIterator</code>.\n+     * This implementation relies on the entrySet iterator.\n+     * \n+     * @return a map iterator\n+     */\n     public MapIterator mapIterator() {\n         return new BidiMapIterator(this);\n     }\n     /**\n      * Inner class MapIterator.\n      */\n-    protected static class BidiMapIterator extends AbstractIteratorDecorator implements MapIterator {\n+    protected static class BidiMapIterator implements ResetableMapIterator {\n         \n         protected final AbstractDualBidiMap map;\n+        protected Iterator iterator;\n         private Map.Entry last = null;\n         private boolean canRemove = false;\n         \n         protected BidiMapIterator(AbstractDualBidiMap map) {\n-            super(map.maps[0].entrySet().iterator());\n+            super();\n             this.map = map;\n+            this.iterator = map.maps[0].entrySet().iterator();\n+        }\n+        \n+        public boolean hasNext() {\n+            return iterator.hasNext();\n         }\n         \n         public Object next() {\n-            last = new MapEntry((Map.Entry) super.next(), map);\n+            last = new MapEntry((Map.Entry) iterator.next(), map);\n             canRemove = true;\n             return last.getKey();\n         }\n             }\n             // store value as remove may change the entry in the decorator (eg.TreeMap)\n             Object value = last.getValue();\n-            super.remove();\n+            iterator.remove();\n             map.maps[1].remove(value);\n             last = null;\n             canRemove = false;\n             }\n             return map.put(last.getKey(), value);\n         }\n+        \n+        public void reset() {\n+            iterator = map.maps[0].entrySet().iterator();\n+            last = null;\n+            canRemove = false;\n+        }\n+        \n+        public Map.Entry asMapEntry() {\n+            return new AbstractMapEntry(getKey(), getValue()) {\n+                public Object setValue(Object value) {\n+                    BidiMapIterator.this.setValue(value);\n+                    return super.setValue(value);\n+                }\n+            };\n+        }\n+        \n+        public String toString() {\n+            if (last == null) {\n+                return \"MapIterator[\" + getKey() + \"=\" + getValue() + \"]\";\n+            } else {\n+                return \"MapIterator[]\";\n+            }\n+        }\n     }\n     \n }\n--- a/src/java/org/apache/commons/collections/BidiMap.java\n+++ b/src/java/org/apache/commons/collections/BidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.4 2003/10/29 00:06:25 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.5 2003/11/02 15:27:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.Map;\n \n+import org.apache.commons.collections.iterators.MapIterator;\n+\n /**\n  * Defines a map that allows bidirectional lookup between key and values.\n  * <p>\n  * \n  * @see org.apache.commons.collections.DualHashBidiMap\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/10/29 00:06:25 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/02 15:27:53 $\n  *\n  * @author Stephen Colebourne\n  */\n      * <pre>\n      * BidiMap map = new DualHashBidiMap();\n      * MapIterator it = map.mapIterator();\n-     * Object key = it.next();\n-     * Object value = it.getValue();\n-     * it.setValue(\"newValue\");\n+     * while (it.hasNext()) {\n+     *   Object key = it.next();\n+     *   Object value = it.getValue();\n+     *   it.setValue(\"newValue\");\n+     * }\n      * </pre>\n      * \n      * @return a map iterator\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.13 2003/09/29 22:44:14 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.14 2003/11/02 15:27:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.ListIterator;\n import java.util.Map;\n import java.util.NoSuchElementException;\n+import java.util.Map.Entry;\n \n import org.apache.commons.collections.iterators.ArrayIterator;\n import org.apache.commons.collections.iterators.ArrayListIterator;\n import org.apache.commons.collections.iterators.ObjectArrayListIterator;\n import org.apache.commons.collections.iterators.ResetableIterator;\n import org.apache.commons.collections.iterators.ResetableListIterator;\n+import org.apache.commons.collections.iterators.ResetableMapIterator;\n import org.apache.commons.collections.iterators.SingletonIterator;\n import org.apache.commons.collections.iterators.SingletonListIterator;\n import org.apache.commons.collections.iterators.TransformIterator;\n  * {@link org.apache.commons.collections.iterators} subpackage.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.13 $ $Date: 2003/09/29 22:44:14 $\n+ * @version $Revision: 1.14 $ $Date: 2003/11/02 15:27:53 $\n  * \n  * @author Stephen Colebourne\n  * @author Phil Steitz\n     /**\n      * An iterator over no elements\n      */    \n-    public static final Iterator EMPTY_ITERATOR = new EmptyIterator();\n+    public static final ResetableIterator EMPTY_ITERATOR = new EmptyIterator();\n     /**\n      * A list iterator over no elements\n      */    \n-    public static final ListIterator EMPTY_LIST_ITERATOR = new EmptyListIterator();\n+    public static final ResetableListIterator EMPTY_LIST_ITERATOR = new EmptyListIterator();\n+    /**\n+     * A map iterator over no elements\n+     */    \n+    public static final ResetableMapIterator EMPTY_MAP_ITERATOR = new EmptyMapIterator();\n \n     /**\n      * Prevents instantiation.\n      * @return  an iterator over nothing\n      */\n     public static ResetableIterator emptyIterator() {\n-        return (ResetableIterator) EMPTY_ITERATOR;\n+        return EMPTY_ITERATOR;\n     }\n \n     /**\n      * @return  a list iterator over nothing\n      */\n     public static ResetableListIterator emptyListIterator() {\n-        return (ResetableListIterator) EMPTY_LIST_ITERATOR;\n+        return EMPTY_LIST_ITERATOR;\n+    }\n+\n+    /**\n+     * Gets an empty map iterator.\n+     * <p>\n+     * This iterator is a valid map iterator object that will iterate \n+     * over nothing.\n+     *\n+     * @return  a list iterator over nothing\n+     */\n+    public static ResetableMapIterator emptyMapIterator() {\n+        return EMPTY_MAP_ITERATOR;\n     }\n \n     /**\n         }\n     }\n     \n+    //-----------------------------------------------------------------------\n     /**\n      * EmptyIterator class\n      */\n     static class EmptyIterator implements ResetableIterator {\n         \n-        /**\n-         * @see java.util.Iterator#hasNext()\n-         */\n+        EmptyIterator() {\n+            super();\n+        }\n+\n         public boolean hasNext() {\n             return false;\n         }\n \n-        /**\n-         * @see java.util.Iterator#next()\n-         */\n         public Object next() {\n-            throw new NoSuchElementException();\n-        }\n-\n-        /**\n-         * @see java.util.Iterator#remove()\n-         */\n+            throw new NoSuchElementException(\"Iterator contains no elements\");\n+        }\n+\n         public void remove() {\n-            throw new UnsupportedOperationException(\"remove() not supported for empty Iterator\");\n+            throw new IllegalStateException(\"Iterator contains no elements\");\n         }\n         \n-        /**\n-         * Reset the iterator\n-         */\n         public void reset() {\n             // do nothing\n         }\n-\n-    }\n-    \n+    }\n+    \n+    //-----------------------------------------------------------------------    \n     /**\n      * EmptyListIterator class\n      */\n     static class EmptyListIterator extends EmptyIterator implements ResetableListIterator {\n         \n-        /**\n-         * @see java.util.ListIterator#hasPrevious()\n-         */\n+        EmptyListIterator() {\n+            super();\n+        }\n+\n         public boolean hasPrevious() {\n             return false;\n         }\n \n-        /**\n-         * @see java.util.ListIterator#previous()\n-         */\n         public Object previous() {\n-            throw new NoSuchElementException();\n-        }\n-\n-        /**\n-         * @see java.util.ListIterator#nextIndex()\n-         */\n+            throw new NoSuchElementException(\"Iterator contains no elements\");\n+        }\n+\n         public int nextIndex() {\n             return 0;\n         }\n \n-        /**\n-         * @see java.util.ListIterator#previousIndex()\n-         */\n         public int previousIndex() {\n             return -1;\n         }\n \n-        /**\n-         * @see java.util.ListIterator#add(Object)\n-         */\n         public void add(Object o) {\n             throw new UnsupportedOperationException(\"add() not supported for empty Iterator\");\n         }\n \n-        /**\n-         * @see java.util.ListIterator#set(Object)\n-         */\n         public void set(Object o) {\n-            throw new UnsupportedOperationException(\"set() not supported for empty Iterator\");\n-        }\n-\n-    }\n-\n+            throw new IllegalStateException(\"Iterator contains no elements\");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    /**\n+     * EmptyMapIterator class\n+     */\n+    static class EmptyMapIterator extends EmptyIterator implements ResetableMapIterator {\n+        \n+        EmptyMapIterator() {\n+            super();\n+        }\n+\n+        public Object getKey() {\n+            throw new IllegalStateException(\"Iterator contains no elements\");\n+        }\n+\n+        public Object getValue() {\n+            throw new IllegalStateException(\"Iterator contains no elements\");\n+        }\n+\n+        public Object setValue(Object value) {\n+            throw new IllegalStateException(\"Iterator contains no elements\");\n+        }\n+        \n+        public Entry asMapEntry() {\n+            throw new IllegalStateException(\"Iterator contains no elements\");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------    \n     /**\n      * A wrapper for an {@link java.util.Iterator} which makes it immutable. All\n      * calls are passed through to the delegate. The {@link #remove()} method\n \n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * An unmodifiable resetable iterator.\n      *\n \n     }\n     \n+    //-----------------------------------------------------------------------\n     /**\n      * A wrapper for an {@link java.util.ListIterator} which makes it immutable.\n      * All calls are passed through to the delegate. The {@link #remove()},\n         }\n     }\n     \n+    //-----------------------------------------------------------------------\n     /**\n      * An unmodifiable resetable list iterator.\n      *\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/MapIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/MapIterator.java,v 1.1 2003/11/02 15:27:54 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * Defines an iterator that operates over a <code>Map</code>.\n+ * <p>\n+ * This iterator is a special version designed for maps. It is much more\n+ * efficient to use this rather than an entry set iterator where the option\n+ * is available.\n+ * <p>\n+ * A map that provides this interface may not hold the data internally using\n+ * Map Entry objects, thus this interface can avoid lots of object creation.\n+ * <p>\n+ * In use, this iterator iterates through the keys in the map. After each call\n+ * to <code>next()</code>, the <code>getValue()</code> method provides direct\n+ * access to the value. The value can also be set using <code>setValue()</code>.\n+ * <pre>\n+ * MapIterator it = map.mapIterator();\n+ * while (it.hasNext()) {\n+ *   Object key = it.next();\n+ *   Object value = it.getValue();\n+ *   it.setValue(newValue);\n+ * }\n+ * </pre>\n+ *  \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/02 15:27:54 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public interface MapIterator extends Iterator {\n+    \n+    /**\n+     * Checks to see if there are more entries still to be iterated.\n+     *\n+     * @return <code>true</code> if the iterator has more elements\n+     */\n+    boolean hasNext();\n+\n+    /**\n+     * Gets the next <em>key</em> from the <code>Map</code>.\n+     *\n+     * @return the next key in the iteration\n+     * @throws NoSuchElementException if the iteration is finished\n+     */\n+    Object next();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the current key, which is the key returned by the last call\n+     * to <code>next()</code>.\n+     *\n+     * @return the current key\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     */\n+    Object getKey();\n+\n+    /**\n+     * Gets the current value, which is the value associated with the last key\n+     * returned by <code>next()</code>.\n+     *\n+     * @return the current value\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     */\n+    Object getValue();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the last returned key-value pair from the underlying <code>Map</code>\n+     * as a Map Entry instance.\n+     * <p>\n+     * The returned entry must not change when <code>next</code> is called.\n+     * Changes made to the entry via <code>setValue</code> must change the map.\n+     * \n+     * @return the last return key-value pair as an independent Map Entry\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     * @throws IllegalStateException if <code>remove()</code> has been called since the\n+     *  last call to <code>next()</code>\n+     */\n+    Map.Entry asMapEntry();\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Removes the last returned key from the underlying <code>Map</code> (optional operation).\n+     * <p>\n+     * This method can be called once per call to <code>next()</code>.\n+     *\n+     * @throws UnsupportedOperationException if remove is not supported by the map\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     * @throws IllegalStateException if <code>remove()</code> has already been called\n+     *  since the last call to <code>next()</code>\n+     */\n+    void remove();\n+    \n+    /**\n+     * Sets the value associated with the current key (optional operation).\n+     *\n+     * @param value  the new value\n+     * @return the previous value\n+     * @throws UnsupportedOperationException if setValue is not supported by the map\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     * @throws IllegalStateException if <code>remove()</code> has been called since the\n+     *  last call to <code>next()</code>\n+     */\n+    Object setValue(Object value);\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ResetableMapIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/ResetableMapIterator.java,v 1.1 2003/11/02 15:27:54 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+/** \n+ * Interface implemented by those map iterators that can be reset back \n+ * to an initial state.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/02 15:27:54 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public interface ResetableMapIterator extends MapIterator, ResetableIterator {\n+\n+    /**\n+     * Resets the iterator back to the position at which the iterator\n+     * was created.\n+     */\n+    public void reset();\n+\n+}\n--- a/src/test/org/apache/commons/collections/AbstractTestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestBidiMap.java,v 1.4 2003/11/01 18:47:18 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestBidiMap.java,v 1.5 2003/11/02 15:27:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n import java.util.Set;\n \n+import org.apache.commons.collections.iterators.MapIterator;\n+\n /**\n  * Abstract test class for {@link BidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.4 $ $Date: 2003/11/01 18:47:18 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/02 15:27:54 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n         }\n         try {\n             it.remove();\n-        } catch (UnsupportedOperationException ex) {\n         } catch (IllegalStateException ex) {\n         }\n         try {\n             it.setValue(null);\n-        } catch (UnsupportedOperationException ex) {\n+        } catch (IllegalStateException ex) {\n+        }\n+        try {\n+            it.asMapEntry();\n         } catch (IllegalStateException ex) {\n         }\n         verify();\n         MapIterator it = bidi.mapIterator();\n         \n         assertEquals(true, it.hasNext());\n+        Map.Entry lastEntry = null;\n+        Object lastKey = null;\n+        Object lastValue = null;\n         while (it.hasNext()) {\n             Object key = it.next();\n             assertSame(key, it.getKey());\n         \n             Object value = it.getValue();\n             assertSame(bidi.get(key), value);\n+            \n+            Map.Entry entry = it.asMapEntry();\n+            assertTrue(entry != lastEntry);\n+            if (lastKey != null && lastValue != null) {\n+                assertSame(lastKey, lastEntry.getKey());\n+                assertSame(lastValue, lastEntry.getValue());\n+            }\n+            assertSame(key, entry.getKey());\n+            assertSame(value, entry.getValue());\n+            \n+            lastEntry = entry;\n+            lastKey = key;\n+            lastValue = value;\n         }\n         verify();\n     }\n--- a/src/test/org/apache/commons/collections/TestIteratorUtils.java\n+++ b/src/test/org/apache/commons/collections/TestIteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestIteratorUtils.java,v 1.7 2003/10/05 21:17:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestIteratorUtils.java,v 1.8 2003/11/02 15:27:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests for IteratorUtils.\n  * \n- * @version $Revision: 1.7 $ $Date: 2003/10/05 21:17:40 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/02 15:27:54 $\n  * \n  * @author Unknown\n  */\n         return IteratorUtils.unmodifiableListIterator(list.listIterator());\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test empty iterator\n+     */\n+    public void testEmptyIterator() {\n+        assertEquals(false, IteratorUtils.EMPTY_ITERATOR.hasNext());\n+        IteratorUtils.EMPTY_ITERATOR.reset();\n+        assertSame(IteratorUtils.EMPTY_ITERATOR, IteratorUtils.EMPTY_ITERATOR);\n+        assertSame(IteratorUtils.EMPTY_ITERATOR, IteratorUtils.emptyIterator());\n+        try {\n+            IteratorUtils.EMPTY_ITERATOR.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_ITERATOR.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test empty list iterator\n+     */\n+    public void testEmptyListIterator() {\n+        assertEquals(false, IteratorUtils.EMPTY_LIST_ITERATOR.hasNext());\n+        assertEquals(0, IteratorUtils.EMPTY_LIST_ITERATOR.nextIndex());\n+        assertEquals(-1, IteratorUtils.EMPTY_LIST_ITERATOR.previousIndex());\n+        IteratorUtils.EMPTY_LIST_ITERATOR.reset();\n+        assertSame(IteratorUtils.EMPTY_LIST_ITERATOR, IteratorUtils.EMPTY_LIST_ITERATOR);\n+        assertSame(IteratorUtils.EMPTY_LIST_ITERATOR, IteratorUtils.emptyListIterator());\n+        try {\n+            IteratorUtils.EMPTY_LIST_ITERATOR.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_LIST_ITERATOR.previous();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_LIST_ITERATOR.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_LIST_ITERATOR.set(null);\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_LIST_ITERATOR.add(null);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test empty map iterator\n+     */\n+    public void testEmptyMapIterator() {\n+        assertEquals(false, IteratorUtils.EMPTY_MAP_ITERATOR.hasNext());\n+        IteratorUtils.EMPTY_MAP_ITERATOR.reset();\n+        assertSame(IteratorUtils.EMPTY_MAP_ITERATOR, IteratorUtils.EMPTY_MAP_ITERATOR);\n+        assertSame(IteratorUtils.EMPTY_MAP_ITERATOR, IteratorUtils.emptyMapIterator());\n+        try {\n+            IteratorUtils.EMPTY_MAP_ITERATOR.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_MAP_ITERATOR.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_MAP_ITERATOR.getKey();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_MAP_ITERATOR.getValue();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_MAP_ITERATOR.setValue(null);\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_MAP_ITERATOR.asMapEntry();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n \t/**\n \t * Test next() and hasNext() for an immutable Iterator.\n \t */", "timestamp": 1067786874, "metainfo": ""}