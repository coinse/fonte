{"sha": "f208babdc092ef6de26126fa81f20f47c49cabc0", "log": "Applying some of the refactorings from COLLECTIONS-312  ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n      * @since Commons Collections 3.2\n      */\n     public static <T> boolean addIgnoreNull(Collection<T> collection, T object) {\n-        return (object == null ? false : collection.add(object));\n+        return (object != null && collection.add(object));\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n                 }\n \n                 throw new IllegalStateException(\n-                    \"infinite loop in property interpolation of \" + initialBase + \": \" + priorVariableSb.toString());\n+                    \"infinite loop in property interpolation of \" + initialBase + \": \" + priorVariableSb);\n             }\n             // otherwise, add this variable to the interpolation list.\n             else {\n \n                     if (includeProperty != null && key.equalsIgnoreCase(includeProperty)) {\n                         // Recursively load properties files.\n-                        File file = null;\n+                        File file;\n \n                         if (value.startsWith(fileSeparator)) {\n                             // We have an absolute path so we'll use this\n             if (equalSign > 0) {\n                 String pkey = token.substring(0, equalSign).trim();\n                 String pvalue = token.substring(equalSign + 1).trim();\n-                props.put(pkey, pvalue);\n+                props.setProperty(pkey, pvalue);\n             } else {\n                 throw new IllegalArgumentException('\\'' + token + \"' does not contain \" + \"an equals sign\");\n             }\n             \n         } else if (value instanceof String) {\n             String s = testBoolean((String) value);\n-            Boolean b = new Boolean(s);\n+            Boolean b = Boolean.valueOf(s);\n             super.put(key, b);\n             return b;\n             \n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n                     return (Boolean) answer;\n                 }\n                 if (answer instanceof String) {\n-                    return new Boolean((String) answer);\n+                    return Boolean.valueOf((String) answer);\n                 }\n                 if (answer instanceof Number) {\n                     Number n = (Number) answer;\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n      * Inner class iterator for the Bag.\n      */\n     static class BagIterator<E> implements Iterator<E> {\n-        private AbstractMapBag<E> parent;\n-        private Iterator<Map.Entry<E, MutableInteger>> entryIterator;\n+        private final AbstractMapBag<E> parent;\n+        private final Iterator<Map.Entry<E, MutableInteger>> entryIterator;\n         private Map.Entry<E, MutableInteger> current;\n         private int itemCount;\n         private final int mods;\n--- a/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n      * @param reverse    false = forward sort; true = reverse sort\n      */\n     public ComparatorChain(Comparator<E> comparator, boolean reverse) {\n-        comparatorChain = new ArrayList<Comparator<E>>();\n+        comparatorChain = new ArrayList<Comparator<E>>(1);\n         comparatorChain.add(comparator);\n         orderingBits = new BitSet(1);\n         if (reverse == true) {\n--- a/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n     private static final long serialVersionUID = 2858887242028539265L;\n \n     /** The comparator being decorated. */\n-    private Comparator<E> comparator;\n+    private final Comparator<E> comparator;\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/java/org/apache/commons/collections/iterators/EnumerationIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/EnumerationIterator.java\n public class EnumerationIterator<E> implements Iterator<E> {\n     \n     /** The collection to remove elements from */\n-    private Collection<? super E> collection;\n+    private final Collection<? super E> collection;\n     /** The enumeration being converted */\n     private Enumeration<? extends E> enumeration;\n     /** The last object retrieved */\n--- a/src/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n     /** The root object in the tree */\n     protected E root;\n     /** The transformer to use */\n-    protected Transformer<? super E, ? extends E> transformer;\n+    protected final Transformer<? super E, ? extends E> transformer;\n \n     /** Whether there is another element in the iteration */\n     protected boolean hasNext = false;\n--- a/src/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java\n public final class UnmodifiableIterator<E> implements Iterator<E>, Unmodifiable {\n \n     /** The iterator being decorated */\n-    private Iterator<E> iterator;\n+    private final Iterator<E> iterator;\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n public final class UnmodifiableMapIterator<K, V> implements MapIterator<K, V>, Unmodifiable {\n \n     /** The iterator being decorated */\n-    private MapIterator<K, V> iterator;\n+    private final MapIterator<K, V> iterator;\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/java/org/apache/commons/collections/list/SetUniqueList.java\n+++ b/src/java/org/apache/commons/collections/list/SetUniqueList.java\n \n     @SuppressWarnings(\"unchecked\")\n     protected Set<E> createSetBasedOnList(Set<E> set, List<E> list) {\n-        Set<E> subSet = null;\n+        Set<E> subSet;\n         if (set.getClass().equals(HashSet.class)) {\n-            subSet = new HashSet<E>();\n+            subSet = new HashSet<E>(list.size());\n         } else {\n             try {\n                 subSet = (Set<E>) set.getClass().newInstance();\n--- a/src/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n      */\n     static class SoftRef<T> extends SoftReference<T> {\n         /** the hashCode of the key (even if the reference points to a value) */\n-        private int hash;\n+        private final int hash;\n \n         public SoftRef(int hash, T r, ReferenceQueue<? super T> q) {\n             super(r, q);\n      */\n     static class WeakRef<T> extends WeakReference<T> {\n         /** the hashCode of the key (even if the reference points to a value) */\n-        private int hash;\n+        private final int hash;\n \n         public WeakRef(int hash, T r, ReferenceQueue<? super T> q) {\n             super(r, q);", "timestamp": 1276979420, "metainfo": ""}