{"sha": "fb08d55cbe50160fcd7184845ef723f813b7ec84", "log": "Add unmodifiable multiset decorator, abstract base test.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSet.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.multiset;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+import org.apache.commons.collections4.MultiSet;\n+import org.apache.commons.collections4.Unmodifiable;\n+import org.apache.commons.collections4.iterators.UnmodifiableIterator;\n+import org.apache.commons.collections4.set.UnmodifiableSet;\n+\n+/**\n+ * Decorates another {@link MultiSet} to ensure it can't be altered.\n+ * <p>\n+ * Attempts to modify it will result in an UnsupportedOperationException.\n+ *\n+ * @since 4.1\n+ * @version $Id$\n+ */\n+public final class UnmodifiableMultiSet<E>\n+        extends AbstractMultiSetDecorator<E> implements Unmodifiable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 20150611L;\n+\n+    /**\n+     * Factory method to create an unmodifiable multiset.\n+     * <p>\n+     * If the multiset passed in is already unmodifiable, it is returned.\n+     *\n+     * @param <E>  the type of the elements in the multiset\n+     * @param multiset  the multiset to decorate, may not be null\n+     * @return an unmodifiable MultiSet\n+     * @throws NullPointerException if multiset is null\n+     */\n+    public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset) {\n+        if (multiset instanceof Unmodifiable) {\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final MultiSet<E> tmpMultiSet = (MultiSet<E>) multiset;\n+            return tmpMultiSet;\n+        }\n+        return new UnmodifiableMultiSet<E>(multiset);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     *\n+     * @param multiset  the multiset to decorate, may not be null\n+     * @throws NullPointerException if multiset is null\n+     */\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    private UnmodifiableMultiSet(final MultiSet<? extends E> multiset) {\n+        super((MultiSet<E>) multiset);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the collection out using a custom routine.\n+     *\n+     * @param out  the output stream\n+     * @throws IOException\n+     */\n+    private void writeObject(final ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(decorated());\n+    }\n+\n+    /**\n+     * Read the collection in using a custom routine.\n+     *\n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws ClassCastException if deserialised object has wrong type\n+     */\n+    @SuppressWarnings(\"unchecked\") // will throw CCE, see Javadoc\n+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        setCollection((Collection<E>) in.readObject());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public Iterator<E> iterator() {\n+        return UnmodifiableIterator.<E> unmodifiableIterator(decorated().iterator());\n+    }\n+\n+    @Override\n+    public boolean add(final E object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean addAll(final Collection<? extends E> coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean remove(final Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean removeAll(final Collection<?> coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean retainAll(final Collection<?> coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public int setCount(E object, int count) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int add(final E object, final int count) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int remove(final Object object, final int count) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Set<E> uniqueSet() {\n+        final Set<E> set = decorated().uniqueSet();\n+        return UnmodifiableSet.unmodifiableSet(set);\n+    }\n+\n+    @Override\n+    public Set<MultiSet.Entry<E>> entrySet() {\n+        final Set<MultiSet.Entry<E>> set = decorated().entrySet();\n+        return UnmodifiableSet.unmodifiableSet(set);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.multiset;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+\n+import org.apache.commons.collections4.Bag;\n+import org.apache.commons.collections4.BulkTest;\n+import org.apache.commons.collections4.MultiSet;\n+import org.apache.commons.collections4.collection.AbstractCollectionTest;\n+import org.apache.commons.collections4.set.AbstractSetTest;\n+\n+/**\n+ * Abstract test class for {@link org.apache.commons.collections4.MultiSet MultiSet}\n+ * methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeObject} method.\n+ * <p>\n+ * If your bag fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your bag fails.\n+ * <p>\n+ * This abstract test class does wrap the concrete bag implementation\n+ * with such a decorator, see the overridden {@link #resetEmpty()} and\n+ * {@link #resetFull()} methods.\n+ * <p>\n+ * In addition to the generic collection tests (prefix testCollection) inherited\n+ * from AbstractCollectionTest, there are test methods that test the \"normal\" Bag\n+ * interface (prefix testBag). For Bag specific tests use the {@link #makeObject()} and \n+ * {@link #makeFullCollection()} methods instead of {@link #resetEmpty()} and resetFull().\n+ *\n+ * @version $Id$\n+ */\n+public abstract class AbstractMultiSetTest<T> extends AbstractCollectionTest<T> {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param testName  the test class name\n+     */\n+    public AbstractMultiSetTest(final String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns an empty {@link ArrayList}.\n+     */\n+    @Override\n+    public Collection<T> makeConfirmedCollection() {\n+        final ArrayList<T> list = new ArrayList<T>();\n+        return list;\n+    }\n+\n+    /**\n+     * Returns a full collection.\n+     */\n+    @Override\n+    public Collection<T> makeConfirmedFullCollection() {\n+        final Collection<T> coll = makeConfirmedCollection();\n+        coll.addAll(Arrays.asList(getFullElements()));\n+        return coll;\n+    }\n+\n+    /**\n+     * Return a new, empty multiset to used for testing.\n+     *\n+     * @return the multiset to be tested\n+     */\n+    @Override\n+    public abstract MultiSet<T> makeObject();\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public MultiSet<T> makeFullCollection() {\n+        final MultiSet<T> multiset = makeObject();\n+        multiset.addAll(Arrays.asList(getFullElements()));\n+        return multiset;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    @Override\n+    public void resetEmpty() {\n+        this.setCollection(makeObject());\n+        this.setConfirmed(makeConfirmedCollection());\n+    }\n+\n+    @Override\n+    public void resetFull() {\n+        this.setCollection(makeFullCollection());\n+        this.setConfirmed(makeConfirmedFullCollection());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the {@link #collection} field cast to a {@link MultiSet}.\n+     *\n+     * @return the collection field as a MultiSet\n+     */\n+    @Override\n+    public MultiSet<T> getCollection() {\n+        return (MultiSet<T>) super.getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagAdd() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        final MultiSet<T> multiset = makeObject();\n+        multiset.add((T) \"A\");\n+        assertTrue(\"Should contain 'A'\", multiset.contains(\"A\"));\n+        assertEquals(\"Should have count of 1\", 1, multiset.getCount(\"A\"));\n+        multiset.add((T) \"A\");\n+        assertTrue(\"Should contain 'A'\", multiset.contains(\"A\"));\n+        assertEquals(\"Should have count of 2\", 2, multiset.getCount(\"A\"));\n+        multiset.add((T) \"B\");\n+        assertTrue(multiset.contains(\"A\"));\n+        assertTrue(multiset.contains(\"B\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagEqualsSelf() {\n+        final MultiSet<T> multiset = makeObject();\n+        assertTrue(multiset.equals(multiset));\n+        \n+        if (!isAddSupported()) {\n+            return;\n+        }\n+        \n+        multiset.add((T) \"elt\");\n+        assertTrue(multiset.equals(multiset));\n+        multiset.add((T) \"elt\"); // again\n+        assertTrue(multiset.equals(multiset));\n+        multiset.add((T) \"elt2\");\n+        assertTrue(multiset.equals(multiset));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagRemove() {\n+        if (!isRemoveSupported()) {\n+            return;\n+        }\n+\n+        final MultiSet<T> multiset = makeObject();\n+        multiset.add((T) \"A\");\n+        assertEquals(\"Should have count of 1\", 1, multiset.getCount(\"A\"));\n+        multiset.remove(\"A\");\n+        assertEquals(\"Should have count of 0\", 0, multiset.getCount(\"A\"));\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        assertEquals(\"Should have count of 4\", 4, multiset.getCount(\"A\"));\n+        multiset.remove(\"A\", 0);\n+        assertEquals(\"Should have count of 4\", 4, multiset.getCount(\"A\"));\n+        multiset.remove(\"A\", 2);\n+        assertEquals(\"Should have count of 2\", 2, multiset.getCount(\"A\"));\n+        multiset.remove(\"A\");\n+        assertEquals(\"Should have count of 0\", 0, multiset.getCount(\"A\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagRemoveAll() {\n+        if (!isRemoveSupported()) {\n+            return;\n+        }\n+        \n+        final MultiSet<T> multiset = makeObject();\n+        multiset.add((T) \"A\", 2);\n+        assertEquals(\"Should have count of 2\", 2, multiset.getCount(\"A\"));\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"C\");\n+        assertEquals(\"Should have count of 4\", 4, multiset.size());\n+        final List<String> delete = new ArrayList<String>();\n+        delete.add(\"A\");\n+        delete.add(\"B\");\n+        multiset.removeAll(delete);\n+        assertEquals(\"Should have count of 1\", 1, multiset.getCount(\"A\"));\n+        assertEquals(\"Should have count of 0\", 0, multiset.getCount(\"B\"));\n+        assertEquals(\"Should have count of 1\", 1, multiset.getCount(\"C\"));\n+        assertEquals(\"Should have count of 2\", 2, multiset.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagContains() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+        \n+        final MultiSet<T> multiset = makeObject();\n+\n+        assertEquals(\"Bag does not have at least 1 'A'\", false, multiset.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, multiset.contains(\"B\"));\n+\n+        multiset.add((T) \"A\");  // multiset 1A\n+        assertEquals(\"Bag has at least 1 'A'\", true, multiset.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, multiset.contains(\"B\"));\n+\n+        multiset.add((T) \"A\");  // multiset 2A\n+        assertEquals(\"Bag has at least 1 'A'\", true, multiset.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, multiset.contains(\"B\"));\n+\n+        multiset.add((T) \"B\");  // multiset 2A,1B\n+        assertEquals(\"Bag has at least 1 'A'\", true, multiset.contains(\"A\"));\n+        assertEquals(\"Bag has at least 1 'B'\", true, multiset.contains(\"B\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagContainsAll() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+        \n+        final MultiSet<T> multiset = makeObject();\n+        final List<String> known = new ArrayList<String>();\n+        final List<String> known1A = new ArrayList<String>();\n+        known1A.add(\"A\");\n+        final List<String> known2A = new ArrayList<String>();\n+        known2A.add(\"A\");\n+        known2A.add(\"A\");\n+        final List<String> known1B = new ArrayList<String>();\n+        known1B.add(\"B\");\n+        final List<String> known1A1B = new ArrayList<String>();\n+        known1A1B.add(\"A\");\n+        known1A1B.add(\"B\");\n+\n+        assertEquals(\"Bag containsAll of empty\", true, multiset.containsAll(known));\n+        assertEquals(\"Bag does not containsAll of 1 'A'\", false, multiset.containsAll(known1A));\n+        assertEquals(\"Bag does not containsAll of 2 'A'\", false, multiset.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, multiset.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, multiset.containsAll(known1A1B));\n+\n+        multiset.add((T) \"A\");  // multiset 1A\n+        assertEquals(\"Bag containsAll of empty\", true, multiset.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, multiset.containsAll(known1A));\n+        assertEquals(\"Bag does not containsAll of 2 'A'\", false, multiset.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, multiset.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, multiset.containsAll(known1A1B));\n+\n+        multiset.add((T) \"A\");  // multiset 2A\n+        assertEquals(\"Bag containsAll of empty\", true, multiset.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, multiset.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, multiset.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, multiset.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, multiset.containsAll(known1A1B));\n+\n+        multiset.add((T) \"A\");  // multiset 3A\n+        assertEquals(\"Bag containsAll of empty\", true, multiset.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, multiset.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, multiset.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, multiset.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, multiset.containsAll(known1A1B));\n+\n+        multiset.add((T) \"B\");  // multiset 3A1B\n+        assertEquals(\"Bag containsAll of empty\", true, multiset.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, multiset.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, multiset.containsAll(known2A));\n+        assertEquals(\"Bag containsAll of 1 'B'\", true, multiset.containsAll(known1B));\n+        assertEquals(\"Bag containsAll of 1 'A' 1 'B'\", true, multiset.containsAll(known1A1B));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagSize() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+        \n+        final MultiSet<T> multiset = makeObject();\n+        assertEquals(\"Should have 0 total items\", 0, multiset.size());\n+        multiset.add((T) \"A\");\n+        assertEquals(\"Should have 1 total items\", 1, multiset.size());\n+        multiset.add((T) \"A\");\n+        assertEquals(\"Should have 2 total items\", 2, multiset.size());\n+        multiset.add((T) \"A\");\n+        assertEquals(\"Should have 3 total items\", 3, multiset.size());\n+        multiset.add((T) \"B\");\n+        assertEquals(\"Should have 4 total items\", 4, multiset.size());\n+        multiset.add((T) \"B\");\n+        assertEquals(\"Should have 5 total items\", 5, multiset.size());\n+        multiset.remove(\"A\", 2);\n+        assertEquals(\"Should have 1 'A'\", 1, multiset.getCount(\"A\"));\n+        assertEquals(\"Should have 3 total items\", 3, multiset.size());\n+        multiset.remove(\"B\");\n+        assertEquals(\"Should have 1 total item\", 1, multiset.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagRetainAll() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+        \n+        final MultiSet<T> multiset = makeObject();\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"C\");\n+        final List<String> retains = new ArrayList<String>();\n+        retains.add(\"B\");\n+        retains.add(\"C\");\n+        multiset.retainAll(retains);\n+        assertEquals(\"Should have 2 total items\", 2, multiset.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagIterator() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        final MultiSet<T> multiset = makeObject();\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"B\");\n+        assertEquals(\"Bag should have 3 items\", 3, multiset.size());\n+        final Iterator<T> i = multiset.iterator();\n+\n+        boolean foundA = false;\n+        while (i.hasNext()) {\n+            final String element = (String) i.next();\n+            // ignore the first A, remove the second via Iterator.remove()\n+            if (element.equals(\"A\")) {\n+                if (!foundA) {\n+                    foundA = true;\n+                } else {\n+                    i.remove();\n+                }\n+            }\n+        }\n+\n+        assertTrue(\"Bag should still contain 'A'\", multiset.contains(\"A\"));\n+        assertEquals(\"Bag should have 2 items\", 2, multiset.size());\n+        assertEquals(\"Bag should have 1 'A'\", 1, multiset.getCount(\"A\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagIteratorFail() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        final MultiSet<T> multiset = makeObject();\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"B\");\n+        final Iterator<T> it = multiset.iterator();\n+        it.next();\n+        multiset.remove(\"A\");\n+        try {\n+            it.next();\n+            fail(\"Should throw ConcurrentModificationException\");\n+        } catch (final ConcurrentModificationException e) {\n+            // expected\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagIteratorFailNoMore() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        final MultiSet<T> multiset = makeObject();\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"B\");\n+        final Iterator<T> it = multiset.iterator();\n+        it.next();\n+        it.next();\n+        it.next();\n+        try {\n+            it.next();\n+            fail(\"Should throw NoSuchElementException\");\n+        } catch (final NoSuchElementException ex) {\n+            // expected\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagIteratorFailDoubleRemove() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        final MultiSet<T> multiset = makeObject();\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"B\");\n+        final Iterator<T> it = multiset.iterator();\n+        it.next();\n+        it.next();\n+        assertEquals(3, multiset.size());\n+        it.remove();\n+        assertEquals(2, multiset.size());\n+        try {\n+            it.remove();\n+            fail(\"Should throw IllegalStateException\");\n+        } catch (final IllegalStateException ex) {\n+            // expected\n+        }\n+        assertEquals(2, multiset.size());\n+        it.next();\n+        it.remove();\n+        assertEquals(1, multiset.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagIteratorRemoveProtectsInvariants() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        final MultiSet<T> multiset = makeObject();\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        assertEquals(2, multiset.size());\n+        final Iterator<T> it = multiset.iterator();\n+        assertEquals(\"A\", it.next());\n+        assertEquals(true, it.hasNext());\n+        it.remove();\n+        assertEquals(1, multiset.size());\n+        assertEquals(true, it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertEquals(false, it.hasNext());\n+        it.remove();\n+        assertEquals(0, multiset.size());\n+        assertEquals(false, it.hasNext());\n+\n+        final Iterator<T> it2 = multiset.iterator();\n+        assertEquals(false, it2.hasNext());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagToArray() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        final MultiSet<T> multiset = makeObject();\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"C\");\n+        final Object[] array = multiset.toArray();\n+        int a = 0, b = 0, c = 0;\n+        for (final Object element : array) {\n+            a += element.equals(\"A\") ? 1 : 0;\n+            b += element.equals(\"B\") ? 1 : 0;\n+            c += element.equals(\"C\") ? 1 : 0;\n+        }\n+        assertEquals(2, a);\n+        assertEquals(2, b);\n+        assertEquals(1, c);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagToArrayPopulate() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        final MultiSet<T> multiset = makeObject();\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"C\");\n+        final String[] array = multiset.toArray(new String[0]);\n+        int a = 0, b = 0, c = 0;\n+        for (final String element : array) {\n+            a += element.equals(\"A\") ? 1 : 0;\n+            b += element.equals(\"B\") ? 1 : 0;\n+            c += element.equals(\"C\") ? 1 : 0;\n+        }\n+        assertEquals(2, a);\n+        assertEquals(2, b);\n+        assertEquals(1, c);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagEquals() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        final MultiSet<T> multiset = makeObject();\n+        final MultiSet<T> multiset2 = makeObject();\n+        assertEquals(true, multiset.equals(multiset2));\n+        multiset.add((T) \"A\");\n+        assertEquals(false, multiset.equals(multiset2));\n+        multiset2.add((T) \"A\");\n+        assertEquals(true, multiset.equals(multiset2));\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"C\");\n+        multiset2.add((T) \"A\");\n+        multiset2.add((T) \"B\");\n+        multiset2.add((T) \"B\");\n+        multiset2.add((T) \"C\");\n+        assertEquals(true, multiset.equals(multiset2));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagEqualsHashBag() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        final MultiSet<T> multiset = makeObject();\n+        final MultiSet<T> multiset2 = new HashMultiSet<T>();\n+        assertEquals(true, multiset.equals(multiset2));\n+        multiset.add((T) \"A\");\n+        assertEquals(false, multiset.equals(multiset2));\n+        multiset2.add((T) \"A\");\n+        assertEquals(true, multiset.equals(multiset2));\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"C\");\n+        multiset2.add((T) \"A\");\n+        multiset2.add((T) \"B\");\n+        multiset2.add((T) \"B\");\n+        multiset2.add((T) \"C\");\n+        assertEquals(true, multiset.equals(multiset2));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagHashCode() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        final MultiSet<T> multiset = makeObject();\n+        final MultiSet<T> multiset2 = makeObject();\n+        assertEquals(0, multiset.hashCode());\n+        assertEquals(0, multiset2.hashCode());\n+        assertEquals(multiset.hashCode(), multiset2.hashCode());\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"A\");\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"B\");\n+        multiset.add((T) \"C\");\n+        multiset2.add((T) \"A\");\n+        multiset2.add((T) \"A\");\n+        multiset2.add((T) \"B\");\n+        multiset2.add((T) \"B\");\n+        multiset2.add((T) \"C\");\n+        assertEquals(multiset.hashCode(), multiset2.hashCode());\n+\n+        int total = 0;\n+        total += \"A\".hashCode() ^ 2;\n+        total += \"B\".hashCode() ^ 2;\n+        total += \"C\".hashCode() ^ 1;\n+        assertEquals(total, multiset.hashCode());\n+        assertEquals(total, multiset2.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * Bulk test {@link Bag#uniqueSet()}.  This method runs through all of\n+     * the tests in {@link AbstractSetTest}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the multiset and the other collection views are still valid.\n+     *\n+     * @return a {@link AbstractSetTest} instance for testing the multiset's unique set\n+     */\n+    public BulkTest bulkTestBagUniqueSet() {\n+        return new TestBagUniqueSet();\n+    }\n+\n+    public class TestBagUniqueSet extends AbstractSetTest<T> {\n+        public TestBagUniqueSet() {\n+            super(\"\");\n+        }\n+\n+        @Override\n+        public T[] getFullElements() {\n+            return AbstractMultiSetTest.this.getFullElements();\n+        }\n+\n+        @Override\n+        public T[] getOtherElements() {\n+            return AbstractMultiSetTest.this.getOtherElements();\n+        }\n+\n+        @Override\n+        public Set<T> makeObject() {\n+            return AbstractMultiSetTest.this.makeObject().uniqueSet();\n+        }\n+\n+        @Override\n+        public Set<T> makeFullCollection() {\n+            return AbstractMultiSetTest.this.makeFullCollection().uniqueSet();\n+        }\n+\n+        @Override\n+        public boolean isNullSupported() {\n+            return AbstractMultiSetTest.this.isNullSupported();\n+        }\n+\n+        @Override\n+        public boolean isAddSupported() {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean isRemoveSupported() {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean isTestSerialization() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void resetEmpty() {\n+            AbstractMultiSetTest.this.resetEmpty();\n+            TestBagUniqueSet.this.setCollection(AbstractMultiSetTest.this.getCollection().uniqueSet());\n+            TestBagUniqueSet.this.setConfirmed(new HashSet<T>(AbstractMultiSetTest.this.getConfirmed()));\n+        }\n+\n+        @Override\n+        public void resetFull() {\n+            AbstractMultiSetTest.this.resetFull();\n+            TestBagUniqueSet.this.setCollection(AbstractMultiSetTest.this.getCollection().uniqueSet());\n+            TestBagUniqueSet.this.setConfirmed(new HashSet<T>(AbstractMultiSetTest.this.getConfirmed()));\n+        }\n+\n+        @Override\n+        public void verify() {\n+            super.verify();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * Compare the current serialized form of the Bag\n+     * against the canonical version in SVN.\n+     */\n+    public void testEmptyBagCompatibility() throws IOException, ClassNotFoundException {\n+        // test to make sure the canonical form has been preserved\n+        final MultiSet<T> multiset = makeObject();\n+        if (multiset instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n+            final MultiSet<?> multiset2 = (MultiSet<?>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(multiset));\n+            assertTrue(\"Bag is empty\",multiset2.size()  == 0);\n+            assertEquals(multiset, multiset2);\n+        }\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the Bag\n+     * against the canonical version in SVN.\n+     */\n+    public void testFullBagCompatibility() throws IOException, ClassNotFoundException {\n+        // test to make sure the canonical form has been preserved\n+        final MultiSet<T> multiset = makeFullCollection();\n+        if (multiset instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n+            final MultiSet<?> multiset2 = (MultiSet<?>) readExternalFormFromDisk(getCanonicalFullCollectionName(multiset));\n+            assertEquals(\"Bag is the right size\",multiset.size(), multiset2.size());\n+            assertEquals(multiset, multiset2);\n+        }\n+    }\n+}", "timestamp": 1434060350, "metainfo": ""}