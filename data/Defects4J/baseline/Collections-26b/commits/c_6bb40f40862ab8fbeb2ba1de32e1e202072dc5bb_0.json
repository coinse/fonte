{"sha": "6bb40f40862ab8fbeb2ba1de32e1e202072dc5bb", "log": "Implement Externalizable in SequencedHashMap   ", "commit": "\n--- a/src/java/org/apache/commons/collections/SequencedHashMap.java\n+++ b/src/java/org/apache/commons/collections/SequencedHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.6 2002/02/22 02:37:56 mas Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/02/22 02:37:56 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.7 2002/02/22 03:17:40 mas Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/02/22 03:17:40 $\n  *\n  * ====================================================================\n  *\n  */\n package org.apache.commons.collections;\n \n+import java.io.Externalizable;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.io.IOException;\n+\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  */\n-public class SequencedHashMap implements Map, Cloneable {\n+public class SequencedHashMap implements Map, Cloneable, Externalizable {\n \n   /**\n    *  {@link java.util.Map.Entry} that doubles as a node in the linked list\n     return remove(get(index));\n   }\n \n+  // per Externalizable.readExternal(ObjectInput)\n+  public void readExternal( ObjectInput in ) \n+    throws IOException, ClassNotFoundException \n+  {\n+    int size = in.readInt();    \n+    for(int i = 0; i < size; i++)  {\n+      Object key = in.readObject();\n+      Object value = in.readObject();\n+      put(key, value);\n+    }\n+  }\n+  \n+  // per Externalizable.writeExternal(ObjectOutput)\n+  public void writeExternal( ObjectOutput out ) throws IOException {\n+    out.writeInt(size());\n+    for(Entry pos = sentinel.next; pos != sentinel; pos = pos.next) {\n+      out.writeObject(pos.getKey());\n+      out.writeObject(pos.getValue());\n+    }\n+  }\n+\n+  // add a serial version uid, so that if we change things in the future\n+  // without changing the format, we can still deserialize properly.\n+  private static final long serialVersionUID = 3380552487888102930L;\n+\n }", "timestamp": 1014347860, "metainfo": ""}