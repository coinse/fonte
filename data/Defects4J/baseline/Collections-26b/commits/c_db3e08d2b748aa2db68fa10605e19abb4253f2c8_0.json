{"sha": "db3e08d2b748aa2db68fa10605e19abb4253f2c8", "log": "Cleanup of map package.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractHashedMap.java\n  * This extends clause will be removed in v4.0.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author java util HashMap\n- * @author Stephen Colebourne\n- * @author Christian Siefkes\n+ * @version $Id$\n  */\n public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements IterableMap<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/map/AbstractInputCheckedMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractInputCheckedMapDecorator.java\n  * versions of Commons Collections.\n  *\n  * @since 3.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n abstract class AbstractInputCheckedMapDecorator<K, V>\n         extends AbstractMapDecorator<K, V> {\n--- a/src/main/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n  * methods exposed.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author java util LinkedHashMap\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> implements OrderedMap<K, V> {\n     \n--- a/src/main/java/org/apache/commons/collections/map/AbstractMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractMapDecorator.java\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Daniel Rall\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractMapDecorator<K, V> extends AbstractIterableMap<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java\n  * But, you might want that loophole, so this class is kept simple.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractOrderedMapDecorator<K, V> extends AbstractMapDecorator<K, V>\n         implements OrderedMap<K, V> {\n--- a/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n  *\n  * @see java.lang.ref.Reference\n  * @since 3.1 (extracted from ReferenceMap in 3.0)\n- * @version $Revision$\n- *\n- * @author Paul Jack\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractReferenceMap<K, V> extends AbstractHashedMap<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/map/AbstractSortedMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractSortedMapDecorator.java\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractSortedMapDecorator<K, V> extends AbstractMapDecorator<K, V> implements\n         IterableSortedMap<K, V> {\n--- a/src/main/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Commons-Collections team\n+ * @version $Id$\n  */\n public class CaseInsensitiveMap<K, V> extends AbstractHashedMap<K, V> implements Serializable, Cloneable {\n \n--- a/src/main/java/org/apache/commons/collections/map/CompositeMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/CompositeMap.java\n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Brian McCallister\n+ * @version $Id$\n  */\n public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/map/DefaultedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/DefaultedMap.java\n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n  * @since 3.2\n- * @version $Revision$\n+ * @version $Id$\n  *\n- * @author Stephen Colebourne\n- * @author Rafael U.C. Afonso\n  * @see LazyMap\n  */\n public class DefaultedMap<K, V> extends AbstractMapDecorator<K, V> implements Serializable {\n--- a/src/main/java/org/apache/commons/collections/map/FixedSizeMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/FixedSizeMap.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class FixedSizeMap<K, V>\n         extends AbstractMapDecorator<K, V>\n--- a/src/main/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class FixedSizeSortedMap<K, V>\n         extends AbstractSortedMapDecorator<K, V>\n--- a/src/main/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/main/java/org/apache/commons/collections/map/Flat3Map.java\n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneable {\n \n--- a/src/main/java/org/apache/commons/collections/map/HashedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/HashedMap.java\n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class HashedMap<K, V>\n         extends AbstractHashedMap<K, V> implements Serializable, Cloneable {\n--- a/src/main/java/org/apache/commons/collections/map/IdentityMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/IdentityMap.java\n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author java util HashMap\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class IdentityMap<K, V>\n         extends AbstractHashedMap<K, V> implements Serializable, Cloneable {\n--- a/src/main/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LRUMap.java\n  * <code>NullPointerException</code>'s when accessed by concurrent threads.\n  *\n  * @since 3.0 (previously in main package v1.0)\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Morgan Delagrange\n- * @author Stephen Colebourne\n- * @author Mike Pettypiece\n- * @author Mario Ivankovits\n+ * @version $Id$\n  */\n public class LRUMap<K, V>\n         extends AbstractLinkedMap<K, V> implements BoundedMap<K, V>, Serializable, Cloneable {\n--- a/src/main/java/org/apache/commons/collections/map/LazyMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LazyMap.java\n  * <p>\n  * For instance:\n  * <pre>\n- * Factory factory = new Factory() {\n- *     public Object create() {\n+ * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n+ *     public Date create() {\n  *         return new Date();\n  *     }\n  * }\n- * Map lazy = Lazy.map(new HashMap(), factory);\n- * Object obj = lazy.get(\"NOW\");\n+ * Map&lt;String, Date&gt; lazy = LazyMap.lazyMap(new HashMap&lt;String, Date&gt;(), factory);\n+ * Date date = lazy.get(\"NOW\");\n  * </pre>\n  *\n- * After the above code is executed, <code>obj</code> will contain\n+ * After the above code is executed, <code>date</code> will refer to\n  * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n  * instance is mapped to the \"NOW\" key in the map.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class LazyMap<K, V> extends AbstractMapDecorator<K, V> implements Map<K, V>, Serializable {\n \n     public V get(Object key) {\n         // create value for key if key is not currently in the map\n         if (map.containsKey(key) == false) {\n-            K castKey = cast(key);\n+            @SuppressWarnings(\"unchecked\")\n+            K castKey = (K) key;\n             V value = factory.transform(castKey);\n             map.put(castKey, value);\n             return value;\n         return map.get(key);\n     }\n \n-    /**\n-     * Method just to cast {@link Object}s to K where necessary.  This is done to ensure that the SuppressWarnings does not \n-     * cover other stuff that it shouldn't\n-     * @param key .\n-     * @return the cast key.\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    private K cast(Object key) {\n-        return (K) key;\n-    }\n-\n     // no need to wrap keySet, entrySet or values as they are views of\n     // existing map entries - you can't do a map-style get on them.\n }\n--- a/src/main/java/org/apache/commons/collections/map/LazySortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LazySortedMap.java\n  * <p>\n  * For instance:\n  * <pre>\n- * Factory factory = new Factory() {\n- *     public Object create() {\n+ * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n+ *     public Date create() {\n  *         return new Date();\n  *     }\n  * }\n- * SortedMap lazy = Lazy.sortedMap(new HashMap(), factory);\n- * Object obj = lazy.get(\"NOW\");\n+ * SortedMap&lt;String, Date&gt; lazy =\n+ *     LazySortedMap.lazySortedMap(new HashMap&lt;String, Date&gt;(), factory);\n+ * Date date = lazy.get(\"NOW\");\n  * </pre>\n  *\n- * After the above code is executed, <code>obj</code> will contain\n+ * After the above code is executed, <code>date</code> will refer to\n  * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n  * instance is mapped to the \"NOW\" key in the map.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class LazySortedMap<K,V>\n         extends LazyMap<K,V>\n--- a/src/main/java/org/apache/commons/collections/map/LinkedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LinkedMap.java\n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class LinkedMap<K, V> extends AbstractLinkedMap<K, V> implements Serializable, Cloneable {\n \n--- a/src/main/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/ListOrderedMap.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Matt Benson\n- * @author Dave Meikle\n+ * @version $Id$\n  */\n public class ListOrderedMap<K, V>\n         extends AbstractMapDecorator<K, V>\n--- a/src/main/java/org/apache/commons/collections/map/MultiKeyMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/MultiKeyMap.java\n  * As an example, consider a least recently used cache that uses a String airline code\n  * and a Locale to lookup the airline's name:\n  * <pre>\n- * private MultiKeyMap cache = MultiKeyMap.decorate(new LRUMap(50));\n+ * private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));\n  *\n  * public String getAirlineName(String code, String locale) {\n  *   String name = (String) cache.get(code, locale);\n  * by concurrent threads without synchronization.\n  *\n  * @since 3.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V>\n         implements IterableMap<MultiKey<? extends K>, V>, Serializable {\n      */\n     public V get(Object key1, Object key2) {\n         int hashCode = hash(key1, key2);\n-        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n+        AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry =\n+                decorated().data[decorated().hashIndex(hashCode, decorated().data.length)];\n         while (entry != null) {\n             if (entry.hashCode == hashCode && isEqualKey(entry, key1, key2)) {\n                 return entry.getValue();\n--- a/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n  * appropriate synchronization. This class may throw exceptions when accessed\n  * by concurrent threads without synchronization.\n  *\n- * @author James Carman\n- * @author Christopher Berry\n- * @author James Strachan\n- * @author Steve Downey\n- * @author Stephen Colebourne\n- * @author Julien Buret\n- * @author Serhiy Yevtushenko\n- * @version $Revision$\n  * @since 3.2\n+ * @version $Id$\n  */\n public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> implements MultiMap<K, V>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/map/PredicatedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/PredicatedMap.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class PredicatedMap<K, V>\n         extends AbstractInputCheckedMapDecorator<K, V>\n--- a/src/main/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class PredicatedSortedMap<K, V> extends PredicatedMap<K, V> implements SortedMap<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/map/ReferenceIdentityMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/ReferenceIdentityMap.java\n  * @see java.lang.ref.Reference\n  *\n  * @since 3.0 (previously in main package v2.1)\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class ReferenceIdentityMap<K, V> extends AbstractReferenceMap<K, V> implements Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/map/ReferenceMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/ReferenceMap.java\n  * @see java.lang.ref.Reference\n  *\n  * @since 3.0 (previously in main package v2.1)\n- * @version $Revision$\n- *\n- * @author Paul Jack\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class ReferenceMap<K, V> extends AbstractReferenceMap<K, V> implements Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/map/SingletonMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/SingletonMap.java\n  * </ul>\n  *\n  * @since 3.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class SingletonMap<K, V>\n         implements OrderedMap<K, V>, BoundedMap<K, V>, KeyValue<K, V>, Serializable, Cloneable {\n--- a/src/main/java/org/apache/commons/collections/map/StaticBucketMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/StaticBucketMap.java\n  * operations will affect the map.<p>\n  *\n  * @since 3.0 (previously in main package v2.1)\n- * @version $Revision$\n- *\n- * @author Berin Loritsch\n- * @author Gerhard Froehlich\n- * @author Michael A. Smith\n- * @author Paul Jack\n- * @author Leo Sutic\n- * @author Janek Bogucki\n- * @author Kazuya Ujihara\n+ * @version $Id$\n  */\n public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/map/TransformedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/TransformedMap.java\n  * @see org.apache.commons.collections.splitmap.TransformedMap\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TransformedMap<K, V>\n         extends AbstractInputCheckedMapDecorator<K, V>\n--- a/src/main/java/org/apache/commons/collections/map/TransformedSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/TransformedSortedMap.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TransformedSortedMap<K, V>\n         extends TransformedMap<K, V>\n--- a/src/main/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java\n+++ b/src/main/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableEntrySet<K, V>\n         extends AbstractSetDecorator<Map.Entry<K, V>> implements Unmodifiable {\n--- a/src/main/java/org/apache/commons/collections/map/UnmodifiableMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/UnmodifiableMap.java\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableMap<K, V>\n         extends AbstractMapDecorator<K, V>\n--- a/src/main/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableOrderedMap<K, V> extends AbstractOrderedMapDecorator<K, V> implements\n         Unmodifiable, Serializable {\n--- a/src/main/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableSortedMap<K, V>\n         extends AbstractSortedMapDecorator<K, V>\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/map/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * This package contains implementations of the {@link java.util.Map Map},\n+ * {@link org.apache.commons.collections.IterableMap IterableMap},\n+ * {@link org.apache.commons.collections.OrderedMap OrderedMap} and\n+ * {@link java.util.SortedMap SortedMap} interfaces.\n+ * A Map provides a lookup from a key to a value.\n+ * A number of implementations also support the new MapIterator interface that enables\n+ * simple iteration of map keys and values.\n+ * <p>\n+ * The following implementations are provided:\n+ * <ul>\n+ *   <li>CaseInsensitiveMap - map that compares keys in a case insensitive way\n+ *   <li>CompositeMap - map that combines multiple maps into a single view\n+ *   <li>HashedMap - general purpose HashMap replacement supporting MapIterator\n+ *   <li>IdentityMap - map that uses == for comparison instead of equals()\n+ *   <li>Flat3Map - designed for good performance at size 3 or less\n+ *   <li>LinkedMap - a hash map that maintains insertion order, supporting OrderedMapIterator\n+ *   <li>LRUMap - a hash map that maintains a maximum size by removing the least recently used entries\n+ *   <li>MultiKeyMap - map that provides special methods for using more than one key to access the value\n+ *   <li>ReferenceMap - allows the garbage collector to collect keys and values using equals() for comparison\n+ *   <li>ReferenceIdentityMap - allows the garbage collector to collect keys and values using == for comparison\n+ *   <li>SingletonMap - a fully featured map to hold one key-value pair\n+ *   <li>StaticBucketMap - internally synchronized and designed for thread-contentious environments\n+ * </ul>\n+ * <p>\n+ * The following decorators are provided:\n+ * <ul>\n+ *   <li>Unmodifiable - ensures the collection cannot be altered\n+ *   <li>Predicated - ensures that only elements that are valid according to a predicate can be added\n+ *   <li>Typed - ensures that only elements that are of a specific type can be added\n+ *   <li>Transformed - transforms each element added\n+ *   <li>FixedSize - ensures that the size of the map cannot change\n+ *   <li>Defaulted - provides default values for non-existing keys\n+ *   <li>Lazy - creates objects in the map on demand\n+ *   <li>ListOrdered - ensures that insertion order is retained\n+ * </ul>\n+ *\n+ * @version $Id$\n+ */\n+package org.apache.commons.collections.map;\n+", "timestamp": 1342386803, "metainfo": ""}