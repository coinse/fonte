{"sha": "32769fd16904f052ad19c4164c9784bd2a665787", "log": "ListOrderedMap - additional method, put(int,Object,Object) rfe 37761, from Matt Benson  ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n /*\n- *  Copyright 2003-2005 The Apache Software Foundation\n+ *  Copyright 2003-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * \n  * @author Henri Yandell\n  * @author Stephen Colebourne\n+ * @author Matt Benson\n  */\n public class ListOrderedMap\n         extends AbstractMapDecorator\n     }\n \n     /**\n+     * Puts a key-value mapping into the map at the specified index.\n+     * <p>\n+     * If the map already contains the key, then the original mapping\n+     * is removed and the new mapping added at the specified index.\n+     * The remove may change the effect of the index. The index is\n+     * always calculated relative to the original state of the map.\n+     * <p>\n+     * Thus the steps are: (1) remove the existing key-value mapping,\n+     * then (2) insert the new key-value mapping at the position it\n+     * would have been inserted had the remove not ocurred.\n+     *\n+     * @param index  the index at which the mapping should be inserted\n+     * @param key  the key\n+     * @param value  the value\n+     * @return the value previously mapped to the key\n+     * @throws IndexOutOfBoundsException if the index is out of range\n+     * @since Commons Collections 3.2\n+     */\n+    public Object put(int index, Object key, Object value) {\n+        Map m = getMap();\n+        if (m.containsKey(key)) {\n+            Object result = m.remove(key);\n+            int pos = insertOrder.indexOf(key);\n+            insertOrder.remove(pos);\n+            if (pos < index) {\n+                index--;\n+            }\n+            insertOrder.add(index, key);\n+            m.put(key, value);\n+            return result;\n+        } else {\n+            insertOrder.add(index, key);\n+            m.put(key, value);\n+            return null;\n+        }\n+    }\n+\n+    /**\n      * Removes the element at the specified index.\n      *\n      * @param index  the index of the object to remove\n--- a/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n /*\n- *  Copyright 2001-2005 The Apache Software Foundation\n+ *  Copyright 2001-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * \n  * @author Henri Yandell\n  * @author Stephen Colebourne\n+ * @author Matt Benson\n  */\n public class TestListOrderedMap extends AbstractTestOrderedMap {\n \n             list.remove(i);\n             assertEquals(false, lom.containsKey(key));\n         }\n+    }\n+\n+    public void testPut_intObjectObject() {\n+        resetEmpty();\n+        ListOrderedMap lom = (ListOrderedMap) map;\n+        \n+        try {\n+            lom.put(1, \"testInsert1\", \"testInsert1v\");\n+            fail(\"should not be able to insert at pos 1 in empty Map\");\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            lom.put(-1, \"testInsert-1\", \"testInsert-1v\");\n+            fail(\"should not be able to insert at pos -1 in empty Map\");\n+        } catch (IndexOutOfBoundsException ex) {}\n+        \n+        // put where key doesn't exist\n+        lom.put(0, \"testInsert1\", \"testInsert1v\");\n+        assertEquals(\"testInsert1v\", lom.getValue(0));\n+        \n+        lom.put(\"testInsertPut\", \"testInsertPutv\");\n+        assertEquals(\"testInsert1v\", lom.getValue(0));\n+        assertEquals(\"testInsertPutv\", lom.getValue(1));\n+        \n+        lom.put(0, \"testInsert0\", \"testInsert0v\");\n+        assertEquals(\"testInsert0v\", lom.getValue(0));\n+        assertEquals(\"testInsert1v\", lom.getValue(1));\n+        assertEquals(\"testInsertPutv\", lom.getValue(2));\n+        \n+        lom.put(3, \"testInsert3\", \"testInsert3v\");\n+        assertEquals(\"testInsert0v\", lom.getValue(0));\n+        assertEquals(\"testInsert1v\", lom.getValue(1));\n+        assertEquals(\"testInsertPutv\", lom.getValue(2));\n+        assertEquals(\"testInsert3v\", lom.getValue(3));\n+        \n+        // put in a full map        \n+        resetFull();\n+        lom = (ListOrderedMap) map;\n+        ListOrderedMap lom2 = new ListOrderedMap();\n+        lom2.putAll(lom);\n+        \n+        lom2.put(0, \"testInsert0\", \"testInsert0v\");\n+        assertEquals(\"testInsert0v\", lom2.getValue(0));\n+        for (int i = 0; i < lom.size(); i++) {\n+            assertEquals(lom2.getValue(i + 1), lom.getValue(i));\n+        }\n+        \n+        // put where key does exist\n+        Integer i1 = new Integer(1);\n+        Integer i1b = new Integer(1);\n+        Integer i2 = new Integer(2);\n+        Integer i3 = new Integer(3);\n+        \n+        resetEmpty();\n+        lom = (ListOrderedMap) map;\n+        lom.put(i1, \"1\");\n+        lom.put(i2, \"2\");\n+        lom.put(i3, \"3\");\n+        lom.put(0, i1, \"One\");\n+        assertEquals(3, lom.size());\n+        assertEquals(3, lom.map.size());\n+        assertEquals(3, lom.insertOrder.size());\n+        assertEquals(\"One\", lom.getValue(0));\n+        assertSame(i1, lom.get(0));\n+        \n+        resetEmpty();\n+        lom = (ListOrderedMap) map;\n+        lom.put(i1, \"1\");\n+        lom.put(i2, \"2\");\n+        lom.put(i3, \"3\");\n+        lom.put(0, i1b, \"One\");\n+        assertEquals(3, lom.size());\n+        assertEquals(3, lom.map.size());\n+        assertEquals(3, lom.insertOrder.size());\n+        assertEquals(\"One\", lom.getValue(0));\n+        assertEquals(\"2\", lom.getValue(1));\n+        assertEquals(\"3\", lom.getValue(2));\n+        assertSame(i1b, lom.get(0));\n+        \n+        resetEmpty();\n+        lom = (ListOrderedMap) map;\n+        lom.put(i1, \"1\");\n+        lom.put(i2, \"2\");\n+        lom.put(i3, \"3\");\n+        lom.put(1, i1b, \"One\");\n+        assertEquals(3, lom.size());\n+        assertEquals(3, lom.map.size());\n+        assertEquals(3, lom.insertOrder.size());\n+        assertEquals(\"One\", lom.getValue(0));\n+        assertEquals(\"2\", lom.getValue(1));\n+        assertEquals(\"3\", lom.getValue(2));\n+        \n+        resetEmpty();\n+        lom = (ListOrderedMap) map;\n+        lom.put(i1, \"1\");\n+        lom.put(i2, \"2\");\n+        lom.put(i3, \"3\");\n+        lom.put(2, i1b, \"One\");\n+        assertEquals(3, lom.size());\n+        assertEquals(3, lom.map.size());\n+        assertEquals(3, lom.insertOrder.size());\n+        assertEquals(\"2\", lom.getValue(0));\n+        assertEquals(\"One\", lom.getValue(1));\n+        assertEquals(\"3\", lom.getValue(2));\n+        \n+        resetEmpty();\n+        lom = (ListOrderedMap) map;\n+        lom.put(i1, \"1\");\n+        lom.put(i2, \"2\");\n+        lom.put(i3, \"3\");\n+        lom.put(3, i1b, \"One\");\n+        assertEquals(3, lom.size());\n+        assertEquals(3, lom.map.size());\n+        assertEquals(3, lom.insertOrder.size());\n+        assertEquals(\"2\", lom.getValue(0));\n+        assertEquals(\"3\", lom.getValue(1));\n+        assertEquals(\"One\", lom.getValue(2));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1136230493, "metainfo": ""}