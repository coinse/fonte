{"sha": "9547b0caa64373a6494995cfc7eff5e2ffe613ec", "log": "Separated iterators to own events Separate pre and post event classes Clarify meaning of result event parameter Fix tests that weren't working, and fixed problems revealed   ", "commit": "\n--- a/src/java/org/apache/commons/collections/observed/ModificationEventType.java\n+++ b/src/java/org/apache/commons/collections/observed/ModificationEventType.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationEventType.java,v 1.1 2003/09/03 23:54:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationEventType.java,v 1.2 2003/09/06 18:59:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * They may negated using the bitwise NOT, <code>~</code>.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/03 23:54:26 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/06 18:59:09 $\n  * \n  * @author Stephen Colebourne\n  */\n     public static final int ADD_INDEXED =   0x00000002;\n     /** The method add(Object,int) */\n     public static final int ADD_NCOPIES =   0x00000004;\n+    /** The method iterator.add(Object) */\n+    public static final int ADD_ITERATED =  0x00000008;\n     \n     /** The method addAll(Collection) */\n     public static final int ADD_ALL =       0x00000010;\n     public static final int REMOVE_INDEXED =0x00000200;\n     /** The method remove(Object,int) */\n     public static final int REMOVE_NCOPIES =0x00000400;\n+    /** The method iterator.remove() */\n+    public static final int REMOVE_ITERATED=0x00000800;\n     \n     /** The method removeAll(Collection) */\n     public static final int REMOVE_ALL =    0x00001000;\n     \n     /** The method set(int,Object) */\n     public static final int SET_INDEXED =   0x00010000;\n+    /** The method iterator.set(Object) */\n+    public static final int SET_ITERATED =  0x00020000;\n \n     /** All add methods */\n-    public static final int GROUP_ADD = ADD | ADD_INDEXED | ADD_NCOPIES | ADD_ALL | ADD_ALL_INDEXED;\n+    public static final int GROUP_ADD = ADD | ADD_INDEXED | ADD_NCOPIES | ADD_ITERATED | ADD_ALL | ADD_ALL_INDEXED;\n     /** All methods that change without structure modification */\n-    public static final int GROUP_CHANGE = SET_INDEXED;\n+    public static final int GROUP_CHANGE = SET_INDEXED | SET_ITERATED;\n     /** All remove methods */\n-    public static final int GROUP_REMOVE = REMOVE | REMOVE_NCOPIES | REMOVE_INDEXED | REMOVE_ALL;\n+    public static final int GROUP_REMOVE = REMOVE | REMOVE_NCOPIES | REMOVE_ITERATED | REMOVE_INDEXED | REMOVE_ALL;\n     /** All retain methods */\n     public static final int GROUP_RETAIN = RETAIN_ALL;\n     /** All clear methods */\n     public static final int GROUP_CLEAR = CLEAR;\n     /** All reducing methods (remove, retain and clear) */\n     public static final int GROUP_REDUCE = GROUP_REMOVE | GROUP_CLEAR | GROUP_RETAIN;\n-    \n+\n     /** All indexed methods */\n     public static final int GROUP_INDEXED = ADD_INDEXED | ADD_ALL_INDEXED | REMOVE_INDEXED | SET_INDEXED;\n-    /** All non indexed methods */\n-    public static final int GROUP_NON_INDEXED = ADD | ADD_NCOPIES | ADD_ALL | REMOVE | REMOVE_NCOPIES | REMOVE_ALL | RETAIN_ALL | CLEAR;\n-    /** All bulk methods (xxxAll, clear, Bag nCopies) */\n-    public static final int GROUP_BULK =  ADD_NCOPIES | ADD_ALL | ADD_ALL_INDEXED | REMOVE_NCOPIES | REMOVE_ALL | RETAIN_ALL | CLEAR;\n-    /** All non bulk methods */\n-    public static final int GROUP_NON_BULK = ADD | ADD_INDEXED | REMOVE | REMOVE_INDEXED | SET_INDEXED;\n+    /** All ncopies methods */\n+    public static final int GROUP_NCOPIES = ADD_NCOPIES | REMOVE_NCOPIES;\n+    /** All iterated methods */\n+    public static final int GROUP_ITERATED = ADD_ITERATED | REMOVE_ITERATED | SET_ITERATED;\n+    /** All bulk methods (xxxAll, clear) */\n+    public static final int GROUP_BULK =  ADD_ALL | ADD_ALL_INDEXED | REMOVE_ALL | RETAIN_ALL | CLEAR;\n     /** All methods that modify the structure */\n-    public static final int GROUP_STRUCTURE_MODIFIED = \n-        ADD | ADD_NCOPIES | ADD_INDEXED | ADD_ALL | ADD_ALL_INDEXED | REMOVE | REMOVE_NCOPIES | REMOVE_INDEXED | REMOVE_ALL | RETAIN_ALL | CLEAR;\n-    /** All non structure modifying methods */\n-    public static final int GROUP_NON_STRUCTURE_MODIFIED = SET_INDEXED;\n+    public static final int GROUP_STRUCTURE_MODIFIED = GROUP_ADD | GROUP_REDUCE;\n \n     /** All methods sent by a Collection */\n     public static final int GROUP_FROM_COLLECTION = ADD | ADD_ALL | REMOVE | REMOVE_ALL | RETAIN_ALL | CLEAR;\n             return \"AddIndexed\";\n             case ADD_NCOPIES:\n             return \"AddNCopies\";\n+            case ADD_ITERATED:\n+            return \"AddIterated\";\n             case ADD_ALL:\n             return \"AddAll\";\n             case ADD_ALL_INDEXED:\n             return \"RemoveNCopies\";\n             case REMOVE_INDEXED:\n             return \"RemoveIndexed\";\n+            case REMOVE_ITERATED:\n+            return \"RemoveIterated\";\n             case REMOVE_ALL:\n             return \"RemoveAll\";\n             case RETAIN_ALL:\n             return \"Clear\";\n             case SET_INDEXED:\n             return \"SetIndexed\";\n+            case SET_ITERATED:\n+            return \"SetIterated\";\n             default:\n             return \"Unknown\";\n         }\n--- a/src/java/org/apache/commons/collections/observed/ModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/observed/ModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationHandler.java,v 1.1 2003/09/03 23:54:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationHandler.java,v 1.2 2003/09/06 18:59:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * later collections release.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/03 23:54:26 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/06 18:59:09 $\n  * \n  * @author Stephen Colebourne\n  */\n      * Handles the pre event.\n      * \n      * @param type  the event type to send\n-     * @param index  the index where the change starts\n-     * @param object  the object that was added/removed\n-     * @param repeat  the number of repeats of the add/remove\n-     */\n-    protected abstract boolean preEvent(int type, int index, Object object, int repeat);\n-\n-    /**\n-     * Handles the post event where the collections method returns boolean for success.\n+     * @param index  the index where the change starts, the method param or derived\n+     * @param object  the object that will be added/removed/set, the method param or derived\n+     * @param repeat  the number of repeats of the add/remove, the method param or derived\n+     * @param previous  the previous value that will be removed/replaced, must exist in coll\n+     */\n+    protected abstract boolean preEvent(int type, int index, Object object, int repeat, Object previous);\n+\n+    /**\n+     * Handles the post event.\n      * \n      * @param modified  true if the method succeeded in changing the collection\n      * @param type  the event type to send\n-     * @param index  the index where the change starts\n-     * @param object  the object that was added/removed\n-     * @param repeat  the number of repeats of the add/remove\n-     */\n-    protected abstract void postEvent(boolean modified, int type, int index, Object object, int repeat);\n-\n-    /**\n-     * Handles the post event where the collections method has a return value.\n-     * \n-     * @param modified  true if the method succeeded in changing the collection\n-     * @param type  the event type to send\n-     * @param index  the index where the change starts\n-     * @param object  the object that was added/removed\n-     * @param repeat  the number of repeats of the add/remove\n-     * @param result  the result of the method\n-     */\n-    protected abstract void postEvent(boolean modified, int type, int index, Object object, int repeat, Object result);\n+     * @param index  the index where the change starts, the method param or derived\n+     * @param object  the object that was added/removed/set, the method param or derived\n+     * @param repeat  the number of repeats of the add/remove, the method param or derived\n+     * @param previous  the previous value that was removed/replace, must have existed in coll\n+     */\n+    protected abstract void postEvent(boolean modified, int type, int index, Object object, int repeat, Object previous);\n \n     // Event handling\n     //-----------------------------------------------------------------------\n     /**\n      * Store data and send event before add(obj) is called.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int)}.\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n+     * It does not set the index for List implementations.\n      * \n      * @param object  the object being added\n      * @return true to process modification\n      */\n     protected boolean preAdd(Object object) {\n-        return preEvent(ModificationEventType.ADD, -1, object, 1);\n+        return preEvent(ModificationEventType.ADD, -1, object, 1, null);\n     }\n \n     /**\n      * Send an event after add(obj) is called.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int)}.\n+     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object)}.\n+     * It does not set the index for List implementations.\n      * \n      * @param object  the object being added\n      * @param result  the result from the add method\n      */\n     protected void postAdd(Object object, boolean result) {\n-        postEvent(result, ModificationEventType.ADD, -1, object, 1);\n+        postEvent(result, ModificationEventType.ADD, -1, object, 1, null);\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Store data and send event before add(int,obj) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int)}.\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n      * \n      * @param index  the index to add at\n      * @param object  the object being added\n      * @return true to process modification\n      */\n-    protected boolean preAdd(int index, Object object) {\n-        return preEvent(ModificationEventType.ADD_INDEXED, index, object, 1);\n+    protected boolean preAddIndexed(int index, Object object) {\n+        return preEvent(ModificationEventType.ADD_INDEXED, index, object, 1, null);\n     }\n \n     /**\n      * @param index  the index to add at\n      * @param object  the object being added\n      */\n-    protected void postAdd(int index, Object object) {\n+    protected void postAddIndexed(int index, Object object) {\n         postEvent(true, ModificationEventType.ADD_INDEXED, index, object, 1, null);\n     }\n \n     /**\n      * Store data and send event before add(obj,int) is called on a Bag.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int)}.\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n      * \n      * @param object  the object being added\n      * @param nCopies  the number of copies being added\n      * @return true to process modification\n      */\n-    protected boolean preAdd(Object object, int nCopies) {\n-        return preEvent(ModificationEventType.ADD_NCOPIES, -1, object, nCopies);\n+    protected boolean preAddNCopies(Object object, int nCopies) {\n+        return preEvent(ModificationEventType.ADD_NCOPIES, -1, object, nCopies, null);\n     }\n \n     /**\n      * Send an event after add(obj,int) is called on a Bag.\n      * <p>\n      * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object)}.\n+     * The method result is not used by this implementation (Bag violates the\n+     * Collection contract)\n      * \n      * @param object  the object being added\n      * @param nCopies  the number of copies being added\n-     */\n-    protected void postAdd(Object object, int nCopies, boolean result) {\n-        postEvent(true, ModificationEventType.ADD_NCOPIES, -1, object, nCopies, (result ? Boolean.TRUE : Boolean.FALSE));\n+     * @param result  the method result\n+     */\n+    protected void postAddNCopies(Object object, int nCopies, boolean result) {\n+        postEvent(true, ModificationEventType.ADD_NCOPIES, -1, object, nCopies, null);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Store data and send event before add(obj) is called on a ListIterator.\n+     * <p>\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n+     * \n+     * @param index  the index of the iterator\n+     * @param object  the object being added\n+     * @return true to process modification\n+     */\n+    protected boolean preAddIterated(int index, Object object) {\n+        return preEvent(ModificationEventType.ADD_ITERATED, index, object, 1, null);\n+    }\n+\n+    /**\n+     * Send an event after add(obj) is called on a ListIterator.\n+     * <p>\n+     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object)}.\n+     * \n+     * @param index  the index of the iterator\n+     * @param object  the object being added\n+     */\n+    protected void postAddIterated(int index, Object object) {\n+        // assume collection changed\n+        postEvent(true, ModificationEventType.ADD_ITERATED, index, object, 1, null);\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Store data and send event before addAll(coll) is called.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int)}.\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n      * \n      * @param coll  the collection being added\n      * @return true to process modification\n      */\n     protected boolean preAddAll(Collection coll) {\n-        return preEvent(ModificationEventType.ADD_ALL, -1, coll, 1);\n+        return preEvent(ModificationEventType.ADD_ALL, -1, coll, 1, null);\n     }\n \n     /**\n      * Send an event after addAll(coll) is called.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int)}.\n+     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object)}.\n      * \n      * @param coll  the collection being added\n-     * @param result  the result from the addAll method\n-     */\n-    protected void postAddAll(Collection coll, boolean result) {\n-        postEvent(result, ModificationEventType.ADD_ALL, -1, coll, 1);\n+     * @param collChanged  the result from the addAll method\n+     */\n+    protected void postAddAll(Collection coll, boolean collChanged) {\n+        postEvent(collChanged, ModificationEventType.ADD_ALL, -1, coll, 1, null);\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Store data and send event before addAll(int,coll) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int)}.\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n      * \n      * @param index  the index to addAll at\n      * @param coll  the collection being added\n      * @return true to process modification\n      */\n-    protected boolean preAddAll(int index, Collection coll) {\n-        return preEvent(ModificationEventType.ADD_ALL_INDEXED, index, coll, 1);\n+    protected boolean preAddAllIndexed(int index, Collection coll) {\n+        return preEvent(ModificationEventType.ADD_ALL_INDEXED, index, coll, 1, null);\n     }\n \n     /**\n      * Send an event after addAll(int,coll) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int)}.\n+     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object)}.\n      * \n      * @param index  the index to addAll at\n      * @param coll  the collection being added\n-     * @param result  the result from the addAll method\n-     */\n-    protected void postAddAll(int index, Collection coll, boolean result) {\n-        postEvent(result, ModificationEventType.ADD_ALL_INDEXED, index, coll, 1);\n+     * @param collChanged  the result from the addAll method\n+     */\n+    protected void postAddAllIndexed(int index, Collection coll, boolean collChanged) {\n+        postEvent(collChanged, ModificationEventType.ADD_ALL_INDEXED, index, coll, 1, null);\n     }\n \n     //-----------------------------------------------------------------------\n      * @return true to process modification\n      */\n     protected boolean preClear() {\n-        return preEvent(ModificationEventType.CLEAR, -1, null, 1);\n+        return preEvent(ModificationEventType.CLEAR, -1, null, 1, null);\n     }\n \n     /**\n     /**\n      * Store data and send event before remove(obj) is called.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int)}.\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n      * \n      * @param object  the object being removed\n      * @return true to process modification\n      */\n     protected boolean preRemove(Object object) {\n-        return preEvent(ModificationEventType.REMOVE, -1, object, 1);\n+        return preEvent(ModificationEventType.REMOVE, -1, object, 1, null);\n     }\n \n     /**\n      * Send an event after remove(obj) is called.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int)}.\n+     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object)}.\n      * \n      * @param object  the object being removed\n-     * @param result  the result from the remove method\n-     */\n-    protected void postRemove(Object object, boolean result) {\n-        postEvent(result, ModificationEventType.REMOVE, -1, object, 1);\n+     * @param collChanged  the result from the remove method\n+     */\n+    protected void postRemove(Object object, boolean collChanged) {\n+        postEvent(collChanged, ModificationEventType.REMOVE, -1, object, 1, (collChanged ? object : null));\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Store data and send event before remove(int) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int)}.\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n      * \n      * @param index  the index to remove at\n      * @return true to process modification\n      */\n-    protected boolean preRemove(int index) {\n-        return preEvent(ModificationEventType.REMOVE_INDEXED, index, null, 1);\n+    protected boolean preRemoveIndexed(int index) {\n+        // could do a get(index) to determine previousValue\n+        // we don't for performance, but subclass may override\n+        return preEvent(ModificationEventType.REMOVE_INDEXED, index, null, 1, null);\n     }\n \n     /**\n      * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object)}.\n      * \n      * @param index  the index to remove at\n-     * @param result  the result from the remove method\n-     */\n-    protected void postRemove(int index, Object result) {\n-        postEvent(true, ModificationEventType.REMOVE_INDEXED, index, null, 1, result);\n+     * @param previousValue  the result from the remove method\n+     */\n+    protected void postRemoveIndexed(int index, Object previousValue) {\n+        postEvent(true, ModificationEventType.REMOVE_INDEXED, index, null, 1, previousValue);\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Store data and send event before remove(obj,int) is called on a Bag.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int)}.\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n      * \n      * @param object  the object being removed\n      * @param nCopies  the number of copies being removed\n      * @return true to process modification\n      */\n-    protected boolean preRemove(Object object, int nCopies) {\n-        return preEvent(ModificationEventType.REMOVE_NCOPIES, -1, object, nCopies);\n+    protected boolean preRemoveNCopies(Object object, int nCopies) {\n+        return preEvent(ModificationEventType.REMOVE_NCOPIES, -1, object, nCopies, null);\n     }\n \n     /**\n      * \n      * @param object  the object being removed\n      * @param nCopies  the number of copies being removed\n-     */\n-    protected void postRemove(Object object, int nCopies, boolean result) {\n-        postEvent(result, ModificationEventType.REMOVE_NCOPIES, -1, object, nCopies);\n+     * @param collChanged  the result from the remove method\n+     */\n+    protected void postRemoveNCopies(Object object, int nCopies, boolean collChanged) {\n+        postEvent(collChanged, ModificationEventType.REMOVE_NCOPIES, -1, object, nCopies, (collChanged ? object : null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Store data and send event before remove(obj) is called on an Iterator.\n+     * <p>\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n+     * \n+     * @param index  the index of the iterator\n+     * @param removedValue  the object being removed\n+     * @return true to process modification\n+     */\n+    protected boolean preRemoveIterated(int index, Object removedValue) {\n+        return preEvent(ModificationEventType.REMOVE_ITERATED, index, removedValue, 1, removedValue);\n+    }\n+\n+    /**\n+     * Send an event after remove(obj) is called on an Iterator.\n+     * <p>\n+     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object)}.\n+     * \n+     * @param index  the index of the iterator\n+     * @param removedValue  the previous value at this index\n+     */\n+    protected void postRemoveIterated(int index, Object removedValue) {\n+        // assume collection changed\n+        postEvent(true, ModificationEventType.REMOVE_ITERATED, index, removedValue, 1, removedValue);\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Store data and send event before removeAll(coll) is called.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int)}.\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n      * \n      * @param coll  the collection being removed\n      * @return true to process modification\n      */\n     protected boolean preRemoveAll(Collection coll) {\n-        return preEvent(ModificationEventType.REMOVE_ALL, -1, coll, 1);\n+        return preEvent(ModificationEventType.REMOVE_ALL, -1, coll, 1, null);\n     }\n \n     /**\n      * Send an event after removeAll(coll) is called.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int)}.\n+     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object)}.\n      * \n      * @param coll  the collection being removed\n-     * @param result  the result from the removeAll method\n-     */\n-    protected void postRemoveAll(Collection coll, boolean result) {\n-        postEvent(result, ModificationEventType.REMOVE_ALL, -1, coll, 1);\n+     * @param collChanged  the result from the removeAll method\n+     */\n+    protected void postRemoveAll(Collection coll, boolean collChanged) {\n+        postEvent(collChanged, ModificationEventType.REMOVE_ALL, -1, coll, 1, null);\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Store data and send event before retainAll(coll) is called.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int)}.\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n      * \n      * @param coll  the collection being retained\n      * @return true to process modification\n      */\n     protected boolean preRetainAll(Collection coll) {\n-        return preEvent(ModificationEventType.RETAIN_ALL, -1, coll, 1);\n+        return preEvent(ModificationEventType.RETAIN_ALL, -1, coll, 1, null);\n     }\n \n     /**\n      * Send an event after retainAll(coll) is called.\n      * <p>\n-     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int)}.\n+     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object)}.\n      * \n      * @param coll  the collection being retained\n-     * @param result  the result from the retainAll method\n-     */\n-    protected void postRetainAll(Collection coll, boolean result) {\n-        postEvent(result, ModificationEventType.RETAIN_ALL, -1, coll, 1);\n+     * @param collChanged  the result from the retainAll method\n+     */\n+    protected void postRetainAll(Collection coll, boolean collChanged) {\n+        postEvent(collChanged, ModificationEventType.RETAIN_ALL, -1, coll, 1, null);\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Store data and send event before set(int,obj) is called on a List.\n      * <p>\n-     * This implementation forwards to {@link #preEvent(int, int, Object, int)}.\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n      * \n      * @param index  the index to add at\n      * @param object  the object being added\n      * @return true to process modification\n      */\n-    protected boolean preSet(int index, Object object) {\n-        return preEvent(ModificationEventType.SET_INDEXED, index, object, 1);\n+    protected boolean preSetIndexed(int index, Object object) {\n+        // could do a get(index) to determine previousValue\n+        // we don't for performance, but subclass may override\n+        return preEvent(ModificationEventType.SET_INDEXED, index, object, 1, null);\n     }\n \n     /**\n      * \n      * @param index  the index to add at\n      * @param object  the object being added\n-     * @param result  the result from the set method\n-     */\n-    protected void postSet(int index, Object object, Object result) {\n+     * @param previousValue  the result from the set method\n+     */\n+    protected void postSetIndexed(int index, Object object, Object previousValue) {\n         // reference check for modification, in case equals() has issues (eg. performance)\n-        postEvent((object != result), ModificationEventType.SET_INDEXED, index, object, 1, result);\n+        postEvent((object != previousValue), ModificationEventType.SET_INDEXED, index, object, 1, previousValue);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Store data and send event before set(obj) is called on a ListIterator.\n+     * <p>\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object)}.\n+     * \n+     * @param index  the index to set at\n+     * @param object  the object being added\n+     * @param previousValue  the previous value at this index\n+     * @return true to process modification\n+     */\n+    protected boolean preSetIterated(int index, Object object, Object previousValue) {\n+        return preEvent(ModificationEventType.SET_ITERATED, index, object, 1, previousValue);\n+    }\n+\n+    /**\n+     * Send an event after set(obj) is called on a ListIterator.\n+     * <p>\n+     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object)}.\n+     * \n+     * @param index  the index to set at\n+     * @param object  the object being added\n+     * @param previousValue  the previous value at this index\n+     */\n+    protected void postSetIterated(int index, Object object, Object previousValue) {\n+        // reference check for modification, in case equals() has issues (eg. performance)\n+        postEvent((object != previousValue), ModificationEventType.SET_ITERATED, index, object, 1, previousValue);\n     }\n \n     // toString\n--- a/src/java/org/apache/commons/collections/observed/ObservedBag.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservedBag.java,v 1.1 2003/09/03 23:54:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservedBag.java,v 1.2 2003/09/06 18:59:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * NOT observed. This is because the set should be unmodifiable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/03 23:54:26 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/06 18:59:09 $\n  * \n  * @author Stephen Colebourne\n  */\n \n     public boolean add(Object object, int nCopies) {\n         boolean result = false;\n-        if (handler.preAdd(object, nCopies)) {\n+        if (handler.preAddNCopies(object, nCopies)) {\n             result = getBag().add(object, nCopies);\n-            handler.postAdd(object, nCopies, result);\n+            handler.postAddNCopies(object, nCopies, result);\n         }\n         return result;\n     }\n \n     public boolean remove(Object object, int nCopies) {\n         boolean result = false;\n-        if (handler.preRemove(object, nCopies)) {\n+        if (handler.preRemoveNCopies(object, nCopies)) {\n             result = getBag().remove(object, nCopies);\n-            handler.postRemove(object, nCopies, result);\n+            handler.postRemoveNCopies(object, nCopies, result);\n         }\n         return result;\n     }\n--- a/src/java/org/apache/commons/collections/observed/ObservedCollection.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservedCollection.java,v 1.1 2003/09/03 23:54:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservedCollection.java,v 1.2 2003/09/06 18:59:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * See this class for details of configuration available.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/03 23:54:26 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/06 18:59:09 $\n  * \n  * @author Stephen Colebourne\n  */\n      */\n     protected class ObservedIterator extends AbstractIteratorDecorator {\n         \n+        protected int lastIndex = -1;\n         protected Object last;\n         \n         protected ObservedIterator(Iterator iterator) {\n         \n         public Object next() {\n             last = super.next();\n+            lastIndex++;\n             return last;\n         }\n \n         public void remove() {\n-            if (handler.preRemove(last)) {\n+            if (handler.preRemoveIterated(lastIndex, last)) {\n                 iterator.remove();\n-                handler.postRemove(last, true);\n+                handler.postRemoveIterated(lastIndex, last);\n+                lastIndex--;\n             }\n         }\n     }\n--- a/src/java/org/apache/commons/collections/observed/ObservedList.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservedList.java,v 1.1 2003/09/03 23:54:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservedList.java,v 1.2 2003/09/06 18:59:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * See this class for details of configuration available.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/03 23:54:26 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/06 18:59:09 $\n  * \n  * @author Stephen Colebourne\n  */\n \n     //-----------------------------------------------------------------------\n     public void add(int index, Object object) {\n-        if (handler.preAdd(index, object)) {\n+        if (handler.preAddIndexed(index, object)) {\n             getList().add(index, object);\n-            handler.postAdd(index, object);\n+            handler.postAddIndexed(index, object);\n         }\n     }\n \n     public boolean addAll(int index, Collection coll) {\n         boolean result = false;\n-        if (handler.preAddAll(index, coll)) {\n+        if (handler.preAddAllIndexed(index, coll)) {\n             result = getList().addAll(index, coll);\n-            handler.postAddAll(index, coll, result);\n+            handler.postAddAllIndexed(index, coll, result);\n         }\n         return result;\n     }\n \n     public Object remove(int index) {\n         Object result = null;\n-        if (handler.preRemove(index)) {\n+        if (handler.preRemoveIndexed(index)) {\n             result = getList().remove(index);\n-            handler.postRemove(index, result);\n+            handler.postRemoveIndexed(index, result);\n         }\n         return result;\n     }\n \n     public Object set(int index, Object object) {\n         Object result = null;\n-        if (handler.preSet(index, object)) {\n+        if (handler.preSetIndexed(index, object)) {\n             result = getList().set(index, object);\n-            handler.postSet(index, object, result);\n+            handler.postSetIndexed(index, object, result);\n         }\n         return result;\n     }\n \n         public void remove() {\n             int index = iterator.previousIndex();\n-            if (handler.preRemove(index)) {\n+            if (handler.preRemoveIterated(index, last)) {\n                 iterator.remove();\n-                handler.postRemove(index, last);\n+                handler.postRemoveIterated(index, last);\n             }\n         }\n         \n         public void add(Object object) {\n             int index = iterator.nextIndex();\n-            if (handler.preAdd(index, object)) {\n+            if (handler.preAddIterated(index, object)) {\n                 iterator.add(object);\n-                handler.postAdd(index, object);\n+                handler.postAddIterated(index, object);\n             }\n         }\n \n         public void set(Object object) {\n             int index = iterator.previousIndex();\n-            if (handler.preSet(index, object)) {\n+            if (handler.preSetIterated(index, object, last)) {\n                 iterator.set(object);\n-                handler.postSet(index, object, last);\n+                handler.postSetIterated(index, object, last);\n             }\n         }\n     }\n--- a/src/java/org/apache/commons/collections/observed/standard/StandardModificationEvent.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardModificationEvent.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationEvent.java,v 1.2 2003/09/06 16:53:23 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationEvent.java,v 1.3 2003/09/06 18:59:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.observed.ModificationHandler;\n \n /**\n- * Event class that encapsulates all the event information for a\n- * standard collection event.\n+ * Event class that encapsulates the event information for a\n+ * standard collection event. Two subclasses are provided, one for\n+ * pre and one for post events.\n  * <p>\n  * The information stored in this event is all that is available as\n  * parameters or return values.\n  * All objects used are the real objects from the method calls, not clones.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/06 16:53:23 $\n+ * @version $Revision: 1.3 $ $Date: 2003/09/06 18:59:09 $\n  * \n  * @author Stephen Colebourne\n  */\n \n     /** The size before the event */\n     protected final int preSize;\n-    /** The size after the event */\n-    protected final int postSize;\n     /** The index of the change */\n     protected final int index;\n     /** The object of the change */\n     /** The number of changes */\n     protected final int repeat;\n     /** The result of the method call */\n-    protected final Object result;\n+    protected final Object previous;\n \n     // Constructor\n     //-----------------------------------------------------------------------\n      * @param index  the index that changed\n      * @param object  the value that changed\n      * @param repeat  the number of repeats\n-     * @param result  the method result\n+     * @param previous  the previous value being removed/replaced\n      */\n     public StandardModificationEvent(\n         final Collection collection,\n         final int index,\n         final Object object,\n         final int repeat,\n-        final Object result) {\n+        final Object previous) {\n \n         super(collection, handler, type);\n         this.preSize = preSize;\n-        this.postSize = collection.size();\n         this.index = index;\n         this.object = object;\n         this.repeat = repeat;\n-        this.result = result;\n+        this.previous = previous;\n     }\n \n     // Change info\n     public Collection getChangeCollection() {\n         if (object == null) {\n             return Collections.EMPTY_LIST;\n-        } else if (type == ModificationEventType.ADD_NCOPIES || type == ModificationEventType.REMOVE_NCOPIES) {\n-            return Collections.singletonList(object);\n         } else if (isType(ModificationEventType.GROUP_BULK)) {\n             if (object instanceof Collection) {\n                 return (Collection) object;\n     }\n \n     /**\n-     * Gets the result of the method call.\n-     * <p>\n-     * For set(int) and remove(int) this will be the previous value\n-     * being replaced.\n-     * <p>\n-     * If there is no result yet, <code>null</code> will be returned.\n-     * If the result was a <code>boolean</code>, a <code>Boolean</code> is returned.\n-     * If the result was void, <code>null</code> will be returned.\n-     * \n-     * @return the repeat\n-     */\n-    public Object getResult() {\n-        return result;\n+     * Gets the previous value that is being replaced or removed.\n+     * <p>\n+     * This is only returned if the value definitely was previously in the\n+     * collection. Bulk operatons will not return this.\n+     * \n+     * @return the previous value that was removed/replaced\n+     */\n+    public Object getPrevious() {\n+        return previous;\n     }\n \n     // Size info\n         return preSize;\n     }\n \n-    /**\n-     * Gets the size after the change.\n-     * <p>\n-     * This method will return the same as <code>getPreSzie</code> if\n-     * called when handling a pre event.\n-     * \n-     * @return the size before the change\n-     */\n-    public int getPostSize() {\n-        return postSize;\n-    }\n-\n-    /**\n-     * Gets the size change, negative for remove/clear.\n-     * <p>\n-     * This method will return <code>zero</code> if called when handling a pre event.\n-     * \n-     * @return the size before the change\n-     */\n-    public int getSizeChange() {\n-        return postSize - preSize;\n-    }\n-\n-    /**\n-     * Returns true if the size of the collection changed.\n-     * <p>\n-     * This method will return <code>false</code> if called when handling a pre event.\n-     * \n-     * @return true is the size changed\n-     */\n-    public boolean isSizeChanged() {\n-        return (preSize != postSize);\n-    }\n-\n     // Event type\n     //-----------------------------------------------------------------------\n     /**\n+     * Checks to see if the event is an add event (add/addAll).\n+     * \n+     * @return true if of the specified type\n+     */\n+    public boolean isTypeAdd() {\n+        return (type & ModificationEventType.GROUP_ADD) > 0;\n+    }\n+\n+    /**\n+     * Checks to see if the event is a remove event (remove/removeAll/retainAll/clear).\n+     * \n+     * @return true if of the specified type\n+     */\n+    public boolean isTypeReduce() {\n+        return (type & ModificationEventType.GROUP_REDUCE) > 0;\n+    }\n+\n+    /**\n+     * Checks to see if the event is a change event (set).\n+     * \n+     * @return true if of the specified type\n+     */\n+    public boolean isTypeChange() {\n+        return (type & ModificationEventType.GROUP_CHANGE) > 0;\n+    }\n+\n+    /**\n+     * Checks to see if the event is a bulk event (addAll/removeAll/retainAll/clear).\n+     * \n+     * @return true if of the specified type\n+     */\n+    public boolean isTypeBulk() {\n+        return (type & ModificationEventType.GROUP_BULK) > 0;\n+    }\n+\n+    /**\n      * Checks to see if the event is of the specified type.\n      * <p>\n-     * This is any combination of constants from {@link ObservedEventType}.\n+     * This is any combination of constants from {@link ModificationEventType}.\n      * \n      * @param eventType  an event type constant\n      * @return true if of the specified type\n--- a/src/java/org/apache/commons/collections/observed/standard/StandardModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationHandler.java,v 1.1 2003/09/03 23:54:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationHandler.java,v 1.2 2003/09/06 18:59:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * modification events.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/03 23:54:26 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/06 18:59:09 $\n  * \n  * @author Stephen Colebourne\n  */\n      * Handles the pre event.\n      * \n      * @param type  the event type to send\n-     * @param index  the index where the change starts\n-     * @param object  the object that was added/removed\n-     * @param repeat  the number of repeats of the add/remove\n+     * @param index  the index where the change starts, the method param or derived\n+     * @param object  the object that will be added/removed/set, the method param or derived\n+     * @param repeat  the number of repeats of the add/remove, the method param or derived\n+     * @param previous  the previous value that will be removed/replaced, must exist in coll\n      * @return true to call the decorated collection\n      */\n-    protected boolean preEvent(int type, int index, Object object, int repeat) {\n+    protected boolean preEvent(int type, int index, Object object, int repeat, Object previous) {\n         preSize = getCollection().size();\n-        return firePreEvent(type, index, object, repeat);\n+        return firePreEvent(type, index, object, repeat, previous);\n     }\n \n     /**\n      * Sends the pre event to the listeners.\n      * \n      * @param type  the event type to send\n-     * @param index  the index where the change starts\n-     * @param object  the object that was added/removed\n-     * @param repeat  the number of repeats of the add/remove\n+     * @param index  the index where the change starts, the method param or derived\n+     * @param object  the object that will be added/removed/set, the method param or derived\n+     * @param repeat  the number of repeats of the add/remove, the method param or derived\n+     * @param previous  the previous value that will be removed/replaced, must exist in coll\n      * @return true to call the decorated collection\n      */\n-    protected boolean firePreEvent(int type, int index, Object object, int repeat) {\n+    protected boolean firePreEvent(int type, int index, Object object, int repeat, Object previous) {\n         if ((preMask & type) > 0) {\n-            StandardModificationEvent event = null;\n+            StandardPreModificationEvent event = null;\n             synchronized (this) {\n                 for (int i = 0; i < preHolder.length; i++) {\n                     PreHolder holder = preHolder[i];\n                     if ((holder.mask & type) > 0) {\n                         if (event == null) {\n-                            event = new StandardModificationEvent(\n-                                getCollection(), this, type, preSize, index, object, repeat, null);\n+                            event = new StandardPreModificationEvent(\n+                                getCollection(), this, type, preSize, index, object, repeat, previous);\n                         }\n                         holder.listener.modificationOccurring(event);\n                     }\n      * \n      * @param success  true if the method succeeded in changing the collection\n      * @param type  the event type to send\n-     * @param index  the index where the change starts\n-     * @param object  the object that was added/removed\n-     * @param repeat  the number of repeats of the add/remove\n-     */\n-    protected void postEvent(boolean success, int type, int index, Object object, int repeat) {\n+     * @param index  the index where the change starts, the method param or derived\n+     * @param object  the object that will be added/removed/set, the method param or derived\n+     * @param repeat  the number of repeats of the add/remove, the method param or derived\n+     * @param previous  the previous value that will be removed/replaced, must exist in coll\n+     */\n+    protected void postEvent(boolean success, int type, int index, Object object, int repeat, Object previous) {\n         if (success) {\n-            firePostEvent(type, index, object, repeat, (success ? Boolean.TRUE : Boolean.FALSE));\n-        }\n-    }\n-    \n-    /**\n-     * Handles the post event.\n-     * \n-     * @param success  true if the method succeeded in changing the collection\n+            firePostEvent(type, index, object, repeat, previous);\n+        }\n+    }\n+    \n+    /**\n+     * Sends the post event to the listeners.\n+     * \n      * @param type  the event type to send\n-     * @param index  the index where the change starts\n-     * @param object  the object that was added/removed\n-     * @param repeat  the number of repeats of the add/remove\n-     * @param result  the method result\n-     */\n-    protected void postEvent(boolean success, int type, int index, Object object, int repeat, Object result) {\n-        if (success) {\n-            firePostEvent(type, index, object, repeat, result);\n-        }\n-    }\n-    \n-    /**\n-     * Sends the post event to the listeners.\n-     * \n-     * @param type  the event type to send\n-     * @param index  the index where the change starts\n-     * @param object  the object that was added/removed\n-     * @param repeat  the number of repeats of the add/remove\n-     * @param result  the method result\n-     */\n-    protected void firePostEvent(int type, int index, Object object, int repeat, Object result) {\n+     * @param index  the index where the change starts, the method param or derived\n+     * @param object  the object that will be added/removed/set, the method param or derived\n+     * @param repeat  the number of repeats of the add/remove, the method param or derived\n+     * @param previous  the previous value that will be removed/replaced, must exist in coll\n+     */\n+    protected void firePostEvent(int type, int index, Object object, int repeat, Object previous) {\n         if ((postMask & type) > 0) {\n-            StandardModificationEvent event = null;\n+            StandardPostModificationEvent event = null;\n             synchronized (this) {\n                 for (int i = 0; i < postHolder.length; i++) {\n                     PostHolder holder = postHolder[i];\n                     if ((holder.mask & type) > 0) {\n                         if (event == null) {\n-                            event = new StandardModificationEvent(\n-                                getCollection(), this, type, preSize, index, object, repeat, result);\n+                            event = new StandardPostModificationEvent(\n+                                getCollection(), this, type, preSize, index, object, repeat, previous);\n                         }\n                         holder.listener.modificationOccurred(event);\n                     }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardPostModificationEvent.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPostModificationEvent.java,v 1.1 2003/09/06 18:59:09 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed.standard;\n+\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.observed.ModificationHandler;\n+\n+/**\n+ * Event class that encapsulates all the event information for a\n+ * standard collection event.\n+ * <p>\n+ * The information stored in this event is all that is available as\n+ * parameters or return values.\n+ * In addition, the <code>size</code> method is used on the collection.\n+ * All objects used are the real objects from the method calls, not clones.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/06 18:59:09 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class StandardPostModificationEvent extends StandardModificationEvent {\n+\n+    /** The size after the event */\n+    protected final int postSize;\n+\n+    // Constructor\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor.\n+     * \n+     * @param collection  the event source\n+     * @param handler  the handler\n+     * @param type  the event type\n+     * @param preSize  the size before the change\n+     * @param index  the index that changed\n+     * @param object  the value that changed\n+     * @param repeat  the number of repeats\n+     * @param previous  the previous value being removed/replaced\n+     */\n+    public StandardPostModificationEvent(\n+        final Collection collection,\n+        final ModificationHandler handler,\n+        final int type,\n+        final int preSize,\n+        final int index,\n+        final Object object,\n+        final int repeat,\n+        final Object previous) {\n+\n+        super(collection, handler, type, preSize, index, object, repeat, previous);\n+        postSize = collection.size();\n+    }\n+\n+    // Size info\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the size after the change.\n+     * \n+     * @return the size after the change\n+     */\n+    public int getPostSize() {\n+        return postSize;\n+    }\n+\n+    /**\n+     * Gets the size change, negative for remove/clear.\n+     * \n+     * @return the size before the change\n+     */\n+    public int getSizeChange() {\n+        return postSize - preSize;\n+    }\n+\n+    /**\n+     * Returns true if the size of the collection changed.\n+     * \n+     * @return true is the size changed\n+     */\n+    public boolean isSizeChanged() {\n+        return (preSize != postSize);\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/observed/standard/StandardPostModificationListener.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardPostModificationListener.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPostModificationListener.java,v 1.1 2003/09/03 23:54:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPostModificationListener.java,v 1.2 2003/09/06 18:59:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * when a collection has been changed.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/03 23:54:26 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/06 18:59:09 $\n  * \n  * @author Stephen Colebourne\n  */\n      * \n      * @param event  the event detail\n      */\n-    public void modificationOccurred(StandardModificationEvent event);\n+    public void modificationOccurred(StandardPostModificationEvent event);\n     \n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardPreModificationEvent.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPreModificationEvent.java,v 1.1 2003/09/06 18:59:09 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed.standard;\n+\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.observed.ModificationHandler;\n+\n+/**\n+ * Event class that encapsulates all the event information for a\n+ * standard collection event.\n+ * <p>\n+ * The information stored in this event is all that is available as\n+ * parameters or return values.\n+ * In addition, the <code>size</code> method is used on the collection.\n+ * All objects used are the real objects from the method calls, not clones.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/06 18:59:09 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class StandardPreModificationEvent extends StandardModificationEvent {\n+\n+    // Constructor\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor.\n+     * \n+     * @param collection  the event source\n+     * @param handler  the handler\n+     * @param type  the event type\n+     * @param preSize  the size before the change\n+     * @param index  the index that changed\n+     * @param object  the value that changed\n+     * @param repeat  the number of repeats\n+     * @param previous  the previous value being removed/replaced\n+     */\n+    public StandardPreModificationEvent(\n+        final Collection collection,\n+        final ModificationHandler handler,\n+        final int type,\n+        final int preSize,\n+        final int index,\n+        final Object object,\n+        final int repeat,\n+        final Object previous) {\n+\n+        super(collection, handler, type, preSize, index, object, repeat, previous);\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/observed/standard/StandardPreModificationListener.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardPreModificationListener.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPreModificationListener.java,v 1.1 2003/09/03 23:54:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPreModificationListener.java,v 1.2 2003/09/06 18:59:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * when a collection is about to be modified.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/03 23:54:26 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/06 18:59:09 $\n  * \n  * @author Stephen Colebourne\n  */\n      * @param event  the event detail\n      * @throws ModicationVetoedException to veto\n      */\n-    public void modificationOccurring(StandardModificationEvent event);\n+    public void modificationOccurring(StandardPreModificationEvent event);\n     \n }\n--- a/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n+++ b/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.2 2003/09/06 16:53:23 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.3 2003/09/06 18:59:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Assert;\n \n-import org.apache.commons.collections.observed.standard.StandardModificationEvent;\n import org.apache.commons.collections.observed.standard.StandardModificationHandler;\n import org.apache.commons.collections.observed.standard.StandardModificationListener;\n+import org.apache.commons.collections.observed.standard.StandardPostModificationEvent;\n import org.apache.commons.collections.observed.standard.StandardPostModificationListener;\n+import org.apache.commons.collections.observed.standard.StandardPreModificationEvent;\n import org.apache.commons.collections.observed.standard.StandardPreModificationListener;\n \n /**\n  * {@link ObservedCollection} implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/06 16:53:23 $\n+ * @version $Revision: 1.3 $ $Date: 2003/09/06 18:59:09 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n     \n     public static class Listener implements StandardModificationListener {\n-        public StandardModificationEvent preEvent = null;\n-        public StandardModificationEvent postEvent = null;\n-        \n-        public void modificationOccurring(StandardModificationEvent event) {\n+        public StandardPreModificationEvent preEvent = null;\n+        public StandardPostModificationEvent postEvent = null;\n+        \n+        public void modificationOccurring(StandardPreModificationEvent event) {\n             this.preEvent = event;\n         }\n \n-        public void modificationOccurred(StandardModificationEvent event) {\n+        public void modificationOccurred(StandardPostModificationEvent event) {\n             this.postEvent = event;\n         }\n     }\n     \n     public static class PreListener implements StandardPreModificationListener {\n-        public StandardModificationEvent preEvent = null;\n-        \n-        public void modificationOccurring(StandardModificationEvent event) {\n+        public StandardPreModificationEvent preEvent = null;\n+        \n+        public void modificationOccurring(StandardPreModificationEvent event) {\n             this.preEvent = event;\n         }\n     }\n     \n     public static class PostListener implements StandardPostModificationListener {\n-        public StandardModificationEvent postEvent = null;\n-        \n-        public void modificationOccurred(StandardModificationEvent event) {\n+        public StandardPostModificationEvent postEvent = null;\n+        \n+        public void modificationOccurred(StandardPostModificationEvent event) {\n             this.postEvent = event;\n         }\n     }\n         doTestRemove(factory);\n         doTestRemoveAll(factory);\n         doTestRetainAll(factory);\n-        doTestIteratorRemove(factory);\n+        doTestRemoveIterated(factory);\n     }\n     \n     public static void bulkTestObservedSet(ObservedFactory factory) {\n         doTestAddAllIndexed(factory);\n         doTestRemoveIndexed(factory);\n         doTestSetIndexed(factory);\n-        doTestIteratorAdd(factory);\n-        doTestIteratorSet(factory);\n+        doTestAddIterated(factory);\n+        doTestSetIterated(factory);\n     }\n     \n     public static void bulkTestObservedBag(ObservedFactory factory) {\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n         Assert.assertSame(SIX, LISTENER.preEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(0, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n         Assert.assertSame(SIX, LISTENER.postEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n+        Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(0, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(1, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+        \n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeBulk());\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n         Assert.assertSame(SEVEN, LISTENER.preEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(1, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(1, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n         Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n+        Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(1, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(2, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n+        Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(3, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n         Assert.assertSame(EIGHT, LISTENER.preEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n         Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.postEvent.getResult());\n+        Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(3, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeBulk());\n     }\n \n     //-----------------------------------------------------------------------\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n         Assert.assertSame(EIGHT, LISTENER.preEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(3, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n         Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(3, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n+        Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(5, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(3, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public static void doTestIteratorAdd(ObservedFactory factory) {\n+\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public static void doTestAddIterated(ObservedFactory factory) {\n         ObservedList coll = (ObservedList) factory.createObservedCollection(LISTENER);\n         \n         coll.addAll(SIX_SEVEN_LIST);\n         // pre\n         Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        Assert.assertEquals(ModificationEventType.ADD_INDEXED, LISTENER.preEvent.getType());\n+        Assert.assertEquals(ModificationEventType.ADD_ITERATED, LISTENER.preEvent.getType());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(EIGHT, LISTENER.preEvent.getChangeObject());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n         Assert.assertSame(EIGHT, LISTENER.preEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n-        // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n-        Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        Assert.assertEquals(ModificationEventType.ADD_INDEXED, LISTENER.postEvent.getType());\n+        // post\n+        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.ADD_ITERATED, LISTENER.postEvent.getType());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeIndex());\n         Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n         Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.postEvent.getResult());\n+        Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(3, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeBulk());\n     }\n \n     //-----------------------------------------------------------------------\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeObject());\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeCollection());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(0, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD_ALL, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n-        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeCollection());\n-        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n+        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(0, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(2, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(2, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeBulk());\n     }\n \n     //-----------------------------------------------------------------------\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeObject());\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection());\n-        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n+        Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(4, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(2, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeBulk());\n     }\n \n     //-----------------------------------------------------------------------\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.CLEAR, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        Assert.assertSame(null, LISTENER.postEvent.getChangeObject());\n+        Assert.assertSame(null, LISTENER.preEvent.getChangeObject());\n         Assert.assertEquals(0, LISTENER.preEvent.getChangeCollection().size());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.CLEAR, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.postEvent.getChangeObject());\n-        Assert.assertEquals(0, LISTENER.preEvent.getChangeCollection().size());\n-        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.postEvent.getResult());\n+        Assert.assertEquals(0, LISTENER.postEvent.getChangeCollection().size());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(0, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(-2, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeBulk());\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n+        Assert.assertSame(SEVEN, LISTENER.preEvent.getChangeObject());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n         Assert.assertSame(SEVEN, LISTENER.preEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        Assert.assertSame(SEVEN, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(1, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(-1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeBulk());\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_INDEXED, LISTENER.preEvent.getType());\n         Assert.assertEquals(0, LISTENER.preEvent.getChangeIndex());\n-        Assert.assertSame(null, LISTENER.postEvent.getChangeObject());\n+        Assert.assertSame(null, LISTENER.preEvent.getChangeObject());\n         Assert.assertEquals(0, LISTENER.preEvent.getChangeCollection().size());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_INDEXED, LISTENER.postEvent.getType());\n         Assert.assertEquals(0, LISTENER.postEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.postEvent.getChangeObject());\n-        Assert.assertEquals(0, LISTENER.preEvent.getChangeCollection().size());\n-        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(SIX, LISTENER.postEvent.getResult());\n+        Assert.assertEquals(0, LISTENER.postEvent.getChangeCollection().size());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n+        Assert.assertSame(SIX, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(1, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(-1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeBulk());\n     }\n \n     //-----------------------------------------------------------------------\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_NCOPIES, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n+        Assert.assertSame(SEVEN, LISTENER.preEvent.getChangeObject());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        Assert.assertEquals(3, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(SEVEN, LISTENER.preEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(3, LISTENER.preEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(13, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(13, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_NCOPIES, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n         Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(3, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(13, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(10, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(-3, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public static void doTestRemoveIterated(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection(LISTENER);\n+        \n+        coll.addAll(SIX_SEVEN_LIST);\n+        LISTENER.preEvent = null;\n+        LISTENER.postEvent = null;\n+        Assert.assertEquals(2, coll.size());\n+        Iterator it = coll.iterator();\n+        it.next();\n+        it.next();\n+        it.remove();\n+        Assert.assertEquals(1, coll.size());\n+        // pre\n+        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.REMOVE_ITERATED, LISTENER.preEvent.getType());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeIndex());\n+        Assert.assertSame(SEVEN, LISTENER.preEvent.getChangeObject());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n+        Assert.assertSame(SEVEN, LISTENER.preEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n+        Assert.assertSame(SEVEN, LISTENER.preEvent.getPrevious());\n+        Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n+        // post\n+        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.REMOVE_ITERATED, LISTENER.postEvent.getType());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeIndex());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getPrevious());\n+        Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n+        Assert.assertEquals(1, LISTENER.postEvent.getPostSize());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getSizeChange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+        \n+        LISTENER.preEvent = null;\n+        LISTENER.postEvent = null;\n+        Assert.assertEquals(1, coll.size());\n+        coll.remove(SEVEN);  // already removed\n+        Assert.assertEquals(1, coll.size());\n+        Assert.assertTrue(LISTENER.preEvent != null);\n+        Assert.assertTrue(LISTENER.postEvent == null);\n     }\n \n     //-----------------------------------------------------------------------\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_ALL, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n-        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeObject());\n+        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeCollection());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(3, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(3, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n+        Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(3, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(1, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(-2, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeBulk());\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.RETAIN_ALL, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n-        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeObject());\n+        Assert.assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeCollection());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(3, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(3, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n         Assert.assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n+        Assert.assertSame(null, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(3, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(2, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(-1, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeBulk());\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public static void doTestIteratorRemove(ObservedFactory factory) {\n-        ObservedCollection coll = factory.createObservedCollection(LISTENER);\n-        \n-        coll.addAll(SIX_SEVEN_LIST);\n-        LISTENER.preEvent = null;\n-        LISTENER.postEvent = null;\n-        Assert.assertEquals(2, coll.size());\n-        Iterator it = coll.iterator();\n-        it.next();\n-        it.next();\n-        it.remove();\n-        Assert.assertEquals(1, coll.size());\n-        // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n-        Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        Assert.assertEquals(ModificationEventType.REMOVE, LISTENER.preEvent.getType());\n-        Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        Assert.assertSame(SEVEN, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n-        // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n-        Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        Assert.assertEquals(ModificationEventType.REMOVE, LISTENER.postEvent.getType());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n-        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        Assert.assertSame(SEVEN, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(Boolean.TRUE, LISTENER.postEvent.getResult());\n-        Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n-        Assert.assertEquals(1, LISTENER.postEvent.getPostSize());\n-        Assert.assertEquals(-1, LISTENER.postEvent.getSizeChange());\n-        Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-        \n-        LISTENER.preEvent = null;\n-        LISTENER.postEvent = null;\n-        Assert.assertEquals(1, coll.size());\n-        coll.remove(SEVEN);  // already removed\n-        Assert.assertEquals(1, coll.size());\n-        Assert.assertTrue(LISTENER.preEvent != null);\n-        Assert.assertTrue(LISTENER.postEvent == null);\n-    }\n-\n-    //-----------------------------------------------------------------------\n     public static void doTestSetIndexed(ObservedFactory factory) {\n         ObservedList coll = (ObservedList) factory.createObservedCollection(LISTENER);\n         \n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.SET_INDEXED, LISTENER.preEvent.getType());\n         Assert.assertEquals(0, LISTENER.preEvent.getChangeIndex());\n-        Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n+        Assert.assertSame(EIGHT, LISTENER.preEvent.getChangeObject());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(EIGHT, LISTENER.preEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n         // post\n         Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.SET_INDEXED, LISTENER.postEvent.getType());\n         Assert.assertEquals(0, LISTENER.postEvent.getChangeIndex());\n         Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n         Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(SIX, LISTENER.postEvent.getResult());\n+        Assert.assertSame(SIX, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(2, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(0, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(false, LISTENER.postEvent.isSizeChanged());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public static void doTestIteratorSet(ObservedFactory factory) {\n+\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public static void doTestSetIterated(ObservedFactory factory) {\n         ObservedList coll = (ObservedList) factory.createObservedCollection(LISTENER);\n         \n         coll.addAll(SIX_SEVEN_LIST);\n         // pre\n         Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        Assert.assertEquals(ModificationEventType.SET_INDEXED, LISTENER.preEvent.getType());\n+        Assert.assertEquals(ModificationEventType.SET_ITERATED, LISTENER.preEvent.getType());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeIndex());\n-        Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n+        Assert.assertSame(EIGHT, LISTENER.preEvent.getChangeObject());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        Assert.assertSame(null, LISTENER.preEvent.getResult());\n+        Assert.assertSame(EIGHT, LISTENER.preEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n+        Assert.assertSame(SEVEN, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n-        Assert.assertEquals(2, LISTENER.preEvent.getPostSize());\n-        Assert.assertEquals(0, LISTENER.preEvent.getSizeChange());\n-        Assert.assertEquals(false, LISTENER.preEvent.isSizeChanged());\n-        // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n-        Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        Assert.assertEquals(ModificationEventType.SET_INDEXED, LISTENER.postEvent.getType());\n+        // post\n+        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.SET_ITERATED, LISTENER.postEvent.getType());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeIndex());\n         Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n-        Assert.assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n         Assert.assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        Assert.assertSame(SEVEN, LISTENER.postEvent.getResult());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n         Assert.assertEquals(2, LISTENER.postEvent.getPostSize());\n         Assert.assertEquals(0, LISTENER.postEvent.getSizeChange());\n         Assert.assertEquals(false, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeBulk());\n     }\n \n }", "timestamp": 1062874749, "metainfo": ""}