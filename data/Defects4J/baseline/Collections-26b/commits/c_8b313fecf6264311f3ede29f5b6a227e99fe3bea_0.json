{"sha": "8b313fecf6264311f3ede29f5b6a227e99fe3bea", "log": "Refactor tests to interface based subpackages   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestArrayList.java\n+++ b/src/test/org/apache/commons/collections/TestArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestArrayList.java,v 1.9 2003/10/05 21:03:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestArrayList.java,v 1.10 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.list.AbstractTestList;\n+\n /**\n  * Abstract test class for ArrayList.\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/10/05 21:03:44 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Jason van Zyl\n  */\n--- a/src/test/org/apache/commons/collections/TestBeanMap.java\n+++ b/src/test/org/apache/commons/collections/TestBeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBeanMap.java,v 1.14 2003/11/01 18:47:18 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBeanMap.java,v 1.15 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.textui.TestRunner;\n \n+import org.apache.commons.collections.map.AbstractTestMap;\n+\n /**\n  * Test cases for BeanMap\n  * \n- * @version $Revision: 1.14 $ $Date: 2003/11/01 18:47:18 $\n+ * @version $Revision: 1.15 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n--- a/src/test/org/apache/commons/collections/TestBinaryHeap.java\n+++ b/src/test/org/apache/commons/collections/TestBinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBinaryHeap.java,v 1.11 2003/10/05 21:03:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBinaryHeap.java,v 1.12 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.collection.AbstractTestCollection;\n import org.apache.commons.collections.comparators.ComparableComparator;\n import org.apache.commons.collections.comparators.ReverseComparator;\n \n /**\n  * Tests the BinaryHeap.\n  * \n- * @version $Revision: 1.11 $ $Date: 2003/10/05 21:03:44 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Michael A. Smith\n  */\n--- a/src/test/org/apache/commons/collections/TestBoundedFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/TestBoundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBoundedFifoBuffer.java,v 1.9 2003/10/05 21:03:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBoundedFifoBuffer.java,v 1.10 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.collection.AbstractTestCollection;\n+\n /**\n  * Test cases for BoundedFifoBuffer.\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/10/05 21:03:44 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Paul Jack\n  */\n--- a/src/test/org/apache/commons/collections/TestBufferUtils.java\n+++ b/src/test/org/apache/commons/collections/TestBufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBufferUtils.java,v 1.9 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBufferUtils.java,v 1.10 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n \n import org.apache.commons.collections.buffer.PredicatedBuffer;\n+import org.apache.commons.collections.collection.AbstractTestCollection;\n \n /**\n  * Tests for BufferUtils.\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Unknown\n  */\n--- a/src/test/org/apache/commons/collections/TestCircularFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/TestCircularFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCircularFifoBuffer.java,v 1.5 2003/10/05 21:11:06 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCircularFifoBuffer.java,v 1.6 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.collection.AbstractTestCollection;\n+\n /**\n  * Test cases for CircularFifoBuffer.\n  * \n- * @version $Revision: 1.5 $ $Date: 2003/10/05 21:11:06 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.30 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.31 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.collection.AbstractTestCollection;\n import org.apache.commons.collections.collection.PredicatedCollection;\n import org.apache.commons.collections.collection.SynchronizedCollection;\n import org.apache.commons.collections.collection.TransformedCollection;\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  * \n- * @version $Revision: 1.30 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.31 $ $Date: 2003/11/16 22:15:09 $\n  */\n public class TestCollectionUtils extends TestCase {\n     \n--- a/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.14 2003/10/05 21:11:06 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.15 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.list.AbstractTestList;\n+\n /**\n  * Test class.\n  * \n- * @version $Revision: 1.14 $ $Date: 2003/10/05 21:11:06 $\n+ * @version $Revision: 1.15 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Rodney Waldhoff\n  * @author Simon Kitching\n--- a/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java,v 1.11 2003/11/01 18:47:18 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java,v 1.12 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.map.AbstractTestMap;\n+\n /**\n  * Class TestDoubleOrderedMap\n  * <p>\n  * Map that does not support duplicate keys, duplicate \n  * values, or null values.\n  * \n- * @version $Revision: 1.11 $ $Date: 2003/11/01 18:47:18 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Marc Johnson\n  * @author Stephen Colebourne\n--- a/src/test/org/apache/commons/collections/TestFastHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestFastHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFastHashMap.java,v 1.12 2003/10/07 22:20:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFastHashMap.java,v 1.13 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.map.AbstractTestMap;\n+\n /**\n  * Tests FastHashMap.\n  * \n- * @version $Revision: 1.12 $ $Date: 2003/10/07 22:20:57 $\n+ * @version $Revision: 1.13 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Jason van Zyl\n  */\n--- a/src/test/org/apache/commons/collections/TestFlat3Map.java\n+++ b/src/test/org/apache/commons/collections/TestFlat3Map.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestFlat3Map.java,v 1.2 2003/11/08 18:46:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestFlat3Map.java,v 1.3 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n import org.apache.commons.collections.iterators.MapIterator;\n+import org.apache.commons.collections.map.AbstractTestMap;\n \n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.2 $ $Date: 2003/11/08 18:46:57 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/TestHashBag.java\n+++ b/src/test/org/apache/commons/collections/TestHashBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestHashBag.java,v 1.6 2003/10/05 21:17:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestHashBag.java,v 1.7 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.bag.AbstractTestBag;\n+\n /**\n  * Extension of {@link TestBag} for exercising the {@link HashBag}\n  * implementation.\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/10/05 21:17:40 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/16 22:15:09 $\n  *\n  * @author Chuck Burdick\n  */\n--- a/src/test/org/apache/commons/collections/TestLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLinkedList.java,v 1.5 2003/10/05 21:17:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLinkedList.java,v 1.6 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.List;\n import java.util.NoSuchElementException;\n \n+import org.apache.commons.collections.list.AbstractTestList;\n+\n /**\n  * Tests base {@link java.util.LinkedList} methods and contracts.\n  * <p>\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link List} fails.\n  * \n- * @version $Revision: 1.5 $ $Date: 2003/10/05 21:17:40 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/16 22:15:09 $\n  *\n  * @author Rich Dougherty\n  */\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.15 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.16 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.list.AbstractTestList;\n import org.apache.commons.collections.list.PredicatedList;\n \n /**\n  * Tests for ListUtils.\n  * \n- * @version $Revision: 1.15 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.16 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Stephen Colebourne\n  * @author Neil O'Toole\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.19 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.20 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.map.AbstractTestMap;\n import org.apache.commons.collections.map.LazyMap;\n import org.apache.commons.collections.map.PredicatedMap;\n \n /**\n  * Tests for MapUtils.\n  * \n- * @version $Revision: 1.19 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.20 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Stephen Colebourne\n  * @author Arun Mammen Thomas\n--- a/src/test/org/apache/commons/collections/TestMultiHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestMultiHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMultiHashMap.java,v 1.13 2003/10/05 21:17:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMultiHashMap.java,v 1.14 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.map.AbstractTestMap;\n+\n /**\n  * Unit Tests for <code>MultiHashMap</code>.\n  * \n- * @version $Revision: 1.13 $ $Date: 2003/10/05 21:17:40 $\n+ * @version $Revision: 1.14 $ $Date: 2003/11/16 22:15:09 $\n  *\n  * @author Unknown\n  */\n--- a/src/test/org/apache/commons/collections/TestReferenceMap.java\n+++ b/src/test/org/apache/commons/collections/TestReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestReferenceMap.java,v 1.13 2003/10/07 22:20:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestReferenceMap.java,v 1.14 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.map.AbstractTestMap;\n+\n /**\n  * Tests for ReferenceMap. \n  * \n- * @version $Revision: 1.13 $ $Date: 2003/10/07 22:20:57 $\n+ * @version $Revision: 1.14 $ $Date: 2003/11/16 22:15:09 $\n  *\n  * @author Paul Jack\n  */\n--- a/src/test/org/apache/commons/collections/TestSequencedHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestSequencedHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSequencedHashMap.java,v 1.22 2003/10/05 21:23:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSequencedHashMap.java,v 1.23 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.map.AbstractTestMap;\n+\n /**\n  * Unit tests \n  * {@link org.apache.commons.collections.SequencedHashMap}.\n  * Be sure to use the \"labRat\" instance whenever possible,\n  * so that subclasses will be tested correctly.\n  * \n- * @version $Revision: 1.22 $ $Date: 2003/10/05 21:23:21 $\n+ * @version $Revision: 1.23 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Morgan Delagrange\n  * @author Daniel Rall\n--- a/src/test/org/apache/commons/collections/TestSetUtils.java\n+++ b/src/test/org/apache/commons/collections/TestSetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.12 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.13 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.set.AbstractTestSet;\n import org.apache.commons.collections.set.PredicatedSet;\n \n /**\n  * Tests for SetUtils.\n  * \n- * @version $Revision: 1.12 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.13 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Stephen Colebourne\n  * @author Neil O'Toole\n--- a/src/test/org/apache/commons/collections/TestStaticBucketMap.java\n+++ b/src/test/org/apache/commons/collections/TestStaticBucketMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestStaticBucketMap.java,v 1.7 2003/10/05 21:23:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestStaticBucketMap.java,v 1.8 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.map.AbstractTestMap;\n+\n /**\n  * Unit tests \n  * {@link org.apache.commons.collections.StaticBucketMap}.\n  * \n- * @version $Revision: 1.7 $ $Date: 2003/10/05 21:23:21 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Michael A. Smith\n  */\n--- a/src/test/org/apache/commons/collections/TestTreeBag.java\n+++ b/src/test/org/apache/commons/collections/TestTreeBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTreeBag.java,v 1.6 2003/10/05 21:23:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTreeBag.java,v 1.7 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.bag.AbstractTestBag;\n+\n /**\n  * Extension of {@link TestBag} for exercising the {@link TreeBag}\n  * implementation.\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/10/05 21:23:21 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/16 22:15:09 $\n  *\n  * @author Chuck Burdick\n  */\n--- a/src/test/org/apache/commons/collections/TestTreeMap.java\n+++ b/src/test/org/apache/commons/collections/TestTreeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTreeMap.java,v 1.10 2003/10/07 22:20:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTreeMap.java,v 1.11 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.TreeMap;\n \n+import org.apache.commons.collections.map.AbstractTestMap;\n+\n /**\n  * Tests TreeMap.\n  * \n- * @version $Revision: 1.10 $ $Date: 2003/10/07 22:20:57 $\n+ * @version $Revision: 1.11 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Jason van Zyl\n  */\n--- a/src/test/org/apache/commons/collections/TestUnboundedFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/TestUnboundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestUnboundedFifoBuffer.java,v 1.8 2003/10/05 21:23:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestUnboundedFifoBuffer.java,v 1.9 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.collection.AbstractTestCollection;\n+\n /**\n  * Test cases for UnboundedFifoBuffer.\n  * \n- * @version $Revision: 1.8 $ $Date: 2003/10/05 21:23:21 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Unknown\n  */\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/AbstractTestBag.java,v 1.1 2003/11/16 22:15:10 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.ArrayList;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.commons.collections.AbstractTestObject;\n+import org.apache.commons.collections.Bag;\n+\n+/**\n+ * Abstract test class for {@link Bag} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeBag} method.\n+ * <p>\n+ * If your {@link Bag} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link Bag} fails.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:10 $\n+ * \n+ * @author Chuck Burdick\n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractTestBag extends AbstractTestObject {\n+//  TODO: this class should really extend from TestCollection, but the bag\n+//  implementations currently do not conform to the Collection interface.  Once\n+//  those are fixed or at least a strategy is made for resolving the issue, this\n+//  can be changed back to extend TestCollection instead.\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test class name\n+     */\n+    public AbstractTestBag(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Return a new, empty {@link Bag} to used for testing.\n+     * \n+     * @return the bag to be tested\n+     */\n+    protected abstract Bag makeBag();\n+\n+    /**\n+     * Implements the superclass method to return the Bag.\n+     * \n+     * @return the bag to be tested\n+     */\n+    protected Object makeObject() {\n+        return makeBag();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBagAdd() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+        bag.add(\"A\");\n+        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+        bag.add(\"B\");\n+        assertTrue(bag.contains(\"A\"));\n+        assertTrue(bag.contains(\"B\"));\n+    }\n+\n+    public void testBagEqualsSelf() {\n+        Bag bag = makeBag();\n+        assertTrue(bag.equals(bag));\n+        bag.add(\"elt\");\n+        assertTrue(bag.equals(bag));\n+        bag.add(\"elt\"); // again\n+        assertTrue(bag.equals(bag));\n+        bag.add(\"elt2\");\n+        assertTrue(bag.equals(bag));\n+    }\n+\n+    public void testRemove() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+        bag.remove(\"A\");\n+        assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n+        bag.remove(\"A\", 0);\n+        assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n+        bag.remove(\"A\", 2);\n+        assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+        bag.remove(\"A\");\n+        assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n+    }\n+\n+    public void testRemoveAll() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\", 2);\n+        assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+        bag.add(\"B\");\n+        bag.add(\"C\");\n+        assertEquals(\"Should have count of 4\", 4, bag.size());\n+        List delete = new ArrayList();\n+        delete.add(\"A\");\n+        delete.add(\"B\");\n+        bag.removeAll(delete);\n+        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+        assertEquals(\"Should have count of 0\", 0, bag.getCount(\"B\"));\n+        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"C\"));\n+        assertEquals(\"Should have count of 2\", 2, bag.size());\n+    }\n+    \n+    public void testContains() {\n+        Bag bag = makeBag();\n+        \n+        assertEquals(\"Bag does not have at least 1 'A'\", false, bag.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n+        \n+        bag.add(\"A\");  // bag 1A\n+        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n+        \n+        bag.add(\"A\");  // bag 2A\n+        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n+        \n+        bag.add(\"B\");  // bag 2A,1B\n+        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n+        assertEquals(\"Bag has at least 1 'B'\", true, bag.contains(\"B\"));\n+    }\n+\n+    public void testContainsAll() {\n+        Bag bag = makeBag();\n+        List known = new ArrayList();\n+        List known1A = new ArrayList();\n+        known1A.add(\"A\");\n+        List known2A = new ArrayList();\n+        known2A.add(\"A\");\n+        known2A.add(\"A\");\n+        List known1B = new ArrayList();\n+        known1B.add(\"B\");\n+        List known1A1B = new ArrayList();\n+        known1A1B.add(\"A\");\n+        known1A1B.add(\"B\");\n+        \n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag does not containsAll of 1 'A'\", false, bag.containsAll(known1A));\n+        assertEquals(\"Bag does not containsAll of 2 'A'\", false, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+        \n+        bag.add(\"A\");  // bag 1A\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag does not containsAll of 2 'A'\", false, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+        \n+        bag.add(\"A\");  // bag 2A\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+        \n+        bag.add(\"A\");  // bag 3A\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+        \n+        bag.add(\"B\");  // bag 3A1B\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag containsAll of 1 'B'\", true, bag.containsAll(known1B));\n+        assertEquals(\"Bag containsAll of 1 'A' 1 'B'\", true, bag.containsAll(known1A1B));\n+    }\n+\n+    public void testSize() {\n+        Bag bag = makeBag();\n+        assertEquals(\"Should have 0 total items\", 0, bag.size());\n+        bag.add(\"A\");\n+        assertEquals(\"Should have 1 total items\", 1, bag.size());\n+        bag.add(\"A\");\n+        assertEquals(\"Should have 2 total items\", 2, bag.size());\n+        bag.add(\"A\");\n+        assertEquals(\"Should have 3 total items\", 3, bag.size());\n+        bag.add(\"B\");\n+        assertEquals(\"Should have 4 total items\", 4, bag.size());\n+        bag.add(\"B\");\n+        assertEquals(\"Should have 5 total items\", 5, bag.size());\n+        bag.remove(\"A\", 2);\n+        assertEquals(\"Should have 1 'A'\", 1, bag.getCount(\"A\"));\n+        assertEquals(\"Should have 3 total items\", 3, bag.size());\n+        bag.remove(\"B\");\n+        assertEquals(\"Should have 1 total item\", 1, bag.size());\n+    }\n+    \n+    public void testRetainAll() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"B\");\n+        bag.add(\"B\");\n+        bag.add(\"C\");\n+        List retains = new ArrayList();\n+        retains.add(\"B\");\n+        retains.add(\"C\");\n+        bag.retainAll(retains);\n+        assertEquals(\"Should have 2 total items\", 2, bag.size());\n+    }\n+\n+    public void testIterator() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"B\");\n+        assertEquals(\"Bag should have 3 items\", 3, bag.size());\n+        Iterator i = bag.iterator();\n+    \n+        boolean foundA = false;\n+        while (i.hasNext()) {\n+            String element = (String) i.next();\n+            // ignore the first A, remove the second via Iterator.remove()\n+            if (element.equals(\"A\")) {\n+                if (foundA == false) {\n+                    foundA = true;\n+                } else {\n+                    i.remove();\n+                }\n+            }\n+        }\n+    \n+        assertTrue(\"Bag should still contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Bag should have 2 items\", 2, bag.size());\n+        assertEquals(\"Bag should have 1 'A'\", 1, bag.getCount(\"A\"));\n+    }\n+\n+    public void testIteratorFail() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"B\");\n+        Iterator i = bag.iterator();\n+        i.next();\n+        bag.remove(\"A\");\n+        try {\n+            i.next();\n+            fail(\"Should throw ConcurrentModificationException\");\n+        } catch (ConcurrentModificationException e) {\n+            // expected\n+        }\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/bag/AbstractTestSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/AbstractTestSortedBag.java,v 1.1 2003/11/16 22:15:10 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+\n+/**\n+ * Abstract test class for {@link SortedBag} methods and contracts.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:10 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractTestSortedBag extends AbstractTestBag {\n+\n+    public AbstractTestSortedBag(String testName) {\n+        super(testName);\n+    }\n+    \n+    // TODO: Add the SortedBag tests!\n+}\n--- a/src/test/org/apache/commons/collections/bag/TestPredicatedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestPredicatedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestPredicatedBag.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestPredicatedBag.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestBag;\n import org.apache.commons.collections.Bag;\n import org.apache.commons.collections.HashBag;\n import org.apache.commons.collections.Predicate;\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestSortedBag;\n import org.apache.commons.collections.Bag;\n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.PredicateUtils;\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/bag/TestTransformedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTransformedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTransformedBag.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTransformedBag.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestBag;\n import org.apache.commons.collections.Bag;\n import org.apache.commons.collections.HashBag;\n import org.apache.commons.collections.collection.TestTransformedCollection;\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestSortedBag;\n import org.apache.commons.collections.Bag;\n import org.apache.commons.collections.TreeBag;\n import org.apache.commons.collections.collection.TestTransformedCollection;\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/bag/TestTypedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTypedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTypedBag.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTypedBag.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestBag;\n import org.apache.commons.collections.Bag;\n import org.apache.commons.collections.HashBag;\n \n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/bag/TestTypedSortedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTypedSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTypedSortedBag.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTypedSortedBag.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestSortedBag;\n import org.apache.commons.collections.Bag;\n import org.apache.commons.collections.SortedBag;\n import org.apache.commons.collections.TreeBag;\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java,v 1.1 2003/11/16 20:35:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.collections.AbstractTestMap;\n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n import org.apache.commons.collections.iterators.MapIterator;\n+import org.apache.commons.collections.map.AbstractTestMap;\n \n /**\n  * Abstract test class for {@link BidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/11/16 20:35:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java,v 1.2 2003/11/16 21:39:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java,v 1.3 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.TreeMap;\n import java.util.TreeSet;\n \n-import org.apache.commons.collections.AbstractTestSortedMap;\n import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.map.AbstractTestSortedMap;\n \n /**\n  * Abstract test class for {@link SortedBidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.2 $ $Date: 2003/11/16 21:39:42 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/collection/AbstractTestCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/AbstractTestCollection.java,v 1.1 2003/11/16 22:15:11 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.AbstractTestObject;\n+\n+/**\n+ * Abstract test class for {@link java.util.Collection} methods and contracts.\n+ * <p>\n+ * You should create a concrete subclass of this class to test any custom\n+ * {@link Collection} implementation.  At minimum, you'll have to \n+ * implement the {@link #makeCollection()} method.  You might want to \n+ * override some of the additional protected methods as well:\n+ * <p>\n+ * <b>Element Population Methods</b>\n+ * <p>\n+ * Override these if your collection restricts what kind of elements are\n+ * allowed (for instance, if <code>null</code> is not permitted):\n+ * <ul>\n+ * <li>{@link #getFullElements()}\n+ * <li>{@link #getOtherElements()}\n+ * </ul>\n+ * <p>\n+ * <b>Supported Operation Methods</b>\n+ * <p>\n+ * Override these if your collection doesn't support certain operations:\n+ * <ul>\n+ * <li>{@link #isAddSupported()}\n+ * <li>{@link #isRemoveSupported()}\n+ * <li>{@link #areEqualElementsDistinguishable()}\n+ * <li>{@link #isNullSupported()}\n+ * <li>{@link #isFailFastSupported()}\n+ * </ul>\n+ * <p>\n+ * <b>Fixture Methods</b>\n+ * <p>\n+ * Fixtures are used to verify that the the operation results in correct state\n+ * for the collection.  Basically, the operation is performed against your\n+ * collection implementation, and an identical operation is performed against a\n+ * <i>confirmed</i> collection implementation.  A confirmed collection\n+ * implementation is something like <code>java.util.ArrayList</code>, which is\n+ * known to conform exactly to its collection interface's contract.  After the\n+ * operation takes place on both your collection implementation and the\n+ * confirmed collection implementation, the two collections are compared to see\n+ * if their state is identical.  The comparison is usually much more involved\n+ * than a simple <code>equals</code> test.  This verification is used to ensure\n+ * proper modifications are made along with ensuring that the collection does\n+ * not change when read-only modifications are made.\n+ * <p>\n+ * The {@link #collection} field holds an instance of your collection\n+ * implementation; the {@link #confirmed} field holds an instance of the\n+ * confirmed collection implementation.  The {@link #resetEmpty()} and \n+ * {@link #resetFull()} methods set these fields to empty or full collections,\n+ * so that tests can proceed from a known state.\n+ * <p>\n+ * After a modification operation to both {@link #collection} and\n+ * {@link #confirmed}, the {@link #verify()} method is invoked to compare\n+ * the results.  You may want to override {@link #verify()} to perform\n+ * additional verifications.  For instance, when testing the collection\n+ * views of a map, {@link AbstractTestMap} would override {@link #verify()} to make\n+ * sure the map is changed after the collection view is changed.\n+ * <p>\n+ * If you're extending this class directly, you will have to provide \n+ * implementations for the following:\n+ * <ul>\n+ * <li>{@link #makeConfirmedCollection()}\n+ * <li>{@link #makeConfirmedFullCollection()}\n+ * </ul>\n+ * <p>\n+ * Those methods should provide a confirmed collection implementation \n+ * that's compatible with your collection implementation.\n+ * <p>\n+ * If you're extending {@link AbstractTestList}, {@link AbstractTestSet},\n+ * or {@link AbstractTestBag}, you probably don't have to worry about the\n+ * above methods, because those three classes already override the methods\n+ * to provide standard JDK confirmed collections.<P>\n+ * <p>\n+ * <b>Other notes</b>\n+ * <p>\n+ * If your {@link Collection} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link Collection} fails.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:11 $\n+ * \n+ * @author Rodney Waldhoff\n+ * @author Paul Jack\n+ * @author Michael A. Smith\n+ * @author Neil O'Toole\n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractTestCollection extends AbstractTestObject {\n+\n+    //\n+    // NOTE: \n+    //\n+    // Collection doesn't define any semantics for equals, and recommends you\n+    // use reference-based default behavior of Object.equals.  (And a test for\n+    // that already exists in AbstractTestObject).  Tests for equality of lists, sets\n+    // and bags will have to be written in test subclasses.  Thus, there is no\n+    // tests on Collection.equals nor any for Collection.hashCode.\n+    //\n+\n+\n+    // These fields are used by reset() and verify(), and any test\n+    // method that tests a modification.\n+\n+    /** \n+     *  A collection instance that will be used for testing.\n+     */\n+    protected Collection collection;\n+\n+    /** \n+     *  Confirmed collection.  This is an instance of a collection that is\n+     *  confirmed to conform exactly to the java.util.Collection contract.\n+     *  Modification operations are tested by performing a mod on your \n+     *  collection, performing the exact same mod on an equivalent confirmed\n+     *  collection, and then calling verify() to make sure your collection\n+     *  still matches the confirmed collection.\n+     */\n+    protected Collection confirmed;\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test class name\n+     */\n+    public AbstractTestCollection(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Specifies whether equal elements in the collection are, in fact,\n+     *  distinguishable with information not readily available.  That is, if a\n+     *  particular value is to be removed from the collection, then there is\n+     *  one and only one value that can be removed, even if there are other\n+     *  elements which are equal to it.  \n+     *\n+     *  <P>In most collection cases, elements are not distinguishable (equal is\n+     *  equal), thus this method defaults to return false.  In some cases,\n+     *  however, they are.  For example, the collection returned from the map's\n+     *  values() collection view are backed by the map, so while there may be\n+     *  two values that are equal, their associated keys are not.  Since the\n+     *  keys are distinguishable, the values are.\n+     *\n+     *  <P>This flag is used to skip some verifications for iterator.remove()\n+     *  where it is impossible to perform an equivalent modification on the\n+     *  confirmed collection because it is not possible to determine which\n+     *  value in the confirmed collection to actually remove.  Tests that\n+     *  override the default (i.e. where equal elements are distinguishable),\n+     *  should provide additional tests on iterator.remove() to make sure the\n+     *  proper elements are removed when remove() is called on the iterator.\n+     **/\n+    protected boolean areEqualElementsDistinguishable() {\n+        return false;\n+    }\n+\n+    /**\n+     *  Returns true if the collections produced by \n+     *  {@link #makeCollection()} and {@link #makeFullCollection()}\n+     *  support the <code>add</code> and <code>addAll</code>\n+     *  operations.<P>\n+     *  Default implementation returns true.  Override if your collection\n+     *  class does not support add or addAll.\n+     */\n+    protected boolean isAddSupported() {\n+        return true;\n+    }\n+\n+    /**\n+     *  Returns true if the collections produced by \n+     *  {@link #makeCollection()} and {@link #makeFullCollection()}\n+     *  support the <code>remove</code>, <code>removeAll</code>,\n+     *  <code>retainAll</code>, <code>clear</code> and\n+     *  <code>iterator().remove()</code> methods.\n+     *  Default implementation returns true.  Override if your collection\n+     *  class does not support removal operations.\n+     */\n+    protected boolean isRemoveSupported() {\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true to indicate that the collection supports holding null.\n+     * The default implementation returns true;\n+     */\n+    protected boolean isNullSupported() {\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true to indicate that the collection supports fail fast iterators.\n+     * The default implementation returns true;\n+     */\n+    protected boolean isFailFastSupported() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Verifies that {@link #collection} and {@link #confirmed} have \n+     *  identical state.\n+     */\n+    protected void verify() {\n+        int confirmedSize = confirmed.size();\n+        assertEquals(\"Collection size should match confirmed collection's\",\n+                     confirmedSize, collection.size());\n+        assertEquals(\"Collection isEmpty() result should match confirmed \" +\n+                     \" collection's\", \n+                     confirmed.isEmpty(), collection.isEmpty());\n+\n+        // verify the collections are the same by attempting to match each\n+        // object in the collection and confirmed collection.  To account for\n+        // duplicates and differing orders, each confirmed element is copied\n+        // into an array and a flag is maintained for each element to determine\n+        // whether it has been matched once and only once.  If all elements in\n+        // the confirmed collection are matched once and only once and there\n+        // aren't any elements left to be matched in the collection,\n+        // verification is a success.\n+\n+        // copy each collection value into an array\n+        Object[] confirmedValues = new Object[confirmedSize];\n+\n+        Iterator iter;\n+\n+        iter = confirmed.iterator(); \n+        int pos = 0;\n+        while(iter.hasNext()) {\n+            confirmedValues[pos++] = iter.next();\n+        }\n+\n+        // allocate an array of boolean flags for tracking values that have\n+        // been matched once and only once.\n+        boolean[] matched = new boolean[confirmedSize];\n+        \n+        // now iterate through the values of the collection and try to match\n+        // the value with one in the confirmed array.\n+        iter = collection.iterator();\n+        while(iter.hasNext()) {\n+            Object o = iter.next();\n+            boolean match = false;\n+            for(int i = 0; i < confirmedSize; i++) {\n+                if(matched[i]) {\n+                    // skip values already matched\n+                    continue;\n+                }\n+                if(o == confirmedValues[i] ||\n+                   (o != null && o.equals(confirmedValues[i]))) {\n+                    // values matched\n+                    matched[i] = true;\n+                    match = true;\n+                    break;\n+                }\n+            }\n+            // no match found!\n+            if(!match) {\n+                fail(\"Collection should not contain a value that the \" +\n+                     \"confirmed collection does not have: \" + o +\n+                     \"\\nTest: \" + collection + \"\\nReal: \" + confirmed);\n+            }\n+        }\n+        \n+        // make sure there aren't any unmatched values\n+        for(int i = 0; i < confirmedSize; i++) {\n+            if(!matched[i]) {\n+                // the collection didn't match all the confirmed values\n+                fail(\"Collection should contain all values that are in the confirmed collection\" +\n+                     \"\\nTest: \" + collection + \"\\nReal: \" + confirmed);\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Resets the {@link #collection} and {@link #confirmed} fields to empty\n+     *  collections.  Invoke this method before performing a modification\n+     *  test.\n+     */\n+    protected void resetEmpty() {\n+        this.collection = makeCollection();\n+        this.confirmed = makeConfirmedCollection();\n+    }\n+\n+    /**\n+     *  Resets the {@link #collection} and {@link #confirmed} fields to full\n+     *  collections.  Invoke this method before performing a modification\n+     *  test.\n+     */\n+    protected void resetFull() {\n+        this.collection = makeFullCollection();\n+        this.confirmed = makeConfirmedFullCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns a confirmed empty collection.\n+     *  For instance, an {@link java.util.ArrayList} for lists or a\n+     *  {@link java.util.HashSet} for sets.\n+     *\n+     *  @return a confirmed empty collection\n+     */\n+    protected abstract Collection makeConfirmedCollection();\n+\n+    /**\n+     *  Returns a confirmed full collection.\n+     *  For instance, an {@link java.util.ArrayList} for lists or a\n+     *  {@link java.util.HashSet} for sets.  The returned collection\n+     *  should contain the elements returned by {@link #getFullElements()}.\n+     *\n+     *  @return a confirmed full collection\n+     */\n+    protected abstract Collection makeConfirmedFullCollection();\n+\n+    /**\n+     * Return a new, empty {@link Collection} to be used for testing.\n+     */\n+    protected abstract Collection makeCollection();\n+\n+    /**\n+     *  Returns a full collection to be used for testing.  The collection\n+     *  returned by this method should contain every element returned by\n+     *  {@link #getFullElements()}.  The default implementation, in fact,\n+     *  simply invokes <code>addAll</code> on an empty collection with\n+     *  the results of {@link #getFullElements()}.  Override this default\n+     *  if your collection doesn't support addAll.\n+     */\n+    protected Collection makeFullCollection() {\n+        Collection c = makeCollection();\n+        c.addAll(Arrays.asList(getFullElements()));\n+        return c;\n+    }\n+\n+    /**\n+     *  Returns an empty collection for Object tests.\n+     */\n+    protected Object makeObject() {\n+        return makeCollection();\n+    }\n+\n+    /**\n+     * Creates a new Map Entry that is independent of the first and the map.\n+     */\n+    protected Map.Entry cloneMapEntry(Map.Entry entry) {\n+        HashMap map = new HashMap();\n+        map.put(entry.getKey(), entry.getValue());\n+        return (Map.Entry) map.entrySet().iterator().next();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns an array of objects that are contained in a collection\n+     *  produced by {@link #makeFullCollection()}.  Every element in the\n+     *  returned array <I>must</I> be an element in a full collection.<P>\n+     *  The default implementation returns a heterogenous array of \n+     *  objects with some duplicates. null is added if allowed.\n+     *  Override if you require specific testing elements.  Note that if you\n+     *  override {@link #makeFullCollection()}, you <I>must</I> override\n+     *  this method to reflect the contents of a full collection.\n+     */\n+    protected Object[] getFullElements() {\n+        if (isNullSupported()) {\n+            ArrayList list = new ArrayList();\n+            list.addAll(Arrays.asList(getFullNonNullElements()));\n+            list.add(4, null);\n+            return list.toArray();\n+        } else {\n+            return (Object[]) getFullNonNullElements().clone();\n+        }\n+    }\n+\n+    /**\n+     *  Returns an array of elements that are <I>not</I> contained in a\n+     *  full collection.  Every element in the returned array must \n+     *  not exist in a collection returned by {@link #makeFullCollection()}.\n+     *  The default implementation returns a heterogenous array of elements\n+     *  without null.  Note that some of the tests add these elements\n+     *  to an empty or full collection, so if your collection restricts\n+     *  certain kinds of elements, you should override this method.\n+     */\n+    protected Object[] getOtherElements() {\n+        return getOtherNonNullElements();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns a list of elements suitable for return by\n+     *  {@link #getFullElements()}.  The array returned by this method\n+     *  does not include null, but does include a variety of objects \n+     *  of different types.  Override getFullElements to return\n+     *  the results of this method if your collection does not support\n+     *  the null element.\n+     */\n+    protected Object[] getFullNonNullElements() {\n+        return new Object[] {\n+            new String(\"\"),\n+            new String(\"One\"),\n+            new Integer(2),\n+            \"Three\",\n+            new Integer(4),\n+            \"One\",\n+            new Double(5),\n+            new Float(6),\n+            \"Seven\",\n+            \"Eight\",\n+            new String(\"Nine\"),\n+            new Integer(10),\n+            new Short((short)11),\n+            new Long(12),\n+            \"Thirteen\",\n+            \"14\",\n+            \"15\",\n+            new Byte((byte)16)\n+        };\n+    }\n+\n+    /**\n+     *  Returns the default list of objects returned by \n+     *  {@link #getOtherElements()}.  Includes many objects\n+     *  of different types.\n+     */\n+    protected Object[] getOtherNonNullElements() {\n+        return new Object[] {\n+            new Integer(0),\n+            new Float(0),\n+            new Double(0),\n+            \"Zero\",\n+            new Short((short)0),\n+            new Byte((byte)0),\n+            new Long(0),\n+            new Character('\\u0000'),\n+            \"0\"\n+        };\n+    }\n+\n+    /**\n+     *  Returns a list of string elements suitable for return by\n+     *  {@link #getFullElements()}.  Override getFullElements to return\n+     *  the results of this method if your collection does not support\n+     *  heterogenous elements or the null element.\n+     */\n+    protected Object[] getFullNonNullStringElements() {\n+        return new Object[] {\n+            \"If\",\"the\",\"dull\",\"substance\",\"of\",\"my\",\"flesh\",\"were\",\"thought\",\n+            \"Injurious\",\"distance\",\"could\",\"not\",\"stop\",\"my\",\"way\",\n+        };\n+    }\n+\n+    /**\n+     *  Returns a list of string elements suitable for return by\n+     *  {@link #getOtherElements()}.  Override getOtherElements to return\n+     *  the results of this method if your collection does not support\n+     *  heterogenous elements or the null element.\n+     */\n+    protected Object[] getOtherNonNullStringElements() {\n+        return new Object[] {\n+            \"For\",\"then\",\"despite\",/* of */\"space\",\"I\",\"would\",\"be\",\"brought\",\n+            \"From\",\"limits\",\"far\",\"remote\",\"where\",\"thou\",\"dost\",\"stay\"\n+        };\n+    }\n+\n+    // Tests    \n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests {@link Collection#add(Object)}.\n+     */\n+    public void testCollectionAdd() {\n+        if (!isAddSupported()) return;\n+        \n+        Object[] elements = getFullElements();\n+        for (int i = 0; i < elements.length; i++) {\n+            resetEmpty();\n+            boolean r = collection.add(elements[i]);\n+            confirmed.add(elements[i]);\n+            verify();\n+            assertTrue(\"Empty collection changed after add\", r);\n+            assertEquals(\"Collection size is 1 after first add\", 1, collection.size());\n+        }\n+        \n+        resetEmpty();\n+        int size = 0;\n+        for (int i = 0; i < elements.length; i++) {\n+            boolean r = collection.add(elements[i]);\n+            confirmed.add(elements[i]);\n+            verify();\n+            if (r) size++;\n+            assertEquals(\"Collection size should grow after add\", \n+                         size, collection.size());\n+            assertTrue(\"Collection should contain added element\",\n+                       collection.contains(elements[i]));\n+        }\n+    }\n+    \n+    \n+    /**\n+     *  Tests {@link Collection#addAll(Collection)}.\n+     */\n+    public void testCollectionAddAll() {\n+        if (!isAddSupported()) return;\n+\n+        resetEmpty();\n+        Object[] elements = getFullElements();\n+        boolean r = collection.addAll(Arrays.asList(elements));\n+        confirmed.addAll(Arrays.asList(elements));\n+        verify();\n+        assertTrue(\"Empty collection should change after addAll\", r);\n+        for (int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Collection should contain added element\",\n+                       collection.contains(elements[i]));\n+        }\n+\n+        resetFull();\n+        int size = collection.size();\n+        elements = getOtherElements();\n+        r = collection.addAll(Arrays.asList(elements));\n+        confirmed.addAll(Arrays.asList(elements));\n+        verify();\n+        assertTrue(\"Full collection should change after addAll\", r);\n+        for (int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Full collection should contain added element\",\n+                       collection.contains(elements[i]));\n+        }\n+        assertEquals(\"Size should increase after addAll\", \n+                     size + elements.length, collection.size());\n+        \n+        resetFull();\n+        size = collection.size();\n+        r = collection.addAll(Arrays.asList(getFullElements()));\n+        confirmed.addAll(Arrays.asList(getFullElements()));\n+        verify();\n+        if (r) {\n+            assertTrue(\"Size should increase if addAll returns true\", \n+                       size < collection.size());\n+        } else {\n+            assertEquals(\"Size should not change if addAll returns false\",\n+                         size, collection.size());\n+        } \n+    }\n+\n+\n+    /**\n+     *  If {@link #isAddSupported()} returns false, tests that add operations\n+     *  raise <code>UnsupportedOperationException.\n+     */\n+    public void testUnsupportedAdd() {\n+        if (isAddSupported()) return;\n+        \n+        resetEmpty();\n+        try {\n+            collection.add(new Object());\n+            fail(\"Emtpy collection should not support add.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        // make sure things didn't change even if the expected exception was\n+        // thrown.\n+        verify();\n+\n+        try {\n+            collection.addAll(Arrays.asList(getFullElements()));\n+            fail(\"Emtpy collection should not support addAll.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        // make sure things didn't change even if the expected exception was\n+        // thrown.\n+        verify();\n+\n+        resetFull();\n+        try {\n+            collection.add(new Object());\n+            fail(\"Full collection should not support add.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        // make sure things didn't change even if the expected exception was\n+        // thrown.\n+        verify();\n+        \n+        try {\n+            collection.addAll(Arrays.asList(getOtherElements()));\n+            fail(\"Full collection should not support addAll.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        // make sure things didn't change even if the expected exception was\n+        // thrown.\n+        verify();\n+    }\n+\n+\n+    /**\n+     *  Test {@link Collection#clear()}.\n+     */\n+    public void testCollectionClear() {\n+        if (!isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        collection.clear(); // just to make sure it doesn't raise anything\n+        verify();\n+\n+        resetFull();\n+        collection.clear();\n+        confirmed.clear();\n+        verify();\n+    }    \n+\n+    \n+    /**\n+     *  Tests {@link Collection#contains(Object)}.\n+     */\n+    public void testCollectionContains() {\n+        Object[] elements;\n+\n+        resetEmpty();\n+        elements = getFullElements();\n+        for(int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Empty collection shouldn't contain element[\" + i + \"]\",\n+                       !collection.contains(elements[i]));\n+        }\n+        // make sure calls to \"contains\" don't change anything\n+        verify();\n+\n+        elements = getOtherElements();\n+        for(int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Empty collection shouldn't contain element[\" + i + \"]\",\n+                       !collection.contains(elements[i]));\n+        }\n+        // make sure calls to \"contains\" don't change anything\n+        verify();\n+\n+        resetFull();\n+        elements = getFullElements();\n+        for(int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Full collection should contain element[\" + i + \"]\", \n+                       collection.contains(elements[i]));\n+        }\n+        // make sure calls to \"contains\" don't change anything\n+        verify();\n+\n+        resetFull();\n+        elements = getOtherElements();\n+        for(int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Full collection shouldn't contain element\", \n+                       !collection.contains(elements[i]));\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests {@link Collection#containsAll(Collection)}.\n+     */\n+    public void testCollectionContainsAll() {\n+        resetEmpty();\n+        Collection col = new HashSet();\n+        assertTrue(\"Every Collection should contain all elements of an \" +\n+                   \"empty Collection.\", collection.containsAll(col));\n+        col.addAll(Arrays.asList(getOtherElements()));\n+        assertTrue(\"Empty Collection shouldn't contain all elements of \" +\n+                   \"a non-empty Collection.\", !collection.containsAll(col));\n+        // make sure calls to \"containsAll\" don't change anything\n+        verify();\n+\n+        resetFull();\n+        assertTrue(\"Full collection shouldn't contain other elements\", \n+                   !collection.containsAll(col));\n+        \n+        col.clear();\n+        col.addAll(Arrays.asList(getFullElements()));\n+        assertTrue(\"Full collection should containAll full elements\",\n+                   collection.containsAll(col));\n+        // make sure calls to \"containsAll\" don't change anything\n+        verify();\n+\n+        int min = (getFullElements().length < 2 ? 0 : 2);\n+        int max = (getFullElements().length == 1 ? 1 : \n+                    (getFullElements().length <= 5 ? getFullElements().length - 1 : 5));\n+        col = Arrays.asList(getFullElements()).subList(min, max);\n+        assertTrue(\"Full collection should containAll partial full \" +\n+                   \"elements\", collection.containsAll(col));\n+        assertTrue(\"Full collection should containAll itself\", \n+                   collection.containsAll(collection));\n+        // make sure calls to \"containsAll\" don't change anything\n+        verify();\n+        \n+        col = new ArrayList();\n+        col.addAll(Arrays.asList(getFullElements()));\n+        col.addAll(Arrays.asList(getFullElements()));\n+        assertTrue(\"Full collection should containAll duplicate full \" +\n+                   \"elements\", collection.containsAll(col));\n+\n+        // make sure calls to \"containsAll\" don't change anything\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link Collection#isEmpty()}.\n+     */\n+    public void testCollectionIsEmpty() {\n+        resetEmpty();\n+        assertEquals(\"New Collection should be empty.\", \n+                     true, collection.isEmpty());\n+        // make sure calls to \"isEmpty() don't change anything\n+        verify();\n+\n+        resetFull();\n+        assertEquals(\"Full collection shouldn't be empty\", \n+                     false, collection.isEmpty());\n+        // make sure calls to \"isEmpty() don't change anything\n+        verify();\n+    }\n+\n+\n+    /**\n+     *  Tests the read-only functionality of {@link Collection#iterator()}.\n+     */\n+    public void testCollectionIterator() {\n+        resetEmpty();\n+        Iterator it1 = collection.iterator();\n+        assertEquals(\"Iterator for empty Collection shouldn't have next.\",\n+                     false, it1.hasNext());\n+        try {\n+            it1.next();\n+            fail(\"Iterator at end of Collection should throw \" +\n+                 \"NoSuchElementException when next is called.\");\n+        } catch(NoSuchElementException e) {\n+            // expected\n+        } \n+        // make sure nothing has changed after non-modification\n+        verify();\n+\n+        resetFull();\n+        it1 = collection.iterator();\n+        for (int i = 0; i < collection.size(); i++) {\n+            assertTrue(\"Iterator for full collection should haveNext\", \n+                       it1.hasNext());\n+            it1.next();\n+        }\n+        assertTrue(\"Iterator should be finished\", !it1.hasNext());\n+        \n+        ArrayList list = new ArrayList();\n+        it1 = collection.iterator();\n+        for (int i = 0; i < collection.size(); i++) {\n+            Object next = it1.next();\n+            assertTrue(\"Collection should contain element returned by \" +\n+                       \"its iterator\", collection.contains(next));\n+            list.add(next);\n+        }\n+        try {\n+            it1.next();\n+            fail(\"iterator.next() should raise NoSuchElementException \" +\n+                 \"after it finishes\");\n+        } catch (NoSuchElementException e) {\n+            // expected\n+        }\n+        // make sure nothing has changed after non-modification\n+        verify();\n+    }\n+\n+\n+    /**\n+     *  Tests removals from {@link Collection#iterator()}.\n+     */\n+    public void testCollectionIteratorRemove() {\n+        if (!isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        try {\n+            collection.iterator().remove();\n+            fail(\"New iterator.remove should raise IllegalState\");\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        try {\n+            Iterator iter = collection.iterator();\n+            iter.hasNext();\n+            iter.remove();\n+            fail(\"New iterator.remove should raise IllegalState \" +\n+                 \"even after hasNext\");\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        resetFull();\n+        int size = collection.size();\n+        Iterator iter = collection.iterator();\n+        while (iter.hasNext()) {\n+            Object o = iter.next();\n+            // TreeMap reuses the Map Entry, so the verify below fails\n+            // Clone it here if necessary\n+            if (o instanceof Map.Entry) {\n+                o = cloneMapEntry((Map.Entry) o);\n+            }\n+            iter.remove();\n+\n+            // if the elements aren't distinguishable, we can just remove a\n+            // matching element from the confirmed collection and verify\n+            // contents are still the same.  Otherwise, we don't have the\n+            // ability to distinguish the elements and determine which to\n+            // remove from the confirmed collection (in which case, we don't\n+            // verify because we don't know how). \n+            //\n+            // see areEqualElementsDistinguishable()\n+            if(!areEqualElementsDistinguishable()) {\n+                confirmed.remove(o);\n+                verify();\n+            }\n+\n+            size--;\n+            assertEquals(\"Collection should shrink by one after \" +\n+                         \"iterator.remove\", size, collection.size());\n+        }\n+        assertTrue(\"Collection should be empty after iterator purge\",\n+                   collection.isEmpty());\n+        \n+        resetFull();\n+        iter = collection.iterator();\n+        iter.next();\n+        iter.remove();\n+        try {\n+            iter.remove();\n+            fail(\"Second iter.remove should raise IllegalState\");\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests {@link Collection#remove(Object)}.\n+     */\n+    public void testCollectionRemove() {\n+        if (!isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        Object[] elements = getFullElements();\n+        for (int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Shouldn't remove nonexistent element\", \n+                       !collection.remove(elements[i]));\n+            verify();\n+        }\n+        \n+        Object[] other = getOtherElements();\n+        \n+        resetFull();\n+        for (int i = 0; i < other.length; i++) {\n+            assertTrue(\"Shouldn't remove nonexistent other element\", \n+                       !collection.remove(other[i]));\n+            verify();\n+        }\n+        \n+        int size = collection.size();\n+        for (int i = 0; i < elements.length; i++) {\n+            resetFull();\n+            assertTrue(\"Collection should remove extant element: \" + elements[i],\n+                       collection.remove(elements[i]));\n+\n+            // if the elements aren't distinguishable, we can just remove a\n+            // matching element from the confirmed collection and verify\n+            // contents are still the same.  Otherwise, we don't have the\n+            // ability to distinguish the elements and determine which to\n+            // remove from the confirmed collection (in which case, we don't\n+            // verify because we don't know how). \n+            //\n+            // see areEqualElementsDistinguishable()\n+            if(!areEqualElementsDistinguishable()) {\n+                confirmed.remove(elements[i]);\n+                verify();\n+            }\n+\n+            assertEquals(\"Collection should shrink after remove\", \n+                         size - 1, collection.size());\n+        }\n+    }\n+    \n+\n+    /**\n+     *  Tests {@link Collection#removeAll(Collection)}.\n+     */\n+    public void testCollectionRemoveAll() {\n+        if (!isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        assertTrue(\"Emtpy collection removeAll should return false for \" +\n+                   \"empty input\", \n+                   !collection.removeAll(Collections.EMPTY_SET));\n+        verify();\n+        \n+        assertTrue(\"Emtpy collection removeAll should return false for \" +\n+                   \"nonempty input\", \n+                   !collection.removeAll(new ArrayList(collection)));\n+        verify();\n+        \n+        resetFull();\n+        assertTrue(\"Full collection removeAll should return false for \" + \n+                   \"empty input\", \n+                   !collection.removeAll(Collections.EMPTY_SET));\n+        verify();\n+        \n+        assertTrue(\"Full collection removeAll should return false for other elements\", \n+                   !collection.removeAll(Arrays.asList(getOtherElements())));\n+        verify();\n+        \n+        assertTrue(\"Full collection removeAll should return true for full elements\", \n+                    collection.removeAll(new HashSet(collection)));\n+        confirmed.removeAll(new HashSet(confirmed));\n+        verify();\n+        \n+        resetFull();\n+        int size = collection.size();\n+        int min = (getFullElements().length < 2 ? 0 : 2);\n+        int max = (getFullElements().length == 1 ? 1 : \n+                    (getFullElements().length <= 5 ? getFullElements().length - 1 : 5));\n+        Collection all = Arrays.asList(getFullElements()).subList(min, max);\n+        assertTrue(\"Full collection removeAll should work\", \n+                   collection.removeAll(all));\n+        confirmed.removeAll(all);\n+        verify();\n+        \n+        assertTrue(\"Collection should shrink after removeAll\", \n+                   collection.size() < size);\n+        Iterator iter = all.iterator();\n+        while (iter.hasNext()) {\n+            assertTrue(\"Collection shouldn't contain removed element\",\n+                       !collection.contains(iter.next()));\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests {@link Collection#retainAll(Collection)}.\n+     */\n+    public void testCollectionRetainAll() {\n+        if (!isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        List elements = Arrays.asList(getFullElements());\n+        List other = Arrays.asList(getOtherElements());\n+\n+        assertTrue(\"Empty retainAll() should return false\", \n+                   !collection.retainAll(Collections.EMPTY_SET));\n+        verify();\n+        \n+        assertTrue(\"Empty retainAll() should return false\", \n+                   !collection.retainAll(elements));\n+        verify();\n+        \n+        resetFull();\n+        assertTrue(\"Collection should change from retainAll empty\", \n+                   collection.retainAll(Collections.EMPTY_SET));\n+        confirmed.retainAll(Collections.EMPTY_SET);\n+        verify();\n+        \n+        resetFull();\n+        assertTrue(\"Collection changed from retainAll other\", \n+                   collection.retainAll(other));\n+        confirmed.retainAll(other);\n+        verify();\n+        \n+        resetFull();\n+        int size = collection.size();\n+        assertTrue(\"Collection shouldn't change from retainAll elements\",\n+                   !collection.retainAll(elements));\n+        verify();\n+        assertEquals(\"Collection size shouldn't change\", size, \n+                     collection.size());\n+        \n+        if (getFullElements().length > 1) {\n+            resetFull();\n+            size = collection.size();\n+            int min = (getFullElements().length < 2 ? 0 : 2);\n+            int max = (getFullElements().length <= 5 ? getFullElements().length - 1 : 5);\n+            assertTrue(\"Collection should changed by partial retainAll\",\n+                       collection.retainAll(elements.subList(min, max)));\n+            confirmed.retainAll(elements.subList(min, max));\n+            verify();\n+        \n+            Iterator iter = collection.iterator();\n+            while (iter.hasNext()) {\n+                assertTrue(\"Collection only contains retained element\", \n+                           elements.subList(min, max).contains(iter.next()));\n+            }\n+        }\n+        \n+        resetFull();\n+        HashSet set = new HashSet(elements);\n+        size = collection.size();\n+        assertTrue(\"Collection shouldn't change from retainAll without \" +\n+                   \"duplicate elements\", !collection.retainAll(set));\n+        verify();\n+        assertEquals(\"Collection size didn't change from nonduplicate \" +\n+                     \"retainAll\", size, collection.size());\n+    }\n+    \n+    \n+    /**\n+     *  Tests {@link Collection#size()}.\n+     */\n+    public void testCollectionSize() {\n+        resetEmpty();\n+        assertEquals(\"Size of new Collection is 0.\", 0, collection.size());\n+\n+        resetFull();\n+        assertTrue(\"Size of full collection should be greater than zero\", \n+                   collection.size() > 0);\n+    }\n+\n+\n+    /**\n+     *  Tests {@link Collection#toArray()}.\n+     */\n+    public void testCollectionToArray() {\n+        resetEmpty();\n+        assertEquals(\"Empty Collection should return empty array for toArray\",\n+                     0, collection.toArray().length);\n+\n+        resetFull();\n+        Object[] array = collection.toArray();\n+        assertEquals(\"Full collection toArray should be same size as \" +\n+                     \"collection\", array.length, collection.size());\n+        Object[] confirmedArray = confirmed.toArray();\n+        assertEquals(\"length of array from confirmed collection should \" +\n+                     \"match the length of the collection's array\", \n+                     confirmedArray.length, array.length);\n+        boolean[] matched = new boolean[array.length];\n+\n+        for (int i = 0; i < array.length; i++) {\n+            assertTrue(\"Collection should contain element in toArray\",\n+                       collection.contains(array[i]));\n+\n+            boolean match = false;\n+            // find a match in the confirmed array\n+            for(int j = 0; j < array.length; j++) {\n+                // skip already matched\n+                if(matched[j]) continue;\n+                if(array[i] == confirmedArray[j] ||\n+                   (array[i] != null && array[i].equals(confirmedArray[j]))) {\n+                    matched[j] = true;\n+                    match = true;\n+                    break;\n+                }\n+            }\n+            if(!match) {\n+                fail(\"element \" + i + \" in returned array should be found \" +\n+                     \"in the confirmed collection's array\");\n+            }\n+        }\n+        for(int i = 0; i < matched.length; i++) {\n+            assertEquals(\"Collection should return all its elements in \" +\n+                         \"toArray\", true, matched[i]);\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests {@link Collection#toArray(Object[])}.\n+     */\n+    public void testCollectionToArray2() {\n+        resetEmpty();\n+        Object[] a = new Object[] { new Object(), null, null };\n+        Object[] array = collection.toArray(a);\n+        assertEquals(\"Given array shouldn't shrink\", array, a);\n+        assertEquals(\"Last element should be set to null\", a[0], null);\n+        verify();\n+\n+        resetFull();\n+        try {\n+            array = collection.toArray(new Void[0]);\n+            fail(\"toArray(new Void[0]) should raise ArrayStore\");\n+        } catch (ArrayStoreException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        try {\n+            array = collection.toArray(null);\n+            fail(\"toArray(null) should raise NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        verify();\n+        \n+        array = collection.toArray(new Object[0]);\n+        a = collection.toArray();\n+        assertEquals(\"toArrays should be equal\", \n+                     Arrays.asList(array), Arrays.asList(a));\n+\n+        // Figure out if they're all the same class\n+        // TODO: It'd be nicer to detect a common superclass\n+        HashSet classes = new HashSet();\n+        for (int i = 0; i < array.length; i++) {\n+            classes.add((array[i] == null) ? null : array[i].getClass());\n+        }\n+        if (classes.size() > 1) return;\n+        \n+        Class cl = (Class)classes.iterator().next();\n+        if (Map.Entry.class.isAssignableFrom(cl)) {  // check needed for protective cases like Predicated/Unmod map entrySet\n+            cl = Map.Entry.class;\n+        }\n+        a = (Object[])Array.newInstance(cl, 0);\n+        array = collection.toArray(a);\n+        assertEquals(\"toArray(Object[]) should return correct array type\",\n+                     a.getClass(), array.getClass());\n+        assertEquals(\"type-specific toArrays should be equal\", \n+                     Arrays.asList(array), \n+                     Arrays.asList(collection.toArray()));\n+        verify();\n+    }\n+\n+\n+    /**\n+     *  Tests <code>toString</code> on a collection.\n+     */\n+    public void testCollectionToString() {\n+        resetEmpty();\n+        assertTrue(\"toString shouldn't return null\", \n+                   collection.toString() != null);\n+\n+        resetFull();\n+        assertTrue(\"toString shouldn't return null\", \n+                   collection.toString() != null);\n+    }\n+\n+\n+    /**\n+     *  If isRemoveSupported() returns false, tests to see that remove\n+     *  operations raise an UnsupportedOperationException.\n+     */\n+    public void testUnsupportedRemove() {\n+        if (isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        try {\n+            collection.clear();\n+            fail(\"clear should raise UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        try {\n+            collection.remove(null);\n+            fail(\"remove should raise UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        try {\n+            collection.removeAll(null);\n+            fail(\"removeAll should raise UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        try {\n+            collection.retainAll(null);\n+            fail(\"removeAll should raise UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        resetFull();\n+        try {\n+            Iterator iterator = collection.iterator();\n+            iterator.next();\n+            iterator.remove();\n+            fail(\"iterator.remove should raise UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        verify();\n+\n+    }\n+\n+\n+    /**\n+     *  Tests that the collection's iterator is fail-fast.  \n+     */\n+    public void testCollectionIteratorFailFast() {\n+        if (!isFailFastSupported()) return;\n+        \n+        if (isAddSupported()) {\n+            resetFull();\n+            try {\n+                Iterator iter = collection.iterator();\n+                Object o = getOtherElements()[0];\n+                collection.add(o);\n+                confirmed.add(o);\n+                iter.next();\n+                fail(\"next after add should raise ConcurrentModification\");\n+            } catch (ConcurrentModificationException e) {\n+                // expected\n+            }\n+            verify();\n+            \n+            resetFull();\n+            try {\n+                Iterator iter = collection.iterator();\n+                collection.addAll(Arrays.asList(getOtherElements()));\n+                confirmed.addAll(Arrays.asList(getOtherElements()));\n+                iter.next();\n+                fail(\"next after addAll should raise ConcurrentModification\");\n+            } catch (ConcurrentModificationException e) {\n+                // expected\n+            }\n+            verify();\n+        }\n+\n+        if (!isRemoveSupported()) return;\n+\n+        resetFull();\n+        try {\n+            Iterator iter = collection.iterator();\n+            collection.clear();\n+            iter.next();\n+            fail(\"next after clear should raise ConcurrentModification\");\n+        } catch (ConcurrentModificationException e) {\n+            // expected\n+        } catch (NoSuchElementException e) {\n+            // (also legal given spec)\n+        }\n+        \n+        resetFull();\n+        try {\n+            Iterator iter = collection.iterator();\n+            collection.remove(getFullElements()[0]);\n+            iter.next();\n+            fail(\"next after remove should raise ConcurrentModification\");\n+        } catch (ConcurrentModificationException e) {\n+            // expected\n+        }\n+\n+        resetFull();\n+        try {\n+            Iterator iter = collection.iterator();\n+            List sublist = Arrays.asList(getFullElements()).subList(2,5);\n+            collection.removeAll(sublist);\n+            iter.next();\n+            fail(\"next after removeAll should raise ConcurrentModification\");\n+        } catch (ConcurrentModificationException e) {\n+            // expected\n+        }\n+\n+        resetFull();\n+        try {\n+            Iterator iter = collection.iterator();\n+            List sublist = Arrays.asList(getFullElements()).subList(2,5);\n+            collection.retainAll(sublist);\n+            iter.next();\n+            fail(\"next after retainAll should raise ConcurrentModification\");\n+        } catch (ConcurrentModificationException e) {\n+            // expected\n+        }\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestCollection;\n-\n /**\n  * Extension of {@link AbstractTestCollection} for exercising the \n  * {@link CompositeCollection} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Brian McCallister\n  * @author Phil Steitz\n--- a/src/test/org/apache/commons/collections/collection/TestPredicatedCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestPredicatedCollection.java\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestCollection;\n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.PredicateUtils;\n \n  * {@link PredicatedCollection} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestCollection;\n import org.apache.commons.collections.Transformer;\n \n /**\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Stephen Colebourne\n  */\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/list/AbstractTestList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/AbstractTestList.java,v 1.1 2003/11/16 22:15:09 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.AbstractCollection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.collection.AbstractTestCollection;\n+\n+/**\n+ * Abstract test class for {@link java.util.List} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeEmptyList} method.\n+ * <p>\n+ * If your {@link List} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link List} fails or override one of the\n+ * protected methods from AbstractTestCollection.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:09 $\n+ * \n+ * @author Rodney Waldhoff\n+ * @author Paul Jack\n+ * @author Stephen Colebourne\n+ * @author Neil O'Toole\n+ */\n+public abstract class AbstractTestList extends AbstractTestCollection {\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test class name\n+     */\n+    public AbstractTestList(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns true if the collections produced by \n+     *  {@link #makeCollection()} and {@link #makeFullCollection()}\n+     *  support the <code>set operation.<p>\n+     *  Default implementation returns true.  Override if your collection\n+     *  class does not support set.\n+     */\n+    protected boolean isSetSupported() {\n+        return true;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Verifies that the test list implementation matches the confirmed list\n+     *  implementation.\n+     */\n+    protected void verify() {\n+        super.verify();\n+\n+        List list1 = getList();\n+        List list2 = getConfirmedList();\n+\n+        assertEquals(\"List should equal confirmed\", list1, list2);\n+        assertEquals(\"Confirmed should equal list\", list2, list1);\n+\n+        assertEquals(\"Hash codes should be equal\", list1.hashCode(), list2.hashCode());\n+\n+        int i = 0;\n+        Iterator iterator1 = list1.iterator();\n+        Iterator iterator2 = list2.iterator();\n+        Object[] array = list1.toArray();\n+        while (iterator2.hasNext()) {\n+            assertTrue(\"List iterator should have next\", iterator1.hasNext());\n+            Object o1 = iterator1.next();\n+            Object o2 = iterator2.next();\n+            assertEquals(\"Iterator elements should be equal\", o1, o2);\n+            o2 = list1.get(i);\n+            assertEquals(\"get should return correct element\", o1, o2);\n+            o2 = array[i];\n+            assertEquals(\"toArray should have correct element\", o1, o2);\n+            i++;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns an empty {@link ArrayList}.\n+     */\n+    protected Collection makeConfirmedCollection() {\n+        ArrayList list = new ArrayList();\n+        return list;\n+    }\n+\n+    /**\n+     * Returns a full {@link ArrayList}.\n+     */\n+    protected Collection makeConfirmedFullCollection() {\n+        ArrayList list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+    /**\n+     * Return a new, empty {@link List} to be used for testing.\n+     *\n+     * @return an empty list for testing.\n+     */\n+    protected abstract List makeEmptyList();\n+\n+    /**\n+     * Return a new, full {@link List} to be used for testing.\n+     *\n+     * @return a full list for testing\n+     */\n+    protected List makeFullList() {\n+        // only works if list supports optional \"addAll(Collection)\" \n+        List list = makeEmptyList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+    /**\n+     * Returns {@link #makeEmptyList()}.\n+     *\n+     * @return an empty list to be used for testing\n+     */\n+    protected final Collection makeCollection() {\n+        return makeEmptyList();\n+    }\n+\n+    /**\n+     * Returns {@link #makeFullList()}.\n+     *\n+     * @return a full list to be used for testing\n+     */\n+    protected final Collection makeFullCollection() {\n+        return makeFullList();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the {@link #collection} field cast to a {@link List}.\n+     *\n+     * @return the collection field as a List\n+     */\n+    protected List getList() {\n+        return (List) collection;\n+    }\n+\n+    /**\n+     * Returns the {@link #confirmed} field cast to a {@link List}.\n+     *\n+     * @return the confirmed field as a List\n+     */\n+    protected List getConfirmedList() {\n+        return (List) confirmed;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests bounds checking for {@link List#add(int, Object)} on an\n+     *  empty list.\n+     */\n+    public void testListAddByIndexBoundsChecking() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        List list;\n+        Object element = getOtherElements()[0];\n+\n+        try {\n+            list = makeEmptyList();\n+            list.add(Integer.MIN_VALUE, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeEmptyList();\n+            list.add(-1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeEmptyList();\n+            list.add(1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeEmptyList();\n+            list.add(Integer.MAX_VALUE, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#add(int, Object)} on a\n+     *  full list.\n+     */\n+    public void testListAddByIndexBoundsChecking2() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        List list;\n+        Object element = getOtherElements()[0];\n+\n+        try {\n+            list = makeFullList();\n+            list.add(Integer.MIN_VALUE, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeFullList();\n+            list.add(-1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeFullList();\n+            list.add(list.size() + 1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [size + 1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeFullList();\n+            list.add(Integer.MAX_VALUE, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link List#add(int,Object)}.\n+     */\n+    public void testListAddByIndex() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        Object element = getOtherElements()[0];\n+        int max = getFullElements().length;\n+\n+        for (int i = 0; i <= max; i++) {\n+            resetFull();\n+            ((List) collection).add(i, element);\n+            ((List) confirmed).add(i, element);\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link List#equals(Object)}.\n+     */\n+    public void testListEquals() {\n+        resetEmpty();\n+        List list = getList();\n+        assertEquals(\"Empty lists should be equal\", true, list.equals(confirmed));\n+        verify();\n+        assertEquals(\"Empty list should equal self\", true, list.equals(list));\n+        verify();\n+\n+        List list2 = Arrays.asList(getFullElements());\n+        assertEquals(\"Empty list shouldn't equal full\", false, list.equals(list2));\n+        verify();\n+\n+        list2 = Arrays.asList(getOtherElements());\n+        assertEquals(\"Empty list shouldn't equal other\", false, list.equals(list2));\n+        verify();\n+\n+        resetFull();\n+        list = getList();\n+        assertEquals(\"Full lists should be equal\", true, list.equals(confirmed));\n+        verify();\n+        assertEquals(\"Full list should equal self\", true, list.equals(list));\n+        verify();\n+\n+        list2 = makeEmptyList();\n+        assertEquals(\"Full list shouldn't equal empty\", false, list.equals(list2));\n+        verify();\n+\n+        list2 = Arrays.asList(getOtherElements());\n+        assertEquals(\"Full list shouldn't equal other\", false, list.equals(list2));\n+        verify();\n+\n+        list2 = Arrays.asList(getFullElements());\n+        if (list2.size() < 2 && isAddSupported()) {\n+            // main list is only size 1, so lets add other elements to get a better list\n+            list.addAll(Arrays.asList(getOtherElements()));\n+            confirmed.addAll(Arrays.asList(getOtherElements()));\n+            list2 = new ArrayList(list2);\n+            list2.addAll(Arrays.asList(getOtherElements()));\n+        }\n+        if (list2.size() > 1) {\n+            Collections.reverse(list2);\n+            assertEquals(\n+                \"Full list shouldn't equal full list with same elements but different order\",\n+                false, list.equals(list2));\n+            verify();\n+        }\n+\n+        resetFull();\n+        list = getList();\n+        assertEquals(\"List shouldn't equal String\", false, list.equals(\"\"));\n+        verify();\n+\n+        final List listForC = Arrays.asList(getFullElements());\n+        Collection c = new AbstractCollection() {\n+            public int size() {\n+                return listForC.size();\n+            }\n+\n+            public Iterator iterator() {\n+                return listForC.iterator();\n+            }\n+        };\n+\n+        assertEquals(\"List shouldn't equal nonlist with same elements in same order\", false, list.equals(c));\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link List#hashCode()}.\n+     */\n+    public void testListHashCode() {\n+        resetEmpty();\n+        int hash1 = collection.hashCode();\n+        int hash2 = confirmed.hashCode();\n+        assertEquals(\"Empty lists should have equal hashCodes\", hash1, hash2);\n+        verify();\n+\n+        resetFull();\n+        hash1 = collection.hashCode();\n+        hash2 = confirmed.hashCode();\n+        assertEquals(\"Full lists should have equal hashCodes\", hash1, hash2);\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link List#get(int)}.\n+     */\n+    public void testListGetByIndex() {\n+        resetFull();\n+        List list = getList();\n+        Object[] elements = getFullElements();\n+        for (int i = 0; i < elements.length; i++) {\n+            assertEquals(\"List should contain correct elements\", elements[i], list.get(i));\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#get(int)} on an\n+     *  empty list.\n+     */\n+    public void testListGetByIndexBoundsChecking() {\n+        List list = makeEmptyList();\n+\n+        try {\n+            list.get(Integer.MIN_VALUE);\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(-1);\n+            fail(\"List.get should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(0);\n+            fail(\"List.get should throw IndexOutOfBoundsException [0]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(1);\n+            fail(\"List.get should throw IndexOutOfBoundsException [1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(Integer.MAX_VALUE);\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#get(int)} on a\n+     *  full list.\n+     */\n+    public void testListGetByIndexBoundsChecking2() {\n+        List list = makeFullList();\n+\n+        try {\n+            list.get(Integer.MIN_VALUE);\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(-1);\n+            fail(\"List.get should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(getFullElements().length);\n+            fail(\"List.get should throw IndexOutOfBoundsException [size]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(Integer.MAX_VALUE);\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link List#indexOf}.\n+     */\n+    public void testListIndexOf() {\n+        resetFull();\n+        List list1 = getList();\n+        List list2 = getConfirmedList();\n+\n+        Iterator iterator = list2.iterator();\n+        while (iterator.hasNext()) {\n+            Object element = iterator.next();\n+            assertEquals(\"indexOf should return correct result\",\n+                list1.indexOf(element), list2.indexOf(element));\n+            verify();\n+        }\n+\n+        Object[] other = getOtherElements();\n+        for (int i = 0; i < other.length; i++) {\n+            assertEquals(\"indexOf should return -1 for nonexistent element\",\n+                list1.indexOf(other[i]), -1);\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link List#lastIndexOf}.\n+     */\n+    public void testListLastIndexOf() {\n+        resetFull();\n+        List list1 = getList();\n+        List list2 = getConfirmedList();\n+\n+        Iterator iterator = list2.iterator();\n+        while (iterator.hasNext()) {\n+            Object element = iterator.next();\n+            assertEquals(\"lastIndexOf should return correct result\",\n+              list1.lastIndexOf(element), list2.lastIndexOf(element));\n+            verify();\n+        }\n+\n+        Object[] other = getOtherElements();\n+        for (int i = 0; i < other.length; i++) {\n+            assertEquals(\"lastIndexOf should return -1 for nonexistent \" +\n+              \"element\", list1.lastIndexOf(other[i]), -1);\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#set(int,Object)} on an\n+     *  empty list.\n+     */\n+    public void testListSetByIndexBoundsChecking() {\n+        if (!isSetSupported()) {\n+            return;\n+        }\n+\n+        List list = makeEmptyList();\n+        Object element = getOtherElements()[0];\n+\n+        try {\n+            list.set(Integer.MIN_VALUE, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(-1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(0, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [0]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(Integer.MAX_VALUE, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests bounds checking for {@link List#set(int,Object)} on a\n+     *  full list.\n+     */\n+    public void testListSetByIndexBoundsChecking2() {\n+        if (!isSetSupported()) return;\n+\n+        List list = makeFullList();\n+        Object element = getOtherElements()[0];\n+\n+        try {\n+            list.set(Integer.MIN_VALUE, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.set(-1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.set(getFullElements().length, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [size]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.set(Integer.MAX_VALUE, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+    }\n+\n+\n+    /**\n+     *  Test {@link List#set(int,Object)}.\n+     */\n+    public void testListSetByIndex() {\n+        if (!isSetSupported()) return;\n+\n+        resetFull();\n+        Object[] elements = getFullElements();\n+        Object[] other = getOtherElements();\n+\n+        for (int i = 0; i < elements.length; i++) {\n+            Object n = other[i % other.length];\n+            Object v = ((List)collection).set(i, n);\n+            assertEquals(\"Set should return correct element\", elements[i], v);\n+            ((List)confirmed).set(i, n);\n+            verify();\n+        }\n+    }\n+\n+\n+    /**\n+     *  If {@link #isSetSupported()} returns false, tests that set operation\n+     *  raises <Code>UnsupportedOperationException.\n+     */\n+    public void testUnsupportedSet() {\n+        if (isSetSupported()) return;\n+        \n+        resetFull();\n+        try {\n+            ((List) collection).set(0, new Object());\n+            fail(\"Emtpy collection should not support set.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        // make sure things didn't change even if the expected exception was\n+        // thrown.\n+        verify();\n+    }\n+    \n+\n+    /**\n+     *  Tests bounds checking for {@link List#remove(int)} on an\n+     *  empty list.\n+     */\n+    public void testListRemoveByIndexBoundsChecking() {\n+        if (!isRemoveSupported()) return;\n+\n+        List list = makeEmptyList();\n+\n+        try {\n+            list.remove(Integer.MIN_VALUE);\n+            fail(\"List.remove should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(-1);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(0);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [0]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(1);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(Integer.MAX_VALUE);\n+            fail(\"List.remove should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests bounds checking for {@link List#remove(int)} on a\n+     *  full list.\n+     */\n+    public void testListRemoveByIndexBoundsChecking2() {\n+        if (!isRemoveSupported()) return;\n+\n+        List list = makeFullList();\n+\n+        try {\n+            list.remove(Integer.MIN_VALUE);\n+            fail(\"List.remove should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(-1);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(getFullElements().length);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [size]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(Integer.MAX_VALUE);\n+            fail(\"List.remove should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+    }\n+\n+\n+    /**\n+     *  Tests {@link List#remove(int)}.\n+     */\n+    public void testListRemoveByIndex() {\n+        if (!isRemoveSupported()) return;\n+\n+        int max = getFullElements().length;\n+        for (int i = 0; i < max; i++) {\n+            resetFull();\n+            Object o1 = ((List)collection).remove(i);\n+            Object o2 = ((List)confirmed).remove(i);\n+            assertEquals(\"remove should return correct element\", o1, o2);\n+            verify();\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests the read-only bits of {@link List#listIterator()}.\n+     */\n+    public void testListListIterator() {\n+        resetFull();\n+        forwardTest(getList().listIterator(), 0);\n+        backwardTest(getList().listIterator(), 0);\n+    }\n+\n+\n+    /**\n+     *  Tests the read-only bits of {@link List#listIterator(int)}.\n+     */\n+    public void testListListIteratorByIndex() {\n+        resetFull();\n+        for (int i = 0; i < confirmed.size(); i++) {\n+            forwardTest(getList().listIterator(i), i);\n+            backwardTest(getList().listIterator(i), i);\n+        }\n+    }\n+\n+\n+    /**\n+     *  Traverses to the end of the given iterator.\n+     *\n+     *  @param iter  the iterator to traverse\n+     *  @param i     the starting index\n+     */\n+    private void forwardTest(ListIterator iter, int i) {\n+        List list = getList();\n+        int max = getFullElements().length;\n+\n+        while (i < max) {\n+            assertTrue(\"Iterator should have next\", iter.hasNext());\n+            assertEquals(\"Iterator.nextIndex should work\", \n+              iter.nextIndex(), i);\n+            assertEquals(\"Iterator.previousIndex should work\",\n+              iter.previousIndex(), i - 1);\n+            Object o = iter.next();\n+            assertEquals(\"Iterator returned correct element\", list.get(i), o);\n+            i++;\n+        }\n+\n+        assertTrue(\"Iterator shouldn't have next\", !iter.hasNext());\n+        assertEquals(\"nextIndex should be size\", iter.nextIndex(), max);\n+        assertEquals(\"previousIndex should be size - 1\", \n+          iter.previousIndex(), max - 1);\n+\n+        try {\n+            iter.next();\n+            fail(\"Exhausted iterator should raise NoSuchElement\");\n+        } catch (NoSuchElementException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    /**\n+     *  Traverses to the beginning of the given iterator.\n+     *\n+     *  @param iter  the iterator to traverse\n+     *  @param i     the starting index\n+     */\n+    private void backwardTest(ListIterator iter, int i) {\n+        List list = getList();\n+\n+        while (i > 0) {\n+            assertTrue(\"Iterator should have previous, i:\" + i, iter.hasPrevious());\n+            assertEquals(\"Iterator.nextIndex should work, i:\" + i, iter.nextIndex(), i);\n+            assertEquals(\"Iterator.previousIndex should work, i:\" + i, iter.previousIndex(), i - 1);\n+            Object o = iter.previous();\n+            assertEquals(\"Iterator returned correct element\", list.get(i - 1), o);\n+            i--;\n+        }\n+\n+        assertTrue(\"Iterator shouldn't have previous\", !iter.hasPrevious());\n+        int nextIndex = iter.nextIndex();\n+        assertEquals(\"nextIndex should be 0, actual value: \" + nextIndex, nextIndex, 0);\n+        int prevIndex = iter.previousIndex();\n+        assertEquals(\"previousIndex should be -1, actual value: \" + prevIndex, prevIndex, -1);\n+\n+        try {\n+            iter.previous();\n+            fail(\"Exhausted iterator should raise NoSuchElement\");\n+        } catch (NoSuchElementException e) {\n+            // expected\n+        }\n+\n+    }\n+\n+\n+    /**\n+     *  Tests the {@link ListIterator#add(Object)} method of the list\n+     *  iterator.\n+     */\n+    public void testListIteratorAdd() {\n+        if (!isAddSupported()) return;\n+\n+        resetEmpty();\n+        List list1 = getList();\n+        List list2 = getConfirmedList();\n+\n+        Object[] elements = getFullElements();\n+        ListIterator iter1 = list1.listIterator();\n+        ListIterator iter2 = list2.listIterator();\n+\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.add(elements[i]);\n+            iter2.add(elements[i]);\n+            verify();\n+        }\n+\n+        resetFull();\n+        iter1 = getList().listIterator();\n+        iter2 = getConfirmedList().listIterator();\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.next();\n+            iter2.next();\n+            iter1.add(elements[i]);\n+            iter2.add(elements[i]);\n+            verify();\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests the {@link ListIterator#set(Object)} method of the list\n+     *  iterator.\n+     */\n+    public void testListIteratorSet() {\n+        if (!isSetSupported()) return;\n+\n+        Object[] elements = getFullElements();\n+\n+        resetFull();\n+        ListIterator iter1 = getList().listIterator();\n+        ListIterator iter2 = getConfirmedList().listIterator();\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.next();\n+            iter2.next();\n+            iter1.set(elements[i]);\n+            iter2.set(elements[i]);\n+            verify();\n+        }\n+    }\n+\n+\n+    public void testEmptyListSerialization() \n+    throws IOException, ClassNotFoundException {\n+        List list = makeEmptyList();\n+        if (!(list instanceof Serializable)) return;\n+        \n+        byte[] objekt = writeExternalFormToBytes((Serializable) list);\n+        List list2 = (List) readExternalFormFromBytes(objekt);\n+\n+        assertTrue(\"Both lists are empty\",list.size()  == 0);\n+        assertTrue(\"Both lists are empty\",list2.size() == 0);\n+    }\n+\n+    public void testFullListSerialization() \n+    throws IOException, ClassNotFoundException {\n+        List list = makeFullList();\n+        int size = getFullElements().length;\n+        if (!(list instanceof Serializable)) return;\n+        \n+        byte[] objekt = writeExternalFormToBytes((Serializable) list);\n+        List list2 = (List) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Both lists are same size\",list.size(), size);\n+        assertEquals(\"Both lists are same size\",list2.size(), size);\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the List\n+     * against the canonical version in CVS.\n+     */\n+    public void testEmptyListCompatibility() throws IOException, ClassNotFoundException {\n+        /**\n+         * Create canonical objects with this code\n+        List list = makeEmptyList();\n+        if (!(list instanceof Serializable)) return;\n+        \n+        writeExternalFormToDisk((Serializable) list, getCanonicalEmptyCollectionName(list));\n+        */\n+\n+        // test to make sure the canonical form has been preserved\n+        List list = makeEmptyList();\n+        if(list instanceof Serializable && !skipSerializedCanonicalTests()) {\n+            List list2 = (List) readExternalFormFromDisk(getCanonicalEmptyCollectionName(list));\n+            assertTrue(\"List is empty\",list2.size()  == 0);\n+        }\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the List\n+     * against the canonical version in CVS.\n+     */\n+    public void testFullListCompatibility() throws IOException, ClassNotFoundException {\n+        /**\n+         * Create canonical objects with this code\n+        List list = makeFullList();\n+        if (!(list instanceof Serializable)) return;\n+        \n+        writeExternalFormToDisk((Serializable) list, getCanonicalFullCollectionName(list));\n+        */\n+\n+        // test to make sure the canonical form has been preserved\n+        List list = makeFullList();\n+        if(list instanceof Serializable && !skipSerializedCanonicalTests()) {\n+            List list2 = (List) readExternalFormFromDisk(getCanonicalFullCollectionName(list));\n+            assertEquals(\"List is the right size\",list2.size(), 4);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns a {@link BulkTest} for testing {@link List#subList(int,int)}.\n+     *  The returned bulk test will run through every <code>TestList</code>\n+     *  method, <i>including</i> another <code>bulkTestSubList</code>.\n+     *  Sublists are tested until the size of the sublist is less than 10.\n+     *  Each sublist is 6 elements smaller than its parent list.\n+     *  (By default this means that two rounds of sublists will be tested).\n+     *  The verify() method is overloaded to test that the original list is\n+     *  modified when the sublist is.\n+     */\n+    public BulkTest bulkTestSubList() {\n+        if (getFullElements().length - 6 < 10) return null;\n+        return new BulkTestSubList(this);\n+    }\n+\n+\n+   static class BulkTestSubList extends AbstractTestList {\n+\n+       private AbstractTestList outer;\n+\n+\n+       BulkTestSubList(AbstractTestList outer) {\n+           super(\"\");\n+           this.outer = outer;\n+       }\n+\n+\n+       protected Object[] getFullElements() {\n+           List l = Arrays.asList(outer.getFullElements());\n+           return l.subList(3, l.size() - 3).toArray();\n+       }\n+\n+\n+       protected Object[] getOtherElements() {\n+           return outer.getOtherElements();\n+       }\n+\n+\n+       protected boolean isAddSupported() {\n+           return outer.isAddSupported();\n+       }\n+\n+       protected boolean isSetSupported() {\n+           return outer.isSetSupported();\n+       }\n+\n+       protected boolean isRemoveSupported() {\n+           return outer.isRemoveSupported();\n+       }\n+\n+\n+       protected List makeEmptyList() { \n+           return outer.makeFullList().subList(4, 4); \n+       }\n+\n+\n+       protected List makeFullList() {\n+           int size = getFullElements().length;\n+           return outer.makeFullList().subList(3, size - 3);\n+       }\n+\n+\n+       protected void resetEmpty() {\n+           outer.resetFull();\n+           this.collection = outer.getList().subList(4, 4);\n+           this.confirmed = outer.getConfirmedList().subList(4, 4);\n+       }\n+\n+       protected void resetFull() {\n+           outer.resetFull();\n+           int size = outer.confirmed.size();\n+           this.collection = outer.getList().subList(3, size - 3);\n+           this.confirmed = outer.getConfirmedList().subList(3, size - 3);\n+       }\n+\n+\n+       protected void verify() {\n+           super.verify();\n+           outer.verify();\n+       }\n+\n+   }\n+\n+\n+   /**\n+    *  Tests that a sublist raises a {@link java.util.ConcurrentModificationException ConcurrentModificationException}\n+    *  if elements are added to the original list.\n+    */\n+   public void testListSubListFailFastOnAdd() {\n+       if (!isFailFastSupported()) return;\n+       if (!isAddSupported()) return;\n+\n+       resetFull();\n+       int size = collection.size();\n+       List sub = getList().subList(1, size);\n+       getList().add(getOtherElements()[0]);\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().add(0, getOtherElements()[0]);\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().addAll(Arrays.asList(getOtherElements()));\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().addAll(0, Arrays.asList(getOtherElements()));\n+       failFastAll(sub);\n+\n+   }\n+\n+\n+   /**\n+    *  Tests that a sublist raises a {@link java.util.ConcurrentModificationException ConcurrentModificationException}\n+    *  if elements are removed from the original list.\n+    */\n+   public void testListSubListFailFastOnRemove() {\n+       if (!isFailFastSupported()) return;\n+       if (!isRemoveSupported()) return;\n+\n+       resetFull();\n+       int size = collection.size();\n+       List sub = getList().subList(1, size);\n+       getList().remove(0);\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().remove(getFullElements()[2]);\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().removeAll(Arrays.asList(getFullElements()));\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().retainAll(Arrays.asList(getOtherElements()));\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().clear();\n+       failFastAll(sub);\n+   }\n+\n+\n+   /**\n+    *  Invokes all the methods on the given sublist to make sure they raise\n+    *  a {@link java.util.ConcurrentModificationException ConcurrentModificationException}.\n+    */\n+   protected void failFastAll(List list) {\n+       Method[] methods = List.class.getMethods();\n+       for (int i = 0; i < methods.length; i++) {\n+           failFastMethod(list, methods[i]);\n+       }\n+   }\n+\n+\n+   /**\n+    *  Invokes the given method on the given sublist to make sure it raises\n+    *  a {@link java.util.ConcurrentModificationException ConcurrentModificationException}.\n+    *\n+    *  Unless the method happens to be the equals() method, in which case\n+    *  the test is skipped.  There seems to be a bug in\n+    *  java.util.AbstractList.subList(int,int).equals(Object) -- it never\n+    *  raises a ConcurrentModificationException.\n+    *\n+    *  @param list  the sublist to test\n+    *  @param m     the method to invoke\n+    */\n+   protected void failFastMethod(List list, Method m) {\n+       if (m.getName().equals(\"equals\")) return;\n+\n+       Object element = getOtherElements()[0];\n+       Collection c = Collections.singleton(element);\n+\n+       Class[] types = m.getParameterTypes();\n+       Object[] params = new Object[types.length];\n+       for (int i = 0; i < params.length; i++) {\n+           if (types[i] == Integer.TYPE) params[i] = new Integer(0);\n+           else if (types[i] == Collection.class) params[i] = c;\n+           else if (types[i] == Object.class) params[i] = element;\n+           else if (types[i] == Object[].class) params[i] = new Object[0];\n+       }\n+\n+       try {\n+           m.invoke(list, params);\n+           fail(m.getName() + \" should raise ConcurrentModification\");\n+       } catch (IllegalAccessException e) {\n+           // impossible\n+       } catch (InvocationTargetException e) {\n+           Throwable t = e.getTargetException();\n+           if (t instanceof ConcurrentModificationException) {\n+               // expected\n+               return;\n+           } else {\n+               fail(m.getName() + \" raised unexpected \" + e);\n+           }\n+       }\n+   }\n+\n+}\n--- a/src/test/org/apache/commons/collections/list/TestFixedSizeList.java\n+++ b/src/test/org/apache/commons/collections/list/TestFixedSizeList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestFixedSizeList.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestFixedSizeList.java,v 1.2 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestList;\n-\n /**\n  * Extension of {@link TestList} for exercising the {@link FixedSizeList}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/list/TestPredicatedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestPredicatedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestPredicatedList.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestPredicatedList.java,v 1.2 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.PredicateUtils;\n \n  * {@link PredicatedList} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n+++ b/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestSetUniqueList.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestSetUniqueList.java,v 1.2 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n-import org.apache.commons.collections.AbstractTestList;\n-\n /**\n  * JUnit tests.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Matthew Hawthorne\n  */\n--- a/src/test/org/apache/commons/collections/list/TestTransformedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestTransformedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestTransformedList.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestTransformedList.java,v 1.2 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.collection.TestTransformedCollection;\n \n /**\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java\n+++ b/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java,v 1.2 2003/11/16 22:15:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.map.TestPredicatedSortedMap;\n \n /**\n  * {@link UnmodifiableList} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:09 $\n  * \n  * @author Phil Steitz\n  */\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/AbstractTestMap.java,v 1.1 2003/11/16 22:15:10 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.AbstractTestObject;\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.collection.AbstractTestCollection;\n+import org.apache.commons.collections.set.AbstractTestSet;\n+\n+/**\n+ * Abstract test class for {@link java.util.Map} methods and contracts.\n+ * <p>\n+ * The forces at work here are similar to those in {@link AbstractTestCollection}.\n+ * If your class implements the full Map interface, including optional\n+ * operations, simply extend this class, and implement the\n+ * {@link #makeEmptyMap()} method.\n+ * <p>\n+ * On the other hand, if your map implementation is weird, you may have to\n+ * override one or more of the other protected methods.  They're described\n+ * below.\n+ * <p>\n+ * <b>Entry Population Methods</b>\n+ * <p>\n+ * Override these methods if your map requires special entries:\n+ * \n+ * <ul>\n+ * <li>{@link #getSampleKeys()}\n+ * <li>{@link #getSampleValues()}\n+ * <li>{@link #getNewSampleValues()}\n+ * <li>{@link #getOtherKeys()}\n+ * <li>{@link #getOtherValues()}\n+ * </ul>\n+ *\n+ * <b>Supported Operation Methods</b>\n+ * <p>\n+ * Override these methods if your map doesn't support certain operations:\n+ *\n+ * <ul>\n+ * <li> {@link #isPutAddSupported()}\n+ * <li> {@link #isPutChangeSupported()}\n+ * <li> {@link #isSetValueSupported()}\n+ * <li> {@link #isRemoveSupported()}\n+ * <li> {@link #isAllowDuplicateValues()}\n+ * <li> {@link #isAllowNullKey()}\n+ * <li> {@link #isAllowNullValue()}\n+ * </ul>\n+ *\n+ * <b>Fixture Methods</b>\n+ * <p>\n+ * For tests on modification operations (puts and removes), fixtures are used\n+ * to verify that that operation results in correct state for the map and its\n+ * collection views.  Basically, the modification is performed against your\n+ * map implementation, and an identical modification is performed against\n+ * a <I>confirmed</I> map implementation.  A confirmed map implementation is\n+ * something like <Code>java.util.HashMap</Code>, which is known to conform\n+ * exactly to the {@link Map} contract.  After the modification takes place\n+ * on both your map implementation and the confirmed map implementation, the\n+ * two maps are compared to see if their state is identical.  The comparison\n+ * also compares the collection views to make sure they're still the same.<P>\n+ *\n+ * The upshot of all that is that <I>any</I> test that modifies the map in\n+ * <I>any</I> way will verify that <I>all</I> of the map's state is still\n+ * correct, including the state of its collection views.  So for instance\n+ * if a key is removed by the map's key set's iterator, then the entry set \n+ * is checked to make sure the key/value pair no longer appears.<P>\n+ *\n+ * The {@link #map} field holds an instance of your collection implementation.\n+ * The {@link #entrySet}, {@link #keySet} and {@link #values} fields hold\n+ * that map's collection views.  And the {@link #confirmed} field holds\n+ * an instance of the confirmed collection implementation.  The \n+ * {@link #resetEmpty()} and {@link #resetFull()} methods set these fields to \n+ * empty or full maps, so that tests can proceed from a known state.<P>\n+ *\n+ * After a modification operation to both {@link #map} and {@link #confirmed},\n+ * the {@link #verify()} method is invoked to compare the results.  The\n+ * {@link #verify} method calls separate methods to verify the map and its three\n+ * collection views ({@link #verifyMap}, {@link #verifyEntrySet},\n+ * {@link #verifyKeySet}, and {@link #verifyValues}).  You may want to override\n+ * one of the verification methodsto perform additional verifications.  For\n+ * instance, TestDoubleOrderedMap would want override its\n+ * {@link #verifyValues()} method to verify that the values are unique and in\n+ * ascending order.<P>\n+ *  \n+ * <b>Other Notes</b>\n+ * <p>\n+ * If your {@link Map} fails one of these tests by design, you may still use\n+ * this base set of cases.  Simply override the test case (method) your map\n+ * fails and/or the methods that define the assumptions used by the test\n+ * cases.  For example, if your map does not allow duplicate values, override\n+ * {@link #isAllowDuplicateValues()} and have it return <code>false</code>\n+ *\n+ * @author Michael Smith\n+ * @author Rodney Waldhoff\n+ * @author Paul Jack\n+ * @author Stephen Colebourne\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:10 $\n+ */\n+public abstract class AbstractTestMap extends AbstractTestObject {\n+\n+    // These instance variables are initialized with the reset method.\n+    // Tests for map methods that alter the map (put, putAll, remove) \n+    // first call reset() to create the map and its views; then perform\n+    // the modification on the map; perform the same modification on the\n+    // confirmed; and then call verify() to ensure that the map is equal\n+    // to the confirmed, that the already-constructed collection views\n+    // are still equal to the confirmed's collection views.\n+\n+\n+    /** Map created by reset(). */\n+    protected Map map;\n+\n+    /** Entry set of map created by reset(). */\n+    protected Set entrySet;\n+\n+    /** Key set of map created by reset(). */\n+    protected Set keySet;\n+\n+    /** Values collection of map created by reset(). */\n+    protected Collection values;\n+\n+    /** HashMap created by reset(). */\n+    protected Map confirmed;\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test name\n+     */\n+    public AbstractTestMap(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * support the <code>put</code> and <code>putAll</code> operations\n+     * adding new mappings.\n+     * <p>\n+     * Default implementation returns true.\n+     * Override if your collection class does not support put adding.\n+     */\n+    protected boolean isPutAddSupported() {\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * support the <code>put</code> and <code>putAll</code> operations\n+     * changing existing mappings.\n+     * <p>\n+     * Default implementation returns true.\n+     * Override if your collection class does not support put changing.\n+     */\n+    protected boolean isPutChangeSupported() {\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * support the <code>setValue</code> operation on entrySet entries.\n+     * <p>\n+     * Default implementation returns isPutChangeSupported().\n+     * Override if your collection class does not support setValue but does\n+     * support put changing.\n+     */\n+    protected boolean isSetValueSupported() {\n+        return isPutChangeSupported();\n+    }\n+\n+    /**\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * support the <code>remove</code> and <code>clear</code> operations.\n+     * <p>\n+     * Default implementation returns true.\n+     * Override if your collection class does not support removal operations.\n+     */\n+    protected boolean isRemoveSupported() {\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * supports null keys.\n+     * <p>\n+     * Default implementation returns true.\n+     * Override if your collection class does not support null keys.\n+     */\n+    protected boolean isAllowNullKey() {\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * supports null values.\n+     * <p>\n+     * Default implementation returns true.\n+     * Override if your collection class does not support null values.\n+     */\n+    protected boolean isAllowNullValue() {\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * supports duplicate values.\n+     * <p>\n+     * Default implementation returns true.\n+     * Override if your collection class does not support duplicate values.\n+     */\n+    protected boolean isAllowDuplicateValues() {\n+        return true;\n+    }\n+\n+    /**\n+     *  Returns the set of keys in the mappings used to test the map.  This\n+     *  method must return an array with the same length as {@link\n+     *  #getSampleValues()} and all array elements must be different. The\n+     *  default implementation constructs a set of String keys, and includes a\n+     *  single null key if {@link #isAllowNullKey()} returns <code>true</code>.\n+     */\n+    protected Object[] getSampleKeys() {\n+        Object[] result = new Object[] {\n+            \"blah\", \"foo\", \"bar\", \"baz\", \"tmp\", \"gosh\", \"golly\", \"gee\", \n+            \"hello\", \"goodbye\", \"we'll\", \"see\", \"you\", \"all\", \"again\",\n+            \"key\",\n+            \"key2\",\n+            (isAllowNullKey()) ? null : \"nonnullkey\"\n+        };\n+        return result;\n+    }\n+\n+\n+    protected Object[] getOtherKeys() {\n+        return getOtherNonNullStringElements();\n+    }\n+\n+    protected Object[] getOtherValues() {\n+        return getOtherNonNullStringElements();\n+    }\n+\n+    /**\n+     * Returns a list of string elements suitable for return by\n+     * {@link #getOtherKeys()} or {@link #getOtherValues}.\n+     *\n+     * <p>Override getOtherElements to returnthe results of this method if your\n+     * collection does not support heterogenous elements or the null element.\n+     * </p>\n+     */\n+    protected Object[] getOtherNonNullStringElements() {\n+        return new Object[] {\n+            \"For\",\"then\",\"despite\",/* of */\"space\",\"I\",\"would\",\"be\",\"brought\",\n+            \"From\",\"limits\",\"far\",\"remote\",\"where\",\"thou\",\"dost\",\"stay\"\n+        };\n+    }\n+\n+    /**\n+     * Returns the set of values in the mappings used to test the map.  This\n+     * method must return an array with the same length as\n+     * {@link #getSampleKeys()}.  The default implementation constructs a set of\n+     * String values and includes a single null value if \n+     * {@link #isAllowNullValue()} returns <code>true</code>, and includes\n+     * two values that are the same if {@link #isAllowDuplicateValues()} returns\n+     * <code>true</code>.\n+     */\n+    protected Object[] getSampleValues() {\n+        Object[] result = new Object[] {\n+            \"blahv\", \"foov\", \"barv\", \"bazv\", \"tmpv\", \"goshv\", \"gollyv\", \"geev\",\n+            \"hellov\", \"goodbyev\", \"we'llv\", \"seev\", \"youv\", \"allv\", \"againv\",\n+            (isAllowNullValue()) ? null : \"nonnullvalue\",\n+            \"value\",\n+            (isAllowDuplicateValues()) ? \"value\" : \"value2\",\n+        };\n+        return result;\n+    }\n+\n+    /**\n+     * Returns a the set of values that can be used to replace the values\n+     * returned from {@link #getSampleValues()}.  This method must return an\n+     * array with the same length as {@link #getSampleValues()}.  The values\n+     * returned from this method should not be the same as those returned from\n+     * {@link #getSampleValues()}.  The default implementation constructs a\n+     * set of String values and includes a single null value if\n+     * {@link #isAllowNullValue()} returns <code>true</code>, and includes two values\n+     * that are the same if {@link #isAllowDuplicateValues()} returns\n+     * <code>true</code>.  \n+     */\n+    protected Object[] getNewSampleValues() {\n+        Object[] result = new Object[] {\n+            (isAllowNullValue() && isAllowDuplicateValues()) ? null : \"newnonnullvalue\",\n+            \"newvalue\",\n+            (isAllowDuplicateValues()) ? \"newvalue\" : \"newvalue2\",\n+            \"newblahv\", \"newfoov\", \"newbarv\", \"newbazv\", \"newtmpv\", \"newgoshv\", \n+            \"newgollyv\", \"newgeev\", \"newhellov\", \"newgoodbyev\", \"newwe'llv\", \n+            \"newseev\", \"newyouv\", \"newallv\", \"newagainv\",\n+        };\n+        return result;\n+    }\n+\n+    /**\n+     *  Helper method to add all the mappings described by {@link\n+     *  #getSampleKeys()} and {@link #getSampleValues()}.\n+     */\n+    protected void addSampleMappings(Map m) {\n+\n+        Object[] keys = getSampleKeys();\n+        Object[] values = getSampleValues();\n+        \n+        for(int i = 0; i < keys.length; i++) {\n+            try {\n+                m.put(keys[i], values[i]);\n+            } catch (NullPointerException exception) {\n+                assertTrue(\"NullPointerException only allowed to be thrown \" +\n+                           \"if either the key or value is null.\", \n+                           keys[i] == null || values[i] == null);\n+                \n+                assertTrue(\"NullPointerException on null key, but \" +\n+                           \"isNullKeySupported is not overridden to return false.\", \n+                           keys[i] == null || !isAllowNullKey());\n+                \n+                assertTrue(\"NullPointerException on null value, but \" +\n+                           \"isNullValueSupported is not overridden to return false.\",\n+                           values[i] == null || !isAllowNullValue());\n+                \n+                assertTrue(\"Unknown reason for NullPointer.\", false);\n+            }\n+        }\n+        assertEquals(\"size must reflect number of mappings added.\",\n+                     keys.length, m.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Return a new, empty {@link Map} to be used for testing. \n+     * \n+     * @return the map to be tested\n+     */\n+    protected abstract Map makeEmptyMap();\n+\n+    /**\n+     * Return a new, populated map.  The mappings in the map should match the\n+     * keys and values returned from {@link #getSampleKeys()} and {@link\n+     * #getSampleValues()}.  The default implementation uses makeEmptyMap()\n+     * and calls {@link #addSampleMappings} to add all the mappings to the\n+     * map.\n+     * \n+     * @return the map to be tested\n+     */\n+    protected Map makeFullMap() {\n+        Map m = makeEmptyMap();\n+        addSampleMappings(m);\n+        return m;\n+    }\n+\n+    /**\n+     * Implements the superclass method to return the map to be tested.\n+     * \n+     * @return the map to be tested\n+     */\n+    public Object makeObject() {\n+        return makeEmptyMap();\n+    }\n+\n+    /**\n+     * Override to return a map other than HashMap as the confirmed map.\n+     * \n+     * @return a map that is known to be valid\n+     */\n+    protected Map makeConfirmedMap() {\n+        return new HashMap();\n+    }\n+\n+    /**\n+     * Creates a new Map Entry that is independent of the first and the map.\n+     */\n+    protected Map.Entry cloneMapEntry(Map.Entry entry) {\n+        HashMap map = new HashMap();\n+        map.put(entry.getKey(), entry.getValue());\n+        return (Map.Entry) map.entrySet().iterator().next();\n+    }\n+\n+    /**\n+     * Gets the compatability version, needed for package access.\n+     */\n+    protected String getCompatibilityVersion() {\n+        return super.getCompatibilityVersion();\n+    }\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test to ensure the test setup is working properly.  This method checks\n+     * to ensure that the getSampleKeys and getSampleValues methods are\n+     * returning results that look appropriate.  That is, they both return a\n+     * non-null array of equal length.  The keys array must not have any\n+     * duplicate values, and may only contain a (single) null key if\n+     * isNullKeySupported() returns true.  The values array must only have a null\n+     * value if useNullValue() is true and may only have duplicate values if\n+     * isAllowDuplicateValues() returns true.  \n+     */\n+    public void testSampleMappings() {\n+      Object[] keys = getSampleKeys();\n+      Object[] values = getSampleValues();\n+      Object[] newValues = getNewSampleValues();\n+\n+      assertTrue(\"failure in test: Must have keys returned from \" +\n+                 \"getSampleKeys.\", keys != null);\n+\n+      assertTrue(\"failure in test: Must have values returned from \" +\n+                 \"getSampleValues.\", values != null);\n+\n+      // verify keys and values have equivalent lengths (in case getSampleX are\n+      // overridden)\n+      assertEquals(\"failure in test: not the same number of sample \" +\n+                   \"keys and values.\",  keys.length, values.length);\n+      \n+      assertEquals(\"failure in test: not the same number of values and new values.\",\n+                   values.length, newValues.length);\n+\n+      // verify there aren't duplicate keys, and check values\n+      for(int i = 0; i < keys.length - 1; i++) {\n+          for(int j = i + 1; j < keys.length; j++) {\n+              assertTrue(\"failure in test: duplicate null keys.\",\n+                         (keys[i] != null || keys[j] != null));\n+              assertTrue(\"failure in test: duplicate non-null key.\",\n+                         (keys[i] == null || keys[j] == null || \n+                          (!keys[i].equals(keys[j]) && \n+                           !keys[j].equals(keys[i]))));\n+          }\n+          assertTrue(\"failure in test: found null key, but isNullKeySupported \" +\n+                     \"is false.\", keys[i] != null || isAllowNullKey());\n+          assertTrue(\"failure in test: found null value, but isNullValueSupported \" +\n+                     \"is false.\", values[i] != null || isAllowNullValue());\n+          assertTrue(\"failure in test: found null new value, but isNullValueSupported \" +\n+                     \"is false.\", newValues[i] != null || isAllowNullValue());\n+          assertTrue(\"failure in test: values should not be the same as new value\",\n+                     values[i] != newValues[i] && \n+                     (values[i] == null || !values[i].equals(newValues[i])));\n+      }\n+    }\n+    \n+    // tests begin here.  Each test adds a little bit of tested functionality.\n+    // Many methods assume previous methods passed.  That is, they do not\n+    // exhaustively recheck things that have already been checked in a previous\n+    // test methods.  \n+\n+    /**\n+     * Test to ensure that makeEmptyMap and makeFull returns a new non-null\n+     * map with each invocation.  \n+     */\n+    public void testMakeMap() {\n+        Map em = makeEmptyMap();\n+        assertTrue(\"failure in test: makeEmptyMap must return a non-null map.\",\n+                   em != null);\n+        \n+        Map em2 = makeEmptyMap();\n+        assertTrue(\"failure in test: makeEmptyMap must return a non-null map.\",\n+                   em != null);\n+\n+        assertTrue(\"failure in test: makeEmptyMap must return a new map \" +\n+                   \"with each invocation.\", em != em2);\n+\n+        Map fm = makeFullMap();\n+        assertTrue(\"failure in test: makeFullMap must return a non-null map.\",\n+                   fm != null);\n+        \n+        Map fm2 = makeFullMap();\n+        assertTrue(\"failure in test: makeFullMap must return a non-null map.\",\n+                   fm != null);\n+\n+        assertTrue(\"failure in test: makeFullMap must return a new map \" +\n+                   \"with each invocation.\", fm != fm2);\n+    }\n+\n+    /**\n+     * Tests Map.isEmpty()\n+     */\n+    public void testMapIsEmpty() {\n+        resetEmpty();\n+        assertEquals(\"Map.isEmpty() should return true with an empty map\", \n+                     true, map.isEmpty());\n+        verify();\n+\n+        resetFull();\n+        assertEquals(\"Map.isEmpty() should return false with a non-empty map\",\n+                     false, map.isEmpty());\n+        verify();\n+    }\n+\n+    /**\n+     * Tests Map.size()\n+     */\n+    public void testMapSize() {\n+        resetEmpty();\n+        assertEquals(\"Map.size() should be 0 with an empty map\",\n+                     0, map.size());\n+        verify();\n+\n+        resetFull();\n+        assertEquals(\"Map.size() should equal the number of entries \" +\n+                     \"in the map\", getSampleKeys().length, map.size());\n+        verify();\n+    }\n+\n+    /**\n+     * Tests {@link Map#clear()}.  If the map {@link #isRemoveSupported()}\n+     * can add and remove elements}, then {@link Map#size()} and\n+     * {@link Map#isEmpty()} are used to ensure that map has no elements after\n+     * a call to clear.  If the map does not support adding and removing\n+     * elements, this method checks to ensure clear throws an\n+     * UnsupportedOperationException.\n+     */\n+    public void testMapClear() {\n+        if (!isRemoveSupported()) {\n+            try {\n+                resetFull();\n+                map.clear();\n+                fail(\"Expected UnsupportedOperationException on clear\");\n+            } catch (UnsupportedOperationException ex) {}\n+            return;\n+        }\n+\n+        resetEmpty();\n+        map.clear();\n+        confirmed.clear();\n+        verify();\n+        \n+        resetFull();\n+        map.clear();\n+        confirmed.clear();\n+        verify();\n+    }\n+\n+\n+    /**\n+     * Tests Map.containsKey(Object) by verifying it returns false for all\n+     * sample keys on a map created using an empty map and returns true for\n+     * all sample keys returned on a full map. \n+     */\n+    public void testMapContainsKey() {\n+        Object[] keys = getSampleKeys();\n+\n+        resetEmpty();\n+        for(int i = 0; i < keys.length; i++) {\n+            assertTrue(\"Map must not contain key when map is empty\", \n+                       !map.containsKey(keys[i]));\n+        }\n+        verify();\n+\n+        resetFull();\n+        for(int i = 0; i < keys.length; i++) {\n+            assertTrue(\"Map must contain key for a mapping in the map. \" +\n+                       \"Missing: \" + keys[i], map.containsKey(keys[i]));\n+        }\n+        verify();\n+    }\n+\n+    /**\n+     * Tests Map.containsValue(Object) by verifying it returns false for all\n+     * sample values on an empty map and returns true for all sample values on\n+     * a full map.\n+     */\n+    public void testMapContainsValue() {\n+        Object[] values = getSampleValues();\n+\n+        resetEmpty();\n+        for(int i = 0; i < values.length; i++) {\n+            assertTrue(\"Empty map must not contain value\", \n+                       !map.containsValue(values[i]));\n+        }\n+        verify();\n+        \n+        resetFull();\n+        for(int i = 0; i < values.length; i++) {\n+            assertTrue(\"Map must contain value for a mapping in the map.\", \n+                       map.containsValue(values[i]));\n+        }\n+        verify();\n+    }\n+\n+\n+    /**\n+     * Tests Map.equals(Object)\n+     */\n+    public void testMapEquals() {\n+        resetEmpty();\n+        assertTrue(\"Empty maps unequal.\", map.equals(confirmed));\n+        verify();\n+\n+        resetFull();\n+        assertTrue(\"Full maps unequal.\", map.equals(confirmed));\n+        verify();\n+\n+        resetFull();\n+        // modify the HashMap created from the full map and make sure this\n+        // change results in map.equals() to return false.\n+        Iterator iter = confirmed.keySet().iterator();\n+        iter.next();\n+        iter.remove();\n+        assertTrue(\"Different maps equal.\", !map.equals(confirmed));\n+        \n+        resetFull();\n+        assertTrue(\"equals(null) returned true.\", !map.equals(null));\n+        assertTrue(\"equals(new Object()) returned true.\", \n+                   !map.equals(new Object()));\n+        verify();\n+    }\n+\n+\n+    /**\n+     * Tests Map.get(Object)\n+     */\n+    public void testMapGet() {\n+        resetEmpty();\n+\n+        Object[] keys = getSampleKeys();\n+        Object[] values = getSampleValues();\n+\n+        for (int i = 0; i < keys.length; i++) {\n+            assertTrue(\"Empty map.get() should return null.\", \n+                       map.get(keys[i]) == null);\n+        }\n+        verify();\n+\n+        resetFull();\n+        for (int i = 0; i < keys.length; i++) {\n+            assertEquals(\"Full map.get() should return value from mapping.\", \n+                         values[i], map.get(keys[i]));\n+        }\n+    }\n+\n+    /**\n+     * Tests Map.hashCode()\n+     */\n+    public void testMapHashCode() {\n+        resetEmpty();\n+        assertTrue(\"Empty maps have different hashCodes.\", \n+                   map.hashCode() == confirmed.hashCode());\n+\n+        resetFull();\n+        assertTrue(\"Equal maps have different hashCodes.\", \n+                   map.hashCode() == confirmed.hashCode());\n+    }\n+\n+    /**\n+     * Tests Map.toString().  Since the format of the string returned by the\n+     * toString() method is not defined in the Map interface, there is no\n+     * common way to test the results of the toString() method.  Thereforce,\n+     * it is encouraged that Map implementations override this test with one\n+     * that checks the format matches any format defined in its API.  This\n+     * default implementation just verifies that the toString() method does\n+     * not return null.\n+     */\n+    public void testMapToString() {\n+        resetEmpty();\n+        assertTrue(\"Empty map toString() should not return null\", \n+                   map.toString() != null);\n+        verify();\n+\n+        resetFull();\n+        assertTrue(\"Empty map toString() should not return null\", \n+                   map.toString() != null);\n+        verify();\n+    }\n+\n+\n+    /**\n+     * Compare the current serialized form of the Map\n+     * against the canonical version in CVS.\n+     */\n+    public void testEmptyMapCompatibility() throws IOException, ClassNotFoundException {\n+        /**\n+         * Create canonical objects with this code\n+        Map map = makeEmptyMap();\n+        if (!(map instanceof Serializable)) return;\n+        \n+        writeExternalFormToDisk((Serializable) map, getCanonicalEmptyCollectionName(map));\n+        */\n+\n+        // test to make sure the canonical form has been preserved\n+        Map map = makeEmptyMap();\n+        if (map instanceof Serializable && !skipSerializedCanonicalTests()) {\n+            Map map2 = (Map) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n+            assertEquals(\"Map is empty\", 0, map2.size());\n+        }\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the Map\n+     * against the canonical version in CVS.\n+     */\n+    public void testFullMapCompatibility() throws IOException, ClassNotFoundException {\n+        /**\n+         * Create canonical objects with this code\n+        Map map = makeFullMap();\n+        if (!(map instanceof Serializable)) return;\n+        \n+        writeExternalFormToDisk((Serializable) map, getCanonicalFullCollectionName(map));\n+        */\n+\n+        // test to make sure the canonical form has been preserved\n+        Map map = makeFullMap();\n+        if (map instanceof Serializable && !skipSerializedCanonicalTests()) {\n+            Map map2 = (Map) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n+            assertEquals(\"Map is the right size\", getSampleKeys().length, map2.size());\n+        }\n+    }\n+\n+    /**\n+     * Tests Map.put(Object, Object)\n+     */\n+    public void testMapPut() {\n+        resetEmpty();\n+        Object[] keys = getSampleKeys();\n+        Object[] values = getSampleValues();\n+        Object[] newValues = getNewSampleValues();\n+\n+        if (isPutAddSupported()) {\n+            for (int i = 0; i < keys.length; i++) {\n+                Object o = map.put(keys[i], values[i]);\n+                confirmed.put(keys[i], values[i]);\n+                verify();\n+                assertTrue(\"First map.put should return null\", o == null);\n+                assertTrue(\"Map should contain key after put\", \n+                           map.containsKey(keys[i]));\n+                assertTrue(\"Map should contain value after put\", \n+                           map.containsValue(values[i]));\n+            }\n+            if (isPutChangeSupported()) {\n+                for (int i = 0; i < keys.length; i++) {\n+                    Object o = map.put(keys[i], newValues[i]);\n+                    confirmed.put(keys[i], newValues[i]);\n+                    verify();\n+                    assertEquals(\"Map.put should return previous value when changed\",\n+                                 values[i], o);\n+                    assertTrue(\"Map should still contain key after put when changed\",\n+                               map.containsKey(keys[i]));\n+                    assertTrue(\"Map should contain new value after put when changed\",\n+                               map.containsValue(newValues[i]));\n+        \n+                    // if duplicates are allowed, we're not guaranteed that the value\n+                    // no longer exists, so don't try checking that.\n+                    if (!isAllowDuplicateValues()) {\n+                        assertTrue(\"Map should not contain old value after put when changed\",\n+                                   !map.containsValue(values[i]));\n+                    }\n+                }\n+            } else {\n+                try {\n+                    // two possible exception here, either valid\n+                    map.put(keys[0], newValues[0]);\n+                    fail(\"Expected IllegalArgumentException or UnsupportedOperationException on put (change)\");\n+                } catch (IllegalArgumentException ex) {\n+                } catch (UnsupportedOperationException ex) {}\n+            }\n+            \n+        } else if (isPutChangeSupported()) {\n+            resetEmpty();\n+            try {\n+                map.put(keys[0], values[0]);\n+                fail(\"Expected UnsupportedOperationException or IllegalArgumentException on put (add) when fixed size\");\n+            } catch (IllegalArgumentException ex) {\n+            } catch (UnsupportedOperationException ex) {\n+            }\n+            \n+            resetFull();\n+            int i = 0;\n+            for (Iterator it = map.keySet().iterator(); it.hasNext() && i < newValues.length; i++) {\n+                Object key = it.next();\n+                Object o = map.put(key, newValues[i]);\n+                Object value = confirmed.put(key, newValues[i]);\n+                verify();\n+                assertEquals(\"Map.put should return previous value when changed\",\n+                    value, o);\n+                assertTrue(\"Map should still contain key after put when changed\",\n+                    map.containsKey(key));\n+                assertTrue(\"Map should contain new value after put when changed\",\n+                    map.containsValue(newValues[i]));\n+        \n+                // if duplicates are allowed, we're not guaranteed that the value\n+                // no longer exists, so don't try checking that.\n+                if (!isAllowDuplicateValues()) {\n+                    assertTrue(\"Map should not contain old value after put when changed\",\n+                        !map.containsValue(values[i]));\n+                }\n+            }\n+        } else {\n+            try {\n+                map.put(keys[0], values[0]);\n+                fail(\"Expected UnsupportedOperationException on put (add)\");\n+            } catch (UnsupportedOperationException ex) {}\n+        }\n+    }\n+\n+    /**\n+     * Tests Map.putAll(map)\n+     */\n+    public void testMapPutAll() {\n+        if (!isPutAddSupported()) {\n+            if (!isPutChangeSupported()) {\n+                Map temp = makeFullMap();\n+                resetEmpty();\n+                try {\n+                    map.putAll(temp);\n+                    fail(\"Expected UnsupportedOperationException on putAll\");\n+                } catch (UnsupportedOperationException ex) {}\n+            }\n+            return;\n+        }\n+\n+        resetEmpty();\n+\n+        Map m2 = makeFullMap();\n+\n+        map.putAll(m2);\n+        confirmed.putAll(m2);\n+        verify();\n+\n+        resetEmpty();\n+\n+        m2 = makeConfirmedMap();\n+        Object[] keys = getSampleKeys();\n+        Object[] values = getSampleValues();\n+        for(int i = 0; i < keys.length; i++) {\n+            m2.put(keys[i], values[i]);\n+        }\n+\n+        map.putAll(m2);\n+        confirmed.putAll(m2);\n+        verify();\n+    }\n+\n+    /**\n+     * Tests Map.remove(Object)\n+     */\n+    public void testMapRemove() {\n+        if (!isRemoveSupported()) {\n+            try {\n+                resetFull();\n+                map.remove(map.keySet().iterator().next());\n+                fail(\"Expected UnsupportedOperationException on remove\");\n+            } catch (UnsupportedOperationException ex) {}\n+            return;\n+        }\n+\n+        resetEmpty();\n+\n+        Object[] keys = getSampleKeys();\n+        Object[] values = getSampleValues();\n+        for(int i = 0; i < keys.length; i++) {\n+            Object o = map.remove(keys[i]);\n+            assertTrue(\"First map.remove should return null\", o == null);\n+        }\n+        verify();\n+\n+        resetFull();\n+\n+        for(int i = 0; i < keys.length; i++) {\n+            Object o = map.remove(keys[i]);\n+            confirmed.remove(keys[i]);\n+            verify();\n+\n+            assertEquals(\"map.remove with valid key should return value\",\n+                         values[i], o);\n+        }\n+\n+        Object[] other = getOtherKeys();\n+\n+        resetFull();\n+        int size = map.size();\n+        for (int i = 0; i < other.length; i++) {\n+            Object o = map.remove(other[i]);\n+            assertEquals(\"map.remove for nonexistent key should return null\",\n+                         o, null);\n+            assertEquals(\"map.remove for nonexistent key should not \" +\n+                         \"shrink map\", size, map.size());\n+        }\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests that the {@link Map#values} collection is backed by\n+     * the underlying map for clear().\n+     */\n+    public void testValuesClearChangesMap() {\n+        if (!isRemoveSupported()) return;\n+        \n+        // clear values, reflected in map\n+        resetFull();\n+        Collection values = map.values();\n+        assertTrue(map.size() > 0);\n+        assertTrue(values.size() > 0);\n+        values.clear();\n+        assertTrue(map.size() == 0);\n+        assertTrue(values.size() == 0);\n+        \n+        // clear map, reflected in values\n+        resetFull();\n+        values = map.values();\n+        assertTrue(map.size() > 0);\n+        assertTrue(values.size() > 0);\n+        map.clear();\n+        assertTrue(map.size() == 0);\n+        assertTrue(values.size() == 0);\n+    }\n+    \n+    /**\n+     * Tests that the {@link Map#keySet} collection is backed by\n+     * the underlying map for clear().\n+     */\n+    public void testKeySetClearChangesMap() {\n+        if (!isRemoveSupported()) return;\n+        \n+        // clear values, reflected in map\n+        resetFull();\n+        Set keySet = map.keySet();\n+        assertTrue(map.size() > 0);\n+        assertTrue(keySet.size() > 0);\n+        keySet.clear();\n+        assertTrue(map.size() == 0);\n+        assertTrue(keySet.size() == 0);\n+        \n+        // clear map, reflected in values\n+        resetFull();\n+        keySet = map.keySet();\n+        assertTrue(map.size() > 0);\n+        assertTrue(keySet.size() > 0);\n+        map.clear();\n+        assertTrue(map.size() == 0);\n+        assertTrue(keySet.size() == 0);\n+    }\n+    \n+    /**\n+     * Tests that the {@link Map#entrySet()} collection is backed by\n+     * the underlying map for clear().\n+     */\n+    public void testEntrySetClearChangesMap() {\n+        if (!isRemoveSupported()) return;\n+        \n+        // clear values, reflected in map\n+        resetFull();\n+        Set entrySet = map.entrySet();\n+        assertTrue(map.size() > 0);\n+        assertTrue(entrySet.size() > 0);\n+        entrySet.clear();\n+        assertTrue(map.size() == 0);\n+        assertTrue(entrySet.size() == 0);\n+        \n+        // clear map, reflected in values\n+        resetFull();\n+        entrySet = map.entrySet();\n+        assertTrue(map.size() > 0);\n+        assertTrue(entrySet.size() > 0);\n+        map.clear();\n+        assertTrue(map.size() == 0);\n+        assertTrue(entrySet.size() == 0);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests that the {@link Map#values} collection is backed by\n+     * the underlying map by removing from the values collection\n+     * and testing if the value was removed from the map.\n+     * <p>\n+     * We should really test the \"vice versa\" case--that values removed\n+     * from the map are removed from the values collection--also,\n+     * but that's a more difficult test to construct (lacking a\n+     * \"removeValue\" method.)\n+     * </p>\n+     * <p>\n+     * See bug <a href=\"http://issues.apache.org/bugzilla/show_bug.cgi?id=9573\">\n+     * 9573</a>.\n+     * </p>\n+     */\n+    public void testValuesRemoveChangesMap() {\n+        resetFull();\n+        Object[] sampleValues = getSampleValues();\n+        Collection values = map.values();\n+        for (int i = 0; i < sampleValues.length; i++) {\n+            if (map.containsValue(sampleValues[i])) {\n+                int j = 0;  // loop counter prevents infinite loops when remove is broken\n+                while (values.contains(sampleValues[i]) && j < 10000) {\n+                    try {\n+                        values.remove(sampleValues[i]);\n+                    } catch (UnsupportedOperationException e) {\n+                        // if values.remove is unsupported, just skip this test\n+                        return;\n+                    }\n+                    j++;\n+                }\n+                assertTrue(\"values().remove(obj) is broken\", j < 10000);\n+                assertTrue(\n+                    \"Value should have been removed from the underlying map.\",\n+                    !map.containsValue(sampleValues[i]));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Tests that the {@link Map#keySet} set is backed by\n+     * the underlying map by removing from the keySet set\n+     * and testing if the key was removed from the map.\n+     */\n+    public void testKeySetRemoveChangesMap() {\n+        resetFull();\n+        Object[] sampleKeys = getSampleKeys();\n+        Set keys = map.keySet();\n+        for (int i = 0; i < sampleKeys.length; i++) {\n+            try {\n+                keys.remove(sampleKeys[i]);\n+            } catch (UnsupportedOperationException e) {\n+                // if key.remove is unsupported, just skip this test\n+                return;\n+            }\n+            assertTrue(\n+                \"Key should have been removed from the underlying map.\",\n+                !map.containsKey(sampleKeys[i]));\n+        }\n+    }\n+\n+    // TODO: Need:\n+    //    testValuesRemovedFromEntrySetAreRemovedFromMap\n+    //    same for EntrySet/KeySet/values's\n+    //      Iterator.remove, removeAll, retainAll\n+\n+\n+    /**\n+     * Utility methods to create an array of Map.Entry objects\n+     * out of the given key and value arrays.<P>\n+     *\n+     * @param keys    the array of keys\n+     * @param values  the array of values\n+     * @return an array of Map.Entry of those keys to those values\n+     */\n+    private Map.Entry[] makeEntryArray(Object[] keys, Object[] values) {\n+        Map.Entry[] result = new Map.Entry[keys.length];\n+        for (int i = 0; i < keys.length; i++) {\n+            Map map = makeConfirmedMap();\n+            map.put(keys[i], values[i]);\n+            result[i] = (Map.Entry) map.entrySet().iterator().next();\n+        }\n+        return result;\n+    }\n+\n+\n+    /**\n+     * Bulk test {@link Map#entrySet()}.  This method runs through all of\n+     * the tests in {@link AbstractTestSet}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the map and the other collection views are still valid.\n+     *\n+     * @return a {@link AbstractTestSet} instance for testing the map's entry set\n+     */\n+    public BulkTest bulkTestMapEntrySet() {\n+        return new TestMapEntrySet();\n+    }\n+\n+    public class TestMapEntrySet extends AbstractTestSet {\n+        public TestMapEntrySet() {\n+            super(\"MapEntrySet\");\n+        }\n+\n+        // Have to implement manually; entrySet doesn't support addAll\n+        protected Object[] getFullElements() {\n+            Object[] k = getSampleKeys();\n+            Object[] v = getSampleValues();\n+            return makeEntryArray(k, v);\n+        }\n+        \n+        // Have to implement manually; entrySet doesn't support addAll\n+        protected Object[] getOtherElements() {\n+            Object[] k = getOtherKeys();\n+            Object[] v = getOtherValues();\n+            return makeEntryArray(k, v);\n+        }\n+        \n+        protected Set makeEmptySet() {\n+            return makeEmptyMap().entrySet();\n+        }\n+        \n+        protected Set makeFullSet() {\n+            return makeFullMap().entrySet();\n+        }\n+        \n+        protected boolean isAddSupported() {\n+            // Collection views don't support add operations.\n+            return false;\n+        }\n+        protected boolean isRemoveSupported() {\n+            // Entry set should only support remove if map does\n+            return AbstractTestMap.this.isRemoveSupported();\n+        }\n+        protected boolean supportsEmptyCollections() {\n+            return AbstractTestMap.this.supportsEmptyCollections();\n+        }\n+        protected boolean supportsFullCollections() {\n+            return AbstractTestMap.this.supportsFullCollections();\n+        }\n+        \n+        protected void resetFull() {\n+            AbstractTestMap.this.resetFull();\n+            collection = map.entrySet();\n+            TestMapEntrySet.this.confirmed = AbstractTestMap.this.confirmed.entrySet();\n+        }\n+        \n+        protected void resetEmpty() {\n+            AbstractTestMap.this.resetEmpty();\n+            collection = map.entrySet();\n+            TestMapEntrySet.this.confirmed = AbstractTestMap.this.confirmed.entrySet();\n+        }\n+        \n+        public void testMapEntrySetIteratorEntry() {\n+            resetFull();\n+            Iterator it = collection.iterator();\n+            int count = 0;\n+            while (it.hasNext()) {\n+                Map.Entry entry = (Map.Entry) it.next();\n+                assertEquals(true, AbstractTestMap.this.map.containsKey(entry.getKey()));\n+                assertEquals(true, AbstractTestMap.this.map.containsValue(entry.getValue()));\n+                assertEquals(AbstractTestMap.this.map.get(entry.getKey()), entry.getValue());\n+                count++;\n+            }\n+            assertEquals(collection.size(), count);\n+        }\n+\n+        public void testMapEntrySetIteratorEntrySetValue() {\n+            Object key1 = getSampleKeys()[0];\n+            Object key2 = getSampleKeys()[1];\n+            Object newValue1 = getNewSampleValues()[0];\n+            Object newValue2 = getNewSampleValues()[1];\n+            \n+            resetFull();\n+            // explicitly get entries as sample values/keys are connected for some maps\n+            // such as BeanMap\n+            Iterator it = TestMapEntrySet.this.collection.iterator();\n+            Map.Entry entry1 = getEntry(it, key1);\n+            it = TestMapEntrySet.this.collection.iterator();\n+            Map.Entry entry2 = getEntry(it, key2);\n+            Iterator itConfirmed = TestMapEntrySet.this.confirmed.iterator();\n+            Map.Entry entryConfirmed1 = getEntry(itConfirmed, key1);\n+            itConfirmed = TestMapEntrySet.this.confirmed.iterator();\n+            Map.Entry entryConfirmed2 = getEntry(itConfirmed, key2);\n+            verify();\n+            \n+            if (isSetValueSupported() == false) {\n+                try {\n+                    entry1.setValue(newValue1);\n+                } catch (UnsupportedOperationException ex) {\n+                }\n+                return;\n+            }\n+            \n+            entry1.setValue(newValue1);\n+            entryConfirmed1.setValue(newValue1);\n+            assertEquals(newValue1, entry1.getValue());\n+            assertEquals(true, AbstractTestMap.this.map.containsKey(entry1.getKey()));\n+            assertEquals(true, AbstractTestMap.this.map.containsValue(newValue1));\n+            assertEquals(newValue1, AbstractTestMap.this.map.get(entry1.getKey()));\n+            verify();\n+            \n+            entry1.setValue(newValue1);\n+            entryConfirmed1.setValue(newValue1);\n+            assertEquals(newValue1, entry1.getValue());\n+            assertEquals(true, AbstractTestMap.this.map.containsKey(entry1.getKey()));\n+            assertEquals(true, AbstractTestMap.this.map.containsValue(newValue1));\n+            assertEquals(newValue1, AbstractTestMap.this.map.get(entry1.getKey()));\n+            verify();\n+            \n+            entry2.setValue(newValue2);\n+            entryConfirmed2.setValue(newValue2);\n+            assertEquals(newValue2, entry2.getValue());\n+            assertEquals(true, AbstractTestMap.this.map.containsKey(entry2.getKey()));\n+            assertEquals(true, AbstractTestMap.this.map.containsValue(newValue2));\n+            assertEquals(newValue2, AbstractTestMap.this.map.get(entry2.getKey()));\n+            verify();\n+        }\n+        \n+        protected Map.Entry getEntry(Iterator itConfirmed, Object key) {\n+            Map.Entry entry = null;\n+            while (itConfirmed.hasNext()) {\n+                Map.Entry temp = (Map.Entry) itConfirmed.next();\n+                if (temp.getKey() == null) {\n+                    if (key == null) {\n+                        entry = temp;\n+                        break;\n+                    }\n+                } else if (temp.getKey().equals(key)) {\n+                    entry = temp;\n+                    break;\n+                }\n+            }\n+            assertNotNull(\"No matching entry in map for key '\" + key + \"'\", entry);\n+            return entry;\n+        }\n+\n+        protected void verify() {\n+            super.verify();\n+            AbstractTestMap.this.verify();\n+        }\n+    }\n+\n+\n+    /**\n+     * Bulk test {@link Map#keySet()}.  This method runs through all of\n+     * the tests in {@link AbstractTestSet}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the map and the other collection views are still valid.\n+     *\n+     * @return a {@link AbstractTestSet} instance for testing the map's key set\n+     */\n+    public BulkTest bulkTestMapKeySet() {\n+        return new TestMapKeySet();\n+    }\n+\n+    public class TestMapKeySet extends AbstractTestSet {\n+        public TestMapKeySet() {\n+            super(\"\");\n+        }\n+        protected Object[] getFullElements() {\n+            return getSampleKeys();\n+        }\n+        \n+        protected Object[] getOtherElements() {\n+            return getOtherKeys();\n+        }\n+        \n+        protected Set makeEmptySet() {\n+            return makeEmptyMap().keySet();\n+        }\n+        \n+        protected Set makeFullSet() {\n+            return makeFullMap().keySet();\n+        }\n+        \n+        protected boolean isNullSupported() {\n+            return AbstractTestMap.this.isAllowNullKey();\n+        }\n+        protected boolean isAddSupported() {\n+            return false;\n+        }\n+        protected boolean isRemoveSupported() {\n+            return AbstractTestMap.this.isRemoveSupported();\n+        }\n+        protected boolean supportsEmptyCollections() {\n+            return AbstractTestMap.this.supportsEmptyCollections();\n+        }\n+        protected boolean supportsFullCollections() {\n+            return AbstractTestMap.this.supportsFullCollections();\n+        }\n+        \n+        protected void resetEmpty() {\n+            AbstractTestMap.this.resetEmpty();\n+            collection = map.keySet();\n+            TestMapKeySet.this.confirmed = AbstractTestMap.this.confirmed.keySet();\n+        }\n+        \n+        protected void resetFull() {\n+            AbstractTestMap.this.resetFull();\n+            collection = map.keySet();\n+            TestMapKeySet.this.confirmed = AbstractTestMap.this.confirmed.keySet();\n+        }\n+        \n+        protected void verify() {\n+            super.verify();\n+            AbstractTestMap.this.verify();\n+        }\n+    }\n+\n+\n+    /**\n+     * Bulk test {@link Map#values()}.  This method runs through all of\n+     * the tests in {@link AbstractTestCollection}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the map and the other collection views are still valid.\n+     *\n+     * @return a {@link AbstractTestCollection} instance for testing the map's\n+     *    values collection\n+     */\n+    public BulkTest bulkTestMapValues() {\n+        return new TestMapValues();\n+    }\n+\n+    public class TestMapValues extends AbstractTestCollection {\n+        public TestMapValues() {\n+            super(\"\");\n+        }\n+\n+        protected Object[] getFullElements() {\n+            return getSampleValues();\n+        }\n+        \n+        protected Object[] getOtherElements() {\n+            return getOtherValues();\n+        }\n+        \n+        protected Collection makeCollection() {\n+            return makeEmptyMap().values();\n+        }\n+        \n+        protected Collection makeFullCollection() {\n+            return makeFullMap().values();\n+        }\n+        \n+        protected boolean isNullSupported() {\n+            return AbstractTestMap.this.isAllowNullKey();\n+        }\n+        protected boolean isAddSupported() {\n+            return false;\n+        }\n+        protected boolean isRemoveSupported() {\n+            return AbstractTestMap.this.isRemoveSupported();\n+        }\n+        protected boolean supportsEmptyCollections() {\n+            return AbstractTestMap.this.supportsEmptyCollections();\n+        }\n+        protected boolean supportsFullCollections() {\n+            return AbstractTestMap.this.supportsFullCollections();\n+        }\n+\n+        protected boolean areEqualElementsDistinguishable() {\n+            // equal values are associated with different keys, so they are\n+            // distinguishable.  \n+            return true;\n+        }\n+\n+        protected Collection makeConfirmedCollection() {\n+            // never gets called, reset methods are overridden\n+            return null;\n+        }\n+        \n+        protected Collection makeConfirmedFullCollection() {\n+            // never gets called, reset methods are overridden\n+            return null;\n+        }\n+        \n+        protected void resetFull() {\n+            AbstractTestMap.this.resetFull();\n+            collection = map.values();\n+            TestMapValues.this.confirmed = AbstractTestMap.this.confirmed.values();\n+        }\n+        \n+        protected void resetEmpty() {\n+            AbstractTestMap.this.resetEmpty();\n+            collection = map.values();\n+            TestMapValues.this.confirmed = AbstractTestMap.this.confirmed.values();\n+        }\n+\n+        protected void verify() {\n+            super.verify();\n+            AbstractTestMap.this.verify();\n+        }\n+\n+        // TODO: should test that a remove on the values collection view\n+        // removes the proper mapping and not just any mapping that may have\n+        // the value equal to the value returned from the values iterator.\n+    }\n+\n+\n+    /**\n+     * Resets the {@link #map}, {@link #entrySet}, {@link #keySet},\n+     * {@link #values} and {@link #confirmed} fields to empty.\n+     */\n+    protected void resetEmpty() {\n+        this.map = makeEmptyMap();\n+        views();\n+        this.confirmed = makeConfirmedMap();\n+    }\n+\n+    /**\n+     * Resets the {@link #map}, {@link #entrySet}, {@link #keySet},\n+     * {@link #values} and {@link #confirmed} fields to full.\n+     */\n+    protected void resetFull() {\n+        this.map = makeFullMap();\n+        views();\n+        this.confirmed = makeConfirmedMap();\n+        Object[] k = getSampleKeys();\n+        Object[] v = getSampleValues();\n+        for (int i = 0; i < k.length; i++) {\n+            confirmed.put(k[i], v[i]);\n+        }\n+    }\n+\n+\n+    /**\n+     * Resets the collection view fields.\n+     */\n+    private void views() {\n+        this.keySet = map.keySet();\n+        this.values = map.values();\n+        this.entrySet = map.entrySet();\n+    }\n+\n+\n+    /**\n+     * Verifies that {@link #map} is still equal to {@link #confirmed}.\n+     * This method checks that the map is equal to the HashMap, \n+     * <I>and</I> that the map's collection views are still equal to\n+     * the HashMap's collection views.  An <Code>equals</Code> test\n+     * is done on the maps and their collection views; their size and\n+     * <Code>isEmpty</Code> results are compared; their hashCodes are\n+     * compared; and <Code>containsAll</Code> tests are run on the \n+     * collection views.\n+     */\n+    protected void verify() {\n+        verifyMap();\n+        verifyEntrySet();\n+        verifyKeySet();\n+        verifyValues();\n+    }\n+\n+    protected void verifyMap() {\n+        int size = confirmed.size();\n+        boolean empty = confirmed.isEmpty();\n+        assertEquals(\"Map should be same size as HashMap\", \n+                     size, map.size());\n+        assertEquals(\"Map should be empty if HashMap is\", \n+                     empty, map.isEmpty());\n+        assertEquals(\"hashCodes should be the same\",\n+                     confirmed.hashCode(), map.hashCode());\n+        // this fails for LRUMap because confirmed.equals() somehow modifies\n+        // map, causing concurrent modification exceptions.\n+        //assertEquals(\"Map should still equal HashMap\", confirmed, map);\n+        // this works though and performs the same verification:\n+        assertTrue(\"Map should still equal HashMap\", map.equals(confirmed));\n+        // TODO: this should really be reexamined to figure out why LRU map\n+        // behaves like it does (the equals shouldn't modify since all accesses\n+        // by the confirmed collection should be through an iterator, thus not\n+        // causing LRUMap to change).\n+    }\n+\n+    protected void verifyEntrySet() {\n+        int size = confirmed.size();\n+        boolean empty = confirmed.isEmpty();\n+        assertEquals(\"entrySet should be same size as HashMap's\" +\n+                     \"\\nTest: \" + entrySet + \"\\nReal: \" + confirmed.entrySet(),\n+                     size, entrySet.size());\n+        assertEquals(\"entrySet should be empty if HashMap is\" +\n+                     \"\\nTest: \" + entrySet + \"\\nReal: \" + confirmed.entrySet(),\n+                     empty, entrySet.isEmpty());\n+        assertTrue(\"entrySet should contain all HashMap's elements\" +\n+                   \"\\nTest: \" + entrySet + \"\\nReal: \" + confirmed.entrySet(),\n+                   entrySet.containsAll(confirmed.entrySet()));\n+        assertEquals(\"entrySet hashCodes should be the same\" +\n+                     \"\\nTest: \" + entrySet + \"\\nReal: \" + confirmed.entrySet(),\n+                     confirmed.entrySet().hashCode(), entrySet.hashCode());\n+        assertEquals(\"Map's entry set should still equal HashMap's\",\n+                     confirmed.entrySet(), entrySet);\n+    }\n+\n+    protected void verifyKeySet() { \n+        int size = confirmed.size();\n+        boolean empty = confirmed.isEmpty();\n+        assertEquals(\"keySet should be same size as HashMap's\" +\n+                     \"\\nTest: \" + keySet + \"\\nReal: \" + confirmed.keySet(),\n+                     size, keySet.size());\n+        assertEquals(\"keySet should be empty if HashMap is\" +\n+                     \"\\nTest: \" + keySet + \"\\nReal: \" + confirmed.keySet(),\n+                     empty, keySet.isEmpty());\n+        assertTrue(\"keySet should contain all HashMap's elements\" +\n+                   \"\\nTest: \" + keySet + \"\\nReal: \" + confirmed.keySet(),\n+                   keySet.containsAll(confirmed.keySet()));\n+        assertEquals(\"keySet hashCodes should be the same\" +\n+                     \"\\nTest: \" + keySet + \"\\nReal: \" + confirmed.keySet(),\n+                     confirmed.keySet().hashCode(), keySet.hashCode());\n+        assertEquals(\"Map's key set should still equal HashMap's\",\n+                     confirmed.keySet(), keySet);\n+    }\n+\n+    protected void verifyValues() {\n+        List known = new ArrayList(confirmed.values());\n+        List test = new ArrayList(values);\n+\n+        int size = confirmed.size();\n+        boolean empty = confirmed.isEmpty();\n+        assertEquals(\"values should be same size as HashMap's\" +\n+                     \"\\nTest: \" + test + \"\\nReal: \" + known,\n+                     size, values.size());\n+        assertEquals(\"values should be empty if HashMap is\" +\n+                     \"\\nTest: \" + test + \"\\nReal: \" + known,\n+                     empty, values.isEmpty());\n+        assertTrue(\"values should contain all HashMap's elements\" +\n+                   \"\\nTest: \" + test + \"\\nReal: \" + known,\n+                    test.containsAll(known));\n+        assertTrue(\"values should contain all HashMap's elements\" +\n+                   \"\\nTest: \" + test + \"\\nReal: \" + known,\n+                   known.containsAll(test));\n+        // originally coded to use a HashBag, but now separate jar so...\n+        for (Iterator it = known.iterator(); it.hasNext();) {\n+            boolean removed = test.remove(it.next());\n+            assertTrue(\"Map's values should still equal HashMap's\", removed);\n+        }\n+        assertTrue(\"Map's values should still equal HashMap's\", test.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Erases any leftover instance variables by setting them to null.\n+     */\n+    protected void tearDown() throws Exception {\n+        map = null;\n+        keySet = null;\n+        entrySet = null;\n+        values = null;\n+        confirmed = null;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/AbstractTestSortedMap.java,v 1.1 2003/11/16 22:15:11 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Abstract test class for {@link java.util.SortedMap} methods and contracts.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:11 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractTestSortedMap extends AbstractTestMap {\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test name\n+     */\n+    public AbstractTestSortedMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Can't sort null keys.\n+     * \n+     * @return false\n+     */\n+    protected boolean isAllowNullKey() {\n+        return false;\n+    }\n+\n+    /**\n+     * SortedMap uses TreeMap as its known comparison.\n+     * \n+     * @return a map that is known to be valid\n+     */\n+    protected Map makeConfirmedMap() {\n+        return new TreeMap();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testComparator() {\n+        SortedMap sm = (SortedMap) makeFullMap();\n+        // no tests I can think of\n+    }\n+    \n+    public void testFirstKey() {\n+        SortedMap sm = (SortedMap) makeFullMap();\n+        assertSame(sm.keySet().iterator().next(), sm.firstKey());\n+    }\n+    \n+    public void testLastKey() {\n+        SortedMap sm = (SortedMap) makeFullMap();\n+        Object obj = null;\n+        for (Iterator it = sm.keySet().iterator(); it.hasNext();) {\n+            obj = (Object) it.next();\n+        }\n+        assertSame(obj, sm.lastKey());\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public BulkTest bulkTestHeadMap() {\n+        return new TestHeadMap(this);\n+    }\n+\n+    public BulkTest bulkTestTailMap() {\n+        return new TestTailMap(this);\n+    }\n+\n+    public BulkTest bulkTestSubMap() {\n+        return new TestSubMap(this);\n+    }\n+\n+    public static abstract class TestViewMap extends AbstractTestSortedMap {\n+        protected final AbstractTestMap main;\n+        protected final List subSortedKeys = new ArrayList();\n+        protected final List subSortedValues = new ArrayList();\n+        protected final List subSortedNewValues = new ArrayList();\n+        \n+        public TestViewMap(String name, AbstractTestMap main) {\n+            super(name);\n+            this.main = main;\n+        }\n+        protected void resetEmpty() {\n+            // needed to init verify correctly\n+            main.resetEmpty();\n+            super.resetEmpty();\n+        }\n+        protected void resetFull() {\n+            // needed to init verify correctly\n+            main.resetFull();\n+            super.resetFull();\n+        }\n+        protected void verify() {\n+            // cross verify changes on view with changes on main map\n+            super.verify();\n+            main.verify();\n+        }\n+        public BulkTest bulkTestHeadMap() {\n+            return null;  // block infinite recursion\n+        }\n+        public BulkTest bulkTestTailMap() {\n+            return null;  // block infinite recursion\n+        }\n+        public BulkTest bulkTestSubMap() {\n+            return null;  // block infinite recursion\n+        }\n+        \n+        protected Object[] getSampleKeys() {\n+            return subSortedKeys.toArray();\n+        }\n+        protected Object[] getSampleValues() {\n+            return subSortedValues.toArray();\n+        }\n+        protected Object[] getNewSampleValues() {\n+            return subSortedNewValues.toArray();\n+        }\n+        \n+        protected String getCompatibilityVersion() {\n+            return main.getCompatibilityVersion();\n+        }\n+        protected boolean isAllowNullKey() {\n+            return main.isAllowNullKey();\n+        }\n+        protected boolean isAllowNullValue() {\n+            return main.isAllowNullValue();\n+        }\n+        protected boolean isPutAddSupported() {\n+            return main.isPutAddSupported();\n+        }\n+        protected boolean isPutChangeSupported() {\n+            return main.isPutChangeSupported();\n+        }\n+        protected boolean isRemoveSupported() {\n+            return main.isRemoveSupported();\n+        }\n+        protected boolean supportsEmptyCollections() {\n+            return false;\n+        }\n+        protected boolean supportsFullCollections() {\n+            return false;\n+        }\n+    }\n+    \n+    public static class TestHeadMap extends TestViewMap {\n+        static final int SUBSIZE = 6;\n+        final Object toKey;\n+        \n+        public TestHeadMap(AbstractTestMap main) {\n+            super(\"SortedMap.HeadMap\", main);\n+            SortedMap sm = (SortedMap) main.makeFullMap();\n+            for (Iterator it = sm.entrySet().iterator(); it.hasNext();) {\n+                Map.Entry entry = (Map.Entry) it.next();\n+                this.subSortedKeys.add(entry.getKey());\n+                this.subSortedValues.add(entry.getValue());\n+            }\n+            this.toKey = this.subSortedKeys.get(SUBSIZE);\n+            this.subSortedKeys.subList(SUBSIZE, this.subSortedKeys.size()).clear();\n+            this.subSortedValues.subList(SUBSIZE, this.subSortedValues.size()).clear();\n+            this.subSortedNewValues.addAll(Arrays.asList(main.getNewSampleValues()).subList(0, SUBSIZE));\n+        }\n+        protected Map makeEmptyMap() {\n+            // done this way so toKey is correctly set in the returned map\n+            return ((SortedMap) main.makeEmptyMap()).headMap(toKey);\n+        }\n+        protected Map makeFullMap() {\n+            return ((SortedMap) main.makeFullMap()).headMap(toKey);\n+        }\n+        public void testHeadMapOutOfRange() {\n+            if (isPutAddSupported() == false) return;\n+            resetEmpty();\n+            try {\n+                ((SortedMap) map).put(toKey, subSortedValues.get(0));\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+            verify();\n+        }\n+    }\n+    \n+    public static class TestTailMap extends TestViewMap {\n+        static final int SUBSIZE = 6;\n+        final Object fromKey;\n+        final Object invalidKey;\n+        \n+        public TestTailMap(AbstractTestMap main) {\n+            super(\"SortedMap.TailMap\", main);\n+            SortedMap sm = (SortedMap) main.makeFullMap();\n+            for (Iterator it = sm.entrySet().iterator(); it.hasNext();) {\n+                Map.Entry entry = (Map.Entry) it.next();\n+                this.subSortedKeys.add(entry.getKey());\n+                this.subSortedValues.add(entry.getValue());\n+            }\n+            this.fromKey = this.subSortedKeys.get(this.subSortedKeys.size() - SUBSIZE);\n+            this.invalidKey = this.subSortedKeys.get(this.subSortedKeys.size() - SUBSIZE - 1);\n+            this.subSortedKeys.subList(0, this.subSortedKeys.size() - SUBSIZE).clear();\n+            this.subSortedValues.subList(0, this.subSortedValues.size() - SUBSIZE).clear();\n+            this.subSortedNewValues.addAll(Arrays.asList(main.getNewSampleValues()).subList(0, SUBSIZE));\n+        }\n+        protected Map makeEmptyMap() {\n+            // done this way so toKey is correctly set in the returned map\n+            return ((SortedMap) main.makeEmptyMap()).tailMap(fromKey);\n+        }\n+        protected Map makeFullMap() {\n+            return ((SortedMap) main.makeFullMap()).tailMap(fromKey);\n+        }\n+        public void testTailMapOutOfRange() {\n+            if (isPutAddSupported() == false) return;\n+            resetEmpty();\n+            try {\n+                ((SortedMap) map).put(invalidKey, subSortedValues.get(0));\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+            verify();\n+        }\n+    }\n+    \n+    public static class TestSubMap extends TestViewMap {\n+        static final int SUBSIZE = 3;\n+        final Object fromKey;\n+        final Object toKey;\n+        \n+        public TestSubMap(AbstractTestMap main) {\n+            super(\"SortedMap.SubMap\", main);\n+            SortedMap sm = (SortedMap) main.makeFullMap();\n+            for (Iterator it = sm.entrySet().iterator(); it.hasNext();) {\n+                Map.Entry entry = (Map.Entry) it.next();\n+                this.subSortedKeys.add(entry.getKey());\n+                this.subSortedValues.add(entry.getValue());\n+            }\n+            this.fromKey = this.subSortedKeys.get(SUBSIZE);\n+            this.toKey = this.subSortedKeys.get(this.subSortedKeys.size() - SUBSIZE);\n+            \n+            this.subSortedKeys.subList(0, SUBSIZE).clear();\n+            this.subSortedKeys.subList(this.subSortedKeys.size() - SUBSIZE, this.subSortedKeys.size()).clear();\n+            \n+            this.subSortedValues.subList(0, SUBSIZE).clear();\n+            this.subSortedValues.subList(this.subSortedValues.size() - SUBSIZE, this.subSortedValues.size()).clear();\n+            \n+            this.subSortedNewValues.addAll(Arrays.asList(main.getNewSampleValues()).subList(\n+                SUBSIZE, this.main.getNewSampleValues().length - SUBSIZE));\n+        }\n+        \n+        protected Map makeEmptyMap() {\n+            // done this way so toKey is correctly set in the returned map\n+            return ((SortedMap) main.makeEmptyMap()).subMap(fromKey, toKey);\n+        }\n+        protected Map makeFullMap() {\n+            return ((SortedMap) main.makeFullMap()).subMap(fromKey, toKey);\n+        }\n+        public void testSubMapOutOfRange() {\n+            if (isPutAddSupported() == false) return;\n+            resetEmpty();\n+            try {\n+                ((SortedMap) map).put(toKey, subSortedValues.get(0));\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+            verify();\n+        }\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/collections/map/TestFixedSizeMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestFixedSizeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFixedSizeMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFixedSizeMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestMap;\n-\n /**\n  * Extension of {@link AbstractTestMap} for exercising the {@link FixedSizeMap}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/map/TestFixedSizeSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestFixedSizeSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFixedSizeSortedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFixedSizeSortedMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections.AbstractTestSortedMap;\n import org.apache.commons.collections.BulkTest;\n \n /**\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/map/TestLazyMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLazyMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestLazyMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestLazyMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestMap;\n import org.apache.commons.collections.Factory;\n import org.apache.commons.collections.FactoryUtils;\n \n  * {@link LazyMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestListOrderedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestListOrderedMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections.AbstractTestMap;\n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n import org.apache.commons.collections.iterators.MapIterator;\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Henri Yandell\n  * @author Stephen Colebourne\n--- a/src/test/org/apache/commons/collections/map/TestPredicatedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestPredicatedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestPredicatedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestPredicatedMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestMap;\n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.PredicateUtils;\n \n  * {@link PredicatedMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestTransformedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestTransformedMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestMap;\n import org.apache.commons.collections.collection.TestTransformedCollection;\n \n /**\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java,v 1.2 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections.AbstractTestSortedMap;\n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.collection.TestTransformedCollection;\n \n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestMap;\n-\n /**\n  * Extension of {@link AbstractTestMap} for exercising the \n  * {@link UnmodifiableMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/observed/TestObservableBag.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableBag.java,v 1.3 2003/11/02 16:21:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableBag.java,v 1.4 2003/11/16 22:15:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestBag;\n import org.apache.commons.collections.Bag;\n import org.apache.commons.collections.HashBag;\n+import org.apache.commons.collections.bag.AbstractTestBag;\n \n /**\n  * Extension of {@link TestBag} for exercising the\n  * {@link ObservableBag} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/02 16:21:16 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:12 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/observed/TestObservableBuffer.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableBuffer.java,v 1.3 2003/11/02 16:21:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableBuffer.java,v 1.4 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestCollection;\n import org.apache.commons.collections.ArrayStack;\n+import org.apache.commons.collections.collection.AbstractTestCollection;\n \n /**\n  * Extension of {@link TestCollection} for exercising the\n  * {@link ObservableBuffer} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/02 16:21:16 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:11 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/observed/TestObservableCollection.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableCollection.java,v 1.2 2003/10/02 22:14:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableCollection.java,v 1.3 2003/11/16 22:15:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestCollection;\n+import org.apache.commons.collections.collection.AbstractTestCollection;\n \n /**\n  * Extension of {@link TestCollection} for exercising the\n  * {@link ObservedCollection} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/10/02 22:14:35 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/16 22:15:12 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/observed/TestObservableList.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableList.java,v 1.2 2003/10/02 22:14:34 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableList.java,v 1.3 2003/11/16 22:15:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n \n /**\n  * Extension of {@link TestList} for exercising the\n  * {@link ObservedList} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/10/02 22:14:34 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/16 22:15:12 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/observed/TestObservableSet.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSet.java,v 1.2 2003/10/02 22:48:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSet.java,v 1.3 2003/11/16 22:15:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestSet;\n+import org.apache.commons.collections.set.AbstractTestSet;\n \n /**\n  * Extension of {@link TestSet} for exercising the\n  * {@link ObservedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/10/02 22:48:40 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/16 22:15:12 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/observed/TestObservableSortedBag.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedBag.java,v 1.3 2003/11/02 16:21:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedBag.java,v 1.4 2003/11/16 22:15:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestSortedBag;\n import org.apache.commons.collections.Bag;\n import org.apache.commons.collections.TreeBag;\n+import org.apache.commons.collections.bag.AbstractTestSortedBag;\n \n /**\n  * Extension of {@link TestSortedBag} for exercising the\n  * {@link ObservedSortedBag} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/02 16:21:16 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:12 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/observed/TestObservableSortedSet.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedSet.java,v 1.5 2003/11/02 16:21:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedSet.java,v 1.6 2003/11/16 22:15:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections.AbstractTestSortedSet;\n import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.set.AbstractTestSortedSet;\n \n /**\n  * Extension of {@link TestSortedSet} for exercising the\n  * {@link ObservedSortedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/11/02 16:21:16 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/16 22:15:12 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/primitives/TestAbstractLongArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAbstractLongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractLongArrayList.java,v 1.9 2003/10/09 11:09:10 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractLongArrayList.java,v 1.10 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n import java.util.List;\n \n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n \n /**\n- * @version $Revision: 1.9 $ $Date: 2003/10/09 11:09:10 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/16 22:15:11 $\n  * @author Rodney Waldhoff\n  * @deprecated this should have been removed along with the others\n  */\n--- a/src/test/org/apache/commons/collections/primitives/TestByteList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestByteList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestByteList.java,v 1.4 2003/10/02 22:14:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestByteList.java,v 1.5 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n import org.apache.commons.collections.primitives.adapters.ByteListList;\n import org.apache.commons.collections.primitives.adapters.ListByteList;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:33 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/16 22:15:11 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestByteList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/TestCharList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestCharList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestCharList.java,v 1.4 2003/10/02 22:14:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestCharList.java,v 1.5 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n import org.apache.commons.collections.primitives.adapters.CharListList;\n import org.apache.commons.collections.primitives.adapters.ListCharList;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:33 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/16 22:15:11 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestCharList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/TestDoubleList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestDoubleList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestDoubleList.java,v 1.3 2003/10/02 22:14:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestDoubleList.java,v 1.4 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n import org.apache.commons.collections.primitives.adapters.DoubleListList;\n import org.apache.commons.collections.primitives.adapters.ListDoubleList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:33 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:11 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestDoubleList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/TestFloatList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestFloatList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestFloatList.java,v 1.3 2003/10/02 22:14:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestFloatList.java,v 1.4 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n import org.apache.commons.collections.primitives.adapters.FloatListList;\n import org.apache.commons.collections.primitives.adapters.ListFloatList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:33 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:11 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestFloatList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/TestIntList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.11 2003/10/02 22:14:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.12 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n import org.apache.commons.collections.primitives.adapters.IntListList;\n import org.apache.commons.collections.primitives.adapters.ListIntList;\n \n /**\n- * @version $Revision: 1.11 $ $Date: 2003/10/02 22:14:33 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/16 22:15:11 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestIntList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/TestLongList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestLongList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongList.java,v 1.3 2003/10/02 22:14:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongList.java,v 1.4 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.primitives.adapters.ListLongList;\n import org.apache.commons.collections.primitives.adapters.LongListList;\n-import org.apache.commons.collections.primitives.adapters.ListLongList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:33 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:11 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestLongList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/TestShortList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestShortList.java,v 1.4 2003/10/02 22:14:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestShortList.java,v 1.5 2003/11/16 22:15:11 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.primitives.adapters.ListShortList;\n import org.apache.commons.collections.primitives.adapters.ShortListList;\n-import org.apache.commons.collections.primitives.adapters.ListShortList;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:33 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/16 22:15:11 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestShortList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestByteCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestByteCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteCollectionCollection.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteCollectionCollection.java,v 1.4 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.AbstractTestObject;\n-import org.apache.commons.collections.primitives.RandomAccessByteList;\n import org.apache.commons.collections.primitives.ArrayByteList;\n import org.apache.commons.collections.primitives.ByteList;\n+import org.apache.commons.collections.primitives.RandomAccessByteList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestByteCollectionCollection extends AbstractTestObject {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestByteListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestByteListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteListList.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteListList.java,v 1.4 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.primitives.ArrayByteList;\n import org.apache.commons.collections.primitives.RandomAccessByteList;\n-import org.apache.commons.collections.primitives.ArrayByteList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestByteListList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCharCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCharCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCharCollectionCollection.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCharCollectionCollection.java,v 1.4 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.AbstractTestObject;\n-import org.apache.commons.collections.primitives.RandomAccessCharList;\n import org.apache.commons.collections.primitives.ArrayCharList;\n import org.apache.commons.collections.primitives.CharList;\n+import org.apache.commons.collections.primitives.RandomAccessCharList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestCharCollectionCollection extends AbstractTestObject {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCharListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCharListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCharListList.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCharListList.java,v 1.4 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.primitives.ArrayCharList;\n import org.apache.commons.collections.primitives.RandomAccessCharList;\n-import org.apache.commons.collections.primitives.ArrayCharList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestCharListList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestDoubleCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestDoubleCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestDoubleCollectionCollection.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestDoubleCollectionCollection.java,v 1.4 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.AbstractTestObject;\n-import org.apache.commons.collections.primitives.RandomAccessDoubleList;\n import org.apache.commons.collections.primitives.ArrayDoubleList;\n import org.apache.commons.collections.primitives.DoubleList;\n+import org.apache.commons.collections.primitives.RandomAccessDoubleList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestDoubleCollectionCollection extends AbstractTestObject {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestDoubleListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestDoubleListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestDoubleListList.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestDoubleListList.java,v 1.4 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.primitives.ArrayDoubleList;\n import org.apache.commons.collections.primitives.RandomAccessDoubleList;\n-import org.apache.commons.collections.primitives.ArrayDoubleList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestDoubleListList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestFloatCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestFloatCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatCollectionCollection.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatCollectionCollection.java,v 1.5 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.AbstractTestObject;\n-import org.apache.commons.collections.primitives.RandomAccessFloatList;\n import org.apache.commons.collections.primitives.ArrayFloatList;\n import org.apache.commons.collections.primitives.FloatList;\n+import org.apache.commons.collections.primitives.RandomAccessFloatList;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestFloatCollectionCollection extends AbstractTestObject {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestFloatListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestFloatListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatListList.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatListList.java,v 1.5 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.primitives.ArrayFloatList;\n import org.apache.commons.collections.primitives.RandomAccessFloatList;\n-import org.apache.commons.collections.primitives.ArrayFloatList;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestFloatListList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestIntCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntCollectionCollection.java,v 1.5 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntCollectionCollection.java,v 1.6 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.AbstractTestObject;\n-import org.apache.commons.collections.primitives.RandomAccessIntList;\n import org.apache.commons.collections.primitives.ArrayIntList;\n import org.apache.commons.collections.primitives.IntList;\n+import org.apache.commons.collections.primitives.RandomAccessIntList;\n \n /**\n- * @version $Revision: 1.5 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestIntCollectionCollection extends AbstractTestObject {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestIntListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListList.java,v 1.6 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListList.java,v 1.7 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.primitives.ArrayIntList;\n import org.apache.commons.collections.primitives.RandomAccessIntList;\n-import org.apache.commons.collections.primitives.ArrayIntList;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestIntListList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestLongCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestLongCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongCollectionCollection.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongCollectionCollection.java,v 1.5 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.AbstractTestObject;\n-import org.apache.commons.collections.primitives.RandomAccessLongList;\n import org.apache.commons.collections.primitives.ArrayLongList;\n import org.apache.commons.collections.primitives.LongList;\n+import org.apache.commons.collections.primitives.RandomAccessLongList;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestLongCollectionCollection extends AbstractTestObject {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestLongListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestLongListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongListList.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongListList.java,v 1.5 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.primitives.ArrayLongList;\n import org.apache.commons.collections.primitives.RandomAccessLongList;\n-import org.apache.commons.collections.primitives.ArrayLongList;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestLongListList extends AbstractTestList {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestShortCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestShortCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortCollectionCollection.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortCollectionCollection.java,v 1.5 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.AbstractTestObject;\n+import org.apache.commons.collections.primitives.ArrayShortList;\n import org.apache.commons.collections.primitives.RandomAccessShortList;\n-import org.apache.commons.collections.primitives.ArrayShortList;\n import org.apache.commons.collections.primitives.ShortList;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestShortCollectionCollection extends AbstractTestObject {\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestShortListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestShortListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortListList.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortListList.java,v 1.5 2003/11/16 22:15:08 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.primitives.ArrayShortList;\n import org.apache.commons.collections.primitives.RandomAccessShortList;\n-import org.apache.commons.collections.primitives.ArrayShortList;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/16 22:15:08 $\n  * @author Rodney Waldhoff\n  */\n public class TestShortListList extends AbstractTestList {\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/AbstractTestSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/AbstractTestSet.java,v 1.1 2003/11/16 22:15:10 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.collection.AbstractTestCollection;\n+\n+/**\n+ * Abstract test class for {@link Set} methods and contracts.\n+ * <p>\n+ * Since {@link Set} doesn't stipulate much new behavior that isn't already\n+ * found in {@link Collection}, this class basically just adds tests for\n+ * {@link Set#equals} and {@link Set#hashCode()} along with an updated\n+ * {@link #verify()} that ensures elements do not appear more than once in the\n+ * set.\n+ * <p>\n+ * To use, subclass and override the {@link #makeEmptySet()}\n+ * method.  You may have to override other protected methods if your\n+ * set is not modifiable, or if your set restricts what kinds of\n+ * elements may be added; see {@link AbstractTestCollection} for more details.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:10 $\n+ * \n+ * @author Paul Jack\n+ */\n+public abstract class AbstractTestSet extends AbstractTestCollection {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param name  name for test\n+     */\n+    public AbstractTestSet(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Provides additional verifications for sets.\n+     */\n+    protected void verify() {\n+        super.verify();\n+        \n+        assertEquals(\"Sets should be equal\", confirmed, collection);\n+        assertEquals(\"Sets should have equal hashCodes\", \n+                     confirmed.hashCode(), collection.hashCode());\n+        Collection set = makeConfirmedCollection();\n+        Iterator iterator = collection.iterator();\n+        while (iterator.hasNext()) {\n+            assertTrue(\"Set.iterator should only return unique elements\", \n+                       set.add(iterator.next()));\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns an empty Set for use in modification testing.\n+     *\n+     * @return a confirmed empty collection\n+     */\n+    protected Collection makeConfirmedCollection() {\n+        return new HashSet();\n+    }\n+\n+    /**\n+     * Returns a full Set for use in modification testing.\n+     *\n+     * @return a confirmed full collection\n+     */\n+    protected Collection makeConfirmedFullCollection() {\n+        Collection set = makeConfirmedCollection();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return set;\n+    }\n+\n+    /**\n+     * Makes an empty set.  The returned set should have no elements.\n+     *\n+     * @return an empty set\n+     */\n+    protected abstract Set makeEmptySet();\n+\n+    /**\n+     * Makes a full set by first creating an empty set and then adding\n+     * all the elements returned by {@link #getFullElements()}.\n+     *\n+     * Override if your set does not support the add operation.\n+     *\n+     * @return a full set\n+     */\n+    protected Set makeFullSet() {\n+        Set set = makeEmptySet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return set;\n+    }\n+\n+    /**\n+     * Makes an empty collection by invoking {@link #makeEmptySet()}.  \n+     *\n+     * @return an empty collection\n+     */\n+    protected final Collection makeCollection() {\n+        return makeEmptySet();\n+    }\n+\n+    /**\n+     * Makes a full collection by invoking {@link #makeFullSet()}.\n+     *\n+     * @return a full collection\n+     */\n+    protected final Collection makeFullCollection() {\n+        return makeFullSet();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Return the {@link AbstractTestCollection#collection} fixture, but cast as a Set.  \n+     */\n+    protected Set getSet() {\n+        return (Set)collection;\n+    }\n+\n+    /**\n+     * Return the {@link AbstractTestCollection#confirmed} fixture, but cast as a Set.\n+     */\n+    protected Set getConfirmedSet() {\n+        return (Set)confirmed;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests {@link Set#equals(Object)}.\n+     */\n+    public void testSetEquals() {\n+        resetEmpty();\n+        assertEquals(\"Empty sets should be equal\", \n+                     getSet(), getConfirmedSet());\n+        verify();\n+\n+        Collection set2 = makeConfirmedCollection();\n+        set2.add(\"foo\");\n+        assertTrue(\"Empty set shouldn't equal nonempty set\", \n+                   !getSet().equals(set2));\n+\n+        resetFull();\n+        assertEquals(\"Full sets should be equal\", getSet(), getConfirmedSet());\n+        verify();\n+\n+        set2.clear();\n+        set2.addAll(Arrays.asList(getOtherElements()));\n+        assertTrue(\"Sets with different contents shouldn't be equal\", \n+                   !getSet().equals(set2));\n+    }\n+\n+    /**\n+     * Tests {@link Set#hashCode()}.\n+     */\n+    public void testSetHashCode() {\n+        resetEmpty();\n+        assertEquals(\"Empty sets have equal hashCodes\", \n+                     getSet().hashCode(), getConfirmedSet().hashCode());\n+\n+        resetFull();\n+        assertEquals(\"Equal sets have equal hashCodes\", \n+                     getSet().hashCode(), getConfirmedSet().hashCode());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java,v 1.1 2003/11/16 22:15:10 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Abstract test class for {@link SortedSet} methods and contracts.\n+ * <p>\n+ * To use, subclass and override the {@link #makeEmptySet()}\n+ * method.  You may have to override other protected methods if your\n+ * set is not modifiable, or if your set restricts what kinds of\n+ * elements may be added; see {@link AbstractTestCollection} for more details.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 22:15:10 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Dieter Wimberger\n+ */\n+public abstract class AbstractTestSortedSet extends AbstractTestSet {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param name  name for test\n+     */\n+    public AbstractTestSortedSet(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Verification extension, will check the order of elements,\n+     * the sets should already be verified equal.\n+     */\n+    protected void verify() {\n+        super.verify();\n+        \n+        // Check that iterator returns elements in order and first() and last()\n+        // are consistent\n+        Iterator colliter = collection.iterator();\n+        Iterator confiter = confirmed.iterator();\n+        Object first = null;\n+        Object last = null;\n+        while (colliter.hasNext()) {\n+            if (first == null) {\n+                first = colliter.next();\n+                last = first;\n+            } else {\n+              last = colliter.next();\n+            }  \n+            assertEquals(\"Element appears to be out of order.\", last, confiter.next());\n+        }\n+        if (collection.size() > 0) {\n+            assertEquals(\"Incorrect element returned by first().\", first,\n+                ((SortedSet) collection).first());\n+            assertEquals(\"Incorrect element returned by last().\", last,\n+                ((SortedSet) collection).last());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Overridden because SortedSets don't allow null elements (normally).\n+     * @return false\n+     */\n+    protected boolean isNullSupported() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns an empty {@link TreeSet} for use in modification testing.\n+     *\n+     * @return a confirmed empty collection\n+     */\n+    protected Collection makeConfirmedCollection() {\n+        return new TreeSet();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Return the {@link AbstractTestCollection#confirmed} fixture, but cast as a\n+     * SortedSet.\n+     */\n+    protected SortedSet getConfirmedSortedSet() {\n+        return (SortedSet) confirmed;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Override to return comparable objects.\n+     */\n+    protected Object[] getFullNonNullElements() {\n+        Object[] elements = new Object[30];\n+\n+        for (int i = 0; i < 30; i++) {\n+            elements[i] = new Integer(i + i + 1);\n+        }\n+        return elements;\n+    }\n+\n+    /**\n+     * Override to return comparable objects.\n+     */\n+    protected Object[] getOtherNonNullElements() {\n+        Object[] elements = new Object[30];\n+        for (int i = 0; i < 30; i++) {\n+            elements[i] = new Integer(i + i + 2);\n+        }\n+        return elements;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Bulk test {@link SortedSet#subSet(Object, Object)}.  This method runs through all of\n+     * the tests in {@link AbstractTestSortedSet}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the set and the other collection views are still valid.\n+     *\n+     * @return a {@link AbstractTestSet} instance for testing a subset.\n+     */\n+    public BulkTest bulkTestSortedSetSubSet() {\n+        int length = getFullElements().length;\n+\n+        int lobound = length / 3;\n+        int hibound = lobound * 2;\n+        return new TestSortedSetSubSet(lobound, hibound);\n+\n+    }\n+\n+    /**\n+     * Bulk test {@link SortedSet#headSet(Object)}.  This method runs through all of\n+     * the tests in {@link AbstractTestSortedSet}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the set and the other collection views are still valid.\n+     *\n+     * @return a {@link AbstractTestSet} instance for testing a headset.\n+     */\n+    public BulkTest bulkTestSortedSetHeadSet() {\n+        int length = getFullElements().length;\n+\n+        int lobound = length / 3;\n+        int hibound = lobound * 2;\n+        return new TestSortedSetSubSet(hibound, true);\n+\n+    }\n+\n+    /**\n+     * Bulk test {@link SortedSet#tailSet(Object)}.  This method runs through all of\n+     * the tests in {@link AbstractTestSortedSet}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the set and the other collection views are still valid.\n+     *\n+     * @return a {@link AbstractTestSet} instance for testing a tailset.\n+     */\n+    public BulkTest bulkTestSortedSetTailSet() {\n+        int length = getFullElements().length;\n+        int lobound = length / 3;\n+        return new TestSortedSetSubSet(lobound, false);\n+    }\n+\n+    public class TestSortedSetSubSet extends AbstractTestSortedSet {\n+\n+        private int m_Type;\n+        private int m_LowBound;\n+        private int m_HighBound;\n+        private Object[] m_FullElements;\n+        private Object[] m_OtherElements;\n+\n+        public TestSortedSetSubSet(int bound, boolean head) {\n+            super(\"TestSortedSetSubSet\");\n+            if (head) {\n+                //System.out.println(\"HEADSET\");\n+                m_Type = TYPE_HEADSET;\n+                m_HighBound = bound;\n+                m_FullElements = new Object[bound];\n+                System.arraycopy(AbstractTestSortedSet.this.getFullElements(), 0, m_FullElements, 0, bound);\n+                m_OtherElements = new Object[bound - 1];\n+                System.arraycopy(//src src_pos dst dst_pos length\n+                AbstractTestSortedSet.this.getOtherElements(), 0, m_OtherElements, 0, bound - 1);\n+                //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n+                //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n+            } else {\n+                //System.out.println(\"TAILSET\");\n+                m_Type = TYPE_TAILSET;\n+                m_LowBound = bound;\n+                Object[] allelements = AbstractTestSortedSet.this.getFullElements();\n+                //System.out.println(\"bound = \"+bound +\"::length=\"+allelements.length);\n+                m_FullElements = new Object[allelements.length - bound];\n+                System.arraycopy(allelements, bound, m_FullElements, 0, allelements.length - bound);\n+                m_OtherElements = new Object[allelements.length - bound - 1];\n+                System.arraycopy(//src src_pos dst dst_pos length\n+                AbstractTestSortedSet.this.getOtherElements(), bound, m_OtherElements, 0, allelements.length - bound - 1);\n+                //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n+                //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n+                //resetFull();\n+                //System.out.println(collection);\n+                //System.out.println(confirmed);\n+\n+            }\n+\n+        } //type\n+\n+        public TestSortedSetSubSet(int lobound, int hibound) {\n+            super(\"TestSortedSetSubSet\");\n+            //System.out.println(\"SUBSET\");\n+            m_Type = TYPE_SUBSET;\n+            m_LowBound = lobound;\n+            m_HighBound = hibound;\n+            int length = hibound - lobound;\n+            //System.out.println(\"Low=\" + lobound + \"::High=\" + hibound + \"::Length=\" + length);\n+            m_FullElements = new Object[length];\n+            System.arraycopy(AbstractTestSortedSet.this.getFullElements(), lobound, m_FullElements, 0, length);\n+            m_OtherElements = new Object[length - 1];\n+            System.arraycopy(//src src_pos dst dst_pos length\n+            AbstractTestSortedSet.this.getOtherElements(), lobound, m_OtherElements, 0, length - 1);\n+\n+            //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n+            //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n+\n+        } //TestSortedSetSubSet\n+\n+        protected boolean isNullSupported() {\n+            return AbstractTestSortedSet.this.isNullSupported();\n+        } //useNullValue\n+\n+        protected Object[] getFullElements() {\n+            //System.out.println(\"getFullElements()\");\n+            return m_FullElements;\n+        }\n+\n+        protected Object[] getOtherElements() {\n+            return m_OtherElements;\n+        }\n+\n+        private SortedSet getSubSet(SortedSet set) {\n+            Object[] elements = AbstractTestSortedSet.this.getFullElements();\n+            switch (m_Type) {\n+                case TYPE_SUBSET :\n+                    return set.subSet(elements[m_LowBound], elements[m_HighBound]);\n+                case TYPE_HEADSET :\n+                    return set.headSet(elements[m_HighBound]);\n+                case TYPE_TAILSET :\n+                    return set.tailSet(elements[m_LowBound]);\n+                default :\n+                    return null;\n+            }\n+        } //getSubSet\n+\n+        protected Set makeEmptySet() {\n+            SortedSet s = (SortedSet) AbstractTestSortedSet.this.makeFullSet();\n+            s = getSubSet(s);\n+            s.clear();\n+            return s;\n+        } //makeEmptySet\n+\n+        protected Set makeFullSet() {\n+            SortedSet s = (SortedSet) AbstractTestSortedSet.this.makeFullCollection();\n+            return getSubSet(s);\n+        } //makeFullSet\n+\n+        protected void resetFull() {\n+            AbstractTestSortedSet.this.resetFull();\n+            TestSortedSetSubSet.this.confirmed = getSubSet((SortedSet) AbstractTestSortedSet.this.confirmed);\n+            TestSortedSetSubSet.this.collection = getSubSet((SortedSet) AbstractTestSortedSet.this.collection);\n+        }\n+\n+        protected void resetEmpty() {\n+            TestSortedSetSubSet.this.resetFull();\n+            TestSortedSetSubSet.this.confirmed.clear();\n+            TestSortedSetSubSet.this.collection.clear();\n+        }\n+\n+        public BulkTest bulkTestSortedSetSubSet() {\n+            //Override returning null to prevent endless\n+            //loop of bulk tests\n+            return null;\n+        } //bulkTestSortedSetSubSet\n+\n+        public BulkTest bulkTestSortedSetHeadSet() {\n+            return null;\n+        }\n+\n+        public BulkTest bulkTestSortedSetTailSet() {\n+            return null;\n+        }\n+\n+        static final int TYPE_SUBSET = 0;\n+        static final int TYPE_TAILSET = 1;\n+        static final int TYPE_HEADSET = 2;\n+\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/set/TestListOrderedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestListOrderedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestListOrderedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestListOrderedSet.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestSet;\n-\n /**\n  * Extension of {@link TestSet} for exercising the {@link ListOrderedSet}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Henning P. Schmiedehausen\n  * @author Stephen Colebourne\n--- a/src/test/org/apache/commons/collections/set/TestPredicatedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestPredicatedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestPredicatedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestPredicatedSet.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestSet;\n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.PredicateUtils;\n \n  * {@link PredicatedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/set/TestPredicatedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestPredicatedSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestPredicatedSortedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestPredicatedSortedSet.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections.AbstractTestSortedSet;\n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.PredicateUtils;\n  * {@link PredicatedSortedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/set/TestTransformedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestTransformedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTransformedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTransformedSet.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestSet;\n import org.apache.commons.collections.collection.TestTransformedCollection;\n \n /**\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections.AbstractTestSortedSet;\n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.collection.TestTransformedCollection;\n \n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/set/TestTypedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestTypedSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTypedSortedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTypedSortedSet.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections.AbstractTestSortedSet;\n import org.apache.commons.collections.BulkTest;\n \n \n  * {@link TypedSortedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java,v 1.2 2003/11/16 22:15:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.AbstractTestSortedSet;\n-\n /**\n  * Extension of {@link AbstractTestSortedSet} for exercising the \n  * {@link UnmodifiableSortedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 22:15:10 $\n  * \n  * @author Phil Steitz\n  */", "timestamp": 1069020912, "metainfo": ""}