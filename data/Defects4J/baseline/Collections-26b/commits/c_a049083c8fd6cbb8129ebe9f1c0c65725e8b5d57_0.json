{"sha": "a049083c8fd6cbb8129ebe9f1c0c65725e8b5d57", "log": "Rename cardinatlity to frequency, apply to forEach, add empty and singleton methods to FluentIterable.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n      * @param <O> the type of object that the {@link Iterable} may contain.\n      * @return the the number of occurrences of obj in coll\n      * @throws NullPointerException if coll is null\n-     * @deprecated since 4.1, use {@link IterableUtils#cardinality(Iterable, Object)} instead.\n+     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n      *   Be aware that the order of parameters has changed.\n      */\n     @Deprecated\n         if (coll == null) {\n             throw new NullPointerException(\"coll must not be null.\");\n         }\n-        return IterableUtils.cardinality(coll, obj);\n+        return IterableUtils.frequency(coll, obj);\n     }\n \n     /**\n      * @param collection  the collection to get the input from, may be null\n      * @param closure  the closure to perform, may be null\n      * @return closure\n-     * @deprecated since 4.1, use {@link IterableUtils#apply(Iterable, Closure)} instead\n+     * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead\n      */\n     @Deprecated\n     public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n         if (closure != null) {\n-            IterableUtils.apply(collection, closure);\n+            IterableUtils.forEach(collection, closure);\n         }\n         return closure;\n     }\n      * @param closure  the closure to perform, may be null\n      * @return closure\n      * @since 4.0\n-     * @deprecated since 4.1, use {@link IteratorUtils#apply(Iterator, Closure)} instead\n+     * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead\n      */\n     @Deprecated\n     public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n         if (closure != null) {\n-            IteratorUtils.apply(iterator, closure);\n+            IteratorUtils.forEach(iterator, closure);\n         }\n         return closure;\n     }\n      * @param closure  the closure to perform, may be null\n      * @return the last element in the collection, or null if either collection or closure is null\n      * @since 4.0\n-     * @deprecated since 4.1, use {@link IterableUtils#applyForAllButLast(Iterable, Closure)} instead\n+     * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead\n      */\n     @Deprecated\n     public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection,\n                                                                       final C closure) {\n-        return closure != null ? IterableUtils.applyForAllButLast(collection, closure) : null;\n+        return closure != null ? IterableUtils.forEachButLast(collection, closure) : null;\n     }\n \n     /**\n      * @param closure  the closure to perform, may be null\n      * @return the last element in the collection, or null if either iterator or closure is null\n      * @since 4.0\n-     * @deprecated since 4.1, use {@link IteratorUtils#applyForAllButLast(Iterator, Closure)} instead\n+     * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead\n      */\n     @Deprecated\n     public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n-        return closure != null ? IteratorUtils.applyForAllButLast(iterator, closure) : null;\n+        return closure != null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/FluentIterable.java\n+++ b/src/main/java/org/apache/commons/collections4/FluentIterable.java\n import java.util.Enumeration;\n import java.util.Iterator;\n import java.util.List;\n+\n+import org.apache.commons.collections4.iterators.SingletonIterator;\n \n /**\n  * A FluentIterable provides a powerful yet simple API for manipulating\n     // ----------------------------------------------------------------------\n \n     /**\n+     * Creates a new empty FluentIterable.\n+     *\n+     * @param <T>  the element type\n+     * @return a new empty FluentIterable\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> FluentIterable<T> empty() {\n+        return IterableUtils.EMPTY_ITERABLE;\n+    }\n+\n+    /**\n+     * Creates a new FluentIterable of the single provided element.\n+     * <p>\n+     * The returned iterable's iterator does not support {@code remove()}.\n+     *\n+     * @param <T>  the element type\n+     * @param singleton  the singleton element\n+     * @return a new FluentIterable containing the singleton\n+     */\n+    public static <T> FluentIterable<T> of(final T singleton) {\n+        return of(IteratorUtils.asIterable(new SingletonIterator<T>(singleton, false)));\n+    }\n+\n+    /**\n      * Creates a new FluentIterable from the provided elements.\n      * <p>\n      * The returned iterable's iterator does not support {@code remove()}.\n     }\n \n     /**\n-     * Applies the closure to all elements contained in this iterable.\n-     *\n-     * @param closure  the closure to apply to each element, may not be null\n-     * @throws NullPointerException if closure is null\n-     */\n-    public void apply(final Closure<? super E> closure) {\n-        IterableUtils.apply(iterable, closure);\n-    }\n-\n-    /**\n      * Checks if all elements contained in this iterable are matching the\n      * provided predicate.\n      * <p>\n      */\n     public boolean contains(final Object object) {\n         return IterableUtils.contains(iterable, object);\n+    }\n+\n+    /**\n+     * Applies the closure to all elements contained in this iterable.\n+     *\n+     * @param closure  the closure to apply to each element, may not be null\n+     * @throws NullPointerException if closure is null\n+     */\n+    public void forEach(final Closure<? super E> closure) {\n+        IterableUtils.forEach(iterable, closure);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/IterableUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IterableUtils.java\n      * @param closure  the closure to apply to each element, may not be null\n      * @throws NullPointerException if closure is null\n      */\n-    public static <E> void apply(final Iterable<E> iterable, final Closure<? super E> closure) {\n-        IteratorUtils.apply(emptyIteratorIfNull(iterable), closure);\n+    public static <E> void forEach(final Iterable<E> iterable, final Closure<? super E> closure) {\n+        IteratorUtils.forEach(emptyIteratorIfNull(iterable), closure);\n     }\n \n     /**\n      * @param closure  the closure to perform, may not be null\n      * @return the last element in the iterable, or null if iterable is null or empty\n      */\n-    public static <E, C extends Closure<? super E>> E applyForAllButLast(final Iterable<E> iterable,\n-                                                                         final C closure) {\n-        return IteratorUtils.applyForAllButLast(emptyIteratorIfNull(iterable), closure);\n+    public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure) {\n+        return IteratorUtils.forEachButLast(emptyIteratorIfNull(iterable), closure);\n     }\n \n     /**\n      * @param obj  the object to find the cardinality of\n      * @return the the number of occurrences of obj in iterable\n      */\n-    public static <E, T extends E> int cardinality(final Iterable<E> iterable, final T obj) {\n+    public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj) {\n         if (iterable instanceof Set<?>) {\n             return ((Set<E>) iterable).contains(obj) ? 1 : 0;\n         }\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n      * @throws NullPointerException if closure is null\n      * @since 4.1\n      */\n-    public static <E> void apply(final Iterator<E> iterator, final Closure<? super E> closure) {\n+    public static <E> void forEach(final Iterator<E> iterator, final Closure<? super E> closure) {\n         if (closure == null) {\n             throw new NullPointerException(\"Closure must not be null\");\n         }\n      * @throws NullPointerException if closure is null\n      * @since 4.1\n      */\n-    public static <E, C extends Closure<? super E>> E applyForAllButLast(final Iterator<E> iterator,\n-                                                                         final C closure) {\n+    public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure) {\n         if (closure == null) {\n             throw new NullPointerException(\"Closure must not be null.\");\n         }\n--- a/src/main/java/org/apache/commons/collections4/iterators/IteratorIterable.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/IteratorIterable.java\n      * Factory method to create an {@link Iterator Iterator} from another\n      * iterator over objects of a different subtype.\n      */\n-    private static <E> Iterator<E> createTypesafeIterator(\n-            final Iterator<? extends E> iterator) {\n+    private static <E> Iterator<E> createTypesafeIterator(final Iterator<? extends E> iterator) {\n         return new Iterator<E>() {\n             public boolean hasNext() {\n                 return iterator.hasNext();\n--- a/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java\n \n     // -----------------------------------------------------------------------\n     @Test\n-    public void apply() {\n+    public void forEach() {\n         final List<Integer> listA = new ArrayList<Integer>();\n         listA.add(1);\n \n         final Collection<List<Integer>> col = new ArrayList<List<Integer>>();\n         col.add(listA);\n         col.add(listB);\n-        IterableUtils.apply(col, testClosure);\n+        IterableUtils.forEach(col, testClosure);\n         assertTrue(listA.isEmpty() && listB.isEmpty());\n         try {\n-            IterableUtils.apply(col, null);\n+            IterableUtils.forEach(col, null);\n             fail(\"expecting NullPointerException\");\n         } catch (NullPointerException npe) {\n             // expected\n         }\n \n-        IterableUtils.apply(null, testClosure);\n+        IterableUtils.forEach(null, testClosure);\n \n         // null should be OK\n         col.add(null);\n-        IterableUtils.apply(col, testClosure);\n+        IterableUtils.forEach(col, testClosure);\n     }\n \n     @Test(expected = FunctorException.class)\n-    public void applyFailure() {\n+    public void forEachFailure() {\n         final Closure<String> testClosure = ClosureUtils.invokerClosure(\"clear\");\n         final Collection<String> col = new ArrayList<String>();\n         col.add(\"x\");\n-        IterableUtils.apply(col, testClosure);\n-    }\n-\n-    @Test\n-    public void applyForAllButLast() {\n+        IterableUtils.forEach(col, testClosure);\n+    }\n+\n+    @Test\n+    public void forEachButLast() {\n         final List<Integer> listA = new ArrayList<Integer>();\n         listA.add(1);\n \n         final Collection<List<Integer>> col = new ArrayList<List<Integer>>();\n         col.add(listA);\n         col.add(listB);\n-        List<Integer> last = IterableUtils.applyForAllButLast(col, testClosure);\n+        List<Integer> last = IterableUtils.forEachButLast(col, testClosure);\n         assertTrue(listA.isEmpty() && !listB.isEmpty());\n         assertSame(listB, last);\n \n         try {\n-            IterableUtils.apply(col, null);\n+            IterableUtils.forEachButLast(col, null);\n             fail(\"expecting NullPointerException\");\n         } catch (NullPointerException npe) {\n             // expected\n         }\n \n-        IterableUtils.apply(null, testClosure);\n+        IterableUtils.forEachButLast(null, testClosure);\n \n         // null should be OK\n         col.add(null);\n         col.add(null);\n-        last = IterableUtils.applyForAllButLast(col, testClosure);\n+        last = IterableUtils.forEachButLast(col, testClosure);\n         assertNull(last);\n     }\n \n     }\n \n     @Test\n-    public void cardinality() {\n+    public void frequency() {\n         // null iterable test\n-        assertEquals(0, IterableUtils.cardinality(null, 1));\n-\n-        assertEquals(1, IterableUtils.cardinality(iterableA, 1));\n-        assertEquals(2, IterableUtils.cardinality(iterableA, 2));\n-        assertEquals(3, IterableUtils.cardinality(iterableA, 3));\n-        assertEquals(4, IterableUtils.cardinality(iterableA, 4));\n-        assertEquals(0, IterableUtils.cardinality(iterableA, 5));\n-\n-        assertEquals(0, IterableUtils.cardinality(iterableB, 1L));\n-        assertEquals(4, IterableUtils.cardinality(iterableB, 2L));\n-        assertEquals(3, IterableUtils.cardinality(iterableB, 3L));\n-        assertEquals(2, IterableUtils.cardinality(iterableB, 4L));\n-        assertEquals(1, IterableUtils.cardinality(iterableB, 5L));\n+        assertEquals(0, IterableUtils.frequency(null, 1));\n+\n+        assertEquals(1, IterableUtils.frequency(iterableA, 1));\n+        assertEquals(2, IterableUtils.frequency(iterableA, 2));\n+        assertEquals(3, IterableUtils.frequency(iterableA, 3));\n+        assertEquals(4, IterableUtils.frequency(iterableA, 4));\n+        assertEquals(0, IterableUtils.frequency(iterableA, 5));\n+\n+        assertEquals(0, IterableUtils.frequency(iterableB, 1L));\n+        assertEquals(4, IterableUtils.frequency(iterableB, 2L));\n+        assertEquals(3, IterableUtils.frequency(iterableB, 3L));\n+        assertEquals(2, IterableUtils.frequency(iterableB, 4L));\n+        assertEquals(1, IterableUtils.frequency(iterableB, 5L));\n \n         // Ensure that generic bounds accept valid parameters, but return\n         // expected results\n         // e.g. no longs in the \"int\" Iterable<Number>, and vice versa.\n         Iterable<Number> iterableIntAsNumber = Arrays.<Number>asList(1, 2, 3, 4, 5);\n         Iterable<Number> iterableLongAsNumber = Arrays.<Number>asList(1L, 2L, 3L, 4L, 5L);\n-        assertEquals(0, IterableUtils.cardinality(iterableIntAsNumber, 2L));\n-        assertEquals(0, IterableUtils.cardinality(iterableLongAsNumber, 2));\n+        assertEquals(0, IterableUtils.frequency(iterableIntAsNumber, 2L));\n+        assertEquals(0, IterableUtils.frequency(iterableLongAsNumber, 2));\n \n         final Set<String> set = new HashSet<String>();\n         set.add(\"A\");\n         set.add(\"C\");\n         set.add(\"E\");\n         set.add(\"E\");\n-        assertEquals(1, IterableUtils.cardinality(set, \"A\"));\n-        assertEquals(0, IterableUtils.cardinality(set, \"B\"));\n-        assertEquals(1, IterableUtils.cardinality(set, \"C\"));\n-        assertEquals(0, IterableUtils.cardinality(set, \"D\"));\n-        assertEquals(1, IterableUtils.cardinality(set, \"E\"));\n+        assertEquals(1, IterableUtils.frequency(set, \"A\"));\n+        assertEquals(0, IterableUtils.frequency(set, \"B\"));\n+        assertEquals(1, IterableUtils.frequency(set, \"C\"));\n+        assertEquals(0, IterableUtils.frequency(set, \"D\"));\n+        assertEquals(1, IterableUtils.frequency(set, \"E\"));\n \n         final Bag<String> bag = new HashBag<String>();\n         bag.add(\"A\", 3);\n         bag.add(\"C\");\n         bag.add(\"E\");\n         bag.add(\"E\");\n-        assertEquals(3, IterableUtils.cardinality(bag, \"A\"));\n-        assertEquals(0, IterableUtils.cardinality(bag, \"B\"));\n-        assertEquals(1, IterableUtils.cardinality(bag, \"C\"));\n-        assertEquals(0, IterableUtils.cardinality(bag, \"D\"));\n-        assertEquals(2, IterableUtils.cardinality(bag, \"E\"));\n-    }\n-\n-    @Test\n-    public void cardinalityOfNull() {\n+        assertEquals(3, IterableUtils.frequency(bag, \"A\"));\n+        assertEquals(0, IterableUtils.frequency(bag, \"B\"));\n+        assertEquals(1, IterableUtils.frequency(bag, \"C\"));\n+        assertEquals(0, IterableUtils.frequency(bag, \"D\"));\n+        assertEquals(2, IterableUtils.frequency(bag, \"E\"));\n+    }\n+\n+    @Test\n+    public void frequencyOfNull() {\n         final List<String> list = new ArrayList<String>();\n-        assertEquals(0, IterableUtils.cardinality(list, null));\n+        assertEquals(0, IterableUtils.frequency(list, null));\n         list.add(\"A\");\n-        assertEquals(0, IterableUtils.cardinality(list, null));\n+        assertEquals(0, IterableUtils.frequency(list, null));\n         list.add(null);\n-        assertEquals(1, IterableUtils.cardinality(list, null));\n+        assertEquals(1, IterableUtils.frequency(list, null));\n         list.add(\"B\");\n-        assertEquals(1, IterableUtils.cardinality(list, null));\n+        assertEquals(1, IterableUtils.frequency(list, null));\n         list.add(null);\n-        assertEquals(2, IterableUtils.cardinality(list, null));\n+        assertEquals(2, IterableUtils.frequency(list, null));\n         list.add(\"B\");\n-        assertEquals(2, IterableUtils.cardinality(list, null));\n+        assertEquals(2, IterableUtils.frequency(list, null));\n         list.add(null);\n-        assertEquals(3, IterableUtils.cardinality(list, null));\n+        assertEquals(3, IterableUtils.frequency(list, null));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n \n     // -----------------------------------------------------------------------\n     @Test\n-    public void apply() {\n+    public void forEach() {\n         final List<Integer> listA = new ArrayList<Integer>();\n         listA.add(1);\n \n         final Collection<List<Integer>> col = new ArrayList<List<Integer>>();\n         col.add(listA);\n         col.add(listB);\n-        IteratorUtils.apply(col.iterator(), testClosure);\n+        IteratorUtils.forEach(col.iterator(), testClosure);\n         assertTrue(listA.isEmpty() && listB.isEmpty());\n         try {\n-            IteratorUtils.apply(col.iterator(), null);\n+            IteratorUtils.forEach(col.iterator(), null);\n             fail(\"expecting NullPointerException\");\n         } catch (NullPointerException npe) {\n             // expected\n         }\n \n-        IteratorUtils.apply(null, testClosure);\n+        IteratorUtils.forEach(null, testClosure);\n \n         // null should be OK\n         col.add(null);\n-        IteratorUtils.apply(col.iterator(), testClosure);\n-    }\n-\n-    @Test\n-    public void applyForAllButLast() {\n+        IteratorUtils.forEach(col.iterator(), testClosure);\n+    }\n+\n+    @Test\n+    public void forEachButLast() {\n         final List<Integer> listA = new ArrayList<Integer>();\n         listA.add(1);\n \n         final Collection<List<Integer>> col = new ArrayList<List<Integer>>();\n         col.add(listA);\n         col.add(listB);\n-        List<Integer> last = IteratorUtils.applyForAllButLast(col.iterator(), testClosure);\n+        List<Integer> last = IteratorUtils.forEachButLast(col.iterator(), testClosure);\n         assertTrue(listA.isEmpty() && !listB.isEmpty());\n         assertSame(listB, last);\n \n         try {\n-            IteratorUtils.apply(col.iterator(), null);\n+            IteratorUtils.forEachButLast(col.iterator(), null);\n             fail(\"expecting NullPointerException\");\n         } catch (NullPointerException npe) {\n             // expected\n         }\n \n-        IteratorUtils.apply(null, testClosure);\n+        IteratorUtils.forEachButLast(null, testClosure);\n \n         // null should be OK\n         col.add(null);\n         col.add(null);\n-        last = IteratorUtils.applyForAllButLast(col.iterator(), testClosure);\n+        last = IteratorUtils.forEachButLast(col.iterator(), testClosure);\n         assertNull(last);\n     }\n ", "timestamp": 1433753606, "metainfo": ""}