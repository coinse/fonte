{"sha": "8283d966f47280f682a1407d499346a383d1b1a5", "log": "[COLLECTIONS-453] Change ChainedTransformer and ChainedClosure constructors to copy input arguments, add private constructor for factory methods to not copy twice.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java\n         if (closures.length == 0) {\n             return NOPClosure.<E>nopClosure();\n         }\n-        return new ChainedClosure<E>(FunctorUtils.copy(closures));\n+        return new ChainedClosure<E>(closures);\n     }\n \n     /**\n             cmds[i++] = closure;\n         }\n         FunctorUtils.validate(cmds);\n-        return new ChainedClosure<E>(cmds);\n+        return new ChainedClosure<E>(false, cmds);\n+    }\n+\n+    /**\n+     * Hidden constructor for the use by the static factory methods.\n+     *\n+     * @param clone  if {@code true} the input argument will be cloned\n+     * @param closures  the closures to chain, no nulls\n+     */\n+    private ChainedClosure(final boolean clone, final Closure<? super E>... closures) {\n+        super();\n+        iClosures = clone ? FunctorUtils.copy(closures) : closures;\n     }\n \n     /**\n      * Constructor that performs no validation.\n      * Use <code>chainedClosure</code> if you want that.\n      *\n-     * @param closures  the closures to chain, not copied, no nulls\n+     * @param closures  the closures to chain, copied, no nulls\n      */\n-    public ChainedClosure(final Closure<? super E>[] closures) {\n-        super();\n-        iClosures = closures;\n+    public ChainedClosure(final Closure<? super E>... closures) {\n+        this(true, closures);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java\n         if (transformers.length == 0) {\n             return NOPTransformer.<T>nopTransformer();\n         }\n-        return new ChainedTransformer<T>(FunctorUtils.copy(transformers));\n+        return new ChainedTransformer<T>(transformers);\n     }\n \n     /**\n         // convert to array like this to guarantee iterator() ordering\n         final Transformer<T, T>[] cmds = transformers.toArray(new Transformer[transformers.size()]);\n         FunctorUtils.validate(cmds);\n-        return new ChainedTransformer<T>(cmds);\n+        return new ChainedTransformer<T>(false, cmds);\n+    }\n+\n+    /**\n+     * Hidden constructor for the use by the static factory methods.\n+     *\n+     * @param clone  if {@code true} the input argument will be cloned\n+     * @param transformers  the transformers to chain, not copied, no nulls\n+     */\n+    private ChainedTransformer(final boolean clone, final Transformer<? super T, ? extends T>[] transformers) {\n+        super();\n+        iTransformers = clone ? FunctorUtils.copy(transformers) : transformers;\n     }\n \n     /**\n      * Constructor that performs no validation.\n      * Use <code>chainedTransformer</code> if you want that.\n      *\n-     * @param transformers  the transformers to chain, not copied, no nulls\n+     * @param transformers  the transformers to chain, copied, no nulls\n      */\n-    public ChainedTransformer(final Transformer<? super T, ? extends T>[] transformers) {\n-        super();\n-        iTransformers = transformers;\n+    public ChainedTransformer(final Transformer<? super T, ? extends T>... transformers) {\n+        this(true, transformers);\n     }\n \n     /**", "timestamp": 1367766410, "metainfo": ""}