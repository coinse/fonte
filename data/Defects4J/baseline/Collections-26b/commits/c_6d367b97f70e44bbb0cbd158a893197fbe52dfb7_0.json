{"sha": "6d367b97f70e44bbb0cbd158a893197fbe52dfb7", "log": "javadocs   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BeanMap.java\n+++ b/src/java/org/apache/commons/collections/BeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.7 2002/03/13 05:24:58 mas Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/03/13 05:24:58 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.8 2002/03/21 17:11:01 morgand Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/03/21 17:11:01 $\n  *\n  * ====================================================================\n  *\n     }\n \n     \n+    /**\n+     * Get the keys for this BeanMap.\n+     * \n+     * @return BeanMap keys.  Modifications to this Set (i.e. removes)\n+     *         <i>will</i> be reflected in the BeanMap.\n+     */\n     public Set keySet() {\n         return readMethods.keySet();\n     }\n \n+    /**\n+     * Get the mappings for this BeanMap\n+     * \n+     * @return BeanMap mappings.  The Set returned by this method\n+     *         is not modifiable.\n+     */\n     public Set entrySet() {\n         return Collections.unmodifiableSet(new AbstractSet() {\n             public Iterator iterator() {\n         });\n     }\n \n+    /**\n+     * Returns the values for the BeanMap.\n+     * \n+     * @return values for the BeanMap.  Modifications to this collection\n+     *         do not alter the underlying BeanMap.\n+     */\n     public Collection values() {\n         ArrayList answer = new ArrayList( readMethods.size() );\n         for ( Iterator iter = valueIterator(); iter.hasNext(); ) {", "timestamp": 1016730661, "metainfo": ""}