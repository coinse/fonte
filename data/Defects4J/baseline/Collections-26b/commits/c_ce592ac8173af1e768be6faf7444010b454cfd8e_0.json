{"sha": "ce592ac8173af1e768be6faf7444010b454cfd8e", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471189 | scolebourne | 2006-11-04 05:57:57 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getMap(), getOrderedMap() and getSortedMap() - use decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/TransformedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedSortedMap.java\n  *\n  * @author Stephen Colebourne\n  */\n-public class TransformedSortedMap\n-        extends TransformedMap\n-        implements SortedMap {\n+public class TransformedSortedMap<K, V>\n+        extends TransformedMap<K, V>\n+        implements SortedMap<K, V> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = -8751771676410385778L;\n      * @param valueTransformer  the predicate to validate to values, null means no transformation\n      * @throws IllegalArgumentException if the map is null\n      */\n-    public static SortedMap decorate(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n-        return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    public static <K, V> SortedMap<K, V> decorate(SortedMap<K, V> map,\n+            Transformer<? super K, ? extends K> keyTransformer,\n+            Transformer<? super V, ? extends V> valueTransformer) {\n+        return new TransformedSortedMap<K, V>(map, keyTransformer, valueTransformer);\n     }\n \n     /**\n      * @throws IllegalArgumentException if map is null\n      * @since Commons Collections 3.2\n      */\n-    public static SortedMap decorateTransform(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n-        TransformedSortedMap decorated = new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    public static <K, V> SortedMap<K, V> decorateTransform(SortedMap<K, V> map,\n+            Transformer<? super K, ? extends K> keyTransformer,\n+            Transformer<? super V, ? extends V> valueTransformer) {\n+        TransformedSortedMap<K, V> decorated = new TransformedSortedMap<K, V>(map, keyTransformer, valueTransformer);\n         if (map.size() > 0) {\n-            Map transformed = decorated.transformMap(map);\n+            Map<K, V> transformed = decorated.transformMap(map);\n             decorated.clear();\n-            decorated.getMap().putAll(transformed);  // avoids double transformation\n+            decorated.decorated().putAll(transformed);  // avoids double transformation\n         }\n         return decorated;\n     }\n      * @param valueTransformer  the predicate to validate to values, null means no transformation\n      * @throws IllegalArgumentException if the map is null\n      */\n-    protected TransformedSortedMap(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n+    protected TransformedSortedMap(SortedMap<K, V> map,\n+            Transformer<? super K, ? extends K> keyTransformer,\n+            Transformer<? super V, ? extends V> valueTransformer) {\n         super(map, keyTransformer, valueTransformer);\n     }\n \n      * \n      * @return the decorated map\n      */\n-    protected SortedMap getSortedMap() {\n-        return (SortedMap) map;\n+    protected SortedMap<K, V> getSortedMap() {\n+        return (SortedMap<K, V>) map;\n     }\n \n     //-----------------------------------------------------------------------\n-    public Object firstKey() {\n+    public K firstKey() {\n         return getSortedMap().firstKey();\n     }\n \n-    public Object lastKey() {\n+    public K lastKey() {\n         return getSortedMap().lastKey();\n     }\n \n-    public Comparator comparator() {\n+    public Comparator<? super K> comparator() {\n         return getSortedMap().comparator();\n     }\n \n-    public SortedMap subMap(Object fromKey, Object toKey) {\n-        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n-        return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    public SortedMap<K, V> subMap(K fromKey, K toKey) {\n+        SortedMap<K, V> map = getSortedMap().subMap(fromKey, toKey);\n+        return new TransformedSortedMap<K, V>(map, keyTransformer, valueTransformer);\n     }\n \n-    public SortedMap headMap(Object toKey) {\n-        SortedMap map = getSortedMap().headMap(toKey);\n-        return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    public SortedMap<K, V> headMap(K toKey) {\n+        SortedMap<K, V> map = getSortedMap().headMap(toKey);\n+        return new TransformedSortedMap<K, V>(map, keyTransformer, valueTransformer);\n     }\n \n-    public SortedMap tailMap(Object fromKey) {\n-        SortedMap map = getSortedMap().tailMap(fromKey);\n-        return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    public SortedMap<K, V> tailMap(K fromKey) {\n+        SortedMap<K, V> map = getSortedMap().tailMap(fromKey);\n+        return new TransformedSortedMap<K, V>(map, keyTransformer, valueTransformer);\n     }\n \n }", "timestamp": 1252994178, "metainfo": ""}