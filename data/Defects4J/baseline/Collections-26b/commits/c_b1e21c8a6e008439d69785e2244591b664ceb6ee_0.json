{"sha": "b1e21c8a6e008439d69785e2244591b664ceb6ee", "log": "Add unit test for ZippingIterator, add factory methods to IteratorUtils, add changelog entry.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n import org.apache.commons.collections4.iterators.UnmodifiableIterator;\n import org.apache.commons.collections4.iterators.UnmodifiableListIterator;\n import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;\n+import org.apache.commons.collections4.iterators.ZippingIterator;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n \n     public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator,\n                                                          long offset, long max) {\n         return new BoundedIterator<E>(iterator, offset, max);\n-    }\n-\n-    // Skipping\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Decorates the specified iterator to skip the first N elements.\n-     *\n-     * @param <E>  the element type\n-     * @param iterator  the iterator to decorate\n-     * @param offset  the first number of elements to skip\n-     * @return a new skipping iterator\n-     * @throws IllegalArgumentException if the iterator is null or offset is negative\n-     * @since 4.1\n-     */\n-    public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset) {\n-        return new SkippingIterator<E>(iterator, offset);\n     }\n \n     // Unmodifiable\n         return PushbackIterator.pushbackIterator(iterator);\n     }\n \n+    // Skipping\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Decorates the specified iterator to skip the first N elements.\n+     *\n+     * @param <E>  the element type\n+     * @param iterator  the iterator to decorate\n+     * @param offset  the first number of elements to skip\n+     * @return a new skipping iterator\n+     * @throws IllegalArgumentException if the iterator is null or offset is negative\n+     * @since 4.1\n+     */\n+    public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset) {\n+        return new SkippingIterator<E>(iterator, offset);\n+    }\n+\n+    // Zipping\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns an iterator that interleaves elements from the decorated iterators.\n+     *\n+     * @param <E>  the element type\n+     * @param a  the first iterator to interleave\n+     * @param b  the second iterator to interleave\n+     * @return an iterator, interleaving the decorated iterators\n+     * @throws IllegalArgumentException if any iterator is null\n+     * @since 4.1\n+     */\n+    public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b) {\n+        return new ZippingIterator<E>(a, b);\n+    }\n+\n+    /**\n+     * Returns an iterator that interleaves elements from the decorated iterators.\n+     *\n+     * @param <E>  the element type\n+     * @param a  the first iterator to interleave\n+     * @param b  the second iterator to interleave\n+     * @param c  the third iterator to interleave \n+     * @return an iterator, interleaving the decorated iterators\n+     * @throws IllegalArgumentException if any iterator is null\n+     * @since 4.1\n+     */\n+    public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a,\n+                                                         final Iterator<? extends E> b,\n+                                                         final Iterator<? extends E> c) {\n+        return new ZippingIterator<E>(a, b, c);\n+    }\n+\n+    /**\n+     * Returns an iterator that interleaves elements from the decorated iterators.\n+     *\n+     * @param <E>  the element type\n+     * @param iterators  the array of iterators to interleave\n+     * @return an iterator, interleaving the decorated iterators\n+     * @throws IllegalArgumentException if any iterator is null\n+     * @since 4.1\n+     */\n+    public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators) {\n+        return new ZippingIterator<E>(iterators);\n+    }\n+\n     // Views\n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/apache/commons/collections4/iterators/ZippingIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ZippingIterator.java\n  * Provides an interleaved iteration over the elements contained in a\n  * collection of Iterators.\n  * <p>\n- * Given two {@link Iterator} instances <code>A</code> and\n- * <code>B</code>, the {@link #next} method on this iterator will\n- * alternate between <code>A.next()</code> and <code>B.next()</code>.\n+ * Given two {@link Iterator} instances {@code A} and {@code B}, the\n+ * {@link #next} method on this iterator will switch between {@code A.next()}\n+ * and {@code B.next()} until both iterators are exhausted.\n  *\n  * @since 4.1\n  * @version $Id$\n \n     /** The {@link Iterator}s to evaluate. */\n     private final Iterator<Iterator<? extends E>> iterators;\n+\n     /** The next iterator to use for next(). */\n     private Iterator<? extends E> nextIterator = null;\n+\n     /** The last iterator which was used for next(). */\n     private Iterator<? extends E> lastReturned = null;\n \n      * Constructs a new <code>ZippingIterator</code> that will provide\n      * interleaved iteration over the two given iterators.\n      *\n-     * @param a the first child iterator\n-     * @param b the second child iterator\n+     * @param a  the first child iterator\n+     * @param b  the second child iterator\n      * @throws NullPointerException if either iterator is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     }\n \n     /**\n-     * Constructs a new <code>ZippingIterator</code> that will use the\n-     * specified comparator to provide ordered iteration over the array of\n-     * iterators.\n+     * Constructs a new <code>ZippingIterator</code> that will provide\n+     * interleaved iteration over the three given iterators.\n      *\n-     * @param iterators the array of iterators\n-     * @throws NullPointerException if iterators array is or contains null\n+     * @param a  the first child iterator\n+     * @param b  the second child iterator\n+     * @param c  the third child iterator\n+     * @throws NullPointerException if either iterator is null\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public ZippingIterator(final Iterator<? extends E> a,\n+                           final Iterator<? extends E> b,\n+                           final Iterator<? extends E> c) {\n+        this(new Iterator[] {a, b, c});\n+    }\n+\n+    /**\n+     * Constructs a new <code>ZippingIterator</code> that will provide\n+     * interleaved iteration of the specified iterators.\n+     *\n+     * @param iterators  the array of iterators\n+     * @throws NullPointerException if any iterator is null\n      */\n     public ZippingIterator(final Iterator<? extends E>... iterators) {\n-        // create a mutable list\n+        // create a mutable list to be able to remove exhausted iterators\n         final List<Iterator<? extends E>> list = new ArrayList<Iterator<? extends E>>();\n-        for (Iterator<? extends E> iterator : iterators) {\n+        for (final Iterator<? extends E> iterator : iterators) {\n             if (iterator == null) {\n-                throw new NullPointerException(\"Iterator must not be null\");\n+                throw new NullPointerException(\"Iterator must not be null.\");\n             }\n             list.add(iterator);\n         }\n     // -------------------------------------------------------------------\n \n     /**\n-     * Returns <code>true</code> if any child iterator has remaining elements.\n+     * Returns {@code true} if any child iterator has remaining elements.\n      *\n      * @return true if this iterator has remaining elements\n      */\n     public boolean hasNext() {\n         // the next iterator has already been determined\n-        // this might happen if hasNext() was called multiple\n+        // this might happen if hasNext() is called multiple\n         if (nextIterator != null) {\n             return true;\n         }\n \n         while(iterators.hasNext()) {\n-            final Iterator<? extends E> iterator = iterators.next();\n-            if (iterator.hasNext()) {\n-                nextIterator = iterator;\n+            final Iterator<? extends E> childIterator = iterators.next();\n+            if (childIterator.hasNext()) {\n+                nextIterator = childIterator;\n                 return true;\n             } else {\n                 // iterator is exhausted, remove it\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.iterators;\n+\n+import java.util.ArrayList;\n+\n+import org.apache.commons.collections4.IteratorUtils;\n+\n+/**\n+ * Unit test suite for {@link ZippingIterator}.\n+ *\n+ * @version $Id$\n+ */\n+@SuppressWarnings(\"boxing\")\n+public class ZippingIteratorTest extends AbstractIteratorTest<Integer> {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public ZippingIteratorTest(final String testName) {\n+        super(testName);\n+    }\n+\n+    //--------------------------------------------------------------- Lifecycle\n+\n+    private ArrayList<Integer> evens = null;\n+    private ArrayList<Integer> odds = null;\n+    private ArrayList<Integer> fib = null;\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        evens = new ArrayList<Integer>();\n+        odds = new ArrayList<Integer>();\n+        for (int i = 0; i < 20; i++) {\n+            if (0 == i % 2) {\n+                evens.add(i);\n+            } else {\n+                odds.add(i);\n+            }\n+        }\n+        fib = new ArrayList<Integer>();\n+        fib.add(1);\n+        fib.add(1);\n+        fib.add(2);\n+        fib.add(3);\n+        fib.add(5);\n+        fib.add(8);\n+        fib.add(13);\n+        fib.add(21);\n+    }\n+\n+    //---------------------------------------------------- TestIterator Methods\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public ZippingIterator<Integer> makeEmptyIterator() {\n+        return new ZippingIterator<Integer>(IteratorUtils.<Integer>emptyIterator());\n+    }\n+\n+    @Override\n+    public ZippingIterator<Integer> makeObject() {\n+        return new ZippingIterator<Integer>(evens.iterator(), odds.iterator(), fib.iterator());\n+    }\n+\n+    //------------------------------------------------------------------- Tests\n+\n+    public void testIterateEven() {\n+        @SuppressWarnings(\"unchecked\")\n+        final ZippingIterator<Integer> iter = new ZippingIterator<Integer>(evens.iterator());\n+        for (int i = 0; i < evens.size(); i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(evens.get(i), iter.next());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateEvenOdd() {\n+        final ZippingIterator<Integer> iter = new ZippingIterator<Integer>(evens.iterator(), odds.iterator());\n+        for (int i = 0; i < 20; i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(Integer.valueOf(i), iter.next());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateOddEven() {\n+        final ZippingIterator<Integer> iter = new ZippingIterator<Integer>(odds.iterator(), evens.iterator());\n+        for (int i = 0, j = 0; i < 20; i++) {\n+            assertTrue(iter.hasNext());\n+            int val = iter.next();\n+            if (i % 2 == 0) {\n+                assertEquals(odds.get(j).intValue(), val);\n+            } else {\n+                assertEquals(evens.get(j).intValue(), val);\n+                j++;\n+            }\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateEvenEven() {\n+        final ZippingIterator<Integer> iter = new ZippingIterator<Integer>(evens.iterator(), evens.iterator());\n+        for (int i = 0; i < evens.size(); i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(evens.get(i), iter.next());\n+            assertTrue(iter.hasNext());\n+            assertEquals(evens.get(i), iter.next());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateFibEvenOdd() {\n+        final ZippingIterator<Integer> iter = new ZippingIterator<Integer>(fib.iterator(), evens.iterator(), odds.iterator());\n+\n+        assertEquals(Integer.valueOf(1),iter.next());  // fib    1\n+        assertEquals(Integer.valueOf(0),iter.next());  // even   0\n+        assertEquals(Integer.valueOf(1),iter.next());  // odd    1\n+        assertEquals(Integer.valueOf(1),iter.next());  // fib    1\n+        assertEquals(Integer.valueOf(2),iter.next());  // even   2\n+        assertEquals(Integer.valueOf(3),iter.next());  // odd    3\n+        assertEquals(Integer.valueOf(2),iter.next());  // fib    2\n+        assertEquals(Integer.valueOf(4),iter.next());  // even   4\n+        assertEquals(Integer.valueOf(5),iter.next());  // odd    5\n+        assertEquals(Integer.valueOf(3),iter.next());  // fib    3\n+        assertEquals(Integer.valueOf(6),iter.next());  // even   6\n+        assertEquals(Integer.valueOf(7),iter.next());  // odd    7\n+        assertEquals(Integer.valueOf(5),iter.next());  // fib    5\n+        assertEquals(Integer.valueOf(8),iter.next());  // even   8\n+        assertEquals(Integer.valueOf(9),iter.next());  // odd    9\n+        assertEquals(Integer.valueOf(8),iter.next());  // fib    8\n+        assertEquals(Integer.valueOf(10),iter.next()); // even  10\n+        assertEquals(Integer.valueOf(11),iter.next()); // odd   11\n+        assertEquals(Integer.valueOf(13),iter.next()); // fib   13\n+        assertEquals(Integer.valueOf(12),iter.next()); // even  12\n+        assertEquals(Integer.valueOf(13),iter.next()); // odd   13\n+        assertEquals(Integer.valueOf(21),iter.next()); // fib   21\n+        assertEquals(Integer.valueOf(14),iter.next()); // even  14\n+        assertEquals(Integer.valueOf(15),iter.next()); // odd   15\n+        assertEquals(Integer.valueOf(16),iter.next()); // even  16\n+        assertEquals(Integer.valueOf(17),iter.next()); // odd   17\n+        assertEquals(Integer.valueOf(18),iter.next()); // even  18\n+        assertEquals(Integer.valueOf(19),iter.next()); // odd   19\n+\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testRemoveFromSingle() {\n+        @SuppressWarnings(\"unchecked\")\n+        final ZippingIterator<Integer> iter = new ZippingIterator<Integer>(evens.iterator());\n+        int expectedSize = evens.size();\n+        while (iter.hasNext()) {\n+            final Object o = iter.next();\n+            final Integer val = (Integer) o;\n+            if (val.intValue() % 4 == 0) {\n+                expectedSize--;\n+                iter.remove();\n+            }\n+        }\n+        assertEquals(expectedSize, evens.size());\n+    }\n+\n+    public void testRemoveFromDouble() {\n+        final ZippingIterator<Integer> iter = new ZippingIterator<Integer>(evens.iterator(), odds.iterator());\n+        int expectedSize = evens.size() + odds.size();\n+        while (iter.hasNext()) {\n+            final Object o = iter.next();\n+            final Integer val = (Integer) o;\n+            if (val.intValue() % 4 == 0 || val.intValue() % 3 == 0) {\n+                expectedSize--;\n+                iter.remove();\n+            }\n+        }\n+        assertEquals(expectedSize, evens.size() + odds.size());\n+    }\n+\n+}\n+", "timestamp": 1432807089, "metainfo": ""}