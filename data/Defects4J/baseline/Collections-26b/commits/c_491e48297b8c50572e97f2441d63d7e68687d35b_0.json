{"sha": "491e48297b8c50572e97f2441d63d7e68687d35b", "log": "Add MapBackedSet that creates a Set by decorating a Map   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/MapBackedSet.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Decorates a <code>Map</code> to obtain <code>Set</code> behaviour.\n+ * <p>\n+ * This class is used to create a <code>Set</code> with the same properties as\n+ * the key set of any map. Thus, a ReferenceSet can be created by wrapping a\n+ * <code>ReferenceMap</code> in an instance of this class.\n+ * <p>\n+ * Most map implementation can be used to create a set by passing in dummy values.\n+ * Exceptions include <code>BidiMap</code> implementations, as they require unique values.\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/04/20 23:51:31 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public final class MapBackedSet implements Set {\n+    \n+    /** The map being used as the backing store */\n+    protected final Map map;\n+    /** The dummyValue to use */\n+    protected final Object dummyValue;\n+\n+    /**\n+     * Factory method to create a set from a map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    public static Set decorate(Map map) {\n+        return decorate(map, null);\n+    }\n+\n+    /**\n+     * Factory method to create a set from a map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param dummyValue  the dummy value to use\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static Set decorate(Map map, Object dummyValue) {\n+        if (map == null) {\n+            throw new IllegalArgumentException(\"The map must not be null\");\n+        }\n+        return new MapBackedSet(map, dummyValue);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param dummyValue  the dummy value to use\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    private MapBackedSet(Map map, Object dummyValue) {\n+        super();\n+        this.map = map;\n+        this.dummyValue = dummyValue;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public int size() {\n+        return map.size();\n+    }\n+\n+    public boolean isEmpty() {\n+        return map.isEmpty();\n+    }\n+\n+    public Iterator iterator() {\n+        return map.keySet().iterator();\n+    }\n+\n+    public boolean contains(Object obj) {\n+        return map.containsKey(obj);\n+    }\n+\n+    public boolean containsAll(Collection coll) {\n+        return map.keySet().containsAll(coll);\n+    }\n+\n+    public boolean add(Object obj) {\n+        int size = map.size();\n+        map.put(obj, dummyValue);\n+        return (map.size() != size);\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        int size = map.size();\n+        for (Iterator it = coll.iterator(); it.hasNext();) {\n+            Object obj = (Object) it.next();\n+            map.put(obj, dummyValue);\n+        }\n+        return (map.size() != size);\n+    }\n+\n+    public boolean remove(Object obj) {\n+        int size = map.size();\n+        map.remove(obj);\n+        return (map.size() != size);\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        return map.keySet().removeAll(coll);\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        return map.keySet().retainAll(coll);\n+    }\n+\n+    public void clear() {\n+        map.clear();\n+    }\n+\n+    public Object[] toArray() {\n+        return map.keySet().toArray();\n+    }\n+\n+    public Object[] toArray(Object[] array) {\n+        return map.keySet().toArray(array);\n+    }\n+\n+    public boolean equals(Object obj) {\n+        return map.keySet().equals(obj);\n+    }\n+\n+    public int hashCode() {\n+        return map.keySet().hashCode();\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/set/TestAll.java\n+++ b/src/test/org/apache/commons/collections/set/TestAll.java\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 01:20:39 $\n+ * @version $Revision: 1.6 $ $Date: 2004/04/20 23:51:31 $\n  * \n  * @author Stephen Colebourne\n  */\n         \n         suite.addTest(TestCompositeSet.suite());\n         suite.addTest(TestListOrderedSet.suite());\n+        suite.addTest(TestMapBackedSet.suite());\n+        suite.addTest(TestMapBackedSet2.suite());\n         suite.addTest(TestPredicatedSet.suite());\n         suite.addTest(TestPredicatedSortedSet.suite());\n         suite.addTest(TestTransformedSet.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestMapBackedSet.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.map.HashedMap;\n+\n+/**\n+ * JUnit test.\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/04/20 23:51:31 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestMapBackedSet extends AbstractTestSet {\n+\n+    public TestMapBackedSet(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestMapBackedSet.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestMapBackedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public Set makeEmptySet() {\n+        return MapBackedSet.decorate(new HashedMap());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestMapBackedSet2.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.map.LinkedMap;\n+\n+/**\n+ * JUnit test.\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/04/20 23:51:31 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestMapBackedSet2 extends AbstractTestSet {\n+\n+    public TestMapBackedSet2(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestMapBackedSet2.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestMapBackedSet2.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public Set makeEmptySet() {\n+        return MapBackedSet.decorate(new LinkedMap());\n+    }\n+\n+    protected Set setupSet() {\n+        Set set = makeEmptySet();\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add(Integer.toString(i));\n+        }\n+        return set;\n+    }\n+\n+    public void testOrdering() {\n+        Set set = setupSet();\n+        Iterator it = set.iterator();\n+\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i += 2) {\n+            assertTrue(\"Must be able to remove int\", set.remove(Integer.toString(i)));\n+        }\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong after remove \", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add(Integer.toString(i));\n+        }\n+\n+        assertEquals(\"Size of set is wrong!\", 10, set.size());\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+        for (int i = 0; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+    }\n+    \n+}", "timestamp": 1082505091, "metainfo": ""}