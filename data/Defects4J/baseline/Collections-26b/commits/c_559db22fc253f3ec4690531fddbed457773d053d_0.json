{"sha": "559db22fc253f3ec4690531fddbed457773d053d", "log": "Integrate new MapIterator tests into DualBidiMap tests   ", "commit": "\n--- a/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n+++ b/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.7 2003/11/02 15:27:53 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.8 2003/11/02 19:48:39 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.AbstractMapEntryDecorator;\n import org.apache.commons.collections.iterators.MapIterator;\n import org.apache.commons.collections.iterators.ResetableMapIterator;\n-import org.apache.commons.collections.pairs.AbstractMapEntry;\n+import org.apache.commons.collections.pairs.TiedMapEntry;\n \n /**\n  * Abstract <code>BidiMap</code> implemented using two maps.\n  * <code>createMap</code> method.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: AbstractDualBidiMap.java,v 1.7 2003/11/02 15:27:53 scolebourne Exp $\n+ * @version $Id: AbstractDualBidiMap.java,v 1.8 2003/11/02 19:48:39 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n      * Obtains a <code>MapIterator</code> over the map.\n      * The iterator implements <code>ResetableMapIterator</code>.\n      * This implementation relies on the entrySet iterator.\n+     * <p>\n+     * The setValue() methods only allow a new value to be set.\n+     * If the value being set is already in the map, an IllegalArgumentException\n+     * is thrown (as setValue cannot change the size of the map).\n      * \n      * @return a map iterator\n      */\n         return values;\n     }\n \n+    /**\n+     * Gets an entrySet view of the map.\n+     * Changes made on the set are reflected in the map.\n+     * The set supports remove and clear but not add.\n+     * <p>\n+     * The Map Entry setValue() method only allow a new value to be set.\n+     * If the value being set is already in the map, an IllegalArgumentException\n+     * is thrown (as setValue cannot change the size of the map).\n+     * \n+     * @return the entrySet view\n+     */\n     public Set entrySet() {\n         if (entrySet == null) {\n             entrySet = new EntrySet(this);\n         }\n         \n         public Map.Entry asMapEntry() {\n-            return new AbstractMapEntry(getKey(), getValue()) {\n+            return new TiedMapEntry(map, getKey()) {\n                 public Object setValue(Object value) {\n-                    BidiMapIterator.this.setValue(value);\n+                    if (map.maps[1].containsKey(value) &&\n+                        map.maps[1].get(value) != last.getKey()) {\n+                        throw new IllegalArgumentException(\"Cannot use setValue() when the object being set is already in the map\");\n+                    }\n                     return super.setValue(value);\n                 }\n             };\n--- a/src/test/org/apache/commons/collections/AbstractTestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestBidiMap.java,v 1.6 2003/11/02 18:29:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestBidiMap.java,v 1.7 2003/11/02 19:48:39 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n-import java.util.NoSuchElementException;\n import java.util.Set;\n \n+import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n import org.apache.commons.collections.iterators.MapIterator;\n \n /**\n  * Abstract test class for {@link BidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/11/02 18:29:33 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/02 19:48:39 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n         return new TestInverseBidiMap(this);\n     }\n \n-    class TestInverseBidiMap extends AbstractTestBidiMap {\n+    public class TestInverseBidiMap extends AbstractTestBidiMap {\n         final AbstractTestBidiMap main;\n         \n         public TestInverseBidiMap(AbstractTestBidiMap main) {\n     }\n     \n     //-----------------------------------------------------------------------\n-    public void testBidiMapIteratorEmpty() {\n-        resetEmpty();\n-        BidiMap bidi = (BidiMap) map;\n-        MapIterator it = bidi.mapIterator();\n-        assertEquals(false, it.hasNext());\n-        try {\n-            it.next();\n-            fail();\n-        } catch (NoSuchElementException ex) {}\n-        try {\n-            it.getKey();\n-            fail();\n-        } catch (IllegalStateException ex) {\n-        }\n-        try {\n-            it.getValue();\n-            fail();\n-        } catch (IllegalStateException ex) {\n-        }\n-        try {\n-            it.remove();\n-            fail();\n-        } catch (IllegalStateException ex) {\n-        }\n-        try {\n-            it.setValue(null);\n-            fail();\n-        } catch (IllegalStateException ex) {\n-        }\n-        try {\n-            it.asMapEntry();\n-            fail();\n-        } catch (IllegalStateException ex) {\n-        }\n-        verify();\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testBidiMapIteratorFull() {\n-        resetFull();\n-        BidiMap bidi = (BidiMap) map;\n-        MapIterator it = bidi.mapIterator();\n-        \n-        assertEquals(true, it.hasNext());\n-        Map.Entry lastEntry = null;\n-        Object lastKey = null;\n-        Object lastValue = null;\n-        while (it.hasNext()) {\n-            Object key = it.next();\n-            assertSame(key, it.getKey());\n-        \n-            Object value = it.getValue();\n-            assertSame(bidi.get(key), value);\n-            \n-            Map.Entry entry = it.asMapEntry();\n-            assertTrue(entry != lastEntry);\n-            if (lastKey != null && lastValue != null) {\n-                assertSame(lastKey, lastEntry.getKey());\n-                assertSame(lastValue, lastEntry.getValue());\n-            }\n-            assertSame(key, entry.getKey());\n-            assertSame(value, entry.getValue());\n-            \n-            lastEntry = entry;\n-            lastKey = key;\n-            lastValue = value;\n-        }\n-        verify();\n-    }\n-\n+    public BulkTest bulkTestBidiMapIterator() {\n+        return new TestBidiMapIterator();\n+    }\n+    \n+    public class TestBidiMapIterator extends AbstractTestMapIterator {\n+        public TestBidiMapIterator() {\n+            super(\"TestBidiMapIterator\");\n+        }\n+        \n+        protected Object addSetValue() {\n+            return AbstractTestBidiMap.this.getNewSampleValues()[0];\n+        }\n+        \n+        protected boolean supportsRemove() {\n+            return AbstractTestBidiMap.this.isRemoveSupported();\n+        }\n+\n+        protected boolean supportsSetValue() {\n+            return AbstractTestBidiMap.this.isSetValueSupported();\n+        }\n+\n+        protected MapIterator makeEmptyMapIterator() {\n+            resetEmpty();\n+            return ((BidiMap) AbstractTestBidiMap.this.map).mapIterator();\n+        }\n+\n+        protected MapIterator makeFullMapIterator() {\n+            resetFull();\n+            return ((BidiMap) AbstractTestBidiMap.this.map).mapIterator();\n+        }\n+        \n+        protected Map getMap() {\n+            // assumes makeFullMapIterator() called first\n+            return AbstractTestBidiMap.this.map;\n+        }\n+        \n+        protected void verify() {\n+            super.verify();\n+            AbstractTestBidiMap.this.verifyInverse();\n+        }\n+    }\n+    \n     //-----------------------------------------------------------------------\n     public void testBidiMapIteratorRemove() {\n         resetFull();\n         }\n     }\n \n-    //-----------------------------------------------------------------------\n-    public void testBidiMapIteratorSetRemoveSet() {\n-        if (isSetValueSupported() == false || isRemoveSupported() == false) {\n-            return;\n-        }\n-        Object newValue1 = getOtherValues()[0];\n-        \n-        resetFull();\n-        BidiMap bidi = (BidiMap) map;\n-        MapIterator it = bidi.mapIterator();\n-        assertEquals(true, it.hasNext());\n-        Object key = it.next();\n-        \n-        it.setValue(newValue1);\n-        confirmed.put(key, newValue1);\n-        verify();\n-        \n-        it.remove();\n-        confirmed.remove(key);\n-        verify();\n-        \n-        try {\n-            it.setValue(newValue1);\n-            fail();\n-        } catch (IllegalStateException ex) {\n-        }\n-        verify();\n-    }\n-\n }", "timestamp": 1067802519, "metainfo": ""}