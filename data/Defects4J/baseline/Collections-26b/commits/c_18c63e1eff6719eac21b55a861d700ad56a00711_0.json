{"sha": "18c63e1eff6719eac21b55a861d700ad56a00711", "log": "Remove List constructor Added three new constructors Added get for iterator list Added extra null validation   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorChain.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/15 23:13:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorChain.java,v 1.2 2002/08/17 11:28:36 scolebourne Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/17 11:28:36 $\n  *\n  * ====================================================================\n  *\n package org.apache.commons.collections.iterators;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.NoSuchElementException;\n-\n /**\n  * <p>An IteratorChain is an Iterator that wraps one or\n  * more Iterators.  When any method from the\n  * <p>Calling a method that adds new Iterator<i>after\n  * a method in the Iterator interface\n  * has been called</i> will result in an\n- * UnsupportedOperationException.  However, <i>take care</i>\n+ * UnsupportedOperationException.  Subclasses should <i>take care</i>\n  * to not alter the underlying List of Iterators.</p>\n  * \n+ * @since 2.1\n  * @author Morgan Delagrange\n- * @version $Id: IteratorChain.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n- * @since 2.1\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: IteratorChain.java,v 1.2 2002/08/17 11:28:36 scolebourne Exp $\n  */\n public class IteratorChain implements Iterator {\n \n-    protected List iteratorChain = null;\n+    protected final List iteratorChain = new ArrayList();\n     protected int currentIteratorIndex = 0;\n     protected Iterator currentIterator = null;\n     // the \"last used\" Iterator is the Iterator upon which\n     // compare(Object,Object) is called\n     protected boolean isLocked = false;\n \n+    // Constructors\n+    // -------------------------------------------------------------------\n+    \n     /**\n      * Construct an IteratorChain with no Iterators.\n      * You must add at least Iterator before calling\n      * UnsupportedOperationException is thrown\n      */\n     public IteratorChain() {\n-        this(new ArrayList());\n+        super();\n     }\n \n     /**\n      * Construct an IteratorChain with a single Iterator.\n      * \n      * @param iterator first Iterator in the IteratorChain\n+     * @throws NullPointerException if the iterator is null\n      */\n     public IteratorChain(Iterator iterator) {\n-        iteratorChain = new ArrayList();\n-        iteratorChain.add(iterator);\n-    }\n-\n-    /**\n-     * Construct an IteratorChain from the Iterators in the\n-     * List.\n-     * \n-     * @param list   List of Iterators\n-     */\n-    public IteratorChain(List list) {\n-        iteratorChain = list;\n-    }\n+        super();\n+        addIterator(iterator);\n+    }\n+\n+    /**\n+     * Constructs a new <Code>IteratorChain</Code> over the two\n+     * given iterators.\n+     *\n+     * @param a  the first child iterator\n+     * @param b  the second child iterator\n+     * @throws NullPointerException if either iterator is null\n+     */\n+    public IteratorChain(Iterator a, Iterator b) {\n+        super();\n+        addIterator(a);\n+        addIterator(b);\n+    }\n+\n+    /**\n+     * Constructs a new <Code>IteratorChain</Code> over the array\n+     * of iterators.\n+     *\n+     * @param iterators  the array of iterators\n+     * @throws NullPointerException if iterators array is or contains null\n+     */\n+    public IteratorChain(Iterator[] iterators) {\n+        super();\n+        for (int i = 0; i < iterators.length; i++) {\n+            addIterator(iterators[i]);\n+        }\n+    }\n+\n+    /**\n+     * Constructs a new <Code>IteratorChain</Code> over the collection\n+     * of iterators.\n+     *\n+     * @param iterators  the collection of iterators\n+     * @throws NullPointerException if iterators collection is or contains null\n+     * @throws ClassCastException if iterators collection doesn't contain an iterator\n+     */\n+    public IteratorChain(Collection iterators) {\n+        super();\n+        for (Iterator it = iterators.iterator(); it.hasNext();) {\n+            Iterator item = (Iterator) it.next();\n+            addIterator(item);\n+        }\n+    }\n+    \n+    // Public Methods\n+    // -------------------------------------------------------------------\n \n     /**\n      * Add an Iterator to the end of the chain \n      * \n      * @param iterator Iterator to add\n+     * @throws IllegalStateException if I've already started iterating\n+     * @throws NullPointerException if the iterator is null\n      */\n     public void addIterator(Iterator iterator) {\n         checkLocked();\n-\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n         iteratorChain.add(iterator);\n     }\n \n     /**\n-     * Replace the Iterator at the given index     \n+     * Set the Iterator at the given index     \n      * \n      * @param index      index of the Iterator to replace\n      * @param iterator   Iterator to place at the given index\n-     * @exception IndexOutOfBoundsException\n-     *                   if index < 0 or index > size()\n-     */\n-    public void setIterator(int index, Iterator iterator) \n-    throws IndexOutOfBoundsException {\n+     * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt; size()\n+     * @throws IllegalStateException if I've already started iterating\n+     * @throws NullPointerException if the iterator is null\n+     */\n+    public void setIterator(int index, Iterator iterator) throws IndexOutOfBoundsException {\n         checkLocked();\n-\n-        iteratorChain.set(index,iterator);\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        iteratorChain.set(index, iterator);\n+    }\n+\n+    /**\n+     * Get the list of Iterators (unmodifiable)\n+     * \n+     * @return the unmodifiable list of iterators added\n+     */\n+    public List getIterators() {\n+        return Collections.unmodifiableList(iteratorChain);\n     }\n \n     /**", "timestamp": 1029583716, "metainfo": ""}