{"sha": "24264d13ed739634067f65dd5fb9a8d9a50ab55f", "log": "[COLLECTIONS-8] added comparator based predicate.  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/ComparatorPredicate.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate that compares the input object with the one stored in the predicate using a comparator.\n+ * In addition, the comparator result can be evaluated in accordance to a supplied criterion value.\n+ * \n+ * In order to demonstrate the use of the predicate, the following variables are declared:\n+ *\n+ * <pre>\n+ * Integer ONE = new Integer(1);\n+ * Integer TWO = new Integer(2);\n+ * \n+ * Comparator comparator = new Comparator() {\n+ *\n+ *     public int compare(Object first, Object second) {\n+ *\t       return ((Integer) second) - ((Integer) first);\n+ *\t   }\n+ *\n+ * };\n+ * </pre>\n+ * \n+ * Using the declared variables, the <code>ComparatorPredicate</code> can be used used in the\n+ * following way: \n+ * \n+ * <pre>\n+ * ComparatorPredicate.getInstance(ONE, comparator).evaluate(TWO); \n+ * </pre> \n+ * \n+ * The input variable <code>TWO</code> in compared to the stored variable <code>ONE</code> using\n+ * the supplied <code>comparator</code>. This is the default usage of the predicate and will return\n+ * <code>true</code> if the underlying comparator returns <code>0</code>. In addition to the default \n+ * usage of the predicate, it is possible to evaluate the comparator's result in several ways. The \n+ * following {@link Criterion} enumeration values are provided by the predicate:\n+ * </p>\n+ * \n+ * <ul>\n+ *     <li>EQUAL</li>\n+ *     <li>GREATER</li>\n+ *     <li>GREATER_OR_EQUAL</li>\n+ *     <li>LESS</li>\n+ *     <li>LESS_OR_EQUAL</li>\n+ * </ul> \n+ * \n+ * The following examples demonstrates how these constants can be used in order to manipulate the\n+ * evaluation of a comparator result.\n+ * \n+ * <pre>\n+ * ComparatorPredicate.getInstance(ONE, comparator, <b>ComparatorPredicate.Criterion.GREATER</b>).evaluate(TWO);\n+ * </pre>\n+ * \n+ * The input variable TWO is compared to the stored variable ONE using the supplied <code>comparator</code>\n+ * using the <code>GREATER</code> evaluation criterion constant. This instructs the predicate to\n+ * return <code>true</code> if the comparator returns a value greater than <code>0</code>.  \n+ *\n+ * @since Commons Collections 4.0\n+ * @version $Revision: $ $Date: $\n+ *\n+ * @author Rune Peter Bjrnstad.\n+ */\n+public class ComparatorPredicate<T> implements Predicate<T>, Serializable {\n+\n+    public enum Criterion {\n+        EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL, \n+    };\n+\n+    private static final long serialVersionUID = 1L;\n+\n+\t// Instance variables:\n+\t\n+\t/** The internal object to compare with */\n+\tprivate final T object;\n+\n+\t/** The comparator to use for comparison */\n+\tprivate final Comparator<T> comparator;\n+\n+\t/** The comparison evaluation criterion to use */\n+\tprivate final Criterion criterion;\n+\n+\t/**\n+\t * Factory to create the comparator predicate\n+\t * \n+\t * @param object  the object to compare to\n+\t * @param comparator  the comparator to use for comparison\n+\t * @return the predicate\n+\t * @throws IllegalArgumentException if comparator is null\n+\t */\n+\tpublic static <T> Predicate<T> getInstance(T object, Comparator<T> comparator) {\n+\t\treturn getInstance(object, comparator, Criterion.EQUAL);\n+\t}\n+\n+\t/**\n+\t * Factory to create the comparator predicate\n+\t * \n+\t * @param object  the object to compare to\n+\t * @param comparator  the comparator to use for comparison\n+\t * @param criterion  the criterion to use to evaluate comparison\n+\t * @return the predicate\n+\t * @throws IllegalArgumentexception if comparator is null of criterion is invalid\n+\t */\n+\tpublic static <T> Predicate<T> getInstance(T object, Comparator<T> comparator, Criterion criterion) {\n+        if (comparator == null) {\n+            throw new IllegalArgumentException(\"Comparator must not be null.\");\n+        }\n+        if (criterion == null) {\n+            throw new IllegalArgumentException(\"Criterion must not be null.\");\n+        }\n+\t\treturn new ComparatorPredicate<T>(object, comparator, criterion);\n+\t}\n+\n+\t/**\n+\t * Constructor that performs no validation.\n+\t * Use <code>getInstance</code> if you want.\n+\t * \n+\t * @param object  the object to compare to\n+\t * @param comparator  the comparator to use for comparison\n+\t * @param criterion  the criterion to use to evaluate comparison\n+\t */\n+\tpublic ComparatorPredicate(T object, Comparator<T> comparator, Criterion criterion) {\n+\t    super();\n+\t\tthis.object = object;\n+\t\tthis.comparator = comparator;\n+\t\tthis.criterion = criterion;\n+\t}\n+\n+\t/**\n+\t * Evaluates the predicate. The predicate evaluates to <code>true</code> in the following cases:\n+\t * \n+\t * <ul>\n+\t *     <li><code>comparator.compare(object, input) == 0 && criterion == EQUAL</code></li>\n+\t *     <li><code>comparator.compare(object, input) < 0 && criterion == LESS</code></li>\n+\t *     <li><code>comparator.compare(object, input) > 0 && criterion == GREATER</code></li>\n+\t *     <li><code>comparator.compare(object, input) >= 0 && criterion == GREATER_OR_EQUAL</code></li>\n+\t *     <li><code>comparator.compare(object, input) <= 0 && criterion == LESS_OR_EQUAL</code></li>\n+\t * </ul>\n+\t * \n+\t * @see org.apache.commons.collections.Predicate#evaluate(java.lang.Object)\n+\t * @see java.util.Comparator.compare(java.lang.Object first, java.lang.Object second)\n+\t * \n+\t * @throws IllegalStateException if the criterion is invalid (really not possible)\n+\t */\n+\tpublic boolean evaluate(T target) {\n+\n+\t\tboolean result = false;\n+\t\tint comparison = comparator.compare(object, target);\n+        switch (criterion) {\n+\t\tcase EQUAL:\n+\t\t\tresult = (comparison == 0);\n+\t\t\tbreak;\n+\t\tcase GREATER:\n+\t\t\tresult = (comparison > 0);\n+\t\t\tbreak;\n+\t\tcase LESS:\n+\t\t\tresult = (comparison < 0);\n+\t\t\tbreak;\n+\t\tcase GREATER_OR_EQUAL:\n+\t\t\tresult = (comparison >= 0);\n+\t\t\tbreak;\n+\t\tcase LESS_OR_EQUAL:\n+\t\t\tresult = (comparison <= 0);\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tthrow new IllegalStateException(\"The current criterion '\" + criterion + \"' is invalid.\");\n+\t\t}\n+\n+\t\treturn result;\n+\t}\n+}\n--- a/src/test/org/apache/commons/collections/functors/TestAll.java\n+++ b/src/test/org/apache/commons/collections/functors/TestAll.java\n  */\n @RunWith(Suite.class)\n @SuiteClasses({TestAllPredicate.class,\n+    TestComparatorPredicate.class,\n     TestEqualPredicate.class,\n     TestNullPredicate.class})\n public class TestAll extends TestCase {\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/functors/TestComparatorPredicate.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import static org.apache.commons.collections.functors.ComparatorPredicate.*;\n+import static org.junit.Assert.assertSame;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.junit.Test;\n+\n+\n+public class TestComparatorPredicate extends BasicPredicateTestBase {\n+    private class TestComparator<T extends Comparable<T>> implements Comparator<T> {\n+        public int compare(T first, T second) {\n+            return first.compareTo(second);\n+        }\n+    }\n+\n+    @Test\n+    public void compareEquals() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = getInstance(value, new TestComparator<Integer>());\n+        assertFalse(p, Integer.valueOf(value.intValue() - 1));\n+        assertTrue(p, Integer.valueOf(value.intValue()));\n+        assertFalse(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+\n+    @Test\n+    public void compareGreater() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = getInstance(value, new TestComparator<Integer>(), Criterion.GREATER);\n+        assertTrue(p, Integer.valueOf(value.intValue() - 1));\n+        assertFalse(p, Integer.valueOf(value.intValue()));\n+        assertFalse(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+\n+    @Test\n+    public void compareLess() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = getInstance(value, new TestComparator<Integer>(), Criterion.LESS);\n+        assertFalse(p, Integer.valueOf(value.intValue() - 1));\n+        assertFalse(p, Integer.valueOf(value.intValue()));\n+        assertTrue(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+\n+    @Test\n+    public void compareGreaterOrEqual() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = getInstance(value, new TestComparator<Integer>(), Criterion.GREATER_OR_EQUAL);\n+        assertTrue(p, Integer.valueOf(value.intValue() - 1));\n+        assertTrue(p, Integer.valueOf(value.intValue()));\n+        assertFalse(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+\n+    @Test\n+    public void compareLessOrEqual() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = getInstance(value, new TestComparator<Integer>(), Criterion.LESS_OR_EQUAL);\n+        assertFalse(p, Integer.valueOf(value.intValue() - 1));\n+        assertTrue(p, Integer.valueOf(value.intValue()));\n+        assertTrue(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+    \n+    @Override\n+    protected Predicate<?> generatePredicate() {\n+        return getInstance(Integer.valueOf(10), new TestComparator<Integer>());\n+    }    \n+}", "timestamp": 1287175473, "metainfo": ""}