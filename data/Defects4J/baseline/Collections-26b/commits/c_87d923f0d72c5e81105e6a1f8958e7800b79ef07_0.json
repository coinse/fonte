{"sha": "87d923f0d72c5e81105e6a1f8958e7800b79ef07", "log": "[COLLECTIONS-414] Fix type inference problems.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/functors/ChainedClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ChainedClosure.java\n         if (closures.length == 0) {\n             return NOPClosure.<E>nopClosure();\n         }\n-        closures = FunctorUtils.copy(closures);\n-        return new ChainedClosure<E>(closures);\n+        return new ChainedClosure<E>(FunctorUtils.copy(closures));\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/functors/ChainedTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ChainedTransformer.java\n         if (transformers.length == 0) {\n             return NOPTransformer.<T>nopTransformer();\n         }\n-        transformers = FunctorUtils.copy(transformers);\n-        return new ChainedTransformer<T>(transformers);\n+        return new ChainedTransformer<T>(FunctorUtils.copy(transformers));\n     }\n     \n     /**\n--- a/src/main/java/org/apache/commons/collections/functors/NonePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NonePredicate.java\n         if (predicates.length == 0) {\n             return TruePredicate.<T>truePredicate();\n         }\n-        predicates = FunctorUtils.copy(predicates);\n-        return new NonePredicate<T>(predicates);\n+        return new NonePredicate<T>(FunctorUtils.copy(predicates));\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/functors/OnePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/OnePredicate.java\n         if (predicates.length == 1) {\n             return (Predicate<T>) predicates[0];\n         }\n-        predicates = FunctorUtils.copy(predicates);\n-        return new OnePredicate<T>(predicates);\n+        return new OnePredicate<T>(FunctorUtils.copy(predicates));\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/functors/SwitchClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/SwitchClosure.java\n         if (predicates.length == 0) {\n             return (Closure<E>) (defaultClosure == null ? NOPClosure.<E>nopClosure(): defaultClosure);\n         }\n-        predicates = FunctorUtils.copy(predicates);\n-        closures = FunctorUtils.copy(closures);\n-        return new SwitchClosure<E>(predicates, closures, defaultClosure);\n+        return new SwitchClosure<E>(FunctorUtils.copy(predicates), FunctorUtils.copy(closures), defaultClosure);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/functors/SwitchTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/SwitchTransformer.java\n         if (predicates.length == 0) {\n             return (Transformer<I, O>) (defaultTransformer == null ? ConstantTransformer.<I, O>nullTransformer() : defaultTransformer);\n         }\n-        predicates = FunctorUtils.copy(predicates);\n-        transformers = FunctorUtils.copy(transformers);\n-        return new SwitchTransformer<I, O>(predicates, transformers, defaultTransformer);\n+        return new SwitchTransformer<I, O>(FunctorUtils.copy(predicates),\n+                                           FunctorUtils.copy(transformers),\n+                                           defaultTransformer);\n     }\n \n     /**", "timestamp": 1340455565, "metainfo": ""}