{"sha": "77013660403480fc70ab9218c9191fe157b6bae2", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r571381 | skestle | 2007-08-30 22:13:56 -0700 (Thu, 30 Aug 2007) | 1 line          Generified LazyMap     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/LazyMap.java\n+++ b/src/java/org/apache/commons/collections/map/LazyMap.java\n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n-public class LazyMap\n-        extends AbstractMapDecorator\n-        implements Map, Serializable {\n+public class LazyMap<K, V> extends AbstractMapDecorator<K, V> implements Map<K, V>, Serializable {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 7990956402564206740L;\n \n     /** The factory to use to construct elements */\n-    protected final Transformer factory;\n-\n-    /**\n-     * Factory method to create a lazily instantiated map.\n-     * \n-     * @param map  the map to decorate, must not be null\n-     * @param factory  the factory to use, must not be null\n-     * @throws IllegalArgumentException if map or factory is null\n-     */\n-    public static Map decorate(Map map, Factory factory) {\n-        return new LazyMap(map, factory);\n-    }\n-\n-    /**\n-     * Factory method to create a lazily instantiated map.\n-     * \n-     * @param map  the map to decorate, must not be null\n-     * @param factory  the factory to use, must not be null\n-     * @throws IllegalArgumentException if map or factory is null\n-     */\n-    public static Map decorate(Map map, Transformer factory) {\n-        return new LazyMap(map, factory);\n+    protected final Transformer<? super K, ? extends V> factory;\n+\n+    /**\n+     * Factory method to create a lazily instantiated map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     * @deprecated use {@link #getLazyMap(Map, Factory)} instead.\n+     */\n+    @Deprecated\n+    public static <K,V> Map<K,V> decorate(Map<K,V> map, Factory<? extends V> factory) {\n+        return getLazyMap(map, factory);\n+    }\n+\n+    /**\n+     * Factory method to create a lazily instantiated map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static <K, V> LazyMap<K, V> getLazyMap(Map<K, V> map, Factory< ? extends V> factory) {\n+        return new LazyMap<K,V>(map, factory);\n+    }\n+\n+    /**\n+     * Factory method to create a lazily instantiated map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     * @deprecated use {@link #getLazyMap(Map, Transformer)} instead.\n+     */\n+    @Deprecated\n+    public static <K,V> Map<K,V> decorate(Map<K,V> map, Transformer<? super K, ? extends V> factory) {\n+        return getLazyMap(map, factory);\n+    }\n+\n+    /**\n+     * Factory method to create a lazily instantiated map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static <V, K> LazyMap<K, V> getLazyMap(Map<K, V> map, Transformer<? super K, ? extends V> factory) {\n+        return new LazyMap<K,V>(map, factory);\n     }\n \n     //-----------------------------------------------------------------------\n      * @param factory  the factory to use, must not be null\n      * @throws IllegalArgumentException if map or factory is null\n      */\n-    protected LazyMap(Map map, Factory factory) {\n+    protected LazyMap(Map<K,V> map, Factory<? extends V> factory) {\n         super(map);\n         if (factory == null) {\n             throw new IllegalArgumentException(\"Factory must not be null\");\n      * @param factory  the factory to use, must not be null\n      * @throws IllegalArgumentException if map or factory is null\n      */\n-    protected LazyMap(Map map, Transformer factory) {\n+    protected LazyMap(Map<K,V> map, Transformer<? super K, ? extends V> factory) {\n         super(map);\n         if (factory == null) {\n             throw new IllegalArgumentException(\"Factory must not be null\");\n      * @throws ClassNotFoundException\n      * @since Commons Collections 3.1\n      */\n+    @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n         map = (Map) in.readObject();\n     }\n \n     //-----------------------------------------------------------------------\n-    public Object get(Object key) {\n+    @Override\n+    public V get(Object key) {\n         // create value for key if key is not currently in the map\n         if (map.containsKey(key) == false) {\n-            Object value = factory.transform(key);\n-            map.put(key, value);\n+            K castKey = cast(key);\n+            V value = factory.transform(castKey);\n+            map.put(castKey, value);\n             return value;\n         }\n         return map.get(key);\n     }\n \n+    /**\n+     * Method just to cast {@link Object}s to K where necessary.  This is done to ensure that the SuppressWarnings does not \n+     * cover other stuff that it shouldn't\n+     * @param key .\n+     * @return the cast key.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    private K cast(Object key) {\n+        return (K) key;\n+    }\n+\n     // no need to wrap keySet, entrySet or values as they are views of\n     // existing map entries - you can't do a map-style get on them.\n }", "timestamp": 1252994166, "metainfo": ""}