{"sha": "0db8c22eb19a52d4f22cfa9413e677ed3d53428c", "log": "[COLLECTIONS-567] Add Predicated and Synchronized decorators.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections4/multiset/PredicatedMultiSet.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.multiset;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections4.MultiSet;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.collection.PredicatedCollection;\n+\n+/**\n+ * Decorates another {@link MultiSet} to validate that additions\n+ * match a specified predicate.\n+ * <p>\n+ * This multiset exists to provide validation for the decorated multiset.\n+ * It is normally created to decorate an empty multiset.\n+ * If an object cannot be added to the multiset, an {@link IllegalArgumentException}\n+ * is thrown.\n+ * <p>\n+ * One usage would be to ensure that no null entries are added to the multiset.\n+ * <pre>\n+ * MultiSet&lt;E&gt; set =\n+ *      PredicatedMultiSet.predicatedMultiSet(new HashMultiSet&lt;E&gt;(),\n+ *                                            NotNullPredicate.notNullPredicate());\n+ * </pre>\n+ *\n+ * @since 4.1\n+ * @version $Id$\n+ */\n+public class PredicatedMultiSet<E> extends PredicatedCollection<E> implements MultiSet<E> {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 20150629L;\n+\n+    /**\n+     * Factory method to create a predicated (validating) multiset.\n+     * <p>\n+     * If there are any elements already in the multiset being decorated, they\n+     * are validated.\n+     *\n+     * @param <E> the type of the elements in the multiset\n+     * @param multiset  the multiset to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @return a new predicated MultiSet\n+     * @throws NullPointerException if multiset or predicate is null\n+     * @throws IllegalArgumentException if the multiset contains invalid elements\n+     */\n+    public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset,\n+                                                               final Predicate<? super E> predicate) {\n+        return new PredicatedMultiSet<E>(multiset, predicate);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the multiset being decorated, they\n+     * are validated.\n+     *\n+     * @param multiset  the multiset to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws NullPointerException if multiset or predicate is null\n+     * @throws IllegalArgumentException if the multiset contains invalid elements\n+     */\n+    protected PredicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate) {\n+        super(multiset, predicate);\n+    }\n+\n+    /**\n+     * Gets the decorated multiset.\n+     *\n+     * @return the decorated multiset\n+     */\n+    @Override\n+    protected MultiSet<E> decorated() {\n+        return (MultiSet<E>) super.decorated();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object object) {\n+        return object == this || decorated().equals(object);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return decorated().hashCode();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    @Override\n+    public int add(final E object, final int count) {\n+        validate(object);\n+        return decorated().add(object, count);\n+    }\n+\n+    @Override\n+    public int remove(final Object object, final int count) {\n+        return decorated().remove(object, count);\n+    }\n+\n+    @Override\n+    public int getCount(final Object object) {\n+        return decorated().getCount(object);\n+    }\n+\n+    @Override\n+    public int setCount(E object, int count) {\n+        validate(object);\n+        return decorated().setCount(object, count);\n+    }\n+\n+    @Override\n+    public Set<E> uniqueSet() {\n+        return decorated().uniqueSet();\n+    }\n+\n+    @Override\n+    public Set<MultiSet.Entry<E>> entrySet() {\n+        return decorated().entrySet();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections4/multiset/SynchronizedMultiSet.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.multiset;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections4.MultiSet;\n+import org.apache.commons.collections4.collection.SynchronizedCollection;\n+\n+/**\n+ * Decorates another {@link MultiSet} to synchronize its behaviour\n+ * for a multi-threaded environment.\n+ * <p>\n+ * Methods are synchronized, then forwarded to the decorated multiset.\n+ * Iterators must be separately synchronized around the loop.\n+ *\n+ * @since 4.1\n+ * @version $Id$\n+ */\n+public class SynchronizedMultiSet<E> extends SynchronizedCollection<E> implements MultiSet<E> {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 20150629L;\n+\n+    /**\n+     * Factory method to create a synchronized multiset.\n+     *\n+     * @param <E> the type of the elements in the multiset\n+     * @param multiset  the multiset to decorate, must not be null\n+     * @return a new synchronized MultiSet\n+     * @throws NullPointerException if multiset is null\n+     */\n+    public static <E> SynchronizedMultiSet<E> synchronizedBag(final MultiSet<E> multiset) {\n+        return new SynchronizedMultiSet<E>(multiset);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     *\n+     * @param multiset  the multiset to decorate, must not be null\n+     * @throws NullPointerException if multiset is null\n+     */\n+    protected SynchronizedMultiSet(final MultiSet<E> multiset) {\n+        super(multiset);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     *\n+     * @param multiset  the multiset to decorate, must not be null\n+     * @param lock  the lock to use, must not be null\n+     * @throws NullPointerException if multiset or lock is null\n+     */\n+    protected SynchronizedMultiSet(final MultiSet<E> multiset, final Object lock) {\n+        super(multiset, lock);\n+    }\n+\n+    /**\n+     * Gets the multiset being decorated.\n+     *\n+     * @return the decorated multiset\n+     */\n+    @Override\n+    protected MultiSet<E> decorated() {\n+        return (MultiSet<E>) super.decorated();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object object) {\n+        if (object == this) {\n+            return true;\n+        }\n+        synchronized (lock) {\n+            return decorated().equals(object);\n+        }\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        synchronized (lock) {\n+            return decorated().hashCode();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    @Override\n+    public int add(final E object, final int count) {\n+        synchronized (lock) {\n+            return decorated().add(object, count);\n+        }\n+    }\n+\n+    @Override\n+    public int remove(final Object object, final int count) {\n+        synchronized (lock) {\n+            return decorated().remove(object, count);\n+        }\n+    }\n+\n+    @Override\n+    public int getCount(final Object object) {\n+        synchronized (lock) {\n+            return decorated().getCount(object);\n+        }\n+    }\n+\n+    @Override\n+    public int setCount(E object, int count) {\n+        synchronized (lock) {\n+            return decorated().setCount(object, count);\n+        }\n+    }\n+\n+    @Override\n+    public Set<E> uniqueSet() {\n+        synchronized (lock) {\n+            final Set<E> set = decorated().uniqueSet();\n+            return new SynchronizedSet<E>(set, lock);\n+        }\n+    }\n+\n+    @Override\n+    public Set<Entry<E>> entrySet() {\n+        synchronized (lock) {\n+            final Set<MultiSet.Entry<E>> set = decorated().entrySet();\n+            return new SynchronizedSet<MultiSet.Entry<E>>(set, lock);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Synchronized Set for the MultiSet class.\n+     */\n+    static class SynchronizedSet<T> extends SynchronizedCollection<T> implements Set<T> {\n+        /** Serialization version */\n+        private static final long serialVersionUID = 20150629L;\n+\n+        /**\n+         * Constructor.\n+         * @param set  the set to decorate\n+         * @param lock  the lock to use, shared with the multiset\n+         */\n+        SynchronizedSet(final Set<T> set, final Object lock) {\n+            super(set, lock);\n+        }\n+    }\n+\n+}\n--- a/src/main/java/org/apache/commons/collections4/multiset/package-info.java\n+++ b/src/main/java/org/apache/commons/collections4/multiset/package-info.java\n  * <p>\n  * The following decorators are provided in the package:\n  * <ul>\n+ *   <li>Predicated   - ensures that only elements that are valid according to a predicate can be added\n  *   <li>Synchronized - synchronizes method access for multi-threaded environments\n  *   <li>Unmodifiable - ensures the multiset cannot be altered\n- *   <li>Predicated - ensures that only elements that are valid according to a predicate can be added\n- *   <li>Transformed - transforms each element added to the multiset\n  * </ul>\n  *\n  * @version $Id$", "timestamp": 1435613334, "metainfo": ""}