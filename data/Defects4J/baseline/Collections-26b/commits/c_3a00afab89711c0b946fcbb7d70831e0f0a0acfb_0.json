{"sha": "3a00afab89711c0b946fcbb7d70831e0f0a0acfb", "log": "Fix boxing and some raw types warninga  ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n  * @author Janek Bogucki\n  * @author Neil O'Toole\n  */\n+@SuppressWarnings(\"boxing\")\n public class TestMapUtils extends BulkTest {\n \n     public TestMapUtils(String name) {\n \n     public void testPopulateMap() {\n         // Setup Test Data\n-        List list = new ArrayList();\n+        List<String> list = new ArrayList<String>();\n         list.add(\"1\");\n         list.add(\"3\");\n         list.add(\"5\");\n         list.add(\"6\");\n \n         // Now test key transform population\n-        Map map = new HashMap();\n+        Map<Object, Object> map = new HashMap<Object, Object>();\n         MapUtils.populateMap(map, list, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(list.size(), map.size());\n \n         for (int i = 0; i < list.size(); i++) {\n-            assertEquals(true, map.containsKey(new Integer((String) list.get(i))));\n+            assertEquals(true, map.containsKey(new Integer(list.get(i))));\n             assertEquals(false, map.containsKey(list.get(i)));\n             assertEquals(true, map.containsValue(list.get(i)));\n-            assertEquals(list.get(i), map.get(new Integer((String) list.get(i))));\n+            assertEquals(list.get(i), map.get(new Integer(list.get(i))));\n         }\n \n         // Now test both Key-Value transform population\n-        map = new HashMap();\n+        map = new HashMap<Object, Object>();\n         MapUtils.populateMap(map, list, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n \n         assertEquals(list.size(), map.size());\n         for (int i = 0; i < list.size(); i++) {\n-            assertEquals(true, map.containsKey(new Integer((String) list.get(i))));\n+            assertEquals(true, map.containsKey(new Integer(list.get(i))));\n             assertEquals(false, map.containsKey(list.get(i)));\n-            assertEquals(true, map.containsValue(new Integer((String) list.get(i))));\n-            assertEquals(new Integer((String) list.get(i)), map.get(new Integer((String) list.get(i))));\n+            assertEquals(true, map.containsValue(new Integer(list.get(i))));\n+            assertEquals(new Integer(list.get(i)), map.get(new Integer(list.get(i))));\n         }\n     }\n \n--- a/src/test/org/apache/commons/collections/TestPredicateUtils.java\n+++ b/src/test/org/apache/commons/collections/TestPredicateUtils.java\n  * @author Stephen Colebourne\n  * @author Matt Benson\n  */\n+@SuppressWarnings(\"boxing\")\n public class TestPredicateUtils extends BasicPredicateTestBase {\n     /**\n      * Set up instance variables required by this test case.\n--- a/src/test/org/apache/commons/collections/buffer/TestPriorityBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestPriorityBuffer.java\n  * @author Michael A. Smith\n  * @author Steve Phelps\n  */\n+@SuppressWarnings(\"boxing\")\n public class TestPriorityBuffer<E> extends AbstractTestCollection<E> {\n \n     public TestPriorityBuffer(String testName) {\n--- a/src/test/org/apache/commons/collections/comparators/TestBooleanComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestBooleanComparator.java\n  *\n  * @author Rodney Waldhoff\n  */\n+@SuppressWarnings(\"boxing\")\n public class TestBooleanComparator extends AbstractTestComparator<Boolean> {\n \n     // conventional\n--- a/src/test/org/apache/commons/collections/comparators/TestComparableComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparableComparator.java\n  *\n  * @version $Revision$ $Date$\n  *\n- * @author Unknown\n  */\n+@SuppressWarnings(\"boxing\")\n public class TestComparableComparator extends AbstractTestComparator<Integer> {\n \n     public TestComparableComparator(String testName) {\n--- a/src/test/org/apache/commons/collections/functors/AbstractTestAnyAllOnePredicate.java\n+++ b/src/test/org/apache/commons/collections/functors/AbstractTestAnyAllOnePredicate.java\n      * Tests creating composite predicate instances with single predicates and verifies that the composite returns\n      * the same value as the single predicate does. \n      */\n+    @SuppressWarnings(\"boxing\")\n     public final void singleValues() {\n         assertTrue(getPredicateInstance(true).evaluate(null));\n         assertFalse(getPredicateInstance(false).evaluate(null));\n--- a/src/test/org/apache/commons/collections/functors/MockPredicateTestBase.java\n+++ b/src/test/org/apache/commons/collections/functors/MockPredicateTestBase.java\n      *\n      * @return a single mock predicate.\n      */\n-    @SuppressWarnings({\"unchecked\"})\n+    @SuppressWarnings({\"unchecked\", \"boxing\"})\n     protected final Predicate<T> createMockPredicate(final Boolean returnValue) {\n         final Predicate<T> mockPredicate = EasyMock.createMock(Predicate.class);\n         if (returnValue != null) {\n--- a/src/test/org/apache/commons/collections/functors/TestAllPredicate.java\n+++ b/src/test/org/apache/commons/collections/functors/TestAllPredicate.java\n  *\n  * @author Edwin Tellman\n  */\n+@SuppressWarnings(\"boxing\")\n public class TestAllPredicate extends AbstractTestAnyAllOnePredicate<Integer> {\n \n     /**\n--- a/src/test/org/apache/commons/collections/functors/TestEqualPredicate.java\n+++ b/src/test/org/apache/commons/collections/functors/TestEqualPredicate.java\n         assertTrue(equalPredicate(TRUE_OBJECT), TRUE_OBJECT);\n     }\n     \n+    @SuppressWarnings(\"boxing\")\n     @Test\n     public void testPredicateTypeCanBeSuperClassOfObject() throws Exception {\n         Predicate<Number> predicate = equalPredicate((Number) 4);\n--- a/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java\n  * @version $Revision$ $Date$\n  * @author Rodney Waldhoff\n  */\n+@SuppressWarnings(\"boxing\")\n public class TestCollatingIterator extends AbstractTestIterator<Integer> {\n \n     //------------------------------------------------------------ Conventional\n--- a/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java\n  *\n  * @author Rodney Waldhoff\n  */\n+@SuppressWarnings(\"boxing\")\n public class TestFilterListIterator extends TestCase {\n     public TestFilterListIterator(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/map/TestLazyMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLazyMap.java\n  *\n  * @author Phil Steitz\n  */\n+@SuppressWarnings(\"boxing\")\n public class TestLazyMap<K, V> extends AbstractTestIterableMap<K, V> {\n \n     private static final Factory<Integer> oneFactory = FactoryUtils.constantFactory(1);\n--- a/src/test/org/apache/commons/collections/map/TestLazySortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLazySortedMap.java\n  *\n  * @author Phil Steitz\n  */\n+@SuppressWarnings(\"boxing\")\n public class TestLazySortedMap<K, V> extends AbstractTestSortedMap<K, V> {\n     \n     private static final Factory<Integer> oneFactory = FactoryUtils.constantFactory(1);", "timestamp": 1287416847, "metainfo": ""}