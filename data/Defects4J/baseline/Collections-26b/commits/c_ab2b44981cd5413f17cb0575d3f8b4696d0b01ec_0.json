{"sha": "ab2b44981cd5413f17cb0575d3f8b4696d0b01ec", "log": "Refactor functors from inner classes to subpackage   ", "commit": "\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PredicateUtils.java,v 1.13 2003/11/23 19:11:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PredicateUtils.java,v 1.14 2003/11/23 22:05:24 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n-import java.io.Serializable;\n import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.Set;\n-\n+\n+import org.apache.commons.collections.functors.AllPredicate;\n+import org.apache.commons.collections.functors.AndPredicate;\n+import org.apache.commons.collections.functors.AnyPredicate;\n import org.apache.commons.collections.functors.EqualPredicate;\n import org.apache.commons.collections.functors.ExceptionPredicate;\n import org.apache.commons.collections.functors.FalsePredicate;\n-import org.apache.commons.collections.functors.FunctorException;\n import org.apache.commons.collections.functors.IdentityPredicate;\n import org.apache.commons.collections.functors.InstanceofPredicate;\n+import org.apache.commons.collections.functors.NonePredicate;\n import org.apache.commons.collections.functors.NotNullPredicate;\n import org.apache.commons.collections.functors.NotPredicate;\n import org.apache.commons.collections.functors.NullIsExceptionPredicate;\n import org.apache.commons.collections.functors.NullIsFalsePredicate;\n import org.apache.commons.collections.functors.NullIsTruePredicate;\n import org.apache.commons.collections.functors.NullPredicate;\n+import org.apache.commons.collections.functors.OnePredicate;\n+import org.apache.commons.collections.functors.OrPredicate;\n+import org.apache.commons.collections.functors.TransformerPredicate;\n import org.apache.commons.collections.functors.TruePredicate;\n+import org.apache.commons.collections.functors.UniquePredicate;\n \n /**\n  * <code>PredicateUtils</code> provides reference implementations and utilities\n  * All the supplied predicates are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.13 $ $Date: 2003/11/23 19:11:21 $\n+ * @version $Revision: 1.14 $ $Date: 2003/11/23 22:05:24 $\n  * \n  * @author Stephen Colebourne\n  * @author Ola Berg\n      */\n     public static Predicate uniquePredicate() {\n         // must return new instance each time\n-        return new UniquePredicate();\n+        return UniquePredicate.getInstance();\n     }\n \n     /**\n      * @throws IllegalArgumentException if either predicate is null\n      */\n     public static Predicate andPredicate(Predicate predicate1, Predicate predicate2) {\n-        return allPredicate(new Predicate[] { predicate1, predicate2 });\n+        return AndPredicate.getInstance(predicate1, predicate2);\n     }\n \n     /**\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static Predicate allPredicate(Predicate[] predicates) {\n-        return new AllPredicate(validate(predicates));\n+        return AllPredicate.getInstance(predicates);\n     }\n \n     /**\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      */\n     public static Predicate allPredicate(Collection predicates) {\n-        return new AllPredicate(validate(predicates));\n+        return AllPredicate.getInstance(predicates);\n     }\n \n     /**\n      * @throws IllegalArgumentException if either predicate is null\n      */\n     public static Predicate orPredicate(Predicate predicate1, Predicate predicate2) {\n-        return anyPredicate(new Predicate[] { predicate1, predicate2 });\n+        return OrPredicate.getInstance(predicate1, predicate2);\n     }\n \n     /**\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static Predicate anyPredicate(Predicate[] predicates) {\n-        return new AnyPredicate(validate(predicates));\n+        return AnyPredicate.getInstance(predicates);\n     }\n \n     /**\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      */\n     public static Predicate anyPredicate(Collection predicates) {\n-        return new AnyPredicate(validate(predicates));\n+        return AnyPredicate.getInstance(predicates);\n     }\n \n     /**\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static Predicate onePredicate(Predicate[] predicates) {\n-        return new OnePredicate(validate(predicates));\n+        return OnePredicate.getInstance(predicates);\n     }\n \n     /**\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      */\n     public static Predicate onePredicate(Collection predicates) {\n-        return new OnePredicate(validate(predicates));\n+        return OnePredicate.getInstance(predicates);\n     }\n \n     /**\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static Predicate nonePredicate(Predicate[] predicates) {\n-        Predicate[] preds = validate(predicates);\n-        for (int i = 0; i < preds.length; i++) {\n-            preds[i] = notPredicate(preds[i]);\n-        }\n-        return new AllPredicate(preds);\n+        return NonePredicate.getInstance(predicates);\n     }\n \n     /**\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      */\n     public static Predicate nonePredicate(Collection predicates) {\n-        Predicate[] preds = validate(predicates);\n-        for (int i = 0; i < preds.length; i++) {\n-            preds[i] = notPredicate(preds[i]);\n-        }\n-        return new AllPredicate(preds);\n+        return NonePredicate.getInstance(predicates);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the transformer is null\n      */\n     public static Predicate asPredicate(Transformer transformer) {\n-        if (transformer == null) {\n-            throw new IllegalArgumentException(\"The transformer to call must not be null\");\n-        }\n-        return new TransformerPredicate(transformer);\n+        return TransformerPredicate.getInstance(transformer);\n     }\n \n     // Null handlers\n         return NullIsTruePredicate.getInstance(predicate);\n     }\n \n-    /**\n-     * Convert a collection to an array using the iterator.\n-     * \n-     * @param predicates  the predicates to validate\n-     * @return predicate array\n-     */\n-    private static Predicate[] validate(Collection predicates) {\n-        if (predicates == null) {\n-            throw new IllegalArgumentException(\"The predicate collection must not be null\");\n-        }\n-        if (predicates.size() < 2) {\n-            throw new IllegalArgumentException(\n-                \"At least 2 predicates must be specified in the predicate collection, size was \" + predicates.size());\n-        }\n-        // convert to array like this to guarantee iterator() ordering\n-        Predicate[] preds = new Predicate[predicates.size()];\n-        int i = 0;\n-        for (Iterator it = predicates.iterator(); it.hasNext();) {\n-            preds[i] = (Predicate) it.next();\n-            if (preds[i] == null) {\n-                throw new IllegalArgumentException(\"The predicate collection must not contain a null predicate, index \" + i + \" was null\");\n-            }\n-            i++;\n-        }\n-        return preds;\n-    }\n-    \n-    /**\n-     * Validate method shared amongst predicate implementations.\n-     * \n-     * @param predicates  the predicates to validate\n-     * @return predicate array (copy)\n-     */\n-    private static Predicate[] validate(Predicate[] predicates) {\n-        if (predicates == null) {\n-            throw new IllegalArgumentException(\"The predicate array must not be null\");\n-        }\n-        if (predicates.length < 2) {\n-            throw new IllegalArgumentException(\n-                \"At least 2 predicates must be specified in the predicate array, size was \" + predicates.length);\n-        }\n-        Predicate[] preds = new Predicate[predicates.length];\n-        for (int i = 0; i < predicates.length; i++) {\n-            if (predicates[i] == null) {\n-                throw new IllegalArgumentException(\"The predicate array must not contain a null predicate, index \" + i + \" was null\");\n-            }\n-            preds[i] = predicates[i];\n-        }\n-        return preds;\n-    }\n-\n-    // AllPredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * AllPredicate returns true if all predicates return true\n-     */\n-    private static class AllPredicate implements Predicate, Serializable {\n-        /** The array of predicates to call */\n-        private final Predicate[] iPredicates;\n-\n-        /**\n-         * Constructor\n-         */\n-        private AllPredicate(Predicate[] predicates) {\n-            super();\n-            iPredicates = predicates;\n-        }\n-\n-        /**\n-         * Return true if all predicates return true\n-         */\n-        public boolean evaluate(Object object) {\n-            for (int i = 0; i < iPredicates.length; i++) {\n-                if (iPredicates[i].evaluate(object) == false) {\n-                    return false;\n-                }\n-            }\n-            return true;\n-        }\n-    }\n-\n-    // AnyPredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * AnyPredicate returns true if one of the predicates return true\n-     */\n-    private static class AnyPredicate implements Predicate, Serializable {\n-        /** The array of predicates to call */\n-        private final Predicate[] iPredicates;\n-\n-        /**\n-         * Constructor\n-         */\n-        private AnyPredicate(Predicate[] predicates) {\n-            super();\n-            iPredicates = predicates;\n-        }\n-\n-        /**\n-         * Return true if one of the predicates returns true\n-         */\n-        public boolean evaluate(Object object) {\n-            for (int i = 0; i < iPredicates.length; i++) {\n-                if (iPredicates[i].evaluate(object)) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n-    }\n-\n-    // OnePredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * OnePredicate returns true if only one of the predicates return true\n-     */\n-    private static class OnePredicate implements Predicate, Serializable {\n-        /** The array of predicates to call */\n-        private final Predicate[] iPredicates;\n-\n-        /**\n-         * Constructor\n-         */\n-        private OnePredicate(Predicate[] predicates) {\n-            super();\n-            iPredicates = predicates;\n-        }\n-\n-        /**\n-         * Return true if only one of the predicates returns true\n-         */\n-        public boolean evaluate(Object object) {\n-            boolean match = false;\n-            for (int i = 0; i < iPredicates.length; i++) {\n-                if (iPredicates[i].evaluate(object)) {\n-                    if (match) {\n-                        return false;\n-                    }\n-                    match = true;\n-                }\n-            }\n-            return match;\n-        }\n-    }\n-\n-    // UniquePredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * UniquePredicate returns true the first time an object is\n-     * encountered, and false if the same object is received \n-     * again using equals().\n-     */\n-    private static class UniquePredicate implements Predicate, Serializable {\n-        /** The set of previously seen objects */\n-        private final Set iSet = new HashSet();\n-\n-        /**\n-         * Constructor\n-         */\n-        public UniquePredicate() {\n-            super();\n-        }\n-\n-        /**\n-         * Return true the first time, and false subsequent times\n-         * that an object is encountered, using equals().\n-         */\n-        public boolean evaluate(Object object) {\n-            return iSet.add(object);\n-        }\n-    }\n-\n-    // TransformerPredicate\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * TransformerPredicate returns the result of the Transformer as a boolean.\n-     */\n-    private static class TransformerPredicate implements Predicate, Serializable {\n-        /** The transformer to call */\n-        private final Transformer iTransformer;\n-\n-        /**\n-         * Constructor\n-         */\n-        public TransformerPredicate(Transformer transformer) {\n-            super();\n-            iTransformer = transformer;\n-        }\n-\n-        /**\n-         * Return the boolean result of a Transformer\n-         */\n-        public boolean evaluate(Object object) {\n-            Object result = iTransformer.transform(object);\n-            if (result instanceof Boolean == false) {\n-                throw new FunctorException(\n-                    \"TransformerPredicate: Transformer must return an instanceof Boolean, it was a \"\n-                        + (result == null ? \"null object\" : result.getClass().getName()));\n-            }\n-            return ((Boolean) result).booleanValue();\n-        }\n-    }\n-\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/AllPredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/AllPredicate.java,v 1.1 2003/11/23 22:05:24 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true if all the predicates return true.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 22:05:24 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class AllPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = -3094696765038308799L;\n+    \n+    /** The array of predicates to call */\n+    private final Predicate[] iPredicates;\n+    \n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @param predicates  the predicates to check, cloned, not null\n+     * @return the <code>all</code> predicate\n+     * @throws IllegalArgumentException if the predicates array is null\n+     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n+     * @throws IllegalArgumentException if any predicate in the array is null\n+     */\n+    public static Predicate getInstance(Predicate[] predicates) {\n+        FunctorUtils.validateMin2(predicates);\n+        predicates = FunctorUtils.copy(predicates);\n+        return new AllPredicate(predicates);\n+    }\n+\n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @param predicates  the predicates to check, cloned, not null\n+     * @return the <code>all</code> predicate\n+     * @throws IllegalArgumentException if the predicates array is null\n+     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n+     */\n+    public static Predicate getInstance(Collection predicates) {\n+        Predicate[] preds = FunctorUtils.validate(predicates);\n+        return new AllPredicate(preds);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param predicates  the predicates to check, not cloned, not null\n+     */\n+    public AllPredicate(Predicate[] predicates) {\n+        super();\n+        iPredicates = predicates;\n+    }\n+\n+    /**\n+     * Return the predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+        for (int i = 0; i < iPredicates.length; i++) {\n+            if (iPredicates[i].evaluate(object) == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/AndPredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/AndPredicate.java,v 1.1 2003/11/23 22:05:24 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true if both the predicates return true.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 22:05:24 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class AndPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = 4189014213763186912L;\n+    \n+    /** The array of predicates to call */\n+    private final Predicate iPredicate1;\n+    /** The array of predicates to call */\n+    private final Predicate iPredicate2;\n+    \n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @param predicate1  the first predicate to check, not null\n+     * @param predicate2  the second predicate to check, not null\n+     * @return the <code>and</code> predicate\n+     * @throws IllegalArgumentException if either predicate is null\n+     */\n+    public static Predicate getInstance(Predicate predicate1, Predicate predicate2) {\n+        if (predicate1 == null || predicate2 == null) {\n+            throw new IllegalArgumentException(\"Predicate must not be null\");\n+        }\n+        return new AndPredicate(predicate1, predicate2);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param predicate1  the first predicate to check, not null\n+     * @param predicate2  the second predicate to check, not null\n+     */\n+    public AndPredicate(Predicate predicate1, Predicate predicate2) {\n+        super();\n+        iPredicate1 = predicate1;\n+        iPredicate2 = predicate2;\n+    }\n+\n+    /**\n+     * Return the predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+       return (iPredicate1.evaluate(object) && iPredicate2.evaluate(object));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/AnyPredicate.java,v 1.1 2003/11/23 22:05:24 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true if any of the predicates return true.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 22:05:24 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class AnyPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = 7429999530934647542L;\n+    \n+    /** The array of predicates to call */\n+    private final Predicate[] iPredicates;\n+    \n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @param predicates  the predicates to check, cloned, not null\n+     * @return the <code>any</code> predicate\n+     * @throws IllegalArgumentException if the predicates array is null\n+     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n+     * @throws IllegalArgumentException if any predicate in the array is null\n+     */\n+    public static Predicate getInstance(Predicate[] predicates) {\n+        FunctorUtils.validateMin2(predicates);\n+        predicates = FunctorUtils.copy(predicates);\n+        return new AnyPredicate(predicates);\n+    }\n+\n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @param predicates  the predicates to check, cloned, not null\n+     * @return the <code>all</code> predicate\n+     * @throws IllegalArgumentException if the predicates array is null\n+     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n+     */\n+    public static Predicate getInstance(Collection predicates) {\n+        Predicate[] preds = FunctorUtils.validate(predicates);\n+        return new AnyPredicate(preds);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param predicates  the predicates to check, not cloned, not null\n+     */\n+    public AnyPredicate(Predicate[] predicates) {\n+        super();\n+        iPredicates = predicates;\n+    }\n+\n+    /**\n+     * Return the predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+        for (int i = 0; i < iPredicates.length; i++) {\n+            if (iPredicates[i].evaluate(object)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n+}\n--- a/src/java/org/apache/commons/collections/functors/FunctorUtils.java\n+++ b/src/java/org/apache/commons/collections/functors/FunctorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/FunctorUtils.java,v 1.1 2003/11/23 17:01:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/FunctorUtils.java,v 1.2 2003/11/23 22:05:24 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.functors;\n \n+import java.util.Collection;\n+import java.util.Iterator;\n+\n import org.apache.commons.collections.Closure;\n import org.apache.commons.collections.Predicate;\n \n  * Internal utilities for functors.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 17:01:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/23 22:05:24 $\n  *\n  * @author Stephen Colebourne\n  */\n             }\n         }\n     }\n+    \n+    /**\n+     * Validate the predicates to ensure that all is well.\n+     * \n+     * @param predicates  the predicates to validate\n+     * @return the validated predicates\n+     */\n+    static void validateMin2(Predicate[] predicates) {\n+        if (predicates == null) {\n+            throw new IllegalArgumentException(\"The predicate array must not be null\");\n+        }\n+        if (predicates.length < 2) {\n+            throw new IllegalArgumentException(\n+                \"At least 2 predicates must be specified in the predicate array, size was \" + predicates.length);\n+        }\n+        for (int i = 0; i < predicates.length; i++) {\n+            if (predicates[i] == null) {\n+                throw new IllegalArgumentException(\"The predicate array must not contain a null predicate, index \" + i + \" was null\");\n+            }\n+        }\n+    }\n \n+    /**\n+     * Validate the predicates to ensure that all is well.\n+     * \n+     * @param predicates  the predicates to validate\n+     * @return predicate array\n+     */\n+    static Predicate[] validate(Collection predicates) {\n+        if (predicates == null) {\n+            throw new IllegalArgumentException(\"The predicate collection must not be null\");\n+        }\n+        if (predicates.size() < 2) {\n+            throw new IllegalArgumentException(\n+                \"At least 2 predicates must be specified in the predicate collection, size was \" + predicates.size());\n+        }\n+        // convert to array like this to guarantee iterator() ordering\n+        Predicate[] preds = new Predicate[predicates.size()];\n+        int i = 0;\n+        for (Iterator it = predicates.iterator(); it.hasNext();) {\n+            preds[i] = (Predicate) it.next();\n+            if (preds[i] == null) {\n+                throw new IllegalArgumentException(\"The predicate collection must not contain a null predicate, index \" + i + \" was null\");\n+            }\n+            i++;\n+        }\n+        return preds;\n+    }\n+    \n     /**\n      * Clone the closures to ensure that the internal reference can't be messed with.\n      * \n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/NonePredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/NonePredicate.java,v 1.1 2003/11/23 22:05:24 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true if none of the predicates return true.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 22:05:24 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class NonePredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = 2007613066565892961L;\n+    \n+    /** The array of predicates to call */\n+    private final Predicate[] iPredicates;\n+    \n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @param predicates  the predicates to check, cloned, not null\n+     * @return the <code>any</code> predicate\n+     * @throws IllegalArgumentException if the predicates array is null\n+     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n+     * @throws IllegalArgumentException if any predicate in the array is null\n+     */\n+    public static Predicate getInstance(Predicate[] predicates) {\n+        FunctorUtils.validateMin2(predicates);\n+        predicates = FunctorUtils.copy(predicates);\n+        return new NonePredicate(predicates);\n+    }\n+\n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @param predicates  the predicates to check, cloned, not null\n+     * @return the <code>one</code> predicate\n+     * @throws IllegalArgumentException if the predicates array is null\n+     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n+     */\n+    public static Predicate getInstance(Collection predicates) {\n+        Predicate[] preds = FunctorUtils.validate(predicates);\n+        return new NonePredicate(preds);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param predicates  the predicates to check, not cloned, not null\n+     */\n+    public NonePredicate(Predicate[] predicates) {\n+        super();\n+        iPredicates = predicates;\n+    }\n+\n+    /**\n+     * Return the predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+        for (int i = 0; i < iPredicates.length; i++) {\n+            if (iPredicates[i].evaluate(object)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/OnePredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/OnePredicate.java,v 1.1 2003/11/23 22:05:24 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true if only one of the predicates return true.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 22:05:24 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class OnePredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = -8125389089924745785L;\n+    \n+    /** The array of predicates to call */\n+    private final Predicate[] iPredicates;\n+    \n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @param predicates  the predicates to check, cloned, not null\n+     * @return the <code>any</code> predicate\n+     * @throws IllegalArgumentException if the predicates array is null\n+     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n+     * @throws IllegalArgumentException if any predicate in the array is null\n+     */\n+    public static Predicate getInstance(Predicate[] predicates) {\n+        FunctorUtils.validateMin2(predicates);\n+        predicates = FunctorUtils.copy(predicates);\n+        return new OnePredicate(predicates);\n+    }\n+\n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @param predicates  the predicates to check, cloned, not null\n+     * @return the <code>one</code> predicate\n+     * @throws IllegalArgumentException if the predicates array is null\n+     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n+     */\n+    public static Predicate getInstance(Collection predicates) {\n+        Predicate[] preds = FunctorUtils.validate(predicates);\n+        return new OnePredicate(preds);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param predicates  the predicates to check, not cloned, not null\n+     */\n+    public OnePredicate(Predicate[] predicates) {\n+        super();\n+        iPredicates = predicates;\n+    }\n+\n+    /**\n+     * Return the predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+        boolean match = false;\n+        for (int i = 0; i < iPredicates.length; i++) {\n+            if (iPredicates[i].evaluate(object)) {\n+                if (match) {\n+                    return false;\n+                }\n+                match = true;\n+            }\n+        }\n+        return match;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/OrPredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/OrPredicate.java,v 1.1 2003/11/23 22:05:24 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true if either of the predicates return true.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 22:05:24 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class OrPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = -8791518325735182855L;\n+    \n+    /** The array of predicates to call */\n+    private final Predicate iPredicate1;\n+    /** The array of predicates to call */\n+    private final Predicate iPredicate2;\n+    \n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @param predicate1  the first predicate to check, not null\n+     * @param predicate2  the second predicate to check, not null\n+     * @return the <code>and</code> predicate\n+     * @throws IllegalArgumentException if either predicate is null\n+     */\n+    public static Predicate getInstance(Predicate predicate1, Predicate predicate2) {\n+        if (predicate1 == null || predicate2 == null) {\n+            throw new IllegalArgumentException(\"Predicate must not be null\");\n+        }\n+        return new OrPredicate(predicate1, predicate2);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param predicate1  the first predicate to check, not null\n+     * @param predicate2  the second predicate to check, not null\n+     */\n+    public OrPredicate(Predicate predicate1, Predicate predicate2) {\n+        super();\n+        iPredicate1 = predicate1;\n+        iPredicate2 = predicate2;\n+    }\n+\n+    /**\n+     * Return the predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+       return (iPredicate1.evaluate(object) || iPredicate2.evaluate(object));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/TransformerPredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/TransformerPredicate.java,v 1.1 2003/11/23 22:05:24 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * Predicate implementation that returns the result of a transformer.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 22:05:24 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class TransformerPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = -2407966402920578741L;\n+    \n+    /** The transformer to call */\n+    private final Transformer iTransformer;\n+    \n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @return the transformer\n+     * @throws IllegalArgumentException if the transformer is null\n+     */\n+    public static Predicate getInstance(Transformer transformer) {\n+        if (transformer == null) {\n+            throw new IllegalArgumentException(\"The transformer to call must not be null\");\n+        }\n+        return new TransformerPredicate(transformer);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     */\n+    public TransformerPredicate(Transformer transformer) {\n+        super();\n+        iTransformer = transformer;\n+    }\n+\n+    /**\n+     * Return the predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+        Object result = iTransformer.transform(object);\n+        if (result instanceof Boolean == false) {\n+            throw new FunctorException(\n+                \"Transformer must return an instanceof Boolean, it was a \"\n+                    + (result == null ? \"null object\" : result.getClass().getName()));\n+        }\n+        return ((Boolean) result).booleanValue();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/UniquePredicate.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/UniquePredicate.java,v 1.1 2003/11/23 22:05:24 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate implementation that returns true the first time an object is\n+ * passed into the predicate.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 22:05:24 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public final class UniquePredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = -3319417438027438040L;\n+    \n+    /** The set of previously seen objects */\n+    private final Set iSet = new HashSet();\n+    \n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @return the predicate\n+     * @throws IllegalArgumentException if the predicate is null\n+     */\n+    public static Predicate getInstance() {\n+        return new UniquePredicate();\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     */\n+    public UniquePredicate() {\n+        super();\n+    }\n+\n+    /**\n+     * Return the predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+        return iSet.add(object);\n+    }\n+    \n+}", "timestamp": 1069625124, "metainfo": ""}