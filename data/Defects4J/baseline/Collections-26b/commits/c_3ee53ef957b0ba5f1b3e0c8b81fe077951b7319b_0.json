{"sha": "3ee53ef957b0ba5f1b3e0c8b81fe077951b7319b", "log": "Move map interfaces to main package Add AMap interface Add HashedMap implementation   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/AMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AMap.java,v 1.1 2003/12/01 22:34:55 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.collections.iterators.MapIterator;\n+\n+/**\n+ * Defines a map that can be iterated directly without needing to create an entry set.\n+ * <p>\n+ * A map iterator is an efficient way of iterating over maps.\n+ * There is no need to access the entry set or cast to Map Entry objects.\n+ * <pre>\n+ * AMap map = new HashedMap();\n+ * MapIterator it = map.mapIterator();\n+ * while (it.hasNext()) {\n+ *   Object key = it.next();\n+ *   Object value = it.getValue();\n+ *   it.setValue(\"newValue\");\n+ * }\n+ * </pre>\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/01 22:34:55 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public interface AMap extends Map {\n+    \n+    /**\n+     * Obtains a <code>MapIterator</code> over the map.\n+     * <p>\n+     * A map iterator is an efficient way of iterating over maps.\n+     * There is no need to access the entry set or cast to Map Entry objects.\n+     * <pre>\n+     * AMap map = new HashedMap();\n+     * MapIterator it = map.mapIterator();\n+     * while (it.hasNext()) {\n+     *   Object key = it.next();\n+     *   Object value = it.getValue();\n+     *   it.setValue(\"newValue\");\n+     * }\n+     * </pre>\n+     * \n+     * @return a map iterator\n+     */\n+    MapIterator mapIterator();\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/BidiMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.8 2003/12/01 22:34:55 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.collections.iterators.MapIterator;\n+\n+/**\n+ * Defines a map that allows bidirectional lookup between key and values.\n+ * <p>\n+ * This extended <code>Map</code> represents a mapping where a key may\n+ * lookup a value and a value may lookup a key with equal ease.\n+ * Th interface extends <code>Map</code> and so may be used anywhere a map\n+ * is required. The interface provides an inverse map view, enabling\n+ * full access to both directions of the <code>BidiMap</code>.\n+ * <p>\n+ * Implementations should allow a value to be looked up from a key and\n+ * a key to be looked up from a value with equal performance.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.8 $ $Date: 2003/12/01 22:34:55 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public interface BidiMap extends Map {\n+    \n+    /**\n+     * Obtains a <code>MapIterator</code> over the map.\n+     * <p>\n+     * A map iterator is an efficient way of iterating over maps.\n+     * It does not require that the map is stored using Map Entry objects\n+     * which can increase performance.\n+     * <pre>\n+     * BidiMap map = new DualHashBidiMap();\n+     * MapIterator it = map.mapIterator();\n+     * while (it.hasNext()) {\n+     *   Object key = it.next();\n+     *   Object value = it.getValue();\n+     *   it.setValue(\"newValue\");\n+     * }\n+     * </pre>\n+     * \n+     * @return a map iterator\n+     */\n+    MapIterator mapIterator();\n+    \n+    /**\n+     * Puts the key-value pair into the map, replacing any previous pair.\n+     * <p>\n+     * When adding a key-value pair, the value may already exist in the map\n+     * against a different key. That mapping is removed, to ensure that the\n+     * value only occurs once in the inverse map.\n+     * <pre>\n+     *  BidiMap map1 = new DualHashBidiMap();\n+     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n+     *  map.put(\"A\",\"C\");  // contains A mapped to C, as per Map\n+     * \n+     *  BidiMap map2 = new DualHashBidiMap();\n+     *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n+     *  map.put(\"C\",\"B\");  // contains C mapped to B, key A is removed\n+     * </pre>\n+     *\n+     * @param key  the key to store\n+     * @param value  the value to store\n+     * @return the previous value mapped to this key\n+     * \n+     * @throws UnsupportedOperationException if the <code>put</code> method is not supported\n+     * @throws ClassCastException (optional) if the map limits the type of the \n+     *  value and the specifed value is inappropriate\n+     * @throws IllegalArgumentException (optional) if the map limits the values\n+     *  in some way and the value was invalid\n+     * @throws NullPointerException (optional) if the map limits the values to\n+     *  non-null and null was specified\n+     */\n+    Object put(Object key, Object value);\n+    \n+    /**\n+     * Gets the key that is currently mapped to the specified value.\n+     * <p>\n+     * If the value is not contained in the map, <code>null</code> is returned.\n+     * <p>\n+     * Implementations should seek to make this method perform equally as well\n+     * as <code>get(Object)</code>.\n+     *\n+     * @param value  the value to find the key for\n+     * @return the mapped key, or <code>null</code> if not found\n+     * \n+     * @throws ClassCastException (optional) if the map limits the type of the \n+     *  value and the specifed value is inappropriate\n+     * @throws NullPointerException (optional) if the map limits the values to\n+     *  non-null and null was specified\n+     */\n+    Object getKey(Object value);\n+    \n+    /**\n+     * Removes the key-value pair that is currently mapped to the specified\n+     * value (optional operation).\n+     * <p>\n+     * If the value is not contained in the map, <code>null</code> is returned.\n+     * <p>\n+     * Implementations should seek to make this method perform equally as well\n+     * as <code>remove(Object)</code>.\n+     *\n+     * @param value  the value to find the key-value pair for\n+     * @return the key that was removed, <code>null</code> if nothing removed\n+     * \n+     * @throws ClassCastException (optional) if the map limits the type of the \n+     *  value and the specifed value is inappropriate\n+     * @throws NullPointerException (optional) if the map limits the values to\n+     *  non-null and null was specified\n+     * @throws UnsupportedOperationException if this method is not supported\n+     *  by the implementation\n+     */\n+    Object removeValue(Object value);\n+    \n+    /**\n+     * Gets a view of this map where the keys and values are reversed.\n+     * <p>\n+     * Changes to one map will be visible in the other and vice versa.\n+     * This enables both directions of the map to be accessed as a <code>Map</code>.\n+     * <p>\n+     * Implementations should seek to avoid creating a new object every time this\n+     * method is called. See <code>AbstractMap.values()</code> etc. Calling this\n+     * method on the inverse map should return the original.\n+     *\n+     * @return an inverted bidirectional map\n+     */\n+    BidiMap inverseBidiMap();\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/OrderedBidiMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/OrderedBidiMap.java,v 1.1 2003/12/01 22:34:55 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+/**\n+ * Defines a map that allows bidirectional lookup between key and values\n+ * and retains and provides access to an ordering.\n+ * <p>\n+ * Implementations should allow a value to be looked up from a key and\n+ * a key to be looked up from a value with equal performance.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/01 22:34:55 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public interface OrderedBidiMap extends BidiMap, OrderedMap {\n+    \n+    /**\n+     * Gets a view of this map where the keys and values are reversed.\n+     * <p>\n+     * Changes to one map will be visible in the other and vice versa.\n+     * This enables both directions of the map to be accessed equally.\n+     * <p>\n+     * Implementations should seek to avoid creating a new object every time this\n+     * method is called. See <code>AbstractMap.values()</code> etc. Calling this\n+     * method on the inverse map should return the original.\n+     * <p>\n+     * Implementations must return an <code>OrderedBidiMap</code> instance,\n+     * usually by forwarding to <code>inverseOrderedBidiMap()</code>.\n+     *\n+     * @return an inverted bidirectional map\n+     */\n+    public BidiMap inverseBidiMap();\n+    \n+    /**\n+     * Gets a view of this map where the keys and values are reversed.\n+     * <p>\n+     * Changes to one map will be visible in the other and vice versa.\n+     * This enables both directions of the map to be accessed equally.\n+     * <p>\n+     * Implementations should seek to avoid creating a new object every time this\n+     * method is called. See <code>AbstractMap.values()</code> etc. Calling this\n+     * method on the inverse map should return the original.\n+     *\n+     * @return an inverted bidirectional map\n+     */\n+    public OrderedBidiMap inverseOrderedBidiMap();\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/OrderedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/OrderedMap.java,v 1.1 2003/12/01 22:34:55 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import org.apache.commons.collections.iterators.OrderedMapIterator;\n+\n+/**\n+ * Defines a map that maintains order and allows both forward and backward\n+ * iteration through that order.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/01 22:34:55 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public interface OrderedMap extends AMap {\n+    \n+    /**\n+     * Obtains an <code>OrderedMapIterator</code> over the map.\n+     * <p>\n+     * A ordered map iterator is an efficient way of iterating over maps\n+     * in both directions.\n+     * <pre>\n+     * BidiMap map = new TreeBidiMap();\n+     * MapIterator it = map.mapIterator();\n+     * while (it.hasNext()) {\n+     *   Object key = it.next();\n+     *   Object value = it.getValue();\n+     *   it.setValue(\"newValue\");\n+     *   Object previousKey = it.previous();\n+     * }\n+     * </pre>\n+     * \n+     * @return a map iterator\n+     */\n+    OrderedMapIterator orderedMapIterator();\n+    \n+    /**\n+     * Gets the first key currently in this map.\n+     *\n+     * @return the first key currently in this map\n+     * @throws NoSuchElementException if this map is empty\n+     */\n+    public Object firstKey();\n+\n+    /**\n+     * Gets the last key currently in this map.\n+     *\n+     * @return the last key currently in this map\n+     * @throws NoSuchElementException if this map is empty\n+     */\n+    public Object lastKey();\n+    \n+    /**\n+     * Gets the next key after the one specified.\n+     *\n+     * @param key  the key to search for next from\n+     * @return the next key, null if no match or at end\n+     */\n+    public Object nextKey(Object key);\n+\n+    /**\n+     * Gets the previous key before the one specified.\n+     *\n+     * @param key  the key to search for previous from\n+     * @return the previous key, null if no match or at start\n+     */\n+    public Object previousKey(Object key);\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/SortedBidiMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SortedBidiMap.java,v 1.3 2003/12/01 22:34:55 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.SortedMap;\n+\n+/**\n+ * Defines a map that allows bidirectional lookup between key and values\n+ * and retains both keys and values in sorted order.\n+ * <p>\n+ * Implementations should allow a value to be looked up from a key and\n+ * a key to be looked up from a value with equal performance.\n+ *  \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.3 $ $Date: 2003/12/01 22:34:55 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public interface SortedBidiMap extends OrderedBidiMap, SortedMap {\n+    \n+    /**\n+     * Gets a view of this map where the keys and values are reversed.\n+     * <p>\n+     * Changes to one map will be visible in the other and vice versa.\n+     * This enables both directions of the map to be accessed equally.\n+     * <p>\n+     * Implementations should seek to avoid creating a new object every time this\n+     * method is called. See <code>AbstractMap.values()</code> etc. Calling this\n+     * method on the inverse map should return the original.\n+     * <p>\n+     * Implementations must return a <code>SortedBidiMap</code> instance,\n+     * usually by forwarding to <code>inverseSortedBidiMap()</code>.\n+     *\n+     * @return an inverted bidirectional map\n+     */\n+    public BidiMap inverseBidiMap();\n+    \n+    /**\n+     * Gets a view of this map where the keys and values are reversed.\n+     * <p>\n+     * Changes to one map will be visible in the other and vice versa.\n+     * This enables both directions of the map to be accessed as a <code>SortedMap</code>.\n+     * <p>\n+     * Implementations should seek to avoid creating a new object every time this\n+     * method is called. See <code>AbstractMap.values()</code> etc. Calling this\n+     * method on the inverse map should return the original.\n+     * <p>\n+     * The inverse map returned by <code>inverseBidiMap()</code> should be the\n+     * same object as returned by this method.\n+     *\n+     * @return an inverted bidirectional map\n+     */\n+    public SortedBidiMap inverseSortedBidiMap();\n+    \n+}\n--- a/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java,v 1.1 2003/11/16 20:35:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java,v 1.2 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.commons.collections.BidiMap;\n import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n import org.apache.commons.collections.iterators.MapIterator;\n  * <code>createMap</code> method.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: AbstractDualBidiMap.java,v 1.1 2003/11/16 20:35:46 scolebourne Exp $\n+ * @version $Id: AbstractDualBidiMap.java,v 1.2 2003/12/01 22:34:54 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java,v 1.1 2003/11/16 20:35:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java,v 1.2 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.HashMap;\n import java.util.Map;\n \n+import org.apache.commons.collections.BidiMap;\n+\n /**\n  * Implementation of <code>BidiMap</code> that uses two <code>HashMap</code> instances.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: DualHashBidiMap.java,v 1.1 2003/11/16 20:35:46 scolebourne Exp $\n+ * @version $Id: DualHashBidiMap.java,v 1.2 2003/12/01 22:34:54 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java,v 1.3 2003/11/20 00:31:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java,v 1.4 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n+import org.apache.commons.collections.BidiMap;\n+import org.apache.commons.collections.OrderedBidiMap;\n+import org.apache.commons.collections.OrderedMap;\n+import org.apache.commons.collections.SortedBidiMap;\n import org.apache.commons.collections.iterators.OrderedMapIterator;\n import org.apache.commons.collections.iterators.ResettableIterator;\n import org.apache.commons.collections.map.AbstractSortedMapDecorator;\n-import org.apache.commons.collections.map.OrderedMap;\n \n /**\n  * Implementation of <code>BidiMap</code> that uses two <code>TreeMap</code> instances.\n  * not store each object twice, which can save on memory use.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: DualTreeBidiMap.java,v 1.3 2003/11/20 00:31:42 scolebourne Exp $\n+ * @version $Id: DualTreeBidiMap.java,v 1.4 2003/12/01 22:34:54 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java,v 1.2 2003/11/20 00:31:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java,v 1.3 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n import java.util.Set;\n \n+import org.apache.commons.collections.BidiMap;\n import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.OrderedBidiMap;\n import org.apache.commons.collections.iterators.MapIterator;\n import org.apache.commons.collections.iterators.OrderedIterator;\n import org.apache.commons.collections.iterators.OrderedMapIterator;\n  * UnsupportedOperationException on attempts to call that method.\n  *\n  * @since Commons Collections 3.0 (previously DoubleOrderedMap v2.0)\n- * @version $Revision: 1.2 $ $Date: 2003/11/20 00:31:42 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/01 22:34:54 $\n  * \n  * @author Marc Johnson\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java,v 1.1 2003/11/20 22:33:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java,v 1.2 2003/12/01 22:34:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.map;\n \n+import org.apache.commons.collections.OrderedMap;\n import org.apache.commons.collections.iterators.MapIterator;\n import org.apache.commons.collections.iterators.OrderedMapIterator;\n \n  * But, you might want that loophole, so this class is kept simple.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/20 22:33:54 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/01 22:34:53 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/Flat3Map.java,v 1.2 2003/11/18 23:34:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/Flat3Map.java,v 1.3 2003/12/01 22:34:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n import java.util.Set;\n \n+import org.apache.commons.collections.AMap;\n import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.iterators.EntrySetMapIterator;\n import org.apache.commons.collections.iterators.MapIterator;\n  * Do not use <code>Flat3Map</code> if the size is likely to grow beyond 3.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/18 23:34:47 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/01 22:34:53 $\n  *\n  * @author Stephen Colebourne\n  */\n-public class Flat3Map implements Map {\n+public class Flat3Map implements AMap {\n     \n     /** The size of the map, used while in flat mode */\n     private int iSize;\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/HashedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.1 2003/12/01 22:34:53 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.AbstractCollection;\n+import java.util.AbstractSet;\n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.AMap;\n+import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.iterators.MapIterator;\n+\n+/**\n+ * A <code>Map</code> implementation that is a general purpose replacement\n+ * for <code>HashMap</code>.\n+ * <p>\n+ * This implementation improves on the JDK1.4 HahMap by adding the \n+ * {@link org.apache.commons.collections.iterators.MapIterator MapIterator}\n+ * functionality and improving performance of <code>putAll</code>.\n+ * <p>\n+ * The implementation is also designed to be subclassed, with lots of useful\n+ * methods exposed.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/01 22:34:53 $\n+ *\n+ * @author java util HashMap\n+ * @author Stephen Colebourne\n+ */\n+public class HashedMap implements AMap, Serializable, Cloneable {\n+    \n+    /** Serialisation version */\n+    static final long serialVersionUID = -1593250834999590599L;\n+    /** The default capacity to use */\n+    protected static final int DEFAULT_CAPACITY = 16;\n+    /** The default load factor to use */\n+    protected static final float DEFAULT_LOAD_FACTOR = 0.75f;\n+    /** The maximum capacity allowed */\n+    protected static final int MAXIMUM_CAPACITY = 1 << 30;\n+    /** An object for masking null */\n+    protected static final Object NULL = new Object();\n+    \n+    /** Load factor, normally 0.75 */\n+    private final float loadFactor;\n+    /** The size of the map */\n+    private transient int size;\n+    /** Map entries */\n+    private transient HashEntry[] data;\n+    /** Size at which to rehash */\n+    private transient int threshold;\n+    /** Modification count for iterators */\n+    private transient int modCount;\n+    /** Entry set */\n+    private transient EntrySet entrySet;\n+    /** Key set */\n+    private transient KeySet keySet;\n+    /** Values */\n+    private transient Values values;\n+\n+    /**\n+     * Constructs a new empty map with default size and load factor.\n+     */\n+    public HashedMap() {\n+        super();\n+        this.loadFactor = DEFAULT_LOAD_FACTOR;\n+        this.threshold = calculateThreshold(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);\n+        this.data = new HashEntry[DEFAULT_CAPACITY];\n+    }\n+\n+    /**\n+     * Constructs a new, empty map with the specified initial capacity. \n+     *\n+     * @param initialCapacity  the initial capacity\n+     * @throws IllegalArgumentException if the initial capacity is less than one\n+     */\n+    public HashedMap(int initialCapacity) {\n+        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n+    }\n+\n+    /**\n+     * Constructs a new, empty map with the specified initial capacity and\n+     * load factor. \n+     *\n+     * @param initialCapacity  the initial capacity\n+     * @param loadFactor  the load factor\n+     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the load factor is less than one\n+     */\n+    public HashedMap(int initialCapacity, float loadFactor) {\n+        super();\n+        if (initialCapacity < 1) {\n+            throw new IllegalArgumentException(\"Initial capacity must be greater than 0\");\n+        }\n+        if (loadFactor <= 0 || Float.isNaN(loadFactor)) {\n+            throw new IllegalArgumentException(\"Load factor must be greater than 0\");\n+        }\n+        this.loadFactor = loadFactor;\n+        this.threshold = calculateThreshold(initialCapacity, loadFactor);\n+        initialCapacity = calculateNewCapacity(initialCapacity);\n+        this.data = new HashEntry[initialCapacity];\n+    }\n+\n+    /**\n+     * Constructor copying elements from another map.\n+     *\n+     * @param map  the map to copy\n+     * @throws NullPointerException if the map is null\n+     */\n+    public HashedMap(Map map) {\n+        this(Math.max(2 * map.size(), DEFAULT_CAPACITY), DEFAULT_LOAD_FACTOR);\n+        putAll(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the value mapped to the key specified.\n+     * \n+     * @param key  the key\n+     * @return the mapped value, null if no match\n+     */\n+    public Object get(Object key) {\n+        key = convertKey(key);\n+        int hashCode = hash(key);\n+        HashEntry entry = data[hashIndex(hashCode, data.length)]; // no local for hash index\n+        while (entry != null) {\n+            if (entry.hashCode == hashCode && isEqualKey(key, entry.key)) {\n+                return entry.getValue();\n+            }\n+            entry = entry.next;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Gets the size of the map.\n+     * \n+     * @return the size\n+     */\n+    public int size() {\n+        return size;\n+    }\n+\n+    /**\n+     * Checks whether the map is currently empty.\n+     * \n+     * @return true if the map is currently size zero\n+     */\n+    public boolean isEmpty() {\n+        return (size == 0);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks whether the map contains the specified key.\n+     * \n+     * @param key  the key to search for\n+     * @return true if the map contains the key\n+     */\n+    public boolean containsKey(Object key) {\n+        key = convertKey(key);\n+        int hashCode = hash(key);\n+        HashEntry entry = data[hashIndex(hashCode, data.length)]; // no local for hash index\n+        while (entry != null) {\n+            if (entry.hashCode == hashCode && isEqualKey(key, entry.key)) {\n+                return true;\n+            }\n+            entry = entry.next;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Checks whether the map contains the specified value.\n+     * \n+     * @param value  the value to search for\n+     * @return true if the map contains the value\n+     */\n+    public boolean containsValue(Object value) {\n+        if (value == null) {\n+            for (int i = 0, isize = data.length; i < isize; i++) {\n+                HashEntry entry = data[i];\n+                while (entry != null) {\n+                    if (entry.getValue() == null) {\n+                        return true;\n+                    }\n+                    entry = entry.next;\n+                }\n+            }\n+        } else {\n+            for (int i = 0, isize = data.length; i < isize; i++) {\n+                HashEntry entry = data[i];\n+                while (entry != null) {\n+                    if (isEqualValue(value, entry.getValue())) {\n+                        return true;\n+                    }\n+                    entry = entry.next;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Puts a key-value mapping into this map.\n+     * \n+     * @param key  the key to add\n+     * @param value  the value to add\n+     * @return the value previously mapped to this key, null if none\n+     */\n+    public Object put(Object key, Object value) {\n+        key = convertKey(key);\n+        int hashCode = hash(key);\n+        int index = hashIndex(hashCode, data.length);\n+        HashEntry entry = data[index];\n+        while (entry != null) {\n+            if (entry.hashCode == hashCode && isEqualKey(key, entry.key)) {\n+                Object oldValue = entry.getValue();\n+                entry.setValue(value);\n+                return oldValue;\n+            }\n+            entry = entry.next;\n+        }\n+        \n+        modCount++;\n+        add(hashCode, index, key, value);\n+        return null;\n+    }\n+\n+    /**\n+     * Puts all the values from the specified map into this map.\n+     * \n+     * @param map  the map to add\n+     * @throws NullPointerException if the map is null\n+     */\n+    public void putAll(Map map) {\n+        int mapSize = map.size();\n+        if (mapSize == 0) {\n+            return;\n+        }\n+        ensureCapacity(calculateNewCapacity(size + mapSize));\n+        for (Iterator it = map.entrySet().iterator(); it.hasNext();) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            put(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    /**\n+     * Removes the specified mapping from this map.\n+     * \n+     * @param key  the mapping to remove\n+     * @return the value mapped to the removed key, null if key not in map\n+     */\n+    public Object remove(Object key) {\n+        key = convertKey(key);\n+        int hashCode = hash(key);\n+        int index = hashIndex(hashCode, data.length);\n+        HashEntry entry = data[index]; \n+        HashEntry previous = null;\n+        while (entry != null) {\n+            if (entry.hashCode == hashCode && isEqualKey(key, entry.key)) {\n+                modCount++;\n+                if (previous == null) {\n+                    data[index] = entry.next;\n+                } else {\n+                    previous.next = entry.next;\n+                }\n+                size--;\n+                return destroyEntry(entry);\n+            }\n+            previous = entry;\n+            entry = entry.next;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Clears the map, resetting the size to zero and nullifying references\n+     * to avoid garbage collection issues.\n+     */\n+    public void clear() {\n+        modCount++;\n+        HashEntry[] data = this.data;\n+        for (int i = data.length - 1; i >= 0; i--) {\n+            data[i] = null;\n+        }\n+        size = 0;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Converts input keys to another object for storage in the map.\n+     * This implementation masks nulls.\n+     * Subclasses can override this to perform alternate key conversions.\n+     * <p>\n+     * The reverse conversion can be changed, if required, by overriding the\n+     * getKey() method in the hash entry.\n+     * \n+     * @param key  the key to get a hash code for\n+     * @return the hash code\n+     */\n+    protected Object convertKey(Object key) {\n+        return (key == null ? NULL : key);\n+    }\n+    \n+    /**\n+     * Gets the hash code for the key specified.\n+     * This implementation uses the additional hashing routine from JDK1.4.\n+     * Subclasses can override this to return alternate hash codes.\n+     * \n+     * @param key  the key to get a hash code for\n+     * @return the hash code\n+     */\n+    protected int hash(Object key) {\n+        // same as JDK 1.4\n+        int h = key.hashCode();\n+        h += ~(h << 9);\n+        h ^=  (h >>> 14);\n+        h +=  (h << 4);\n+        h ^=  (h >>> 10);\n+        return h;\n+    }\n+    \n+    /**\n+     * Compares two keys for equals.\n+     * This implementation uses the equals method.\n+     * Subclasses can override this to match differently.\n+     * \n+     * @param key1  the first key to compare\n+     * @param key2  the second key to compare\n+     * @return true if equal\n+     */\n+    protected boolean isEqualKey(Object key1, Object key2) {\n+        return (key1 == key2 || key1.equals(key2));\n+    }\n+    \n+    /**\n+     * Compares two values for equals.\n+     * This implementation uses the equals method.\n+     * Subclasses can override this to match differently.\n+     * \n+     * @param value1  the first value to compare\n+     * @param value2  the second value to compare\n+     * @return true if equal\n+     */\n+    protected boolean isEqualValue(Object value1, Object value2) {\n+        return (value1 == value2 || value1.equals(value2));\n+    }\n+    \n+    /**\n+     * Gets the index into the data storage for the hashCode specified.\n+     * This implementation uses the least significant bits of the hashCode.\n+     * Subclasses can override this to return alternate bucketing.\n+     * \n+     * @param hashCode  the hash code to use\n+     * @param dataSize  the size of the data to pick a bucket from\n+     * @return the bucket index\n+     */\n+    protected int hashIndex(int hashCode, int dataSize) {\n+        return hashCode & (dataSize - 1);\n+    }\n+    \n+    /**\n+     * Creates an entry to store the data.\n+     * This implementation creates a HashEntry instance.\n+     * Subclasses can override this to return a different storage class,\n+     * or implement caching.\n+     * \n+     * @param next  the next entry in sequence\n+     * @param hashCode  the hash code to use\n+     * @param key  the key to store\n+     * @param value  the value to store\n+     * @return the newly created entry\n+     */\n+    protected HashEntry createEntry(HashEntry next, int hashCode, Object key, Object value) {\n+        return new HashEntry(next, hashCode, key, value);\n+    }\n+    \n+    /**\n+     * Kills an entry ready for the garbage collector.\n+     * This implementation prepares the HashEntry for garbage collection.\n+     * Subclasses can override this to implement caching (override clear as well).\n+     * \n+     * @param entry  the entry to destroy\n+     * @return the value from the entry\n+     */\n+    protected Object destroyEntry(HashEntry entry) {\n+        entry.next = null;\n+        return entry.value;\n+    }\n+    \n+    /**\n+     * Adds a new key-value mapping into this map.\n+     * Subclasses could override to fix the size of the map.\n+     * \n+     * @param key  the key to add\n+     * @param value  the value to add\n+     * @return the value previously mapped to this key, null if none\n+     */\n+    protected void add(int hashCode, int hashIndex, Object key, Object value) {\n+        data[hashIndex] = createEntry(data[hashIndex], hashCode, key, value);\n+        if (size++ >= threshold) {\n+            ensureCapacity(data.length * 2);\n+        }\n+    }\n+    \n+    /**\n+     * Changes the size of the data structure to the capacity proposed.\n+     * \n+     * @param newCapacity  the new capacity of the array\n+     */\n+    protected void ensureCapacity(int newCapacity) {\n+        int oldCapacity = data.length;\n+        if (newCapacity <= oldCapacity) {\n+            return;\n+        }\n+        HashEntry oldEntries[] = data;\n+        HashEntry newEntries[] = new HashEntry[newCapacity];\n+\n+        modCount++;\n+        for (int i = oldCapacity - 1; i >= 0; i--) {\n+            HashEntry entry = oldEntries[i];\n+            if (entry != null) {\n+                oldEntries[i] = null;  // gc\n+                do {\n+                    HashEntry next = entry.next;\n+                    int index = hashIndex(entry.hashCode, newCapacity);  \n+                    entry.next = newEntries[index];\n+                    newEntries[index] = entry;\n+                    entry = next;\n+                } while (entry != null);\n+            }\n+        }\n+        threshold = calculateThreshold(newCapacity, loadFactor);\n+        data = newEntries;\n+    }\n+\n+    /**\n+     * Calculates the new capacity of the map.\n+     * This implementation normalizes the capacity to a power of two.\n+     * \n+     * @param proposedCapacity  the proposed capacity\n+     * @return the normalized new capacity\n+     */\n+    protected int calculateNewCapacity(int proposedCapacity) {\n+        int newCapacity = 1;\n+        if (proposedCapacity > MAXIMUM_CAPACITY) {\n+            newCapacity = MAXIMUM_CAPACITY;\n+        } else {\n+            while (newCapacity < proposedCapacity) {\n+                newCapacity <<= 1;  // multiply by two\n+            }\n+            if (proposedCapacity > MAXIMUM_CAPACITY) {\n+                newCapacity = MAXIMUM_CAPACITY;\n+            }\n+        }\n+        return newCapacity;\n+    }\n+    \n+    /**\n+     * Calculates the new threshold of the map, where it will be resized.\n+     * This implementation uses the load factor.\n+     * \n+     * @param newCapacity  the new capacity\n+     * @param factor  the load factor\n+     * @return the new resize threshold\n+     */\n+    protected int calculateThreshold(int newCapacity, float factor) {\n+        return (int) (newCapacity * factor);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets an iterator over the map.\n+     * Changes made to the iterator affect this map.\n+     * <p>\n+     * A MapIterator returns the keys in the map. It also provides convenient\n+     * methods to get the key and value, and set the value.\n+     * It avoids the need to create an entrySet/keySet/values object.\n+     * It also avoids creating the Mep Entry object.\n+     * \n+     * @return the map iterator\n+     */\n+    public MapIterator mapIterator() {\n+        if (size == 0) {\n+            return IteratorUtils.EMPTY_MAP_ITERATOR;\n+        }\n+        return new HashMapIterator(this);\n+    }\n+\n+    /**\n+     * MapIterator\n+     */\n+    static class HashMapIterator extends HashIterator implements MapIterator {\n+        \n+        HashMapIterator(HashedMap map) {\n+            super(map);\n+        }\n+\n+        public Object next() {\n+            return super.nextEntry().getKey();\n+        }\n+\n+        public Object getKey() {\n+            HashEntry current = currentEntry();\n+            if (current == null) {\n+                throw new IllegalStateException(\"Iterator remove() can only be called once after next()\");\n+            }\n+            return current.getKey();\n+        }\n+\n+        public Object getValue() {\n+            HashEntry current = currentEntry();\n+            if (current == null) {\n+                throw new IllegalStateException(\"Iterator remove() can only be called once after next()\");\n+            }\n+            return current.getValue();\n+        }\n+\n+        public Object setValue(Object value) {\n+            HashEntry current = currentEntry();\n+            if (current == null) {\n+                throw new IllegalStateException(\"Iterator remove() can only be called once after next()\");\n+            }\n+            Object old = current.getValue();\n+            current.setValue(value);\n+            return old;\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    /**\n+     * Gets the entrySet view of the map.\n+     * Changes made to the view affect this map.\n+     * The Map Entry is not an independent object and changes as the \n+     * iterator progresses.\n+     * To simply iterate through the entries, use {@link #mapIterator()}.\n+     * \n+     * @return the entrySet view\n+     */\n+    public Set entrySet() {\n+        if (entrySet == null) {\n+            entrySet = new EntrySet(this);\n+        }\n+        return entrySet;\n+    }\n+    \n+    /**\n+     * Creates an entry set iterator.\n+     * Subclasses can override this to return iterators with different properties.\n+     * \n+     * @return the entrySet iterator\n+     */\n+    protected Iterator createEntrySetIterator() {\n+        if (size() == 0) {\n+            return IteratorUtils.EMPTY_ITERATOR;\n+        }\n+        return new EntrySetIterator(this);\n+    }\n+\n+    /**\n+     * EntrySet\n+     */\n+    static class EntrySet extends AbstractSet {\n+        private final HashedMap map;\n+        \n+        EntrySet(HashedMap map) {\n+            super();\n+            this.map = map;\n+        }\n+\n+        public int size() {\n+            return map.size();\n+        }\n+        \n+        public void clear() {\n+            map.clear();\n+        }\n+        \n+        public boolean contains(Object entry) {\n+            if (entry instanceof Map.Entry) {\n+                return map.containsKey(((Map.Entry) entry).getKey());\n+            }\n+            return false;\n+        }\n+        \n+        public boolean remove(Object obj) {\n+            if (obj instanceof Map.Entry == false) {\n+                return false;\n+            }\n+            Map.Entry entry = (Map.Entry) obj;\n+            Object key = entry.getKey();\n+            boolean result = map.containsKey(key);\n+            map.remove(key);\n+            return result;\n+        }\n+\n+        public Iterator iterator() {\n+            return map.createEntrySetIterator();\n+        }\n+    }\n+\n+    /**\n+     * EntrySetIterator and MapEntry\n+     */\n+    static class EntrySetIterator extends HashIterator {\n+        \n+        EntrySetIterator(HashedMap map) {\n+            super(map);\n+        }\n+\n+        public Object next() {\n+            return super.nextEntry();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    /**\n+     * Gets the keySet view of the map.\n+     * Changes made to the view affect this map.\n+     * To simply iterate through the keys, use {@link #mapIterator()}.\n+     * \n+     * @return the keySet view\n+     */\n+    public Set keySet() {\n+        if (keySet == null) {\n+            keySet = new KeySet(this);\n+        }\n+        return keySet;\n+    }\n+\n+    /**\n+     * Creates a key set iterator.\n+     * Subclasses can override this to return iterators with different properties.\n+     * \n+     * @return the keySet iterator\n+     */\n+    protected Iterator createKeySetIterator() {\n+        if (size() == 0) {\n+            return IteratorUtils.EMPTY_ITERATOR;\n+        }\n+        return new KeySetIterator(this);\n+    }\n+\n+    /**\n+     * KeySet\n+     */\n+    static class KeySet extends AbstractSet {\n+        private final HashedMap map;\n+        \n+        KeySet(HashedMap map) {\n+            super();\n+            this.map = map;\n+        }\n+\n+        public int size() {\n+            return map.size();\n+        }\n+        \n+        public void clear() {\n+            map.clear();\n+        }\n+        \n+        public boolean contains(Object key) {\n+            return map.containsKey(key);\n+        }\n+        \n+        public boolean remove(Object key) {\n+            boolean result = map.containsKey(key);\n+            map.remove(key);\n+            return result;\n+        }\n+\n+        public Iterator iterator() {\n+            return map.createKeySetIterator();\n+        }\n+    }\n+\n+    /**\n+     * KeySetIterator\n+     */\n+    static class KeySetIterator extends EntrySetIterator {\n+        \n+        KeySetIterator(HashedMap map) {\n+            super(map);\n+        }\n+\n+        public Object next() {\n+            return super.nextEntry().getKey();\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    /**\n+     * Gets the values view of the map.\n+     * Changes made to the view affect this map.\n+     * To simply iterate through the values, use {@link #mapIterator()}.\n+     * \n+     * @return the values view\n+     */\n+    public Collection values() {\n+        if (values == null) {\n+            values = new Values(this);\n+        }\n+        return values;\n+    }\n+\n+    /**\n+     * Creates a values iterator.\n+     * Subclasses can override this to return iterators with different properties.\n+     * \n+     * @return the values iterator\n+     */\n+    protected Iterator createValuesIterator() {\n+        if (size() == 0) {\n+            return IteratorUtils.EMPTY_ITERATOR;\n+        }\n+        return new ValuesIterator(this);\n+    }\n+\n+    /**\n+     * Values\n+     */\n+    static class Values extends AbstractCollection {\n+        private final HashedMap map;\n+        \n+        Values(HashedMap map) {\n+            super();\n+            this.map = map;\n+        }\n+\n+        public int size() {\n+            return map.size();\n+        }\n+        \n+        public void clear() {\n+            map.clear();\n+        }\n+        \n+        public boolean contains(Object value) {\n+            return map.containsValue(value);\n+        }\n+        \n+        public Iterator iterator() {\n+            return map.createValuesIterator();\n+        }\n+    }\n+\n+    /**\n+     * ValuesIterator\n+     */\n+    static class ValuesIterator extends HashIterator {\n+        \n+        ValuesIterator(HashedMap map) {\n+            super(map);\n+        }\n+\n+        public Object next() {\n+            return super.nextEntry().getValue();\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * HashEntry\n+     */\n+    protected static class HashEntry implements Map.Entry {\n+        protected HashEntry next;\n+        protected int hashCode;\n+        protected Object key;\n+        protected Object value;\n+        \n+        HashEntry(HashEntry next, int hashCode, Object key, Object value) {\n+            super();\n+            this.next = next;\n+            this.hashCode = hashCode;\n+            this.key = key;\n+            this.value = value;\n+        }\n+        public Object getKey() {\n+            return (key == NULL ? null : key);\n+        }\n+        public Object getValue() {\n+            return value;\n+        }\n+        public Object setValue(Object value) {\n+            Object old = value;\n+            this.value = value;\n+            return old;\n+        }\n+        public boolean equals(Object obj) {\n+            if (obj == this) {\n+                return true;\n+            }\n+            if (obj instanceof Map.Entry == false) {\n+                return false;\n+            }\n+            Map.Entry other = (Map.Entry) obj;\n+            return\n+                (getKey() == null ? other.getKey() == null : getKey().equals(other.getKey())) &&\n+                (getValue() == null ? other.getValue() == null : getValue().equals(other.getValue()));\n+        }\n+        public int hashCode() {\n+            return (getKey() == null ? 0 : getKey().hashCode()) ^\n+                   (getValue() == null ? 0 : getValue().hashCode()); \n+        }\n+        public String toString() {\n+            return new StringBuffer().append(getKey()).append('=').append(getValue()).toString();\n+        }\n+    }\n+    \n+    /**\n+     * Base Iterator\n+     */\n+    protected static abstract class HashIterator implements Iterator {\n+        private final HashedMap map;\n+        private int hashIndex;\n+        private HashEntry current;\n+        private HashEntry next;\n+        private int expectedModCount;\n+        \n+        HashIterator(HashedMap map) {\n+            super();\n+            this.map = map;\n+            HashEntry[] data = map.data;\n+            int i = data.length;\n+            HashEntry next = null;\n+            while (i > 0 && next == null) {\n+                next = data[--i];\n+            }\n+            this.next = next;\n+            this.hashIndex = i;\n+            this.expectedModCount = map.modCount;\n+        }\n+\n+        public boolean hasNext() {\n+            return (next != null);\n+        }\n+\n+        HashEntry nextEntry() { \n+            if (map.modCount != expectedModCount) {\n+                throw new ConcurrentModificationException();\n+            }\n+            HashEntry newCurrent = next;\n+            if (newCurrent == null)  {\n+                throw new NoSuchElementException(\"No more elements in the iteration\");\n+            }\n+            HashEntry[] data = map.data;\n+            int i = hashIndex;\n+            HashEntry n = newCurrent.next;\n+            while (n == null && i > 0) {\n+                n = data[--i];\n+            }\n+            next = n;\n+            hashIndex = i;\n+            current = newCurrent;\n+            return newCurrent;\n+        }\n+\n+        public HashEntry currentEntry() {\n+            return current;\n+        }\n+        \n+        public void remove() {\n+            if (current == null) {\n+                throw new IllegalStateException(\"Iterator remove() can only be called once after next()\");\n+            }\n+            if (map.modCount != expectedModCount) {\n+                throw new ConcurrentModificationException();\n+            }\n+            map.remove(current.getKey());\n+            current = null;\n+            expectedModCount = map.modCount;\n+        }\n+\n+        public String toString() {\n+            if (current != null) {\n+                return \"Iterator[\" + current.getKey() + \"=\" + current.getValue() + \"]\";\n+            } else {\n+                return \"Iterator[]\";\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the map out using a custom routine.\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeInt(data.length);\n+        out.writeInt(size);\n+        for (MapIterator it = mapIterator(); it.hasNext();) {\n+            out.writeObject(it.next());\n+            out.writeObject(it.getValue());\n+        }\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        int capacity = in.readInt();\n+        int size = in.readInt();\n+        data = new HashEntry[capacity];\n+        for (int i = 0; i < size; i++) {\n+            Object key = in.readObject();\n+            Object value = in.readObject();\n+            put(key, value);\n+        }\n+    }\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Clones the map without cloning the keys or values.\n+     *\n+     * @return a shallow clone\n+     */\n+    public Object clone() {\n+        try {\n+            HashedMap cloned = (HashedMap) super.clone();\n+            cloned.data = new HashEntry[data.length];\n+            cloned.entrySet = null;\n+            cloned.keySet = null;\n+            cloned.values = null;\n+            cloned.modCount = 0;\n+            cloned.size = 0;\n+            cloned.putAll(this);\n+            return cloned;\n+            \n+        } catch (CloneNotSupportedException ex) {\n+            return null;  // should never happen\n+        }\n+    }\n+    \n+    /**\n+     * Compares this map with another.\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof Map == false) {\n+            return false;\n+        }\n+        Map map = (Map) obj;\n+        if (map.size() != size()) {\n+            return false;\n+        }\n+        MapIterator it = mapIterator();\n+        try {\n+            while (it.hasNext()) {\n+                Object key = it.next();\n+                Object value = it.getValue();\n+                if (value == null) {\n+                    if (map.get(key) != null || map.containsKey(key) == false) {\n+                        return false;\n+                    }\n+                } else {\n+                    if (value.equals(map.get(key)) == false) {\n+                        return false;\n+                    }\n+                }\n+            }\n+        } catch (ClassCastException ignored)   {\n+            return false;\n+        } catch (NullPointerException ignored) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Gets the standard Map hashCode.\n+     * \n+     * @return the hashcode defined in the Map interface\n+     */\n+    public int hashCode() {\n+        int total = 0;\n+        Iterator it = createEntrySetIterator();\n+        while (it.hasNext()) {\n+            total += it.next().hashCode();\n+        }\n+        return total;\n+    }\n+\n+    /**\n+     * Gets the map as a String.\n+     * \n+     * @return a string version of the map\n+     */\n+    public String toString() {\n+        if (size() == 0) {\n+            return \"{}\";\n+        }\n+        StringBuffer buf = new StringBuffer(32 * size());\n+        buf.append('{');\n+\n+        MapIterator it = mapIterator();\n+        boolean hasNext = it.hasNext();\n+        while (hasNext) {\n+            Object key = it.next();\n+            Object value = it.getValue();\n+            buf.append(key == this ? \"(this Map)\" : key)\n+               .append('=')\n+               .append(value == this ? \"(this Map)\" : value);\n+\n+            hasNext = it.hasNext();\n+            if (hasNext) {\n+                buf.append(',').append(' ');\n+            }\n+        }\n+\n+        buf.append('}');\n+        return buf.toString();\n+    }\n+}\n--- a/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ListOrderedMap.java,v 1.3 2003/11/20 21:46:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ListOrderedMap.java,v 1.4 2003/12/01 22:34:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n import java.util.Set;\n \n+import org.apache.commons.collections.OrderedMap;\n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n import org.apache.commons.collections.iterators.MapIterator;\n import org.apache.commons.collections.iterators.OrderedMapIterator;\n  * original position in the iteration.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/20 21:46:41 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/01 22:34:53 $\n  * \n  * @author Henri Yandell\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableMap.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableMap.java,v 1.2 2003/11/20 22:35:50 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableMap.java,v 1.3 2003/12/01 22:34:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.commons.collections.AMap;\n import org.apache.commons.collections.Unmodifiable;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n+import org.apache.commons.collections.iterators.EntrySetMapIterator;\n+import org.apache.commons.collections.iterators.MapIterator;\n+import org.apache.commons.collections.iterators.UnmodifiableMapIterator;\n import org.apache.commons.collections.pairs.AbstractMapEntryDecorator;\n import org.apache.commons.collections.set.UnmodifiableSet;\n \n  * Decorates another <code>Map</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/20 22:35:50 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/01 22:34:53 $\n  * \n  * @author Stephen Colebourne\n  */\n-public final class UnmodifiableMap extends AbstractMapDecorator implements Unmodifiable {\n+public final class UnmodifiableMap extends AbstractMapDecorator implements AMap, Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable map.\n \n     public Object remove(Object key) {\n         throw new UnsupportedOperationException();\n+    }\n+\n+    public MapIterator mapIterator() {\n+        if (map instanceof AMap) {\n+            MapIterator it = ((AMap) map).mapIterator();\n+            return UnmodifiableMapIterator.decorate(it);\n+        } else {\n+            MapIterator it = new EntrySetMapIterator(map);\n+            return UnmodifiableMapIterator.decorate(it);\n+        }\n     }\n \n     public Set entrySet() {\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java,v 1.1 2003/11/20 22:35:50 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java,v 1.2 2003/12/01 22:34:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.commons.collections.OrderedMap;\n import org.apache.commons.collections.Unmodifiable;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n import org.apache.commons.collections.iterators.MapIterator;\n  * Decorates another <code>OrderedMap</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/20 22:35:50 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/01 22:34:53 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java,v 1.3 2003/11/18 22:37:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java,v 1.4 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.commons.collections.BidiMap;\n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n import org.apache.commons.collections.iterators.MapIterator;\n /**\n  * Abstract test class for {@link BidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:16 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/01 22:34:54 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestOrderedBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestOrderedBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestOrderedBidiMap.java,v 1.2 2003/11/20 00:31:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestOrderedBidiMap.java,v 1.3 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n \n import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.OrderedBidiMap;\n import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n import org.apache.commons.collections.iterators.MapIterator;\n \n /**\n  * Abstract test class for {@link OrderedBidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.2 $ $Date: 2003/11/20 00:31:42 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/01 22:34:54 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java,v 1.4 2003/11/18 22:37:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java,v 1.5 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.TreeSet;\n \n import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.SortedBidiMap;\n import org.apache.commons.collections.map.AbstractTestSortedMap;\n \n /**\n  * Abstract test class for {@link SortedBidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.4 $ $Date: 2003/11/18 22:37:16 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/01 22:34:54 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- a/src/test/org/apache/commons/collections/bidimap/TestDualHashBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestDualHashBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/TestDualHashBidiMap.java,v 1.2 2003/11/18 22:37:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/TestDualHashBidiMap.java,v 1.3 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.textui.TestRunner;\n \n+import org.apache.commons.collections.BidiMap;\n import org.apache.commons.collections.BulkTest;\n \n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:16 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/01 22:34:54 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- a/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap.java,v 1.2 2003/11/18 22:37:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap.java,v 1.3 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.textui.TestRunner;\n \n+import org.apache.commons.collections.BidiMap;\n import org.apache.commons.collections.BulkTest;\n \n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:16 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/01 22:34:54 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- a/src/test/org/apache/commons/collections/bidimap/TestTreeBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestTreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/TestTreeBidiMap.java,v 1.2 2003/11/18 22:37:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/TestTreeBidiMap.java,v 1.3 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.textui.TestRunner;\n \n+import org.apache.commons.collections.BidiMap;\n import org.apache.commons.collections.BulkTest;\n \n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:16 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/01 22:34:54 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java,v 1.4 2003/11/18 22:37:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java,v 1.5 2003/12/01 22:34:55 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.BidiMap;\n import org.apache.commons.collections.Unmodifiable;\n-import org.apache.commons.collections.bidimap.BidiMap;\n import org.apache.commons.collections.bidimap.DualHashBidiMap;\n \n /**\n  * Tests the UnmodifiableMapIterator.\n  * \n- * @version $Revision: 1.4 $ $Date: 2003/11/18 22:37:13 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/01 22:34:55 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/iterators/TestUnmodifiableOrderedMapIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestUnmodifiableOrderedMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestUnmodifiableOrderedMapIterator.java,v 1.1 2003/11/20 21:45:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestUnmodifiableOrderedMapIterator.java,v 1.2 2003/12/01 22:34:55 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.OrderedMap;\n import org.apache.commons.collections.Unmodifiable;\n import org.apache.commons.collections.map.ListOrderedMap;\n-import org.apache.commons.collections.map.OrderedMap;\n \n /**\n  * Tests the UnmodifiableOrderedMapIterator.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/11/20 21:45:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/01 22:34:55 $\n  * \n  * @author Stephen Colebourne\n  */\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestAMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/Attic/AbstractTestAMap.java,v 1.1 2003/12/01 22:34:54 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.commons.collections.AMap;\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n+import org.apache.commons.collections.iterators.MapIterator;\n+\n+/**\n+ * Abstract test class for {@link AMap} methods and contracts.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/12/01 22:34:54 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractTestAMap extends AbstractTestMap {\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test name\n+     */\n+    public AbstractTestAMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testFailFastEntrySet() {\n+        if (isRemoveSupported() == false) return;\n+        resetFull();\n+        Iterator it = map.entrySet().iterator();\n+        Map.Entry val = (Map.Entry) it.next();\n+        map.remove(val.getKey());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+        \n+        resetFull();\n+        it = map.entrySet().iterator();\n+        it.next();\n+        map.clear();\n+        try {\n+            it.next();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+    }\n+    \n+    public void testFailFastKeySet() {\n+        if (isRemoveSupported() == false) return;\n+        resetFull();\n+        Iterator it = map.keySet().iterator();\n+        Object val = it.next();\n+        map.remove(val);\n+        try {\n+            it.next();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+        \n+        resetFull();\n+        it = map.keySet().iterator();\n+        it.next();\n+        map.clear();\n+        try {\n+            it.next();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+    }\n+    \n+    public void testFailFastValues() {\n+        if (isRemoveSupported() == false) return;\n+        resetFull();\n+        Iterator it = map.values().iterator();\n+        it.next();\n+        map.remove(map.keySet().iterator().next());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+        \n+        resetFull();\n+        it = map.values().iterator();\n+        it.next();\n+        map.clear();\n+        try {\n+            it.next();\n+            fail();\n+        } catch (ConcurrentModificationException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public BulkTest bulkTestMapIterator() {\n+        return new InnerTestMapIterator();\n+    }\n+    \n+    public class InnerTestMapIterator extends AbstractTestMapIterator {\n+        public InnerTestMapIterator() {\n+            super(\"InnerTestMapIterator\");\n+        }\n+        \n+        public Object[] addSetValues() {\n+            return AbstractTestAMap.this.getNewSampleValues();\n+        }\n+        \n+        public boolean supportsRemove() {\n+            return AbstractTestAMap.this.isRemoveSupported();\n+        }\n+\n+        public boolean supportsSetValue() {\n+            return AbstractTestAMap.this.isSetValueSupported();\n+        }\n+\n+        public MapIterator makeEmptyMapIterator() {\n+            resetEmpty();\n+            return ((AMap) AbstractTestAMap.this.map).mapIterator();\n+        }\n+\n+        public MapIterator makeFullMapIterator() {\n+            resetFull();\n+            return ((AMap) AbstractTestAMap.this.map).mapIterator();\n+        }\n+        \n+        public Map getMap() {\n+            // assumes makeFullMapIterator() called first\n+            return AbstractTestAMap.this.map;\n+        }\n+        \n+        public Map getConfirmedMap() {\n+            // assumes makeFullMapIterator() called first\n+            return AbstractTestAMap.this.confirmed;\n+        }\n+        \n+        public void verify() {\n+            super.verify();\n+            AbstractTestAMap.this.verify();\n+        }\n+    }\n+    \n+//  public void testCreate() throws Exception {\n+//      resetEmpty();\n+//      writeExternalFormToDisk((Serializable) map, \"D:/dev/collections/data/test/HashedMap.emptyCollection.version3.obj\");\n+//      resetFull();\n+//      writeExternalFormToDisk((Serializable) map, \"D:/dev/collections/data/test/HashedMap.fullCollection.version3.obj\");\n+//  }\n+}\n--- a/src/test/org/apache/commons/collections/map/AbstractTestOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/AbstractTestOrderedMap.java,v 1.1 2003/11/20 22:34:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/AbstractTestOrderedMap.java,v 1.2 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.TreeMap;\n \n import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.OrderedMap;\n import org.apache.commons.collections.comparators.NullComparator;\n-import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n import org.apache.commons.collections.iterators.AbstractTestOrderedMapIterator;\n import org.apache.commons.collections.iterators.MapIterator;\n \n /**\n  * Abstract test class for {@link OrderedMap} methods and contracts.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/11/20 22:34:49 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/01 22:34:54 $\n  * \n  * @author Stephen Colebourne\n  */\n-public abstract class AbstractTestOrderedMap extends AbstractTestMap {\n+public abstract class AbstractTestOrderedMap extends AbstractTestAMap {\n \n     /**\n      * JUnit constructor.\n     }\n     \n     //-----------------------------------------------------------------------\n-    public BulkTest bulkTestMapIterator() {\n+    public BulkTest bulkTestOrderedMapIterator() {\n         return new InnerTestOrderedMapIterator();\n     }\n     \n-    // TODO: Test mapIterator() and orderedMapIterator() separately\n-    public class InnerTestMapIterator extends AbstractTestMapIterator {\n-        public InnerTestMapIterator() {\n-            super(\"InnerTestMapIterator\");\n+    public class InnerTestOrderedMapIterator extends AbstractTestOrderedMapIterator {\n+        public InnerTestOrderedMapIterator() {\n+            super(\"InnerTestOrderedMapIterator\");\n         }\n         \n         public boolean supportsRemove() {\n \n         public MapIterator makeEmptyMapIterator() {\n             resetEmpty();\n-            return ((OrderedMap) AbstractTestOrderedMap.this.map).mapIterator();\n+            return ((OrderedMap) AbstractTestOrderedMap.this.map).orderedMapIterator();\n         }\n \n         public MapIterator makeFullMapIterator() {\n             resetFull();\n-            return ((OrderedMap) AbstractTestOrderedMap.this.map).mapIterator();\n+            return ((OrderedMap) AbstractTestOrderedMap.this.map).orderedMapIterator();\n         }\n         \n         public Map getMap() {\n         }\n     }\n     \n-    //-----------------------------------------------------------------------\n-    public BulkTest bulkTestOrderedMapIterator() {\n-        return new InnerTestOrderedMapIterator();\n-    }\n-    \n-    // TODO: Test mapIterator() and orderedMapIterator() separately\n-    public class InnerTestOrderedMapIterator extends AbstractTestOrderedMapIterator {\n-        public InnerTestOrderedMapIterator() {\n-            super(\"InnerTestOrderedMapIterator\");\n-        }\n-        \n-        public boolean supportsRemove() {\n-            return AbstractTestOrderedMap.this.isRemoveSupported();\n-        }\n-\n-        public boolean supportsSetValue() {\n-            return AbstractTestOrderedMap.this.isSetValueSupported();\n-        }\n-\n-        public MapIterator makeEmptyMapIterator() {\n-            resetEmpty();\n-            return ((OrderedMap) AbstractTestOrderedMap.this.map).orderedMapIterator();\n-        }\n-\n-        public MapIterator makeFullMapIterator() {\n-            resetFull();\n-            return ((OrderedMap) AbstractTestOrderedMap.this.map).orderedMapIterator();\n-        }\n-        \n-        public Map getMap() {\n-            // assumes makeFullMapIterator() called first\n-            return AbstractTestOrderedMap.this.map;\n-        }\n-        \n-        public Map getConfirmedMap() {\n-            // assumes makeFullMapIterator() called first\n-            return AbstractTestOrderedMap.this.confirmed;\n-        }\n-        \n-        public void verify() {\n-            super.verify();\n-            AbstractTestOrderedMap.this.verify();\n-        }\n-    }\n-    \n }\n--- a/src/test/org/apache/commons/collections/map/TestAll.java\n+++ b/src/test/org/apache/commons/collections/map/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestAll.java,v 1.3 2003/11/20 22:35:50 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestAll.java,v 1.4 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/20 22:35:50 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/01 22:34:54 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestFixedSizeMap.suite());\n         suite.addTest(TestFixedSizeSortedMap.suite());\n         suite.addTest(TestFlat3Map.suite());\n+        suite.addTest(TestHashedMap.suite());\n         suite.addTest(TestLazyMap.suite());\n         suite.addTest(TestLazySortedMap.suite());\n         suite.addTest(TestListOrderedMap.suite());\n--- a/src/test/org/apache/commons/collections/map/TestFlat3Map.java\n+++ b/src/test/org/apache/commons/collections/map/TestFlat3Map.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFlat3Map.java,v 1.1 2003/11/18 23:23:05 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFlat3Map.java,v 1.2 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/11/18 23:23:05 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/01 22:34:54 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestFlat3Map extends AbstractTestMap {\n+public class TestFlat3Map extends AbstractTestAMap {\n \n     public TestFlat3Map(String testName) {\n         super(testName);\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestHashedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestHashedMap.java,v 1.1 2003/12/01 22:34:54 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.textui.TestRunner;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/12/01 22:34:54 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestHashedMap extends AbstractTestAMap {\n+\n+    public TestHashedMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+    \n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestHashedMap.class);\n+    }\n+\n+    public Map makeEmptyMap() {\n+        return new HashedMap();\n+    }\n+    \n+    public String getCompatibilityVersion() {\n+        return \"3\";\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java,v 1.4 2003/11/20 22:35:50 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java,v 1.5 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link UnmodifiableMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/11/20 22:35:50 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/01 22:34:54 $\n  * \n  * @author Phil Steitz\n  */\n-public class TestUnmodifiableMap extends AbstractTestMap{\n+public class TestUnmodifiableMap extends AbstractTestAMap{\n     \n     public TestUnmodifiableMap(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/map/TestUnmodifiableOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestUnmodifiableOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableOrderedMap.java,v 1.1 2003/11/20 22:35:50 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableOrderedMap.java,v 1.2 2003/12/01 22:34:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.OrderedMap;\n import org.apache.commons.collections.Unmodifiable;\n \n /**\n  * {@link UnmodifiableOrderedMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/20 22:35:50 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/01 22:34:54 $\n  * \n  * @author Stephen Colebourne\n  */", "timestamp": 1070318095, "metainfo": ""}