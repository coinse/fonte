{"sha": "4fd151ac2da59b35c9039cfb0299dca4c91c4933", "log": "Make PriorityBuffer Serializable bug 36163, from Steve Phelps  ", "commit": "\n--- a/src/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n  */\n package org.apache.commons.collections.buffer;\n \n+import java.io.Serializable;\n import java.util.AbstractCollection;\n import java.util.Comparator;\n import java.util.Iterator;\n  * @author Michael A. Smith\n  * @author Paul Jack\n  * @author Stephen Colebourne\n+ * @author Steve Phelps\n  */\n-public class PriorityBuffer extends AbstractCollection implements Buffer {\n+public class PriorityBuffer extends AbstractCollection\n+        implements Buffer, Serializable {\n+\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = 6891186490470027896L;\n \n     /**\n      * The default capacity for the buffer.\n--- a/src/test/org/apache/commons/collections/buffer/TestPriorityBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestPriorityBuffer.java\n  */\n package org.apache.commons.collections.buffer;\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Comparator;\n+import java.util.Iterator;\n import java.util.Random;\n \n import junit.framework.Test;\n  * @version $Revision$ $Date$\n  * \n  * @author Michael A. Smith\n+ * @author Steve Phelps\n  */\n public class TestPriorityBuffer extends AbstractTestCollection {\n \n     protected void checkOrder(PriorityBuffer h) {\n         Integer lastNum = null;\n         Integer num = null;\n-        boolean fail = false;\n         while (!h.isEmpty()) {\n             num = (Integer) h.remove();\n             if (h.ascendingOrder) {\n         }\n         return buffer.toString();\n     }\n-    \n+\n+    /**\n+     * Generates 500 randomly initialized heaps of size 100\n+     * and tests that after serializing and restoring them to a byte array\n+     * that the following conditions hold:\n+     * \n+     *  - the size of the restored heap is the same \n+     *      as the size of the orignal heap\n+     *  \n+     *  - all elements in the original heap are present in the restored heap\n+     *  \n+     *  - the heap order of the restored heap is intact as \n+     *      verified by checkOrder()\n+     */\n+    public void testSerialization() {\n+        int iterations = 500;\n+        int heapSize = 100;\n+        PriorityBuffer h;\n+        Random randGenerator = new Random();\n+        for (int i = 0; i < iterations; i++) {\n+            if (i < iterations / 2) {\n+                h = new PriorityBuffer(true);\n+            } else {\n+                h = new PriorityBuffer(false);\n+            }\n+            for (int r = 0; r < heapSize; r++) {\n+                h.add(new Integer(randGenerator.nextInt(heapSize)));\n+            }\n+            assertTrue(h.size() == heapSize);\n+            PriorityBuffer h1 = serializeAndRestore(h);\n+            assertTrue(h1.size() == heapSize);\n+            Iterator hit = h.iterator();\n+            while (hit.hasNext()) {\n+                Integer n = (Integer) hit.next();\n+                assertTrue(h1.contains(n));\n+            }\n+            checkOrder(h1);\n+        }\n+    }\n+\n+    public PriorityBuffer serializeAndRestore(PriorityBuffer h) {\n+        PriorityBuffer h1 = null;\n+        try {\n+            byte[] objekt = writeExternalFormToBytes(h);\n+            h1 = (PriorityBuffer) readExternalFormFromBytes(objekt);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            fail(e.toString());\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+            fail(e.toString());\n+        }\n+        return h1;\n+    }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.2\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"C:/commons/collections/data/test/PriorityBuffer.emptyCollection.version3.2.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"C:/commons/collections/data/test/PriorityBuffer.fullCollection.version3.2.obj\");\n+//    }\n+\n }", "timestamp": 1128775793, "metainfo": ""}