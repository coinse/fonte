{"sha": "1e6dceb8ccfd2c97379f78066ef4ad2b9a17b1d5", "log": "Trailing spaces  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/trie/CharacterKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections4/trie/CharacterKeyAnalyzer.java\n \n /**\n  * A {@link KeyAnalyzer} for {@link Character}s.\n- * \n+ *\n  * @since 4.0\n  * @version $Id$\n  */\n public class CharacterKeyAnalyzer extends AbstractKeyAnalyzer<Character> {\n-    \n+\n     private static final long serialVersionUID = 3928565962744720753L;\n-    \n+\n     /**\n      * A singleton instance of the {@link CharacterKeyAnalyzer}.\n      */\n-    public static final CharacterKeyAnalyzer INSTANCE \n+    public static final CharacterKeyAnalyzer INSTANCE\n         = new CharacterKeyAnalyzer();\n-    \n+\n     /**\n      * The length of a {@link Character} in bits\n      */\n     public static final int LENGTH = Character.SIZE;\n-    \n+\n     /**\n      * A bit mask where the first bit is 1 and the others are zero\n      */\n     private static final int MSB = 0x8000;\n-    \n+\n     /**\n      * Returns a bit mask where the given bit is set\n      */\n     private static int mask(final int bit) {\n         return MSB >>> bit;\n     }\n-    \n+\n     /**\n      * {@inheritDoc}\n      */\n     public int bitsPerElement() {\n         return 1;\n     }\n-    \n+\n     /**\n      * {@inheritDoc}\n      */\n     /**\n      * {@inheritDoc}\n      */\n-    public int bitIndex(final Character key, final int offsetInBits, final int lengthInBits, \n+    public int bitIndex(final Character key, final int offsetInBits, final int lengthInBits,\n             final Character other, final int otherOffsetInBits, final int otherLengthInBits) {\n-        \n+\n         if (offsetInBits != 0 || otherOffsetInBits != 0) {\n-            throw new IllegalArgumentException(\"offsetInBits=\" + offsetInBits \n+            throw new IllegalArgumentException(\"offsetInBits=\" + offsetInBits\n                     + \", otherOffsetInBits=\" + otherOffsetInBits);\n         }\n-        \n+\n         final char keyValue = key.charValue();\n         if (keyValue == Character.MIN_VALUE) {\n             return NULL_BIT_KEY;\n         }\n \n         final char otherValue = other != null ? other.charValue() : Character.MIN_VALUE;\n-        \n+\n         if (keyValue != otherValue) {\n             final int xorValue = keyValue ^ otherValue;\n             for (int i = 0; i < LENGTH; i++) {\n                 }\n             }\n         }\n-        \n+\n         return KeyAnalyzer.EQUAL_BIT_KEY;\n     }\n-    \n+\n     /**\n      * {@inheritDoc}\n      */\n-    public boolean isPrefix(final Character prefix, final int offsetInBits, \n+    public boolean isPrefix(final Character prefix, final int offsetInBits,\n             final int lengthInBits, final Character key) {\n-        \n+\n         final int value1 = prefix.charValue() << offsetInBits;\n         final int value2 = key.charValue();\n-        \n+\n         int mask = 0;\n         for(int i = 0; i < lengthInBits; i++) {\n             mask |= 0x1 << i;\n         }\n-        \n+\n         return (value1 & mask) == (value2 & mask);\n     }\n }", "timestamp": 1367344266, "metainfo": ""}