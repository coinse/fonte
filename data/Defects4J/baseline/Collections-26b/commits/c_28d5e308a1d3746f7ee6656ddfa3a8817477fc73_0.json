{"sha": "28d5e308a1d3746f7ee6656ddfa3a8817477fc73", "log": "Javadoc fixes  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n     /**\n      * Comparator for natural sort order.\n      *\n-     * @see ComparableComparator#getInstance\n+     * @see ComparableComparator#comparableComparator()\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();\n--- a/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n  * instead of overwriting them.\n  * <p>\n  * <b>Please consider using the\n- * {@link org.apache.commons.configuration.PropertiesConfiguration} class in\n+ * {@code org.apache.commons.configuration.PropertiesConfiguration} class in\n  * <a href=\"http://commons.apache.org/configuration\">Commons Configuration</a>.\n  * It's an evolution of <code>ExtendedProperties</code> supporting more\n  * features like automatic reloading, advanced interpolation, more type\n--- a/src/main/java/org/apache/commons/collections/Get.java\n+++ b/src/main/java/org/apache/commons/collections/Get.java\n /**\n  * The \"read\" subset of the {@link Map} interface.\n  * @since Commons Collections 5\n- * @TODO fix version\n+ * TODO fix version\n  * @version $Revision$ $Date$\n  * @see Put\n  * @author Matt Benson\n--- a/src/main/java/org/apache/commons/collections/IterableGet.java\n+++ b/src/main/java/org/apache/commons/collections/IterableGet.java\n /**\n  * The \"read\" subset of the {@link Map} interface.\n  * @since Commons Collections 5\n- * @TODO fix version\n+ * TODO fix version\n  * @version $Revision$ $Date$\n  * @see Put\n  * @author Matt Benson\n--- a/src/main/java/org/apache/commons/collections/IterableSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/IterableSortedMap.java\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n  * @since Commons Collections 5\n- * @TODO fix version\n+ * TODO fix version\n  * @version $Revision$ $Date$\n  *\n  * @author Matt Benson\n--- a/src/main/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections/MapUtils.java\n      * @param map to wrap if necessary.\n      * @return IterableMap<K, V>\n      * @since Commons Collections 5\n-     * @TODO fix version\n+     * TODO fix version\n      */\n     public static <K, V> IterableMap<K, V> iterableMap(Map<K, V> map) {\n         if (map == null) {\n      * @param sortedMap to wrap if necessary\n      * @return {@link IterableSortedMap}<K, V>\n      * @since Commons Collections 5\n-     * @TODO fix version\n+     * TODO fix version\n      */\n     public static <K, V> IterableSortedMap<K, V> iterableSortedMap(SortedMap<K, V> sortedMap) {\n         if (sortedMap == null) {\n--- a/src/main/java/org/apache/commons/collections/Put.java\n+++ b/src/main/java/org/apache/commons/collections/Put.java\n /**\n  * The \"write\" subset of the {@link Map} interface.\n  * @since Commons Collections 5\n- * @TODO fix version\n+ * TODO fix version\n  * @version $Revision$ $Date$\n  * @see Get\n  * @author Matt Benson\n--- a/src/main/java/org/apache/commons/collections/functors/CatchAndRethrowClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/CatchAndRethrowClosure.java\n      * Execute this closure on the specified input object.\n      * \n      * @param input the input to execute on\n-     * @throws ClosureException (runtime) if the closure execution resulted in a\n+     * @throws FunctorException (runtime) if the closure execution resulted in a\n      *             checked exception.\n      */\n     public void execute(E input) {\n--- a/src/main/java/org/apache/commons/collections/functors/Equator.java\n+++ b/src/main/java/org/apache/commons/collections/functors/Equator.java\n \n     /**\n      * Calculates the hash for the object, based on the method of equality used in the equate\n-     * method. This is used for classes that delegate their {@link #equals(Object)} method to an\n-     * Equator (and so must also delegate their {@link #hashCode()} method), or for implementations\n+     * method. This is used for classes that delegate their {@link Object#equals(Object) equals(Object)} method to an\n+     * Equator (and so must also delegate their {@link Object#hashCode() hashCode()} method), or for implementations\n      * of {@link HashedMap} that use an Equator for the key objects.\n      * \n      * @param o the object to calculate the hash for.\n--- a/src/main/java/org/apache/commons/collections/map/AbstractIterableMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractIterableMap.java\n /**\n  * Provide a basic {@link IterableMap} implementation.\n  * @since Commons Collections 5\n- * @TODO fix version\n+ * TODO fix version\n  * @version $Revision$ $Date$\n  *\n  * @author Matt Benson\n--- a/src/main/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n      * This implementation adds the entry to the data storage table and\n      * to the end of the linked list.\n      * \n-     * @param link  the entry to add\n+     * @param entry  the entry to add\n      * @param hashIndex  the index into the data array to store at\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n      * load factor and initial capacity.\n      *\n      * @param keyType  the type of reference to use for keys;\n-     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}\n+     *   must be {@link ReferenceStrength#HARD HARD}, \n+     *   {@link ReferenceStrength#SOFT SOFT}, \n+     *   {@link ReferenceStrength#WEAK WEAK}\n      * @param valueType  the type of reference to use for values;\n-     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}\n+     *   must be {@link ReferenceStrength#HARD},\n+     *   {@link ReferenceStrength#SOFT SOFT},\n+     *   {@link ReferenceStrength#WEAK WEAK}\n      * @param capacity  the initial capacity for the map\n      * @param loadFactor  the load factor for the map\n      * @param purgeValues  should the value be automatically purged when the\n--- a/src/main/java/org/apache/commons/collections/map/DefaultedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/DefaultedMap.java\n      * Constructor that wraps (not copies).\n      * \n      * @param map  the map to decorate, must not be null\n-     * @param value  the value to use\n+     * @param defaultValueTransformer  the value transformer to use\n      * @throws IllegalArgumentException if map or transformer is null\n+     * TODO does not check for null transformer: fix code or Javadoc\n      */\n     protected DefaultedMap(Map<K, V> map, Transformer<? super K, ? extends V> defaultValueTransformer) {\n         super(map);\n--- a/src/main/java/org/apache/commons/collections/map/EntrySetToMapIteratorAdapter.java\n+++ b/src/main/java/org/apache/commons/collections/map/EntrySetToMapIteratorAdapter.java\n  * Adapts a Map entrySet to the MapIterator interface.\n  *\n  * @since Commons Collections 5\n- * @TODO fix version\n+ * TODO fix version\n  * @version $Revision$ $Date$\n  *\n  * @author Matt Benson\n--- a/src/main/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/ListOrderedMap.java\n  * {@link CaseInsensitiveMap}, or similar maps that violate the general\n  * contract of {@link java.util.Map}.</strong> The <code>ListOrderedMap</code>\n  * (or, more precisely, the underlying <code>List</code>) is relying on\n- * {@link Object#java.lang.equals(Object) equals()}. This is fine, as long as the\n+ * {@link Object#equals(Object) equals()}. This is fine, as long as the\n  * decorated <code>Map</code> is also based on {@link Object#equals(Object) equals()},\n  * and {@link Object#hashCode() hashCode()}, which {@link IdentityMap}, and\n  * {@link CaseInsensitiveMap} don't: The former uses <code>==</code>, and\n--- a/src/test/java/org/apache/commons/collections/collection/AbstractTestCollection.java\n+++ b/src/test/java/org/apache/commons/collections/collection/AbstractTestCollection.java\n  * <p>\n  * You should create a concrete subclass of this class to test any custom\n  * {@link Collection} implementation.  At minimum, you'll have to\n- * implement the {@link #makeCollection()} method.  You might want to\n- * override some of the additional public methods as well:\n+ * implement the @{@link #makeObject()}, {@link #makeConfirmedCollection()}\n+ * and {@link #makeConfirmedFullCollection()} methods.\n+ * You might want to override some of the additional public methods as well:\n  * <p>\n  * <b>Element Population Methods</b>\n  * <p>\n--- a/src/test/java/org/apache/commons/collections/iterators/TestFilterListIterator.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/TestFilterListIterator.java\n     }\n \n     /**\n-     * Test for {@link https://issues.apache.org/jira/browse/COLLECTIONS-360 COLLECTIONS-360}.\n+     * Test for {@link \"https://issues.apache.org/jira/browse/COLLECTIONS-360 COLLECTIONS-360\"}\n      */\n     public void testCollections360() throws Throwable {\n         Collection<Predicate<Object>> var7 = new GrowthList<Predicate<Object>>();\n--- a/src/test/java/org/apache/commons/collections/splitmap/TestSplitMapUtils.java\n+++ b/src/test/java/org/apache/commons/collections/splitmap/TestSplitMapUtils.java\n  * Tests for {@link TransformedMap}\n  *\n  * @since Commons Collections 5\n- * @TODO fix version\n+ * TODO fix version\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n--- a/src/test/java/org/apache/commons/collections/splitmap/TestTransformedMap.java\n+++ b/src/test/java/org/apache/commons/collections/splitmap/TestTransformedMap.java\n  * Tests for {@link TransformedMap}\n  *\n  * @since Commons Collections 5\n- * @TODO fix version, add Serialization tests\n+ * TODO fix version, add Serialization tests\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne", "timestamp": 1331389717, "metainfo": ""}