{"sha": "3a44e9291a1435df665b43d9510e7b9f0144f6e8", "log": "javadocs also fix spelling of \"acknowledgment\" in the license text   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/IntCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntCollection.java,v 1.1 2003/01/04 15:00:57 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2003/01/04 15:00:57 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntCollection.java,v 1.2 2003/01/10 18:47:15 rwaldhoff Exp $\n  *\n  * ====================================================================\n  *\n  *    distribution.\n  *\n  * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n+ *    any, must include the following acknowledgment:\n  *       \"This product includes software developed by the\n  *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n  *\n  * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n  *    Foundation\" must not be used to endorse or promote products derived\n package org.apache.commons.collections.primitives;\n \n /**\n- * A {@link java.util.Collection collection} of int values.\n- *\n- * @version $Revision: 1.1 $ $Date: 2003/01/04 15:00:57 $\n+ * A collection of <code>int</code> values.\n+ *\n+ * @see org.apache.commons.collections.primitives.adapters.IntCollectionCollection\n+ * @see org.apache.commons.collections.primitives.adapters.CollectionIntCollection\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.2 $ $Date: 2003/01/10 18:47:15 $\n+ * \n+ * @version $Revision: 1.2 $ $Date: 2003/01/10 18:47:15 $\n  * @author Rodney Waldhoff \n  */\n public interface IntCollection {\n-          \n     /** \n      * Ensures that I contain the specified element \n-     * (optional operation).\n+     * (optional operation).  Returns <code>true</code>\n+     * if I changed as a result of this call.\n+     * <p/>\n+     * If a collection refuses to add the specified\n+     * element for any reason other than that it already contains\n+     * the element, it <i>must</i> throw an exception (rather than\n+     * simply returning <tt>false</tt>).  This preserves the invariant\n+     * that a collection always contains the specified element after \n+     * this call returns. \n+     * \n+     * @param element the value whose presence within me is to be ensured\n+     * @return <code>true</code> iff I changed as a result of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException may be thrown if some aspect of the \n+     *         specified element prevents it from being added to me\n      */\n     boolean add(int element);\n \n     /** \n      * {@link #add Adds} all of the elements in the \n-     * specified collection to me \n-     * (optional operation). \n+     * specified collection to me (optional operation). \n+     * \n+     * @param c the collection of elements whose presence within me is to \n+     *        be ensured\n+     * @return <code>true</code> iff I changed as a result of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException may be thrown if some aspect of some \n+     *         specified element prevents it from being added to me\n      */ \n     boolean addAll(IntCollection c);\n     \n     /** \n-     * Removes all my elements \n-     * (optional operation). \n+     * Removes all my elements (optional operation). \n+     * This collection will be {@link #isEmpty empty} after this\n+     * method successfully returns.\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n      */\n     void clear();\n \n     /** \n      * Returns <code>true</code> iff I contain \n      * the specified element. \n+     * \n+     * @param element the value whose presence within me is to be tested\n+     * @return <code>true</code> iff I contain the specified element\n      */\n     boolean contains(int element);\n     \n     /** \n-     * Returns <code>true</code> iff I contain \n-     * all of the elements in the given collection. \n+     * Returns <code>true</code> iff I {@link #contains contain}\n+     * all of the elements in the given collection.\n+     * \n+     * @param c the collection of elements whose presence within me is to \n+     *        be tested\n+     * @return <code>true</code> iff I contain the all the specified elements\n      */\n     boolean containsAll(IntCollection c);\n     \n     /** \n-     * Compares the specified object with me for \n-     * equality. \n-     */\n-    boolean equals(Object o);\n-    \n-    /** \n-     * Returns my hash code value. \n-     */\n-    int hashCode();\n-    \n-    /** \n-     * Returns true iff I contains no elements. \n+     * Returns <code>true</code> iff I contain no elements. \n+     * @return <code>true</code> iff I contain no elements. \n      */\n     boolean isEmpty();\n     \n     /** \n-     * Returns an iterator over all my elements.\n+     * Returns an {@link IntIterator iterator} over all my elements.\n+     * This base interface places no constraints on the order \n+     * in which the elements are returned by the returned iterator.\n+     * @return an {@link IntIterator iterator} over all my elements.\n      */\n     IntIterator iterator();\n      \n     /** \n-     * Removes the first occurrence of the \n-     * specified element (optional operation). \n+     * Removes a single occurrence of the specified element \n+     * (optional operation). \n+     * \n+     * @param element the element to remove, if present\n+     * @return <code>true</code> iff I contained the specified element, \n+     *         in other words, iff I changed as a result of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n      */\n     boolean removeElement(int element);\n     \n     /** \n-     * Removes from all the elements that are \n-     * contained in the specified collection \n-     * (optional operation). \n+     * Removes all of my elements that are contained in the \n+     * specified collection (optional operation). \n+     * \n+     * @param c the collection of elements to remove\n+     * @return <code>true</code> iff I contained the at least one of the\n+     *         specified elements,  in other words, iff I changed as a result \n+     *         of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n      */\n     boolean removeAll(IntCollection c);\n     \n     /** \n-     * Retains only the elements that are \n-     * contained in the specified collection \n-     * (optional operation). \n+     * Removes all of my elements that are <i>not</i> contained in the \n+     * specified collection (optional operation). \n+     * (In other words, retains only my elements that are \n+     * contained in the specified collection. \n+     * \n+     * @param c the collection of elements to retain\n+     * @return <code>true</code> iff I changed as a result \n+     *         of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n      */\n     boolean retainAll(IntCollection c);\n     \n     /** \n      * Returns the number of elements I contain. \n+     * @return the number of elements I contain\n      */\n     int size();\n     \n     /** \n-     * Returns an array containing all my elements.\n+     * Returns an array containing all of my elements.\n+     * The length of the returned array should be equal\n+     * to the my {@link #size size}.\n+     * <p/>\n+     * The returned array will be independent of this\n+     * collection, so that callers may modify that \n+     * returned array without modifying this collection.\n+     * <p/>\n+     * When this collection guarantees the order in which \n+     * elements are returned by an {@link #iterator},\n+     * the returned array will contain elements in the\n+     * same order.\n+     * \n+     * @return an array containing all my elements\n      */\n     int[] toArray();\n     \n     /** \n-     * Returns an array containing all of the elements \n-     * in me, using the given array if it is large enough.\n+     * Returns an array containing all of my elements, \n+     * using the given array if it is large \n+     * enough.  When the length of the given array is \n+     * larger than the number of elements I contain, \n+     * values outside of my range will be unchanged.\n+     * <p/>\n+     * The returned array will be independent of this\n+     * collection, so that callers may modify that \n+     * returned array without modifying this collection.\n+     * <p/>\n+     * When this collection guarantees the order in which \n+     * elements are returned by an {@link #iterator},\n+     * the returned array will contain elements in the\n+     * same order.\n+     * \n+     * @param a an array that may be used to contain the elements\n+     * @return an array containing all my elements\n      */\n     int[] toArray(int[] a);\n }\n--- a/src/java/org/apache/commons/collections/primitives/IntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntList.java,v 1.4 2003/01/09 13:40:10 rwaldhoff Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/01/09 13:40:10 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntList.java,v 1.5 2003/01/10 18:47:15 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *    distribution.\n  *\n  * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n+ *    any, must include the following acknowledgment:\n  *       \"This product includes software developed by the\n  *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n  *\n  * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n  *    Foundation\" must not be used to endorse or promote products derived\n import org.apache.commons.collections.primitives.adapters.IntListIterator;\n \n /**\n- * An ordered collection (a {@link java.util.List}) of int values.\n- *\n- * @version $Revision: 1.4 $ $Date: 2003/01/09 13:40:10 $\n+ * An ordered collection (a list) of <code>int</code> values.\n+ *\n+ * @see org.apache.commons.collections.primitives.adapters.IntListList\n+ * @see org.apache.commons.collections.primitives.adapters.ListIntList\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.5 $ $Date: 2003/01/10 18:47:15 $\n+ * \n  * @author Rodney Waldhoff \n  */\n public interface IntList extends IntCollection {\n     /** \n      * Inserts the specified element at the specified position \n-     * within me (optional operation). \n+     * within me (optional operation). Shifts the element currently \n+     * at that position (if any) and any subsequent elements to the \n+     * right, increasing their indices.\n+     * \n+     * @param index the index at which to insert the element\n+     * @param element the value to insert\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException is some aspect of the specified element \n+     *         prevents it from being added to me\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n      */\n     void add(int index, int element);\n           \n+    /** \n+     * Inserts all of the elements in the specified collection into me,\n+     * at the specified position (optional operation).  Shifts the \n+     * element currently at that position (if any) and any subsequent \n+     * elements to the right, increasing their indices.  The new elements \n+     * will appear in the order that they are returned by the given \n+     * collection's {@link IntCollection#iterator iterator}.\n+     * \n+     * @param index the index at which to insert the first element from \n+     *        the specified collection\n+     * @param collection the {@link IntCollection} of elements to add \n+     * @return <code>true</code> iff I changed as a result of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n     boolean addAll(int index, IntCollection collection);\n     \n     /** \n      * Returns the element at the specified position within \n      * me. \n+     * \n+     * @param index the index of the element to return\n+     * @return the value of the element at the specified position\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n      */\n     int get(int index);\n     \n      * Returns the index of the first occurrence \n      * of the specified element within me, \n      * or <code>-1</code> if I do not contain \n-     * the this element. \n+     * the element. \n+     * \n+     * @param element the element to search for\n+     * @return the smallest index of an element matching the specified value,\n+     *         or <code>-1</code> if no such matching element can be found \n      */\n     int indexOf(int element);\n      \n     /** \n      * Returns the index of the last occurrence \n      * of the specified element within me, \n-     * or -1 if I do not contain this element. \n+     * or -1 if I do not contain the element. \n+     * \n+     * @param element the element to search for\n+     * @return the largest index of an element matching the specified value,\n+     *         or <code>-1</code> if no such matching element can be found \n      */\n     int lastIndexOf(int element);\n     \n     /** \n-     * Returns a list iterator over all my elements.\n+     * Returns a {@link IntListIterator list iterator} over all \n+     * my elements in the appropriate sequence.\n      */\n     IntListIterator listIterator();\n     \n     /** \n-     * Returns a list iterator over my elements,\n+     * Returns a {@link IntListIterator list iterator}\n+     * over my elements, in the appropriate sequence, \n      * starting at the specified position. The \n      * specified index indicates the first element \n      * that would be returned by an initial call \n      * to the next method. An initial call to the \n      * previous method would return the element \n      * with the specified index minus one.\n+     * \n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n      */\n     IntListIterator listIterator(int index);\n     \n     /** \n      * Removes the element at the specified position in \n-     * me (optional operation). \n+     * (optional operation).  Any subsequent elements \n+     * are shifted to the left, subtracting one from their \n+     * indices.  Returns the element that was removed from\n+     * the list.\n+     * \n+     * @param index the index of the element to remove\n+     * @return the value of the element that was removed\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n      */\n     int removeElementAt(int index);\n    \n      * Replaces the element at the specified \n      * position in me with the specified element\n      * (optional operation). \n+     * \n+     * @param index the index of the element to change\n+     * @param element the value to be stored at the specified position\n+     * @return the value previously stored at the specified position\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n      */\n     int set(int index, int element);\n     \n     /** \n      * Returns a view of the elements within me \n-     * between the specified fromIndex, inclusive, and \n-     * toIndex, exclusive. \n+     * between the specified <i>fromIndex</i>, inclusive, and \n+     * <i>toIndex</i>, exclusive.  The returned {@link IntList}\n+     * is backed by me, so that any changes in \n+     * the returned list are reflected in me, and vice-versa.\n+     * The returned list supports all of the optional operations\n+     * that I support.\n+     * <p/>\n+     * Note that when <code><i>fromIndex</i> == <i>toIndex</i></code>,\n+     * the returned list is empty, and when \n+     * <code><i>fromIndex</i> == 0 && <i>fromIndex</i> == {@link #size() size()}</code>\n+     * the returned list is my \"improper\" sublist, containing all my elements.\n+     * <p/>\n+     * The semantics of the returned list become undefined\n+     * if I am structurally modified in any way other than \n+     * via the returned list.\n+     * \n+     * @param fromIndex the smallest index (inclusive) in me that appears in \n+     *        the returned list\n+     * @param toIndex the largest index (exclusive) in me that appears in the \n+     *        returned list\n+     * @return a view of this list from <i>fromIndex</i> (inclusive) to \n+     *         <i>toIndex</i> exclusive\n+     * \n+     * @throws IndexOutOfBoundsException if either specified index is out of range\n      */\n     IntList subList(int fromIndex, int toIndex);\n ", "timestamp": 1042224435, "metainfo": ""}