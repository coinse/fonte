{"sha": "1df7f75362da96b40c50db6feb9e5294b92b0932", "log": "add ByteIteratorInputStream and tests   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/io/ByteIteratorInputStream.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/io/Attic/ByteIteratorInputStream.java,v 1.1 2003/04/15 17:09:15 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters.io;\n+\n+import java.io.InputStream;\n+\n+import org.apache.commons.collections.primitives.ByteIterator;\n+\n+/**\n+ * Adapts an {@link ByteIterator} to the {@link InputStream} interface.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 17:09:15 $\n+ * @author Rodney Waldhoff\n+ */\n+public class ByteIteratorInputStream extends InputStream {\n+\n+    public ByteIteratorInputStream(ByteIterator in) {\n+        this.iterator= in;\n+    }\n+\n+    public int read() {\n+        if(iterator.hasNext()) {\n+            return (0xFF & iterator.next());\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    public static InputStream adapt(ByteIterator in) {\n+        return null == in ? null : new ByteIteratorInputStream(in);\n+    }\n+    \n+    private ByteIterator iterator = null;\n+\n+}\n--- a/src/test/org/apache/commons/collections/primitives/adapters/io/TestAll.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/io/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/io/Attic/TestAll.java,v 1.1 2003/04/15 03:07:49 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/io/Attic/TestAll.java,v 1.2 2003/04/15 17:09:14 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/04/15 03:07:49 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/15 17:09:14 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n         TestSuite suite = new TestSuite();\n         \n         suite.addTest(TestInputStreamByteIterator.suite());\n+        suite.addTest(TestByteIteratorInputStream.suite());\n \n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/io/TestByteIteratorInputStream.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/io/Attic/TestByteIteratorInputStream.java,v 1.1 2003/04/15 17:09:14 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters.io;\n+\n+import java.io.InputStream;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.primitives.ArrayByteList;\n+import org.apache.commons.collections.primitives.ByteList;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 17:09:14 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestByteIteratorInputStream extends TestCase {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestByteIteratorInputStream(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestByteIteratorInputStream.class);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    \n+\n+\n+    // ------------------------------------------------------------------------\n+    \n+    public void testReadNonEmpty() throws Exception {\n+        ByteList list = new ArrayByteList();\n+        for(int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) {\n+            list.add((byte)i);\n+        }\n+       \n+        InputStream in = new ByteIteratorInputStream(list.iterator());\n+        for(int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) {\n+            assertEquals(0xFF&i,in.read());\n+        }\n+        assertEquals(-1,in.read());\n+        assertEquals(-1,in.read());\n+    }\n+\n+    public void testReadEmpty() throws Exception {\n+        ByteList list = new ArrayByteList();\n+        InputStream in = new ByteIteratorInputStream(list.iterator());\n+        assertEquals(-1,in.read());\n+        assertEquals(-1,in.read());\n+    }\n+\n+    public void testAdaptNull() {\n+        assertNull(ByteIteratorInputStream.adapt(null));\n+    }\n+\n+    public void testAdaptNonNull() {\n+        assertNotNull(ByteIteratorInputStream.adapt(new ArrayByteList().iterator()));\n+    }\n+    \n+}", "timestamp": 1050426555, "metainfo": ""}