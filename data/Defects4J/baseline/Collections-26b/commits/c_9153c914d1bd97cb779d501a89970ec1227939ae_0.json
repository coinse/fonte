{"sha": "9153c914d1bd97cb779d501a89970ec1227939ae", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471166 | scolebourne | 2006-11-04 03:33:22 -0800 (Sat, 04 Nov 2006) | 1 line          Removed Typed* containers such as TypedList and TypedMap as generics now provides type safety     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestBagUtils.java\n+++ b/src/test/org/apache/commons/collections/TestBagUtils.java\n import org.apache.commons.collections.bag.TreeBag;\n import org.apache.commons.collections.bag.UnmodifiableBag;\n import org.apache.commons.collections.bag.UnmodifiableSortedBag;\n+import org.apache.commons.collections.functors.TruePredicate;\n \n /**\n  * Tests for BagUtils factory methods.\n     public static Test suite() {\n         return BulkTest.makeSuite(TestBagUtils.class);\n     }\n-    \n+\n     //----------------------------------------------------------------------\n \n-    protected Class stringClass = this.getName().getClass();\n-    protected Predicate truePredicate = PredicateUtils.truePredicate();\n-    protected Transformer nopTransformer = TransformerUtils.nopTransformer();\n-    \n+    protected Class<?> stringClass = this.getName().getClass();\n+    protected Predicate<Object> truePredicate = TruePredicate.truePredicate();\n+    protected Transformer<Object, Object> nopTransformer = TransformerUtils.nopTransformer();\n+\n     //----------------------------------------------------------------------\n-    \n+\n     public void testSynchronizedBag() {\n-        Bag bag = BagUtils.synchronizedBag(new HashBag());\n+        Bag<Object> bag = BagUtils.synchronizedBag(new HashBag<Object>());\n         assertTrue(\"Returned object should be a SynchronizedBag.\",\n             bag instanceof SynchronizedBag);\n         try {\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        }  \n+        }\n     }\n-    \n+\n     public void testUnmodifiableBag() {\n-        Bag bag = BagUtils.unmodifiableBag(new HashBag());\n+        Bag<Object> bag = BagUtils.unmodifiableBag(new HashBag<Object>());\n         assertTrue(\"Returned object should be an UnmodifiableBag.\",\n             bag instanceof UnmodifiableBag);\n         try {\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        }  \n+        }\n     }\n-    \n+\n     public void testPredicatedBag() {\n-        Bag bag = BagUtils.predicatedBag(new HashBag(), truePredicate);\n+        Bag<Object> bag = BagUtils.predicatedBag(new HashBag<Object>(), truePredicate);\n         assertTrue(\"Returned object should be a PredicatedBag.\",\n             bag instanceof PredicatedBag);\n         try {\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        } \n+        }\n         try {\n-            bag = BagUtils.predicatedBag(new HashBag(), null);\n+            bag = BagUtils.predicatedBag(new HashBag<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null predicate.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        }  \n+        }\n     }\n-    \n-    public void testTypedBag() {\n-        Bag bag = BagUtils.typedBag(new HashBag(), stringClass);      \n-        assertTrue(\"Returned object should be a TypedBag.\",\n-            bag instanceof PredicatedBag);\n+\n+     public void testTransformedBag() {\n+        Bag<Object> bag = BagUtils.transformedBag(new HashBag<Object>(), nopTransformer);\n+        assertTrue(\"Returned object should be an TransformedBag.\",\n+            bag instanceof TransformedBag);\n         try {\n-            bag = BagUtils.typedBag(null, stringClass);\n+            bag = BagUtils.transformedBag(null, nopTransformer);\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        } \n+        }\n         try {\n-            bag = BagUtils.typedBag(new HashBag(), null);\n-            fail(\"Expecting IllegalArgumentException for null type.\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }  \n-    }\n-    \n-     public void testTransformedBag() {\n-        Bag bag = BagUtils.transformedBag(new HashBag(), nopTransformer);      \n-        assertTrue(\"Returned object should be an TransformedBag.\",\n-            bag instanceof TransformedBag);\n-        try {\n-            bag = BagUtils.transformedBag(null, nopTransformer);      \n-            fail(\"Expecting IllegalArgumentException for null bag.\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        } \n-        try {\n-            bag = BagUtils.transformedBag(new HashBag(), null);  \n+            bag = BagUtils.transformedBag(new HashBag<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null transformer.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        }  \n+        }\n     }\n-     \n+\n     public void testSynchronizedSortedBag() {\n-        Bag bag = BagUtils.synchronizedSortedBag(new TreeBag());\n+        Bag<Object> bag = BagUtils.synchronizedSortedBag(new TreeBag<Object>());\n         assertTrue(\"Returned object should be a SynchronizedSortedBag.\",\n             bag instanceof SynchronizedSortedBag);\n         try {\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        }  \n+        }\n     }\n-    \n+\n     public void testUnmodifiableSortedBag() {\n-        Bag bag = BagUtils.unmodifiableSortedBag(new TreeBag());\n+        Bag<Object> bag = BagUtils.unmodifiableSortedBag(new TreeBag<Object>());\n         assertTrue(\"Returned object should be an UnmodifiableSortedBag.\",\n             bag instanceof UnmodifiableSortedBag);\n         try {\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        }  \n+        }\n     }\n-    \n+\n     public void testPredicatedSortedBag() {\n-        Bag bag = BagUtils.predicatedSortedBag(new TreeBag(), truePredicate);\n+        Bag<Object> bag = BagUtils.predicatedSortedBag(new TreeBag<Object>(), truePredicate);\n         assertTrue(\"Returned object should be a PredicatedSortedBag.\",\n             bag instanceof PredicatedSortedBag);\n         try {\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        } \n+        }\n         try {\n-            bag = BagUtils.predicatedSortedBag(new TreeBag(), null);\n+            bag = BagUtils.predicatedSortedBag(new TreeBag<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null predicate.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        }  \n+        }\n     }\n-    \n-    public void testTypedSortedBag() {\n-        Bag bag = BagUtils.typedSortedBag(new TreeBag(), stringClass);      \n-        assertTrue(\"Returned object should be a TypedSortedBag.\",\n-            bag instanceof PredicatedSortedBag);\n+\n+    public void testTransformedSortedBag() {\n+        Bag<Object> bag = BagUtils.transformedSortedBag(new TreeBag<Object>(), nopTransformer);\n+        assertTrue(\"Returned object should be an TransformedSortedBag\",\n+            bag instanceof TransformedSortedBag);\n         try {\n-            bag = BagUtils.typedSortedBag(null, stringClass);\n+            bag = BagUtils.transformedSortedBag(null, nopTransformer);\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        } \n+        }\n         try {\n-            bag = BagUtils.typedSortedBag(new TreeBag(), null);\n-            fail(\"Expecting IllegalArgumentException for null type.\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        }  \n-    }\n-    \n-    public void testTransformedSortedBag() {\n-        Bag bag = BagUtils.transformedSortedBag(new TreeBag(), nopTransformer);      \n-        assertTrue(\"Returned object should be an TransformedSortedBag\",\n-            bag instanceof TransformedSortedBag);\n-        try {\n-            bag = BagUtils.transformedSortedBag(null, nopTransformer);      \n-            fail(\"Expecting IllegalArgumentException for null bag.\");\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n-        } \n-        try {\n-            bag = BagUtils.transformedSortedBag(new TreeBag(), null);  \n+            bag = BagUtils.transformedSortedBag(new TreeBag<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null transformer.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n-        }  \n+        }\n     }\n }\n ", "timestamp": 1252994277, "metainfo": ""}