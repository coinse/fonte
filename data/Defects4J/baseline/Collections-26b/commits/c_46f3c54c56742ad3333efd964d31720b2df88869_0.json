{"sha": "46f3c54c56742ad3333efd964d31720b2df88869", "log": "Refactoring putAll to _putAll so the constructor can call the copying in code without running through a subclass' implementation of putAll. Reported in COLLECTIONS-317  ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n      */\n     protected AbstractHashedMap(Map map) {\n         this(Math.max(2 * map.size(), DEFAULT_CAPACITY), DEFAULT_LOAD_FACTOR);\n-        putAll(map);\n+        _putAll(map);\n     }\n \n     /**\n      * @throws NullPointerException if the map is null\n      */\n     public void putAll(Map map) {\n+        _putAll(map);\n+    }\n+\n+    /**\n+     * Puts all the values from the specified map into this map.\n+     * <p>\n+     * This implementation iterates around the specified map and\n+     * uses {@link #put(Object, Object)}.\n+     * <p>\n+     * It is private to allow the constructor to still call it \n+     * even when putAll is overriden. \n+     * \n+     * @param map  the map to add\n+     * @throws NullPointerException if the map is null\n+     */\n+    private void _putAll(Map map) {\n         int mapSize = map.size();\n         if (mapSize == 0) {\n             return;", "timestamp": 1242793813, "metainfo": ""}