{"sha": "03f4174238120050ae33705b5079458540dd13cd", "log": "Make testframework jar independent of collections jar (Except Bag interface)   ", "commit": "\n--- a/src/test/org/apache/commons/collections/AbstractTestBag.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestBag.java,v 1.1 2003/10/02 22:35:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestBag.java,v 1.2 2003/10/05 12:34:46 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link Bag} fails.\n  *\n+ * @version $Revision: 1.2 $ $Date: 2003/10/05 12:34:46 $\n+ * \n  * @author Chuck Burdick\n- * @version $Id: AbstractTestBag.java,v 1.1 2003/10/02 22:35:31 scolebourne Exp $\n+ * @author Stephen Colebourne\n  */\n public abstract class AbstractTestBag extends AbstractTestObject {\n //  TODO: this class should really extend from TestCollection, but the bag\n     \n     public void testContains() {\n         Bag bag = makeBag();\n-        bag.add(\"A\");\n-        bag.add(\"A\");\n-        bag.add(\"A\");\n-        bag.add(\"B\");\n-        bag.add(\"B\");\n-        List compare = new ArrayList();\n-        compare.add(\"A\");\n-        compare.add(\"B\");\n-        assertEquals(\"Other list has 1 'B'\", 1, (new HashBag(compare)).getCount(\"B\"));\n-        assertTrue(\"Bag has at least 1 'B'\", 1 <= bag.getCount(\"B\"));\n-        assertTrue(\"Bag contains items in the list\", bag.containsAll(compare));\n-        compare.add(\"A\");\n-        compare.add(\"B\");\n-        assertEquals(\"Other list has 2 'B'\", 2, (new HashBag(compare)).getCount(\"B\"));\n-        assertTrue(\"Bag has at least 2 'B'\", 2 <= bag.getCount(\"B\"));\n-        assertTrue(\"Bag contains items in the list\", bag.containsAll(compare));\n-        compare.add(\"A\");\n-        compare.add(\"B\");\n-        assertEquals(\"Other list has 3 'B'\", 3, (new HashBag(compare)).getCount(\"B\"));\n-        assertTrue(\"Bag does not have 3 'B'\", 3 > bag.getCount(\"B\"));\n-        assertTrue(\"Bag contains items in the list\", !bag.containsAll(compare));\n+        \n+        assertEquals(\"Bag does not have at least 1 'A'\", false, bag.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n+        \n+        bag.add(\"A\");  // bag 1A\n+        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n+        \n+        bag.add(\"A\");  // bag 2A\n+        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n+        \n+        bag.add(\"B\");  // bag 2A,1B\n+        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n+        assertEquals(\"Bag has at least 1 'B'\", true, bag.contains(\"B\"));\n+    }\n+\n+    public void testContainsAll() {\n+        Bag bag = makeBag();\n+        List known = new ArrayList();\n+        List known1A = new ArrayList();\n+        known1A.add(\"A\");\n+        List known2A = new ArrayList();\n+        known2A.add(\"A\");\n+        known2A.add(\"A\");\n+        List known1B = new ArrayList();\n+        known1B.add(\"B\");\n+        List known1A1B = new ArrayList();\n+        known1A1B.add(\"A\");\n+        known1A1B.add(\"B\");\n+        \n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag does not containsAll of 1 'A'\", false, bag.containsAll(known1A));\n+        assertEquals(\"Bag does not containsAll of 2 'A'\", false, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+        \n+        bag.add(\"A\");  // bag 1A\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag does not containsAll of 2 'A'\", false, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+        \n+        bag.add(\"A\");  // bag 2A\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+        \n+        bag.add(\"A\");  // bag 3A\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+        \n+        bag.add(\"B\");  // bag 3A1B\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag containsAll of 1 'B'\", true, bag.containsAll(known1B));\n+        assertEquals(\"Bag containsAll of 1 'A' 1 'B'\", true, bag.containsAll(known1A1B));\n     }\n \n     public void testSize() {\n         Bag bag = makeBag();\n-        bag.add(\"A\");\n-        bag.add(\"A\");\n-        bag.add(\"A\");\n-        bag.add(\"B\");\n+        assertEquals(\"Should have 0 total items\", 0, bag.size());\n+        bag.add(\"A\");\n+        assertEquals(\"Should have 1 total items\", 1, bag.size());\n+        bag.add(\"A\");\n+        assertEquals(\"Should have 2 total items\", 2, bag.size());\n+        bag.add(\"A\");\n+        assertEquals(\"Should have 3 total items\", 3, bag.size());\n+        bag.add(\"B\");\n+        assertEquals(\"Should have 4 total items\", 4, bag.size());\n         bag.add(\"B\");\n         assertEquals(\"Should have 5 total items\", 5, bag.size());\n         bag.remove(\"A\", 2);\n--- a/src/test/org/apache/commons/collections/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.1 2003/10/02 23:01:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.2 2003/10/05 12:34:46 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.io.IOException;\n import java.io.Serializable;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n  * @author Michael Smith\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n- * @version $Revision: 1.1 $ $Date: 2003/10/02 23:01:09 $\n+ * @author Stephen Colebourne\n+ * @version $Revision: 1.2 $ $Date: 2003/10/05 12:34:46 $\n  */\n public abstract class AbstractTestMap extends AbstractTestObject {\n \n     private Map.Entry[] makeEntryArray(Object[] keys, Object[] values) {\n         Map.Entry[] result = new Map.Entry[keys.length];\n         for (int i = 0; i < keys.length; i++) {\n-            result[i] = new DefaultMapEntry(keys[i], values[i]);\n+            Map map = new HashMap();\n+            map.put(keys[i], values[i]);\n+            result[i] = (Map.Entry) map.entrySet().iterator().next();\n         }\n         return result;\n     }\n     }\n \n     protected void verifyValues() {\n-        Bag bag1 = new HashBag(confirmed.values());\n-        Bag bag2 = new HashBag(values);\n+        List known = new ArrayList(confirmed.values());\n+        List test = new ArrayList(values);\n \n         int size = confirmed.size();\n         boolean empty = confirmed.isEmpty();\n                      empty, values.isEmpty());\n         assertTrue(\"values should contain all HashMap's elements\",\n                    values.containsAll(confirmed.values()));\n-        assertEquals(\"Map's values should still equal HashMap's\",\n-                     bag1, bag2);\n+        // originally coded to use a HashBag, but now separate jar so...\n+        for (Iterator it = known.iterator(); it.hasNext();) {\n+            boolean removed = test.remove(it.next());\n+            assertTrue(\"Map's values should still equal HashMap's\", removed);\n+        }\n+        assertTrue(\"Map's values should still equal HashMap's\", test.isEmpty());\n     }\n \n ", "timestamp": 1065357286, "metainfo": ""}