{"sha": "a324ca7a63e09e3f85029e95e5b98df2f6639c62", "log": "Add method putAll to put an array of key/value pairs into a map Bug 30882, suggested by Rafael U. C. Afonso   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.47 $ $Date: 2004/07/17 21:23:59 $\n+ * @version $Revision: 1.48 $ $Date: 2004/09/22 23:03:50 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n         return out;\n     }\n      \n+    //-----------------------------------------------------------------------\n     /**\n      * Protects against adding null values to a map.\n      * <p>\n         } else {\n             map.put(key, value);\n         }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Puts all the keys and values from the specified array into the map.\n+     * <p>\n+     * This method is an alternative to the {@link java.util.Map#putAll(java.util.Map)}\n+     * method and constructors. It allows you to build a map from an object array\n+     * of various possible styles.\n+     * <p>\n+     * If the first entry in the object array implements {@link java.util.Map.Entry}\n+     * or {@link KeyValue} then the key and value are added from that object.\n+     * If the first entry in the object array is an object array itself, then\n+     * it is assumed that index 0 in the sub-array is the key and index 1 is the value.\n+     * Otherwise, the array is treated as keys and values in alternate indices.\n+     * <p>\n+     * For example, to create a color map:\n+     * <pre>\n+     * Map colorMap = MapUtils.putAll(new HashMap(), new String[][] {\n+     *     {\"RED\", \"#FF0000\"},\n+     *     {\"GREEN\", \"#00FF00\"},\n+     *     {\"BLUE\", \"#0000FF\"}\n+     * });\n+     * </pre>\n+     * or:\n+     * <pre>\n+     * Map colorMap = MapUtils.putAll(new HashMap(), new String[] {\n+     *     \"RED\", \"#FF0000\",\n+     *     \"GREEN\", \"#00FF00\",\n+     *     \"BLUE\", \"#0000FF\"\n+     * });\n+     * </pre>\n+     * or:\n+     * <pre>\n+     * Map colorMap = MapUtils.putAll(new HashMap(), new Map.Entry[] {\n+     *     new DefaultMapEntry(\"RED\", \"#FF0000\"),\n+     *     new DefaultMapEntry(\"GREEN\", \"#00FF00\"),\n+     *     new DefaultMapEntry(\"BLUE\", \"#0000FF\")\n+     * });\n+     * </pre>\n+     *\n+     * @param map  the map to populate, must not be null\n+     * @param array  an array to populate from, null ignored\n+     * @return the input map\n+     * @throws NullPointerException  if map is null\n+     * @throws IllegalArgumentException  if sub-array or entry matching used and an\n+     *  entry is invalid\n+     * @throws ClassCaseException if the array contents is mixed\n+     */\n+    public static Map putAll(Map map, Object[] array) {\n+        map.size();  // force NPE\n+        if (array == null || array.length == 0) {\n+            return map;\n+        }\n+        Object obj = array[0];\n+        if (obj instanceof Map.Entry) {\n+            for (int i = 0; i < array.length; i++) {\n+                Map.Entry entry = (Map.Entry) array[i];\n+                map.put(entry.getKey(), entry.getValue());\n+            }\n+        } else if (obj instanceof KeyValue) {\n+            for (int i = 0; i < array.length; i++) {\n+                KeyValue keyval = (KeyValue) array[i];\n+                map.put(keyval.getKey(), keyval.getValue());\n+            }\n+        } else if (obj instanceof Object[]) {\n+            for (int i = 0; i < array.length; i++) {\n+                Object[] sub = (Object[]) array[i];\n+                if (sub == null || sub.length < 2) {\n+                    throw new IllegalArgumentException(\"Invalid array element: \" + i);\n+                }\n+                map.put(sub[0], sub[1]);\n+            }\n+        } else {\n+            for (int i = 0; i < array.length - 1;) {\n+                map.put(array[i++], array[i++]);\n+            }\n+        }\n+        return map;\n     }\n \n     // Map decorators\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.keyvalue.DefaultKeyValue;\n+import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n import org.apache.commons.collections.map.LazyMap;\n import org.apache.commons.collections.map.PredicatedMap;\n import org.apache.commons.collections.map.TestPredicatedMap;\n /**\n  * Tests for MapUtils.\n  * \n- * @version $Revision: 1.23 $ $Date: 2004/04/09 14:55:39 $\n+ * @version $Revision: 1.24 $ $Date: 2004/09/22 23:03:50 $\n  * \n  * @author Stephen Colebourne\n  * @author Arun Mammen Thomas\n         assertEquals( out.get(\"D\"), \"4\" );\n         assertEquals( out.get(\"E\"), \"5\" );\n     }\n-                \n+\n+    public void testPutAll_Map_array() {\n+        try {\n+            MapUtils.putAll(null, null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            MapUtils.putAll(null, new Object[0]);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        \n+        Map test = MapUtils.putAll(new HashMap(), new String[0]);\n+        assertEquals(0, test.size());\n+        \n+        // sub array\n+        test = MapUtils.putAll(new HashMap(), new String[][] {\n+            {\"RED\", \"#FF0000\"},\n+            {\"GREEN\", \"#00FF00\"},\n+            {\"BLUE\", \"#0000FF\"}\n+        });\n+        assertEquals(true, test.containsKey(\"RED\"));\n+        assertEquals(\"#FF0000\", test.get(\"RED\"));\n+        assertEquals(true, test.containsKey(\"GREEN\"));\n+        assertEquals(\"#00FF00\", test.get(\"GREEN\"));\n+        assertEquals(true, test.containsKey(\"BLUE\"));\n+        assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n+        assertEquals(3, test.size());\n+        \n+        try {\n+            MapUtils.putAll(new HashMap(), new String[][] {\n+                {\"RED\", \"#FF0000\"},\n+                null,\n+                {\"BLUE\", \"#0000FF\"}\n+            });\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            MapUtils.putAll(new HashMap(), new String[][] {\n+                {\"RED\", \"#FF0000\"},\n+                {\"GREEN\"},\n+                {\"BLUE\", \"#0000FF\"}\n+            });\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            MapUtils.putAll(new HashMap(), new String[][] {\n+                {\"RED\", \"#FF0000\"},\n+                {},\n+                {\"BLUE\", \"#0000FF\"}\n+            });\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        // flat array\n+        test = MapUtils.putAll(new HashMap(), new String[] {\n+            \"RED\", \"#FF0000\",\n+            \"GREEN\", \"#00FF00\",\n+            \"BLUE\", \"#0000FF\"\n+        });\n+        assertEquals(true, test.containsKey(\"RED\"));\n+        assertEquals(\"#FF0000\", test.get(\"RED\"));\n+        assertEquals(true, test.containsKey(\"GREEN\"));\n+        assertEquals(\"#00FF00\", test.get(\"GREEN\"));\n+        assertEquals(true, test.containsKey(\"BLUE\"));\n+        assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n+        assertEquals(3, test.size());\n+        \n+        test = MapUtils.putAll(new HashMap(), new String[] {\n+            \"RED\", \"#FF0000\",\n+            \"GREEN\", \"#00FF00\",\n+            \"BLUE\", \"#0000FF\",\n+            \"PURPLE\" // ignored\n+        });\n+        assertEquals(true, test.containsKey(\"RED\"));\n+        assertEquals(\"#FF0000\", test.get(\"RED\"));\n+        assertEquals(true, test.containsKey(\"GREEN\"));\n+        assertEquals(\"#00FF00\", test.get(\"GREEN\"));\n+        assertEquals(true, test.containsKey(\"BLUE\"));\n+        assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n+        assertEquals(3, test.size());\n+        \n+        // map entry\n+        test = MapUtils.putAll(new HashMap(), new Object[] {\n+            new DefaultMapEntry(\"RED\", \"#FF0000\"),\n+            new DefaultMapEntry(\"GREEN\", \"#00FF00\"),\n+            new DefaultMapEntry(\"BLUE\", \"#0000FF\")\n+        });\n+        assertEquals(true, test.containsKey(\"RED\"));\n+        assertEquals(\"#FF0000\", test.get(\"RED\"));\n+        assertEquals(true, test.containsKey(\"GREEN\"));\n+        assertEquals(\"#00FF00\", test.get(\"GREEN\"));\n+        assertEquals(true, test.containsKey(\"BLUE\"));\n+        assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n+        assertEquals(3, test.size());\n+        \n+        // key value\n+        test = MapUtils.putAll(new HashMap(), new Object[] {\n+            new DefaultKeyValue(\"RED\", \"#FF0000\"),\n+            new DefaultKeyValue(\"GREEN\", \"#00FF00\"),\n+            new DefaultKeyValue(\"BLUE\", \"#0000FF\")\n+        });\n+        assertEquals(true, test.containsKey(\"RED\"));\n+        assertEquals(\"#FF0000\", test.get(\"RED\"));\n+        assertEquals(true, test.containsKey(\"GREEN\"));\n+        assertEquals(\"#00FF00\", test.get(\"GREEN\"));\n+        assertEquals(true, test.containsKey(\"BLUE\"));\n+        assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n+        assertEquals(3, test.size());\n+    }\n+\n     public void testConvertResourceBundle() {\n         final Map in = new HashMap( 5 , 1 );\n         in.put( \"1\" , \"A\" );", "timestamp": 1095894230, "metainfo": ""}