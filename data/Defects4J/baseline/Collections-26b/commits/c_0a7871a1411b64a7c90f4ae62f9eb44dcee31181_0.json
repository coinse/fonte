{"sha": "0a7871a1411b64a7c90f4ae62f9eb44dcee31181", "log": "[COLLECTIONS-529] Added methods removeAll and retainAll to CollectionUtils that use a custom Equator for equality checks. Thanks to Alexander Muthmann and Dipanjan Laha.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n      * @since 4.0\n      */\n     private static class EquatorWrapper<O> {\n-        private final Equator<O> equator;\n+        private final Equator<? super O> equator;\n         private final O object;\n \n-        public EquatorWrapper(final Equator<O> equator, final O object) {\n+        public EquatorWrapper(final Equator<? super O> equator, final O object) {\n             this.equator = equator;\n             this.object = object;\n         }\n     }\n \n     /**\n+     * Returns a collection containing all the elements in\n+     * <code>collection</code> that are also in <code>retain</code>. The\n+     * cardinality of an element <code>e</code> in the returned collection is\n+     * the same as the cardinality of <code>e</code> in <code>collection</code>\n+     * unless <code>retain</code> does not contain <code>e</code>, in which case\n+     * the cardinality is zero. This method is useful if you do not wish to\n+     * modify the collection <code>c</code> and thus cannot call\n+     * <code>c.retainAll(retain);</code>.\n+     * <p>\n+     * Moreover this method uses an {@link Equator} instead of\n+     * {@link Object#equals(Object)} to determine the equality of the elements\n+     * in <code>collection</code> and <code>retain</code>. Hence this method is\n+     * useful in cases where the equals behavior of an object needs to be\n+     * modified without changing the object itself.\n+     *\n+     * @param <E> the type of object the {@link Collection} contains\n+     * @param collection the collection whose contents are the target of the {@code retainAll} operation\n+     * @param retain the collection containing the elements to be retained in the returned collection\n+     * @param equator the Equator used for testing equality\n+     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n+     * that occur at least once in <code>retain</code> according to the <code>equator</code>\n+     * @throws NullPointerException if any of the parameters is null\n+     * @since 4.1\n+     */\n+    public static <E> Collection<E> retainAll(final Iterable<E> collection,\n+                                              final Iterable<? extends E> retain,\n+                                              final Equator<? super E> equator) {\n+\n+        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n+            public EquatorWrapper<E> transform(E input) {\n+                return new EquatorWrapper<E>(equator, input);\n+            }\n+        };\n+\n+        final Set<EquatorWrapper<E>> retainSet =\n+                collect(retain, transformer, new HashSet<EquatorWrapper<E>>());\n+\n+        final List<E> list = new ArrayList<E>();\n+        for (final E element : collection) {\n+            if (retainSet.contains(new EquatorWrapper<E>(equator, element))) {\n+                list.add(element);\n+            }\n+        }\n+        return list;\n+    }\n+\n+    /**\n      * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n      * method returns a collection containing all the elements in <code>c</code>\n      * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n      */\n     public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n         return ListUtils.removeAll(collection, remove);\n+  }\n+\n+    /**\n+     * Removes all elements in <code>remove</code> from <code>collection</code>.\n+     * That is, this method returns a collection containing all the elements in\n+     * <code>collection</code> that are not in <code>remove</code>. The\n+     * cardinality of an element <code>e</code> in the returned collection is\n+     * the same as the cardinality of <code>e</code> in <code>collection</code>\n+     * unless <code>remove</code> contains <code>e</code>, in which case the\n+     * cardinality is zero. This method is useful if you do not wish to modify\n+     * the collection <code>c</code> and thus cannot call\n+     * <code>collection.removeAll(remove)</code>.\n+     * <p>\n+     * Moreover this method uses an {@link Equator} instead of\n+     * {@link Object#equals(Object)} to determine the equality of the elements\n+     * in <code>collection</code> and <code>remove</code>. Hence this method is\n+     * useful in cases where the equals behavior of an object needs to be\n+     * modified without changing the object itself.\n+     *\n+     * @param <E> the type of object the {@link Collection} contains\n+     * @param collection the collection from which items are removed (in the returned collection)\n+     * @param remove the items to be removed from the returned collection\n+     * @param equator the Equator used for testing equality\n+     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n+     * except any element that if equal according to the <code>equator</code>\n+     * @throws NullPointerException if any of the parameters is null\n+     * @since 4.1\n+     */\n+    public static <E> Collection<E> removeAll(final Iterable<E> collection,\n+                                              final Iterable<? extends E> remove,\n+                                              final Equator<? super E> equator) {\n+\n+        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n+            public EquatorWrapper<E> transform(E input) {\n+                return new EquatorWrapper<E>(equator, input);\n+            }\n+        };\n+\n+        final Set<EquatorWrapper<E>> removeSet =\n+                collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n+\n+        final List<E> list = new ArrayList<E>();\n+        for (final E element : collection) {\n+            if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n+                list.add(element);\n+            }\n+        }\n+        return list;\n+    }\n+\n+    /**\n+     * This method checks, if any of the elements in <code>collection</code> is\n+     * equal to <code>object</code>. Object equality is tested with an\n+     * <code>equator</code> unlike <code>collection.contains(object)</code>\n+     * which uses {@link Object#equals(Object)}.\n+     *\n+     * @param <E> the type of object the {@link Collection} contains\n+     * @param collection the collection from which items are compared\n+     * @param object the object to compare with the collection's entries\n+     * @param equator the equator to use to check, if the item if equal to any\n+     *        of the collection's entries.\n+     * @return true if <code>object</code> is in <code>collection</code>\n+     *         according to <code>equator</code>\n+     * @throws NullPointerException if any parameter is null\n+     * @since 4.1\n+     */\n+    public static <E> boolean contains(final Collection<? extends E> collection, final E object,\n+            final Equator<? super E> equator) {\n+        for (final E obj : collection) {\n+            if (equator.equate(obj, object)) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n \n import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.fail;\n \n-import java.util.*;\n-\n-import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.Vector;\n+\n import org.apache.commons.collections4.bag.HashBag;\n import org.apache.commons.collections4.collection.PredicatedCollection;\n import org.apache.commons.collections4.collection.SynchronizedCollection;\n import org.apache.commons.collections4.collection.TransformedCollection;\n import org.apache.commons.collections4.collection.UnmodifiableCollection;\n import org.apache.commons.collections4.functors.DefaultEquator;\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n import org.junit.Before;\n import org.junit.Test;\n \n             }\n         };\n         assertTrue(CollectionUtils.matchesAll(collectionA, lessThanFive));\n-        \n+\n         Predicate<Integer> lessThanFour = new Predicate<Integer>() {\n             public boolean evaluate(Integer object) {\n                 return object < 4;\n             }\n         };\n         assertFalse(CollectionUtils.matchesAll(collectionA, lessThanFour));\n-        \n+\n         assertTrue(CollectionUtils.matchesAll(null, lessThanFour));\n         assertTrue(CollectionUtils.matchesAll(emptyCollection, lessThanFour));\n     }\n \n+    @Test\n+    public void testRemoveAllWithEquator() {\n+        final List<String> base = new ArrayList<String>();\n+        base.add(\"AC\");\n+        base.add(\"BB\");\n+        base.add(\"CA\");\n+\n+        final List<String> remove = new ArrayList<String>();\n+        remove.add(\"AA\");\n+        remove.add(\"CX\");\n+        remove.add(\"XZ\");\n+\n+        // use an equator which compares the second letter only\n+        final Collection<String> result = CollectionUtils.removeAll(base, remove, new Equator<String>() {\n+\n+            public boolean equate(String o1, String o2) {\n+                return o1.charAt(1) == o2.charAt(1);\n+            }\n+\n+            public int hash(String o) {\n+                return o.charAt(1);\n+            }\n+        });\n+\n+        assertEquals(2, result.size());\n+        assertTrue(result.contains(\"AC\"));\n+        assertTrue(result.contains(\"BB\"));\n+        assertFalse(result.contains(\"CA\"));\n+        assertEquals(3, base.size());\n+        assertEquals(true, base.contains(\"AC\"));\n+        assertEquals(true, base.contains(\"BB\"));\n+        assertEquals(true, base.contains(\"CA\"));\n+        assertEquals(3, remove.size());\n+        assertEquals(true, remove.contains(\"AA\"));\n+        assertEquals(true, remove.contains(\"CX\"));\n+        assertEquals(true, remove.contains(\"XZ\"));\n+\n+        try {\n+            CollectionUtils.removeAll(null, null, DefaultEquator.defaultEquator());\n+            fail(\"expecting NullPointerException\");\n+        } catch (final NullPointerException npe) {\n+        } // this is what we want\n+\n+        try {\n+            CollectionUtils.removeAll(base, remove, null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (final NullPointerException npe) {\n+        } // this is what we want\n+    }\n+\n+    @Test\n+    public void testRetainAllWithEquator() {\n+        final List<String> base = new ArrayList<String>();\n+        base.add(\"AC\");\n+        base.add(\"BB\");\n+        base.add(\"CA\");\n+\n+        final List<String> retain = new ArrayList<String>();\n+        retain.add(\"AA\");\n+        retain.add(\"CX\");\n+        retain.add(\"XZ\");\n+\n+        // use an equator which compares the second letter only\n+        final Collection<String> result = CollectionUtils.retainAll(base, retain, new Equator<String>() {\n+\n+            public boolean equate(String o1, String o2) {\n+                return o1.charAt(1) == o2.charAt(1);\n+            }\n+\n+            public int hash(String o) {\n+                return o.charAt(1);\n+            }\n+        });\n+        assertEquals(1, result.size());\n+        assertTrue(result.contains(\"CA\"));\n+        assertFalse(result.contains(\"BB\"));\n+        assertFalse(result.contains(\"AC\"));\n+\n+        assertEquals(3, base.size());\n+        assertTrue(base.contains(\"AC\"));\n+        assertTrue(base.contains(\"BB\"));\n+        assertTrue(base.contains(\"CA\"));\n+\n+        assertEquals(3, retain.size());\n+        assertTrue(retain.contains(\"AA\"));\n+        assertTrue(retain.contains(\"CX\"));\n+        assertTrue(retain.contains(\"XZ\"));\n+\n+        try {\n+            CollectionUtils.retainAll(null, null, null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (final NullPointerException npe) {\n+        } // this is what we want\n+\n+        try {\n+            CollectionUtils.retainAll(base, retain, null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (final NullPointerException npe) {\n+        } // this is what we want\n+    }\n+\n+    @Test\n+    public void testContainsWithEquator() {\n+        final List<String> base = new ArrayList<String>();\n+        base.add(\"AC\");\n+        base.add(\"BB\");\n+        base.add(\"CA\");\n+\n+        final Equator<String> secondLetterEquator = new Equator<String>() {\n+\n+            public boolean equate(String o1, String o2) {\n+                return o1.charAt(1) == o2.charAt(1);\n+            }\n+\n+            public int hash(String o) {\n+                return o.charAt(1);\n+            }\n+\n+        };\n+\n+        assertFalse(base.contains(\"CC\"));\n+        assertTrue(CollectionUtils.contains(base, \"AC\", secondLetterEquator));\n+        assertTrue(CollectionUtils.contains(base, \"CC\", secondLetterEquator));\n+        assertFalse(CollectionUtils.contains(base, \"CX\", secondLetterEquator));\n+\n+        try {\n+            CollectionUtils.contains(null, null, secondLetterEquator);\n+            fail(\"expecting NullPointerException\");\n+        } catch (final NullPointerException npe) {\n+        } // this is what we want\n+\n+        try {\n+            CollectionUtils.contains(base, \"AC\", null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (final NullPointerException npe) {\n+        } // this is what we want\n+      }\n }", "timestamp": 1401464648, "metainfo": ""}