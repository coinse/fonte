{"sha": "9ccb68523b8839e03924980c4b3f9ab1ceb5e0c3", "log": "Rework build script for new test classes   ", "commit": "\n--- a/src/test/org/apache/commons/collections/AbstractTestCollection.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestCollection.java,v 1.8 2003/11/04 23:34:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestCollection.java,v 1.9 2003/11/16 21:39:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Collection;\n import java.util.Collections;\n import java.util.ConcurrentModificationException;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.NoSuchElementException;\n-\n-import org.apache.commons.collections.pairs.DefaultMapEntry;\n \n /**\n  * Abstract test class for {@link java.util.Collection} methods and contracts.\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link Collection} fails.\n  *\n- * @version $Revision: 1.8 $ $Date: 2003/11/04 23:34:46 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/16 21:39:42 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n         return makeCollection();\n     }\n \n+    /**\n+     * Creates a new Map Entry that is independent of the first and the map.\n+     */\n+    protected Map.Entry cloneMapEntry(Map.Entry entry) {\n+        HashMap map = new HashMap();\n+        map.put(entry.getKey(), entry.getValue());\n+        return (Map.Entry) map.entrySet().iterator().next();\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      *  Returns an array of objects that are contained in a collection\n             // TreeMap reuses the Map Entry, so the verify below fails\n             // Clone it here if necessary\n             if (o instanceof Map.Entry) {\n-                o = new DefaultMapEntry((Map.Entry) o);\n+                o = cloneMapEntry((Map.Entry) o);\n             }\n             iter.remove();\n \n--- a/src/test/org/apache/commons/collections/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.12 2003/11/04 23:35:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.13 2003/11/16 21:39:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @version $Revision: 1.12 $ $Date: 2003/11/04 23:35:35 $\n+ * @version $Revision: 1.13 $ $Date: 2003/11/16 21:39:42 $\n  */\n public abstract class AbstractTestMap extends AbstractTestObject {\n \n      */\n     protected Map makeConfirmedMap() {\n         return new HashMap();\n+    }\n+\n+    /**\n+     * Creates a new Map Entry that is independent of the first and the map.\n+     */\n+    protected Map.Entry cloneMapEntry(Map.Entry entry) {\n+        HashMap map = new HashMap();\n+        map.put(entry.getKey(), entry.getValue());\n+        return (Map.Entry) map.entrySet().iterator().next();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java,v 1.1 2003/11/16 20:35:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java,v 1.2 2003/11/16 21:39:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.AbstractTestSortedMap;\n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.pairs.DefaultMapEntry;\n \n /**\n- * Abstract test class for {@link BidiMap} methods and contracts.\n+ * Abstract test class for {@link SortedBidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/11/16 20:35:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/16 21:39:42 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n         assertEquals(2, set.size());\n         \n         Iterator it2 = set.iterator();\n-        Map.Entry firstEntry = new DefaultMapEntry((Map.Entry) it2.next());\n-        Map.Entry secondEntry = new DefaultMapEntry((Map.Entry) it2.next());\n+        Map.Entry firstEntry = cloneMapEntry((Map.Entry) it2.next());\n+        Map.Entry secondEntry = cloneMapEntry((Map.Entry) it2.next());\n         assertEquals(true, sm.containsKey(first));\n         assertEquals(true, sub.containsKey(first));\n         assertEquals(true, set.contains(firstEntry));\n         Set set = sub.entrySet();\n         Iterator it2 = set.iterator();\n         Object fromEntry = it2.next();\n-        Map.Entry firstEntry = new DefaultMapEntry((Map.Entry) it2.next());\n-        Map.Entry secondEntry = new DefaultMapEntry((Map.Entry) it2.next());\n+        Map.Entry firstEntry = cloneMapEntry((Map.Entry) it2.next());\n+        Map.Entry secondEntry = cloneMapEntry((Map.Entry) it2.next());\n         assertEquals(true, sm.containsKey(first));\n         assertEquals(true, sub.containsKey(first));\n         assertEquals(true, set.contains(firstEntry));\n         assertEquals(3, set.size());\n         Iterator it2 = set.iterator();\n         Object fromEntry = it2.next();\n-        Map.Entry firstEntry = new DefaultMapEntry((Map.Entry) it2.next());\n-        Map.Entry secondEntry = new DefaultMapEntry((Map.Entry) it2.next());\n+        Map.Entry firstEntry = cloneMapEntry((Map.Entry) it2.next());\n+        Map.Entry secondEntry = cloneMapEntry((Map.Entry) it2.next());\n         assertEquals(true, sm.containsKey(first));\n         assertEquals(true, sub.containsKey(first));\n         assertEquals(true, set.contains(firstEntry));", "timestamp": 1069018782, "metainfo": ""}