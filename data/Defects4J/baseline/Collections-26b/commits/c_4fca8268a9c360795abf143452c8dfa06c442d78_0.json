{"sha": "4fca8268a9c360795abf143452c8dfa06c442d78", "log": "[COLLECTIONS-485] Added wildcards to copy-constructors and unmodifiable decorators / iterators, thanks to Hollis Waite.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/BagUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/BagUtils.java\n      * @return an unmodifiable view of that bag\n      * @throws IllegalArgumentException if the Bag is null\n      */\n-    public static <E> Bag<E> unmodifiableBag(final Bag<E> bag) {\n+    public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag) {\n         return UnmodifiableBag.unmodifiableBag(bag);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n      * @return an unmodifiable collection backed by the given collection\n      * @throws IllegalArgumentException  if the collection is null\n      */\n-    public static <C> Collection<C> unmodifiableCollection(final Collection<C> collection) {\n+    public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection) {\n         return UnmodifiableCollection.unmodifiableCollection(collection);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/EnumerationUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/EnumerationUtils.java\n      * @return a list containing all elements of the given enumeration\n      * @throws NullPointerException if the enumeration parameter is <code>null</code>.\n      */\n-    public static <E> List<E> toList(final Enumeration<E> enumeration) {\n+    public static <E> List<E> toList(final Enumeration<? extends E> enumeration) {\n         return IteratorUtils.toList(new EnumerationIterator<E>(enumeration));\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/ListUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/ListUtils.java\n      * @return an unmodifiable list backed by the given list\n      * @throws IllegalArgumentException  if the list is null\n      */\n-    public static <E> List<E> unmodifiableList(final List<E> list) {\n+    public static <E> List<E> unmodifiableList(final List<? extends E> list) {\n         return UnmodifiableList.unmodifiableList(list);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/MapUtils.java\n      * @return an unmodifiable map backed by the given map\n      * @throws IllegalArgumentException  if the map is null\n      */\n-    public static <K, V> Map<K, V> unmodifiableMap(final Map<K, V> map) {\n+    public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map) {\n         return UnmodifiableMap.unmodifiableMap(map);\n     }\n \n      * @return an unmodifiable map backed by the given map\n      * @throws IllegalArgumentException  if the map is null\n      */\n-    public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, V> map) {\n+    public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map) {\n         return UnmodifiableSortedMap.unmodifiableSortedMap(map);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/QueueUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/QueueUtils.java\n      * @return an unmodifiable queue backed by that queue\n      * @throws IllegalArgumentException  if the Queue is null\n      */\n-    public static <E> Queue<E> unmodifiableQueue(final Queue<E> queue) {\n+    public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue) {\n         return UnmodifiableQueue.unmodifiableQueue(queue);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/SetUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/SetUtils.java\n      * @return an unmodifiable set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      */\n-    public static <E> Set<E> unmodifiableSet(final Set<E> set) {\n+    public static <E> Set<E> unmodifiableSet(final Set<? extends E> set) {\n         return UnmodifiableSet.unmodifiableSet(set);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/TrieUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/TrieUtils.java\n      *\n      * @see java.util.Collections#unmodifiableMap(java.util.Map)\n      */\n-    public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, V> trie) {\n+    public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie) {\n         return UnmodifiableTrie.unmodifiableTrie(trie);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java\n      * @throws IllegalArgumentException if bag is null\n      * @since 4.0\n      */\n-    public static <E> Bag<E> unmodifiableBag(final Bag<E> bag) {\n+    public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag) {\n         if (bag instanceof Unmodifiable) {\n-            return bag;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final Bag<E> tmpBag = (Bag<E>) bag;\n+            return tmpBag;\n         }\n         return new UnmodifiableBag<E>(bag);\n     }\n      * @param bag  the bag to decorate, must not be null\n      * @throws IllegalArgumentException if bag is null\n      */\n-    private UnmodifiableBag(final Bag<E> bag) {\n-        super(bag);\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    private UnmodifiableBag(final Bag<? extends E> bag) {\n+        super((Bag<E>) bag);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/bidimap/DualHashBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/DualHashBidiMap.java\n      *\n      * @param map  the map whose mappings are to be placed in this map\n      */\n-    public DualHashBidiMap(final Map<K, V> map) {\n+    public DualHashBidiMap(final Map<? extends K, ? extends V> map) {\n         super(new HashMap<K, V>(), new HashMap<V, K>());\n         putAll(map);\n     }\n--- a/src/main/java/org/apache/commons/collections4/bidimap/DualLinkedHashBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/DualLinkedHashBidiMap.java\n  */\n package org.apache.commons.collections4.bidimap;\n \n-import org.apache.commons.collections4.BidiMap;\n-\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.LinkedHashMap;\n import java.util.Map;\n+\n+import org.apache.commons.collections4.BidiMap;\n \n /**\n  * Implementation of <code>BidiMap</code> that uses two <code>LinkedHashMap</code> instances.\n      *\n      * @param map the map whose mappings are to be placed in this map\n      */\n-    public DualLinkedHashBidiMap(final Map<K, V> map) {\n+    public DualLinkedHashBidiMap(final Map<? extends K, ? extends V> map) {\n         super(new LinkedHashMap<K, V>(), new LinkedHashMap<V, K>());\n         putAll(map);\n     }\n--- a/src/main/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap.java\n      *\n      * @param map  the map whose mappings are to be placed in this map\n      */\n-    public DualTreeBidiMap(final Map<K, V> map) {\n+    public DualTreeBidiMap(final Map<? extends K, ? extends V> map) {\n         super(new TreeMap<K, V>(), new TreeMap<V, K>());\n         putAll(map);\n         this.comparator = null;\n--- a/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java\n      *  not Comparable or are not mutually comparable\n      * @throws NullPointerException if any key or value in the map is null\n      */\n-    public TreeBidiMap(final Map<K, V> map) {\n+    public TreeBidiMap(final Map<? extends K, ? extends V> map) {\n         this();\n         putAll(map);\n     }\n--- a/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap.java\n      * @throws IllegalArgumentException if map is null\n      * @since 4.0\n      */\n-    public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<K, V> map) {\n+    public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map) {\n         if (map instanceof Unmodifiable) {\n-            return map;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final BidiMap<K, V> tmpMap = (BidiMap<K, V>) map;\n+            return tmpMap;\n         }\n         return new UnmodifiableBidiMap<K, V>(map);\n     }\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    private UnmodifiableBidiMap(final BidiMap<K, V> map) {\n-        super(map);\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    private UnmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map) {\n+        super((BidiMap<K, V>) map);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMap.java\n      * @throws IllegalArgumentException if map is null\n      * @since 4.0\n      */\n-    public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<K, V> map) {\n+    public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(\n+            final OrderedBidiMap<? extends K, ? extends V> map) {\n         if (map instanceof Unmodifiable) {\n-            return map;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final OrderedBidiMap<K, V> tmpMap = (OrderedBidiMap<K, V>) map;\n+            return tmpMap;\n         }\n         return new UnmodifiableOrderedBidiMap<K, V>(map);\n     }\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    private UnmodifiableOrderedBidiMap(final OrderedBidiMap<K, V> map) {\n-        super(map);\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    private UnmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map) {\n+        super((OrderedBidiMap<K, V>) map);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMap.java\n      * @throws IllegalArgumentException if map is null\n      * @since 4.0\n      */\n-    public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, V> map) {\n+    public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map) {\n         if (map instanceof Unmodifiable) {\n-            return map;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final SortedBidiMap<K, V> tmpMap = (SortedBidiMap<K, V>) map;\n+            return tmpMap;\n         }\n         return new UnmodifiableSortedBidiMap<K, V>(map);\n     }\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    private UnmodifiableSortedBidiMap(final SortedBidiMap<K, V> map) {\n-        super(map);\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    private UnmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map) {\n+        super((SortedBidiMap<K, V>) map);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java\n      * @throws IllegalArgumentException if {@code coll} is {@code null}\n      * @since 4.0\n      */\n-    public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<E> coll) {\n+    public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll) {\n         return new UnmodifiableBoundedCollection<E>(coll);\n     }\n \n      * @param coll  the collection to decorate, must not be null\n      * @throws IllegalArgumentException if coll is null\n      */\n-    private UnmodifiableBoundedCollection(final BoundedCollection<E> coll) {\n-        super(coll);\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    private UnmodifiableBoundedCollection(final BoundedCollection<? extends E> coll) {\n+        super((BoundedCollection<E>) coll);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/collection/UnmodifiableCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/UnmodifiableCollection.java\n      * @throws IllegalArgumentException if collection is null\n      * @since 4.0\n      */\n-    public static <T> Collection<T> unmodifiableCollection(final Collection<T> coll) {\n+    public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll) {\n         if (coll instanceof Unmodifiable) {\n-            return coll;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final Collection<T> tmpColl = (Collection<T>) coll;\n+            return tmpColl;\n         }\n         return new UnmodifiableCollection<T>(coll);\n     }\n      * @param coll  the collection to decorate, must not be null\n      * @throws IllegalArgumentException if collection is null\n      */\n-    private UnmodifiableCollection(final Collection<E> coll) {\n-        super(coll);\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    private UnmodifiableCollection(final Collection<? extends E> coll) {\n+        super((Collection<E>) coll);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/comparators/ComparatorChain.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/ComparatorChain.java\n         final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n         for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n \n-            final Comparator<E> comparator = comparators.next();\n+            final Comparator<? super E> comparator = comparators.next();\n             int retval = comparator.compare(o1,o2);\n             if (retval != 0) {\n                 // invert the order if it is a reverse sort\n--- a/src/main/java/org/apache/commons/collections4/comparators/NullComparator.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/NullComparator.java\n     /**\n      *  The comparator to use when comparing two non-<code>null</code> objects.\n      **/\n-    private final Comparator<E> nonNullComparator;\n+    private final Comparator<? super E> nonNullComparator;\n \n     /**\n      *  Specifies whether a <code>null</code> are compared as higher than\n      *  @exception NullPointerException if <code>nonNullComparator</code> is\n      *  <code>null</code>\n      **/\n-    public NullComparator(final Comparator<E> nonNullComparator) {\n+    public NullComparator(final Comparator<? super E> nonNullComparator) {\n         this(nonNullComparator, true);\n     }\n \n      *  @exception NullPointerException if <code>nonNullComparator</code> is\n      *  <code>null</code>\n      **/\n-    public NullComparator(final Comparator<E> nonNullComparator, final boolean nullsAreHigh) {\n+    public NullComparator(final Comparator<? super E> nonNullComparator, final boolean nullsAreHigh) {\n         this.nonNullComparator = nonNullComparator;\n         this.nullsAreHigh = nullsAreHigh;\n \n--- a/src/main/java/org/apache/commons/collections4/comparators/ReverseComparator.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/ReverseComparator.java\n      * @param comparator Comparator to reverse\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public ReverseComparator(final Comparator<E> comparator) {\n+    public ReverseComparator(final Comparator<? super E> comparator) {\n         this.comparator = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java\n      * @param coll  the collection to generate permutations for\n      * @throws NullPointerException if coll is null\n      */\n-    public PermutationIterator(final Collection<E> coll) {\n+    public PermutationIterator(final Collection<? extends E> coll) {\n         if (coll == null) {\n             throw new NullPointerException(\"The collection must not be null\");\n         }\n--- a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java\n public final class UnmodifiableIterator<E> implements Iterator<E>, Unmodifiable {\n \n     /** The iterator being decorated */\n-    private final Iterator<E> iterator;\n+    private final Iterator<? extends E> iterator;\n \n     //-----------------------------------------------------------------------\n     /**\n      * @return a new unmodifiable iterator\n      * @throws IllegalArgumentException if the iterator is null\n      */\n-    public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator) {\n+    public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator) {\n         if (iterator == null) {\n             throw new IllegalArgumentException(\"Iterator must not be null\");\n         }\n         if (iterator instanceof Unmodifiable) {\n-            return iterator;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final Iterator<E> tmpIterator = (Iterator<E>) iterator;\n+            return tmpIterator;\n         }\n         return new UnmodifiableIterator<E>(iterator);\n     }\n      *\n      * @param iterator  the iterator to decorate\n      */\n-    private UnmodifiableIterator(final Iterator<E> iterator) {\n+    private UnmodifiableIterator(final Iterator<? extends E> iterator) {\n         super();\n         this.iterator = iterator;\n     }\n--- a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java\n public final class UnmodifiableListIterator<E> implements ListIterator<E>, Unmodifiable {\n \n     /** The iterator being decorated */\n-    private final ListIterator<E> iterator;\n+    private final ListIterator<? extends E> iterator;\n \n     //-----------------------------------------------------------------------\n     /**\n      * @return a new unmodifiable list iterator\n      * @throws IllegalArgumentException if the iterator is null\n      */\n-    public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<E> iterator) {\n+    public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator) {\n         if (iterator == null) {\n             throw new IllegalArgumentException(\"ListIterator must not be null\");\n         }\n         if (iterator instanceof Unmodifiable) {\n-            return iterator;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final ListIterator<E> tmpIterator = (ListIterator<E>) iterator;\n+            return tmpIterator;\n         }\n         return new UnmodifiableListIterator<E>(iterator);\n     }\n      *\n      * @param iterator  the iterator to decorate\n      */\n-    private UnmodifiableListIterator(final ListIterator<E> iterator) {\n+    private UnmodifiableListIterator(final ListIterator<? extends E> iterator) {\n         super();\n         this.iterator = iterator;\n     }\n--- a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java\n public final class UnmodifiableMapIterator<K, V> implements MapIterator<K, V>, Unmodifiable {\n \n     /** The iterator being decorated */\n-    private final MapIterator<K, V> iterator;\n+    private final MapIterator<? extends K, ? extends V> iterator;\n \n     //-----------------------------------------------------------------------\n     /**\n      * @return a new unmodifiable map iterator\n      * @throws IllegalArgumentException if the iterator is null\n      */\n-    public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> iterator) {\n+    public static <K, V> MapIterator<K, V> unmodifiableMapIterator(\n+            final MapIterator<? extends K, ? extends V> iterator) {\n         if (iterator == null) {\n             throw new IllegalArgumentException(\"MapIterator must not be null\");\n         }\n         if (iterator instanceof Unmodifiable) {\n-            return iterator;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final MapIterator<K, V> tmpIterator = (MapIterator<K, V>) iterator;\n+            return tmpIterator;\n         }\n         return new UnmodifiableMapIterator<K, V>(iterator);\n     }\n      *\n      * @param iterator  the iterator to decorate\n      */\n-    private UnmodifiableMapIterator(final MapIterator<K, V> iterator) {\n+    private UnmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator) {\n         super();\n         this.iterator = iterator;\n     }\n--- a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java\n         Unmodifiable {\n \n     /** The iterator being decorated */\n-    private final OrderedMapIterator<K, V> iterator;\n+    private final OrderedMapIterator<? extends K, ? extends V> iterator;\n \n     //-----------------------------------------------------------------------\n     /**\n      * @throws IllegalArgumentException if the iterator is null\n      */\n     public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(\n-            final OrderedMapIterator<K, V> iterator) {\n+            final OrderedMapIterator<K, ? extends V> iterator) {\n \n         if (iterator == null) {\n             throw new IllegalArgumentException(\"OrderedMapIterator must not be null\");\n         }\n         if (iterator instanceof Unmodifiable) {\n-            return iterator;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final OrderedMapIterator<K, V> tmpIterator = (OrderedMapIterator<K, V>) iterator;\n+            return tmpIterator;\n         }\n         return new UnmodifiableOrderedMapIterator<K, V>(iterator);\n     }\n      *\n      * @param iterator  the iterator to decorate\n      */\n-    private UnmodifiableOrderedMapIterator(final OrderedMapIterator<K, V> iterator) {\n+    private UnmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator) {\n         super();\n         this.iterator = iterator;\n     }\n--- a/src/main/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue.java\n      * @param pair  the pair to copy, must not be null\n      * @throws NullPointerException if the entry is null\n      */\n-    public DefaultKeyValue(final KeyValue<K, V> pair) {\n+    public DefaultKeyValue(final KeyValue<? extends K, ? extends V> pair) {\n         super(pair.getKey(), pair.getValue());\n     }\n \n      * @param entry  the entry to copy, must not be null\n      * @throws NullPointerException if the entry is null\n      */\n-    public DefaultKeyValue(final Map.Entry<K, V> entry) {\n+    public DefaultKeyValue(final Map.Entry<? extends K, ? extends V> entry) {\n         super(entry.getKey(), entry.getValue());\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/keyvalue/DefaultMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/DefaultMapEntry.java\n      * @param pair  the pair to copy, must not be null\n      * @throws NullPointerException if the entry is null\n      */\n-    public DefaultMapEntry(final KeyValue<K, V> pair) {\n+    public DefaultMapEntry(final KeyValue<? extends K, ? extends V> pair) {\n         super(pair.getKey(), pair.getValue());\n     }\n \n      * @param entry  the entry to copy, must not be null\n      * @throws NullPointerException if the entry is null\n      */\n-    public DefaultMapEntry(final Map.Entry<K, V> entry) {\n+    public DefaultMapEntry(final Map.Entry<? extends K, ? extends V> entry) {\n         super(entry.getKey(), entry.getValue());\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntry.java\n      * @param pair  the pair to copy, must not be null\n      * @throws NullPointerException if the entry is null\n      */\n-    public UnmodifiableMapEntry(final KeyValue<K, V> pair) {\n+    public UnmodifiableMapEntry(final KeyValue<? extends K, ? extends V> pair) {\n         super(pair.getKey(), pair.getValue());\n     }\n \n      * @param entry  the entry to copy, must not be null\n      * @throws NullPointerException if the entry is null\n      */\n-    public UnmodifiableMapEntry(final Map.Entry<K, V> entry) {\n+    public UnmodifiableMapEntry(final Map.Entry<? extends K, ? extends V> entry) {\n         super(entry.getKey(), entry.getValue());\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/list/CursorableLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/CursorableLinkedList.java\n      *\n      * @param coll  the collection to copy\n      */\n-    public CursorableLinkedList(final Collection<E> coll) {\n+    public CursorableLinkedList(final Collection<? extends E> coll) {\n         super(coll);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/list/NodeCachingLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/NodeCachingLinkedList.java\n      *\n      * @param coll  the collection to copy\n      */\n-    public NodeCachingLinkedList(final Collection<E> coll) {\n+    public NodeCachingLinkedList(final Collection<? extends E> coll) {\n         super(coll);\n         this.maximumCacheSize = DEFAULT_MAXIMUM_CACHE_SIZE;\n     }\n--- a/src/main/java/org/apache/commons/collections4/list/TreeList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/TreeList.java\n      * @param coll  the collection to copy\n      * @throws NullPointerException if the collection is null\n      */\n-    public TreeList(final Collection<E> coll) {\n+    public TreeList(final Collection<? extends E> coll) {\n         super();\n         if (!coll.isEmpty()) {\n             root = new AVLNode<E>(coll);\n--- a/src/main/java/org/apache/commons/collections4/list/UnmodifiableList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/UnmodifiableList.java\n      * @throws IllegalArgumentException if list is null\n      * @since 4.0\n      */\n-    public static <E> List<E> unmodifiableList(final List<E> list) {\n+    public static <E> List<E> unmodifiableList(final List<? extends E> list) {\n         if (list instanceof Unmodifiable) {\n-            return list;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final List<E> tmpList = (List<E>) list;\n+            return tmpList;\n         }\n         return new UnmodifiableList<E>(list);\n     }\n      *\n      * @param list  the list to decorate, must not be null\n      * @throws IllegalArgumentException if list is null\n-     * @since Commons Collection 5\n      */\n-    public UnmodifiableList(final List<E> list) {\n-        super(list);\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    public UnmodifiableList(final List<? extends E> list) {\n+        super((List<E>) list);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/map/AbstractHashedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/AbstractHashedMap.java\n      * @param map  the map to copy\n      * @throws NullPointerException if the map is null\n      */\n-    protected AbstractHashedMap(final Map<K, V> map) {\n+    protected AbstractHashedMap(final Map<? extends K, ? extends V> map) {\n         this(Math.max(2 * map.size(), DEFAULT_CAPACITY), DEFAULT_LOAD_FACTOR);\n         _putAll(map);\n     }\n--- a/src/main/java/org/apache/commons/collections4/map/AbstractLinkedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/AbstractLinkedMap.java\n      * @param map  the map to copy\n      * @throws NullPointerException if the map is null\n      */\n-    protected AbstractLinkedMap(final Map<K, V> map) {\n+    protected AbstractLinkedMap(final Map<? extends K, ? extends V> map) {\n         super(map);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/map/CaseInsensitiveMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/CaseInsensitiveMap.java\n      * @param map  the map to copy\n      * @throws NullPointerException if the map is null\n      */\n-    public CaseInsensitiveMap(final Map<K, V> map) {\n+    public CaseInsensitiveMap(final Map<? extends K, ? extends V> map) {\n         super(map);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/map/HashedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/HashedMap.java\n      * @param map  the map to copy\n      * @throws NullPointerException if the map is null\n      */\n-    public HashedMap(final Map<K, V> map) {\n+    public HashedMap(final Map<? extends K, ? extends V> map) {\n         super(map);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/map/LRUMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/LRUMap.java\n      * @throws NullPointerException if the map is null\n      * @throws IllegalArgumentException if the map is empty\n      */\n-    public LRUMap(final Map<K, V> map) {\n+    public LRUMap(final Map<? extends K, ? extends V> map) {\n         this(map, false);\n     }\n \n      * @throws IllegalArgumentException if the map is empty\n      * @since 3.1\n      */\n-    public LRUMap(final Map<K, V> map, final boolean scanUntilRemovable) {\n+    public LRUMap(final Map<? extends K, ? extends V> map, final boolean scanUntilRemovable) {\n         this(map.size(), DEFAULT_LOAD_FACTOR, scanUntilRemovable);\n         putAll(map);\n     }\n--- a/src/main/java/org/apache/commons/collections4/map/LinkedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/LinkedMap.java\n      * @param map  the map to copy\n      * @throws NullPointerException if the map is null\n      */\n-    public LinkedMap(final Map<K, V> map) {\n+    public LinkedMap(final Map<? extends K, ? extends V> map) {\n         super(map);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/map/SingletonMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/SingletonMap.java\n      *\n      * @param mapEntry  the mapEntry to use\n      */\n-    public SingletonMap(final Map.Entry<K, V> mapEntry) {\n+    public SingletonMap(final Map.Entry<? extends K, ? extends V> mapEntry) {\n         super();\n         this.key = mapEntry.getKey();\n         this.value = mapEntry.getValue();\n      * @throws NullPointerException if the map is null\n      * @throws IllegalArgumentException if the size is not 1\n      */\n-    public SingletonMap(final Map<K, V> map) {\n+    public SingletonMap(final Map<? extends K, ? extends V> map) {\n         super();\n         if (map.size() != 1) {\n             throw new IllegalArgumentException(\"The map size must be 1\");\n         }\n-        final Map.Entry<K, V> entry = map.entrySet().iterator().next();\n+        final Map.Entry<? extends K, ? extends V> entry = map.entrySet().iterator().next();\n         this.key = entry.getKey();\n         this.value = entry.getValue();\n     }\n--- a/src/main/java/org/apache/commons/collections4/map/UnmodifiableMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/UnmodifiableMap.java\n      * @throws IllegalArgumentException if map is null\n      * @since 4.0\n      */\n-    public static <K, V> Map<K, V> unmodifiableMap(final Map<K, V> map) {\n+    public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map) {\n         if (map instanceof Unmodifiable) {\n-            return map;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final Map<K, V> tmpMap = (Map<K, V>) map;\n+            return tmpMap;\n         }\n         return new UnmodifiableMap<K, V>(map);\n     }\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    private UnmodifiableMap(final Map<K, V> map) {\n-        super(map);\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    private UnmodifiableMap(final Map<? extends K, ? extends V> map) {\n+        super((Map<K, V>) map);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap.java\n      * @throws IllegalArgumentException if map is null\n      * @since 4.0\n      */\n-    public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<K, V> map) {\n+    public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map) {\n         if (map instanceof Unmodifiable) {\n-            return map;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final OrderedMap<K, V> tmpMap = (OrderedMap<K, V>) map;\n+            return tmpMap;\n         }\n         return new UnmodifiableOrderedMap<K, V>(map);\n     }\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    private UnmodifiableOrderedMap(final OrderedMap<K, V> map) {\n-        super(map);\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    private UnmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map) {\n+        super((OrderedMap<K, V>) map);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/map/UnmodifiableSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/UnmodifiableSortedMap.java\n      * @throws IllegalArgumentException if map is null\n      * @since 4.0\n      */\n-    public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, V> map) {\n+    public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map) {\n         if (map instanceof Unmodifiable) {\n-            return map;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final SortedMap<K, V> tmpMap = (SortedMap<K, V>) map;\n+            return tmpMap;\n         }\n         return new UnmodifiableSortedMap<K, V>(map);\n     }\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    private UnmodifiableSortedMap(final SortedMap<K, V> map) {\n-        super(map);\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    private UnmodifiableSortedMap(final SortedMap<K, ? extends V> map) {\n+        super((SortedMap<K, V>) map);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java\n+++ b/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java\n      * @param coll  the collection to copy into the queue, may not be null\n      * @throws NullPointerException if the collection is null\n      */\n-    public CircularFifoQueue(final Collection<E> coll) {\n+    public CircularFifoQueue(final Collection<? extends E> coll) {\n         this(coll.size());\n         addAll(coll);\n     }\n--- a/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java\n+++ b/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java\n      * @return an unmodifiable Queue\n      * @throws IllegalArgumentException if queue is null\n      */\n-    public static <E> Queue<E> unmodifiableQueue(final Queue<E> queue) {\n+    public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue) {\n         if (queue instanceof Unmodifiable) {\n-            return queue;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final Queue<E> tmpQueue = (Queue<E>) queue;\n+            return tmpQueue;\n         }\n         return new UnmodifiableQueue<E>(queue);\n     }\n      * @param queue  the queue to decorate, must not be null\n      * @throws IllegalArgumentException if queue is null\n      */\n-    private UnmodifiableQueue(final Queue<E> queue) {\n-        super(queue);\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    private UnmodifiableQueue(final Queue<? extends E> queue) {\n+        super((Queue<E>) queue);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/set/UnmodifiableSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/UnmodifiableSet.java\n      * @throws IllegalArgumentException if set is null\n      * @since 4.0\n      */\n-    public static <E> Set<E> unmodifiableSet(final Set<E> set) {\n+    public static <E> Set<E> unmodifiableSet(final Set<? extends E> set) {\n         if (set instanceof Unmodifiable) {\n-            return set;\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final Set<E> tmpSet = (Set<E>) set;\n+            return tmpSet;\n         }\n         return new UnmodifiableSet<E>(set);\n     }\n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n-    private UnmodifiableSet(final Set<E> set) {\n-        super(set);\n+    @SuppressWarnings(\"unchecked\") // safe to upcast\n+    private UnmodifiableSet(final Set<? extends E> set) {\n+        super((Set<E>) set);\n     }\n \n     //-----------------------------------------------------------------------\n     @Override\n     public Iterator<E> iterator() {\n-        return UnmodifiableIterator.<E>unmodifiableIterator(decorated().iterator());\n+        return UnmodifiableIterator.unmodifiableIterator(decorated().iterator());\n     }\n \n     @Override\n--- a/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java\n+++ b/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java\n      * @return a new unmodifiable trie\n      * @throws IllegalArgumentException if trie is null\n      */\n-    public static <K, V> UnmodifiableTrie<K, V> unmodifiableTrie(final Trie<K, V> trie) {\n+    public static <K, V> UnmodifiableTrie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie) {\n         return new UnmodifiableTrie<K, V>(trie);\n     }\n \n      * @param trie  the trie to decorate, must not be null\n      * @throws IllegalArgumentException if trie is null\n      */\n-    public UnmodifiableTrie(final Trie<K, V> trie) {\n+    public UnmodifiableTrie(final Trie<K, ? extends V> trie) {\n         if (trie == null) {\n             throw new IllegalArgumentException(\"Trie must not be null\");\n         }\n-        this.delegate = trie;\n+        @SuppressWarnings(\"unchecked\") // safe to upcast\n+        final Trie<K, V> tmpTrie = (Trie<K, V>) trie;\n+        this.delegate = tmpTrie;\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1382303571, "metainfo": ""}