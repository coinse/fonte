{"sha": "4499cf08620c412556a9721f98451d5e882d2c80", "log": "COLLECTIONS-213.  Added multiple use support to IteratorIterable.  ", "commit": "\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n     }\n \n     /**\n-     * Gets an iterable that wraps an iterator.\n+     * Gets an iterable that wraps an iterator.  The returned iterable can be\n+     * used for a single iteration.\n      *\n      * @param iterator  the iterator to use, not null\n      * @return a new, single use iterable\n         if (iterator == null) {\n             throw new NullPointerException(\"Iterator must not be null\");\n         }\n-        return new IteratorIterable<E>(iterator);\n+        return new IteratorIterable<E>(iterator, false);\n+    }\n+\n+    /**\n+     * Gets an iterable that wraps an iterator.  The returned iterable can be\n+     * used for multiple iterations.\n+     *\n+     * @param iterator  the iterator to use, not null\n+     * @return a new, multiple use iterable\n+     * @throws NullPointerException if iterator is null\n+     */\n+    public static <E> Iterable<E> asMultipleUseIterable(Iterator<? extends E> iterator) {\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        return new IteratorIterable<E>(iterator, true);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/iterators/IteratorIterable.java\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorIterable.java\n \n import java.util.Iterator;\n \n+import org.apache.commons.collections.ResettableIterator;\n+\n /**\n  * Adapter to make an {@link Iterator Iterator} instance appear to be an\n- * {@link Iterable Iterable} instance. Unlike normal iterable instance, the\n- * {@link #iterator()} method always returns the same iterator instance. This\n- * prohibits this iterator to be only usable for one iterative operation.\n+ * {@link Iterable Iterable} instance.  The iterable can be constructed in one\n+ * of two variants:  single use, multiple use.\n+ * \n+ * <p>\n+ * In the single use iterable case, the iterable is only usable for one\n+ * iterative operation over the source iterator.  Subsequent iterative\n+ * operations use the same, exhausted source iterator.  To create a single use\n+ * iterable, construct a new {@link IteratorIterable} using a {@link Iterator}\n+ * that is NOT a {@link ResettableIterator} iterator:\n+ * <pre>\n+ *   Iterator<Integer> iterator = // some non-resettable iterator\n+ *   Iterable<Integer> iterable = new IteratorIterable<Integer>(iterator);\n+ * </pre>\n+ * </p>\n+ * \n+ * <p>\n+ * In the multiple use iterable case, the iterable is usable for any number of\n+ * iterative operations over the source iterator.  Of special note, even though\n+ * the iterable supports multiple iterations, it does not support concurrent\n+ * iterations. To implicitly create a multiple use iterable, construct a new\n+ * {@link IteratorIterable} using a {@link ResettableIterator} iterator:\n+ * <pre>\n+ *   Integer[] array = {Integer.valueOf(1),Integer.valueOf(2),Integer.valueOf(3)};\n+ *   Iterator<Integer> iterator = IteratorUtils.arrayIterator(array); // a resettable iterator\n+ *   Iterable<Integer> iterable = new IteratorIterable<Integer>(iterator);\n+ * </pre>\n+ * </p>\n+ * \n+ * <p>\n+ * A multiple use iterable can also be explicitly constructed using any\n+ * {@link Iterator} and specifying <code>true</code> for the\n+ * <code>multipleUse</code> flag:\n+ * <pre>\n+ *   Iterator<Integer> iterator = // some non-resettable iterator\n+ *   Iterable<Integer> iterable = new IteratorIterable<Integer>(iterator, true);\n+ * </pre>\n+ * </p>\n  * \n  * @since Commons Collections 4.0\n  * @version $Revision: $ $Date: $\n         };\n     }\n \n-    /** the iterator being used. */\n-    private final Iterator<E> iterator;\n-\n+    /** the iterator being adapted into an iterable. */\n+    private final Iterator<? extends E> iterator;\n+    \n+    /** the iterator parameterized as the {@link #iterator()} return type. */ \n+    private final Iterator<E> typeSafeIterator;\n+    \n     /**\n      * Constructs a new <code>IteratorIterable</code> that will use the given\n      * iterator.\n      * @param iterator the iterator to use.\n      */\n     public IteratorIterable(Iterator<? extends E> iterator) {\n+        this(iterator, false);\n+    }\n+\n+    /**\n+     * Constructs a new <code>IteratorIterable</code> that will use the given\n+     * iterator.\n+     * \n+     * @param iterator the iterator to use.\n+     * @param multipleUse <code>true</code> if the new iterable can be used in multiple iterations\n+     */\n+    public IteratorIterable(Iterator<? extends E> iterator, boolean multipleUse) {\n         super();\n-        this.iterator = createTypesafeIterator(iterator);\n+        if (multipleUse && !(iterator instanceof ResettableIterator)) {\n+            this.iterator = new ListIteratorWrapper<E>(iterator); \n+        } else {\n+            this.iterator = iterator;\n+        }\n+        this.typeSafeIterator = createTypesafeIterator(this.iterator);\n     }\n \n     /**\n      * @return the iterator\n      */\n     public Iterator<E> iterator() {\n-        return iterator;\n+        if (iterator instanceof ResettableIterator) {\n+            ((ResettableIterator<? extends E>)iterator).reset();\n+        }\n+        return typeSafeIterator;\n     }\n }\n--- a/src/test/org/apache/commons/collections/TestIteratorUtils.java\n+++ b/src/test/org/apache/commons/collections/TestIteratorUtils.java\n             assertEquals(expected, actual.intValue());\n             ++expected;\n         }\n+        // insure iteration occurred\n+        assertTrue(expected > 0);\n \n         // single use iterator\n         for(Integer actual : iterable) {\n     public void testAsIterableNull() {\n         try {\n             IteratorUtils.asIterable(null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            // success\n+        }\n+    }\n+\n+    public void testAsMultipleIterable() {\n+        List<Integer> list = new ArrayList<Integer>();\n+        list.add(Integer.valueOf(0));\n+        list.add(Integer.valueOf(1));\n+        list.add(Integer.valueOf(2));\n+        Iterator<Integer> iterator = list.iterator();\n+        \n+        Iterable<Integer> iterable = IteratorUtils.asMultipleUseIterable(iterator);\n+        int expected = 0;\n+        for(Integer actual : iterable) {\n+            assertEquals(expected, actual.intValue());\n+            ++expected;\n+        }\n+        // insure iteration occurred\n+        assertTrue(expected > 0);\n+\n+        // multiple use iterator\n+        expected = 0;\n+        for(Integer actual : iterable) {\n+            assertEquals(expected, actual.intValue());\n+            ++expected;\n+        }\n+        // insure iteration occurred\n+        assertTrue(expected > 0);\n+    }\n+\n+    public void testAsMultipleIterableNull() {\n+        try {\n+            IteratorUtils.asMultipleUseIterable(null);\n             fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {\n             // success\n--- a/src/test/org/apache/commons/collections/iterators/TestIteratorIterable.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestIteratorIterable.java\n         super(name);\n     }\n \n-    public void testIterator() {\n+    private Iterator<Integer> createIterator() {\n         List<Integer> list = new ArrayList<Integer>();\n         list.add(Integer.valueOf(0));\n         list.add(Integer.valueOf(1));\n         list.add(Integer.valueOf(2));\n         Iterator<Integer> iter = list.iterator();\n+        return iter;\n+    }\n \n+    public void testIterator() {\n+        Iterator<Integer> iter = createIterator();\n         Iterable<Number> iterable = new IteratorIterable<Number>(iter);\n+        \n+        // first use\n+        verifyIteration(iterable);\n+        \n+        // second use\n+        for (Number actual : iterable) {\n+            fail(\"should not be able to iterate twice\");\n+        }\n+    }\n+\n+    public void testMultipleUserIterator() {\n+        Iterator<Integer> iter = createIterator();\n+\n+        Iterable<Number> iterable = new IteratorIterable<Number>(iter, true);\n+        \n+        // first use\n+        verifyIteration(iterable);\n+        \n+        // second use\n+        verifyIteration(iterable);\n+    }\n+\n+    private void verifyIteration(Iterable<Number> iterable) {\n         int expected = 0;\n         for (Number actual : iterable) {\n             assertEquals(expected, actual.intValue());\n             ++expected;\n         }\n+        assertTrue(expected > 0);\n     }\n }\n ", "timestamp": 1306346669, "metainfo": ""}