{"sha": "324ef991a6b927c8ca2164bc4f5786b22af41c0b", "log": "Add ReverseListIterator rfe 39224, including code from Serge Knystautas  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ReverseListIterator.java\n+/*\n+ *  Copyright 2006 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.ResettableListIterator;\n+\n+/**\n+ * Iterates backwards through a List, starting with the last element\n+ * and continuing to the first. This is useful for looping around\n+ * a list in reverse order without needing to actually reverse the list.\n+ * <p>\n+ * The first call to <code>next()</code> will return the last element\n+ * from the list, and so on. The <code>hasNext()</code> method works\n+ * in concert with the <code>next()</code> method as expected.\n+ * However, the <code>nextIndex()</code> method returns the correct\n+ * index in the list, thus it starts high and reduces as the iteration\n+ * continues. The previous methods work similarly.\n+ *\n+ * @author Serge Knystautas\n+ * @author Stephen Colebourne\n+ * @version $Revision: $ $Date$\n+ */\n+public class ReverseListIterator implements ResettableListIterator {\n+\n+    /** The list being wrapped. */\n+    private final List list;\n+    /** The list iterator being wrapped. */\n+    private ListIterator iterator;\n+    /** Flag to indicate if updating is possible at the moment. */\n+    private boolean validForUpdate = true;\n+\n+    /**\n+     * Constructor that wraps a list.\n+     *\n+     * @param list  the list to create a reversed iterator for\n+     * @throws NullPointerException if the list is null\n+     */\n+    public ReverseListIterator(List list) {\n+        super();\n+        this.list = list;\n+        iterator = list.listIterator(list.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks whether there is another element.\n+     *\n+     * @return true if there is another element\n+     */\n+    public boolean hasNext() {\n+        return iterator.hasPrevious();\n+    }\n+\n+    /**\n+     * Gets the next element.\n+     * The next element is the previous in the list.\n+     *\n+     * @return the next element in the iterator\n+     */\n+    public Object next() {\n+        Object obj = iterator.previous();\n+        validForUpdate = true;\n+        return obj;\n+    }\n+\n+    /**\n+     * Gets the index of the next element.\n+     *\n+     * @return the index of the next element in the iterator\n+     */\n+    public int nextIndex() {\n+        return iterator.previousIndex();\n+    }\n+\n+    /**\n+     * Checks whether there is a previous element.\n+     *\n+     * @return true if there is a previous element\n+     */\n+    public boolean hasPrevious() {\n+        return iterator.hasNext();\n+    }\n+\n+    /**\n+     * Gets the previous element.\n+     * The next element is the previous in the list.\n+     *\n+     * @return the previous element in the iterator\n+     */\n+    public Object previous() {\n+        Object obj = iterator.next();\n+        validForUpdate = true;\n+        return obj;\n+    }\n+\n+    /**\n+     * Gets the index of the previous element.\n+     *\n+     * @return the index of the previous element in the iterator\n+     */\n+    public int previousIndex() {\n+        return iterator.nextIndex();\n+    }\n+\n+    /**\n+     * Removes the last returned element.\n+     *\n+     * @throws UnsupportedOperationException if the list is unmodifiable\n+     * @throws IllegalStateException if there is no element to remove\n+     */\n+    public void remove() {\n+        if (validForUpdate == false) {\n+            throw new IllegalStateException(\"Cannot remove from list until next() or previous() called\");\n+        }\n+        iterator.remove();\n+    }\n+\n+    /**\n+     * Replaces the last returned element.\n+     *\n+     * @param obj  the object to set\n+     * @throws UnsupportedOperationException if the list is unmodifiable\n+     * @throws IllegalStateException if the iterator is not in a valid state for set\n+     */\n+    public void set(Object obj) {\n+        if (validForUpdate == false) {\n+            throw new IllegalStateException(\"Cannot set to list until next() or previous() called\");\n+        }\n+        iterator.set(obj);\n+    }\n+\n+    /**\n+     * Adds a new element to the list between the next and previous elements.\n+     *\n+     * @param obj  the object to add\n+     * @throws UnsupportedOperationException if the list is unmodifiable\n+     * @throws IllegalStateException if the iterator is not in a valid state for set\n+     */\n+    public void add(Object obj) {\n+        // the validForUpdate flag is needed as the necessary previous()\n+        // method call re-enables remove and add\n+        if (validForUpdate == false) {\n+            throw new IllegalStateException(\"Cannot add to list until next() or previous() called\");\n+        }\n+        validForUpdate = false;\n+        iterator.add(obj);\n+        iterator.previous();\n+    }\n+\n+    /**\n+     * Resets the iterator back to the start (which is the\n+     * end of the list as this is a reversed iterator)\n+     */\n+    public void reset() {\n+        iterator = list.listIterator(list.size());\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/iterators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestAll.java\n         suite.addTest(TestListIteratorWrapper.suite());\n         suite.addTest(TestLoopingIterator.suite());\n         suite.addTest(TestLoopingListIterator.suite());\n+        suite.addTest(TestReverseListIterator.suite());\n         suite.addTest(TestSingletonIterator.suite());\n         suite.addTest(TestSingletonIterator2.suite());\n         suite.addTest(TestSingletonListIterator.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestReverseListIterator.java\n+/*\n+ *  Copyright 2006 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+import org.apache.commons.collections.ResettableListIterator;\n+\n+/**\n+ * Tests the ReverseListIterator.\n+ *\n+ * @version $Revision: $ $Date$\n+ */\n+public class TestReverseListIterator extends AbstractTestListIterator {\n+\n+    protected String[] testArray = { \"One\", \"Two\", \"Three\", \"Four\" };\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestReverseListIterator.class.getName() };\n+        TestRunner.main(testCaseName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestReverseListIterator.class);\n+    }\n+\n+    public TestReverseListIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public ListIterator makeEmptyListIterator() {\n+        List list = new ArrayList();\n+        return new ReverseListIterator(list);\n+    }\n+\n+    public ListIterator makeFullListIterator() {\n+        List list = new ArrayList(Arrays.asList(testArray));\n+        return new ReverseListIterator(list);\n+    }\n+\n+    // overrides\n+    //-----------------------------------------------------------------------\n+    public void testEmptyListIteratorIsIndeedEmpty() {\n+        ListIterator it = makeEmptyListIterator();\n+        \n+        assertEquals(false, it.hasNext());\n+        assertEquals(-1, it.nextIndex());  // reversed index\n+        assertEquals(false, it.hasPrevious());\n+        assertEquals(0, it.previousIndex());  // reversed index\n+        \n+        // next() should throw a NoSuchElementException\n+        try {\n+            it.next();\n+            fail(\"NoSuchElementException must be thrown from empty ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+        \n+        // previous() should throw a NoSuchElementException\n+        try {\n+            it.previous();\n+            fail(\"NoSuchElementException must be thrown from empty ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+    }\n+\n+    public void testWalkForwardAndBack() {\n+        ArrayList list = new ArrayList();\n+        ListIterator it = makeFullListIterator();\n+        while (it.hasNext()) {\n+            list.add(it.next());\n+        }\n+        \n+        // check state at end\n+        assertEquals(false, it.hasNext());\n+        assertEquals(true, it.hasPrevious());\n+        \n+        // this had to be commented out, as there is a bug in the JDK before JDK1.5\n+        // where calling previous at the start of an iterator would push the cursor\n+        // back to an invalid negative value\n+//        try {\n+//            it.next();\n+//            fail(\"NoSuchElementException must be thrown from next at end of ListIterator\");\n+//        } catch (NoSuchElementException e) {\n+//        }\n+        \n+        // loop back through comparing\n+        for (int i = list.size() - 1; i >= 0; i--) {\n+            assertEquals(\"\" + i, list.size() - i - 2, it.nextIndex());  // reversed index\n+            assertEquals(list.size() - i - 1, it.previousIndex());  // reversed index\n+            \n+            Object obj = list.get(i);\n+            assertEquals(obj, it.previous());\n+        }\n+        \n+        // check state at start\n+        assertEquals(true, it.hasNext());\n+        assertEquals(false, it.hasPrevious());\n+        try {\n+            it.previous();\n+            fail(\"NoSuchElementException must be thrown from previous at start of ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReverse() {\n+        ListIterator it = makeFullListIterator();\n+        assertEquals(true, it.hasNext());\n+        assertEquals(3, it.nextIndex());\n+        assertEquals(false, it.hasPrevious());\n+        assertEquals(4, it.previousIndex());\n+        assertEquals(\"Four\", it.next());\n+        assertEquals(2, it.nextIndex());\n+        assertEquals(true, it.hasNext());\n+        assertEquals(3, it.previousIndex());\n+        assertEquals(true, it.hasPrevious());\n+        assertEquals(\"Three\", it.next());\n+        assertEquals(true, it.hasNext());\n+        assertEquals(1, it.nextIndex());\n+        assertEquals(true, it.hasPrevious());\n+        assertEquals(2, it.previousIndex());\n+        assertEquals(\"Two\", it.next());\n+        assertEquals(true, it.hasNext());\n+        assertEquals(0, it.nextIndex());\n+        assertEquals(true, it.hasPrevious());\n+        assertEquals(1, it.previousIndex());\n+        assertEquals(\"One\", it.next());\n+        assertEquals(false, it.hasNext());\n+        assertEquals(-1, it.nextIndex());\n+        assertEquals(true, it.hasPrevious());\n+        assertEquals(0, it.previousIndex());\n+        assertEquals(\"One\", it.previous());\n+        assertEquals(\"Two\", it.previous());\n+        assertEquals(\"Three\", it.previous());\n+        assertEquals(\"Four\", it.previous());\n+    }\n+\n+    public void testReset() {\n+        ResettableListIterator it = (ResettableListIterator) makeFullListIterator();\n+        assertEquals(\"Four\", it.next());\n+        it.reset();\n+        assertEquals(\"Four\", it.next());\n+        it.next();\n+        it.next();\n+        it.reset();\n+        assertEquals(\"Four\", it.next());\n+    }\n+\n+}", "timestamp": 1146931831, "metainfo": ""}