{"sha": "02687ec175ca69a7df32c02b8ed13b0f56bf9dfe", "log": "toward better serialization contract support in sublists   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.11 2003/02/26 19:17:22 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.12 2003/02/28 00:17:52 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n package org.apache.commons.collections.primitives;\n \n-import java.io.Serializable;\n import java.util.ConcurrentModificationException;\n import java.util.NoSuchElementException;\n \n  * to provide a more efficient implementation.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.11 $ $Date: 2003/02/26 19:17:22 $\n+ * @version $Revision: 1.12 $ $Date: 2003/02/28 00:17:52 $\n  * \n  * @author Rodney Waldhoff \n  */\n-public abstract class AbstractRandomAccessIntList extends AbstractIntCollection implements IntList, Serializable {\n+public abstract class AbstractRandomAccessIntList extends AbstractIntCollection implements IntList {\n \n     // constructors\n     //-------------------------------------------------------------------------\n     // inner classes\n     //-------------------------------------------------------------------------\n     \n-    private static class ComodChecker implements Serializable {\n+    private static class ComodChecker {\n         ComodChecker(AbstractRandomAccessIntList source) {\n             _source = source;  \n             resyncModCount();             \n         private int _lastReturnedIndex = -1;        \n     }   \n \n-    protected static class RandomAccessIntSubList extends AbstractRandomAccessIntList implements IntList, Serializable {\n+    protected static class RandomAccessIntSubList extends AbstractRandomAccessIntList implements IntList {\n         RandomAccessIntSubList(AbstractRandomAccessIntList list, int fromIndex, int toIndex) {\n             if(fromIndex < 0 || toIndex > list.size() || fromIndex > toIndex) {\n                 throw new IndexOutOfBoundsException();\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/AbstractCollectionIntCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/AbstractCollectionIntCollection.java,v 1.1 2003/02/28 00:17:53 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.primitives.IntCollection;\n+import org.apache.commons.collections.primitives.IntIterator;\n+\n+/**\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/02/28 00:17:53 $\n+ * @author Rodney Waldhoff \n+ */\n+abstract class AbstractCollectionIntCollection implements IntCollection {\n+    protected AbstractCollectionIntCollection() {\n+    }\n+\n+    public boolean add(int element) {\n+        return getCollection().add(new Integer(element));\n+    }\n+        \n+    public boolean addAll(IntCollection c) {\n+        return getCollection().addAll(IntCollectionCollection.wrap(c));\n+    }\n+    \n+    public void clear() {\n+        getCollection().clear();\n+    }\n+\n+    public boolean contains(int element) {\n+        return getCollection().contains(new Integer(element));\n+    }\n+    \n+    public boolean containsAll(IntCollection c) {\n+        return getCollection().containsAll(IntCollectionCollection.wrap(c));\n+    }        \n+    \n+    public String toString() {\n+        return getCollection().toString();\n+    }\n+\n+    public boolean isEmpty() {\n+        return getCollection().isEmpty();\n+    }\n+    \n+    /**\n+     * {@link IteratorIntIterator#wrap wraps} the \n+     * {@link java.util.Iterator Iterator}\n+     * returned by my underlying \n+     * {@link Collection Collection}, \n+     * if any.\n+     */\n+    public IntIterator iterator() {\n+        return IteratorIntIterator.wrap(getCollection().iterator());\n+    }\n+     \n+    public boolean removeElement(int element) {\n+        return getCollection().remove(new Integer(element));\n+    }\n+    \n+    public boolean removeAll(IntCollection c) {\n+        return getCollection().removeAll(IntCollectionCollection.wrap(c));\n+    }\n+        \n+    public boolean retainAll(IntCollection c) {\n+        return getCollection().retainAll(IntCollectionCollection.wrap(c));\n+    }\n+    \n+    public int size() {\n+        return getCollection().size();\n+    }\n+    \n+    public int[] toArray() {\n+        Object[] src = getCollection().toArray();\n+        int[] dest = new int[src.length];\n+        for(int i=0;i<src.length;i++) {\n+            dest[i] = ((Number)(src[i])).intValue();\n+        }\n+        return dest;\n+    }\n+    \n+    public int[] toArray(int[] dest) {\n+        Object[] src = getCollection().toArray();\n+        if(dest.length < src.length) {\n+            dest = new int[src.length];\n+        }\n+        for(int i=0;i<src.length;i++) {\n+            dest[i] = ((Number)(src[i])).intValue();\n+        }\n+        return dest;\n+    }\n+    \n+    protected abstract Collection getCollection();\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/AbstractListIntList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/AbstractListIntList.java,v 1.1 2003/02/28 00:17:53 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.primitives.IntCollection;\n+import org.apache.commons.collections.primitives.IntIterator;\n+import org.apache.commons.collections.primitives.IntList;\n+import org.apache.commons.collections.primitives.IntListIterator;\n+\n+/**\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/02/28 00:17:53 $\n+ * @author Rodney Waldhoff \n+ */\n+abstract class AbstractListIntList extends AbstractCollectionIntCollection implements IntList {\n+\n+    public void add(int index, int element) {\n+        getList().add(index,new Integer(element));\n+    }\n+\n+    public boolean addAll(int index, IntCollection collection) {\n+        return getList().addAll(index,IntCollectionCollection.wrap(collection));\n+    }\n+\n+    public int get(int index) {\n+        return ((Number)getList().get(index)).intValue();\n+    }\n+\n+    public int indexOf(int element) {\n+        return getList().indexOf(new Integer(element));\n+    }\n+\n+    public int lastIndexOf(int element) {\n+        return getList().lastIndexOf(new Integer(element));\n+    }\n+\n+    /**\n+     * {@link ListIteratorIntListIterator#wrap wraps} the \n+     * {@link IntList IntList} \n+     * returned by my underlying \n+     * {@link IntListIterator IntListIterator},\n+     * if any.\n+     */\n+    public IntListIterator listIterator() {\n+        return ListIteratorIntListIterator.wrap(getList().listIterator());\n+    }\n+\n+    /**\n+     * {@link ListIteratorIntListIterator#wrap wraps} the \n+     * {@link IntList IntList} \n+     * returned by my underlying \n+     * {@link IntListIterator IntListIterator},\n+     * if any.\n+     */\n+    public IntListIterator listIterator(int index) {\n+        return ListIteratorIntListIterator.wrap(getList().listIterator(index));\n+    }\n+\n+    public int removeElementAt(int index) {\n+        return ((Number)getList().remove(index)).intValue();\n+    }\n+\n+    public int set(int index, int element) {\n+        return ((Number)getList().set(index,new Integer(element))).intValue();\n+    }\n+\n+    public IntList subList(int fromIndex, int toIndex) {\n+        return ListIntList.wrap(getList().subList(fromIndex,toIndex));\n+    }\n+\n+    public boolean equals(Object obj) {\n+        if(obj instanceof IntList) {\n+            IntList that = (IntList)obj;\n+            if(this == that) {\n+                return true;\n+            } else if(this.size() != that.size()) {\n+                return false;            \n+            } else {\n+                IntIterator thisiter = iterator();\n+                IntIterator thatiter = that.iterator();\n+                while(thisiter.hasNext()) {\n+                    if(thisiter.next() != thatiter.next()) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+        \n+    public int hashCode() {\n+        return getList().hashCode();\n+    }\n+    \n+    final protected Collection getCollection() {\n+        return getList();\n+    }\n+    \n+    abstract protected List getList();\n+}\n--- a/src/java/org/apache/commons/collections/primitives/adapters/CollectionIntCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/CollectionIntCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/CollectionIntCollection.java,v 1.4 2003/02/26 19:17:23 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/CollectionIntCollection.java,v 1.5 2003/02/28 00:17:53 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.Collection;\n \n import org.apache.commons.collections.primitives.IntCollection;\n-import org.apache.commons.collections.primitives.IntIterator;\n \n /**\n  * Adapts a {@link java.lang.Number Number}-valued\n  * implementation in the \"obvious\" way.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.4 $ $Date: 2003/02/26 19:17:23 $\n+ * @version $Revision: 1.5 $ $Date: 2003/02/28 00:17:53 $\n  * @author Rodney Waldhoff \n  */\n-public class CollectionIntCollection implements IntCollection, Serializable {\n+public class CollectionIntCollection extends AbstractCollectionIntCollection implements Serializable {\n     /**\n      * Create an {@link IntCollection IntCollection} wrapping\n      * the specified {@link Collection Collection}.  When\n      *         <code>null</code>.\n      */\n     public static IntCollection wrap(Collection collection) {\n-        return null == collection ? null : new CollectionIntCollection(collection);\n+        if(null == collection) {\n+            return null;\n+        } else if(collection instanceof Serializable) {\n+            return new CollectionIntCollection(collection);\n+        } else {\n+            return new NonSerializableCollectionIntCollection(collection);\n+        }\n     }\n     \n     /**\n     public CollectionIntCollection(Collection collection) {\n         _collection = collection;\n     }\n-          \n-    public boolean add(int element) {\n-        return _collection.add(new Integer(element));\n+    \n+    protected Collection getCollection() {\n+        return _collection;\n     }\n-        \n-    public boolean addAll(IntCollection c) {\n-        return _collection.addAll(IntCollectionCollection.wrap(c));\n-    }\n-    \n-    public void clear() {\n-        _collection.clear();\n-    }\n-\n-    public boolean contains(int element) {\n-        return _collection.contains(new Integer(element));\n-    }\n-    \n-    public boolean containsAll(IntCollection c) {\n-        return _collection.containsAll(IntCollectionCollection.wrap(c));\n-    }        \n-    \n-    /**\n-     * If <i>that</i> is an {@link IntCollection IntCollection}, \n-     * it is {@link IntCollectionCollection#wrap wrapped} and\n-     * compared to my underlying {@link Collection Collection}, otherwise\n-     * this method simply delegates to my underlying \n-     * {@link Collection Collection}.\n-     */\n-    public boolean equals(Object that) {\n-        if(that instanceof IntCollection) {\n-            return _collection.equals(IntCollectionCollection.wrap((IntCollection)that));\n-        } else {\n-            return _collection.equals(that);\n-        }\n-    }\n-    \n-    public int hashCode() {\n-        return _collection.hashCode();\n-    }\n-    \n-    public String toString() {\n-        return _collection.toString();\n-    }\n-\n-    public boolean isEmpty() {\n-        return _collection.isEmpty();\n-    }\n-    \n-    /**\n-     * {@link IteratorIntIterator#wrap wraps} the \n-     * {@link java.util.Iterator Iterator}\n-     * returned by my underlying \n-     * {@link Collection Collection}, \n-     * if any.\n-     */\n-    public IntIterator iterator() {\n-        return IteratorIntIterator.wrap(_collection.iterator());\n-    }\n-     \n-    public boolean removeElement(int element) {\n-        return _collection.remove(new Integer(element));\n-    }\n-    \n-    public boolean removeAll(IntCollection c) {\n-        return _collection.removeAll(IntCollectionCollection.wrap(c));\n-    }\n-        \n-    public boolean retainAll(IntCollection c) {\n-        return _collection.retainAll(IntCollectionCollection.wrap(c));\n-    }\n-    \n-    public int size() {\n-        return _collection.size();\n-    }\n-    \n-    public int[] toArray() {\n-        Object[] src = _collection.toArray();\n-        int[] dest = new int[src.length];\n-        for(int i=0;i<src.length;i++) {\n-            dest[i] = ((Number)(src[i])).intValue();\n-        }\n-        return dest;\n-    }\n-    \n-    public int[] toArray(int[] dest) {\n-        Object[] src = _collection.toArray();\n-        if(dest.length < src.length) {\n-            dest = new int[src.length];\n-        }\n-        for(int i=0;i<src.length;i++) {\n-            dest[i] = ((Number)(src[i])).intValue();\n-        }\n-        return dest;\n-    }\n-    \n-    private Collection _collection = null;\n-    \n+ \n+    private Collection _collection = null;         \n }\n--- a/src/java/org/apache/commons/collections/primitives/adapters/ListIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/ListIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ListIntList.java,v 1.5 2003/02/26 19:17:23 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ListIntList.java,v 1.6 2003/02/28 00:17:53 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.io.Serializable;\n import java.util.List;\n \n-import org.apache.commons.collections.primitives.IntCollection;\n-import org.apache.commons.collections.primitives.IntIterator;\n import org.apache.commons.collections.primitives.IntList;\n-import org.apache.commons.collections.primitives.IntListIterator;\n \n /**\n  * Adapts a {@link Number}-valued {@link List List} \n  * implementation in the \"obvious\" way.\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.5 $ $Date: 2003/02/26 19:17:23 $\n+ * @version $Revision: 1.6 $ $Date: 2003/02/28 00:17:53 $\n  * @author Rodney Waldhoff \n  */\n-public class ListIntList extends CollectionIntCollection implements IntList, Serializable {\n+public class ListIntList extends AbstractListIntList implements Serializable {\n     \n     /**\n      * Create an {@link IntList IntList} wrapping\n      *         <code>null</code>.\n      */\n     public static IntList wrap(List list) {\n-        return null == list ? null : new ListIntList(list);\n+        if(null == list) {\n+            return null;\n+        } else if(list instanceof Serializable) {\n+            return new ListIntList(list);\n+        } else {\n+            return new NonSerializableListIntList(list);\n+        }\n     }\n \n     /**\n      * @see #wrap\n      */\n     public ListIntList(List list) {\n-        super(list);        \n-        _list = list;\n+        _list = list;     \n     }\n     \n-    public void add(int index, int element) {\n-        _list.add(index,new Integer(element));\n-    }\n-\n-    public boolean addAll(int index, IntCollection collection) {\n-        return _list.addAll(index,IntCollectionCollection.wrap(collection));\n-    }\n-\n-    public int get(int index) {\n-        return ((Number)_list.get(index)).intValue();\n-    }\n-\n-    public int indexOf(int element) {\n-        return _list.indexOf(new Integer(element));\n-    }\n-\n-    public int lastIndexOf(int element) {\n-        return _list.lastIndexOf(new Integer(element));\n-    }\n-\n-    /**\n-     * {@link ListIteratorIntListIterator#wrap wraps} the \n-     * {@link IntList IntList} \n-     * returned by my underlying \n-     * {@link IntListIterator IntListIterator},\n-     * if any.\n-     */\n-    public IntListIterator listIterator() {\n-        return ListIteratorIntListIterator.wrap(_list.listIterator());\n-    }\n-\n-    /**\n-     * {@link ListIteratorIntListIterator#wrap wraps} the \n-     * {@link IntList IntList} \n-     * returned by my underlying \n-     * {@link IntListIterator IntListIterator},\n-     * if any.\n-     */\n-    public IntListIterator listIterator(int index) {\n-        return ListIteratorIntListIterator.wrap(_list.listIterator(index));\n-    }\n-\n-    public int removeElementAt(int index) {\n-        return ((Number)_list.remove(index)).intValue();\n-    }\n-\n-    public int set(int index, int element) {\n-        return ((Number)_list.set(index,new Integer(element))).intValue();\n-    }\n-\n-    public IntList subList(int fromIndex, int toIndex) {\n-        return ListIntList.wrap(_list.subList(fromIndex,toIndex));\n-    }\n-\n-    public boolean equals(Object obj) {\n-        if(obj instanceof IntList) {\n-            IntList that = (IntList)obj;\n-            if(this == that) {\n-                return true;\n-            } else if(this.size() != that.size()) {\n-                return false;            \n-            } else {\n-                IntIterator thisiter = iterator();\n-                IntIterator thatiter = that.iterator();\n-                while(thisiter.hasNext()) {\n-                    if(thisiter.next() != thatiter.next()) {\n-                        return false;\n-                    }\n-                }\n-                return true;\n-            }\n-        } else {\n-            return false;\n-        }\n+    protected List getList() {\n+        return _list;\n     }\n         \n     private List _list = null;\n-\n+    \n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/NonSerializableCollectionIntCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/NonSerializableCollectionIntCollection.java,v 1.1 2003/02/28 00:17:53 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Collection;\n+\n+/**\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/02/28 00:17:53 $\n+ * @author Rodney Waldhoff \n+ */\n+class NonSerializableCollectionIntCollection extends AbstractCollectionIntCollection {\n+    public NonSerializableCollectionIntCollection(Collection collection) {\n+        _collection = collection;\n+    }\n+\n+    protected Collection getCollection() {\n+        return _collection;\n+    }\n+              \n+    private Collection _collection = null;\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/NonSerializableListIntList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/NonSerializableListIntList.java,v 1.1 2003/02/28 00:17:53 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.List;\n+\n+/**\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/02/28 00:17:53 $\n+ * @author Rodney Waldhoff \n+ */\n+class NonSerializableListIntList extends AbstractListIntList {\n+\n+    protected NonSerializableListIntList(List list) {\n+        _list = list;\n+    }\n+    \n+    protected List getList() {\n+        return _list;\n+    }\n+        \n+    private List _list = null;\n+\n+}\n--- a/src/test/org/apache/commons/collections/primitives/TestArrayIntList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestArrayIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayIntList.java,v 1.8 2003/02/26 19:17:23 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayIntList.java,v 1.9 2003/02/28 00:17:53 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.8 $ $Date: 2003/02/26 19:17:23 $\n+ * @version $Revision: 1.9 $ $Date: 2003/02/28 00:17:53 $\n  * @author Rodney Waldhoff\n  */\n public class TestArrayIntList extends TestIntList {\n     }\n \n     public static Test suite() {\n-        //TestSuite suite = BulkTest.makeSuite(TestArrayIntList.class);\n+        // BulkTests won't work, sublists are not serializable\n         TestSuite suite = new TestSuite(TestArrayIntList.class);\n         return suite;\n     }\n--- a/src/test/org/apache/commons/collections/primitives/TestArrayUnsignedShortList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestArrayUnsignedShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayUnsignedShortList.java,v 1.8 2003/02/26 19:17:23 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayUnsignedShortList.java,v 1.9 2003/02/28 00:17:53 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.8 $ $Date: 2003/02/26 19:17:23 $\n+ * @version $Revision: 1.9 $ $Date: 2003/02/28 00:17:53 $\n  * @author Rodney Waldhoff\n  */\n public class TestArrayUnsignedShortList extends TestIntList {\n     }\n \n     public static Test suite() {\n-        //TestSuite suite = BulkTest.makeSuite(TestArrayUnsignedShortList.class);\n-        //return suite;\n+        // BulkTests won't work, sublists are not serializable\n         return new TestSuite(TestArrayUnsignedShortList.class);\n     }\n \n--- a/src/test/org/apache/commons/collections/primitives/TestIntList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.5 2003/02/26 19:17:23 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.6 2003/02/28 00:17:53 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.primitives.adapters.ListIntList;\n \n /**\n- * @version $Revision: 1.5 $ $Date: 2003/02/26 19:17:23 $\n+ * @version $Revision: 1.6 $ $Date: 2003/02/28 00:17:53 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestIntList extends TestList {\n         two.add(1); two.add(2); two.add(3); two.add(5); two.add(8);\n         assertEquals(\"Larger non empty lists are equal\",one,two);\n         assertEquals(\"Equals is symmetric on larger non empty list\",two,one);\n+\n+        one.add(9);\n+        two.add(10);\n+        assertTrue(!one.equals(two));\n+        assertTrue(!two.equals(one));\n+\n     }\n \n     public void testIntSubListEquals() {\n         assertEquals(deser,list);\n     }\n \n+    public void testIntListSerializeDeserializeThenCompare() throws Exception {\n+        IntList list = makeFullIntList();\n+        if(list instanceof Serializable) {\n+            byte[] ser = writeExternalFormToBytes((Serializable)list);\n+            IntList deser = (IntList)(readExternalFormFromBytes(ser));\n+            assertEquals(\"obj != deserialize(serialize(obj))\",list,deser);\n+        }\n+    }\n+\n+    public void testSubListsAreNotSerializable() throws Exception {\n+        IntList list = makeFullIntList().subList(2,3);\n+        assertTrue( ! (list instanceof Serializable) );\n+    }\n \n }\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestListIntList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestListIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestListIntList.java,v 1.1 2003/02/26 19:17:24 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestListIntList.java,v 1.2 2003/02/28 00:17:56 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.primitives.IntList;\n import org.apache.commons.collections.primitives.TestIntList;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/02/26 19:17:24 $\n+ * @version $Revision: 1.2 $ $Date: 2003/02/28 00:17:56 $\n  * @author Rodney Waldhoff\n  */\n public class TestListIntList extends TestIntList {\n     }\n \n     public static Test suite() {\n-        //TestSuite suite = BulkTest.makeSuite(TestListIntList.class);\n-        // java.util.SubList is not serializable\n-        TestSuite suite = new TestSuite(TestListIntList.class);\n+        TestSuite suite = BulkTest.makeSuite(TestListIntList.class);\n         return suite;\n     }\n \n     // collections testing framework\n     // ------------------------------------------------------------------------\n-\n \n     /**\n      * @see org.apache.commons.collections.primitives.TestIntList#makeEmptyIntList()\n         return new ListIntList(new ArrayList());\n     }\n     \n+    public String[] ignoredSimpleTests() {\n+        // sublists are not serializable\n+        return new String[] { \n+            \"TestListIntList.bulkTestSubList.testFullListSerialization\",\n+            \"TestListIntList.bulkTestSubList.testEmptyListSerialization\",\n+            \"TestListIntList.bulkTestSubList.testCanonicalEmptyCollectionExists\",\n+            \"TestListIntList.bulkTestSubList.testCanonicalFullCollectionExists\",\n+            \"TestListIntList.bulkTestSubList.testEmptyListCompatibility\",\n+            \"TestListIntList.bulkTestSubList.testFullListCompatibility\",\n+            \"TestListIntList.bulkTestSubList.testSerializeDeserializeThenCompare\",\n+            \"TestListIntList.bulkTestSubList.testSimpleSerialization\"\n+        };\n+    }\n+\n     // tests\n     // ------------------------------------------------------------------------\n \n         // need to add a serialized form to cvs\n     }\n \n-\n }", "timestamp": 1046391476, "metainfo": ""}