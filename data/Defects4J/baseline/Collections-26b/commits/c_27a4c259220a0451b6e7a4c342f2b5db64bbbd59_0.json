{"sha": "27a4c259220a0451b6e7a4c342f2b5db64bbbd59", "log": "Allow subclasses to change the confirmed map Ensure views pickup correct serialization methods   ", "commit": "\n--- a/src/test/org/apache/commons/collections/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.8 2003/10/10 21:19:39 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.9 2003/10/31 01:24:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @version $Revision: 1.8 $ $Date: 2003/10/10 21:19:39 $\n+ * @version $Revision: 1.9 $ $Date: 2003/10/31 01:24:32 $\n  */\n public abstract class AbstractTestMap extends AbstractTestObject {\n \n      */\n     public Object makeObject() {\n         return makeEmptyMap();\n+    }\n+\n+    /**\n+     * Override to return a map other than HashMap as the confirmed map.\n+     * \n+     * @return a map that is known to be valid\n+     */\n+    protected Map makeConfirmedMap() {\n+        return new HashMap();\n     }\n \n     //-----------------------------------------------------------------------\n \n         resetEmpty();\n \n-        m2 = new HashMap();\n+        m2 = makeConfirmedMap();\n         Object[] keys = getSampleKeys();\n         Object[] values = getSampleValues();\n         for(int i = 0; i < keys.length; i++) {\n     private Map.Entry[] makeEntryArray(Object[] keys, Object[] values) {\n         Map.Entry[] result = new Map.Entry[keys.length];\n         for (int i = 0; i < keys.length; i++) {\n-            Map map = new HashMap();\n+            Map map = makeConfirmedMap();\n             map.put(keys[i], values[i]);\n             result[i] = (Map.Entry) map.entrySet().iterator().next();\n         }\n             // Collection views don't support add operations.\n             return false;\n         }\n-        \n         protected boolean isRemoveSupported() {\n             // Entry set should only support remove if map does\n             return AbstractTestMap.this.isRemoveSupported();\n+        }\n+        protected boolean supportsEmptyCollections() {\n+            return AbstractTestMap.this.supportsEmptyCollections();\n+        }\n+        protected boolean supportsFullCollections() {\n+            return AbstractTestMap.this.supportsFullCollections();\n         }\n         \n         protected void resetFull() {\n         protected boolean isNullSupported() {\n             return AbstractTestMap.this.isAllowNullKey();\n         }\n-        \n         protected boolean isAddSupported() {\n             return false;\n         }\n-        \n         protected boolean isRemoveSupported() {\n             return AbstractTestMap.this.isRemoveSupported();\n+        }\n+        protected boolean supportsEmptyCollections() {\n+            return AbstractTestMap.this.supportsEmptyCollections();\n+        }\n+        protected boolean supportsFullCollections() {\n+            return AbstractTestMap.this.supportsFullCollections();\n         }\n         \n         protected void resetEmpty() {\n         protected boolean isNullSupported() {\n             return AbstractTestMap.this.isAllowNullKey();\n         }\n-        \n         protected boolean isAddSupported() {\n             return false;\n         }\n-        \n         protected boolean isRemoveSupported() {\n             return AbstractTestMap.this.isRemoveSupported();\n+        }\n+        protected boolean supportsEmptyCollections() {\n+            return AbstractTestMap.this.supportsEmptyCollections();\n+        }\n+        protected boolean supportsFullCollections() {\n+            return AbstractTestMap.this.supportsFullCollections();\n         }\n \n         protected boolean areEqualElementsDistinguishable() {\n     protected void resetEmpty() {\n         this.map = makeEmptyMap();\n         views();\n-        this.confirmed = new HashMap();\n-    }\n-\n+        this.confirmed = makeConfirmedMap();\n+    }\n \n     /**\n      * Resets the {@link #map}, {@link #entrySet}, {@link #keySet},\n     protected void resetFull() {\n         this.map = makeFullMap();\n         views();\n-        this.confirmed = new HashMap();\n+        this.confirmed = makeConfirmedMap();\n         Object[] k = getSampleKeys();\n         Object[] v = getSampleValues();\n         for (int i = 0; i < k.length; i++) {", "timestamp": 1067563472, "metainfo": ""}