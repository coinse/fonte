{"sha": "b147d16e647c9fa54b4ad14a76fd532906cec558", "log": "Removing tabs  ", "commit": "\n--- a/src/java/org/apache/commons/collections/CursorableLinkedList.java\n+++ b/src/java/org/apache/commons/collections/CursorableLinkedList.java\n      * @param element element to be inserted.\n      *\n      * @throws ClassCastException if the class of the specified element\n-     * \t\t  prevents it from being added to this list.\n+     *           prevents it from being added to this list.\n      * @throws IllegalArgumentException if some aspect of the specified\n-     *\t\t     element prevents it from being added to this list.\n+     *             element prevents it from being added to this list.\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     *\t\t     (index &lt; 0 || index &gt; size()).\n+     *             (index &lt; 0 || index &gt; size()).\n      */\n     public void add(int index, Object element) {\n         if(index == _size) {\n      * @return <tt>true</tt> if this list changed as a result of the call.\n      *\n      * @throws ClassCastException if the class of an element in the specified\n-     * \t     collection prevents it from being added to this list.\n+     *          collection prevents it from being added to this list.\n      * @throws IllegalArgumentException if some aspect of an element in the\n      *         specified collection prevents it from being added to this\n      *         list.\n      * collection is this list, and it's nonempty.)\n      *\n      * @param index index at which to insert first element from the specified\n-     *\t            collection.\n+     *                collection.\n      * @param c elements to be inserted into this list.\n      * @return <tt>true</tt> if this list changed as a result of the call.\n      *\n      * @throws ClassCastException if the class of one of elements of the\n-     * \t\t   specified collection prevents it from being added to this\n-     * \t\t   list.\n+     *            specified collection prevents it from being added to this\n+     *            list.\n      * @throws IllegalArgumentException if some aspect of one of elements of\n      *         the specified collection prevents it from being added to\n      *         this list.\n      * @throws IndexOutOfBoundsException if the index is out of range (index\n-     *\t      &lt; 0 || index &gt; size()).\n+     *          &lt; 0 || index &gt; size()).\n      */\n     public boolean addAll(int index, Collection c) {\n         if(c.isEmpty()) {\n      * @see #listIterator(int)\n      * @see CursorableLinkedList.Cursor\n      * @throws IndexOutOfBoundsException if the index is out of range (index\n-     *\t        &lt; 0 || index &gt; size()).\n+     *            &lt; 0 || index &gt; size()).\n      */\n     public CursorableLinkedList.Cursor cursor(int i) {\n         return new Cursor(i);\n      * @return the element at the specified position in this list.\n      *\n      * @throws IndexOutOfBoundsException if the index is out of range (index\n-     * \t\t  &lt; 0 || index &gt;= size()).\n+     *           &lt; 0 || index &gt;= size()).\n      */\n     public Object get(int index) {\n         return getListableAt(index).value();\n      *\n      * @param o element to search for.\n      * @return the index in this list of the last occurrence of the specified\n-     * \t       element, or -1 if this list does not contain this element.\n+     *            element, or -1 if this list does not contain this element.\n      */\n     public int lastIndexOf(Object o) {\n         int ndx = _size-1;\n      * @return the element previously at the specified position.\n      *\n      * @throws ClassCastException if the class of the specified element\n-     * \t\t  prevents it from being added to this list.\n+     *           prevents it from being added to this list.\n      * @throws IllegalArgumentException if some aspect of the specified\n-     *\t        element prevents it from being added to this list.\n+     *            element prevents it from being added to this list.\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     *\t\t     (index &lt; 0 || index &gt;= size()).\n+     *             (index &lt; 0 || index &gt;= size()).\n      */\n     public Object set(int index, Object element) {\n         Listable elt = getListableAt(index);\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n      * @param predicate  the predicate to call with the result of the transform\n      * @return the predicate\n      * @throws IllegalArgumentException if the transformer or the predicate is null\n-\t * @since Commons Collections 3.1\n+     * @since Commons Collections 3.1\n      */\n     public static Predicate transformedPredicate(Transformer transformer, Predicate predicate) {\n         return TransformedPredicate.getInstance(transformer, predicate);\n--- a/src/java/org/apache/commons/collections/comparators/NullComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/NullComparator.java\n         if(!obj.getClass().equals(this.getClass())) { return false; }\n \n         NullComparator other = (NullComparator)obj;\n-\t\n+    \n         return ((this.nullsAreHigh == other.nullsAreHigh) &&\n                 (this.nonNullComparator.equals(other.nonNullComparator)));\n     }\n--- a/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n     /** The start index to loop from */\n     protected int startIndex = 0;\n     /** The end index to loop to */\n-\tprotected int endIndex = 0;\n+    protected int endIndex = 0;\n     /** The current iterator index */\n-\tprotected int index = 0;\n+    protected int index = 0;\n     \n     // Constructors\n     // ----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n  * @author Phil Steitz\n  */\n public class ArrayListIterator extends ArrayIterator\n-\t\timplements ListIterator, ResettableListIterator {\n+        implements ListIterator, ResettableListIterator {\n \n     /**\n      * Holds the index of the last item returned by a call to <code>next()</code>\n--- a/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n  */\n public class IteratorChain implements Iterator {\n \n-\t/** The chain of iterators */\n+    /** The chain of iterators */\n     protected final List iteratorChain = new ArrayList();\n     /** The index of the current iterator */\n     protected int currentIteratorIndex = 0;\n--- a/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n  * @author Phil Steitz\n  */\n public class ObjectArrayListIterator extends ObjectArrayIterator\n-\t\timplements ListIterator, ResettableListIterator {\n+        implements ListIterator, ResettableListIterator {\n \n     /**\n      * Holds the index of the last item returned by a call to <code>next()</code> \n--- a/src/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n \n     /** The stack of iterators */\n     protected final ArrayStack stack = new ArrayStack(8);\n-\t/** The root object in the tree */\n+    /** The root object in the tree */\n     protected Object root;\n     /** The transformer to use */\n     protected Transformer transformer;\n--- a/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n  * @author Rodney Waldhoff\n  */\n public class SingletonIterator\n-\t\timplements Iterator, ResettableIterator {\n+        implements Iterator, ResettableIterator {\n \n     /** Whether remove is allowed */\n     private final boolean removeAllowed;\n--- a/src/java/org/apache/commons/collections/map/CompositeMap.java\n+++ b/src/java/org/apache/commons/collections/map/CompositeMap.java\n      *         key.\n      *\n      * @throws ClassCastException if the key is of an inappropriate type for\n-     * \t\t  this map (optional).\n+     *           this map (optional).\n      * @throws NullPointerException if the key is <tt>null</tt> and this map\n      *            does not not permit <tt>null</tt> keys (optional).\n      */\n      * @return <tt>true</tt> if this map maps one or more keys to the\n      *         specified value.\n      * @throws ClassCastException if the value is of an inappropriate type for\n-     * \t\t  this map (optional).\n+     *           this map (optional).\n      * @throws NullPointerException if the value is <tt>null</tt> and this map\n      *            does not not permit <tt>null</tt> values (optional).\n      */\n      *\n      * @param key key whose associated value is to be returned.\n      * @return the value to which this map maps the specified key, or\n-     *\t       <tt>null</tt> if the map contains no mapping for this key.\n+     *           <tt>null</tt> if the map contains no mapping for this key.\n      *\n      * @throws ClassCastException if the key is of an inappropriate type for\n-     * \t\t  this map (optional).\n+     *           this map (optional).\n      * @throws NullPointerException key is <tt>null</tt> and this map does not\n-     *\t\t  not permit <tt>null</tt> keys (optional).\n+     *          not permit <tt>null</tt> keys (optional).\n      *\n      * @see #containsKey(Object)\n      */\n      * @param key key with which the specified value is to be associated.\n      * @param value value to be associated with the specified key.\n      * @return previous value associated with specified key, or <tt>null</tt>\n-     *\t       if there was no mapping for key.  A <tt>null</tt> return can\n-     *\t       also indicate that the map previously associated <tt>null</tt>\n-     *\t       with the specified key, if the implementation supports\n-     *\t       <tt>null</tt> values.\n+     *           if there was no mapping for key.  A <tt>null</tt> return can\n+     *           also indicate that the map previously associated <tt>null</tt>\n+     *           with the specified key, if the implementation supports\n+     *           <tt>null</tt> values.\n      *\n      * @throws UnsupportedOperationException if no MapMutator has been specified\n      * @throws ClassCastException if the class of the specified key or value\n-     * \t          prevents it from being stored in this map.\n+     *               prevents it from being stored in this map.\n      * @throws IllegalArgumentException if some aspect of this key or value\n-     *\t          prevents it from being stored in this map.\n+     *              prevents it from being stored in this map.\n      * @throws NullPointerException this map does not permit <tt>null</tt>\n      *            keys or values, and the specified key or value is\n      *            <tt>null</tt>.\n      * @param map Mappings to be stored in this map.\n      *\n      * @throws UnsupportedOperationException if the <tt>putAll</tt> method is\n-     * \t\t  not supported by this map.\n+     *           not supported by this map.\n      *\n      * @throws ClassCastException if the class of a key or value in the\n-     * \t          specified map prevents it from being stored in this map.\n+     *               specified map prevents it from being stored in this map.\n      *\n      * @throws IllegalArgumentException some aspect of a key or value in the\n-     *\t          specified map prevents it from being stored in this map.\n+     *              specified map prevents it from being stored in this map.\n      * @throws NullPointerException the specified map is <tt>null</tt>, or if\n      *         this map does not permit <tt>null</tt> keys or values, and the\n      *         specified map contains <tt>null</tt> keys or values.\n      *\n      * @param key key whose mapping is to be removed from the map.\n      * @return previous value associated with specified key, or <tt>null</tt>\n-     *\t       if there was no mapping for key.\n+     *           if there was no mapping for key.\n      *\n      * @throws ClassCastException if the key is of an inappropriate type for\n-     * \t\t  the composited map (optional).\n+     *           the composited map (optional).\n      * @throws NullPointerException if the key is <tt>null</tt> and the composited map\n      *            does not not permit <tt>null</tt> keys (optional).\n      * @throws UnsupportedOperationException if the <tt>remove</tt> method is\n          * @param key  key with which the specified value is to be associated.\n          * @param value  value to be associated with the specified key.\n          * @return previous value associated with specified key, or <tt>null</tt>\n-         *\t       if there was no mapping for key.  A <tt>null</tt> return can\n-         *\t       also indicate that the map previously associated <tt>null</tt>\n-         *\t       with the specified key, if the implementation supports\n-         *\t       <tt>null</tt> values.\n+         *           if there was no mapping for key.  A <tt>null</tt> return can\n+         *           also indicate that the map previously associated <tt>null</tt>\n+         *           with the specified key, if the implementation supports\n+         *           <tt>null</tt> values.\n          *\n          * @throws UnsupportedOperationException if not defined\n          * @throws ClassCastException if the class of the specified key or value\n-         * \t          prevents it from being stored in this map.\n+         *               prevents it from being stored in this map.\n          * @throws IllegalArgumentException if some aspect of this key or value\n-         *\t          prevents it from being stored in this map.\n+         *              prevents it from being stored in this map.\n          * @throws NullPointerException this map does not permit <tt>null</tt>\n          *            keys or values, and the specified key or value is\n          *            <tt>null</tt>.\n          *\n          * @throws UnsupportedOperationException if not defined\n          * @throws ClassCastException if the class of the specified key or value\n-         * \t          prevents it from being stored in this map.\n+         *               prevents it from being stored in this map.\n          * @throws IllegalArgumentException if some aspect of this key or value\n-         *\t          prevents it from being stored in this map.\n+         *              prevents it from being stored in this map.\n          * @throws NullPointerException this map does not permit <tt>null</tt>\n          *            keys or values, and the specified key or value is\n          *            <tt>null</tt>.", "timestamp": 1205623883, "metainfo": ""}