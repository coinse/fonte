{"sha": "090f04d180211a52e073811bd26067621956dd23", "log": "Change since tags from 3.3 to 4.0.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n      * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n      * any elements that also occur in <code>remove</code>.\n      * @throws NullPointerException if either parameter is null\n-     * @since 3.3 (method existed in 3.2 but was completely broken)\n+     * @since 4.0 (method existed in 3.2 but was completely broken)\n      */\n     public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n         return ListUtils.removeAll(collection, remove);\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Bag\n      * @throws IllegalArgumentException if bag or transformer is null\n-     * @since 3.3\n+     * @since 4.0\n      */\n     public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer) {\n         final TransformedBag<E> decorated = new TransformedBag<E>(bag, transformer);\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed SortedBag\n      * @throws IllegalArgumentException if bag or transformer is null\n-     * @since 3.3\n+     * @since 4.0\n      */\n     public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag,\n             final Transformer<? super E, ? extends E> transformer) {\n--- a/src/main/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Buffer\n      * @throws IllegalArgumentException if buffer or transformer is null\n-     * @since 3.3\n+     * @since 4.0\n      */\n     public static <E> TransformedBuffer<E> transformedBuffer(final Buffer<E> buffer,\n                                                              final Transformer<? super E, ? extends E> transformer) {\n--- a/src/main/java/org/apache/commons/collections/collection/TransformedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/TransformedCollection.java\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Collection\n      * @throws IllegalArgumentException if collection or transformer is null\n-     * @since 3.3\n+     * @since 4.0\n      */\n     public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection,\n             final Transformer<? super E, ? extends E> transformer) {\n--- a/src/main/java/org/apache/commons/collections/list/TransformedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TransformedList.java\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed List\n      * @throws IllegalArgumentException if list or transformer is null\n-     * @since 3.3\n+     * @since 4.0\n      */\n     public static <E> TransformedList<E> transformedList(final List<E> list,\n                                                          final Transformer<? super E, ? extends E> transformer) {\n--- a/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n      * \n      * @param out  the output stream\n      * @throws IOException\n-     * @since 3.3\n+     * @since 4.0\n      */\n     private void writeObject(final ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * @param in  the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n-     * @since 3.3\n+     * @since 4.0\n      */\n     @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect \n     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n--- a/src/main/java/org/apache/commons/collections/set/TransformedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/TransformedSet.java\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed set\n      * @throws IllegalArgumentException if set or transformer is null\n-     * @since 3.3\n+     * @since 4.0\n      */\n     public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer) {\n         final TransformedSet<E> decorated = new TransformedSet<E>(set, transformer);\n--- a/src/main/java/org/apache/commons/collections/set/TransformedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/TransformedSortedSet.java\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed {@link SortedSet}\n      * @throws IllegalArgumentException if set or transformer is null\n-     * @since 3.3\n+     * @since 4.0\n      */\n     public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set,\n             final Transformer<? super E, ? extends E> transformer) {", "timestamp": 1362051751, "metainfo": ""}