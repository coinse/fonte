{"sha": "ef70e7408fb01c164fb0f1d4f45e4d9ae2d284cb", "log": "Fix formatting, warnings.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/MultiMapUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/MultiMapUtils.java\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n      */\n     public static <K, V> Set<V> getSet(MultiValuedMap<K, V> map, K key) {\n         if (map != null) {\n-            Collection<V> col =  map.get(key);\n+            Collection<V> col = map.get(key);\n             if (col instanceof Set) {\n                 return (Set<V>) col;\n             }\n     // -----------------------------------------------------------------------\n \n     /**\n-     * Creates a {@link ListValuedMap} with a {@link HashMap} as its internal storage.\n+     * Creates a {@link ListValuedMap} with a {@link java.util.HashMap HashMap} as its internal storage.\n      *\n      * @param <K> the key type\n      * @param <V> the value type\n     }\n \n     /**\n-     * Creates a {@link ListValuedMap} with a {@link HashMap} as its internal\n+     * Creates a {@link ListValuedMap} with a {@link java.util.HashMap HashMap} as its internal\n      * storage which maps the keys to list of type <code>listClass</code>.\n      *\n      * @param <K> the key type\n     }\n \n     /**\n-     * Creates a {@link SetValuedMap} with a {@link HashMap} as its internal\n+     * Creates a {@link SetValuedMap} with a {@link java.util.HashMap HashMap} as its internal\n      * storage\n      *\n      * @param <K> the key type\n     }\n \n     /**\n-     * Creates a {@link SetValuedMap} with a {@link HashMap} as its internal\n+     * Creates a {@link SetValuedMap} with a {@link java.util.HashMap HashMap} as its internal\n      * storage which maps the keys to a set of type <code>setClass</code>\n      *\n      * @param <K> the key type\n--- a/src/main/java/org/apache/commons/collections4/multimap/MultiValuedLinkedHashMap.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/MultiValuedLinkedHashMap.java\n  */\n package org.apache.commons.collections4.multimap;\n \n-import java.util.*;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n \n import org.apache.commons.collections4.ListValuedMap;\n import org.apache.commons.collections4.MultiValuedMap;\n import org.apache.commons.collections4.SetValuedMap;\n \n /**\n- * Implements a {@link MultiValuedMap}, using a {@link LinkedHashMap} to provide data\n- * storage. This MultiValuedMap implementation the allows insertion order to be\n- * maintained.\n+ * Implements a {@link MultiValuedMap}, using a {@link LinkedHashMap} to provide\n+ * data storage. This MultiValuedMap implementation the allows insertion order\n+ * to be maintained.\n  * <p>\n  * A <code>MultiValuedMap</code> is a Map with slightly different semantics.\n  * Putting a value into the map will add the value to a Collection at that key.\n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n  * @since 4.1\n- * @version $Id$\n+ * @version $Id: $\n  */\n public class MultiValuedLinkedHashMap<K, V> extends AbstractMultiValuedMap<K, V> implements MultiValuedMap<K, V> {\n \n      */\n     protected <C extends Collection<V>> MultiValuedLinkedHashMap(int initialCapacity, float loadFactor,\n             final Class<C> collectionClazz, int initialCollectionCapacity) {\n-        super(new LinkedHashMap<K, Collection<V>>(initialCapacity, loadFactor), collectionClazz, initialCollectionCapacity);\n+        super(new LinkedHashMap<K, Collection<V>>(initialCapacity, loadFactor), collectionClazz,\n+                                                  initialCollectionCapacity);\n     }\n \n     /** Inner class for ListValuedLinkedMap */\n--- a/src/test/java/org/apache/commons/collections4/multimap/MultiValuedLinkedHashMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/multimap/MultiValuedLinkedHashMapTest.java\n  */\n package org.apache.commons.collections4.multimap;\n \n-import java.util.*;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Set;\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections4.*;\n+import org.apache.commons.collections4.BulkTest;\n+import org.apache.commons.collections4.ListValuedMap;\n+import org.apache.commons.collections4.MapIterator;\n+import org.apache.commons.collections4.MultiValuedMap;\n+import org.apache.commons.collections4.SetValuedMap;\n \n /**\n  * Test MultiValuedLinkedHashMap\n  *\n  * @since 4.1\n- * @version $Id$\n+ * @version $Id: $\n  */\n public class MultiValuedLinkedHashMapTest<K, V> extends AbstractMultiValuedMapTest<K, V> {\n \n     public void testIterationOrder() {\n         MultiValuedMap<K, V> map = makeFullMap();\n         MapIterator<K, V> mapIt = map.mapIterator();\n-        Iterator keyIt = Arrays.asList(getSampleKeys()).iterator();\n-        Iterator valueIt = Arrays.asList(getSampleValues()).iterator();\n+        Iterator<K> keyIt = Arrays.asList(getSampleKeys()).iterator();\n+        Iterator<V> valueIt = Arrays.asList(getSampleValues()).iterator();\n \n         while(mapIt.hasNext()) {\n             mapIt.next();\n         addSampleMappings(setMap);\n \n         MapIterator<K, V> mapIt = setMap.mapIterator();\n-        Iterator keyIt = Arrays.asList(getSampleKeys()).iterator();\n-        Iterator valueIt = Arrays.asList(getSampleValues()).iterator();\n+        Iterator<K> keyIt = Arrays.asList(getSampleKeys()).iterator();\n+        Iterator<V> valueIt = Arrays.asList(getSampleValues()).iterator();\n \n         while(mapIt.hasNext()) {\n             mapIt.next();\n         addSampleMappings(listMap);\n \n         MapIterator<K, V> mapIt = listMap.mapIterator();\n-        Iterator keyIt = Arrays.asList(getSampleKeys()).iterator();\n-        Iterator valueIt = Arrays.asList(getSampleValues()).iterator();\n+        Iterator<K> keyIt = Arrays.asList(getSampleKeys()).iterator();\n+        Iterator<V> valueIt = Arrays.asList(getSampleValues()).iterator();\n \n         while(mapIt.hasNext()) {\n             mapIt.next();", "timestamp": 1413838858, "metainfo": ""}