{"sha": "ac4f8bf346d344326a986aa16000db69b2fb4ffc", "log": "refactor; avoid more generic array classcastexceptions  ", "commit": "\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n  */\n public abstract class AbstractTestSortedBidiMap<K extends Comparable<K>, V extends Comparable<V>> extends AbstractTestOrderedBidiMap<K, V> {\n \n-    protected List<K> sortedKeys = new ArrayList<K>();\n+    protected List<K> sortedKeys;\n     protected List<V> sortedValues = new ArrayList<V>();\n     protected SortedSet<V> sortedNewValues = new TreeSet<V>();\n \n-    @SuppressWarnings(\"unchecked\")\n     public AbstractTestSortedBidiMap(String testName) {\n         super(testName);\n-        Object[] sampleKeys = getSampleKeys();\n-        for (Object key : sampleKeys) {\n-            sortedKeys.add((K) key);\n-        }\n+        sortedKeys = getAsList(getSampleKeys());\n         Collections.sort(sortedKeys);\n         sortedKeys = Collections.unmodifiableList(sortedKeys);\n \n         sortedValues.addAll(map.values());\n         sortedValues = Collections.unmodifiableList(sortedValues);\n \n-        Object[] newSampleValues = getNewSampleValues();\n-        for (Object value : newSampleValues) {\n-            sortedNewValues.add((V) value);\n-        }\n+        sortedNewValues.addAll(this.<V> getAsList(getNewSampleValues()));\n     }\n \n //    public AbstractTestSortedBidiMap() {\n--- a/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap2.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap2.java\n     public static void main(String[] args) {\n         TestRunner.run(suite());\n     }\n-    \n+\n     public static Test suite() {\n         return BulkTest.makeSuite(TestDualTreeBidiMap2.class);\n     }\n             ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n             Object dest = in.readObject();\n             in.close();\n-            \n+\n             SortedBidiMap bidi = (SortedBidiMap) dest;\n             assertNotNull(obj.comparator());\n             assertNotNull(bidi.comparator());\n         SortedBidiMap<K, V> sm = makeFullMap();\n \n         // Sort by the comparator used in the makeEmptyBidiMap() method\n-        List<K> newSortedKeys = Arrays.asList(getSampleKeys());\n+        List<K> newSortedKeys = getAsList(getSampleKeys());\n         Collections.sort(newSortedKeys, new ReverseComparator<K>(ComparableComparator.<K>getInstance()));\n         newSortedKeys = Collections.unmodifiableList(newSortedKeys);\n \n     public String[] ignoredTests() {\n         return new String[] {\"TestDualTreeBidiMap2.bulkTestInverseMap.bulkTestInverseMap\"};\n     }\n-    \n+\n //    public void testCreate() throws Exception {\n //        resetEmpty();\n //        writeExternalFormToDisk((java.io.Serializable) map, \"D:/dev/collections/data/test/DualTreeBidiMap.emptyCollection.version3.Test2.obj\");\n--- a/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n         return (V[]) getOtherNonNullStringElements();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    protected <E> List<E> getAsList(Object[] o) {\n+        ArrayList<E> result = new ArrayList<E>();\n+        for (Object element : o) {\n+            result.add((E) element);\n+        }\n+        return result;\n+    }\n+\n     /**\n      * Returns a list of string elements suitable for return by\n      * {@link #getOtherKeys()} or {@link #getOtherValues}.\n      *\n-     * <p>Override getOtherElements to returnthe results of this method if your\n+     * <p>Override getOtherElements to return the results of this method if your\n      * collection does not support heterogenous elements or the null element.\n      * </p>\n      */\n         Map.Entry<K, V> test = cloneMapEntry(entry);\n         assertEquals(true, entrySet.contains(test));\n     }\n-    \n+\n     @SuppressWarnings(\"unchecked\")\n     public void testEntrySetContains3() {\n         resetFull();\n         public boolean isGetStructuralModify() {\n             return AbstractTestMap.this.isGetStructuralModify();\n         }\n-        \n+\n         public boolean isTestSerialization() {\n             return false;\n         }\n         public boolean isAddSupported() {\n             return false;\n         }\n-        \n+\n         public boolean isRemoveSupported() {\n             return AbstractTestMap.this.isRemoveSupported();\n         }\n-        \n+\n         public boolean isTestSerialization() {\n             return false;\n         }\n         public boolean isRemoveSupported() {\n             return AbstractTestMap.this.isRemoveSupported();\n         }\n-        \n+\n         public boolean isTestSerialization() {\n             return false;\n         }", "timestamp": 1255529782, "metainfo": ""}