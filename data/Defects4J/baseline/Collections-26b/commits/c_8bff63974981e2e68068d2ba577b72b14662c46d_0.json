{"sha": "8bff63974981e2e68068d2ba577b72b14662c46d", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r555925 | skestle | 2007-07-13 03:39:24 -0700 (Fri, 13 Jul 2007) | 2 lines          Added Edwin Tellman's patch for COLLECTIONS-243.       It all seems pretty reasonable, and it should all be checked again as the project is worked through     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n \n import junit.framework.Test;\n     private static final String x = \"x\";\n \n     private String[] fullArray;\n-    private List fullList;\n-    \n+    private List<String> fullList;\n+\n     public TestListUtils(String name) {\n         super(name);\n     }\n \n     public void setUp() {\n         fullArray = new String[]{a, b, c, d, e};\n-        fullList = new ArrayList(Arrays.asList(fullArray));\n-    }\n-    \n-    \n+        fullList = new ArrayList<String>(Arrays.asList(fullArray));\n+    }\n+\n     public void testNothing() {\n     }\n-    \n-    public void testpredicatedList() {\n-        Predicate predicate = new Predicate() {\n+\n+    /**\n+     * Tests intersecting a non-empty list with an empty list.\n+     */\n+    public void testIntersectNonEmptyWithEmptyList() {\n+        final List<String> empty = Collections.<String>emptyList();\n+        assertTrue(\"result not empty\", ListUtils.intersection(empty, fullList).isEmpty());\n+    }\n+\n+    /**\n+     * Tests intersecting a non-empty list with an empty list.\n+     */\n+    public void testIntersectEmptyWithEmptyList() {\n+        final List<?> empty = Collections.EMPTY_LIST;\n+        assertTrue(\"result not empty\", ListUtils.intersection(empty, empty).isEmpty());\n+    }\n+\n+    /**\n+     * Tests intersecting a non-empty list with an subset of iteself.\n+     */\n+    public void testIntersectNonEmptySubset() {\n+        // create a copy\n+        final List<String> other = new ArrayList<String>(fullList);\n+\n+        // remove a few items\n+        assertNotNull(other.remove(0));\n+        assertNotNull(other.remove(1));\n+\n+        // make sure the intersection is equal to the copy\n+        assertEquals(other, ListUtils.intersection(fullList, other));\n+    }\n+\n+    /**\n+     * Tests intersecting a non-empty list with an subset of iteself.\n+     */\n+    public void testIntersectListWithNoOverlapAndDifferentTypes() {\n+        final List<Integer> other = Arrays.asList(1, 23);\n+        assertTrue(ListUtils.intersection(fullList, other).isEmpty());\n+    }\n+\n+    /**\n+     * Tests intersecting a non-empty list with iteself.\n+     */\n+    public void testIntersectListWithSelf() {\n+        assertEquals(fullList, ListUtils.intersection(fullList, fullList));\n+    }\n+\n+    public void testPredicatedList() {\n+        Predicate<Object> predicate = new Predicate<Object>() {\n             public boolean evaluate(Object o) {\n                 return o instanceof String;\n             }\n         };\n-        List list =\n-        ListUtils.predicatedList(new ArrayStack(), predicate);\n-        assertTrue(\"returned object should be a PredicatedList\",\n-            list instanceof PredicatedList);\n-        try {\n-            list =\n-            ListUtils.predicatedList(new ArrayStack(), null);\n+        List<Object> list = ListUtils.predicatedList(new ArrayStack<Object>(), predicate);\n+        assertTrue(\"returned object should be a PredicatedList\", list instanceof PredicatedList);\n+        try {\n+            list = ListUtils.predicatedList(new ArrayStack<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null predicate.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n         try {\n-            list =\n-            ListUtils.predicatedList(null, predicate);\n+            list = ListUtils.predicatedList(null, predicate);\n             fail(\"Expecting IllegalArgumentException for null list.\");\n         } catch (IllegalArgumentException ex) {\n             // expected\n     }\n \n     public void testLazyList() {\n-        List list = ListUtils.lazyList(new ArrayList(), new Factory() {\n+        List<Integer> list = ListUtils.lazyList(new ArrayList<Integer>(), new Factory<Integer>() {\n \n             private int index;\n \n-            public Object create() {\n+            public Integer create() {\n                 index++;\n                 return new Integer(index);\n             }\n         });\n \n-        assertNotNull((Integer)list.get(5));\n+        assertNotNull(list.get(5));\n         assertEquals(6, list.size());\n \n-        assertNotNull((Integer)list.get(5));\n+        assertNotNull(list.get(5));\n         assertEquals(6, list.size());\n     }\n \n     public void testEquals() {\n-        Collection data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n-        \n-        List a = new ArrayList( data );\n-        List b = new ArrayList( data );\n-        \n+        Collection<String> data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n+\n+        List<String> a = new ArrayList<String>( data );\n+        List<String> b = new ArrayList<String>( data );\n+\n         assertEquals(true, a.equals(b));\n         assertEquals(true, ListUtils.isEqualList(a, b));\n         a.clear();\n         assertEquals(false, ListUtils.isEqualList(null, b));\n         assertEquals(true, ListUtils.isEqualList(null, null));\n     }\n-    \n+\n     public void testHashCode() {\n-        Collection data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n-            \n-        List a = new ArrayList( data );\n-        List b = new ArrayList( data );\n-        \n+        Collection<String> data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n+\n+        List<String> a = new ArrayList<String>(data);\n+        List<String> b = new ArrayList<String>(data);\n+\n         assertEquals(true, a.hashCode() == b.hashCode());\n         assertEquals(true, a.hashCode() == ListUtils.hashCodeForList(a));\n         assertEquals(true, b.hashCode() == ListUtils.hashCodeForList(b));\n         assertEquals(false, ListUtils.hashCodeForList(a) == ListUtils.hashCodeForList(b));\n         assertEquals(0, ListUtils.hashCodeForList(null));\n     }\n-    \n+\n     public void testRetainAll() {\n-        List sub = new ArrayList();\n+        List<String> sub = new ArrayList<String>();\n         sub.add(a);\n         sub.add(b);\n         sub.add(x);\n \n-        List retained = ListUtils.retainAll(fullList, sub);\n+        List<String> retained = ListUtils.retainAll(fullList, sub);\n         assertTrue(retained.size() == 2);\n         sub.remove(x);\n         assertTrue(retained.equals(sub));\n         fullList.retainAll(sub);\n         assertTrue(retained.equals(fullList));\n-        \n+\n         try {\n             ListUtils.retainAll(null, null);\n             fail(\"expecting NullPointerException\");\n     }\n \n     public void testRemoveAll() {\n-        List sub = new ArrayList();\n+        List<String> sub = new ArrayList<String>();\n         sub.add(a);\n         sub.add(b);\n         sub.add(x);\n \n-        List remainder = ListUtils.removeAll(fullList, sub);\n+        List<String> remainder = ListUtils.removeAll(fullList, sub);\n         assertTrue(remainder.size() == 3);\n         fullList.removeAll(sub);\n         assertTrue(remainder.equals(fullList));\n-        \n+\n         try {\n             ListUtils.removeAll(null, null);\n             fail(\"expecting NullPointerException\");\n     /**\n      * Tests the <code>indexOf</code> method in <code>ListUtils</code> class..\n      */\n+    // TODO: Generics\n     public void testIndexOf() {\n         Predicate testPredicate = PredicateUtils.equalPredicate(\"d\");\n         int index = ListUtils.indexOf(fullList, testPredicate);", "timestamp": 1252994289, "metainfo": ""}