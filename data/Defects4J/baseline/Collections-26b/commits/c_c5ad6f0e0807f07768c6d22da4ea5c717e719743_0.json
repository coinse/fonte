{"sha": "c5ad6f0e0807f07768c6d22da4ea5c717e719743", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r555925 | skestle | 2007-07-13 03:39:24 -0700 (Fri, 13 Jul 2007) | 2 lines          Added Edwin Tellman's patch for COLLECTIONS-243.       It all seems pretty reasonable, and it should all be checked again as the project is worked through     ------------------------------------------------------------------------     r471575 | scolebourne | 2006-11-05 15:58:08 -0800 (Sun, 05 Nov 2006) | 1 line          Generify and remove AbstractSerializableCollectionDecorator     ------------------------------------------------------------------------     r471202 | scolebourne | 2006-11-04 06:21:44 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getCollection() - use covariant decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/collection/TransformedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/TransformedCollection.java\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Iterator;\n import java.util.List;\n \n import org.apache.commons.collections.Transformer;\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n+ * @param <E> the type of the elements in the collection\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n  */\n-public class TransformedCollection extends AbstractSerializableCollectionDecorator {\n+public class TransformedCollection<E> extends AbstractCollectionDecorator<E> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 8692300188161871514L;\n \n     /** The transformer to use */\n-    protected final Transformer transformer;\n+    protected final Transformer<? super E, ? extends E> transformer;\n \n     /**\n      * Factory method to create a transforming collection.\n      * @return a new transformed collection\n      * @throws IllegalArgumentException if collection or transformer is null\n      */\n-    public static Collection decorate(Collection coll, Transformer transformer) {\n-        return new TransformedCollection(coll, transformer);\n+    public static <E> Collection<E> decorate(Collection<E> coll, Transformer<? super E, ? extends E> transformer) {\n+        return new TransformedCollection<E>(coll, transformer);\n     }\n-    \n+\n     /**\n      * Factory method to create a transforming collection that will transform\n      * existing contents of the specified collection.\n      * @throws IllegalArgumentException if collection or transformer is null\n      * @since Commons Collections 3.3\n      */\n+    // TODO: Generics\n     public static Collection decorateTransform(Collection collection, Transformer transformer) {\n         TransformedCollection decorated = new TransformedCollection(collection, transformer);\n         if (transformer != null && collection != null && collection.size() > 0) {\n             Object[] values = collection.toArray();\n             collection.clear();\n             for(int i=0; i<values.length; i++) {\n-                decorated.getCollection().add(transformer.transform(values[i]));\n+                decorated.decorated().add(transformer.transform(values[i]));\n             }\n         }\n         return decorated;\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @throws IllegalArgumentException if collection or transformer is null\n      */\n-    protected TransformedCollection(Collection coll, Transformer transformer) {\n+    protected TransformedCollection(Collection<E> coll, Transformer<? super E, ? extends E> transformer) {\n         super(coll);\n         if (transformer == null) {\n             throw new IllegalArgumentException(\"Transformer must not be null\");\n      * @param object  the object to transform\n      * @return a transformed object\n      */\n-    protected Object transform(Object object) {\n+    protected E transform(E object) {\n         return transformer.transform(object);\n     }\n \n      * @param coll  the collection to transform\n      * @return a transformed object\n      */\n-    protected Collection transform(Collection coll) {\n-        List list = new ArrayList(coll.size());\n-        for (Iterator it = coll.iterator(); it.hasNext(); ) {\n-            list.add(transform(it.next()));\n+    protected Collection<E> transform(Collection<? extends E> coll) {\n+        List<E> list = new ArrayList<E>(coll.size());\n+        for (E item : coll) {\n+            list.add(transform(item));\n         }\n         return list;\n     }\n \n     //-----------------------------------------------------------------------\n-    public boolean add(Object object) {\n-        object = transform(object);\n-        return getCollection().add(object);\n+    public boolean add(E object) {\n+        return decorated().add(transform(object));\n     }\n \n-    public boolean addAll(Collection coll) {\n-        coll = transform(coll);\n-        return getCollection().addAll(coll);\n+    public boolean addAll(Collection<? extends E> coll) {\n+        return decorated().addAll(transform(coll));\n     }\n \n }", "timestamp": 1252994089, "metainfo": ""}