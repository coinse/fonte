{"sha": "de8be58655c199c3edebde6dd4ea9220f327db75", "log": "Add new equals and hashCode methods that aid implementors of the interfaces from Neil O'Toole   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.13 2003/01/10 20:21:23 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.14 2003/04/04 20:40:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.13 $ $Date: 2003/01/10 20:21:23 $\n+ * @version $Revision: 1.14 $ $Date: 2003/04/04 20:40:28 $\n  * \n  * @author  <a href=\"mailto:fede@apache.org\">Federico Barbieri</a>\n  * @author  <a href=\"mailto:donaldp@apache.org\">Peter Donald</a>\n  * @author Paul Jack\n  * @author Stephen Colebourne\n+ * @author Neil O'Toole\n  */\n public class ListUtils {\n \n     public ListUtils() {\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns a new list containing all elements that are contained in\n      * both given lists.\n         return result;\n     }\n \n-\n+    /**\n+     * Tests two lists for value-equality as per the equality contract in\n+     * {@link java.util.List#equals(java.lang.Object)}.\n+     * <p>\n+     * This method is useful for implementing <code>List</code> when you cannot\n+     * extend AbstractList.\n+     * <p>\n+     * The relevant text (slightly paraphrased as this is a static method) is:\n+     * <blockquote>\n+     * Compares the two list objects for equality.  Returns\n+     * <tt>true</tt> if and only if both\n+     * lists have the same size, and all corresponding pairs of elements in\n+     * the two lists are <i>equal</i>.  (Two elements <tt>e1</tt> and\n+     * <tt>e2</tt> are <i>equal</i> if <tt>(e1==null ? e2==null :\n+     * e1.equals(e2))</tt>.)  In other words, two lists are defined to be\n+     * equal if they contain the same elements in the same order.  This\n+     * definition ensures that the equals method works properly across\n+     * different implementations of the <tt>List</tt> interface.\n+     * </blockquote>\n+     *\n+     * <b>Note:</b> The behaviour of this method is undefined if the lists are\n+     * modified during the equals comparison.\n+     * \n+     * @see java.util.List\n+     * @param list1  the first list, may be null\n+     * @param list2  the second list, may be null\n+     * @return whether the lists are equal by value comparison\n+     */\n+    public static boolean equals(final List list1, final List list2) {\n+        if (list1 == list2) {\n+            return true;\n+        }\n+        if (list1 == null || list2 == null || list1.size() != list2.size()) {\n+            return false;\n+        }\n+\n+        Iterator it1 = list1.iterator();\n+        Iterator it2 = list2.iterator();\n+        Object obj1 = null;\n+        Object obj2 = null;\n+\n+        while (it1.hasNext() && it2.hasNext()) {\n+            obj1 = it1.next();\n+            obj2 = it2.next();\n+\n+            if (!(obj1 == null ? obj2 == null : obj1.equals(obj2))) {\n+                return false;\n+            }\n+        }\n+\n+        return !(it1.hasNext() || it2.hasNext());\n+    }\n+    \n+    /**\n+     * Generates a hashcode using the algorithm specified in \n+     * {@link java.util.List#hashCode()}.\n+     * <p>\n+     * This method is useful for implementing <code>List</code> when you cannot\n+     * extend AbstractList.\n+     * \n+     * @see java.util.List#hashCode()\n+     * @param list  the list to generate the hashCode for, may be null\n+     * @return the hash code\n+     */\n+    public static int hashCode(final List list) {\n+        if (list == null) {\n+            return 0;\n+        }\n+        int hashCode = 1;\n+        Iterator it = list.iterator();\n+        Object obj = null;\n+        \n+        while (it.hasNext()) {\n+            obj = it.next();\n+            hashCode = 31 * hashCode + (obj == null ? 0 : obj.hashCode());\n+        }\n+        return hashCode;\n+    }   \n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implementation of a ListIterator that wraps an original.\n+     */\n     static class ListIteratorWrapper \n             implements ListIterator {\n \n \n     }\n \n-\n+    /**\n+     * Implementation of a list that checks (predicates) each entry.\n+     */\n     static class PredicatedList \n             extends CollectionUtils.PredicatedCollection\n             implements List {\n \n     }\n \n-\n+    /**\n+     * Implementation of a list that has a fixed size.\n+     */\n     static class FixedSizeList \n             extends CollectionUtils.UnmodifiableCollection\n             implements List {\n \n     }\n \n-\n+    /**\n+     * Implementation of a list that creates objects on demand.\n+     */\n     static class LazyList \n             extends CollectionUtils.CollectionWrapper \n             implements List {\n \n     }\n \n-\n+    //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized list backed by the given list.\n      * <p>\n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.9 2003/01/10 20:21:23 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.10 2003/04/04 20:40:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n+import java.util.Set;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.Iterator;\n import java.util.Set;\n import java.util.SortedSet;\n import java.util.TreeSet;\n  * Provides static utility methods and decorators for {@link Set} \n  * and {@link SortedSet} instances.\n  *\n- * @version $Revision: 1.9 $ $Date: 2003/01/10 20:21:23 $\n+ * @version $Revision: 1.10 $ $Date: 2003/04/04 20:40:28 $\n  * @since Commons Collection 2.1\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n+ * @author Neil O'Toole\n  */\n public class SetUtils {\n \n     public SetUtils() {\n     }\n \n-\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests two sets for equality as per the <code>equals()</code> contract\n+     * in {@link java.util.Set#equals(java.lang.Object)}.\n+     * <p>\n+     * This method is useful for implementing <code>Set</code> when you cannot\n+     * extend AbstractSet.\n+     * <p>\n+     * The relevant text (slightly paraphrased as this is a static method) is:\n+     * <blockquote>\n+     * <p>Two sets are considered equal if they have\n+     * the same size, and every member of the first set is contained in\n+     * the second. This ensures that the <tt>equals</tt> method works\n+     * properly across different implementations of the <tt>Set</tt>\n+     * interface.</p>\n+     * \n+     * <p>\n+     * This implementation first checks if the two sets are the same object: \n+     * if so it returns <tt>true</tt>.  Then, it checks if the two sets are\n+     * identical in size; if not, it returns false. If so, it returns\n+     * <tt>a.containsAll((Collection) b)</tt>.</p>\n+     * </blockquote>\n+     * \n+     * @see java.util.Set\n+     * @param set1  the first set, may be null\n+     * @param set2  the second set, may be null\n+     * @return whether the sets are equal by value comparison\n+     */\n+    public static boolean equals(final Set set1, final Set set2) {\n+        if (set1 == set2) {\n+            return true;\n+        }\n+        if (set1 == null || set2 == null || set1.size() != set2.size()) {\n+            return false;\n+        }\n+\n+        return set1.containsAll(set2);\n+    }\n+\n+    /**\n+     * Generates a hashcode using the algorithm specified in \n+     * {@link java.util.Set#hashCode()}.\n+     * <p>\n+     * This method is useful for implementing <code>Set</code> when you cannot\n+     * extend AbstractSet.\n+     * \n+     * @see java.util.Set#hashCode()\n+     * @param set  the set to calculate the hashcode for, may be null\n+     * @return the hash code\n+     */\n+    public static int hashCode(final Set set) {\n+        if (set == null) {\n+            return 0;\n+        }\n+        int hashCode = 0;\n+        Iterator it = set.iterator();\n+        Object obj = null;\n+\n+        while (it.hasNext()) {\n+            obj = it.next();\n+            if (obj != null) {\n+                hashCode += obj.hashCode();\n+            }\n+        }\n+        return hashCode;\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implementation of a set that checks new entries.\n+     */\n     static class PredicatedSet \n             extends CollectionUtils.PredicatedCollection\n             implements Set {\n \n     }\n \n-\n+    /**\n+     * Implementation of a sorted set that checks new entries.\n+     */\n     static class PredicatedSortedSet \n             extends PredicatedSet \n             implements SortedSet {\n \n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized set backed by the given set.\n      * <p>\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.5 2002/10/12 22:36:22 scolebourne Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/10/12 22:36:22 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.6 2003/04/04 20:42:02 scolebourne Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2003/04/04 20:42:02 $\n  *\n  * ====================================================================\n  *\n package org.apache.commons.collections;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n \n import junit.framework.Test;\n \n-\n+/**\n+ * Tests for ListUtils.\n+ * \n+ * @author Stephen Colebourne\n+ * @author Neil O'Toole\n+ */\n public class TestListUtils extends BulkTest {\n \n     public TestListUtils(String name) {\n         assertEquals(6, list.size());\n     }\n \n-\n+\tpublic void testEquals() {\n+\t\tCollection data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n+\t\t\n+\t\tList a = new ArrayList( data );\n+\t\tList b = new ArrayList( data );\n+\t\t\n+        assertEquals(true, a.equals(b));\n+        assertEquals(true, ListUtils.equals(a, b));\n+        a.clear();\n+        assertEquals(false, ListUtils.equals(a, b));\n+        assertEquals(false, ListUtils.equals(a, null));\n+        assertEquals(false, ListUtils.equals(null, b));\n+        assertEquals(true, ListUtils.equals(null, null));\n+\t}\n+\t\n+\tpublic void testHashCode() {\n+\t\tCollection data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n+\t\t\t\n+\t\tList a = new ArrayList( data );\n+\t\tList b = new ArrayList( data );\n+\t\t\n+        assertEquals(true, a.hashCode() == b.hashCode());\n+        assertEquals(true, a.hashCode() == ListUtils.hashCode(a));\n+        assertEquals(true, b.hashCode() == ListUtils.hashCode(b));\n+        assertEquals(true, ListUtils.hashCode(a) == ListUtils.hashCode(b));\n+        a.clear();\n+        assertEquals(false, ListUtils.hashCode(a) == ListUtils.hashCode(b));\n+        assertEquals(0, ListUtils.hashCode(null));\n+\t}\t\n+\t\n }\n-\n-\n--- a/src/test/org/apache/commons/collections/TestSetUtils.java\n+++ b/src/test/org/apache/commons/collections/TestSetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.3 2003/02/19 20:33:11 scolebourne Exp $\n- * $Revision: 1.3 $\n- * $Date: 2003/02/19 20:33:11 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.4 2003/04/04 20:42:03 scolebourne Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2003/04/04 20:42:03 $\n  *\n  * ====================================================================\n  *\n  */\n package org.apache.commons.collections;\n \n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n \n \n /**\n- *  Tests for SetUtils.\n+ * Tests for SetUtils.\n+ * \n+ * @author Stephen Colebourne\n+ * @author Neil O'Toole\n  */\n public class TestSetUtils extends BulkTest {\n \n         };\n     }\n \n+    public void testEquals() {\n+        Collection data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n+        \n+        Set a = new HashSet( data );\n+        Set b = new HashSet( data );\n+        \n+        assertEquals(true, a.equals(b));\n+        assertEquals(true, SetUtils.equals(a, b));\n+        a.clear();\n+        assertEquals(false, SetUtils.equals(a, b));\n+        assertEquals(false, SetUtils.equals(a, null));\n+        assertEquals(false, SetUtils.equals(null, b));\n+        assertEquals(true, SetUtils.equals(null, null));\n+    }\n+    \n+    public void testHashCode() {\n+        Collection data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n+            \n+        Set a = new HashSet( data );\n+        Set b = new HashSet( data );\n+        \n+        assertEquals(true, a.hashCode() == b.hashCode());\n+        assertEquals(true, a.hashCode() == SetUtils.hashCode(a));\n+        assertEquals(true, b.hashCode() == SetUtils.hashCode(b));\n+        assertEquals(true, SetUtils.hashCode(a) == SetUtils.hashCode(b));\n+        a.clear();\n+        assertEquals(false, SetUtils.hashCode(a) == SetUtils.hashCode(b));\n+        assertEquals(0, SetUtils.hashCode(null));\n+    }   \n \n }\n-\n-", "timestamp": 1049488923, "metainfo": ""}