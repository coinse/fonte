{"sha": "6b73b4d72de6d4b5adea2431c467765734643dcb", "log": "Cleanup of main package.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ArrayStack.java\n+++ b/src/main/java/org/apache/commons/collections/ArrayStack.java\n  *\n  * @see java.util.Stack\n  * @since 1.0\n- * @version $Revision$\n- *\n- * @author Craig R. McClanahan\n- * @author Paul Jack\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class ArrayStack<E> extends ArrayList<E> implements Buffer<E> {\n \n--- a/src/main/java/org/apache/commons/collections/Bag.java\n+++ b/src/main/java/org/apache/commons/collections/Bag.java\n  *\n  * @param <E> the type held in the bag\n  * @since 2.0\n- * @version $Revision$\n- *\n- * @author Chuck Burdick\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface Bag<E> extends Collection<E> {\n \n--- a/src/main/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/main/java/org/apache/commons/collections/BagUtils.java\n import org.apache.commons.collections.bag.UnmodifiableSortedBag;\n \n /**\n- * Provides utility methods and decorators for {@link Bag} and {@link SortedBag}\n- * instances.\n+ * Provides utility methods and decorators for {@link Bag} and {@link SortedBag} instances.\n  *\n  * @since 2.1\n- * @version $Revision$\n- * 2007) $\n- *\n- * @author Paul Jack\n- * @author Stephen Colebourne\n- * @author Andrew Freeman\n- * @author Matthew Hawthorne\n+ * @version $Id$\n  */\n public class BagUtils {\n \n--- a/src/main/java/org/apache/commons/collections/BidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/BidiMap.java\n  * @param <V> the type of the values in the map\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface BidiMap<K, V> extends IterableMap<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/BoundedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/BoundedCollection.java\n  * @see CollectionUtils#maxSize\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Herve Quiroz\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface BoundedCollection<E> extends Collection<E> {\n \n--- a/src/main/java/org/apache/commons/collections/BoundedMap.java\n+++ b/src/main/java/org/apache/commons/collections/BoundedMap.java\n  * associated with the maximum number of elements.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface BoundedMap<K, V> extends IterableMap<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/Buffer.java\n+++ b/src/main/java/org/apache/commons/collections/Buffer.java\n  *\n  * @param <E> the type of the elements in the buffer\n  * @since 2.1\n- * @version $Revision$\n- *\n- * @author Avalon\n- * @author Berin Loritsch\n- * @author Paul Jack\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface Buffer<E> extends Collection<E> {\n \n--- a/src/main/java/org/apache/commons/collections/BufferOverflowException.java\n+++ b/src/main/java/org/apache/commons/collections/BufferOverflowException.java\n  * exceeded.\n  *\n  * @since 2.1\n- * @version $Revision$\n- *\n- * @author Avalon\n- * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n- * @author <a href=\"mailto:jefft@apache.org\">Jeff Turner</a>\n- * @author Paul Jack\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class BufferOverflowException extends RuntimeException {\n     \n--- a/src/main/java/org/apache/commons/collections/BufferUnderflowException.java\n+++ b/src/main/java/org/apache/commons/collections/BufferUnderflowException.java\n  * NOTE: From version 3.0, this exception extends NoSuchElementException.\n  *\n  * @since 2.1\n- * @version $Revision$\n- *\n- * @author Avalon\n- * @author Berin Loritsch\n- * @author Jeff Turner\n- * @author Paul Jack\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class BufferUnderflowException extends NoSuchElementException {\n     \n--- a/src/main/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/main/java/org/apache/commons/collections/BufferUtils.java\n  * Provides utility methods and decorators for {@link Buffer} instances.\n  *\n  * @since 2.1\n- * @version $Revision$\n- *\n- * @author Paul Jack\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class BufferUtils {\n \n--- a/src/main/java/org/apache/commons/collections/Closure.java\n+++ b/src/main/java/org/apache/commons/collections/Closure.java\n  *\n  * @param <T> the type that the closure acts on\n  * @since 1.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Nicola Ken Barozzi\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface Closure<T> {\n \n--- a/src/main/java/org/apache/commons/collections/ClosureUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ClosureUtils.java\n  * All the supplied closures are Serializable.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Matt Benson\n+ * @version $Id$\n  */\n public class ClosureUtils {\n \n      * @throws IllegalArgumentException if the closures array is null\n      * @throws IllegalArgumentException if any closure in the array is null\n      */\n-    public static <E> Closure<E> chainedClosure(Closure<? super E>[] closures) {\n+    public static <E> Closure<E> chainedClosure(Closure<? super E>... closures) {\n         return ChainedClosure.chainedClosure(closures);\n     }\n \n      * @throws IllegalArgumentException if the predicate is null\n      * @throws IllegalArgumentException if either closure is null\n      */\n-    public static <E> Closure<E> ifClosure(Predicate<? super E> predicate, Closure<? super E> trueClosure, Closure<? super E> falseClosure) {\n+    public static <E> Closure<E> ifClosure(Predicate<? super E> predicate,\n+                                           Closure<? super E> trueClosure,\n+                                           Closure<? super E> falseClosure) {\n         return IfClosure.<E>ifClosure(predicate, trueClosure, falseClosure);\n     }\n \n      * @throws IllegalArgumentException if any element in the arrays is null\n      * @throws IllegalArgumentException if the arrays are different sizes\n      */\n-    public static <E> Closure<E> switchClosure(Predicate<? super E>[] predicates, Closure<? super E>[] closures, Closure<? super E> defaultClosure) {\n+    public static <E> Closure<E> switchClosure(Predicate<? super E>[] predicates,\n+                                               Closure<? super E>[] closures,\n+                                               Closure<? super E> defaultClosure) {\n         return SwitchClosure.<E>switchClosure(predicates, closures, defaultClosure);\n     }\n     \n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n  * Method parameters will take {@link Iterable} objects when possible.\n  *\n  * @since 1.0\n- * @version $Revision$\n- *\n- * @author Rodney Waldhoff\n- * @author Paul Jack\n- * @author Stephen Colebourne\n- * @author Steve Downey\n- * @author Herve Quiroz\n- * @author Peter KoBek\n- * @author Matthew Hawthorne\n- * @author Janek Bogucki\n- * @author Phil Steitz\n- * @author Steven Melzer\n- * @author Jon Schewe\n- * @author Neil O'Toole\n- * @author Stephen Smith\n- * @author Stephen Kestle\n+ * @version $Id$\n  */\n //TODO - note generic types for review in wiki - especially <?> ones\n //TODO - doc Cardinality Helpers\n--- a/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n  * in the <code>comparators</code> subpackage.\n  *\n  * @since 2.1\n- * @version $Revision$\n- *\n- * @author Paul Jack\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class ComparatorUtils {\n \n      *\n      * @see ComparableComparator#comparableComparator()\n      */\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();\n \n     /**\n      * @see ComparatorChain\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <E extends Comparable<? super E>> Comparator<E> chainedComparator(Comparator<E> comparator1, Comparator<E> comparator2) {\n+    public static <E extends Comparable<? super E>> Comparator<E> chainedComparator(Comparator<E> comparator1,\n+                                                                                    Comparator<E> comparator2) {\n         return chainedComparator(new Comparator[] {comparator1, comparator2});\n     }\n \n--- a/src/main/java/org/apache/commons/collections/EnumerationUtils.java\n+++ b/src/main/java/org/apache/commons/collections/EnumerationUtils.java\n  *\n  * @since 3.0\n  * @version $Id$\n- *\n- * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  */\n public class EnumerationUtils {\n \n     /**\n      * Override toList(Enumeration) for StringTokenizer as it implements Enumeration<String>\n      * for the sake of backward compatibility.\n-     * @param stringTokenizer\n+     *\n+     * @param stringTokenizer  the tokenizer to convert to a {@link List(String)}\n      * @return List<String>\n      */\n     public static List<String> toList(StringTokenizer stringTokenizer) {\n--- a/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n  * it, go ahead and tune it up!\n  *\n  * @since 1.0\n- * @version $Revision$\n- *\n- * @author <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>\n- * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n- * @author <a href=\"mailto:daveb@miceda-data\">Dave Bryson</a>\n- * @author <a href=\"mailto:jvanzyl@periapt.com\">Jason van Zyl</a>\n- * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n- * @author <a href=\"mailto:leon@opticode.co.za\">Leon Messerschmidt</a>\n- * @author <a href=\"mailto:kjohnson@transparent.com\">Kent Johnson</a>\n- * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n- * @author <a href=\"mailto:ipriha@surfeu.fi\">Ilkka Priha</a>\n- * @author Janek Bogucki\n- * @author Mohan Kishore\n- * @author Stephen Colebourne\n- * @author Shinobu Kawai\n- * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n+ * @version $Id$\n  */\n public class ExtendedProperties extends Hashtable<String, Object> {\n \n--- a/src/main/java/org/apache/commons/collections/Factory.java\n+++ b/src/main/java/org/apache/commons/collections/Factory.java\n  * @param <T> the type that the factory creates\n  *\n  * @since 2.1\n- * @version $Revision$\n- *\n- * @author Arron Bates\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface Factory<T> {\n \n--- a/src/main/java/org/apache/commons/collections/FactoryUtils.java\n+++ b/src/main/java/org/apache/commons/collections/FactoryUtils.java\n  * All the supplied factories are Serializable.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class FactoryUtils {\n \n--- a/src/main/java/org/apache/commons/collections/FunctorException.java\n+++ b/src/main/java/org/apache/commons/collections/FunctorException.java\n  * If required, a root cause error can be wrapped within this one.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class FunctorException extends RuntimeException {\n     \n--- a/src/main/java/org/apache/commons/collections/IndexedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/IndexedCollection.java\n  *\n  * @param <K> the type of object in the index.\n  * @param <C> the type of object in the collection.\n- * @author Stephen Kestle\n+ * \n+ * @since 4.0\n+ * @version $Id$\n  */\n // TODO support MultiMap/non-unique index behavior\n // TODO add support for remove and clear\n      * @param keyTransformer the {@link Transformer} for generating index keys.\n      * @return the created {@link IndexedCollection}.\n      */\n-    public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer) {\n+    public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll,\n+                                                                         final Transformer<C, K> keyTransformer) {\n         return new IndexedCollection<K, C>(coll, keyTransformer, new HashMap<K, C>());\n     }\n \n--- a/src/main/java/org/apache/commons/collections/IterableGet.java\n+++ b/src/main/java/org/apache/commons/collections/IterableGet.java\n  * limitations under the License.\n  */\n package org.apache.commons.collections;\n-\n-import java.util.Map;\n \n /**\n  * The \"read\" subset of the {@link Map} interface.\n--- a/src/main/java/org/apache/commons/collections/IterableMap.java\n+++ b/src/main/java/org/apache/commons/collections/IterableMap.java\n  * @param <V> the type of the values in the map\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface IterableMap<K, V> extends Map<K, V>, Put<K, V>, IterableGet<K, V> {\n }\n--- a/src/main/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/IteratorUtils.java\n  * Provides static utility methods and decorators for {@link Iterator}\n  * instances. The implementations are provided in the iterators subpackage.\n  * <p>\n- * WARNING: Due to human error certain binary incompatabilities were introduced\n+ * WARNING: Due to human error certain binary incompatibilities were introduced\n  * between Commons Collections 2.1 and 3.0. The class remained source and test\n  * compatible, so if you can recompile all your classes and dependencies\n  * everything is OK. Those methods which are binary incompatible are marked as\n  * against versions 2.1.1 and 3.1.\n  *\n  * @since 2.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Phil Steitz\n+ * @version $Id$\n  */\n public class IteratorUtils {\n     // validation is done in this class in certain cases because the\n      * An iterator over no elements.\n      * <p>\n      * WARNING: This constant is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>EmptyIterator.INSTANCE</code> for compatability with Commons Collections 2.1.1.\n+     * Use <code>EmptyIterator.INSTANCE</code> for compatibility with Commons Collections 2.1.1.\n      */\n     public static final ResettableIterator<Object> EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;\n \n      * A list iterator over no elements.\n      * <p>\n      * WARNING: This constant is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>EmptyListIterator.INSTANCE</code> for compatability with Commons Collections 2.1.1.\n+     * Use <code>EmptyListIterator.INSTANCE</code> for compatibility with Commons Collections 2.1.1.\n      */\n     public static final ResettableListIterator<Object> EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;\n \n      * nothing.\n      * <p>\n      * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>EmptyIterator.INSTANCE</code> for compatability with Commons Collections 2.1.1.\n+     * Use <code>EmptyIterator.INSTANCE</code> for compatibility with Commons Collections 2.1.1.\n      *\n      * @return  an iterator over nothing\n      */\n      * over nothing.\n      * <p>\n      * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>EmptyListIterator.INSTANCE</code> for compatability with Commons Collections 2.1.1.\n+     * Use <code>EmptyListIterator.INSTANCE</code> for compatibility with Commons Collections 2.1.1.\n      *\n      * @return  a list iterator over nothing\n      */\n      * the specified object.\n      * <p>\n      * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>new SingletonIterator(object)</code> for compatability.\n+     * Use <code>new SingletonIterator(object)</code> for compatibility.\n      *\n      * @param object  the single object over which to iterate\n      * @return  a singleton iterator over the object\n      * Gets an iterator over an object array.\n      * <p>\n      * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>new ArrayIterator(array)</code> for compatability.\n+     * Use <code>new ArrayIterator(array)</code> for compatibility.\n      *\n      * @param array  the array over which to iterate\n      * @return  an iterator over the array\n      * Gets an iterator over the end part of an object array.\n      * <p>\n      * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>new ArrayIterator(array,start)</code> for compatability.\n+     * Use <code>new ArrayIterator(array,start)</code> for compatibility.\n      *\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * Gets an iterator over part of an object array.\n      * <p>\n      * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>new ArrayIterator(array,start,end)</code> for compatability.\n+     * Use <code>new ArrayIterator(array,start,end)</code> for compatibility.\n      *\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n--- a/src/main/java/org/apache/commons/collections/KeyValue.java\n+++ b/src/main/java/org/apache/commons/collections/KeyValue.java\n  * @param <K> the type of the key\n  * @param <V> the type of the value\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface KeyValue<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/MapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/MapIterator.java\n package org.apache.commons.collections;\n \n import java.util.Iterator;\n-import java.util.NoSuchElementException;\n \n /**\n  * Defines an iterator that operates over a <code>Map</code>.\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface MapIterator<K, V> extends Iterator<K> {\n \n      * Gets the next <em>key</em> from the <code>Map</code>.\n      *\n      * @return the next key in the iteration\n-     * @throws NoSuchElementException if the iteration is finished\n+     * @throws java.util.NoSuchElementException if the iteration is finished\n      */\n     K next();\n \n--- a/src/main/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections/MapUtils.java\n  *  </ul>\n  *\n  * @since 1.0\n- * @version $Revision$\n- *\n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n- * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n- * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n- * @author Paul Jack\n- * @author Stephen Colebourne\n- * @author Matthew Hawthorne\n- * @author Arun Mammen Thomas\n- * @author Janek Bogucki\n- * @author Max Rydahl Andersen\n- * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n- * @author <a href=\"mailto:jcarman@apache.org\">James Carman</a>\n- * @author Neil O'Toole\n+ * @version $Id$\n  */\n public class MapUtils {\n \n--- a/src/main/java/org/apache/commons/collections/MultiMap.java\n+++ b/src/main/java/org/apache/commons/collections/MultiMap.java\n  * as they were defined in the superinterface <code>Map</code> anyway.\n  *\n  * @since 2.0\n- * @version $Revision$\n- *\n- * @author Christopher Berry\n- * @author James Strachan\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface MultiMap<K, V> extends IterableMap<K, Object> {\n \n--- a/src/main/java/org/apache/commons/collections/OrderedBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/OrderedBidiMap.java\n  * @param <V> the type of the values in the map\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface OrderedBidiMap<K, V> extends BidiMap<K, V>, OrderedMap<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/OrderedIterator.java\n+++ b/src/main/java/org/apache/commons/collections/OrderedIterator.java\n package org.apache.commons.collections;\n \n import java.util.Iterator;\n-import java.util.ListIterator;\n-import java.util.NoSuchElementException;\n \n /**\n  * Defines an iterator that operates over an ordered container. Subset of {@link ListIterator}.\n  *\n  * @param <E> the type to iterate over\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface OrderedIterator<E> extends Iterator<E> {\n \n      * Gets the previous element from the container.\n      *\n      * @return the previous element in the iteration\n-     * @throws NoSuchElementException if the iteration is finished\n+     * @throws java.util.NoSuchElementException if the iteration is finished\n      */\n     E previous();\n \n--- a/src/main/java/org/apache/commons/collections/OrderedMap.java\n+++ b/src/main/java/org/apache/commons/collections/OrderedMap.java\n  * @param <V> the type of the values in the map\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface OrderedMap<K, V> extends IterableMap<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/OrderedMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/OrderedMapIterator.java\n  */\n package org.apache.commons.collections;\n \n-import java.util.NoSuchElementException;\n-\n /**\n  * Defines an iterator that operates over an ordered <code>Map</code>.\n  * <p>\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface OrderedMapIterator<K, V> extends MapIterator<K, V>, OrderedIterator<K> {\n \n      * Gets the previous <em>key</em> from the <code>Map</code>.\n      *\n      * @return the previous key in the iteration\n-     * @throws NoSuchElementException if the iteration is finished\n+     * @throws java.util.NoSuchElementException if the iteration is finished\n      */\n     K previous();\n \n--- a/src/main/java/org/apache/commons/collections/Predicate.java\n+++ b/src/main/java/org/apache/commons/collections/Predicate.java\n  * @param <T> the type that the predicate queries\n  *\n  * @since 1.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface Predicate<T> {\n \n--- a/src/main/java/org/apache/commons/collections/ResettableIterator.java\n+++ b/src/main/java/org/apache/commons/collections/ResettableIterator.java\n  *\n  * @param <E> the type to iterate over\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface ResettableIterator<E> extends Iterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/ResettableListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/ResettableListIterator.java\n  *\n  * @param <E> the type to iterate over\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface ResettableListIterator<E> extends ListIterator<E>, ResettableIterator<E>, OrderedIterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/main/java/org/apache/commons/collections/SetUtils.java\n  * {@link Set} and {@link SortedSet} instances.\n  *\n  * @since 2.1\n- * @version $Revision$\n- *\n- * @author Paul Jack\n- * @author Stephen Colebourne\n- * @author Neil O'Toole\n- * @author Matthew Hawthorne\n+ * @version $Id$\n  */\n public class SetUtils {\n \n--- a/src/main/java/org/apache/commons/collections/SortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/SortedBag.java\n  *\n  * @param <E> the type to iterate over\n  * @since 2.0\n- * @version $Revision$\n- *\n- * @author Chuck Burdick\n+ * @version $Id$\n  */\n public interface SortedBag<E> extends Bag<E> {\n \n--- a/src/main/java/org/apache/commons/collections/SortedBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/SortedBidiMap.java\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface SortedBidiMap<K, V> extends OrderedBidiMap<K, V>, SortedMap<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/Transformer.java\n+++ b/src/main/java/org/apache/commons/collections/Transformer.java\n  * @param <O> the output type from the transformer\n  *\n  * @since 1.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface Transformer<I, O> {\n \n--- a/src/main/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/main/java/org/apache/commons/collections/TransformerUtils.java\n  * All the supplied transformers are Serializable.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author James Carman\n+ * @version $Id$\n  */\n public class TransformerUtils {\n \n--- a/src/main/java/org/apache/commons/collections/Unmodifiable.java\n+++ b/src/main/java/org/apache/commons/collections/Unmodifiable.java\n  * // now we know coll is modifiable\n  * </pre>\n  * Of course all this only works if you use the Unmodifiable classes defined\n- * in this library. If you use the JDK unmodifiable class via java util Collections\n+ * in this library. If you use the JDK unmodifiable class via {@code java.util Collections}\n  * then the interface won't be there.\n  *  \n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public interface Unmodifiable {\n     // marker interface - no methods to implement\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * This package contains the interfaces and utilities shared across all the subpackages of this component.\n+ * <p>\n+ * The following collection implementations are provided in the package:\n+ * <ul>\n+ *   <li>ArrayStack - a non synchronized Stack that follows the same API as {@code java.util Stack}\n+ *   <li>ExtendedProperties - extends the Properties class to add extra functionality\n+ * </ul>\n+ *\n+ * @version $Id$\n+ */\n+package org.apache.commons.collections;", "timestamp": 1342364421, "metainfo": ""}