{"sha": "9e64a3cb81d66793e0147d1b6f4b39a6caa24f62", "log": "[COLLECTIONS-544] Documented runtime complexity of CollectionUtils.retainAll(Collection, Collection). Thanks to Oswaldo Olivo.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n      * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n      * case the cardinality is zero. This method is useful if you do not wish to modify\n      * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n+     * <p>\n+     * This implementation iterates over <code>collection</code>, checking each element in\n+     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n+     * to the returned list. As a consequence, it is advised to use a collection type for\n+     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n+     * {@link Collection#contains(Object)}.\n      *\n      * @param <C>  the type of object the {@link Collection} contains\n      * @param collection  the collection whose contents are the target of the #retailAll operation", "timestamp": 1421071567, "metainfo": ""}