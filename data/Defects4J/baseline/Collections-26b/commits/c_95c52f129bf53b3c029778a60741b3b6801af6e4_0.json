{"sha": "95c52f129bf53b3c029778a60741b3b6801af6e4", "log": "Add typed decorator collections to utility classes from Matthew Hawthorne   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/java/org/apache/commons/collections/BagUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.8 2003/02/20 23:14:03 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.9 2003/04/04 22:22:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * and {@link SortedBag} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.8 $ $Date: 2003/02/20 23:14:03 $\n+ * @version $Revision: 1.9 $ $Date: 2003/04/04 22:22:29 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n  * @author Andrew Freeman\n+ * @author Matthew Hawthorne\n  */\n public class BagUtils {\n \n     public BagUtils() {\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Implementation of a Bag that validates elements before they are added.\n      */\n         }\n     }\n \n-\n-    /**\n-     * Returns a predicated bag backed by the given bag.  Only objects\n-     * that pass the test in the given predicate can be added to the bag.\n-     * It is important not to use the original bag after invoking this \n-     * method, as it is a backdoor for adding unvalidated objects.\n-     *\n-     * @param bag  the bag to predicate, must not be null\n-     * @param predicate  the predicate for the bag, must not be null\n-     * @return a predicated bag backed by the given bag\n-     * @throws IllegalArgumentException  if the Bag or Predicate is null\n-     */\n-    public static Bag predicatedBag(Bag bag, Predicate predicate) {\n-        return new PredicatedBag(bag, predicate);\n-    }\n-\n-    /**\n-     * Returns an unmodifiable view of the given bag.  Any modification\n-     * attempts to the returned bag will raise an \n-     * {@link UnsupportedOperationException}.\n-     *\n-     * @param bag  the bag whose unmodifiable view is to be returned, must not be null\n-     * @return an unmodifiable view of that bag\n-     * @throws IllegalArgumentException  if the Bag is null\n-     */\n-    public static Bag unmodifiableBag(Bag bag) {\n-        return new UnmodifiableBag(bag);\n-    }\n-\n+    //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized (thread-safe) bag backed by the given bag.\n      * In order to guarantee serial access, it is critical that all \n     }\n \n     /**\n-     * Returns a predicated sorted bag backed by the given sorted bag.  \n-     * Only objects that pass the test in the given predicate can be \n-     * added to the bag.\n+     * Returns an unmodifiable view of the given bag.  Any modification\n+     * attempts to the returned bag will raise an \n+     * {@link UnsupportedOperationException}.\n+     *\n+     * @param bag  the bag whose unmodifiable view is to be returned, must not be null\n+     * @return an unmodifiable view of that bag\n+     * @throws IllegalArgumentException  if the Bag is null\n+     */\n+    public static Bag unmodifiableBag(Bag bag) {\n+        return new UnmodifiableBag(bag);\n+    }\n+    \n+    /**\n+     * Returns a predicated bag backed by the given bag.  Only objects\n+     * that pass the test in the given predicate can be added to the bag.\n      * It is important not to use the original bag after invoking this \n      * method, as it is a backdoor for adding unvalidated objects.\n      *\n-     * @param bag  the sorted bag to predicate, must not be null\n+     * @param bag  the bag to predicate, must not be null\n      * @param predicate  the predicate for the bag, must not be null\n      * @return a predicated bag backed by the given bag\n-     * @throws IllegalArgumentException  if the SortedBag or Predicate is null\n-     */\n-    public static SortedBag predicatedSortedBag(SortedBag bag, Predicate predicate) {\n-        return new PredicatedSortedBag(bag, predicate);\n-    }\n-\n-    /**\n-     * Returns an unmodifiable view of the given sorted bag.  Any modification\n-     * attempts to the returned bag will raise an \n-     * {@link UnsupportedOperationException}.\n-     *\n-     * @param bag  the bag whose unmodifiable view is to be returned, must not be null\n-     * @return an unmodifiable view of that bag\n-     * @throws IllegalArgumentException  if the SortedBag is null\n-     */\n-    public static SortedBag unmodifiableSortedBag(SortedBag bag) {\n-        return new UnmodifiableSortedBag(bag);\n-    }\n-\n+     * @throws IllegalArgumentException  if the Bag or Predicate is null\n+     */\n+    public static Bag predicatedBag(Bag bag, Predicate predicate) {\n+        return new PredicatedBag(bag, predicate);\n+    }\n+\n+    /**\n+     * Returns a typed bag backed by the given bag.\n+     * <p>\n+     * Only objects of the specified type can be added to the bag.\n+     * \n+     * @param bag  the bag to limit to a specific type, must not be null\n+     * @param type  the type of objects which may be added to the bag\n+     * @return a typed bag backed by the specified bag\n+     */\n+    public static Bag typedBag(Bag bag, Class type) {\n+        return predicatedBag(bag, new CollectionUtils.InstanceofPredicate(type));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized (thread-safe) sorted bag backed by the given \n      * sorted bag.\n     public static SortedBag synchronizedSortedBag(SortedBag bag) {\n         return new SynchronizedSortedBag(bag);\n     }\n-\n+    \n+    /**\n+     * Returns an unmodifiable view of the given sorted bag.  Any modification\n+     * attempts to the returned bag will raise an \n+     * {@link UnsupportedOperationException}.\n+     *\n+     * @param bag  the bag whose unmodifiable view is to be returned, must not be null\n+     * @return an unmodifiable view of that bag\n+     * @throws IllegalArgumentException  if the SortedBag is null\n+     */\n+    public static SortedBag unmodifiableSortedBag(SortedBag bag) {\n+        return new UnmodifiableSortedBag(bag);\n+    }\n+    \n+    /**\n+     * Returns a predicated sorted bag backed by the given sorted bag.  \n+     * Only objects that pass the test in the given predicate can be \n+     * added to the bag.\n+     * It is important not to use the original bag after invoking this \n+     * method, as it is a backdoor for adding unvalidated objects.\n+     *\n+     * @param bag  the sorted bag to predicate, must not be null\n+     * @param predicate  the predicate for the bag, must not be null\n+     * @return a predicated bag backed by the given bag\n+     * @throws IllegalArgumentException  if the SortedBag or Predicate is null\n+     */\n+    public static SortedBag predicatedSortedBag(SortedBag bag, Predicate predicate) {\n+        return new PredicatedSortedBag(bag, predicate);\n+    }\n+    \n+    /**\n+     * Returns a typed sorted bag backed by the given bag.\n+     * <p>\n+     * Only objects of the specified type can be added to the bag.\n+     * \n+     * @param bag  the bag to limit to a specific type, must not be null\n+     * @param type  the type of objects which may be added to the bag\n+     * @return a typed bag backed by the specified bag\n+     */\n+    public static SortedBag typedSortedBag(SortedBag bag, Class type) {\n+        return predicatedSortedBag(bag, new CollectionUtils.InstanceofPredicate(type));\n+    }\n+        \n }\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.28 2003/01/25 11:40:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.29 2003/04/04 22:22:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n  * A set of {@link Collection} related utility methods.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.28 $ $Date: 2003/01/25 11:40:26 $\n+ * @version $Revision: 1.29 $ $Date: 2003/04/04 22:22:29 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Steve Downey\n  * @author <a href=\"herve.quiroz@esil.univ-mrs.fr\">Herve Quiroz</a>\n  * @author Peter KoBek\n+ * @author Matthew Hawthorne\n  */\n public class CollectionUtils {\n \n         return -1;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Base class for collection decorators.  I decided to do it this way\n      * because it seemed to result in the most reuse.  \n \n     }\n \n-\n+    /**\n+     * Implementation of a collection that checks entries.\n+     */\n     static class PredicatedCollection \n             extends CollectionWrapper {\n \n \n     }\n \n-\n+    /**\n+     * Implementation of a collection that is unmodifiable.\n+     */\n     static class UnmodifiableCollection \n             extends CollectionWrapper {\n \n \n     }\n \n-\n+    /**\n+     * Implementation of a collection that is synchronized.\n+     */\n     static class SynchronizedCollection {\n \n         protected final Collection collection;\n \n     }\n \n-\n+    /**\n+     * <code>Predicate</code> implementation that checks the type of an object.\n+     * This class may eventually be replaced by \n+     * <code>org.apache.commons.lang.functor.PredicateUtils.instanceofPredicate()</code>.\n+     */\n+    static class InstanceofPredicate implements Predicate, Serializable {\n+        private final Class type;\n+\n+        /**\n+         * Constructor\n+         */\n+        public InstanceofPredicate(Class type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Type must not be null\");\n+            }\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Return true if the object is an instanceof the type of the predicate.\n+         * @param object an <code>Object</code>\n+         * @return <code>true</code> if the object is an instanceof the type of the predicate\n+         */\n+        public boolean evaluate(Object object) {\n+            return type.isInstance(object);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized collection backed by the given collection.\n      * <p>\n         return new PredicatedCollection(collection, predicate);\n     }\n \n+    /**\n+     * Returns a typed collection backed by the given collection.\n+     * <p>\n+     * Only objects of the specified type can be added to the collection.\n+     * \n+     * @param collection  the collection to limit to a specific type, must not be null\n+     * @param type  the type of objects which may be added to the collection\n+     * @return a typed collection backed by the specified collection\n+     */\n+    public static Collection typedCollection(Collection collection, Class type) {\n+        return predicatedCollection(collection, new InstanceofPredicate(type));\n+    }\n+    \n }\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.14 2003/04/04 20:40:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.15 2003/04/04 22:22:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.14 $ $Date: 2003/04/04 20:40:28 $\n+ * @version $Revision: 1.15 $ $Date: 2003/04/04 22:22:29 $\n  * \n  * @author  <a href=\"mailto:fede@apache.org\">Federico Barbieri</a>\n  * @author  <a href=\"mailto:donaldp@apache.org\">Peter Donald</a>\n  * @author Paul Jack\n  * @author Stephen Colebourne\n  * @author Neil O'Toole\n+ * @author Matthew Hawthorne\n  */\n public class ListUtils {\n \n     }\n \n     /**\n+     * Returns a typed list backed by the given list.\n+     * <p>\n+     * Only objects of the specified type can be added to the list.\n+     * \n+     * @param list  the list to limit to a specific type, must not be null\n+     * @param type  the type of objects which may be added to the list\n+     * @return a typed list backed by the specified list\n+     */\n+    public static List typedList(List list, Class type) {\n+        return predicatedList(list, new CollectionUtils.InstanceofPredicate(type));\n+    }\n+    \n+    /**\n      * Returns a \"lazy\" list whose elements will be created on demand.<P>\n      * <p>\n      * When the index passed to the returned list's {@link List#get(int) get}\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.16 2003/02/19 20:14:25 scolebourne Exp $\n- * $Revision: 1.16 $\n- * $Date: 2003/02/19 20:14:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.17 2003/04/04 22:22:29 scolebourne Exp $\n+ * $Revision: 1.17 $\n+ * $Date: 2003/04/04 22:22:29 $\n  *\n  * ====================================================================\n  *\n package org.apache.commons.collections;\n \n import java.io.PrintStream;\n+import java.io.Serializable;\n import java.text.NumberFormat;\n import java.text.ParseException;\n import java.util.Collections;\n  *\n  * It also provides the following decorators:\n  *\n- *  <UL>\n- *  <LI>{@link #fixedSizeMap(Map)}\n- *  <LI>{@link #fixedSizeSortedMap(SortedMap)}\n- *  <LI>{@link #lazyMap(Map,Factory)}\n- *  <LI>{@link #lazySortedMap(SortedMap,Factory)}\n- *  <LI>{@link #predicatedMap(Map,Predicate,Predicate)}\n- *  <LI>{@link #predicatedSortedMap(SortedMap,Predicate,Predicate)}\n- *  </UL>\n+ *  <ul>\n+ *  <li>{@link #fixedSizeMap(Map)}\n+ *  <li>{@link #fixedSizeSortedMap(SortedMap)}\n+ *  <li>{@link #lazyMap(Map,Factory)}\n+ *  <li>{@link #typedMap(Map, Class, Class)}\n+ *  <li>{@link #lazySortedMap(SortedMap,Factory)}\n+ *  <li>{@link #predicatedMap(Map,Predicate,Predicate)}\n+ *  <li>{@link #predicatedSortedMap(SortedMap,Predicate,Predicate)}\n+ *  <li>{@link #typedSortedMap(Map, Class, Class)}\n+ *  </ul>\n  *\n  * @since 1.0\n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author Paul Jack\n  * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n  */\n public class MapUtils {\n     \n         }\n     }\n \n-\n+    //-----------------------------------------------------------------------\n     static class PredicatedMap \n             extends ProxyMap {\n \n \n     }\n \n-\n+    //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized map backed by the given map.\n      * <p>\n     }\n \n     /**\n+     * Returns a typed map backed by the given map.\n+     * <p>\n+     * Only keys and values of the specified types can be added to the map.\n+     * \n+     * @param map  the map to limit to a specific type, must not be null\n+     * @param keyType  the type of keys which may be added to the map\n+     * @param valueType  the type of values which may be added to the map\n+     * @return a typed map backed by the specified map\n+     */\n+    public static Map typedMap(Map map, Class keyType, Class valueType) {\n+        return predicatedMap(\n+            map, \n+            new CollectionUtils.InstanceofPredicate(keyType),\n+            new CollectionUtils.InstanceofPredicate(valueType));\n+    }\n+    \n+    /**\n      * Returns a fixed-sized map backed by the given map.\n      * Elements may not be added or removed from the returned map, but \n      * existing elements can be changed (for instance, via the \n         return new LazyMap(map, factory);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized sorted map backed by the given sorted map.\n      * <p>\n     }\n \n     /**\n+     * Returns a typed sorted map backed by the given map.\n+     * <p>\n+     * Only keys and values of the specified types can be added to the map.\n+     * \n+     * @param map  the map to limit to a specific type, must not be null\n+     * @param keyType  the type of keys which may be added to the map\n+     * @param valueType  the type of values which may be added to the map\n+     * @return a typed map backed by the specified map\n+     */\n+    public static SortedMap typedSortedMap(SortedMap map, Class keyType, Class valueType) {\n+        return predicatedSortedMap(\n+            map, \n+            new CollectionUtils.InstanceofPredicate(keyType),\n+            new CollectionUtils.InstanceofPredicate(valueType));\n+    }\n+    \n+    /**\n      * Returns a fixed-sized sorted map backed by the given sorted map.\n      * Elements may not be added or removed from the returned map, but \n      * existing elements can be changed (for instance, via the \n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.10 2003/04/04 20:40:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.11 2003/04/04 22:22:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n-import java.util.Set;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.Iterator;\n  * Provides static utility methods and decorators for {@link Set} \n  * and {@link SortedSet} instances.\n  *\n- * @version $Revision: 1.10 $ $Date: 2003/04/04 20:40:28 $\n+ * @version $Revision: 1.11 $ $Date: 2003/04/04 22:22:29 $\n  * @since Commons Collection 2.1\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n  * @author Neil O'Toole\n+ * @author Matthew Hawthorne\n  */\n public class SetUtils {\n \n     }\n \n     /**\n+     * Returns a typed set backed by the given set.\n+     * <p>\n+     * Only objects of the specified type can be added to the set.\n+     * \n+     * @param set  the set to limit to a specific type, must not be null\n+     * @param type  the type of objects which may be added to the set\n+     * @return a typed set backed by the specified set\n+     */\n+    public static Set typedSet(Set set, Class type) {\n+        return predicatedSet(set, new CollectionUtils.InstanceofPredicate(type));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n      * Returns a synchronized sorted set backed by the given sorted set.\n      * <p>\n      * You must manually synchronize on the returned buffer's iterator to \n         return new PredicatedSortedSet(set, predicate);\n     }\n \n+    /**\n+     * Returns a typed sorted set backed by the given set.\n+     * <p>\n+     * Only objects of the specified type can be added to the set.\n+     * \n+     * @param set  the set to limit to a specific type, must not be null\n+     * @param type  the type of objects which may be added to the set\n+     * @return a typed set backed by the specified set\n+     */\n+    public static SortedSet typedSortedSet(SortedSet set, Class type) {\n+        return predicatedSortedSet(set, new CollectionUtils.InstanceofPredicate(type));\n+    }\n+    \n }\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Id: TestCollectionUtils.java,v 1.14 2003/02/19 20:33:11 scolebourne Exp $\n- * $Revision: 1.14 $\n- * $Date: 2003/02/19 20:33:11 $\n+ * $Id: TestCollectionUtils.java,v 1.15 2003/04/04 22:22:28 scolebourne Exp $\n+ * $Revision: 1.15 $\n+ * $Date: 2003/04/04 22:22:28 $\n  *\n  * ====================================================================\n  *\n import junit.framework.TestSuite;\n \n /**\n+ * Tests for CollectionUtils.\n+ * \n  * @author Rodney Waldhoff\n- * @version $Revision: 1.14 $ $Date: 2003/02/19 20:33:11 $\n+ * @author Matthew Hawthorne\n+ * @author Stephen Colebourne\n+ * \n+ * @version $Revision: 1.15 $ $Date: 2003/04/04 22:22:28 $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n         };\n     }\n \n+    public BulkTest bulkTestTypedCollection() {\n+        return new TestTypedCollection(\"\") {\n+            public Collection typedCollection() {\n+                return CollectionUtils.typedCollection(\n+                    new ArrayList(),\n+                    super.getType());\n+            }\n+ \n+            public BulkTest bulkTestAll() {\n+                return new TestCollection(\"\") {\n+                    public Collection makeCollection() {\n+                        return typedCollection();\n+                    }\n+ \n+                    public Collection makeConfirmedCollection() {\n+                        return new ArrayList();\n+                    }\n+ \n+                    public Collection makeConfirmedFullCollection() {\n+                        ArrayList list = new ArrayList();\n+                        list.addAll(java.util.Arrays.asList(getFullElements()));\n+                        return list;\n+                    }\n+ \n+                    public Object[] getFullElements() {\n+                        return getFullNonNullStringElements();\n+                    }\n+ \n+                    public Object[] getOtherElements() {\n+                        return getOtherNonNullStringElements();\n+                    }\n+ \n+                };\n+            }\n+        };\n+    }\n+    \n     public void testIsFull() {\n         Set set = new HashSet();\n         set.add(\"1\");\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.6 2003/04/04 20:42:02 scolebourne Exp $\n- * $Revision: 1.6 $\n- * $Date: 2003/04/04 20:42:02 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.7 2003/04/04 22:22:28 scolebourne Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2003/04/04 22:22:28 $\n  *\n  * ====================================================================\n  *\n  * \n  * @author Stephen Colebourne\n  * @author Neil O'Toole\n+ * @author Matthew Hawthorne\n  */\n public class TestListUtils extends BulkTest {\n \n                 return new TestList(\"\") {\n                     public List makeEmptyList() {\n                         return (List)predicatedCollection();\n+                    }\n+\n+                    public Object[] getFullElements() {\n+                        return getFullNonNullStringElements();\n+                    }\n+\n+                    public Object[] getOtherElements() {\n+                        return getOtherNonNullStringElements();\n+                    }\n+\n+                };\n+            }\n+        };\n+    }\n+\n+    public BulkTest bulkTestTypedList() {\n+        return new TestTypedCollection(\"\") {\n+\n+            public Collection typedCollection() {\n+                Class type = getType();\n+                return ListUtils.typedList(new ArrayList(), type);\n+            }\n+\n+            public BulkTest bulkTestAll() {\n+                return new TestList(\"\") {\n+                    public List makeEmptyList() {\n+                        return (List)typedCollection();\n                     }\n \n                     public Object[] getFullElements() {\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.2 2002/10/12 22:36:22 scolebourne Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/10/12 22:36:22 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.3 2003/04/04 22:22:28 scolebourne Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2003/04/04 22:22:28 $\n  *\n  * ====================================================================\n  *\n         }\n     }\n \n+    // Since a typed map is a predicated map, I copied the tests for predicated map\n+    public void testTypedMapIllegalPut() {\n+        final Map map = MapUtils.typedMap(new HashMap(), String.class, String.class);\n+        \n+        try {\n+            map.put(\"Hi\", new Integer(3));\n+            fail(\"Illegal value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.put(new Integer(3), \"Hi\");\n+            fail(\"Illegal key should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        assertTrue(!map.containsKey(new Integer(3)));\n+        assertTrue(!map.containsValue(new Integer(3)));\n+\n+        Map map2 = new HashMap();\n+        map2.put(\"A\", \"a\");\n+        map2.put(\"B\", \"b\");\n+        map2.put(\"C\", \"c\");\n+        map2.put(\"c\", new Integer(3));\n+\n+        try {\n+            map.putAll(map2);\n+            fail(\"Illegal value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        map.put(\"E\", \"e\");\n+        Iterator iterator = map.entrySet().iterator();\n+        try {\n+            Map.Entry entry = (Map.Entry)iterator.next();\n+            entry.setValue(new Integer(3));\n+            fail(\"Illegal value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+    \n+    }\n \n     public BulkTest bulkTestPredicatedMap() {\n         return new TestMap(\"\") {\n             }\n         };\n     }\n+    \n+    public BulkTest bulkTestTypedMap() {\n+        return new TestMap(\"\") {\n+            public boolean useNullKey() {\n+                return false;\n+            }\n+\n+            public boolean useNullValue() {\n+                return false;\n+            }\n+\n+            public Map makeEmptyMap() {\n+                return MapUtils.typedMap(new HashMap(), String.class, String.class);\n+            }\n+        };\n+    }\n \n \n }\n--- a/src/test/org/apache/commons/collections/TestSetUtils.java\n+++ b/src/test/org/apache/commons/collections/TestSetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.4 2003/04/04 20:42:03 scolebourne Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/04/04 20:42:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.5 2003/04/04 22:22:28 scolebourne Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/04/04 22:22:28 $\n  *\n  * ====================================================================\n  *\n  * \n  * @author Stephen Colebourne\n  * @author Neil O'Toole\n+ * @author Matthew Hawthorne\n  */\n public class TestSetUtils extends BulkTest {\n \n         };\n     }\n \n+    public BulkTest bulkTestTypedSet() {\n+        return new TestTypedCollection(\"\") {\n+\n+            public Collection typedCollection() {\n+                Class type = getType();\n+                return SetUtils.typedSet(new HashSet(), type);\n+            }\n+\n+            public BulkTest bulkTestAll() {\n+                return new TestSet(\"\") {\n+                    public Set makeEmptySet() {\n+                        return (Set)typedCollection();\n+                    }\n+\n+                    public Object[] getFullElements() {\n+                        return getFullNonNullStringElements();\n+                    }\n+\n+                    public Object[] getOtherElements() {\n+                        return getOtherNonNullStringElements();\n+                    }\n+                };\n+            }\n+        };\n+    }\n+     \n     public void testEquals() {\n         Collection data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n         \n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestTypedCollection.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Turbine\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class TestTypedCollection extends BulkTest {\n+\n+    public TestTypedCollection(String name) {\n+        super(name);\n+    }\n+\n+\n+    protected abstract Collection typedCollection();\n+\n+    protected Class getType() {\n+        return String.class;\n+    }\n+\n+\n+    public void testIllegalAdd() {\n+        Collection c = typedCollection();\n+        Integer i = new Integer(3);\n+        try {\n+            c.add(i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(i));   \n+    }\n+\n+\n+    public void testIllegalAddAll() {\n+        Collection c = typedCollection();\n+        List elements = new ArrayList();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            c.addAll(elements);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(\"one\"));   \n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(\"two\"));   \n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(new Integer(3)));   \n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(\"four\"));   \n+    }\n+\n+}", "timestamp": 1049494949, "metainfo": ""}