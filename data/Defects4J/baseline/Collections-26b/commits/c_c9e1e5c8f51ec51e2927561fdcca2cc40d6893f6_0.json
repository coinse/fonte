{"sha": "c9e1e5c8f51ec51e2927561fdcca2cc40d6893f6", "log": "[COLLECTIONS-237] Added MultiValueMap.iterator() and clarified javadoc for entrySet().  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java\n import org.apache.commons.collections4.Factory;\n import org.apache.commons.collections4.FunctorException;\n import org.apache.commons.collections4.MultiMap;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.collections4.iterators.EmptyIterator;\n import org.apache.commons.collections4.iterators.IteratorChain;\n+import org.apache.commons.collections4.iterators.LazyIteratorChain;\n+import org.apache.commons.collections4.iterators.TransformIterator;\n \n /**\n  * A MultiValueMap decorates another map, allowing it to have\n      * Other values attached to that key are unaffected.\n      * <p>\n      * If the last value for a key is removed, <code>null</code> will be returned\n-     * from a subsequant <code>get(key)</code>.\n+     * from a subsequent <code>get(key)</code>.\n      *\n      * @param key  the key to remove from\n      * @param value the value to remove\n     }\n \n     /**\n+     * {@inheritDoc}\n+     * <p>\n+     * NOTE: the returned Entry objects will contain as value a {@link Collection}\n+     * of all values that are mapped to the given key. To get a \"flattened\" version\n+     * of all mappings contained in this map, use {@link #iterator()}.\n+     * \n+     * @see #iterator()\n+     */\n+    @Override\n+    public Set<Entry<K, Object>> entrySet() {\n+        return super.entrySet();\n+    }\n+\n+    /**\n      * Gets a collection containing all the values in the map.\n      * <p>\n      * This returns a collection containing the combination of values from all keys.\n     }\n \n     /**\n+     * Gets an iterator for all mappings stored in this {@link MultiValueMap}.\n+     * <p>\n+     * The iterator will return multiple Entry objects with the same key\n+     * if there are multiple values mapped to this key.\n+     * <p>\n+     * NOTE: calling {@link Map.Entry#setValue(Object)} on any of the returned\n+     * elements will result in a {@link UnsupportedOperationException}.\n+     *\n+     * @return the iterator of all mappings in this map\n+     * @since 4.0\n+     */\n+    public Iterator<Entry<K, V>> iterator() {\n+        final Collection<K> allKeys = new ArrayList<K>(keySet());\n+        final Iterator<K> keyIterator = allKeys.iterator();\n+        \n+        return new LazyIteratorChain<Entry<K, V>>() {\n+            protected Iterator<? extends Entry<K, V>> nextIterator(int count) {\n+                if ( ! keyIterator.hasNext() ) {\n+                    return null;\n+                }\n+                final K key = keyIterator.next();\n+                final Transformer<V, Entry<K, V>> transformer = new Transformer<V, Entry<K, V>>() {\n+                    public Entry<K, V> transform(final V input) {\n+                        return new Entry<K, V>() {\n+                            public K getKey() {\n+                                return key;\n+                            }\n+                            public V getValue() {\n+                                return input;\n+                            }\n+                            public V setValue(V value) {\n+                                throw new UnsupportedOperationException();\n+                            }\n+                        };\n+                    }\n+                };\n+                return new TransformIterator<V, Entry<K, V>>(new ValuesIterator(key), transformer);\n+            }\n+        };\n+    }\n+\n+    /**\n      * Gets the total size of the map by counting all the values.\n      *\n      * @return the total size of the map counting all values\n--- a/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java\n         assertEquals(4, map.totalSize());\n     }\n \n+    public void testIterator() {\n+        final MultiValueMap<K, V> map = createTestMap();\n+        @SuppressWarnings(\"unchecked\")\n+        Collection<V> values = new ArrayList<V>((Collection<V>) map.values());\n+        Iterator<Map.Entry<K, V>> iterator = map.iterator();\n+        while (iterator.hasNext()) {\n+            Map.Entry<K, V> entry = iterator.next();\n+            assertTrue(map.containsValue(entry.getKey(), entry.getValue()));\n+            assertTrue(values.contains(entry.getValue()));\n+            assertTrue(values.remove(entry.getValue()));\n+        }\n+        assertTrue(values.isEmpty());\n+    }\n+\n+    public void testRemoveAllViaEntryIterator() {\n+        final MultiValueMap<K, V> map = createTestMap();\n+        for (final Iterator<?> i = map.iterator(); i.hasNext();) {\n+            i.next();\n+            i.remove();\n+        }\n+        assertNull(map.get(\"one\"));\n+        assertEquals(0, map.totalSize());\n+    }\n+\n     public void testTotalSizeA() {\n         assertEquals(6, createTestMap().totalSize());\n     }", "timestamp": 1367060906, "metainfo": ""}