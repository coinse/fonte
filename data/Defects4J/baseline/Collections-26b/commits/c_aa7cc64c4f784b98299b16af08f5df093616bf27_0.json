{"sha": "aa7cc64c4f784b98299b16af08f5df093616bf27", "log": "add tests, make 'em pass ;)   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/AbstractIntCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractIntCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntCollection.java,v 1.4 2003/01/13 23:07:08 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntCollection.java,v 1.5 2003/03/03 23:23:39 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * these methods to provide a more efficient implementation. \n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.4 $ $Date: 2003/01/13 23:07:08 $\n+ * @version $Revision: 1.5 $ $Date: 2003/03/03 23:23:39 $\n  * \n  * @author Rodney Waldhoff \n  */\n     public abstract int size();\n           \n     protected AbstractIntCollection() { }\n-\n-    /** \n-     * Constructs a collection containing the elements of \n-     * the given collection, added in the order they are \n-     * returned by that collection's iterator.\n-     * \n-     * @see #addAll\n-     * @param that the non-<code>null</code> collection of <code>int</code>s \n-     *        to add\n-     * @throws NullPointerException if <i>that</i> is <code>null</code>\n-     * @throws UnsupportedOperationException if {@link #addAll addAll} does\n-     */\n-    protected AbstractIntCollection(IntCollection that) { \n-        addAll(that);\n-    }    \n               \n     /** Unsupported in this base implementation. */\n     public boolean add(int element) {\n--- a/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.13 2003/03/01 00:47:28 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.14 2003/03/03 23:23:39 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * to provide a more efficient implementation.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.13 $ $Date: 2003/03/01 00:47:28 $\n+ * @version $Revision: 1.14 $ $Date: 2003/03/03 23:23:39 $\n  * \n  * @author Rodney Waldhoff \n  */\n \n     /** Constructs an empty list. */\n     protected AbstractRandomAccessIntList() { \n-    }    \n-\n-    /** \n-     * Constructs a list containing the elements of the given collection, \n-     * in the order they are returned by that collection's iterator.\n-     * \n-     * @see #addAll\n-     * @param that the non-<code>null</code> collection of <code>int</code>s \n-     *        to add\n-     * @throws NullPointerException if <i>that</i> is <code>null</code>\n-     * @throws UnsupportedOperationException if {@link #addAll addAll} does\n-     */\n-    protected AbstractRandomAccessIntList(IntCollection that) { \n-        super(that);\n     }    \n \n     // fully abstract methods\n     }\n     \n     protected static class RandomAccessIntListIterator extends ComodChecker implements IntListIterator {\n-        RandomAccessIntListIterator(AbstractRandomAccessIntList list) {\n-            this(list,0);\n-        }\n-            \n         RandomAccessIntListIterator(AbstractRandomAccessIntList list, int index) {\n             super(list);\n             if(index < 0 || index > getList().size()) {\n-                throw new IllegalArgumentException(\"Index \" + index + \" not in [0,\" + getList().size() + \")\");\n+                throw new IndexOutOfBoundsException(\"Index \" + index + \" not in [0,\" + getList().size() + \")\");\n             } else {\n                 _nextIndex = index;\n                 resyncModCount();\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestAbstractIntCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractIntCollection.java,v 1.1 2003/03/03 23:23:40 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.Collections;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.primitives.adapters.IteratorIntIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/03/03 23:23:40 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestAbstractIntCollection extends TestCase {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestAbstractIntCollection(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestAbstractIntCollection.class);\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n+    public void testAddIsUnsupportedByDefault() {\n+        IntCollection col = new IntCollectionImpl();\n+        try {\n+            col.add(1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }        \n+    }\n+    // inner classes\n+    // ------------------------------------------------------------------------\n+\n+\n+    static class IntCollectionImpl extends AbstractIntCollection {\n+        public IntCollectionImpl() {\n+        }\n+        \n+        public IntIterator iterator() {\n+            return new IteratorIntIterator(Collections.EMPTY_LIST.iterator());\n+        }\n+\n+        public int size() {\n+            return 0;\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestAbstractRandomAccessIntList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractRandomAccessIntList.java,v 1.1 2003/03/03 23:23:40 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/03/03 23:23:40 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestAbstractRandomAccessIntList extends TestCase {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestAbstractRandomAccessIntList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestAbstractRandomAccessIntList.class);\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n+    public void testAddIsUnsupportedByDefault() {\n+        AbstractRandomAccessIntList list = new AbstractRandomAccessIntListImpl();\n+        try {\n+            list.add(1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }        \n+        try {\n+            list.set(0,1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+\n+    public void testAddAllIsUnsupportedByDefault() {\n+        AbstractRandomAccessIntList list = new AbstractRandomAccessIntListImpl();\n+        IntList list2 = new ArrayIntList();\n+        list2.add(3);\n+        try {\n+            list.addAll(list2);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    public void testSetIsUnsupportedByDefault() {\n+        AbstractRandomAccessIntList list = new AbstractRandomAccessIntListImpl();\n+        try {\n+            list.set(0,1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    public void testRemoveElementIsUnsupportedByDefault() {\n+        AbstractRandomAccessIntList list = new AbstractRandomAccessIntListImpl();\n+        try {\n+            list.removeElementAt(0);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    // inner classes\n+    // ------------------------------------------------------------------------\n+\n+\n+    static class AbstractRandomAccessIntListImpl extends AbstractRandomAccessIntList {\n+        public AbstractRandomAccessIntListImpl() {\n+        }\n+\n+        /**\n+         * @see org.apache.commons.collections.primitives.IntList#get(int)\n+         */\n+        public int get(int index) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+\n+        /**\n+         * @see org.apache.commons.collections.primitives.IntCollection#size()\n+         */\n+        public int size() {\n+            return 0;\n+        }\n+\n+    }\n+}\n--- a/src/test/org/apache/commons/collections/primitives/TestAll.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.8 2003/02/26 19:17:23 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.9 2003/03/03 23:23:40 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.8 $ $Date: 2003/02/26 19:17:23 $\n+ * @version $Revision: 1.9 $ $Date: 2003/03/03 23:23:40 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n \n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n+\n+        suite.addTest(TestAbstractIntCollection.suite());\n+        suite.addTest(TestAbstractRandomAccessIntList.suite());\n         \n         suite.addTest(TestArrayIntList.suite());\n         suite.addTest(TestArrayUnsignedShortList.suite());\n--- a/src/test/org/apache/commons/collections/primitives/TestIntList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.7 2003/03/01 00:47:28 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.8 2003/03/03 23:23:40 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n package org.apache.commons.collections.primitives;\n \n import java.io.Serializable;\n+import java.util.AbstractCollection;\n import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.commons.collections.primitives.adapters.ListIntList;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2003/03/01 00:47:28 $\n+ * @version $Revision: 1.8 $ $Date: 2003/03/03 23:23:40 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestIntList extends TestList {\n         assertEquals(50,list.size());        \n     }\n     \n-\n     public void testAddGet() {\n         IntList list = makeEmptyIntList();\n         for (int i = 0; i < 1000; i++) {\n         }\n     }\n \n+    public void testListIteratorOutOfBounds() throws Exception {\n+        try {\n+            makeEmptyIntList().listIterator(2);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            makeFullIntList().listIterator(-1);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            makeFullIntList().listIterator(makeFullIntList().size()+2);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testListIteratorSetWithoutNext() throws Exception {\n+        IntListIterator iter = makeFullIntList().listIterator();\n+        try {\n+            iter.set(3);\n+            fail(\"Expected IllegalStateException\");\n+        } catch(IllegalStateException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testListIteratorSetAfterRemove() throws Exception {\n+        IntListIterator iter = makeFullIntList().listIterator();\n+        iter.next();\n+        iter.remove();\n+        try {            \n+            iter.set(3);\n+            fail(\"Expected IllegalStateException\");\n+        } catch(IllegalStateException e) {\n+            // expected\n+        }\n+    }\n+\n }\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestIntListIteratorListIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntListIteratorListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListIteratorListIterator.java,v 1.1 2003/03/01 00:47:29 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListIteratorListIterator.java,v 1.2 2003/03/03 23:23:40 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n /**\n  * @todo should extend TestListIterator when there is one\n- * @version $Revision: 1.1 $ $Date: 2003/03/01 00:47:29 $\n+ * @version $Revision: 1.2 $ $Date: 2003/03/03 23:23:40 $\n  * @author Rodney Waldhoff\n  */\n public class TestIntListIteratorListIterator extends TestIterator {\n     }\n \n     public static Test suite() {\n-        return new TestSuite(TestIntIteratorIterator.class);\n+        return new TestSuite(TestIntListIteratorListIterator.class);\n     }\n \n     // collections testing framework", "timestamp": 1046733820, "metainfo": ""}