{"sha": "3f3e957206650b926a00ec05772a1c6510f89f94", "log": "Add test for remove on an iterator   ", "commit": "\n--- a/src/test/org/apache/commons/collections/iterators/TestIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/Attic/TestIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/15 23:13:52 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/Attic/TestIterator.java,v 1.2 2002/12/13 12:03:46 scolebourne Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/12/13 12:03:46 $\n  *\n  * ====================================================================\n  *\n  * <http://www.apache.org/>.\n  *\n  */\n-     \n package org.apache.commons.collections.iterators;\n \n import java.util.Iterator;\n import java.util.NoSuchElementException;\n import org.apache.commons.collections.TestObject;\n-\n /**\n  * Base class for tetsing Iterator interface\n  * \n  * @author Morgan Delagrange\n+ * @author Stephen Colebourne\n  */\n public abstract class TestIterator extends TestObject {\n \n     }\n \n     /**\n+     * Whether or not we are testing an iterator that supports\n+     * remove().  Default is true.\n+     * \n+     * @return true if Iterators can be empty\n+     */\n+    public boolean supportsRemove() {\n+        return true;\n+    }\n+\n+    /**\n      * Should throw a NoSuchElementException.\n      */\n     public void testEmptyIterator() {\n         }\n \n         Iterator iter = makeEmptyIterator();\n-        assertTrue(\"hasNext() should return false for empty iterators\",iter.hasNext() == false);\n+        assertTrue(\"hasNext() should return false for empty iterators\", iter.hasNext() == false);\n         try {\n-\t    iter.next();\n+            iter.next();\n             fail(\"NoSuchElementException must be thrown when Iterator is exhausted\");\n-\t} catch (NoSuchElementException e) {\n-\t}\n+        } catch (NoSuchElementException e) {\n+        }\n     }\n \n     /**\n \n         Iterator iter = makeFullIterator();\n \n-        assertTrue(\"hasNext() should return true for at least one element\",iter.hasNext());\n+        assertTrue(\"hasNext() should return true for at least one element\", iter.hasNext());\n \n         try {\n-\t    iter.next();\n-\t} catch (NoSuchElementException e) {\n+            iter.next();\n+        } catch (NoSuchElementException e) {\n             fail(\"Full iterators must have at least one element\");\n-\t}\n+        }\n \n         while (iter.hasNext()) {\n             iter.next();\n         }\n \n         try {\n-\t    iter.next();\n+            iter.next();\n             fail(\"NoSuchElementException must be thrown when Iterator is exhausted\");\n-\t} catch (NoSuchElementException e) {\n-\t}\n+        } catch (NoSuchElementException e) {\n+        }\n     }\n \n+    /**\n+     * Test remove\n+     */\n+    public void testRemove() {\n+        Iterator it = makeFullIterator();\n+        \n+        if (supportsRemove() == false) {\n+            try {\n+                it.remove();\n+            } catch (UnsupportedOperationException ex) {}\n+            return;\n+        }\n+        \n+        try {\n+            it.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        \n+        it.next();\n+        it.remove();\n+        \n+        try {\n+            it.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+    \n }", "timestamp": 1039781026, "metainfo": ""}