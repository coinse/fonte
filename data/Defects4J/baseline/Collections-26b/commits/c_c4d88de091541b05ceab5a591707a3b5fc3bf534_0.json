{"sha": "c4d88de091541b05ceab5a591707a3b5fc3bf534", "log": "Javadoc improvements   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.39 2003/09/09 21:25:18 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.40 2003/09/09 21:36:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * A set of {@link Collection} related utility methods.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.39 $ $Date: 2003/09/09 21:25:18 $\n+ * @version $Revision: 1.40 $ $Date: 2003/09/09 21:36:53 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n         }\n     }\n \n-\n-    /** \n-     * Reverses the order of the given array \n+    /** \n+     * Reverses the order of the given array.\n      * \n      * @param array  the array to reverse\n      */\n      * This method uses the {@link BoundedCollection} class to determine the\n      * full status. If the collection does not implement this interface then\n      * false is returned.\n-     *\n-     * @return  true if the Collection is full\n+     * <p>\n+     * The collection does not have to implement this interface directly.\n+     * If the collection has been decorated using the decorators subpackage\n+     * then these will be removed to access the BoundedCollection.\n+     *\n+     * @param coll  the collection to check\n+     * @return true if the BoundedCollection is full\n      * @throws NullPointerException if the collection is null\n      */\n     public static boolean isFull(Collection coll) {\n         if (coll == null) {\n             throw new NullPointerException(\"The collection must not be null\");\n+        }\n+        if (coll instanceof BoundedCollection) {\n+            return ((BoundedCollection) coll).isFull();\n         }\n         try {\n             BoundedCollection bcoll = UnmodifiableBoundedCollection.decorateUsing(coll);\n      * This method uses the {@link BoundedCollection} class to determine the\n      * maximum size. If the collection does not implement this interface then\n      * -1 is returned.\n-     *\n-     * @return the maximum size of the Collection, -1 if no maximum size\n+     * <p>\n+     * The collection does not have to implement this interface directly.\n+     * If the collection has been decorated using the decorators subpackage\n+     * then these will be removed to access the BoundedCollection.\n+     *\n+     * @param coll  the collection to check\n+     * @return the maximum size of the BoundedCollection, -1 if no maximum size\n      * @throws NullPointerException if the collection is null\n      */\n     public static int maxSize(Collection coll) {\n         if (coll == null) {\n             throw new NullPointerException(\"The collection must not be null\");\n+        }\n+        if (coll instanceof BoundedCollection) {\n+            return ((BoundedCollection) coll).maxSize();\n         }\n         try {\n             BoundedCollection bcoll = UnmodifiableBoundedCollection.decorateUsing(coll);", "timestamp": 1063143413, "metainfo": ""}