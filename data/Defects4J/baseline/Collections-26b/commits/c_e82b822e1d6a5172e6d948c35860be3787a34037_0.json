{"sha": "e82b822e1d6a5172e6d948c35860be3787a34037", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471575 | scolebourne | 2006-11-05 15:58:08 -0800 (Sun, 05 Nov 2006) | 1 line          Generify and remove AbstractSerializableCollectionDecorator     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n+ * @param <E> the type of the elements in the collection\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n  */\n-public class SynchronizedCollection implements Collection, Serializable {\n+public class SynchronizedCollection<E> implements Collection<E>, Serializable {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 2412805092710877986L;\n \n     /** The collection to decorate */\n-    protected final Collection collection;\n+    protected final Collection<E> collection;\n     /** The object to lock on, needed for List/SortedSet views */\n     protected final Object lock;\n \n     /**\n      * Factory method to create a synchronized collection.\n      * \n+     * @param <T> the type of the elements in the collection\n      * @param coll  the collection to decorate, must not be null\n      * @return a new synchronized collection\n      * @throws IllegalArgumentException if collection is null\n      */\n-    public static Collection decorate(Collection coll) {\n-        return new SynchronizedCollection(coll);\n-    }\n-    \n+    public static <T> Collection<T> decorate(Collection<T> coll) {\n+        return new SynchronizedCollection<T>(coll);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n      * @param collection  the collection to decorate, must not be null\n      * @throws IllegalArgumentException if the collection is null\n      */\n-    protected SynchronizedCollection(Collection collection) {\n+    protected SynchronizedCollection(Collection<E> collection) {\n         if (collection == null) {\n             throw new IllegalArgumentException(\"Collection must not be null\");\n         }\n      * @param lock  the lock object to use, must not be null\n      * @throws IllegalArgumentException if the collection is null\n      */\n-    protected SynchronizedCollection(Collection collection, Object lock) {\n+    protected SynchronizedCollection(Collection<E> collection, Object lock) {\n         if (collection == null) {\n             throw new IllegalArgumentException(\"Collection must not be null\");\n         }\n         this.lock = lock;\n     }\n \n+    /**\n+     * Gets the collection being decorated.\n+     * \n+     * @return the decorated collection\n+     */\n+    protected Collection<E> decorated() {\n+        return collection;\n+    }\n+\n     //-----------------------------------------------------------------------\n-    public boolean add(Object object) {\n-        synchronized (lock) {\n-            return collection.add(object);\n-        }\n-    }\n-\n-    public boolean addAll(Collection coll) {\n-        synchronized (lock) {\n-            return collection.addAll(coll);\n+    public boolean add(E object) {\n+        synchronized (lock) {\n+            return decorated().add(object);\n+        }\n+    }\n+\n+    public boolean addAll(Collection<? extends E> coll) {\n+        synchronized (lock) {\n+            return decorated().addAll(coll);\n         }\n     }\n \n     public void clear() {\n         synchronized (lock) {\n-            collection.clear();\n+            decorated().clear();\n         }\n     }\n \n     public boolean contains(Object object) {\n         synchronized (lock) {\n-            return collection.contains(object);\n-        }\n-    }\n-\n-    public boolean containsAll(Collection coll) {\n-        synchronized (lock) {\n-            return collection.containsAll(coll);\n+            return decorated().contains(object);\n+        }\n+    }\n+\n+    public boolean containsAll(Collection<?> coll) {\n+        synchronized (lock) {\n+            return decorated().containsAll(coll);\n         }\n     }\n \n     public boolean isEmpty() {\n         synchronized (lock) {\n-            return collection.isEmpty();\n+            return decorated().isEmpty();\n         }\n     }\n \n      * \n      * @return an iterator that must be manually synchronized on the collection\n      */\n-    public Iterator iterator() {\n-        return collection.iterator();\n+    public Iterator<E> iterator() {\n+        return decorated().iterator();\n     }\n \n     public Object[] toArray() {\n         synchronized (lock) {\n-            return collection.toArray();\n-        }\n-    }\n-\n-    public Object[] toArray(Object[] object) {\n-        synchronized (lock) {\n-            return collection.toArray(object);\n+            return decorated().toArray();\n+        }\n+    }\n+\n+    public <T> T[] toArray(T[] object) {\n+        synchronized (lock) {\n+            return decorated().toArray(object);\n         }\n     }\n \n     public boolean remove(Object object) {\n         synchronized (lock) {\n-            return collection.remove(object);\n-        }\n-    }\n-\n-    public boolean removeAll(Collection coll) {\n-        synchronized (lock) {\n-            return collection.removeAll(coll);\n-        }\n-    }\n-\n-    public boolean retainAll(Collection coll) {\n-        synchronized (lock) {\n-            return collection.retainAll(coll);\n+            return decorated().remove(object);\n+        }\n+    }\n+\n+    public boolean removeAll(Collection<?> coll) {\n+        synchronized (lock) {\n+            return decorated().removeAll(coll);\n+        }\n+    }\n+\n+    public boolean retainAll(Collection<?> coll) {\n+        synchronized (lock) {\n+            return decorated().retainAll(coll);\n         }\n     }\n \n     public int size() {\n         synchronized (lock) {\n-            return collection.size();\n+            return decorated().size();\n         }\n     }\n \n             if (object == this) {\n                 return true;\n             }\n-            return collection.equals(object);\n+            return decorated().equals(object);\n         }\n     }\n \n     public int hashCode() {\n         synchronized (lock) {\n-            return collection.hashCode();\n+            return decorated().hashCode();\n         }\n     }\n \n     public String toString() {\n         synchronized (lock) {\n-            return collection.toString();\n+            return decorated().toString();\n         }\n     }\n ", "timestamp": 1252994087, "metainfo": ""}