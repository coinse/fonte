{"sha": "08a95179a6de09f575f30871dcf540b0d5f5278a", "log": "javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BinaryHeap.java\n+++ b/src/java/org/apache/commons/collections/BinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.17 2004/01/01 23:56:51 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.18 2004/01/02 01:36:51 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * </pre>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.17 $ $Date: 2004/01/01 23:56:51 $\n+ * @version $Revision: 1.18 $ $Date: 2004/01/02 01:36:51 $\n  * \n  * @author Peter Donald\n  * @author Ram Chidambaram\n      * <p>\n      * Assume it is a maximum heap.\n      *\n-     * @param element the element\n+     * @param index the index of the element to be percolated up\n      */\n     protected void percolateUpMaxHeap(final int index) {\n         int hole = index;\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.9 2003/12/28 16:36:48 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.10 2004/01/02 01:36:51 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * the number of occurrences of that element in the bag.\n  *\n  * @since Commons Collections 3.0 (previously DefaultMapBag v2.0)\n- * @version $Revision: 1.9 $ $Date: 2003/12/28 16:36:48 $\n+ * @version $Revision: 1.10 $ $Date: 2004/01/02 01:36:51 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n     /**\n      * Constructor needed for subclass serialisation.\n      * \n-     * @param map  the map to assign\n      */\n     protected AbstractMapBag() {\n         super();\n      * This Bag equals another Bag if it contains the same number of occurances of\n      * the same elements.\n      * \n-     * @param obj  the Bag to compare to\n+     * @param object  the Bag to compare to\n      * @return true if equal\n      */\n     public boolean equals(Object object) {\n--- a/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java,v 1.7 2003/12/29 00:38:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java,v 1.8 2004/01/02 01:36:51 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * not store each object twice, which can save on memory use.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: DualTreeBidiMap.java,v 1.7 2003/12/29 00:38:08 scolebourne Exp $\n+ * @version $Id: DualTreeBidiMap.java,v 1.8 2004/01/02 01:36:51 psteitz Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n     /** \n      * Constructs a <code>DualTreeBidiMap</code> using the specified Comparator.\n      *\n-     * @param map  the map whose mappings are to be placed in this map\n+     * @param comparator  the Comparator\n      */\n     public DualTreeBidiMap(Comparator comparator) {\n         super();\n      * \n      * @param normalMap  the normal direction map\n      * @param reverseMap  the reverse direction map\n-     * @param inverseBidiMap  the inverse BidiMap\n+     * @param inverseMap  the inverse BidiMap\n      * @return new bidi map\n      */\n     protected BidiMap createBidiMap(Map normalMap, Map reverseMap, BidiMap inverseMap) {\n--- a/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java,v 1.6 2003/12/06 13:03:15 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java,v 1.7 2004/01/02 01:36:51 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * UnsupportedOperationException on attempts to call that method.\n  *\n  * @since Commons Collections 3.0 (previously DoubleOrderedMap v2.0)\n- * @version $Revision: 1.6 $ $Date: 2003/12/06 13:03:15 $\n+ * @version $Revision: 1.7 $ $Date: 2004/01/02 01:36:51 $\n  * \n  * @author Marc Johnson\n  * @author Stephen Colebourne\n     /**\n      * Gets the next key after the one specified.\n      *\n-     * @param the key to search for next from\n+     * @param key the key to search for next from\n      * @return the next key, null if no match or at end\n      */\n     public Object nextKey(Object key) {\n     /**\n      * Gets the previous key before the one specified.\n      *\n-     * @param the key to search for previous from\n+     * @param key the key to search for previous from\n      * @return the previous key, null if no match or at start\n      */\n     public Object previousKey(Object key) {\n      * Compares for equals as per the API.\n      *\n      * @param obj  the object to compare to\n-     * @param index  the KEY or VALUE int\n      * @return true if equal\n      */\n     public boolean equals(Object obj) {\n--- a/src/java/org/apache/commons/collections/buffer/BinaryBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BinaryBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/Attic/BinaryBuffer.java,v 1.2 2004/01/01 23:56:51 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/Attic/BinaryBuffer.java,v 1.3 2004/01/02 01:36:51 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * </pre>\n  *\n  * @since Commons Collections 3.0 (previously BinaryHeap v1.0)\n- * @version $Revision: 1.2 $ $Date: 2004/01/01 23:56:51 $\n+ * @version $Revision: 1.3 $ $Date: 2004/01/02 01:36:51 $\n  * \n  * @author Peter Donald\n  * @author Ram Chidambaram\n      * <p>\n      * Assume it is a maximum heap.\n      *\n-     * @param element the element\n+     * @param index the index of the element to be percolated up\n      */\n     protected void percolateUpMaxHeap(final int index) {\n         int hole = index;\n--- a/src/java/org/apache/commons/collections/functors/ChainedTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ChainedTransformer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ChainedTransformer.java,v 1.1 2003/11/23 23:25:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ChainedTransformer.java,v 1.2 2004/01/02 01:36:51 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * Transformer implementation that chains the specifed closures together.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 23:25:33 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/02 01:36:51 $\n  *\n  * @author Stephen Colebourne\n  */\n     /**\n      * Execute a list of transformers.\n      * \n-     * @param input  the input object passed to each transformer\n+     * @param object  the input object passed to each transformer\n      */\n     public Object transform(Object object) {\n         for (int i = 0; i < iTransformers.length; i++) {\n--- a/src/java/org/apache/commons/collections/functors/IfClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/IfClosure.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/IfClosure.java,v 1.1 2003/11/23 17:01:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/IfClosure.java,v 1.2 2004/01/02 01:36:51 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * based on a predicate.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 17:01:35 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/02 01:36:51 $\n  *\n  * @author Stephen Colebourne\n  */\n     /**\n      * Factory method that performs validation.\n      * \n-     * @param predicates  array of predicates, cloned, no nulls\n-     * @param closures  matching array of closures, cloned, no nulls\n-     * @param defaultClosure  the closure to use if no match, null means nop\n-     * @return the <code>chained</code> closure\n-     * @throws IllegalArgumentException if array is null\n-     * @throws IllegalArgumentException if any element in the array is null\n+     * @param predicate  predicate to switch on\n+     * @param trueClosure  closure used if true\n+     * @param falseClosure  closure used if false\n+     * @return the <code>if</code> closure\n+     * @throws IllegalArgumentException if any argument is null\n      */\n     public static Closure getInstance(Predicate predicate, Closure trueClosure, Closure falseClosure) {\n         if (predicate == null) {\n--- a/src/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InstanceofPredicate.java,v 1.1 2003/11/23 19:11:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InstanceofPredicate.java,v 1.2 2004/01/02 01:36:51 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * the type stored in this predicate.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 19:11:21 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/02 01:36:51 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Constructor that performs no validation.\n      * Use <code>getInstance</code> if you want that.\n      * \n-     * @param object  the object to compare to\n+     * @param type  the type to check for\n      */\n     public InstanceofPredicate(Class type) {\n         super();\n--- a/src/java/org/apache/commons/collections/functors/MapTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/MapTransformer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/MapTransformer.java,v 1.2 2003/11/27 23:57:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/MapTransformer.java,v 1.3 2004/01/02 01:36:51 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * using the input parameter as a key.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/27 23:57:09 $\n+ * @version $Revision: 1.3 $ $Date: 2004/01/02 01:36:51 $\n  *\n  * @author Stephen Colebourne\n  */\n      * <p>\n      * If the map is null, a transformer that always returns null is returned.\n      * \n-     * @param the map, not cloned\n+     * @param map the map, not cloned\n      * @return the transformer\n      */\n     public static Transformer getInstance(Map map) {\n--- a/src/java/org/apache/commons/collections/list/NodeCachingLinkedList.java\n+++ b/src/java/org/apache/commons/collections/list/NodeCachingLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/NodeCachingLinkedList.java,v 1.3 2003/12/29 01:04:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/NodeCachingLinkedList.java,v 1.4 2004/01/02 01:36:52 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * <b>Note that this implementation is not synchronized.</b>\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/29 01:04:44 $\n+ * @version $Revision: 1.4 $ $Date: 2004/01/02 01:36:52 $\n  * \n  * @author Jeff Varszegi\n  * @author Rich Dougherty\n      * Removes all the nodes from the list, storing as many as required in the\n      * cache for reuse.\n      * \n-     * @param node  the node to remove\n      */\n     protected void removeAllNodes() {\n         // Add the removed nodes to the cache, then remove the rest.\n--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractHashedMap.java,v 1.4 2003/12/29 00:38:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractHashedMap.java,v 1.5 2004/01/02 01:36:52 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * need for unusual subclasses is here.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/12/29 00:38:08 $\n+ * @version $Revision: 1.5 $ $Date: 2004/01/02 01:36:52 $\n  *\n  * @author java util HashMap\n  * @author Stephen Colebourne\n      * <p>\n      * This implementation adds the entry to the data storage table.\n      * Subclasses could override to handle changes to the map.\n-     * \n+     *\n+     * @param entry  the entry to add\n      * @param hashIndex  the index into the data array to store at\n-     * @param hashCode  the hash code of the key to add\n-     * @param key  the key to add\n-     * @param value  the value to add\n-     * @return the value previously mapped to this key, null if none\n      */\n     protected void addEntry(HashEntry entry, int hashIndex) {\n         data[hashIndex] = entry;\n--- a/src/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/java/org/apache/commons/collections/map/LRUMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/LRUMap.java,v 1.4 2003/12/11 22:55:25 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/LRUMap.java,v 1.5 2004/01/02 01:36:52 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * <code>ResettableIterator</code> and calling <code>reset()</code>.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/12/11 22:55:25 $\n+ * @version $Revision: 1.5 $ $Date: 2004/01/02 01:36:52 $\n  *\n  * @author James Strachan\n  * @author Morgan Delagrange\n      * This implementation moves the updated entry to the end of the list.\n      * \n      * @param entry  the entry to update\n-     * @param newValue  the new value to store\n-     * @return value  the previous value\n      */\n     protected void moveToMRU(LinkEntry entry) {\n         if (entry.after != header) {", "timestamp": 1073007412, "metainfo": ""}