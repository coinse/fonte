{"sha": "b17194ecadacd15070a774a86ef1030fff834745", "log": "had to temporarily override test that causes an infinite loop   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestLRUMap.java\n+++ b/src/test/org/apache/commons/collections/TestLRUMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLRUMap.java,v 1.18 2002/05/08 16:07:05 morgand Exp $\n- * $Revision: 1.18 $\n- * $Date: 2002/05/08 16:07:05 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLRUMap.java,v 1.19 2002/05/08 17:34:17 morgand Exp $\n+ * $Revision: 1.19 $\n+ * $Date: 2002/05/08 17:34:17 $\n  *\n  * ====================================================================\n  *\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:morgand@apache.org\">Morgan Delagrange</a>\n- * @version $Id: TestLRUMap.java,v 1.18 2002/05/08 16:07:05 morgand Exp $\n+ * @version $Id: TestLRUMap.java,v 1.19 2002/05/08 17:34:17 morgand Exp $\n  */\n public class TestLRUMap extends TestSequencedHashMap\n {\n     public Map makeEmptyMap() {\n         LRUMap map = new LRUMap();\n         return map;\n+    }\n+\n+    // had to override from TestSequencedHashMap, because the test performs a get\n+    // inside a loop.  Since get() alter the Map in this class, an infinite loop\n+    // is produced\n+    public void testSequenceMap() {\n+        fail(\"trying to work out an infinite loop bug\");\n     }\n \n     public void testRemoveLRU() {\n         // promote 1 to top\n         // eviction order is now 2,3,1\n         map.get(\"1\");\n-\n+        \n         // add another value, forcing a remove\n         // 2 should be evicted (then 3,1,4)\n         map.put(\"4\",\"4\");\n-\n+        \n         Iterator keyIterator = map.keySet().iterator();\n         Object[] keys = new Object[3];\n         for (int i = 0; keyIterator.hasNext() ; ++i) {\n         assertTrue(\"first evicted should be 3, was \" + keys[0], keys[0].equals(\"3\"));\n         assertTrue(\"second evicted should be 1, was \" + keys[1], keys[1].equals(\"1\"));\n         assertTrue(\"third evicted should be 4, was \" + keys[2], keys[2].equals(\"4\"));\n+        \n     }\n \n     /**", "timestamp": 1020879257, "metainfo": ""}