{"sha": "78238bdc125dfcb77c3342f13ccc32a6d998dfc7", "log": "Add TransformedPredicate, which transforms before calling a predicate bug 26946, from Alban Peignier   ", "commit": "\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n import org.apache.commons.collections.functors.NullPredicate;\n import org.apache.commons.collections.functors.OnePredicate;\n import org.apache.commons.collections.functors.OrPredicate;\n+import org.apache.commons.collections.functors.TransformedPredicate;\n import org.apache.commons.collections.functors.TransformerPredicate;\n import org.apache.commons.collections.functors.TruePredicate;\n import org.apache.commons.collections.functors.UniquePredicate;\n  * All the supplied predicates are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.16 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.17 $ $Date: 2004/03/13 16:34:46 $\n  * \n  * @author Stephen Colebourne\n  * @author Ola Berg\n         return NullIsTruePredicate.getInstance(predicate);\n     }\n \n+    // Transformed\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Creates a predicate that transforms the input object before passing it\n+     * to the predicate.\n+     * \n+     * @param transformer  the transformer to call first\n+     * @param predicate  the predicate to call with the result of the transform\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the transformer or the predicate is null\n+\t * @since Commons Collections 3.1\n+     */\n+    public static Predicate transformedPredicate(Transformer transformer, Predicate predicate) {\n+        return TransformedPredicate.getInstance(transformer, predicate);\n+    }\n+\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/TransformedPredicate.java\n+/*\n+ *  Copyright 2001-2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * Predicate implementation that transforms the given object before invoking\n+ * another <code>Predicate</code>.\n+ * \n+ * @since Commons Collections 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/03/13 16:34:46 $\n+ * @author Alban Peignier\n+ * @author Stephen Colebourne\n+ */\n+public final class TransformedPredicate implements Predicate, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = -5596090919668315834L;\n+    \n+    /** The transformer to call */\n+    private final Transformer transformer;\n+    /** The predicate to call */\n+    private final Predicate predicate;\n+\n+    /**\n+     * Factory to create the predicate.\n+     * \n+     * @param transformer  the transformer to call\n+     * @param predicate  the predicate to call with the result of the transform\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the transformer or the predicate is null\n+     */\n+    public static Predicate getInstance(Transformer transformer, Predicate predicate) {\n+        if (transformer == null) {\n+            throw new IllegalArgumentException(\"The transformer to call must not be null\");\n+        }\n+        if (predicate == null) {\n+            throw new IllegalArgumentException(\"The predicate to call must not be null\");\n+        }\n+        return new TransformedPredicate(transformer, predicate);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     */\n+    public TransformedPredicate(Transformer transformer, Predicate predicate) {\n+        this.transformer = transformer;\n+        this.predicate = predicate;\n+    }\n+    \n+    /**\n+     * Return the predicate result.\n+     */\n+    public boolean evaluate(Object object) {\n+        Object result = transformer.transform(object);\n+        return predicate.evaluate(result);\n+    }\n+\n+    /**\n+     * Gets the predicate in use.\n+     * @return the predicate\n+     */\n+    public Predicate getPredicate() {\n+        return predicate;\n+    }\n+\n+    /**\n+     * Gets the transformer in use.\n+     * @return the transformer\n+     */\n+    public Transformer getTransformer() {\n+        return transformer;\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestPredicateUtils.java\n+++ b/src/test/org/apache/commons/collections/TestPredicateUtils.java\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n \n import junit.framework.Test;\n  * Tests the org.apache.commons.collections.PredicateUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2004/02/18 01:20:35 $\n+ * @version $Revision: 1.8 $ $Date: 2004/03/13 16:34:46 $\n  *\n  * @author Stephen Colebourne\n  */\n         fail();\n     }\n     \n+    // transformed\n+    //------------------------------------------------------------------\n+\n+    public void testTransformedPredicate() {\n+        assertEquals(true, PredicateUtils.transformedPredicate(\n+                TransformerUtils.nopTransformer(),\n+                PredicateUtils.truePredicate()).evaluate(new Object()));\n+                \n+        Map map = new HashMap();\n+        map.put(Boolean.TRUE, \"Hello\");\n+        Transformer t = TransformerUtils.mapTransformer(map);\n+        Predicate p = PredicateUtils.equalPredicate(\"Hello\");\n+        assertEquals(false, PredicateUtils.transformedPredicate(t, p).evaluate(null));\n+        assertEquals(true, PredicateUtils.transformedPredicate(t, p).evaluate(Boolean.TRUE));\n+        try {\n+            PredicateUtils.transformedPredicate(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n }", "timestamp": 1079195686, "metainfo": ""}