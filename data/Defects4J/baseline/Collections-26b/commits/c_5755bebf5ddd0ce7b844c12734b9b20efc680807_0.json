{"sha": "5755bebf5ddd0ce7b844c12734b9b20efc680807", "log": "Remove again closing unneeded closing p tags to keep consistency.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractBagDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractBagDecorator.java\n /**\n  * Decorates another <code>Bag</code> to provide additional behaviour.\n  * <p>\n- * Methods are forwarded directly to the decorated bag.</p>\n+ * Methods are forwarded directly to the decorated bag.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n  * <p>\n  * Subclasses specify a Map implementation to use as the internal storage. The\n  * map will be used to map bag elements to a number; the number represents the\n- * number of occurrences of that element in the bag.</p>\n+ * number of occurrences of that element in the bag.\n  *\n  * @since Commons Collections 3.0 (previously DefaultMapBag v2.0)\n  * @version $Revision$\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractSortedBagDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractSortedBagDecorator.java\n /**\n  * Decorates another <code>SortedBag</code> to provide additional behaviour.\n  * <p>\n- * Methods are forwarded directly to the decorated bag.</p>\n+ * Methods are forwarded directly to the decorated bag.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n--- a/src/main/java/org/apache/commons/collections/bag/HashBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/HashBag.java\n  * count of occurrences. Extra methods on the interface allow multiple copies\n  * of an object to be added or removed at once. It is important to read the\n  * interface javadoc carefully as several methods violate the\n- * <code>Collection</code> interface specification.</p>\n+ * <code>Collection</code> interface specification.\n  *\n  * @since Commons Collections 3.0 (previously in main package v2.0)\n  * @version $Revision$\n--- a/src/main/java/org/apache/commons/collections/bag/PredicatedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/PredicatedBag.java\n  * <p>\n  * This bag exists to provide validation for the decorated bag.\n  * It is normally created to decorate an empty bag.\n- * If an object cannot be added to the bag, an IllegalArgumentException is thrown.</p>\n+ * If an object cannot be added to the bag, an IllegalArgumentException is thrown.\n  * <p>\n  * One usage would be to ensure that no null entries are added to the bag.\n- * <pre>Bag bag = PredicatedBag.decorate(new HashBag(), NotNullPredicate.INSTANCE);</pre></p>\n+ * <pre>Bag bag = PredicatedBag.decorate(new HashBag(), NotNullPredicate.INSTANCE);</pre>\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.</p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n      * Factory method to create a predicated (validating) bag.\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are validated.</p>\n+     * are validated.\n      * \n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * Constructor that wraps (not copies).\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are validated.</p>\n+     * are validated.\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n--- a/src/main/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n  * <p>\n  * This bag exists to provide validation for the decorated bag.\n  * It is normally created to decorate an empty bag.\n- * If an object cannot be added to the bag, an IllegalArgumentException is thrown.</p>\n+ * If an object cannot be added to the bag, an IllegalArgumentException is thrown.\n  * <p>\n  * One usage would be to ensure that no null entries are added to the bag.\n- * <pre>SortedBag bag = PredicatedSortedBag.decorate(new TreeBag(), NotNullPredicate.INSTANCE);</pre></p>\n+ * <pre>SortedBag bag = PredicatedSortedBag.decorate(new TreeBag(), NotNullPredicate.INSTANCE);</pre>\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.</p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n      * Factory method to create a predicated (validating) bag.\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are validated.</p>\n+     * are validated.\n      * \n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n     /**\n      * Constructor that wraps (not copies).\n      * <p>If there are any elements already in the bag being decorated, they\n-     * are validated.</p>\n+     * are validated.\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n--- a/src/main/java/org/apache/commons/collections/bag/SynchronizedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/SynchronizedBag.java\n  * for a multi-threaded environment.\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated bag.\n- * Iterators must be separately synchronized around the loop.</p>\n+ * Iterators must be separately synchronized around the loop.\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.</p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n--- a/src/main/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n  * for a multi-threaded environment.\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated bag.\n- * Iterators must be separately synchronized around the loop.</p>\n+ * Iterators must be separately synchronized around the loop.\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.</p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n  * The add methods are affected by this class.\n  * Thus objects must be removed or searched for using their transformed form.\n  * For example, if the transformation converts Strings to Integers, you must\n- * use the Integer form to remove objects.</p>\n+ * use the Integer form to remove objects.\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.</p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n      * Factory method to create a transforming bag.\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are NOT transformed. Contrast this with {@link #transformedBag(Bag, Transformer)}.</p>\n+     * are NOT transformed. Contrast this with {@link #transformedBag(Bag, Transformer)}.\n      * \n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n      * will be transformed by this method.\n-     * Contrast this with {@link #transformingBag(Bag, Transformer)}.</p>\n+     * Contrast this with {@link #transformingBag(Bag, Transformer)}.\n      * \n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * Constructor that wraps (not copies).\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are NOT transformed.</p>\n+     * are NOT transformed.\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n  * The add methods are affected by this class.\n  * Thus objects must be removed or searched for using their transformed form.\n  * For example, if the transformation converts Strings to Integers, you must\n- * use the Integer form to remove objects.</p>\n+ * use the Integer form to remove objects.\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.</p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n      * Factory method to create a transforming sorted bag.\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are NOT transformed. Contrast this with {@link #transformedSortedBag(SortedBag, Transformer)}.</p>\n+     * are NOT transformed. Contrast this with {@link #transformedSortedBag(SortedBag, Transformer)}.\n      * \n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n      * will be transformed by this method.\n-     * Contrast this with {@link #transformingSortedBag(SortedBag, Transformer)}.</p>\n+     * Contrast this with {@link #transformingSortedBag(SortedBag, Transformer)}.\n      * \n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * Constructor that wraps (not copies).\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are NOT transformed.</p>\n+     * are NOT transformed.\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n--- a/src/main/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n /**\n  * Decorates another <code>Bag</code> to ensure it can't be altered.\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.</p>\n+ * This class is Serializable from Commons Collections 3.1.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException.</p> \n+ * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n     /**\n      * Factory method to create an unmodifiable bag.\n      * <p>\n-     * If the bag passed in is already unmodifiable, it is returned.</p>\n+     * If the bag passed in is already unmodifiable, it is returned.\n      * \n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n--- a/src/main/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n /**\n  * Decorates another <code>SortedBag</code> to ensure it can't be altered.\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.</p>\n+ * This class is Serializable from Commons Collections 3.1.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException.</p> \n+ * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n     /**\n      * Factory method to create an unmodifiable bag.\n      * <p>\n-     * If the bag passed in is already unmodifiable, it is returned.</p>\n+     * If the bag passed in is already unmodifiable, it is returned.\n      * \n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null", "timestamp": 1340470705, "metainfo": ""}