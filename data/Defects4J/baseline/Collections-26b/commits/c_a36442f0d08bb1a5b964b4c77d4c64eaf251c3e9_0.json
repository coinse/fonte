{"sha": "a36442f0d08bb1a5b964b4c77d4c64eaf251c3e9", "log": "Work around a problem reported by the VAJ Java compiler, caused by the fact that the superclass already has a private class named Iterator.  Submitted by:\tCostin Cozianu <Costin.Cozianu@cis.canon.com>   ", "commit": "\n--- a/src/java/org/apache/commons/collections/FastArrayList.java\n+++ b/src/java/org/apache/commons/collections/FastArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastArrayList.java,v 1.2 2001/04/21 12:19:57 craigmcc Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/04/21 12:19:57 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastArrayList.java,v 1.3 2001/05/20 21:03:30 craigmcc Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/05/20 21:03:30 $\n  *\n  * ====================================================================\n  *\n  * maximum performance.</p>\n  *\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.2 $ $Date: 2001/04/21 12:19:57 $\n+ * @version $Revision: 1.3 $ $Date: 2001/05/20 21:03:30 $\n  */\n \n public class FastArrayList extends ArrayList {\n \n         if (fast) {\n             int hashCode = 1;\n-            Iterator i = list.iterator();\n+            java.util.Iterator i = list.iterator();\n             while (i.hasNext()) {\n                 Object o = i.next();\n                 hashCode = 31 * hashCode + (o == null ? 0 : o.hashCode());\n         } else {\n             synchronized (list) {\n                 int hashCode = 1;\n-                Iterator i = list.iterator();\n+                java.util.Iterator i = list.iterator();\n                 while (i.hasNext()) {\n                     Object o = i.next();\n                     hashCode = 31 * hashCode + (o == null ? 0 : o.hashCode());\n--- a/src/java/org/apache/commons/collections/FastHashMap.java\n+++ b/src/java/org/apache/commons/collections/FastHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastHashMap.java,v 1.3 2001/05/18 00:12:45 rwaldhoff Exp $\n- * $Revision: 1.3 $\n- * $Date: 2001/05/18 00:12:45 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastHashMap.java,v 1.4 2001/05/20 21:03:30 craigmcc Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2001/05/20 21:03:30 $\n  *\n  * ====================================================================\n  *\n  * maximum performance.</p>\n  *\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.3 $ $Date: 2001/05/18 00:12:45 $\n+ * @version $Revision: 1.4 $ $Date: 2001/05/20 21:03:30 $\n  */\n \n public class FastHashMap extends HashMap {\n         if (fast) {\n             if (mo.size() != map.size())\n                 return (false);\n-            Iterator i = map.entrySet().iterator();\n+            java.util.Iterator i = map.entrySet().iterator();\n             while (i.hasNext()) {\n                 Map.Entry e = (Map.Entry) i.next();\n                 Object key = e.getKey();\n             synchronized (map) {\n                 if (mo.size() != map.size())\n                     return (false);\n-                Iterator i = map.entrySet().iterator();\n+                java.util.Iterator i = map.entrySet().iterator();\n                 while (i.hasNext()) {\n                     Map.Entry e = (Map.Entry) i.next();\n                     Object key = e.getKey();\n \n         if (fast) {\n             int h = 0;\n-            Iterator i = map.entrySet().iterator();\n+            java.util.Iterator i = map.entrySet().iterator();\n             while (i.hasNext())\n                 h += i.next().hashCode();\n             return (h);\n         } else {\n             synchronized (map) {\n                 int h = 0;\n-                Iterator i = map.entrySet().iterator();\n+                java.util.Iterator i = map.entrySet().iterator();\n                 while (i.hasNext())\n                     h += i.next().hashCode();\n                 return (h);\n--- a/src/java/org/apache/commons/collections/FastTreeMap.java\n+++ b/src/java/org/apache/commons/collections/FastTreeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastTreeMap.java,v 1.3 2001/05/18 00:12:45 rwaldhoff Exp $\n- * $Revision: 1.3 $\n- * $Date: 2001/05/18 00:12:45 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastTreeMap.java,v 1.4 2001/05/20 21:03:30 craigmcc Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2001/05/20 21:03:30 $\n  *\n  * ====================================================================\n  *\n  * maximum performance.</p>\n  *\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.3 $ $Date: 2001/05/18 00:12:45 $\n+ * @version $Revision: 1.4 $ $Date: 2001/05/20 21:03:30 $\n  */\n \n public class FastTreeMap extends TreeMap {\n         if (fast) {\n             if (mo.size() != map.size())\n                 return (false);\n-            Iterator i = map.entrySet().iterator();\n+            java.util.Iterator i = map.entrySet().iterator();\n             while (i.hasNext()) {\n                 Map.Entry e = (Map.Entry) i.next();\n                 Object key = e.getKey();\n             synchronized (map) {\n                 if (mo.size() != map.size())\n                     return (false);\n-                Iterator i = map.entrySet().iterator();\n+                java.util.Iterator i = map.entrySet().iterator();\n                 while (i.hasNext()) {\n                     Map.Entry e = (Map.Entry) i.next();\n                     Object key = e.getKey();\n \n         if (fast) {\n             int h = 0;\n-            Iterator i = map.entrySet().iterator();\n+            java.util.Iterator i = map.entrySet().iterator();\n             while (i.hasNext())\n                 h += i.next().hashCode();\n             return (h);\n         } else {\n             synchronized (map) {\n                 int h = 0;\n-                Iterator i = map.entrySet().iterator();\n+                java.util.Iterator i = map.entrySet().iterator();\n                 while (i.hasNext())\n                     h += i.next().hashCode();\n                 return (h);", "timestamp": 990392610, "metainfo": ""}