{"sha": "90509ce84e7d1c9f78ea0aa919ac373159fb28ae", "log": "Add indexOf methods to IterableUtils and IteratorUtils, replace last occurrence of ArrayStack with ArrayDeque.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/IterableUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IterableUtils.java\n     }\n \n     /**\n+     * Returns the index of the first element in the specified iterable that\n+     * matches the given predicate.\n+     * <p>\n+     * A <code>null</code> or empty iterable returns -1.\n+     *\n+     * @param <E> the element type\n+     * @param iterable  the iterable to search, may be null\n+     * @param predicate  the predicate to use, may not be null\n+     * @return the index of the first element which matches the predicate or -1 if none matches\n+     * @throws NullPointerException if predicate is null\n+     */\n+    public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate) {\n+        return IteratorUtils.indexOf(emptyIteratorIfNull(iterable), predicate);\n+    }\n+\n+    /**\n      * Answers true if a predicate is true for every element of an iterable.\n      * <p>\n      * A <code>null</code> or empty iterable returns true.\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n     }\n \n     /**\n+     * Returns the index of the first element in the specified iterator that\n+     * matches the given predicate.\n+     * <p>\n+     * A <code>null</code> or empty iterator returns -1.\n+     *\n+     * @param <E> the element type\n+     * @param iterator  the iterator to search, may be null\n+     * @param predicate  the predicate to use, may not be null\n+     * @return the index of the first element which matches the predicate or -1 if none matches\n+     * @throws NullPointerException if predicate is null\n+     * @since 4.1\n+     */\n+    public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate) {\n+        if (predicate == null) {\n+            throw new NullPointerException(\"Predicate must not be null\");\n+        }\n+\n+        if (iterator != null) {\n+            for(int index = 0; iterator.hasNext(); index++) {\n+                final E element = iterator.next();\n+                if (predicate.evaluate(element)) {\n+                    return index;\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n      * Answers true if a predicate is true for any element of the iterator.\n      * <p>\n      * A <code>null</code> or empty iterator returns false.\n      * @since 4.1\n      */\n     public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n-\n-        if (iterator != null) {\n-            while (iterator.hasNext()) {\n-                final E element = iterator.next();\n-                if (predicate.evaluate(element)) {\n-                    return true;\n-                }\n-            }\n-        }\n-        return false;\n+        return indexOf(iterator, predicate) != -1;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/MapUtils.java\n import java.io.PrintStream;\n import java.text.NumberFormat;\n import java.text.ParseException;\n+import java.util.ArrayDeque;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Deque;\n import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.Iterator;\n      * @throws NullPointerException if the stream is <code>null</code>\n      */\n     public static void verbosePrint(final PrintStream out, final Object label, final Map<?, ?> map) {\n-        verbosePrintInternal(out, label, map, new ArrayStack<Map<?, ?>>(), false);\n+        verbosePrintInternal(out, label, map, new ArrayDeque<Map<?, ?>>(), false);\n     }\n \n     /**\n      * @throws NullPointerException if the stream is <code>null</code>\n      */\n     public static void debugPrint(final PrintStream out, final Object label, final Map<?, ?> map) {\n-        verbosePrintInternal(out, label, map, new ArrayStack<Map<?, ?>>(), true);\n+        verbosePrintInternal(out, label, map, new ArrayDeque<Map<?, ?>>(), true);\n     }\n \n     // Implementation methods\n      * @throws NullPointerException if the stream is <code>null</code>\n      */\n     private static void verbosePrintInternal(final PrintStream out, final Object label, final Map<?, ?> map,\n-                                             final ArrayStack<Map<?, ?>> lineage, final boolean debug) {\n+                                             final Deque<Map<?, ?>> lineage, final boolean debug) {\n         printIndent(out, lineage.size());\n \n         if (map == null) {\n         printIndent(out, lineage.size());\n         out.println(\"{\");\n \n-        lineage.push(map);\n+        lineage.addLast(map);\n \n         for (final Map.Entry<?, ?> entry : map.entrySet()) {\n             final Object childKey = entry.getKey();\n                 out.print(childKey);\n                 out.print(\" = \");\n \n-                final int lineageIndex = lineage.indexOf(childValue);\n+                final int lineageIndex =\n+                        IterableUtils.indexOf(lineage,\n+                                              PredicateUtils.equalPredicate(childValue));\n                 if (lineageIndex == -1) {\n                     out.print(childValue);\n                 } else if (lineage.size() - 1 == lineageIndex) {\n             }\n         }\n \n-        lineage.pop();\n+        lineage.removeLast();\n \n         printIndent(out, lineage.size());\n         out.println(debug ? \"} \" + map.getClass().getName() : \"}\");\n--- a/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java\n     }\n \n     @Test\n+    public void indexOf() {\n+        Predicate<Number> testPredicate = equalPredicate((Number) 4);\n+        int index = IterableUtils.indexOf(iterableA, testPredicate);\n+        assertEquals(6, index);\n+        testPredicate = equalPredicate((Number) 45);\n+        index = IterableUtils.indexOf(iterableA, testPredicate);\n+        assertEquals(-1, index);\n+        assertEquals(-1, IterableUtils.indexOf(null, testPredicate));\n+        try {\n+            assertNull(IterableUtils.indexOf(iterableA, null));\n+            fail(\"expecting NullPointerException\");\n+        } catch (final NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n     public void countMatches() {\n         assertEquals(4, IterableUtils.countMatches(iterableB, EQUALS_TWO));\n         assertEquals(0, IterableUtils.countMatches(null, EQUALS_TWO));\n--- a/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n-import static org.apache.commons.collections4.functors.EqualPredicate.*;\n-import static org.easymock.EasyMock.*;\n-import static org.junit.Assert.*;\n+import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n \n     private Iterable<Integer> iterableA = null;\n \n-    private Collection<Integer> emptyCollection = new ArrayList<Integer>(1);\n+    private final Collection<Integer> emptyCollection = new ArrayList<Integer>(1);\n \n     @Before\n     public void setUp() {\n      */\n     private NodeList createNodeList(final Node[] nodes) {\n         return new NodeList() {\n+            @Override\n             public Node item(final int index) {\n                 return nodes[index];\n             }\n+            @Override\n             public int getLength() {\n                 return nodes.length;\n             }\n         final Comparator<Integer> reverseComparator =\n                 ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n \n-        Collections.reverse((List<Integer>) collectionOdd);\n-        Collections.reverse((List<Integer>) collectionEven);\n+        Collections.reverse(collectionOdd);\n+        Collections.reverse(collectionEven);\n         Collections.reverse(combinedList);\n \n         it = IteratorUtils.collatedIterator(reverseComparator,\n     }\n \n     @Test\n+    public void indexOf() {\n+        Predicate<Number> testPredicate = equalPredicate((Number) 4);\n+        int index = IteratorUtils.indexOf(iterableA.iterator(), testPredicate);\n+        assertEquals(6, index);\n+        testPredicate = equalPredicate((Number) 45);\n+        index = IteratorUtils.indexOf(iterableA.iterator(), testPredicate);\n+        assertEquals(-1, index);\n+        assertEquals(-1, IteratorUtils.indexOf(null, testPredicate));\n+        try {\n+            assertNull(IteratorUtils.indexOf(iterableA.iterator(), null));\n+            fail(\"expecting NullPointerException\");\n+        } catch (final NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n     public void getFromIterator() throws Exception {\n         // Iterator, entry exists\n         Iterator<Integer> iterator = iterableA.iterator();", "timestamp": 1435002527, "metainfo": ""}