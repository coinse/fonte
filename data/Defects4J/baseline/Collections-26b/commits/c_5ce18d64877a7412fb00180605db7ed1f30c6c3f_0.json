{"sha": "5ce18d64877a7412fb00180605db7ed1f30c6c3f", "log": "Privatise key & value; add protected setters (fields were protected)  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/keyvalue/AbstractKeyValue.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/AbstractKeyValue.java\n public abstract class AbstractKeyValue<K, V> implements KeyValue<K, V> {\n \n     /** The key */\n-    protected K key;\n+    private K key;\n     /** The value */\n-    protected V value;\n+    private V value;\n \n     /**\n      * Constructs a new pair with the specified key and given value.\n         return key;\n     }\n \n+    protected K setKey(K key) {\n+        final K old = this.key;\n+        this.key = key;\n+        return old;\n+    }\n+\n     /**\n      * Gets the value from the pair.\n      *\n      */\n     public V getValue() {\n         return value;\n+    }\n+\n+    protected V setValue(V value) {\n+        final V old = this.value;\n+        this.value = value;\n+        return old;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntry.java\n \n     // Map.Entry interface\n     //-------------------------------------------------------------------------\n-    /** \n+    /**\n      * Sets the value stored in this <code>Map.Entry</code>.\n      * <p>\n      * This <code>Map.Entry</code> is not connected to a Map, so only the\n      * @param value  the new value\n      * @return the previous value\n      */\n+    @Override\n     public V setValue(final V value) {\n-        final V answer = this.value;\n-        this.value = value;\n-        return answer;\n+        return super.setValue(value);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue.java\n      * @return the old key\n      * @throws IllegalArgumentException if key is this object\n      */\n+    @Override\n     public K setKey(final K key) {\n         if (key == this) {\n             throw new IllegalArgumentException(\"DefaultKeyValue may not contain itself as a key.\");\n         }\n \n-        final K old = this.key;\n-        this.key = key;\n-        return old;\n+        return super.setKey(key);\n     }\n \n     /** \n      * @param value the new value\n      * @throws IllegalArgumentException if value is this object\n      */\n+    @Override\n     public V setValue(final V value) {\n         if (value == this) {\n             throw new IllegalArgumentException(\"DefaultKeyValue may not contain itself as a value.\");\n         }\n \n-        final V old = this.value;\n-        this.value = value;\n-        return old;\n+        return super.setValue(value);\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1367325852, "metainfo": ""}