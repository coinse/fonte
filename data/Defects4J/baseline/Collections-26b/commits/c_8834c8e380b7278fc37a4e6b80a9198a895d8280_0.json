{"sha": "8834c8e380b7278fc37a4e6b80a9198a895d8280", "log": "[COLLECTIONS-533] Changing SetValuedLinkedHashMap's default collection to LinkedHashSet to preserve insertion order & some more tests  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/multimap/MultiValuedLinkedHashMap.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/MultiValuedLinkedHashMap.java\n  */\n package org.apache.commons.collections4.multimap;\n \n-import java.util.Collection;\n-import java.util.LinkedHashMap;\n-import java.util.HashSet;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n import org.apache.commons.collections4.ListValuedMap;\n import org.apache.commons.collections4.MultiValuedMap;\n \n     /**\n      * Creates a {@link SetValuedMap} with a {@link LinkedHashMap} as its internal\n-     * storage\n+     * storage. This <code>SetValuedMap</code> implementation uses {@link LinkedHashSet} as its\n+     * underlying <code>Collection</code> to preserve the item insertion order\n      *\n      * @param <K> the key type\n      * @param <V> the value type\n      */\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public static <K, V> SetValuedMap<K, V> setValuedLinkedHashMap() {\n-        return new SetValuedLinkedHashMap(HashSet.class);\n+        return new SetValuedLinkedHashMap(LinkedHashSet.class);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/collections4/multimap/MultiValuedLinkedHashMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/multimap/MultiValuedLinkedHashMapTest.java\n         assertFalse(setMap.containsKey(\"A\"));\n     }\n \n+    public void testSetValuedMapIterationOrder() {\n+        SetValuedMap<K, V> setMap = MultiValuedLinkedHashMap.setValuedLinkedHashMap();\n+        addSampleMappings(setMap);\n+\n+        MapIterator<K, V> mapIt = setMap.mapIterator();\n+        Iterator keyIt = Arrays.asList(getSampleKeys()).iterator();\n+        Iterator valueIt = Arrays.asList(getSampleValues()).iterator();\n+\n+        while(mapIt.hasNext()) {\n+            mapIt.next();\n+            assertEquals(mapIt.getKey(), keyIt.next());\n+            assertEquals(mapIt.getValue(), valueIt.next());\n+        }\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     public void testListValuedMapAdd() {\n         final ListValuedMap<K, V> listMap = MultiValuedLinkedHashMap.listValuedLinkedHashMap();\n         assertEquals(2, listMap.get(\"B\").size());\n     }\n \n+    public void testListValuedMapIterationOrder() {\n+        ListValuedMap<K, V> listMap = MultiValuedLinkedHashMap.listValuedLinkedHashMap();\n+        addSampleMappings(listMap);\n+\n+        MapIterator<K, V> mapIt = listMap.mapIterator();\n+        Iterator keyIt = Arrays.asList(getSampleKeys()).iterator();\n+        Iterator valueIt = Arrays.asList(getSampleValues()).iterator();\n+\n+        while(mapIt.hasNext()) {\n+            mapIt.next();\n+            assertEquals(mapIt.getKey(), keyIt.next());\n+            assertEquals(mapIt.getValue(), valueIt.next());\n+        }\n+    }\n+\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public void testEqualsHashCodeContract() {\n         MultiValuedMap map1 = new MultiValuedLinkedHashMap();", "timestamp": 1413545243, "metainfo": ""}