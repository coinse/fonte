{"sha": "7b2af5cff145d15c0ed0e80860592a05845243fa", "log": "scope variables, group assertions into blocks   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.27 2003/10/09 10:48:19 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.28 2003/10/09 11:00:09 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  * \n- * @version $Revision: 1.27 $ $Date: 2003/10/09 10:48:19 $\n+ * @version $Revision: 1.28 $ $Date: 2003/10/09 11:00:09 $\n  */\n public class TestCollectionUtils extends TestCase {\n     \n     }\n     \n     public void testGet() {     \n-        // Unordered map, entries exist\n-        {\n+        {\n+            // Unordered map, entries exist\n             Map expected = new HashMap();\n             expected.put(\"zeroKey\", \"zero\");\n             expected.put(\"oneKey\", \"one\");\n                 // expected\n             }\n         }\n-        Object test;\n-        // Sorted map, entries exist, should respect order\n-        SortedMap map2 = new TreeMap();\n-        map2.put(\"zeroKey\", \"zero\");\n-        map2.put(\"oneKey\", \"one\");\n-        test = CollectionUtils.get(map2, 1);\n-        assertEquals(\"zeroKey\",((Map.Entry) test).getKey());\n-        assertEquals(\"zero\",((Map.Entry) test).getValue());\n-        test = CollectionUtils.get(map2, 0);\n-        assertEquals(\"oneKey\",((Map.Entry) test).getKey());\n-        assertEquals(\"one\",((Map.Entry) test).getValue());\n+\n+        {\n+            // Sorted map, entries exist, should respect order\n+            SortedMap map = new TreeMap();\n+            map.put(\"zeroKey\", \"zero\");\n+            map.put(\"oneKey\", \"one\");\n+            Object test = CollectionUtils.get(map, 1);\n+            assertEquals(\"zeroKey\",((Map.Entry) test).getKey());\n+            assertEquals(\"zero\",((Map.Entry) test).getValue());\n+            test = CollectionUtils.get(map, 0);\n+            assertEquals(\"oneKey\",((Map.Entry) test).getKey());\n+            assertEquals(\"one\",((Map.Entry) test).getValue());\n+        }\n                 \n-        // List, entry exists\n-        List list = new ArrayList();\n-        list.add(\"zero\");\n-        list.add(\"one\");\n-        test = CollectionUtils.get(list, 0);\n-        assertEquals(\"zero\",test);\n-        test = CollectionUtils.get(list, 1);\n-        assertEquals(\"one\",test);\n-        \n-        // list, non-existent entry -- IndexOutOfBoundsException\n-        try {\n-            test = CollectionUtils.get(list, 2);\n-            fail(\"Expecting IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-        \n-        // Iterator, entry exists\n-        Iterator iterator = list.iterator();\n-        test = CollectionUtils.get(iterator,0);\n-        assertEquals(\"zero\",test);\n-        iterator = list.iterator();\n-        test = CollectionUtils.get(iterator,1);\n-        assertEquals(\"one\",test);\n-        \n-        // Iterator, non-existent entry \n-        try {\n-            test = CollectionUtils.get(iterator,3);\n-            fail(\"Expecting IndexOutOfBoundsException.\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-        assertTrue(!iterator.hasNext());\n-        \n-        // Enumeration, entry exists\n-        Vector vector = new Vector(list);\n-        Enumeration enum = vector.elements();\n-        test = CollectionUtils.get(enum,0);\n-        assertEquals(\"zero\",test);\n-        enum = vector.elements();\n-        test = CollectionUtils.get(enum,1);\n-        assertEquals(\"one\",test);\n-        \n-        // Enumerator, non-existent entry \n-        try {\n-            test = CollectionUtils.get(enum,3);\n-            fail(\"Expecting IndexOutOfBoundsException.\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-        assertTrue(!enum.hasMoreElements());\n-        \n-        // Collection, entry exists\n-        Bag bag = new HashBag();\n-        bag.add(\"element\", 1);\n-        test = CollectionUtils.get(bag, 0);\n-        assertEquals(\"element\",test);\n-        \n-        // Collection, non-existent entry\n-        try {\n-            test = CollectionUtils.get(bag, 1);\n-            fail(\"Expceting IndexOutOfBoundsException.\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-        \n-        // Object array, entry exists\n-        Object[] objArray = new Object[2];\n-        objArray[0] = \"zero\";\n-        objArray[1] = \"one\";\n-        test = CollectionUtils.get(objArray,0);\n-        assertEquals(\"zero\",test);\n-        test = CollectionUtils.get(objArray,1);\n-        assertEquals(\"one\",test);\n-        \n-        // Object array, non-existent entry -- ArrayIndexOutOfBoundsException\n-        try {\n-            test = CollectionUtils.get(objArray,2);\n-            fail(\"Expecting ArrayIndexOutOfBoundsException.\");\n-        } catch (ArrayIndexOutOfBoundsException ex) {\n-            // expected\n-        }\n-        \n-        // Invalid object\n-        Object obj = new Object();\n-        try {\n-            test = CollectionUtils.get(obj, 0);\n-            fail(\"Expecting IllegalArgumentException.\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n+        {\n+            // List, entry exists\n+            List list = new ArrayList();\n+            list.add(\"zero\");\n+            list.add(\"one\");\n+            assertEquals(\"zero\",CollectionUtils.get(list, 0));\n+            assertEquals(\"one\",CollectionUtils.get(list, 1));\n+            // list, non-existent entry -- IndexOutOfBoundsException\n+            try {\n+                CollectionUtils.get(list, 2);\n+                fail(\"Expecting IndexOutOfBoundsException\");\n+            } catch (IndexOutOfBoundsException e) {\n+                // expected\n+            }\n+\n+            // Iterator, entry exists\n+            Iterator iterator = list.iterator();\n+            assertEquals(\"zero\",CollectionUtils.get(iterator,0));\n+            iterator = list.iterator();\n+            assertEquals(\"one\",CollectionUtils.get(iterator,1));\n+        \n+            // Iterator, non-existent entry \n+            try {\n+                CollectionUtils.get(iterator,3);\n+                fail(\"Expecting IndexOutOfBoundsException.\");\n+            } catch (IndexOutOfBoundsException e) {\n+                // expected\n+            }\n+            assertTrue(!iterator.hasNext());\n+        }\n+        \n+        {\n+            // Enumeration, entry exists\n+            Vector vector = new Vector();\n+            vector.addElement(\"zero\");\n+            vector.addElement(\"one\");\n+            Enumeration enum = vector.elements();\n+            assertEquals(\"zero\",CollectionUtils.get(enum,0));\n+            enum = vector.elements();\n+            assertEquals(\"one\",CollectionUtils.get(enum,1));\n+        \n+            // Enumerator, non-existent entry \n+            try {\n+                CollectionUtils.get(enum,3);\n+                fail(\"Expecting IndexOutOfBoundsException.\");\n+            } catch (IndexOutOfBoundsException e) {\n+                // expected\n+            }\n+            assertTrue(!enum.hasMoreElements());\n+        }\n+        \n+        {\n+            // Collection, entry exists\n+            Bag bag = new HashBag();\n+            bag.add(\"element\", 1);\n+            assertEquals(\"element\",CollectionUtils.get(bag, 0));\n+        \n+            // Collection, non-existent entry\n+            try {\n+                CollectionUtils.get(bag, 1);\n+                fail(\"Expceting IndexOutOfBoundsException.\");\n+            } catch (IndexOutOfBoundsException e) {\n+                // expected\n+            }\n+        }\n+        \n+        {\n+            // Object array, entry exists\n+            Object[] objArray = new Object[2];\n+            objArray[0] = \"zero\";\n+            objArray[1] = \"one\";\n+            assertEquals(\"zero\",CollectionUtils.get(objArray,0));\n+            assertEquals(\"one\",CollectionUtils.get(objArray,1));\n+        \n+            // Object array, non-existent entry -- ArrayIndexOutOfBoundsException\n+            try {\n+                CollectionUtils.get(objArray,2);\n+                fail(\"Expecting IndexOutOfBoundsException.\");\n+            } catch (IndexOutOfBoundsException ex) {\n+                // expected\n+            }\n+        }\n+        \n+        {\n+            // Invalid object\n+            Object obj = new Object();\n+            try {\n+                CollectionUtils.get(obj, 0);\n+                fail(\"Expecting IllegalArgumentException.\");\n+            } catch (IllegalArgumentException e) {\n+                // expected\n+            }\n         }\n     }\n ", "timestamp": 1065697209, "metainfo": ""}