{"sha": "db5765e6bebbb34d41680649dea934e9b2cd242a", "log": "Tidy imports, javadoc and field access   ", "commit": "\n--- a/src/java/org/apache/commons/collections/decorators/AbstractCollectionDecorator.java\n+++ b/src/java/org/apache/commons/collections/decorators/AbstractCollectionDecorator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractCollectionDecorator.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractCollectionDecorator.java,v 1.2 2003/05/07 11:20:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to write an unmodifiable implementation it might provide a loophole.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/07 11:20:21 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n public abstract class AbstractCollectionDecorator implements Collection {\n \n     /** The collection being decorated */\n-    protected final Collection collection;\n+    private final Collection collection;\n \n     /**\n      * Constructor that wraps (not copies).\n         this.collection = coll;\n     }\n \n+    /**\n+     * Gets the collection being decorated.\n+     * \n+     * @return the decorated collection\n+     */\n+    protected Collection getCollection() {\n+        return collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public boolean add(Object object) {\n         return collection.add(object);\n     }\n--- a/src/java/org/apache/commons/collections/decorators/AbstractListDecorator.java\n+++ b/src/java/org/apache/commons/collections/decorators/AbstractListDecorator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractListDecorator.java,v 1.2 2003/05/05 23:25:22 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractListDecorator.java,v 1.3 2003/05/07 11:20:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Methods are forwarded directly to the decorated list.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/05 23:25:22 $\n+ * @version $Revision: 1.3 $ $Date: 2003/05/07 11:20:21 $\n  * \n  * @author Stephen Colebourne\n  */\n         super(list);\n     }\n \n+    /**\n+     * Gets the list being decorated.\n+     * \n+     * @return the decorated list\n+     */\n+    protected List getList() {\n+        return (List) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void add(int index, Object object) {\n         getList().add(index, object);\n     }\n         return getList().subList(fromIndex, toIndex);\n     }\n \n-    protected List getList() {\n-        return (List) collection;\n-    }\n-\n }\n--- a/src/java/org/apache/commons/collections/decorators/AbstractListIteratorDecorator.java\n+++ b/src/java/org/apache/commons/collections/decorators/AbstractListIteratorDecorator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractListIteratorDecorator.java,v 1.2 2003/05/05 23:25:22 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractListIteratorDecorator.java,v 1.3 2003/05/07 11:20:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * for some list implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/05 23:25:22 $\n+ * @version $Revision: 1.3 $ $Date: 2003/05/07 11:20:21 $\n  * \n  * @author Stephen Colebourne\n  */\n public abstract class AbstractListIteratorDecorator implements ListIterator {\n \n     /** The iterator to delegate to */\n-    protected final ListIterator iterator;\n+    private final ListIterator iterator;\n \n     /**\n      * Constructor that wraps the specified iterator.\n     public AbstractListIteratorDecorator(ListIterator iterator) {\n         this.iterator = iterator;\n     }\n+    \n+    /**\n+     * Gets the decorated iterator.\n+     * \n+     * @return the decorated iterator\n+     */\n+    protected ListIterator getIterator() {\n+        return iterator;\n+    }\n \n+    //-----------------------------------------------------------------------\n     public boolean hasNext() {\n         return iterator.hasNext();\n     }\n--- a/src/java/org/apache/commons/collections/decorators/FixedSizeList.java\n+++ b/src/java/org/apache/commons/collections/decorators/FixedSizeList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/FixedSizeList.java,v 1.2 2003/05/05 23:25:22 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/FixedSizeList.java,v 1.3 2003/05/07 11:20:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * The set method is allowed (as it doesn't change the list size).\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/05 23:25:22 $\n+ * @version $Revision: 1.3 $ $Date: 2003/05/07 11:20:21 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n         super(list);\n     }\n \n+    /**\n+     * Gets the list being decorated.\n+     * \n+     * @return the decorated list\n+     */\n+    protected List getList() {\n+        return (List) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void add(int index, Object object) {\n         throw new UnsupportedOperationException();\n     }\n     }\n \n     public ListIterator listIterator(int index) {\n-        return new AbstractListIteratorDecorator(getList().listIterator(index)) {\n-            public void remove() {\n-                throw new UnsupportedOperationException();\n-            }\n-\n-            public void add(Object object) {\n-                throw new UnsupportedOperationException();\n-            }\n-\n-            public void remove(Object object) {\n-                throw new UnsupportedOperationException();\n-            }\n-        };\n+        return new FixedSizeListIterator(getList().listIterator(index));\n     }\n \n     public Object remove(int index) {\n         return new FixedSizeList(sub);\n     }\n \n-    protected List getList() {\n-        return (List) collection;\n+    /**\n+     * List iterator that only permits changes via set()\n+     */\n+    public static class FixedSizeListIterator extends AbstractListIteratorDecorator {\n+        protected FixedSizeListIterator(ListIterator iterator) {\n+            super(iterator);\n+        }\n+        public void remove() {\n+            throw new UnsupportedOperationException();\n+        }\n+        public void add(Object object) {\n+            throw new UnsupportedOperationException();\n+        }\n+        public void remove(Object object) {\n+            throw new UnsupportedOperationException();\n+        }\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/decorators/LazyList.java\n+++ b/src/java/org/apache/commons/collections/decorators/LazyList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/LazyList.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/LazyList.java,v 1.2 2003/05/07 11:20:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * and third element are all set to <code>null</code>.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/07 11:20:21 $\n  * \n  * @author Stephen Colebourne\n  * @author Arron Bates\n         this.factory = factory;\n     }\n \n-    \n+    //-----------------------------------------------------------------------\n     /**\n      * Decorate the get method to perform the lazy behaviour.\n      * <p>\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedCollection.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedCollection.java,v 1.2 2003/05/07 11:20:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/07 11:20:21 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Override to validate the object being added to ensure it matches\n      * the predicate.\n      */\n     public boolean add(Object object) {\n         validate(object);\n-        return collection.add(object);\n+        return getCollection().add(object);\n     }\n \n     /**\n         for (Iterator it = coll.iterator(); it.hasNext(); ) {\n             validate(it.next());\n         }\n-        return collection.addAll(coll);\n+        return getCollection().addAll(coll);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedList.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedList.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedList.java,v 1.2 2003/05/07 11:20:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/07 11:20:21 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n public class PredicatedList extends PredicatedCollection implements List {\n \n     /**\n-     * Factory method to create a predicated (validating) collection.\n+     * Factory method to create a predicated (validating) list.\n      * <p>\n      * If there are any elements already in the list being decorated, they\n      * are validated.\n      * \n-     * @param coll  the collection to decorate, must not be null\n+     * @param list  the list to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n-     * @throws IllegalArgumentException if collection or predicate is null\n-     * @throws IllegalArgumentException if the collection contains invalid elements\n+     * @throws IllegalArgumentException if list or predicate is null\n+     * @throws IllegalArgumentException if the list contains invalid elements\n      */\n     public static List decorate(List list, Predicate predicate) {\n         return new PredicatedList(list, predicate);\n      * \n      * @param list  the list to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n-     * @throws IllegalArgumentException if collection or predicate is null\n-     * @throws IllegalArgumentException if the collection contains invalid elements\n+     * @throws IllegalArgumentException if list or predicate is null\n+     * @throws IllegalArgumentException if the list contains invalid elements\n      */\n     protected PredicatedList(List list, Predicate predicate) {\n         super(list, predicate);\n     }\n \n+    /**\n+     * Gets the list being decorated.\n+     * \n+     * @return the decorated list\n+     */\n+    protected List getList() {\n+        return (List) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void add(int index, Object object) {\n         validate(object);\n         getList().add(index, object);\n         return new AbstractListIteratorDecorator(getList().listIterator(i)) {\n             public void add(Object object) {\n                 validate(object);\n-                iterator.add(object);\n+                getIterator().add(object);\n             }\n \n             public void set(Object object) {\n                 validate(object);\n-                iterator.set(object);\n+                getIterator().set(object);\n             }\n         };\n     }\n         return new PredicatedList(sub, predicate);\n     }\n \n-    protected List getList() {\n-        return (List) collection;\n-    }\n-\n }\n--- a/src/java/org/apache/commons/collections/decorators/SynchronizedCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/SynchronizedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SynchronizedCollection.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SynchronizedCollection.java,v 1.2 2003/05/07 11:20:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * }\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/07 11:20:21 $\n  * \n  * @author Stephen Colebourne\n  */\n \n     /** The collection to decorate */\n     protected final Collection collection;\n+    /** The object to lock on, needed for List/SortedSet views */\n+    protected final Object lock;\n \n     /**\n      * Factory method to create a synchronized collection.\n             throw new IllegalArgumentException(\"Collection must not be null\");\n         }\n         this.collection = collection;\n-    }\n-\n-    public synchronized boolean add(Object object) {\n-        return collection.add(object);\n-    }\n-\n-    public synchronized boolean addAll(Collection coll) {\n-        return collection.addAll(coll);\n-    }\n-\n-    public synchronized void clear() {\n-        collection.clear();\n-    }\n-\n-    public synchronized boolean contains(Object object) {\n-        return collection.contains(object);\n-    }\n-\n-    public synchronized boolean containsAll(Collection coll) {\n-        return collection.containsAll(coll);\n-    }\n-\n-    public synchronized boolean isEmpty() {\n-        return collection.isEmpty();\n+        this.lock = this;\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param lock  the lock object to use, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    protected SynchronizedCollection(Collection collection, Object lock) {\n+        if (collection == null) {\n+            throw new IllegalArgumentException(\"Collection must not be null\");\n+        }\n+        this.collection = collection;\n+        this.lock = lock;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean add(Object object) {\n+        synchronized (lock) {\n+            return collection.add(object);\n+        }\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        synchronized (lock) {\n+            return collection.addAll(coll);\n+        }\n+    }\n+\n+    public void clear() {\n+        synchronized (lock) {\n+            collection.clear();\n+        }\n+    }\n+\n+    public boolean contains(Object object) {\n+        synchronized (lock) {\n+            return collection.contains(object);\n+        }\n+    }\n+\n+    public boolean containsAll(Collection coll) {\n+        synchronized (lock) {\n+            return collection.containsAll(coll);\n+        }\n+    }\n+\n+    public boolean isEmpty() {\n+        synchronized (lock) {\n+            return collection.isEmpty();\n+        }\n     }\n \n     /**\n         return collection.iterator();\n     }\n \n-    public synchronized Object[] toArray() {\n-        return collection.toArray();\n-    }\n-\n-    public synchronized Object[] toArray(Object[] object) {\n-        return collection.toArray(object);\n-    }\n-\n-    public synchronized boolean remove(Object object) {\n-        return collection.remove(object);\n-    }\n-\n-    public synchronized boolean removeAll(Collection coll) {\n-        return collection.removeAll(coll);\n-    }\n-\n-    public synchronized boolean retainAll(Collection coll) {\n-        return collection.retainAll(coll);\n-    }\n-\n-    public synchronized int size() {\n-        return collection.size();\n-    }\n-\n-    public synchronized boolean equals(Object object) {\n-        if (object == this) {\n-            return true;\n-        }\n-        return collection.equals(object);\n-    }\n-\n-    public synchronized int hashCode() {\n-        return collection.hashCode();\n-    }\n-\n-    public synchronized String toString() {\n-        return collection.toString();\n+    public Object[] toArray() {\n+        synchronized (lock) {\n+            return collection.toArray();\n+        }\n+    }\n+\n+    public Object[] toArray(Object[] object) {\n+        synchronized (lock) {\n+            return collection.toArray(object);\n+        }\n+    }\n+\n+    public boolean remove(Object object) {\n+        synchronized (lock) {\n+            return collection.remove(object);\n+        }\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        synchronized (lock) {\n+            return collection.removeAll(coll);\n+        }\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        synchronized (lock) {\n+            return collection.retainAll(coll);\n+        }\n+    }\n+\n+    public int size() {\n+        synchronized (lock) {\n+            return collection.size();\n+        }\n+    }\n+\n+    public boolean equals(Object object) {\n+        synchronized (lock) {\n+            if (object == this) {\n+                return true;\n+            }\n+            return collection.equals(object);\n+        }\n+    }\n+\n+    public int hashCode() {\n+        synchronized (lock) {\n+            return collection.hashCode();\n+        }\n+    }\n+\n+    public String toString() {\n+        synchronized (lock) {\n+            return collection.toString();\n+        }\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/decorators/SynchronizedList.java\n+++ b/src/java/org/apache/commons/collections/decorators/SynchronizedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SynchronizedList.java,v 1.2 2003/05/05 23:25:22 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SynchronizedList.java,v 1.3 2003/05/07 11:20:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Methods are synchronized, then forwarded to the decorated list.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/05 23:25:22 $\n+ * @version $Revision: 1.3 $ $Date: 2003/05/07 11:20:21 $\n  * \n  * @author Stephen Colebourne\n  */\n      * Factory method to create a synchronized list.\n      * \n      * @param list  the list to decorate, must not be null\n-     * @throws IllegalArgumentException if collection is null\n+     * @throws IllegalArgumentException if list is null\n      */\n     public static List decorate(List list) {\n         return new SynchronizedList(list);\n         super(list);\n     }\n \n-    public synchronized void add(int index, Object object) {\n-        getList().add(index, object);\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param lock  the lock to use, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected SynchronizedList(List list, Object lock) {\n+        super(list, lock);\n     }\n \n-    public synchronized boolean addAll(int index, Collection coll) {\n-        return getList().addAll(index, coll);\n+    /**\n+     * Gets the decorated list.\n+     * \n+     * @return the decorated list\n+     */\n+    protected List getList() {\n+        return (List) collection;\n     }\n \n-    public synchronized Object get(int index) {\n-        return getList().get(index);\n+    //-----------------------------------------------------------------------\n+    public void add(int index, Object object) {\n+        synchronized (lock) {\n+            getList().add(index, object);\n+        }\n     }\n \n-    public synchronized int indexOf(Object object) {\n-        return getList().indexOf(object);\n+    public boolean addAll(int index, Collection coll) {\n+        synchronized (lock) {\n+            return getList().addAll(index, coll);\n+        }\n     }\n \n-    public synchronized int lastIndexOf(Object object) {\n-        return getList().lastIndexOf(object);\n+    public Object get(int index) {\n+        synchronized (lock) {\n+            return getList().get(index);\n+        }\n+    }\n+\n+    public int indexOf(Object object) {\n+        synchronized (lock) {\n+            return getList().indexOf(object);\n+        }\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        synchronized (lock) {\n+            return getList().lastIndexOf(object);\n+        }\n     }\n \n     /**\n         return getList().listIterator(index);\n     }\n \n-    public synchronized Object remove(int index) {\n-        return getList().remove(index);\n+    public Object remove(int index) {\n+        synchronized (lock) {\n+            return getList().remove(index);\n+        }\n     }\n \n-    public synchronized Object set(int index, Object object) {\n-        return getList().set(index, object);\n+    public Object set(int index, Object object) {\n+        synchronized (lock) {\n+            return getList().set(index, object);\n+        }\n     }\n \n-    public synchronized List subList(int fromIndex, int toIndex) {\n-        return getList().subList(fromIndex, toIndex);\n-    }\n-\n-    protected List getList() {\n-        return (List) collection;\n+    public List subList(int fromIndex, int toIndex) {\n+        synchronized (lock) {\n+            List list = getList().subList(fromIndex, toIndex);\n+            // the lock is passed into the constructor here to ensure that the sublist is\n+            // synchronized on the same lock as the parent list\n+            return new SynchronizedList(list, lock);\n+        }\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/decorators/TypedList.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedList.java,v 1.1 2003/04/29 18:43:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedList.java,v 1.2 2003/05/07 11:20:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/04/29 18:43:47 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/07 11:20:21 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n public class TypedList extends PredicatedList {\n \n     /**\n-     * Factory method to create a typed collection.\n+     * Factory method to create a typed list.\n      * <p>\n-     * If there are any elements already in the collection being decorated, they\n+     * If there are any elements already in the list being decorated, they\n      * are validated.\n      * \n      * @param list  the list to decorate, must not be null\n     /**\n      * Constructor that wraps (not copies).\n      * <p>\n-     * If there are any elements already in the collection being decorated, they\n+     * If there are any elements already in the list being decorated, they\n      * are validated.\n      * \n      * @param list  the list to decorate, must not be null\n--- a/src/java/org/apache/commons/collections/decorators/UnmodifiableCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/UnmodifiableCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableCollection.java,v 1.2 2003/05/05 23:25:22 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableCollection.java,v 1.3 2003/05/07 11:20:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/05 23:25:22 $\n+ * @version $Revision: 1.3 $ $Date: 2003/05/07 11:20:21 $\n  * \n  * @author Stephen Colebourne\n  */\n         super(coll);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Override as method unsupported.\n      * @throws UnsupportedOperationException\n      * @return unmodifiable iterator\n      */\n     public Iterator iterator() {\n-        return IteratorUtils.unmodifiableIterator(collection.iterator());\n+        return IteratorUtils.unmodifiableIterator(getCollection().iterator());\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/decorators/UnmodifiableList.java\n+++ b/src/java/org/apache/commons/collections/decorators/UnmodifiableList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableList.java,v 1.2 2003/05/05 23:25:22 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableList.java,v 1.3 2003/05/07 11:20:21 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/05 23:25:22 $\n+ * @version $Revision: 1.3 $ $Date: 2003/05/07 11:20:21 $\n  * \n  * @author Stephen Colebourne\n  */\n         super(list);\n     }\n \n+    /**\n+     * Gets the list being decorated.\n+     * \n+     * @return the decorated list\n+     */\n+    protected List getList() {\n+        return (List) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void add(int index, Object object) {\n         throw new UnsupportedOperationException();\n     }\n         return new UnmodifiableList(sub);\n     }\n \n-    protected List getList() {\n-        return (List) collection;\n-    }\n-\n }", "timestamp": 1052306421, "metainfo": ""}