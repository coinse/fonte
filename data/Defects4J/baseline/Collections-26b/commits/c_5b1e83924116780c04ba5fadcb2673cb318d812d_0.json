{"sha": "5b1e83924116780c04ba5fadcb2673cb318d812d", "log": "Add specific classes (singleton) for empty cases Add toList and toArray Rename certain methods to toXxx and asXxx   ", "commit": "\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.1 2002/08/17 11:38:53 scolebourne Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/17 11:38:53 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.2 2002/08/17 22:14:22 scolebourne Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/17 22:14:22 $\n  *\n  * ====================================================================\n  *\n  */\n package org.apache.commons.collections;\n \n+import java.lang.reflect.Array;\n import java.lang.reflect.Method;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.Dictionary;\n import java.util.Enumeration;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.ListIterator;\n import java.util.Map;\n+import java.util.NoSuchElementException;\n \n import org.apache.commons.collections.iterators.ArrayIterator;\n import org.apache.commons.collections.iterators.CollatingIterator;\n  * <code>org.apache.commons.collections.iterators</code> subpackage.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: IteratorUtils.java,v 1.1 2002/08/17 11:38:53 scolebourne Exp $\n+ * @version $Id: IteratorUtils.java,v 1.2 2002/08/17 22:14:22 scolebourne Exp $\n  * @since 2.1\n  */\n public class IteratorUtils {\n     // public classes allow invalid states\n \n     /**\n+     * An iterator over no elements\n+     */    \n+    public static final Iterator EMPTY_ITERATOR = new EmptyIterator();\n+    /**\n+     * A list iterator over no elements\n+     */    \n+    public static final ListIterator EMPTY_LIST_ITERATOR = new EmptyListIterator();\n+\n+    /**\n      * Prevents instantiation.\n      */\n     private IteratorUtils() {\n      * @return  an iterator over nothing\n      */\n     public static Iterator emptyIterator() {\n-        return Collections.EMPTY_LIST.iterator();\n+        return EMPTY_ITERATOR;\n     }\n \n     /**\n      * @return  a list iterator over nothing\n      */\n     public static ListIterator emptyListIterator() {\n-        return Collections.EMPTY_LIST.listIterator();\n+        return EMPTY_LIST_ITERATOR;\n     }\n \n     /**\n     }\n     \n     /**\n+     * Gets an iterator that provides an iterator view of the given enumeration.\n+     *\n+     * @param enumeration  the enumeration to use\n+     */\n+    public static Iterator asIterator(Enumeration enumeration) {\n+        if (enumeration == null) {\n+            throw new NullPointerException(\"Enumeration must not be null\");\n+        }\n+        return new EnumerationIterator(enumeration);\n+    }\n+\n+    /**\n+     * Gets an iterator that provides an iterator view of the given enumeration \n+     * that will remove elements from the specified collection.\n+     *\n+     * @param enumeration  the enumeration to use\n+     * @param collection  the collection to remove elements form\n+     */\n+    public static Iterator asIterator(Enumeration enumeration, Collection removeCollection) {\n+        if (enumeration == null) {\n+            throw new NullPointerException(\"Enumeration must not be null\");\n+        }\n+        if (removeCollection == null) {\n+            throw new NullPointerException(\"Collection must not be null\");\n+        }\n+        return new EnumerationIterator(enumeration, removeCollection);\n+    }\n+    \n+    /**\n+     * Gets an enumeration that wraps an iterator.\n+     *\n+     * @param iterator  the iterator to use, not null\n+     * @throws NullPointerException if iterator is null\n+     */\n+    public static Enumeration asEnumeration(Iterator iterator) {\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        return new IteratorEnumeration(iterator);\n+    }\n+    \n+    /**\n      * Gets a list iterator based on a simple iterator.\n      * <p>\n      * As the wrapped Iterator is traversed, a LinkedList of its values is\n      * @param iterator  the iterator to use, not null\n      * @throws NullPointerException if iterator parameter is null\n      */\n-    public static Iterator iteratorListIterator(Iterator iterator) {\n-        return new ListIteratorWrapper(iterator);\n-    }\n-    \n-    /**\n-     * Gets an iterator that provides an iterator view of the given enumeration.\n-     *\n-     * @param enumeration  the enumeration to use\n-     */\n-    public static Iterator enumerationIterator(Enumeration enumeration) {\n-        if (enumeration == null) {\n-            throw new NullPointerException(\"Enumeration must not be null\");\n-        }\n-        return new EnumerationIterator(enumeration);\n-    }\n-\n-    /**\n-     * Gets an iterator that provides an iterator view of the given enumeration \n-     * that will remove elements from the specified collection.\n-     *\n-     * @param enumeration  the enumeration to use\n-     * @param collection  the collection to remove elements form\n-     */\n-    public static Iterator enumerationIterator(Enumeration enumeration, Collection removeCollection) {\n-        if (enumeration == null) {\n-            throw new NullPointerException(\"Enumeration must not be null\");\n-        }\n-        if (removeCollection == null) {\n-            throw new NullPointerException(\"Collection must not be null\");\n-        }\n-        return new EnumerationIterator(enumeration, removeCollection);\n-    }\n-    \n-    /**\n-     * Gets an enumeration that wraps an iterator.\n-     *\n-     * @param iterator  the iterator to use, not null\n-     * @throws NullPointerException if iterator is null\n-     */\n-    public static Enumeration iteratorEnumeration(Iterator iterator) {\n+    public static ListIterator toListIterator(Iterator iterator) {\n         if (iterator == null) {\n             throw new NullPointerException(\"Iterator must not be null\");\n         }\n-        return new IteratorEnumeration(iterator);\n+        return new ListIteratorWrapper(iterator);\n+    }\n+    \n+    /**\n+     * Gets an array based on an iterator.\n+     * <p>\n+     * As the wrapped Iterator is traversed, an ArrayList of its values is\n+     * created. At the end, this is converted to an array.\n+     *\n+     * @param iterator  the iterator to use, not null\n+     * @throws NullPointerException if iterator parameter is null\n+     */\n+    public static Object[] toArray(Iterator iterator) {\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        List list = toList(iterator, 100);\n+        return list.toArray();\n+    }\n+    \n+    /**\n+     * Gets an array based on an iterator.\n+     * <p>\n+     * As the wrapped Iterator is traversed, an ArrayList of its values is\n+     * created. At the end, this is converted to an array.\n+     *\n+     * @param iterator  the iterator to use, not null\n+     * @param arrayClass  the class of array to create\n+     * @throws NullPointerException if iterator parameter is null\n+     * @throws NullPointerException if arrayClass is null\n+     * @throws ClassCastException if the arrayClass is invalid\n+     */\n+    public static Object[] toArray(Iterator iterator, Class arrayClass) {\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        if (arrayClass == null) {\n+            throw new NullPointerException(\"Array class must not be null\");\n+        }\n+        List list = toList(iterator, 100);\n+        return list.toArray((Object[]) Array.newInstance(arrayClass, list.size()));\n+    }\n+    \n+    /**\n+     * Gets a list based on an iterator.\n+     * <p>\n+     * As the wrapped Iterator is traversed, an ArrayList of its values is\n+     * created. At the end, the list is returned.\n+     *\n+     * @param iterator  the iterator to use, not null\n+     * @throws NullPointerException if iterator parameter is null\n+     */\n+    public static List toList(Iterator iterator) {\n+        return toList(iterator, 10);\n+    }\n+    \n+    /**\n+     * Gets a list based on an iterator.\n+     * <p>\n+     * As the wrapped Iterator is traversed, an ArrayList of its values is\n+     * created. At the end, the list is returned.\n+     *\n+     * @param iterator  the iterator to use, not null\n+     * @param estimatedSize  the initial size of the ArrayList\n+     * @throws NullPointerException if iterator parameter is null\n+     * @throws IllegalArgumentException if the size is less than 1\n+     */\n+    public static List toList(Iterator iterator, int estimatedSize) {\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        if (estimatedSize < 1) {\n+            throw new IllegalArgumentException(\"Estimated size must be greater than 0\");\n+        }\n+        List list = new ArrayList(estimatedSize);\n+        while (iterator.hasNext()) {\n+            list.add(iterator.next());\n+        }\n+        return list;\n     }\n     \n     /** \n             return singletonIterator(obj);\n         }\n     }\n-\n+    \n+    /**\n+     * EmptyIterator class\n+     */\n+    static class EmptyIterator implements Iterator {\n+        \n+        /**\n+         * @see java.util.Iterator#hasNext()\n+         */\n+        public boolean hasNext() {\n+            return false;\n+        }\n+\n+        /**\n+         * @see java.util.Iterator#next()\n+         */\n+        public Object next() {\n+            throw new NoSuchElementException();\n+        }\n+\n+        /**\n+         * @see java.util.Iterator#remove()\n+         */\n+        public void remove() {\n+            throw new UnsupportedOperationException(\"remove() not supported for empty Iterator\");\n+        }\n+\n+    }\n+    \n+    /**\n+     * EmptyListIterator class\n+     */\n+    static class EmptyListIterator extends EmptyIterator implements ListIterator {\n+        \n+        /**\n+         * @see java.util.ListIterator#hasPrevious()\n+         */\n+        public boolean hasPrevious() {\n+            return false;\n+        }\n+\n+        /**\n+         * @see java.util.ListIterator#previous()\n+         */\n+        public Object previous() {\n+            throw new NoSuchElementException();\n+        }\n+\n+        /**\n+         * @see java.util.ListIterator#nextIndex()\n+         */\n+        public int nextIndex() {\n+            return 0;\n+        }\n+\n+        /**\n+         * @see java.util.ListIterator#previousIndex()\n+         */\n+        public int previousIndex() {\n+            return -1;\n+        }\n+\n+        /**\n+         * @see java.util.ListIterator#add(Object)\n+         */\n+        public void add(Object o) {\n+            throw new UnsupportedOperationException(\"add() not supported for empty Iterator\");\n+        }\n+\n+        /**\n+         * @see java.util.ListIterator#set(Object)\n+         */\n+        public void set(Object o) {\n+            throw new UnsupportedOperationException(\"set() not supported for empty Iterator\");\n+        }\n+\n+    }\n+    \n }", "timestamp": 1029622462, "metainfo": ""}