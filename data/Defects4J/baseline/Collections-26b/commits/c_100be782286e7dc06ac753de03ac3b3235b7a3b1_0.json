{"sha": "100be782286e7dc06ac753de03ac3b3235b7a3b1", "log": "Added missing since tags.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n      * @param b  the second collection, must not be null\n      * @return a new sorted List, containing the elements of Collection a and b\n      * @throws IllegalArgumentException if either collection is null\n+     * @since 4.0\n      */\n     public static <O extends Comparable<? super O>> List<O> merge(Collection<? extends O> a,\n                                                                   Collection<? extends O> b) {\n      *   they will be removed in the output collection\n      * @return a new sorted List, containing the elements of Collection a and b\n      * @throws IllegalArgumentException if either collection is null\n+     * @since 4.0 \n      */\n     public static <O extends Comparable<? super O>> List<O> merge(final Collection<? extends O> a,\n                                                                   final Collection<? extends O> b,\n      * @param c  the comparator to use for the merge. \n      * @return a new sorted List, containing the elements of Collection a and b\n      * @throws IllegalArgumentException if either collection or the comparator is null\n+     * @since 4.0 \n      */\n     public static <O> List<O> merge(final Collection<? extends O> a, final Collection<? extends O> b,\n                                     final Comparator<? super O> c) {\n      *   they will be removed in the output collection\n      * @return a new sorted List, containing the elements of Collection a and b\n      * @throws IllegalArgumentException if either collection or the comparator is null\n+     * @since 4.0 \n      */\n     public static <O> List<O> merge(final Collection<? extends O> a, final Collection<? extends O> b,\n                                     final Comparator<? super O> c, final boolean includeDuplicates) {\n      * @param lastItem  the last added item, may be null\n      * @param includeDuplicates  whether duplicate entries are allowed\n      * @return the last added item\n+     * @since 4.0 \n      */\n     private static <E> E addItemToList(final E item, final List<E> list, final E lastItem,\n                                        final boolean includeDuplicates) {\n      * @param collection  the collection to create permutations for, may not be null\n      * @return an unordered collection of all permutations of the input collection\n      * @throws NullPointerException if collection is null\n+     * @since 4.0 \n      */\n     public static <E> Collection<List<E>> permutations(final Collection<E> collection) {\n         final PermutationIterator<E> it = new PermutationIterator<E>(collection);", "timestamp": 1366665055, "metainfo": ""}