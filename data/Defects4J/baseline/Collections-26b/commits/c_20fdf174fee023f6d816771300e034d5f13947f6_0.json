{"sha": "20fdf174fee023f6d816771300e034d5f13947f6", "log": "[COLLECTIONS-421] Cleanup of ListUtils, use wildcards for hashCodeForList, use generic example in javadoc, thanks to Benedikt Ritter.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ListUtils.java\n  * Provides utility methods and decorators for {@link List} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision$\n- *\n- * @author Federico Barbieri\n- * @author Peter Donald\n- * @author Paul Jack\n- * @author Stephen Colebourne\n- * @author Neil O'Toole\n- * @author Matthew Hawthorne\n- * @author Dave Meikle\n+ * @version $Id$\n  */\n public class ListUtils {\n \n      * Returns a new list containing all elements that are contained in\n      * both given lists.\n      *\n+     * @param <E>  the element type\n      * @param list1  the first list\n      * @param list2  the second list\n      * @return  the intersection of those two lists\n      * contains one occurrence, then the returned list will still contain\n      * one occurrence.\n      *\n+     * @param <E>  the element type\n      * @param list1  the list to subtract from\n      * @param list2  the list to subtract\n      * @return  a new list containing the results\n      * Returns the sum of the given lists.  This is their intersection\n      * subtracted from their union.\n      *\n+     * @param <E>  the element type\n      * @param list1  the first list \n      * @param list2  the second list\n      * @return  a new list containing the sum of those lists\n      * first list.  The {@link List#addAll(Collection)} operation is\n      * used to append the two given lists into a new list.\n      *\n+     * @param <E>  the element type\n      * @param list1  the first list \n      * @param list2  the second list\n      * @return  a new list containing the union of those lists\n      * @param list  the list to generate the hashCode for, may be null\n      * @return the hash code\n      */\n-    public static <E> int hashCodeForList(final Collection<E> list) {\n+    public static int hashCodeForList(final Collection<?> list) {\n         if (list == null) {\n             return 0;\n         }\n         int hashCode = 1;\n-        Iterator<E> it = list.iterator();\n+        Iterator<?> it = list.iterator();\n         \n         while (it.hasNext()) {\n-            E obj = it.next();\n+            Object obj = it.next();\n             hashCode = 31 * hashCode + (obj == null ? 0 : obj.hashCode());\n         }\n         return hashCode;\n      * case the cardinality is zero. This method is useful if you do not wish to modify\n      * the collection <code>c</code> and thus cannot call <code>collection.retainAll(retain);</code>.\n      * \n+     * @param <E>  the element type\n      * @param collection  the collection whose contents are the target of the #retailAll operation\n      * @param retain  the collection containing the elements to be retained in the returned collection\n      * @return a <code>List</code> containing all the elements of <code>c</code>\n      * case the cardinality is zero. This method is useful if you do not wish to modify\n      * <code>collection</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n      * \n+     * @param <E>  the element type\n      * @param collection  the collection from which items are removed (in the returned collection)\n      * @param remove  the items to be removed from the returned <code>collection</code>\n      * @return a <code>List</code> containing all the elements of <code>c</code> except\n      * \n      * This method uses the implementation in the decorators subpackage.\n      * \n+     * @param <E>  the element type\n      * @param list  the list to synchronize, must not be null\n      * @return a synchronized list backed by the given list\n      * @throws IllegalArgumentException  if the list is null\n      * <p>\n      * This method uses the implementation in the decorators subpackage.\n      *\n+     * @param <E>  the element type\n      * @param list  the list to make unmodifiable, must not be null\n      * @return an unmodifiable list backed by the given list\n      * @throws IllegalArgumentException  if the list is null\n      * It is important not to use the original list after invoking this method,\n      * as it is a backdoor for adding invalid objects.\n      *\n+     * @param <E>  the element type\n      * @param list  the list to predicate, must not be null\n      * @param predicate  the predicate for the list, must not be null\n      * @return a predicated list backed by the given list\n      * Existing entries in the specified list will not be transformed.\n      * If you want that behaviour, see {@link TransformedList#transformedList}.\n      *\n+     * @param <E>  the element type\n      * @param list  the list to predicate, must not be null\n      * @param transformer  the transformer for the list, must not be null\n      * @return a transformed list backed by the given list\n      * For instance:\n      *\n      * <pre>\n-     * Factory factory = new Factory() {\n-     *     public Object create() {\n+     * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n+     *     public Date create() {\n      *         return new Date();\n      *     }\n      * }\n-     * List lazy = ListUtils.lazyList(new ArrayList(), factory);\n-     * Object obj = lazy.get(3);\n+     * List&lt;Date&gt; lazy = ListUtils.lazyList(new ArrayList&lt;Date&gt;(), factory);\n+     * Date date = lazy.get(3);\n      * </pre>\n      *\n-     * After the above code is executed, <code>obj</code> will contain\n+     * After the above code is executed, <code>date</code> will contain\n      * a new <code>Date</code> instance.  Furthermore, that <code>Date</code>\n      * instance is the fourth element in the list.  The first, second, \n      * and third element are all set to <code>null</code>.\n      *\n+     * @param <E>  the element type\n      * @param list  the list to make lazy, must not be null\n      * @param factory  the factory for creating new objects, must not be null\n      * @return a lazy list backed by the given list\n      * Returns a fixed-sized list backed by the given list.\n      * Elements may not be added or removed from the returned list, but \n      * existing elements can be changed (for instance, via the \n-     * {@link List#set(int,Object)} method).\n-     *\n+     * {@link List#set(int,E)} method).\n+     *\n+     * @param <E>  the element type\n      * @param list  the list whose size to fix, must not be null\n      * @return a fixed-size list backed by that list\n      * @throws IllegalArgumentException  if the List is null\n      * If the input List or predicate is null, or no element of the List\n      * matches the predicate, -1 is returned.\n      *\n+     * @param <E>  the element type\n      * @param list the List to search, may be null\n      * @param predicate  the predicate to use, may be null\n      * @return the first index of an Object in the List which matches the predicate or -1 if none could be found", "timestamp": 1342301785, "metainfo": ""}