{"sha": "68c0a80d17688d6d56644deaaaec5d3575042587", "log": "[COLLECTIONS-459] Removed setArray methods in ArrayIterator and ObjectArrayIterator, made fields final if possible.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java\n  */\n public class ArrayIterator<E> implements ResettableIterator<E> {\n \n-    // TODO Privatise fields? Mainly read-only access\n-\n     /** The array to iterate over */\n-    protected Object array;\n+    protected final Object array;\n     /** The start index to loop from */\n-    protected int startIndex = 0;\n+    protected final int startIndex;\n     /** The end index to loop to */\n-    protected int endIndex = 0;\n+    protected final int endIndex;\n     /** The current iterator index */\n     protected int index = 0;\n \n     // Constructors\n     // ----------------------------------------------------------------------\n-    /**\n-     * Constructor for use with <code>setArray</code>.\n-     * <p>\n-     * Using this constructor, the iterator is equivalent to an empty iterator\n-     * until {@link #setArray(Object)} is  called to establish the array to iterate over.\n-     */\n-    public ArrayIterator() {\n-        super();\n-    }\n-\n     /**\n      * Constructs an ArrayIterator that will iterate over the values in the\n      * specified array.\n      * @throws NullPointerException if <code>array</code> is <code>null</code>\n      */\n     public ArrayIterator(final Object array) {\n-        super();\n-        setArray(array);\n+        this(array, 0);\n     }\n \n     /**\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public ArrayIterator(final Object array, final int startIndex) {\n-        super();\n-        setArray(array);\n-        checkBound(startIndex, \"start\");\n-        this.startIndex = startIndex;\n-        this.index = startIndex;\n+        this(array, startIndex, Array.getLength(array));\n     }\n \n     /**\n      */\n     public ArrayIterator(final Object array, final int startIndex, final int endIndex) {\n         super();\n-        setArray(array);\n-        checkBound(startIndex, \"start\");\n-        checkBound(endIndex, \"end\");\n-        if (endIndex < startIndex) {\n-            throw new IllegalArgumentException(\"End index must not be less than start index.\");\n-        }\n+\n+        this.array = array;\n         this.startIndex = startIndex;\n         this.endIndex = endIndex;\n         this.index = startIndex;\n+\n+        final int len = Array.getLength(array);\n+        checkBound(startIndex, len, \"start\");\n+        checkBound(endIndex, len, \"end\");\n+        if (endIndex < startIndex) {\n+            throw new IllegalArgumentException(\"End index must not be less than start index.\");\n+        }\n     }\n \n     /**\n      * Checks whether the index is valid or not.\n      *\n      * @param bound  the index to check\n+     * @param len  the length of the array\n      * @param type  the index type (for error messages)\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n-    protected void checkBound(final int bound, final String type ) {\n-        if (bound > this.endIndex) {\n+    protected void checkBound(final int bound, final int len, final String type ) {\n+        if (bound > len) {\n             throw new ArrayIndexOutOfBoundsException(\n               \"Attempt to make an ArrayIterator that \" + type +\n               \"s beyond the end of the array. \"\n     }\n \n     /**\n-     * Sets the array that the ArrayIterator should iterate over.\n-     * <p>\n-     * If an array has previously been set (using the single-arg constructor\n-     * or this method) then that array is discarded in favour of this one.\n-     * Iteration is restarted at the start of the new array.\n-     * Although this can be used to reset iteration, the {@link #reset()} method\n-     * is a more effective choice.\n-     *\n-     * @param array the array that the iterator should iterate over.\n-     * @throws IllegalArgumentException if <code>array</code> is not an array.\n-     * @throws NullPointerException if <code>array</code> is <code>null</code>\n-     */\n-    public void setArray(final Object array) {\n-        // Array.getLength throws IllegalArgumentException if the object is not\n-        // an array or NullPointerException if the object is null.  This call\n-        // is made before saving the array and resetting the index so that the\n-        // array iterator remains in a consistent state if the argument is not\n-        // an array or is null.\n-        this.endIndex = Array.getLength(array);\n-        this.startIndex = 0;\n-        this.array = array;\n-        this.index = 0;\n+     * Gets the start index to loop from.\n+     *\n+     * @return the start index\n+     * @since 4.0\n+     */\n+    public int getStartIndex() {\n+        return this.startIndex;\n+    }\n+\n+    /**\n+     * Gets the end index to loop to.\n+     *\n+     * @return the end index\n+     * @since 4.0\n+     */\n+    public int getEndIndex() {\n+        return this.endIndex;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java\n     // Constructors\n     // ----------------------------------------------------------------------\n     /**\n-     * Constructor for use with <code>setArray</code>.\n-     * <p>\n-     * Using this constructor, the iterator is equivalent to an empty iterator\n-     * until {@link #setArray(Object)} is  called to establish the array to iterate over.\n-     */\n-    public ArrayListIterator() {\n-        super();\n-    }\n-\n-    /**\n      * Constructs an ArrayListIterator that will iterate over the values in the\n      * specified array.\n      *\n      */\n     public ArrayListIterator(final Object array, final int startIndex) {\n         super(array, startIndex);\n-        this.startIndex = startIndex;\n     }\n \n     /**\n      */\n     public ArrayListIterator(final Object array, final int startIndex, final int endIndex) {\n         super(array, startIndex, endIndex);\n-        this.startIndex = startIndex;\n     }\n \n     // ListIterator interface\n--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java\n public class ObjectArrayIterator<E>\n         implements Iterator<E>, ResettableIterator<E> {\n \n-    // TODO Privatise fields? Mainly read-only access\n-\n     /** The array */\n-    protected E[] array = null;\n+    protected final E[] array;\n     /** The start index to loop from */\n-    protected int startIndex = 0;\n+    protected final int startIndex;\n     /** The end index to loop to */\n-    protected int endIndex = 0;\n+    protected final int endIndex;\n     /** The current iterator index */\n     protected int index = 0;\n \n-    /**\n-     * Constructor for use with <code>setArray</code>.\n-     * <p>\n-     * Using this constructor, the iterator is equivalent to an empty iterator\n-     * until {@link #setArray} is  called to establish the array to iterate over.\n-     */\n-    public ObjectArrayIterator() {\n-        super();\n-    }\n-\n+    //-------------------------------------------------------------------------\n     /**\n      * Constructs an ObjectArrayIterator that will iterate over the values in the\n      * specified array.\n     /**\n      * Gets the array that this iterator is iterating over.\n      *\n-     * @return the array this iterator iterates over, or <code>null</code> if\n-     * the no-arg constructor was used and {@link #setArray} has never\n-     * been called with a valid array.\n+     * @return the array this iterator iterates over\n      */\n     public E[] getArray() {\n         return this.array;\n-    }\n-\n-    /**\n-     * Sets the array that the ArrayIterator should iterate over.\n-     * <p>\n-     * This method may only be called once, otherwise an IllegalStateException\n-     * will occur.\n-     * <p>\n-     * The {@link #reset} method can be used to reset the iterator if required.\n-     *\n-     * @param array  the array that the iterator should iterate over\n-     * @throws IllegalStateException if the <code>array</code> was set in the constructor\n-     * @throws NullPointerException if <code>array</code> is <code>null</code>\n-     */\n-    public void setArray(final E[] array) {\n-        if (this.array != null) {\n-            throw new IllegalStateException(\"The array to iterate over has already been set\");\n-        }\n-        this.array = array;\n-        this.startIndex = 0;\n-        this.endIndex = array.length;\n-        this.index = 0;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java\n      */\n     private int lastItemIndex = -1;\n \n-    /**\n-     * Constructor for use with <code>setArray</code>.\n-     * <p>\n-     * Using this constructor, the iterator is equivalent to an empty iterator\n-     * until {@link #setArray} is  called to establish the array to iterate over.\n-     */\n-    public ObjectArrayListIterator() {\n-        super();\n-    }\n-\n+    //-------------------------------------------------------------------------\n     /**\n      * Constructs an ObjectArrayListIterator that will iterate over the values in the\n      * specified array.\n      * @return true if there is a previous element to return\n      */\n     public boolean hasPrevious() {\n-        return this.index > this.startIndex;\n+        return this.index > getStartIndex();\n     }\n \n     /**\n      * @return the index of the item to be retrieved next\n      */\n     public int nextIndex() {\n-        return this.index - this.startIndex;\n+        return this.index - getStartIndex();\n     }\n \n     /**\n      * @return the index of the item to be retrieved next\n      */\n     public int previousIndex() {\n-        return this.index - this.startIndex - 1;\n+        return this.index - getStartIndex() - 1;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java\n         }\n     }\n \n-    // proves that an ArrayIterator set with the constructor has the same number of elements\n-    // as an ArrayIterator set with setArray(Object)\n-    public void testSetArray() {\n-        final Iterator<E> iter1 = makeArrayIterator(testArray);\n-        int count1 = 0;\n-        while (iter1.hasNext()) {\n-            ++count1;\n-            iter1.next();\n-        }\n-\n-        assertEquals(\"the count should be right using the constructor\", count1, testArray.length);\n-\n-        final ArrayIterator<E> iter2 = makeObject();\n-        iter2.setArray(testArray);\n-        int count2 = 0;\n-        while (iter2.hasNext()) {\n-            ++count2;\n-            iter2.next();\n-        }\n-\n-        assertEquals(\"the count should be right using setArray(Object)\", count2, testArray.length);\n-    }\n-\n     public void testIndexedArray() {\n         Iterator<E> iter = makeArrayIterator(testArray, 2);\n         int count = 0;\n--- a/src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java\n         } catch (final NullPointerException e) {\n             // expected\n         }\n-\n-        final ArrayIterator<Object> iter = new ArrayIterator<Object>();\n-        try {\n-            iter.setArray(null);\n-\n-            fail(\"setArray(null) should throw a NullPointerException\");\n-        } catch (final NullPointerException e) {\n-            // expected\n-        }\n     }\n \n     public void testReset() {\n--- a/src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java\n         } catch (final NullPointerException e) {\n             // expected\n         }\n-\n-        final ObjectArrayIterator<E> iter = makeArrayIterator();\n-        try {\n-            iter.setArray(null);\n-\n-            fail(\"setArray(null) should throw a NullPointerException\");\n-        } catch (final NullPointerException e) {\n-            // expected\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testDoubleSet() {\n-        final ObjectArrayIterator<E> it = makeArrayIterator();\n-        it.setArray((E[]) new String[0]);\n-        try {\n-            it.setArray((E[]) new String[0]);\n-            fail();\n-        } catch (final IllegalStateException ex) {\n-        }\n     }\n \n     @SuppressWarnings(\"unchecked\")", "timestamp": 1371500723, "metainfo": ""}