{"sha": "0d9e0821e0101abfa719b042b28a3286377e732e", "log": "Fix checkstyle warnings.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/map/StaticBucketMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/StaticBucketMap.java\n         private Map.Entry<K, V> last;\n \n         public boolean hasNext() {\n-            if (current.size() > 0) return true;\n+            if (current.size() > 0) {\n+                return true;\n+            }\n             while (bucket < buckets.length) {\n                 synchronized (locks[bucket]) {\n                     Node<K, V> n = buckets[bucket];\n                         n = n.next;\n                     }\n                     bucket++;\n-                    if (current.size() > 0) return true;\n+                    if (current.size() > 0) {\n+                        return true;\n+                    }\n                 }\n             }\n             return false;\n         }\n \n         protected Map.Entry<K, V> nextEntry() {\n-            if (!hasNext()) throw new NoSuchElementException();\n+            if (!hasNext()) {\n+                throw new NoSuchElementException();\n+            }\n             last = current.remove(current.size() - 1);\n             return last;\n         }\n \n         public void remove() {\n-            if (last == null) throw new IllegalStateException();\n+            if (last == null) {\n+                throw new IllegalStateException();\n+            }\n             StaticBucketMap.this.remove(last.getKey());\n             last = null;\n         }\n             int hash = getHash(entry.getKey());\n             synchronized (locks[hash]) {\n                 for (Node<K, V> n = buckets[hash]; n != null; n = n.next) {\n-                    if (n.equals(entry)) return true;\n+                    if (n.equals(entry)) {\n+                        return true;\n+                    }\n                 }\n             }\n             return false;\n      *  @param r  the code to execute atomically\n      */\n     public void atomic(Runnable r) {\n-        if (r == null) throw new NullPointerException();\n+        if (r == null) {\n+            throw new NullPointerException();\n+        }\n         atomic(r, 0);\n     }\n ", "timestamp": 1347050789, "metainfo": ""}