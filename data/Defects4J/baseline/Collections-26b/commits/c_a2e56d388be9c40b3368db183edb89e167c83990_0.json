{"sha": "a2e56d388be9c40b3368db183edb89e167c83990", "log": "Add javadoc, minor formatting.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/iterators/TransformIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/TransformIterator.java\n      * @param iterator  the iterator to use\n      * @param transformer  the transformer to use\n      */\n-    public TransformIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transformer) {\n+    public TransformIterator(final Iterator<? extends I> iterator,\n+                             final Transformer<? super I, ? extends O> transformer) {\n         super();\n         this.iterator = iterator;\n         this.transformer = transformer;\n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java\n      * @return a new unmodifiable ordered map iterator\n      * @throws IllegalArgumentException if the iterator is null\n      */\n-    public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, V> iterator) {\n+    public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(\n+            final OrderedMapIterator<K, V> iterator) {\n+\n         if (iterator == null) {\n             throw new IllegalArgumentException(\"OrderedMapIterator must not be null\");\n         }\n--- a/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n      * <p>\n      * The first serializable subclass must call this method from\n      * <code>writeObject</code>.\n+     * \n+     * @param outputStream  the stream to write the object to\n+     * @throws IOException  if anything goes wrong\n      */\n     protected void doWriteObject(final ObjectOutputStream outputStream) throws IOException {\n         // Write the size so we know how many nodes to read back\n      * <p>\n      * The first serializable subclass must call this method from\n      * <code>readObject</code>.\n+     * \n+     * @param inputStream  the stream to read the object from\n+     * @throws IOException  if any error occurs while reading from the stream\n+     * @throws ClassNotFoundException  if a class read from the stream can not be loaded\n      */\n     @SuppressWarnings(\"unchecked\")\n     protected void doReadObject(final ObjectInputStream inputStream) throws IOException, ClassNotFoundException {\n          * @param fromIndex  the index to start at\n          * @throws IndexOutOfBoundsException if fromIndex is less than 0 or greater than the size of the list\n          */\n-        protected LinkedListIterator(final AbstractLinkedList<E> parent, final int fromIndex) throws IndexOutOfBoundsException {\n+        protected LinkedListIterator(final AbstractLinkedList<E> parent, final int fromIndex)\n+                throws IndexOutOfBoundsException {\n             super();\n             this.parent = parent;\n             this.expectedModCount = parent.modCount;", "timestamp": 1358716822, "metainfo": ""}