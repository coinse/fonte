{"sha": "230597979a6017bf3cece47628a86a867efedcad", "log": "Complete javadoc, modify examples to use generics.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractHashedMap.java\n      * what must be serialized here, if anything.\n      *\n      * @param out  the output stream\n+     * @throws IOException if an error occurs while writing tothe stream\n      */\n     protected void doWriteObject(final ObjectOutputStream out) throws IOException {\n         out.writeFloat(loadFactor);\n      * before <code>put()</code> or <code>calculateThreshold()</code> will work correctly.\n      *\n      * @param in  the input stream\n+     * @throws IOException if an error occurs while reading from the stream\n+     * @throws ClassNotFoundException if an object read from the stream can not be loaded\n      */\n     @SuppressWarnings(\"unchecked\")\n     protected void doReadObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n--- a/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n      * what must be serialized here, if anything.\n      *\n      * @param out  the output stream\n+     * @throws IOException if an error occurs while writing to the stream\n      */\n     @Override\n     protected void doWriteObject(final ObjectOutputStream out) throws IOException {\n      * before <code>put()</code> or <code>calculateThreshold()</code> will work correctly.\n      *\n      * @param in  the input stream\n+     * @throws IOException if an error occurs while reading from the stream\n+     * @throws ClassNotFoundException if an object read from the stream can not be loaded\n      */\n     @Override\n     @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/org/apache/commons/collections/map/AbstractSortedMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractSortedMapDecorator.java\n     /**\n      * OrderedMapIterator implementation.\n      *\n-     * @param <K>\n-     * @param <V>\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n      */\n     protected static class SortedMapIterator<K, V> extends EntrySetToMapIteratorAdapter<K, V>\n             implements OrderedMapIterator<K, V> {\n \n         /**\n          * Create a new AbstractSortedMapDecorator.SortedMapIterator.\n+         * @param entrySet  the entrySet to iterate\n          */\n         protected SortedMapIterator(final Set<Map.Entry<K, V>> entrySet) {\n             super(entrySet);\n--- a/src/main/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n  * <p>\n  * Example:\n  * <pre><code>\n- *  Map map = new CaseInsensitiveMap();\n+ *  Map&lt;String, String&gt; map = new CaseInsensitiveMap&lt;String, String&gt;();\n  *  map.put(\"One\", \"One\");\n  *  map.put(\"Two\", \"Two\");\n  *  map.put(null, \"Three\");\n--- a/src/main/java/org/apache/commons/collections/map/EntrySetToMapIteratorAdapter.java\n+++ b/src/main/java/org/apache/commons/collections/map/EntrySetToMapIteratorAdapter.java\n \n     /**\n      * Create a new EntrySetToMapIteratorAdapter.\n+     * @param entrySet  the entrySet to adapt\n      */\n     public EntrySetToMapIteratorAdapter(final Set<Map.Entry<K, V>> entrySet) {\n         this.entrySet = entrySet;\n--- a/src/main/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LRUMap.java\n \n     /**\n      * Writes the data necessary for <code>put()</code> to work in deserialization.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException if an error occurs while writing to the stream\n      */\n     @Override\n     protected void doWriteObject(final ObjectOutputStream out) throws IOException {\n \n     /**\n      * Reads the data necessary for <code>put()</code> to work in the superclass.\n+     *\n+     * @param in  the input stream\n+     * @throws IOException if an error occurs while reading from the stream\n+     * @throws ClassNotFoundException if an object read from the stream can not be loaded\n      */\n     @Override\n     protected void doReadObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n--- a/src/main/java/org/apache/commons/collections/map/LazySortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LazySortedMap.java\n  * @since 3.0\n  * @version $Id$\n  */\n-public class LazySortedMap<K,V>\n-        extends LazyMap<K,V>\n-        implements SortedMap<K,V> {\n+public class LazySortedMap<K,V> extends LazyMap<K,V> implements SortedMap<K,V> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 2715322183617658933L;\n--- a/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n      *\n      * @param <K>  the key type\n      * @param <V>  the value type\n+     * @param <C>  the collection class type\n      * @param map  the map to wrap\n      * @param collectionClass  the type of the collection class\n      * @return a new multi-value map\n      *\n      * @param <K>  the key type\n      * @param <V>  the value type\n+     * @param <C>  the collection class type\n      * @param map  the map to decorate\n      * @param collectionFactory  the collection factory (must return a Collection object).\n      * @return a new multi-value map\n      * Creates a MultiValueMap which decorates the given <code>map</code> and\n      * creates the value collections using the supplied <code>collectionFactory</code>.\n      *\n+     * @param <C>  the collection class type\n      * @param map  the map to decorate\n      * @param collectionFactory  the collection factory which must return a Collection instance\n      */\n     /**\n      * Checks whether the collection at the specified key contains the value.\n      *\n+     * @param key  the key to search for\n      * @param value  the value to search for\n      * @return true if the map contains the value\n      */", "timestamp": 1358786101, "metainfo": ""}