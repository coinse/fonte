{"sha": "ba72be98b6cfad5268ef8208f21c17027e726973", "log": "Fix checkstyle warnings.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/FluentIterable.java\n+++ b/src/main/java/org/apache/commons/collections4/FluentIterable.java\n  *       new collection or array (e.g. toList());\n  *   <li>utility methods which answer questions about the FluentIterable's\n  *       contents (e.g. size(), anyMatch(Predicate)).\n- *   <li> \n+ *   <li>\n  * </ul>\n  * <p>\n  * The following example outputs the first 3 even numbers in the range [1, 10]\n      * Returns a new FluentIterable whose iterator will return all elements\n      * of this iterable transformed by the provided transformer.\n      *\n+     * @param <O>  the output element type\n      * @param transformer  the transformer applied to each element\n      * @return a new iterable, providing a transformed view of this iterable\n      * @throws NullPointerException if transformer is null\n      * the elements of this iterable and the other iterable in\n      * alternating order.\n      *\n-     * @param other  the other iterable to interleave\n+     * @param others  the iterables to interleave\n      * @return a new iterable, interleaving this iterable with others\n      */\n     public FluentIterable<E> zip(final Iterable<E>... others) {\n \n     /**\n      * Checks if the object is contained in this iterable.\n-     * \n+     *\n      * @param object  the object to check\n      * @return true if the object is contained in this iterable, false otherwise\n      */\n      * Returns an array containing all elements of this iterable by traversing\n      * its iterator.\n      *\n-     * @param arrayClass  the class of array to create \n+     * @param arrayClass  the class of array to create\n      * @return an array of the iterable contents\n      * @throws ClassCastException if arrayClass is invalid\n      */\n--- a/src/main/java/org/apache/commons/collections4/IterableUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IterableUtils.java\n             @Override\n             public Iterator<E> iterator() {\n                 return new LazyIteratorChain<E>() {\n-\n                     @Override\n                     protected Iterator<? extends E> nextIterator(int count) {\n                         if (count > iterables.length) {\n                             return emptyIteratorIfNull(iterables[count - 1]);\n                         }\n                     }\n-                    \n                 };\n             }\n         };\n             @Override\n             public Iterator<E> iterator() {\n                 return IteratorUtils.boundedIterator(emptyIteratorIfNull(iterable), maxSize);\n-            }            \n+            }\n         };\n     }\n \n     /**\n      * Returns a reversed view of the given iterable.\n      * <p>\n-     * In case the provided iterable is a {@link List} instance, a \n+     * In case the provided iterable is a {@link List} instance, a\n      * {@link ReverseListIterator} will be used to reverse the traversal\n-     * order, otherwise an intermediate {@link List} needs to be\n-     * created.\n+     * order, otherwise an intermediate {@link List} needs to be created.\n      * <p>\n      * The returned iterable's iterator supports {@code remove()} if the\n      * provided iterable is a {@link List} instance.\n             @Override\n             public Iterator<E> iterator() {\n                 return IteratorUtils.skippingIterator(emptyIteratorIfNull(iterable), elementsToSkip);\n-            }            \n+            }\n         };\n     }\n \n      * The returned iterable's iterator supports {@code remove()} when the corresponding\n      * input iterator supports it.\n      *\n-     * @param <E>  the element type\n+     * @param <I>  the input element type\n+     * @param <O>  the output element type\n      * @param iterable  the iterable to transform, may be null\n      * @param transformer  the transformer , must not be null\n      * @return a transformed view of the specified iterable\n             @Override\n             public Iterator<O> iterator() {\n                 return IteratorUtils.transformedIterator(emptyIteratorIfNull(iterable), transformer);\n-            }            \n+            }\n         };\n     }\n \n             @Override\n             public Iterator<E> iterator() {\n                 return new UniqueFilterIterator<E>(emptyIteratorIfNull(iterable));\n-            }            \n+            }\n         };\n     }\n \n      * input iterator supports it.\n      *\n      * @param <E>  the element type\n-     * @param a  the first iterable\n-     * @param b  the second iterable\n+     * @param iterables  the array of iterables to interleave\n      * @return a new iterable, interleaving the provided iterables\n      */\n     public static <E> Iterable<E> zippingIterable(final Iterable<E>... iterables) {\n                     iterators[i] = emptyIteratorIfNull(iterables[i]);\n                 }\n                 return new ZippingIterator<E>(iterators);\n-            }            \n+            }\n         };\n     }\n \n      * A <code>null</code> or empty iterable returns true.\n      *\n      * @param <E>  the type of object the {@link Iterable} contains\n-     * @param input  the {@link Iterable} to use, may be null\n+     * @param iterable  the {@link Iterable} to use, may be null\n      * @param predicate  the predicate to use, may not be null\n      * @return true if every element of the collection matches the predicate or if the\n      *   collection is empty, false otherwise\n      * A <code>null</code> or empty iterable returns false.\n      *\n      * @param <E>  the type of object the {@link Iterable} contains\n-     * @param input  the {@link Iterable} to use, may be null\n+     * @param iterable  the {@link Iterable} to use, may be null\n      * @param predicate  the predicate to use, may not be null\n      * @return true if any element of the collection matches the predicate, false otherwise\n      * @throws NullPointerException if predicate is null\n      * <p>\n      * A <code>null</code> iterable returns true.\n      *\n-     * @param iterable  the {@link Iterable to use}, may be null \n+     * @param iterable  the {@link Iterable to use}, may be null\n      * @return true if the iterable is null or empty, false otherwise\n      */\n     public static boolean isEmpty(final Iterable<?> iterable) {\n      * A <code>null</code> or empty iterable returns false.\n      *\n      * @param <E>  the type of object the {@link Iterable} contains\n-     * @param iterator  the iterable to check, may be null\n+     * @param iterable  the iterable to check, may be null\n      * @param object  the object to check\n      * @return true if the object is contained in the iterable, false otherwise\n      */\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n     /**\n      * IteratorUtils is not normally instantiated.\n      */\n-    private IteratorUtils() {}    \n+    private IteratorUtils() {}\n \n     // Empty\n     //-----------------------------------------------------------------------\n      * @param <E>  the element type\n      * @param a  the first iterator to interleave\n      * @param b  the second iterator to interleave\n-     * @param c  the third iterator to interleave \n+     * @param c  the third iterator to interleave\n      * @return an iterator, interleaving the decorated iterators\n      * @throws IllegalArgumentException if any iterator is null\n      * @since 4.1\n      * A <code>null</code> or empty iterator returns false.\n      *\n      * @param <E>  the type of object the {@link Iterator} contains\n-     * @param input  the {@link Iterator} to use, may be null\n+     * @param iterator  the {@link Iterator} to use, may be null\n      * @param predicate  the predicate to use, may not be null\n      * @return true if any element of the collection matches the predicate, false otherwise\n      * @throws NullPointerException if predicate is null\n      * A <code>null</code> or empty iterator returns true.\n      *\n      * @param <E>  the type of object the {@link Iterator} contains\n-     * @param input  the {@link Iterator} to use, may be null\n+     * @param iterator  the {@link Iterator} to use, may be null\n      * @param predicate  the predicate to use, may not be null\n      * @return true if every element of the collection matches the predicate or if the\n      *   collection is empty, false otherwise\n      * converted to strings as by {@code String.valueOf(Object)}.\n      *\n      * @param <E>  the element type\n-     * @param iterable  the iterator to convert to a string\n+     * @param iterator  the iterator to convert to a string\n      * @return a string representation of {@code iterator}\n      * @since 4.1\n      */\n      * converted to strings as by using the provided {@code transformer}.\n      *\n      * @param <E>  the element type\n-     * @param iterable  the iterator to convert to a string, may be null\n+     * @param iterator  the iterator to convert to a string, may be null\n      * @param transformer  the transformer used to get a string representation of an element\n      * @return a string representation of {@code iterator}\n      * @throws NullPointerException if {@code transformer} is null\n--- a/src/main/java/org/apache/commons/collections4/SetUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/SetUtils.java\n      * using {@link java.util.Collections#synchronizedSet(Set)}. This class may throw\n      * exceptions when accessed by concurrent threads without synchronization.\n      *\n+     * @param <E>  the element type\n      * @return a new identity hash set\n      * @since 4.1\n      */", "timestamp": 1432811804, "metainfo": ""}