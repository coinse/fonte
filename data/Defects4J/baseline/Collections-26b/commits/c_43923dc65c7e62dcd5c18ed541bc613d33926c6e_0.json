{"sha": "43923dc65c7e62dcd5c18ed541bc613d33926c6e", "log": "Add five new methods to MultiHashMap to provide broader API inspired by ideas/javadoc from Jesse Chan   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MultiHashMap.java\n+++ b/src/java/org/apache/commons/collections/MultiHashMap.java\n  * <code>list</code> will be a list containing \"A\", \"B\", \"C\".\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.16 $ $Date: 2004/03/14 15:33:57 $\n+ * @version $Revision: 1.17 $ $Date: 2004/03/14 17:05:24 $\n  * \n  * @author Christopher Berry\n  * @author James Strachan\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets the total size of the map by counting all the values.\n+     * \n+     * @return the total size of the map counting all values\n+     * @since Commons Collections 3.1\n+     */\n+    public int totalSize() {\n+        int total = 0;\n+        Collection values = super.values();\n+        for (Iterator it = values.iterator(); it.hasNext();) {\n+            Collection coll = (Collection) it.next();\n+            total += coll.size();\n+        }\n+        return total;\n+    }\n+\n+    /**\n+     * Gets the collection mapped to the specified key.\n+     * This method is a convenience method to typecast the result of <code>get(key)</code>.\n+     * \n+     * @param key  the key to retrieve\n+     * @return the collection mapped to the key, null if no mapping\n+     * @since Commons Collections 3.1\n+     */\n+    public Collection getCollection(Object key) {\n+        return (Collection) get(key);\n+    }\n+\n+    /**\n+     * Gets the size of the collection mapped to the specified key.\n+     * \n+     * @param key  the key to get size for\n+     * @return the size of the collection at the key, zero if key not in map\n+     * @since Commons Collections 3.1\n+     */\n+    public int size(Object key) {\n+        Collection coll = getCollection(key);\n+        if (coll == null) {\n+            return 0;\n+        }\n+        return coll.size();\n+    }\n+\n+    /**\n+     * Gets an iterator for the collection mapped to the specified key.\n+     * \n+     * @param key  the key to get an iterator for\n+     * @return the iterator of the collection at the key, empty iterator if key not in map\n+     * @since Commons Collections 3.1\n+     */\n+    public Iterator iterator(Object key) {\n+        Collection coll = getCollection(key);\n+        if (coll == null) {\n+            return IteratorUtils.EMPTY_ITERATOR;\n+        }\n+        return coll.iterator();\n+    }\n+\n+    /**\n      * Adds the value to the collection associated with the specified key.\n      * <p>\n      * Unlike a normal <code>Map</code> the previous value is not replaced.\n     public Object put(Object key, Object value) {\n         // NOTE:: put is called during deserialization in JDK < 1.4 !!!!!!\n         //        so we must have a readObject()\n-        Collection coll = (Collection) super.get(key);\n+        Collection coll = getCollection(key);\n         if (coll == null) {\n             coll = createCollection(null);\n             super.put(key, coll);\n         }\n         boolean results = coll.add(value);\n-\n         return (results ? value : null);\n+    }\n+\n+    /**\n+     * Adds a collection of values to the collection associated with the specified key.\n+     *\n+     * @param key  the key to store against\n+     * @param values  the values to add to the collection at the key, null ignored\n+     * @return true if this map changed\n+     * @since Commons Collections 3.1\n+     */    \n+    public boolean putAll(Object key, Collection values) {\n+        if (values == null || values.size() == 0) {\n+            return false;\n+        }\n+        Collection coll = getCollection(key);\n+        if (coll == null) {\n+            coll = createCollection(values);\n+            if (coll.size() == 0) {\n+                return false;\n+            }\n+            super.put(key, coll);\n+            return true;\n+        } else {\n+            return coll.addAll(values);\n+        }\n     }\n \n     /**\n     }\n \n     /**\n+     * Checks whether the collection at the specified key contains the value.\n+     * \n+     * @param value  the value to search for\n+     * @return true if the map contains the value\n+     * @since Commons Collections 3.1\n+     */\n+    public boolean containsValue(Object key, Object value) {\n+        Collection coll = getCollection(key);\n+        if (coll == null) {\n+            return false;\n+        }\n+        return coll.contains(value);\n+    }\n+\n+    /**\n      * Removes a specific value from map.\n      * <p>\n      * The item is removed from the collection mapped to the specified key.\n      * @return the value removed (which was passed in), null if nothing removed\n      */\n     public Object remove(Object key, Object item) {\n-        Collection valuesForKey = (Collection) super.get(key);\n+        Collection valuesForKey = getCollection(key);\n         if (valuesForKey == null) {\n             return null;\n         }\n--- a/src/test/org/apache/commons/collections/TestMultiHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestMultiHashMap.java\n  */\n package org.apache.commons.collections;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Map;\n /**\n  * Unit Tests for <code>MultiHashMap</code>.\n  * \n- * @version $Revision: 1.17 $ $Date: 2004/02/18 01:20:35 $\n+ * @version $Revision: 1.18 $ $Date: 2004/03/14 17:05:24 $\n  *\n  * @author Unknown\n  */\n         values = map.values();\n         super.verifyValues();\n     }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testGetCollection() {\n+        MultiHashMap map = new MultiHashMap();\n+        map.put(\"A\", \"AA\");\n+        assertSame(map.get(\"A\"), map.getCollection(\"A\"));\n+    }\n+    \n+    public void testTotalSize() {\n+        MultiHashMap map = new MultiHashMap();\n+        assertEquals(0, map.totalSize());\n+        map.put(\"A\", \"AA\");\n+        assertEquals(1, map.totalSize());\n+        map.put(\"B\", \"BA\");\n+        assertEquals(2, map.totalSize());\n+        map.put(\"B\", \"BB\");\n+        assertEquals(3, map.totalSize());\n+        map.put(\"B\", \"BC\");\n+        assertEquals(4, map.totalSize());\n+        map.remove(\"A\");\n+        assertEquals(3, map.totalSize());\n+        map.remove(\"B\", \"BC\");\n+        assertEquals(2, map.totalSize());\n+    }\n+    \n+    public void testSize_Key() {\n+        MultiHashMap map = new MultiHashMap();\n+        assertEquals(0, map.size(\"A\"));\n+        assertEquals(0, map.size(\"B\"));\n+        map.put(\"A\", \"AA\");\n+        assertEquals(1, map.size(\"A\"));\n+        assertEquals(0, map.size(\"B\"));\n+        map.put(\"B\", \"BA\");\n+        assertEquals(1, map.size(\"A\"));\n+        assertEquals(1, map.size(\"B\"));\n+        map.put(\"B\", \"BB\");\n+        assertEquals(1, map.size(\"A\"));\n+        assertEquals(2, map.size(\"B\"));\n+        map.put(\"B\", \"BC\");\n+        assertEquals(1, map.size(\"A\"));\n+        assertEquals(3, map.size(\"B\"));\n+        map.remove(\"A\");\n+        assertEquals(0, map.size(\"A\"));\n+        assertEquals(3, map.size(\"B\"));\n+        map.remove(\"B\", \"BC\");\n+        assertEquals(0, map.size(\"A\"));\n+        assertEquals(2, map.size(\"B\"));\n+    }\n+    \n+    public void testIterator_Key() {\n+        MultiHashMap map = new MultiHashMap();\n+        assertEquals(false, map.iterator(\"A\").hasNext());\n+        map.put(\"A\", \"AA\");\n+        Iterator it = map.iterator(\"A\");\n+        assertEquals(true, it.hasNext());\n+        it.next();\n+        assertEquals(false, it.hasNext());\n+    }\n+    \n+    public void testContainsValue_Key() {\n+        MultiHashMap map = new MultiHashMap();\n+        assertEquals(false, map.containsValue(\"A\", \"AA\"));\n+        assertEquals(false, map.containsValue(\"B\", \"BB\"));\n+        map.put(\"A\", \"AA\");\n+        assertEquals(true, map.containsValue(\"A\", \"AA\"));\n+        assertEquals(false, map.containsValue(\"A\", \"AB\"));\n+    }\n+    \n+    public void testPutAll_KeyCollection() {\n+        MultiHashMap map = new MultiHashMap();\n+        Collection coll = Arrays.asList(new Object[] {\"X\", \"Y\", \"Z\"});\n+        \n+        assertEquals(true, map.putAll(\"A\", coll));\n+        assertEquals(3, map.size(\"A\"));\n+        assertEquals(true, map.containsValue(\"A\", \"X\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n+        \n+        assertEquals(false, map.putAll(\"A\", null));\n+        assertEquals(3, map.size(\"A\"));\n+        assertEquals(true, map.containsValue(\"A\", \"X\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n+        \n+        assertEquals(false, map.putAll(\"A\", new ArrayList()));\n+        assertEquals(3, map.size(\"A\"));\n+        assertEquals(true, map.containsValue(\"A\", \"X\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n+        \n+        coll = Arrays.asList(new Object[] {\"M\"});\n+        assertEquals(true, map.putAll(\"A\", coll));\n+        assertEquals(4, map.size(\"A\"));\n+        assertEquals(true, map.containsValue(\"A\", \"X\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n+        assertEquals(true, map.containsValue(\"A\", \"M\"));\n+    }\n+    \n }", "timestamp": 1079283924, "metainfo": ""}