{"sha": "90f4139bf75c94aa1ed62c5f64c3ffd78a1441d2", "log": "[COLLECTIONS-511] Added CollectionUtils.partition(...) methods. Thanks to Brent Worden, Nathan Blomquist.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n import java.lang.reflect.Array;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.Enumeration;\n import java.util.HashMap;\n             }\n         }\n         return outputCollection;\n+    }\n+\n+    /**\n+     * Partitions all elements from inputCollection into separate output collections,\n+     * based on the evaluation of the given predicate.\n+     * <p>\n+     * For each predicate, the returned list will contain a collection holding\n+     * all elements of the input collection matching the predicate. The last collection\n+     * contained in the list will hold all elements which didn't match any predicate:\n+     * <pre>\n+     *  [C1, R] = partition(I, P1) with\n+     *  I = input collection\n+     *  P1 = first predicate\n+     *  C1 = collection of elements matching P1\n+     *  R = collection of elements rejected by all predicates\n+     * </pre>\n+     * <p>\n+     * If the input collection is <code>null</code>, an empty list will be returned.\n+     * If the input predicate is <code>null</code>, all elements of the input collection\n+     * will be added to the rejected collection.\n+     * <p>\n+     * Example: for an input list [1, 2, 3, 4, 5] calling partition with a predicate [x &lt; 3]\n+     * will result in the following output: [[1, 2], [3, 4, 5]].\n+     *\n+     * @param <O>  the type of object the {@link Iterable} contains\n+     * @param <R>  the type of the output {@link Collection}\n+     * @param inputCollection  the collection to get the input from, may be null\n+     * @param predicate  the predicate to use, may be null\n+     * @return a list containing the output collections\n+     * @since 4.1\n+     */\n+    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n+            final Predicate<? super O> predicate) {\n+\n+        @SuppressWarnings(\"unchecked\") // safe\n+        final Class<R> outputClass = (Class<R>) ArrayList.class;\n+        @SuppressWarnings(\"unchecked\") // safe\n+        final Predicate<? super O>[] predicates = new Predicate[] { predicate };\n+        return partition(inputCollection, FactoryUtils.instantiateFactory(outputClass), predicates);\n+    }\n+\n+    /**\n+     * Partitions all elements from inputCollection into an output and rejected collection,\n+     * based on the evaluation of the given predicate.\n+     * <p>\n+     * Elements matching the predicate are added to the <code>outputCollection</code>,\n+     * all other elements are added to the <code>rejectedCollection</code>.\n+     * <p>\n+     * If the input predicate is <code>null</code>, no elements are added to\n+     * <code>outputCollection</code> or <code>rejectedCollection</code>.\n+     * <p>\n+     * Note: calling the method is equivalent to the following code snippet:\n+     * <pre>\n+     *   select(inputCollection, predicate, outputCollection);\n+     *   selectRejected(inputCollection, predicate, rejectedCollection);\n+     * </pre>\n+     *\n+     * @param <O>  the type of object the {@link Iterable} contains\n+     * @param <R>  the type of the output {@link Collection}\n+     * @param inputCollection  the collection to get the input from, may be null\n+     * @param predicate  the predicate to use, may be null\n+     * @param outputCollection  the collection to output selected elements into, may not be null if the\n+     *   inputCollection and predicate are not null\n+     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the\n+     *   inputCollection or predicate are not null\n+     * @since 4.1\n+     */\n+    public static <O, R extends Collection<? super O>> void partition(final Iterable<? extends O> inputCollection,\n+            final Predicate<? super O> predicate, R outputCollection, R rejectedCollection) {\n+\n+        if (inputCollection != null && predicate != null) {\n+            for (final O element : inputCollection) {\n+                if (predicate.evaluate(element)) {\n+                    outputCollection.add(element);\n+                } else {\n+                    rejectedCollection.add(element);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Partitions all elements from inputCollection into separate output collections,\n+     * based on the evaluation of the given predicates.\n+     * <p>\n+     * For each predicate, the returned list will contain a collection holding\n+     * all elements of the input collection matching the predicate. The last collection\n+     * contained in the list will hold all elements which didn't match any predicate:\n+     * <pre>\n+     *  [C1, C2, R] = partition(I, P1, P2) with\n+     *  I = input collection\n+     *  P1 = first predicate\n+     *  P2 = second predicate\n+     *  C1 = collection of elements matching P1\n+     *  C2 = collection of elements matching P2\n+     *  R = collection of elements rejected by all predicates\n+     * </pre>\n+     * <p>\n+     * <b>Note</b>: elements are only added to the output collection of the first matching\n+     * predicate, determined by the order of arguments.\n+     * <p>\n+     * If the input collection is <code>null</code>, an empty list will be returned.\n+     * If the input predicate is <code>null</code>, all elements of the input collection\n+     * will be added to the rejected collection.\n+     * <p>\n+     * Example: for an input list [1, 2, 3, 4, 5] calling partition with predicates [x &lt; 3]\n+     * and [x &lt; 5] will result in the following output: [[1, 2], [3, 4], [5]].\n+     *\n+     * @param <O>  the type of object the {@link Iterable} contains\n+     * @param <R>  the type of the output {@link Collection}\n+     * @param inputCollection  the collection to get the input from, may be null\n+     * @param predicates  the predicates to use, may be null\n+     * @return a list containing the output collections\n+     * @since 4.1\n+     */\n+    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n+            final Predicate<? super O>... predicates) {\n+\n+        @SuppressWarnings(\"unchecked\") // safe\n+        final Class<R> outputClass = (Class<R>) ArrayList.class;\n+        return partition(inputCollection, FactoryUtils.instantiateFactory(outputClass), predicates);\n+    }\n+\n+    /**\n+     * Partitions all elements from inputCollection into separate output collections,\n+     * based on the evaluation of the given predicates.\n+     * <p>\n+     * For each predicate, the returned list will contain a collection holding\n+     * all elements of the input collection matching the predicate. The last collection\n+     * contained in the list will hold all elements which didn't match any predicate:\n+     * <pre>\n+     *  [C1, C2, R] = partition(I, P1, P2) with\n+     *  I = input collection\n+     *  P1 = first predicate\n+     *  P2 = second predicate\n+     *  C1 = collection of elements matching P1\n+     *  C2 = collection of elements matching P2\n+     *  R = collection of elements rejected by all predicates\n+     * </pre>\n+     * <p>\n+     * <b>Note</b>: elements are only added to the output collection of the first matching\n+     * predicate, determined by the order of arguments.\n+     * <p>\n+     * If the input collection is <code>null</code>, an empty list will be returned.\n+     * If no predicates have been provided, all elements of the input collection\n+     * will be added to the rejected collection.\n+     * <p>\n+     * Example: for an input list [1, 2, 3, 4, 5] calling partition with predicates [x &lt; 3]\n+     * and [x &lt; 5] will result in the following output: [[1, 2], [3, 4], [5]].\n+     *\n+     * @param <O>  the type of object the {@link Iterable} contains\n+     * @param <R>  the type of the output {@link Collection}\n+     * @param inputCollection  the collection to get the input from, may be null\n+     * @param partitionFactory  the factory used to create the output collections\n+     * @param predicates  the predicates to use, may be empty\n+     * @return a list containing the output collections\n+     * @since 4.1\n+     */\n+    public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> inputCollection,\n+            final Factory<R> partitionFactory, final Predicate<? super O>... predicates) {\n+\n+        if (inputCollection == null) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (predicates == null || predicates.length < 1) {\n+            // return the entire input collection as a single partition\n+            final R singlePartition = partitionFactory.create();\n+            select(inputCollection, PredicateUtils.truePredicate(), singlePartition);\n+            return Collections.singletonList(singlePartition);\n+        }\n+\n+        // create the empty partitions\n+        final int numberOfPredicates = predicates.length;\n+        final int numberOfPartitions = numberOfPredicates + 1;\n+        final List<R> partitions = new ArrayList<R>(numberOfPartitions);\n+        for (int i = 0; i < numberOfPartitions; ++i) {\n+            partitions.add(partitionFactory.create());\n+        }\n+\n+        // for each element in inputCollection:\n+        // find the first predicate that evaluates to true.\n+        // if there is a predicate, add the element to the corresponding partition.\n+        // if there is no predicate, add it to the last, catch-all partition.\n+        for (final O element : inputCollection) {\n+            boolean elementAssigned = false;\n+            for (int i = 0; i < numberOfPredicates; ++i) {\n+                if (predicates[i].evaluate(element)) {\n+                    partitions.get(i).add(element);\n+                    elementAssigned = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!elementAssigned) {\n+                // no predicates evaluated to true\n+                // add element to last partition\n+                partitions.get(numberOfPredicates).add(element);\n+            }\n+        }\n+\n+        return partitions;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n import org.apache.commons.collections4.collection.UnmodifiableCollection;\n import org.apache.commons.collections4.functors.DefaultEquator;\n import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n         }\n     };\n \n+    private static Predicate<Number> EVEN = new Predicate<Number>() {\n+        public boolean evaluate(final Number input) {\n+            return input.intValue() % 2 == 0;\n+        }\n+    };\n+\n //Up to here\n     @Test\n     public void filter() {\n     }\n \n     @Test\n+    public void partition() {\n+        List<Integer> input = new ArrayList<Integer>();\n+        input.add(1);\n+        input.add(2);\n+        input.add(3);\n+        input.add(4);\n+        List<Collection<Integer>> partitions = CollectionUtils.partition(input, EQUALS_TWO);\n+        assertEquals(2, partitions.size());\n+        \n+        // first partition contains 2\n+        Collection<Integer> partition = partitions.get(0);\n+        assertEquals(1, partition.size());\n+        assertEquals(2, CollectionUtils.extractSingleton(partition).intValue());\n+        \n+        // second partition contains 1, 3, and 4\n+        Integer[] expected = {1, 3, 4};\n+        partition = partitions.get(1);\n+        Assert.assertArrayEquals(expected, partition.toArray());\n+        \n+        partitions = CollectionUtils.partition((List<Integer>) null, EQUALS_TWO);\n+        assertTrue(partitions.isEmpty());\n+        \n+        partitions = CollectionUtils.partition(input);\n+        assertEquals(1, partitions.size());\n+        assertEquals(input, partitions.get(0));\n+    }\n+\n+    @Test\n+    public void partitionWithOutputCollections() {\n+        List<Integer> input = new ArrayList<Integer>();\n+        input.add(1);\n+        input.add(2);\n+        input.add(3);\n+        input.add(4);\n+        \n+        List<Integer> output = new ArrayList<Integer>();\n+        List<Integer> rejected = new ArrayList<Integer>();\n+\n+        CollectionUtils.partition(input, EQUALS_TWO, output, rejected);\n+\n+        // output contains 2\n+        assertEquals(1, output.size());\n+        assertEquals(2, CollectionUtils.extractSingleton(output).intValue());\n+        \n+        // rejected contains 1, 3, and 4\n+        Integer[] expected = {1, 3, 4};\n+        Assert.assertArrayEquals(expected, rejected.toArray());\n+        \n+        output.clear();\n+        rejected.clear();\n+        CollectionUtils.partition((List<Integer>) null, EQUALS_TWO, output, rejected);\n+        assertTrue(output.isEmpty());\n+        assertTrue(rejected.isEmpty());\n+    }\n+\n+    @Test\n+    public void partitionMultiplePredicates() {\n+        List<Integer> input = new ArrayList<Integer>();\n+        input.add(1);\n+        input.add(2);\n+        input.add(3);\n+        input.add(4);\n+        List<Collection<Integer>> partitions = CollectionUtils.partition(input, EQUALS_TWO, EVEN);\n+\n+        // first partition contains 2\n+        Collection<Integer> partition = partitions.get(0);\n+        assertEquals(1, partition.size());\n+        assertEquals(2, partition.iterator().next().intValue());\n+        \n+        // second partition contains 4\n+        partition = partitions.get(1);\n+        assertEquals(1, partition.size());\n+        assertEquals(4, partition.iterator().next().intValue());\n+        \n+        // third partition contains 1 and 3\n+        Integer[] expected = {1, 3};\n+        partition = partitions.get(2);\n+        Assert.assertArrayEquals(expected, partition.toArray());\n+    }\n+    \n+    @Test\n     public void collect() {\n         final Transformer<Number, Long> transformer = TransformerUtils.constantTransformer(2L);\n         Collection<Number> collection = CollectionUtils.<Integer, Number>collect(iterableA, transformer);", "timestamp": 1420120304, "metainfo": ""}