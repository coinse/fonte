{"sha": "702882dd7686ce154ec29a063436d37e2a31366f", "log": "Initial checkin   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.1 2002/08/17 11:38:53 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/17 11:38:53 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Dictionary;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+import java.util.Map;\n+\n+import org.apache.commons.collections.iterators.ArrayIterator;\n+import org.apache.commons.collections.iterators.CollatingIterator;\n+import org.apache.commons.collections.iterators.EnumerationIterator;\n+import org.apache.commons.collections.iterators.FilterIterator;\n+import org.apache.commons.collections.iterators.FilterListIterator;\n+import org.apache.commons.collections.iterators.IteratorChain;\n+import org.apache.commons.collections.iterators.IteratorEnumeration;\n+import org.apache.commons.collections.iterators.ListIteratorWrapper;\n+import org.apache.commons.collections.iterators.SingletonIterator;\n+import org.apache.commons.collections.iterators.SingletonListIterator;\n+import org.apache.commons.collections.iterators.TransformIterator;\n+/**\n+ * Provides static utility methods and decorators for {@link Iterator} \n+ * instances. The implementations are provided in the \n+ * <code>org.apache.commons.collections.iterators</code> subpackage.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: IteratorUtils.java,v 1.1 2002/08/17 11:38:53 scolebourne Exp $\n+ * @since 2.1\n+ */\n+public class IteratorUtils {\n+    // validation is done in this class in certain cases because the\n+    // public classes allow invalid states\n+\n+    /**\n+     * Prevents instantiation.\n+     */\n+    private IteratorUtils() {\n+    }\n+\n+    /**\n+     * Gets an empty iterator.\n+     * <p>\n+     * This iterator is a valid iterator object that will iterate over\n+     * nothing.\n+     *\n+     * @return  an iterator over nothing\n+     */\n+    public static Iterator emptyIterator() {\n+        return Collections.EMPTY_LIST.iterator();\n+    }\n+\n+    /**\n+     * Gets an empty list iterator.\n+     * <p>\n+     * This iterator is a valid list iterator object that will iterate \n+     * over nothing.\n+     *\n+     * @return  a list iterator over nothing\n+     */\n+    public static ListIterator emptyListIterator() {\n+        return Collections.EMPTY_LIST.listIterator();\n+    }\n+\n+    /**\n+     * Gets a singleton iterator.\n+     * <p>\n+     * This iterator is a valid iterator object that will iterate over\n+     * the specified object.\n+     *\n+     * @param object  the single object over which to iterate\n+     * @return  a singleton iterator over the object\n+     */\n+    public static Iterator singletonIterator(Object object) {\n+        return new SingletonIterator(object);\n+    }\n+\n+    /**\n+     * Gets a singleton list iterator.\n+     * <p>\n+     * This iterator is a valid list iterator object that will iterate over\n+     * the specified object.\n+     *\n+     * @param object  the single object over which to iterate\n+     * @return  a singleton list iterator over the object\n+     */\n+    public static ListIterator singletonListIterator(Object object) {\n+        return new SingletonListIterator(object);\n+    }\n+\n+    /**\n+     * Gets an iterator over an array.\n+     *\n+     * @param array  the array over which to iterate\n+     * @return  an iterator over the array\n+     * @throws NullPointerException if array is null\n+     */\n+    public static Iterator arrayIterator(Object[] array) {\n+        return new ArrayIterator(array);\n+    }\n+\n+    /**\n+     * Gets an iterator over the end part of an array.\n+     *\n+     * @param array  the array over which to iterate\n+     * @param start  the index to start iterating at\n+     * @return an iterator over part of the array\n+     * @throws IllegalArgumentException if array bounds are invalid\n+     * @throws NullPointerException if array is null\n+     */\n+    public static Iterator arrayIterator(Object[] array, int start) {\n+        return new ArrayIterator(array, start);\n+    }\n+\n+    /**\n+     * Gets an iterator over part of an array.\n+     *\n+     * @param array  the array over which to iterate\n+     * @param start  the index to start iterating at\n+     * @param end  the index to finish iterating at\n+     * @return an iterator over part of the array\n+     * @throws IllegalArgumentException if array bounds are invalid\n+     * @throws NullPointerException if array is null\n+     */\n+    public static Iterator arrayIterator(Object[] array, int start, int end) {\n+        return new ArrayIterator(array, start, end);\n+    }\n+\n+//    /**\n+//     * Gets a list iterator over an array.\n+//     *\n+//     * @param array  the array over which to iterate\n+//     * @return  a list iterator over the array\n+//     * @throws NullPointerException if array is null\n+//     */\n+//    public static ListIterator arrayListIterator(Object[] array) {\n+//        return new ArrayListIterator(array);\n+//    }\n+//\n+//    /**\n+//     * Gets a list iterator over the end part of an array.\n+//     *\n+//     * @param array  the array over which to iterate\n+//     * @param start  the index to start iterating at\n+//     * @return a list iterator over part of the array\n+//     * @throws IllegalArgumentException if array bounds are invalid\n+//     * @throws NullPointerException if array is null\n+//     */\n+//    public static ListIterator arrayListIterator(Object[] array, int start) {\n+//        return new ArrayListIterator(array, start);\n+//    }\n+//\n+//    /**\n+//     * Gets a list iterator over part of an array.\n+//     *\n+//     * @param array  the array over which to iterate\n+//     * @param start  the index to start iterating at\n+//     * @param end  the index to finish iterating at\n+//     * @return a list iterator over part of the array\n+//     * @throws IllegalArgumentException if array bounds are invalid\n+//     * @throws NullPointerException if array is null\n+//     */\n+//    public static ListIterator arrayListIterator(Object[] array, int start, int end) {\n+//        return new ArrayListIterator(array, start, end);\n+//    }\n+\n+    /**\n+     * Gets an iterator that iterates through two {@link Iterator}s \n+     * one after another.\n+     *\n+     * @param iterator1  the first iterators to use, not null\n+     * @param iterator2  the first iterators to use, not null\n+     * @return a combination iterator over the iterators\n+     * @throws NullPointerException if either iterator is null\n+     */\n+    public static Iterator chainedIterator(Iterator iterator1, Iterator iterator2) {\n+        return new IteratorChain(iterator1, iterator2);\n+    }\n+\n+    /**\n+     * Gets an iterator that iterates through an array of {@link Iterator}s \n+     * one after another.\n+     *\n+     * @param iterators  the iterators to use, not null or empty or contain nulls\n+     * @return a combination iterator over the iterators\n+     * @throws NullPointerException if iterators array is null or contains a null\n+     */\n+    public static Iterator chainedIterator(Iterator[] iterators) {\n+        return new IteratorChain(iterators);\n+    }\n+\n+    /**\n+     * Gets an iterator that iterates through a collections of {@link Iterator}s \n+     * one after another.\n+     *\n+     * @param iterators  the iterators to use, not null or empty or contain nulls\n+     * @return a combination iterator over the iterators\n+     * @throws NullPointerException if iterators collection is null or contains a null\n+     * @throws ClassCastException if the iterators collection contains the wrong object type\n+     */\n+    public static Iterator chainedIterator(Collection iterators) {\n+        return new IteratorChain(iterators);\n+    }\n+\n+    /**\n+     * Gets an iterator that provides an ordered iteration over the elements\n+     * contained in a collection of ordered {@link Iterator}s.\n+     * <p>\n+     * Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n+     * the {@link #next} method will return the lesser of \n+     * <code>A.next()</code> and <code>B.next()</code>.\n+     * <p>\n+     * The comparator is optional. If null is specified then natural order is used.\n+     *\n+     * @param comparator  the comparator to use, may be null for natural order\n+     * @param iterator1  the first iterators to use, not null\n+     * @param iterator2  the first iterators to use, not null\n+     * @return a combination iterator over the iterators\n+     * @throws NullPointerException if either iterator is null\n+     */\n+    public static Iterator collatedIterator(Comparator comparator, Iterator iterator1, Iterator iterator2) {\n+        return new CollatingIterator(comparator, iterator1, iterator2);\n+    }\n+\n+    /**\n+     * Gets an iterator that provides an ordered iteration over the elements\n+     * contained in an array of {@link Iterator}s.\n+     * <p>\n+     * Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n+     * the {@link #next} method will return the lesser of \n+     * <code>A.next()</code> and <code>B.next()</code> and so on.\n+     * <p>\n+     * The comparator is optional. If null is specified then natural order is used.\n+     *\n+     * @param comparator  the comparator to use, may be null for natural order\n+     * @param iterators  the iterators to use, not null or empty or contain nulls\n+     * @return a combination iterator over the iterators\n+     * @throws NullPointerException if iterators array is null or contains a null\n+     */\n+    public static Iterator collatedIterator(Comparator comparator, Iterator[] iterators) {\n+        return new CollatingIterator(comparator, iterators);\n+    }\n+\n+    /**\n+     * Gets an iterator that provides an ordered iteration over the elements\n+     * contained in a collection of {@link Iterator}s.\n+     * <p>\n+     * Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n+     * the {@link #next} method will return the lesser of \n+     * <code>A.next()</code> and <code>B.next()</code> and so on.\n+     * <p>\n+     * The comparator is optional. If null is specified then natural order is used.\n+     *\n+     * @param comparator  the comparator to use, may be null for natural order\n+     * @param iterators  the iterators to use, not null or empty or contain nulls\n+     * @return a combination iterator over the iterators\n+     * @throws NullPointerException if iterators collection is null or contains a null\n+     * @throws ClassCastException if the iterators collection contains the wrong object type\n+     */\n+    public static Iterator collatedIterator(Comparator comparator, Collection iterators) {\n+        return new CollatingIterator(comparator, iterators);\n+    }\n+\n+    /**\n+     * Gets an iterator that transforms the elements of another iterator.\n+     * <p>\n+     * The transformation occurs during the next() method and the underlying\n+     * iterator is unaffected by the transformation.\n+     *\n+     * @param iterator  the iterator to use, not null\n+     * @param transform  the transform to use, not null\n+     * @throws NullPointerException if either parameter is null\n+     */\n+    public static Iterator transformedIterator(Iterator iterator, Transformer transform) {\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        if (transform == null) {\n+            throw new NullPointerException(\"Transformer must not be null\");\n+        }\n+        return new TransformIterator(iterator, transform);\n+    }\n+    \n+    /**\n+     * Gets an iterator that filters another iterator.\n+     * <p>\n+     * The returned iterator will only return objects that match the specified\n+     * filtering predicate.\n+     *\n+     * @param iterator  the iterator to use, not null\n+     * @param predicate  the predicate to use as a filter, not null\n+     * @throws NullPointerException if either parameter is null\n+     */\n+    public static Iterator filteredIterator(Iterator iterator, Predicate predicate) {\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        if (predicate == null) {\n+            throw new NullPointerException(\"Predicate must not be null\");\n+        }\n+        return new FilterIterator(iterator, predicate);\n+    }\n+    \n+    /**\n+     * Gets a list iterator that filters another list iterator.\n+     * <p>\n+     * The returned iterator will only return objects that match the specified\n+     * filtering predicate.\n+     *\n+     * @param listIterator  the list iterator to use, not null\n+     * @param predicate  the predicate to use as a filter, not null\n+     * @throws NullPointerException if either parameter is null\n+     */\n+    public static ListIterator filteredListIterator(ListIterator listIterator, Predicate predicate) {\n+        if (listIterator == null) {\n+            throw new NullPointerException(\"ListIterator must not be null\");\n+        }\n+        if (predicate == null) {\n+            throw new NullPointerException(\"Predicate must not be null\");\n+        }\n+        return new FilterListIterator(listIterator, predicate);\n+    }\n+    \n+    /**\n+     * Gets a list iterator based on a simple iterator.\n+     * <p>\n+     * As the wrapped Iterator is traversed, a LinkedList of its values is\n+     * cached, permitting all required operations of ListIterator.\n+     *\n+     * @param iterator  the iterator to use, not null\n+     * @throws NullPointerException if iterator parameter is null\n+     */\n+    public static Iterator iteratorListIterator(Iterator iterator) {\n+        return new ListIteratorWrapper(iterator);\n+    }\n+    \n+    /**\n+     * Gets an iterator that provides an iterator view of the given enumeration.\n+     *\n+     * @param enumeration  the enumeration to use\n+     */\n+    public static Iterator enumerationIterator(Enumeration enumeration) {\n+        if (enumeration == null) {\n+            throw new NullPointerException(\"Enumeration must not be null\");\n+        }\n+        return new EnumerationIterator(enumeration);\n+    }\n+\n+    /**\n+     * Gets an iterator that provides an iterator view of the given enumeration \n+     * that will remove elements from the specified collection.\n+     *\n+     * @param enumeration  the enumeration to use\n+     * @param collection  the collection to remove elements form\n+     */\n+    public static Iterator enumerationIterator(Enumeration enumeration, Collection removeCollection) {\n+        if (enumeration == null) {\n+            throw new NullPointerException(\"Enumeration must not be null\");\n+        }\n+        if (removeCollection == null) {\n+            throw new NullPointerException(\"Collection must not be null\");\n+        }\n+        return new EnumerationIterator(enumeration, removeCollection);\n+    }\n+    \n+    /**\n+     * Gets an enumeration that wraps an iterator.\n+     *\n+     * @param iterator  the iterator to use, not null\n+     * @throws NullPointerException if iterator is null\n+     */\n+    public static Enumeration iteratorEnumeration(Iterator iterator) {\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        return new IteratorEnumeration(iterator);\n+    }\n+    \n+    /** \n+     * Gets a suitable Iterator for the given object.\n+     * <p>\n+     * This method can handles objects as follows\n+     * <ul>\n+     * <li>null - empty iterator\n+     * <li>Iterator - returned directly\n+     * <li>Enumeration - wrapped\n+     * <li>Collection - iterator from collection returned\n+     * <li>Map - values iterator returned\n+     * <li>Dictionary - values (elements) enumeration returned as iterator\n+     * <li>array - iterator over array returned\n+     * <li>object with iterator() public method accessed by reflection\n+     * <li>object - singleton iterator\n+     * </ul>\n+     * \n+     * @param obj  the object to convert to an iterator\n+     * @return a suitable iterator, never null\n+     */\n+    public static Iterator getIterator(Object obj) {\n+        if (obj == null) {\n+            return emptyIterator();\n+            \n+        } else if (obj instanceof Iterator) {\n+            return (Iterator) obj;\n+            \n+        } else if (obj instanceof Collection) {\n+            return ((Collection) obj).iterator();\n+            \n+        } else if (obj instanceof Object[]) {\n+            return new ArrayIterator(obj);\n+            \n+        } else if (obj instanceof Enumeration) {\n+            return new EnumerationIterator((Enumeration) obj);\n+            \n+        } else if (obj instanceof Map) {\n+            return ((Map) obj).values().iterator();\n+            \n+        } else if (obj instanceof Dictionary) {\n+            return new EnumerationIterator(((Dictionary) obj).elements());\n+            \n+        } else if (obj != null && obj.getClass().isArray()) {\n+            return new ArrayIterator(obj);\n+            \n+        } else {\n+            try {\n+                Method method = obj.getClass().getMethod(\"iterator\", null);\n+                if (Iterator.class.isAssignableFrom(method.getReturnType())) {\n+                    Iterator it = (Iterator) method.invoke(obj, null);\n+                    if (it != null) {\n+                        return it;\n+                    }\n+                }\n+            } catch (Exception ex) {\n+                // ignore\n+            }\n+            return singletonIterator(obj);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/SingletonListIterator.java,v 1.1 2002/08/17 11:33:56 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/17 11:33:56 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+/** \n+ * <p><code>SingletonIterator</code> is an {@link ListIterator} over a single \n+ * object instance.</p>\n+ *\n+ * @since 2.1\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: SingletonListIterator.java,v 1.1 2002/08/17 11:33:56 scolebourne Exp $\n+ */\n+public class SingletonListIterator implements ListIterator {\n+\n+    private boolean first = true;\n+    private boolean nextCalled = false;\n+    private Object object;\n+\n+    /**\n+     * Constructs a new <Code>SingletonListIterator</Code>.\n+     *\n+     * @param object  the single object to return from the iterator\n+     */\n+    public SingletonListIterator(Object object) {\n+        super();\n+        this.object = object;\n+    }\n+\n+    /**\n+     * Is another object available from the iterator.\n+     * <p>\n+     * This returns true if the single object hasn't been returned yet.\n+     * \n+     * @return true if the single object hasn't been returned yet\n+     */\n+    public boolean hasNext() {\n+        return first;\n+    }\n+\n+    /**\n+     * Is a previous object available from the iterator.\n+     * <p>\n+     * This returns true if the single object has been returned.\n+     * \n+     * @return true if the single object has been returned\n+     */\n+    public boolean hasPrevious() {\n+        return !first;\n+    }\n+\n+    /**\n+     * Returns the index of the element that would be returned by a subsequent\n+     * call to <tt>next</tt>.\n+     *\n+     * @return 0 or 1 depending on current state. \n+     */\n+    public int nextIndex() {\n+        return (first ? 0 : 1);\n+    }\n+\n+    /**\n+     * Returns the index of the element that would be returned by a subsequent\n+     * call to <tt>previous</tt>. -1 indicates that the iterator is currently at\n+     * the start.\n+     *\n+     * @return 0 or -1 depending on current state. \n+     */\n+    public int previousIndex() {\n+        return (first ? -1 : 0);\n+    }\n+\n+    /**\n+     * Get the next object from the iterator.\n+     * <p>\n+     * This returns the single object if it hasn't been returned yet.\n+     *\n+     * @return the single object\n+     * @throws NoSuchElementException if the single object has already \n+     *    been returned\n+     */\n+    public Object next() {\n+        if (!first) {\n+            throw new NoSuchElementException();\n+        }\n+        first = false;\n+        nextCalled = true;\n+        return object;\n+    }\n+\n+    /**\n+     * Get the previous object from the iterator.\n+     * <p>\n+     * This returns the single object if it has been returned.\n+     *\n+     * @return the single object\n+     * @throws NoSuchElementException if the single object has not already \n+     *    been returned\n+     */\n+    public Object previous() {\n+        if (first) {\n+            throw new NoSuchElementException();\n+        }\n+        first = true;\n+        return object;\n+    }\n+\n+    /**\n+     * Remove always throws {@link UnsupportedOperationException}.\n+     *\n+     * @throws UnsupportedOperationException always\n+     */\n+    public void remove() {\n+        throw new UnsupportedOperationException(\"remove() is not supported by this iterator\");\n+    }\n+    \n+    /**\n+     * Add always throws {@link UnsupportedOperationException}.\n+     *\n+     * @throws UnsupportedOperationException always\n+     */\n+    public void add(Object obj) {\n+        throw new UnsupportedOperationException(\"add() is not supported by this iterator\");\n+    }\n+    \n+    /**\n+     * Set sets the value of the singleton.\n+     *\n+     * @param obj  the object to set\n+     * @throws IllegalStateException if <tt>next</tt> has not been called\n+     */\n+    public void set(Object obj) {\n+        if (nextCalled == false) {\n+            throw new IllegalStateException();\n+        }\n+        this.object = obj;\n+    }\n+    \n+}", "timestamp": 1029584333, "metainfo": ""}