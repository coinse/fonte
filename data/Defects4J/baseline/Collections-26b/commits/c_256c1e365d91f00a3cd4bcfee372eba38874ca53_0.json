{"sha": "256c1e365d91f00a3cd4bcfee372eba38874ca53", "log": "Simplifying exceptions now that cause is in the parent. Patch from Sebb in COLLECTIONS-336  ", "commit": "\n--- a/src/java/org/apache/commons/collections/BufferOverflowException.java\n+++ b/src/java/org/apache/commons/collections/BufferOverflowException.java\n     /** Serialization version */\n     private static final long serialVersionUID = -3992254982265755876L;\n \n-    /** The root cause throwable */\n-    private final Throwable throwable;\n-\n     /**\n      * Constructs a new <code>BufferOverflowException</code>.\n      */\n     public BufferOverflowException() {\n         super();\n-        throwable = null;\n     }\n \n     /** \n      * @param exception  the root cause of the exception\n      */\n     public BufferOverflowException(String message, Throwable exception) {\n-        super(message);\n-        throwable = exception;\n+        super(message, exception);\n     }\n \n-    /**\n-     * Gets the root cause of the exception.\n-     *\n-     * @return the root cause\n-     */\n-    @Override\n-    public final Throwable getCause() {\n-        return throwable;\n-    }\n-    \n }\n--- a/src/java/org/apache/commons/collections/BufferUnderflowException.java\n+++ b/src/java/org/apache/commons/collections/BufferUnderflowException.java\n public class BufferUnderflowException extends NoSuchElementException {\n     \n     /** Serialization version */\n-    private static final long serialVersionUID = 4054570024234606028L;\n-\n-    /** The root cause throwable */\n-    private final Throwable throwable;\n+    private static final long serialVersionUID = 7106567570467436893L;\n \n     /**\n      * Constructs a new <code>BufferUnderflowException</code>.\n      */\n     public BufferUnderflowException() {\n         super();\n-        throwable = null;\n     }\n \n     /** \n      * @param message  the detail message for this exception\n      */\n     public BufferUnderflowException(String message) {\n-        this(message, null);\n+        super(message);\n     }\n \n     /** \n      */\n     public BufferUnderflowException(String message, Throwable exception) {\n         super(message);\n-        throwable = exception;\n+        initCause(exception);\n     }\n \n-    /**\n-     * Gets the root cause of the exception.\n-     *\n-     * @return the root cause\n-     */\n-    @Override\n-    public final Throwable getCause() {\n-        return throwable;\n-    }\n-    \n }\n--- a/src/java/org/apache/commons/collections/FunctorException.java\n+++ b/src/java/org/apache/commons/collections/FunctorException.java\n  */\n package org.apache.commons.collections;\n \n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n /**\n  * Runtime exception thrown from functors.\n  * If required, a root cause error can be wrapped within this one.\n public class FunctorException extends RuntimeException {\n     \n     /** Serialization version */\n-    private static final long serialVersionUID = 9139387246344345475L;\n-\n-    /**\n-     * Does JDK support nested exceptions\n-     */\n-    private static final boolean JDK_SUPPORTS_NESTED;\n-\n-    static {\n-        boolean flag = false;\n-        try {\n-            Throwable.class.getDeclaredMethod(\"getCause\", new Class[0]);\n-            flag = true;\n-        } catch (NoSuchMethodException ex) {\n-            flag = false;\n-        }\n-        JDK_SUPPORTS_NESTED = flag;\n-    }\n-\n-    /**\n-     * Root cause of the exception\n-     */\n-    private final Throwable rootCause;\n+    private static final long serialVersionUID = -4704772662059351193L;\n \n     /**\n      * Constructs a new <code>FunctorException</code> without specified\n      */\n     public FunctorException() {\n         super();\n-        this.rootCause = null;\n     }\n \n     /**\n      */\n     public FunctorException(String msg) {\n         super(msg);\n-        this.rootCause = null;\n     }\n \n     /**\n      *                   to be thrown.\n      */\n     public FunctorException(Throwable rootCause) {\n-        super((rootCause == null ? null : rootCause.getMessage()));\n-        this.rootCause = rootCause;\n+        super(rootCause);\n     }\n \n     /**\n      *                   to be thrown.\n      */\n     public FunctorException(String msg, Throwable rootCause) {\n-        super(msg);\n-        this.rootCause = rootCause;\n-    }\n-\n-    /**\n-     * Gets the cause of this throwable.\n-     * \n-     * @return  the cause of this throwable, or <code>null</code>\n-     */\n-    public Throwable getCause() {\n-        return rootCause;\n-    }\n-\n-    /**\n-     * Prints the stack trace of this exception to the standard error stream.\n-     */\n-    public void printStackTrace() {\n-        printStackTrace(System.err);\n-    }\n-\n-    /**\n-     * Prints the stack trace of this exception to the specified stream.\n-     *\n-     * @param out  the <code>PrintStream</code> to use for output\n-     */\n-    public void printStackTrace(PrintStream out) {\n-        synchronized (out) {\n-            PrintWriter pw = new PrintWriter(out, false);\n-            printStackTrace(pw);\n-            // Flush the PrintWriter before it's GC'ed.\n-            pw.flush();\n-        }\n-    }\n-\n-    /**\n-     * Prints the stack trace of this exception to the specified writer.\n-     *\n-     * @param out  the <code>PrintWriter</code> to use for output\n-     */\n-    public void printStackTrace(PrintWriter out) {\n-        synchronized (out) {\n-            super.printStackTrace(out);\n-            if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n-                out.print(\"Caused by: \");\n-                rootCause.printStackTrace(out);\n-            }\n-        }\n+        super(msg, rootCause);\n     }\n \n }", "timestamp": 1276976868, "metainfo": ""}