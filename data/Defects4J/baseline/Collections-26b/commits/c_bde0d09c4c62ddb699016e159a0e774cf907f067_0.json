{"sha": "bde0d09c4c62ddb699016e159a0e774cf907f067", "log": "Added Jonathan Carlson's patch for a Comparator that uses a Transformer   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/comparators/TransformingComparator.java\n+package org.apache.commons.collections.comparators;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * Decorates another Comparator with transformation behavior.&nbsp;That is, the\n+ * return value from the transform operation will be passed to the decorated\n+ * <CODE>Comparator#compare</CODE> method.\n+ * <p>\n+ * @see org.apache.commons.collections.Transformer\n+ * @see org.apache.commons.collections.comparators.ComparableComparator\n+ */\n+public class TransformingComparator implements Comparator\n+{\n+    protected Comparator decorated;\n+    protected Transformer transformer;\n+\n+    /**\n+     * Constructs an instance with the given Transformer and a ComparableComparator.\n+     * @param transformer what will transform the instance.\n+     */\n+    public TransformingComparator(Transformer transformer)\n+    {\n+        this(transformer, new ComparableComparator());\n+    }\n+\n+    /**\n+     * Constructs an instance with the given Transformer and Comparator\n+     * @param decorated  the decorated Comparator\n+     * @param getterName    the getter name\n+     */\n+    public TransformingComparator(Transformer transformer, Comparator decorated)\n+    {\n+        this.decorated = decorated;\n+        this.transformer = transformer;\n+    }\n+\n+    /**\n+     * Returns the result of comparing the values from the transform operation.\n+     * @return the result of comparing the values from the transform operation\n+     */\n+    public int compare(Object o1, Object o2)\n+    {\n+        Object value1 = this.transformer.transform(o1);\n+        Object value2 = this.transformer.transform(o2);\n+        return this.decorated.compare(value1, value2);\n+    }\n+\n+}\n+", "timestamp": 1023518520, "metainfo": ""}