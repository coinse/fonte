{"sha": "19045cb424a84f3f4c94c5607e59c5fad0bdddea", "log": "Added tests for LazyMap, LazySortedMap. Modified TestMapUtils to test only the factory method for LazyMap.   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.11 2003/09/13 16:12:47 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.12 2003/09/14 03:30:23 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.TreeMap;\n \n import org.apache.commons.collections.decorators.PredicatedMap;\n+import org.apache.commons.collections.decorators.LazyMap;\n \n import junit.framework.Test;\n \n /**\n  * Tests for MapUtils.\n  * \n- * @version $Revision: 1.11 $ $Date: 2003/09/13 16:12:47 $\n+ * @version $Revision: 1.12 $ $Date: 2003/09/14 03:30:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Arun Mammen Thomas\n     }\n \n     public void testLazyMapFactory() {\n-        Map map = MapUtils.lazyMap(new HashMap(), new Factory() {\n-            public Object create() {\n-                return new Integer(5);\n-            }\n-        });\n-\n-        assertEquals(0, map.size());\n-        Integer i1 = (Integer) map.get(\"Five\");\n-        assertEquals(new Integer(5), i1);\n-        assertEquals(1, map.size());\n-        Integer i2 = (Integer) map.get(new String(new char[] {'F','i','v','e'}));\n-        assertEquals(new Integer(5), i2);\n-        assertEquals(1, map.size());\n-        assertSame(i1, i2);\n+        Factory factory = FactoryUtils.constantFactory(new Integer(5));\n+        Map map = MapUtils.lazyMap(new HashMap(), factory);       \n+        assertTrue(map instanceof LazyMap);        \n+        try {\n+            map = MapUtils.lazyMap(new HashMap(), (Factory) null);\n+            fail(\"Expecting IllegalArgumentException for null factory\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        try {\n+            map = MapUtils.lazyMap(null, factory);\n+            fail(\"Expecting IllegalArgumentException for null map\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        Transformer transformer = TransformerUtils.asTransformer(factory);\n+        map = MapUtils.lazyMap(new HashMap(), transformer);       \n+        assertTrue(map instanceof LazyMap);  \n+         try {\n+            map = MapUtils.lazyMap(new HashMap(), (Transformer) null);\n+            fail(\"Expecting IllegalArgumentException for null transformer\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        try {\n+            map = MapUtils.lazyMap(null, transformer);\n+            fail(\"Expecting IllegalArgumentException for null map\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }              \n     }\n \n     public void testLazyMapTransformer() {\n--- a/src/test/org/apache/commons/collections/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.11 2003/09/13 16:12:47 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.12 2003/09/14 03:30:23 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections decorators tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.11 $ $Date: 2003/09/13 16:12:47 $\n+ * @version $Revision: 1.12 $ $Date: 2003/09/14 03:30:23 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestPredicatedSet.suite());\n         suite.addTest(TestPredicatedMap.suite());\n         suite.addTest(TestPredicatedSortedMap.suite());\n+        suite.addTest(TestLazyMap.suite());\n+        suite.addTest(TestLazySortedMap.suite());\n         \n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestLazyMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestLazyMap.java,v 1.1 2003/09/14 03:30:23 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.collections.TestMap;\n+import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.FactoryUtils;\n+/**\n+ * Extension of {@link TestMap} for exercising the \n+ * {@link LazyMap} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/14 03:30:23 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestLazyMap extends TestMap {\n+    \n+    public TestLazyMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestLazyMap.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestLazyMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------\n+    \n+    protected Factory oneFactory = FactoryUtils.constantFactory(\"One\");\n+    protected Factory nullFactory = FactoryUtils.nullFactory();\n+    \n+    protected Map decorateMap(Map map, Factory factory) {\n+        return LazyMap.decorate(map, factory);\n+    }\n+    \n+    public Map makeEmptyMap() {\n+        return decorateMap(new HashMap(), nullFactory);\n+    }\n+    \n+//--------------------------------------------------------------------   \n+    \n+    protected Map makeTestMap(Factory factory) {\n+        return decorateMap(new HashMap(), factory);\n+    }\n+    \n+    public void testMapGet() {\n+        Map map = makeTestMap(oneFactory);\n+        assertEquals(0, map.size());\n+        String s1 = (String) map.get(\"Five\");\n+        assertEquals(\"One\", s1);\n+        assertEquals(1, map.size());\n+        String s2 = (String) map.get(new String(new char[] {'F','i','v','e'}));\n+        assertEquals(\"One\", s2);\n+        assertEquals(1, map.size());\n+        assertSame(s1, s2);\n+        \n+        map = makeTestMap(nullFactory);\n+        Object o = map.get(\"Five\");\n+        assertEquals(null,o);\n+        assertEquals(1, map.size());\n+        \n+    }       \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestLazySortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestLazySortedMap.java,v 1.1 2003/09/14 03:30:23 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import java.util.TreeMap;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.TransformerUtils;\n+\n+/**\n+ * Extension of {@link TestLazyMap} for exercising the \n+ * {@link LazySortedMap} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/14 03:30:23 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestLazySortedMap extends TestLazyMap {\n+    \n+    public TestLazySortedMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestLazySortedMap.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestLazySortedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------\n+    \n+    protected SortedMap decorateMap(SortedMap map, Factory factory) {\n+        return LazySortedMap.decorate(map, factory);\n+    }\n+    \n+    public Map makeEmptyMap() {\n+        return decorateMap(new TreeMap(), nullFactory);\n+    }\n+    \n+    protected boolean useNullKey() {\n+        return false;\n+    }\n+    \n+//--------------------------------------------------------------------   \n+    \n+    protected SortedMap makeTestSortedMap(Factory factory) {\n+        return decorateMap(new TreeMap(), factory);\n+    }\n+    \n+    public void testSortOrder() {\n+        SortedMap map = makeTestSortedMap(oneFactory);\n+        map.put(\"A\",  \"a\");\n+        map.get(\"B\"); // Entry with value \"One\" created\n+        map.put(\"C\", \"c\");\n+        assertEquals(\"First key should be A\", map.firstKey(), \"A\");\n+        assertEquals(\"Last key should be C\", map.lastKey(), \"C\");\n+        assertEquals(\"First key in tail map should be B\", \n+            map.tailMap(\"B\").firstKey(), \"B\");\n+        assertEquals(\"Last key in head map should be B\", \n+            map.headMap(\"C\").lastKey(), \"B\");\n+        assertEquals(\"Last key in submap should be B\",\n+           map.subMap(\"A\",\"C\").lastKey(), \"B\");\n+        \n+        Comparator c = map.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", \n+            c == null);      \n+    } \n+    \n+    public void testTransformerDecorate() {\n+        Transformer transformer = TransformerUtils.asTransformer(oneFactory);\n+        SortedMap map = LazySortedMap.decorate(new TreeMap(), transformer);     \n+        assertTrue(map instanceof LazySortedMap);  \n+         try {\n+            map = LazySortedMap.decorate(new TreeMap(), (Transformer) null);\n+            fail(\"Expecting IllegalArgumentException for null transformer\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        try {\n+            map = LazySortedMap.decorate(null, transformer);\n+            fail(\"Expecting IllegalArgumentException for null map\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        } \n+    }\n+}", "timestamp": 1063510223, "metainfo": ""}