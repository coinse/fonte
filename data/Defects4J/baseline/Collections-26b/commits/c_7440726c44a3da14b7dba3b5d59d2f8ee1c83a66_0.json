{"sha": "7440726c44a3da14b7dba3b5d59d2f8ee1c83a66", "log": "All/Any/One/None Predicate - allow construction with zero or one predicates rfe 37979, implemented by Matt Benson  ", "commit": "\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n /*\n- *  Copyright 2002-2004 The Apache Software Foundation\n+ *  Copyright 2002-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     /**\n      * Create a new Predicate that returns true only if all of the specified\n      * predicates are true.\n+     * If the array of predicates is empty, then this predicate returns true.\n      * \n      * @see org.apache.commons.collections.functors.AllPredicate\n      * \n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static Predicate allPredicate(Predicate[] predicates) {\n     /**\n      * Create a new Predicate that returns true only if all of the specified\n      * predicates are true. The predicates are checked in iterator order.\n+     * If the collection of predicates is empty, then this predicate returns true.\n      * \n      * @see org.apache.commons.collections.functors.AllPredicate\n      * \n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n-     * @throws IllegalArgumentException if the predicates collection has less than 2 elements\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      */\n     public static Predicate allPredicate(Collection predicates) {\n     /**\n      * Create a new Predicate that returns true if any of the specified\n      * predicates are true.\n+     * If the array of predicates is empty, then this predicate returns false.\n      * \n      * @see org.apache.commons.collections.functors.AnyPredicate\n      * \n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static Predicate anyPredicate(Predicate[] predicates) {\n     /**\n      * Create a new Predicate that returns true if any of the specified\n      * predicates are true. The predicates are checked in iterator order.\n+     * If the collection of predicates is empty, then this predicate returns false.\n      * \n      * @see org.apache.commons.collections.functors.AnyPredicate\n      * \n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n-     * @throws IllegalArgumentException if the predicates collection has less than 2 elements\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      */\n     public static Predicate anyPredicate(Collection predicates) {\n     /**\n      * Create a new Predicate that returns true if only one of the specified\n      * predicates are true.\n+     * If the array of predicates is empty, then this predicate returns false.\n      * \n      * @see org.apache.commons.collections.functors.OnePredicate\n      * \n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static Predicate onePredicate(Predicate[] predicates) {\n     /**\n      * Create a new Predicate that returns true if only one of the specified\n      * predicates are true. The predicates are checked in iterator order.\n+     * If the collection of predicates is empty, then this predicate returns false.\n      * \n      * @see org.apache.commons.collections.functors.OnePredicate\n      * \n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n-     * @throws IllegalArgumentException if the predicates collection has less than 2 elements\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      */\n     public static Predicate onePredicate(Collection predicates) {\n     /**\n      * Create a new Predicate that returns true if none of the specified\n      * predicates are true.\n+     * If the array of predicates is empty, then this predicate returns true.\n      * \n      * @see org.apache.commons.collections.functors.NonePredicate\n      * \n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>none</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static Predicate nonePredicate(Predicate[] predicates) {\n     /**\n      * Create a new Predicate that returns true if none of the specified\n      * predicates are true. The predicates are checked in iterator order.\n+     * If the collection of predicates is empty, then this predicate returns true.\n      * \n      * @see org.apache.commons.collections.functors.NonePredicate\n      * \n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>none</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n-     * @throws IllegalArgumentException if the predicates collection has less than 2 elements\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      */\n     public static Predicate nonePredicate(Collection predicates) {\n--- a/src/java/org/apache/commons/collections/functors/AllPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AllPredicate.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import org.apache.commons.collections.Predicate;\n \n /**\n- * Predicate implementation that returns true if all the predicates return true.\n+ * Predicate implementation that returns true if all the\n+ * predicates return true.\n+ * If the array of predicates is empty, then this predicate returns true.\n  * \n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n+ * @author Matt Benson\n  */\n public final class AllPredicate implements Predicate, PredicateDecorator, Serializable {\n \n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static Predicate getInstance(Predicate[] predicates) {\n-        FunctorUtils.validateMin2(predicates);\n+        FunctorUtils.validate(predicates);\n         predicates = FunctorUtils.copy(predicates);\n         return new AllPredicate(predicates);\n     }\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n-     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n      */\n     public static Predicate getInstance(Collection predicates) {\n         Predicate[] preds = FunctorUtils.validate(predicates);\n--- a/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import org.apache.commons.collections.Predicate;\n \n /**\n- * Predicate implementation that returns true if any of the predicates return true.\n+ * Predicate implementation that returns true if any of the\n+ * predicates return true.\n+ * If the array of predicates is empty, then this predicate returns false.\n  * \n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n+ * @author Matt Benson\n  */\n public final class AnyPredicate implements Predicate, PredicateDecorator, Serializable {\n \n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static Predicate getInstance(Predicate[] predicates) {\n-        FunctorUtils.validateMin2(predicates);\n+        FunctorUtils.validate(predicates);\n         predicates = FunctorUtils.copy(predicates);\n         return new AnyPredicate(predicates);\n     }\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n-     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n      */\n     public static Predicate getInstance(Collection predicates) {\n         Predicate[] preds = FunctorUtils.validate(predicates);\n--- a/src/java/org/apache/commons/collections/functors/FunctorUtils.java\n+++ b/src/java/org/apache/commons/collections/functors/FunctorUtils.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n+ * @author Matt Benson\n  */\n class FunctorUtils {\n     \n      * Validate the predicates to ensure that all is well.\n      * \n      * @param predicates  the predicates to validate\n-     */\n-    static void validateMin2(Predicate[] predicates) {\n-        if (predicates == null) {\n-            throw new IllegalArgumentException(\"The predicate array must not be null\");\n-        }\n-        if (predicates.length < 2) {\n-            throw new IllegalArgumentException(\n-                \"At least 2 predicates must be specified in the predicate array, size was \" + predicates.length);\n-        }\n-        for (int i = 0; i < predicates.length; i++) {\n-            if (predicates[i] == null) {\n-                throw new IllegalArgumentException(\"The predicate array must not contain a null predicate, index \" + i + \" was null\");\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Validate the predicates to ensure that all is well.\n-     * \n-     * @param predicates  the predicates to validate\n      * @return predicate array\n      */\n     static Predicate[] validate(Collection predicates) {\n         if (predicates == null) {\n             throw new IllegalArgumentException(\"The predicate collection must not be null\");\n-        }\n-        if (predicates.size() < 2) {\n-            throw new IllegalArgumentException(\n-                \"At least 2 predicates must be specified in the predicate collection, size was \" + predicates.size());\n         }\n         // convert to array like this to guarantee iterator() ordering\n         Predicate[] preds = new Predicate[predicates.size()];\n--- a/src/java/org/apache/commons/collections/functors/NonePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NonePredicate.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import org.apache.commons.collections.Predicate;\n \n /**\n- * Predicate implementation that returns true if none of the predicates return true.\n+ * Predicate implementation that returns true if none of the\n+ * predicates return true.\n+ * If the array of predicates is empty, then this predicate returns true.\n  * \n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n+ * @author Matt Benson\n  */\n public final class NonePredicate implements Predicate, PredicateDecorator, Serializable {\n \n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static Predicate getInstance(Predicate[] predicates) {\n-        FunctorUtils.validateMin2(predicates);\n+        FunctorUtils.validate(predicates);\n         predicates = FunctorUtils.copy(predicates);\n         return new NonePredicate(predicates);\n     }\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n-     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n      */\n     public static Predicate getInstance(Collection predicates) {\n         Predicate[] preds = FunctorUtils.validate(predicates);\n--- a/src/java/org/apache/commons/collections/functors/OnePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/OnePredicate.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import org.apache.commons.collections.Predicate;\n \n /**\n- * Predicate implementation that returns true if only one of the predicates return true.\n+ * Predicate implementation that returns true if only one of the\n+ * predicates return true.\n+ * If the array of predicates is empty, then this predicate returns false.\n  * \n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n+ * @author Matt Benson\n  */\n public final class OnePredicate implements Predicate, PredicateDecorator, Serializable {\n \n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static Predicate getInstance(Predicate[] predicates) {\n-        FunctorUtils.validateMin2(predicates);\n+        FunctorUtils.validate(predicates);\n         predicates = FunctorUtils.copy(predicates);\n         return new OnePredicate(predicates);\n     }\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n-     * @throws IllegalArgumentException if the predicates array has less than 2 elements\n      */\n     public static Predicate getInstance(Collection predicates) {\n         Predicate[] preds = FunctorUtils.validate(predicates);\n--- a/src/test/org/apache/commons/collections/TestPredicateUtils.java\n+++ b/src/test/org/apache/commons/collections/TestPredicateUtils.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n+ * @author Matt Benson\n  */\n public class TestPredicateUtils extends junit.framework.TestCase {\n \n         coll.add(PredicateUtils.falsePredicate());\n         coll.add(PredicateUtils.falsePredicate());\n         assertEquals(false, PredicateUtils.allPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.falsePredicate());\n+        assertFalse(PredicateUtils.allPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.truePredicate());\n+        assertTrue(PredicateUtils.allPredicate(coll).evaluate(null));\n+        coll.clear();\n+        assertTrue(PredicateUtils.allPredicate(coll).evaluate(null));\n     }\n \n     public void testAllPredicateEx1() {\n     }\n     \n     public void testAllPredicateEx5() {\n-        try {\n-            PredicateUtils.allPredicate(Collections.EMPTY_LIST);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+        PredicateUtils.allPredicate(Collections.EMPTY_LIST);\n     }\n     \n     public void testAllPredicateEx6() {\n         coll.add(PredicateUtils.falsePredicate());\n         coll.add(PredicateUtils.falsePredicate());\n         assertEquals(false, PredicateUtils.anyPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.falsePredicate());\n+        assertFalse(PredicateUtils.anyPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.truePredicate());\n+        assertTrue(PredicateUtils.anyPredicate(coll).evaluate(null));\n+        coll.clear();\n+        assertFalse(PredicateUtils.anyPredicate(coll).evaluate(null));\n     }\n \n     public void testAnyPredicateEx1() {\n     }\n     \n     public void testAnyPredicateEx5() {\n-        try {\n-            PredicateUtils.anyPredicate(Collections.EMPTY_LIST);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+        PredicateUtils.anyPredicate(Collections.EMPTY_LIST);\n     }\n     \n     public void testAnyPredicateEx6() {\n         coll.add(PredicateUtils.falsePredicate());\n         coll.add(PredicateUtils.falsePredicate());\n         assertEquals(false, PredicateUtils.onePredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.falsePredicate());\n+        assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.truePredicate());\n+        assertTrue(PredicateUtils.onePredicate(coll).evaluate(null));\n+        coll.clear();\n+        assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));\n     }\n \n     public void testOnePredicateEx1() {\n     }\n     \n     public void testOnePredicateEx5() {\n-        try {\n-            PredicateUtils.onePredicate(Collections.EMPTY_LIST);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+        PredicateUtils.onePredicate(Collections.EMPTY_LIST);\n     }\n     \n     public void testOnePredicateEx6() {\n         coll.add(PredicateUtils.falsePredicate());\n         coll.add(PredicateUtils.falsePredicate());\n         assertEquals(true, PredicateUtils.nonePredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.falsePredicate());\n+        assertTrue(PredicateUtils.nonePredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(PredicateUtils.truePredicate());\n+        assertFalse(PredicateUtils.nonePredicate(coll).evaluate(null));\n+        coll.clear();\n+        assertTrue(PredicateUtils.nonePredicate(coll).evaluate(null));\n     }\n \n     public void testNonePredicateEx1() {\n     }\n     \n     public void testNonePredicateEx5() {\n-        try {\n-            PredicateUtils.nonePredicate(Collections.EMPTY_LIST);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+        PredicateUtils.nonePredicate(Collections.EMPTY_LIST);\n     }\n     \n     public void testNonePredicateEx6() {", "timestamp": 1139868753, "metainfo": ""}