{"sha": "3f58c1e6f0c2499e34d18d6fe34351559919069a", "log": "Add isTestSerialization() method to block serialization tests   ", "commit": "\n--- a/src/test/org/apache/commons/collections/AbstractTestObject.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestObject.java\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link Object} fails.\n  *\n- * @version $Revision: 1.5 $ $Date: 2004/04/09 15:17:11 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/31 22:39:20 $\n  * \n  * @author Rodney Waldhoff\n  * @author Stephen Colebourne\n      * @return true\n      */\n     public boolean supportsFullCollections() {\n+        return true;\n+    }\n+\n+    /**\n+     * Is serialization testing supported.\n+     * Default is true.\n+     */\n+    public boolean isTestSerialization() {\n         return true;\n     }\n \n \n     public void testSerializeDeserializeThenCompare() throws Exception {\n         Object obj = makeObject();\n-        if (obj instanceof Serializable) {\n+        if (obj instanceof Serializable && isTestSerialization()) {\n             ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n             ObjectOutputStream out = new ObjectOutputStream(buffer);\n             out.writeObject(obj);\n      */\n     public void testSimpleSerialization() throws Exception {\n         Object o = makeObject();\n-        if (o instanceof Serializable) {\n+        if (o instanceof Serializable && isTestSerialization()) {\n             byte[] objekt = writeExternalFormToBytes((Serializable) o);\n             Object p = readExternalFormFromBytes(objekt);\n         }\n      * If the test object is serializable, confirm that a canonical form exists.\n      */\n     public void testCanonicalEmptyCollectionExists() {\n-        if (supportsEmptyCollections()) {\n+        if (supportsEmptyCollections() && isTestSerialization() && !skipSerializedCanonicalTests()) {\n             Object object = makeObject();\n             if (object instanceof Serializable) {\n                 String name = getCanonicalEmptyCollectionName(object);\n      * If the test object is serializable, confirm that a canonical form exists.\n      */\n     public void testCanonicalFullCollectionExists() {\n-        if (supportsFullCollections()) {\n+        if (supportsFullCollections() && isTestSerialization() && !skipSerializedCanonicalTests()) {\n             Object object = makeObject();\n             if (object instanceof Serializable) {\n                 String name = getCanonicalFullCollectionName(object);\n--- a/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n+++ b/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your bag fails.\n  *\n- * @version $Revision: 1.8 $ $Date: 2004/02/18 01:20:39 $\n+ * @version $Revision: 1.9 $ $Date: 2004/05/31 22:39:20 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n     //-----------------------------------------------------------------------\n     public void testEmptyBagSerialization() throws IOException, ClassNotFoundException {\n         Bag bag = makeBag();\n-        if (!(bag instanceof Serializable)) return;\n+        if (!(bag instanceof Serializable && isTestSerialization())) return;\n         \n         byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n         Bag bag2 = (Bag) readExternalFormFromBytes(objekt);\n         bag.add(\"B\");\n         bag.add(\"C\");\n         int size = bag.size();\n-        if (!(bag instanceof Serializable)) return;\n+        if (!(bag instanceof Serializable && isTestSerialization())) return;\n         \n         byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n         Bag bag2 = (Bag) readExternalFormFromBytes(objekt);\n     public void testEmptyBagCompatibility() throws IOException, ClassNotFoundException {\n         // test to make sure the canonical form has been preserved\n         Bag bag = makeBag();\n-        if(bag instanceof Serializable && !skipSerializedCanonicalTests()) {\n+        if(bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n             Bag bag2 = (Bag) readExternalFormFromDisk(getCanonicalEmptyCollectionName(bag));\n             assertTrue(\"Bag is empty\",bag2.size()  == 0);\n             assertEquals(bag, bag2);\n         bag.add(\"B\");\n         bag.add(\"B\");\n         bag.add(\"C\");\n-        if(bag instanceof Serializable && !skipSerializedCanonicalTests()) {\n+        if(bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n             Bag bag2 = (Bag) readExternalFormFromDisk(getCanonicalFullCollectionName(bag));\n             assertEquals(\"Bag is the right size\",bag.size(), bag2.size());\n             assertEquals(bag, bag2);\n--- a/src/test/org/apache/commons/collections/collection/AbstractTestCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/AbstractTestCollection.java\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link Collection} fails.\n  *\n- * @version $Revision: 1.6 $ $Date: 2004/05/31 19:09:14 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/31 22:39:20 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n \n     public void testSerializeDeserializeThenCompare() throws Exception {\n         Object obj = makeCollection();\n-        if (obj instanceof Serializable) {\n+        if (obj instanceof Serializable && isTestSerialization()) {\n             ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n             ObjectOutputStream out = new ObjectOutputStream(buffer);\n             out.writeObject(obj);\n             }\n         }\n         obj = makeFullCollection();\n-        if (obj instanceof Serializable) {\n+        if (obj instanceof Serializable && isTestSerialization()) {\n             ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n             ObjectOutputStream out = new ObjectOutputStream(buffer);\n             out.writeObject(obj);\n--- a/src/test/org/apache/commons/collections/list/AbstractTestList.java\n+++ b/src/test/org/apache/commons/collections/list/AbstractTestList.java\n  * test case (method) your {@link List} fails or override one of the\n  * protected methods from AbstractTestCollection.\n  *\n- * @version $Revision: 1.8 $ $Date: 2004/05/31 19:09:14 $\n+ * @version $Revision: 1.9 $ $Date: 2004/05/31 22:39:20 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n     public void testEmptyListSerialization() \n     throws IOException, ClassNotFoundException {\n         List list = makeEmptyList();\n-        if (!(list instanceof Serializable)) return;\n+        if (!(list instanceof Serializable && isTestSerialization())) return;\n         \n         byte[] objekt = writeExternalFormToBytes((Serializable) list);\n         List list2 = (List) readExternalFormFromBytes(objekt);\n     throws IOException, ClassNotFoundException {\n         List list = makeFullList();\n         int size = getFullElements().length;\n-        if (!(list instanceof Serializable)) return;\n+        if (!(list instanceof Serializable && isTestSerialization())) return;\n         \n         byte[] objekt = writeExternalFormToBytes((Serializable) list);\n         List list2 = (List) readExternalFormFromBytes(objekt);\n \n         // test to make sure the canonical form has been preserved\n         List list = makeEmptyList();\n-        if(list instanceof Serializable && !skipSerializedCanonicalTests()) {\n+        if(list instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n             List list2 = (List) readExternalFormFromDisk(getCanonicalEmptyCollectionName(list));\n             assertTrue(\"List is empty\",list2.size()  == 0);\n             assertEquals(list, list2);\n \n         // test to make sure the canonical form has been preserved\n         List list = makeFullList();\n-        if(list instanceof Serializable && !skipSerializedCanonicalTests()) {\n+        if(list instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n             List list2 = (List) readExternalFormFromDisk(getCanonicalFullCollectionName(list));\n             if (list2.size() == 4) {\n                 // old serialized tests\n            outer.verify();\n        }\n \n+       public boolean isTestSerialization() {\n+           return false;\n+       }\n    }\n \n \n--- a/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @version $Revision: 1.14 $ $Date: 2004/04/12 12:04:00 $\n+ * @version $Revision: 1.15 $ $Date: 2004/05/31 22:39:20 $\n  */\n public abstract class AbstractTestMap extends AbstractTestObject {\n \n \n         // test to make sure the canonical form has been preserved\n         Map map = makeEmptyMap();\n-        if (map instanceof Serializable && !skipSerializedCanonicalTests()) {\n+        if (map instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n             Map map2 = (Map) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n             assertEquals(\"Map is empty\", 0, map2.size());\n         }\n \n         // test to make sure the canonical form has been preserved\n         Map map = makeFullMap();\n-        if (map instanceof Serializable && !skipSerializedCanonicalTests()) {\n+        if (map instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n             Map map2 = (Map) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n             assertEquals(\"Map is the right size\", getSampleKeys().length, map2.size());\n         }\n         public boolean isGetStructuralModify() {\n             return AbstractTestMap.this.isGetStructuralModify();\n         }\n-        public boolean supportsEmptyCollections() {\n-            return AbstractTestMap.this.supportsEmptyCollections();\n-        }\n-        public boolean supportsFullCollections() {\n-            return AbstractTestMap.this.supportsFullCollections();\n-        }\n-        \n+        public boolean isTestSerialization() {\n+            return false;\n+        }\n+\n         public void resetFull() {\n             AbstractTestMap.this.resetFull();\n             collection = map.entrySet();\n         public boolean isRemoveSupported() {\n             return AbstractTestMap.this.isRemoveSupported();\n         }\n-        public boolean supportsEmptyCollections() {\n-            return AbstractTestMap.this.supportsEmptyCollections();\n-        }\n-        public boolean supportsFullCollections() {\n-            return AbstractTestMap.this.supportsFullCollections();\n+        public boolean isTestSerialization() {\n+            return false;\n         }\n         \n         public void resetEmpty() {\n         public boolean isRemoveSupported() {\n             return AbstractTestMap.this.isRemoveSupported();\n         }\n-        public boolean supportsEmptyCollections() {\n-            return AbstractTestMap.this.supportsEmptyCollections();\n-        }\n-        public boolean supportsFullCollections() {\n-            return AbstractTestMap.this.supportsFullCollections();\n-        }\n-\n+        public boolean isTestSerialization() {\n+            return false;\n+        }\n+        \n         public boolean areEqualElementsDistinguishable() {\n             // equal values are associated with different keys, so they are\n             // distinguishable.  \n--- a/src/test/org/apache/commons/collections/map/AbstractTestSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestSortedMap.java\n /**\n  * Abstract test class for {@link java.util.SortedMap} methods and contracts.\n  *\n- * @version $Revision: 1.8 $ $Date: 2004/04/09 15:17:11 $\n+ * @version $Revision: 1.9 $ $Date: 2004/05/31 22:39:20 $\n  * \n  * @author Stephen Colebourne\n  */\n         public boolean isRemoveSupported() {\n             return main.isRemoveSupported();\n         }\n-        public boolean supportsEmptyCollections() {\n+        public boolean isTestSerialization() {\n             return false;\n         }\n-        public boolean supportsFullCollections() {\n-            return false;\n-        }\n-        public void testSimpleSerialization() throws Exception {\n-            if (main.isSubMapViewsSerializable() == false) return;\n-            super.testSimpleSerialization();\n-        }\n-        public void testSerializeDeserializeThenCompare() throws Exception {\n-            if (main.isSubMapViewsSerializable() == false) return;\n-            super.testSerializeDeserializeThenCompare();\n-        }\n-        public void testEmptyMapCompatibility() throws Exception {\n-            if (main.isSubMapViewsSerializable() == false) return;\n-            super.testEmptyMapCompatibility();\n-        }\n-        public void testFullMapCompatibility() throws Exception {\n-            if (main.isSubMapViewsSerializable() == false) return;\n-            super.testFullMapCompatibility();\n-        }\n+//        public void testSimpleSerialization() throws Exception {\n+//            if (main.isSubMapViewsSerializable() == false) return;\n+//            super.testSimpleSerialization();\n+//        }\n+//        public void testSerializeDeserializeThenCompare() throws Exception {\n+//            if (main.isSubMapViewsSerializable() == false) return;\n+//            super.testSerializeDeserializeThenCompare();\n+//        }\n+//        public void testEmptyMapCompatibility() throws Exception {\n+//            if (main.isSubMapViewsSerializable() == false) return;\n+//            super.testEmptyMapCompatibility();\n+//        }\n+//        public void testFullMapCompatibility() throws Exception {\n+//            if (main.isSubMapViewsSerializable() == false) return;\n+//            super.testFullMapCompatibility();\n+//        }\n     }\n     \n     public static class TestHeadMap extends TestViewMap {\n--- a/src/test/org/apache/commons/collections/map/TestLinkedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLinkedMap.java\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.7 $ $Date: 2004/02/27 00:25:14 $\n+ * @version $Revision: 1.8 $ $Date: 2004/05/31 22:39:20 $\n  * \n  * @author Stephen Colebourne\n  */\n         public boolean isNullSupported() {\n             return TestLinkedMap.this.isAllowNullKey();\n         }\n-\n+        public boolean isTestSerialization() {\n+            return false;\n+        }\n     }\n \n     public void testClone() {\n--- a/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.9 $ $Date: 2004/04/07 23:17:25 $\n+ * @version $Revision: 1.10 $ $Date: 2004/05/31 22:39:20 $\n  * \n  * @author Henri Yandell\n  * @author Stephen Colebourne\n         public boolean isNullSupported() {\n             return TestListOrderedMap.this.isAllowNullKey();\n         }\n-\n+        public boolean isTestSerialization() {\n+            return false;\n+        }\n     }\n \n     public String getCompatibilityVersion() {\n--- a/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java\n  * elements may be added; see {@link AbstractTestCollection} for more details.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 01:20:39 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/31 22:39:20 $\n  * \n  * @author Stephen Colebourne\n  * @author Dieter Wimberger\n             SortedSet s = (SortedSet) AbstractTestSortedSet.this.makeFullCollection();\n             return getSubSet(s);\n         }\n-\n+        \n+        public boolean isTestSerialization() {\n+            return false;\n+        }\n+        \n         public BulkTest bulkTestSortedSetSubSet() {\n             return null;  // prevent infinite recursion\n         }", "timestamp": 1086043160, "metainfo": ""}