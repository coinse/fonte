{"sha": "ba27ecd2d4645dcf3e3f0d6a04c23a42af1209b8", "log": "Add IteratorUtils unmodifiable iterators, from Rich Dougherty   ", "commit": "\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.5 2002/11/21 23:08:27 scolebourne Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/11/21 23:08:27 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.6 2002/12/08 15:42:35 scolebourne Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/12/08 15:42:35 $\n  *\n  * ====================================================================\n  *\n  */\n package org.apache.commons.collections;\n \n+import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n  * <code>org.apache.commons.collections.iterators</code> subpackage.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: IteratorUtils.java,v 1.5 2002/11/21 23:08:27 scolebourne Exp $\n+ * @version $Id: IteratorUtils.java,v 1.6 2002/12/08 15:42:35 scolebourne Exp $\n  * @since 2.1\n  */\n public class IteratorUtils {\n     private IteratorUtils() {\n     }\n \n+    // Iterator creators\n+    //----------------------------------------------------------------------\n+    \n     /**\n      * Gets an empty iterator.\n      * <p>\n //    public static ListIterator arrayListIterator(Object[] array, int start, int end) {\n //        return new ArrayListIterator(array, start, end);\n //    }\n+    \n+    // Iterator wrappers\n+    //----------------------------------------------------------------------\n+    \n+    /**\n+     * Gets an immutable version of an {@link Iterator}. The returned object\n+     * will always throw an {@link java.lang.UnsupportedOperationException} for\n+     * the {@link Iterator#remove()} method.\n+     *\n+     * @param iterator The iterator to make immutable.\n+     * @return An immutable version of the iterator.\n+     */\n+    public static Iterator unmodifiableIterator(Iterator iterator) {\n+        return new UnmodifiableIterator(iterator);\n+    }\n+    \n+    /**\n+     * Gets an immutable version of a {@link ListIterator}.The returned object\n+     * will always throw an {@link java.lang.UnsupportedOperationException} for\n+     * the {@link Iterator#remove()}, {@link ListIterator#add()} and\n+     * {@link ListIterator#set(Object)} methods.\n+     *\n+     * @param listIterator The iterator to make immutable.\n+     * @return An immutable version of the iterator.\n+     */\n+    public static ListIterator unmodifiableListIterator(ListIterator listIterator) {\n+        return new UnmodifiableListIterator(listIterator);\n+    }\n \n     /**\n      * Gets an iterator that iterates through two {@link Iterator}s \n         }\n \n     }\n-    \n+\n+    /**\n+     * A wrapper for an {@link java.util.Iterator} which makes it immutable. All\n+     * calls are passed through to the delegate. The {@link #remove()} method\n+     * always throws an {@link java.lang.UnsupportedOperationException}.\n+     *\n+     * @author <a href=\"mailto:rich@rd.gen.nz\">Rich Dougherty</a>\n+     */\n+    static class UnmodifiableIterator implements Iterator, Serializable {\n+\n+        /**\n+         * All calls to this iterator are passed to the delegate.\n+         */\n+        protected Iterator delegate;\n+\n+        /**\n+         * Create an UnmodifiableIterator.\n+         *\n+         * @param delegate The delegate to pass all calls to.\n+         */\n+        public UnmodifiableIterator(Iterator delegate) {\n+            this.delegate = delegate;\n+        }\n+\n+        public boolean hasNext() {\n+            return delegate.hasNext();\n+        }\n+\n+        public Object next() {\n+            return delegate.next();\n+        }\n+\n+        public void remove() {\n+            throw new UnsupportedOperationException(\"This iterator is immutable\");\n+        }\n+\n+    }\n+\n+    /**\n+     * A wrapper for an {@link java.util.ListIterator} which makes it immutable.\n+     * All calls are passed through to the delegate. The {@link #remove()},\n+     * {@link #add(Object)} and (@link #set(Object)} methods always throw an\n+     * {@link java.lang.UnsupportedOperationException}.\n+     *\n+     * @author <a href=\"mailto:rich@rd.gen.nz\">Rich Dougherty</a>\n+     */\n+    static class UnmodifiableListIterator\n+        implements ListIterator, Serializable {\n+\n+        /**\n+         * All calls to this iterator are passed to the delegate.\n+         */\n+        protected ListIterator delegate;\n+\n+        /**\n+         * Create an UnmodifiableListIterator.\n+         *\n+         * @param delegate The delegate to pass all calls to.\n+         */\n+        public UnmodifiableListIterator(ListIterator delegate) {\n+            this.delegate = delegate;\n+        }\n+\n+        public boolean hasNext() {\n+            return delegate.hasNext();\n+        }\n+\n+        public Object next() {\n+            return delegate.next();\n+        }\n+\n+        public boolean hasPrevious() {\n+            return delegate.hasPrevious();\n+        }\n+\n+        public Object previous() {\n+            return delegate.previous();\n+        }\n+\n+        public int nextIndex() {\n+            return delegate.nextIndex();\n+        }\n+\n+        public int previousIndex() {\n+            return delegate.previousIndex();\n+        }\n+\n+        public void remove() {\n+            throw new UnsupportedOperationException(\"This iterator is immutable\");\n+        }\n+\n+        public void set(Object o) {\n+            throw new UnsupportedOperationException(\"This iterator is immutable\");\n+        }\n+\n+        public void add(Object o) {\n+            throw new UnsupportedOperationException(\"This iterator is immutable\");\n+        }\n+    }\n }\n--- a/src/test/org/apache/commons/collections/TestIteratorUtils.java\n+++ b/src/test/org/apache/commons/collections/TestIteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestIteratorUtils.java,v 1.2 2002/10/12 22:36:21 scolebourne Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/10/12 22:36:21 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestIteratorUtils.java,v 1.3 2002/12/08 15:42:35 scolebourne Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/12/08 15:42:35 $\n  *\n  * ====================================================================\n  *\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.ListIterator;\n \n import junit.framework.Test;\n /**\n         super(name);\n     }\n \n+    public static void main(String args[]) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n \n     public static Test suite() {\n         return BulkTest.makeSuite(TestIteratorUtils.class);\n         assertEquals(list, Arrays.asList(result));\n     }\n \n+    /**\n+     * Gets an immutable Iterator operating on the elements [\"a\", \"b\", \"c\", \"d\"].\n+     */\n+    private Iterator getImmutableIterator() {\n+        List list = new ArrayList();\n+        list.add(\"a\");\n+        list.add(\"b\");\n+        list.add(\"c\");\n+        list.add(\"d\");\n+        return IteratorUtils.unmodifiableIterator(list.iterator());\n+    }\n+\n+    /**\n+     * Gets an immutable ListIterator operating on the elements [\"a\", \"b\", \"c\", \"d\"].\n+     */\n+    private ListIterator getImmutableListIterator() {\n+        List list = new ArrayList();\n+        list.add(\"a\");\n+        list.add(\"b\");\n+        list.add(\"c\");\n+        list.add(\"d\");\n+        return IteratorUtils.unmodifiableListIterator(list.listIterator());\n+    }\n+\n+\t/**\n+\t * Test next() and hasNext() for an immutable Iterator.\n+\t */\n+    public void testUnmodifiableIteratorIteration() {\n+        Iterator iterator = getImmutableIterator();\n+\n+        assertTrue(iterator.hasNext());\n+\n+        assertEquals(\"a\", iterator.next());\n+\n+        assertTrue(iterator.hasNext());\n+\n+        assertEquals(\"b\", iterator.next());\n+\n+        assertTrue(iterator.hasNext());\n+\n+        assertEquals(\"c\", iterator.next());\n+\n+        assertTrue(iterator.hasNext());\n+\n+        assertEquals(\"d\", iterator.next());\n+\n+        assertTrue(!iterator.hasNext());\n+    }\n+\n+    /**\n+     * Test next(), hasNext(), previous() and hasPrevious() for an immutable\n+     * ListIterator.\n+     */\n+    public void testUnmodifiableListIteratorIteration() {\n+        ListIterator listIterator = getImmutableListIterator();\n+\n+        assertTrue(!listIterator.hasPrevious());\n+        assertTrue(listIterator.hasNext());\n+\n+        assertEquals(\"a\", listIterator.next());\n+\n+        assertTrue(listIterator.hasPrevious());\n+        assertTrue(listIterator.hasNext());\n+\n+        assertEquals(\"b\", listIterator.next());\n+\n+        assertTrue(listIterator.hasPrevious());\n+        assertTrue(listIterator.hasNext());\n+\n+        assertEquals(\"c\", listIterator.next());\n+\n+        assertTrue(listIterator.hasPrevious());\n+        assertTrue(listIterator.hasNext());\n+\n+        assertEquals(\"d\", listIterator.next());\n+\n+        assertTrue(listIterator.hasPrevious());\n+        assertTrue(!listIterator.hasNext());\n+\n+        assertEquals(\"d\", listIterator.previous());\n+\n+        assertTrue(listIterator.hasPrevious());\n+        assertTrue(listIterator.hasNext());\n+\n+        assertEquals(\"c\", listIterator.previous());\n+\n+        assertTrue(listIterator.hasPrevious());\n+        assertTrue(listIterator.hasNext());\n+\n+        assertEquals(\"b\", listIterator.previous());\n+\n+        assertTrue(listIterator.hasPrevious());\n+        assertTrue(listIterator.hasNext());\n+\n+        assertEquals(\"a\", listIterator.previous());\n+\n+        assertTrue(!listIterator.hasPrevious());\n+        assertTrue(listIterator.hasNext());\n+    }\n+\n+    /**\n+     * Test remove() for an immutable Iterator.\n+     */\n+    public void testUnmodifiableIteratorImmutability() {\n+        Iterator iterator = getImmutableIterator();\n+\n+        try {\n+            iterator.remove();\n+            // We shouldn't get to here.\n+            fail(\"remove() should throw an UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // This is correct; ignore the exception.\n+        }\n+\n+        iterator.next();\n+\n+        try {\n+            iterator.remove();\n+            // We shouldn't get to here.\n+            fail(\"remove() should throw an UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // This is correct; ignore the exception.\n+        }\n+\n+    }\n+\n+    /**\n+     * Test remove() for an immutable ListIterator.\n+     */\n+    public void testUnmodifiableListIteratorImmutability() {\n+    \tListIterator listIterator = getImmutableListIterator();\n+\n+        try {\n+            listIterator.remove();\n+            // We shouldn't get to here.\n+            fail(\"remove() should throw an UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // This is correct; ignore the exception.\n+        }\n+\n+        try {\n+            listIterator.set(\"a\");\n+            // We shouldn't get to here.\n+            fail(\"set(Object) should throw an UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // This is correct; ignore the exception.\n+        }\n+\n+        try {\n+            listIterator.add(\"a\");\n+            // We shouldn't get to here.\n+            fail(\"add(Object) should throw an UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // This is correct; ignore the exception.\n+        }\n+\n+        listIterator.next();\n+\n+        try {\n+            listIterator.remove();\n+            // We shouldn't get to here.\n+            fail(\"remove() should throw an UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // This is correct; ignore the exception.\n+        }\n+\n+        try {\n+            listIterator.set(\"a\");\n+            // We shouldn't get to here.\n+            fail(\"set(Object) should throw an UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // This is correct; ignore the exception.\n+        }\n+\n+        try {\n+            listIterator.add(\"a\");\n+            // We shouldn't get to here.\n+            fail(\"add(Object) should throw an UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // This is correct; ignore the exception.\n+        }\n+    }\n }", "timestamp": 1039362155, "metainfo": ""}