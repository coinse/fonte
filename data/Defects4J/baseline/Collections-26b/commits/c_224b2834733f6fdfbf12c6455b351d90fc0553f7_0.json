{"sha": "224b2834733f6fdfbf12c6455b351d90fc0553f7", "log": "Add additional constructor Javadoc and tidy up   ", "commit": "\n--- a/src/java/org/apache/commons/collections/DefaultMapEntry.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.11 2003/08/31 17:26:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.12 2003/09/25 22:47:14 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * A default implementation of {@link java.util.Map.Entry}\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.11 $ $Date: 2003/08/31 17:26:43 $\n+ * @version $Revision: 1.12 $ $Date: 2003/09/25 22:47:14 $\n  * \n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n- * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n+ * @author James Strachan\n+ * @author Michael A. Smith\n+ * @author Neil O'Toole\n+ * @author Stephen Colebourne\n  */\n public class DefaultMapEntry implements Map.Entry {\n     \n     private Object value;\n     \n     /**\n-     * Constructs a new <Code>DefaultMapEntry</Code> with a null key\n+     * Constructs a new <code>DefaultMapEntry</code> with a null key\n      * and null value.\n      */\n     public DefaultMapEntry() {\n+        super();\n     }\n \n     /**\n-     * Constructs a new <Code>DefaultMapEntry</Code> with the given\n+     * Constructs a new <code>DefaultMapEntry</code> with the given\n+     * key and given value.\n+     *\n+     * @param entry  the entry to copy, must not be null\n+     * @throws NullPointerException if the entry is null\n+     */\n+    public DefaultMapEntry(Map.Entry entry) {\n+        super();\n+        this.key = entry.getKey();\n+        this.value = entry.getValue();\n+    }\n+\n+    /**\n+     * Constructs a new <code>DefaultMapEntry</code> with the given\n      * key and given value.\n      *\n      * @param key  the key for the entry, may be null\n      * @param value  the value for the entry, may be null\n      */\n     public DefaultMapEntry(Object key, Object value) {\n+        super();\n         this.key = key;\n         this.value = value;\n     }\n \n-    /**\n-     * Implemented per API documentation of \n-     * {@link java.util.Map.Entry#equals(Object)}\n-     */\n-    public boolean equals(Object o) {\n-        if( o == null ) return false;\n-        if( o == this ) return true;        \n-\n-        if ( ! (o instanceof Map.Entry ) )\n-            return false;\n-        Map.Entry e2 = (Map.Entry)o;    \n-        return ((getKey() == null ?\n-                 e2.getKey() == null : getKey().equals(e2.getKey())) &&\n-                (getValue() == null ?\n-                 e2.getValue() == null : getValue().equals(e2.getValue())));\n-    }\n-     \n-     \n-    /**\n-     * Implemented per API documentation of \n-     * {@link java.util.Map.Entry#hashCode()}\n-     */\n-    public int hashCode() {\n-        return ( ( getKey() == null ? 0 : getKey().hashCode() ) ^\n-                 ( getValue() == null ? 0 : getValue().hashCode() ) ); \n-    }\n-    \n-\n-\n     // Map.Entry interface\n     //-------------------------------------------------------------------------\n-\n     /**\n-     * Returns the key.\n+     * Gets the key from the Map Entry.\n      *\n      * @return the key \n      */\n     }\n \n     /**\n-     * Returns the value.\n+     * Sets the key stored in this Map Entry.\n+     * <p>\n+     * This Map Entry is not connected to a Map, so only the local data is changed.\n+     *\n+     * @param key  the new key\n+     */\n+    public void setKey(Object key) {\n+        this.key = key;\n+    }\n+    \n+    /**\n+     * Gets the value from the Map Entry.\n      *\n      * @return the value\n      */\n         return value;\n     }\n \n-    // Properties\n-    //-------------------------------------------------------------------------    \n-\n-    /**\n-     * Sets the key.  This method does not modify any map.\n+    /** \n+     * Sets the value stored in this Map Entry.\n+     * <p>\n+     * This Map Entry is not connected to a Map, so only the local data is changed.\n      *\n-     * @param key  the new key\n-     */\n-    public void setKey(Object key) {\n-        this.key = key;\n-    }\n-    \n-    /** \n-     * Note that this method only sets the local reference inside this object and\n-     * does not modify the original Map.\n-     *\n-     * @return the old value of the value\n-     * @param value the new value\n+     * @param value  the new value\n+     * @return the previous value\n      */\n     public Object setValue(Object value) {\n         Object answer = this.value;\n         return answer;\n     }\n \n+    // Basics\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compares this Map Entry with another Map Entry.\n+     * <p>\n+     * Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal key and value\n+     */\n+    public final boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof Map.Entry == false) {\n+            return false;\n+        }\n+        Map.Entry other = (Map.Entry) obj;\n+        return\n+            (getKey() == null ? other.getKey() == null : getKey().equals(other.getKey())) &&\n+            (getValue() == null ? other.getValue() == null : getValue().equals(other.getValue()));\n+    }\n+     \n+    /**\n+     * Gets a hashCode compatible with the equals method.\n+     * <p>\n+     * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}\n+     * \n+     * @return a suitable hashcode\n+     */\n+    public final int hashCode() {\n+        return (getKey() == null ? 0 : getKey().hashCode()) ^\n+               (getValue() == null ? 0 : getValue().hashCode()); \n+    }\n+\n }", "timestamp": 1064530034, "metainfo": ""}