{"sha": "21a690adc64a59343cd2b7c63ae9e86fd0ffb4a3", "log": "javadoc fixes   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/java/org/apache/commons/collections/ComparatorUtils.java\n      * The second comparator is used if the first comparator returns\n      * that equal and so on.\n      *\n-     * @param iterators  the comparators to use, not null or empty or contain nulls\n+     * @param comparators  the comparators to use, not null or empty or contain nulls\n      * @return a combination comparator over the comparators\n      * @throws NullPointerException if comparators array is null or contains a null\n      */\n--- a/src/java/org/apache/commons/collections/decorators/AbstractMapEntryDecorator.java\n+++ b/src/java/org/apache/commons/collections/decorators/AbstractMapEntryDecorator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractMapEntryDecorator.java,v 1.2 2003/08/31 17:24:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractMapEntryDecorator.java,v 1.3 2003/09/05 03:35:07 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <p>This <code>Map.Entry</code> wraps another <code>Map.Entry</code>\n  * implementation, using the wrapped instance for its default\n  * implementation.  This class is used as a framework on which to\n- * build to extensions for its wrapped <code>Map</code> object which\n+ * build extensions for its wrapped <code>Map</code> object which\n  * would be unavailable or inconvenient via sub-classing (but usable\n  * via composition).</p>\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:24:46 $\n+ * @version $Revision: 1.3 $ $Date: 2003/09/05 03:35:07 $\n  * \n  * @author Stephen Colebourne\n  */\n     /**\n      * Constructor that wraps (not copies).\n      *\n-     * @param map  the map to decorate, must not be null\n+     * @param entry  the <code>Map.Entry</code> to decorate, must not be null\n      * @throws IllegalArgumentException if the collection is null\n      */\n     public AbstractMapEntryDecorator(Map.Entry entry) {\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedMap.java,v 1.4 2003/08/31 17:24:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedMap.java,v 1.5 2003/09/05 03:35:07 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n /**\n  * <code>PredicatedMap</code> decorates another <code>Map</code>\n- * to validate additions match a specified predicate.\n+ * to validate that additions match a specified predicate.\n  * <p>\n  * If an object cannot be added to the map, an IllegalArgumentException\n- * is thrown.\n+ * is thrown.</p>\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/08/31 17:24:46 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/05 03:35:07 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n      * Factory method to create a predicated (validating) map.\n      * <p>\n      * If there are any elements already in the list being decorated, they\n-     * are validated.\n+     * are validated.</p>\n      * \n      * @param map  the map to decorate, must not be null\n-     * @param keyPredicate, the predicate to validate the keys, null means no check\n-     * @param valuePredicate, the predicate to validate to values, null means no check\n+     * @param keyPredicate  the predicate to validate the keys, null means no check\n+     * @param valuePredicate  the predicate to validate to values, null means no check\n      * @throws IllegalArgumentException if the map is null\n      */\n     public static Map decorate(Map map, Predicate keyPredicate, Predicate valuePredicate) {\n      * Constructor that wraps (not copies).\n      * \n      * @param map  the map to decorate, must not be null\n-     * @param keyPredicate, the predicate to validate the keys, null means no check\n-     * @param valuePredicate, the predicate to validate to values, null means no check\n+     * @param keyPredicate  the predicate to validate the keys, null means no check\n+     * @param valuePredicate  the predicate to validate to values, null means no check\n      * @throws IllegalArgumentException if the map is null\n      */\n     protected PredicatedMap(Map map, Predicate keyPredicate, Predicate valuePredicate) {\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSortedMap.java,v 1.3 2003/08/31 17:24:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSortedMap.java,v 1.4 2003/09/05 03:35:07 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n /**\n  * <code>PredicatedSortedMap</code> decorates another <code>SortedMap </code>\n- * to validate additions match a specified predicate.\n+ * to validate that additions match a specified predicate.\n  * <p>\n  * If an object cannot be added to the map, an IllegalArgumentException\n- * is thrown.\n+ * is thrown.</p>\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:24:46 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/05 03:35:07 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n      * Factory method to create a predicated (validating) sorted map.\n      * <p>\n      * If there are any elements already in the list being decorated, they\n-     * are validated.\n+     * are validated.</p>\n      * \n      * @param map  the map to decorate, must not be null\n-     * @param keyPredicate, the predicate to validate the keys, null means no check\n-     * @param valuePredicate, the predicate to validate to values, null means no check\n+     * @param keyPredicate  the predicate to validate the keys, null means no check\n+     * @param valuePredicate  the predicate to validate to values, null means no check\n      * @throws IllegalArgumentException if the map is null\n      */\n     public static SortedMap decorate(SortedMap map, Predicate keyPredicate, Predicate valuePredicate) {\n      * Constructor that wraps (not copies).\n      * \n      * @param map  the map to decorate, must not be null\n-     * @param keyPredicate, the predicate to validate the keys, null means no check\n-     * @param valuePredicate, the predicate to validate to values, null means no check\n+     * @param keyPredicate  the predicate to validate the keys, null means no check\n+     * @param valuePredicate  the predicate to validate to values, null means no check\n      * @throws IllegalArgumentException if the map is null\n      */\n     protected PredicatedSortedMap(SortedMap map, Predicate keyPredicate, Predicate valuePredicate) {\n--- a/src/java/org/apache/commons/collections/decorators/SynchronizedCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/SynchronizedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SynchronizedCollection.java,v 1.4 2003/08/31 17:24:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SynchronizedCollection.java,v 1.5 2003/09/05 03:35:07 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * }\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/08/31 17:24:46 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/05 03:35:07 $\n  * \n  * @author Stephen Colebourne\n  */\n     /**\n      * Constructor that wraps (not copies).\n      * \n-     * @param coll  the collection to decorate, must not be null\n+     * @param collection  the collection to decorate, must not be null\n      * @throws IllegalArgumentException if the collection is null\n      */\n     protected SynchronizedCollection(Collection collection) {\n     /**\n      * Constructor that wraps (not copies).\n      * \n-     * @param coll  the collection to decorate, must not be null\n+     * @param collection  the collection to decorate, must not be null\n      * @param lock  the lock object to use, must not be null\n      * @throws IllegalArgumentException if the collection is null\n      */\n--- a/src/java/org/apache/commons/collections/decorators/TransformedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/TransformedSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedSortedMap.java,v 1.2 2003/08/31 17:24:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedSortedMap.java,v 1.3 2003/09/05 03:35:07 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * use the Integer form to remove objects.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:24:46 $\n+ * @version $Revision: 1.3 $ $Date: 2003/09/05 03:35:07 $\n  * \n  * @author Stephen Colebourne\n  */\n      * Factory method to create a transforming sorted map.\n      * <p>\n      * If there are any elements already in the map being decorated, they\n-     * are NOT transformed.\n+     * are NOT transformed.</p>\n      * \n      * @param map  the map to decorate, must not be null\n-     * @param keyTransformer, the predicate to validate the keys, null means no transformation\n-     * @param valueTransformer, the predicate to validate to values, null means no transformation\n+     * @param keyTransformer  the predicate to validate the keys, null means no transformation\n+     * @param valueTransformer  the predicate to validate to values, null means no transformation\n      * @throws IllegalArgumentException if the map is null\n      */\n     public static SortedMap decorate(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n      * Constructor that wraps (not copies).\n      * <p>\n      * If there are any elements already in the collection being decorated, they\n-     * are NOT transformed.\n+     * are NOT transformed.</p>\n      * \n      * @param map  the map to decorate, must not be null\n-     * @param keyTransformer, the predicate to validate the keys, null means no transformation\n-     * @param valueTransformer, the predicate to validate to values, null means no transformation\n+     * @param keyTransformer  the predicate to validate the keys, null means no transformation\n+     * @param valueTransformer  the predicate to validate to values, null means no transformation\n      * @throws IllegalArgumentException if the map is null\n      */\n     protected TransformedSortedMap(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n--- a/src/java/org/apache/commons/collections/decorators/UnmodifiableBoundedCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/UnmodifiableBoundedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableBoundedCollection.java,v 1.2 2003/08/31 17:24:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableBoundedCollection.java,v 1.3 2003/09/05 03:35:07 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * examining the package scope variables.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:24:46 $\n+ * @version $Revision: 1.3 $ $Date: 2003/09/05 03:35:07 $\n  * \n  * @author Stephen Colebourne\n  */\n     /**\n      * Factory method to create an unmodifiable bounded collection.\n      * \n-     * @param bag  the bag to decorate, must not be null\n+     * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n      * @throws IllegalArgumentException if bag is null\n      */\n     public static BoundedCollection decorate(BoundedCollection coll) {\n     /**\n      * Factory method to create an unmodifiable bounded collection.\n      * <p>\n-     * This method is capable of drilling down through other decorators to find\n-     * a suitable BoundedCollection\n+     * This method is capable of drilling down through up to 1000 other decorators \n+     * to find a suitable BoundedCollection.</p>\n      * \n-     * @param bag  the bag to decorate, must not be null\n+     * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n      * @throws IllegalArgumentException if bag is null\n      */\n     public static BoundedCollection decorateUsing(Collection coll) {\n      * Constructor that wraps (not copies).\n      * \n      * @param coll  the collection to decorate, must not be null\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws IllegalArgumentException if coll is null\n      */\n     protected UnmodifiableBoundedCollection(BoundedCollection coll) {\n         super(coll);", "timestamp": 1062732907, "metainfo": ""}