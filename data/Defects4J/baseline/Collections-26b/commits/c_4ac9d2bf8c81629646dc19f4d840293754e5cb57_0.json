{"sha": "4ac9d2bf8c81629646dc19f4d840293754e5cb57", "log": "Changing 'CVS' to 'SVN' as that's what we use now  ", "commit": "\n--- a/src/test/org/apache/commons/collections/AbstractTestObject.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestObject.java\n     }\n \n     /**\n-     * Tests serialization by comparing against a previously stored version in CVS.\n+     * Tests serialization by comparing against a previously stored version in SVN.\n      * If the test object is serializable, confirm that a canonical form exists.\n      */\n     public void testCanonicalEmptyCollectionExists() {\n             if (object instanceof Serializable) {\n                 String name = getCanonicalEmptyCollectionName(object);\n                 assertTrue(\n-                    \"Canonical empty collection (\" + name + \") is not in CVS\",\n+                    \"Canonical empty collection (\" + name + \") is not in SVN\",\n                     new File(name).exists());\n             }\n         }\n     }\n \n     /**\n-     * Tests serialization by comparing against a previously stored version in CVS.\n+     * Tests serialization by comparing against a previously stored version in SVN.\n      * If the test object is serializable, confirm that a canonical form exists.\n      */\n     public void testCanonicalFullCollectionExists() {\n             if (object instanceof Serializable) {\n                 String name = getCanonicalFullCollectionName(object);\n                 assertTrue(\n-                    \"Canonical full collection (\" + name + \") is not in CVS\",\n+                    \"Canonical full collection (\" + name + \") is not in SVN\",\n                     new File(name).exists());\n             }\n         }\n      * even exist in this version).\n      * \n      * This constant makes it possible for TestMap (and other subclasses,\n-     * if necessary) to automatically check CVS for a versionX copy of a\n+     * if necessary) to automatically check SVN for a versionX copy of a\n      * Serialized object, so we can make sure that compatibility is maintained.\n      * See, for example, TestMap.getCanonicalFullMapName(Map map).\n      * Subclasses can override this variable, indicating compatibility\n      * Write a Serializable or Externalizable object as\n      * a file at the given path.  NOT USEFUL as part\n      * of a unit test; this is just a utility method\n-     * for creating disk-based objects in CVS that can become\n+     * for creating disk-based objects in SVN that can become\n      * the basis for compatibility tests using\n      * readExternalFormFromDisk(String path)\n      * \n     /**\n      * Reads a Serialized or Externalized Object from disk.\n      * Useful for creating compatibility tests between\n-     * different CVS versions of the same class\n+     * different SVN versions of the same class\n      * \n      * @param path path to the serialized Object\n      * @return the Object at the given path\n--- a/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n+++ b/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n \n     /**\n      * Compare the current serialized form of the Bag\n-     * against the canonical version in CVS.\n+     * against the canonical version in SVN.\n      */\n     public void testEmptyBagCompatibility() throws IOException, ClassNotFoundException {\n         // test to make sure the canonical form has been preserved\n \n     /**\n      * Compare the current serialized form of the Bag\n-     * against the canonical version in CVS.\n+     * against the canonical version in SVN.\n      */\n     public void testFullBagCompatibility() throws IOException, ClassNotFoundException {\n         // test to make sure the canonical form has been preserved\n--- a/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n \n     /**\n      * Compare the current serialized form of the Comparator\n-     * against the canonical version in CVS.\n+     * against the canonical version in SVN.\n      */\n     public void testComparatorCompatibility() throws IOException, ClassNotFoundException {\n         if(!skipSerializedCanonicalTests()) {\n             \t\tString fileName = getCanonicalComparatorName(comparator);\n             \t\twriteExternalFormToDisk((Serializable) comparator, fileName);\n             \t\tfail(\"Serialized form could not be found.  A serialized version \" +\n-            \t\t     \"has now been written (and should be added to CVS): \" + fileName);\n+            \t\t     \"has now been written (and should be added to SVN): \" + fileName);\n                 } else {\n                     fail(\"The Serialized form could be located to test serialization \" +\n                         \"compatibility: \" + exception.getMessage());\n--- a/src/test/org/apache/commons/collections/comparators/TestReverseComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestReverseComparator.java\n      * Comparator.  The resulting comparator should\n      * sort according to natural Order.  (Note: we wrap\n      * a Comparator taken from the JDK so that we can\n-     * save a \"canonical\" form in CVS.\n+     * save a \"canonical\" form in SVN.\n      * \n      * @return Comparator that returns \"natural\" order\n      */\n--- a/src/test/org/apache/commons/collections/list/AbstractTestList.java\n+++ b/src/test/org/apache/commons/collections/list/AbstractTestList.java\n \n     /**\n      * Compare the current serialized form of the List\n-     * against the canonical version in CVS.\n+     * against the canonical version in SVN.\n      */\n     public void testEmptyListCompatibility() throws IOException, ClassNotFoundException {\n         /**\n \n     /**\n      * Compare the current serialized form of the List\n-     * against the canonical version in CVS.\n+     * against the canonical version in SVN.\n      */\n     public void testFullListCompatibility() throws IOException, ClassNotFoundException {\n         /**\n--- a/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n \n     /**\n      * Compare the current serialized form of the Map\n-     * against the canonical version in CVS.\n+     * against the canonical version in SVN.\n      */\n     public void testEmptyMapCompatibility() throws Exception {\n         /**\n \n     /**\n      * Compare the current serialized form of the Map\n-     * against the canonical version in CVS.\n+     * against the canonical version in SVN.\n      */\n     public void testFullMapCompatibility() throws Exception {\n         /**\n--- a/src/test/org/apache/commons/collections/map/TestIdentityMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestIdentityMap.java\n     \n     /**\n      * Compare the current serialized form of the Map\n-     * against the canonical version in CVS.\n+     * against the canonical version in SVN.\n      */\n     public void testEmptyMapCompatibility() throws IOException, ClassNotFoundException {\n         // test to make sure the canonical form has been preserved", "timestamp": 1210658290, "metainfo": ""}