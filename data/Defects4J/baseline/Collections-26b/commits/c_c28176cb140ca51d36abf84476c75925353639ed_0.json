{"sha": "c28176cb140ca51d36abf84476c75925353639ed", "log": "Fixed javadoc warnings, most of which only appear with javadoc 1.4.  I really don't understand why javadoc likes references to inner classes in some cases, but in others, it requires it to be fully qualified.  This fixes all the warnings reported though.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CursorableLinkedList.java\n+++ b/src/java/org/apache/commons/collections/CursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CursorableLinkedList.java,v 1.7 2002/06/15 03:52:24 mas Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/06/15 03:52:24 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CursorableLinkedList.java,v 1.8 2002/06/16 03:39:40 mas Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/06/16 03:39:40 $\n  *\n  * ====================================================================\n  *\n  *\n  * @since 1.0\n  * @author Rodney Waldhoff\n- * @version $Id: CursorableLinkedList.java,v 1.7 2002/06/15 03:52:24 mas Exp $\n+ * @version $Id: CursorableLinkedList.java,v 1.8 2002/06/16 03:39:40 mas Exp $\n  * @see java.util.LinkedList\n  */\n public class CursorableLinkedList implements List, Serializable {\n      * list, after the specified <i>before</i> element, and before the\n      * specified <i>after</i> element\n      *\n-     * @returns the newly created {@link CursorableLinkedList.Listable}\n+     * @return the newly created \n+     * {@link org.apache.commons.collections.CursorableLinkedList.Listable}\n      */\n     protected Listable insertListable(Listable before, Listable after, Object value) {\n         _modCount++;\n     }\n \n     /**\n-     * Removes the given {@link CursorableLinkedList.Listable} from my list.\n+     * Removes the given \n+     * {@link org.apache.commons.collections.CursorableLinkedList.Listable} \n+     * from my list.\n      */\n     protected void removeListable(Listable elt) {\n         _modCount++;\n     }\n \n     /**\n-     * Returns the {@link CursorableLinkedList.Listable} at the specified\n-     * index.\n+     * Returns the \n+     * {@link org.apache.commons.collections.CursorableLinkedList.Listable} \n+     * at the specified index.\n+     *\n      * @throws IndexOutOfBoundsException if index is less than zero or\n      *         greater than or equal to the size of this list.\n      */\n      * <tt>_head.next().prev()</tt> and <tt>_head.prev().next()</tt> to be\n      * non-null, as when I am a sublist for some larger list.\n      * Use <tt>== _head.next()</tt> and <tt>== _head.prev()</tt> to determine\n-     * if a given {@link CursorableLinkedList.Listable} is the first or last element in the list.\n+     * if a given \n+     * {@link org.apache.commons.collections.CursorableLinkedList.Listable} \n+     * is the first or last element in the list.\n      */\n     transient protected Listable _head = new Listable(null,null,null);\n \n      * list, after the specified <i>before</i> element, and before the\n      * specified <i>after</i> element\n      *\n-     * @returns the newly created {@link CursorableLinkedList.Listable}\n+     * @return the newly created {@link CursorableLinkedList.Listable}\n      */\n     protected Listable insertListable(Listable before, Listable after, Object value) {\n         _modCount++;\n--- a/src/java/org/apache/commons/collections/DefaultMapEntry.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.6 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.7 2002/06/16 03:39:40 mas Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/06/16 03:39:40 $\n  *\n  * ====================================================================\n  *\n package org.apache.commons.collections;\n \n import java.util.Map;\n-import java.util.Map.Entry; // to keep javadoc from spewing warnings\n \n-/** A default implementation of {@link Map.Entry}\n+/** A default implementation of {@link java.util.Map.Entry}\n   *\n   * @since 1.0\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n     }\n \n     /**\n-     *  Implemented per API documentation of {@link Map.Entry#equals(Object)}\n+     *  Implemented per API documentation of \n+     *  {@link java.util.Map.Entry#equals(Object)}\n      **/\n     public boolean equals(Object o) {\n         if( o == null ) return false;\n      \n      \n     /**\n-     *  Implemented per API documentation of {@link Map.Entry#hashCode()}\n+     *  Implemented per API documentation of \n+     *  {@link java.util.Map.Entry#hashCode()}\n      **/\n     public int hashCode() {\n         return ( ( getKey() == null ? 0 : getKey().hashCode() ) ^\n--- a/src/java/org/apache/commons/collections/LazyCollections.java\n+++ b/src/java/org/apache/commons/collections/LazyCollections.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/LazyCollections.java,v 1.2 2002/05/29 03:22:42 arron Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/05/29 03:22:42 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/LazyCollections.java,v 1.3 2002/06/16 03:39:40 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/06/16 03:39:40 $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * new class built from an empty constructor, then all you need to provide is\n  * the class definition.\n  *\n- * @see org.apache.commons.collections.LazyList\n- * @see org.apache.commons.collections.LazyMap\n- * @see org.apache.commons.collections.LazySortedMap\n- *\n  * @author Arron Bates\n- * @version $Revision: 1.2 $\n+ * @version $Revision: 1.3 $\n  */\n public class LazyCollections {\n \n       return ((SortedMap)super.mapImpl).lastKey();\n     }\n   }\n-}\n+}\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PredicateUtils.java,v 1.1 2002/05/02 06:17:19 jstrachan Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/05/02 06:17:19 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PredicateUtils.java,v 1.2 2002/06/16 03:39:40 mas Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/06/16 03:39:40 $\n  *\n  * ====================================================================\n  *\n \t    }\n \t    \n         /**\n-         * @see Map.Entry#getKey()\n+         * @see java.util.Map.Entry#getKey()\n          */\n         public Object getKey() {\n             return iEntry.getKey();\n         }\n \n         /**\n-         * @see Map.Entry#getValue()\n+         * @see java.util.Map.Entry#getValue()\n          */\n         public Object getValue() {\n             return iEntry.getValue();\n         }\n \n         /**\n-         * @see Map.Entry#setValue()\n+         * @see java.util.Map.Entry#setValue(Object)\n          */\n         public Object setValue(Object object) {\n             validate(iValuePredicate, object);\n--- a/src/java/org/apache/commons/collections/comparators/TransformingComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/TransformingComparator.java\n import org.apache.commons.collections.Transformer;\n \n /**\n- * Decorates another Comparator with transformation behavior.&nbsp;That is, the\n+ * Decorates another Comparator with transformation behavior. That is, the\n  * return value from the transform operation will be passed to the decorated\n  * <CODE>Comparator#compare</CODE> method.\n  * <p>", "timestamp": 1024198780, "metainfo": ""}