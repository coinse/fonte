{"sha": "c33b575cfca19782da1dcf6e3d587e8f2f7bcf87", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r555925 | skestle | 2007-07-13 03:39:24 -0700 (Fri, 13 Jul 2007) | 2 lines          Added Edwin Tellman's patch for COLLECTIONS-243.       It all seems pretty reasonable, and it should all be checked again as the project is worked through     ------------------------------------------------------------------------     r471202 | scolebourne | 2006-11-04 06:21:44 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getCollection() - use covariant decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/set/PredicatedSortedSet.java\n+++ b/src/java/org/apache/commons/collections/set/PredicatedSortedSet.java\n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n-public class PredicatedSortedSet extends PredicatedSet implements SortedSet {\n+public class PredicatedSortedSet<E> extends PredicatedSet<E> implements SortedSet<E> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = -9110948148132275052L;\n      * \n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n+     * @return a new predicated sorted set.\n      * @throws IllegalArgumentException if set or predicate is null\n      * @throws IllegalArgumentException if the set contains invalid elements\n      */\n-    public static SortedSet decorate(SortedSet set, Predicate predicate) {\n-        return new PredicatedSortedSet(set, predicate);\n+    public static <T> SortedSet<T> decorate(SortedSet<T> set, Predicate<? super T> predicate) {\n+        return new PredicatedSortedSet<T>(set, predicate);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if set or predicate is null\n      * @throws IllegalArgumentException if the set contains invalid elements\n      */\n-    protected PredicatedSortedSet(SortedSet set, Predicate predicate) {\n+    protected PredicatedSortedSet(SortedSet<E> set, Predicate<? super E> predicate) {\n         super(set, predicate);\n     }\n \n      * \n      * @return the decorated sorted set\n      */\n-    private SortedSet getSortedSet() {\n-        return (SortedSet) getCollection();\n+    protected SortedSet<E> decorated() {\n+        return (SortedSet<E>) super.decorated();\n     }\n \n     //-----------------------------------------------------------------------\n-    public SortedSet subSet(Object fromElement, Object toElement) {\n-        SortedSet sub = getSortedSet().subSet(fromElement, toElement);\n-        return new PredicatedSortedSet(sub, predicate);\n+    public Comparator<? super E> comparator() {\n+        return decorated().comparator();\n     }\n \n-    public SortedSet headSet(Object toElement) {\n-        SortedSet sub = getSortedSet().headSet(toElement);\n-        return new PredicatedSortedSet(sub, predicate);\n+    public E first() {\n+        return decorated().first();\n     }\n \n-    public SortedSet tailSet(Object fromElement) {\n-        SortedSet sub = getSortedSet().tailSet(fromElement);\n-        return new PredicatedSortedSet(sub, predicate);\n+    public E last() {\n+        return decorated().last();\n     }\n \n-    public Object first() {\n-        return getSortedSet().first();\n+    public SortedSet<E> subSet(E fromElement, E toElement) {\n+        SortedSet<E> sub = decorated().subSet(fromElement, toElement);\n+        return new PredicatedSortedSet<E>(sub, predicate);\n     }\n \n-    public Object last() {\n-        return getSortedSet().last();\n+    public SortedSet<E> headSet(E toElement) {\n+        SortedSet<E> sub = decorated().headSet(toElement);\n+        return new PredicatedSortedSet<E>(sub, predicate);\n     }\n \n-    public Comparator comparator() {\n-        return getSortedSet().comparator();\n+    public SortedSet<E> tailSet(E fromElement) {\n+        SortedSet<E> sub = decorated().tailSet(fromElement);\n+        return new PredicatedSortedSet<E>(sub, predicate);\n     }\n \n }", "timestamp": 1252994202, "metainfo": ""}