{"sha": "9bbaba8bcd87b02b63c3c20e46283924b005ead9", "log": "* add ArrayUnsignedIntList and tests * deprecate some test cases to reduce the number of deprecation warnings   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayUnsignedIntList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedIntList.java,v 1.1 2003/04/09 06:44:34 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+/**\n+ * An {@link IntList} backed by an array of unsigned\n+ * <code>int</code> values.\n+ * This list stores <code>int</code> values\n+ * in the range [{@link #MIN_VALUE <code>0</code>},\n+ * {@link #MAX_VALUE <code>65535</code>}] in 16-bits \n+ * per element.  Attempts to use elements outside this \n+ * range may cause an \n+ * {@link IllegalArgumentException IllegalArgumentException} \n+ * to be thrown.\n+ * <p />\n+ * This implementation supports all optional methods.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/09 06:44:34 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+public class ArrayUnsignedIntList extends AbstractRandomAccessLongList implements LongList, Serializable {\n+\n+    // constructors\n+    //-------------------------------------------------------------------------\n+\n+    /** \n+     * Construct an empty list with the default\n+     * initial capacity.\n+     */\n+    protected ArrayUnsignedIntList() {\n+        this(8);\n+    }    \n+\n+    /**\n+     * Construct an empty list with the given\n+     * initial capacity.\n+     * @throws IllegalArgumentException when <i>initialCapacity</i> is negative\n+     */\n+    protected ArrayUnsignedIntList(int initialCapacity) {\n+        if(initialCapacity < 0) {\n+            throw new IllegalArgumentException(\"capacity \" + initialCapacity);\n+        }\n+        _data = new int[initialCapacity];\n+        _size = 0;\n+    }    \n+\n+    /** \n+     * Constructs a list containing the elements of the given collection, \n+     * in the order they are returned by that collection's iterator.\n+     * \n+     * @see ArrayIntList#addAll(org.apache.commons.collections.primitives.LongCollection)\n+     * @param that the non-<code>null</code> collection of <code>int</code>s \n+     *        to add\n+     * @throws NullPointerException if <i>that</i> is <code>null</code>\n+     */\n+    public ArrayUnsignedIntList(LongCollection that) { \n+        this(that.size());\n+        addAll(that);\n+    }    \n+\n+    // IntList methods\n+    //-------------------------------------------------------------------------\n+\n+    /** \n+     * Returns the element at the specified position within \n+     * me. \n+     * By construction, the returned value will be \n+     * between {@link #MIN_VALUE} and {@link #MAX_VALUE}, inclusive.\n+     * \n+     * @param index the index of the element to return\n+     * @return the value of the element at the specified position\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    public long get(int index) {\n+        checkRange(index);\n+        return toLong(_data[index]);\n+    }\n+    \n+    public int size() {\n+        return _size;\n+    }\n+    \n+    /** \n+     * Removes the element at the specified position in \n+     * (optional operation).  Any subsequent elements \n+     * are shifted to the left, subtracting one from their \n+     * indices.  Returns the element that was removed.\n+     * By construction, the returned value will be \n+     * between {@link #MIN_VALUE} and {@link #MAX_VALUE}, inclusive.\n+     * \n+     * @param index the index of the element to remove\n+     * @return the value of the element that was removed\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    public long removeElementAt(int index) {\n+        checkRange(index);\n+        incrModCount();\n+        int oldval = _data[index];\n+        int numtomove = _size - index - 1;\n+        if(numtomove > 0) {\n+            System.arraycopy(_data,index+1,_data,index,numtomove);\n+        }\n+        _size--;\n+        return oldval;\n+    }\n+    \n+    /** \n+     * Replaces the element at the specified \n+     * position in me with the specified element\n+     * (optional operation). \n+     * Throws {@link IllegalArgumentException} if <i>element</i>\n+     * is less than {@link #MIN_VALUE} or greater than {@link #MAX_VALUE}.\n+     * \n+     * @param index the index of the element to change\n+     * @param element the value to be stored at the specified position\n+     * @return the value previously stored at the specified position\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    public long set(int index, long element) {\n+        assertValidUnsignedInt(element);\n+        checkRange(index);\n+        incrModCount();\n+        long oldval = toLong(_data[index]);\n+        _data[index] = fromLong(element);\n+        return oldval;\n+    }\n+        \n+    /** \n+     * Inserts the specified element at the specified position \n+     * (optional operation). Shifts the element currently \n+     * at that position (if any) and any subsequent elements to the \n+     * right, increasing their indices.\n+     * Throws {@link IllegalArgumentException} if <i>element</i>\n+     * is less than {@link #MIN_VALUE} or greater than {@link #MAX_VALUE}.\n+     * \n+     * @param index the index at which to insert the element\n+     * @param element the value to insert\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException if some aspect of the specified element \n+     *         prevents it from being added to me\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    public void add(int index, long element) {\n+        assertValidUnsignedInt(element);\n+        checkRangeIncludingEndpoint(index);\n+        incrModCount();\n+        ensureCapacity(_size+1);\n+        int numtomove = _size-index;\n+        System.arraycopy(_data,index,_data,index+1,numtomove);\n+        _data[index] = fromLong(element);\n+        _size++;\n+    }\n+\n+    // capacity methods\n+    //-------------------------------------------------------------------------\n+\n+    /** \n+     * Increases my capacity, if necessary, to ensure that I can hold at \n+     * least the number of elements specified by the minimum capacity \n+     * argument without growing.\n+     */\n+    public void ensureCapacity(int mincap) {\n+        incrModCount();\n+        if(mincap > _data.length) {\n+            int newcap = (_data.length * 3)/2 + 1;\n+            int[] olddata = _data;\n+            _data = new int[newcap < mincap ? mincap : newcap];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    /** \n+     * Reduce my capacity, if necessary, to match my\n+     * current {@link #size size}.\n+     */\n+    public void trimToSize() {\n+        incrModCount();\n+        if(_size < _data.length) {\n+            int[] olddata = _data;\n+            _data = new int[_size];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    // private methods\n+    //-------------------------------------------------------------------------\n+\n+    private final long toLong(int value) { \n+        return ((long)value)&MAX_VALUE;\n+    }\n+\n+    private final int fromLong(long value) {\n+        return (int)(value&MAX_VALUE);\n+    }\n+\n+    private final void assertValidUnsignedInt(long value) throws IllegalArgumentException {\n+        if(value > MAX_VALUE) {\n+            throw new IllegalArgumentException(value + \" > \" + MAX_VALUE);\n+        }\n+        if(value < MIN_VALUE) {\n+            throw new IllegalArgumentException(value + \" < \" + MIN_VALUE);\n+        }\n+    }\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException{\n+        out.defaultWriteObject();\n+        out.writeInt(_data.length);\n+        for(int i=0;i<_size;i++) {\n+            out.writeInt(_data[i]);\n+        }\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        _data = new int[in.readInt()];\n+        for(int i=0;i<_size;i++) {\n+            _data[i] = in.readInt();\n+        }\n+    }\n+    \n+    private final void checkRange(int index) {\n+        if(index < 0 || index >= _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and less than \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private final void checkRangeIncludingEndpoint(int index) {\n+        if(index < 0 || index > _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and at most \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    // attributes\n+    //-------------------------------------------------------------------------\n+    \n+    /**\n+     *  The maximum possible unsigned 32-bit value.\n+     */\n+    public static final long MAX_VALUE = 0xFFFFFFFFL;\n+\n+    /**\n+     *  The minimum possible unsigned 32-bit value.\n+     */\n+    public static final long MIN_VALUE = 0L;\n+\n+    private transient int[] _data = null;\n+    private int _size = 0;\n+\n+}\n--- a/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.8 2003/01/11 21:28:02 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.9 2003/04/09 06:44:34 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * than a {@link java.util.ArrayList} and offers better compile-time type\n  * checking.\n  *\n- * @version $Revision: 1.8 $ $Date: 2003/01/11 21:28:02 $\n+ * @version $Revision: 1.9 $ $Date: 2003/04/09 06:44:34 $\n  * @author Rodney Waldhoff \n+ * @deprecated use ArrayUnsignedIntList or another LongList implementation instead.\n  */\n public class UnsignedIntArrayList extends AbstractLongArrayList implements Serializable {\n \n--- a/src/test/org/apache/commons/collections/primitives/TestAbstractIntArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAbstractIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractIntArrayList.java,v 1.6 2003/03/05 19:10:50 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractIntArrayList.java,v 1.7 2003/04/09 06:44:34 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.TestList;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/03/05 19:10:50 $\n+ * @version $Revision: 1.7 $ $Date: 2003/04/09 06:44:34 $\n  * @author Rodney Waldhoff\n+ * @deprecated as the tested classes are deprecated also\n  */\n public abstract class TestAbstractIntArrayList extends TestList {\n \n--- a/src/test/org/apache/commons/collections/primitives/TestAll.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.10 2003/04/08 18:24:34 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.11 2003/04/09 06:44:34 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.10 $ $Date: 2003/04/08 18:24:34 $\n+ * @version $Revision: 1.11 $ $Date: 2003/04/09 06:44:34 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n \n \t\tsuite.addTest(TestAbstractLongCollection.suite());\n \t\tsuite.addTest(TestAbstractRandomAccessLongList.suite());\n-\t\tsuite.addTest(TestArrayLongList.suite());\n+        suite.addTest(TestArrayLongList.suite());\n+        suite.addTest(TestArrayUnsignedIntList.suite());\n \n         suite.addTest(org.apache.commons.collections.primitives.adapters.TestAll.suite());\n         \n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestArrayUnsignedIntList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayUnsignedIntList.java,v 1.1 2003/04/09 06:44:34 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/09 06:44:34 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestArrayUnsignedIntList extends TestLongList {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestArrayUnsignedIntList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = BulkTest.makeSuite(TestArrayUnsignedIntList.class);\n+        return suite;\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    protected LongList makeEmptyLongList() {\n+        return new ArrayUnsignedIntList();\n+    }\n+\n+    public String[] ignoredSimpleTests() {\n+        // sublists are not serializable\n+        return new String[] { \n+            \"TestArrayUnsignedLongList.bulkTestSubList.testFullListSerialization\",\n+            \"TestArrayUnsignedLongList.bulkTestSubList.testEmptyListSerialization\",\n+            \"TestArrayUnsignedLongList.bulkTestSubList.testCanonicalEmptyCollectionExists\",\n+            \"TestArrayUnsignedLongList.bulkTestSubList.testCanonicalFullCollectionExists\",\n+            \"TestArrayUnsignedLongList.bulkTestSubList.testEmptyListCompatibility\",\n+            \"TestArrayUnsignedLongList.bulkTestSubList.testFullListCompatibility\",\n+            \"TestArrayUnsignedLongList.bulkTestSubList.testSerializeDeserializeThenCompare\",\n+            \"TestArrayUnsignedLongList.bulkTestSubList.testSimpleSerialization\"\n+        };\n+    }\n+\n+    protected long[] getFullLongs() {\n+        long[] result = new long[19];\n+        for(int i = 0; i < result.length; i++) {\n+            result[i] = ((long)Integer.MAX_VALUE - 1L - (long)i);\n+        }\n+        return result;\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    // @TODO need to add serialized form to cvs\n+    public void testCanonicalEmptyCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testCanonicalFullCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testEmptyListCompatibility() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testFullListCompatibility() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testZeroInitialCapacityIsValid() {\n+        ArrayUnsignedIntList list = new ArrayUnsignedIntList(0);\n+    }\n+    \n+    public void testIllegalArgumentExceptionWhenElementOutOfRange() {\n+        ArrayUnsignedIntList list = new ArrayUnsignedIntList();\n+        list.add(ArrayUnsignedIntList.MIN_VALUE);\n+        list.add(ArrayUnsignedIntList.MAX_VALUE);\n+        try {\n+            list.add(-1);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        }\n+        try {\n+            list.add(ArrayUnsignedIntList.MAX_VALUE+1);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testNegativeInitialCapacityIsInvalid() {\n+        try {\n+            ArrayUnsignedIntList list = new ArrayUnsignedIntList(-1);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCopyConstructor() {\n+        ArrayUnsignedIntList expected = new ArrayUnsignedIntList();\n+        for(int i=0;i<10;i++) {\n+            expected.add(i);\n+        }\n+        ArrayUnsignedIntList list = new ArrayUnsignedIntList(expected);\n+        assertEquals(10,list.size());\n+        assertEquals(expected,list);\n+    }\n+\n+    public void testCopyConstructorWithNull() {\n+        try {\n+            ArrayUnsignedIntList list = new ArrayUnsignedIntList(null);\n+            fail(\"Expected NullPointerException\");\n+        } catch(NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    public void testTrimToSize() {\n+        ArrayUnsignedIntList list = new ArrayUnsignedIntList();\n+        for(int j=0;j<3;j++) {\n+            assertTrue(list.isEmpty());\n+    \n+            list.trimToSize();\n+    \n+            assertTrue(list.isEmpty());\n+            \n+            for(int i=0;i<10;i++) {\n+                list.add(i);\n+            }\n+            \n+            for(int i=0;i<10;i++) {\n+                assertEquals(i,list.get(i));\n+            }\n+            \n+            list.trimToSize();\n+    \n+            for(int i=0;i<10;i++) {\n+                assertEquals(i,list.get(i));\n+            }\n+    \n+            for(int i=0;i<10;i+=2) {\n+                list.removeElement(i);\n+            }\n+            \n+            for(int i=0;i<5;i++) {\n+                assertEquals((2*i)+1,list.get(i));\n+            }\n+    \n+            list.trimToSize();\n+                    \n+            for(int i=0;i<5;i++) {\n+                assertEquals((2*i)+1,list.get(i));\n+            }\n+    \n+            list.trimToSize();\n+                    \n+            for(int i=0;i<5;i++) {\n+                assertEquals((2*i)+1,list.get(i));\n+            }\n+\n+            list.clear();\n+        }\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/primitives/TestIntArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntArrayList.java,v 1.6 2003/01/12 15:23:20 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntArrayList.java,v 1.7 2003/04/09 06:44:34 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/01/12 15:23:20 $\n+ * @version $Revision: 1.7 $ $Date: 2003/04/09 06:44:34 $\n  * @author Rodney Waldhoff\n+ * @deprecated as the tested classes are deprecated also\n  */\n public class TestIntArrayList extends TestAbstractIntArrayList {\n \n--- a/src/test/org/apache/commons/collections/primitives/TestLongArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestLongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongArrayList.java,v 1.6 2003/01/12 15:23:20 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongArrayList.java,v 1.7 2003/04/09 06:44:34 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/01/12 15:23:20 $\n+ * @version $Revision: 1.7 $ $Date: 2003/04/09 06:44:34 $\n  * @author Rodney Waldhoff\n+ * @deprecated as the tested classes are deprecated also\n  */\n public class TestLongArrayList extends TestAbstractLongArrayList {\n \n--- a/src/test/org/apache/commons/collections/primitives/TestUnsignedIntArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestUnsignedIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedIntArrayList.java,v 1.6 2003/01/12 15:23:20 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedIntArrayList.java,v 1.7 2003/04/09 06:44:34 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/01/12 15:23:20 $\n+ * @version $Revision: 1.7 $ $Date: 2003/04/09 06:44:34 $\n  * @author Rodney Waldhoff\n+ * @deprecated as the tested classes are deprecated also\n  */\n public class TestUnsignedIntArrayList extends TestAbstractLongArrayList {\n \n--- a/src/test/org/apache/commons/collections/primitives/TestUnsignedShortArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestUnsignedShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedShortArrayList.java,v 1.6 2003/01/12 15:23:20 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestUnsignedShortArrayList.java,v 1.7 2003/04/09 06:44:34 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/01/12 15:23:20 $\n+ * @version $Revision: 1.7 $ $Date: 2003/04/09 06:44:34 $\n  * @author Rodney Waldhoff\n+ * @deprecated as the tested classes are deprecated also\n  */\n public class TestUnsignedShortArrayList extends TestAbstractIntArrayList {\n ", "timestamp": 1049870674, "metainfo": ""}