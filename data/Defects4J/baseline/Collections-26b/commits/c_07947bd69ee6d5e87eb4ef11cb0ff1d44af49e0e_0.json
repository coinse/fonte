{"sha": "07947bd69ee6d5e87eb4ef11cb0ff1d44af49e0e", "log": "[COLLECTIONS-362] changed filter return value to boolean.  ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n      * predicate returns false, remove the element.\n      * <p>\n      * If the input collection or predicate is null, there is no change made.\n-     *\n+     * \n      * @param collection\n      *            the collection to get the input from, may be null\n      * @param predicate\n      *            the predicate to use as a filter, may be null\n-     */\n-    public static <T> void filter(Iterable<T> collection, Predicate<? super T> predicate) {\n+     * @return true if the collection is modified by this call, false otherwise.\n+     */\n+    public static <T> boolean filter(Iterable<T> collection, Predicate<? super T> predicate) {\n+        boolean result = false;\n         if (collection != null && predicate != null) {\n             for (Iterator<T> it = collection.iterator(); it.hasNext();) {\n                 if (!predicate.evaluate(it.next())) {\n                     it.remove();\n+                    result = true;\n                 }\n             }\n         }\n+        return result;\n     }\n \n     /**\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n import static org.apache.commons.collections.functors.EqualPredicate.equalPredicate;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertSame;\n import static org.junit.Assert.fail;\n \n import java.util.*;\n         ints.add(3);\n         ints.add(3);\n         Iterable<Integer> iterable = ints;\n-        CollectionUtils.filter(iterable, EQUALS_TWO);\n+        assertTrue(CollectionUtils.filter(iterable, EQUALS_TWO));\n         assertEquals(1, (int) ints.size());\n         assertEquals(2, (int) ints.get(0));\n     }\n     @Test\n     public void filterNullParameters() throws Exception {\n         List<Long> longs = Collections.nCopies(4, 10L);\n-        CollectionUtils.filter(longs, null);\n+        assertFalse(CollectionUtils.filter(longs, null));\n         assertEquals(4, longs.size());\n-        CollectionUtils.filter(null, EQUALS_TWO);\n+        assertFalse(CollectionUtils.filter(null, EQUALS_TWO));\n         assertEquals(4, longs.size());\n-        CollectionUtils.filter(null, null);\n+        assertFalse(CollectionUtils.filter(null, null));\n         assertEquals(4, longs.size());\n     }\n ", "timestamp": 1305910594, "metainfo": ""}