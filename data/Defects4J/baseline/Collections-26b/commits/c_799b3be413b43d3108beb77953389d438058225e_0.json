{"sha": "799b3be413b43d3108beb77953389d438058225e", "log": "javadocs add test   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.8 2003/01/13 12:59:45 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.9 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * to provide a more efficient implementation.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.8 $ $Date: 2003/01/13 12:59:45 $\n+ * @version $Revision: 1.9 $ $Date: 2003/01/13 21:52:28 $\n  * \n  * @author Rodney Waldhoff \n  */\n     // constructors\n     //-------------------------------------------------------------------------\n \n-    /** Constructs any empty list. */\n+    /** Constructs an empty list. */\n     protected AbstractRandomAccessIntList() { \n     }    \n \n      * @param that the non-<code>null</code> collection of <code>int</code>s \n      *        to add\n      * @throws NullPointerException if <i>that</i> is <code>null</code>\n-     * @throws UnsupportedOperationException if {@link #addAll} does\n+     * @throws UnsupportedOperationException if {@link #addAll addAll} does\n      */\n     protected AbstractRandomAccessIntList(IntCollection that) { \n         addAll(that);\n--- a/src/java/org/apache/commons/collections/primitives/ArrayIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayIntList.java,v 1.4 2003/01/13 12:59:45 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayIntList.java,v 1.5 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * This implementation supports all optional methods.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.4 $ $Date: 2003/01/13 12:59:45 $\n+ * @version $Revision: 1.5 $ $Date: 2003/01/13 21:52:28 $\n  * \n  * @author Rodney Waldhoff \n  */\n      * Removes the element at the specified position in \n      * (optional operation).  Any subsequent elements \n      * are shifted to the left, subtracting one from their \n-     * indices.  Returns the element that was removed from\n-     * the list.\n+     * indices.  Returns the element that was removed.\n      * \n      * @param index the index of the element to remove\n      * @return the value of the element that was removed\n \n     /** \n      * Reduce my capacity, if necessary, to match my\n-     * current {@link #size}.\n+     * current {@link #size size}.\n      */\n     public void trimToSize() {\n         incrModCount();\n--- a/src/java/org/apache/commons/collections/primitives/ArrayUnsignedShortList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayUnsignedShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedShortList.java,v 1.3 2003/01/13 12:59:45 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedShortList.java,v 1.4 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * This implementation supports all optional methods.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.3 $ $Date: 2003/01/13 12:59:45 $\n+ * @version $Revision: 1.4 $ $Date: 2003/01/13 21:52:28 $\n  * \n  * @author Rodney Waldhoff \n  */\n      * Removes the element at the specified position in \n      * (optional operation).  Any subsequent elements \n      * are shifted to the left, subtracting one from their \n-     * indices.  Returns the element that was removed from\n-     * the list.\n+     * indices.  Returns the element that was removed.\n      * By construction, the returned value will be \n      * between {@link #MIN_VALUE} and {@link #MAX_VALUE}, inclusive.\n      * \n \n     /** \n      * Reduce my capacity, if necessary, to match my\n-     * current {@link #size}.\n+     * current {@link #size size}.\n      */\n     public void trimToSize() {\n         incrModCount();\n--- a/src/java/org/apache/commons/collections/primitives/IntCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntCollection.java,v 1.4 2003/01/11 21:28:02 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntCollection.java,v 1.5 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * @see org.apache.commons.collections.primitives.adapters.CollectionIntCollection\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.4 $ $Date: 2003/01/11 21:28:02 $\n+ * @version $Revision: 1.5 $ $Date: 2003/01/13 21:52:28 $\n  * \n  * @author Rodney Waldhoff \n  */\n     /** \n      * Ensures that I contain the specified element \n      * (optional operation).  Returns <code>true</code>\n-     * if I changed as a result of this call.\n+     * iff I changed as a result of this call.\n      * <p/>\n      * If a collection refuses to add the specified\n      * element for any reason other than that it already contains\n     \n     /** \n      * Removes all my elements (optional operation). \n-     * This collection will be {@link #isEmpty empty} after this\n+     * I will be {@link #isEmpty empty} after this\n      * method successfully returns.\n      * \n      * @throws UnsupportedOperationException when this operation is not \n      * @return an {@link IntIterator iterator} over all my elements.\n      */\n     IntIterator iterator();\n+    \n+    /** \n+     * Removes all of my elements that are contained in the \n+     * specified collection (optional operation). \n+     * The behavior of this method is unspecified if \n+     * the given collection is modified while this method\n+     * is executing.  Note that this includes the case\n+     * in which the given collection is this collection, \n+     * and it is not empty.\n+     * \n+     * @param c the collection of elements to remove\n+     * @return <code>true</code> iff I contained the at least one of the\n+     *         specified elements, in other words, returns <code>true</code>\n+     *         iff I changed as a result of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     */\n+    boolean removeAll(IntCollection c);\n      \n     /** \n      * Removes a single occurrence of the specified element \n     boolean removeElement(int element);\n     \n     /** \n-     * Removes all of my elements that are contained in the \n-     * specified collection (optional operation). \n-     * \n-     * @param c the collection of elements to remove\n-     * @return <code>true</code> iff I contained the at least one of the\n-     *         specified elements,  in other words, iff I changed as a result \n-     *         of this call\n-     * \n-     * @throws UnsupportedOperationException when this operation is not \n-     *         supported\n-     */\n-    boolean removeAll(IntCollection c);\n-    \n-    /** \n      * Removes all of my elements that are <i>not</i> contained in the \n      * specified collection (optional operation). \n-     * (In other words, retains only my elements that are \n-     * contained in the specified collection. \n+     * (In other words, retains <i>only</i> my elements that are \n+     * contained in the specified collection.)\n+     * The behavior of this method is unspecified if \n+     * the given collection is modified while this method\n+     * is executing.\n      * \n      * @param c the collection of elements to retain\n      * @return <code>true</code> iff I changed as a result \n     \n     /** \n      * Returns an array containing all of my elements.\n-     * The length of the returned array should be equal\n-     * to the my {@link #size size}.\n-     * <p/>\n-     * The returned array will be independent of this\n-     * collection, so that callers may modify that \n+     * The length of the returned array will be equal\n+     * to my {@link #size size}.\n+     * <p/>\n+     * The returned array will be independent of me, \n+     * so that callers may modify that \n      * returned array without modifying this collection.\n      * <p/>\n-     * When this collection guarantees the order in which \n-     * elements are returned by an {@link #iterator},\n+     * When I guarantee the order in which \n+     * elements are returned by an {@link #iterator iterator},\n      * the returned array will contain elements in the\n      * same order.\n      * \n      * larger than the number of elements I contain, \n      * values outside of my range will be unchanged.\n      * <p/>\n-     * The returned array will be independent of this\n-     * collection, so that callers may modify that \n+     * The returned array will be independent of me, \n+     * so that callers may modify that \n      * returned array without modifying this collection.\n      * <p/>\n-     * When this collection guarantees the order in which \n-     * elements are returned by an {@link #iterator},\n+     * When I guarantee the order in which \n+     * elements are returned by an {@link #iterator iterator},\n      * the returned array will contain elements in the\n      * same order.\n      * \n--- a/src/java/org/apache/commons/collections/primitives/IntIterator.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntIterator.java,v 1.4 2003/01/11 21:34:39 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntIterator.java,v 1.5 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * @see org.apache.commons.collections.primitives.adapters.IteratorIntIterator\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.4 $ $Date: 2003/01/11 21:34:39 $\n+ * @version $Revision: 1.5 $ $Date: 2003/01/13 21:52:28 $\n  * \n  * @author Rodney Waldhoff \n  */\n     /** \n      * Returns <code>true</code> iff I have more elements. \n      * (In other words, returns <code>true</code> iff \n-     * a call to {@link #next next} will return an element\n-     * rather than throwing an exception.)\n+     * a subsequent call to {@link #next next} will return \n+     * an element rather than throwing an exception.)\n      * \n      * @return <code>true</code> iff I have more elements\n      */\n--- a/src/java/org/apache/commons/collections/primitives/IntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntList.java,v 1.12 2003/01/13 12:59:45 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntList.java,v 1.13 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * @see org.apache.commons.collections.primitives.adapters.ListIntList\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.12 $ $Date: 2003/01/13 12:59:45 $\n+ * @version $Revision: 1.13 $ $Date: 2003/01/13 21:52:28 $\n  * \n  * @author Rodney Waldhoff \n  */\n     /** \n      * Appends the specified element to the end of me\n      * (optional operation).  Returns <code>true</code>\n-     * if I changed as a result of this call.\n+     * iff I changed as a result of this call.\n      * <p/>\n      * If a collection refuses to add the specified\n      * element for any reason other than that it already contains\n      * \n      * @param index the index at which to insert the first element from \n      *        the specified collection\n-     * @param collection the {@link IntCollection} of elements to add \n+     * @param collection the {@link IntCollection IntCollection} of elements to add \n      * @return <code>true</code> iff I changed as a result of this call\n      * \n      * @throws UnsupportedOperationException when this operation is not \n      * Returns <code>true</code> iff <i>that</i> is an <code>IntList</code>\n      * that contains the same elements in the same order as me.\n      * In other words, returns <code>true</code> iff <i>that</i> is\n-     * an <code>IntList</code> that has the same {@link #size} as me,\n-     * and for which the elements returned that its \n+     * an <code>IntList</code> that has the same {@link #size size} as me,\n+     * and for which the elements returned by its \n      * {@link IntList#iterator iterator} are equal (<code>==</code>) to\n      * the corresponding elements within me.\n      * (This contract ensures that this method works properly across \n     boolean equals(Object that);\n     \n     /** \n-     * Returns the element at the specified position within \n-     * me. \n+     * Returns the value of the element at the specified position \n+     * within me. \n      * \n      * @param index the index of the element to return\n      * @return the value of the element at the specified position\n      * <p />\n      * The hash code of an <code>IntList</code> is defined to be the\n      * result of the following calculation:\n-     * <pre>int hash = 1;\n+     * <pre> int hash = 1;\n      * for(IntIterator iter = iterator(); iter.hasNext(); ) {\n      *   hash = 31*hash + iter.next();\n      * }</pre>\n      * <p />\n      * This contract ensures that this method is consistent with \n-     * {@link #equals} and with the {@link java.util.List#hashCode hashCode}\n+     * {@link #equals equals} and with the \n+     * {@link java.util.List#hashCode hashCode}\n      * method of a {@link java.util.List List} of {@link Integer}s. \n      * \n      * @return my hash code\n     int indexOf(int element);\n      \n     /** \n+     * Returns an {@link IntIterator iterator} over all my elements,\n+     * in the appropriate sequence.\n+     * @return an {@link IntIterator iterator} over all my elements.\n+     */\n+    IntIterator iterator();\n+\n+    /** \n      * Returns the index of the last occurrence \n      * of the specified element within me, \n      * or -1 if I do not contain the element. \n     /** \n      * Returns a \n      * {@link IntListIterator bidirectional iterator}\n-     * over my elements, in the appropriate sequence, \n+     * over all my elements, in the appropriate sequence, \n      * starting at the specified position. The \n      * specified <i>index</i> indicates the first \n      * element that would be returned by an initial \n      * Removes the element at the specified position in \n      * (optional operation).  Any subsequent elements \n      * are shifted to the left, subtracting one from their \n-     * indices.  Returns the element that was removed from\n-     * the list.\n+     * indices.  Returns the element that was removed.\n      * \n      * @param index the index of the element to remove\n      * @return the value of the element that was removed\n     /** \n      * Returns a view of the elements within me \n      * between the specified <i>fromIndex</i>, inclusive, and \n-     * <i>toIndex</i>, exclusive.  The returned {@link IntList}\n+     * <i>toIndex</i>, exclusive.  The returned <code>IntList</code>\n      * is backed by me, so that any changes in \n      * the returned list are reflected in me, and vice-versa.\n      * The returned list supports all of the optional operations\n      * that I support.\n      * <p/>\n      * Note that when <code><i>fromIndex</i> == <i>toIndex</i></code>,\n-     * the returned list is empty, and when \n+     * the returned list is initially empty, and when \n      * <code><i>fromIndex</i> == 0 && <i>toIndex</i> == {@link #size() size()}</code>\n      * the returned list is my \"improper\" sublist, containing all my elements.\n      * <p/>\n--- a/src/java/org/apache/commons/collections/primitives/adapters/CollectionIntCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/CollectionIntCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/CollectionIntCollection.java,v 1.2 2003/01/11 21:28:03 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/CollectionIntCollection.java,v 1.3 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.primitives.IntIterator;\n \n /**\n- * Adapts a {@link java.lang.Number Number} valued\n+ * Adapts a {@link java.lang.Number Number}-valued\n  * {@link java.util.Collection Collection} to the\n- * {@link IntCollection} interface.\n- *\n- * @version $Revision: 1.2 $ $Date: 2003/01/11 21:28:03 $\n+ * {@link IntCollection IntCollection} interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link Collection Collection} \n+ * implementation in the \"obvious\" way.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.3 $ $Date: 2003/01/13 21:52:28 $\n  * @author Rodney Waldhoff \n  */\n public class CollectionIntCollection implements IntCollection {\n+    /**\n+     * Create an {@link IntCollection IntCollection} wrapping\n+     * the specified {@link Collection Collection}.  When\n+     * the given <i>collection</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param collection the (possibly <code>null</code>) {@link Collection} to wrap\n+     * @return an {@link IntCollection IntCollection} wrapping the given \n+     *         <i>collection</i>, or <code>null</code> when <i>collection</i> is\n+     *         <code>null</code>.\n+     */\n+    public static IntCollection wrap(Collection collection) {\n+        return null == collection ? null : new CollectionIntCollection(collection);\n+    }\n+    \n+    /**\n+     * Creates an {@link IntCollection IntCollection} wrapping\n+     * the specified {@link Collection Collection}.\n+     * @see #wrap\n+     */\n     public CollectionIntCollection(Collection collection) {\n         _collection = collection;\n     }\n         return _collection.containsAll(IntCollectionCollection.wrap(c));\n     }        \n     \n+    /**\n+     * If <i>that</i> is an {@link IntCollection IntCollection}, \n+     * it is {@link IntCollectionCollection#wrap wrapped} and\n+     * compared to my underlying {@link Collection Collection}, otherwise\n+     * this method simply delegates to my underlying \n+     * {@link Collection Collection}.\n+     */\n     public boolean equals(Object that) {\n         if(that instanceof IntCollection) {\n             return _collection.equals(IntCollectionCollection.wrap((IntCollection)that));\n         return _collection.isEmpty();\n     }\n     \n+    /**\n+     * {@link IteratorIntIterator#wrap wraps} the \n+     * {@link java.util.Iterator Iterator}\n+     * returned by my underlying \n+     * {@link Collection Collection}, \n+     * if any.\n+     */\n     public IntIterator iterator() {\n         return IteratorIntIterator.wrap(_collection.iterator());\n     }\n         return dest;\n     }\n     \n-    public static IntCollection wrap(Collection collection) {\n-        return null == collection ? null : new CollectionIntCollection(collection);\n-    }\n-    \n     private Collection _collection = null;\n     \n }\n--- a/src/java/org/apache/commons/collections/primitives/adapters/IntCollectionCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/IntCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntCollectionCollection.java,v 1.2 2003/01/11 21:28:03 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntCollectionCollection.java,v 1.3 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.primitives.IntCollection;\n \n /**\n- * Adapts an {@link IntCollection} to the\n- * {@link java.util.Collection Collection} interface.\n- *\n- * @version $Revision: 1.2 $ $Date: 2003/01/11 21:28:03 $\n+ * Adapts an {@link IntCollection IntCollection}\n+ * to the {@link java.util.Collection Collection}\n+ * interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link IntCollection IntCollection} \n+ * implementation in the \"obvious\" way.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.3 $ $Date: 2003/01/13 21:52:28 $\n  * @author Rodney Waldhoff \n  */\n public class IntCollectionCollection implements Collection {\n     \n+    /**\n+     * Create a {@link Collection Collection} wrapping\n+     * the specified {@link IntCollection IntCollection}.  When\n+     * the given <i>collection</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param collection the (possibly <code>null</code>) \n+     *        {@link IntCollection IntCollection} to wrap\n+     * @return a {@link Collection Collection} wrapping the given \n+     *         <i>collection</i>, or <code>null</code> when <i>collection</i> is\n+     *         <code>null</code>.\n+     */\n+    public static Collection wrap(IntCollection collection) {\n+        return null == collection ? null : new IntCollectionCollection(collection);\n+    }\n+    \n+    /**\n+     * Creates a {@link Collection Collection} wrapping\n+     * the specified {@link IntCollection IntCollection}.\n+     * @see #wrap\n+     */\n     public IntCollectionCollection(IntCollection collection) {\n         _collection = collection;\n     }\n         return _collection.containsAll(CollectionIntCollection.wrap(c));\n     }        \n     \n+    /**\n+     * If <i>that</i> is a {@link Collection Collection}, \n+     * it is {@link CollectionIntCollection#wrap wrapped} and\n+     * compared to my underlying \n+     * {@link org.apache.commons.collections.primitives.IntCollection IntCollection},\n+     * otherwise this method simply delegates to my underlying \n+     * <code>IntCollection</code>.\n+     */\n     public boolean equals(Object that) {\n         if(that instanceof Collection) {\n             try {\n         return _collection.isEmpty();\n     }\n     \n+    /**\n+     * {@link IntIteratorIterator#wrap wraps} the \n+     * {@link org.apache.commons.collections.primitives.IntIterator IntIterator}\n+     * returned by my underlying \n+     * {@link IntCollection IntCollection}, \n+     * if any.\n+     */\n     public Iterator iterator() {\n         return IntIteratorIterator.wrap(_collection.iterator());\n     }\n         return A;\n     }\n     \n-    public static Collection wrap(IntCollection collection) {\n-        return null == collection ? null : new IntCollectionCollection(collection);\n-    }\n-    \n     private IntCollection _collection = null;\n }\n--- a/src/java/org/apache/commons/collections/primitives/adapters/IntIteratorIterator.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/IntIteratorIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntIteratorIterator.java,v 1.2 2003/01/11 21:28:03 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntIteratorIterator.java,v 1.3 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.primitives.IntIterator;\n \n /**\n- * Adapts an {@link IntIterator} to the\n+ * Adapts an {@link IntIterator IntIterator} to the\n  * {@link java.util.Iterator Iterator} interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link IntIterator IntIterator} \n+ * implementation in the \"obvious\" way.\n  *\n- * @version $Revision: 1.2 $ $Date: 2003/01/11 21:28:03 $\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.3 $ $Date: 2003/01/13 21:52:28 $\n  * @author Rodney Waldhoff \n  */\n public class IntIteratorIterator implements Iterator {\n     \n+    /**\n+     * Create an {@link Iterator Iterator} wrapping\n+     * the specified {@link IntIterator IntIterator}.  When\n+     * the given <i>iterator</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param iterator the (possibly <code>null</code>) \n+     *        {@link IntIterator IntIterator} to wrap\n+     * @return an {@link Iterator Iterator} wrapping the given \n+     *         <i>iterator</i>, or <code>null</code> when <i>iterator</i> is\n+     *         <code>null</code>.\n+     */\n+    public static Iterator wrap(IntIterator iterator) {\n+        return null == iterator ? null : new IntIteratorIterator(iterator);\n+    }\n+    \n+    /**\n+     * Creates an {@link Iterator Iterator} wrapping\n+     * the specified {@link IntIterator IntIterator}.\n+     * @see #wrap\n+     */\n     public IntIteratorIterator(IntIterator iterator) {\n         _iterator = iterator;\n     }\n         _iterator.remove();\n     }\n     \n-    public static Iterator wrap(IntIterator iterator) {\n-        return null == iterator ? null : new IntIteratorIterator(iterator);\n-    }\n-    \n     private IntIterator _iterator = null;\n \n }\n--- a/src/java/org/apache/commons/collections/primitives/adapters/IntListIteratorListIterator.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/IntListIteratorListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntListIteratorListIterator.java,v 1.3 2003/01/11 21:28:03 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntListIteratorListIterator.java,v 1.4 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n import java.util.ListIterator;\n \n-import org.apache.commons.collections.primitives.*;\n+import org.apache.commons.collections.primitives.IntListIterator;\n \n /**\n- * Adapts an {@link IntListIterator} to the\n- * {@link java.util.ListIterator ListIterator} interface.\n+ * Adapts an {@link IntListIterator IntListIterator} to the\n+ * {@link ListIterator ListIterator} interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link IntListIterator IntListIterator} \n+ * implementation in the \"obvious\" way.\n  *\n- * @version $Revision: 1.3 $ $Date: 2003/01/11 21:28:03 $\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.4 $ $Date: 2003/01/13 21:52:28 $\n  * @author Rodney Waldhoff \n  */\n public class IntListIteratorListIterator implements ListIterator {\n     \n+    /**\n+     * Create a {@link ListIterator ListIterator} wrapping\n+     * the specified {@link IntListIterator IntListIterator}.  When\n+     * the given <i>iterator</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param iterator the (possibly <code>null</code>) \n+     *        {@link IntListIterator IntListIterator} to wrap\n+     * @return a {@link ListIterator ListIterator} wrapping the given \n+     *         <i>iterator</i>, or <code>null</code> when <i>iterator</i> is\n+     *         <code>null</code>.\n+     */\n+    public static ListIterator wrap(IntListIterator iterator) {\n+        return null == iterator ? null : new IntListIteratorListIterator(iterator);\n+    }\n+    \n+    /**\n+     * Creates an {@link ListIterator ListIterator} wrapping\n+     * the specified {@link IntListIterator IntListIterator}.\n+     * @see #wrap\n+     */\n     public IntListIteratorListIterator(IntListIterator iterator) {\n         _iterator = iterator;\n     }\n     public void remove() {\n         _iterator.remove();\n     }\n-      \n-    public static ListIterator wrap(IntListIterator iterator) {\n-        return null == iterator ? null : new IntListIteratorListIterator(iterator);\n-    }\n-    \n+          \n     private IntListIterator _iterator = null;\n \n }\n--- a/src/java/org/apache/commons/collections/primitives/adapters/IntListList.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/IntListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntListList.java,v 1.2 2003/01/11 21:28:03 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntListList.java,v 1.3 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.primitives.IntList;\n \n /**\n- * Adapts an {@link IntList} to the\n- * {@link java.util.List List} interface.\n+ * Adapts an {@link IntList IntList} to the\n+ * {@link List List} interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link IntList IntList} \n+ * implementation in the \"obvious\" way.\n  *\n- * @version $Revision: 1.2 $ $Date: 2003/01/11 21:28:03 $\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.3 $ $Date: 2003/01/13 21:52:28 $\n  * @author Rodney Waldhoff \n  */\n public class IntListList extends IntCollectionCollection implements List {\n     \n+    /**\n+     * Create a {@link List List} wrapping\n+     * the specified {@link IntList IntList}.  When\n+     * the given <i>list</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param list the (possibly <code>null</code>) \n+     *        {@link IntList IntList} to wrap\n+     * @return a {@link List List} wrapping the given \n+     *         <i>list</i>, or <code>null</code> when <i>list</i> is\n+     *         <code>null</code>.\n+     */\n+    public static List wrap(IntList list) {\n+        return null == list ? null : new IntListList(list);\n+    }\n+\n+    /**\n+     * Creates a {@link List List} wrapping\n+     * the specified {@link IntList IntList}.\n+     * @see #wrap\n+     */\n     public IntListList(IntList list) {\n         super(list);        \n         _list = list;\n         return _list.lastIndexOf(((Number)element).intValue());\n     }\n \n+    /**\n+     * {@link IntListIteratorListIterator#wrap wraps} the \n+     * {@link org.apache.commons.collections.primitives.IntListIterator IntListIterator}\n+     * returned by my underlying \n+     * {@link IntList IntList}, \n+     * if any.\n+     */\n     public ListIterator listIterator() {\n         return IntListIteratorListIterator.wrap(_list.listIterator());\n     }\n \n+    /**\n+     * {@link IntListIteratorListIterator#wrap wraps} the \n+     * {@link org.apache.commons.collections.primitives.IntListIterator IntListIterator}\n+     * returned by my underlying \n+     * {@link IntList IntList}, \n+     * if any.\n+     */\n     public ListIterator listIterator(int index) {\n         return IntListIteratorListIterator.wrap(_list.listIterator(index));\n     }\n         return IntListList.wrap(_list.subList(fromIndex,toIndex));\n     }\n \n+    /**\n+     * If <i>that</i> is a {@link List List}, \n+     * it is {@link ListIntList#wrap wrapped} and\n+     * compared to my underlying \n+     * {@link org.apache.commons.collections.primitives.IntList IntList},\n+     * otherwise this method simply delegates to my parent implementation.\n+     */\n     public boolean equals(Object that) {\n         if(that instanceof List) {\n             try {\n         }\n     }\n     \n-    public static List wrap(IntList list) {\n-        return null == list ? null : new IntListList(list);\n-    }\n-\n     private IntList _list = null;\n \n }\n--- a/src/java/org/apache/commons/collections/primitives/adapters/IteratorIntIterator.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/IteratorIntIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IteratorIntIterator.java,v 1.2 2003/01/11 21:28:03 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IteratorIntIterator.java,v 1.3 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n /**\n  * Adapts a {@link java.lang.Number Number}-valued \n- * {@link java.util.Iterator Iterator} \n- * to the {@link IntIterator} interface.\n+ * {@link Iterator Iterator} \n+ * to the {@link IntIterator IntIterator} \n+ * interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link Iterator Iterator} \n+ * implementation in the \"obvious\" way.\n  *\n- * @version $Revision: 1.2 $ $Date: 2003/01/11 21:28:03 $\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.3 $ $Date: 2003/01/13 21:52:28 $\n  * @author Rodney Waldhoff \n- *  \n  */\n public class IteratorIntIterator implements IntIterator {\n     \n+    /**\n+     * Create an {@link IntIterator IntIterator} wrapping\n+     * the specified {@link Iterator Iterator}.  When\n+     * the given <i>iterator</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param iterator the (possibly <code>null</code>) \n+     *        {@link Iterator Iterator} to wrap\n+     * @return an {@link IntIterator IntIterator} wrapping the given \n+     *         <i>iterator</i>, or <code>null</code> when <i>iterator</i> is\n+     *         <code>null</code>.\n+     */\n+    public static IntIterator wrap(Iterator iterator) {\n+        return null == iterator ? null : new IteratorIntIterator(iterator);\n+    }\n+   \n+    /**\n+     * Creates an {@link IntIterator IntIterator} wrapping\n+     * the specified {@link Iterator Iterator}.\n+     * @see #wrap\n+     */\n     public IteratorIntIterator(Iterator iterator) {\n         _iterator = iterator;\n     }\n         _iterator.remove();\n     }\n     \n-    public static IntIterator wrap(Iterator iterator) {\n-        return null == iterator ? null : new IteratorIntIterator(iterator);\n-    }\n-\n     private Iterator _iterator = null;\n \n }\n--- a/src/java/org/apache/commons/collections/primitives/adapters/ListIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/ListIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ListIntList.java,v 1.3 2003/01/11 21:28:03 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ListIntList.java,v 1.4 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n import java.util.List;\n \n-import org.apache.commons.collections.primitives.*;\n import org.apache.commons.collections.primitives.IntCollection;\n import org.apache.commons.collections.primitives.IntList;\n+import org.apache.commons.collections.primitives.IntListIterator;\n \n /**\n- * Adapts a {@link Number}-valued {@link java.util.List List} \n- * to the {@link IntList} interface.\n+ * Adapts a {@link Number}-valued {@link List List} \n+ * to the {@link IntList IntList} interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link List List} \n+ * implementation in the \"obvious\" way.\n  *\n- * @version $Revision: 1.3 $ $Date: 2003/01/11 21:28:03 $\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.4 $ $Date: 2003/01/13 21:52:28 $\n  * @author Rodney Waldhoff \n  */\n public class ListIntList extends CollectionIntCollection implements IntList {\n     \n+    /**\n+     * Create an {@link IntList IntList} wrapping\n+     * the specified {@link List List}.  When\n+     * the given <i>list</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param list the (possibly <code>null</code>) \n+     *        {@link List List} to wrap\n+     * @return a {@link IntList IntList} wrapping the given \n+     *         <i>list</i>, or <code>null</code> when <i>list</i> is\n+     *         <code>null</code>.\n+     */\n+    public static IntList wrap(List list) {\n+        return null == list ? null : new ListIntList(list);\n+    }\n+\n+    /**\n+     * Creates an {@link IntList IntList} wrapping\n+     * the specified {@link List List}.\n+     * @see #wrap\n+     */\n     public ListIntList(List list) {\n         super(list);        \n         _list = list;\n         return _list.lastIndexOf(new Integer(element));\n     }\n \n+    /**\n+     * {@link ListIteratorIntListIterator#wrap wraps} the \n+     * {@link IntList IntList} \n+     * returned by my underlying \n+     * {@link IntListIterator IntListIterator},\n+     * if any.\n+     */\n     public IntListIterator listIterator() {\n         return ListIteratorIntListIterator.wrap(_list.listIterator());\n     }\n \n+    /**\n+     * {@link ListIteratorIntListIterator#wrap wraps} the \n+     * {@link IntList IntList} \n+     * returned by my underlying \n+     * {@link IntListIterator IntListIterator},\n+     * if any.\n+     */\n     public IntListIterator listIterator(int index) {\n         return ListIteratorIntListIterator.wrap(_list.listIterator(index));\n     }\n         return ListIntList.wrap(_list.subList(fromIndex,toIndex));\n     }\n \n+    /**\n+     * If <i>that</i> is an {@link IntList IntList}, \n+     * it is {@link IntListList#wrap wrapped} and\n+     * compared to my underlying \n+     * {@link List List},\n+     * otherwise this method simply delegates to my parent implementation.\n+     */\n     public boolean equals(Object that) {\n         if(that instanceof IntList) {\n             return _list.equals(IntListList.wrap((IntList)that));\n         }\n     }\n         \n-    public static IntList wrap(List list) {\n-        return null == list ? null : new ListIntList(list);\n-    }\n-\n     private List _list = null;\n \n }\n--- a/src/java/org/apache/commons/collections/primitives/adapters/ListIteratorIntListIterator.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/ListIteratorIntListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ListIteratorIntListIterator.java,v 1.3 2003/01/11 21:28:03 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ListIteratorIntListIterator.java,v 1.4 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n import java.util.ListIterator;\n \n-import org.apache.commons.collections.primitives.*;\n+import org.apache.commons.collections.primitives.IntListIterator;\n \n /**\n- * Adapts a {@link Number}-valued {@link java.util.ListIterator} \n- * to the {@link IntListIterator} interface.\n+ * Adapts a {@link Number}-valued {@link ListIterator ListIterator} \n+ * to the {@link IntListIterator IntListIterator} interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link IntListIterator IntListIterator} \n+ * implementation in the \"obvious\" way.\n  *\n- * @version $Revision: 1.3 $ $Date: 2003/01/11 21:28:03 $\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.4 $ $Date: 2003/01/13 21:52:28 $\n  * @author Rodney Waldhoff \n  */\n public class ListIteratorIntListIterator implements IntListIterator {\n+        \n+    /**\n+     * Create an {@link IntListIterator IntListIterator} wrapping\n+     * the specified {@link ListIterator ListIterator}.  When\n+     * the given <i>iterator</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param iterator the (possibly <code>null</code>) \n+     *        {@link ListIterator ListIterator} to wrap\n+     * @return an {@link IntListIterator IntListIterator} wrapping the given \n+     *         <i>iterator</i>, or <code>null</code> when <i>iterator</i> is\n+     *         <code>null</code>.\n+     */\n+    public static IntListIterator wrap(ListIterator iterator) {\n+        return null == iterator ? null : new ListIteratorIntListIterator(iterator);\n+    }    \n     \n+    /**\n+     * Creates an {@link IntListIterator IntListIterator} wrapping\n+     * the specified {@link ListIterator ListIterator}.\n+     * @see #wrap\n+     */\n     public ListIteratorIntListIterator(ListIterator iterator) {\n         _iterator = iterator;\n     }\n         _iterator.remove();\n     }\n       \n-    public static IntListIterator wrap(ListIterator iterator) {\n-        return null == iterator ? null : new ListIteratorIntListIterator(iterator);\n-    }\n-    \n     private ListIterator _iterator = null;\n \n }\n--- a/src/test/org/apache/commons/collections/primitives/TestArrayUnsignedShortList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestArrayUnsignedShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayUnsignedShortList.java,v 1.5 2003/01/12 15:23:20 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayUnsignedShortList.java,v 1.6 2003/01/13 21:52:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.5 $ $Date: 2003/01/12 15:23:20 $\n+ * @version $Revision: 1.6 $ $Date: 2003/01/13 21:52:28 $\n  * @author Rodney Waldhoff\n  */\n public class TestArrayUnsignedShortList extends TestIntList {\n     public void testZeroInitialCapacityIsValid() {\n         ArrayUnsignedShortList list = new ArrayUnsignedShortList(0);\n     }\n+    \n+    public void testIllegalArgumentExceptionWhenElementOutOfRange() {\n+        ArrayUnsignedShortList list = new ArrayUnsignedShortList();\n+        list.add(ArrayUnsignedShortList.MIN_VALUE);\n+        list.add(ArrayUnsignedShortList.MAX_VALUE);\n+        try {\n+            list.add(-1);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        }\n+        try {\n+            list.add(ArrayUnsignedShortList.MAX_VALUE+1);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n }", "timestamp": 1042494748, "metainfo": ""}