{"sha": "40a3bb822169a9d80cb9bde4bf087a34dd1e5be8", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r643795 | skestle | 2008-04-02 01:49:57 -0700 (Wed, 02 Apr 2008) | 5 lines          Generified EqualPredicate and created individual test class moved from TestPredicateUtils          Added assertFalse() and assertTrue to BasicPredicateTestBase with (Predicate, Object) parameters          Issues: COLLECTIONS-243, COLLECTIONS-253, COLLECTIONS-293     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestTransformerUtils.java\n+++ b/src/test/org/apache/commons/collections/TestTransformerUtils.java\n import junit.textui.TestRunner;\n \n import org.apache.commons.collections.functors.ConstantTransformer;\n+import org.apache.commons.collections.functors.EqualPredicate;\n+import org.apache.commons.collections.functors.FalsePredicate;\n import org.apache.commons.collections.functors.NOPTransformer;\n+import org.apache.commons.collections.functors.TruePredicate;\n \n /**\n  * Tests the org.apache.commons.collections.TransformerUtils class.\n     /**\n      * Main.\n      * @param args\n-     */    \n+     */\n     public static void main(String[] args) {\n         TestRunner.run(suite());\n     }\n         }\n         fail();\n     }\n-    \n+\n     // nullTransformer\n     //------------------------------------------------------------------\n \n     //------------------------------------------------------------------\n \n     public void testMapTransformer() {\n-        Map map = new HashMap();\n-        map.put(null, new Integer(0));\n-        map.put(cObject, new Integer(1));\n-        map.put(cString, new Integer(2));\n+        Map<Object, Integer> map = new HashMap<Object, Integer>();\n+        map.put(null, 0);\n+        map.put(cObject, 1);\n+        map.put(cString, 2);\n         assertEquals(new Integer(0), TransformerUtils.mapTransformer(map).transform(null));\n         assertEquals(new Integer(1), TransformerUtils.mapTransformer(map).transform(cObject));\n         assertEquals(new Integer(2), TransformerUtils.mapTransformer(map).transform(cString));\n         assertEquals(cString, TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cString));\n         assertEquals(cInteger, TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cInteger));\n         try {\n-            TransformerUtils.asTransformer((Closure) null);\n+            TransformerUtils.asTransformer((Closure<Object>) null);\n         } catch (IllegalArgumentException ex) {\n             return;\n         }\n     //------------------------------------------------------------------\n \n     public void testPredicateTransformer() {\n-        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(PredicateUtils.truePredicate()).transform(null));\n-        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(PredicateUtils.truePredicate()).transform(cObject));\n-        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(PredicateUtils.truePredicate()).transform(cString));\n-        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(PredicateUtils.truePredicate()).transform(cInteger));\n-        try {\n-            TransformerUtils.asTransformer((Predicate) null);\n+        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(null));\n+        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(cObject));\n+        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(cString));\n+        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(cInteger));\n+        try {\n+            TransformerUtils.asTransformer((Predicate<Object>) null);\n         } catch (IllegalArgumentException ex) {\n             return;\n         }\n         assertEquals(null, TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cString));\n         assertEquals(null, TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cInteger));\n         try {\n-            TransformerUtils.asTransformer((Factory) null);\n+            TransformerUtils.asTransformer((Factory<Object>) null);\n         } catch (IllegalArgumentException ex) {\n             return;\n         }\n     // chainedTransformer\n     //------------------------------------------------------------------\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testChainedTransformer() {\n-        Transformer a = TransformerUtils.constantTransformer(\"A\");\n-        Transformer b = TransformerUtils.constantTransformer(\"B\");\n-        \n+        Transformer<Object, Object> a = TransformerUtils.<Object, Object>constantTransformer(\"A\");\n+        Transformer<Object, Object> b = TransformerUtils.constantTransformer((Object) \"B\");\n+\n         assertEquals(\"A\", TransformerUtils.chainedTransformer(b, a).transform(null));\n         assertEquals(\"B\", TransformerUtils.chainedTransformer(a, b).transform(null));\n-        assertEquals(\"A\", TransformerUtils.chainedTransformer(new Transformer[] {b, a}).transform(null));\n-        Collection coll = new ArrayList();\n+        assertEquals(\"A\", TransformerUtils.chainedTransformer(new Transformer[] { b, a }).transform(null));\n+        Collection<Transformer<Object, Object>> coll = new ArrayList<Transformer<Object, Object>>();\n         coll.add(b);\n         coll.add(a);\n         assertEquals(\"A\", TransformerUtils.chainedTransformer(coll).transform(null));\n \n         assertSame(NOPTransformer.INSTANCE, TransformerUtils.chainedTransformer(new Transformer[0]));\n-        assertSame(NOPTransformer.INSTANCE, TransformerUtils.chainedTransformer(Collections.EMPTY_LIST));\n-        \n+        assertSame(NOPTransformer.INSTANCE, TransformerUtils.chainedTransformer(Collections.<Transformer<Object, Object>>emptyList()));\n+\n         try {\n             TransformerUtils.chainedTransformer(null, null);\n             fail();\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            TransformerUtils.chainedTransformer((Collection) null);\n+            TransformerUtils.chainedTransformer((Collection<Transformer<Object, Object>>) null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            coll = new ArrayList();\n+            coll = new ArrayList<Transformer<Object, Object>>();\n             coll.add(null);\n             coll.add(null);\n             TransformerUtils.chainedTransformer(coll);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n-    \n+\n     // switchTransformer\n     //------------------------------------------------------------------\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testSwitchTransformer() {\n-        Transformer a = TransformerUtils.constantTransformer(\"A\");\n-        Transformer b = TransformerUtils.constantTransformer(\"B\");\n-        Transformer c = TransformerUtils.constantTransformer(\"C\");\n-        \n-        assertEquals(\"A\", TransformerUtils.switchTransformer(PredicateUtils.truePredicate(), a, b).transform(null));\n-        assertEquals(\"B\", TransformerUtils.switchTransformer(PredicateUtils.falsePredicate(), a, b).transform(null));\n-        \n-        assertEquals(null, TransformerUtils.switchTransformer(\n-            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n-            new Transformer[] {a, b}).transform(\"WELL\"));\n+        Transformer<String, String> a = TransformerUtils.constantTransformer(\"A\");\n+        Transformer<String, String> b = TransformerUtils.constantTransformer(\"B\");\n+        Transformer<String, String> c = TransformerUtils.constantTransformer(\"C\");\n+\n+        assertEquals(\"A\", TransformerUtils.switchTransformer(TruePredicate.truePredicate(), a, b).transform(null));\n+        assertEquals(\"B\", TransformerUtils.switchTransformer(FalsePredicate.falsePredicate(), a, b).transform(null));\n+\n+        assertEquals(null, TransformerUtils.<Object, String>switchTransformer(\n+            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n+            new Transformer[] { a, b }).transform(\"WELL\"));\n         assertEquals(\"A\", TransformerUtils.switchTransformer(\n-            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n-            new Transformer[] {a, b}).transform(\"HELLO\"));\n+            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n+            new Transformer[] { a, b }).transform(\"HELLO\"));\n         assertEquals(\"B\", TransformerUtils.switchTransformer(\n-            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n-            new Transformer[] {a, b}).transform(\"THERE\"));\n-            \n+            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n+            new Transformer[] { a, b }).transform(\"THERE\"));\n+\n         assertEquals(\"C\", TransformerUtils.switchTransformer(\n-            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n-            new Transformer[] {a, b}, c).transform(\"WELL\"));\n-            \n-        Map map = new HashMap();\n-        map.put(PredicateUtils.equalPredicate(\"HELLO\"), a);\n-        map.put(PredicateUtils.equalPredicate(\"THERE\"), b);\n+            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n+            new Transformer[] { a, b }, c).transform(\"WELL\"));\n+\n+        Map<Predicate<String>, Transformer<String, String>> map = new HashMap<Predicate<String>, Transformer<String,String>>();\n+        map.put(EqualPredicate.equalPredicate(\"HELLO\"), a);\n+        map.put(EqualPredicate.equalPredicate(\"THERE\"), b);\n         assertEquals(null, TransformerUtils.switchTransformer(map).transform(\"WELL\"));\n         assertEquals(\"A\", TransformerUtils.switchTransformer(map).transform(\"HELLO\"));\n         assertEquals(\"B\", TransformerUtils.switchTransformer(map).transform(\"THERE\"));\n         map.put(null, c);\n         assertEquals(\"C\", TransformerUtils.switchTransformer(map).transform(\"WELL\"));\n \n-        assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchTransformer(new Predicate[0], new Transformer[0]));\n-        assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchTransformer(new HashMap()));\n-        map = new HashMap();\n+        assertEquals(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchTransformer(new Predicate[0], new Transformer[0]));\n+        assertEquals(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchTransformer(new HashMap<Predicate<Object>, Transformer<Object, Object>>()));\n+        map = new HashMap<Predicate<String>, Transformer<String, String>>();\n         map.put(null, null);\n-        assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchTransformer(map));\n-            \n+        assertEquals(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchTransformer(map));\n+\n         try {\n             TransformerUtils.switchTransformer(null, null);\n             fail();\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            TransformerUtils.switchTransformer((Map) null);\n+            TransformerUtils.switchTransformer((Map<Predicate<Object>, Transformer<Object, Object>>) null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n         } catch (IllegalArgumentException ex) {}\n         try {\n             TransformerUtils.switchTransformer(\n-                    new Predicate[] {PredicateUtils.truePredicate()},\n-                    new Transformer[] {a,b});\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-    \n+                    new Predicate[] { TruePredicate.truePredicate() },\n+                    new Transformer[] { a, b });\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n     // switchMapTransformer\n     //------------------------------------------------------------------\n \n     public void testSwitchMapTransformer() {\n-        Transformer a = TransformerUtils.constantTransformer(\"A\");\n-        Transformer b = TransformerUtils.constantTransformer(\"B\");\n-        Transformer c = TransformerUtils.constantTransformer(\"C\");\n-        \n-        Map map = new HashMap();\n+        Transformer<String, String> a = TransformerUtils.constantTransformer(\"A\");\n+        Transformer<String, String> b = TransformerUtils.constantTransformer(\"B\");\n+        Transformer<String, String> c = TransformerUtils.constantTransformer(\"C\");\n+\n+        Map<String, Transformer<String, String>> map = new HashMap<String, Transformer<String,String>>();\n         map.put(\"HELLO\", a);\n         map.put(\"THERE\", b);\n         assertEquals(null, TransformerUtils.switchMapTransformer(map).transform(\"WELL\"));\n         map.put(null, c);\n         assertEquals(\"C\", TransformerUtils.switchMapTransformer(map).transform(\"WELL\"));\n \n-        assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchMapTransformer(new HashMap()));\n-        map = new HashMap();\n+        assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchMapTransformer(new HashMap<Object, Transformer<Object, Object>>()));\n+        map = new HashMap<String, Transformer<String, String>>();\n         map.put(null, null);\n         assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchMapTransformer(map));\n-        \n+\n         try {\n             TransformerUtils.switchMapTransformer(null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n-    \n+\n     // invokerTransformer\n     //------------------------------------------------------------------\n \n     public void testInvokerTransformer() {\n-        List list = new ArrayList();\n+        List<Object> list = new ArrayList<Object>();\n         assertEquals(new Integer(0), TransformerUtils.invokerTransformer(\"size\").transform(list));\n         list.add(new Object());\n         assertEquals(new Integer(1), TransformerUtils.invokerTransformer(\"size\").transform(list));\n             fail();\n         } catch (FunctorException ex) {}\n     }\n-    \n+\n     // invokerTransformer2\n     //------------------------------------------------------------------\n \n     public void testInvokerTransformer2() {\n-        List list = new ArrayList();\n-        assertEquals(Boolean.FALSE, TransformerUtils.invokerTransformer(\n-            \"contains\", new Class[] {Object.class}, new Object[] {cString}).transform(list));\n+        List<Object> list = new ArrayList<Object>();\n+        assertEquals(Boolean.FALSE, TransformerUtils.invokerTransformer(\"contains\",\n+                new Class[] { Object.class }, new Object[] { cString }).transform(list));\n         list.add(cString);\n-        assertEquals(Boolean.TRUE, TransformerUtils.invokerTransformer(\n-            \"contains\", new Class[] {Object.class}, new Object[] {cString}).transform(list));\n-        assertEquals(null, TransformerUtils.invokerTransformer(\n-            \"contains\", new Class[] {Object.class}, new Object[] {cString}).transform(null));\n+        assertEquals(Boolean.TRUE, TransformerUtils.invokerTransformer(\"contains\",\n+                new Class[] { Object.class }, new Object[] { cString }).transform(list));\n+        assertEquals(null, TransformerUtils.invokerTransformer(\"contains\",\n+                new Class[] { Object.class }, new Object[] { cString }).transform(null));\n \n         try {\n             TransformerUtils.invokerTransformer(null, null, null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            TransformerUtils.invokerTransformer(\n-                \"noSuchMethod\", new Class[] {Object.class}, new Object[] {cString}).transform(new Object());\n+            TransformerUtils.invokerTransformer(\"noSuchMethod\", new Class[] { Object.class },\n+                    new Object[] { cString }).transform(new Object());\n             fail();\n         } catch (FunctorException ex) {}\n         try {\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            TransformerUtils.invokerTransformer(\"badArgs\", new Class[] {Object.class}, null);\n+            TransformerUtils.invokerTransformer(\"badArgs\", new Class[] { Object.class }, null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n-    \n+\n     // stringValueTransformer\n     //------------------------------------------------------------------\n-    \n+\n     public void testStringValueTransformer() {\n         assertNotNull( \"StringValueTransformer should NEVER return a null value.\",\n            TransformerUtils.stringValueTransformer().transform(null));\n         assertEquals( \"StringValueTransformer should return toString value\", \"6\",\n             TransformerUtils.stringValueTransformer().transform(new Integer(6)));\n     }\n-    \n+\n     // instantiateFactory\n     //------------------------------------------------------------------\n-    \n+\n     public void testInstantiateTransformerNull() {\n         try {\n-            Transformer trans = TransformerUtils.instantiateTransformer(null, new Object[] {\"str\"});\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            Transformer trans = TransformerUtils.instantiateTransformer(new Class[] {}, new Object[] {\"str\"});\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        \n-        Transformer trans = TransformerUtils.instantiateTransformer(new Class[] {Long.class}, new Object[] {null});\n+            TransformerUtils.instantiateTransformer(null, new Object[] { \"str\" });\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            TransformerUtils.instantiateTransformer(new Class[] {}, new Object[] { \"str\" });\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        Transformer<Class<?>, Object> trans = TransformerUtils.instantiateTransformer(new Class[] { Long.class }, new Object[] { null });\n         try {\n             trans.transform(String.class);\n             fail();\n         } catch (FunctorException ex) {}\n-        \n+\n         trans = TransformerUtils.instantiateTransformer();\n         assertEquals(\"\", trans.transform(String.class));\n-        \n-        trans = TransformerUtils.instantiateTransformer(new Class[] {Long.TYPE}, new Object[] {new Long(1000L)});\n+\n+        trans = TransformerUtils.instantiateTransformer(new Class[] { Long.TYPE }, new Object[] { new Long(1000L) });\n         assertEquals(new Date(1000L), trans.transform(Date.class));\n     }\n ", "timestamp": 1252994295, "metainfo": ""}