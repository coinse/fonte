{"sha": "7e42e5fed7a0d31ba8b10b3bd749e53bba800f8f", "log": "Avoid infinite loop in test framework Simplify error messges   ", "commit": "\n--- a/src/test/org/apache/commons/collections/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.11 2003/11/02 15:27:05 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.12 2003/11/04 23:35:35 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @version $Revision: 1.11 $ $Date: 2003/11/02 15:27:05 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/04 23:35:35 $\n  */\n public abstract class AbstractTestMap extends AbstractTestObject {\n \n         Collection values = map.values();\n         for (int i = 0; i < sampleValues.length; i++) {\n             if (map.containsValue(sampleValues[i])) {\n-                while (values.contains(sampleValues[i])) {\n+                int j = 0;  // loop counter prevents infinite loops when remove is broken\n+                while (values.contains(sampleValues[i]) && j < 10000) {\n                     try {\n                         values.remove(sampleValues[i]);\n                     } catch (UnsupportedOperationException e) {\n                         // if values.remove is unsupported, just skip this test\n                         return;\n                     }\n+                    j++;\n                 }\n+                assertTrue(\"values().remove(obj) is broken\", j < 10000);\n                 assertTrue(\n                     \"Value should have been removed from the underlying map.\",\n                     !map.containsValue(sampleValues[i]));\n         assertEquals(\"entrySet hashCodes should be the same\" +\n                      \"\\nTest: \" + entrySet + \"\\nReal: \" + confirmed.entrySet(),\n                      confirmed.entrySet().hashCode(), entrySet.hashCode());\n-        assertEquals(\"Map's entry set should still equal HashMap's\" +\n-                     \"\\nTest: \" + entrySet + \"\\nReal: \" + confirmed.entrySet(),\n+        assertEquals(\"Map's entry set should still equal HashMap's\",\n                      confirmed.entrySet(), entrySet);\n     }\n \n         assertEquals(\"keySet hashCodes should be the same\" +\n                      \"\\nTest: \" + keySet + \"\\nReal: \" + confirmed.keySet(),\n                      confirmed.keySet().hashCode(), keySet.hashCode());\n-        assertEquals(\"Map's key set should still equal HashMap's\" +\n-                     \"\\nTest: \" + keySet + \"\\nReal: \" + confirmed.keySet(),\n+        assertEquals(\"Map's key set should still equal HashMap's\",\n                      confirmed.keySet(), keySet);\n     }\n ", "timestamp": 1067988935, "metainfo": ""}