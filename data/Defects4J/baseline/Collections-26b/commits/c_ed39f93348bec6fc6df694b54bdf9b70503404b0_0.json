{"sha": "ed39f93348bec6fc6df694b54bdf9b70503404b0", "log": "Add more tests, add emptyIterable() method.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/FluentIterable.java\n+++ b/src/main/java/org/apache/commons/collections4/FluentIterable.java\n      * corresponding input iterator supports it.\n      *\n      * @param <T>  the element type\n-     * @param iterable  the iterable to wrap into a FluentIterable\n+     * @param iterable  the iterable to wrap into a FluentIterable, may be null\n      * @return a new FluentIterable wrapping the provided iterable\n      */\n     public static <T> FluentIterable<T> of(final Iterable<T> iterable) {\n         if (iterable == null) {\n-            throw new NullPointerException(\"Iterable must not be null\");\n-        }\n-        if (iterable instanceof FluentIterable<?>) {\n+            @SuppressWarnings(\"unchecked\")\n+            final FluentIterable<T> empty = IterableUtils.EMPTY_ITERABLE;\n+            return empty;\n+        } else if (iterable instanceof FluentIterable<?>) {\n             return (FluentIterable<T>) iterable;\n         } else {\n             return new FluentIterable<T>(iterable);\n--- a/src/main/java/org/apache/commons/collections4/IterableUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IterableUtils.java\n  */\n public class IterableUtils {\n \n+    /**\n+     * An empty iterable.\n+     */\n+    @SuppressWarnings(\"rawtypes\")\n+    static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n+        @Override\n+        public Iterator<Object> iterator() {\n+            return IteratorUtils.emptyIterator();\n+        }\n+    };\n+\n+    // Empty\n+    // ----------------------------------------------------------------------\n+\n+    /**\n+     * Gets an empty iterable.\n+     * <p>\n+     * This iterable does not contain any elements.\n+     *\n+     * @param <E>  the element type\n+     * @return an empty iterable\n+     */\n+    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n+    public static <E> Iterable<E> emptyIterable() {\n+        return EMPTY_ITERABLE;\n+    }\n+\n     // Chained\n     // ----------------------------------------------------------------------\n \n--- a/src/test/java/org/apache/commons/collections4/FluentIterableTest.java\n+++ b/src/test/java/org/apache/commons/collections4/FluentIterableTest.java\n \n     // -----------------------------------------------------------------------\n     @Test\n+    public void factoryMethodOf() {\n+        List<Integer> result = FluentIterable.of(1, 2, 3, 4, 5).toList();\n+        assertEquals(Arrays.asList(1, 2, 3, 4, 5), result);\n+\n+        result = FluentIterable.of(new Integer[0]).toList();\n+        assertTrue(result.isEmpty());\n+\n+        final Iterable<Integer> it = null;\n+        result = FluentIterable.of(it).toList();\n+        assertTrue(result.isEmpty());\n+    }\n+\n+    @Test\n     public void appendElements() {\n         FluentIterable<Integer> it = FluentIterable.of(iterableA).append(10, 20, 30);\n         assertEquals(IterableUtils.size(iterableA) + 3, IterableUtils.size(it));\n     }\n \n     @Test\n+    public void zip() {\n+        List<Integer> result = FluentIterable.of(iterableOdd).zip(iterableEven).toList();\n+        List<Integer> combinedList = new ArrayList<Integer>();\n+        CollectionUtils.addAll(combinedList, iterableOdd);\n+        CollectionUtils.addAll(combinedList, iterableEven);\n+        Collections.sort(combinedList);\n+        assertEquals(combinedList, result);\n+\n+        result = FluentIterable.of(iterableOdd).zip((Iterable<Integer>) null).toList();\n+        List<Integer> expected = IterableUtils.toList(iterableOdd);\n+        assertEquals(expected, result);\n+        \n+        result = FluentIterable.of(Arrays.asList(1, 4, 7)).zip(Arrays.asList(2, 5, 8), Arrays.asList(3, 6, 9)).toList();\n+        combinedList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n+        assertEquals(combinedList, result);\n+    }\n+\n+    @Test\n     public void allMatch() {\n         assertTrue(FluentIterable.of(iterableEven).allMatch(EVEN));\n         assertFalse(FluentIterable.of(iterableOdd).allMatch(EVEN));\n     public void isEmpty() {\n         assertTrue(FluentIterable.of(emptyIterable).isEmpty());\n         assertFalse(FluentIterable.of(iterableOdd).isEmpty());\n+    }\n+\n+    @Test\n+    public void size() {\n+        assertEquals(0, FluentIterable.of((Iterable<?>) null).size());\n+        assertEquals(0, FluentIterable.of(emptyIterable).size());\n+        assertEquals(IterableUtils.toList(iterableOdd).size(), FluentIterable.of(iterableOdd).size());\n     }\n \n     @Test", "timestamp": 1433513207, "metainfo": ""}