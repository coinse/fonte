{"sha": "3f66e516a7f5833be9c87911952465220acef149", "log": "minor javadoc fixes   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BinaryHeap.java\n+++ b/src/java/org/apache/commons/collections/BinaryHeap.java\n-/* \n- * Copyright (C) The Apache Software Foundation. All rights reserved. \n- * \n- * This software is published under the terms of the Apache Software License \n- * version 1.1, a copy of which has been included with this distribution in \n- * the LICENSE file. \n- */ \n+/*\n+ * Copyright (C) The Apache Software Foundation. All rights reserved.\n+ *\n+ * This software is published under the terms of the Apache Software License\n+ * version 1.1, a copy of which has been included with this distribution in\n+ * the LICENSE file.\n+ */\n package org.apache.commons.collections;\n \n import java.util.NoSuchElementException;\n \n /**\n- * Iterface for priority queues.\n- * This interface does not dictate whether it is min or max heap.\n+ * Binary heap implementation of {@link PriorityQueue}.\n  *\n- * @author  <a href=\"mailto:donaldp@apache.org\">Peter Donald</a> \n- * @author  <a href=\"mailto:ram.chidambaram@telus.com\">Ram Chidambaram</a> \n+ * @author  <a href=\"mailto:donaldp@apache.org\">Peter Donald</a>\n+ * @author  <a href=\"mailto:ram.chidambaram@telus.com\">Ram Chidambaram</a>\n  */\n-public final class BinaryHeap \n+public final class BinaryHeap\n     implements PriorityQueue\n {\n     protected final static int      DEFAULT_CAPACITY   = 13;\n         final Comparable result = peek();\n         m_elements[ 1 ] = m_elements[ m_size-- ];\n \n-        //set the unused element to 'null' so that the garbage collector \n+        //set the unused element to 'null' so that the garbage collector\n         //can free the object if not used anywhere else.(remove reference)\n         m_elements[ m_size + 1 ] = null;\n \n     }\n \n     /**\n-     * Percolate element down heap from top. \n+     * Percolate element down heap from top.\n      * Assume it is a maximum heap.\n      *\n      * @param element the element\n \n             //if we have a right child and that child can not be percolated\n             //up then move onto other child\n-            if( child != m_size && \n+            if( child != m_size &&\n                 m_elements[ child + 1 ].compareTo( m_elements[ child ] ) < 0 )\n             {\n                 child++;\n             m_elements[ hole ] = m_elements[ child ];\n             hole = child;\n         }\n-        \n-        m_elements[ hole ] = element;\n-    }\n-\n-    /**\n-     * Percolate element down heap from top. \n+\n+        m_elements[ hole ] = element;\n+    }\n+\n+    /**\n+     * Percolate element down heap from top.\n      * Assume it is a maximum heap.\n      *\n      * @param element the element\n \n             //if we have a right child and that child can not be percolated\n             //up then move onto other child\n-            if( child != m_size && \n+            if( child != m_size &&\n                 m_elements[ child + 1 ].compareTo( m_elements[ child ] ) > 0 )\n             {\n                 child++;\n             m_elements[ hole ] = m_elements[ child ];\n             hole = child;\n         }\n-        \n-        m_elements[ hole ] = element;\n-    }\n-\n-    /**\n-     * Percolate element up heap from bottom. \n+\n+        m_elements[ hole ] = element;\n+    }\n+\n+    /**\n+     * Percolate element up heap from bottom.\n      * Assume it is a maximum heap.\n      *\n      * @param element the element\n     protected void percolateUpMinHeap( final Comparable element )\n     {\n         int hole = ++m_size;\n-        \n+\n         m_elements[ hole ] = element;\n \n         while( hole > 1 &&\n     }\n \n     /**\n-     * Percolate element up heap from bottom. \n+     * Percolate element up heap from bottom.\n      * Assume it is a maximum heap.\n      *\n      * @param element the element\n \n     protected void grow()\n     {\n-        final Comparable[] elements = \n-            new Comparable[ m_elements.length * 2 ]; \n+        final Comparable[] elements =\n+            new Comparable[ m_elements.length * 2 ];\n         System.arraycopy( m_elements, 0, elements, 0, m_elements.length );\n         m_elements = elements;\n     }\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.1 2001/04/24 18:48:36 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/04/24 18:48:36 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.2 2001/05/04 16:32:17 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/05/04 16:32:17 $\n  *\n  * ====================================================================\n  *\n  *\n  * @author Rodney Waldhoff\n  *\n- * @version $Id: CollectionUtils.java,v 1.1 2001/04/24 18:48:36 rwaldhoff Exp $\n+ * @version $Id: CollectionUtils.java,v 1.2 2001/05/04 16:32:17 rwaldhoff Exp $\n  */\n public class CollectionUtils {\n     /**\n \n     /**\n      * Returns a {@link Collection} containing the exclusive disjunction\n-     * (symmetric difference) of the given {@link Collection}.\n+     * (symmetric difference) of the given {@link Collection}s.\n      * <p>\n      * The cardinality of each element <i>e</i> in the returned {@link Collection}\n      * will be equal to\n-     * <tt>Math.max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - Math.min(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>))</tt>.\n+     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>))</tt>.\n      * <p>\n      * This is equivalent to\n      * <tt>{@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})</tt>\n--- a/src/java/org/apache/commons/collections/PriorityQueue.java\n+++ b/src/java/org/apache/commons/collections/PriorityQueue.java\n-/* \n- * Copyright (C) The Apache Software Foundation. All rights reserved. \n- * \n- * This software is published under the terms of the Apache Software License \n- * version 1.1, a copy of which has been included with this distribution in \n- * the LICENSE file. \n- */ \n+/*\n+ * Copyright (C) The Apache Software Foundation. All rights reserved.\n+ *\n+ * This software is published under the terms of the Apache Software License\n+ * version 1.1, a copy of which has been included with this distribution in\n+ * the LICENSE file.\n+ */\n package org.apache.commons.collections;\n \n import java.util.NoSuchElementException;\n \n /**\n- * Iterface for priority queues.\n+ * Interface for priority queues.\n  * This interface does not dictate whether it is min or max heap.\n  *\n- * @author  <a href=\"mailto:donaldp@apache.org\">Peter Donald</a> \n+ * @author  <a href=\"mailto:donaldp@apache.org\">Peter Donald</a>\n  */\n public interface PriorityQueue\n {", "timestamp": 988993937, "metainfo": ""}