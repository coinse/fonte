{"sha": "05b6c75bd3c51ec7092fdc453434f2f80dfb035f", "log": "Fix javadoc, from Gary Gregory   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BeanMap.java\n+++ b/src/java/org/apache/commons/collections/BeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.25 2003/12/05 20:23:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.26 2004/01/05 21:37:13 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * property is considered non existent in the Map\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.25 $ $Date: 2003/12/05 20:23:57 $\n+ * @version $Revision: 1.26 $ $Date: 2004/01/05 21:37:13 $\n  * \n  * @author James Strachan\n  * @author Stephen Colebourne\n             }\n             public Object next() {\n                 Object key = iter.next();\n-                return get( (String) key );\n+                return get(key);\n             }\n             public void remove() {\n                 throw new UnsupportedOperationException( \"remove() not supported for BeanMap\" );\n      *  to that type\n      * @throws InstantiationException  if the constructor found with \n      *  reflection raises it\n-     * @throws InvocationTargetExcetpion  if the constructor found with\n+     * @throws InvocationTargetException  if the constructor found with\n      *  reflection raises it\n      * @throws IllegalAccessException  never\n      * @throws IllegalArgumentException  never\n--- a/src/java/org/apache/commons/collections/EnumerationUtils.java\n+++ b/src/java/org/apache/commons/collections/EnumerationUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/EnumerationUtils.java,v 1.2 2004/01/05 21:23:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/EnumerationUtils.java,v 1.3 2004/01/05 21:37:13 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2004 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * Provides utility methods for {@link Enumeration} instances.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: EnumerationUtils.java,v 1.2 2004/01/05 21:23:44 scolebourne Exp $\n+ * @version $Id: EnumerationUtils.java,v 1.3 2004/01/05 21:37:13 scolebourne Exp $\n  * \n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  */\n      * created. The new list is returned.</p>\n      *\n      * @param enumeration  the enumeration to traverse, which should not be <code>null</code>.\n-     * @throws <code>NullPointerException</code> if the enumeration parameter is <code>null</code>.\n+     * @throws NullPointerException if the enumeration parameter is <code>null</code>.\n      */\n     public static List toList(Enumeration enumeration) {\n         return IteratorUtils.toList(new EnumerationIterator(enumeration));\n--- a/src/java/org/apache/commons/collections/MapIterator.java\n+++ b/src/java/org/apache/commons/collections/MapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapIterator.java,v 1.4 2003/12/02 23:51:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapIterator.java,v 1.5 2004/01/05 21:37:13 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * </pre>\n  *  \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/12/02 23:51:49 $\n+ * @version $Revision: 1.5 $ $Date: 2004/01/05 21:37:13 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Gets the next <em>key</em> from the <code>Map</code>.\n      *\n      * @return the next key in the iteration\n-     * @throws NoSuchElementException if the iteration is finished\n+     * @throws java.util.NoSuchElementException if the iteration is finished\n      */\n     Object next();\n \n--- a/src/java/org/apache/commons/collections/OrderedIterator.java\n+++ b/src/java/org/apache/commons/collections/OrderedIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/OrderedIterator.java,v 1.1 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/OrderedIterator.java,v 1.2 2004/01/05 21:37:13 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2003-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * This iterator allows both forward and reverse iteration through the collection.\n  *  \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/05 21:37:13 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Gets the previous element from the collection.\n      *\n      * @return the previous key in the iteration\n-     * @throws NoSuchElementException if the iteration is finished\n+     * @throws java.util.NoSuchElementException if the iteration is finished\n      */\n     Object previous();\n \n--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractHashedMap.java,v 1.6 2004/01/03 05:15:00 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractHashedMap.java,v 1.7 2004/01/05 21:32:10 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * need for unusual subclasses is here.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/01/03 05:15:00 $\n+ * @version $Revision: 1.7 $ $Date: 2004/01/05 21:32:10 $\n  *\n  * @author java util HashMap\n  * @author Stephen Colebourne\n      * \n      * @param entry  the entry to update\n      * @param newValue  the new value to store\n-     * @return value  the previous value\n      */\n     protected void updateEntry(HashEntry entry, Object newValue) {\n         entry.setValue(newValue);\n      * @param hashCode  the hash code of the key to add\n      * @param key  the key to add\n      * @param value  the value to add\n-     * @return the value previously mapped to this key, null if none\n      */\n     protected void addMapping(int hashIndex, int hashCode, Object key, Object value) {\n         modCount++;\n--- a/src/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/java/org/apache/commons/collections/map/LRUMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/LRUMap.java,v 1.5 2004/01/02 01:36:52 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/LRUMap.java,v 1.6 2004/01/05 21:32:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>ResettableIterator</code> and calling <code>reset()</code>.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/01/02 01:36:52 $\n+ * @version $Revision: 1.6 $ $Date: 2004/01/05 21:32:47 $\n  *\n  * @author James Strachan\n  * @author Morgan Delagrange\n      * \n      * @param entry  the entry to update\n      * @param newValue  the new value to store\n-     * @return value  the previous value\n      */\n     protected void updateEntry(HashEntry entry, Object newValue) {\n         moveToMRU((LinkEntry) entry);  // handles modCount\n      * @param hashCode  the hash code of the key to add\n      * @param key  the key to add\n      * @param value  the value to add\n-     * @return the value previously mapped to this key, null if none\n      */\n     protected void addMapping(int hashIndex, int hashCode, Object key, Object value) {\n         if (size >= maxSize && removeLRU(header.before)) {\n      * @param hashCode  the hash code of the key to add\n      * @param key  the key to add\n      * @param value  the value to add\n-     * @return the value previously mapped to this key, null if none\n      */\n     protected void reuseMapping(LinkEntry entry, int hashIndex, int hashCode, Object key, Object value) {\n         // find the entry before the entry specified in the hash table", "timestamp": 1073338633, "metainfo": ""}