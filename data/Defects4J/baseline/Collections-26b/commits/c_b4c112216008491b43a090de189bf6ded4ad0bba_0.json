{"sha": "b4c112216008491b43a090de189bf6ded4ad0bba", "log": "Fix debugPrint(Map)  methods to handle more than just String keys bug 20740, from Max Rydahl Anderson   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.25 2003/06/20 07:50:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.26 2003/08/20 21:03:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.25 $ $Date: 2003/06/20 07:50:21 $\n+ * @version $Revision: 1.26 $ $Date: 2003/08/20 21:03:16 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n  * @author Matthew Hawthorne\n  * @author Arun Mammen Thomas\n  * @author Janek Bogucki\n+ * @author Max Rydahl Andersen\n  */\n public class MapUtils {\n     \n      *  Prints the given map with nice line breaks.\n      *\n      *  @param out  the stream to print to\n-     *  @param key  the key that maps to the map in some other map\n+     *  @param label  the label to be applied to the output generated.  This \n+     *                 may well be the key associated with this map within a \n+     *                 surrounding map in which this is nested.   \n      *  @param map  the map to print\n      */\n-    public static synchronized void verbosePrint( PrintStream out, Object key, Map map ) {\n-        debugPrintIndent( out );\n-        out.println( key + \" = \" );\n-\n-        debugPrintIndent( out );\n-        out.println( \"{\" );\n-        ++debugIndent;\n-\n-        for ( Iterator iter = map.entrySet().iterator(); iter.hasNext(); ) {\n-            Map.Entry entry = (Map.Entry) iter.next();\n-            String childKey = (String) entry.getKey();\n-            Object childValue = entry.getValue();\n-            if ( childValue instanceof Map ) {\n-                verbosePrint( out, childKey, (Map) childValue );\n-            }\n-            else {\n-                debugPrintIndent( out );\n-                out.println( childKey + \" = \" + childValue);\n-            }\n-        }\n-        --debugIndent;\n-        debugPrintIndent( out );\n-        out.println( \"}\" );\n+    public static synchronized void verbosePrint(\n+        final PrintStream out,\n+        final Object label,\n+        final Map map) {\n+\n+        verbosePrintInternal(out, label, map, false);\n     }\n \n     /**\n      *  Prints the given map with nice line breaks.\n      *\n      *  @param out  the stream to print to\n-     *  @param key  the key that maps to the map in some other map\n+     *  @param label  the label to be applied to the output generated.  This \n+     *                 may well be the key associated with this map within a \n+     *                 surrounding map in which this is nested.   \n      *  @param map  the map to print\n      */\n-    public static synchronized void debugPrint( PrintStream out, Object key, Map map ) {\n-        debugPrintIndent( out );\n-        out.println( key + \" = \" );\n-\n-        debugPrintIndent( out );\n-        out.println( \"{\" );\n-        ++debugIndent;\n-\n-        for ( Iterator iter = map.entrySet().iterator(); iter.hasNext(); ) {\n-            Map.Entry entry = (Map.Entry) iter.next();\n-            String childKey = (String) entry.getKey();\n-            Object childValue = entry.getValue();\n-            if ( childValue instanceof Map ) {\n-                verbosePrint( out, childKey, (Map) childValue );\n-            }\n-            else {\n-                debugPrintIndent( out );\n-\n-                String typeName = ( childValue != null )\n-                    ? childValue.getClass().getName()\n-                    : null;\n-\n-                out.println( childKey + \" = \" + childValue + \" class: \" + typeName );\n-            }\n-        }\n-        --debugIndent;\n-        debugPrintIndent( out );\n-        out.println( \"}\" );\n+    public static synchronized void debugPrint(\n+        final PrintStream out,\n+        final Object label,\n+        final Map map) {\n+\n+        verbosePrintInternal(out, label, map, true);\n     }\n \n     // Implementation methods\n      */\n     protected static void logInfo(Exception ex) {\n         System.out.println(\"INFO: Exception: \" + ex);\n+    }\n+\n+    /**\n+     * Implementation providing functionality for {@link #debugPrint} and for \n+     * {@link #verbosePrint}.  This prints the given map with nice line breaks.\n+     * If the debug flag is true, it additionally prints the type of the object \n+     * value.  .\n+     *\n+     * @param out  the stream to print to\n+     * @param label  the label to be applied to the output generated.  This \n+     *                may well be the key associated with this map within a \n+     *                surrounding map in which this is nested.   \n+     * @param map  the map to print\n+     * @param debug flag indicating whether type names should be output.\n+     */\n+    private static void verbosePrintInternal(\n+        final PrintStream out,\n+        final Object label,\n+        final Map map,\n+        final boolean debug) {\n+\n+        debugPrintIndent(out);\n+        out.println(label + \" = \");\n+\n+        debugPrintIndent(out);\n+        out.println(\"{\");\n+        ++debugIndent;\n+\n+        for (Iterator iter = map.entrySet().iterator(); iter.hasNext();) {\n+            Map.Entry entry = (Map.Entry) iter.next();\n+            Object childKey = entry.getKey();\n+            Object childValue = entry.getValue();\n+            if (childValue instanceof Map) {\n+                verbosePrintInternal(out, childKey, (Map) childValue, false);\n+            } else {\n+                debugPrintIndent(out);\n+\n+                if (debug) {\n+                    String typeName =\n+                        (childValue != null)\n+                            ? childValue.getClass().getName()\n+                            : null;\n+\n+                    out.println(\n+                        childKey + \" = \" + childValue + \" class: \" + typeName);\n+                } else {\n+                    out.println(childKey + \" = \" + childValue);\n+                }\n+            }\n+        }\n+        --debugIndent;\n+        debugPrintIndent(out);\n+        out.println(\"}\");\n     }\n \n     // Misc\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.5 2003/04/26 14:27:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.6 2003/08/20 21:03:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n \n import junit.framework.Test;\n \n-\n /**\n  * Tests for MapUtils.\n  * \n- * @version $Revision: 1.5 $ $Date: 2003/04/26 14:27:46 $\n+ * @version $Revision: 1.6 $ $Date: 2003/08/20 21:03:16 $\n  * \n  * @author Stephen Colebourne\n  * @author Arun Mammen Thomas\n+ * @author Max Rydahl Andersen\n  */\n public class TestMapUtils extends BulkTest {\n \n \n         assertTrue( in.equals(out));\n     }\n+\n+    public void testDebugAndVerbosePrintCasting() {\n+        final Map inner = new HashMap(2, 1);\n+        inner.put( new Integer(2) , \"B\" );\n+        inner.put( new Integer(3) , \"C\" );\n+\n+        final Map outer = new HashMap(2, 1);\n+        outer.put( new Integer(0) , inner );\n+        outer.put( new Integer(1) , \"A\");\n+\n+ \n+        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        final PrintStream outPrint = new PrintStream(out);\n+        \n+        try {\n+            MapUtils.debugPrint(outPrint, \"Print Map\", outer);\n+        } catch (final ClassCastException e) {\n+            fail(\"No Casting should be occurring!\");\n+        }\n+    }\n }", "timestamp": 1061413396, "metainfo": ""}