{"sha": "1645a0014eee2fa26760d30e6090f89a29cecc69", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was introduced in r738956.    ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/AbstractEmptyMapIterator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+/** \n+ * Provides an implementation of an empty map iterator.\n+ *\n+ * @since Commons Collections 5\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Stephen Colebourne\n+ * @author Matt Benson\n+ */\n+public abstract class AbstractEmptyMapIterator<K, V> extends AbstractEmptyIterator<K> {\n+\n+    /**\n+     * Create a new AbstractEmptyMapIterator.\n+     */\n+    public AbstractEmptyMapIterator() {\n+        super();\n+    }\n+\n+    public K getKey() {\n+        throw new IllegalStateException(\"Iterator contains no elements\");\n+    }\n+\n+    public V getValue() {\n+        throw new IllegalStateException(\"Iterator contains no elements\");\n+    }\n+\n+    public V setValue(V value) {\n+        throw new IllegalStateException(\"Iterator contains no elements\");\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/AbstractUntypedIteratorDecorator.java\n+/**\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Provides basic behaviour for decorating an iterator with extra functionality\n+ * without committing the generic type of the Iterator implementation.\n+ * <p>\n+ * All methods are forwarded to the decorated iterator.\n+ *\n+ * @since Commons Collections 5\n+ * @version $Revision$ $Date$\n+ *\n+ * @author James Strachan\n+ * @author Stephen Colebourne\n+ * @author Matt Benson\n+ */\n+public abstract class AbstractUntypedIteratorDecorator<I, O> implements Iterator<O> {\n+\n+    /** The iterator being decorated */\n+    protected final Iterator<I> iterator;\n+\n+    /**\n+     * Create a new AbstractUntypedIteratorDecorator.\n+     */\n+    protected AbstractUntypedIteratorDecorator(Iterator<I> iterator) {\n+        super();\n+        if (iterator == null) {\n+            throw new IllegalArgumentException(\"Iterator must not be null\");\n+        }\n+        this.iterator = iterator;\n+    }\n+\n+    /**\n+     * Gets the iterator being decorated.\n+     * \n+     * @return the decorated iterator\n+     */\n+    protected Iterator<I> getIterator() {\n+        return iterator;\n+    }\n+\n+    public boolean hasNext() {\n+        return iterator.hasNext();\n+    }\n+\n+    public void remove() {\n+        iterator.remove();\n+    }\n+\n+}", "timestamp": 1252993188, "metainfo": ""}