{"sha": "cf940ca4037a412bf9cfb47df8f14f3f14ec2629", "log": "Checkstyle fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractEmptyMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractEmptyMapIterator.java\n         throw new IllegalStateException(\"Iterator contains no elements\");\n     }\n \n-\n-}\n+}\n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractIteratorDecorator.java\n         super(iterator);\n     }\n \n+    /** {@inheritDoc} */\n     public E next() {\n         return getIterator().next();\n     }\n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractListIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractListIteratorDecorator.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public boolean hasNext() {\n         return iterator.hasNext();\n     }\n \n+    /** {@inheritDoc} */\n     public E next() {\n         return iterator.next();\n     }\n \n+    /** {@inheritDoc} */\n     public int nextIndex() {\n         return iterator.nextIndex();\n     }\n \n+    /** {@inheritDoc} */\n     public boolean hasPrevious() {\n         return iterator.hasPrevious();\n     }\n \n+    /** {@inheritDoc} */\n     public E previous() {\n         return iterator.previous();\n     }\n \n+    /** {@inheritDoc} */\n     public int previousIndex() {\n         return iterator.previousIndex();\n     }\n \n+    /** {@inheritDoc} */\n     public void remove() {\n         iterator.remove();\n     }\n \n+    /** {@inheritDoc} */\n     public void set(E obj) {\n         iterator.set(obj);\n     }\n \n+    /** {@inheritDoc} */\n     public void add(E obj) {\n         iterator.add(obj);\n     }\n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractMapIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractMapIteratorDecorator.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public boolean hasNext() {\n         return iterator.hasNext();\n     }\n \n+    /** {@inheritDoc} */\n     public K next() {\n         return iterator.next();\n     }\n \n+    /** {@inheritDoc} */\n     public void remove() {\n         iterator.remove();\n     }\n-    \n+\n+    /** {@inheritDoc} */\n     public K getKey() {\n         return iterator.getKey();\n     }\n \n+    /** {@inheritDoc} */\n     public V getValue() {\n         return iterator.getValue();\n     }\n \n+    /** {@inheritDoc} */\n     public V setValue(V obj) {\n         return iterator.setValue(obj);\n     }\n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractOrderedMapIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractOrderedMapIteratorDecorator.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public boolean hasNext() {\n         return iterator.hasNext();\n     }\n \n+    /** {@inheritDoc} */\n     public K next() {\n         return iterator.next();\n     }\n \n+    /** {@inheritDoc} */\n     public boolean hasPrevious() {\n         return iterator.hasPrevious();\n     }\n \n+    /** {@inheritDoc} */\n     public K previous() {\n         return iterator.previous();\n     }\n \n+    /** {@inheritDoc} */\n     public void remove() {\n         iterator.remove();\n     }\n     \n+    /** {@inheritDoc} */\n     public K getKey() {\n         return iterator.getKey();\n     }\n \n+    /** {@inheritDoc} */\n     public V getValue() {\n         return iterator.getValue();\n     }\n \n+    /** {@inheritDoc} */\n     public V setValue(V obj) {\n         return iterator.setValue(obj);\n     }\n--- a/src/main/java/org/apache/commons/collections/iterators/CollatingIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/CollatingIterator.java\n      * @param b the second child ordered iterator\n      * @throws NullPointerException if either iterator is null\n      */\n-    public CollatingIterator(final Comparator<? super E> comp, final Iterator<? extends E> a, final Iterator<? extends E> b) {\n+    public CollatingIterator(final Comparator<? super E> comp, final Iterator<? extends E> a,\n+                             final Iterator<? extends E> b) {\n         this(comp, 2);\n         addIterator(a);\n         addIterator(b);\n \n     /**\n      * Gets the {@link Comparator} by which collatation occurs.\n+     * \n+     * @return the {@link Comparator}\n      */\n     public Comparator<? super E> getComparator() {\n         return comparator;\n      * {@link java.lang.Comparable} interface), then use the\n      * {@link org.apache.commons.collections.comparators.ComparableComparator}.\n      * \n+     * @param comp the {@link Comparator} to set\n      * @throws IllegalStateException if iteration has started\n      */\n     public void setComparator(final Comparator<? super E> comp) {\n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyIterator.java\n  * Provides an implementation of an empty iterator.\n  * <p>\n  * This class provides an implementation of an empty iterator.\n- * This class provides for binary compatability between Commons Collections\n+ * This class provides for binary compatibility between Commons Collections\n  * 2.1.1 and 3.1 due to issues with <code>IteratorUtils</code>.\n  *\n  * @since 2.1.1 and 3.1\n \n     /**\n      * Get a typed resettable empty iterator instance.\n-     * @param <E>\n+     * @param <E> the element type\n      * @return ResettableIterator<E>\n      */\n     @SuppressWarnings(\"unchecked\")\n \n     /**\n      * Get a typed empty iterator instance.\n-     * @param <E>\n+     * @param <E> the element type\n      * @return Iterator<E>\n      */\n     @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyListIterator.java\n  * Provides an implementation of an empty list iterator.\n  * <p>\n  * This class provides an implementation of an empty list iterator. This class\n- * provides for binary compatability between Commons Collections 2.1.1 and 3.1\n+ * provides for binary compatibility between Commons Collections 2.1.1 and 3.1\n  * due to issues with <code>IteratorUtils</code>.\n  *\n  * @since 2.1.1 and 3.1\n \n     /**\n      * Get a typed instance of the iterator.\n-     * @param <E>\n+     * @param <E> the element type\n      * @return {@link ResettableListIterator}<E>\n      */\n     @SuppressWarnings(\"unchecked\")\n \n     /**\n      * Get a typed instance of the iterator.\n-     * @param <E>\n+     * @param <E> the element type\n      * @return {@link ListIterator}<E>\n      */\n     @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyMapIterator.java\n \n     /**\n      * Get a typed instance of the iterator.\n-     * @param <K>\n-     * @param <V>\n+     * @param <K> the key type\n+     * @param <V> the value type\n      * @return {@link MapIterator}<K, V>\n      */\n     @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyOrderedIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyOrderedIterator.java\n \n     /**\n      * Typed instance of the iterator.\n-     * @param <E>\n+     * @param <E> the element type\n      * @return OrderedIterator<E>\n      */\n     @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyOrderedMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyOrderedMapIterator.java\n \n     /**\n      * Get a typed instance of the iterator.\n-     * @param <K>\n-     * @param <V>\n+     * @param <K> the key type\n+     * @param <V> the value type\n      * @return {@link OrderedMapIterator}<K, V>\n      */\n     @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/org/apache/commons/collections/iterators/LoopingIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/LoopingIterator.java\n      * <p>\n      * If at the end of the collection, return the first element.\n      * \n+     * @return the next object\n      * @throws NoSuchElementException if there are no elements\n      *         at all.  Use {@link #hasNext} to avoid this error.\n      */\n--- a/src/main/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n     /**\n      * Add always throws {@link UnsupportedOperationException}.\n      *\n+     * @param obj  the object to add\n      * @throws UnsupportedOperationException always\n      */\n     public void add(E obj) {", "timestamp": 1344280291, "metainfo": ""}