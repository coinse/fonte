{"sha": "eebcb74fb5e80592aab80f6bbb756026c7812f19", "log": "[COLLECTIONS-343] applied patch to preserve singleton integrity with readResolve  ", "commit": "\n--- a/src/java/org/apache/commons/collections/functors/CloneTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/CloneTransformer.java\n         return PrototypeFactory.getInstance(input).create();\n     }\n \n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ExceptionClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionClosure.java\n         throw new FunctorException(\"ExceptionClosure invoked\");\n     }\n \n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ExceptionFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionFactory.java\n         throw new FunctorException(\"ExceptionFactory invoked\");\n     }\n \n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n         throw new FunctorException(\"ExceptionPredicate invoked\");\n     }\n \n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n         throw new FunctorException(\"ExceptionTransformer invoked\");\n     }\n \n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n         return false;\n     }\n \n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/NOPClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/NOPClosure.java\n         // do nothing\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public boolean equals(Object arg0) {\n-        return arg0 == this || arg0 instanceof NOPClosure<?>;\n+    private Object readResolve() {\n+        return INSTANCE;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public int hashCode() {\n-        return System.identityHashCode(INSTANCE);\n-    }\n }\n--- a/src/java/org/apache/commons/collections/functors/NOPTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/NOPTransformer.java\n \n     /**\n      * Factory returning the singleton instance.\n-     * \n+     *\n      * @return the singleton instance\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Transforms the input to result by doing nothing.\n-     * \n+     *\n      * @param input  the input object to transform\n      * @return the transformed result which is the input\n      */\n         return input;\n     }\n \n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/NotNullPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NotNullPredicate.java\n \n     /** Serial version UID */\n     private static final long serialVersionUID = 7533784454832764388L;\n-    \n+\n     /** Singleton predicate instance */\n     public static final Predicate<Object> INSTANCE = new NotNullPredicate<Object>();\n \n     /**\n      * Factory returning the singleton instance.\n-     * \n+     *\n      * @return the singleton instance\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Evaluates the predicate returning true if the object does not equal null.\n-     * \n+     *\n      * @param object  the object to evaluate\n      * @return true if not null\n      */\n         return (object != null);\n     }\n \n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/NullPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullPredicate.java\n \n     /** Serial version UID */\n     private static final long serialVersionUID = 7533784454832764388L;\n-    \n+\n     /** Singleton predicate instance */\n     public static final Predicate<?> INSTANCE = new NullPredicate<Object>();\n \n     /**\n      * Factory returning the singleton instance.\n-     * \n+     *\n      * @return the singleton instance\n      * @since Commons Collections 3.1\n      * @deprecated use {@link #nullPredicate()} instead.\n \n     /**\n      * Factory returning the singleton instance.\n-     * \n+     *\n      * @return the singleton instance\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Evaluates the predicate returning true if the input is null.\n-     * \n+     *\n      * @param object  the input object\n      * @return true if input is null\n      */\n         return (object == null);\n     }\n \n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n \n     /**\n      * Factory returning the singleton instance.\n-     * \n+     *\n      * @return the singleton instance\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Transforms the input to result by calling <code>String.valueOf</code>.\n-     * \n+     *\n      * @param input  the input object to transform\n      * @return the transformed result\n      */\n         return String.valueOf(input);\n     }\n \n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/functors/TruePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/TruePredicate.java\n \n     /** Serial version UID */\n     private static final long serialVersionUID = 3374767158756189740L;\n-    \n+\n     /** Singleton predicate instance */\n     public static final Predicate<?> INSTANCE = new TruePredicate<Object>();\n \n     /**\n      * Factory returning the singleton instance.\n-     * \n+     *\n      * @return the singleton instance\n      * @since Commons Collections 3.1\n      * @deprecated\n      */\n-    @Deprecated \n+    @Deprecated\n     public static <T> Predicate<T> getInstance() {\n         return truePredicate();\n     }\n \n     /**\n      * Factory returning the singleton instance.\n-     * \n+     *\n      * @return the singleton instance\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Evaluates the predicate returning true always.\n-     * \n+     *\n      * @param object  the input object\n      * @return true always\n      */\n     public boolean evaluate(T object) {\n         return true;\n     }\n+\n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n+\n }\n--- a/src/test/org/apache/commons/collections/TestClosureUtils.java\n+++ b/src/test/org/apache/commons/collections/TestClosureUtils.java\n import junit.textui.TestRunner;\n \n import org.apache.commons.collections.functors.EqualPredicate;\n+import org.apache.commons.collections.functors.ExceptionClosure;\n import org.apache.commons.collections.functors.FalsePredicate;\n import org.apache.commons.collections.functors.NOPClosure;\n import org.apache.commons.collections.functors.TruePredicate;\n         assertEquals(ClosureUtils.nopClosure(), ClosureUtils.asClosure(null));\n     }\n \n+    // misc tests\n+    //------------------------------------------------------------------\n+\n+    /**\n+     * Test that all Closure singletones hold singleton pattern in\n+     * serialization/deserialization process.\n+     */\n+    public void testSingletonPatternInSerialization() {\n+        final Object[] singletones = new Object[] {\n+                ExceptionClosure.INSTANCE,\n+                NOPClosure.INSTANCE,\n+        };\n+\n+        for (final Object original : singletones) {\n+            TestUtils.assertSameAfterSerialization(\n+                    \"Singletone patern broken for \" + original.getClass(),\n+                    original\n+            );\n+        }\n+    }\n }\n--- a/src/test/org/apache/commons/collections/TestFactoryUtils.java\n+++ b/src/test/org/apache/commons/collections/TestFactoryUtils.java\n import java.util.TimeZone;\n \n import org.apache.commons.collections.functors.ConstantFactory;\n+import org.apache.commons.collections.functors.ExceptionFactory;\n import org.junit.Test;\n \n /**\n         }\n         fail();\n     }\n-    \n+\n     // nullFactory\n     //------------------------------------------------------------------\n-    \n+\n     public void testNullFactory() {\n         Factory<Object> factory = FactoryUtils.nullFactory();\n         assertNotNull(factory);\n \n     // constantFactory\n     //------------------------------------------------------------------\n-    \n+\n     public void testConstantFactoryNull() {\n         Factory<Object> factory = FactoryUtils.constantFactory(null);\n         assertNotNull(factory);\n \n     // prototypeFactory\n     //------------------------------------------------------------------\n-    \n+\n     public void testPrototypeFactoryNull() {\n         assertSame(ConstantFactory.NULL_INSTANCE, FactoryUtils.prototypeFactory(null));\n     }\n         Date created = factory.create();\n         assertTrue(proto != created);\n         assertEquals(proto, created);\n-        \n+\n         // check serialisation works\n         ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n         ObjectOutputStream out = new ObjectOutputStream(buffer);\n         Object created = factory.create();\n         assertTrue(proto != created);\n         assertEquals(proto, created);\n-        \n+\n         // check serialisation works\n         ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n         ObjectOutputStream out = new ObjectOutputStream(buffer);\n         Integer created = factory.create();\n         assertTrue(proto != created);\n         assertEquals(proto, created);\n-        \n+\n         // check serialisation works\n         ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n         ObjectOutputStream out = new ObjectOutputStream(buffer);\n             return false;\n         }\n     }\n-    \n+\n     @SuppressWarnings(\"serial\")\n     public static class Mock2 implements Serializable {\n         private final Object iVal;\n             return false;\n         }\n     }\n-    \n+\n     public static class Mock3 {\n         private static int cCounter = 0;\n         private final int iVal;\n             return iVal;\n         }\n     }\n-    \n+\n     // instantiateFactory\n     //------------------------------------------------------------------\n-    \n+\n     @Test(expected=IllegalArgumentException.class)\n     public void instantiateFactoryNull() {\n         FactoryUtils.instantiateFactory(null);\n         assertEquals(new Date(1000 * 60 * 60 * 24), created);\n     }\n \n+    // misc tests\n+    //------------------------------------------------------------------\n+\n+    /**\n+     * Test that all Factory singletones hold singleton pattern in\n+     * serialization/deserialization process.\n+     */\n+    public void testSingletonPatternInSerialization() {\n+        final Object[] singletones = new Object[] {\n+                ExceptionFactory.INSTANCE,\n+        };\n+\n+        for (final Object original : singletones) {\n+            TestUtils.assertSameAfterSerialization(\n+                    \"Singletone patern broken for \" + original.getClass(),\n+                    original\n+            );\n+        }\n+    }\n+\n }\n--- a/src/test/org/apache/commons/collections/TestPredicateUtils.java\n+++ b/src/test/org/apache/commons/collections/TestPredicateUtils.java\n import org.apache.commons.collections.functors.AllPredicate;\n import org.apache.commons.collections.functors.BasicPredicateTestBase;\n import org.apache.commons.collections.functors.EqualPredicate;\n+import org.apache.commons.collections.functors.ExceptionPredicate;\n import org.apache.commons.collections.functors.FalsePredicate;\n+import org.apache.commons.collections.functors.NotNullPredicate;\n+import org.apache.commons.collections.functors.NullPredicate;\n import org.apache.commons.collections.functors.TruePredicate;\n import org.junit.Test;\n \n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    // misc tests\n+    //------------------------------------------------------------------\n+\n+    /**\n+     * Test that all Predicate singletones hold singleton pattern in\n+     * serialization/deserialization process.\n+     */\n+    @Test public void testSingletonPatternInSerialization() {\n+        final Object[] singletones = new Object[] {\n+                ExceptionPredicate.INSTANCE,\n+                FalsePredicate.INSTANCE,\n+                NotNullPredicate.INSTANCE,\n+                NullPredicate.INSTANCE,\n+                TruePredicate.INSTANCE\n+        };\n+\n+        for (final Object original : singletones) {\n+            TestUtils.assertSameAfterSerialization(\n+                    \"Singletone patern broken for \" + original.getClass(),\n+                    original\n+            );\n+        }\n+    }\n+\n     @Override\n     protected Predicate<?> generatePredicate() {\n         return truePredicate();  //Just return something to satisfy super class.\n--- a/src/test/org/apache/commons/collections/TestTransformerUtils.java\n+++ b/src/test/org/apache/commons/collections/TestTransformerUtils.java\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n+import org.apache.commons.collections.functors.CloneTransformer;\n import org.apache.commons.collections.functors.ConstantTransformer;\n import org.apache.commons.collections.functors.EqualPredicate;\n+import org.apache.commons.collections.functors.ExceptionTransformer;\n import org.apache.commons.collections.functors.FalsePredicate;\n import org.apache.commons.collections.functors.NOPTransformer;\n+import org.apache.commons.collections.functors.StringValueTransformer;\n import org.apache.commons.collections.functors.TruePredicate;\n \n /**\n         assertEquals(new Date(1000L), trans.transform(Date.class));\n     }\n \n+    // misc tests\n+    //------------------------------------------------------------------\n+\n+    /**\n+     * Test that all Transformer singletones hold singleton pattern in\n+     * serialization/deserialization process.\n+     */\n+    public void testSingletonPatternInSerialization() {\n+        final Object[] singletones = new Object[] {\n+                CloneTransformer.INSTANCE,\n+                ExceptionTransformer.INSTANCE,\n+                NOPTransformer.INSTANCE,\n+                StringValueTransformer.INSTANCE,\n+        };\n+\n+        for (final Object original : singletones) {\n+            TestUtils.assertSameAfterSerialization(\n+                    \"Singletone patern broken for \" + original.getClass(),\n+                    original\n+            );\n+        }\n+    }\n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestUtils.java\n+package org.apache.commons.collections;\n+\n+import static org.junit.Assert.assertSame;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+public final class TestUtils {\n+\n+    private TestUtils() {\n+    }\n+\n+    /**\n+     * Asserts that deserialization of the object returns the same object as the\n+     * one that was serialized. Object is first serialized, then deserialized\n+     * and finally check is preformed to see if original and deserialized\n+     * object references are the same.\n+     * <p>\n+     * This method is especially good for testing singletone pattern on classes\n+     * that support serialization.\n+     *\n+     * @param msg the identifying message for the <code>AssertionError</code>.\n+     * @param o object that will be tested.\n+     * @see #assertSameAfterSerialization(Object)\n+     */\n+    public static void assertSameAfterSerialization(String msg, Object o) {\n+        try {\n+            // write object to byte buffer\n+            final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            final ObjectOutputStream oos = new ObjectOutputStream(baos);\n+            oos.writeObject(o);\n+            oos.close();\n+\n+            // read same object from byte buffer\n+            final InputStream is = new ByteArrayInputStream(baos.toByteArray());\n+            final ObjectInputStream ois = new ObjectInputStream(is);\n+            final Object object = ois.readObject();\n+            ois.close();\n+\n+            // assert that original object and deserialized objects are the same\n+            assertSame(msg, o, object);\n+        } catch (IOException e) {\n+            // should never happen\n+            throw new RuntimeException(e);\n+        } catch (ClassNotFoundException e) {\n+            // should never happen\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    /**\n+     * Asserts that deserialization of the object returns the same object as the\n+     * one that was serialized.\n+     * <p>\n+     * Effect of method call is the same as:\n+     * <code>assertSameAfterSerialization(null, o)</code>.\n+     *\n+     * @param o object that will be tested.\n+     * @see #assertSameAfterSerialization(String, Object)\n+     */\n+    public static void assertSameAfterSerialization(Object o) {\n+        assertSameAfterSerialization(null, o);\n+    }\n+}", "timestamp": 1262128338, "metainfo": ""}