{"sha": "6526be25d18fdf6009ab75bc51e30489b24bfe36", "log": "Fix tests to work properly on inverse map   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/TestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.7 2003/10/09 20:21:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.8 2003/10/10 21:09:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.7 $ $Date: 2003/10/09 20:21:32 $\n+ * @version $Revision: 1.8 $ $Date: 2003/10/10 21:09:27 $\n  * \n  * @author Matthew Hawthorne\n+ * @author Stephen Colebourne\n  */\n public abstract class TestBidiMap extends AbstractTestMap {\n \n     // Test data.\n-    private static final Object KEY = \"key1\";\n-    private static final Object VALUE = \"value1\";\n-\n     private static final Object[][] entriesKV =\n         new Object[][] {\n-            new Object[] { KEY, VALUE },\n+            new Object[] { \"key1\", \"value1\" },\n             new Object[] { \"key2\", \"value2\" },\n             new Object[] { \"key3\", \"value3\" }\n     };\n     private static final Object[][] entriesVK =\n         new Object[][] {\n-            new Object[] { VALUE, KEY },\n+            new Object[] { \"value1\", \"key1\" },\n             new Object[] { \"value2\", \"key2\" },\n             new Object[] { \"value3\", \"key3\" }\n     };\n      * This implementation checks the inverse map as well.\n      */\n     protected void verify() {\n-        // verify inverse\n+        verifyInverse();\n+        super.verify();\n+    }\n+\n+    protected void verifyInverse() {\n         assertEquals(map.size(), ((BidiMap) map).inverseBidiMap().size());\n-        \n-        // verify fully\n-        super.verify();\n     }\n     \n     // testGetKey\n \n     //-----------------------------------------------------------------------\n     public void testBidiRemove() {\n-        remove(makeFullBidiMap(), KEY);\n-        remove(makeFullBidiMap().inverseBidiMap(), VALUE);\n-\n-        removeKey(makeFullBidiMap(), VALUE);\n-        removeKey(makeFullBidiMap().inverseBidiMap(), KEY);\n+        remove(makeFullBidiMap(), entries[0][0]);\n+        remove(makeFullBidiMap().inverseBidiMap(), entries[0][1]);\n+\n+        removeKey(makeFullBidiMap(), entries[0][1]);\n+        removeKey(makeFullBidiMap().inverseBidiMap(), entries[0][0]);\n     }\n \n     private final void remove(BidiMap map, Object key) {\n \n     //-----------------------------------------------------------------------\n     public void testBidiRemoveByKeySet() {\n-        removeByKeySet(makeFullBidiMap(), KEY, VALUE);\n-        removeByKeySet(makeFullBidiMap().inverseBidiMap(), VALUE, KEY);\n+        removeByKeySet(makeFullBidiMap(), entries[0][0], entries[0][1]);\n+        removeByKeySet(makeFullBidiMap().inverseBidiMap(), entries[0][1], entries[0][0]);\n     }\n \n     private final void removeByKeySet(BidiMap map, Object key, Object value) {\n \n     //-----------------------------------------------------------------------\n     public void testBidiRemoveByEntrySet() {\n-        removeByEntrySet(makeFullBidiMap(), KEY, VALUE);\n-        removeByEntrySet(makeFullBidiMap().inverseBidiMap(), VALUE, KEY);\n+        removeByEntrySet(makeFullBidiMap(), entries[0][0], entries[0][1]);\n+        removeByEntrySet(makeFullBidiMap().inverseBidiMap(), entries[0][1], entries[0][0]);\n     }\n \n     private final void removeByEntrySet(BidiMap map, Object key, Object value) {\n         protected BidiMap makeFullBidiMap() {\n             return main.makeFullBidiMap().inverseBidiMap();\n         }\n+        protected Object[] getSampleKeys() {\n+            return main.getSampleValues();\n+        }\n+        protected Object[] getSampleValues() {\n+            return main.getSampleKeys();\n+        }\n         \n         protected String getCompatibilityVersion() {\n             return main.getCompatibilityVersion();", "timestamp": 1065820167, "metainfo": ""}