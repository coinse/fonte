{"sha": "f123eb4877eaff9851ed92994275767cf5d1bc33", "log": "Inline constant, rename getter and add since tags   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/java/org/apache/commons/collections/map/LRUMap.java\n  * <code>ResettableIterator</code> and calling <code>reset()</code>.\n  * \n  * @since Commons Collections 3.0 (previously in main package v1.0)\n- * @version $Revision: 1.13 $ $Date: 2004/05/12 19:51:28 $\n+ * @version $Revision: 1.14 $ $Date: 2004/06/07 22:13:53 $\n  *\n  * @author James Strachan\n  * @author Morgan Delagrange\n     static final long serialVersionUID = -612114643488955218L;\n     /** Default maximum size */\n     protected static final int DEFAULT_MAX_SIZE = 100;\n-    /** Default scan behaviour */\n-    protected static final boolean DEFAULT_SCAN_UNTIL_REMOVABLE = false;\n     \n     /** Maximum size */\n     private transient int maxSize;\n      * Constructs a new empty map with a maximum size of 100.\n      */\n     public LRUMap() {\n-        this(DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, DEFAULT_SCAN_UNTIL_REMOVABLE);\n+        this(DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false);\n     }\n \n     /**\n      * @param maxSize  the maximum size of the map\n      * @param scanUntilRemovable  scan until a removeable entry is found, default false\n      * @throws IllegalArgumentException if the maximum size is less than one\n+     * @since Commons Collections 3.1\n      */\n     public LRUMap(int maxSize, boolean scanUntilRemovable) {\n         this(maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable);\n      * @throws IllegalArgumentException if the load factor is less than zero\n      */\n     public LRUMap(int maxSize, float loadFactor) {\n-        this(maxSize, loadFactor, DEFAULT_SCAN_UNTIL_REMOVABLE);\n+        this(maxSize, loadFactor, false);\n     }\n \n     /**\n      * @param scanUntilRemovable  scan until a removeable entry is found, default false\n      * @throws IllegalArgumentException if the maximum size is less than one\n      * @throws IllegalArgumentException if the load factor is less than zero\n+     * @since Commons Collections 3.1\n      */\n     public LRUMap(int maxSize, float loadFactor, boolean scanUntilRemovable) {\n         super((maxSize < 1 ? DEFAULT_CAPACITY : maxSize), loadFactor);\n      * @throws IllegalArgumentException if the map is empty\n      */\n     public LRUMap(Map map) {\n-        this(map, DEFAULT_SCAN_UNTIL_REMOVABLE);\n+        this(map, false);\n     }\n \n     /**\n      * @param scanUntilRemovable  scan until a removeable entry is found, default false\n      * @throws NullPointerException if the map is null\n      * @throws IllegalArgumentException if the map is empty\n+     * @since Commons Collections 3.1\n      */\n     public LRUMap(Map map, boolean scanUntilRemovable) {\n         this(map.size(), DEFAULT_LOAD_FACTOR, scanUntilRemovable);\n      * map is full.\n      *\n      * @return true if this map scans\n-     */\n-    public boolean scanUntilRemovable() {\n+     * @since Commons Collections 3.1\n+     */\n+    public boolean isScanUntilRemovable() {\n         return scanUntilRemovable;\n     }\n ", "timestamp": 1086646433, "metainfo": ""}