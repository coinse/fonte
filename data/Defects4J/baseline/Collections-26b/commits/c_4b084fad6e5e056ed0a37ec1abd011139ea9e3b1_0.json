{"sha": "4b084fad6e5e056ed0a37ec1abd011139ea9e3b1", "log": "Refactor ProxyIterators to AbstractDecorators   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/AbstractIteratorDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/AbstractIteratorDecorator.java,v 1.1 2003/11/02 16:29:12 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+\n+/** \n+ * Provides basic behaviour for decorating an iterator with extra functionality.\n+ * <p>\n+ * All methods are forwarded to the decorated iterator.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/02 16:29:12 $\n+ * \n+ * @author James Strachan\n+ * @author Stephen Colebourne\n+ */\n+public class AbstractIteratorDecorator implements Iterator {\n+\n+    /** The iterator being decorated */\n+    private Iterator iterator;\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that decorates the specified iterator.\n+     *\n+     * @param iterator  the iterator to decorate, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    public AbstractIteratorDecorator(Iterator iterator) {\n+        super();\n+        if (iterator == null) {\n+            throw new IllegalArgumentException(\"Iterator must not be null\");\n+        }\n+        this.iterator = iterator;\n+    }\n+\n+    /**\n+     * Gets the iterator being decorated.\n+     * \n+     * @return the decorated iterator\n+     */\n+    protected Iterator getIterator() {\n+        return iterator;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean hasNext() {\n+        return iterator.hasNext();\n+    }\n+\n+    public Object next() {\n+        return iterator.next();\n+    }\n+\n+    public void remove() {\n+        iterator.remove();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/AbstractListIteratorDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/AbstractListIteratorDecorator.java,v 1.1 2003/11/02 16:29:12 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ListIterator;\n+\n+/**\n+ * Provides basic behaviour for decorating a list iterator with extra functionality.\n+ * <p>\n+ * All methods are forwarded to the decorated list iterator.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/02 16:29:12 $\n+ * \n+ * @author Rodney Waldhoff\n+ * @author Stephen Colebourne\n+ */\n+public class AbstractListIteratorDecorator implements ListIterator {\n+\n+    /** The iterator being decorated */\n+    private ListIterator iterator;\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that decorates the specified iterator.\n+     *\n+     * @param iterator  the iterator to decorate, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    public AbstractListIteratorDecorator(ListIterator iterator) {\n+        super();\n+        if (iterator == null) {\n+            throw new IllegalArgumentException(\"ListIterator must not be null\");\n+        }\n+        this.iterator = iterator;\n+    }\n+\n+    /**\n+     * Gets the iterator being decorated.\n+     * \n+     * @return the decorated iterator\n+     */\n+    protected ListIterator getListIterator() {\n+        return iterator;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean hasNext() {\n+        return iterator.hasNext();\n+    }\n+\n+    public Object next() {\n+        return iterator.next();\n+    }\n+\n+    public int nextIndex() {\n+        return iterator.nextIndex();\n+    }\n+\n+    public boolean hasPrevious() {\n+        return iterator.hasPrevious();\n+    }\n+\n+    public Object previous() {\n+        return iterator.previous();\n+    }\n+\n+    public int previousIndex() {\n+        return iterator.previousIndex();\n+    }\n+\n+    public void remove() {\n+        iterator.remove();\n+    }\n+\n+    public void set(Object obj) {\n+        iterator.set(obj);\n+    }\n+\n+    public void add(Object obj) {\n+        iterator.add(obj);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/AbstractMapIteratorDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/AbstractMapIteratorDecorator.java,v 1.1 2003/11/02 16:29:12 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Map;\n+\n+/**\n+ * Provides basic behaviour for decorating a map iterator with extra functionality.\n+ * <p>\n+ * All methods are forwarded to the decorated map iterator.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/02 16:29:12 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class AbstractMapIteratorDecorator implements MapIterator {\n+\n+    /** The iterator being decorated */\n+    private MapIterator iterator;\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that decorates the specified iterator.\n+     *\n+     * @param iterator  the iterator to decorate, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    public AbstractMapIteratorDecorator(MapIterator iterator) {\n+        super();\n+        if (iterator == null) {\n+            throw new IllegalArgumentException(\"MapIterator must not be null\");\n+        }\n+        this.iterator = iterator;\n+    }\n+\n+    /**\n+     * Gets the iterator being decorated.\n+     * \n+     * @return the decorated iterator\n+     */\n+    protected MapIterator getMapIterator() {\n+        return iterator;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean hasNext() {\n+        return iterator.hasNext();\n+    }\n+\n+    public Object next() {\n+        return iterator.next();\n+    }\n+\n+    public void remove() {\n+        iterator.remove();\n+    }\n+    \n+    public Object getKey() {\n+        return iterator.getKey();\n+    }\n+\n+    public Object getValue() {\n+        return iterator.getValue();\n+    }\n+\n+    public Object setValue(Object obj) {\n+        return iterator.setValue(obj);\n+    }\n+\n+    public Map.Entry asMapEntry() {\n+        return iterator.asMapEntry();\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/iterators/FilterIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/FilterIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/FilterIterator.java,v 1.5 2003/09/29 22:02:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/FilterIterator.java,v 1.6 2003/11/02 16:29:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.Iterator;\n import java.util.NoSuchElementException;\n+\n import org.apache.commons.collections.Predicate;\n \n /** \n- * A Proxy {@link Iterator Iterator} which takes a {@link Predicate Predicate} instance to filter\n- * out objects from an underlying {@link Iterator Iterator} instance.\n- * Only objects for which the\n- * specified <code>Predicate</code> evaluates to <code>true</code> are\n- * returned.\n+ * Decorates an iterator such that only elements matching a predicate filter\n+ * are returned.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.5 $ $Date: 2003/09/29 22:02:33 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/02 16:29:12 $\n  * \n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @author James Strachan\n  * @author Jan Sorensen\n  * @author Ralph Wagner\n+ * @author Stephen Colebourne\n  */\n-public class FilterIterator extends ProxyIterator {\n-    \n-    /** Holds value of property predicate. */\n+public class FilterIterator implements Iterator {\n+\n+    /** The iterator being used */\n+    private Iterator iterator;\n+    /** The predicate being used */\n     private Predicate predicate;\n-\n+    /** The next object in the iteration */\n     private Object nextObject;\n+    /** Whether the next object has been calculated yet */\n     private boolean nextObjectSet = false;\n-    \n-    \n-    //-------------------------------------------------------------------------\n-\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Constructs a new <code>FilterIterator</code> that will not function\n      * until {@link #setIterator(Iterator) setIterator} is invoked.\n     public FilterIterator() {\n         super();\n     }\n-    \n+\n     /**\n      * Constructs a new <code>FilterIterator</code> that will not function\n      * until {@link #setPredicate(Predicate) setPredicate} is invoked.\n      * @param iterator  the iterator to use\n      */\n     public FilterIterator(Iterator iterator) {\n-        super(iterator);\n+        super();\n+        this.iterator = iterator;\n     }\n \n     /**\n      * @param predicate  the predicate to use\n      */\n     public FilterIterator(Iterator iterator, Predicate predicate) {\n-        super(iterator);\n+        super();\n+        this.iterator = iterator;\n         this.predicate = predicate;\n     }\n \n-    // Iterator interface\n-    //-------------------------------------------------------------------------\n-    \n-    /** \n-     *  Returns true if the underlying iterator contains an object that \n-     *  matches the predicate.\n+    //-----------------------------------------------------------------------\n+    /** \n+     * Returns true if the underlying iterator contains an object that \n+     * matches the predicate.\n      *\n-     *  @return true if there is another object that matches the predicate \n+     * @return true if there is another object that matches the predicate \n      */\n     public boolean hasNext() {\n-        if ( nextObjectSet ) {\n+        if (nextObjectSet) {\n             return true;\n         } else {\n             return setNextObject();\n     }\n \n     /** \n-     *  Returns the next object that matches the predicate.\n-     * \n-     *  @return the next object which matches the given predicate\n-     *  @throws NoSuchElementException if there are no more elements that\n-     *   match the predicate \n+     * Returns the next object that matches the predicate.\n+     * \n+     * @return the next object which matches the given predicate\n+     * @throws NoSuchElementException if there are no more elements that\n+     *  match the predicate \n      */\n     public Object next() {\n-        if ( !nextObjectSet ) {\n+        if (!nextObjectSet) {\n             if (!setNextObject()) {\n                 throw new NoSuchElementException();\n             }\n         if (nextObjectSet) {\n             throw new IllegalStateException(\"remove() cannot be called\");\n         }\n-        getIterator().remove();\n-    }\n-        \n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-    /** Getter for property predicate.\n-     * @return Value of property predicate.\n+        iterator.remove();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /** \n+     * Gets the iterator this iterator is using.\n+     * \n+     * @return the iterator.\n+     */\n+    public Iterator getIterator() {\n+        return iterator;\n+    }\n+\n+    /** \n+     * Sets the iterator for this iterator to use.\n+     * If iteration has started, this effectively resets the iterator.\n+     * \n+     * @param iterator  the iterator to use\n+     */\n+    public void setIterator(Iterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /** \n+     * Gets the predicate this iterator is using.\n+     * \n+     * @return the predicate.\n      */\n     public Predicate getPredicate() {\n         return predicate;\n     }\n-    /** Setter for property predicate.\n-     * @param predicate New value of property predicate.\n+\n+    /** \n+     * Sets the predicate this the iterator to use.\n+     * \n+     * @param predicate  the transformer to use\n      */\n     public void setPredicate(Predicate predicate) {\n         this.predicate = predicate;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Set nextObject to the next object. If there are no more \n      * objects then return false. Otherwise, return true.\n      */\n     private boolean setNextObject() {\n-        Iterator iterator = getIterator();\n-        Predicate predicate = getPredicate();\n-        while ( iterator.hasNext() ) {\n+        while (iterator.hasNext()) {\n             Object object = iterator.next();\n-            if ( predicate.evaluate( object ) ) {\n+            if (predicate.evaluate(object)) {\n                 nextObject = object;\n                 nextObjectSet = true;\n                 return true;\n--- a/src/java/org/apache/commons/collections/iterators/FilterListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/FilterListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/FilterListIterator.java,v 1.4 2003/09/29 22:02:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/FilterListIterator.java,v 1.5 2003/11/02 16:29:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.ListIterator;\n import java.util.NoSuchElementException;\n+\n import org.apache.commons.collections.Predicate;\n \n /** \n  * returned by the iterator.\n  * \n  * @since Commons Collections 2.0\n- * @version $Revision: 1.4 $ $Date: 2003/09/29 22:02:33 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/02 16:29:12 $\n  * \n  * @author Rodney Waldhoff\n  */\n-public class FilterListIterator extends ProxyListIterator {\n-\n-    // Constructors    \n-    //-------------------------------------------------------------------------\n+public class FilterListIterator implements ListIterator {\n+\n+    /** The iterator being used */\n+    private ListIterator iterator;\n     \n+    /** The predicate being used */\n+    private Predicate predicate;\n+\n+    /** \n+     * The value of the next (matching) object, when \n+     * {@link #nextObjectSet} is true. \n+     */\n+    private Object nextObject;\n+\n+    /** \n+     * Whether or not the {@link #nextObject} has been set\n+     * (possibly to <code>null</code>). \n+     */\n+    private boolean nextObjectSet = false;   \n+\n+    /** \n+     * The value of the previous (matching) object, when \n+     * {@link #previousObjectSet} is true. \n+     */\n+    private Object previousObject;\n+\n+    /** \n+     * Whether or not the {@link #previousObject} has been set\n+     * (possibly to <code>null</code>). \n+     */\n+    private boolean previousObjectSet = false;   \n+\n+    /** \n+     * The index of the element that would be returned by {@link #next}.\n+     */\n+    private int nextIndex = 0;\n+    \n+    //-----------------------------------------------------------------------\n     /**\n      *  Constructs a new <code>FilterListIterator</code> that will not \n      *  function until \n      * @param iterator  the iterator to use\n      */\n     public FilterListIterator(ListIterator iterator ) {\n-        super(iterator);\n+        super();\n+        this.iterator = iterator;\n     }\n \n     /**\n      * @param predicate  the predicate to use\n      */\n     public FilterListIterator(ListIterator iterator, Predicate predicate) {\n-        super(iterator);\n+        super();\n+        this.iterator = iterator;\n         this.predicate = predicate;\n     }\n \n         this.predicate = predicate;\n     }\n \n-    // ListIterator interface\n-    //-------------------------------------------------------------------------\n-\n+    //-----------------------------------------------------------------------\n     /** Not supported. */\n     public void add(Object o) {\n         throw new UnsupportedOperationException(\"FilterListIterator.add(Object) is not supported.\");\n         throw new UnsupportedOperationException(\"FilterListIterator.set(Object) is not supported.\");\n     }\n \n-    // Properties\n-    //-------------------------------------------------------------------------\n-\n-    /** \n-     * Getter for the predicate property.\n-     * @return value of the predicate property.\n+    //-----------------------------------------------------------------------\n+    /** \n+     * Gets the iterator this iterator is using.\n+     * \n+     * @return the iterator.\n+     */\n+    public ListIterator getListIterator() {\n+        return iterator;\n+    }\n+\n+    /** \n+     * Sets the iterator for this iterator to use.\n+     * If iteration has started, this effectively resets the iterator.\n+     * \n+     * @param iterator  the iterator to use\n+     */\n+    public void setListIterator(ListIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /** \n+     * Gets the predicate this iterator is using.\n+     * \n+     * @return the predicate.\n      */\n     public Predicate getPredicate() {\n         return predicate;\n     }\n-    /** \n-     * Setter for the predicate property.\n-     * @param predicate new value for the predicate property.\n+\n+    /** \n+     * Sets the predicate this the iterator to use.\n+     * \n+     * @param predicate  the transformer to use\n      */\n     public void setPredicate(Predicate predicate) {\n         this.predicate = predicate;\n     }\n \n-    // Private Methods\n-    //-------------------------------------------------------------------------\n-\n+    //-----------------------------------------------------------------------\n     private void clearNextObject() {\n         nextObject = null;\n         nextObjectSet = false;\n     }\n \n     private boolean setNextObject() {\n-        ListIterator iterator = getListIterator();\n-        Predicate predicate = getPredicate();\n-        \n         // if previousObjectSet,\n         // then we've walked back one step in the \n         // underlying list (due to a hasPrevious() call)\n     }\n \n     private boolean setPreviousObject() {\n-        ListIterator iterator = getListIterator();\n-        Predicate predicate = getPredicate();\n-        \n         // if nextObjectSet,\n         // then we've walked back one step in the \n         // underlying list (due to a hasNext() call)\n         return false;\n     }\n \n-    // Attributes\n-    //-------------------------------------------------------------------------\n-\n-    /** Holds value of property \"predicate\". */\n-    private Predicate predicate;\n-\n-    /** \n-     * The value of the next (matching) object, when \n-     * {@link #nextObjectSet} is true. \n-     */\n-    private Object nextObject;\n-\n-    /** \n-     * Whether or not the {@link #nextObject} has been set\n-     * (possibly to <code>null</code>). \n-     */\n-    private boolean nextObjectSet = false;   \n-\n-    /** \n-     * The value of the previous (matching) object, when \n-     * {@link #previousObjectSet} is true. \n-     */\n-    private Object previousObject;\n-\n-    /** \n-     * Whether or not the {@link #previousObject} has been set\n-     * (possibly to <code>null</code>). \n-     */\n-    private boolean previousObjectSet = false;   \n-\n-    /** \n-     * The index of the element that would be returned by {@link #next}.\n-     */\n-    private int nextIndex = 0;\n }\n--- a/src/java/org/apache/commons/collections/iterators/ProxyIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ProxyIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ProxyIterator.java,v 1.5 2003/09/29 22:02:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ProxyIterator.java,v 1.6 2003/11/02 16:29:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /** \n  * A Proxy {@link Iterator Iterator} which delegates its methods to a proxy instance.\n  *\n- * @see ProxyListIterator\n+ * @deprecated Use AbstractIteratorDecorator\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.5 $ $Date: 2003/09/29 22:02:33 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/02 16:29:12 $\n  * \n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @author James Strachan\n  */\n public class ProxyIterator implements Iterator {\n     \n--- a/src/java/org/apache/commons/collections/iterators/ProxyListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ProxyListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ProxyListIterator.java,v 1.5 2003/09/29 22:02:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ProxyListIterator.java,v 1.6 2003/11/02 16:29:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * A proxy {@link ListIterator ListIterator} which delegates its\n  * methods to a proxy instance.\n  *\n- * @see ProxyIterator\n+ * @deprecated Use AbstractListIteratorDecorator\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.5 $ $Date: 2003/09/29 22:02:33 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/02 16:29:12 $\n  * \n  * @author Rodney Waldhoff\n  */\n--- a/src/java/org/apache/commons/collections/iterators/TransformIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/TransformIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/TransformIterator.java,v 1.5 2003/09/29 22:02:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/TransformIterator.java,v 1.6 2003/11/02 16:29:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n package org.apache.commons.collections.iterators;\n \n import java.util.Iterator;\n+\n import org.apache.commons.collections.Transformer;\n \n /** \n- * A Proxy {@link Iterator Iterator} which uses a {@link Transformer Transformer}\n- * instance to transform the contents of the {@link Iterator Iterator} into \n- * some other form.\n+ * Decorates an iterator such that each element returned is transformed.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.5 $ $Date: 2003/09/29 22:02:33 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/02 16:29:12 $\n  * \n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @author James Strachan\n+ * @author Stephen Colebourne\n  */\n-public class TransformIterator extends ProxyIterator {\n-    \n-    /** Holds value of property transformer. */\n+public class TransformIterator implements Iterator {\n+\n+    /** The iterator being used */\n+    private Iterator iterator;\n+    /** The transformer being used */\n     private Transformer transformer;\n-    \n-    \n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Constructs a new <code>TransformIterator</code> that will not function\n      * until the {@link #setIterator(Iterator) setIterator} method is \n     public TransformIterator() {\n         super();\n     }\n-    \n+\n     /**\n      * Constructs a new <code>TransformIterator</code> that won't transform\n      * elements from the given iterator.\n      * @param iterator  the iterator to use\n      */\n     public TransformIterator(Iterator iterator) {\n-        super(iterator);\n+        super();\n+        this.iterator = iterator;\n     }\n \n     /**\n      * @param transformer  the transformer to use\n      */\n     public TransformIterator(Iterator iterator, Transformer transformer) {\n-        super(iterator);\n+        super();\n+        this.iterator = iterator;\n         this.transformer = transformer;\n     }\n \n-    // Iterator interface\n-    //-------------------------------------------------------------------------\n-    public Object next() {\n-        return transform( super.next() );\n+    //-----------------------------------------------------------------------\n+    public boolean hasNext() {\n+        return iterator.hasNext();\n     }\n \n-    // Properties\n-    //-------------------------------------------------------------------------\n+    /**\n+     * Gets the next object from the iteration, transforming it using the\n+     * current transformer. If the transformer is null, no transformation\n+     * occurs and the object from the iterator is returned directly.\n+     * \n+     * @return the next object\n+     * @throws NoSuchElementException if there are no more elements\n+     */\n+    public Object next() {\n+        return transform(iterator.next());\n+    }\n+\n+    public void remove() {\n+        iterator.remove();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /** \n-     * Getter for property transformer.\n+     * Gets the iterator this iterator is using.\n      * \n-     * @return Value of property transformer.\n+     * @return the iterator.\n+     */\n+    public Iterator getIterator() {\n+        return iterator;\n+    }\n+\n+    /** \n+     * Sets the iterator for this iterator to use.\n+     * If iteration has started, this effectively resets the iterator.\n+     * \n+     * @param iterator  the iterator to use\n+     */\n+    public void setIterator(Iterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /** \n+     * Gets the transformer this iterator is using.\n+     * \n+     * @return the transformer.\n      */\n     public Transformer getTransformer() {\n         return transformer;\n     }\n-    \n+\n     /** \n-     * Setter for property transformer.\n+     * Sets the transformer this the iterator to use.\n+     * A null transformer is a no-op transformer.\n      * \n-     * @param transformer New value of property transformer.\n+     * @param transformer  the transformer to use\n      */\n     public void setTransformer(Transformer transformer) {\n         this.transformer = transformer;\n     }\n-    \n-    // Implementation methods\n-    //-------------------------------------------------------------------------\n \n+    //-----------------------------------------------------------------------\n     /**\n-     *  Transforms the given object using the transformer.  If the \n-     *  transformer is null, the original object is returned as-is.\n+     * Transforms the given object using the transformer.\n+     * If the transformer is null, the original object is returned as-is.\n      *\n-     *  @param source  the object to transform\n-     *  @return  the transformed object\n+     * @param source  the object to transform\n+     * @return the transformed object\n      */\n-    protected Object transform( Object source ) {\n-        Transformer transformer = getTransformer();\n-        if ( transformer != null ) {\n-            return transformer.transform( source );\n+    protected Object transform(Object source) {\n+        if (transformer != null) {\n+            return transformer.transform(source);\n         }\n         return source;\n     }", "timestamp": 1067790552, "metainfo": ""}