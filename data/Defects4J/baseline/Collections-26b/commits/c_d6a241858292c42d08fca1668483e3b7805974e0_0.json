{"sha": "d6a241858292c42d08fca1668483e3b7805974e0", "log": "Documentation updates and new test case for specifying null to the ArrayIterator constructor or the setArray(Object) method.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ArrayIterator.java\n+++ b/src/java/org/apache/commons/collections/ArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ArrayIterator.java,v 1.11 2002/03/19 00:54:34 mas Exp $\n- * $Revision: 1.11 $\n- * $Date: 2002/03/19 00:54:34 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ArrayIterator.java,v 1.12 2002/03/19 01:33:12 mas Exp $\n+ * $Revision: 1.12 $\n+ * $Date: 2002/03/19 01:33:12 $\n  *\n  * ====================================================================\n  *\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n-/** Implements {@link Iterator} over an array of objects\n+/** Implements an {@link Iterator} over an array of objects.\n   *\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n   * @author Mauricio S. Moura\n   * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n-  * @version $Revision: 1.11 $\n+  * @version $Revision: 1.12 $\n   */\n public class ArrayIterator implements Iterator {\n     \n     private int index = 0;\n   \n     \n+    /**\n+     *  Construct an ArrayIterator.  Using this constructor, the iterator is\n+     *  equivalent to an empty iterator until {@link #setArray(Object)} is\n+     *  called to establish the array to iterate over.\n+     **/\n     public ArrayIterator() {\n     }\n-    \n+   \n+    /**\n+     *  Construct an ArrayIterator that will iterate over the values in the\n+     *  specified array.\n+     *\n+     *  @param array the array to iterate over.\n+     *\n+     *  @exception IllegalArgumentException if <code>array</code> is not an\n+     *  array.\n+     *\n+     *  @exception NullPointerException \n+     *  if <code>array</code> is <code>null</code>\n+     **/\n     public ArrayIterator(Object array) {\n         setArray( array );\n     }\n \n     // Properties\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Retrieves the array that this iterator is iterating over. \n+     *\n+     *  @return the array this iterator iterates over, or <code>null</code> if\n+     *  the no-arg constructor was used and {@link #setArray(Object)} has never\n+     *  been called with a valid array.\n+     **/\n     public Object getArray() {\n         return array;\n     }\n     \n     /**\n+     *  Changes the array that the ArrayIterator should iterate over.  If an\n+     *  array has previously been set (using the single-arg constructor or this\n+     *  method), that array along with the current iterator position within\n+     *  that array is discarded in favor of the argument to this method.  This\n+     *  method can be used in combination with {@link #getArray()} to \"reset\"\n+     *  the iterator to the beginning of the array:\n+     *\n+     *  <pre>\n+     *    ArrayIterator iterator = ...\n+     *    ...\n+     *    iterator.setArray(iterator.getArray());\n+     *  </pre>\n+     *\n+     *  Note: Using i.setArray(i.getArray()) may throw a NullPointerException\n+     *  if no array has ever been set for the iterator (see {@link\n+     *  #getArray()})\n+     *\n+     *  @param array the array that the iterator should iterate over.\n+     *\n      *  @exception IllegalArgumentException if <code>array</code> is not an\n      *  array.\n+     *\n+     *  @exception NullPointerException \n+     *  if <code>array</code> is <code>null</code>\n      **/\n     public void setArray( Object array ) {\n         // Array.getLength throws IllegalArgumentException if the object is not\n-        // an array.  This call is made before saving the array and resetting\n-        // the index so that the array iterator remains in a consistent state\n-        // if the argument is not an array.\n+        // an array or NullPointerException if the object is null.  This call\n+        // is made before saving the array and resetting the index so that the\n+        // array iterator remains in a consistent state if the argument is not\n+        // an array or is null.\n         this.length = Array.getLength( array );\n         this.array = array;\n         this.index = 0;\n--- a/src/test/org/apache/commons/collections/TestArrayIterator.java\n+++ b/src/test/org/apache/commons/collections/TestArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestArrayIterator.java,v 1.6 2002/02/25 22:48:52 morgand Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/02/25 22:48:52 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestArrayIterator.java,v 1.7 2002/03/19 01:33:12 mas Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/03/19 01:33:12 $\n  *\n  * ====================================================================\n  *\n  * @author James Strachan\n  * @author Mauricio S. Moura\n  * @author Morgan Delagrange\n- * @version $Id: TestArrayIterator.java,v 1.6 2002/02/25 22:48:52 morgand Exp $\n+ * @version $Id: TestArrayIterator.java,v 1.7 2002/03/19 01:33:12 mas Exp $\n  */\n public class TestArrayIterator extends TestIterator {\n     \n \t\t e.getClass().equals((new NoSuchElementException()).getClass()));\n \t}\n     }\n+\n+    public void testNullToConstructor() {\n+        try {\n+            Iterator iter = new ArrayIterator(null);\n+            \n+            fail(\"Constructor should throw a NullPointerException when \" +\n+                 \"constructed with a null array\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n }\n ", "timestamp": 1016501592, "metainfo": ""}