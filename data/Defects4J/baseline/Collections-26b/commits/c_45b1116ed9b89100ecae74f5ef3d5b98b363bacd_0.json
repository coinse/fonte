{"sha": "45b1116ed9b89100ecae74f5ef3d5b98b363bacd", "log": "Added new TestSet class, extending the TestCollection class to test the complete Set contract.  This will be used to test Set implementations and set views of other collections (e.g. Map.entrySet() and Map.keySet()).  Submitted by: Paul Jack ( pjack at sfaf dot org ).   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestSet.java,v 1.1 2002/06/18 02:58:28 mas Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/18 02:58:28 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+/**\n+ *  Tests base {@link Set} methods and contracts.<P>\n+ *\n+ *  Since {@link Set} doesn't stipulate much new behavior that\n+ *  isn't already found in {@link Collection}, this class basically\n+ *  just adds tests for {@link Set#equals} and {@link Set#hashCode}.<P>\n+ *\n+ *  To use, subclass and override the {@link #makeEmptySet}\n+ *  method.  You may have to override other protected methods if your\n+ *  set is not modifiable, or if your set restricts what kinds of\n+ *  elements may be added; see {@link TestCollection} for more details.<P>\n+ *\n+ *  @author Paul Jack\n+ *  @version $Id: TestSet.java,v 1.1 2002/06/18 02:58:28 mas Exp $\n+ */\n+public abstract class TestSet extends TestCollection {\n+\n+\n+    /**\n+     *  Constructor.\n+     *\n+     *  @param name  name for test\n+     */\n+    public TestSet(String name) {\n+        super(name);\n+    }\n+\n+\n+    /**\n+     *  Makes an empty collection by invoking {@link #makeEmptySet}.\n+     *\n+     *  @return an empty collection\n+     */\n+    protected Collection makeCollection() {\n+        return makeEmptySet();\n+    }\n+\n+\n+    /**\n+     *  Makes a full collection by invoking {@link #makeFullSet}.\n+     *\n+     *  @return a full collection\n+     */\n+    protected Collection makeFullCollection() {\n+        return makeFullSet();\n+    }\n+\n+\n+    /**\n+     *  Returns an empty {@link HashSet} for use in modification testing.\n+     *\n+     *  @return a confirmed empty collection\n+     */\n+    protected Collection makeConfirmedCollection() {\n+        return new HashSet();\n+    }\n+\n+\n+    /**\n+     *  Returns a full {@link HashSet} for use in modification testing.\n+     *\n+     *  @return a confirmed full collection\n+     */\n+    protected Collection makeConfirmedFullCollection() {\n+        HashSet set = new HashSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return set;\n+    }\n+\n+\n+    /**\n+     *  Makes an empty set.  The returned set should have no elements.\n+     *\n+     *  @return an empty set\n+     */\n+    protected abstract Set makeEmptySet();\n+\n+\n+    /**\n+     *  Makes a full set by first creating an empty set and then adding\n+     *  all the elements returned by {@link #getFullElements}.\n+     *\n+     *  Override if your set does not support the add operation.\n+     *\n+     *  @return a full set\n+     */\n+    protected Set makeFullSet() {\n+        Set set = makeEmptySet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return set;\n+    }\n+\n+\n+    /**\n+     *  Tests {@link Set#equals}.\n+     */\n+    public void testSetEquals() {\n+        Set set1 = makeEmptySet();\n+        HashSet set2 = new HashSet();\n+        assertEquals(\"Empty sets should be equal\", set1, set2);\n+\n+        set2.add(\"foo\");\n+        assertTrue(\"Nonempty set shouldn't equal empty set\", \n+                   !set1.equals(set2));\n+\n+        set1 = makeFullSet();\n+        set2 = new HashSet();\n+        set2.addAll(Arrays.asList(getFullElements()));\n+        assertEquals(\"Full sets should be equal\", set1, set2);\n+\n+        set2.clear();\n+        set2.addAll(Arrays.asList(getOtherElements()));\n+        assertTrue(\"Sets with different contents shouldn't be equal\", \n+                   !set1.equals(set2));\n+    }\n+\n+\n+    /**\n+     *  Tests {@link Set#hashCode}.\n+     */\n+    public void testSetHashCode() {\n+        Set set1 = makeEmptySet();\n+        Set set2 = new HashSet();\n+        assertEquals(\"Empty sets have equal hashCodes\", set1.hashCode(),\n+                     set2.hashCode());\n+\n+        set1 = makeFullSet();\n+        set2 = new HashSet(Arrays.asList(getFullElements()));\n+        assertEquals(\"Equal sets have equal hashCodes\", set1.hashCode(),\n+                     set2.hashCode());\n+    }\n+\n+\n+    /**\n+     *  Provides additional verifications for sets.\n+     */\n+    protected void verify() {\n+        super.verify();\n+        assertEquals(\"Sets should be equal\", confirmed, collection);\n+        assertEquals(\"Sets should have equal hashCodes\", \n+                     confirmed.hashCode(), collection.hashCode());\n+        HashSet set = new HashSet();\n+        Iterator iterator = collection.iterator();\n+        while (iterator.hasNext()) {\n+            assertTrue(\"Set.iterator should only return unique elements\", \n+                       set.add(iterator.next()));\n+        }\n+    }\n+\n+}", "timestamp": 1024369108, "metainfo": ""}