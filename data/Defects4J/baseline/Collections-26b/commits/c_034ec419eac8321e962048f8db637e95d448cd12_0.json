{"sha": "034ec419eac8321e962048f8db637e95d448cd12", "log": "add containsAny(Collection,Collection) and tests   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.15 2002/08/18 20:11:37 pjack Exp $\n- * $Revision: 1.15 $\n- * $Date: 2002/08/18 20:11:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.16 2002/09/07 19:49:49 rwaldhoff Exp $\n+ * $Revision: 1.16 $\n+ * $Date: 2002/09/07 19:49:49 $\n  *\n  * ====================================================================\n  *\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: CollectionUtils.java,v 1.15 2002/08/18 20:11:37 pjack Exp $\n+ * @version $Revision: 1.16 $ $Date: 2002/09/07 19:49:49 $\n  */\n public class CollectionUtils {\n \n      * in the two given {@link Collection}s.\n      *\n      * @see Collection#retainAll\n+     * @see #containsAny\n      */\n     public static Collection intersection(final Collection a, final Collection b) {\n         ArrayList list = new ArrayList();\n             list.remove(it.next());\n         }\n         return list;\n+    }\n+\n+    /**\n+     * Returns <code>true</code> iff some element of <i>a</i>\n+     * is also an element of <i>b</i> (or, equivalently, if \n+     * some element of <i>b</i> is also an element of <i>a</i>).\n+     * In other words, this method returns <code>true</code>\n+     * iff the {@link #intersection} of <i>a</i> and <i>b</i>\n+     * is not empty.\n+     * @since 2.1\n+     * @param a a non-<code>null</code> Collection\n+     * @param b a non-<code>null</code> Collection\n+     * @return <code>true</code> iff the intersection of <i>a</i> and <i>b</i> is non-empty\n+     * @see #intersection\n+     */\n+    public static boolean containsAny(final Collection a, final Collection b) {\n+        // TO DO: we may be able to optimize this by ensuring either a or b\n+        // is the larger of the two Collections, but I'm not sure which.\n+        for(Iterator iter = a.iterator(); iter.hasNext();) {\n+            if(b.contains(iter.next())) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     /**\n             i++;\n         }\n     }\n+\n     private static final int getFreq(final Object obj, final Map freqMap) {\n         try {\n             return ((Integer)(freqMap.get(obj))).intValue();\n         }\n         return 0;\n     }\n-\n \n     /**\n      *  Base class for collection decorators.  I decided to do it this way\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.5 2002/08/18 15:26:43 scolebourne Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/18 15:26:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.6 2002/09/07 19:49:49 rwaldhoff Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/09/07 19:49:49 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author Rodney Waldhoff\n- * @version $Id: TestCollectionUtils.java,v 1.5 2002/08/18 15:26:43 scolebourne Exp $\n+ * @version $Id: TestCollectionUtils.java,v 1.6 2002/09/07 19:49:49 rwaldhoff Exp $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n         assertEquals(1,CollectionUtils.cardinality(\"e\",_b));\n     }\n \n+    public void testContainsAny() {\n+        Collection empty = new ArrayList(0);\n+        Collection one = new ArrayList(1);\n+        one.add(\"1\");\n+        Collection two = new ArrayList(1);\n+        two.add(\"2\");\n+        Collection three = new ArrayList(1);\n+        three.add(\"3\");\n+        Collection odds = new ArrayList(2);\n+        odds.add(\"1\");\n+        odds.add(\"3\");\n+        \n+        assertTrue(\"containsAny({1},{1,3}) should return true.\",\n+            CollectionUtils.containsAny(one,odds));\n+        assertTrue(\"containsAny({1,3},{1}) should return true.\",\n+            CollectionUtils.containsAny(odds,one));\n+        assertTrue(\"containsAny({3},{1,3}) should return true.\",\n+            CollectionUtils.containsAny(three,odds));\n+        assertTrue(\"containsAny({1,3},{3}) should return true.\",\n+            CollectionUtils.containsAny(odds,three));\n+        assertTrue(\"containsAny({2},{2}) should return true.\",\n+            CollectionUtils.containsAny(two,two));\n+        assertTrue(\"containsAny({1,3},{1,3}) should return true.\",\n+            CollectionUtils.containsAny(odds,odds));\n+        \n+        assertTrue(\"containsAny({2},{1,3}) should return false.\",\n+            !CollectionUtils.containsAny(two,odds));\n+        assertTrue(\"containsAny({1,3},{2}) should return false.\",\n+            !CollectionUtils.containsAny(odds,two));\n+        assertTrue(\"containsAny({1},{3}) should return false.\",\n+            !CollectionUtils.containsAny(one,three));\n+        assertTrue(\"containsAny({3},{1}) should return false.\",\n+            !CollectionUtils.containsAny(three,one));\n+        assertTrue(\"containsAny({1,3},{}) should return false.\",\n+            !CollectionUtils.containsAny(odds,empty));\n+        assertTrue(\"containsAny({},{1,3}) should return false.\",\n+            !CollectionUtils.containsAny(empty,odds));\n+        assertTrue(\"containsAny({},{}) should return false.\",\n+            !CollectionUtils.containsAny(empty,empty));\n+    }\n+\n     public void testUnion() {\n         Collection col = CollectionUtils.union(_a,_b);\n         Map freq = CollectionUtils.getCardinalityMap(col);", "timestamp": 1031428189, "metainfo": ""}