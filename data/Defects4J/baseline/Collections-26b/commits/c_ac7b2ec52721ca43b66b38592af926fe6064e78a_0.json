{"sha": "ac7b2ec52721ca43b66b38592af926fe6064e78a", "log": "Improve documentation   ", "commit": "\n--- a/src/java/org/apache/commons/collections/HashBag.java\n+++ b/src/java/org/apache/commons/collections/HashBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/HashBag.java,v 1.10 2003/12/02 23:36:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/HashBag.java,v 1.11 2003/12/28 16:36:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * A {@link Bag} that is backed by a {@link HashMap}.\n  *\n- * @deprecated Moved to bag subpackage. Due to be removed in v4.0.\n+ * @deprecated Moved to bag subpackage and rewritten internally. Due to be removed in v4.0.\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.10 $ $Date: 2003/12/02 23:36:12 $\n+ * @version $Revision: 1.11 $ $Date: 2003/12/28 16:36:48 $\n  * \n  * @author Chuck Burdick\n  */\n--- a/src/java/org/apache/commons/collections/TreeBag.java\n+++ b/src/java/org/apache/commons/collections/TreeBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TreeBag.java,v 1.10 2003/12/02 23:36:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TreeBag.java,v 1.11 2003/12/28 16:36:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Order will be maintained among the unique representative\n  * members.\n  *\n- * @deprecated Moved to bag subpackage. Due to be removed in v4.0.\n+ * @deprecated Moved to bag subpackage and rewritten internally. Due to be removed in v4.0.\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.10 $ $Date: 2003/12/02 23:36:12 $\n+ * @version $Revision: 1.11 $ $Date: 2003/12/28 16:36:48 $\n  * \n  * @author Chuck Burdick\n  */\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.8 2003/12/28 14:46:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.9 2003/12/28 16:36:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * The map will be used to map bag elements to a number; the number represents\n  * the number of occurrences of that element in the bag.\n  *\n- * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2003/12/28 14:46:28 $\n+ * @since Commons Collections 3.0 (previously DefaultMapBag v2.0)\n+ * @version $Revision: 1.9 $ $Date: 2003/12/28 16:36:48 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n--- a/src/java/org/apache/commons/collections/bag/HashBag.java\n+++ b/src/java/org/apache/commons/collections/bag/HashBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/HashBag.java,v 1.3 2003/12/28 14:55:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/HashBag.java,v 1.4 2003/12/28 16:36:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * interface javadoc carefully as several methods violate the\n  * <code>Collection</code> interface specification.\n  *\n- * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/28 14:55:46 $\n+ * @since Commons Collections 3.0 (previously in main package v2.0)\n+ * @version $Revision: 1.4 $ $Date: 2003/12/28 16:36:48 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/bag/TreeBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TreeBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TreeBag.java,v 1.3 2003/12/28 14:55:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TreeBag.java,v 1.4 2003/12/28 16:36:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * interface javadoc carefully as several methods violate the\n  * <code>Collection</code> interface specification.\n  *\n- * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/28 14:55:46 $\n+ * @since Commons Collections 3.0 (previously in main package v2.0)\n+ * @version $Revision: 1.4 $ $Date: 2003/12/28 16:36:48 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/buffer/BinaryHeap.java\n+++ b/src/java/org/apache/commons/collections/buffer/BinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/Attic/BinaryHeap.java,v 1.1 2003/11/29 18:04:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/Attic/BinaryHeap.java,v 1.2 2003/12/28 16:36:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Buffer heap = BufferUtils.synchronizedBuffer(new BinaryHeap());\n  * </pre>\n  *\n- * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/29 18:04:57 $\n+ * @since Commons Collections 3.0 (previously in main package v1.0)\n+ * @version $Revision: 1.2 $ $Date: 2003/12/28 16:36:48 $\n  * \n  * @author Peter Donald\n  * @author Ram Chidambaram\n--- a/src/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java,v 1.2 2003/11/29 18:14:20 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java,v 1.3 2003/12/28 16:36:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <p>\n  * This buffer prevents null objects from being added.\n  *\n- * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/29 18:14:20 $\n+ * @since Commons Collections 3.0 (previously in main package v2.1)\n+ * @version $Revision: 1.3 $ $Date: 2003/12/28 16:36:48 $\n  * \n  * @author Avalon\n  * @author Berin Loritsch\n--- a/src/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java,v 1.1 2003/11/29 18:04:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java,v 1.2 2003/12/28 16:36:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <p>\n  * This buffer prevents null objects from being added.\n  * \n- * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/29 18:04:57 $\n+ * @since Commons Collections 3.0 (previously in main package v2.1)\n+ * @version $Revision: 1.2 $ $Date: 2003/12/28 16:36:48 $\n  *\n  * @author Avalon\n  * @author Federico Barbieri\n--- a/src/java/org/apache/commons/collections/map/HashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/HashedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.9 2003/12/07 23:59:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.10 2003/12/28 16:36:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n \n /**\n- * A <code>Map</code> implementation that is a general purpose replacement\n- * for <code>HashMap</code>.\n+ * A <code>Map</code> implementation that is a general purpose alternative\n+ * to <code>HashMap</code>.\n  * <p>\n  * This implementation improves on the JDK1.4 HahMap by adding the \n  * {@link org.apache.commons.collections.iterators.MapIterator MapIterator}\n- * functionality and improving performance of <code>putAll</code>.\n+ * functionality and many methods for subclassing.\n  * <p>\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.9 $ $Date: 2003/12/07 23:59:13 $\n+ * @version $Revision: 1.10 $ $Date: 2003/12/28 16:36:48 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/map/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/map/ReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ReferenceMap.java,v 1.3 2003/12/06 13:03:15 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ReferenceMap.java,v 1.4 2003/12/28 16:36:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n \n /**\n- *  Hash-based {@link Map} implementation that allows\n- *  mappings to be removed by the garbage collector.<p>\n- *\n- *  When you construct a <code>ReferenceMap</code>, you can \n- *  specify what kind of references are used to store the\n- *  map's keys and values.  If non-hard references are \n- *  used, then the garbage collector can remove mappings\n- *  if a key or value becomes unreachable, or if the \n- *  JVM's memory is running low.  For information on how\n- *  the different reference types behave, see\n- *  {@link Reference}.<p>\n- *\n- *  Different types of references can be specified for keys\n- *  and values.  The keys can be configured to be weak but\n- *  the values hard, in which case this class will behave\n- *  like a <a href=\"http://java.sun.com/j2se/1.4/docs/api/java/util/WeakHashMap.html\">\n- *  <code>WeakHashMap</code></a>.  However, you\n- *  can also specify hard keys and weak values, or any other\n- *  combination.  The default constructor uses hard keys\n- *  and soft values, providing a memory-sensitive cache.<p>\n- *\n- *  The algorithms used are basically the same as those\n- *  in {@link java.util.HashMap}.  In particular, you \n- *  can specify a load factor and capacity to suit your\n- *  needs.  All optional {@link Map} operations are \n- *  supported.<p>\n- *\n- *  However, this {@link Map} implementation does <I>not</I>\n- *  allow null elements.  Attempting to add a null key or\n- *  or a null value to the map will raise a \n- *  <code>NullPointerException</code>.<p>\n- *\n- *  As usual, this implementation is not synchronized.  You\n- *  can use {@link java.util.Collections#synchronizedMap} to \n- *  provide synchronized access to a <code>ReferenceMap</code>.\n+ * Hash-based <code>Map</code> implementation that allows\n+ * mappings to be removed by the garbage collector.\n+ * <p>\n+ * When you construct a <code>ReferenceMap</code>, you can \n+ * specify what kind of references are used to store the\n+ * map's keys and values.  If non-hard references are \n+ * used, then the garbage collector can remove mappings\n+ * if a key or value becomes unreachable, or if the \n+ * JVM's memory is running low.  For information on how\n+ * the different reference types behave, see\n+ * {@link Reference}.\n+ * <p>\n+ * Different types of references can be specified for keys\n+ * and values.  The keys can be configured to be weak but\n+ * the values hard, in which case this class will behave\n+ * like a <a href=\"http://java.sun.com/j2se/1.4/docs/api/java/util/WeakHashMap.html\">\n+ * <code>WeakHashMap</code></a>.  However, you\n+ * can also specify hard keys and weak values, or any other\n+ * combination.  The default constructor uses hard keys\n+ * and soft values, providing a memory-sensitive cache.\n+ * <p>\n+ * The algorithms used are basically the same as those\n+ * in {@link java.util.HashMap}.  In particular, you \n+ * can specify a load factor and capacity to suit your\n+ * needs.  All optional {@link Map} operations are \n+ * supported.\n+ * <p>\n+ * However, this {@link Map} implementation does <I>not</I>\n+ * allow null elements.  Attempting to add a null key or\n+ * or a null value to the map will raise a \n+ * <code>NullPointerException</code>.\n+ * <p>\n+ * As usual, this implementation is not synchronized.  You\n+ * can use {@link java.util.Collections#synchronizedMap} to \n+ * provide synchronized access to a <code>ReferenceMap</code>.\n  *\n  * @see java.lang.ref.Reference\n  * \n- * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/06 13:03:15 $\n+ * @since Commons Collections 3.0 (previously in main package v2.1)\n+ * @version $Revision: 1.4 $ $Date: 2003/12/28 16:36:48 $\n  * \n  * @author Paul Jack\n  */\n--- a/src/java/org/apache/commons/collections/map/StaticBucketMap.java\n+++ b/src/java/org/apache/commons/collections/map/StaticBucketMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/StaticBucketMap.java,v 1.3 2003/12/14 13:00:03 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/StaticBucketMap.java,v 1.4 2003/12/28 16:36:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * iterations, or if you can make your own guarantees about how bulk \n  * operations will affect the map.<p>\n  *\n- * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/14 13:00:03 $\n+ * @since Commons Collections 3.0 (previously in main package v2.1)\n+ * @version $Revision: 1.4 $ $Date: 2003/12/28 16:36:48 $\n  * \n  * @author Berin Loritsch\n  * @author Gerhard Froehlich", "timestamp": 1072629408, "metainfo": ""}