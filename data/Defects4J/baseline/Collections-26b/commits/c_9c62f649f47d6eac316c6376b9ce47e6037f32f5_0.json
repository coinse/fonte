{"sha": "9c62f649f47d6eac316c6376b9ce47e6037f32f5", "log": "Added tests for PredicatedBag, PredicatedSortedBag   ", "commit": "\n--- a/src/test/org/apache/commons/collections/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.7 2003/09/03 23:54:25 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.8 2003/09/09 03:03:57 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections decorators tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2003/09/03 23:54:25 $\n+ * @version $Revision: 1.8 $ $Date: 2003/09/09 03:03:57 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestTransformedSortedBag.suite());\n         suite.addTest(TestTransformedSortedMap.suite());\n         suite.addTest(TestTransformedSortedSet.suite());\n+        suite.addTest(TestPredicatedBag.suite());\n+        suite.addTest(TestPredicatedSortedBag.suite());\n         \n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedBag.java,v 1.1 2003/09/09 03:03:57 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.HashBag;\n+import org.apache.commons.collections.TestBag;\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link PredicatedBag}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/09 03:03:57 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedBag extends TestBag {\n+    \n+    public TestPredicatedBag(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedBag.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    protected Predicate getPredicate() {\n+        return new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n+            }\n+        };\n+    }\n+    \n+    protected Bag decorateBag(HashBag bag, Predicate predicate) {\n+        return PredicatedBag.decorate(bag, predicate);\n+    }\n+\n+    public Bag makeBag() {\n+        return decorateBag(new HashBag(), getPredicate());\n+    }\n+\n+    public void testlegalAddRemove() {\n+        Bag bag = makeBag();\n+        assertEquals(0, bag.size());\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"1\"};\n+        for (int i = 0; i < els.length; i++) {\n+            bag.add(els[i]);\n+            assertEquals(i + 1, bag.size());\n+            assertEquals(true, bag.contains(els[i]));\n+        }\n+        Set set = ((PredicatedBag) bag).uniqueSet();\n+        assertTrue(\"Unique set contains the first element\",set.contains(els[0]));\n+        assertEquals(true, bag.remove(els[0])); \n+        set = ((PredicatedBag) bag).uniqueSet();\n+        assertTrue(\"Unique set now does not contain the first element\",\n+            !set.contains(els[0])); \n+    }\n+ \n+    public void testIllegalAdd() {\n+        Bag bag = makeBag();\n+        Integer i = new Integer(3);\n+        try {\n+            bag.add(i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !bag.contains(i));   \n+    }\n+\n+    public void testIllegalDecorate() {\n+        HashBag elements = new HashBag();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            Bag bag = decorateBag(elements, getPredicate());\n+            fail(\"Bag contains an element that should fail the predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        try {\n+            Bag bag = decorateBag(new HashBag(), null);\n+            fail(\"Expectiing IllegalArgumentException for null predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }              \n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedSortedBag.java,v 1.1 2003/09/09 03:03:57 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.SortedBag;\n+import org.apache.commons.collections.TreeBag;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.TestBag;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link PredicatedSortedBag}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/09 03:03:57 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedSortedBag extends TestBag {\n+    \n+    private SortedBag emptyBag = new TreeBag();\n+    private SortedBag nullBag = null;\n+    \n+    public TestPredicatedSortedBag(String testName) {\n+        super(testName);\n+    }\n+    \n+    protected Predicate getPredicate() {\n+        return new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n+            }\n+        };\n+    }\n+    \n+    protected SortedBag decorateBag(SortedBag bag, Predicate predicate) {\n+        return PredicatedSortedBag.decorate(bag, predicate);\n+    }\n+    \n+    public Bag makeBag() {\n+        return decorateBag(emptyBag, getPredicate());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedSortedBag.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedSortedBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    public void testDecorate() {\n+        SortedBag bag = decorateBag(emptyBag, getPredicate());\n+        SortedBag bag2 = ((PredicatedSortedBag) bag).getSortedBag();\n+        try {\n+            SortedBag bag3 = decorateBag(emptyBag, null);\n+            fail(\"Expecting IllegalArgumentException for null predicate\");\n+        } catch (IllegalArgumentException e) {}\n+        try {\n+            SortedBag bag4 = decorateBag(nullBag, getPredicate());\n+            fail(\"Expecting IllegalArgumentException for null bag\");\n+        } catch (IllegalArgumentException e) {}\n+    }\n+    \n+    public void testSortOrder() {\n+        PredicatedSortedBag bag = \n+            (PredicatedSortedBag) decorateBag(emptyBag, getPredicate());\n+        String one = \"one\";\n+        String two = \"two\";\n+        String three = \"three\";\n+        bag.add(one);\n+        bag.add(two);\n+        bag.add(three);\n+        assertEquals(\"first element\", bag.first(), one);\n+        assertEquals(\"last element\", bag.last(), two); \n+        Comparator c = bag.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", \n+            c == null);\n+    }\n+}", "timestamp": 1063076637, "metainfo": ""}