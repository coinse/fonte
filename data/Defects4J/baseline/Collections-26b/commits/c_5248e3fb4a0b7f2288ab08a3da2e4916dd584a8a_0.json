{"sha": "5248e3fb4a0b7f2288ab08a3da2e4916dd584a8a", "log": "Fixed javadoc links.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ArrayStack.java\n+++ b/src/java/org/apache/commons/collections/ArrayStack.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ArrayStack.java,v 1.6 2002/07/03 02:09:06 mas Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/07/03 02:09:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ArrayStack.java,v 1.7 2002/07/03 02:16:48 mas Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/07/03 02:16:48 $\n  *\n  * ====================================================================\n  *\n  * The removal order of an <Code>ArrayStack</Code> is based on insertion \n  * order: The most recently added element is removed first.  The iteration\n  * order is <I>not</I> the same as the removal order.  The iterator returns\n- * elements from the bottom up, whereas the {@link remove()} method removes\n+ * elements from the bottom up, whereas the {@link #remove()} method removes\n  * them from the top down.\n  *\n  * @since 1.0\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.6 $ $Date: 2002/07/03 02:09:06 $\n+ * @version $Revision: 1.7 $ $Date: 2002/07/03 02:16:48 $\n  * @see java.util.Stack\n  */\n \n--- a/src/java/org/apache/commons/collections/BinaryHeap.java\n+++ b/src/java/org/apache/commons/collections/BinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.8 2002/07/03 02:09:06 mas Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/07/03 02:09:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.9 2002/07/03 02:16:48 mas Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/07/03 02:16:48 $\n  *\n  * ====================================================================\n  *\n  *\n  * The removal order of a binary heap is based on either the natural sort\n  * order of its elements or a specified {@link Comparator}.  The \n- * {@link remove()} method always returns the first element as determined\n+ * {@link #remove()} method always returns the first element as determined\n  * by the sort order.  (The <Code>isMinHeap</Code> flag in the constructors\n- * can be used to reverse the sort order, in which case {@link remove()}\n+ * can be used to reverse the sort order, in which case {@link #remove()}\n  * will always remove the last element.)  The removal order is \n  * <I>not</I> the same as the order of iteration; elements are\n  * returned by the iterator in no particular order.<P>\n  *\n- * The {@link add(Object)} and {@link remove()} operations perform\n- * in logarithmic time.  The {@link get()} operation performs in constant\n+ * The {@link #add(Object)} and {@link #remove()} operations perform\n+ * in logarithmic time.  The {@link #get()} operation performs in constant\n  * time.  All other operations perform in linear time or worse.<P>\n  *\n  * Note that this implementation is not synchronized.  Use \n- * {@link BufferUtils.synchronizedBuffer(Buffer)} to provide\n+ * {@link BufferUtils#synchronizedBuffer(Buffer)} to provide\n  * synchronized access to a <Code>BinaryHeap</Code>:\n  *\n  * <Pre>\n \n \n     /**\n-     *  Adds an object to this heap.  Same as {@link insert(Object)}.\n+     *  Adds an object to this heap.  Same as {@link #insert(Object)}.\n      *\n      *  @param o  the object to add\n      *  @return true, always\n \n \n     /**\n-     *  Returns the priority element.  Same as {@link peek()}.\n+     *  Returns the priority element.  Same as {@link #peek()}.\n      *\n      *  @return the priority element\n      *  @throws BufferUnderflowException if this heap is empty\n \n \n     /**\n-     *  Removes the priority element.  Same as {@link pop()}.\n+     *  Removes the priority element.  Same as {@link #pop()}.\n      *\n      *  @return the removed priority element\n      *  @throws BufferUnderflowException if this heap is empty\n--- a/src/java/org/apache/commons/collections/BoundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/BoundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BoundedFifoBuffer.java,v 1.2 2002/07/03 01:59:50 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/07/03 01:59:50 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BoundedFifoBuffer.java,v 1.3 2002/07/03 02:16:48 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/07/03 02:16:48 $\n  *\n  * ====================================================================\n  *\n  * insertion order; elements are removed in the same order in which they\n  * were added.  The iteration order is the same as the removal order.<P>\n  *\n- * The {@link add(Object}, {@link remove()} and {@link get()} operations\n+ * The {@link #add(Object)}, {@link #remove()} and {@link #get()} operations\n  * all perform in constant time.  All other operations perform in linear\n  * time or worse.\n  *\n  *\n  * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n  * @author Paul Jack\n- * @version $Id: BoundedFifoBuffer.java,v 1.2 2002/07/03 01:59:50 mas Exp $\n+ * @version $Id: BoundedFifoBuffer.java,v 1.3 2002/07/03 02:16:48 mas Exp $\n  */\n public class BoundedFifoBuffer extends AbstractCollection implements Buffer\n {\n--- a/src/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/java/org/apache/commons/collections/BufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.2 2002/07/03 01:59:50 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/07/03 01:59:50 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.3 2002/07/03 02:16:48 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/07/03 02:16:48 $\n  *\n  * ====================================================================\n  *\n  *  Contains static utility methods for operating on {@link Buffer} objects.\n  *\n  *  @author Paul Jack\n- *  @version $Id: BufferUtils.java,v 1.2 2002/07/03 01:59:50 mas Exp $\n+ *  @version $Id: BufferUtils.java,v 1.3 2002/07/03 02:16:48 mas Exp $\n  */\n public class BufferUtils {\n \n \n     /**\n      *  Returns a synchronized buffer backed by the given buffer that will\n-     *  block on {@link Buffer.get()} and {@link Buffer.remove()} operations.\n-     *  If the buffer is empty, then the {@link Buffer.get()} and \n-     *  {@link Buffer.remove()} operations will block until new elements\n+     *  block on {@link Buffer#get()} and {@link Buffer#remove()} operations.\n+     *  If the buffer is empty, then the {@link Buffer#get()} and \n+     *  {@link Buffer#remove()} operations will block until new elements\n      *  are added to the buffer, rather than immediately throwing a \n      *  <Code>BufferUnderflowException</Code>.\n      *\n--- a/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java,v 1.2 2002/07/03 01:59:50 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/07/03 01:59:50 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/UnboundedFifoBuffer.java,v 1.3 2002/07/03 02:16:48 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/07/03 02:16:48 $\n  *\n  * ====================================================================\n  *\n  * order; elements are removed in the same order in which they were added.\n  * The iteration order is the same as the removal order.<P>\n  *\n- * The {@link remove()} and {@link get()} operations perform in constant time.\n- * The {@link add()} operation performs in amortized constant time.  All\n+ * The {@link #remove()} and {@link #get()} operations perform in constant time.\n+ * The {@link #add(Object)} operation performs in amortized constant time.  All\n  * other operations perform in linear time or worse.<P>\n  *\n  * Note that this implementation is not synchronized.  The following can be\n  * @author  <a href=\"fede@apache.org\">Federico Barbieri</a>\n  * @author  <a href=\"bloritsch@apache.org\">Berin Loritsch</a>\n  * @author Paul Jack\n- * @version CVS $Revision: 1.2 $ $Date: 2002/07/03 01:59:50 $\n+ * @version CVS $Revision: 1.3 $ $Date: 2002/07/03 02:16:48 $\n  * @since Avalon 4.0\n  */\n public final class UnboundedFifoBuffer extends AbstractCollection implements Buffer", "timestamp": 1025662608, "metainfo": ""}