{"sha": "de09f923b00e9bd1fddc36d1aed858852b784e0d", "log": "add BaseProxyIntCollection, BaseProxyIntList, and tests   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/decorators/BaseProxyIntCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/decorators/Attic/BaseProxyIntCollection.java,v 1.1 2003/05/04 12:58:48 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.decorators;\n+\n+import org.apache.commons.collections.primitives.IntCollection;\n+import org.apache.commons.collections.primitives.IntIterator;\n+\n+/**\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/05/04 12:58:48 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+abstract class BaseProxyIntCollection implements IntCollection {\n+    protected abstract IntCollection getProxiedCollection();\n+\n+    protected BaseProxyIntCollection() {\n+    }\n+    \n+\n+    \n+    public boolean add(int element) {\n+        return getProxiedCollection().add(element);\n+    }\n+\n+    public boolean addAll(IntCollection c) {\n+        return getProxiedCollection().addAll(c);\n+    }\n+\n+    public void clear() {\n+        getProxiedCollection().clear();\n+    }\n+\n+    public boolean contains(int element) {\n+        return getProxiedCollection().contains(element);\n+    }\n+\n+    public boolean containsAll(IntCollection c) {\n+        return getProxiedCollection().containsAll(c);\n+    }\n+\n+    public boolean isEmpty() {\n+        return getProxiedCollection().isEmpty();\n+    }\n+\n+    public IntIterator iterator() {\n+        return getProxiedCollection().iterator();\n+    }\n+\n+    public boolean removeAll(IntCollection c) {\n+        return getProxiedCollection().removeAll(c);\n+    }\n+\n+    public boolean removeElement(int element) {\n+        return getProxiedCollection().removeElement(element);\n+    }\n+\n+    public boolean retainAll(IntCollection c) {\n+        return getProxiedCollection().retainAll(c);\n+    }\n+\n+    public int size() {\n+        return getProxiedCollection().size();\n+    }\n+\n+    public int[] toArray() {\n+        return getProxiedCollection().toArray();\n+    }\n+\n+    public int[] toArray(int[] a) {\n+        return getProxiedCollection().toArray(a);\n+    }\n+\n+    // TODO: Add note about possible contract violations here.\n+    \n+    public boolean equals(Object obj) {\n+        return getProxiedCollection().equals(obj);\n+    }\n+\n+    public int hashCode() {\n+        return getProxiedCollection().hashCode();\n+    }\n+\n+    public String toString() {\n+        return getProxiedCollection().toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/decorators/BaseProxyIntList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/decorators/Attic/BaseProxyIntList.java,v 1.1 2003/05/04 12:58:48 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.decorators;\n+\n+import org.apache.commons.collections.primitives.IntCollection;\n+import org.apache.commons.collections.primitives.IntList;\n+import org.apache.commons.collections.primitives.IntListIterator;\n+\n+/**\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/05/04 12:58:48 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+abstract class BaseProxyIntList extends BaseProxyIntCollection implements IntList {\n+    protected abstract IntList getProxiedList();\n+\n+    protected final IntCollection getProxiedCollection() {\n+        return getProxiedList();\n+    }\n+\n+    protected BaseProxyIntList() {\n+    }\n+\n+    public void add(int index, int element) {\n+        getProxiedList().add(index,element);\n+    }\n+\n+    public boolean addAll(int index, IntCollection collection) {        \n+        return getProxiedList().addAll(index,collection);\n+    }\n+\n+    public int get(int index) {\n+        return getProxiedList().get(index);\n+    }\n+\n+    public int indexOf(int element) {\n+        return getProxiedList().indexOf(element);\n+    }\n+\n+    public int lastIndexOf(int element) {\n+        return getProxiedList().lastIndexOf(element);\n+    }\n+\n+    public IntListIterator listIterator() {\n+        return getProxiedList().listIterator();\n+    }\n+\n+    public IntListIterator listIterator(int index) {\n+        return getProxiedList().listIterator(index);\n+    }\n+\n+    public int removeElementAt(int index) {\n+        return getProxiedList().removeElementAt(index);\n+    }\n+\n+    public int set(int index, int element) {\n+        return getProxiedList().set(index,element);\n+    }\n+\n+    public IntList subList(int fromIndex, int toIndex) {\n+        return getProxiedList().subList(fromIndex,toIndex);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/decorators/TestAll.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/decorators/Attic/TestAll.java,v 1.1 2003/05/04 12:58:48 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/05/04 12:58:48 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestAll extends TestCase {\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestAll.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+\n+        suite.addTest(TestBaseProxyIntCollection.suite());\n+        // TODO: suite.addTest(TestBaseProxyIntList.suite());\n+\n+        return suite;\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/decorators/TestBaseProxyIntCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/decorators/Attic/TestBaseProxyIntCollection.java,v 1.1 2003/05/04 12:58:48 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.primitives.IntCollection;\n+import org.apache.commons.collections.primitives.IntIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/05/04 12:58:48 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestBaseProxyIntCollection extends TestCase {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestBaseProxyIntCollection(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestBaseProxyIntCollection.class);\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n+    public void testCollectionCallsAreProxied() {\n+        final InvocationCounter proxied = new InvocationCounter();\n+        IntCollection collection = new BaseProxyIntCollection() {\n+            protected IntCollection getProxiedCollection() {\n+                return proxied;\n+            }\n+        };\n+        \n+        assertEquals(0,proxied.getAddCount());\n+        collection.add(1);\n+        assertEquals(1,proxied.getAddCount());\n+\n+        assertEquals(0,proxied.getAddAllCount());\n+        collection.addAll(null);\n+        assertEquals(1,proxied.getAddAllCount());\n+        \n+        assertEquals(0,proxied.getClearCount());\n+        collection.clear();\n+        assertEquals(1,proxied.getClearCount());\n+\n+        assertEquals(0,proxied.getContainsCount());\n+        collection.contains(1);\n+        assertEquals(1,proxied.getContainsCount());\n+\n+        assertEquals(0,proxied.getContainsAllCount());\n+        collection.containsAll(null);\n+        assertEquals(1,proxied.getContainsAllCount());\n+\n+        assertEquals(0,proxied.getIsEmptyCount());\n+        collection.isEmpty();\n+        assertEquals(1,proxied.getIsEmptyCount());\n+\n+        assertEquals(0,proxied.getIteratorCount());\n+        collection.iterator();\n+        assertEquals(1,proxied.getIteratorCount());\n+\n+        assertEquals(0,proxied.getRemoveAllCount());\n+        collection.removeAll(null);\n+        assertEquals(1,proxied.getRemoveAllCount());\n+\n+        assertEquals(0,proxied.getRetainAllCount());\n+        collection.retainAll(null);\n+        assertEquals(1,proxied.getRetainAllCount());\n+\n+        assertEquals(0,proxied.getRemoveElementCount());\n+        collection.removeElement(1);\n+        assertEquals(1,proxied.getRemoveElementCount());\n+\n+        assertEquals(0,proxied.getSizeCount());\n+        collection.size();\n+        assertEquals(1,proxied.getSizeCount());\n+\n+        assertEquals(0,proxied.getToArrayIntArrayCount());\n+        collection.toArray(new int[0]);\n+        assertEquals(1,proxied.getToArrayIntArrayCount());\n+        \n+        assertEquals(0,proxied.getToArrayCount());\n+        collection.toArray();\n+        assertEquals(1,proxied.getToArrayCount());\n+        \n+        assertEquals(0,proxied.getToStringCount());\n+        collection.toString();\n+        assertEquals(1,proxied.getToStringCount());\n+        \n+        assertEquals(0,proxied.getEqualsCount());\n+        collection.equals(null);\n+        assertEquals(1,proxied.getEqualsCount());\n+        \n+        assertEquals(0,proxied.getHashCodeCount());\n+        collection.hashCode();\n+        assertEquals(1,proxied.getHashCodeCount());\n+        \n+    }\n+    \n+    // inner classes\n+    // ------------------------------------------------------------------------\n+\n+    static class InvocationCounter implements IntCollection {\n+        private int _toArrayIntArray;\n+        private int _toArray;\n+        private int _size;\n+        private int _retainAll;\n+        private int _removeElement;\n+        private int _removeAll;\n+        private int _iterator;\n+        private int _isEmpty;\n+        private int _containsAll;\n+        private int _contains;\n+        private int _clear;\n+        private int _addAll;\n+        private int _add;\n+\n+        private int _equals;\n+        private int _toString;\n+        private int _hashCode;\n+\n+        public boolean add(int element) {\n+            _add++;\n+            return false;\n+        }\n+\n+        public boolean addAll(IntCollection c) {\n+            _addAll++;\n+            return false;\n+        }\n+\n+        public void clear() {\n+            _clear++;\n+        }\n+\n+        public boolean contains(int element) {\n+            _contains++;\n+            return false;\n+        }\n+\n+        public boolean containsAll(IntCollection c) {\n+            _containsAll++;\n+            return false;\n+        }\n+\n+        public boolean isEmpty() {\n+            _isEmpty++;\n+            return false;\n+        }\n+\n+        public IntIterator iterator() {\n+            _iterator++;\n+            return null;\n+        }\n+\n+        public boolean removeAll(IntCollection c) {\n+            _removeAll++;\n+            return false;\n+        }\n+\n+        public boolean removeElement(int element) {\n+            _removeElement++;\n+            return false;\n+        }\n+\n+        public boolean retainAll(IntCollection c) {\n+            _retainAll++;\n+            return false;\n+        }\n+\n+        public int size() {\n+            _size++;\n+            return 0;\n+        }\n+\n+        public int[] toArray() {\n+            _toArray++;\n+            return null;\n+        }\n+\n+        public int[] toArray(int[] a) {\n+            _toArrayIntArray++;\n+            return null;\n+        }\n+\n+        public boolean equals(Object obj) {\n+            _equals++;\n+            return false;\n+        }\n+\n+        public int hashCode() {\n+            _hashCode++;\n+            return 0;\n+        }\n+\n+        public String toString() {\n+            _toString++;\n+            return null;\n+        }\n+\n+\n+        public int getAddCount() {\n+            return _add;\n+        }\n+\n+        public int getAddAllCount() {\n+            return _addAll;\n+        }\n+\n+        public int getClearCount() {\n+            return _clear;\n+        }\n+\n+        public int getContainsCount() {\n+            return _contains;\n+        }\n+\n+        public int getContainsAllCount() {\n+            return _containsAll;\n+        }\n+\n+        public int getIsEmptyCount() {\n+            return _isEmpty;\n+        }\n+\n+        public int getIteratorCount() {\n+            return _iterator;\n+        }\n+\n+        public int getRemoveAllCount() {\n+            return _removeAll;\n+        }\n+\n+        public int getRemoveElementCount() {\n+            return _removeElement;\n+        }\n+\n+        public int getRetainAllCount() {\n+            return _retainAll;\n+        }\n+\n+        public int getSizeCount() {\n+            return _size;\n+        }\n+\n+        public int getToArrayCount() {\n+            return _toArray;\n+        }\n+\n+        public int getToArrayIntArrayCount() {\n+            return _toArrayIntArray;\n+        }\n+\n+        public int getEqualsCount() {\n+            return _equals;\n+        }\n+\n+        public int getHashCodeCount() {\n+            return _hashCode;\n+        }\n+\n+        public int getToStringCount() {\n+            return _toString;\n+        }\n+\n+    }\n+}", "timestamp": 1052053128, "metainfo": ""}