{"sha": "be1e92fa7936b62c044e274f2f44cb7fd43d71d5", "log": "Complete unit tests for FluentIterable, fix exception for toArray.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/FluentIterable.java\n+++ b/src/main/java/org/apache/commons/collections4/FluentIterable.java\n      * @see {@link org.apache.commons.collections4.iterators.CollatingIterator CollatingIterator}\n      */\n     public FluentIterable<E> collate(final Iterable<? extends E> other) {\n-        return of(IterableUtils.collatedIterable(null, iterable, other));\n+        return of(IterableUtils.collatedIterable(iterable, other));\n     }\n \n     /**\n     // ----------------------------------------------------------------------\n \n     /** {@inheritDoc} */\n+    @Override\n     public Iterator<E> iterator() {\n         return iterable.iterator();\n     }\n      *\n      * @param arrayClass  the class of array to create\n      * @return an array of the iterable contents\n-     * @throws ClassCastException if arrayClass is invalid\n+     * @throws ArrayStoreException if arrayClass is invalid\n      */\n     public E[] toArray(final Class<E> arrayClass) {\n         return IteratorUtils.toArray(iterator(), arrayClass);\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n      * @param arrayClass  the class of array to create\n      * @return an array of the iterator contents\n      * @throws NullPointerException if iterator parameter or arrayClass is null\n-     * @throws ClassCastException if the arrayClass is invalid\n+     * @throws ArrayStoreException if the arrayClass is invalid\n      */\n     public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n         if (iterator == null) {\n             throw new NullPointerException(\"Array class must not be null\");\n         }\n         final List<E> list = toList(iterator, 100);\n-        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n+        @SuppressWarnings(\"unchecked\")\n         final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n         return list.toArray(array);\n     }\n--- a/src/test/java/org/apache/commons/collections4/FluentIterableTest.java\n+++ b/src/test/java/org/apache/commons/collections4/FluentIterableTest.java\n  */\n package org.apache.commons.collections4;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Enumeration;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import org.junit.Before;\n import org.junit.Test;\n     }\n \n     private static Predicate<Number> EVEN = new Predicate<Number>() {\n+        @Override\n         public boolean evaluate(final Number input) {\n             return input.intValue() % 2 == 0;\n         }\n         } catch (NullPointerException npe) {\n             // expected\n         }\n+    }\n+\n+    @Test\n+    public void collateWithComparator() {\n+        List<Integer> result =\n+                FluentIterable\n+                    .of(iterableOdd)\n+                    .collate(iterableEven, ComparatorUtils.<Integer>naturalComparator())\n+                    .toList();\n+\n+        List<Integer> combinedList = new ArrayList<Integer>();\n+        CollectionUtils.addAll(combinedList, iterableOdd);\n+        CollectionUtils.addAll(combinedList, iterableEven);\n+        Collections.sort(combinedList);\n+        assertEquals(combinedList, result);\n+\n+        // null comparator is equivalent to natural ordering\n+        result = FluentIterable.of(iterableOdd).collate(iterableEven, null).toList();\n+        assertEquals(combinedList, result);\n     }\n \n     @Test\n     }\n \n     @Test\n+    public void forEach() {\n+        final AtomicInteger sum = new AtomicInteger(0);\n+        Closure<Integer> closure = new Closure<Integer>() {\n+            @Override\n+            public void execute(Integer input) {\n+                sum.addAndGet(input);\n+            }\n+        };\n+\n+        FluentIterable.of(iterableA).forEach(closure);\n+        int expectedSum = 0;\n+        for (Integer i : iterableA) {\n+            expectedSum += i;\n+        }\n+        assertEquals(expectedSum, sum.get());\n+\n+        try {\n+            FluentIterable.of(iterableA).forEach(null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n     public void limit() {\n         List<Integer> result = FluentIterable.of(iterableA).limit(3).toList();\n         assertEquals(3, result.size());\n         assertSame(iterable1, iterable2);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void zip() {\n         List<Integer> result = FluentIterable.of(iterableOdd).zip(iterableEven).toList();\n             // expected\n         }\n         \n-        result = FluentIterable.of(Arrays.asList(1, 4, 7)).zip(Arrays.asList(2, 5, 8), Arrays.asList(3, 6, 9)).toList();\n+        result = FluentIterable\n+                    .of(Arrays.asList(1, 4, 7))\n+                    .zip(Arrays.asList(2, 5, 8), Arrays.asList(3, 6, 9))\n+                    .toList();\n         combinedList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n         assertEquals(combinedList, result);\n+    }\n+\n+    @Test\n+    public void asEnumeration() {\n+        Enumeration<Long> enumeration = FluentIterable.of(iterableB).asEnumeration();\n+        List<Long> result = EnumerationUtils.toList(enumeration);\n+        assertEquals(iterableB, result);\n+\n+        enumeration = FluentIterable.<Long>empty().asEnumeration();\n+        assertFalse(enumeration.hasMoreElements());\n     }\n \n     @Test\n         }\n         assertEquals(0, FluentIterable.of(emptyIterable).size());\n         assertEquals(IterableUtils.toList(iterableOdd).size(), FluentIterable.of(iterableOdd).size());\n+    }\n+\n+    @Test\n+    public void eval() {\n+        List<Integer> listNumbers = new ArrayList<Integer>();\n+        listNumbers.addAll(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n+        FluentIterable<Integer> iterable = FluentIterable.of(listNumbers).filter(EVEN);\n+        FluentIterable<Integer> materialized = iterable.eval();\n+\n+        listNumbers.addAll(Arrays.asList(11, 12, 13, 14, 15, 16, 17, 18, 19, 20));\n+        assertEquals(5, materialized.size());\n+        assertEquals(10, iterable.size());\n+\n+        assertEquals(Arrays.asList(2, 4, 6, 8, 10), materialized.toList());\n+        assertEquals(Arrays.asList(2, 4, 6, 8, 10, 12, 14, 16, 18, 20), iterable.toList());\n     }\n \n     @Test\n     }\n \n     @Test\n+    public void iterator() {\n+        Iterator<Integer> iterator = FluentIterable.of(iterableA).iterator();\n+        assertTrue(iterator.hasNext());\n+\n+        iterator = FluentIterable.<Integer>empty().iterator();\n+        assertFalse(iterator.hasNext());\n+    }\n+\n+    @Test\n     public void get() {\n         assertEquals(2, FluentIterable.of(iterableEven).get(0).intValue());\n \n             // expected\n         }\n     }\n+\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @Test\n+    public void toArray() {\n+        Long[] arr = new Long[] {1L, 2L, 3L, 4L, 5L};\n+        Long[] result = FluentIterable.of(arr).toArray(Long.class);\n+        assertNotNull(result);\n+        assertArrayEquals(arr, result);\n+\n+        try {\n+            FluentIterable.of(arr).toArray((Class) String.class);\n+        } catch (ArrayStoreException ase) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void testToString() {\n+        String result = FluentIterable.of(iterableA).toString();\n+        assertEquals(iterableA.toString(), result);\n+\n+        result = FluentIterable.empty().toString();\n+        assertEquals(\"[]\", result);\n+    }\n }\n--- a/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n-import static org.apache.commons.collections4.functors.EqualPredicate.*;\n-import static org.junit.Assert.*;\n+import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n     }\n \n     private static Predicate<Number> EQUALS_TWO = new Predicate<Number>() {\n+        @Override\n         public boolean evaluate(final Number input) {\n             return input.intValue() == 2;\n         }\n     };\n \n     private static Predicate<Number> EVEN = new Predicate<Number>() {\n+        @Override\n         public boolean evaluate(final Number input) {\n             return input.intValue() % 2 == 0;\n         }\n \n         final Equator<String> secondLetterEquator = new Equator<String>() {\n \n+            @Override\n             public boolean equate(String o1, String o2) {\n                 return o1.charAt(1) == o2.charAt(1);\n             }\n \n+            @Override\n             public int hash(String o) {\n                 return o.charAt(1);\n             }\n         }\n \n         Predicate<Integer> lessThanFive = new Predicate<Integer>() {\n+            @Override\n             public boolean evaluate(Integer object) {\n                 return object < 5;\n             }\n         assertTrue(IterableUtils.matchesAll(iterableA, lessThanFive));\n \n         Predicate<Integer> lessThanFour = new Predicate<Integer>() {\n+            @Override\n             public boolean evaluate(Integer object) {\n                 return object < 4;\n             }\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testToString() {\n         String result = IterableUtils.toString(iterableA);\n         assertEquals(\"[]\", result);\n \n         result = IterableUtils.toString(iterableA, new Transformer<Integer, String>() {\n+            @Override\n             public String transform(Integer input) {\n                 return new Integer(input * 2).toString();\n             }\n         assertEquals(\"[2, 4, 4, 6, 6, 6, 8, 8, 8, 8]\", result);\n \n         result = IterableUtils.toString(new ArrayList<Integer>(), new Transformer<Integer, String>() {\n+            @Override\n             public String transform(Integer input) {\n                 fail(\"not supposed to reach here\");\n                 return \"\";\n         assertEquals(\"[]\", result);\n \n         result = IterableUtils.toString(null, new Transformer<Integer, String>() {\n+            @Override\n             public String transform(Integer input) {\n                 fail(\"not supposed to reach here\");\n                 return \"\";\n     public void testToStringDelimiter() {\n         \n         Transformer<Integer, String> transformer = new Transformer<Integer, String>() {\n+            @Override\n             public String transform(Integer input) {\n                 return new Integer(input * 2).toString();\n             }\n     @Test\n     public void testToStringWithNullArguments() {\n         String result = IterableUtils.toString(null, new Transformer<Integer, String>() {\n+            @Override\n             public String transform(Integer input) {\n                 fail(\"not supposed to reach here\");\n                 return \"\";\n \n         try {\n             IterableUtils.toString(new ArrayList<Integer>(), new Transformer<Integer, String>() {\n+                @Override\n                 public String transform(Integer input) {\n                     fail(\"not supposed to reach here\");\n                     return \"\";\n \n         try {\n             IterableUtils.toString(new ArrayList<Integer>(), new Transformer<Integer, String>() {\n+                @Override\n                 public String transform(Integer input) {\n                     fail(\"not supposed to reach here\");\n                     return \"\";\n \n         try {\n             IterableUtils.toString(new ArrayList<Integer>(), new Transformer<Integer, String>() {\n+                @Override\n                 public String transform(Integer input) {\n                     fail(\"not supposed to reach here\");\n                     return \"\";", "timestamp": 1433792306, "metainfo": ""}