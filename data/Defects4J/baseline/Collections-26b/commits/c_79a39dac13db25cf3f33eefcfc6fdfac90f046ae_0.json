{"sha": "79a39dac13db25cf3f33eefcfc6fdfac90f046ae", "log": "Add since tags and Javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n  * instances. The implementations are provided in the iterators subpackage.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.23 $ $Date: 2004/03/20 00:21:08 $\n+ * @version $Revision: 1.24 $ $Date: 2004/04/09 22:53:27 $\n  * \n  * @author Stephen Colebourne\n  * @author Phil Steitz\n      * \n      * @param root  the root object to start iterating from, null results in an empty iterator\n      * @param transformer  the transformer to use, see above, null uses no effect transformer\n-     * @return\n+     * @return a new object graph iterator\n+     * @since Commons Collections 3.1\n      */\n     public static Iterator objectGraphIterator(Object root, Transformer transformer) {\n         return new ObjectGraphIterator(root, transformer);\n      *\n      * @param iterator  the iterator to use, not null\n      * @param transform  the transform to use, not null\n+     * @return a new transforming iterator\n      * @throws NullPointerException if either parameter is null\n      */\n     public static Iterator transformedIterator(Iterator iterator, Transformer transform) {\n      *\n      * @param iterator  the iterator to use, not null\n      * @param predicate  the predicate to use as a filter, not null\n+     * @return a new filtered iterator\n      * @throws NullPointerException if either parameter is null\n      */\n     public static Iterator filteredIterator(Iterator iterator, Predicate predicate) {\n      *\n      * @param listIterator  the list iterator to use, not null\n      * @param predicate  the predicate to use as a filter, not null\n+     * @return a new filtered iterator\n      * @throws NullPointerException if either parameter is null\n      */\n     public static ListIterator filteredListIterator(ListIterator listIterator, Predicate predicate) {\n      * to start with.\n      *\n      * @param coll  the collection to iterate over, not null\n+     * @return a new looping iterator\n      * @throws NullPointerException if the collection is null\n      */\n     public static ResettableIterator loopingIterator(Collection coll) {\n      * Gets an iterator that provides an iterator view of the given enumeration.\n      *\n      * @param enumeration  the enumeration to use\n+     * @return a new iterator\n      */\n     public static Iterator asIterator(Enumeration enumeration) {\n         if (enumeration == null) {\n      *\n      * @param enumeration  the enumeration to use\n      * @param removeCollection  the collection to remove elements from\n+     * @return a new iterator\n      */\n     public static Iterator asIterator(Enumeration enumeration, Collection removeCollection) {\n         if (enumeration == null) {\n      * Gets an enumeration that wraps an iterator.\n      *\n      * @param iterator  the iterator to use, not null\n+     * @return a new enumeration\n      * @throws NullPointerException if iterator is null\n      */\n     public static Enumeration asEnumeration(Iterator iterator) {\n      * cached, permitting all required operations of ListIterator.\n      *\n      * @param iterator  the iterator to use, not null\n+     * @return a new iterator\n      * @throws NullPointerException if iterator parameter is null\n      */\n     public static ListIterator toListIterator(Iterator iterator) {\n      * created. At the end, this is converted to an array.\n      *\n      * @param iterator  the iterator to use, not null\n+     * @return an array of the iterator contents\n      * @throws NullPointerException if iterator parameter is null\n      */\n     public static Object[] toArray(Iterator iterator) {\n      *\n      * @param iterator  the iterator to use, not null\n      * @param arrayClass  the class of array to create\n+     * @return an array of the iterator contents\n      * @throws NullPointerException if iterator parameter is null\n      * @throws NullPointerException if arrayClass is null\n      * @throws ClassCastException if the arrayClass is invalid\n      * created. At the end, the list is returned.\n      *\n      * @param iterator  the iterator to use, not null\n+     * @return a list of the iterator contents\n      * @throws NullPointerException if iterator parameter is null\n      */\n     public static List toList(Iterator iterator) {\n      *\n      * @param iterator  the iterator to use, not null\n      * @param estimatedSize  the initial size of the ArrayList\n+     * @return a list of the iterator contents\n      * @throws NullPointerException if iterator parameter is null\n      * @throws IllegalArgumentException if the size is less than 1\n      */", "timestamp": 1081551207, "metainfo": ""}