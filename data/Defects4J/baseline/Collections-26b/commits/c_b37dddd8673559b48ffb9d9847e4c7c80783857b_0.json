{"sha": "b37dddd8673559b48ffb9d9847e4c7c80783857b", "log": "Initial checkin   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/BidiMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.1 2003/09/20 20:24:30 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Map;\n+\n+/**\n+ * Defines a map that allows bidirectional lookup between key and values.\n+ * <p>\n+ * Implementations should allow a value to be looked up from a key and\n+ * a key to be looked up from a value with equal performance.\n+ *  \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/20 20:24:30 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public interface BidiMap extends Map {\n+    \n+    /**\n+     * Gets the key that is currently mapped to the specified value.\n+     * <p>\n+     * If the value is not contained in the map, <code>null</code> is returned.\n+     * <p>\n+     * Implementations should seek to make this method perform equally as well\n+     * as <code>get(Object)</code>.\n+     *\n+     * @param value  the value to find the key for\n+     * @return the mapped key, or <code>null</code> if not found\n+     * \n+     * @throws ClassCastException (optional) if the map limits the type of the \n+     *  value and the specifed value is inappropriate\n+     * @throws NullPointerException (optional) if the map limits the values to\n+     *  non-null and null was specified\n+     */\n+    public Object getKey(Object value);\n+    \n+    /**\n+     * Removes the key-value pair that is currently mapped to the specified\n+     * value (optional operation).\n+     * <p>\n+     * If the value is not contained in the map, <code>null</code> is returned.\n+     * <p>\n+     * Implementations should seek to make this method perform equally as well\n+     * as <code>remove(Object)</code>.\n+     *\n+     * @param value  the value to find the key-value pair for\n+     * @return the key that was removed, <code>null</code> if nothing removed\n+     * \n+     * @throws ClassCastException (optional) if the map limits the type of the \n+     *  value and the specifed value is inappropriate\n+     * @throws NullPointerException (optional) if the map limits the values to\n+     *  non-null and null was specified\n+     * @throws UnsupportedOperationException if this method is not supported\n+     *  by the implementation\n+     */\n+    public Object removeKey(Object value);\n+    \n+    /**\n+     * Gets a view of this map where the keys and values are reversed.\n+     * <p>\n+     * Changes to one map will be visible in the other and vice versa.\n+     * This enables both directions of the map to be accessed as a <code>Map</code>.\n+     * <p>\n+     * Implementations should seek to avoid creating a new object every time this\n+     * method is called. See <code>AbstractMap.values()</code> etc. Calling this\n+     * method on the inverse map should return the original.\n+     *\n+     * @return an inverted bidirectional map\n+     */\n+    public BidiMap inverseBidiMap();\n+    \n+}", "timestamp": 1064089470, "metainfo": ""}