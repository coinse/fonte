{"sha": "a73594a4b20a499fd04129021ddebddff91cd901", "log": "Initial checkin of MultiKey   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/MultiKey.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/MultiKey.java,v 1.1 2003/03/09 00:06:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+\n+/** \n+ * A <code>MultiKey</code> allows multiple map keys to be merged together.\n+ * <p>\n+ * The purpose of this class is to avoid the need to write code to handle\n+ * maps of maps. An example might be the need to lookup a filename by \n+ * key and locale. The typical solution might be nested maps. This class\n+ * can be used instead by creating an instance passing in the key and locale.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/03/09 00:06:44 $\n+ * \n+ * @author Howard Lewis Ship\n+ * @author Stephen Colebourne\n+ */\n+public class MultiKey implements Serializable {\n+\n+    private static final long serialVersionUID = 4465448607415788805L;\n+\n+    /** The individual keys */\n+    private final Object[] keys;\n+    /** The cached hashCode */\n+    private final int hashCode;\n+    \n+    /**\n+     * Constructor taking two keys.\n+     * \n+     * @param key1  the first key\n+     * @param key2  the second key\n+     */\n+    public MultiKey(Object key1, Object key2) {\n+        this(new Object[] {key1, key2}, false);\n+    }\n+    \n+    /**\n+     * Constructor taking three keys.\n+     * \n+     * @param key1  the first key\n+     * @param key2  the second key\n+     * @param key3  the third key\n+     */\n+    public MultiKey(Object key1, Object key2, Object key3) {\n+        this(new Object[] {key1, key2, key3}, false);\n+    }\n+    \n+    /**\n+     * Constructor taking four keys.\n+     * \n+     * @param key1  the first key\n+     * @param key2  the second key\n+     * @param key3  the third key\n+     * @param key4  the fourth key\n+     */\n+    public MultiKey(Object key1, Object key2, Object key3, Object key4) {\n+        this(new Object[] {key1, key2, key3, key4}, false);\n+    }\n+    \n+    /**\n+     * Constructor taking five keys.\n+     * \n+     * @param key1  the first key\n+     * @param key2  the second key\n+     * @param key3  the third key\n+     * @param key4  the fourth key\n+     * @param key5  the fifth key\n+     */\n+    public MultiKey(Object key1, Object key2, Object key3, Object key4, Object key5) {\n+        this(new Object[] {key1, key2, key3, key4, key5}, false);\n+    }\n+    \n+    /**\n+     * Constructor taking an array of keys.\n+     *\n+     * @param keys  the array of keys\n+     * @throws IllegalArgumentException if the key array is null\n+     */\n+    public MultiKey(Object[] keys) {\n+        this(keys, true);\n+    }\n+    \n+    /**\n+     * Constructor taking an array of keys.\n+     * <p>\n+     * If the array is not copied, then it must not be modified.\n+     *\n+     * @param keys  the array of keys\n+     * @param makeCopy  true to copy the array, false to assign it\n+     * @throws IllegalArgumentException if the key array is null\n+     */\n+    protected MultiKey(Object[] keys, boolean makeCopy) {\n+        super();\n+        if (keys == null) {\n+            throw new IllegalArgumentException(\"The array of keys must not be null\");\n+        }\n+        if (makeCopy) {\n+            this.keys = (Object[]) keys.clone();\n+        } else {\n+            this.keys = keys;\n+        }\n+        \n+        int total = 0;\n+        for (int i = 0; i < keys.length; i++) {\n+            if (keys[i] != null) {\n+                if (i == 0) {\n+                    total = keys[i].hashCode();\n+                } else {\n+                    total ^= keys[i].hashCode();\n+                }\n+            }\n+        }\n+        hashCode = total;\n+    }\n+    \n+    /**\n+     * Gets a copy of the individual keys.\n+     * \n+     * @return the individual keys\n+     */\n+    public Object[] getKeys() {\n+        return (Object[]) keys.clone();\n+    }\n+    \n+    /**\n+     * Compares this object to another.\n+     * <p>\n+     * To be equal, the other object must be a <code>MultiKey</code> with the\n+     * same number of keys which are also equal.\n+     * \n+     * @param other  the other object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object other) {\n+        if (other == this) {\n+            return true;\n+        }\n+        if (other instanceof MultiKey) {\n+            MultiKey otherMulti = (MultiKey) other;\n+            return Arrays.equals(keys, otherMulti.keys);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Gets the combined hashcode that is computed from all the keys.\n+     * <p>\n+     * This value is computed once and then cached, so elements should not\n+     * change their hash codes once created (note that this is the same \n+     * constraint that would be used if the individual keys elements were\n+     * themselves {@link java.util.Map Map} keys.\n+     * \n+     * @return the hashcode\n+     */\n+    public int hashCode() {\n+        return hashCode;\n+    }\n+\n+    /**\n+     * Gets a debugging string version of the key.\n+     * \n+     * @return a debugging string\n+     */\n+    public String toString() {\n+        return \"MultiKey\" + Arrays.asList(keys).toString();\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.40 2003/02/19 20:33:11 scolebourne Exp $\n- * $Revision: 1.40 $\n- * $Date: 2003/02/19 20:33:11 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.41 2003/03/09 00:07:41 scolebourne Exp $\n+ * $Revision: 1.41 $\n+ * $Date: 2003/03/09 00:07:41 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.40 2003/02/19 20:33:11 scolebourne Exp $\n+ * @version $Id: TestAll.java,v 1.41 2003/03/09 00:07:41 scolebourne Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestHashBag.suite());\n         suite.addTest(TestLRUMap.suite());\n         suite.addTest(TestMultiHashMap.suite());\n+        suite.addTest(TestMultiKey.suite());\n         suite.addTest(TestNodeCachingLinkedList.suite());\n         suite.addTest(TestSequencedHashMap.suite());\n         suite.addTest(TestStaticBucketMap.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestMultiKey.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Turbine\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Arrays;\n+\n+import junit.framework.Assert;\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Unit tests \n+ * {@link org.apache.commons.collections.MultiKey}.\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestMultiKey extends TestCase {\n+\n+    Integer ONE = new Integer(1);\n+    Integer TWO = new Integer(2);\n+    Integer THREE = new Integer(3);\n+    Integer FOUR = new Integer(4);\n+    Integer FIVE = new Integer(5);\n+    \n+    public TestMultiKey(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestMultiKey.class);\n+    }\n+\n+    public static void main(String[] args) {\n+        String[] testCaseName = { TestMultiKey.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+    \n+\n+    public void testConstructorsAndGet() throws Exception {\n+        MultiKey mk = null;\n+        mk = new MultiKey(ONE, TWO);\n+        Assert.assertTrue(Arrays.equals(new Object[] {ONE, TWO}, mk.getKeys()));\n+\n+        mk = new MultiKey(ONE, TWO, THREE);\n+        Assert.assertTrue(Arrays.equals(new Object[] {ONE, TWO, THREE}, mk.getKeys()));\n+\n+        mk = new MultiKey(ONE, TWO, THREE, FOUR);\n+        Assert.assertTrue(Arrays.equals(new Object[] {ONE, TWO, THREE, FOUR}, mk.getKeys()));\n+\n+        mk = new MultiKey(ONE, TWO, THREE, FOUR, FIVE);\n+        Assert.assertTrue(Arrays.equals(new Object[] {ONE, TWO, THREE, FOUR, FIVE}, mk.getKeys()));\n+\n+        mk = new MultiKey(new Object[] {THREE, FOUR, ONE, TWO}, false);\n+        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, TWO}, mk.getKeys()));\n+\n+        // don't do this!\n+        Object[] keys = new Object[] {THREE, FOUR, ONE, TWO};\n+        mk = new MultiKey(keys);\n+        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, TWO}, mk.getKeys()));\n+        keys[3] = FIVE;  // no effect\n+        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, TWO}, mk.getKeys()));\n+    }\n+    \n+    public void testHashCode() {\n+        MultiKey mk1 = new MultiKey(ONE, TWO);\n+        MultiKey mk2 = new MultiKey(ONE, TWO);\n+        MultiKey mk3 = new MultiKey(ONE, \"TWO\");\n+        \n+        Assert.assertTrue(mk1.hashCode() == mk1.hashCode());\n+        Assert.assertTrue(mk1.hashCode() == mk2.hashCode());\n+        Assert.assertTrue(mk1.hashCode() != mk3.hashCode());\n+    }\n+    \n+    public void testEquals() {\n+        MultiKey mk1 = new MultiKey(ONE, TWO);\n+        MultiKey mk2 = new MultiKey(ONE, TWO);\n+        MultiKey mk3 = new MultiKey(ONE, \"TWO\");\n+        \n+        Assert.assertEquals(mk1, mk1);\n+        Assert.assertEquals(mk1, mk2);\n+        Assert.assertTrue(mk1.equals(mk3) == false);\n+        Assert.assertTrue(mk1.equals(\"\") == false);\n+        Assert.assertTrue(mk1.equals(null) == false);\n+    }\n+    \n+}", "timestamp": 1047168461, "metainfo": ""}