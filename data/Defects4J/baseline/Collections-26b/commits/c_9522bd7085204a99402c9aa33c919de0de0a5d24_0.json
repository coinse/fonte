{"sha": "9522bd7085204a99402c9aa33c919de0de0a5d24", "log": "Javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/functors/ChainedTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ChainedTransformer.java\n import org.apache.commons.collections.Transformer;\n \n /**\n- * Transformer implementation that chains the specified closures together.\n+ * Transformer implementation that chains the specified transformers together.\n+ * <p>\n+ * The input object is passed to the first transformer. The transformed result\n+ * is passed to the second transformer and so on.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Execute a list of transformers.\n+     * Transforms the input to result via each decorated transformer\n      * \n-     * @param object  the input object passed to each transformer\n+     * @param object  the input object passed to the first transformer\n+     * @return the transformed result\n      */\n     public Object transform(Object object) {\n         for (int i = 0; i < iTransformers.length; i++) {\n--- a/src/java/org/apache/commons/collections/functors/CloneTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/CloneTransformer.java\n  * Clone is performed using <code>PrototypeFactory.getInstance(input).create()</code>.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Do nothing\n+     * Transforms the input to result by cloning it.\n+     * \n+     * @param input  the input object to transform\n+     * @return the transformed result\n      */\n     public Object transform(Object input) {\n         if (input == null) {\n         }\n         return PrototypeFactory.getInstance(input).create();\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/ClosureTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ClosureTransformer.java\n  * and then returns the input.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Call the closure.\n+     * Transforms the input to result by executing a closure.\n+     * \n+     * @param input  the input object to transform\n+     * @return the transformed result\n      */\n     public Object transform(Object input) {\n         iClosure.execute(input);\n \n     /**\n      * Gets the closure.\n+     * \n      * @return the closure\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/ConstantTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ConstantTransformer.java\n  * use the prototype factory.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Always return constant.\n+     * Transforms the input by ignoring it and returning the stored constant instead.\n+     * \n+     * @param input  the input object which is ignored\n+     * @return the stored constant\n      */\n     public Object transform(Object input) {\n         return iConstant;\n \n     /**\n      * Gets the constant.\n+     * \n      * @return the constant\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n  * Transformer implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/03/31 23:13:04 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Always throw an exception.\n+     * Transforms the input to result by cloning it.\n+     * \n+     * @param input  the input object to transform\n+     * @return never\n+     * @throws FunctorException always\n      */\n-    public Object transform(Object object) {\n+    public Object transform(Object input) {\n         throw new FunctorException(\"ExceptionTransformer invoked\");\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/FactoryTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/FactoryTransformer.java\n  * Transformer implementation that calls a Factory and returns the result.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/05/03 12:03:11 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Call the factory.\n+     * Transforms the input by ignoring the input and returning the result of\n+     * calling the decorated factory.\n+     * \n+     * @param input  the input object to transform\n+     * @return the transformed result\n      */\n     public Object transform(Object input) {\n         return iFactory.create();\n \n     /**\n      * Gets the factory.\n+     * \n      * @return the factory\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n  * Transformer implementation that creates a new object instance by reflection.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n      * \n      * @param paramTypes  the constructor parameter types\n      * @param args  the constructor arguments\n+     * @return an instantiate transformer\n      */\n     public static Transformer getInstance(Class[] paramTypes, Object[] args) {\n         if (((paramTypes == null) && (args != null))\n     }\n \n     /**\n-     * Return the result of instantiating the input Class object.\n+     * Transforms the input Class object to a result by instantiation.\n+     * \n+     * @param input  the input object to transform\n+     * @return the transformed result\n      */\n     public Object transform(Object input) {\n         try {\n             throw new FunctorException(\"InstantiateTransformer: Constructor threw an exception\", ex);\n         }\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/InvokerTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/InvokerTransformer.java\n  * Transformer implementation that creates a new object instance by reflection.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n     private final Object[] iArgs;\n \n     /**\n-     * Transformer method that performs validation.\n+     * Gets an instanceof this transformer calling a specific method with specific values.\n      * \n-     * @param paramTypes  the constructor parameter types\n-     * @param args  the constructor arguments\n+     * @param methodName  the method name to call\n+     * @param paramTypes  the parameter types of the method\n+     * @param args  the arguments to pass to the method\n+     * @return an invoker transformer\n      */\n     public static Transformer getInstance(String methodName, Class[] paramTypes, Object[] args) {\n         if (methodName == null) {\n     }\n \n     /**\n-     * Return the result of instantiating the input Class object.\n+     * Transforms the input to result by invoking a method on the input.\n+     * \n+     * @param input  the input object to transform\n+     * @return the transformed result, null if null input\n      */\n     public Object transform(Object input) {\n         if (input == null) {\n             throw new FunctorException(\"InvokerTransformer: The method '\" + iMethodName + \"' on '\" + input.getClass() + \"' threw an exception\", ex);\n         }\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/MapTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/MapTransformer.java\n  * using the input parameter as a key.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Returns the result by looking up in the map.\n+     * Transforms the input to result by looking it up in a <code>Map</code>.\n+     * \n+     * @param input  the input object to transform\n+     * @return the transformed result\n      */\n     public Object transform(Object input) {\n         return iMap.get(input);\n \n     /**\n      * Gets the map to lookup in.\n+     * \n      * @return the map\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/NOPTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/NOPTransformer.java\n  * Transformer implementation that does nothing.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Do nothing\n+     * Transforms the input to result by doing nothing.\n+     * \n+     * @param input  the input object to transform\n+     * @return the transformed result which is the input\n      */\n     public Object transform(Object input) {\n         return input;\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/PredicateTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/PredicateTransformer.java\n  * and then returns the input.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Call the predicate.\n+     * Transforms the input to result by calling a predicate.\n+     * \n+     * @param input  the input object to transform\n+     * @return the transformed result\n      */\n     public Object transform(Object input) {\n         return (iPredicate.evaluate(input) ? Boolean.TRUE : Boolean.FALSE);\n \n     /**\n      * Gets the predicate.\n+     * \n      * @return the predicate\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n  * Transformer implementation that returns the <code>String.valueOf</code>.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/03/31 23:13:04 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return the String.valueOf for the object.\n+     * Transforms the input to result by calling <code>String.valueOf</code>.\n+     * \n+     * @param input  the input object to transform\n+     * @return the transformed result\n      */\n     public Object transform(Object input) {\n         return String.valueOf(input);\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/SwitchTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/SwitchTransformer.java\n  * like a switch statement.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:36:31 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Execute the transformer whose predicate returns true.\n+     * Transforms the input to result by calling the transformer whose matching\n+     * predicate returns true.\n+     * \n+     * @param input  the input object to transform\n+     * @return the transformed result\n      */\n     public Object transform(Object input) {\n         for (int i = 0; i < iPredicates.length; i++) {\n \n     /**\n      * Gets the predicates, do not modify the array.\n+     * \n      * @return the predicates\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Gets the transformers, do not modify the array.\n+     * \n      * @return the transformers\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Gets the default transformer.\n+     * \n      * @return the default transformer\n      * @since Commons Collections 3.1\n      */", "timestamp": 1084707391, "metainfo": ""}