{"sha": "17be7dfd95153d8be068e4827794e40945e159d0", "log": "Rename abstract Test* classes to AbstractTest*  ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/AbstractTestArrayList.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+\n+import org.apache.commons.collections.list.AbstractTestList;\n+\n+/**\n+ * Abstract test class for ArrayList.\n+ *\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Jason van Zyl\n+ */\n+public abstract class AbstractTestArrayList<E> extends AbstractTestList<E> {\n+\n+    public AbstractTestArrayList(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public abstract ArrayList<E> makeObject();\n+\n+    //-----------------------------------------------------------------------\n+    public void testNewArrayList() {\n+        ArrayList<E> list = makeObject();\n+        assertTrue(\"New list is empty\", list.isEmpty());\n+        assertEquals(\"New list has size zero\", 0, list.size());\n+\n+        try {\n+            list.get(1);\n+            fail(\"get(int i) should have thrown IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // Expected result\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSearch() {\n+        ArrayList<E> list = makeObject();\n+        list.add((E) \"First Item\");\n+        list.add((E) \"Last Item\");\n+        assertEquals(\"First item is 'First Item'\", \"First Item\", list.get(0));\n+        assertEquals(\"Last Item is 'Last Item'\", \"Last Item\", list.get(1));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/AbstractTestLinkedList.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.list.AbstractTestList;\n+\n+/**\n+ * Tests base {@link java.util.LinkedList} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeEmptyLinkedList()} method.\n+ * <p>\n+ * If your {@link LinkedList} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link List} fails.\n+ *\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Rich Dougherty\n+ */\n+public abstract class AbstractTestLinkedList<T> extends AbstractTestList<T> {\n+\n+    public AbstractTestLinkedList(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public abstract LinkedList<T> makeObject();\n+\n+    /**\n+     *  Returns the {@link #collection} field cast to a {@link LinkedList}.\n+     *\n+     *  @return the collection field as a List\n+     */\n+    @Override\n+    public LinkedList<T> getCollection() {\n+        return (LinkedList<T>) super.getCollection();\n+    }\n+\n+    /**\n+     *  Returns the {@link #confirmed} field cast to a {@link LinkedList}.\n+     *\n+     *  @return the confirmed field as a List\n+     */\n+    protected LinkedList<T> getConfirmedLinkedList() {\n+        return (LinkedList<T>) getConfirmed();\n+    }\n+\n+    /**\n+     *  Tests {@link LinkedList#addFirst(Object)}.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testLinkedListAddFirst() {\n+        if (!isAddSupported()) return;\n+        T o = (T) \"hello\";\n+\n+        resetEmpty();\n+        getCollection().addFirst(o);\n+        getConfirmedLinkedList().addFirst(o);\n+        verify();\n+\n+        resetFull();\n+        getCollection().addFirst(o);\n+        getConfirmedLinkedList().addFirst(o);\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link LinkedList#addLast(Object)}.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testLinkedListAddLast() {\n+        if (!isAddSupported()) return;\n+        T o = (T) \"hello\";\n+\n+        resetEmpty();\n+        getCollection().addLast(o);\n+        getConfirmedLinkedList().addLast(o);\n+        verify();\n+\n+        resetFull();\n+        getCollection().addLast(o);\n+        getConfirmedLinkedList().addLast(o);\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link LinkedList#getFirst()}.\n+     */\n+    public void testLinkedListGetFirst() {\n+        resetEmpty();\n+        try {\n+            getCollection().getFirst();\n+            fail(\"getFirst() should throw a NoSuchElementException for an \" +\n+                    \"empty list.\");\n+        } catch (NoSuchElementException e) {\n+            // This is correct\n+        }\n+        verify();\n+\n+        resetFull();\n+        Object first = getCollection().getFirst();\n+        Object confirmedFirst = getConfirmedLinkedList().getFirst();\n+        assertEquals(\"Result returned by getFirst() was wrong.\",\n+                confirmedFirst, first);\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link LinkedList#getLast()}.\n+     */\n+    public void testLinkedListGetLast() {\n+        resetEmpty();\n+        try {\n+            getCollection().getLast();\n+            fail(\"getLast() should throw a NoSuchElementException for an \" +\n+                    \"empty list.\");\n+        } catch (NoSuchElementException e) {\n+            // This is correct\n+        }\n+        verify();\n+        \n+        resetFull();\n+        Object last = getCollection().getLast();\n+        Object confirmedLast = getConfirmedLinkedList().getLast();\n+        assertEquals(\"Result returned by getLast() was wrong.\",\n+                confirmedLast, last);\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link LinkedList#removeFirst()}.\n+     */\n+    public void testLinkedListRemoveFirst() {\n+        if (!isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        try {\n+            getCollection().removeFirst();\n+            fail(\"removeFirst() should throw a NoSuchElementException for \" +\n+                    \"an empty list.\");\n+        } catch (NoSuchElementException e) {\n+            // This is correct\n+        }\n+        verify();\n+        \n+        resetFull();\n+        Object first = getCollection().removeFirst();\n+        Object confirmedFirst = getConfirmedLinkedList().removeFirst();\n+        assertEquals(\"Result returned by removeFirst() was wrong.\",\n+                confirmedFirst, first);\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link LinkedList#removeLast()}.\n+     */\n+    public void testLinkedListRemoveLast() {\n+        if (!isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        try {\n+            getCollection().removeLast();\n+            fail(\"removeLast() should throw a NoSuchElementException for \" +\n+                    \"an empty list.\");\n+        } catch (NoSuchElementException e) {\n+            // This is correct\n+        }\n+        verify();\n+\n+        resetFull();\n+        Object last = getCollection().removeLast();\n+        Object confirmedLast = getConfirmedLinkedList().removeLast();\n+        assertEquals(\"Result returned by removeLast() was wrong.\",\n+                confirmedLast, last);\n+        verify();\n+    }\n+\n+    /**\n+     *  Returns an empty {@link LinkedList}.\n+     */\n+    @Override\n+    public Collection<T> makeConfirmedCollection() {\n+        return new LinkedList<T>();\n+    }\n+\n+    /**\n+     *  Returns a full {@link LinkedList}.\n+     */\n+    @Override\n+    public Collection<T> makeConfirmedFullCollection() {\n+        List<T> list = new LinkedList<T>();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/AbstractTestTreeMap.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.TreeMap;\n+\n+import org.apache.commons.collections.map.AbstractTestMap;\n+\n+/**\n+ * Tests TreeMap.\n+ *\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Jason van Zyl\n+ */\n+public abstract class AbstractTestTreeMap<K, V> extends AbstractTestMap<K, V> {\n+\n+    public AbstractTestTreeMap(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public boolean isAllowNullKey() {\n+        return false;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public abstract TreeMap<K, V> makeObject();\n+\n+    public void testNewMap() {\n+        TreeMap<K, V> map = makeObject();\n+        assertTrue(\"New map is empty\", map.isEmpty());\n+        assertEquals(\"New map has size zero\", 0, map.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSearch() {\n+        TreeMap<K, V> map = makeObject();\n+        map.put((K) \"first\", (V) \"First Item\");\n+        map.put((K) \"second\", (V) \"Second Item\");\n+        assertEquals(\"Top item is 'Second Item'\",\n+            \"First Item\", map.get(\"first\"));\n+        assertEquals(\"Next Item is 'First Item'\",\n+            \"Second Item\", map.get(\"second\"));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/AbstractTestTypedCollection.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Tests TypedCollection.\n+ *\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractTestTypedCollection<T> extends BulkTest {\n+\n+    public AbstractTestTypedCollection(String name) {\n+        super(name);\n+    }\n+\n+    protected abstract Collection<T> typedCollection();\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected Class<T> getType() {\n+        return (Class<T>) String.class;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIllegalAdd() {\n+        Collection<T> c = typedCollection();\n+        Integer i = new Integer(3);\n+        try {\n+            c.add((T) i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(i));   \n+    }\n+\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIllegalAddAll() {\n+        Collection<T> c = typedCollection();\n+        List<Object> elements = new ArrayList<Object>();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            c.addAll((Collection<? extends T>) elements);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(\"one\"));   \n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(\"two\"));   \n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(new Integer(3)));   \n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(\"four\"));   \n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestArrayStack.java\n+++ b/src/test/org/apache/commons/collections/TestArrayStack.java\n  *\n  * @author Craig McClanahan\n  */\n-public class TestArrayStack<E> extends TestArrayList<E> {\n+public class TestArrayStack<E> extends AbstractTestArrayList<E> {\n     \n     public TestArrayStack(String testName) {\n         super(testName);\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/comparators/AbstractTestNullComparator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.comparators;\n+\n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test the NullComparator.\n+ *\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Michael A. Smith\n+ */\n+public abstract class AbstractTestNullComparator extends AbstractTestComparator<Integer> {\n+\n+    public AbstractTestNullComparator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(AbstractTestNullComparator.class.getName());\n+        suite.addTest(new TestSuite(TestNullComparator1.class));\n+        suite.addTest(new TestSuite(TestNullComparator2.class));\n+        return suite;\n+    }\n+\n+    /**\n+     *  Test the NullComparator with nulls high, using comparable comparator\n+     **/\n+    public static class TestNullComparator1 extends AbstractTestNullComparator {\n+\n+        public TestNullComparator1(String testName) {\n+            super(testName);\n+        }\n+\n+        @Override\n+        public Comparator<Integer> makeObject() {\n+            return new NullComparator<Integer>();\n+        }\n+\n+        @Override\n+        public List<Integer> getComparableObjectsOrdered() {\n+            List<Integer> list = new LinkedList<Integer>();\n+            list.add(new Integer(1));\n+            list.add(new Integer(2));\n+            list.add(new Integer(3));\n+            list.add(new Integer(4));\n+            list.add(new Integer(5));\n+            list.add(null);\n+            return list;\n+        }\n+\n+        @Override\n+        public String getCanonicalComparatorName(Object object) {\n+            return super.getCanonicalComparatorName(object) + \"1\";\n+        }\n+    }\n+\n+    /**\n+     *  Test the NullComparator with nulls low using the comparable comparator\n+     **/\n+    public static class TestNullComparator2 extends AbstractTestNullComparator {\n+\n+        public TestNullComparator2(String testName) {\n+            super(testName);\n+        }\n+\n+        @Override\n+        public Comparator<Integer> makeObject() {\n+            return new NullComparator<Integer>(false);\n+        }\n+\n+        @Override\n+        public List<Integer> getComparableObjectsOrdered() {\n+            List<Integer> list = new LinkedList<Integer>();\n+            list.add(null);\n+            list.add(new Integer(1));\n+            list.add(new Integer(2));\n+            list.add(new Integer(3));\n+            list.add(new Integer(4));\n+            list.add(new Integer(5));\n+            return list;\n+        }\n+\n+        @Override\n+        public String getCanonicalComparatorName(Object object) {\n+            return super.getCanonicalComparatorName(object) + \"2\";\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/functors/AbstractTestAnyAllOnePredicate.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import org.apache.commons.collections.Predicate;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+\n+/**\n+ * Base class for tests of AnyPredicate, AllPredicate, and OnePredicate.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 468603 $ $Date: 2006-10-27 17:52:37 -0700 (Fri, 27 Oct 2006) $\n+ *\n+ * @author Edwin Tellman\n+ */\n+public abstract class AbstractTestAnyAllOnePredicate<T> extends AbstractTestCompositePredicate<T> {\n+\n+    /**\n+     * Creates a new <code>TestCompositePredicate</code>.\n+     *\n+     * @param testValue the value which the mock predicates should expect to see (may be null).\n+     */\n+    protected AbstractTestAnyAllOnePredicate(final T testValue) {\n+        super(testValue);\n+    }\n+\n+    /**\n+     * Tests whether <code>getInstance</code> with a one element array returns the first element in the array.\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public final void singleElementArrayToGetInstance() {\n+        final Predicate<T> predicate = createMockPredicate(null);\n+        final Predicate<T> allPredicate = getPredicateInstance(predicate);\n+        assertSame(\"expected argument to be returned by getInstance()\", predicate, allPredicate);\n+    }\n+\n+    /**\n+     * Tests that passing a singleton collection to <code>getInstance</code> returns the single element in the\n+     * collection.\n+     */\n+    @Override\n+    @Test\n+    public final void singletonCollectionToGetInstance() {\n+        final Predicate<T> predicate = createMockPredicate(null);\n+        final Predicate<T> allPredicate = getPredicateInstance(\n+                Collections.<Predicate<T>>singleton(predicate));\n+        assertSame(\"expected singleton collection member to be returned by getInstance()\",\n+                predicate, allPredicate);\n+    }\n+\n+    /**\n+     * Tests creating composite predicate instances with single predicates and verifies that the composite returns\n+     * the same value as the single predicate does. \n+     */\n+    public final void singleValues() {\n+        assertTrue(getPredicateInstance(true).evaluate(null));\n+        assertFalse(getPredicateInstance(false).evaluate(null));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/functors/AbstractTestCompositePredicate.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+\n+/**\n+ * Base class for tests of composite predicates.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 468603 $ $Date: 2006-10-27 17:52:37 -0700 (Fri, 27 Oct 2006) $\n+ *\n+ * @author Edwin Tellman\n+ */\n+public abstract class AbstractTestCompositePredicate<T> extends MockPredicateTestBase<T> {\n+\n+    /**\n+     * Creates a new <code>TestCompositePredicate</code>.\n+     *\n+     * @param testValue the value which the mock predicates should expect to see (may be null).\n+     */\n+    protected AbstractTestCompositePredicate(final T testValue) {\n+        super(testValue);\n+    }\n+\n+    /**\n+     * Creates an instance of the predicate to test.\n+     *\n+     * @param predicates the arguments to <code>getInstance</code>.\n+     *\n+     * @return a predicate to test.\n+     */\n+    protected abstract Predicate<T> getPredicateInstance(final Predicate<? super T> ... predicates);\n+\n+    /**\n+     * Creates an instance of the predicate to test.\n+     *\n+     * @param predicates the argument to <code>getInstance</code>.\n+     *\n+     * @return a predicate to test.\n+     */\n+    protected abstract Predicate<T> getPredicateInstance(final Collection<Predicate<T>> predicates);\n+\n+    /**\n+     * Creates an instance of the predicate to test.\n+     *\n+     * @param mockReturnValues the return values for the mock predicates, or null if that mock is not expected\n+     *                         to be called\n+     *\n+     * @return a predicate to test.\n+     */\n+    protected final Predicate<T> getPredicateInstance(final Boolean... mockReturnValues) {\n+        final List<Predicate<T>> predicates = new ArrayList<Predicate<T>>();\n+        for (Boolean returnValue : mockReturnValues) {\n+            predicates.add(createMockPredicate(returnValue));\n+        }\n+        return getPredicateInstance(predicates);\n+    }\n+\n+    /**\n+     * Tests whether <code>getInstance</code> with a one element array returns the first element in the array.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void singleElementArrayToGetInstance() {\n+        final Predicate<T> predicate = createMockPredicate(null);\n+        final Predicate<T> allPredicate = getPredicateInstance(predicate);\n+        Assert.assertSame(\"expected argument to be returned by getInstance()\", predicate, allPredicate);\n+    }\n+\n+    /**\n+     * Tests that passing a singleton collection to <code>getInstance</code> returns the single element in the\n+     * collection.\n+     */\n+    public void singletonCollectionToGetInstance() {\n+        final Predicate<T> predicate = createMockPredicate(null);\n+        final Predicate<T> allPredicate = getPredicateInstance(\n+                Collections.<Predicate<T>>singleton(predicate));\n+        Assert.assertSame(\"expected argument to be returned by getInstance()\", predicate, allPredicate);\n+    }\n+\n+    /**\n+     * Tests <code>getInstance</code> with a null predicate array.\n+     */\n+    @Test(expected = IllegalArgumentException.class)\n+    public final void nullArrayToGetInstance() {\n+        getPredicateInstance((Predicate<T>[]) null);\n+    }\n+\n+    /**\n+     * Tests <code>getInstance</code> with a single null element in the predicate array.\n+     */\n+    @SuppressWarnings({\"unchecked\"})\n+    @Test(expected = IllegalArgumentException.class)\n+    public final void nullElementInArrayToGetInstance() {\n+        getPredicateInstance(new Predicate[] { null });\n+    }\n+\n+    /**\n+     * Tests <code>getInstance</code> with two null elements in the predicate array.\n+     */\n+    @SuppressWarnings({\"unchecked\"})\n+    @Test(expected = IllegalArgumentException.class)\n+    public final void nullElementsInArrayToGetInstance() {\n+        getPredicateInstance(new Predicate[] { null, null });\n+    }\n+\n+\n+    /**\n+     * Tests <code>getInstance</code> with a null predicate collection\n+     */\n+    @Test(expected = IllegalArgumentException.class)\n+    public final void nullCollectionToGetInstance() {\n+        getPredicateInstance((Collection<Predicate<T>>) null);\n+    }\n+\n+    /**\n+     * Tests <code>getInstance</code> with a predicate collection that contains null elements\n+     */\n+    @Test(expected = IllegalArgumentException.class)\n+    public final void nullElementsInCollectionToGetInstance() {\n+        final Collection<Predicate<T>> coll = new ArrayList<Predicate<T>>();\n+        coll.add(null);\n+        coll.add(null);\n+        getPredicateInstance(coll);\n+    }\n+}\n--- a/src/test/org/apache/commons/collections/functors/TestAllPredicate.java\n+++ b/src/test/org/apache/commons/collections/functors/TestAllPredicate.java\n  *\n  * @author Edwin Tellman\n  */\n-public class TestAllPredicate extends TestAnyAllOnePredicate<Integer> {\n+public class TestAllPredicate extends AbstractTestAnyAllOnePredicate<Integer> {\n \n     /**\n      * Creates a new <code>TestAllPredicate</code>.\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/list/AbstractTestLinkedList.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Test case for {@link AbstractLinkedList}.\n+ *\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Rich Dougherty\n+ * @author David Hay\n+ * @author Phil Steitz\n+ */\n+public abstract class AbstractTestLinkedList<E> extends AbstractTestList<E> {\n+\n+    public AbstractTestLinkedList(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemoveFirst() {\n+        resetEmpty();\n+        AbstractLinkedList<E> list = getCollection();\n+        if (isRemoveSupported() == false) {\n+            try {\n+                list.removeFirst();\n+            } catch (UnsupportedOperationException ex) {}\n+        }\n+\n+        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n+        assertEquals(\"value1\", list.removeFirst());\n+        checkNodes();\n+        list.addLast((E) \"value3\");\n+        checkNodes();\n+        assertEquals(\"value2\", list.removeFirst());\n+        assertEquals(\"value3\", list.removeFirst());\n+        checkNodes();\n+        list.addLast((E) \"value4\");\n+        checkNodes();\n+        assertEquals(\"value4\", list.removeFirst());\n+        checkNodes();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemoveLast() {\n+        resetEmpty();\n+        AbstractLinkedList<E> list = getCollection();\n+        if (isRemoveSupported() == false) {\n+            try {\n+                list.removeLast();\n+            } catch (UnsupportedOperationException ex) {}\n+        }\n+\n+        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n+        assertEquals(\"value2\", list.removeLast());\n+        list.addFirst((E) \"value3\");\n+        checkNodes();\n+        assertEquals(\"value1\", list.removeLast());\n+        assertEquals(\"value3\", list.removeLast());\n+        list.addFirst((E) \"value4\");\n+        checkNodes();\n+        assertEquals(\"value4\", list.removeFirst());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testAddNodeAfter() {\n+        resetEmpty();\n+        AbstractLinkedList<E> list = getCollection();\n+        if (isAddSupported() == false) {\n+            try {\n+                list.addFirst(null);\n+            } catch (UnsupportedOperationException ex) {}\n+        }\n+\n+        list.addFirst((E) \"value1\");\n+        list.addNodeAfter(list.getNode(0, false), (E) \"value2\");\n+        assertEquals(\"value1\", list.getFirst());\n+        assertEquals(\"value2\", list.getLast());\n+        list.removeFirst();\n+        checkNodes();\n+        list.addNodeAfter(list.getNode(0, false), (E) \"value3\");\n+        checkNodes();\n+        assertEquals(\"value2\", list.getFirst());\n+        assertEquals(\"value3\", list.getLast());\n+        list.addNodeAfter(list.getNode(0, false), (E) \"value4\");\n+        checkNodes();\n+        assertEquals(\"value2\", list.getFirst());\n+        assertEquals(\"value3\", list.getLast());\n+        assertEquals(\"value4\", list.get(1));\n+        list.addNodeAfter(list.getNode(2, false), (E) \"value5\");\n+        checkNodes();\n+        assertEquals(\"value2\", list.getFirst());\n+        assertEquals(\"value4\", list.get(1));\n+        assertEquals(\"value3\", list.get(2));\n+        assertEquals(\"value5\", list.getLast());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemoveNode() {\n+        resetEmpty();\n+        if (isAddSupported() == false || isRemoveSupported() == false) return;\n+        AbstractLinkedList<E> list = getCollection();\n+\n+        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n+        list.removeNode(list.getNode(0, false));\n+        checkNodes();\n+        assertEquals(\"value2\", list.getFirst());\n+        assertEquals(\"value2\", list.getLast());\n+        list.addFirst((E) \"value1\");\n+        list.addFirst((E) \"value0\");\n+        checkNodes();\n+        list.removeNode(list.getNode(1, false));\n+        assertEquals(\"value0\", list.getFirst());\n+        assertEquals(\"value2\", list.getLast());\n+        checkNodes();\n+        list.removeNode(list.getNode(1, false));\n+        assertEquals(\"value0\", list.getFirst());\n+        assertEquals(\"value0\", list.getLast());\n+        checkNodes();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testGetNode() {\n+        resetEmpty();\n+        AbstractLinkedList<E> list = getCollection();\n+        // get marker\n+        assertEquals(list.getNode(0, true).previous, list.getNode(0, true).next);\n+        try {\n+            list.getNode(0, false);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        list.addAll( Arrays.asList((E[]) new String[]{\"value1\", \"value2\"}));\n+        checkNodes();\n+        list.addFirst((E) \"value0\");\n+        checkNodes();\n+        list.removeNode(list.getNode(1, false));\n+        checkNodes();\n+        try {\n+            list.getNode(2, false);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        try {\n+            list.getNode(-1, false);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+         try {\n+            list.getNode(3, true);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+    }\n+\n+    protected void checkNodes() {\n+        AbstractLinkedList<E> list = getCollection();\n+        for (int i = 0; i < list.size; i++) {\n+            assertEquals(list.getNode(i, false).next, list.getNode(i + 1, true));\n+            if (i < list.size - 1) {\n+                assertEquals(list.getNode(i + 1, false).previous,\n+                    list.getNode(i, false));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public AbstractLinkedList<E> getCollection() {\n+        return (AbstractLinkedList<E>) super.getCollection();\n+    }\n+}\n--- a/src/test/org/apache/commons/collections/list/TestCursorableLinkedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestCursorableLinkedList.java\n  * @author Rodney Waldhoff\n  * @author Simon Kitching\n  */\n-public class TestCursorableLinkedList<E> extends TestAbstractLinkedList<E> {\n+public class TestCursorableLinkedList<E> extends AbstractTestLinkedList<E> {\n     public TestCursorableLinkedList(String testName) {\n         super(testName);\n     }\n--- a/src/test/org/apache/commons/collections/list/TestNodeCachingLinkedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestNodeCachingLinkedList.java\n  * @author Jeff Varszegi\n  * @author Phil Steitz\n  */\n-public class TestNodeCachingLinkedList<E> extends TestAbstractLinkedList<E> {\n+public class TestNodeCachingLinkedList<E> extends AbstractTestLinkedList<E> {\n \n     public TestNodeCachingLinkedList(String testName) {\n         super(testName);", "timestamp": 1287402344, "metainfo": ""}