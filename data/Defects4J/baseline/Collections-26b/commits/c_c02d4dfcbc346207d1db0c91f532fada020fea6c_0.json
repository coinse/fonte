{"sha": "c02d4dfcbc346207d1db0c91f532fada020fea6c", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471579 | scolebourne | 2006-11-05 16:14:58 -0800 (Sun, 05 Nov 2006) | 1 line          Generify, remove getBuffer() - use covariant decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n  * @version $Revision$ $Date$\n  * @since Commons Collections 3.2\n  */\n-public class BoundedBuffer extends SynchronizedBuffer implements BoundedCollection {\n+public class BoundedBuffer<E> extends SynchronizedBuffer<E> implements BoundedCollection<E> {\n \n     /** The serialization version. */\n     private static final long serialVersionUID = 1536432911093974264L;\n      * @throws IllegalArgumentException if the buffer is null\n      * @throws IllegalArgumentException if the maximum size is zero or less\n      */\n-    public static BoundedBuffer decorate(Buffer buffer, int maximumSize) {\n-        return new BoundedBuffer(buffer, maximumSize, 0L);\n+    public static <E> BoundedBuffer<E> decorate(Buffer<E> buffer, int maximumSize) {\n+        return new BoundedBuffer<E>(buffer, maximumSize, 0L);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the buffer is null\n      * @throws IllegalArgumentException if the maximum size is zero or less\n      */\n-    public static BoundedBuffer decorate(Buffer buffer, int maximumSize, long timeout) {\n-        return new BoundedBuffer(buffer, maximumSize, timeout);\n+    public static <E> BoundedBuffer<E> decorate(Buffer<E> buffer, int maximumSize, long timeout) {\n+        return new BoundedBuffer<E>(buffer, maximumSize, timeout);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if the buffer is null\n      * @throws IllegalArgumentException if the maximum size is zero or less\n      */\n-    protected BoundedBuffer(Buffer buffer, int maximumSize, long timeout) {\n+    protected BoundedBuffer(Buffer<E> buffer, int maximumSize, long timeout) {\n         super(buffer);\n         if (maximumSize < 1) {\n             throw new IllegalArgumentException();\n     }\n \n     //-----------------------------------------------------------------------\n-    public Object remove() {\n+    public E remove() {\n         synchronized (lock) {\n-            Object returnValue = getBuffer().remove();\n+            E returnValue = decorated().remove();\n             lock.notifyAll();\n             return returnValue;\n         }\n     }\n \n-    public boolean add(Object o) {\n+    public boolean add(E o) {\n         synchronized (lock) {\n             timeoutWait(1);\n-            return getBuffer().add(o);\n+            return decorated().add(o);\n         }\n     }\n \n-    public boolean addAll(final Collection c) {\n+    public boolean addAll(final Collection<? extends E> c) {\n         synchronized (lock) {\n             timeoutWait(c.size());\n-            return getBuffer().addAll(c);\n+            return decorated().addAll(c);\n         }\n     }\n \n-    public Iterator iterator() {\n+    public Iterator<E> iterator() {\n         return new NotifyingIterator(collection.iterator());\n     }\n \n         }\n         if (timeout <= 0) {\n             // no wait period (immediate timeout)\n-            if (getBuffer().size() + nAdditions > maximumSize) {\n+            if (decorated().size() + nAdditions > maximumSize) {\n                 throw new BufferOverflowException(\n                         \"Buffer size cannot exceed \" + maximumSize);\n             }\n         }\n         final long expiration = System.currentTimeMillis() + timeout;\n         long timeLeft = expiration - System.currentTimeMillis();\n-        while (timeLeft > 0 && getBuffer().size() + nAdditions > maximumSize) {\n+        while (timeLeft > 0 && decorated().size() + nAdditions > maximumSize) {\n             try {\n                 lock.wait(timeLeft);\n                 timeLeft = expiration - System.currentTimeMillis();\n                     \"Caused by InterruptedException: \" + out.toString());\n             }\n         }\n-        if (getBuffer().size() + nAdditions > maximumSize) {\n+        if (decorated().size() + nAdditions > maximumSize) {\n             throw new BufferOverflowException(\"Timeout expired\");\n         }\n     }\n     /**\n      * BoundedBuffer iterator.\n      */\n-    private class NotifyingIterator extends AbstractIteratorDecorator {\n+    private class NotifyingIterator extends AbstractIteratorDecorator<E> {\n \n-        public NotifyingIterator(Iterator it) {\n+        public NotifyingIterator(Iterator<E> it) {\n             super(it);\n         }\n ", "timestamp": 1252994069, "metainfo": ""}