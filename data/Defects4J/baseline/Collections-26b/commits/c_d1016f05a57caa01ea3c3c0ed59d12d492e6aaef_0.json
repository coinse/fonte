{"sha": "d1016f05a57caa01ea3c3c0ed59d12d492e6aaef", "log": "tab police  ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n      * Tests values.removeAll.\n      */\n     public void testValuesRemoveAll() {\n-    \tresetFull();\n-    \tCollection<V> values = getMap().values();\n-    \tList<V> sampleValuesAsList = Arrays.asList(getSampleValues());\n-    \tif (!values.equals(sampleValuesAsList)) {\n-    \t\treturn;\n-    \t}\n-\t\ttry {\n-\t\t\tassertFalse(values.removeAll(Collections.<V> emptySet()));\n-\t\t} catch (UnsupportedOperationException e) {\n-\t\t\t// if values.removeAll is unsupported, just skip this test\n-\t\t\treturn;\n-\t\t}\n-    \tassertEquals(sampleValuesAsList.size(), getMap().size());\n-    \ttry {\n-\t    \tassertTrue(values.removeAll(sampleValuesAsList));\n-\t    } catch (UnsupportedOperationException e) {\n-\t    \t// if values.removeAll is unsupported, just skip this test\n-\t    \treturn;\n-\t    }\n-\t    assertTrue(getMap().isEmpty());\n+        resetFull();\n+        Collection<V> values = getMap().values();\n+        List<V> sampleValuesAsList = Arrays.asList(getSampleValues());\n+        if (!values.equals(sampleValuesAsList)) {\n+            return;\n+        }\n+        try {\n+            assertFalse(values.removeAll(Collections.<V> emptySet()));\n+        } catch (UnsupportedOperationException e) {\n+            // if values.removeAll is unsupported, just skip this test\n+            return;\n+        }\n+        assertEquals(sampleValuesAsList.size(), getMap().size());\n+        try {\n+            assertTrue(values.removeAll(sampleValuesAsList));\n+        } catch (UnsupportedOperationException e) {\n+            // if values.removeAll is unsupported, just skip this test\n+            return;\n+        }\n+        assertTrue(getMap().isEmpty());\n     }\n \n     /**\n      * Test values.retainAll.\n      */\n     public void testValuesRetainAll() {\n-    \tresetFull();\n-    \tCollection<V> values = getMap().values();\n-    \tList<V> sampleValuesAsList = Arrays.asList(getSampleValues());\n-    \tif (!values.equals(sampleValuesAsList)) {\n-    \t\treturn;\n-    \t}\n-    \ttry {\n-    \t\tassertFalse(values.retainAll(sampleValuesAsList));\n-    \t} catch (UnsupportedOperationException e) {\n+        resetFull();\n+        Collection<V> values = getMap().values();\n+        List<V> sampleValuesAsList = Arrays.asList(getSampleValues());\n+        if (!values.equals(sampleValuesAsList)) {\n+            return;\n+        }\n+        try {\n+            assertFalse(values.retainAll(sampleValuesAsList));\n+        } catch (UnsupportedOperationException e) {\n             // if values.retainAll is unsupported, just skip this test\n-    \t\treturn;\n-    \t}\n-    \tassertEquals(sampleValuesAsList.size(), getMap().size());\n-    \ttry {\n-\t\t\tassertTrue(values.retainAll(Collections.<V> emptySet()));\n-\t\t} catch (UnsupportedOperationException e) {\n-\t\t\t// if values.retainAll is unsupported, just skip this test\n-\t\t\treturn;\n-\t\t}\n-\t\tassertTrue(getMap().isEmpty());\n+            return;\n+        }\n+        assertEquals(sampleValuesAsList.size(), getMap().size());\n+        try {\n+            assertTrue(values.retainAll(Collections.<V> emptySet()));\n+        } catch (UnsupportedOperationException e) {\n+            // if values.retainAll is unsupported, just skip this test\n+            return;\n+        }\n+        assertTrue(getMap().isEmpty());\n     }\n \n     /**\n      * Verifies that values.iterator.remove changes the underlying map.\n      */\n     public void testValuesIteratorRemoveChangesMap() {\n-    \tresetFull();\n-    \tList<V> sampleValuesAsList = Arrays.asList(getSampleValues());\n-    \tMap<V, Integer> cardinality = CollectionUtils.getCardinalityMap(sampleValuesAsList);\n-    \tCollection<V> values = getMap().values();\n-    \tfor (Iterator<V> iter = values.iterator(); iter.hasNext();) {\n-    \t\tV value = iter.next();\n-    \t\tInteger count = cardinality.get(value);\n-    \t\tif (count == null) {\n-    \t\t\treturn;\n-    \t\t}\n-    \t\ttry {\n-\t\t\t\titer.remove();\n-\t\t\t\tcardinality.put(value, --count);\n-    \t\t} catch (UnsupportedOperationException e) {\n-    \t\t\t// if values.iterator.remove is unsupported, just skip this test\n-    \t\t\treturn;\n-    \t\t}\n-    \t\tboolean expected = count > 0;\n-    \t\tStringBuilder msg = new StringBuilder(\"Value should \");\n-    \t\tmsg.append(expected ? \"yet \" : \"no longer \");\n-    \t\tmsg.append(\"be present in the underlying map\");\n-    \t\tassertEquals(msg.toString(), expected, getMap().containsValue(value));\n-    \t}\n-    \tassertTrue(getMap().isEmpty());\n+        resetFull();\n+        List<V> sampleValuesAsList = Arrays.asList(getSampleValues());\n+        Map<V, Integer> cardinality = CollectionUtils.getCardinalityMap(sampleValuesAsList);\n+        Collection<V> values = getMap().values();\n+        for (Iterator<V> iter = values.iterator(); iter.hasNext();) {\n+            V value = iter.next();\n+            Integer count = cardinality.get(value);\n+            if (count == null) {\n+                return;\n+            }\n+            try {\n+                iter.remove();\n+                cardinality.put(value, --count);\n+            } catch (UnsupportedOperationException e) {\n+                // if values.iterator.remove is unsupported, just skip this test\n+                return;\n+            }\n+            boolean expected = count > 0;\n+            StringBuilder msg = new StringBuilder(\"Value should \");\n+            msg.append(expected ? \"yet \" : \"no longer \");\n+            msg.append(\"be present in the underlying map\");\n+            assertEquals(msg.toString(), expected, getMap().containsValue(value));\n+        }\n+        assertTrue(getMap().isEmpty());\n     }\n \n     /**\n         Set<K> keys = getMap().keySet();\n         List<K> sampleKeysAsList = Arrays.asList(getSampleKeys());\n         if (!keys.equals(sampleKeysAsList)) {\n-        \treturn;\n+            return;\n         }\n         try {\n-        \tassertFalse(keys.removeAll(Collections.<K> emptySet()));\n+            assertFalse(keys.removeAll(Collections.<K> emptySet()));\n         } catch (UnsupportedOperationException e) {\n-        \treturn;\n+            return;\n         }\n         assertEquals(sampleKeysAsList, keys);\n         try {\n-        \tassertTrue(keys.removeAll(sampleKeysAsList));\n+            assertTrue(keys.removeAll(sampleKeysAsList));\n         } catch (UnsupportedOperationException e) {\n-        \treturn;\n+            return;\n         }\n         assertTrue(getMap().isEmpty());\n     }\n         Set<K> keys = getMap().keySet();\n         List<K> sampleKeysAsList = Arrays.asList(getSampleKeys());\n         if (!keys.equals(sampleKeysAsList)) {\n-        \treturn;\n+            return;\n         }\n         try {\n-        \tassertFalse(keys.retainAll(sampleKeysAsList));\n+            assertFalse(keys.retainAll(sampleKeysAsList));\n         } catch (UnsupportedOperationException e) {\n-        \treturn;\n+            return;\n         }\n         assertEquals(sampleKeysAsList, keys);\n         try {\n-        \tassertTrue(keys.retainAll(Collections.<K> emptySet()));\n+            assertTrue(keys.retainAll(Collections.<K> emptySet()));\n         } catch (UnsupportedOperationException e) {\n-        \treturn;\n+            return;\n         }\n         assertTrue(getMap().isEmpty());\n     }\n     public void testKeySetIteratorRemoveChangesMap() {\n         resetFull();\n         for (Iterator<K> iter = getMap().keySet().iterator(); iter.hasNext();) {\n-        \tK key = iter.next();\n-        \ttry {\n-        \t\titer.remove();\n-        \t} catch (UnsupportedOperationException e) {\n-        \t\treturn;\n-        \t}\n-        \tassertFalse(getMap().containsKey(key));\n+            K key = iter.next();\n+            try {\n+                iter.remove();\n+            } catch (UnsupportedOperationException e) {\n+                return;\n+            }\n+            assertFalse(getMap().containsKey(key));\n         }\n     }\n \n      * and testing if the entry was removed from the map.\n      */\n     public void testEntrySetRemoveChangesMap() {\n-    \tresetFull();\n-    \tK[] sampleKeys = getSampleKeys();\n-    \tV[] sampleValues = getSampleValues();\n-    \tSet<Map.Entry<K, V>> entrySet = getMap().entrySet();\n-    \tfor (int i = 0; i < sampleKeys.length; i++) {\n-    \t\ttry {\n-    \t\t\tentrySet.remove(new DefaultMapEntry<K, V>(sampleKeys[i], sampleValues[i]));\n-    \t\t} catch (UnsupportedOperationException e) {\n-    \t\t\t// if entrySet removal is unsupported, just skip this test\n-    \t\t\treturn;\n-    \t\t}\n-    \t\tassertTrue(\n-    \t\t\t\t\"Entry should have been removed from the underlying map.\",\n-    \t\t\t\t!getMap().containsKey(sampleKeys[i]));\n-    \t}\n+        resetFull();\n+        K[] sampleKeys = getSampleKeys();\n+        V[] sampleValues = getSampleValues();\n+        Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n+        for (int i = 0; i < sampleKeys.length; i++) {\n+            try {\n+                entrySet.remove(new DefaultMapEntry<K, V>(sampleKeys[i], sampleValues[i]));\n+            } catch (UnsupportedOperationException e) {\n+                // if entrySet removal is unsupported, just skip this test\n+                return;\n+            }\n+            assertTrue(\n+                    \"Entry should have been removed from the underlying map.\",\n+                    !getMap().containsKey(sampleKeys[i]));\n+        }\n     }\n \n     /**\n      * Test entrySet.removeAll.\n      */\n     public void testEntrySetRemoveAll() {\n-    \tresetFull();\n-    \tK[] sampleKeys = getSampleKeys();\n-    \tV[] sampleValues = getSampleValues();\n-    \t//verify map looks as expected:\n-    \tfor (int i = 0; i < sampleKeys.length; i++) {\n-    \t\tif (!getMap().containsKey(sampleKeys[i])) {\n-    \t\t\treturn;\n-    \t\t}\n-    \t\tV value = sampleValues[i];\n-    \t\tV test = getMap().get(sampleKeys[i]);\n-    \t\tif (value == test || value != null && value.equals(test)) {\n-    \t\t\tcontinue;\n-    \t\t}\n-    \t\treturn;\n-    \t}\n-    \tSet<Map.Entry<K, V>> entrySet = getMap().entrySet();\n-    \tHashSet<Map.Entry<K, V>> comparisonSet = new HashSet<Map.Entry<K, V>>(entrySet);\n-    \ttry {\n-    \t\tassertFalse(entrySet.removeAll(Collections.<Map.Entry<K, V>> emptySet()));\n-    \t} catch (UnsupportedOperationException e) {\n-    \t\treturn;\n-    \t}\n-    \tassertEquals(sampleKeys.length, getMap().size());\n-    \ttry {\n-    \t\tassertTrue(entrySet.removeAll(comparisonSet));\n-    \t} catch (UnsupportedOperationException e) {\n-    \t\treturn;\n-    \t}\n-    \tassertTrue(getMap().isEmpty());\n+        resetFull();\n+        K[] sampleKeys = getSampleKeys();\n+        V[] sampleValues = getSampleValues();\n+        //verify map looks as expected:\n+        for (int i = 0; i < sampleKeys.length; i++) {\n+            if (!getMap().containsKey(sampleKeys[i])) {\n+                return;\n+            }\n+            V value = sampleValues[i];\n+            V test = getMap().get(sampleKeys[i]);\n+            if (value == test || value != null && value.equals(test)) {\n+                continue;\n+            }\n+            return;\n+        }\n+        Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n+        HashSet<Map.Entry<K, V>> comparisonSet = new HashSet<Map.Entry<K, V>>(entrySet);\n+        try {\n+            assertFalse(entrySet.removeAll(Collections.<Map.Entry<K, V>> emptySet()));\n+        } catch (UnsupportedOperationException e) {\n+            return;\n+        }\n+        assertEquals(sampleKeys.length, getMap().size());\n+        try {\n+            assertTrue(entrySet.removeAll(comparisonSet));\n+        } catch (UnsupportedOperationException e) {\n+            return;\n+        }\n+        assertTrue(getMap().isEmpty());\n     }\n \n     /**\n      * Test entrySet.retainAll.\n      */\n     public void testEntrySetRetainAll() {\n-    \tresetFull();\n-    \tK[] sampleKeys = getSampleKeys();\n-    \tV[] sampleValues = getSampleValues();\n-    \t//verify map looks as expected:\n-    \tfor (int i = 0; i < sampleKeys.length; i++) {\n-    \t\tif (!getMap().containsKey(sampleKeys[i])) {\n-    \t\t\treturn;\n-    \t\t}\n-    \t\tV value = sampleValues[i];\n-    \t\tV test = getMap().get(sampleKeys[i]);\n-    \t\tif (value == test || value != null && value.equals(test)) {\n-    \t\t\tcontinue;\n-    \t\t}\n-    \t\treturn;\n-    \t}\n-    \tSet<Map.Entry<K, V>> entrySet = getMap().entrySet();\n-    \tHashSet<Map.Entry<K, V>> comparisonSet = new HashSet<Map.Entry<K, V>>(entrySet);\n-    \ttry {\n-    \t\tassertFalse(entrySet.retainAll(comparisonSet));\n-    \t} catch (UnsupportedOperationException e) {\n-    \t\treturn;\n-    \t}\n-    \tassertEquals(sampleKeys.length, getMap().size());\n-    \ttry {\n-    \t\tassertTrue(entrySet.retainAll(Collections.<Map.Entry<K, V>> emptySet()));\n-    \t} catch (UnsupportedOperationException e) {\n-    \t\treturn;\n-    \t}\n-    \tassertTrue(getMap().isEmpty());\n+        resetFull();\n+        K[] sampleKeys = getSampleKeys();\n+        V[] sampleValues = getSampleValues();\n+        //verify map looks as expected:\n+        for (int i = 0; i < sampleKeys.length; i++) {\n+            if (!getMap().containsKey(sampleKeys[i])) {\n+                return;\n+            }\n+            V value = sampleValues[i];\n+            V test = getMap().get(sampleKeys[i]);\n+            if (value == test || value != null && value.equals(test)) {\n+                continue;\n+            }\n+            return;\n+        }\n+        Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n+        HashSet<Map.Entry<K, V>> comparisonSet = new HashSet<Map.Entry<K, V>>(entrySet);\n+        try {\n+            assertFalse(entrySet.retainAll(comparisonSet));\n+        } catch (UnsupportedOperationException e) {\n+            return;\n+        }\n+        assertEquals(sampleKeys.length, getMap().size());\n+        try {\n+            assertTrue(entrySet.retainAll(Collections.<Map.Entry<K, V>> emptySet()));\n+        } catch (UnsupportedOperationException e) {\n+            return;\n+        }\n+        assertTrue(getMap().isEmpty());\n     }\n \n     /**\n     public void testEntrySetIteratorRemoveChangesMap() {\n         resetFull();\n         for (Iterator<Map.Entry<K, V>> iter = getMap().entrySet().iterator(); iter.hasNext();) {\n-        \tK key = iter.next().getKey();\n-        \ttry {\n-        \t\titer.remove();\n-        \t} catch (UnsupportedOperationException e) {\n-        \t\treturn;\n-        \t}\n-        \tassertFalse(getMap().containsKey(key));\n+            K key = iter.next().getKey();\n+            try {\n+                iter.remove();\n+            } catch (UnsupportedOperationException e) {\n+                return;\n+            }\n+            assertFalse(getMap().containsKey(key));\n         }\n     }\n ", "timestamp": 1297718690, "metainfo": ""}