{"sha": "d08fa6d71e51dda58f265635ce344d272f228552", "log": "Added Bag interface, implementations and JUnit test cases as submitted by Chuck Burdick   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/AbstractBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/08/29 15:28:07 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+\n+/**\n+ * This class provides a skeletal implementation of the {@link Bag}\n+ * interface to minimize the effort required for target implementations.\n+ *\n+ * @author Chuck Burdick\n+ **/\n+public abstract class AbstractBag implements Bag {\n+   private Map _map = null;\n+   private int _total = 0;\n+   private int _mods = 0;\n+\n+   public boolean add(Object o) {\n+      return add(o, 1);\n+   }\n+\n+   public boolean add(Object o, int i) {\n+      _mods++;\n+      if (i > 0) {\n+         int count = (i + getCount(o));\n+         _map.put(o, new Integer(count));\n+         _total += i;\n+         return (getCount(o) == i);\n+      } else {\n+         return false;\n+      }\n+   }\n+\n+   public boolean addAll(Collection c) {\n+      boolean changed = false;\n+      Iterator i = c.iterator();\n+      while (i.hasNext()) {\n+         boolean added = add(i.next());\n+         changed = changed || added;\n+      }\n+      return changed;\n+   }\n+\n+   public void clear() {\n+      _mods++;\n+      _map.clear();\n+      _total = 0;\n+   }\n+\n+   public boolean contains(Object o) {\n+      return _map.containsKey(o);\n+   }\n+\n+   public boolean containsAll(Collection c) {\n+      return containsAll(new HashBag(c));\n+   }\n+\n+   /**\n+    * Returns <code>true</code> if the bag contains all elements in\n+    * the given collection, respecting cardinality.\n+    * @see #containsAll(Collection)\n+    **/\n+   public boolean containsAll(Bag other) {\n+      boolean result = true;\n+      Iterator i = other.uniqueSet().iterator();\n+      while (i.hasNext()) {\n+         Object current = i.next();\n+         boolean contains =\n+            getCount(current) >= ((Bag)other).getCount(current);\n+         result = result && contains;\n+      }\n+      return result;\n+   }\n+\n+   public boolean equals(Object o) {\n+      boolean result = false;\n+      if (o instanceof AbstractBag) {\n+         result = _map.equals(((AbstractBag)o).getMap());\n+      } else if (o instanceof Map) {\n+         result = _map.equals((Map)o);\n+      }\n+      return result;\n+   }\n+\n+   public int hashCode() {\n+      return _map.hashCode();\n+   }\n+\n+   public boolean isEmpty() {\n+      return _map.isEmpty();\n+   }\n+\n+   public Iterator iterator() {\n+      return new BagIterator(this, extractList().iterator()); \n+   }\n+\n+   private class BagIterator implements Iterator {\n+      private AbstractBag _parent = null;\n+      private Iterator _support = null;\n+      private Object _current = null;\n+      private int _mods = 0;\n+\n+      public BagIterator(AbstractBag parent, Iterator support) {\n+         _parent = parent;\n+         _support = support;\n+         _current = null;\n+         _mods = parent.modCount();\n+      }\n+\n+      public boolean hasNext() {\n+         return _support.hasNext();\n+      }\n+\n+      public Object next() {\n+         if (_parent.modCount() != _mods) {\n+            throw new ConcurrentModificationException();\n+         }\n+         _current = _support.next();\n+         return _current;\n+      }\n+      \n+      public void remove() {\n+         if (_parent.modCount() != _mods) {\n+            throw new ConcurrentModificationException();\n+         }\n+         _support.remove();\n+         _parent.remove(_current, 1);\n+         _mods++;\n+      }\n+   }\n+\n+   public boolean remove (Object o) {\n+      return remove(o, getCount(o));\n+   }\n+\n+   public boolean remove (Object o, int i) {\n+      _mods++;\n+      boolean result = false;\n+      int count = getCount(o);\n+      if (count > i) {\n+         _map.put(o, new Integer(count - i));\n+         result = true;\n+         _total -= i;\n+      } else {\n+         result = uniqueSet().remove(o);\n+         _total -= count;\n+      }\n+      return result;\n+   }\n+\n+   public boolean removeAll(Collection c) {\n+      boolean result = false;\n+      if (c != null) {\n+         Iterator i = c.iterator();\n+         while (i.hasNext()) {\n+            boolean changed = remove(i.next(), 1);\n+            result = result || changed;\n+         }\n+      }\n+      return result;\n+   }\n+\n+   public boolean retainAll(Collection c) {\n+      return retainAll(new HashBag(c));\n+   }\n+\n+   /**\n+    * Remove any members of the bag that are not in the given\n+    * bag, respecting cardinality.\n+    * @see #retainAll(Collection)\n+    * @return <code>true</code> if this call changed the collection\n+    **/\n+   public boolean retainAll(Bag other) {\n+      boolean result = false;\n+      Bag excess = new HashBag();\n+      Iterator i = uniqueSet().iterator();\n+      while (i.hasNext()) {\n+         Object current = i.next();\n+         int myCount = getCount(current);\n+         int otherCount = other.getCount(current);\n+         if (1 <= otherCount && otherCount <= myCount) {\n+            excess.add(current, myCount - otherCount);\n+         } else {\n+            excess.add(current, myCount);\n+         }\n+      }\n+      if (!excess.isEmpty()) {\n+         result = removeAll(excess);\n+      }\n+      return result;\n+   }\n+\n+   public Object[] toArray() {\n+      return extractList().toArray();\n+   }\n+\n+   public Object[] toArray(Object[] a) {\n+      return extractList().toArray(a);\n+   }\n+\n+   public int getCount(Object o) {\n+      int result = 0;\n+      Integer count = MapUtils.getInteger(_map, o);\n+      if (count != null) {\n+         result = count.intValue();\n+      }\n+      return result;\n+   }\n+\n+   public Set uniqueSet() {\n+      return _map.keySet();\n+   }\n+\n+   public int size() {\n+      return _total;\n+   }\n+\n+   /**\n+    * Actually walks the bag to make sure the count is correct and\n+    * resets the running total\n+    **/\n+   protected int calcTotalSize() {\n+      _total = extractList().size();\n+      return _total;\n+   }\n+\n+   /**\n+    * Utility method for implementations to set the map that backs\n+    * this bag. Not intended for interactive use outside of\n+    * subclasses.\n+    **/\n+   protected void setMap(Map m) {\n+      _map = m;\n+   }\n+\n+   /**\n+    * Utility method for implementations to access the map that backs\n+    * this bag. Not intended for interactive use outside of\n+    * subclasses.\n+    **/\n+   protected Map getMap() {\n+      return _map;\n+   }\n+\n+   /**\n+    * Create a list for use in iteration, etc.\n+    **/\n+   private List extractList() {\n+      List result = new ArrayList();\n+      Iterator i = uniqueSet().iterator();\n+      while (i.hasNext()) {\n+         Object current = i.next();\n+         for (int index = 0; index < getCount(current); index++) {\n+            result.add(current);\n+         }\n+      }\n+      return result;\n+   }\n+\n+   /**\n+    * Return number of modifications for iterator\n+    **/\n+   private int modCount() {\n+      return _mods;\n+   }\n+}\n+\n+\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/Bag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Bag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/08/29 15:28:07 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+/**\n+ * A {@link Collection} that keeps a count of its members of the same\n+ * type, using <code>hashCode</code> to check for equality. Suppose\n+ * you have a Bag that contains <code>{a, a, b, c}</code>.  Calling\n+ * {@link #getCount} on <code>a</code> would return 2, while calling\n+ * {@link #uniqueSet} would return <code>{a, b, c}</code>.\n+ *\n+ * @author Chuck Burdick\n+ **/\n+public interface Bag extends Collection {\n+   /**\n+    * Return the number of occurrences (cardinality) of the given\n+    * object currently in the bag. If the object does not exist in the\n+    * bag, return 0.\n+    **/\n+   public int getCount(Object o);\n+\n+   /**\n+    * Add the given object to the bag and keep a count. If the object\n+    * is already in the {@link #uniqueSet} then increment its count as\n+    * reported by {@link #getCount}. Otherwise add it to the {@link\n+    * #uniqueSet} and report its count as 1.\n+    * @return <code>true</code> if the object was not already in the\n+    *         <code>uniqueSet</code>\n+    * @see #getCount\n+    **/\n+   public boolean add(Object o);\n+\n+   /**\n+    * Add <code>i</code> copies of the given object to the bag and\n+    * keep a count.\n+    * @return <code>true</code> if the object was not already in the\n+    *         <code>uniqueSet</code>\n+    * @see #add(Object)\n+    * @see #getCount\n+    **/\n+   public boolean add(Object o, int i);\n+\n+   /**\n+    * Remove all occurrences of the given object from the bag, and do\n+    * not represent the object in the {@link #uniqueSet}.\n+    * @see #remove(Object, int)\n+    * @return <code>true</code> if this call changed the collection\n+    **/\n+   public boolean remove(Object o);\n+\n+   /**\n+    * Remove the given number of occurrences from the bag. If the bag\n+    * contains less than <code>i</code> occurrences, the item will be\n+    * removed from the {@link #uniqueSet}.\n+    * @see #getCount\n+    * @see #remove(Object)\n+    * @return <code>true</code> if this call changed the collection\n+    **/\n+   public boolean remove(Object o, int i);\n+\n+   /**\n+    * The {@link Set} of unique members that represent all members in\n+    * the bag. Uniqueness constraints are the same as those in {@link\n+    * Set}.\n+    **/\n+   public Set uniqueSet();\n+\n+   /**\n+    * Returns the total number of items in the bag across all types.\n+    * @see #size\n+    **/\n+   public int size();\n+\n+   /**\n+    * Returns <code>true</code> if the bag contains all elements in\n+    * the given collection, respecting cardinality.  That is, if the\n+    * given collection <code>C</code> contains <code>n</code> copies\n+    * of a given object, calling {@link #getCount} on that object must\n+    * be >= <code>n</code> for all <code>n</code> in <code>C</code>.\n+    **/\n+   public boolean containsAll(Collection c);\n+\n+   /**\n+    * Remove all elements represented in the given collection,\n+    * respecting cardinality.  That is, if the given collection\n+    * <code>C</code> contains <code>n</code> copies of a given object,\n+    * the bag will have <code>n</code> fewer copies, assuming the bag\n+    * had at least <code>n</code> copies to begin with.\n+    * @return <code>true</code> if this call changed the collection\n+    **/\n+   public boolean removeAll(Collection c);\n+\n+   /**\n+    * Remove any members of the bag that are not in the given\n+    * collection, respecting cardinality.  That is, if the given\n+    * collection <code>C</code> contains <code>n</code> copies of a\n+    * given object and the bag has <code>m &gt; n</code> copies, then\n+    * delete <code>m - n</code> copies from the bag.  In addition, if\n+    * <code>e</code> is an object in the bag but\n+    * <code>!C.contains(e)</code>, then remove <code>e</code> and any\n+    * of its copies.\n+    *\n+    * @return <code>true</code> if this call changed the collection\n+    **/\n+   public boolean retainAll(Collection c);\n+\n+   /**\n+    * Returns an {@link Iterator} over the entire set of members,\n+    * including copies due to cardinality. This iterator is fail-fast\n+    * and will not tolerate concurrent modifications.\n+    **/\n+   public Iterator iterator();\n+}\n+\n+\n+\n+\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/HashBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/HashBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/08/29 15:28:07 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+\n+/**\n+ * An implementation of {@link Bag} that is backed by a {@link\n+ * HashMap}.\n+ *\n+ * @author Chuck Burdick\n+ **/\n+public class HashBag extends AbstractBag implements Bag {\n+   public HashBag() {\n+      setMap(new HashMap());\n+   }\n+\n+   /**\n+    * New {@link Bag} containing all the members of the given\n+    * collection.\n+    * @see #addAll\n+    **/\n+   public HashBag(Collection c) {\n+      this();\n+      addAll(c);\n+   }\n+}\n+\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/SortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SortedBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/08/29 15:28:07 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * A type of {@link Bag} that maintains order among its unique\n+ * representative members.\n+ * @author Chuck Burdick\n+ **/\n+public interface SortedBag extends Bag {\n+\n+   /**\n+    * Returns the comparator associated with this sorted set, or null\n+    * if it uses its elements' natural ordering.\n+    **/\n+   public Comparator comparator();\n+\n+   /**\n+    * Returns the first (lowest) member.\n+    **/\n+   public Object first();\n+\n+   /**\n+    * Returns the last (highest) member.\n+    **/\n+   public Object last();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/TreeBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TreeBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/08/29 15:28:07 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * An implementation of {@link Bag} that is backed by a {@link\n+ * TreeMap}. Order will be maintained among the unique representative\n+ * members.\n+ *\n+ * @author Chuck Burdick\n+ **/\n+public class TreeBag extends AbstractBag implements SortedBag, Bag {\n+   public TreeBag() {\n+      setMap(new TreeMap());\n+   }\n+\n+   /**\n+    * New {@link Bag} that maintains order on its unique\n+    * representative members according to the given {@link\n+    * Comparator}.\n+    **/\n+   public TreeBag(Comparator c) {\n+      setMap(new TreeMap(c));\n+   }\n+\n+   /**\n+    * New {@link Bag} containing all the members of the given\n+    * collection.\n+    * @see #addAll\n+    **/\n+   public TreeBag(Collection c) {\n+      this();\n+      addAll(c);\n+   }\n+\n+   public Object first() {\n+      return ((SortedMap)getMap()).firstKey();\n+   }\n+\n+   public Object last() {\n+      return ((SortedMap)getMap()).lastKey();\n+   }\n+\n+   public Comparator comparator() {\n+      return ((SortedMap)getMap()).comparator();\n+   }\n+}\n+\n+\n+\n+\n+\n+\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.10 2001/08/23 12:04:40 jstrachan Exp $\n- * $Revision: 1.10 $\n- * $Date: 2001/08/23 12:04:40 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.11 2001/08/29 15:28:07 jstrachan Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2001/08/29 15:28:07 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.10 2001/08/23 12:04:40 jstrachan Exp $\n+ * @version $Id: TestAll.java,v 1.11 2001/08/29 15:28:07 jstrachan Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestFastHashMap1.suite());\n         suite.addTest(TestFastTreeMap.suite());\n         suite.addTest(TestFastTreeMap1.suite());\n+        suite.addTest(TestHashBag.suite());\n         suite.addTest(TestHashMap.suite());\n         suite.addTest(TestSingletonIterator.suite());\n+        suite.addTest(TestTreeBag.suite());\n         suite.addTest(TestTreeMap.suite());\n         return suite;\n     }\n-\n+        \n     public static void main(String args[]) {\n         String[] testCaseName = { TestAll.class.getName() };\n         junit.textui.TestRunner.main(testCaseName);\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/08/29 15:28:07 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import junit.framework.*;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Tests base {@link Bag} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeBag} method.\n+ * <p>\n+ * If your {@link Bag} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link Bag} fails.\n+ *\n+ * @author Chuck Burdick\n+ * @version $Id: TestBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $\n+ */\n+public abstract class TestBag extends TestCollection {\n+    public TestBag(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * Return a new, empty {@link Bag} to used for testing.\n+     */\n+    public abstract Bag makeBag();\n+\n+    public Collection makeCollection() {\n+        return makeBag();\n+    }\n+\n+    public void testBagAdd() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Should have count of 1\",\n+                     1, bag.getCount(\"A\"));\n+        bag.add(\"A\");\n+        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Should have count of 2\",\n+                     2, bag.getCount(\"A\"));\n+        bag.add(\"B\");\n+        assertTrue(bag.contains(\"A\"));\n+        assertTrue(bag.contains(\"B\"));\n+    }\n+\n+    public void testBagEqualsSelf() {\n+        Bag bag = makeBag();\n+        assertTrue(bag.equals(bag));\n+        bag.add(\"elt\");\n+        assertTrue(bag.equals(bag));\n+        bag.add(\"elt\"); // again\n+        assertTrue(bag.equals(bag));\n+        bag.add(\"elt2\");\n+        assertTrue(bag.equals(bag));\n+    }\n+\n+   public void testRemove() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\");\n+      assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+      bag.remove(\"A\");\n+      assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n+      bag.remove(\"A\", 0);\n+      assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n+      bag.remove(\"A\", 2);\n+      assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+      bag.remove(\"A\");\n+      assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n+   }\n+\n+   public void testRemoveAll() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\", 2);\n+      assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+      bag.add(\"B\");\n+      bag.add(\"C\");\n+      assertEquals(\"Should have count of 4\", 4, bag.size());\n+      List delete = new ArrayList();\n+      delete.add(\"A\");\n+      delete.add(\"B\");\n+      bag.removeAll(delete);\n+      assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+      assertEquals(\"Should have count of 0\", 0, bag.getCount(\"B\"));\n+      assertEquals(\"Should have count of 1\", 1, bag.getCount(\"C\"));\n+      assertEquals(\"Should have count of 2\", 2, bag.size());\n+   }\n+\n+   public void testContains() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"B\");\n+      bag.add(\"B\");\n+      List compare = new ArrayList();\n+      compare.add(\"A\");\n+      compare.add(\"B\");\n+      assertEquals(\"Other list has 1 'B'\", 1,\n+                 (new HashBag(compare)).getCount(\"B\"));\n+      assertTrue(\"Bag has at least 1 'B'\", 1 <= bag.getCount(\"B\"));\n+      assertTrue(\"Bag contains items in the list\", bag.containsAll(compare));\n+      compare.add(\"A\");\n+      compare.add(\"B\");\n+      assertEquals(\"Other list has 2 'B'\", 2,\n+                 (new HashBag(compare)).getCount(\"B\"));\n+      assertTrue(\"Bag has at least 2 'B'\", 2 <= bag.getCount(\"B\"));\n+      assertTrue(\"Bag contains items in the list\", bag.containsAll(compare));\n+      compare.add(\"A\");\n+      compare.add(\"B\");\n+      assertEquals(\"Other list has 3 'B'\", 3,\n+                 (new HashBag(compare)).getCount(\"B\"));\n+      assertTrue(\"Bag does not have 3 'B'\", 3 > bag.getCount(\"B\"));\n+      assertTrue(\"Bag contains items in the list\", !bag.containsAll(compare));\n+   }\n+\n+   public void testSize() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"B\");\n+      bag.add(\"B\");\n+      assertEquals(\"Should have 5 total items\", 5, bag.size());\n+      bag.remove(\"A\", 2);\n+      assertEquals(\"Should have 1 'A'\", 1, bag.getCount(\"A\"));\n+      assertEquals(\"Should have 3 total items\", 3, bag.size());\n+      bag.remove(\"B\");\n+      assertEquals(\"Should have 1 total item\", 1, bag.size());\n+   }\n+\n+   public void testRetainAll() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"B\");\n+      bag.add(\"B\");\n+      bag.add(\"C\");\n+      List retains = new ArrayList();\n+      retains.add(\"B\");\n+      retains.add(\"C\");\n+      bag.retainAll(retains);\n+      assertEquals(\"Should have 2 total items\", 2, bag.size());\n+   }\n+\n+   public void testIterator() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"B\");\n+      assertEquals(\"Bag should have 3 items\", 3, bag.size());\n+      Iterator i = bag.iterator();\n+      assertEquals(\"First should be 'A'\", \"A\", i.next());\n+      assertEquals(\"Second should be 'A'\", \"A\", i.next());\n+      i.remove();\n+      assertEquals(\"Third should be 'B'\", \"B\", i.next());\n+      assertTrue(\"Should have no more\", !i.hasNext());\n+      assertEquals(\"Bag should have 2 items\", 2, bag.size());\n+      assertEquals(\"Bag should have 1 'A'\", 1, bag.getCount(\"A\"));\n+   }\n+\n+   public void testIteratorFail() {\n+      Bag bag = makeBag();\n+      bag.add(\"A\");\n+      bag.add(\"A\");\n+      bag.add(\"B\");\n+      Iterator i = bag.iterator();\n+      assertEquals(\"First should be 'A'\", \"A\", i.next());\n+      bag.remove(\"A\");\n+      try {\n+         i.next();\n+         fail(\"Should throw ConcurrentModificationException\");\n+      } catch (ConcurrentModificationException e) {\n+         // expected\n+      }\n+   }\n+}\n+\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestHashBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestHashBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/08/29 15:28:07 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import junit.framework.*;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link HashBag}\n+ * implementation.\n+ *\n+ * @author Chuck Burdick\n+ * @version $Id: TestHashBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $ */\n+public class TestHashBag extends TestBag {\n+   public TestHashBag(String testName) {\n+      super(testName);\n+   }\n+\n+   public static Test suite() {\n+      return new TestSuite(TestHashBag.class);\n+   }\n+\n+   public static void main(String args[]) {\n+      String[] testCaseName = { TestHashBag.class.getName() };\n+      junit.textui.TestRunner.main(testCaseName);\n+   }\n+\n+   public Bag makeBag() {\n+      return new HashBag();\n+   }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestTreeBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTreeBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/08/29 15:28:07 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import junit.framework.*;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link TreeBag}\n+ * implementation.\n+ *\n+ * @author Chuck Burdick\n+ * @version $Id: TestTreeBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $ */\n+public class TestTreeBag extends TestBag {\n+   public TestTreeBag(String testName) {\n+      super(testName);\n+   }\n+\n+   public static Test suite() {\n+      return new TestSuite(TestTreeBag.class);\n+   }\n+\n+   public static void main(String args[]) {\n+      String[] testCaseName = { TestTreeBag.class.getName() };\n+      junit.textui.TestRunner.main(testCaseName);\n+   }\n+\n+   public Bag makeBag() {\n+      return new TreeBag();\n+   }\n+\n+   public SortedBag setupBag() {\n+      SortedBag bag = (SortedBag)makeBag();\n+      bag.add(\"C\");\n+      bag.add(\"A\");\n+      bag.add(\"B\");\n+      bag.add(\"D\");\n+      return bag;\n+   }\n+\n+   public void testOrdering() {\n+      Bag bag = setupBag();\n+      assertEquals(\"Should get elements in correct order\",\n+                   \"A\", bag.toArray()[0]);\n+      assertEquals(\"Should get elements in correct order\",\n+                   \"B\", bag.toArray()[1]);\n+      assertEquals(\"Should get elements in correct order\",\n+                   \"C\", bag.toArray()[2]);\n+      assertEquals(\"Should get first key\",\n+                   \"A\", ((SortedBag)bag).first());\n+      assertEquals(\"Should get last key\",\n+                   \"D\", ((SortedBag)bag).last());\n+   }\n+}\n+\n+\n+\n+\n+\n+\n+", "timestamp": 999098887, "metainfo": ""}