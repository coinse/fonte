{"sha": "f8aa3e033c1fde4a434864f666315b433498d32c", "log": "COLLECTIONS-217 - Flat3Map - Fix setValue in MapIterator and EntrySetIterator to work correctly  ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java\n             switch (nextIndex) {\n                 case 3: \n                     parent.value3 = value;\n+                    break;\n                 case 2:\n                     parent.value2 = value;\n+                    break;\n                 case 1:\n                     parent.value1 = value;\n+                    break;\n             }\n             return old;\n         }\n             switch (nextIndex) {\n                 case 3: \n                     parent.value3 = value;\n+                    break;\n                 case 2:\n                     parent.value2 = value;\n+                    break;\n                 case 1:\n                     parent.value1 = value;\n+                    break;\n             }\n             return old;\n         }\n--- a/src/test/org/apache/commons/collections/map/TestFlat3Map.java\n+++ b/src/test/org/apache/commons/collections/map/TestFlat3Map.java\n import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.util.Iterator;\n import java.util.Map;\n \n import junit.framework.Test;\n \n     private static final Integer ONE = new Integer(1);\n     private static final Integer TWO = new Integer(2);\n+    private static final Integer THREE = new Integer(3);\n     private static final String TEN = \"10\";\n     private static final String TWENTY = \"20\";\n+    private static final String THIRTY = \"30\";\n         \n     public TestFlat3Map(String testName) {\n         super(testName);\n         assertEquals(ONE, ser.get(TEN));\n         assertEquals(TWO, ser.get(TWENTY));\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n+    public void testEntryIteratorSetValue1() throws Exception {\n+        Flat3Map map = new Flat3Map();\n+        map.put(ONE, TEN);\n+        map.put(TWO, TWENTY);\n+        map.put(THREE, THIRTY);\n+        \n+        Iterator it = map.entrySet().iterator();\n+        Map.Entry entry = (Map.Entry) it.next();\n+        entry.setValue(\"NewValue\");\n+        assertEquals(3, map.size());\n+        assertEquals(true, map.containsKey(ONE));\n+        assertEquals(true, map.containsKey(TWO));\n+        assertEquals(true, map.containsKey(THREE));\n+        assertEquals(\"NewValue\", map.get(ONE));\n+        assertEquals(TWENTY, map.get(TWO));\n+        assertEquals(THIRTY, map.get(THREE));\n+    }\n+\n+    public void testEntryIteratorSetValue2() throws Exception {\n+        Flat3Map map = new Flat3Map();\n+        map.put(ONE, TEN);\n+        map.put(TWO, TWENTY);\n+        map.put(THREE, THIRTY);\n+        \n+        Iterator it = map.entrySet().iterator();\n+        it.next();\n+        Map.Entry entry = (Map.Entry) it.next();\n+        entry.setValue(\"NewValue\");\n+        assertEquals(3, map.size());\n+        assertEquals(true, map.containsKey(ONE));\n+        assertEquals(true, map.containsKey(TWO));\n+        assertEquals(true, map.containsKey(THREE));\n+        assertEquals(TEN, map.get(ONE));\n+        assertEquals(\"NewValue\", map.get(TWO));\n+        assertEquals(THIRTY, map.get(THREE));\n+    }\n+\n+    public void testEntryIteratorSetValue3() throws Exception {\n+        Flat3Map map = new Flat3Map();\n+        map.put(ONE, TEN);\n+        map.put(TWO, TWENTY);\n+        map.put(THREE, THIRTY);\n+        \n+        Iterator it = map.entrySet().iterator();\n+        it.next();\n+        it.next();\n+        Map.Entry entry = (Map.Entry) it.next();\n+        entry.setValue(\"NewValue\");\n+        assertEquals(3, map.size());\n+        assertEquals(true, map.containsKey(ONE));\n+        assertEquals(true, map.containsKey(TWO));\n+        assertEquals(true, map.containsKey(THREE));\n+        assertEquals(TEN, map.get(ONE));\n+        assertEquals(TWENTY, map.get(TWO));\n+        assertEquals(\"NewValue\", map.get(THREE));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMapIteratorSetValue1() throws Exception {\n+        Flat3Map map = new Flat3Map();\n+        map.put(ONE, TEN);\n+        map.put(TWO, TWENTY);\n+        map.put(THREE, THIRTY);\n+        \n+        MapIterator it = map.mapIterator();\n+        it.next();\n+        it.setValue(\"NewValue\");\n+        assertEquals(3, map.size());\n+        assertEquals(true, map.containsKey(ONE));\n+        assertEquals(true, map.containsKey(TWO));\n+        assertEquals(true, map.containsKey(THREE));\n+        assertEquals(\"NewValue\", map.get(ONE));\n+        assertEquals(TWENTY, map.get(TWO));\n+        assertEquals(THIRTY, map.get(THREE));\n+    }\n+\n+    public void testMapIteratorSetValue2() throws Exception {\n+        Flat3Map map = new Flat3Map();\n+        map.put(ONE, TEN);\n+        map.put(TWO, TWENTY);\n+        map.put(THREE, THIRTY);\n+        \n+        MapIterator it = map.mapIterator();\n+        it.next();\n+        it.next();\n+        it.setValue(\"NewValue\");\n+        assertEquals(3, map.size());\n+        assertEquals(true, map.containsKey(ONE));\n+        assertEquals(true, map.containsKey(TWO));\n+        assertEquals(true, map.containsKey(THREE));\n+        assertEquals(TEN, map.get(ONE));\n+        assertEquals(\"NewValue\", map.get(TWO));\n+        assertEquals(THIRTY, map.get(THREE));\n+    }\n+\n+    public void testMapIteratorSetValue3() throws Exception {\n+        Flat3Map map = new Flat3Map();\n+        map.put(ONE, TEN);\n+        map.put(TWO, TWENTY);\n+        map.put(THREE, THIRTY);\n+        \n+        MapIterator it = map.mapIterator();\n+        it.next();\n+        it.next();\n+        it.next();\n+        it.setValue(\"NewValue\");\n+        assertEquals(3, map.size());\n+        assertEquals(true, map.containsKey(ONE));\n+        assertEquals(true, map.containsKey(TWO));\n+        assertEquals(true, map.containsKey(THREE));\n+        assertEquals(TEN, map.get(ONE));\n+        assertEquals(TWENTY, map.get(TWO));\n+        assertEquals(\"NewValue\", map.get(THREE));\n+    }\n+\n     //-----------------------------------------------------------------------\n     public BulkTest bulkTestMapIterator() {\n         return new TestFlatMapIterator();", "timestamp": 1153260180, "metainfo": ""}