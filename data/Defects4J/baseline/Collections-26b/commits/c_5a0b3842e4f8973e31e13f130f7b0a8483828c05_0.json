{"sha": "5a0b3842e4f8973e31e13f130f7b0a8483828c05", "log": "Add abstract test class for OrderedMap   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestOrderedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/AbstractTestOrderedMap.java,v 1.1 2003/11/20 22:34:49 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.TreeMap;\n+\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.comparators.NullComparator;\n+import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n+import org.apache.commons.collections.iterators.AbstractTestOrderedMapIterator;\n+import org.apache.commons.collections.iterators.MapIterator;\n+\n+/**\n+ * Abstract test class for {@link OrderedMap} methods and contracts.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/11/20 22:34:49 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractTestOrderedMap extends AbstractTestMap {\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test name\n+     */\n+    public AbstractTestOrderedMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * OrderedMap uses TreeMap as its known comparison.\n+     * \n+     * @return a map that is known to be valid\n+     */\n+    public Map makeConfirmedMap() {\n+        return new TreeMap(new NullComparator());\n+    }\n+    \n+    /**\n+     * The only confirmed collection we have that is ordered is the sorted one.\n+     * Thus, sort the keys.\n+     */\n+    public Object[] getSampleKeys() {\n+        List list = new ArrayList(Arrays.asList(super.getSampleKeys()));\n+        Collections.sort(list, new NullComparator());\n+        return list.toArray();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFirstKey() {\n+        resetEmpty();\n+        OrderedMap ordered = (OrderedMap) map;\n+        try {\n+            ordered.firstKey();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        \n+        resetFull();\n+        ordered = (OrderedMap) map;\n+        Object confirmedFirst = confirmed.keySet().iterator().next();\n+        assertEquals(confirmedFirst, ordered.firstKey());\n+    }\n+    \n+    public void testLastKey() {\n+        resetEmpty();\n+        OrderedMap ordered = (OrderedMap) map;\n+        try {\n+            ordered.lastKey();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        \n+        resetFull();\n+        ordered = (OrderedMap) map;\n+        Object confirmedLast = null;\n+        for (Iterator it = confirmed.keySet().iterator(); it.hasNext();) {\n+            confirmedLast = it.next();\n+        }\n+        assertEquals(confirmedLast, ordered.lastKey());\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public void testNextKey() {\n+        resetEmpty();\n+        OrderedMap ordered = (OrderedMap) map;\n+        assertEquals(null, ordered.nextKey(getOtherKeys()[0]));\n+        if (isAllowNullKey() == false) {\n+            try {\n+                assertEquals(null, ordered.nextKey(null)); // this is allowed too\n+            } catch (NullPointerException ex) {}\n+        } else {\n+            assertEquals(null, ordered.nextKey(null));\n+        }\n+        \n+        resetFull();\n+        ordered = (OrderedMap) map;\n+        Iterator it = confirmed.keySet().iterator();\n+        Object confirmedLast = it.next();\n+        while (it.hasNext()) {\n+            Object confirmedObject = it.next();\n+            assertEquals(confirmedObject, ordered.nextKey(confirmedLast));\n+            confirmedLast = confirmedObject;\n+        }\n+        assertEquals(null, ordered.nextKey(confirmedLast));\n+        \n+        if (isAllowNullKey() == false) {\n+            try {\n+                ordered.nextKey(null);\n+                fail();\n+            } catch (NullPointerException ex) {}\n+        } else {\n+            assertEquals(null, ordered.nextKey(null));\n+        }\n+    }\n+    \n+    public void testPreviousKey() {\n+        resetEmpty();\n+        OrderedMap ordered = (OrderedMap) map;\n+        assertEquals(null, ordered.previousKey(getOtherKeys()[0]));\n+        if (isAllowNullKey() == false) {\n+            try {\n+                assertEquals(null, ordered.previousKey(null)); // this is allowed too\n+            } catch (NullPointerException ex) {}\n+        } else {\n+            assertEquals(null, ordered.previousKey(null));\n+        }\n+        \n+        resetFull();\n+        ordered = (OrderedMap) map;\n+        List list = new ArrayList(confirmed.keySet());\n+        Collections.reverse(list);\n+        Iterator it = list.iterator();\n+        Object confirmedLast = it.next();\n+        while (it.hasNext()) {\n+            Object confirmedObject = it.next();\n+            assertEquals(confirmedObject, ordered.previousKey(confirmedLast));\n+            confirmedLast = confirmedObject;\n+        }\n+        assertEquals(null, ordered.previousKey(confirmedLast));\n+        \n+        if (isAllowNullKey() == false) {\n+            try {\n+                ordered.previousKey(null);\n+                fail();\n+            } catch (NullPointerException ex) {}\n+        } else {\n+            if (isAllowNullKey() == false) {\n+                assertEquals(null, ordered.previousKey(null));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public BulkTest bulkTestMapIterator() {\n+        return new InnerTestOrderedMapIterator();\n+    }\n+    \n+    // TODO: Test mapIterator() and orderedMapIterator() separately\n+    public class InnerTestMapIterator extends AbstractTestMapIterator {\n+        public InnerTestMapIterator() {\n+            super(\"InnerTestMapIterator\");\n+        }\n+        \n+        public boolean supportsRemove() {\n+            return AbstractTestOrderedMap.this.isRemoveSupported();\n+        }\n+\n+        public boolean supportsSetValue() {\n+            return AbstractTestOrderedMap.this.isSetValueSupported();\n+        }\n+\n+        public MapIterator makeEmptyMapIterator() {\n+            resetEmpty();\n+            return ((OrderedMap) AbstractTestOrderedMap.this.map).mapIterator();\n+        }\n+\n+        public MapIterator makeFullMapIterator() {\n+            resetFull();\n+            return ((OrderedMap) AbstractTestOrderedMap.this.map).mapIterator();\n+        }\n+        \n+        public Map getMap() {\n+            // assumes makeFullMapIterator() called first\n+            return AbstractTestOrderedMap.this.map;\n+        }\n+        \n+        public Map getConfirmedMap() {\n+            // assumes makeFullMapIterator() called first\n+            return AbstractTestOrderedMap.this.confirmed;\n+        }\n+        \n+        public void verify() {\n+            super.verify();\n+            AbstractTestOrderedMap.this.verify();\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public BulkTest bulkTestOrderedMapIterator() {\n+        return new InnerTestOrderedMapIterator();\n+    }\n+    \n+    // TODO: Test mapIterator() and orderedMapIterator() separately\n+    public class InnerTestOrderedMapIterator extends AbstractTestOrderedMapIterator {\n+        public InnerTestOrderedMapIterator() {\n+            super(\"InnerTestOrderedMapIterator\");\n+        }\n+        \n+        public boolean supportsRemove() {\n+            return AbstractTestOrderedMap.this.isRemoveSupported();\n+        }\n+\n+        public boolean supportsSetValue() {\n+            return AbstractTestOrderedMap.this.isSetValueSupported();\n+        }\n+\n+        public MapIterator makeEmptyMapIterator() {\n+            resetEmpty();\n+            return ((OrderedMap) AbstractTestOrderedMap.this.map).orderedMapIterator();\n+        }\n+\n+        public MapIterator makeFullMapIterator() {\n+            resetFull();\n+            return ((OrderedMap) AbstractTestOrderedMap.this.map).orderedMapIterator();\n+        }\n+        \n+        public Map getMap() {\n+            // assumes makeFullMapIterator() called first\n+            return AbstractTestOrderedMap.this.map;\n+        }\n+        \n+        public Map getConfirmedMap() {\n+            // assumes makeFullMapIterator() called first\n+            return AbstractTestOrderedMap.this.confirmed;\n+        }\n+        \n+        public void verify() {\n+            super.verify();\n+            AbstractTestOrderedMap.this.verify();\n+        }\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestListOrderedMap.java,v 1.4 2003/11/20 00:03:06 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestListOrderedMap.java,v 1.5 2003/11/20 22:34:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  */\n package org.apache.commons.collections.map;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.Map;\n-import java.util.Set;\n \n import junit.framework.Test;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.iterators.AbstractTestOrderedMapIterator;\n-import org.apache.commons.collections.iterators.MapIterator;\n \n /**\n  * Extension of {@link TestMap} for exercising the {@link ListOrderedMap}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/11/20 00:03:06 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/20 22:34:49 $\n  * \n  * @author Henri Yandell\n  * @author Stephen Colebourne\n  */\n-public class TestListOrderedMap extends AbstractTestMap {\n+public class TestListOrderedMap extends AbstractTestOrderedMap {\n \n     public TestListOrderedMap(String testName) {\n         super(testName);\n         return ListOrderedMap.decorate(new HashMap());\n     }\n \n-    //-----------------------------------------------------------------------\n-    public BulkTest bulkTestMapIterator() {\n-        return new TestListOrderedMapIterator();\n-    }\n-    \n-    // TODO: Test mapIterator() and orderedMapIterator() separately\n-    public class TestListOrderedMapIterator extends AbstractTestOrderedMapIterator {\n-        public TestListOrderedMapIterator() {\n-            super(\"TestListOrderedMapIterator\");\n-        }\n-        \n-        public boolean supportsRemove() {\n-            return TestListOrderedMap.this.isRemoveSupported();\n-        }\n-\n-        public boolean supportsSetValue() {\n-            return TestListOrderedMap.this.isSetValueSupported();\n-        }\n-\n-        public MapIterator makeEmptyMapIterator() {\n-            resetEmpty();\n-            return ((ListOrderedMap) TestListOrderedMap.this.map).mapIterator();\n-        }\n-\n-        public MapIterator makeFullMapIterator() {\n-            resetFull();\n-            return ((ListOrderedMap) TestListOrderedMap.this.map).mapIterator();\n-        }\n-        \n-        public Map getMap() {\n-            // assumes makeFullMapIterator() called first\n-            return TestListOrderedMap.this.map;\n-        }\n-        \n-        public Map getConfirmedMap() {\n-            // assumes makeFullMapIterator() called first\n-            return TestListOrderedMap.this.confirmed;\n-        }\n-        \n-        public void verify() {\n-            super.verify();\n-            TestListOrderedMap.this.verify();\n-        }\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    // Creates a known series of Objects, puts them in \n-    // an OrderedMap and ensures that all three Collection \n-    // methods return in the correct order.\n-    public void testInsertionOrder() {\n-        int size = 10; // number to try\n-        ArrayList list = new ArrayList(size);\n-        for( int i=0; i<size; i++ ) {\n-            list.add( new Object() );\n-        }\n-\n-        Map map = makeEmptyMap();\n-        for( Iterator itr = list.iterator(); itr.hasNext(); ) {\n-            Object obj = itr.next();\n-            map.put( obj, obj );\n-        }\n-\n-        assertSameContents(map.values(), list);\n-        assertSameContents(map.keySet(), list);\n-\n-        // check entrySet\n-        Set entries = map.entrySet();\n-        assertEquals( entries.size(), list.size() );\n-        Iterator i1 = entries.iterator();\n-        Iterator i2 = list.iterator();\n-        while( i1.hasNext() && i2.hasNext() ) {\n-            Map.Entry entry = (Map.Entry) i1.next();\n-            Object obj = i2.next();\n-            assertSame( entry.getKey(), obj );\n-            assertSame( entry.getValue(), obj );\n-        }\n-        assertTrue( !(i1.hasNext() && i2.hasNext()) );\n-\n-    }\n-\n-    private void assertSameContents(Collection c1, Collection c2) {\n-        assertNotNull(c1);\n-        assertNotNull(c2);\n-        assertEquals( c1.size(), c2.size() );\n-        Iterator i1 = c1.iterator();\n-        Iterator i2 = c2.iterator();\n-        while( i1.hasNext() && i2.hasNext() ) {\n-            assertSame( i1.next(), i2.next() );\n-        }\n-        // ensure they've both ended\n-        assertTrue( !(i1.hasNext() && i2.hasNext()) );\n-    }\n-\n }", "timestamp": 1069367689, "metainfo": ""}