{"sha": "5ae848724e8b54d5b9965912d801341078cb56ff", "log": "class that allows you to chain comparators together for SQL-like sorting...more Javadocs to come   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ComparatorChain.java,v 1.1 2002/03/01 23:29:24 morgand Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/03/01 23:29:24 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.comparators;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * <p>A ComparatorChain is a Comparator that wraps one or\n+ * more Comparators in sequence.  The ComparatorChain\n+ * calls each Comparator in sequence until either 1)\n+ * any single Comparator returns a non-zero result\n+ * (and that result is then returned),\n+ * or 2) the ComparatorChain is exhausted (and zero is\n+ * returned).  This type of sorting is very similar\n+ * to multi-column sorting in SQL, and this class\n+ * allows Java classes to emulate that kind of behaviour\n+ * when sorting a List.</p>\n+ * \n+ * <p>To further facilitate SQL-like sorting, the order of\n+ * any single Comparator in the list can be reversed.</p>\n+ * \n+ * <p>Calling a method that adds new Comparators or\n+ * changes the ascend/descend sort <i>after compare(Object,\n+ * Object) has been called</i> will result in an\n+ * UnsupportedOperationException.</p>\n+ * \n+ * <p>Instances of ComparatorChain are not synchronized.</p>\n+ * \n+ * @author Morgan Delagrange\n+ */\n+public class ComparatorChain implements Comparator,Serializable {\n+\n+    protected List comparatorChain = null;\n+    // 0 = ascend; 1 = descend\n+    protected BitSet orderingBits = null;\n+\n+    // ComparatorChain is \"locked\" after the first time\n+    // compare(Object,Object) is called)\n+    protected boolean isLocked = false;\n+\n+    public ComparatorChain(Comparator comparator) {\n+        this(comparator,false);\n+    }\n+\n+    public ComparatorChain(Comparator comparator, boolean reverse) {\n+        comparatorChain = new ArrayList();\n+        comparatorChain.add(comparator);\n+        orderingBits = new BitSet(1);\n+        if (reverse == true) {\n+            orderingBits.set(0);\n+        }\n+    }\n+\n+    /**\n+     * \n+     * @param list\n+     * @see #ComparatorChain(List,BitSet)\n+     */\n+    public ComparatorChain(List list) {\n+        this(list,new BitSet(list.size()));\n+    }\n+\n+    /**\n+     * \n+     * @param list   WARNING: If this list is not modifiable, some\n+     *               subsequent modifications\n+     *               to the ComparatorChain can fail.  Also, if you intend\n+     *               to serialize\n+     *               this ComparatorChain, then this List must also\n+     *               be Serializable.\n+     * @param bits\n+     */\n+    public ComparatorChain(List list, BitSet bits) {\n+        comparatorChain = list;\n+        orderingBits = bits;\n+    }\n+\n+    public void addComparator(Comparator comparator) {\n+        addComparator(comparator,false);\n+    }\n+\n+    public void addComparator(Comparator comparator, boolean reverse) {\n+        checkLocked();\n+        \n+        comparatorChain.add(comparator);\n+        if (reverse == true) {\n+            orderingBits.set(comparatorChain.size() - 1);\n+        }\n+    }\n+\n+    public void setComparator(int index, Comparator comparator) {\n+        setComparator(index,comparator,false);\n+    }\n+\n+    public void setComparator(int index, Comparator comparator, boolean reverse) {\n+        checkLocked();\n+\n+        comparatorChain.set(index,comparator);\n+        if (reverse == true) {\n+            orderingBits.set(index);\n+        } else {\n+            orderingBits.clear(index);\n+        }\n+    }\n+\n+    public void checkLocked() {\n+        if (isLocked == true) {\n+            throw new UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\");\n+        }\n+    }\n+\n+    public int compare(Object o1, Object o2) {\n+        if (isLocked == false) {\n+            isLocked = true;\n+        }\n+        \n+        // iterate over all comparators in the chain\n+        Iterator comparators = comparatorChain.iterator();\n+        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n+\n+            Comparator comparator = (Comparator) comparators.next();\n+            int retval = comparator.compare(o1,o2);\n+            if (retval != 0) {\n+                // invert the order if it is a reverse sort\n+                if (orderingBits.get(comparatorIndex) == true) {\n+                    retval *= -1;\n+                }\n+\n+                return retval;\n+            }\n+\n+        }\n+\n+        // if comparators are exhausted, return 0\n+        return 0;\n+    }\n+\n+}", "timestamp": 1015025364, "metainfo": ""}