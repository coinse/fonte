{"sha": "37e9c49744ba1dc578e55639514c9799cb8377dd", "log": "Add a default MapIterator implementation that wraps a Map entrySet   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/DefaultMapIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/DefaultMapIterator.java,v 1.1 2003/11/02 23:40:53 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.commons.collections.pairs.TiedMapEntry;\n+\n+/**\n+ * Implements a <code>MapIterator</code> using a Map entrySet.\n+ * <pre>\n+ * MapIterator it = map.mapIterator();\n+ * while (it.hasNext()) {\n+ *   Object key = it.next();\n+ *   Object value = it.getValue();\n+ *   it.setValue(newValue);\n+ * }\n+ * </pre>\n+ *  \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/02 23:40:53 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class DefaultMapIterator implements ResetableMapIterator {\n+    \n+    private final Map map;\n+    private Iterator iterator;\n+    private Map.Entry last;\n+    private boolean canRemove = false;\n+    \n+    /**\n+     * Constructor.\n+     * \n+     * @param map  the map to iterate over\n+     */\n+    public DefaultMapIterator(Map map) {\n+        super();\n+        this.map = map;\n+        this.iterator = map.entrySet().iterator();\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    /**\n+     * Checks to see if there are more entries still to be iterated.\n+     *\n+     * @return <code>true</code> if the iterator has more elements\n+     */\n+    public boolean hasNext() {\n+        return iterator.hasNext();\n+    }\n+\n+    /**\n+     * Gets the next <em>key</em> from the <code>Map</code>.\n+     *\n+     * @return the next key in the iteration\n+     * @throws NoSuchElementException if the iteration is finished\n+     */\n+    public Object next() {\n+        last = (Map.Entry) iterator.next();\n+        canRemove = true;\n+        return last.getKey();\n+    }\n+\n+    /**\n+     * Removes the last returned key from the underlying <code>Map</code>.\n+     * <p>\n+     * This method can be called once per call to <code>next()</code>.\n+     *\n+     * @throws UnsupportedOperationException if remove is not supported by the map\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     * @throws IllegalStateException if <code>remove()</code> has already been called\n+     *  since the last call to <code>next()</code>\n+     */\n+    public void remove() {\n+        if (canRemove == false) {\n+            throw new IllegalStateException(\"Iterator remove() can only be called once after next()\");\n+        }\n+        iterator.remove();\n+        last = null;\n+        canRemove = false;\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the current key, which is the key returned by the last call\n+     * to <code>next()</code>.\n+     *\n+     * @return the current key\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     */\n+    public Object getKey() {\n+        if (last == null) {\n+            throw new IllegalStateException(\"Iterator getKey() can only be called after next() and before remove()\");\n+        }\n+        return last.getKey();\n+    }\n+\n+    /**\n+     * Gets the current value, which is the value associated with the last key\n+     * returned by <code>next()</code>.\n+     *\n+     * @return the current value\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     */\n+    public Object getValue() {\n+        if (last == null) {\n+            throw new IllegalStateException(\"Iterator getValue() can only be called after next() and before remove()\");\n+        }\n+        return last.getValue();\n+    }\n+\n+    /**\n+     * Sets the value associated with the current key.\n+     *\n+     * @param value  the new value\n+     * @return the previous value\n+     * @throws UnsupportedOperationException if setValue is not supported by the map\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     * @throws IllegalStateException if <code>remove()</code> has been called since the\n+     *  last call to <code>next()</code>\n+     */\n+    public Object setValue(Object value) {\n+        if (last == null) {\n+            throw new IllegalStateException(\"Iterator setValue() can only be called after next() and before remove()\");\n+        }\n+        return last.setValue(value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the last returned key-value pair from the underlying <code>Map</code>\n+     * as a Map Entry instance.\n+     * <p>\n+     * The returned entry will not change when <code>next</code> is called.\n+     * Changes made to the entry via <code>setValue</code> will change the map.\n+     * If you call setValue after next on the iterator, a ConcurrentModificationException\n+     * may occur.\n+     * \n+     * @return the last return key-value pair as an independent Map Entry\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     * @throws IllegalStateException if <code>remove()</code> has been called since the\n+     *  last call to <code>next()</code>\n+     */\n+    public Map.Entry asMapEntry() {\n+        return new TiedMapEntry(map, getKey());\n+    }        \n+    \n+    /**\n+     * Resets the state of the iterator.\n+     */\n+    public void reset() {\n+        iterator = map.entrySet().iterator();\n+        last = null;\n+        canRemove = false;\n+    }\n+    \n+    /**\n+     * Gets the iterator as a String.\n+     * \n+     * @return a string version of the iterator\n+     */    \n+    public String toString() {\n+        if (last == null) {\n+            return \"MapIterator[\" + getKey() + \"=\" + getValue() + \"]\";\n+        } else {\n+            return \"MapIterator[]\";\n+        }\n+    }\n+    \n+}", "timestamp": 1067816453, "metainfo": ""}