{"sha": "7da91cadc49d72b97d1c0f1225eaf3e9beedbbbd", "log": "Add LoopingListIterator bug 30166   ", "commit": "\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n import org.apache.commons.collections.iterators.IteratorEnumeration;\n import org.apache.commons.collections.iterators.ListIteratorWrapper;\n import org.apache.commons.collections.iterators.LoopingIterator;\n+import org.apache.commons.collections.iterators.LoopingListIterator;\n import org.apache.commons.collections.iterators.ObjectArrayIterator;\n import org.apache.commons.collections.iterators.ObjectArrayListIterator;\n import org.apache.commons.collections.iterators.ObjectGraphIterator;\n  * against versions 2.1.1 and 3.1.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.27 $ $Date: 2004/05/26 21:53:46 $\n+ * @version $Revision: 1.28 $ $Date: 2004/07/17 21:08:05 $\n  * \n  * @author Stephen Colebourne\n  * @author Phil Steitz\n             throw new NullPointerException(\"Collection must not be null\");\n         }\n         return new LoopingIterator(coll);\n+    }\n+    \n+    /**\n+     * Gets an iterator that loops continuously over the supplied list.\n+     * <p>\n+     * The iterator will only stop looping if the remove method is called\n+     * enough times to empty the list, or if the list is empty to start with.\n+     *\n+     * @param list  the list to iterate over, not null\n+     * @return a new looping iterator\n+     * @throws NullPointerException if the list is null\n+     */\n+    public static ResettableIterator loopingListIterator(List list) {\n+        if (list == null) {\n+            throw new NullPointerException(\"List must not be null\");\n+        }\n+        return new LoopingListIterator(list);\n     }\n     \n     // Views", "timestamp": 1090098485, "metainfo": ""}