{"sha": "39f52a2f79d2558efad83964344546b1bd7fa9cf", "log": "Added test for UnmodifiableMap, plugged small protection gap.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/decorators/UnmodifiableMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/UnmodifiableMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableMap.java,v 1.3 2003/08/31 17:24:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableMap.java,v 1.4 2003/10/06 05:06:05 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:24:46 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/06 05:06:05 $\n  * \n  * @author Stephen Colebourne\n  */\n             Map.Entry entry = (Map.Entry) iterator.next();\n             return new UnmodifiableEntry(entry);\n         }\n+        \n+        public void remove() {\n+            throw new UnsupportedOperationException();\n+        }\n     }\n \n     /**\n--- a/src/test/org/apache/commons/collections/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.17 2003/10/03 06:24:13 bayard Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.18 2003/10/06 05:06:05 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections decorators tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.17 $ $Date: 2003/10/03 06:24:13 $\n+ * @version $Revision: 1.18 $ $Date: 2003/10/06 05:06:05 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestTypedBag.suite());\n         suite.addTest(TestTypedSortedBag.suite());\n         \n+        suite.addTest(TestUnmodifiableMap.suite());\n+        \n         return suite;\n     }\n         \n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestUnmodifiableMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestUnmodifiableMap.java,v 1.1 2003/10/06 05:06:05 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestMap;\n+\n+/**\n+ * Extension of {@link AbstractTestMap} for exercising the \n+ * {@link UnmodifiableMap} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/06 05:06:05 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestUnmodifiableMap extends AbstractTestMap{\n+    \n+    public TestUnmodifiableMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestUnmodifiableMap.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestUnmodifiableMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //-------------------------------------------------------------------\n+    \n+    protected Map makeEmptyMap() {\n+        return UnmodifiableMap.decorate(new HashMap());\n+    }\n+    \n+    protected boolean isChangeable() {\n+        return false;\n+    }\n+    \n+    protected boolean isAddRemoveModifiable() {\n+        return false;\n+    }\n+    \n+    protected Map makeFullMap() {\n+        Map m = new HashMap();\n+        addSampleMappings(m);\n+        return UnmodifiableMap.decorate(m);\n+    }\n+    \n+    //--------------------------------------------------------------------\n+    protected UnmodifiableMap map = null;\n+    protected ArrayList array = null;\n+    \n+    protected void setupMap() {\n+        map = (UnmodifiableMap) makeFullMap();\n+        array = new ArrayList();\n+        array.add(\"one\");\n+    }\n+    \n+    public void testUnmodifiableBase() {\n+        setupMap();\n+        try {\n+            map.put(\"key\", \"value\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            map.putAll(new HashMap());\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            map.clear();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            map.remove(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * Verifies that the keyset is not modifiable -- effectively tests\n+     * protection of UnmodifiableSet decorator\n+     */\n+    public void testUnmodifiableKeySet() {\n+        setupMap();\n+        Set keys = map.keySet();\n+        try {\n+            keys.add(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            keys.addAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            keys.clear();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            keys.remove(\"one\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            keys.removeAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            keys.retainAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            Iterator iterator = keys.iterator();\n+            iterator.next();\n+            iterator.remove();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+        \n+    /**\n+     * Verifies that the values collection is not modifiable -- effectively tests\n+     * protection of UnmodifiableCollection decorator\n+     */\n+    public void testUnmodifiableValues() {\n+        setupMap();\n+        Collection values = map.values();\n+        try {\n+            values.add(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            values.addAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            values.clear();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            values.remove(\"one\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            values.removeAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            values.retainAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            Iterator iterator = values.iterator();\n+            iterator.next();\n+            iterator.remove();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * Verifies that the entrySet is not modifiable -- effectively tests\n+     * protection of UnmodifiableEntrySet \n+     */\n+    public void testUnmodifiableEntries() {\n+        setupMap();\n+        Set entries = map.entrySet();\n+        try {\n+            entries.add(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            entries.addAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            entries.clear();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            entries.remove(\"one\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            entries.removeAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            entries.retainAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            Iterator iterator = entries.iterator();\n+            iterator.next();\n+            iterator.remove();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            Iterator iterator = entries.iterator();\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            entry.setValue(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }                 \n+    }\n+    \n+    /**\n+     * Verifies that entries consists of Map.Entries corresponding to the parallel\n+     * keys and values arrays  (not necessarily in order)\n+     */\n+    protected void checkEntries(Object[] keys, Object[] values, Object[] entries,\n+        boolean checkLengths) {\n+        if (checkLengths) {\n+            assertEquals(keys.length, entries.length);\n+        }\n+        for (int i = 0; i < keys.length; i++) {\n+            Map.Entry entry = (Map.Entry) entries[i];\n+            boolean found = false;\n+            // Can't assume entries are in insertion order, so have\n+            // to search for the key\n+            for (int j = 0; j < keys.length; j++) {\n+                if (entry.getKey() == keys[j]) {\n+                    found = true;\n+                    assertEquals(entry.getValue(), values[j]);\n+                    break;\n+                }\n+            }\n+            assertTrue(found);\n+        }\n+    }\n+    \n+    /**\n+     * Tests EntrySet toArray() implementation\n+     */\n+    public void testToArray() {\n+        setupMap();\n+        Object[] keys = getSampleKeys();\n+        Object[] values = getSampleValues();\n+        Object[] entries = map.entrySet().toArray();\n+        assertTrue(keys.length == entries.length);\n+        checkEntries(keys, values, entries, true);\n+        entries = map.entrySet().toArray(entries);\n+        checkEntries(keys, values, entries, true);\n+        Object[] testArray = new Object[2];\n+        entries = map.entrySet().toArray(testArray);\n+        checkEntries(keys, values, entries, true);\n+        testArray = new Object[50];\n+        entries = map.entrySet().toArray(testArray);\n+        checkEntries(keys, values, entries, false);\n+        assertEquals(testArray[map.size()], null);\n+        testArray = new Object[0];\n+        Object[] resultArray = new Object[0];\n+        resultArray = map.entrySet().toArray(testArray);\n+        checkEntries(keys, values, resultArray, true);   \n+    }         \n+}", "timestamp": 1065416765, "metainfo": ""}