{"sha": "6dc045c4edd02c1be5772a73ee739b4107d5123d", "log": "Complete javadoc for set operation helper classes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n  * @version $Id$\n  */\n //TODO - note generic types for review in wiki - especially <?> ones\n-//TODO - doc Cardinality Helpers\n public class CollectionUtils {\n \n+    /**\n+     * Helper class to easily access cardinality properties of two collections.\n+     * @param <O>  the element type\n+     */\n     private static class CardinalityHelper<O> {\n-        final Map<O, Integer> cardinalityA, cardinalityB;\n-\n+        \n+        /** Contains the cardinality for each object in collection A. */\n+        final Map<O, Integer> cardinalityA;\n+        \n+        /** Contains the cardinality for each object in collection B. */\n+        final Map<O, Integer> cardinalityB;\n+\n+        /**\n+         * Create a new CardinalityHelper for two collections.\n+         * @param a  the first collection\n+         * @param b  the second collection\n+         */\n         public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n             cardinalityA = CollectionUtils.<O>getCardinalityMap(a);\n             cardinalityB = CollectionUtils.<O>getCardinalityMap(b);\n         }\n \n+        /**\n+         * Returns the maximum frequency of an object.\n+         * @param obj  the object\n+         * @return the maximum frequency of the object \n+         */\n         public final int max(final Object obj) {\n             return Math.max(freqA(obj), freqB(obj));\n         }\n \n+        /**\n+         * Returns the minimum frequency of an object.\n+         * @param obj  the object\n+         * @return the minimum frequency of the object\n+         */\n         public final int min(final Object obj) {\n             return Math.min(freqA(obj), freqB(obj));\n         }\n \n+        /**\n+         * Returns the frequency of this object in collection A.\n+         * @param obj  the object\n+         * @return the frequency of the object in collection A\n+         */\n         public int freqA(final Object obj) {\n             return getFreq(obj, cardinalityA);\n         }\n \n+        /**\n+         * Returns the frequency of this object in collection B.\n+         * @param obj  the object\n+         * @return the frequency of the object in collection B\n+         */\n         public int freqB(final Object obj) {\n             return getFreq(obj, cardinalityB);\n         }\n \n+        /**\n+         * Returns the number of unique elements in collection A.\n+         * @return the number of unique elements in collection A\n+         */\n+        @SuppressWarnings(\"unused\")\n         public int sizeA() {\n             return cardinalityA.size();\n         }\n         \n+        /**\n+         * Returns the number of unique elements in collection A.\n+         * @return the number of unique elements in collection A\n+         */\n         public int sizeB() {\n             return cardinalityB.size();\n         }\n         }\n     }\n \n+    /**\n+     * Helper class for set-related operations, e.g. union, subtract, intersection.\n+     * @param <O>  the element type\n+     */\n     private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O> {\n+        \n+        /** Contains the unique elements of the two collections. */\n         private final Set<O> elements;\n+        \n+        /** Output collection. */\n         private final List<O> newList;\n \n+        /**\n+         * Create a new set operation helper from the two collections.\n+         * @param a  the first collection\n+         * @param b  the second collection\n+         */\n         public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n             super(a, b);\n             elements = new HashSet<O>();\n             return elements.iterator();\n         }\n \n+        /**\n+         * Add the object {@code count} times to the result collection.\n+         * @param obj  the object to add\n+         * @param count  the count\n+         */\n         public void setCardinality(final O obj, final int count) {\n             for (int i = 0; i < count; i++) {\n                 newList.add(obj);\n             }\n         }\n \n+        /**\n+         * Returns the resulting collection.\n+         * @return the result\n+         */\n         public Collection<O> list() {\n             return newList;\n         }", "timestamp": 1360594931, "metainfo": ""}