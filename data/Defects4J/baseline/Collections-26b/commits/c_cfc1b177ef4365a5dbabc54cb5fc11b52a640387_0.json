{"sha": "cfc1b177ef4365a5dbabc54cb5fc11b52a640387", "log": "Make ListIteratorWrapper resettable rfe 39449, from Thomas Schapitz  ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n+++ b/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n /*\n- *  Copyright 1999-2004 The Apache Software Foundation\n+ *  Copyright 1999-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  */\n package org.apache.commons.collections.iterators;\n \n+import java.util.ArrayList;\n import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.ListIterator;\n+import java.util.List;\n import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.ResettableListIterator;\n \n /**\n  * Converts an iterator into a list iterator by caching the returned entries.\n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n  */\n-public class ListIteratorWrapper implements ListIterator {\n+public class ListIteratorWrapper implements ResettableListIterator {\n \n     /** Message used when remove, set or add are called. */\n     private static final String UNSUPPORTED_OPERATION_MESSAGE =\n     /** The underlying iterator being decorated. */\n     private final Iterator iterator;\n     /** The list being used to cache the iterator. */\n-    private final LinkedList list = new LinkedList();\n+    private final List list = new ArrayList();\n \n     /** The current index of this iterator. */\n     private int currentIndex = 0;\n         throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n     }\n \n+    // ResettableIterator interface\n+    //-------------------------------------------------------------------------\n+    /**\n+     * Resets this iterator back to the position at which the iterator\n+     * was created.\n+     */\n+    public void reset()  {\n+        currentIndex = 0;\n+    }\n+\n }\n--- a/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+import org.apache.commons.collections.ResettableListIterator;\n \n /**\n  * Tests the ListIteratorWrapper to insure that it simulates\n         assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n \n         try {\n-            Object testValue = iter.next();\n+            iter.next();\n         } catch (Exception e) {\n             assertTrue(\"NoSuchElementException must be thrown\", \n                        e.getClass().equals((new NoSuchElementException()).getClass()));\n         }\n \n         try {\n-            Object testValue = iter.previous();\n+            iter.previous();\n         } catch (Exception e) {\n             assertTrue(\"NoSuchElementException must be thrown\", \n                        e.getClass().equals((new NoSuchElementException()).getClass()));\n \n     }\n \n+    public void testReset() {\n+        ResettableListIterator iter = (ResettableListIterator) makeFullIterator();\n+        Object first = iter.next();\n+        Object second = iter.next();\n+        \n+        iter.reset();\n+        \n+        // after reset, there shouldn't be any previous elements\n+        assertFalse(\"No previous elements after reset()\", iter.hasPrevious());\n+\n+        // after reset, the results should be the same as before\n+        assertEquals(\"First element should be the same\", first, iter.next());\n+        assertEquals(\"Second elment should be the same\", second, iter.next());\n+        \n+        // after passing the point, where we resetted, continuation should work as expected\n+        for (int i = 2; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            Object iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+    }\n+\n }\n-", "timestamp": 1146923970, "metainfo": ""}