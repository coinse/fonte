{"sha": "766d9add03d4bd3dad2d23cd573de873854d045d", "log": "[COLLECTIONS-263] Added MapUtils#populateMap(MultiMap, ...) methods.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/MapUtils.java\n     }\n \n     /**\n+     * Populates a MultiMap using the supplied <code>Transformer</code> to transform the collection\n+     * values into keys, using the unaltered collection value as the value in the <code>MultiMap</code>.\n+     *\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map the <code>MultiMap</code> to populate.\n+     * @param collection the <code>Collection</code> to use as input values for the map.\n+     * @param keyTransformer the <code>Transformer</code> used to transform the collection value into a key value\n+     * @throws NullPointerException if the map, collection or transformer are null\n+     */\n+    public static <K, V> void populateMap(final MultiMap<K, V> map, final Collection<? extends V> collection,\n+                                          final Transformer<V, K> keyTransformer) {\n+        populateMap(map, collection, keyTransformer, TransformerUtils.<V>nopTransformer());\n+    }\n+    \n+    /**\n+     * Populates a MultiMap using the supplied <code>Transformer</code>s to transform the collection\n+     * values into keys and values.\n+     *\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param <E>  the type of object contained in the {@link Collection}\n+     * @param map the <code>MultiMap</code> to populate.\n+     * @param collection the <code>Collection</code> to use as input values for the map.\n+     * @param keyTransformer the <code>Transformer</code> used to transform the collection value into a key value\n+     * @param valueTransformer the <code>Transformer</code> used to transform the collection value into a value\n+     * @throws NullPointerException if the map, collection or transformers are null\n+     */\n+    public static <K, V, E> void populateMap(final MultiMap<K, V> map, final Collection<? extends E> collection, \n+                                             final Transformer<E, K> keyTransformer, \n+                                             final Transformer<E, V> valueTransformer) {\n+        final Iterator<? extends E> iter = collection.iterator();\n+        while (iter.hasNext()) {\n+            final E temp = iter.next();\n+            map.put(keyTransformer.transform(temp), valueTransformer.transform(temp));\n+        }\n+    }\n+\n+    /**\n      * Get the specified {@link Map} as an {@link IterableMap}.\n      *\n      * @param <K>  the key type\n--- a/src/test/java/org/apache/commons/collections4/MapUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/MapUtilsTest.java\n \n import java.io.ByteArrayOutputStream;\n import java.io.PrintStream;\n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import org.apache.commons.collections4.keyvalue.DefaultMapEntry;\n import org.apache.commons.collections4.map.HashedMap;\n import org.apache.commons.collections4.map.LazyMap;\n+import org.apache.commons.collections4.map.MultiValueMap;\n import org.apache.commons.collections4.map.PredicatedMap;\n \n /**\n         }\n     }\n \n+    /**\n+     * Test class for populateMap(MultiMap). \n+     */\n+    public static class X implements Comparable<X> {\n+        int key;\n+        String name;\n+\n+        public X(int key, String name) {\n+            this.key = key;\n+            this.name = name;\n+        }\n+\n+        public int compareTo(X o) {\n+            return key - o.key;\n+        }\n+        \n+    }\n+\n+    public void testPopulateMultiMap() {\n+        // Setup Test Data\n+        final List<X> list = new ArrayList<X>();\n+        list.add(new X(1, \"x1\"));\n+        list.add(new X(2, \"x2\"));\n+        list.add(new X(2, \"x3\"));        \n+        list.add(new X(5, \"x4\"));\n+        list.add(new X(5, \"x5\"));\n+\n+        // Now test key transform population\n+        final MultiValueMap<Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<Integer, Collection<X>>());\n+        MapUtils.populateMap(map, list, new Transformer<X, Integer>() {\n+            public Integer transform(X input) {\n+                return input.key;\n+            }\n+        }, TransformerUtils.<X> nopTransformer());\n+        assertEquals(list.size(), map.totalSize());\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            assertEquals(true, map.containsKey(list.get(i).key));\n+            assertEquals(true, map.containsValue(list.get(i)));\n+        }\n+    }\n+\n     public void testIterableMap() {\n         try {\n             MapUtils.iterableMap(null);", "timestamp": 1366922338, "metainfo": ""}