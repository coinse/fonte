{"sha": "5abcddb1d5e8dbfbca00ebb8f9ea4a080f3a8480", "log": "values can now be accessed as a List using valueList() additional list-like method, setValue(int,Object) rfe 37015  ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n /*\n- *  Copyright 2003-2004 The Apache Software Foundation\n+ *  Copyright 2003-2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n-import java.util.AbstractCollection;\n+import java.util.AbstractList;\n import java.util.AbstractSet;\n import java.util.ArrayList;\n import java.util.Collection;\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Gets a view over the keys in the map.\n+     * <p>\n+     * The Collection will be ordered by object insertion into the map.\n+     *\n+     * @see #keyList()\n+     * @return the fully modifiable collection view over the keys\n+     */\n     public Set keySet() {\n         return new KeySetView(this);\n     }\n \n+    /**\n+     * Gets a view over the keys in the map as a List.\n+     * <p>\n+     * The List will be ordered by object insertion into the map.\n+     * The List is unmodifiable.\n+     *\n+     * @see #keySet()\n+     * @return the unmodifiable list view over the keys\n+     * @since Commons Collections 3.2\n+     */\n+    public List keyList() {\n+        return UnmodifiableList.decorate(insertOrder);\n+    }\n+\n+    /**\n+     * Gets a view over the values in the map.\n+     * <p>\n+     * The Collection will be ordered by object insertion into the map.\n+     * <p>\n+     * From Commons Collections 3.2, this Collection can be cast\n+     * to a list, see {@link #valueList()}\n+     *\n+     * @see #valueList()\n+     * @return the fully modifiable collection view over the values\n+     */\n     public Collection values() {\n         return new ValuesView(this);\n     }\n \n+    /**\n+     * Gets a view over the values in the map as a List.\n+     * <p>\n+     * The List will be ordered by object insertion into the map.\n+     * The List supports remove and set, but does not support add.\n+     *\n+     * @see #values()\n+     * @return the partially modifiable list view over the values\n+     * @since Commons Collections 3.2\n+     */\n+    public List valueList() {\n+        return new ValuesView(this);\n+    }\n+\n+    /**\n+     * Gets a view over the entries in the map.\n+     * <p>\n+     * The Set will be ordered by object insertion into the map.\n+     *\n+     * @return the fully modifiable set view over the entries\n+     */\n     public Set entrySet() {\n         return new EntrySetView(this, this.insertOrder);\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Returns the Map as a string.\n     }\n \n     /**\n+     * Sets the value at the specified index.\n+     *\n+     * @param index  the index of the value to set\n+     * @return the previous value at that index\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     * @since Commons Collections 3.2\n+     */\n+    public Object setValue(int index, Object value) {\n+        Object key = insertOrder.get(index);\n+        return put(key, value);\n+    }\n+\n+    /**\n      * Removes the element at the specified index.\n      *\n      * @param index  the index of the object to remove\n-     * @return the previous value corresponding the <code>key</code>,\n-     *  or <code>null</code> if none existed\n+     * @return the removed value, or <code>null</code> if none existed\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public Object remove(int index) {\n      * value of a list.  This occurs because changing the key, changes when the\n      * mapping is added to the map and thus where it appears in the list.\n      * <p>\n-     * An alternative to this method is to use {@link #keySet()}.\n-     *\n+     * An alternative to this method is to use the better named\n+     * {@link #keyList()} or {@link #keySet()}.\n+     *\n+     * @see #keyList()\n      * @see #keySet()\n      * @return The ordered list of keys.  \n      */\n     public List asList() {\n-        return UnmodifiableList.decorate(insertOrder);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    static class ValuesView extends AbstractCollection {\n+        return keyList();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class ValuesView extends AbstractList {\n         private final ListOrderedMap parent;\n \n         ValuesView(ListOrderedMap parent) {\n                 }\n             };\n         }\n-    }\n-    \n+\n+        public Object get(int index) {\n+            return this.parent.getValue(index);\n+        }\n+\n+        public Object set(int index, Object value) {\n+            return this.parent.setValue(index, value);\n+        }\n+\n+        public Object remove(int index) {\n+            return this.parent.remove(index);\n+        }\n+    }\n+\n     //-----------------------------------------------------------------------\n     static class KeySetView extends AbstractSet {\n         private final ListOrderedMap parent;\n--- a/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         }\n     }\n \n+    public void testSetValueByIndex() {\n+        resetEmpty();\n+        ListOrderedMap lom = (ListOrderedMap) map;\n+        try {\n+            lom.setValue(0, \"\");\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            lom.setValue(-1, \"\");\n+        } catch (IndexOutOfBoundsException ex) {}\n+        \n+        resetFull();\n+        lom = (ListOrderedMap) map;\n+        try {\n+            lom.setValue(-1, \"\");\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            lom.setValue(lom.size(), \"\");\n+        } catch (IndexOutOfBoundsException ex) {}\n+        \n+        for (int i = 0; i < lom.size(); i++) {\n+            Object value = lom.getValue(i);\n+            Object input = new Integer(i);\n+            assertEquals(value, lom.setValue(i, input));\n+            assertEquals(input, lom.getValue(i));\n+        }\n+    }\n+\n     public void testRemoveByIndex() {\n         resetEmpty();\n         ListOrderedMap lom = (ListOrderedMap) map;\n             assertEquals(false, lom.containsKey(key));\n         }\n     }\n-    \n-    public BulkTest bulkTestListView() {\n-        return new TestListView();\n-    }\n-    \n-    public class TestListView extends AbstractTestList {\n-        \n-        TestListView() {\n-            super(\"TestListView\");\n+\n+    //-----------------------------------------------------------------------\n+    public void testValueList_getByIndex() {\n+        resetFull();\n+        ListOrderedMap lom = (ListOrderedMap) map;\n+        for (int i = 0; i < lom.size(); i++) {\n+            Object expected = lom.getValue(i);\n+            assertEquals(expected, lom.valueList().get(i));\n+        }\n+    }\n+\n+    public void testValueList_setByIndex() {\n+        resetFull();\n+        ListOrderedMap lom = (ListOrderedMap) map;\n+        for (int i = 0; i < lom.size(); i++) {\n+            Object input = new Integer(i);\n+            Object expected = lom.getValue(i);\n+            assertEquals(expected, lom.valueList().set(i, input));\n+            assertEquals(input, lom.getValue(i));\n+            assertEquals(input, lom.valueList().get(i));\n+        }\n+    }\n+\n+    public void testValueList_removeByIndex() {\n+        resetFull();\n+        ListOrderedMap lom = (ListOrderedMap) map;\n+        while (lom.size() > 1) {\n+            Object expected = lom.getValue(1);\n+            assertEquals(expected, lom.valueList().remove(1));\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public BulkTest bulkTestKeyListView() {\n+        return new TestKeyListView();\n+    }\n+\n+    public BulkTest bulkTestValueListView() {\n+        return new TestValueListView();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public class TestKeyListView extends AbstractTestList {\n+        TestKeyListView() {\n+            super(\"TestKeyListView\");\n         }\n \n         public List makeEmptyList() {\n-            return ((ListOrderedMap) TestListOrderedMap.this.makeEmptyMap()).asList();\n-        }\n-        \n+            return ((ListOrderedMap) TestListOrderedMap.this.makeEmptyMap()).keyList();\n+        }\n         public List makeFullList() {\n-            return ((ListOrderedMap) TestListOrderedMap.this.makeFullMap()).asList();\n-        }\n-        \n+            return ((ListOrderedMap) TestListOrderedMap.this.makeFullMap()).keyList();\n+        }\n+\n         public Object[] getFullElements() {\n             return TestListOrderedMap.this.getSampleKeys();\n         }\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n+    public class TestValueListView extends AbstractTestList {\n+        TestValueListView() {\n+            super(\"TestValueListView\");\n+        }\n+\n+        public List makeEmptyList() {\n+            return ((ListOrderedMap) TestListOrderedMap.this.makeEmptyMap()).valueList();\n+        }\n+        public List makeFullList() {\n+            return ((ListOrderedMap) TestListOrderedMap.this.makeFullMap()).valueList();\n+        }\n+\n+        public Object[] getFullElements() {\n+            return TestListOrderedMap.this.getSampleValues();\n+        }\n+        public boolean isAddSupported() {\n+            return false;\n+        }\n+        public boolean isRemoveSupported() {\n+            return true;\n+        }\n+        public boolean isSetSupported() {\n+            return true;\n+        }\n+        public boolean isNullSupported() {\n+            return TestListOrderedMap.this.isAllowNullKey();\n+        }\n+        public boolean isTestSerialization() {\n+            return false;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }", "timestamp": 1129379288, "metainfo": ""}