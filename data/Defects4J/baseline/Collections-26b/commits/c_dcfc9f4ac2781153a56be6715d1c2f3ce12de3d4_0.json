{"sha": "dcfc9f4ac2781153a56be6715d1c2f3ce12de3d4", "log": "Make Predicated and Transformed maps Serializable [18815]   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/PredicatedMap.java\n+++ b/src/java/org/apache/commons/collections/map/PredicatedMap.java\n  */\n package org.apache.commons.collections.map;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.util.Iterator;\n import java.util.Map;\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2004/02/18 01:13:19 $\n+ * @version $Revision: 1.8 $ $Date: 2004/04/09 09:43:09 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n-public class PredicatedMap extends AbstractMapDecorator {\n+public class PredicatedMap\n+        extends AbstractMapDecorator\n+        implements Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 7412622456128415156L;\n \n     /** The key predicate to use */\n     protected final Predicate keyPredicate;\n         if (valuePredicate != null && valuePredicate.evaluate(value) == false) {\n             throw new IllegalArgumentException(\"Cannot add value - Predicate rejected it\");\n         }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the map out using a custom routine.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException\n+     * @since Commons Collections 3.1\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(map);\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     * \n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @since Commons Collections 3.1\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        map = (Map) in.readObject();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n  */\n package org.apache.commons.collections.map;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n import java.util.Comparator;\n+import java.util.Map;\n import java.util.SortedMap;\n \n import org.apache.commons.collections.Predicate;\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 01:13:19 $\n+ * @version $Revision: 1.5 $ $Date: 2004/04/09 09:43:09 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n public class PredicatedSortedMap\n-        extends PredicatedMap implements SortedMap {\n+        extends PredicatedMap\n+        implements SortedMap, Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 3359846175935304332L;\n \n     /**\n      * Factory method to create a predicated (validating) sorted map.\n      */\n     protected PredicatedSortedMap(SortedMap map, Predicate keyPredicate, Predicate valuePredicate) {\n         super(map, keyPredicate, valuePredicate);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the map out using a custom routine.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException\n+     * @since Commons Collections 3.1\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(map);\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     * \n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @since Commons Collections 3.1\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        map = (Map) in.readObject();\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/map/TransformedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedMap.java\n  */\n package org.apache.commons.collections.map;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.util.HashMap;\n import java.util.Iterator;\n  * use the Integer form to remove objects.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/02/18 01:13:19 $\n+ * @version $Revision: 1.7 $ $Date: 2004/04/09 09:43:09 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TransformedMap extends AbstractMapDecorator {\n+public class TransformedMap\n+        extends AbstractMapDecorator\n+        implements Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 7023152376788900464L;\n \n     /** The transformer to use for the key */\n     protected final Transformer keyTransformer;\n         this.valueTransformer = valueTransformer;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the map out using a custom routine.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException\n+     * @since Commons Collections 3.1\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(map);\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     * \n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @since Commons Collections 3.1\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        map = (Map) in.readObject();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Transforms a key.\n      * <p>\n--- a/src/java/org/apache/commons/collections/map/TransformedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedSortedMap.java\n  */\n package org.apache.commons.collections.map;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n import java.util.Comparator;\n+import java.util.Map;\n import java.util.SortedMap;\n \n import org.apache.commons.collections.Transformer;\n  * use the Integer form to remove objects.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 01:13:19 $\n+ * @version $Revision: 1.5 $ $Date: 2004/04/09 09:43:09 $\n  * \n  * @author Stephen Colebourne\n  */\n public class TransformedSortedMap\n-        extends TransformedMap implements SortedMap {\n+        extends TransformedMap\n+        implements SortedMap, Serializable {\n \n+    /** Serialization version */\n+    private static final long serialVersionUID = -8751771676410385778L;\n+    \n     /**\n      * Factory method to create a transforming sorted map.\n      * <p>\n      */\n     protected TransformedSortedMap(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n         super(map, keyTransformer, valueTransformer);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the map out using a custom routine.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException\n+     * @since Commons Collections 3.1\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(map);\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     * \n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @since Commons Collections 3.1\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        map = (Map) in.readObject();\n     }\n \n     /**\n--- a/src/test/org/apache/commons/collections/map/TestPredicatedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestPredicatedMap.java\n  * {@link PredicatedMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 01:20:38 $\n+ * @version $Revision: 1.6 $ $Date: 2004/04/09 09:43:09 $\n  * \n  * @author Phil Steitz\n  */\n public class TestPredicatedMap extends AbstractTestMap{\n+    \n+    protected static final Predicate truePredicate = PredicateUtils.truePredicate();\n+    protected static final Predicate testPredicate = new Predicate() {\n+        public boolean evaluate(Object o) {\n+            return (o instanceof String);\n+        }\n+    };\n+    \n     \n     public TestPredicatedMap(String testName) {\n         super(testName);\n         String[] testCaseName = { TestPredicatedMap.class.getName()};\n         junit.textui.TestRunner.main(testCaseName);\n     }\n-    \n- //-------------------------------------------------------------------\n-    \n-    protected Predicate truePredicate = PredicateUtils.truePredicate();\n-    \n+\n+    //-----------------------------------------------------------------------\n     protected Map decorateMap(Map map, Predicate keyPredicate, \n         Predicate valuePredicate) {\n         return PredicatedMap.decorate(map, keyPredicate, valuePredicate);\n         return decorateMap(new HashMap(), truePredicate, truePredicate);\n     }\n     \n-//--------------------------------------------------------------------   \n-    \n-     protected Predicate testPredicate =  \n-        new Predicate() {\n-            public boolean evaluate(Object o) {\n-                return o instanceof String;\n-            }\n-        };      \n-    \n     public Map makeTestMap() {\n         return decorateMap(new HashMap(), testPredicate, testPredicate);\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n     public void testEntrySet() {\n         Map map = makeTestMap();\n         assertTrue(\"returned entryset should not be null\",\n         entry.setValue(\"x\");\n         \n     }\n-        \n+\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) map,\n+//            \"D:/dev/collections/data/test/PredicatedMap.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) map,\n+//            \"D:/dev/collections/data/test/PredicatedMap.fullCollection.version3.1.obj\");\n+//    }\n }\n--- a/src/test/org/apache/commons/collections/map/TestPredicatedSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestPredicatedSortedMap.java\n package org.apache.commons.collections.map;\n \n import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.Map;\n import java.util.SortedMap;\n import java.util.TreeMap;\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n \n /**\n  * Extension of {@link TestPredicatedMap} for exercising the \n  * {@link PredicatedSortedMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 01:20:38 $\n+ * @version $Revision: 1.5 $ $Date: 2004/04/09 09:43:09 $\n  * \n  * @author Phil Steitz\n  */\n-public class TestPredicatedSortedMap extends TestPredicatedMap{\n+public class TestPredicatedSortedMap extends AbstractTestSortedMap{\n+    \n+    protected static final Predicate truePredicate = PredicateUtils.truePredicate();\n+    protected static final Predicate testPredicate = new Predicate() {\n+        public boolean evaluate(Object o) {\n+            return (o instanceof String);\n+        }\n+    };\n     \n     public TestPredicatedSortedMap(String testName) {\n         super(testName);\n         String[] testCaseName = { TestPredicatedSortedMap.class.getName()};\n         junit.textui.TestRunner.main(testCaseName);\n     }\n-    \n- //-------------------------------------------------------------------    \n-    \n+\n+    //-----------------------------------------------------------------------\n     protected SortedMap decorateMap(SortedMap map, Predicate keyPredicate, \n         Predicate valuePredicate) {\n         return PredicatedSortedMap.decorate(map, keyPredicate, valuePredicate);\n         return decorateMap(new TreeMap(), testPredicate, testPredicate);\n     } \n     \n-    public boolean isAllowNullKey() {\n-        return false;\n-    }\n-    \n-//--------------------------------------------------------------------   \n-    \n     public SortedMap makeTestSortedMap() {\n         return decorateMap(new TreeMap(), testPredicate, testPredicate);\n     }\n     \n+    public boolean isSubMapViewsSerializable() {\n+        // TreeMap sub map views have a bug in deserialization.\n+        return false;\n+    }\n+\n+    public boolean isAllowNullKey() {\n+        return false;\n+    }\n+\n+    // from TestPredicatedMap\n+    //-----------------------------------------------------------------------\n+    public void testEntrySet() {\n+        SortedMap map = makeTestSortedMap();\n+        assertTrue(\"returned entryset should not be null\",\n+            map.entrySet() != null);\n+        map = decorateMap(new TreeMap(), null, null);\n+        map.put(\"oneKey\", \"oneValue\");\n+        assertTrue(\"returned entryset should contain one entry\",\n+            map.entrySet().size() == 1); \n+        map = decorateMap(map, null, null);\n+    }\n+    \n+    public void testPut() {\n+        Map map = makeTestMap();\n+        try {\n+            map.put(\"Hi\", new Integer(3));\n+            fail(\"Illegal value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.put(new Integer(3), \"Hi\");\n+            fail(\"Illegal key should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        assertTrue(!map.containsKey(new Integer(3)));\n+        assertTrue(!map.containsValue(new Integer(3)));\n+\n+        Map map2 = new HashMap();\n+        map2.put(\"A\", \"a\");\n+        map2.put(\"B\", \"b\");\n+        map2.put(\"C\", \"c\");\n+        map2.put(\"c\", new Integer(3));\n+\n+        try {\n+            map.putAll(map2);\n+            fail(\"Illegal value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        map.put(\"E\", \"e\");\n+        Iterator iterator = map.entrySet().iterator();\n+        try {\n+            Map.Entry entry = (Map.Entry)iterator.next();\n+            entry.setValue(new Integer(3));\n+            fail(\"Illegal value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        map.put(\"F\", \"f\");\n+        iterator = map.entrySet().iterator();\n+        Map.Entry entry = (Map.Entry)iterator.next();\n+        entry.setValue(\"x\");\n+        \n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testSortOrder() {\n         SortedMap map = makeTestSortedMap();\n         map.put(\"A\",  \"a\");\n         assertTrue(\"natural order, so comparator should be null\", \n             c == null);\n     }\n-        \n+\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) map,\n+//            \"D:/dev/collections/data/test/PredicatedSortedMap.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) map,\n+//            \"D:/dev/collections/data/test/PredicatedSortedMap.fullCollection.version3.1.obj\");\n+//    }\n }\n--- a/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 01:20:38 $\n+ * @version $Revision: 1.6 $ $Date: 2004/04/09 09:43:09 $\n  * \n  * @author Stephen Colebourne\n  */\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    //-----------------------------------------------------------------------\n     public Map makeEmptyMap() {\n         return TransformedMap.decorate(new HashMap(), TestTransformedCollection.NOOP_TRANSFORMER, TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testTransformedMap() {\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n \n         assertEquals(new Integer(88), entry.getValue());\n         assertEquals(new Integer(88), map.get(entry.getKey()));\n     }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) map,\n+//            \"D:/dev/collections/data/test/TransformedMap.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) map,\n+//            \"D:/dev/collections/data/test/TransformedMap.fullCollection.version3.1.obj\");\n+//    }\n }\n--- a/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 01:20:38 $\n+ * @version $Revision: 1.5 $ $Date: 2004/04/09 09:43:09 $\n  * \n  * @author Stephen Colebourne\n  */\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    //-----------------------------------------------------------------------\n     public Map makeEmptyMap() {\n         return TransformedSortedMap.decorate(new TreeMap(), TestTransformedCollection.NOOP_TRANSFORMER, TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n+    public boolean isSubMapViewsSerializable() {\n+        // TreeMap sub map views have a bug in deserialization.\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------    \n     public void testTransformedMap() {\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n \n         assertEquals(new Integer(88), entry.getValue());\n         assertEquals(new Integer(88), map.get(entry.getKey()));\n     }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) map,\n+//            \"D:/dev/collections/data/test/TransformedSortedMap.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) map,\n+//            \"D:/dev/collections/data/test/TransformedSortedMap.fullCollection.version3.1.obj\");\n+//    }\n }", "timestamp": 1081503789, "metainfo": ""}