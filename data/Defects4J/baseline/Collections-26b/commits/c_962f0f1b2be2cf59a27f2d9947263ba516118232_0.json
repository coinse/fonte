{"sha": "962f0f1b2be2cf59a27f2d9947263ba516118232", "log": "Remove unmodifiableXxxCopy methods as they don't add enough value   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n  * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.64 $ $Date: 2004/12/19 16:56:30 $\n+ * @version $Revision: 1.65 $ $Date: 2004/12/24 11:03:45 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n     }\n \n     /**\n-     * Returns an unmodifiable copy of the collection.\n-     * <p>\n-     * This method uses the implementation in the decorators subpackage.\n-     * \n-     * @param collection the <code>Collection</code> to copy.\n-     * @return an unmodifiable <code>Collection</code>.\n-     * @throws IllegalArgumentException if collection is null\n-     */\n-    public static Collection unmodifiableCollectionCopy(final Collection collection){\n-        if (collection == null) throw new IllegalArgumentException(\"null not permitted.\");\n-        \n-        final Collection copy = new ArrayList(collection.size());\n-        copy.addAll(collection);\n-        return UnmodifiableCollection.decorate(copy);\n-    }\n-\n-    /**\n      * Returns a predicated (validating) collection backed by the given collection.\n      * <p>\n      * Only objects that pass the test in the given predicate can be added to the collection.\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n  * Provides utility methods and decorators for {@link List} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.30 $ $Date: 2004/12/19 16:56:30 $\n+ * @version $Revision: 1.31 $ $Date: 2004/12/24 11:03:45 $\n  * \n  * @author Federico Barbieri\n  * @author Peter Donald\n         return UnmodifiableList.decorate(list);\n     }\n \n-    \n-    /**\n-     * Returns an unmodifiable list copy of the collection.\n-     * <p>\n-     * This method uses the unmodifiable list implementation in the decorators subpackage.\n-     * @param collection the <code>Collection</code> to copy.\n-     * @return an unmodifiable <code>List</code>.\n-     * @throws IllegalArgumentException if collection is null.\n-     */\n-    public static List unmodifiableListCopy(final Collection collection) {\n-        if (collection == null) throw new IllegalArgumentException(\"null not permitted.\");\n-        \n-        final List copy = new ArrayList(collection.size());\n-        copy.addAll(collection);\n-        return UnmodifiableList.decorate(copy);\n-    }\n-    \n     /**\n      * Returns a predicated (validating) list backed by the given list.\n      * <p>\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.51 $ $Date: 2004/12/19 16:56:30 $\n+ * @version $Revision: 1.52 $ $Date: 2004/12/24 11:03:44 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n     public static Map unmodifiableMap(Map map) {\n         return UnmodifiableMap.decorate(map);\n     }\n-    \n-    /**\n-     * Returns an unmodifiable copy of the map.\n-     * @param map  the map to make an unmodifiable copy of, must not be null\n-     * @return an unmodifiable map backed by the given map\n-     * @throws IllegalArgumentException  if the map is null\n-     */\n-    public static Map unmodifiableMapCopy(Map map) {\n-        if (map == null) throw new IllegalArgumentException(\"null not permitted.\");\n-        \n-        Map copy = new HashMap(map.size(), 1.0f);\n-        copy.putAll(map);\n-        return MapUtils.unmodifiableMap(copy);\n-    }\n \n     /**\n      * Returns a predicated (validating) map backed by the given map.\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n  * @author Steven Melzer\n  * @author Neil O'Toole\n  * \n- * @version $Revision: 1.43 $ $Date: 2004/12/19 16:56:31 $\n+ * @version $Revision: 1.44 $ $Date: 2004/12/24 11:03:45 $\n  */\n public class TestCollectionUtils extends TestCase {\n     \n         }  \n     }\n     \n-    public void testUnmodifiableCollectionCopy() {\n-        Collection collection = new ArrayList();\n-        collection.add(\"a\");\n-        Collection copy = CollectionUtils.unmodifiableCollectionCopy(collection);\n-\n-        assertTrue(copy instanceof Unmodifiable);\n-        assertTrue(CollectionUtils.isEqualCollection(collection, copy));\n-        collection.clear();\n-        assertTrue(copy.isEmpty() == false);\n-\n-        try {\n-\t\t\tcopy.clear();\n-\t\t\tfail(\"should be unmodifiable.\");\n-\t\t} catch (UnsupportedOperationException uoe) {\n-\t\t} // this is what we want\n-\n-\t\ttry {\n-\t\t\tcopy = CollectionUtils.unmodifiableCollectionCopy(null);\n-\t\t\tfail(\"should throw IllegalArgumentException\");\n-\t\t} catch (IllegalArgumentException iae) {\n-\t\t}\n-    }\n-    \n }\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n /**\n  * Tests for ListUtils.\n  * \n- * @version $Revision: 1.21 $ $Date: 2004/12/19 16:56:31 $\n+ * @version $Revision: 1.22 $ $Date: 2004/12/24 11:03:45 $\n  * \n  * @author Stephen Colebourne\n  * @author Neil O'Toole\n         assertEquals(0, ListUtils.hashCodeForList(null));\n     }\n     \n-    public void testUnmodifiableListCopy() {\n-        List list = new ArrayList();\n-        list.add(\"a\");\n-        List copy = ListUtils.unmodifiableListCopy(list);\n-\n-        assertTrue(copy instanceof Unmodifiable);\n-        assertTrue(list.equals(copy));\n-        list.clear();\n-        assertTrue(copy.isEmpty() == false);\n-\n-        try {\n-            copy.clear();\n-            fail(\"should be unmodifiable.\");\n-        } catch (UnsupportedOperationException uoe) {\n-            // this is what we want\n-        }\n-        \n-        try {\n-            list = ListUtils.unmodifiableListCopy(null);\n-            fail(\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException iae) {\n-            // this is what we want\n-        }\n-    }\n-    \n     public void testRetainAll() {\n         List sub = new ArrayList();\n         sub.add(a);\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n /**\n  * Tests for MapUtils.\n  * \n- * @version $Revision: 1.26 $ $Date: 2004/12/19 16:56:31 $\n+ * @version $Revision: 1.27 $ $Date: 2004/12/24 11:03:45 $\n  * \n  * @author Stephen Colebourne\n  * @author Arun Mammen Thomas\n         assertEquals(EXPECTED_OUT, out.toString());\n     }\n     \n-    public void testUnmodifiableMapCopy() {\n-        Map map = new HashMap();\n-        map.put(\"key\", \"value\");\n-\n-        Map copy = MapUtils.unmodifiableMapCopy(map);\n-        assertTrue(copy instanceof Unmodifiable);\n-        assertEquals(map, copy);\n-        map.clear();\n-        assertFalse(map.equals(copy));\n-\n-        try {\n-            copy.clear();\n-            fail(\"should be unmodifiable.\");\n-        } catch (UnsupportedOperationException uoe) {\n-            // this is what we want\n-        }\n-        \n-        try {\n-            map = MapUtils.unmodifiableMapCopy(null);\n-            fail(\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException iae) {\n-            // this is what we want\n-        }\n-\n-    }\n-\n }", "timestamp": 1103886225, "metainfo": ""}