{"sha": "5878adfaf37ce37e6988956e4cd5c833c6ec61be", "log": "[COLLECTIONS-453] Fix SwitchClosure and SwitchTransformer.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java\n      * Hidden constructor for the use by the static factory methods.\n      *\n      * @param clone  if {@code true} the input argument will be cloned\n-     * @param transformers  the transformers to chain, not copied, no nulls\n+     * @param transformers  the transformers to chain, no nulls\n      */\n     private ChainedTransformer(final boolean clone, final Transformer<? super T, ? extends T>[] transformers) {\n         super();\n--- a/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java\n         if (predicates.length == 0) {\n             return (Closure<E>) (defaultClosure == null ? NOPClosure.<E>nopClosure(): defaultClosure);\n         }\n-        return new SwitchClosure<E>(FunctorUtils.copy(predicates), FunctorUtils.copy(closures), defaultClosure);\n+        return new SwitchClosure<E>(predicates, closures, defaultClosure);\n     }\n \n     /**\n             closures[i] = entry.getValue();\n             i++;\n         }\n-        return new SwitchClosure<E>(preds, closures, defaultClosure);\n+        return new SwitchClosure<E>(false, preds, closures, defaultClosure);\n+    }\n+\n+    /**\n+     * Hidden constructor for the use by the static factory methods.\n+     *\n+     * @param clone  if {@code true} the input arguments will be cloned\n+     * @param predicates  array of predicates, no nulls\n+     * @param closures  matching array of closures, no nulls\n+     * @param defaultClosure  the closure to use if no match, null means nop\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    private SwitchClosure(final boolean clone, final Predicate<? super E>[] predicates,\n+                          final Closure<? super E>[] closures, final Closure<? super E> defaultClosure) {\n+        super();\n+        iPredicates = clone ? FunctorUtils.copy(predicates) : predicates;\n+        iClosures = clone ? FunctorUtils.copy(closures) : closures;\n+        iDefault = (Closure<? super E>) (defaultClosure == null ? NOPClosure.<E>nopClosure() : defaultClosure);\n     }\n \n     /**\n      * Constructor that performs no validation.\n      * Use <code>switchClosure</code> if you want that.\n      *\n-     * @param predicates  array of predicates, not cloned, no nulls\n-     * @param closures  matching array of closures, not cloned, no nulls\n+     * @param predicates  array of predicates, cloned, no nulls\n+     * @param closures  matching array of closures, cloned, no nulls\n      * @param defaultClosure  the closure to use if no match, null means nop\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public SwitchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures,\n                          final Closure<? super E> defaultClosure) {\n-        super();\n-        iPredicates = predicates;\n-        iClosures = closures;\n-        iDefault = (Closure<? super E>) (defaultClosure == null ? NOPClosure.<E>nopClosure() : defaultClosure);\n+        this(true, predicates, closures, defaultClosure);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java\n             return (Transformer<I, O>) (defaultTransformer == null ? ConstantTransformer.<I, O>nullTransformer() :\n                                                                      defaultTransformer);\n         }\n-        return new SwitchTransformer<I, O>(FunctorUtils.copy(predicates),\n-                                           FunctorUtils.copy(transformers),\n-                                           defaultTransformer);\n+        return new SwitchTransformer<I, O>(predicates, transformers, defaultTransformer);\n     }\n \n     /**\n             transformers[i] = entry.getValue();\n             i++;\n         }\n-        return new SwitchTransformer<I, O>(preds, transformers, defaultTransformer);\n+        return new SwitchTransformer<I, O>(false, preds, transformers, defaultTransformer);\n+    }\n+\n+    /**\n+     * Hidden constructor for the use by the static factory methods.\n+     *\n+     * @param clone  if {@code true} the input arguments will be cloned\n+     * @param predicates  array of predicates, no nulls\n+     * @param transformers  matching array of transformers, no nulls\n+     * @param defaultTransformer  the transformer to use if no match, null means return null\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    private SwitchTransformer(final boolean clone, final Predicate<? super I>[] predicates,\n+                             final Transformer<? super I, ? extends O>[] transformers,\n+                             final Transformer<? super I, ? extends O> defaultTransformer) {\n+        super();\n+        iPredicates = clone ? FunctorUtils.copy(predicates) : predicates;\n+        iTransformers = clone ? FunctorUtils.copy(transformers) : transformers;\n+        iDefault = (Transformer<? super I, ? extends O>) (defaultTransformer == null ?\n+                ConstantTransformer.<I, O>nullTransformer() : defaultTransformer);\n     }\n \n     /**\n      * Constructor that performs no validation.\n      * Use <code>switchTransformer</code> if you want that.\n      *\n-     * @param predicates  array of predicates, not cloned, no nulls\n-     * @param transformers  matching array of transformers, not cloned, no nulls\n+     * @param predicates  array of predicates, cloned, no nulls\n+     * @param transformers  matching array of transformers, cloned, no nulls\n      * @param defaultTransformer  the transformer to use if no match, null means return null\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public SwitchTransformer(final Predicate<? super I>[] predicates,\n             final Transformer<? super I, ? extends O>[] transformers,\n             final Transformer<? super I, ? extends O> defaultTransformer) {\n-        super();\n-        iPredicates = predicates;\n-        iTransformers = transformers;\n-        iDefault = (Transformer<? super I, ? extends O>) (defaultTransformer == null ?\n-                ConstantTransformer.<I, O>nullTransformer() : defaultTransformer);\n+        this(true, predicates, transformers, defaultTransformer);\n     }\n \n     /**", "timestamp": 1367767259, "metainfo": ""}