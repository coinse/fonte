{"sha": "44709d8b2a99a9ac12619ba0c65196c06178e53b", "log": "[COLLECTIONS-231] return specific type rather than base type in factory methods, javadoc cleanup.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/buffer/AbstractBufferDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/AbstractBufferDecorator.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E get() {\n         return decorated().get();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E remove() {\n         return decorated().remove();\n     }\n--- a/src/main/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n     /**\n      * Factory method to create a blocking buffer.\n      *\n-     * @param <T> the type of the elements in the buffer\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer the buffer to decorate, must not be null\n      * @return a new blocking Buffer\n      * @throws IllegalArgumentException if buffer is null\n      */\n-    public static <T> Buffer<T> blockingBuffer(Buffer<T> buffer) {\n-        return new BlockingBuffer<T>(buffer);\n+    public static <E> BlockingBuffer<E> blockingBuffer(Buffer<E> buffer) {\n+        return new BlockingBuffer<E>(buffer);\n     }\n \n     /**\n      * Factory method to create a blocking buffer with a timeout value.\n      *\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to decorate, must not be null\n      * @param timeoutMillis  the timeout value in milliseconds, zero or less for no timeout\n      * @return a new blocking buffer\n      * @throws IllegalArgumentException if the buffer is null\n      * @since Commons Collections 3.2\n      */\n-    public static <T> Buffer<T> blockingBuffer(Buffer<T> buffer, long timeoutMillis) {\n-        return new BlockingBuffer<T>(buffer, timeoutMillis);\n+    public static <E> BlockingBuffer<E> blockingBuffer(Buffer<E> buffer, long timeoutMillis) {\n+        return new BlockingBuffer<E>(buffer, timeoutMillis);\n     }\n \n     //-----------------------------------------------------------------------    \n      * set in the constructor.\n      *\n      * @throws BufferUnderflowException if an interrupt is received\n+     * {@inheritDoc}\n      */\n     @Override\n     public E get() {\n      * added for up to the specified timeout value if the buffer is empty.\n      *\n      * @param timeout  the timeout value in milliseconds\n+     * @return the next object in the buffer\n      * @throws BufferUnderflowException if an interrupt is received\n      * @throws BufferUnderflowException if the timeout expires\n      * @since Commons Collections 3.2\n      * set in the constructor.\n      *\n      * @throws BufferUnderflowException if an interrupt is received\n+     * {@inheritDoc}\n      */\n     @Override\n     public E remove() {\n      * added for up to the specified timeout value if the buffer is empty.\n      *\n      * @param timeout  the timeout value in milliseconds\n+     * @return the next object in the buffer, which is also removed\n      * @throws BufferUnderflowException if an interrupt is received\n      * @throws BufferUnderflowException if the timeout expires\n      * @since Commons Collections 3.2\n--- a/src/main/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n      * When the buffer is full, it will immediately throw a\n      * <code>BufferOverflowException</code> on calling <code>add()</code>.\n      *\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to decorate, must not be null\n      * @param maximumSize  the maximum size, must be size one or greater\n      * @return a new bounded buffer\n      * Factory method to create a bounded buffer that blocks for a maximum\n      * amount of time.\n      *\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to decorate, must not be null\n      * @param maximumSize  the maximum size, must be size one or greater\n      * @param timeout  the maximum amount of time to wait in milliseconds\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public boolean isFull() {\n         // size() is synchronized\n         return (size() == maxSize());\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int maxSize() {\n         return maximumSize;\n     }\n--- a/src/main/java/org/apache/commons/collections/buffer/PredicatedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/PredicatedBuffer.java\n      * If there are any elements already in the buffer being decorated, they\n      * are validated.\n      * \n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a new predicated Buffer\n      * @throws IllegalArgumentException if buffer or predicate is null\n      * @throws IllegalArgumentException if the buffer contains invalid elements\n      */\n-    public static <T> Buffer<T> predicatedBuffer(Buffer<T> buffer, Predicate<? super T> predicate) {\n-        return new PredicatedBuffer<T>(buffer, predicate);\n+    public static <E> PredicatedBuffer<E> predicatedBuffer(Buffer<E> buffer, Predicate<? super E> predicate) {\n+        return new PredicatedBuffer<E>(buffer, predicate);\n     }\n     \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E get() {\n         return decorated().get();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E remove() {\n         return decorated().remove();\n     }\n--- a/src/main/java/org/apache/commons/collections/buffer/SynchronizedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/SynchronizedBuffer.java\n     /**\n      * Factory method to create a synchronized buffer.\n      * \n-     * @param <T> the type of the elements in the buffer\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to decorate, must not be null\n      * @return a new synchronized Buffer\n      * @throws IllegalArgumentException if buffer is null\n      */\n-    public static <T> Buffer<T> synchronizedBuffer(Buffer<T> buffer) {\n-        return new SynchronizedBuffer<T>(buffer);\n+    public static <E> SynchronizedBuffer<E> synchronizedBuffer(Buffer<E> buffer) {\n+        return new SynchronizedBuffer<E>(buffer);\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E get() {\n         synchronized (lock) {\n             return decorated().get();\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E remove() {\n         synchronized (lock) {\n             return decorated().remove();\n--- a/src/main/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n      * are NOT transformed.\n      * Contrast this with {@link #transformedBuffer(Buffer, Transformer)}.\n      * \n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Buffer\n      * @throws IllegalArgumentException if buffer or transformer is null\n      */\n-    public static <E> Buffer<E> transformingBuffer(Buffer<E> buffer, Transformer<? super E, ? extends E> transformer) {\n+    public static <E> TransformedBuffer<E> transformingBuffer(Buffer<E> buffer,\n+                                                              Transformer<? super E, ? extends E> transformer) {\n         return new TransformedBuffer<E>(buffer, transformer);\n     }\n     \n      * will be transformed by this method.\n      * Contrast this with {@link #transformingBuffer(Buffer, Transformer)}.\n      * \n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Buffer\n      * @throws IllegalArgumentException if buffer or transformer is null\n      * @since Commons Collections 3.3\n      */\n-    public static <E> Buffer<E> transformedBuffer(Buffer<E> buffer, Transformer<? super E, ? extends E> transformer) {\n-        TransformedBuffer<E> decorated = new TransformedBuffer<E>(buffer, transformer); // throws IAE if buffer or transformer is null\n+    public static <E> TransformedBuffer<E> transformedBuffer(Buffer<E> buffer,\n+                                                             Transformer<? super E, ? extends E> transformer) {\n+        // throws IAE if buffer or transformer is null\n+        final TransformedBuffer<E> decorated = new TransformedBuffer<E>(buffer, transformer); \n         if (buffer.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // buffer is type <E>\n             E[] values = (E[]) buffer.toArray();\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E get() {\n         return getBuffer().get();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E remove() {\n         return getBuffer().remove();\n     }\n--- a/src/main/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n     // invariant: buffer.length > size()\n     //   ie.buffer always has at least one empty entry\n \n-    /** Serialization vesrion */\n+    /** Serialization version */\n     private static final long serialVersionUID = -3482960336579541419L;\n \n     /** The array of objects in the buffer. */\n--- a/src/main/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n      * <p>\n      * If the buffer passed in is already unmodifiable, it is returned.\n      * \n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to decorate, must not be null\n      * @return an unmodifiable Buffer\n      * @throws IllegalArgumentException if buffer is null", "timestamp": 1340463920, "metainfo": ""}