{"sha": "f70c2a72ee7308b51b0140dbc338bf4c216139f3", "log": "Type erasure fix changed to a cast.  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/java/org/apache/commons/collections/TestCollectionUtils.java\n         Closure<List<? extends Number>> resultClosure = CollectionUtils.forAllDo(col, testClosure);\n         assertSame(testClosure, resultClosure);\n         assertTrue(collectionA.isEmpty() && collectionB.isEmpty());\n-        // fix for various java 1.6 versions: keep the specialization\n-        resultClosure = CollectionUtils.<List<? extends Number>,Closure<List<? extends Number>>>forAllDo(col, null);\n+        // fix for various java 1.6 versions: keep the cast\n+        resultClosure = CollectionUtils.forAllDo(col, (Closure<List<? extends Number>>) null);\n         assertNull(resultClosure);\n         assertTrue(collectionA.isEmpty() && collectionB.isEmpty());\n         resultClosure = CollectionUtils.forAllDo((Collection) null, testClosure);\n         Closure<List<? extends Number>> resultClosure = CollectionUtils.forAllDo(col.iterator(), testClosure);\n         assertSame(testClosure, resultClosure);\n         assertTrue(collectionA.isEmpty() && collectionB.isEmpty());\n-        // fix for various java 1.6 versions: keep the specialization\n-        resultClosure = CollectionUtils.<List<? extends Number>,Closure<List<? extends Number>>>forAllDo(col.iterator(), null);\n+        // fix for various java 1.6 versions: keep the cast\n+        resultClosure = CollectionUtils.forAllDo(col.iterator(), (Closure<List<? extends Number>>) null);\n         assertNull(resultClosure);\n         assertTrue(collectionA.isEmpty() && collectionB.isEmpty());\n         resultClosure = CollectionUtils.forAllDo((Iterator) null, testClosure);", "timestamp": 1344096482, "metainfo": ""}