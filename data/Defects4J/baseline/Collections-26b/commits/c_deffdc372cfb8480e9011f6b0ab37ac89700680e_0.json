{"sha": "deffdc372cfb8480e9011f6b0ab37ac89700680e", "log": "Improved test coverage   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Id: TestCollectionUtils.java,v 1.19 2003/09/12 03:59:00 psteitz Exp $\n- * $Revision: 1.19 $\n- * $Date: 2003/09/12 03:59:00 $\n+ * $Id: TestCollectionUtils.java,v 1.20 2003/09/21 20:56:51 psteitz Exp $\n+ * $Revision: 1.20 $\n+ * $Date: 2003/09/21 20:56:51 $\n  *\n  * ====================================================================\n  *\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.Vector;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.decorators.PredicatedCollection;\n+import org.apache.commons.collections.decorators.TransformedCollection;\n \n /**\n  * Tests for CollectionUtils.\n  * @author Rodney Waldhoff\n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n+ * @author Phil Steitz\n  * \n- * @version $Revision: 1.19 $ $Date: 2003/09/12 03:59:00 $\n+ * @version $Revision: 1.20 $ $Date: 2003/09/21 20:56:51 $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n         assertEquals(new Integer(4),freq2.get(\"b\"));\n         assertEquals(new Integer(3),freq2.get(\"c\"));\n         assertEquals(new Integer(4),freq2.get(\"d\"));\n-        assertEquals(new Integer(1),freq2.get(\"e\"));\n+        assertEquals(new Integer(1),freq2.get(\"e\"));        \n     }\n \n     public void testIntersection() {\n         assertEquals(new Integer(2),freq2.get(\"b\"));\n         assertEquals(new Integer(3),freq2.get(\"c\"));\n         assertEquals(new Integer(2),freq2.get(\"d\"));\n-        assertNull(freq2.get(\"e\"));\n+        assertNull(freq2.get(\"e\"));      \n     }\n \n     public void testDisjunction() {\n         assertTrue(!CollectionUtils.isProperSubCollection(\n             a, CollectionUtils.subtract(a, b)));\n     }\n-\n-\n-    public void testIndex() {\n+    \n+    public void testFind() {\n+        Predicate testPredicate = PredicateUtils.equalPredicate(\"d\");\n+        Object test = CollectionUtils.find(_a, testPredicate);\n+        assertTrue(test.equals(\"d\"));\n+        testPredicate = PredicateUtils.equalPredicate(\"de\");\n+        test = CollectionUtils.find(_a, testPredicate);\n+        assertTrue(test == null);\n+        assertEquals(CollectionUtils.find(null,testPredicate), null);\n+        assertEquals(CollectionUtils.find(_a, null), null);\n+    }\n+    \n+    public void testForAllDo() {\n+        Closure testClosure = ClosureUtils.invokerClosure(\"clear\");\n+        Collection col = new ArrayList();\n+        col.add(_a);\n+        col.add(_b);\n+        CollectionUtils.forAllDo(col, testClosure);\n+        assertTrue(_a.isEmpty() && _b.isEmpty());\n+        CollectionUtils.forAllDo(col, null);\n+        assertTrue(_a.isEmpty() && _b.isEmpty());\n+        CollectionUtils.forAllDo(null, testClosure);\n+        col.add(null);\n+        // null should be OK\n+        CollectionUtils.forAllDo(col, testClosure);\n+        col.add(\"x\");\n+        // This will lead to FunctorException\n+        try {\n+            CollectionUtils.forAllDo(col, testClosure);\n+            fail(\"Expecting FunctorException\");\n+        } catch (FunctorException ex) {\n+            // expected from invoker -- method not found\n+        }\n+    }\n+\n+    public void testIndex() {     \n+        // normal map behavior when index is an Integer and a key\n         Map map = new HashMap();\n-        map.put(new Integer(0), \"element\");\n+        map.put(new Integer(0), \"zero\");\n+        map.put(new Integer(-1), \"minusOne\");\n         Object test = CollectionUtils.index(map, 0);\n-        assertTrue(test.equals(\"element\"));\n-\n+        assertTrue(test.equals(\"zero\"));\n+        test = CollectionUtils.index(map, new Integer(-1));\n+        assertTrue(test.equals(\"minusOne\"));\n+        \n+        // map, non-integer key that does not exist -- map returned\n+        test = CollectionUtils.index(map, \"missing\");\n+        assertTrue(test.equals(map));\n+        \n+        // map, integer not a key, valid index -- \"some\" element of keyset returned\n+        test = CollectionUtils.index(map, new Integer(1));   \n+        assertTrue(map.keySet().contains(test)); \n+        \n+        // map, integer not a key, not valid index -- \"dead\" keyset iterator returned\n+        test = CollectionUtils.index(map, new Integer(4));         \n+        assertTrue((test instanceof Iterator) && !((Iterator) test).hasNext());  \n+\n+        // list, entry exists\n         List list = new ArrayList();\n-        list.add(\"element\");\n+        list.add(\"zero\");\n+        list.add(\"one\");\n         test = CollectionUtils.index(list, 0);\n-        assertTrue(test.equals(\"element\"));\n-\n+        assertTrue(test.equals(\"zero\"));\n+        test = CollectionUtils.index(list, 1);\n+        assertTrue(test.equals(\"one\"));\n+        \n+        // list, non-existent entry -- IndexOutOfBoundsException\n+        try {\n+            test = CollectionUtils.index(list, 2);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        \n+        // iterator, entry exists\n+        Iterator iterator = list.iterator();\n+        test = CollectionUtils.index(iterator,0);\n+        assertTrue(test.equals(\"zero\"));\n+        iterator = list.iterator();\n+        test = CollectionUtils.index(iterator,1);\n+        assertTrue(test.equals(\"one\"));\n+        \n+        // iterator, non-existent entry -- \"dead\" iterator returned\n+        test = CollectionUtils.index(iterator,3);\n+        assertTrue(test.equals(iterator) && !iterator.hasNext());\n+        \n+        // Enumeration, entry exists\n+        Vector vector = new Vector(list);\n+        Enumeration enum = vector.elements();\n+        test = CollectionUtils.index(enum,0);\n+        assertTrue(test.equals(\"zero\"));\n+        enum = vector.elements();\n+        test = CollectionUtils.index(enum,1);\n+        assertTrue(test.equals(\"one\"));\n+        \n+        // Enumeration, non-existent entry -- \"dead\" enumerator returned\n+        test = CollectionUtils.index(enum,3);\n+        assertTrue(test.equals(enum) && !enum.hasMoreElements());\n+        \n+        // Collection, entry exists\n         Bag bag = new HashBag();\n         bag.add(\"element\", 1);\n         test = CollectionUtils.index(bag, 0);\n         assertTrue(test.equals(\"element\"));\n+        \n+        // Collection, non-existent entry -- \"dead\" iterator returned\n+        test = CollectionUtils.index(bag, 2);\n+        assertTrue((test instanceof Iterator) && !((Iterator) test).hasNext()); \n+        \n+        // Object array, entry exists\n+        Object[] objArray = new Object[2];\n+        objArray[0] = \"zero\";\n+        objArray[1] = \"one\";\n+        test = CollectionUtils.index(objArray,0);\n+        assertTrue(test.equals(\"zero\"));\n+        test = CollectionUtils.index(objArray,1);\n+        assertTrue(test.equals(\"one\"));\n+        \n+        // Object array, non-existent entry -- ArrayIndexOutOfBoundsException\n+        try {\n+            test = CollectionUtils.index(objArray,2);\n+            fail(\"Expecting ArrayIndexOutOfBoundsException.\");\n+        } catch (ArrayIndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        // Non-collection object -- returned unchanged\n+        Object obj = new Object();\n+        test = CollectionUtils.index(obj, obj);\n+        assertTrue(test.equals(obj));\n     }\n \n \n         assertEquals(eltb,eltc);\n         assertEquals(eltc,eltb);\n     }\n+    \n+     public void testTransformedCollection() {\n+        Transformer transformer = TransformerUtils.nopTransformer();\n+        Collection collection = \n+            CollectionUtils.transformedCollection(new ArrayList(), transformer);\n+        assertTrue(\"returned object should be a TransformedCollection\",\n+            collection instanceof TransformedCollection);\n+        try { \n+           collection = \n+                CollectionUtils.transformedCollection(new ArrayList(), null); \n+           fail(\"Expecting IllegalArgumentException for null transformer.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try { \n+           collection = \n+                CollectionUtils.transformedCollection(null, transformer); \n+           fail(\"Expecting IllegalArgumentException for null collection.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }             \n+    }\n }", "timestamp": 1064177811, "metainfo": ""}