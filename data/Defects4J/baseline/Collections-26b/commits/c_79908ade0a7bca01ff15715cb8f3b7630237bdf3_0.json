{"sha": "79908ade0a7bca01ff15715cb8f3b7630237bdf3", "log": "tidied up the entryset code   ", "commit": "\n--- a/src/java/org/apache/commons/collections/decorators/OrderedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/OrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedMap.java,v 1.1 2003/10/03 06:24:13 bayard Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedMap.java,v 1.2 2003/10/03 06:25:03 bayard Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * The order can be observed via the iterator or toArray methods.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/10/03 06:24:13 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/03 06:25:03 $\n  * \n  * @author Henri Yandell\n  */\n         public EntrySetView(OrderedMap parent, List insertOrder) {\n             this.parent = parent;\n             this.insertOrder = insertOrder;\n+        }\n+\n+        public Set _entries() {\n+            Set set = new java.util.HashSet( this.insertOrder.size() );\n+            set = OrderedSet.decorate( set );\n+            for (Iterator it = insertOrder.iterator(); it.hasNext();) {\n+                Object key = it.next();\n+                set.add( new DefaultMapEntry( key, getMap().get( key ) ) );\n+            }\n+            return set;\n         }\n \n         public int size() {\n                 throw new IllegalArgumentException(\"Parameter must be a Map.Entry\");\n             }\n         }\n-        // tmp\n-        public Set _entries() {\n+        public Iterator iterator() {\n             // TODO: Needs to return a EntrySetViewIterator, which \n             //       removes from this and from the Map\n-            Set set = new java.util.HashSet( this.insertOrder.size() );\n-            set = OrderedSet.decorate( set );\n-            for (Iterator it = insertOrder.iterator(); it.hasNext();) {\n-                Object key = it.next();\n-                set.add( new DefaultMapEntry( key, getMap().get( key ) ) );\n-            }\n-            return set;\n-        }\n-        public Iterator iterator() {\n             return _entries().iterator();\n         }\n         public Object toArray()[] {", "timestamp": 1065162303, "metainfo": ""}