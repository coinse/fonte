{"sha": "dec0641e2f189c89e931b4ab59a06384582316b1", "log": "COLLECTIONS-405 added select and selectRejected methods to ListUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ListUtils.java\n     }\n \n     /**\n+     * Selects all elements from input collection which match the given\n+     * predicate into an output list.\n+     * <p>\n+     * A <code>null</code> predicate matches no elements.\n+     *\n+     * @param inputCollection\n+     *            the collection to get the input from, may not be null\n+     * @param predicate\n+     *            the predicate to use, may be null\n+     * @return the elements matching the predicate (new list)\n+     * @throws NullPointerException\n+     *             if the input list is null\n+     *          \n+     * @since 4.0\n+     * @see CollectionUtils#select(Collection, Predicate)\n+     */\n+    public static <O> List<O> select(Collection<? extends O> inputCollection,\n+            Predicate<? super O> predicate) {\n+        return CollectionUtils.select(inputCollection, predicate, new ArrayList<O>(inputCollection.size()));\n+    }\n+\n+    /**\n+     * Selects all elements from inputCollection which don't match the given\n+     * predicate into an output collection.\n+     * <p>\n+     * If the input predicate is <code>null</code>, the result is an empty\n+     * list.\n+     *\n+     * @param inputCollection\n+     *            the collection to get the input from, may not be null\n+     * @param predicate\n+     *            the predicate to use, may be null\n+     * @return the elements <b>not</b> matching the predicate (new list)\n+     * @throws NullPointerException\n+     *             if the input collection is null\n+     *          \n+     * @since 4.0\n+     * @see CollectionUtils#selectRejected(Collection, Predicate)\n+     */\n+    public static <O> List<O> selectRejected(Collection<? extends O> inputCollection,\n+            Predicate<? super O> predicate) {\n+        return CollectionUtils.selectRejected(inputCollection, predicate, new ArrayList<O>(inputCollection.size()));\n+    }\n+\n+    /**\n      * Tests two lists for value-equality as per the equality contract in\n      * {@link java.util.List#equals(java.lang.Object)}.\n      * <p>\n--- a/src/test/java/org/apache/commons/collections/ListUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/ListUtilsTest.java\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n \n import junit.framework.Assert;\n             Assert.fail(\"failed to check for size argument\");\n         } catch (IllegalArgumentException e) {}\n         \n-    }    \n+    }\n+    \n+    private static Predicate<Number> EQUALS_TWO = new Predicate<Number>() {\n+        public boolean evaluate(Number input) {\n+            return (input.intValue() == 2);\n+        }\n+    };\n+\n+    public void testSelect() {\n+        List<Integer> list = new ArrayList<Integer>();\n+        list.add(1);\n+        list.add(2);\n+        list.add(3);\n+        list.add(4);\n+        // Ensure that the collection is the input type or a super type\n+        List<Integer> output1 = ListUtils.select(list, EQUALS_TWO);\n+        List<Number> output2 = ListUtils.<Number>select(list, EQUALS_TWO);\n+        HashSet<Number> output3 = CollectionUtils.select(list, EQUALS_TWO, new HashSet<Number>());\n+        Assert.assertTrue(CollectionUtils.isEqualCollection(output1, output3));\n+        Assert.assertEquals(4, list.size());\n+        Assert.assertEquals(1, output1.size());\n+        Assert.assertEquals(2, output2.iterator().next());\n+    }\n+\n+    public void testSelectRejected() {\n+        List<Long> list = new ArrayList<Long>();\n+        list.add(1L);\n+        list.add(2L);\n+        list.add(3L);\n+        list.add(4L);\n+        List<Long> output1 = ListUtils.selectRejected(list, EQUALS_TWO);\n+        List<? extends Number> output2 = ListUtils.selectRejected(list, EQUALS_TWO);\n+        HashSet<Number> output3 = CollectionUtils.selectRejected(list, EQUALS_TWO, new HashSet<Number>());\n+        Assert.assertTrue(CollectionUtils.isEqualCollection(output1, output2));\n+        Assert.assertTrue(CollectionUtils.isEqualCollection(output1, output3));\n+        Assert.assertEquals(4, list.size());\n+        Assert.assertEquals(3, output1.size());\n+        Assert.assertTrue(output1.contains(1L));\n+        Assert.assertTrue(output1.contains(3L));\n+        Assert.assertTrue(output1.contains(4L));\n+    }\n }", "timestamp": 1345867174, "metainfo": ""}