{"sha": "4d867468ee83696991edd0b8d5608a1f74fbb6cb", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r641231 | skestle | 2008-03-26 02:58:51 -0700 (Wed, 26 Mar 2008) | 1 line          Started incorporating Edwin's patch for COLLECTIONS-253, in preparation for COLLECTIONS-290.     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/functors/AllPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AllPredicate.java\n  * limitations under the License.\n  */\n package org.apache.commons.collections.functors;\n+\n+import static org.apache.commons.collections.functors.FunctorUtils.coerce;\n+import static org.apache.commons.collections.functors.FunctorUtils.validate;\n+import static org.apache.commons.collections.functors.TruePredicate.truePredicate;\n \n import java.io.Serializable;\n import java.util.Collection;\n  *\n  * @author Stephen Colebourne\n  * @author Matt Benson\n+ * @author Stephen Kestle\n  */\n-public final class AllPredicate implements Predicate, PredicateDecorator, Serializable {\n+public final class AllPredicate<T> implements Predicate<T>, PredicateDecorator<T>, Serializable {\n \n     /** Serial version UID */\n     private static final long serialVersionUID = -3094696765038308799L;\n     \n     /** The array of predicates to call */\n-    private final Predicate[] iPredicates;\n+    private final Predicate<? super T>[] iPredicates;\n     \n     /**\n      * Factory to create the predicate.\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n+     * @deprecated Use {@link #allPredicate(Predicate<? super T>...)} instead\n      */\n-    public static Predicate getInstance(Predicate[] predicates) {\n+    public static <T> Predicate<T> getInstance(Predicate<? super T> ... predicates) {\n+        return allPredicate(predicates);\n+    }\n+\n+    /**\n+     * Factory to create the predicate.\n+     * <p>\n+     * If the array is size zero, the predicate always returns true.\n+     * If the array is size one, then that predicate is returned.\n+     *\n+     * @param predicates  the predicates to check, cloned, not null\n+     * @return the <code>all</code> predicate\n+     * @throws IllegalArgumentException if the predicates array is null\n+     * @throws IllegalArgumentException if any predicate in the array is null\n+     */\n+    public static <T> Predicate<T> allPredicate(Predicate<? super T> ... predicates) {\n         FunctorUtils.validate(predicates);\n         if (predicates.length == 0) {\n-            return TruePredicate.INSTANCE;\n+            return truePredicate();\n         }\n         if (predicates.length == 1) {\n-            return predicates[0];\n+            return coerce(predicates[0]);\n         }\n-        predicates = FunctorUtils.copy(predicates);\n-        return new AllPredicate(predicates);\n+\n+        return new AllPredicate<T>(FunctorUtils.copy(predicates));\n+    }\n+\n+    /**\n+     * Factory to create the predicate.\n+     * <p>\n+     * If the collection is size zero, the predicate always returns true.\n+     * If the collection is size one, then that predicate is returned.\n+     *\n+     * @param predicates  the predicates to check, cloned, not null\n+     * @return the <code>all</code> predicate\n+     * @throws IllegalArgumentException if the predicates array is null\n+     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @deprecated Use {@link #allPredicate(Collection<Predicate<? super T>>)} instead\n+     */\n+    public static <T> Predicate<T> getInstance(Collection<Predicate<T>> predicates) {\n+        return allPredicate(predicates);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n-    public static Predicate getInstance(Collection predicates) {\n-        Predicate[] preds = FunctorUtils.validate(predicates);\n+    public static <T> Predicate<T> allPredicate(Collection<? extends Predicate<T>> predicates) {\n+        final Predicate<T>[] preds = validate(predicates);\n         if (preds.length == 0) {\n-            return TruePredicate.INSTANCE;\n+            return truePredicate();\n         }\n         if (preds.length == 1) {\n             return preds[0];\n         }\n-        return new AllPredicate(preds);\n+        return new AllPredicate<T>(preds);\n     }\n \n     /**\n      * Constructor that performs no validation.\n      * Use <code>getInstance</code> if you want that.\n-     * \n+     *\n      * @param predicates  the predicates to check, not cloned, not null\n      */\n-    public AllPredicate(Predicate[] predicates) {\n+    public AllPredicate(Predicate<? super T> ... predicates) {\n         super();\n         iPredicates = predicates;\n     }\n      * @param object  the input object\n      * @return true if all decorated predicates return true\n      */\n-    public boolean evaluate(Object object) {\n-        for (int i = 0; i < iPredicates.length; i++) {\n-            if (iPredicates[i].evaluate(object) == false) {\n+    public boolean evaluate(T object) {\n+        for (Predicate<? super T> iPredicate : iPredicates) {\n+            if (!iPredicate.evaluate(object)) {\n                 return false;\n             }\n         }\n      * @return the predicates\n      * @since Commons Collections 3.1\n      */\n-    public Predicate[] getPredicates() {\n+    public Predicate<? super T>[] getPredicates() {\n         return iPredicates;\n     }\n ", "timestamp": 1252994100, "metainfo": ""}