{"sha": "e7ea37d1a7f1d3ac944226198ec4003cdc446e29", "log": "Enhance Map tests pre-release of testframework   ", "commit": "\n--- a/src/test/org/apache/commons/collections/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.3 2003/10/05 20:47:37 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.4 2003/10/07 22:20:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * override one or more of the other protected methods.  They're described\n  * below.\n  * <p>\n- * <B>Entry Population Methods</B><P>\n- *\n+ * <b>Entry Population Methods</b>\n+ * <p>\n  * Override these methods if your map requires special entries:\n- *\n- * <UL>\n- * <LI>{@link #getSampleKeys()}\n- * <LI>{@link #getSampleValues()}\n- * <LI>{@link #getNewSampleValues()}\n- * <LI>{@link #getOtherKeys()}\n- * <LI>{@link #getOtherValues()}\n- * </UL>\n- *\n- * <B>Supported Operation Methods</B><P>\n- *\n+ * \n+ * <ul>\n+ * <li>{@link #getSampleKeys()}\n+ * <li>{@link #getSampleValues()}\n+ * <li>{@link #getNewSampleValues()}\n+ * <li>{@link #getOtherKeys()}\n+ * <li>{@link #getOtherValues()}\n+ * </ul>\n+ *\n+ * <b>Supported Operation Methods</b>\n+ * <p>\n  * Override these methods if your map doesn't support certain operations:\n  *\n- * <UL>\n- * <LI> {@link #useDuplicateValues()}\n- * <LI> {@link #useNullKey()}\n- * <LI> {@link #useNullValue()}\n- * <LI> {@link #isAddRemoveModifiable()}\n- * <LI> {@link #isChangeable()}\n- * </UL>\n- *\n- * <B>Fixture Methods</B><P>\n- *\n+ * <ul>\n+ * <li> {@link #isPutAddSupported()}\n+ * <li> {@link #isPutChangeSupported()}\n+ * <li> {@link #isRemoveSupported()}\n+ * <li> {@link #isAllowDuplicateValues()}\n+ * <li> {@link #isAllowNullKey()}\n+ * <li> {@link #isAllowNullValue()}\n+ * </ul>\n+ *\n+ * <b>Fixture Methods</b>\n+ * <p>\n  * For tests on modification operations (puts and removes), fixtures are used\n  * to verify that that operation results in correct state for the map and its\n  * collection views.  Basically, the modification is performed against your\n  * {@link #verifyValues()} method to verify that the values are unique and in\n  * ascending order.<P>\n  *  \n- * <B>Other Notes</B><P>\n- *\n+ * <b>Other Notes</b>\n+ * <p>\n  * If your {@link Map} fails one of these tests by design, you may still use\n- * this base set of cases.  Simply override the test case (method) your {@link\n- * Map} fails and/or the methods that define the assumptions used by the test\n+ * this base set of cases.  Simply override the test case (method) your map\n+ * fails and/or the methods that define the assumptions used by the test\n  * cases.  For example, if your map does not allow duplicate values, override\n- * {@link #useDuplicateValues()} and have it return <code>false</code>\n+ * {@link #isAllowDuplicateValues()} and have it return <code>false</code>\n  *\n  * @author Michael Smith\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @version $Revision: 1.3 $ $Date: 2003/10/05 20:47:37 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/07 22:20:57 $\n  */\n public abstract class AbstractTestMap extends AbstractTestObject {\n \n     /** HashMap created by reset(). */\n     protected Map confirmed;\n \n-\n     /**\n      * JUnit constructor.\n      * \n         super(testName);\n     }\n \n-\n-    /**\n-     *  Override if your map does not allow a <code>null</code> key.  The\n-     *  default implementation returns <code>true</code>\n-     */\n-    protected boolean useNullKey() {\n+    /**\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * support the <code>put</code> and <code>putAll</code> operations\n+     * adding new mappings.\n+     * <p>\n+     * Default implementation returns true.\n+     * Override if your collection class does not support put adding.\n+     */\n+    protected boolean isPutAddSupported() {\n         return true;\n     }\n \n     /**\n-     *  Override if your map does not allow <code>null</code> values.  The\n-     *  default implementation returns <code>true</code>.\n-     */\n-    protected boolean useNullValue() {\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * support the <code>put</code> and <code>putAll</code> operations\n+     * changing existing mappings.\n+     * <p>\n+     * Default implementation returns true.\n+     * Override if your collection class does not support put changing.\n+     */\n+    protected boolean isPutChangeSupported() {\n         return true;\n     }\n \n     /**\n-     *  Override if your map does not allow duplicate values.  The default\n-     *  implementation returns <code>true</code>.\n-     */\n-    protected boolean useDuplicateValues() {\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * support the <code>remove</code> and <code>clear</code> operations.\n+     * <p>\n+     * Default implementation returns true.\n+     * Override if your collection class does not support removal operations.\n+     */\n+    protected boolean isRemoveSupported() {\n         return true;\n     }\n \n     /**\n-     *  Override if your map allows its mappings to be changed to new values.\n-     *  The default implementation returns <code>true</code>.\n-     */\n-    protected boolean isChangeable() {\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * supports null keys.\n+     * <p>\n+     * Default implementation returns true.\n+     * Override if your collection class does not support null keys.\n+     */\n+    protected boolean isAllowNullKey() {\n         return true;\n     }\n \n     /**\n-     *  Override if your map does not allow add/remove modifications.  The\n-     *  default implementation returns <code>true</code>.\n-     */\n-    protected boolean isAddRemoveModifiable() {\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * supports null values.\n+     * <p>\n+     * Default implementation returns true.\n+     * Override if your collection class does not support null values.\n+     */\n+    protected boolean isAllowNullValue() {\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true if the maps produced by \n+     * {@link #makeEmptyMap()} and {@link #makeFullMap()}\n+     * supports duplicate values.\n+     * <p>\n+     * Default implementation returns true.\n+     * Override if your collection class does not support duplicate values.\n+     */\n+    protected boolean isAllowDuplicateValues() {\n         return true;\n     }\n \n      *  method must return an array with the same length as {@link\n      *  #getSampleValues()} and all array elements must be different. The\n      *  default implementation constructs a set of String keys, and includes a\n-     *  single null key if {@link #useNullKey()} returns <code>true</code>.\n+     *  single null key if {@link #isAllowNullKey()} returns <code>true</code>.\n      */\n     protected Object[] getSampleKeys() {\n         Object[] result = new Object[] {\n             \"hello\", \"goodbye\", \"we'll\", \"see\", \"you\", \"all\", \"again\",\n             \"key\",\n             \"key2\",\n-            (useNullKey()) ? null : \"nonnullkey\"\n+            (isAllowNullKey()) ? null : \"nonnullkey\"\n         };\n         return result;\n     }\n     }\n \n     /**\n-     *  Returns a list of string elements suitable for return by\n-     *  {@link getOtherElements()}.  Override getOtherElements to return\n-     *  the results of this method if your collection does not support\n-     *  heterogenous elements or the null element.\n+     * Returns a list of string elements suitable for return by\n+     * {@link getOtherElements()}.  Override getOtherElements to return\n+     * the results of this method if your collection does not support\n+     * heterogenous elements or the null element.\n      */\n     protected Object[] getOtherNonNullStringElements() {\n         return new Object[] {\n     }\n \n     /**\n-     *  Returns the set of values in the mappings used to test the map.  This\n-     *  method must return an array with the same length as {@link\n-     *  #getSampleKeys()}.  The default implementation constructs a set of\n-     *  String values and includes a single null value if {@link\n-     *  #useNullValue()} returns <code>true</code>, and includes two values\n-     *  that are the same if {@link #useDuplicateValues()} returns\n-     *  <code>true</code>.\n+     * Returns the set of values in the mappings used to test the map.  This\n+     * method must return an array with the same length as\n+     * {@link #getSampleKeys()}.  The default implementation constructs a set of\n+     * String values and includes a single null value if \n+     * {@link #isNullValueSupported()} returns <code>true</code>, and includes \n+     * two values that are the same if {@link #isAllowDuplicateValues()} returns\n+     * <code>true</code>.\n      */\n     protected Object[] getSampleValues() {\n         Object[] result = new Object[] {\n             \"blahv\", \"foov\", \"barv\", \"bazv\", \"tmpv\", \"goshv\", \"gollyv\", \"geev\",\n             \"hellov\", \"goodbyev\", \"we'llv\", \"seev\", \"youv\", \"allv\", \"againv\",\n-            (useNullValue()) ? null : \"nonnullvalue\",\n+            (isAllowNullValue()) ? null : \"nonnullvalue\",\n             \"value\",\n-            (useDuplicateValues()) ? \"value\" : \"value2\",\n+            (isAllowDuplicateValues()) ? \"value\" : \"value2\",\n         };\n         return result;\n     }\n \n     /**\n-     *  Returns a the set of values that can be used to replace the values\n-     *  returned from {@link #getSampleValues()}.  This method must return an\n-     *  array with the same length as {@link #getSampleValues()}.  The values\n-     *  returned from this method should not be the same as those returned from\n-     *  {@link #getSampleValues()}.  The default implementation constructs a\n-     *  set of String values and includes a single null value if {@link\n-     *  #useNullValue()} returns <code>true</code>, and includes two values\n-     *  that are the same if {@link #useDuplicateValues()} returns\n-     *  <code>true</code>.  \n+     * Returns a the set of values that can be used to replace the values\n+     * returned from {@link #getSampleValues()}.  This method must return an\n+     * array with the same length as {@link #getSampleValues()}.  The values\n+     * returned from this method should not be the same as those returned from\n+     * {@link #getSampleValues()}.  The default implementation constructs a\n+     * set of String values and includes a single null value if\n+     * {@link #isNullValueSupported()} returns <code>true</code>, and includes two values\n+     * that are the same if {@link #isAllowDuplicateValues()} returns\n+     * <code>true</code>.  \n      */\n     protected Object[] getNewSampleValues() {\n         Object[] result = new Object[] {\n-            (useNullValue() && useDuplicateValues()) ? null : \"newnonnullvalue\",\n+            (isAllowNullValue() && isAllowDuplicateValues()) ? null : \"newnonnullvalue\",\n             \"newvalue\",\n-            (useDuplicateValues()) ? \"newvalue\" : \"newvalue2\",\n+            (isAllowDuplicateValues()) ? \"newvalue\" : \"newvalue2\",\n             \"newblahv\", \"newfoov\", \"newbarv\", \"newbazv\", \"newtmpv\", \"newgoshv\", \n             \"newgollyv\", \"newgeev\", \"newhellov\", \"newgoodbyev\", \"newwe'llv\", \n             \"newseev\", \"newyouv\", \"newallv\", \"newagainv\",\n                            keys[i] == null || values[i] == null);\n                 \n                 assertTrue(\"NullPointerException on null key, but \" +\n-                           \"useNullKey is not overridden to return false.\", \n-                           keys[i] == null || !useNullKey());\n+                           \"isNullKeySupported is not overridden to return false.\", \n+                           keys[i] == null || !isAllowNullKey());\n                 \n                 assertTrue(\"NullPointerException on null value, but \" +\n-                           \"useNullValue is not overridden to return false.\",\n-                           values[i] == null || !useNullValue());\n+                           \"isNullValueSupported is not overridden to return false.\",\n+                           values[i] == null || !isAllowNullValue());\n                 \n                 assertTrue(\"Unknown reason for NullPointer.\", false);\n             }\n \n     //-----------------------------------------------------------------------\n     /**\n-     *  Test to ensure the test setup is working properly.  This method checks\n-     *  to ensure that the getSampleKeys and getSampleValues methods are\n-     *  returning results that look appropriate.  That is, they both return a\n-     *  non-null array of equal length.  The keys array must not have any\n-     *  duplicate values, and may only contain a (single) null key if\n-     *  useNullKey() returns true.  The values array must only have a null\n-     *  value if useNullValue() is true and may only have duplicate values if\n-     *  useDuplicateValues() returns true.  \n+     * Test to ensure the test setup is working properly.  This method checks\n+     * to ensure that the getSampleKeys and getSampleValues methods are\n+     * returning results that look appropriate.  That is, they both return a\n+     * non-null array of equal length.  The keys array must not have any\n+     * duplicate values, and may only contain a (single) null key if\n+     * isNullKeySupported() returns true.  The values array must only have a null\n+     * value if useNullValue() is true and may only have duplicate values if\n+     * isAllowDuplicateValues() returns true.  \n      */\n     public void testSampleMappings() {\n       Object[] keys = getSampleKeys();\n                           (!keys[i].equals(keys[j]) && \n                            !keys[j].equals(keys[i]))));\n           }\n-          assertTrue(\"failure in test: found null key, but useNullKey \" +\n-                     \"is false.\", keys[i] != null || useNullKey());\n-          assertTrue(\"failure in test: found null value, but useNullValue \" +\n-                     \"is false.\", values[i] != null || useNullValue());\n-          assertTrue(\"failure in test: found null new value, but useNullValue \" +\n-                     \"is false.\", newValues[i] != null || useNullValue());\n+          assertTrue(\"failure in test: found null key, but isNullKeySupported \" +\n+                     \"is false.\", keys[i] != null || isAllowNullKey());\n+          assertTrue(\"failure in test: found null value, but isNullValueSupported \" +\n+                     \"is false.\", values[i] != null || isAllowNullValue());\n+          assertTrue(\"failure in test: found null new value, but isNullValueSupported \" +\n+                     \"is false.\", newValues[i] != null || isAllowNullValue());\n           assertTrue(\"failure in test: values should not be the same as new value\",\n                      values[i] != newValues[i] && \n                      (values[i] == null || !values[i].equals(newValues[i])));\n     }\n \n     /**\n-     *  Tests {@link Map#clear()}.  If the map {@link #isAddRemoveModifiable()\n+     *  Tests {@link Map#clear()}.  If the map {@link #isRemoveSupported()}\n      *  can add and remove elements}, then {@link Map#size()} and {@link\n      *  Map#isEmpty()} are used to ensure that map has no elements after a call\n      *  to clear.  If the map does not support adding and removing elements,\n      *  UnsupportedOperationException.\n      */\n     public void testMapClear() {\n-        if (!isAddRemoveModifiable()) return;\n+        if (!isRemoveSupported()) {\n+            try {\n+                resetFull();\n+                map.clear();\n+                fail(\"Expected UnsupportedOperationException on clear\");\n+            } catch (UnsupportedOperationException ex) {}\n+            return;\n+        }\n \n         resetEmpty();\n         map.clear();\n      *  Tests Map.put(Object, Object)\n      */\n     public void testMapPut() {\n-        if (!isAddRemoveModifiable()) return;\n-\n         resetEmpty();\n-\n         Object[] keys = getSampleKeys();\n         Object[] values = getSampleValues();\n         Object[] newValues = getNewSampleValues();\n \n-        for(int i = 0; i < keys.length; i++) {\n-            Object o = map.put(keys[i], values[i]);\n-            confirmed.put(keys[i], values[i]);\n-            verify();\n-            assertTrue(\"First map.put should return null\", o == null);\n-            assertTrue(\"Map should contain key after put\", \n-                       map.containsKey(keys[i]));\n-            assertTrue(\"Map should contain value after put\", \n-                       map.containsValue(values[i]));\n-        }\n-        \n-        for(int i = 0; i < keys.length; i++) {\n-            Object o = map.put(keys[i], newValues[i]);\n-            confirmed.put(keys[i], newValues[i]);\n-            verify();\n-            assertEquals(\"Second map.put should return previous value\",\n-                         values[i], o);\n-            assertTrue(\"Map should still contain key after put\",\n-                       map.containsKey(keys[i]));\n-            assertTrue(\"Map should contain new value after put\",\n-                       map.containsValue(newValues[i]));\n-\n-            // if duplicates are allowed, we're not guaranteed that the value\n-            // no longer exists, so don't try checking that.\n-            if(!useDuplicateValues()) {\n-                assertTrue(\"Map should not contain old value after second put\",\n-                           !map.containsValue(values[i]));\n+        if (isPutAddSupported()) {\n+            for (int i = 0; i < keys.length; i++) {\n+                Object o = map.put(keys[i], values[i]);\n+                confirmed.put(keys[i], values[i]);\n+                verify();\n+                assertTrue(\"First map.put should return null\", o == null);\n+                assertTrue(\"Map should contain key after put\", \n+                           map.containsKey(keys[i]));\n+                assertTrue(\"Map should contain value after put\", \n+                           map.containsValue(values[i]));\n             }\n+            if (isPutChangeSupported()) {\n+                for (int i = 0; i < keys.length; i++) {\n+                    Object o = map.put(keys[i], newValues[i]);\n+                    confirmed.put(keys[i], newValues[i]);\n+                    verify();\n+                    assertEquals(\"Map.put should return previous value when changed\",\n+                                 values[i], o);\n+                    assertTrue(\"Map should still contain key after put when changed\",\n+                               map.containsKey(keys[i]));\n+                    assertTrue(\"Map should contain new value after put when changed\",\n+                               map.containsValue(newValues[i]));\n+        \n+                    // if duplicates are allowed, we're not guaranteed that the value\n+                    // no longer exists, so don't try checking that.\n+                    if (!isAllowDuplicateValues()) {\n+                        assertTrue(\"Map should not contain old value after put when changed\",\n+                                   !map.containsValue(values[i]));\n+                    }\n+                }\n+            }\n+            \n+        } else if (isPutChangeSupported()) {\n+            resetFull();\n+            int i = 0;\n+            for (Iterator it = map.keySet().iterator(); it.hasNext() && i < newValues.length; i++) {\n+                Object key = (Object) it.next();\n+                Object o = map.put(key, newValues[i]);\n+                Object value = confirmed.put(key, newValues[i]);\n+                verify();\n+                assertEquals(\"Map.put should return previous value when changed\",\n+                    value, o);\n+                assertTrue(\"Map should still contain key after put when changed\",\n+                    map.containsKey(key));\n+                assertTrue(\"Map should contain new value after put when changed\",\n+                    map.containsValue(newValues[i]));\n+        \n+                // if duplicates are allowed, we're not guaranteed that the value\n+                // no longer exists, so don't try checking that.\n+                if (!isAllowDuplicateValues()) {\n+                    assertTrue(\"Map should not contain old value after put when changed\",\n+                        !map.containsValue(values[i]));\n+                }\n+            }\n         }\n     }\n \n      *  Tests Map.putAll(Collection)\n      */\n     public void testMapPutAll() {\n-        if (!isAddRemoveModifiable()) return;\n+        if (!isPutAddSupported()) return;\n \n         resetEmpty();\n \n      *  Tests Map.remove(Object)\n      */\n     public void testMapRemove() {\n-        if (!isAddRemoveModifiable()) return;\n+        if (!isRemoveSupported()) {\n+            try {\n+                resetFull();\n+                map.remove(map.keySet().iterator().next());\n+                fail(\"Expected UnsupportedOperationException on remove\");\n+            } catch (UnsupportedOperationException ex) {}\n+            return;\n+        }\n \n         resetEmpty();\n \n      * the underlying map for clear().\n      */\n     public void testValuesClearChangesMap() {\n-        if (!isAddRemoveModifiable()) return;\n+        if (!isRemoveSupported()) return;\n         \n         // clear values, reflected in map\n         resetFull();\n      * the underlying map for clear().\n      */\n     public void testKeySetClearChangesMap() {\n-        if (!isAddRemoveModifiable()) return;\n+        if (!isRemoveSupported()) return;\n         \n         // clear values, reflected in map\n         resetFull();\n      * the underlying map for clear().\n      */\n     public void testEntrySetClearChangesMap() {\n-        if (!isAddRemoveModifiable()) return;\n+        if (!isRemoveSupported()) return;\n         \n         // clear values, reflected in map\n         resetFull();\n         \n         protected boolean isRemoveSupported() {\n             // Entry set should only support remove if map does\n-            return isAddRemoveModifiable();\n+            return AbstractTestMap.this.isRemoveSupported();\n         }\n         \n         protected void resetFull() {\n         }\n         \n         protected boolean isRemoveSupported() {\n-            return isAddRemoveModifiable();\n+            return AbstractTestMap.this.isRemoveSupported();\n         }\n         \n         protected void resetEmpty() {\n         }\n         \n         protected boolean isRemoveSupported() {\n-            return isAddRemoveModifiable();\n+            return AbstractTestMap.this.isRemoveSupported();\n         }\n \n         protected boolean areEqualElementsDistinguishable() {\n--- a/src/test/org/apache/commons/collections/AbstractTestSortedMap.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestSortedMap.java,v 1.2 2003/10/06 23:44:56 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestSortedMap.java,v 1.3 2003/10/07 22:20:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Abstract test class for {@link java.util.SortedMap} methods and contracts.\n  *\n- * @version $Revision: 1.2 $ $Date: 2003/10/06 23:44:56 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/07 22:20:57 $\n  * \n  * @author Stephen Colebourne\n  */\n      * \n      * @return false\n      */\n-    protected boolean useNullKey() {\n+    protected boolean isAllowNullKey() {\n         return false;\n     }\n \n--- a/src/test/org/apache/commons/collections/TestBeanMap.java\n+++ b/src/test/org/apache/commons/collections/TestBeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBeanMap.java,v 1.12 2003/10/05 20:46:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBeanMap.java,v 1.13 2003/10/07 22:20:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Test cases for BeanMap\n  * \n- * @version $Revision: 1.12 $ $Date: 2003/10/05 20:46:40 $\n+ * @version $Revision: 1.13 $ $Date: 2003/10/07 22:20:57 $\n  * \n  * @author Morgan Delagrange\n  */\n     }\n \n     /**\n-     *  The mappings in a BeanMap are fixed on the properties the underlying\n-     *  bean has.  Adding and removing mappings is not possible, thus this\n-     *  method is overridden to return false.\n-     **/\n-    protected boolean isAddRemoveModifiable() {\n+     * The mappings in a BeanMap are fixed on the properties the underlying\n+     * bean has.  Adding and removing mappings is not possible, thus this\n+     * method is overridden to return false.\n+     */\n+    protected boolean isPutAddSupported() {\n         return false;\n     }\n-  \n+\n+    /**\n+     * The mappings in a BeanMap are fixed on the properties the underlying\n+     * bean has.  Adding and removing mappings is not possible, thus this\n+     * method is overridden to return false.\n+     */\n+    protected boolean isRemoveSupported() {\n+        return false;\n+    }\n+\n     protected Map makeFullMap() {\n         // note: These values must match (i.e. .equals() must return true)\n         // those returned from getSampleValues().\n     }\n \n     /**\n-     *  Need to override this method because the \"clear()\" method on the bean\n-     *  map just returns the bean properties to their default states.  It does\n-     *  not actually remove the mappings as per the map contract.  The default\n-     *  testClear() methods checks that the clear method throws an\n-     *  UnsupportedOperationException since this class is not add/remove\n-     *  modifiable.  In our case though, we do not always throw that exception.\n-     **/\n-    public void testClear() {\n+     * Need to override this method because the \"clear()\" method on the bean\n+     * map just returns the bean properties to their default states.  It does\n+     * not actually remove the mappings as per the map contract.  The default\n+     * testClear() methods checks that the clear method throws an\n+     * UnsupportedOperationException since this class is not add/remove\n+     * modifiable.  In our case though, we do not always throw that exception.\n+     */\n+    public void testMapClear() {\n         //TODO: make sure a call to BeanMap.clear returns the bean to its\n         //default initialization values.\n+    }\n+\n+    /**\n+     * Need to override this method because the \"put()\" method on the bean\n+     * doesn't work for this type of Map.\n+     */\n+    public void testMapPut() {\n+        // see testBeanMapPutAllWriteable\n     }\n \n     public void testBeanMapClone() {\n--- a/src/test/org/apache/commons/collections/TestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/TestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.5 2003/10/06 23:47:17 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.6 2003/10/07 22:20:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.5 $ $Date: 2003/10/06 23:47:17 $\n+ * @version $Revision: 1.6 $ $Date: 2003/10/07 22:20:57 $\n  * \n  * @author Matthew Hawthorne\n  */\n     /**\n      * Override to indicate to AbstractTestMap this is a BidiMap.\n      */\n-    protected boolean useDuplicateValues() {\n+    protected boolean isAllowDuplicateValues() {\n         return false;\n     }\n     \n--- a/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java,v 1.9 2003/10/05 21:11:06 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java,v 1.10 2003/10/07 22:20:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Map that does not support duplicate keys, duplicate \n  * values, or null values.\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/10/05 21:11:06 $\n+ * @version $Revision: 1.10 $ $Date: 2003/10/07 22:20:57 $\n  * \n  * @author Marc Johnson (marcj at users dot sourceforge dot net)\n  */\n     /**\n      *  The default comparator in double ordered map does not allow null keys.\n      **/\n-    public boolean useNullKey() {\n+    public boolean isAllowNullKey() {\n         return false;\n     }\n \n      *  The default comparator in double ordered map does not allow null keys,\n      *  and values are keys in this map.\n      **/\n-    public boolean useNullValue() {\n+    public boolean isAllowNullValue() {\n         return false;\n     }\n \n     /**\n      *  Double ordered map does not support duplicate values\n      **/\n-    public boolean useDuplicateValues() {\n+    public boolean isAllowDuplicateValues() {\n         return false;\n     }\n \n--- a/src/test/org/apache/commons/collections/TestFastHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestFastHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFastHashMap.java,v 1.11 2003/10/05 21:11:06 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFastHashMap.java,v 1.12 2003/10/07 22:20:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests FastHashMap.\n  * \n- * @version $Revision: 1.11 $ $Date: 2003/10/05 21:11:06 $\n+ * @version $Revision: 1.12 $ $Date: 2003/10/07 22:20:57 $\n  * \n  * @author Jason van Zyl\n  */\n      *  There is a bug in JDK1.2 HashMap; the keySet() will incorrectly\n      *  return false when a null value is removed.\n      */\n-    public boolean useNullValue() {\n+    public boolean isAllowNullValue() {\n         return false;\n     }\n }\n--- a/src/test/org/apache/commons/collections/TestFastTreeMap.java\n+++ b/src/test/org/apache/commons/collections/TestFastTreeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFastTreeMap.java,v 1.11 2003/10/05 21:11:06 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFastTreeMap.java,v 1.12 2003/10/07 22:20:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests FastTreeMap.\n  * \n- * @version $Revision: 1.11 $ $Date: 2003/10/05 21:11:06 $\n+ * @version $Revision: 1.12 $ $Date: 2003/10/07 22:20:57 $\n  * \n  * @author Jason van Zyl\n  */\n     /**\n      *  The comparator for the fast tree map does not support null keys.\n      **/\n-    public boolean useNullKey() {\n+    public boolean isAllowNullKey() {\n         return false;\n     }\n \n      * There is a bug in JDK1.2.2 TreeMap; the keySet will incorrectly\n      * return false when a null value is removed\n      */\n-    public boolean useNullValue() {\n+    public boolean isAllowNullValue() {\n         return false;\n     }\n \n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.17 2003/10/05 21:17:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.18 2003/10/07 22:20:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests for MapUtils.\n  * \n- * @version $Revision: 1.17 $ $Date: 2003/10/05 21:17:40 $\n+ * @version $Revision: 1.18 $ $Date: 2003/10/07 22:20:57 $\n  * \n  * @author Stephen Colebourne\n  * @author Arun Mammen Thomas\n     \n     public BulkTest bulkTestTypedMap() {\n         return new AbstractTestMap(\"\") {\n-            public boolean useNullKey() {\n+            public boolean isAllowNullKey() {\n                 return false;\n             }\n \n-            public boolean useNullValue() {\n+            public boolean isAllowNullValue() {\n                 return false;\n             }\n \n--- a/src/test/org/apache/commons/collections/TestReferenceMap.java\n+++ b/src/test/org/apache/commons/collections/TestReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestReferenceMap.java,v 1.12 2003/10/05 21:23:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestReferenceMap.java,v 1.13 2003/10/07 22:20:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests for ReferenceMap. \n  * \n- * @version $Revision: 1.12 $ $Date: 2003/10/05 21:23:21 $\n+ * @version $Revision: 1.13 $ $Date: 2003/10/07 22:20:57 $\n  *\n  * @author Paul Jack\n  */\n         return map;\n     }\n \n-    public boolean useNullKey() {\n+    public boolean isAllowNullKey() {\n         return false;\n     }\n \n-    public boolean useNullValue() {\n+    public boolean isAllowNullValue() {\n         return false;\n     }\n \n--- a/src/test/org/apache/commons/collections/TestTreeMap.java\n+++ b/src/test/org/apache/commons/collections/TestTreeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTreeMap.java,v 1.9 2003/10/05 21:23:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTreeMap.java,v 1.10 2003/10/07 22:20:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests TreeMap.\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/10/05 21:23:21 $\n+ * @version $Revision: 1.10 $ $Date: 2003/10/07 22:20:57 $\n  * \n  * @author Jason van Zyl\n  */\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    public boolean useNullKey() {\n+    public boolean isAllowNullKey() {\n         return false;\n     }\n \n--- a/src/test/org/apache/commons/collections/decorators/TestFixedSizeMap.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestFixedSizeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestFixedSizeMap.java,v 1.4 2003/10/02 23:01:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestFixedSizeMap.java,v 1.5 2003/10/07 22:20:58 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/10/02 23:01:09 $\n+ * @version $Revision: 1.5 $ $Date: 2003/10/07 22:20:58 $\n  * \n  * @author Stephen Colebourne\n  */\n         return FixedSizeMap.decorate(map);\n     }\n     \n-    protected boolean isAddRemoveModifiable() {\n+    protected boolean isPutAddSupported() {\n+        return false;\n+    }\n+\n+    protected boolean isRemoveSupported() {\n         return false;\n     }\n \n--- a/src/test/org/apache/commons/collections/decorators/TestFixedSizeSortedMap.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestFixedSizeSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestFixedSizeSortedMap.java,v 1.4 2003/10/02 23:01:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestFixedSizeSortedMap.java,v 1.5 2003/10/07 22:20:58 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/10/02 23:01:09 $\n+ * @version $Revision: 1.5 $ $Date: 2003/10/07 22:20:58 $\n  * \n  * @author Stephen Colebourne\n  */\n         return FixedSizeSortedMap.decorate(map);\n     }\n     \n-    protected boolean isAddRemoveModifiable() {\n+    protected boolean isPutAddSupported() {\n+        return false;\n+    }\n+\n+    protected boolean isRemoveSupported() {\n         return false;\n     }\n \n--- a/src/test/org/apache/commons/collections/decorators/TestLazySortedMap.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestLazySortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestLazySortedMap.java,v 1.2 2003/09/20 17:05:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestLazySortedMap.java,v 1.3 2003/10/07 22:20:58 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link LazySortedMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/20 17:05:36 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/07 22:20:58 $\n  * \n  * @author Phil Steitz\n  */\n         return decorateMap(new TreeMap(), nullFactory);\n     }\n     \n-    protected boolean useNullKey() {\n+    protected boolean isAllowNullKey() {\n         return false;\n     }\n     \n--- a/src/test/org/apache/commons/collections/decorators/TestPredicatedSortedMap.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedSortedMap.java,v 1.2 2003/09/20 17:05:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedSortedMap.java,v 1.3 2003/10/07 22:20:58 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link PredicatedSortedMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/20 17:05:36 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/07 22:20:58 $\n  * \n  * @author Phil Steitz\n  */\n         return decorateMap(new TreeMap(), testPredicate, testPredicate);\n     } \n     \n-    protected boolean useNullKey() {\n+    protected boolean isAllowNullKey() {\n         return false;\n     }\n     \n--- a/src/test/org/apache/commons/collections/decorators/TestUnmodifiableMap.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestUnmodifiableMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestUnmodifiableMap.java,v 1.1 2003/10/06 05:06:05 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestUnmodifiableMap.java,v 1.2 2003/10/07 22:20:58 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link UnmodifiableMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/10/06 05:06:05 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/07 22:20:58 $\n  * \n  * @author Phil Steitz\n  */\n         return UnmodifiableMap.decorate(new HashMap());\n     }\n     \n-    protected boolean isChangeable() {\n+    protected boolean isPutChangeSupported() {\n         return false;\n     }\n     \n-    protected boolean isAddRemoveModifiable() {\n+    protected boolean isPutAddSupported() {\n+        return false;\n+    }\n+    \n+    protected boolean isRemoveSupported() {\n         return false;\n     }\n     ", "timestamp": 1065565258, "metainfo": ""}