{"sha": "78bb9be97786c161654ca57c8406d72b767cbc2f", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r468685 | scolebourne | 2006-10-28 05:30:27 -0700 (Sat, 28 Oct 2006) | 1 line          COLLECTIONS-228 - MultiValueMap put and putAll do not return the correct values     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/TestMultiValueMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestMultiValueMap.java\n import java.util.Map;\n \n import junit.framework.Test;\n+import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.IteratorUtils;\n  * @author Stephen Colebourne\n  * @since Commons Collections 3.2\n  */\n-public class TestMultiValueMap extends AbstractTestObject {\n+public class TestMultiValueMap<K, V> extends AbstractTestObject {\n \n     public TestMultiValueMap(String testName) {\n         super(testName);\n     }\n \n     public void testNoMappingReturnsNull() {\n-        final MultiValueMap map = createTestMap();\n+        final MultiValueMap<K, V> map = createTestMap();\n         assertNull(map.get(\"whatever\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testValueCollectionType() {\n-        final MultiValueMap map = createTestMap(LinkedList.class);\n+        final MultiValueMap<K, V> map = createTestMap(LinkedList.class);\n         assertTrue(map.get(\"one\") instanceof LinkedList);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testMultipleValues() {\n-        final MultiValueMap map = createTestMap(HashSet.class);\n-        final HashSet expected = new HashSet();\n-        expected.add(\"uno\");\n-        expected.add(\"un\");\n+        final MultiValueMap<K, V> map = createTestMap(HashSet.class);\n+        final HashSet<V> expected = new HashSet<V>();\n+        expected.add((V) \"uno\");\n+        expected.add((V) \"un\");\n         assertEquals(expected, map.get(\"one\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testContainsValue() {\n-        final MultiValueMap map = createTestMap(HashSet.class);\n+        final MultiValueMap<K, V> map = createTestMap(HashSet.class);\n         assertTrue(map.containsValue(\"uno\"));\n         assertTrue(map.containsValue(\"un\"));\n         assertTrue(map.containsValue(\"dos\"));\n         assertFalse(map.containsValue(\"quatro\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testKeyContainsValue() {\n-        final MultiValueMap map = createTestMap(HashSet.class);\n-        assertTrue(map.containsValue(\"one\", \"uno\"));\n-        assertTrue(map.containsValue(\"one\", \"un\"));\n-        assertTrue(map.containsValue(\"two\", \"dos\"));\n-        assertTrue(map.containsValue(\"two\", \"deux\"));\n-        assertTrue(map.containsValue(\"three\", \"tres\"));\n-        assertTrue(map.containsValue(\"three\", \"trois\"));\n-        assertFalse(map.containsValue(\"four\", \"quatro\"));\n-    }\n-\n+        final MultiValueMap<K, V> map = createTestMap(HashSet.class);\n+        assertTrue(map.containsValue((K) \"one\", \"uno\"));\n+        assertTrue(map.containsValue((K) \"one\", \"un\"));\n+        assertTrue(map.containsValue((K) \"two\", \"dos\"));\n+        assertTrue(map.containsValue((K) \"two\", \"deux\"));\n+        assertTrue(map.containsValue((K) \"three\", \"tres\"));\n+        assertTrue(map.containsValue((K) \"three\", \"trois\"));\n+        assertFalse(map.containsValue((K) \"four\", \"quatro\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testValues() {\n-        final MultiValueMap map = createTestMap(HashSet.class);\n-        final HashSet expected = new HashSet();\n-        expected.add(\"uno\");\n-        expected.add(\"dos\");\n-        expected.add(\"tres\");\n-        expected.add(\"un\");\n-        expected.add(\"deux\");\n-        expected.add(\"trois\");\n-        final Collection c = map.values();\n+        final MultiValueMap<K, V> map = createTestMap(HashSet.class);\n+        final HashSet<V> expected = new HashSet<V>();\n+        expected.add((V) \"uno\");\n+        expected.add((V) \"dos\");\n+        expected.add((V) \"tres\");\n+        expected.add((V) \"un\");\n+        expected.add((V) \"deux\");\n+        expected.add((V) \"trois\");\n+        final Collection<Object> c = map.values();\n         assertEquals(6, c.size());\n-        assertEquals(expected, new HashSet(c));\n-    }\n-\n-    private MultiValueMap createTestMap() {\n+        assertEquals(expected, new HashSet<Object>(c));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private MultiValueMap<K, V> createTestMap() {\n         return createTestMap(ArrayList.class);\n     }\n \n-    private MultiValueMap createTestMap(Class collectionClass) {\n-        final MultiValueMap map = MultiValueMap.decorate(new HashMap(), collectionClass);\n-        map.put(\"one\", \"uno\");\n-        map.put(\"one\", \"un\");\n-        map.put(\"two\", \"dos\");\n-        map.put(\"two\", \"deux\");\n-        map.put(\"three\", \"tres\");\n-        map.put(\"three\", \"trois\");\n+    @SuppressWarnings(\"unchecked\")\n+    private <C extends Collection<V>> MultiValueMap<K, V> createTestMap(Class<C> collectionClass) {\n+        final MultiValueMap<K, V> map = MultiValueMap.decorate(new HashMap<K, C>(), collectionClass);\n+        map.put((K) \"one\", (V) \"uno\");\n+        map.put((K) \"one\", (V) \"un\");\n+        map.put((K) \"two\", (V) \"dos\");\n+        map.put((K) \"two\", (V) \"deux\");\n+        map.put((K) \"three\", (V) \"tres\");\n+        map.put((K) \"three\", (V) \"trois\");\n         return map;\n     }\n \n     public void testKeyedIterator() {\n-        final MultiValueMap map = createTestMap();\n-        final ArrayList actual = new ArrayList(IteratorUtils.toList(map.iterator(\"one\")));\n-        final ArrayList expected = new ArrayList(Arrays.asList(new String[]{\"uno\", \"un\"}));\n+        final MultiValueMap<K, V> map = createTestMap();\n+        final ArrayList<Object> actual = new ArrayList<Object>(IteratorUtils.toList(map.iterator(\"one\")));\n+        final ArrayList<Object> expected = new ArrayList<Object>(Arrays.asList(new String[]{ \"uno\", \"un\" }));\n         assertEquals(expected, actual);\n     }\n \n     public void testRemoveAllViaIterator() {\n-        final MultiValueMap map = createTestMap();\n-        for(Iterator i = map.values().iterator(); i.hasNext();) {\n+        final MultiValueMap<K, V> map = createTestMap();\n+        for (Iterator<?> i = map.values().iterator(); i.hasNext();) {\n             i.next();\n             i.remove();\n         }\n     }\n \n     public void testRemoveAllViaKeyedIterator() {\n-        final MultiValueMap map = createTestMap();\n-        for(Iterator i = map.iterator(\"one\"); i.hasNext();) {\n+        final MultiValueMap<K, V> map = createTestMap();\n+        for (Iterator<?> i = map.iterator(\"one\"); i.hasNext();) {\n             i.next();\n             i.remove();\n         }\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testMapEquals() {\n-        MultiValueMap one = new MultiValueMap();\n+        MultiValueMap<K, V> one = new MultiValueMap<K, V>();\n         Integer value = new Integer(1);\n-        one.put(\"One\", value);\n+        one.put((K) \"One\", value);\n         one.remove(\"One\", value);\n-        \n-        MultiValueMap two = new MultiValueMap();\n+\n+        MultiValueMap<K, V> two = new MultiValueMap<K, V>();\n         assertEquals(two, one);\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testGetCollection() {\n-        MultiValueMap map = new MultiValueMap();\n-        map.put(\"A\", \"AA\");\n+        MultiValueMap<K, V> map = new MultiValueMap<K, V>();\n+        map.put((K) \"A\", \"AA\");\n         assertSame(map.get(\"A\"), map.getCollection(\"A\"));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testTotalSize() {\n-        MultiValueMap map = new MultiValueMap();\n+        MultiValueMap<K, V> map = new MultiValueMap<K, V>();\n         assertEquals(0, map.totalSize());\n-        map.put(\"A\", \"AA\");\n+        map.put((K) \"A\", \"AA\");\n         assertEquals(1, map.totalSize());\n-        map.put(\"B\", \"BA\");\n+        map.put((K) \"B\", \"BA\");\n         assertEquals(2, map.totalSize());\n-        map.put(\"B\", \"BB\");\n+        map.put((K) \"B\", \"BB\");\n         assertEquals(3, map.totalSize());\n-        map.put(\"B\", \"BC\");\n+        map.put((K) \"B\", \"BC\");\n         assertEquals(4, map.totalSize());\n         map.remove(\"A\");\n         assertEquals(3, map.totalSize());\n         map.remove(\"B\", \"BC\");\n         assertEquals(2, map.totalSize());\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testSize() {\n-        MultiValueMap map = new MultiValueMap();\n+        MultiValueMap<K, V> map = new MultiValueMap<K, V>();\n         assertEquals(0, map.size());\n-        map.put(\"A\", \"AA\");\n+        map.put((K) \"A\", \"AA\");\n         assertEquals(1, map.size());\n-        map.put(\"B\", \"BA\");\n+        map.put((K) \"B\", \"BA\");\n         assertEquals(2, map.size());\n-        map.put(\"B\", \"BB\");\n+        map.put((K) \"B\", \"BB\");\n         assertEquals(2, map.size());\n-        map.put(\"B\", \"BC\");\n+        map.put((K) \"B\", \"BC\");\n         assertEquals(2, map.size());\n         map.remove(\"A\");\n         assertEquals(1, map.size());\n         map.remove(\"B\", \"BC\");\n         assertEquals(1, map.size());\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testSize_Key() {\n-        MultiValueMap map = new MultiValueMap();\n+        MultiValueMap<K, V> map = new MultiValueMap<K, V>();\n         assertEquals(0, map.size(\"A\"));\n         assertEquals(0, map.size(\"B\"));\n-        map.put(\"A\", \"AA\");\n+        map.put((K) \"A\", \"AA\");\n         assertEquals(1, map.size(\"A\"));\n         assertEquals(0, map.size(\"B\"));\n-        map.put(\"B\", \"BA\");\n+        map.put((K) \"B\", \"BA\");\n         assertEquals(1, map.size(\"A\"));\n         assertEquals(1, map.size(\"B\"));\n-        map.put(\"B\", \"BB\");\n+        map.put((K) \"B\", \"BB\");\n         assertEquals(1, map.size(\"A\"));\n         assertEquals(2, map.size(\"B\"));\n-        map.put(\"B\", \"BC\");\n+        map.put((K) \"B\", \"BC\");\n         assertEquals(1, map.size(\"A\"));\n         assertEquals(3, map.size(\"B\"));\n         map.remove(\"A\");\n         assertEquals(0, map.size(\"A\"));\n         assertEquals(2, map.size(\"B\"));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testIterator_Key() {\n-        MultiValueMap map = new MultiValueMap();\n+        MultiValueMap<K, V> map = new MultiValueMap<K, V>();\n         assertEquals(false, map.iterator(\"A\").hasNext());\n-        map.put(\"A\", \"AA\");\n-        Iterator it = map.iterator(\"A\");\n+        map.put((K) \"A\", \"AA\");\n+        Iterator<?> it = map.iterator(\"A\");\n         assertEquals(true, it.hasNext());\n         it.next();\n         assertEquals(false, it.hasNext());\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testContainsValue_Key() {\n-        MultiValueMap map = new MultiValueMap();\n+        MultiValueMap<K, V> map = new MultiValueMap<K, V>();\n         assertEquals(false, map.containsValue(\"A\", \"AA\"));\n         assertEquals(false, map.containsValue(\"B\", \"BB\"));\n-        map.put(\"A\", \"AA\");\n+        map.put((K) \"A\", \"AA\");\n         assertEquals(true, map.containsValue(\"A\", \"AA\"));\n         assertEquals(false, map.containsValue(\"A\", \"AB\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testPutWithList() {\n-        MultiValueMap test = MultiValueMap.decorate(new HashMap(), ArrayList.class);\n-        assertEquals(\"a\", test.put(\"A\", \"a\"));\n-        assertEquals(\"b\", test.put(\"A\", \"b\"));\n+        MultiValueMap<K, V> test = MultiValueMap.decorate(new HashMap<K, Collection>(), ArrayList.class);\n+        assertEquals(\"a\", test.put((K) \"A\", \"a\"));\n+        assertEquals(\"b\", test.put((K) \"A\", \"b\"));\n         assertEquals(1, test.size());\n         assertEquals(2, test.size(\"A\"));\n         assertEquals(2, test.totalSize());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testPutWithSet() {\n-        MultiValueMap test = MultiValueMap.decorate(new HashMap(), HashSet.class);\n-        assertEquals(\"a\", test.put(\"A\", \"a\"));\n-        assertEquals(\"b\", test.put(\"A\", \"b\"));\n-        assertEquals(null, test.put(\"A\", \"a\"));\n+        MultiValueMap<K, V> test = MultiValueMap.decorate(new HashMap<K, HashSet>(), HashSet.class);\n+        assertEquals(\"a\", test.put((K) \"A\", \"a\"));\n+        assertEquals(\"b\", test.put((K) \"A\", \"b\"));\n+        assertEquals(null, test.put((K) \"A\", \"a\"));\n         assertEquals(1, test.size());\n         assertEquals(2, test.size(\"A\"));\n         assertEquals(2, test.totalSize());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testPutAll_Map1() {\n-        MultiMap original = new MultiValueMap();\n-        original.put(\"key\", \"object1\");\n-        original.put(\"key\", \"object2\");\n-\n-        MultiValueMap test = new MultiValueMap();\n-        test.put(\"keyA\", \"objectA\");\n-        test.put(\"key\", \"object0\");\n+        MultiMap<K, V> original = new MultiValueMap<K, V>();\n+        original.put((K) \"key\", \"object1\");\n+        original.put((K) \"key\", \"object2\");\n+\n+        MultiValueMap<K, V> test = new MultiValueMap<K, V>();\n+        test.put((K) \"keyA\", \"objectA\");\n+        test.put((K) \"key\", \"object0\");\n         test.putAll(original);\n \n         assertEquals(2, test.size());\n         assertEquals(true, test.containsValue(\"object2\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testPutAll_Map2() {\n-        Map original = new HashMap();\n-        original.put(\"keyX\", \"object1\");\n-        original.put(\"keyY\", \"object2\");\n-\n-        MultiValueMap test = new MultiValueMap();\n-        test.put(\"keyA\", \"objectA\");\n-        test.put(\"keyX\", \"object0\");\n+        Map<K, V> original = new HashMap<K, V>();\n+        original.put((K) \"keyX\", (V) \"object1\");\n+        original.put((K) \"keyY\", (V) \"object2\");\n+\n+        MultiValueMap<K, V> test = new MultiValueMap<K, V>();\n+        test.put((K) \"keyA\", \"objectA\");\n+        test.put((K) \"keyX\", \"object0\");\n         test.putAll(original);\n \n         assertEquals(3, test.size());\n         assertEquals(true, test.containsValue(\"object2\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testPutAll_KeyCollection() {\n-        MultiValueMap map = new MultiValueMap();\n-        Collection coll = Arrays.asList(new Object[] {\"X\", \"Y\", \"Z\"});\n-        \n-        assertEquals(true, map.putAll(\"A\", coll));\n+        MultiValueMap<K, V> map = new MultiValueMap<K, V>();\n+        Collection<V> coll = (Collection<V>) Arrays.asList(new Object[] { \"X\", \"Y\", \"Z\" });\n+\n+        assertEquals(true, map.putAll((K) \"A\", coll));\n         assertEquals(3, map.size(\"A\"));\n         assertEquals(true, map.containsValue(\"A\", \"X\"));\n         assertEquals(true, map.containsValue(\"A\", \"Y\"));\n         assertEquals(true, map.containsValue(\"A\", \"Z\"));\n-        \n-        assertEquals(false, map.putAll(\"A\", null));\n+\n+        assertEquals(false, map.putAll((K) \"A\", null));\n         assertEquals(3, map.size(\"A\"));\n         assertEquals(true, map.containsValue(\"A\", \"X\"));\n         assertEquals(true, map.containsValue(\"A\", \"Y\"));\n         assertEquals(true, map.containsValue(\"A\", \"Z\"));\n-        \n-        assertEquals(false, map.putAll(\"A\", new ArrayList()));\n+\n+        assertEquals(false, map.putAll((K) \"A\", new ArrayList<V>()));\n         assertEquals(3, map.size(\"A\"));\n         assertEquals(true, map.containsValue(\"A\", \"X\"));\n         assertEquals(true, map.containsValue(\"A\", \"Y\"));\n         assertEquals(true, map.containsValue(\"A\", \"Z\"));\n-        \n-        coll = Arrays.asList(new Object[] {\"M\"});\n-        assertEquals(true, map.putAll(\"A\", coll));\n+\n+        coll = (Collection<V>) Arrays.asList(new Object[] { \"M\" });\n+        assertEquals(true, map.putAll((K) \"A\", coll));\n         assertEquals(4, map.size(\"A\"));\n         assertEquals(true, map.containsValue(\"A\", \"X\"));\n         assertEquals(true, map.containsValue(\"A\", \"Y\"));\n         assertEquals(true, map.containsValue(\"A\", \"M\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testRemove_KeyItem() {\n-        MultiValueMap map = new MultiValueMap();\n-        map.put(\"A\", \"AA\");\n-        map.put(\"A\", \"AB\");\n-        map.put(\"A\", \"AC\");\n+        MultiValueMap<K, V> map = new MultiValueMap<K, V>();\n+        map.put((K) \"A\", \"AA\");\n+        map.put((K) \"A\", \"AB\");\n+        map.put((K) \"A\", \"AC\");\n         assertEquals(null, map.remove(\"C\", \"CA\"));\n         assertEquals(null, map.remove(\"A\", \"AD\"));\n         assertEquals(\"AC\", map.remove(\"A\", \"AC\"));\n         assertEquals(\"AB\", map.remove(\"A\", \"AB\"));\n         assertEquals(\"AA\", map.remove(\"A\", \"AA\"));\n-        assertEquals(new MultiValueMap(), map);\n+        assertEquals(new MultiValueMap<K, V>(), map);\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1252994254, "metainfo": ""}