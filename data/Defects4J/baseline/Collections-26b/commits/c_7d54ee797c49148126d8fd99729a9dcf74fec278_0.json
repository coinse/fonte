{"sha": "7d54ee797c49148126d8fd99729a9dcf74fec278", "log": "Remove trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractEmptyIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractEmptyIterator.java\n \n import java.util.NoSuchElementException;\n \n-/** \n+/**\n  * Provides an implementation of an empty iterator.\n  *\n  * @since 3.1\n  * @version $Id$\n  */\n abstract class AbstractEmptyIterator<E> {\n- \n+\n     /**\n      * Constructor.\n      */\n--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractEmptyMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractEmptyMapIterator.java\n  */\n package org.apache.commons.collections4.iterators;\n \n-/** \n+/**\n  * Provides an implementation of an empty map iterator.\n  *\n  * @since 4.0\n--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java\n \n     /**\n      * Gets the iterator being decorated.\n-     * \n+     *\n      * @return the decorated iterator\n      */\n     protected ListIterator<E> getListIterator() {\n     }\n \n     //-----------------------------------------------------------------------\n-    \n+\n     /** {@inheritDoc} */\n     public boolean hasNext() {\n         return iterator.hasNext();\n     public void add(final E obj) {\n         iterator.add(obj);\n     }\n-    \n+\n }\n--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java\n \n     /**\n      * Gets the iterator being decorated.\n-     * \n+     *\n      * @return the decorated iterator\n      */\n     protected MapIterator<K, V> getMapIterator() {\n     }\n \n     //-----------------------------------------------------------------------\n-    \n+\n     /** {@inheritDoc} */\n     public boolean hasNext() {\n         return iterator.hasNext();\n--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java\n \n     /**\n      * Gets the iterator being decorated.\n-     * \n+     *\n      * @return the decorated iterator\n      */\n     protected OrderedMapIterator<K, V> getOrderedMapIterator() {\n     }\n \n     //-----------------------------------------------------------------------\n-    \n+\n     /** {@inheritDoc} */\n     public boolean hasNext() {\n         return iterator.hasNext();\n     public void remove() {\n         iterator.remove();\n     }\n-    \n+\n     /** {@inheritDoc} */\n     public K getKey() {\n         return iterator.getKey();\n--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java\n \n     /**\n      * Create a new AbstractUntypedIteratorDecorator.\n-     * \n+     *\n      * @param iterator  the iterator to decorate\n      */\n     protected AbstractUntypedIteratorDecorator(final Iterator<I> iterator) {\n \n     /**\n      * Gets the iterator being decorated.\n-     * \n+     *\n      * @return the decorated iterator\n      */\n     protected Iterator<I> getIterator() {\n--- a/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java\n \n import org.apache.commons.collections4.ResettableIterator;\n \n-/** \n+/**\n  * Implements an {@link java.util.Iterator Iterator} over any array.\n  * <p>\n- * The array can be either an array of object or of primitives. If you know \n- * that you have an object array, the \n+ * The array can be either an array of object or of primitives. If you know\n+ * that you have an object array, the\n  * {@link org.apache.commons.collections4.iterators.ObjectArrayIterator ObjectArrayIterator}\n  * class is a better choice, as it will perform better.\n  * <p>\n- * The iterator implements a {@link #reset} method, allowing the reset of \n+ * The iterator implements a {@link #reset} method, allowing the reset of\n  * the iterator back to the start if required.\n  *\n  * @since 1.0\n \n     // TODO Privatise fields? Mainly read-only access\n \n-    /** The array to iterate over */    \n+    /** The array to iterate over */\n     protected Object array;\n     /** The start index to loop from */\n     protected int startIndex = 0;\n     protected int endIndex = 0;\n     /** The current iterator index */\n     protected int index = 0;\n-    \n+\n     // Constructors\n     // ----------------------------------------------------------------------\n     /**\n     public ArrayIterator() {\n         super();\n     }\n-   \n+\n     /**\n      * Constructs an ArrayIterator that will iterate over the values in the\n      * specified array.\n     }\n \n     /**\n-     * Construct an ArrayIterator that will iterate over a range of values \n+     * Construct an ArrayIterator that will iterate over a range of values\n      * in the specified array.\n      *\n      * @param array  the array to iterate over.\n \n     /**\n      * Checks whether the index is valid or not.\n-     * \n+     *\n      * @param bound  the index to check\n      * @param type  the index type (for error messages)\n      * @throws IndexOutOfBoundsException if the index is invalid\n     // Properties\n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the array that this iterator is iterating over. \n+     * Gets the array that this iterator is iterating over.\n      *\n      * @return the array this iterator iterates over, or <code>null</code> if\n      *  the no-arg constructor was used and {@link #setArray(Object)} has never\n     public Object getArray() {\n         return array;\n     }\n-    \n+\n     /**\n      * Sets the array that the ArrayIterator should iterate over.\n      * <p>\n         this.array = array;\n         this.index = 0;\n     }\n-    \n+\n     /**\n      * Resets the iterator back to the start index.\n      */\n--- a/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java\n import org.apache.commons.collections4.ResettableListIterator;\n \n /**\n- * Implements a {@link ListIterator} over an array. \n+ * Implements a {@link ListIterator} over an array.\n  * <p>\n- * The array can be either an array of object or of primitives. If you know \n+ * The array can be either an array of object or of primitives. If you know\n  * that you have an object array, the {@link ObjectArrayListIterator}\n  * class is a better choice, as it will perform better.\n  *\n  * <p>\n- * This iterator does not support {@link #add(Object)} or {@link #remove()}, as the array \n+ * This iterator does not support {@link #add(Object)} or {@link #remove()}, as the array\n  * cannot be changed in size. The {@link #set(Object)} method is supported however.\n  *\n  * @see org.apache.commons.collections4.iterators.ArrayIterator\n     /**\n      * Holds the index of the last item returned by a call to <code>next()</code>\n      * or <code>previous()</code>. This is set to <code>-1</code> if neither method\n-     * has yet been invoked. <code>lastItemIndex</code> is used to to implement \n+     * has yet been invoked. <code>lastItemIndex</code> is used to to implement\n      * the {@link #set} method.\n      *\n      */\n     }\n \n     /**\n-     * Construct an ArrayListIterator that will iterate over a range of values \n+     * Construct an ArrayListIterator that will iterate over a range of values\n      * in the specified array.\n      *\n      * @param array  the array to iterate over\n \n     /**\n      * Gets the previous element from the array.\n-     * \n+     *\n      * @return the previous element\n      * @throws NoSuchElementException if there is no previous element\n      */\n \n     /**\n      * Gets the next element from the array.\n-     * \n+     *\n      * @return the next element\n      * @throws NoSuchElementException if there is no next element\n      */\n \n     /**\n      * Gets the next index to be retrieved.\n-     * \n+     *\n      * @return the index of the item to be retrieved next\n      */\n     public int nextIndex() {\n \n     /**\n      * Gets the index of the item to be retrieved if {@link #previous()} is called.\n-     * \n+     *\n      * @return the index of the item to be retrieved next\n      */\n     public int previousIndex() {\n     /**\n      * Sets the element under the cursor.\n      * <p>\n-     * This method sets the element that was returned by the last call \n-     * to {@link #next()} of {@link #previous()}. \n+     * This method sets the element that was returned by the last call\n+     * to {@link #next()} of {@link #previous()}.\n      * <p>\n      * <b>Note:</b> {@link ListIterator} implementations that support\n      * <code>add()</code> and <code>remove()</code> only allow <code>set()</code> to be called\n--- a/src/main/java/org/apache/commons/collections4/iterators/CollatingIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/CollatingIterator.java\n      * Constructs a new <code>CollatingIterator</code> that will used the\n      * specified comparator for ordering. Child iterators will have to be\n      * manually added using the {@link #addIterator(Iterator)} method.\n-     * \n+     *\n      * @param comp the comparator to use to sort; must not be null,\n      *   unless you'll be invoking {@link #setComparator(Comparator)}\n      *   later on.\n      * specified comparator for ordering and have the specified initial\n      * capacity. Child iterators will have to be manually added using the\n      * {@link #addIterator(Iterator)} method.\n-     * \n+     *\n      * @param comp the comparator to use to sort; must not be null,\n      *   unless you'll be invoking {@link #setComparator(Comparator)}\n      *   later on.\n      * Constructs a new <code>CollatingIterator</code> that will use the\n      * specified comparator to provide ordered iteration over the two given\n      * iterators.\n-     * \n+     *\n      * @param comp the comparator to use to sort; must not be null,\n      *   unless you'll be invoking {@link #setComparator(Comparator)}\n      *   later on.\n      * Constructs a new <code>CollatingIterator</code> that will use the\n      * specified comparator to provide ordered iteration over the array of\n      * iterators.\n-     * \n+     *\n      * @param comp the comparator to use to sort; must not be null,\n      *   unless you'll be invoking {@link #setComparator(Comparator)}\n      *   later on.\n      * Constructs a new <code>CollatingIterator</code> that will use the\n      * specified comparator to provide ordered iteration over the collection of\n      * iterators.\n-     * \n+     *\n      * @param comp the comparator to use to sort; must not be null,\n      *   unless you'll be invoking {@link #setComparator(Comparator)}\n      *   later on.\n     // ----------------------------------------------------------------------\n     /**\n      * Adds the given {@link Iterator} to the iterators being collated.\n-     * \n+     *\n      * @param iterator the iterator to add to the collation, must not be null\n      * @throws IllegalStateException if iteration has started\n      * @throws NullPointerException if the iterator is null\n \n     /**\n      * Sets the iterator at the given index.\n-     * \n+     *\n      * @param index index of the Iterator to replace\n      * @param iterator Iterator to place at the given index\n      * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt; size()\n \n     /**\n      * Gets the list of Iterators (unmodifiable).\n-     * \n+     *\n      * @return the unmodifiable list of iterators added\n      */\n     public List<Iterator<? extends E>> getIterators() {\n \n     /**\n      * Gets the {@link Comparator} by which collatation occurs.\n-     * \n+     *\n      * @return the {@link Comparator}\n      */\n     public Comparator<? super E> getComparator() {\n      * if the elements in the iterators are implementing the\n      * {@link java.lang.Comparable} interface), then use the\n      * {@link org.apache.commons.collections4.comparators.ComparableComparator}.\n-     * \n+     *\n      * @param comp the {@link Comparator} to set\n      * @throws IllegalStateException if iteration has started\n      */\n     // -------------------------------------------------------------------\n     /**\n      * Returns <code>true</code> if any child iterator has remaining elements.\n-     * \n+     *\n      * @return true if this iterator has remaining elements\n      */\n     public boolean hasNext() {\n \n     /**\n      * Returns the next ordered element from a child iterator.\n-     * \n+     *\n      * @return the next ordered element\n      * @throws NoSuchElementException if no child iterator has any more elements\n      */\n     /**\n      * Removes the last returned element from the child iterator that produced\n      * it.\n-     * \n+     *\n      * @throws IllegalStateException if there is no last returned element, or if\n      * the last returned element has already been removed\n      */\n \n     /**\n      * Returns the index of the iterator that returned the last element.\n-     * \n+     *\n      * @return the index of the iterator that returned the last element\n      * @throws IllegalStateException if there is no last returned element\n      */\n         if (lastReturned == -1) {\n             throw new IllegalStateException(\"No value has been returned yet\");\n         }\n-        \n+\n         return lastReturned;\n     }\n-    \n+\n     // Private Methods\n     // -------------------------------------------------------------------\n     /**\n      * <i>i</i> to the next value of the {@link #iterators iterator} at position\n      * <i>i</i>, or clear them if the <i>i</i><sup>th</sup> iterator has no next\n      * value.\n-     * \n+     *\n      * @return <tt>false</tt> iff there was no value to set\n      */\n     private boolean set(final int i) {\n     /**\n      * Throws {@link IllegalStateException} if iteration has started via\n      * {@link #start}.\n-     * \n+     *\n      * @throws IllegalStateException if iteration started\n      */\n     private void checkNotStarted() throws IllegalStateException {\n     /**\n      * Returns the index of the least element in {@link #values},\n      * {@link #set(int) setting} any uninitialized values.\n-     * \n+     *\n      * @throws NullPointerException if no comparator is set\n      */\n     private int least() {\n--- a/src/main/java/org/apache/commons/collections4/iterators/EmptyIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/EmptyIterator.java\n \n import org.apache.commons.collections4.ResettableIterator;\n \n-/** \n+/**\n  * Provides an implementation of an empty iterator.\n  * <p>\n  * This class provides an implementation of an empty iterator.\n--- a/src/main/java/org/apache/commons/collections4/iterators/EmptyMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/EmptyMapIterator.java\n import org.apache.commons.collections4.MapIterator;\n import org.apache.commons.collections4.ResettableIterator;\n \n-/** \n+/**\n  * Provides an implementation of an empty map iterator.\n  *\n  * @since 3.1\n--- a/src/main/java/org/apache/commons/collections4/iterators/EmptyOrderedIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/EmptyOrderedIterator.java\n import org.apache.commons.collections4.OrderedIterator;\n import org.apache.commons.collections4.ResettableIterator;\n \n-/** \n+/**\n  * Provides an implementation of an empty ordered iterator.\n  *\n  * @since 3.1\n--- a/src/main/java/org/apache/commons/collections4/iterators/EmptyOrderedMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/EmptyOrderedMapIterator.java\n import org.apache.commons.collections4.OrderedMapIterator;\n import org.apache.commons.collections4.ResettableIterator;\n \n-/** \n+/**\n  * Provides an implementation of an empty ordered map iterator.\n  *\n  * @since 3.1\n--- a/src/main/java/org/apache/commons/collections4/iterators/EntrySetMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/EntrySetMapIterator.java\n  *   it.setValue(newValue);\n  * }\n  * </pre>\n- *  \n+ *\n  * @since 3.0\n  * @version $Id$\n  */\n public class EntrySetMapIterator<K, V> implements MapIterator<K, V>, ResettableIterator<K> {\n-    \n+\n     private final Map<K, V> map;\n     private Iterator<Map.Entry<K, V>> iterator;\n     private Map.Entry<K, V> last;\n     private boolean canRemove = false;\n-    \n+\n     /**\n      * Constructor.\n-     * \n+     *\n      * @param map  the map to iterate over\n      */\n     public EntrySetMapIterator(final Map<K, V> map) {\n         this.iterator = map.entrySet().iterator();\n     }\n \n-    //-----------------------------------------------------------------------    \n+    //-----------------------------------------------------------------------\n     /**\n      * Checks to see if there are more entries still to be iterated.\n      *\n         last = null;\n         canRemove = false;\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the current key, which is the key returned by the last call\n         last = null;\n         canRemove = false;\n     }\n-    \n+\n     /**\n      * Gets the iterator as a String.\n-     * \n+     *\n      * @return a string version of the iterator\n-     */    \n+     */\n     @Override\n     public String toString() {\n         if (last != null) {\n         }\n         return \"MapIterator[]\";\n     }\n-    \n+\n }\n--- a/src/main/java/org/apache/commons/collections4/iterators/EnumerationIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/EnumerationIterator.java\n import java.util.Enumeration;\n import java.util.Iterator;\n \n-/** \n+/**\n  * Adapter to make {@link Enumeration Enumeration} instances appear\n  * to be {@link Iterator Iterator} instances.\n  *\n  * @version $Id$\n  */\n public class EnumerationIterator<E> implements Iterator<E> {\n-    \n+\n     /** The collection to remove elements from */\n     private final Collection<? super E> collection;\n     /** The enumeration being converted */\n     private Enumeration<? extends E> enumeration;\n     /** The last object retrieved */\n     private E last;\n-    \n+\n     // Constructors\n     //-----------------------------------------------------------------------\n     /**\n     public void setEnumeration(final Enumeration<? extends E> enumeration) {\n         this.enumeration = enumeration;\n     }\n-    \n+\n }\n--- a/src/main/java/org/apache/commons/collections4/iterators/FilterIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/FilterIterator.java\n \n import org.apache.commons.collections4.Predicate;\n \n-/** \n+/**\n  * Decorates another {@link Iterator} using a predicate to filter elements.\n  * <p>\n  * This iterator decorates the underlying iterator, only allowing through\n     }\n \n     //-----------------------------------------------------------------------\n-    /** \n-     * Returns true if the underlying iterator contains an object that \n+    /**\n+     * Returns true if the underlying iterator contains an object that\n      * matches the predicate.\n      *\n      * @return true if there is another object that matches the predicate\n         return nextObjectSet || setNextObject();\n     }\n \n-    /** \n+    /**\n      * Returns the next object that matches the predicate.\n      *\n      * @return the next object which matches the given predicate\n      * @throws NullPointerException if either the iterator or predicate are null\n      * @throws NoSuchElementException if there are no more elements that\n-     *  match the predicate \n+     *  match the predicate\n      */\n     public E next() {\n         if (!nextObjectSet) {\n     }\n \n     //-----------------------------------------------------------------------\n-    /** \n+    /**\n      * Gets the iterator this iterator is using.\n      *\n      * @return the iterator\n         return iterator;\n     }\n \n-    /** \n+    /**\n      * Sets the iterator for this iterator to use.\n      * If iteration has started, this effectively resets the iterator.\n      *\n     }\n \n     //-----------------------------------------------------------------------\n-    /** \n+    /**\n      * Gets the predicate this iterator is using.\n      *\n      * @return the predicate\n         return predicate;\n     }\n \n-    /** \n+    /**\n      * Sets the predicate this the iterator to use.\n      *\n      * @param predicate  the predicate to use\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Set nextObject to the next object. If there are no more \n+     * Set nextObject to the next object. If there are no more\n      * objects then return false. Otherwise, return true.\n      */\n     private boolean setNextObject() {\n--- a/src/main/java/org/apache/commons/collections4/iterators/FilterListIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/FilterListIterator.java\n \n import org.apache.commons.collections4.Predicate;\n \n-/** \n+/**\n  * Decorates another {@link ListIterator} using a predicate to filter elements.\n  * <p>\n  * This iterator decorates the underlying iterator, only allowing through\n \n     /** The iterator being used */\n     private ListIterator<? extends E> iterator;\n-    \n+\n     /** The predicate being used */\n     private Predicate<? super E> predicate;\n \n-    /** \n-     * The value of the next (matching) object, when \n-     * {@link #nextObjectSet} is true. \n+    /**\n+     * The value of the next (matching) object, when\n+     * {@link #nextObjectSet} is true.\n      */\n     private E nextObject;\n \n-    /** \n+    /**\n      * Whether or not the {@link #nextObject} has been set\n-     * (possibly to <code>null</code>). \n-     */\n-    private boolean nextObjectSet = false;   \n-\n-    /** \n-     * The value of the previous (matching) object, when \n-     * {@link #previousObjectSet} is true. \n+     * (possibly to <code>null</code>).\n+     */\n+    private boolean nextObjectSet = false;\n+\n+    /**\n+     * The value of the previous (matching) object, when\n+     * {@link #previousObjectSet} is true.\n      */\n     private E previousObject;\n \n-    /** \n+    /**\n      * Whether or not the {@link #previousObject} has been set\n-     * (possibly to <code>null</code>). \n-     */\n-    private boolean previousObjectSet = false;   \n-\n-    /** \n+     * (possibly to <code>null</code>).\n+     */\n+    private boolean previousObjectSet = false;\n+\n+    /**\n      * The index of the element that would be returned by {@link #next}.\n      */\n     private int nextIndex = 0;\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructs a new <code>FilterListIterator</code> that will not function\n     }\n \n     /**\n-     * Constructs a new <code>FilterListIterator</code> that will not \n+     * Constructs a new <code>FilterListIterator</code> that will not\n      * function until {@link #setPredicate(Predicate) setPredicate} is invoked.\n      *\n      * @param iterator  the iterator to use\n     }\n \n     //-----------------------------------------------------------------------\n-    /** \n+    /**\n      * Gets the iterator this iterator is using.\n-     * \n+     *\n      * @return the iterator.\n      */\n     public ListIterator<? extends E> getListIterator() {\n         return iterator;\n     }\n \n-    /** \n+    /**\n      * Sets the iterator for this iterator to use.\n      * If iteration has started, this effectively resets the iterator.\n-     * \n+     *\n      * @param iterator  the iterator to use\n      */\n     public void setListIterator(final ListIterator<? extends E> iterator) {\n     }\n \n     //-----------------------------------------------------------------------\n-    /** \n+    /**\n      * Gets the predicate this iterator is using.\n-     * \n+     *\n      * @return the predicate.\n      */\n     public Predicate<? super E> getPredicate() {\n         return predicate;\n     }\n \n-    /** \n+    /**\n      * Sets the predicate this the iterator to use.\n-     * \n+     *\n      * @param predicate  the transformer to use\n      */\n     public void setPredicate(final Predicate<? super E> predicate) {\n \n     private boolean setNextObject() {\n         // if previousObjectSet,\n-        // then we've walked back one step in the \n+        // then we've walked back one step in the\n         // underlying list (due to a hasPrevious() call)\n         // so skip ahead one matching object\n         if (previousObjectSet) {\n \n     private boolean setPreviousObject() {\n         // if nextObjectSet,\n-        // then we've walked back one step in the \n+        // then we've walked back one step in the\n         // underlying list (due to a hasNext() call)\n         // so skip ahead one matching object\n         if (nextObjectSet) {\n--- a/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java\n      * <p>\n      * You will normally use {@link #addIterator(Iterator)} to add some more\n      * iterators after using this constructor.\n-     * \n+     *\n      * @param iterator the first child iterator in the IteratorChain, not null\n      * @throws NullPointerException if the iterator is null\n      */\n      * <p>\n      * This method takes two iterators. The newly constructed iterator will\n      * iterate through each one of the input iterators in turn.\n-     * \n+     *\n      * @param first the first child iterator in the IteratorChain, not null\n      * @param second the second child iterator in the IteratorChain, not null\n      * @throws NullPointerException if either iterator is null\n      * <p>\n      * This method takes an array of iterators. The newly constructed iterator\n      * will iterate through each one of the input iterators in turn.\n-     * \n+     *\n      * @param iteratorChain the array of iterators, not null\n      * @throws NullPointerException if iterators array is or contains null\n      */\n      * <p>\n      * This method takes a collection of iterators. The newly constructed\n      * iterator will iterate through each one of the input iterators in turn.\n-     * \n+     *\n      * @param iteratorChain the collection of iterators, not null\n      * @throws NullPointerException if iterators collection is or contains null\n      * @throws ClassCastException if iterators collection doesn't contain an\n     //-----------------------------------------------------------------------\n     /**\n      * Add an Iterator to the end of the chain\n-     * \n+     *\n      * @param iterator Iterator to add\n      * @throws IllegalStateException if I've already started iterating\n      * @throws NullPointerException if the iterator is null\n \n     /**\n      * Set the Iterator at the given index\n-     * \n+     *\n      * @param index index of the Iterator to replace\n      * @param iterator Iterator to place at the given index\n      * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt; size()\n \n     /**\n      * Get the list of Iterators (unmodifiable)\n-     * \n+     *\n      * @return the unmodifiable list of iterators added\n      */\n     public List<Iterator<? extends E>> getIterators() {\n \n     /**\n      * Number of Iterators in the current IteratorChain.\n-     * \n+     *\n      * @return Iterator count\n      */\n     public int size() {\n      * Determine if modifications can still be made to the IteratorChain.\n      * IteratorChains cannot be modified once they have executed a method from\n      * the Iterator interface.\n-     * \n+     *\n      * @return true if IteratorChain cannot be modified, false if it can\n      */\n     public boolean isLocked() {\n     //-----------------------------------------------------------------------\n     /**\n      * Return true if any Iterator in the IteratorChain has a remaining element.\n-     * \n+     *\n      * @return true if elements remain\n      */\n     public boolean hasNext() {\n \n     /**\n      * Returns the next Object of the current Iterator\n-     * \n+     *\n      * @return Object from the current Iterator\n      * @throws java.util.NoSuchElementException if all the Iterators are\n      * exhausted\n      * underlying Iterator. Therefore, this method may throw an\n      * UnsupportedOperationException if the underlying Iterator does not support\n      * this method.\n-     * \n+     *\n      * @throws UnsupportedOperationException if the remove operator is not\n      * supported by the underlying Iterator\n      * @throws IllegalStateException if the next method has not yet been called,\n--- a/src/main/java/org/apache/commons/collections4/iterators/IteratorEnumeration.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/IteratorEnumeration.java\n     /**\n      * Constructs a new <code>IteratorEnumeration</code> that will use the given\n      * iterator.\n-     * \n+     *\n      * @param iterator the iterator to use\n      */\n     public IteratorEnumeration(final Iterator<? extends E> iterator) {\n \n     /**\n      * Returns true if the underlying iterator has more elements.\n-     * \n+     *\n      * @return true if the underlying iterator has more elements\n      */\n     public boolean hasMoreElements() {\n \n     /**\n      * Returns the next element from the underlying iterator.\n-     * \n+     *\n      * @return the next element from the underlying iterator.\n      * @throws java.util.NoSuchElementException if the underlying iterator has\n      * no more elements\n \n     /**\n      * Returns the underlying iterator.\n-     * \n+     *\n      * @return the underlying iterator\n      */\n     public Iterator<? extends E> getIterator() {\n \n     /**\n      * Sets the underlying iterator.\n-     * \n+     *\n      * @param iterator the new underlying iterator\n      */\n     public void setIterator(final Iterator<? extends E> iterator) {\n--- a/src/main/java/org/apache/commons/collections4/iterators/IteratorIterable.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/IteratorIterable.java\n  * Adapter to make an {@link Iterator Iterator} instance appear to be an\n  * {@link Iterable Iterable} instance.  The iterable can be constructed in one\n  * of two variants:  single use, multiple use.\n- * \n+ *\n  * <p>\n  * In the single use iterable case, the iterable is only usable for one\n  * iterative operation over the source iterator.  Subsequent iterative\n  *   Iterable<Integer> iterable = new IteratorIterable<Integer>(iterator);\n  * </pre>\n  * </p>\n- * \n+ *\n  * <p>\n  * In the multiple use iterable case, the iterable is usable for any number of\n  * iterative operations over the source iterator.  Of special note, even though\n  *   Iterable<Integer> iterable = new IteratorIterable<Integer>(iterator);\n  * </pre>\n  * </p>\n- * \n+ *\n  * <p>\n  * A multiple use iterable can also be explicitly constructed using any\n  * {@link Iterator} and specifying <code>true</code> for the\n  *   Iterable<Integer> iterable = new IteratorIterable<Integer>(iterator, true);\n  * </pre>\n  * </p>\n- * \n+ *\n  * @since 4.0\n  * @version $Id$\n  */\n \n     /** the iterator being adapted into an iterable. */\n     private final Iterator<? extends E> iterator;\n-    \n-    /** the iterator parameterized as the {@link #iterator()} return type. */ \n+\n+    /** the iterator parameterized as the {@link #iterator()} return type. */\n     private final Iterator<E> typeSafeIterator;\n-    \n+\n     /**\n      * Constructs a new <code>IteratorIterable</code> that will use the given\n      * iterator.\n-     * \n+     *\n      * @param iterator the iterator to use.\n      */\n     public IteratorIterable(final Iterator<? extends E> iterator) {\n     /**\n      * Constructs a new <code>IteratorIterable</code> that will use the given\n      * iterator.\n-     * \n+     *\n      * @param iterator the iterator to use.\n      * @param multipleUse <code>true</code> if the new iterable can be used in multiple iterations\n      */\n     public IteratorIterable(final Iterator<? extends E> iterator, final boolean multipleUse) {\n         super();\n         if (multipleUse && !(iterator instanceof ResettableIterator)) {\n-            this.iterator = new ListIteratorWrapper<E>(iterator); \n+            this.iterator = new ListIteratorWrapper<E>(iterator);\n         } else {\n             this.iterator = iterator;\n         }\n \n     /**\n      * Gets the iterator wrapped by this iterable.\n-     * \n+     *\n      * @return the iterator\n      */\n     public Iterator<E> iterator() {\n--- a/src/main/java/org/apache/commons/collections4/iterators/LazyIteratorChain.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/LazyIteratorChain.java\n \n     /**\n      * Return true if any Iterator in the chain has a remaining element.\n-     * \n+     *\n      * @return true if elements remain\n      */\n     public boolean hasNext() {\n \n     /**\n      * Returns the next element of the current Iterator\n-     * \n+     *\n      * @return element from the current Iterator\n      * @throws java.util.NoSuchElementException if all the Iterators are exhausted\n      */\n     public E next() {\n         updateCurrentIterator();\n         lastUsedIterator = currentIterator;\n-        \n+\n         return currentIterator.next();\n     }\n \n      * As with next() and hasNext(), this method calls remove() on the underlying Iterator.\n      * Therefore, this method may throw an UnsupportedOperationException if the underlying\n      * Iterator does not support this method.\n-     * \n+     *\n      * @throws UnsupportedOperationException if the remove operator is not\n      *   supported by the underlying Iterator\n      * @throws IllegalStateException if the next method has not yet been called,\n--- a/src/main/java/org/apache/commons/collections4/iterators/ListIteratorWrapper.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ListIteratorWrapper.java\n /**\n  * Converts an {@link Iterator} into a {@link ResettableListIterator}.\n  * For plain <code>Iterator</code>s this is accomplished by caching the returned\n- * elements.  This class can also be used to simply add \n+ * elements.  This class can also be used to simply add\n  * {@link org.apache.commons.collections4.ResettableIterator ResettableIterator}\n  * functionality to a given {@link ListIterator}.\n  * <p>\n--- a/src/main/java/org/apache/commons/collections4/iterators/LoopingIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/LoopingIterator.java\n /**\n  * An Iterator that restarts when it reaches the end.\n  * <p>\n- * The iterator will loop continuously around the provided elements, unless \n+ * The iterator will loop continuously around the provided elements, unless\n  * there are no elements in the collection to begin with, or all the elements\n  * have been {@link #remove removed}.\n  * <p>\n  * Concurrent modifications are not directly supported, and for most collection\n- * implementations will throw a ConcurrentModificationException. \n+ * implementations will throw a ConcurrentModificationException.\n  *\n  * @since 3.0\n  * @version $Id$\n  */\n public class LoopingIterator<E> implements ResettableIterator<E> {\n-    \n+\n     /** The collection to base the iterator on */\n     private final Collection<? extends E> collection;\n     /** The current iterator */\n      * <p>\n      * There is no way to reset an Iterator instance without recreating it from\n      * the original source, so the Collection must be passed in.\n-     * \n+     *\n      * @param coll  the collection to wrap\n      * @throws NullPointerException if the collection is null\n      */\n         reset();\n     }\n \n-    /** \n+    /**\n      * Has the iterator any more elements.\n      * <p>\n      * Returns false only if the collection originally had zero elements, or\n      * all the elements have been {@link #remove removed}.\n-     * \n+     *\n      * @return <code>true</code> if there are more elements\n      */\n     public boolean hasNext() {\n      * Returns the next object in the collection.\n      * <p>\n      * If at the end of the collection, return the first element.\n-     * \n+     *\n      * @return the next object\n      * @throws NoSuchElementException if there are no elements\n      *         at all.  Use {@link #hasNext} to avoid this error.\n     /**\n      * Removes the previously retrieved item from the underlying collection.\n      * <p>\n-     * This feature is only supported if the underlying collection's \n-     * {@link Collection#iterator iterator} method returns an implementation \n+     * This feature is only supported if the underlying collection's\n+     * {@link Collection#iterator iterator} method returns an implementation\n      * that supports it.\n      * <p>\n      * This method can only be called after at least one {@link #next} method call.\n \n     /**\n      * Gets the size of the collection underlying the iterator.\n-     * \n+     *\n      * @return the current collection size\n      */\n     public int size() {\n--- a/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java\n     private int index = 0;\n \n     /**\n-     * Convenience constructor, which creates a new NodeListIterator from \n+     * Convenience constructor, which creates a new NodeListIterator from\n      * the specified node's childNodes.\n      *\n      * @param node Node, who's child nodes are wrapped by this class. Must not be null\n         }\n         this.nodeList = nodeList;\n     }\n-    \n+\n     public boolean hasNext() {\n         return nodeList == null ? false : index < nodeList.getLength();\n     }\n--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java\n \n import org.apache.commons.collections4.ResettableIterator;\n \n-/** \n+/**\n  * An {@link Iterator} over an array of objects.\n  * <p>\n  * This iterator does not support {@link #remove}, as the object array cannot be\n     }\n \n     /**\n-     * Construct an ObjectArrayIterator that will iterate over a range of values \n+     * Construct an ObjectArrayIterator that will iterate over a range of values\n      * in the specified array.\n      *\n      * @param array  the array to iterate over\n     //-------------------------------------------------------------------------\n \n     /**\n-     * Gets the array that this iterator is iterating over. \n+     * Gets the array that this iterator is iterating over.\n      *\n      * @return the array this iterator iterates over, or <code>null</code> if\n      * the no-arg constructor was used and {@link #setArray} has never\n \n     /**\n      * Gets the start index to loop from.\n-     * \n+     *\n      * @return the start index\n      */\n     public int getStartIndex() {\n \n     /**\n      * Gets the end index to loop to.\n-     * \n+     *\n      * @return the end index\n      */\n     public int getEndIndex() {\n--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java\n /**\n  * Implements a {@link ListIterator} over an array of objects.\n  * <p>\n- * This iterator does not support {@link #add} or {@link #remove}, as the object array \n+ * This iterator does not support {@link #add} or {@link #remove}, as the object array\n  * cannot be structurally modified. The {@link #set} method is supported however.\n  * <p>\n  * The iterator implements a {@link #reset} method, allowing the reset of the iterator\n         implements ListIterator<E>, ResettableListIterator<E> {\n \n     /**\n-     * Holds the index of the last item returned by a call to <code>next()</code> \n+     * Holds the index of the last item returned by a call to <code>next()</code>\n      * or <code>previous()</code>. This is set to <code>-1</code> if neither method\n      * has yet been invoked. <code>lastItemIndex</code> is used to to implement the\n      * {@link #set} method.\n     public ObjectArrayListIterator(final E[] array, final int start) {\n         super(array, start);\n     }\n-    \n-    /**\n-     * Construct an ObjectArrayListIterator that will iterate over a range of values \n+\n+    /**\n+     * Construct an ObjectArrayListIterator that will iterate over a range of values\n      * in the specified array.\n      *\n      * @param array  the array to iterate over\n \n     /**\n      * Gets the previous element from the array.\n-     * \n+     *\n      * @return the previous element\n      * @throws NoSuchElementException if there is no previous element\n      */\n \n     /**\n      * Gets the next element from the array.\n-     * \n+     *\n      * @return the next element\n      * @throws NoSuchElementException if there is no next element\n      */\n \n     /**\n      * Gets the next index to be retrieved.\n-     * \n+     *\n      * @return the index of the item to be retrieved next\n      */\n     public int nextIndex() {\n \n     /**\n      * Gets the index of the item to be retrieved if {@link #previous()} is called.\n-     * \n+     *\n      * @return the index of the item to be retrieved next\n      */\n     public int previousIndex() {\n     /**\n      * Sets the element under the cursor.\n      * <p>\n-     * This method sets the element that was returned by the last call \n-     * to {@link #next()} of {@link #previous()}. \n-     * \n+     * This method sets the element that was returned by the last call\n+     * to {@link #next()} of {@link #previous()}.\n+     *\n      * <b>Note:</b> {@link ListIterator} implementations that support <code>add()</code>\n-     * and <code>remove()</code> only allow <code>set()</code> to be called once per call \n+     * and <code>remove()</code> only allow <code>set()</code> to be called once per call\n      * to <code>next()</code> or <code>previous</code> (see the {@link ListIterator}\n-     * javadoc for more details). Since this implementation does not support \n+     * javadoc for more details). Since this implementation does not support\n      * <code>add()</code> or <code>remove()</code>, <code>set()</code> may be\n      * called as often as desired.\n-     * \n+     *\n      * @param obj  the object to set into the array\n      * @throws IllegalStateException if next() has not yet been called.\n      * @throws ClassCastException if the object type is unsuitable for the array\n--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectGraphIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectGraphIterator.java\n      * <p>\n      * The root object can be an iterator, in which case it will be immediately\n      * looped around.\n-     * \n+     *\n      * @param root  the root object, null will result in an empty iterator\n      * @param transformer  the transformer to use, null will use a no effect transformer\n      */\n      * be used to iterate over nested iterators. That is to say that the iterator\n      * passed in here contains other iterators, which may in turn contain further\n      * iterators.\n-     * \n+     *\n      * @param rootIterator  the root iterator, null will result in an empty iterator\n      */\n     public ObjectGraphIterator(final Iterator<? extends E> rootIterator) {\n \n     /**\n      * Finds the next object in the iteration given any start object.\n-     * \n+     *\n      * @param value  the value to start from\n      */\n     @SuppressWarnings(\"unchecked\")\n             hasNext = true;\n         }\n     }\n-    \n+\n     /**\n      * Finds the next object in the iteration given an iterator.\n-     * \n+     *\n      * @param iterator  the iterator to start from\n      */\n     protected void findNextByIterator(final Iterator<? extends E> iterator) {\n             }\n             currentIterator = iterator;\n         }\n-        \n+\n         while (currentIterator.hasNext() && hasNext == false) {\n             E next = currentIterator.next();\n             if (transformer != null) {\n     //-----------------------------------------------------------------------\n     /**\n      * Checks whether there are any more elements in the iteration to obtain.\n-     * \n+     *\n      * @return true if elements remain in the iteration\n      */\n     public boolean hasNext() {\n \n     /**\n      * Gets the next element of the iteration.\n-     * \n+     *\n      * @return the next element from the iteration\n      * @throws NoSuchElementException if all the Iterators are exhausted\n      */\n      * <p>\n      * This method calls remove() on the underlying Iterator and it may\n      * throw an UnsupportedOperationException if the underlying Iterator\n-     * does not support this method. \n-     * \n+     * does not support this method.\n+     *\n      * @throws UnsupportedOperationException\n      *   if the remove operator is not supported by the underlying Iterator\n      * @throws IllegalStateException\n--- a/src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java\n  * {@code UnsupportedOperationException}.\n  * <p>\n  * NOTE: in case an empty collection is provided, the iterator will\n- * return exactly one empty list as result, as 0! = 1. \n+ * return exactly one empty list as result, as 0! = 1.\n  *\n  * @param <E>  the type of the objects being permuted\n  *\n--- a/src/main/java/org/apache/commons/collections4/iterators/SingletonIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/SingletonIterator.java\n \n import org.apache.commons.collections4.ResettableIterator;\n \n-/** \n- * <code>SingletonIterator</code> is an {@link Iterator} over a single \n+/**\n+ * <code>SingletonIterator</code> is an {@link Iterator} over a single\n  * object instance.\n  *\n  * @since 2.0\n      * Is another object available from the iterator?\n      * <p>\n      * This returns true if the single object hasn't been returned yet.\n-     * \n+     *\n      * @return true if the single object hasn't been returned yet\n      */\n     public boolean hasNext() {\n      * This returns the single object if it hasn't been returned yet.\n      *\n      * @return the single object\n-     * @throws NoSuchElementException if the single object has already \n+     * @throws NoSuchElementException if the single object has already\n      *    been returned\n      */\n     public E next() {\n \n     /**\n      * Remove the object from this iterator.\n-     * \n+     *\n      * @throws IllegalStateException if the <tt>next</tt> method has not\n      *        yet been called, or the <tt>remove</tt> method has already\n      *        been called after the last call to the <tt>next</tt>\n             throw new UnsupportedOperationException();\n         }\n     }\n-    \n+\n     /**\n      * Reset the iterator to the start.\n      */\n     public void reset() {\n         beforeFirst = true;\n     }\n-    \n+\n }\n--- a/src/main/java/org/apache/commons/collections4/iterators/SingletonListIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/SingletonListIterator.java\n import org.apache.commons.collections4.ResettableListIterator;\n \n /**\n- * <code>SingletonIterator</code> is an {@link ListIterator} over a single \n+ * <code>SingletonIterator</code> is an {@link ListIterator} over a single\n  * object instance.\n  *\n  * @since 2.1\n      * Is another object available from the iterator?\n      * <p>\n      * This returns true if the single object hasn't been returned yet.\n-     * \n+     *\n      * @return true if the single object hasn't been returned yet\n      */\n     public boolean hasNext() {\n      * Is a previous object available from the iterator?\n      * <p>\n      * This returns true if the single object has been returned.\n-     * \n+     *\n      * @return true if the single object has been returned\n      */\n     public boolean hasPrevious() {\n      * Returns the index of the element that would be returned by a subsequent\n      * call to <tt>next</tt>.\n      *\n-     * @return 0 or 1 depending on current state. \n+     * @return 0 or 1 depending on current state.\n      */\n     public int nextIndex() {\n         return beforeFirst ? 0 : 1;\n      * call to <tt>previous</tt>. A return value of -1 indicates that the iterator is currently at\n      * the start.\n      *\n-     * @return 0 or -1 depending on current state. \n+     * @return 0 or -1 depending on current state.\n      */\n     public int previousIndex() {\n         return beforeFirst ? -1 : 0;\n      * This returns the single object if it hasn't been returned yet.\n      *\n      * @return the single object\n-     * @throws NoSuchElementException if the single object has already \n+     * @throws NoSuchElementException if the single object has already\n      *    been returned\n      */\n     public E next() {\n      * This returns the single object if it has been returned.\n      *\n      * @return the single object\n-     * @throws NoSuchElementException if the single object has not already \n+     * @throws NoSuchElementException if the single object has not already\n      *    been returned\n      */\n     public E previous() {\n \n     /**\n      * Remove the object from this iterator.\n-     * @throws IllegalStateException if the <tt>next</tt> or <tt>previous</tt> \n-     *        method has not yet been called, or the <tt>remove</tt> method \n+     * @throws IllegalStateException if the <tt>next</tt> or <tt>previous</tt>\n+     *        method has not yet been called, or the <tt>remove</tt> method\n      *        has already been called after the last call to <tt>next</tt>\n      *        or <tt>previous</tt>.\n      */\n             removed = true;\n         }\n     }\n-    \n+\n     /**\n      * Add always throws {@link UnsupportedOperationException}.\n      *\n     public void add(final E obj) {\n         throw new UnsupportedOperationException(\"add() is not supported by this iterator\");\n     }\n-    \n+\n     /**\n      * Set sets the value of the singleton.\n      *\n      * @param obj  the object to set\n-     * @throws IllegalStateException if <tt>next</tt> has not been called \n+     * @throws IllegalStateException if <tt>next</tt> has not been called\n      *          or the object has been removed\n      */\n     public void set(final E obj) {\n         }\n         this.object = obj;\n     }\n-    \n+\n     /**\n      * Reset the iterator back to the start.\n      */\n         beforeFirst = true;\n         nextCalled = false;\n     }\n-    \n+\n }\n--- a/src/main/java/org/apache/commons/collections4/iterators/TransformIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/TransformIterator.java\n \n import org.apache.commons.collections4.Transformer;\n \n-/** \n+/**\n  * Decorates an iterator such that each element returned is transformed.\n  *\n  * @since 1.0\n     //-----------------------------------------------------------------------\n     /**\n      * Constructs a new <code>TransformIterator</code> that will not function\n-     * until the {@link #setIterator(Iterator) setIterator} and \n+     * until the {@link #setIterator(Iterator) setIterator} and\n      * {@link #setTransformer(Transformer)} methods are invoked.\n      */\n     public TransformIterator() {\n      * Gets the next object from the iteration, transforming it using the\n      * current transformer. If the transformer is null, no transformation\n      * occurs and the object from the iterator is returned directly.\n-     * \n+     *\n      * @return the next object\n      * @throws java.util.NoSuchElementException if there are no more elements\n      */\n     }\n \n     //-----------------------------------------------------------------------\n-    /** \n+    /**\n      * Gets the iterator this iterator is using.\n-     * \n+     *\n      * @return the iterator.\n      */\n     public Iterator<? extends I> getIterator() {\n         return iterator;\n     }\n \n-    /** \n+    /**\n      * Sets the iterator for this iterator to use.\n      * If iteration has started, this effectively resets the iterator.\n-     * \n+     *\n      * @param iterator  the iterator to use\n      */\n     public void setIterator(final Iterator<? extends I> iterator) {\n     }\n \n     //-----------------------------------------------------------------------\n-    /** \n+    /**\n      * Gets the transformer this iterator is using.\n-     * \n+     *\n      * @return the transformer.\n      */\n     public Transformer<? super I, ? extends O> getTransformer() {\n         return transformer;\n     }\n \n-    /** \n+    /**\n      * Sets the transformer this the iterator to use.\n      * A null transformer is a no-op transformer.\n-     * \n+     *\n      * @param transformer  the transformer to use\n      */\n     public void setTransformer(final Transformer<? super I, ? extends O> transformer) {\n--- a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java\n \n import org.apache.commons.collections4.Unmodifiable;\n \n-/** \n+/**\n  * Decorates an iterator such that it cannot be modified.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.\n  *\n  * @since 3.0\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java\n \n import org.apache.commons.collections4.Unmodifiable;\n \n-/** \n+/**\n  * Decorates a list iterator such that it cannot be modified.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.\n  *\n  * @since 3.0\n  * @version $Id$\n         }\n         return new UnmodifiableListIterator<E>(iterator);\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor.\n--- a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java\n import org.apache.commons.collections4.MapIterator;\n import org.apache.commons.collections4.Unmodifiable;\n \n-/** \n+/**\n  * Decorates a map iterator such that it cannot be modified.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.\n  *\n  * @since 3.0\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java\n /**\n  * Decorates an ordered map iterator such that it cannot be modified.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.\n  *\n  * @since 3.0\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/collections4/iterators/package-info.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/package-info.java\n  * This package contains implementations of the\n  * {@link java.util.Iterator Iterator} interface.\n  * <p>\n- * You may also consider using \n+ * You may also consider using\n  * {@link org.apache.commons.collections4.IteratorUtils IteratorUtils},\n  * which is a single class that uses static methods to construct instances\n  * of the classes in this package.", "timestamp": 1367352088, "metainfo": ""}