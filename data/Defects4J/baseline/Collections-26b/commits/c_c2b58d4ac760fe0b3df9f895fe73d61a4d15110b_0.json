{"sha": "c2b58d4ac760fe0b3df9f895fe73d61a4d15110b", "log": "[COLLECTIONS-429] Add CollectionUtils.containsAll method with guaranteed runtime complexity regardless of used Collection.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n     }\n \n     /**\n+     * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n+     * in {@code coll1}.\n+     * <p>\n+     * In other words, this method returns <code>true</code> iff the\n+     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n+     * {@code coll2}. In case {@code coll2} is empty, {@code true} will be returned.\n+     * <p>\n+     * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n+     * with a guaranteed runtime complexity of {@code O(n)}. Depending on the type of\n+     * {@link Collection} provided, this method will be much faster than calling\n+     * {@link Collection#containsAll(Collection)} instead.\n+     *\n+     * @param coll1  the first collection, must not be null\n+     * @param coll2  the second collection, must not be null\n+     * @return <code>true</code> iff the intersection of the collections has the same cardinality\n+     *   of the second collection\n+     * @since 4.0\n+     * @see #intersection\n+     */\n+    public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n+        if (coll2.isEmpty()) {\n+            return true;\n+        } else {\n+            Collection<Object> result = CollectionUtils.<Object>intersection(coll1, coll2);\n+            return result.size() == coll2.size();\n+        }\n+    }\n+    \n+    /**\n      * Returns <code>true</code> iff at least one element is in both collections.\n      * <p>\n      * In other words, this method returns <code>true</code> iff the\n      * {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.\n      *\n      * @param coll1  the first collection, must not be null\n-     * @param coll2  the first collection, must not be null\n+     * @param coll2  the second collection, must not be null\n      * @return <code>true</code> iff the intersection of the collections is non-empty\n      * @since 2.1\n      * @see #intersection\n--- a/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n             final Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n             assertEquals(Integer.valueOf(3), freq.get(null));\n         }\n+    }\n+\n+    @Test\n+    public void containsAll() {\n+        final Collection<String> empty = new ArrayList<String>(0);\n+        final Collection<String> one = new ArrayList<String>(1);\n+        one.add(\"1\");\n+        final Collection<String> two = new ArrayList<String>(1);\n+        two.add(\"2\");\n+        final Collection<String> three = new ArrayList<String>(1);\n+        three.add(\"3\");\n+        final Collection<String> odds = new ArrayList<String>(2);\n+        odds.add(\"1\");\n+        odds.add(\"3\");\n+\n+        assertTrue(\"containsAll({1},{1,3}) should return false.\", !CollectionUtils.containsAll(one, odds));\n+        assertTrue(\"containsAll({1,3},{1}) should return true.\", CollectionUtils.containsAll(odds, one));\n+        assertTrue(\"containsAll({3},{1,3}) should return false.\", !CollectionUtils.containsAll(three, odds));\n+        assertTrue(\"containsAll({1,3},{3}) should return true.\", CollectionUtils.containsAll(odds, three));\n+        assertTrue(\"containsAll({2},{2}) should return true.\", CollectionUtils.containsAll(two, two));\n+        assertTrue(\"containsAll({1,3},{1,3}) should return true.\", CollectionUtils.containsAll(odds, odds));\n+\n+        assertTrue(\"containsAll({2},{1,3}) should return false.\", !CollectionUtils.containsAll(two, odds));\n+        assertTrue(\"containsAll({1,3},{2}) should return false.\", !CollectionUtils.containsAll(odds, two));\n+        assertTrue(\"containsAll({1},{3}) should return false.\", !CollectionUtils.containsAll(one, three));\n+        assertTrue(\"containsAll({3},{1}) should return false.\", !CollectionUtils.containsAll(three, one));\n+        assertTrue(\"containsAll({1,3},{}) should return true.\", CollectionUtils.containsAll(odds, empty));\n+        assertTrue(\"containsAll({},{1,3}) should return false.\", !CollectionUtils.containsAll(empty, odds));\n+        assertTrue(\"containsAll({},{}) should return true.\", CollectionUtils.containsAll(empty, empty));\n     }\n \n     @Test", "timestamp": 1359554102, "metainfo": ""}