{"sha": "c4306bc80df304af28caab135d13a74f9f76dc6c", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r814050 | sebb | 2009-09-11 15:01:25 -0700 (Fri, 11 Sep 2009) | 1 line          Some minor Javadoc fixes     ------------------------------------------------------------------------     r643795 | skestle | 2008-04-02 01:49:57 -0700 (Wed, 02 Apr 2008) | 5 lines          Generified EqualPredicate and created individual test class moved from TestPredicateUtils          Added assertFalse() and assertTrue to BasicPredicateTestBase with (Predicate, Object) parameters          Issues: COLLECTIONS-243, COLLECTIONS-253, COLLECTIONS-293     ------------------------------------------------------------------------     r643782 | skestle | 2008-04-02 01:00:00 -0700 (Wed, 02 Apr 2008) | 5 lines          Generified NullPredicate and created individual test class moved on TestPredicateUtils          Renamed PredicateTestBase to MockPredicateTestBase to reduce confusion and added BasicPredicateTestBase.          Issues: COLLECTIONS-243, COLLECTIONS-253, COLLECTIONS-293     ------------------------------------------------------------------------     r643606 | skestle | 2008-04-01 14:52:12 -0700 (Tue, 01 Apr 2008) | 1 line          Fixed (another) compilation error in PredicateUtils and added method deprecations for new call-through static constructors.     ------------------------------------------------------------------------     r643593 | skestle | 2008-04-01 14:39:01 -0700 (Tue, 01 Apr 2008) | 1 line          Fixed compilation error in PredicateUtils     ------------------------------------------------------------------------     r641231 | skestle | 2008-03-26 02:58:51 -0700 (Wed, 26 Mar 2008) | 1 line          Started incorporating Edwin's patch for COLLECTIONS-253, in preparation for COLLECTIONS-290.     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n     // Simple predicates\n     //-----------------------------------------------------------------------------\n \n-    /** \n+    /**\n      * Gets a Predicate that always throws an exception.\n      * This could be useful during testing as a placeholder.\n      *\n      * @see org.apache.commons.collections.functors.ExceptionPredicate\n-     * \n-     * @return the predicate\n-     */\n-    public static Predicate exceptionPredicate() {\n-        return ExceptionPredicate.INSTANCE;\n+     *\n+     * @return the predicate\n+     */\n+    public static <T> Predicate<T> exceptionPredicate() {\n+        return ExceptionPredicate.<T>getInstance();\n     }\n \n     /**\n      * Gets a Predicate that always returns true.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.TruePredicate\n-     * \n-     * @return the predicate\n-     */\n-    public static Predicate truePredicate() {\n-        return TruePredicate.INSTANCE;\n+     *\n+     * @return the predicate\n+     * @deprecated use {@link TruePredicate#truePredicate()} instead.\n+     */\n+    @Deprecated\n+    public static <T> Predicate<T> truePredicate() {\n+        return TruePredicate.truePredicate();\n     }\n \n     /**\n      * Gets a Predicate that always returns false.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.FalsePredicate\n-     * \n-     * @return the predicate\n-     */\n-    public static Predicate falsePredicate() {\n-        return FalsePredicate.INSTANCE;\n+     *\n+     * @return the predicate\n+     * @deprecated use {@link FalsePredicate#()} instead.\n+     */\n+    public static <T> Predicate<T> falsePredicate() {\n+        return FalsePredicate.<T>getInstance();\n     }\n \n     /**\n      * Gets a Predicate that checks if the input object passed in is null.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.NullPredicate\n-     * \n-     * @return the predicate\n-     */\n-    public static Predicate nullPredicate() {\n-        return NullPredicate.INSTANCE;\n+     *\n+     * @return the predicate\n+     * @deprecated use {@link NullPredicate#nullPredicate()} instead\n+     */\n+    @Deprecated\n+    public static <T> Predicate<T> nullPredicate() {\n+        return NullPredicate.nullPredicate();\n     }\n \n     /**\n      * Gets a Predicate that checks if the input object passed in is not null.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.NotNullPredicate\n-     * \n-     * @return the predicate\n-     */\n-    public static Predicate notNullPredicate() {\n-        return NotNullPredicate.INSTANCE;\n+     *\n+     * @return the predicate\n+     */\n+    public static <T> Predicate<T> notNullPredicate() {\n+        return NotNullPredicate.<T>getInstance();\n     }\n \n     /**\n      * Creates a Predicate that checks if the input object is equal to the\n      * specified object using equals().\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.EqualPredicate\n-     * \n+     *\n      * @param value  the value to compare against\n      * @return the predicate\n-     */\n-    public static Predicate equalPredicate(Object value) {\n-        return EqualPredicate.getInstance(value);\n+     * @deprecated use {@link EqualPredicate#equalPredicate(Object)} instead.\n+     */\n+    @Deprecated\n+    public static <T> Predicate<T> equalPredicate(T value) {\n+        return EqualPredicate.equalPredicate(value);\n     }\n \n     /**\n      * Creates a Predicate that checks if the input object is equal to the\n      * specified object by identity.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.IdentityPredicate\n-     * \n+     *\n      * @param value  the value to compare against\n      * @return the predicate\n      */\n-    public static Predicate identityPredicate(Object value) {\n-        return IdentityPredicate.getInstance(value);\n-    }\n-    \n+    public static <T> Predicate<T> identityPredicate(T value) {\n+        return IdentityPredicate.<T>getInstance(value);\n+    }\n+\n     /**\n      * Creates a Predicate that checks if the object passed in is of\n      * a particular type, using instanceof. A <code>null</code> input\n      * object will return <code>false</code>.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.InstanceofPredicate\n-     * \n+     *\n      * @param type  the type to check for, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the class is null\n      */\n-    public static Predicate instanceofPredicate(Class type) {\n+    public static Predicate<Object> instanceofPredicate(Class<?> type) {\n         return InstanceofPredicate.getInstance(type);\n     }\n \n     /**\n      * Creates a Predicate that returns true the first time an object is\n-     * encountered, and false if the same object is received \n+     * encountered, and false if the same object is received\n      * again. The comparison is by equals(). A <code>null</code> input object\n      * is accepted and will return true the first time, and false subsequently\n      * as well.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.UniquePredicate\n-     * \n-     * @return the predicate\n-     */\n-    public static Predicate uniquePredicate() {\n+     *\n+     * @return the predicate\n+     */\n+    public static <T> Predicate<T> uniquePredicate() {\n         // must return new instance each time\n-        return UniquePredicate.getInstance();\n+        return UniquePredicate.<T>getInstance();\n     }\n \n     /**\n      * Creates a Predicate that invokes a method on the input object.\n      * The method must return either a boolean or a non-null Boolean,\n-     * and have no parameters. If the input object is null, a \n+     * and have no parameters. If the input object is null, a\n      * PredicateException is thrown.\n      * <p>\n      * For example, <code>PredicateUtils.invokerPredicate(\"isEmpty\");</code>\n-     * will call the <code>isEmpty</code> method on the input object to \n+     * will call the <code>isEmpty</code> method on the input object to\n      * determine the predicate result.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.InvokerTransformer\n      * @see org.apache.commons.collections.functors.TransformerPredicate\n-     * \n+     *\n      * @param methodName  the method name to call on the input object, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the methodName is null.\n      */\n-    public static Predicate invokerPredicate(String methodName){\n+    public static <T> Predicate<T> invokerPredicate(String methodName){\n         // reuse transformer as it has caching - this is lazy really, should have inner class here\n-        return asPredicate(InvokerTransformer.getInstance(methodName));\n+        return asPredicate(InvokerTransformer.<Object, Boolean>getInstance(methodName));\n     }\n \n     /**\n      * Creates a Predicate that invokes a method on the input object.\n      * The method must return either a boolean or a non-null Boolean,\n-     * and have no parameters. If the input object is null, a \n+     * and have no parameters. If the input object is null, a\n      * PredicateException is thrown.\n      * <p>\n      * For example, <code>PredicateUtils.invokerPredicate(\"isEmpty\");</code>\n-     * will call the <code>isEmpty</code> method on the input object to \n+     * will call the <code>isEmpty</code> method on the input object to\n      * determine the predicate result.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.InvokerTransformer\n      * @see org.apache.commons.collections.functors.TransformerPredicate\n-     * \n+     *\n      * @param methodName  the method name to call on the input object, may not be null\n      * @param paramTypes  the parameter types\n      * @param args  the arguments\n      * @throws IllegalArgumentException if the method name is null\n      * @throws IllegalArgumentException if the paramTypes and args don't match\n      */\n-    public static Predicate invokerPredicate(String methodName, Class[] paramTypes, Object[] args){\n+    public static <T> Predicate<T> invokerPredicate(String methodName, Class<?>[] paramTypes, Object[] args){\n         // reuse transformer as it has caching - this is lazy really, should have inner class here\n-        return asPredicate(InvokerTransformer.getInstance(methodName, paramTypes, args));\n+        return asPredicate(InvokerTransformer.<Object, Boolean>getInstance(methodName, paramTypes, args));\n     }\n \n     // Boolean combinations\n     /**\n      * Create a new Predicate that returns true only if both of the specified\n      * predicates are true.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.AndPredicate\n-     * \n+     *\n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>and</code> predicate\n      * @throws IllegalArgumentException if either predicate is null\n      */\n-    public static Predicate andPredicate(Predicate predicate1, Predicate predicate2) {\n-        return AndPredicate.getInstance(predicate1, predicate2);\n+    public static <T> Predicate<T> andPredicate(Predicate<? super T> predicate1, Predicate<? super T> predicate2) {\n+        return AndPredicate.<T>getInstance(predicate1, predicate2);\n     }\n \n     /**\n      * Create a new Predicate that returns true only if all of the specified\n      * predicates are true.\n      * If the array of predicates is empty, then this predicate returns true.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.AllPredicate\n-     * \n+     *\n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n-     */\n-    public static Predicate allPredicate(Predicate[] predicates) {\n-        return AllPredicate.getInstance(predicates);\n+     * @deprecated use {@link AllPredicate#allPredicate(Predicate...)} instead.\n+     */\n+    @Deprecated\n+    public static <T> Predicate<T> allPredicate(Predicate<? super T>[] predicates) {\n+        return AllPredicate.allPredicate(predicates);\n     }\n \n     /**\n      * Create a new Predicate that returns true only if all of the specified\n      * predicates are true. The predicates are checked in iterator order.\n      * If the collection of predicates is empty, then this predicate returns true.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.AllPredicate\n-     * \n+     *\n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      */\n-    public static Predicate allPredicate(Collection predicates) {\n-        return AllPredicate.getInstance(predicates);\n+    public static <T> Predicate<T> allPredicate(Collection<? extends Predicate<T>> predicates) {\n+        return AllPredicate.allPredicate(predicates);\n     }\n \n     /**\n      * Create a new Predicate that returns true if either of the specified\n      * predicates are true.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.OrPredicate\n-     * \n+     *\n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>or</code> predicate\n      * @throws IllegalArgumentException if either predicate is null\n      */\n-    public static Predicate orPredicate(Predicate predicate1, Predicate predicate2) {\n-        return OrPredicate.getInstance(predicate1, predicate2);\n+    public static <T> Predicate<T> orPredicate(Predicate<? super T> predicate1, Predicate<? super T> predicate2) {\n+        return OrPredicate.<T>getInstance(predicate1, predicate2);\n     }\n \n     /**\n      * Create a new Predicate that returns true if any of the specified\n      * predicates are true.\n      * If the array of predicates is empty, then this predicate returns false.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.AnyPredicate\n-     * \n+     *\n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n-    public static Predicate anyPredicate(Predicate[] predicates) {\n+    public static <T> Predicate<T> anyPredicate(Predicate<? super T>[] predicates) {\n         return AnyPredicate.getInstance(predicates);\n     }\n \n      * Create a new Predicate that returns true if any of the specified\n      * predicates are true. The predicates are checked in iterator order.\n      * If the collection of predicates is empty, then this predicate returns false.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.AnyPredicate\n-     * \n+     *\n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      */\n-    public static Predicate anyPredicate(Collection predicates) {\n+    public static <T> Predicate<T> anyPredicate(Collection<? extends Predicate<T>> predicates) {\n         return AnyPredicate.getInstance(predicates);\n     }\n \n     /**\n      * Create a new Predicate that returns true if one, but not both, of the\n-     * specified predicates are true.\n-     * \n+     * specified predicates are true. XOR\n+     *\n      * @see org.apache.commons.collections.functors.OnePredicate\n-     * \n+     *\n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>either</code> predicate\n      * @throws IllegalArgumentException if either predicate is null\n      */\n-    public static Predicate eitherPredicate(Predicate predicate1, Predicate predicate2) {\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Predicate<T> eitherPredicate(Predicate<? super T> predicate1, Predicate<? super T> predicate2) {\n         return onePredicate(new Predicate[] { predicate1, predicate2 });\n     }\n \n      * Create a new Predicate that returns true if only one of the specified\n      * predicates are true.\n      * If the array of predicates is empty, then this predicate returns false.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.OnePredicate\n-     * \n+     *\n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n-    public static Predicate onePredicate(Predicate[] predicates) {\n+    public static <T> Predicate<T> onePredicate(Predicate<? super T>[] predicates) {\n         return OnePredicate.getInstance(predicates);\n     }\n \n      * Create a new Predicate that returns true if only one of the specified\n      * predicates are true. The predicates are checked in iterator order.\n      * If the collection of predicates is empty, then this predicate returns false.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.OnePredicate\n-     * \n+     *\n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      */\n-    public static Predicate onePredicate(Collection predicates) {\n+    public static <T> Predicate<T> onePredicate(Collection<Predicate<T>> predicates) {\n         return OnePredicate.getInstance(predicates);\n     }\n \n     /**\n-     * Create a new Predicate that returns true if neither of the specified \n-     * predicates are true.\n-     * \n+     * Create a new Predicate that returns true if neither of the specified\n+     * predicates are true.\n+     *\n      * @see org.apache.commons.collections.functors.NonePredicate\n-     * \n+     *\n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>neither</code> predicate\n      * @throws IllegalArgumentException if either predicate is null\n      */\n-    public static Predicate neitherPredicate(Predicate predicate1, Predicate predicate2) {\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Predicate<T> neitherPredicate(Predicate<? super T> predicate1, Predicate<? super T> predicate2) {\n         return nonePredicate(new Predicate[] { predicate1, predicate2 });\n     }\n \n      * Create a new Predicate that returns true if none of the specified\n      * predicates are true.\n      * If the array of predicates is empty, then this predicate returns true.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.NonePredicate\n-     * \n+     *\n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>none</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n      */\n-    public static Predicate nonePredicate(Predicate[] predicates) {\n+    public static <T> Predicate<T> nonePredicate(Predicate<? super T>[] predicates) {\n         return NonePredicate.getInstance(predicates);\n     }\n \n      * Create a new Predicate that returns true if none of the specified\n      * predicates are true. The predicates are checked in iterator order.\n      * If the collection of predicates is empty, then this predicate returns true.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.NonePredicate\n-     * \n+     *\n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>none</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * @throws IllegalArgumentException if any predicate in the collection is null\n      */\n-    public static Predicate nonePredicate(Collection predicates) {\n+    public static <T> Predicate<T> nonePredicate(Collection<? extends Predicate<T>> predicates) {\n         return NonePredicate.getInstance(predicates);\n     }\n \n     /**\n      * Create a new Predicate that returns true if the specified predicate\n      * returns false and vice versa.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.NotPredicate\n-     * \n+     *\n      * @param predicate  the predicate to not\n      * @return the <code>not</code> predicate\n      * @throws IllegalArgumentException if the predicate is null\n      */\n-    public static Predicate notPredicate(Predicate predicate) {\n+    public static <T> Predicate<T> notPredicate(Predicate<? super T> predicate) {\n         return NotPredicate.getInstance(predicate);\n     }\n \n      * Create a new Predicate that wraps a Transformer. The Transformer must\n      * return either Boolean.TRUE or Boolean.FALSE otherwise a PredicateException\n      * will be thrown.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.TransformerPredicate\n-     * \n+     *\n      * @param transformer  the transformer to wrap, may not be null\n      * @return the transformer wrapping predicate\n      * @throws IllegalArgumentException if the transformer is null\n      */\n-    public static Predicate asPredicate(Transformer transformer) {\n+    public static <T> Predicate<T> asPredicate(Transformer<? super T, Boolean> transformer) {\n         return TransformerPredicate.getInstance(transformer);\n     }\n \n     //-----------------------------------------------------------------------------\n \n     /**\n-     * Gets a Predicate that throws an exception if the input object is null, \n-     * otherwise it calls the specified Predicate. This allows null handling \n+     * Gets a Predicate that throws an exception if the input object is null,\n+     * otherwise it calls the specified Predicate. This allows null handling\n      * behaviour to be added to Predicates that don't support nulls.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.NullIsExceptionPredicate\n-     * \n+     *\n      * @param predicate  the predicate to wrap, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null.\n      */\n-    public static Predicate nullIsExceptionPredicate(Predicate predicate){\n+    public static <T> Predicate<T> nullIsExceptionPredicate(Predicate<? super T> predicate){\n         return NullIsExceptionPredicate.getInstance(predicate);\n     }\n \n      * Gets a Predicate that returns false if the input object is null, otherwise\n      * it calls the specified Predicate. This allows null handling behaviour to\n      * be added to Predicates that don't support nulls.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.NullIsFalsePredicate\n-     * \n+     *\n      * @param predicate  the predicate to wrap, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null.\n      */\n-    public static Predicate nullIsFalsePredicate(Predicate predicate){\n+    public static <T> Predicate<T> nullIsFalsePredicate(Predicate<? super T> predicate){\n         return NullIsFalsePredicate.getInstance(predicate);\n     }\n \n      * Gets a Predicate that returns true if the input object is null, otherwise\n      * it calls the specified Predicate. This allows null handling behaviour to\n      * be added to Predicates that don't support nulls.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.NullIsTruePredicate\n-     * \n+     *\n      * @param predicate  the predicate to wrap, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null.\n      */\n-    public static Predicate nullIsTruePredicate(Predicate predicate){\n+    public static <T> Predicate<T> nullIsTruePredicate(Predicate<? super T> predicate){\n         return NullIsTruePredicate.getInstance(predicate);\n     }\n \n     /**\n      * Creates a predicate that transforms the input object before passing it\n      * to the predicate.\n-     * \n+     *\n      * @see org.apache.commons.collections.functors.TransformedPredicate\n-     * \n+     *\n      * @param transformer  the transformer to call first\n      * @param predicate  the predicate to call with the result of the transform\n      * @return the predicate\n      * @throws IllegalArgumentException if the transformer or the predicate is null\n      * @since Commons Collections 3.1\n      */\n-    public static Predicate transformedPredicate(Transformer transformer, Predicate predicate) {\n-        return TransformedPredicate.getInstance(transformer, predicate);\n+    public static <T> Predicate<T> transformedPredicate(\n+            Transformer<? super T, ? extends T> transformer, Predicate<? super T> predicate) {\n+        return TransformedPredicate.<T>getInstance(transformer, predicate);\n     }\n \n }", "timestamp": 1252994190, "metainfo": ""}