{"sha": "fa44d78ebc35d1b4f0ffc64bb36d7eefaab3d032", "log": "Updated javadoc Updated copyright year   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ProxyMap.java\n+++ b/src/java/org/apache/commons/collections/ProxyMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ProxyMap.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/15 20:04:31 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ProxyMap.java,v 1.6 2003/04/26 11:15:34 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * build to extensions for its wrapped <code>Map</code> object which\n  * would be unavailable or inconvenient via sub-classing (but usable\n  * via composition).</p>\n+ * \n+ * <p>This implementation does not perform any special processing with\n+ * {@link #entrySet()}, {@link #keySet()} or {@link #values()}. Instead\n+ * it simply returns the set/collection from the wrapped map. This may be\n+ * undesirable, for example if you are trying to write a validating\n+ * implementation it would provide a loophole around the validation. But,\n+ * you might want that loophole, so this class is kept simple.</p>\n  *\n  * <p>An example use case is where the wrapped <code>Map</code> needs\n  * synchronization (to make it thread-safe), but the <code>Map</code>\n  * returned by <code>Collections.synchronizedMap(map)</code>\n  * hides part of <code>map</code>'s public interface.</p>\n  *\n- * @since 2.0\n+ * @since Commons Collections 2.0\n+ * @version $Revision: 1.6 $ $Date: 2003/04/26 11:15:34 $\n+ * \n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n+ * @author Stephen Colebourne\n  */\n public abstract class ProxyMap implements Map {\n     \n     /**\n-     * The <code>Map</code> used for default implementations.\n+     * The <code>Map</code> to delegate to.\n      */\n     protected Map map;\n \n     /**\n-     * Creates a new instance acting as a representative for the\n-     * specified <code>Map</code>.\n+     * Constructor that uses the specified map to delegate to.\n+     * <p>\n+     * Note that the map is used for delegation, and is not copied. This is\n+     * different to the normal use of a <code>Map</code> parameter in\n+     * collections constructors.\n      *\n-     * @param map The <code>Map</code> to whose operations to wrap.\n+     * @param map  the <code>Map</code> to delegate to\n      */\n     public ProxyMap(Map map) {\n         this.map = map;\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#clear()} method.\n+     * Invokes the underlying {@link Map#clear()} method.\n      */\n     public void clear() {\n         map.clear();\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#containsKey(Object)} method.\n+     * Invokes the underlying {@link Map#containsKey(Object)} method.\n      */\n     public boolean containsKey(Object key) {\n         return map.containsKey(key);\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#containsValue(Object)} method.\n+     * Invokes the underlying {@link Map#containsValue(Object)} method.\n      */\n     public boolean containsValue(Object value) {\n         return map.containsValue(value);\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#entrySet()} method.\n+     * Invokes the underlying {@link Map#entrySet()} method.\n      */\n     public Set entrySet() {\n         return map.entrySet();\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#equals(Object)} method.\n+     * Invokes the underlying {@link Map#equals(Object)} method.\n      */\n     public boolean equals(Object m) {\n         return map.equals(m);\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#get(Object)} method.\n+     * Invokes the underlying {@link Map#get(Object)} method.\n      */\n     public Object get(Object key) {\n         return map.get(key);\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#hashCode()} method.\n+     * Invokes the underlying {@link Map#hashCode()} method.\n      */\n     public int hashCode() {\n         return map.hashCode();\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#isEmpty()} method.\n+     * Invokes the underlying {@link Map#isEmpty()} method.\n      */\n     public boolean isEmpty() {\n         return map.isEmpty();\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#keySet()} method.\n+     * Invokes the underlying {@link Map#keySet()} method.\n      */\n     public Set keySet() {\n         return map.keySet();\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#put(Object,Object)} method.\n+     * Invokes the underlying {@link Map#put(Object,Object)} method.\n      */\n     public Object put(Object key, Object value) {\n         return map.put(key, value);\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#putAll(Map)} method.\n+     * Invokes the underlying {@link Map#putAll(Map)} method.\n      */\n     public void putAll(Map t) {\n         map.putAll(t);\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#remove(Object)} method.\n+     * Invokes the underlying {@link Map#remove(Object)} method.\n      */\n     public Object remove(Object key) {\n         return map.remove(key);\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#size()} method.\n+     * Invokes the underlying {@link Map#size()} method.\n      */\n     public int size() {\n         return map.size();\n     }\n \n     /**\n-     *  Invokes the underlying {@link Map#values()} method.\n+     * Invokes the underlying {@link Map#values()} method.\n      */\n     public Collection values() {\n         return map.values();\n     }\n    \n }\n-\n-", "timestamp": 1051355734, "metainfo": ""}