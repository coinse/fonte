{"sha": "32080b32a4eed0719b79f4be332ff5a55468ab7f", "log": "Start of ExtendedProperties tests, and added to the TestAll class. PR: Obtained from: Submitted by: Reviewed by:   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.6 2001/04/24 18:48:38 rwaldhoff Exp $\n- * $Revision: 1.6 $\n- * $Date: 2001/04/24 18:48:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.7 2001/05/04 02:23:44 geirm Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2001/05/04 02:23:44 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.6 2001/04/24 18:48:38 rwaldhoff Exp $\n+ * @version $Id: TestAll.java,v 1.7 2001/05/04 02:23:44 geirm Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestHashMap.suite());\n         suite.addTest(TestTreeMap.suite());\n         suite.addTest(TestCollectionUtils.suite());\n+        suite.addTest(TestExtendedProperties.suite());\n         return suite;\n     }\n \n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestExtendedProperties.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestExtendedProperties.java,v 1.1 2001/05/04 02:23:44 geirm Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/05/04 02:23:44 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ *   Tests some basic functions of the ExtendedProperties\n+ *   class\n+ * \n+ *   @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n+ *   @version $Id: TestExtendedProperties.java,v 1.1 2001/05/04 02:23:44 geirm Exp $\n+ */\n+public class TestExtendedProperties extends TestCase\n+{\n+    protected ExtendedProperties eprop = new ExtendedProperties();\n+\n+    public TestExtendedProperties(String testName)\n+    {\n+        super(testName);\n+    }\n+\n+    public static Test suite()\n+    {\n+        return new TestSuite( TestExtendedProperties.class );\n+    }\n+\n+    public static void main(String args[])\n+    {\n+        String[] testCaseName = { TestExtendedProperties.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public void testRetrieve()\n+    {\n+        /*\n+         * should be emptry and return null\n+         */\n+\n+        assertEquals(\"This returns null\", eprop.getProperty(\"foo\"), null);\n+\n+        /*\n+         *  add a real value, and get it two different ways\n+         */\n+        eprop.setProperty(\"number\", \"1\");\n+        assertEquals(\"This returns '1'\", eprop.getProperty(\"number\"), \"1\");\n+        assertEquals(\"This returns '1'\", eprop.getString(\"number\"), \"1\");\n+\n+        /*\n+         * now add another and get a Vector\n+         */\n+        eprop.addProperty(\"number\", \"2\");\n+        assert(\"This returns array\", ( eprop.getVector(\"number\") instanceof java.util.Vector ) );\n+        \n+        /*\n+         *  now test dan's new fix where we get the first scalar \n+         *  when we access a vector valued\n+         *  property\n+         */\n+        assert(\"This returns scalar\", ( eprop.getString(\"number\") instanceof String ) );\n+    }\n+}", "timestamp": 988943024, "metainfo": ""}