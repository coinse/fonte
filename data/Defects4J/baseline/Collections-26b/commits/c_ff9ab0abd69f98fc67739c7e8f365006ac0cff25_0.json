{"sha": "ff9ab0abd69f98fc67739c7e8f365006ac0cff25", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r751865 | mbenson | 2009-03-09 15:06:27 -0700 (Mon, 09 Mar 2009) | 1 line          javadoc + extension point     ------------------------------------------------------------------------     r740150 | mbenson | 2009-02-02 15:24:00 -0800 (Mon, 02 Feb 2009) | 1 line          make all [collections] maps implement IterableMap     ------------------------------------------------------------------------   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/EntrySetToMapIteratorAdapter.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.MapIterator;\n+import org.apache.commons.collections.ResettableIterator;\n+\n+/**\n+ * Adapts a Map entrySet to the MapIterator interface.\n+ *\n+ * @since Commons Collections 5\n+ * @TODO fix version\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Matt Benson\n+ */\n+public class EntrySetToMapIteratorAdapter<K, V> implements MapIterator<K, V>, ResettableIterator<K> {\n+    /** The adapted Map entry Set. */\n+    protected Set<Map.Entry<K, V>> entrySet;\n+\n+    /** The resettable iterator in use. */\n+    protected transient Iterator<Map.Entry<K, V>> iterator;\n+\n+    /** The currently positioned Map entry. */\n+    protected transient Map.Entry<K, V> entry;\n+\n+    /**\n+     * Create a new EntrySetToMapIteratorAdapter.\n+     */\n+    public EntrySetToMapIteratorAdapter(Set<Map.Entry<K, V>> entrySet) {\n+        this.entrySet = entrySet;\n+        reset();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public K getKey() {\n+        return current().getKey();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public V getValue() {\n+        return current().getValue();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public V setValue(V value) {\n+        return current().setValue(value);\n+    };\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public boolean hasNext() {\n+        return iterator.hasNext();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public K next() {\n+        entry = iterator.next();\n+        return getKey();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public synchronized void reset() {\n+        iterator = entrySet.iterator();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public void remove() {\n+        iterator.remove();\n+        entry = null;\n+    }\n+\n+    /**\n+     * Get the currently active entry.\n+     * @return Map.Entry<K, V>\n+     */\n+    protected synchronized Map.Entry<K, V> current() { \n+        if (entry == null) {\n+            throw new IllegalStateException();\n+        }\n+        return entry;\n+    }\n+}", "timestamp": 1252994163, "metainfo": ""}