{"sha": "4b9c68b55a6f82942d32c5149fa0363b8b6b39fc", "log": "Reordered tests.  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java\n import java.util.List;\n import java.util.ListIterator;\n import java.util.Set;\n-\n-import org.apache.commons.collections4.list.SetUniqueList;\n \n /**\n  * JUnit tests.\n         assertTrue(s.contains(c));\n     }\n \n-    //-----------------------------------------------------------------------\n-    @Override\n-    public String getCompatibilityVersion() {\n-        return \"4\";\n-    }\n-\n-//    public void testCreate() throws Exception {\n-//        resetEmpty();\n-//        writeExternalFormToDisk((java.io.Serializable) getCollection(), \"src/test/resources/data/test/SetUniqueList.emptyCollection.version4.obj\");\n-//        resetFull();\n-//        writeExternalFormToDisk((java.io.Serializable) getCollection(), \"src/test/resources/data/test/SetUniqueList.fullCollection.version4.obj\");\n-//    }\n-\n-    // TODO: Generics\n     public void testCollections304() {\n         final List<String> list = new LinkedList<String>();\n         final SetUniqueList<String> decoratedList = SetUniqueList.setUniqueList(list);\n         decoratedList.add(s1);\n         decoratedList.add(s2);\n         decoratedList.add(s3);\n-\n         assertEquals(3, decoratedList.size());\n \n         decoratedList.set(1, s4);\n-\n         assertEquals(3, decoratedList.size());\n \n         decoratedList.add(1, s4);\n-\n         assertEquals(3, decoratedList.size());\n \n         decoratedList.add(1, s2);\n-\n         assertEquals(4, decoratedList.size());\n     }\n \n     }\n \n     @SuppressWarnings(\"unchecked\")\n-\tpublic void testRetainAll() {\n-    \tfinal List<E> list = new ArrayList<E>(10);\n-    \tfinal SetUniqueList<E> uniqueList = SetUniqueList.setUniqueList(list);\n-    \tfor (int i = 0; i < 10; ++i) {\n-    \t\tuniqueList.add((E)Integer.valueOf(i));\n-    \t}\n-    \t\n-    \tfinal Collection<E> retained = new ArrayList<E>(5);\n-    \tfor (int i = 0; i < 5; ++i) {\n-    \t\tretained.add((E)Integer.valueOf(i * 2));\n-    \t}\n-    \t\n-    \tassertTrue(uniqueList.retainAll(retained));\n-    \tassertEquals(5, uniqueList.size());\n-    \tassertTrue(uniqueList.contains(Integer.valueOf(0)));\n-    \tassertTrue(uniqueList.contains(Integer.valueOf(2)));\n-    \tassertTrue(uniqueList.contains(Integer.valueOf(4)));\n-    \tassertTrue(uniqueList.contains(Integer.valueOf(6)));\n-    \tassertTrue(uniqueList.contains(Integer.valueOf(8)));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-\tpublic void testRetainAllWithInitialList() {\n-    \t// initialized with empty list\n-    \tfinal List<E> list = new ArrayList<E>(10);\n-    \tfor (int i = 0; i < 5; ++i) {\n-    \t\tlist.add((E)Integer.valueOf(i));\n-    \t}\n-    \tfinal SetUniqueList<E> uniqueList = SetUniqueList.setUniqueList(list);\n-    \tfor (int i = 5; i < 10; ++i) {\n-    \t\tuniqueList.add((E)Integer.valueOf(i));\n-    \t}\n-    \t\n-    \tfinal Collection<E> retained = new ArrayList<E>(5);\n-    \tfor (int i = 0; i < 5; ++i) {\n-    \t\tretained.add((E)Integer.valueOf(i * 2));\n-    \t}\n-    \t\n-    \tassertTrue(uniqueList.retainAll(retained));\n-    \tassertEquals(5, uniqueList.size());\n-    \tassertTrue(uniqueList.contains(Integer.valueOf(0)));\n-    \tassertTrue(uniqueList.contains(Integer.valueOf(2)));\n-    \tassertTrue(uniqueList.contains(Integer.valueOf(4)));\n-    \tassertTrue(uniqueList.contains(Integer.valueOf(6)));\n-    \tassertTrue(uniqueList.contains(Integer.valueOf(8)));\n+    public void testRetainAll() {\n+        final List<E> list = new ArrayList<E>(10);\n+        final SetUniqueList<E> uniqueList = SetUniqueList.setUniqueList(list);\n+        for (int i = 0; i < 10; ++i) {\n+            uniqueList.add((E)Integer.valueOf(i));\n+        }\n+        \n+        final Collection<E> retained = new ArrayList<E>(5);\n+        for (int i = 0; i < 5; ++i) {\n+            retained.add((E)Integer.valueOf(i * 2));\n+        }\n+        \n+        assertTrue(uniqueList.retainAll(retained));\n+        assertEquals(5, uniqueList.size());\n+        assertTrue(uniqueList.contains(Integer.valueOf(0)));\n+        assertTrue(uniqueList.contains(Integer.valueOf(2)));\n+        assertTrue(uniqueList.contains(Integer.valueOf(4)));\n+        assertTrue(uniqueList.contains(Integer.valueOf(6)));\n+        assertTrue(uniqueList.contains(Integer.valueOf(8)));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRetainAllWithInitialList() {\n+        // initialized with empty list\n+        final List<E> list = new ArrayList<E>(10);\n+        for (int i = 0; i < 5; ++i) {\n+            list.add((E)Integer.valueOf(i));\n+        }\n+        final SetUniqueList<E> uniqueList = SetUniqueList.setUniqueList(list);\n+        for (int i = 5; i < 10; ++i) {\n+            uniqueList.add((E)Integer.valueOf(i));\n+        }\n+        \n+        final Collection<E> retained = new ArrayList<E>(5);\n+        for (int i = 0; i < 5; ++i) {\n+            retained.add((E)Integer.valueOf(i * 2));\n+        }\n+        \n+        assertTrue(uniqueList.retainAll(retained));\n+        assertEquals(5, uniqueList.size());\n+        assertTrue(uniqueList.contains(Integer.valueOf(0)));\n+        assertTrue(uniqueList.contains(Integer.valueOf(2)));\n+        assertTrue(uniqueList.contains(Integer.valueOf(4)));\n+        assertTrue(uniqueList.contains(Integer.valueOf(6)));\n+        assertTrue(uniqueList.contains(Integer.valueOf(8)));\n     }\n     \n     /*\n             super(list, set);\n         }\n     }\n+    \n+    //-----------------------------------------------------------------------\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"4\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) getCollection(), \"src/test/resources/data/test/SetUniqueList.emptyCollection.version4.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) getCollection(), \"src/test/resources/data/test/SetUniqueList.fullCollection.version4.obj\");\n+//    }\n \n }", "timestamp": 1367061786, "metainfo": ""}