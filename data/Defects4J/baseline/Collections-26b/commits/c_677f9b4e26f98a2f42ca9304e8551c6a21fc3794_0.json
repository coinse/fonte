{"sha": "677f9b4e26f98a2f42ca9304e8551c6a21fc3794", "log": "Added missing javadoc, minor checkstyle fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/main/java/org/apache/commons/collections/BagUtils.java\n     /**\n      * An empty unmodifiable sorted bag.\n      */\n-    public static final Bag<Object> EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());\n+    public static final Bag<Object> EMPTY_SORTED_BAG =\n+            UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());\n \n     /**\n      * Instantiation of BagUtils is not intended or required. However, some\n      * \n      * Failure to follow this advice may result in non-deterministic behavior.\n      * \n+     * @param <E> the element type\n      * @param bag the bag to synchronize, must not be null\n      * @return a synchronized bag backed by that bag\n      * @throws IllegalArgumentException if the Bag is null\n      * Returns an unmodifiable view of the given bag. Any modification attempts\n      * to the returned bag will raise an {@link UnsupportedOperationException}.\n      * \n-     * @param bag the bag whose unmodifiable view is to be returned, must not be\n-     * null\n+     * @param <E> the element type\n+     * @param bag the bag whose unmodifiable view is to be returned, must not be null\n      * @return an unmodifiable view of that bag\n      * @throws IllegalArgumentException if the Bag is null\n      */\n      * after invoking this method, as it is a backdoor for adding invalid\n      * objects.\n      * \n+     * @param <E> the element type\n      * @param bag the bag to predicate, must not be null\n      * @param predicate the predicate for the bag, must not be null\n      * @return a predicated bag backed by the given bag\n      * Existing entries in the specified bag will not be transformed.\n      * If you want that behaviour, see {@link TransformedBag#transformedBag(Bag, Transformer)}.\n      * \n+     * @param <E> the element type\n      * @param bag the bag to predicate, must not be null\n      * @param transformer the transformer for the bag, must not be null\n      * @return a transformed bag backed by the given bag\n      * \n      * Failure to follow this advice may result in non-deterministic behavior.\n      * \n+     * @param <E> the element type\n      * @param bag the bag to synchronize, must not be null\n      * @return a synchronized bag backed by that bag\n      * @throws IllegalArgumentException if the SortedBag is null\n      * attempts to the returned bag will raise an\n      * {@link UnsupportedOperationException}.\n      * \n-     * @param bag the bag whose unmodifiable view is to be returned, must not be\n-     * null\n+     * @param <E> the element type\n+     * @param bag the bag whose unmodifiable view is to be returned, must not be null\n      * @return an unmodifiable view of that bag\n      * @throws IllegalArgumentException if the SortedBag is null\n      */\n      * after invoking this method, as it is a backdoor for adding invalid\n      * objects.\n      * \n+     * @param <E> the element type\n      * @param bag the sorted bag to predicate, must not be null\n      * @param predicate the predicate for the bag, must not be null\n      * @return a predicated bag backed by the given bag\n      * as it is a backdoor for adding untransformed objects.\n      * <p>\n      * Existing entries in the specified bag will not be transformed.\n-     * If you want that behaviour, see {@link TransformedSortedBag#transformedSortedBag(SortedBag, Transformer)}.\n-     * \n+     * If you want that behaviour, see\n+     * {@link TransformedSortedBag#transformedSortedBag(SortedBag, Transformer)}.\n+     * \n+     * @param <E> the element type\n      * @param bag the bag to predicate, must not be null\n      * @param transformer the transformer for the bag, must not be null\n      * @return a transformed bag backed by the given bag\n      * @throws IllegalArgumentException if the Bag or Transformer is null\n      */\n-    public static <E> SortedBag<E> transformingSortedBag(SortedBag<E> bag, Transformer<? super E, ? extends E> transformer) {\n+    public static <E> SortedBag<E> transformingSortedBag(SortedBag<E> bag,\n+                                                         Transformer<? super E, ? extends E> transformer) {\n         return TransformedSortedBag.transformingSortedBag(bag, transformer);\n     }\n \n     /**\n      * Get an empty <code>Bag</code>.\n-     * @param <E>\n-     * @return Bag<E>\n+     *\n+     * @param <E> the element type\n+     * @return an empty Bag\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> Bag<E> emptyBag() {\n \n     /**\n      * Get an empty <code>SortedBag</code>.\n-     * @param <E>\n-     * @return SortedBag<E>\n+     *\n+     * @param <E> the element type\n+     * @return an empty sorted Bag\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> SortedBag<E> emptySortedBag() {\n--- a/src/main/java/org/apache/commons/collections/EnumerationUtils.java\n+++ b/src/main/java/org/apache/commons/collections/EnumerationUtils.java\n      * <p>As the enumeration is traversed, an ArrayList of its values is\n      * created. The new list is returned.</p>\n      *\n+     * @param <E> the element type\n      * @param enumeration  the enumeration to traverse, which should not be <code>null</code>.\n+     * @return a list containing all elements of the given enumeration\n      * @throws NullPointerException if the enumeration parameter is <code>null</code>.\n      */\n     public static <E> List<E> toList(Enumeration<E> enumeration) {\n--- a/src/main/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/main/java/org/apache/commons/collections/SetUtils.java\n \n     /**\n      * Get a typed empty unmodifiable Set.\n-     * @param <E>\n-     * @return Set<E>\n+     * @param <E> the element type\n+     * @return an empty Set\n      */\n     public static <E> Set<E> emptySet() {\n         return Collections.<E>emptySet();\n      * An empty unmodifiable sorted set.\n      * This is not provided in the JDK.\n      */\n-    public static final SortedSet<?> EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());\n+    public static final SortedSet<?> EMPTY_SORTED_SET =\n+            UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());\n \n     /**\n      * Get a typed empty unmodifiable sorted set.\n-     * @param <E>\n-     * @return SortedSet<E>\n+     * @param <E> the element type\n+     * @return an empty sorted Set\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> SortedSet<E> emptySortedSet() {\n      * extend AbstractSet. The method takes Collection instances to enable other\n      * collection types to use the Set implementation algorithm.\n      * \n+     * @param <T> the element type\n      * @see java.util.Set#hashCode()\n      * @param set  the set to calculate the hash code for, may be null\n      * @return the hash code\n      * \n      * This method uses the implementation in the decorators subpackage.\n      * \n+     * @param <E> the element type\n      * @param set  the set to synchronize, must not be null\n      * @return a synchronized set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      */\n-    public static <T> Set<T> synchronizedSet(Set<T> set) {\n+    public static <E> Set<E> synchronizedSet(Set<E> set) {\n         return SynchronizedSet.synchronizedSet(set);\n     }\n \n      * <p>\n      * This method uses the implementation in the decorators subpackage.\n      *\n+     * @param <E> the element type\n      * @param set  the set to make unmodifiable, must not be null\n      * @return an unmodifiable set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      * It is important not to use the original set after invoking this method,\n      * as it is a backdoor for adding invalid objects.\n      *\n+     * @param <E> the element type\n      * @param set  the set to predicate, must not be null\n      * @param predicate  the predicate for the set, must not be null\n      * @return a predicated set backed by the given set\n      * @throws IllegalArgumentException  if the Set or Predicate is null\n      */\n-    public static <T> Set<T> predicatedSet(Set<T> set, Predicate<? super T> predicate) {\n+    public static <E> Set<E> predicatedSet(Set<E> set, Predicate<? super E> predicate) {\n         return PredicatedSet.predicatedSet(set, predicate);\n     }\n \n      * Existing entries in the specified set will not be transformed.\n      * If you want that behaviour, see {@link TransformedSet#transformedSet}.\n      *\n+     * @param <E> the element type\n      * @param set  the set to transform, must not be null\n      * @param transformer  the transformer for the set, must not be null\n      * @return a transformed set backed by the given set\n      * If an element is added twice, the order is determined by the first add.\n      * The order is observed through the iterator or toArray.\n      *\n+     * @param <E> the element type\n      * @param set  the set to order, must not be null\n      * @return an ordered set backed by the given set\n      * @throws IllegalArgumentException  if the Set is null\n      * \n      * This method uses the implementation in the decorators subpackage.\n      * \n+     * @param <E> the element type\n      * @param set  the sorted set to synchronize, must not be null\n      * @return a synchronized set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      */\n-    public static <T> SortedSet<T> synchronizedSortedSet(SortedSet<T> set) {\n+    public static <E> SortedSet<E> synchronizedSortedSet(SortedSet<E> set) {\n         return SynchronizedSortedSet.synchronizedSortedSet(set);\n     }\n \n      * <p>\n      * This method uses the implementation in the decorators subpackage.\n      *\n+     * @param <E> the element type\n      * @param set  the sorted set to make unmodifiable, must not be null\n      * @return an unmodifiable set backed by the given set\n      * @throws IllegalArgumentException  if the set is null\n      */\n-    public static <T> SortedSet<T> unmodifiableSortedSet(SortedSet<T> set) {\n+    public static <E> SortedSet<E> unmodifiableSortedSet(SortedSet<E> set) {\n         return UnmodifiableSortedSet.unmodifiableSortedSet(set);\n     }\n \n      * It is important not to use the original set after invoking this method,\n      * as it is a backdoor for adding invalid objects.\n      *\n+     * @param <E> the element type\n      * @param set  the sorted set to predicate, must not be null\n      * @param predicate  the predicate for the sorted set, must not be null\n      * @return a predicated sorted set backed by the given sorted set\n      * @throws IllegalArgumentException  if the Set or Predicate is null\n      */\n-    public static <T> SortedSet<T> predicatedSortedSet(SortedSet<T> set, Predicate<? super T> predicate) {\n+    public static <E> SortedSet<E> predicatedSortedSet(SortedSet<E> set, Predicate<? super E> predicate) {\n         return PredicatedSortedSet.predicatedSortedSet(set, predicate);\n     }\n \n      * Existing entries in the specified set will not be transformed.\n      * If you want that behaviour, see {@link TransformedSortedSet#transformedSortedSet}.\n      *\n+     * @param <E> the element type\n      * @param set  the set to transform, must not be null\n      * @param transformer  the transformer for the set, must not be null\n      * @return a transformed set backed by the given set\n      * @throws IllegalArgumentException  if the Set or Transformer is null\n      */\n-    public static <E> SortedSet<E> transformedSortedSet(SortedSet<E> set, Transformer<? super E, ? extends E> transformer) {\n+    public static <E> SortedSet<E> transformedSortedSet(SortedSet<E> set,\n+                                                        Transformer<? super E, ? extends E> transformer) {\n         return TransformedSortedSet.transformingSortedSet(set, transformer);\n     }\n     \n--- a/src/main/java/org/apache/commons/collections/SplitMapUtils.java\n+++ b/src/main/java/org/apache/commons/collections/SplitMapUtils.java\n      * If <code>get</code> implements {@link IterableMap} directly, no conversion will take place.\n      * If <code>get</code> implements {@link Map} but not {@link IterableMap} it will be decorated.\n      * Otherwise an {@link Unmodifiable} {@link IterableMap} will be returned.\n-     * @param <K>\n-     * @param <V>\n+     * @param <K> the key type\n+     * @param <V> the value type\n      * @param get to wrap, must not be null\n      * @return {@link IterableMap}\n      */\n      * it is recommended that the result of #put(K, V) be discarded as it likely will not\n      * match <code>V</code> at runtime.\n      *\n-     * @param <K>\n-     * @param <V>\n+     * @param <K> the key type\n+     * @param <V> the element type\n      * @param put to wrap, must not be null\n      * @return {@link Map}\n      */", "timestamp": 1345837480, "metainfo": ""}