{"sha": "2db7aa771a4ee5cd0cae28fe54d7d89fa62da81f", "log": "[COLLECTIONS-427] Revert performance improvement and add clarifying javadoc wrt runtime complexity.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java\n import java.util.Set;\n \n import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.collections4.set.UnmodifiableSet;\n import org.apache.commons.collections4.iterators.AbstractIteratorDecorator;\n import org.apache.commons.collections4.iterators.AbstractListIteratorDecorator;\n+import org.apache.commons.collections4.set.UnmodifiableSet;\n \n /**\n  * Decorates a <code>List</code> to ensure that no duplicates are present much\n         return result;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     * <p>\n+     * This implementation iterates over the elements of this list, checking\n+     * each element in turn to see if it's contained in <code>coll</code>.\n+     * If it's not contained, it's removed from this list. As a consequence,\n+     * it is advised to use a collection type for <code>coll</code> that provides\n+     * a fast (e.g. O(1)) implementation of {@link Collection#contains(Object)}.\n+     */\n     @Override\n     public boolean retainAll(final Collection<?> coll) {\n-        final Set<Object> setRetainAll = new HashSet<Object>();\n-        for (final Object next : coll) {\n-            if (set.contains(next)) {\n-                setRetainAll.add(next);\n-            }\n-        }\n-        if (setRetainAll.size() == set.size()) {\n+        boolean result = set.retainAll(coll);\n+        if (result == false) {\n             return false;\n         }\n-        if (setRetainAll.size() == 0) {\n-            clear();\n+        if (set.size() == 0) {\n+            super.clear();\n         } else {\n-            for (final Iterator<E> it = iterator(); it.hasNext();) {\n-                if (!setRetainAll.contains(it.next())) {\n-                    it.remove();\n-                }\n-            }\n-        }\n-        return true;\n+            // use the set as parameter for the call to retainAll to improve performance\n+            super.retainAll(set);\n+        }\n+        return result;\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java\n         assertTrue(uniqueList.contains(Integer.valueOf(8)));\n     }\n \n-    /*\n-     * test case for https://issues.apache.org/jira/browse/COLLECTIONS-427\n-     */\n-    @SuppressWarnings(\"boxing\") // OK in test code\n-    public void testRetainAllCollections427() {\n-        final int size = 50000;\n-        final ArrayList<Integer> list = new ArrayList<Integer>();\n-        for (int i = 0; i < size; i++) {\n-            list.add(i);\n-        }\n-        final SetUniqueList<Integer> uniqueList = SetUniqueList.setUniqueList(list);\n-        final ArrayList<Integer> toRetain = new ArrayList<Integer>();\n-        for (int i = size; i < 2*size; i++) {\n-            toRetain.add(i);\n-        }\n-\n-        final long start = System.currentTimeMillis();\n-        uniqueList.retainAll(toRetain);\n-        final long stop = System.currentTimeMillis();\n-\n-        // make sure retainAll completes under 5 seconds\n-        // TODO if test is migrated to JUnit 4, add a Timeout rule.\n-        // http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/Timeout.html\n-        assertTrue(stop - start < 5000);\n-    }\n-\n     public void testSetCollections444() {\n         final SetUniqueList<Integer> lset = new SetUniqueList<Integer>(new ArrayList<Integer>(), new HashSet<Integer>());\n ", "timestamp": 1422371342, "metainfo": ""}