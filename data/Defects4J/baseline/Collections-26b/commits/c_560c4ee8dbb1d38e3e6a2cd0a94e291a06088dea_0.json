{"sha": "560c4ee8dbb1d38e3e6a2cd0a94e291a06088dea", "log": "Fix to SetUniqueList breaks when swapping entries bug 33294, from Tom Dunham  ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/SetUniqueList.java\n+++ b/src/java/org/apache/commons/collections/list/SetUniqueList.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * This implementation breaks these in certain ways, but this is merely the\n  * result of rejecting duplicates.\n  * Each violation is explained in the method, but it should not affect you.\n+ * Bear in mind that Sets require immutable objects to function correctly.\n  * <p>\n  * The {@link org.apache.commons.collections.set.ListOrderedSet ListOrderedSet}\n  * class provides an alternative approach, by wrapping an existing Set and\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2004/06/03 22:02:13 $\n+ * @version $Revision: 1.8 $ $Date$\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n+ * @author Tom Dunham\n  */\n public class SetUniqueList extends AbstractSerializableListDecorator {\n \n      * The object is set into the specified index.\n      * Afterwards, any previous duplicate is removed\n      * If the object is not already in the list then a normal set occurs.\n-     * If it is present, then the old version is removed and re-added at this index\n+     * If it is present, then the old version is removed.\n      * \n      * @param index  the index to insert at\n      * @param object  the object to set\n      */\n     public Object set(int index, Object object) {\n         int pos = indexOf(object);\n-        Object result = super.set(index, object);\n+        Object removed = super.set(index, object);\n         if (pos == -1 || pos == index) {\n-            return result;\n-        }\n-        return remove(pos);\n+            return removed;\n+        }\n+        \n+        // the object is already in the uniq list\n+        // (and it hasn't been swapped with itself)\n+        super.remove(pos);  // remove the duplicate by index\n+        set.remove(removed);  // remove the item deleted by the set\n+        return removed;  // return the item deleted by the set\n     }\n \n     public boolean remove(Object object) {\n--- a/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n+++ b/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashSet;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.ListIterator;\n \n  * JUnit tests.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/06/02 22:07:53 $\n+ * @version $Revision: 1.6 $ $Date$\n  * \n  * @author Matthew Hawthorne\n+ * @author Tom Dunham\n  */\n public class TestSetUniqueList extends AbstractTestList {\n \n         assertEquals(\"Duplicate element was added\", 2, lset.size());\n     }\n \n+    public void testUniqueListReInsert() {\n+        List l = SetUniqueList.decorate(new LinkedList());\n+        l.add(new Object());\n+        l.add(new Object());\n+        \n+        Object a = l.get(0);\n+        \n+        // duplicate is removed\n+        l.set(0, l.get(1)); \n+        assertEquals(1, l.size());\n+        \n+        // old object is added back in \n+        l.add(1, a); \n+        assertEquals(2, l.size());\n+    }\n+    \n+    public void testUniqueListDoubleInsert() {\n+        List l = SetUniqueList.decorate(new LinkedList());\n+        l.add(new Object());\n+        l.add(new Object());\n+        \n+        // duplicate is removed\n+        l.set(0, l.get(1)); \n+        assertEquals(1, l.size());\n+        \n+        // duplicate should be removed again\n+        l.add(1, l.get(0));\n+        assertEquals(1, l.size());\n+    }\n+\n+    public void testSetDownwardsInList() {\n+        /*\n+         * Checks the following semantics\n+         * [a,b]\n+         * set(0,b): [b]->a\n+         * So UniqList contains [b] and a is returned\n+         */\n+        ArrayList l = new ArrayList();\n+        HashSet s = new HashSet();\n+        final SetUniqueList ul = new SetUniqueList(l, s);\n+\n+        Object a = new Object();\n+        Object b = new Object();\n+        ul.add(a);\n+        ul.add(b);\n+        assertEquals(a, l.get(0));\n+        assertEquals(b, l.get(1));\n+        assertTrue(s.contains(a)); \n+        assertTrue(s.contains(b));\n+        \n+        assertEquals(a, ul.set(0, b));\n+        assertEquals(1, s.size());\n+        assertEquals(1, l.size());\n+        assertEquals(b, l.get(0));\n+        assertTrue(s.contains(b));\n+        assertFalse(s.contains(a));\n+    }\n+\n+    public void testSetInBiggerList() {\n+        /*\n+         * Checks the following semantics\n+         * [a,b,c]\n+         * set(0,b): [b,c]->a\n+         * So UniqList contains [b,c] and a is returned\n+         */\n+        ArrayList l = new ArrayList();\n+        HashSet s = new HashSet();\n+        final SetUniqueList ul = new SetUniqueList(l, s);\n+\n+        Object a = new Object();\n+        Object b = new Object();\n+        Object c = new Object();\n+\n+        ul.add(a);\n+        ul.add(b);\n+        ul.add(c);\n+        assertEquals(a, l.get(0));\n+        assertEquals(b, l.get(1));\n+        assertEquals(c, l.get(2));\n+        assertTrue(s.contains(a)); \n+        assertTrue(s.contains(b));\n+        assertTrue(s.contains(c));\n+        \n+        assertEquals(a, ul.set(0, b));\n+        assertEquals(2, s.size());\n+        assertEquals(2, l.size());\n+        assertEquals(b, l.get(0));\n+        assertEquals(c, l.get(1));\n+        assertFalse(s.contains(a));\n+        assertTrue(s.contains(b));\n+        assertTrue(s.contains(c));\n+    }    \n+\n+    public void testSetUpwardsInList() {\n+        /*\n+         * Checks the following semantics\n+         * [a,b,c]\n+         * set(1,a): [a,c]->b\n+         * So UniqList contains [a,c] and b is returned\n+         */\n+        ArrayList l = new ArrayList();\n+        HashSet s = new HashSet();\n+        final SetUniqueList ul = new SetUniqueList(l, s);\n+\n+        Object a = new String(\"A\");\n+        Object b = new String(\"B\");\n+        Object c = new String(\"C\");\n+\n+        ul.add(a);\n+        ul.add(b);\n+        ul.add(c);\n+        assertEquals(a, l.get(0));\n+        assertEquals(b, l.get(1));\n+        assertEquals(c, l.get(2));\n+        assertTrue(s.contains(a)); \n+        assertTrue(s.contains(b));\n+        assertTrue(s.contains(c));\n+        \n+        assertEquals(b, ul.set(1, a));\n+        assertEquals(2, s.size());\n+        assertEquals(2, l.size());\n+        assertEquals(a, l.get(0));\n+        assertEquals(c, l.get(1));\n+        assertTrue(s.contains(a));\n+        assertFalse(s.contains(b));\n+        assertTrue(s.contains(c));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }", "timestamp": 1107003072, "metainfo": ""}