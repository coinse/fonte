{"sha": "7bbd45c3ec5049199e18a729de230a9cc461386a", "log": "Add TransformedMap and TransformedSortedMap   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TransformedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedMap.java,v 1.1 2003/05/17 14:53:11 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.lang.reflect.Array;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * <code>TransformedMap</code> decorates another <code>Map</code>\n+ * to transform objects that are added.\n+ * <p>\n+ * The Map put methods and Map.Entry setValue method are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/17 14:53:11 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedMap extends AbstractMapDecorator {\n+\n+    /** The transformer to use for the key */\n+    protected final Transformer keyTransformer;\n+    /** The transformer to use for the value */\n+    protected final Transformer valueTransformer;\n+\n+    /**\n+     * Factory method to create a transforming map.\n+     * <p>\n+     * If there are any elements already in the map being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyTransformer  the transformer to use for key conversion, null means no conversion\n+     * @param valueTransformer  the transformer to use for value conversion, null means no conversion\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) {\n+        return new TransformedMap(map, keyTransformer, valueTransformer);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyTransformer  the transformer to use for key conversion, null means no conversion\n+     * @param valueTransformer  the transformer to use for value conversion, null means no conversion\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    protected TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) {\n+        super(map);\n+        this.keyTransformer = keyTransformer;\n+        this.valueTransformer = valueTransformer;\n+    }\n+\n+    /**\n+     * Transforms a key.\n+     * <p>\n+     * The transformer itself may throw an exception if necessary.\n+     * \n+     * @param object  the object to transform\n+     * @throws the transformed object\n+     */\n+    protected Object transformKey(Object object) {\n+        if (keyTransformer == null) {\n+            return object;\n+        }\n+        return keyTransformer.transform(object);\n+    }\n+\n+    /**\n+     * Transforms a value.\n+     * <p>\n+     * The transformer itself may throw an exception if necessary.\n+     * \n+     * @param object  the object to transform\n+     * @throws the transformed object\n+     */\n+    protected Object transformValue(Object object) {\n+        if (valueTransformer == null) {\n+            return object;\n+        }\n+        return valueTransformer.transform(object);\n+    }\n+\n+    /**\n+     * Transforms a map.\n+     * <p>\n+     * The transformer itself may throw an exception if necessary.\n+     * \n+     * @param map  the map to transform\n+     * @throws the transformed object\n+     */\n+    protected Map transformMap(Map map) {\n+        Map result = new HashMap(map.size());\n+        for (Iterator it = map.entrySet().iterator(); it.hasNext(); ) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            result.put(transformKey(entry.getKey()), transformValue(entry.getValue()));\n+        }\n+        return result;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object put(Object key, Object value) {\n+        key = transformKey(key);\n+        value = transformValue(value);\n+        return getMap().put(key, value);\n+    }\n+\n+    public void putAll(Map mapToCopy) {\n+        mapToCopy = transformMap(mapToCopy);\n+        getMap().putAll(mapToCopy);\n+    }\n+\n+    public Set entrySet() {\n+        if (valueTransformer == null) {\n+            return map.entrySet();\n+        }\n+        return new TransformedMapEntrySet(map.entrySet(), valueTransformer);\n+    }\n+\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implementation of an entry set that uses a transforming map entry.\n+     */\n+    protected static class TransformedMapEntrySet extends AbstractCollectionDecorator implements Set {\n+        \n+        /** The transformer to use */\n+        private final Transformer valueTransformer;\n+\n+        protected TransformedMapEntrySet(Set set, Transformer valueTransformer) {\n+            super(set);\n+            this.valueTransformer = valueTransformer;\n+        }\n+\n+        public Iterator iterator() {\n+            return new TransformedMapEntrySetIterator(collection.iterator(), valueTransformer);\n+        }\n+        \n+        public Object[] toArray() {\n+            Object[] array = collection.toArray();\n+            for (int i = 0; i < array.length; i++) {\n+                array[i] = new TransformedMapEntry((Map.Entry) array[i], valueTransformer);\n+            }\n+            return array;\n+        }\n+        \n+        public Object[] toArray(Object array[]) {\n+            Object[] result = array;\n+            if (array.length > 0) {\n+                // we must create a new array to handle multi-threaded situations\n+                // where another thread could access data before we decorate it\n+                result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);\n+            }\n+            result = collection.toArray(result);\n+            for (int i = 0; i < result.length; i++) {\n+                result[i] = new TransformedMapEntry((Map.Entry) result[i], valueTransformer);\n+            }\n+\n+            // check to see if result should be returned straight\n+            if (result.length > array.length) {\n+                return result;\n+            }\n+\n+            // copy back into input array to fulfil the method contract\n+            System.arraycopy(result, 0, array, 0, result.length);\n+            if (array.length > result.length) {\n+                array[result.length] = null;\n+            }\n+            return array;\n+        }\n+    }\n+\n+    /**\n+     * Implementation of an entry set iterator.\n+     */\n+    protected static class TransformedMapEntrySetIterator extends AbstractIteratorDecorator {\n+        \n+        /** The transformer to use */\n+        private final Transformer valueTransformer;\n+        \n+        protected TransformedMapEntrySetIterator(Iterator iterator, Transformer valueTransformer) {\n+            super(iterator);\n+            this.valueTransformer = valueTransformer;\n+        }\n+        \n+        public Object next() {\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            return new TransformedMapEntry(entry, valueTransformer);\n+        }\n+    }\n+\n+    /**\n+     * Implementation of a map entry that transforms additions.\n+     */\n+    protected static class TransformedMapEntry extends AbstractMapEntryDecorator {\n+\n+        /** The transformer to use */\n+        private final Transformer valueTransformer;\n+\n+        protected TransformedMapEntry(Map.Entry entry, Transformer valueTransformer) {\n+            super(entry);\n+            this.valueTransformer = valueTransformer;\n+        }\n+\n+        public Object setValue(Object object) {\n+            if (valueTransformer != null) {\n+                object = valueTransformer.transform(object);\n+            }\n+            return entry.setValue(object);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TransformedSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedSortedMap.java,v 1.1 2003/05/17 14:53:11 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Comparator;\n+import java.util.SortedMap;\n+\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * <code>TransformedSortedMap</code> decorates another <code>SortedMap </code>\n+ * to transform objects that are added.\n+ * <p>\n+ * The Map put methods and Map.Entry setValue method are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/17 14:53:11 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedSortedMap extends TransformedMap implements SortedMap {\n+\n+    /**\n+     * Factory method to create a transforming sorted map.\n+     * <p>\n+     * If there are any elements already in the map being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyTransformer, the predicate to validate the keys, null means no transformation\n+     * @param valueTransformer, the predicate to validate to values, null means no transformation\n+     * @throws IllegalArgumentException if the map is null\n+     */\n+    public static SortedMap decorate(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n+        return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyTransformer, the predicate to validate the keys, null means no transformation\n+     * @param valueTransformer, the predicate to validate to values, null means no transformation\n+     * @throws IllegalArgumentException if the map is null\n+     */\n+    protected TransformedSortedMap(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n+        super(map, keyTransformer, valueTransformer);\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected SortedMap getSortedMap() {\n+        return (SortedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object firstKey() {\n+        return getSortedMap().firstKey();\n+    }\n+\n+    public Object lastKey() {\n+        return getSortedMap().lastKey();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedMap().comparator();\n+    }\n+\n+    public SortedMap subMap(Object fromKey, Object toKey) {\n+        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n+        return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    }\n+\n+    public SortedMap headMap(Object toKey) {\n+        SortedMap map = getSortedMap().headMap(toKey);\n+        return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    }\n+\n+    public SortedMap tailMap(Object fromKey) {\n+        SortedMap map = getSortedMap().tailMap(fromKey);\n+        return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.3 2003/05/11 13:18:27 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.4 2003/05/17 14:53:11 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections decorators tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/05/11 13:18:27 $\n+ * @version $Revision: 1.4 $ $Date: 2003/05/17 14:53:11 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestTransformedBuffer.suite());\n         suite.addTest(TestTransformedCollection.suite());\n         suite.addTest(TestTransformedList.suite());\n+        suite.addTest(TestTransformedMap.suite());\n         suite.addTest(TestTransformedSet.suite());\n         suite.addTest(TestTransformedSortedBag.suite());\n+        suite.addTest(TestTransformedSortedMap.suite());\n         suite.addTest(TestTransformedSortedSet.suite());\n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestTransformedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedMap.java,v 1.1 2003/05/17 14:53:11 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.TestMap;\n+\n+/**\n+ * Extension of {@link TestMap} for exercising the {@link TransformedMap}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/17 14:53:11 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTransformedMap extends TestMap {\n+    \n+    public TestTransformedMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTransformedMap.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTransformedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public Map makeEmptyMap() {\n+        return TransformedMap.decorate(new HashMap(), TestTransformedCollection.NOOP_TRANSFORMER, TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+\n+    public void testTransformedMap() {\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+\n+        Map map = TransformedMap.decorate(new HashMap(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER, null);\n+        assertEquals(0, map.size());\n+        for (int i = 0; i < els.length; i++) {\n+            map.put(els[i], els[i]);\n+            assertEquals(i + 1, map.size());\n+            assertEquals(true, map.containsKey(new Integer((String) els[i])));\n+            assertEquals(false, map.containsKey(els[i]));\n+            assertEquals(true, map.containsValue(els[i]));\n+            assertEquals(els[i], map.get(new Integer((String) els[i])));\n+        }\n+        \n+        assertEquals(null, map.remove(els[0]));\n+        assertEquals(els[0], map.remove(new Integer((String) els[0])));\n+        \n+        map = TransformedMap.decorate(new HashMap(), null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, map.size());\n+        for (int i = 0; i < els.length; i++) {\n+            map.put(els[i], els[i]);\n+            assertEquals(i + 1, map.size());\n+            assertEquals(true, map.containsValue(new Integer((String) els[i])));\n+            assertEquals(false, map.containsValue(els[i]));\n+            assertEquals(true, map.containsKey(els[i]));\n+            assertEquals(new Integer((String) els[i]), map.get(els[i]));\n+        }\n+\n+        assertEquals(new Integer((String) els[0]), map.remove(els[0]));\n+        \n+        Set entrySet = map.entrySet();\n+        Map.Entry[] array = (Map.Entry[]) entrySet.toArray(new Map.Entry[0]);\n+        array[0].setValue(\"66\");\n+        assertEquals(new Integer(66), array[0].getValue());\n+        assertEquals(new Integer(66), map.get(array[0].getKey()));\n+        \n+        Map.Entry entry = (Map.Entry) entrySet.iterator().next();\n+        entry.setValue(\"88\");\n+        assertEquals(new Integer(88), entry.getValue());\n+        assertEquals(new Integer(88), map.get(entry.getKey()));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestTransformedSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedSortedMap.java,v 1.1 2003/05/17 14:53:11 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.TestSortedMap;\n+\n+/**\n+ * Extension of {@link TestSortedMap} for exercising the {@link TransformedSortedMap}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/17 14:53:11 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTransformedSortedMap extends TestSortedMap {\n+    \n+    public TestTransformedSortedMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTransformedSortedMap.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTransformedSortedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public Map makeEmptyMap() {\n+        return TransformedMap.decorate(new HashMap(), TestTransformedCollection.NOOP_TRANSFORMER, TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+\n+    public void testTransformedMap() {\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+\n+        Map map = TransformedMap.decorate(new HashMap(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER, null);\n+        assertEquals(0, map.size());\n+        for (int i = 0; i < els.length; i++) {\n+            map.put(els[i], els[i]);\n+            assertEquals(i + 1, map.size());\n+            assertEquals(true, map.containsKey(new Integer((String) els[i])));\n+            assertEquals(false, map.containsKey(els[i]));\n+            assertEquals(true, map.containsValue(els[i]));\n+            assertEquals(els[i], map.get(new Integer((String) els[i])));\n+        }\n+        \n+        assertEquals(null, map.remove(els[0]));\n+        assertEquals(els[0], map.remove(new Integer((String) els[0])));\n+        \n+        map = TransformedMap.decorate(new HashMap(), null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, map.size());\n+        for (int i = 0; i < els.length; i++) {\n+            map.put(els[i], els[i]);\n+            assertEquals(i + 1, map.size());\n+            assertEquals(true, map.containsValue(new Integer((String) els[i])));\n+            assertEquals(false, map.containsValue(els[i]));\n+            assertEquals(true, map.containsKey(els[i]));\n+            assertEquals(new Integer((String) els[i]), map.get(els[i]));\n+        }\n+\n+        assertEquals(new Integer((String) els[0]), map.remove(els[0]));\n+        \n+        Set entrySet = map.entrySet();\n+        Map.Entry[] array = (Map.Entry[]) entrySet.toArray(new Map.Entry[0]);\n+        array[0].setValue(\"66\");\n+        assertEquals(new Integer(66), array[0].getValue());\n+        assertEquals(new Integer(66), map.get(array[0].getKey()));\n+        \n+        Map.Entry entry = (Map.Entry) entrySet.iterator().next();\n+        entry.setValue(\"88\");\n+        assertEquals(new Integer(88), entry.getValue());\n+        assertEquals(new Integer(88), map.get(entry.getKey()));\n+    }\n+}", "timestamp": 1053183191, "metainfo": ""}