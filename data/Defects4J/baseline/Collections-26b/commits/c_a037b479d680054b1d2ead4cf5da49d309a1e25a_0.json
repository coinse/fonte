{"sha": "a037b479d680054b1d2ead4cf5da49d309a1e25a", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r814050 | sebb | 2009-09-11 15:01:25 -0700 (Fri, 11 Sep 2009) | 1 line          Some minor Javadoc fixes     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java\n+++ b/src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java\n     Integer THREE = new Integer(3);\n     Integer FOUR = new Integer(4);\n     Integer FIVE = new Integer(5);\n-    \n+\n     public TestMultiKey(String name) {\n         super(name);\n     }\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     public void testConstructors() throws Exception {\n-        MultiKey mk = null;\n-        mk = new MultiKey(ONE, TWO);\n-        Assert.assertTrue(Arrays.equals(new Object[] {ONE, TWO}, mk.getKeys()));\n-\n-        mk = new MultiKey(ONE, TWO, THREE);\n-        Assert.assertTrue(Arrays.equals(new Object[] {ONE, TWO, THREE}, mk.getKeys()));\n-\n-        mk = new MultiKey(ONE, TWO, THREE, FOUR);\n-        Assert.assertTrue(Arrays.equals(new Object[] {ONE, TWO, THREE, FOUR}, mk.getKeys()));\n-\n-        mk = new MultiKey(ONE, TWO, THREE, FOUR, FIVE);\n-        Assert.assertTrue(Arrays.equals(new Object[] {ONE, TWO, THREE, FOUR, FIVE}, mk.getKeys()));\n-\n-        mk = new MultiKey(new Object[] {THREE, FOUR, ONE, TWO}, false);\n-        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, TWO}, mk.getKeys()));\n-    }\n-    \n+        MultiKey<Integer> mk = null;\n+        mk = new MultiKey<Integer>(ONE, TWO);\n+        Assert.assertTrue(Arrays.equals(new Object[] { ONE, TWO }, mk.getKeys()));\n+\n+        mk = new MultiKey<Integer>(ONE, TWO, THREE);\n+        Assert.assertTrue(Arrays.equals(new Object[] { ONE, TWO, THREE }, mk.getKeys()));\n+\n+        mk = new MultiKey<Integer>(ONE, TWO, THREE, FOUR);\n+        Assert.assertTrue(Arrays.equals(new Object[] { ONE, TWO, THREE, FOUR }, mk.getKeys()));\n+\n+        mk = new MultiKey<Integer>(ONE, TWO, THREE, FOUR, FIVE);\n+        Assert.assertTrue(Arrays.equals(new Object[] { ONE, TWO, THREE, FOUR, FIVE }, mk.getKeys()));\n+\n+        mk = new MultiKey<Integer>(new Integer[] { THREE, FOUR, ONE, TWO }, false);\n+        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n+    }\n+\n     public void testConstructorsByArray() throws Exception {\n-        MultiKey mk = null;\n-        Object[] keys = new Object[] {THREE, FOUR, ONE, TWO};\n-        mk = new MultiKey(keys);\n-        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, TWO}, mk.getKeys()));\n+        MultiKey<Integer> mk = null;\n+        Integer[] keys = new Integer[] { THREE, FOUR, ONE, TWO };\n+        mk = new MultiKey<Integer>(keys);\n+        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n         keys[3] = FIVE;  // no effect\n-        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, TWO}, mk.getKeys()));\n-\n-        keys = new Object[] {};\n-        mk = new MultiKey(keys);\n+        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n+\n+        keys = new Integer[] {};\n+        mk = new MultiKey<Integer>(keys);\n         Assert.assertTrue(Arrays.equals(new Object[] {}, mk.getKeys()));\n \n-        keys = new Object[] {THREE, FOUR, ONE, TWO};\n-        mk = new MultiKey(keys, true);\n-        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, TWO}, mk.getKeys()));\n+        keys = new Integer[] { THREE, FOUR, ONE, TWO };\n+        mk = new MultiKey<Integer>(keys, true);\n+        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n         keys[3] = FIVE;  // no effect\n-        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, TWO}, mk.getKeys()));\n-\n-        keys = new Object[] {THREE, FOUR, ONE, TWO};\n-        mk = new MultiKey(keys, false);\n-        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, TWO}, mk.getKeys()));\n+        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n+\n+        keys = new Integer[] { THREE, FOUR, ONE, TWO };\n+        mk = new MultiKey<Integer>(keys, false);\n+        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n         // change key - don't do this!\n         // the hashcode of the MultiKey is now broken\n         keys[3] = FIVE;\n-        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, FIVE}, mk.getKeys()));\n-    }        \n-    \n+        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, FIVE }, mk.getKeys()));\n+    }\n+\n     public void testConstructorsByArrayNull() throws Exception {\n-        Object[] keys = null;\n-        try {\n-            new MultiKey(keys);\n+        Integer[] keys = null;\n+        try {\n+            new MultiKey<Integer>(keys);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            new MultiKey(keys, true);\n+            new MultiKey<Integer>(keys, true);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            new MultiKey(keys, false);\n+            new MultiKey<Integer>(keys, false);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n-    \n+\n     public void testSize() {\n-        Assert.assertEquals(2, new MultiKey(ONE, TWO).size());\n-        Assert.assertEquals(2, new MultiKey(null, null).size());\n-        Assert.assertEquals(3, new MultiKey(ONE, TWO, THREE).size());\n-        Assert.assertEquals(3, new MultiKey(null, null, null).size());\n-        Assert.assertEquals(4, new MultiKey(ONE, TWO, THREE, FOUR).size());\n-        Assert.assertEquals(4, new MultiKey(null, null, null, null).size());\n-        Assert.assertEquals(5, new MultiKey(ONE, TWO, THREE, FOUR, FIVE).size());\n-        Assert.assertEquals(5, new MultiKey(null, null, null, null, null).size());\n-        \n-        Assert.assertEquals(0, new MultiKey(new Object[] {}).size());\n-        Assert.assertEquals(1, new MultiKey(new Object[] {ONE}).size());\n-        Assert.assertEquals(2, new MultiKey(new Object[] {ONE, TWO}).size());\n-        Assert.assertEquals(7, new MultiKey(new Object[] {ONE, TWO, ONE, TWO, ONE, TWO, ONE}).size());\n-    }\n-    \n+        Assert.assertEquals(2, new MultiKey<Integer>(ONE, TWO).size());\n+        Assert.assertEquals(2, new MultiKey<Object>(null, null).size());\n+        Assert.assertEquals(3, new MultiKey<Integer>(ONE, TWO, THREE).size());\n+        Assert.assertEquals(3, new MultiKey<Object>(null, null, null).size());\n+        Assert.assertEquals(4, new MultiKey<Integer>(ONE, TWO, THREE, FOUR).size());\n+        Assert.assertEquals(4, new MultiKey<Object>(null, null, null, null).size());\n+        Assert.assertEquals(5, new MultiKey<Integer>(ONE, TWO, THREE, FOUR, FIVE).size());\n+        Assert.assertEquals(5, new MultiKey<Object>(null, null, null, null, null).size());\n+\n+        Assert.assertEquals(0, new MultiKey<Object>(new Object[] {}).size());\n+        Assert.assertEquals(1, new MultiKey<Integer>(new Integer[] { ONE }).size());\n+        Assert.assertEquals(2, new MultiKey<Integer>(new Integer[] { ONE, TWO }).size());\n+        Assert.assertEquals(7, new MultiKey<Integer>(new Integer[] { ONE, TWO, ONE, TWO, ONE, TWO, ONE }).size());\n+    }\n+\n     public void testGetIndexed() {\n-        MultiKey mk = new MultiKey(ONE, TWO);\n+        MultiKey<Integer> mk = new MultiKey<Integer>(ONE, TWO);\n         Assert.assertSame(ONE, mk.getKey(0));\n         Assert.assertSame(TWO, mk.getKey(1));\n         try {\n             fail();\n         } catch (IndexOutOfBoundsException ex) {}\n     }\n-    \n+\n     public void testGetKeysSimpleConstructor() {\n-        MultiKey mk = new MultiKey(ONE, TWO);\n+        MultiKey<Integer> mk = new MultiKey<Integer>(ONE, TWO);\n         Object[] array = mk.getKeys();\n         Assert.assertSame(ONE, array[0]);\n         Assert.assertSame(TWO, array[1]);\n         Assert.assertEquals(2, array.length);\n     }\n-    \n+\n     public void testGetKeysArrayConstructorCloned() {\n-        Object[] keys = new Object[] {ONE, TWO};\n-        MultiKey mk = new MultiKey(keys, true);\n+        Integer[] keys = new Integer[] { ONE, TWO };\n+        MultiKey<Integer> mk = new MultiKey<Integer>(keys, true);\n         Object[] array = mk.getKeys();\n         Assert.assertTrue(array != keys);\n         Assert.assertTrue(Arrays.equals(array, keys));\n         Assert.assertSame(TWO, array[1]);\n         Assert.assertEquals(2, array.length);\n     }\n-    \n+\n     public void testGetKeysArrayConstructorNonCloned() {\n-        Object[] keys = new Object[] {ONE, TWO};\n-        MultiKey mk = new MultiKey(keys, false);\n+        Integer[] keys = new Integer[] { ONE, TWO };\n+        MultiKey<Integer> mk = new MultiKey<Integer>(keys, false);\n         Object[] array = mk.getKeys();\n         Assert.assertTrue(array != keys);  // still not equal\n         Assert.assertTrue(Arrays.equals(array, keys));\n         Assert.assertSame(TWO, array[1]);\n         Assert.assertEquals(2, array.length);\n     }\n-    \n+\n     public void testHashCode() {\n-        MultiKey mk1 = new MultiKey(ONE, TWO);\n-        MultiKey mk2 = new MultiKey(ONE, TWO);\n-        MultiKey mk3 = new MultiKey(ONE, \"TWO\");\n-        \n+        MultiKey<Integer> mk1 = new MultiKey<Integer>(ONE, TWO);\n+        MultiKey<Integer> mk2 = new MultiKey<Integer>(ONE, TWO);\n+        MultiKey<Object> mk3 = new MultiKey<Object>(ONE, \"TWO\");\n+\n         Assert.assertTrue(mk1.hashCode() == mk1.hashCode());\n         Assert.assertTrue(mk1.hashCode() == mk2.hashCode());\n         Assert.assertTrue(mk1.hashCode() != mk3.hashCode());\n-        \n+\n         int total = (0 ^ ONE.hashCode()) ^ TWO.hashCode();\n         Assert.assertEquals(total, mk1.hashCode());\n     }\n-    \n+\n     public void testEquals() {\n-        MultiKey mk1 = new MultiKey(ONE, TWO);\n-        MultiKey mk2 = new MultiKey(ONE, TWO);\n-        MultiKey mk3 = new MultiKey(ONE, \"TWO\");\n-        \n+        MultiKey<Integer> mk1 = new MultiKey<Integer>(ONE, TWO);\n+        MultiKey<Integer> mk2 = new MultiKey<Integer>(ONE, TWO);\n+        MultiKey<Object> mk3 = new MultiKey<Object>(ONE, \"TWO\");\n+\n         Assert.assertEquals(mk1, mk1);\n         Assert.assertEquals(mk1, mk2);\n         Assert.assertTrue(mk1.equals(mk3) == false);\n         Assert.assertTrue(mk1.equals(\"\") == false);\n         Assert.assertTrue(mk1.equals(null) == false);\n     }\n-    \n+\n     static class SystemHashCodeSimulatingKey implements Serializable {\n \n         private static final long serialVersionUID = 1L;", "timestamp": 1252994236, "metainfo": ""}