{"sha": "92e8f95b6ae3c3ab76f7ea3b3d60def984ad7740", "log": "Tab police  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/main/java/org/apache/commons/collections/TransformerUtils.java\n      * @throws IllegalArgumentException if either transformer is null\n      */\n     @SuppressWarnings(\"unchecked\")\n-\tpublic static <T> Transformer<T, T> chainedTransformer(\n+    public static <T> Transformer<T, T> chainedTransformer(\n             Transformer<? super T, ? extends T> transformer1,\n             Transformer<? super T, ? extends T> transformer2) {\n         return ChainedTransformer.<T> chainedTransformer(transformer1, transformer2);\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n             @SuppressWarnings(\"unchecked\") // Bag is of type E\n             E[] values = (E[]) bag.toArray();\n             bag.clear();\n-\t\t\tfor (int i = 0; i < values.length; i++) {\n+            for (int i = 0; i < values.length; i++) {\n                 decorated.decorated().add(transformer.transform(values[i]));\n             }\n         }\n--- a/src/main/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n     //-----------------------------------------------------------------------\n     @Override\n     public Iterator<E> iterator() {\n-\t\treturn UnmodifiableIterator.<E> unmodifiableIterator(decorated()\n-\t\t\t\t.iterator());\n+        return UnmodifiableIterator.<E> unmodifiableIterator(decorated()\n+                .iterator());\n     }\n \n     @Override\n     @Override\n     public Set<E> uniqueSet() {\n         Set<E> set = decorated().uniqueSet();\n-\t\treturn UnmodifiableSet.<E> unmodifiableSet(set);\n+        return UnmodifiableSet.<E> unmodifiableSet(set);\n     }\n \n }\n--- a/src/main/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n      * @throws IllegalArgumentException if bag is null\n      */\n     @SuppressWarnings(\"unchecked\")\n-\tpublic static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll) {\n+    public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll) {\n         if (coll == null) {\n             throw new IllegalArgumentException(\"The collection must not be null\");\n         }\n--- a/src/main/java/org/apache/commons/collections/functors/DefaultEquator.java\n+++ b/src/main/java/org/apache/commons/collections/functors/DefaultEquator.java\n  * @version $Revision$\n  */\n public class DefaultEquator<T> implements Equator<T> {\n-\t/** Static instance */\n-\tpublic static final DefaultEquator<Object> INSTANCE = new DefaultEquator<Object>();\n+    /** Static instance */\n+    public static final DefaultEquator<Object> INSTANCE = new DefaultEquator<Object>();\n \n-\t/**\n-\t * Hashcode used for <code>null</code> objects.\n-\t */\n-\tpublic static final int HASHCODE_NULL = -1;\n+    /**\n+     * Hashcode used for <code>null</code> objects.\n+     */\n+    public static final int HASHCODE_NULL = -1;\n \n-\t/**\n-\t * {@inheritDoc} Delegates to {@link Object#equals(Object)}.\n-\t */\n-\tpublic boolean equate(T o1, T o2) {\n-\t\treturn o1 == o2 || o1 != null && o1.equals(o2);\n-\t}\n+    /**\n+     * {@inheritDoc} Delegates to {@link Object#equals(Object)}.\n+     */\n+    public boolean equate(T o1, T o2) {\n+        return o1 == o2 || o1 != null && o1.equals(o2);\n+    }\n \n-\t/**\n-\t * {@inheritDoc}\n-\t * \n-\t * @return <code>o.hashCode()</code> if <code>o</code> is non-\n-\t *         <code>null</code>, else {@link #HASHCODE_NULL}.\n-\t */\n-\tpublic int hash(T o) {\n-\t\treturn o == null ? HASHCODE_NULL : o.hashCode();\n-\t}\n+    /**\n+     * {@inheritDoc}\n+     * \n+     * @return <code>o.hashCode()</code> if <code>o</code> is non-\n+     *         <code>null</code>, else {@link #HASHCODE_NULL}.\n+     */\n+    public int hash(T o) {\n+        return o == null ? HASHCODE_NULL : o.hashCode();\n+    }\n \n-\tprivate Object readResolve() {\n-\t\treturn INSTANCE;\n-\t}\n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n \n-\t/**\n-\t * Get a typed {@link DefaultEquator} instance.\n-\t * \n-\t * @param <T>\n-\t * @return {@link DefaultEquator#INSTANCE}\n-\t */\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic static <T> DefaultEquator<T> defaultEquator() {\n-\t\treturn (DefaultEquator<T>) DefaultEquator.INSTANCE;\n-\t}\n+    /**\n+     * Get a typed {@link DefaultEquator} instance.\n+     * \n+     * @param <T>\n+     * @return {@link DefaultEquator#INSTANCE}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> DefaultEquator<T> defaultEquator() {\n+        return (DefaultEquator<T>) DefaultEquator.INSTANCE;\n+    }\n }\n--- a/src/test/java/org/apache/commons/collections/map/TestLRUMap.java\n+++ b/src/test/java/org/apache/commons/collections/map/TestLRUMap.java\n                         }\n                         synchronized (map) {\n                             for (MapIterator<Object, Thread> iter = map.mapIterator(); iter.hasNext();) {\n-                            \titer.next();\n-                            \tif (iter.getValue() == this) {\n+                                iter.next();\n+                                if (iter.getValue() == this) {\n                                     iter.remove();\n                                 }\n                             }\n                         }\n                         synchronized (map) {\n                             for (Iterator<Object> iter = map.keySet().iterator(); iter.hasNext();) {\n-\t\t\t\t\t\t\t\tString name = (String) iter.next();\n-\t\t\t\t\t\t\t\tif (name.substring(0, name.indexOf('[')).equals(getName())) {\n+                                String name = (String) iter.next();\n+                                if (name.substring(0, name.indexOf('[')).equals(getName())) {\n                                     iter.remove();\n                                 }\n                             }", "timestamp": 1331398873, "metainfo": ""}