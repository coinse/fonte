{"sha": "bafb7096f0518bb2dfc845564e821c94c9f7cdc7", "log": "Minor changes to FluentIterable, added toList to IterableUtils, added first FluentIterable tests.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/FluentIterable.java\n+++ b/src/main/java/org/apache/commons/collections4/FluentIterable.java\n      * @see {@link org.apache.commons.collections4.iterators.CollatingIterator CollatingIterator}\n      */\n     public FluentIterable<E> collate(final Iterable<? extends E> other) {\n-        return of(IterableUtils.collatedIterable(iterable, other, null));\n+        return of(IterableUtils.collatedIterable(null, iterable, other));\n     }\n \n     /**\n      * <p>\n      * A <code>null</code> iterable will be treated as an empty iterable.\n      *\n-     * @param other  the other iterable to collate, may be null\n      * @param comparator  the comparator to define an ordering, may be null,\n      *   in which case natural ordering will be used\n+     * @param other  the other iterable to collate, may be null\n      * @return a new iterable, collating this iterable with the other in natural order\n      * @see {@link org.apache.commons.collections4.iterators.CollatingIterator CollatingIterator}\n      */\n     public FluentIterable<E> collate(final Iterable<? extends E> other,\n                                      final Comparator<? super E> comparator) {\n-        return of(IterableUtils.collatedIterable(iterable, other, comparator));\n+        return of(IterableUtils.collatedIterable(comparator, iterable, other));\n     }\n \n     /**\n      * @return a list of the iterable contents\n      */\n     public List<E> toList() {\n-        return IteratorUtils.toList(iterator());\n+        return IterableUtils.toList(iterable);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/collections4/IterableUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IterableUtils.java\n      * @return a filtered view on the specified iterable\n      */\n     public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a,\n-                                                   final Iterable<? extends E> b,\n-                                                   final Comparator<? super E> comparator) {\n+                                                   final Iterable<? extends E> b) {\n+        return new FluentIterable<E>() {\n+            @Override\n+            public Iterator<E> iterator() {\n+                return IteratorUtils.collatedIterator(null,\n+                                                      emptyIteratorIfNull(a),\n+                                                      emptyIteratorIfNull(b));\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Combines the two provided iterables into an ordered iterable using the\n+     * provided comparator. If the comparator is null, natural ordering will be\n+     * used.\n+     * <p>\n+     * The returned iterable's iterator supports {@code remove()} when the corresponding\n+     * input iterator supports it.\n+     *\n+     * @param <E>  the element type\n+     * @param comparator  the comparator defining an ordering over the elements,\n+     *   may be null, in which case natural ordering will be used\n+     * @param a  the first iterable, may be null\n+     * @param b  the second iterable, may be null\n+     * @return a filtered view on the specified iterable\n+     */\n+    public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator,\n+                                                   final Iterable<? extends E> a,\n+                                                   final Iterable<? extends E> b) {\n         return new FluentIterable<E>() {\n             @Override\n             public Iterator<E> iterator() {\n     }\n \n     /**\n+     * Gets a new list with the contents of the provided iterable.\n+     *\n+     * @param <E>  the element type\n+     * @param iterator  the iterable to use, may be null\n+     * @return a list of the iterator contents\n+     */\n+    public static <E> List<E> toList(final Iterable<E> iterable) {\n+        return IteratorUtils.toList(emptyIteratorIfNull(iterable));\n+    }\n+\n+    /**\n      * Returns a string representation of the elements of the specified iterable.\n      * <p>\n      * The string representation consists of a list of the iterable's elements,\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections4/FluentIterableTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for FluentIterable.\n+ *\n+ * @since 4.1\n+ * @version $Id$\n+ */\n+public class FluentIterableTest {\n+\n+    /**\n+     * Iterable of {@link Integer}s\n+     */\n+    private Iterable<Integer> iterableA = null;\n+\n+    /**\n+     * Iterable of {@link Long}s\n+     */\n+    private Iterable<Long> iterableB = null;\n+\n+    /**\n+     * Collection of even {@link Integer}s\n+     */\n+    private Iterable<Integer> iterableEven = null;\n+\n+    /**\n+     * Collection of odd {@link Integer}s\n+     */\n+    private Iterable<Integer> iterableOdd = null;\n+\n+    /**\n+     * An empty Iterable.\n+     */\n+    private Iterable<Integer> emptyIterable = null;\n+\n+    @Before\n+    public void setUp() {\n+        Collection<Integer> collectionA = new ArrayList<Integer>();\n+        collectionA.add(1);\n+        collectionA.add(2);\n+        collectionA.add(2);\n+        collectionA.add(3);\n+        collectionA.add(3);\n+        collectionA.add(3);\n+        collectionA.add(4);\n+        collectionA.add(4);\n+        collectionA.add(4);\n+        collectionA.add(4);\n+        iterableA = collectionA;\n+\n+        Collection<Long> collectionB = new LinkedList<Long>();\n+        collectionB.add(5L);\n+        collectionB.add(4L);\n+        collectionB.add(4L);\n+        collectionB.add(3L);\n+        collectionB.add(3L);\n+        collectionB.add(3L);\n+        collectionB.add(2L);\n+        collectionB.add(2L);\n+        collectionB.add(2L);\n+        collectionB.add(2L);\n+        iterableB = collectionB;\n+\n+        iterableEven = Arrays.asList(2, 4, 6, 8, 10, 12);\n+        iterableOdd = Arrays.asList(1, 3, 5, 7, 9, 11);\n+\n+        emptyIterable = Collections.emptyList();\n+    }\n+\n+    private static Predicate<Number> EVEN = new Predicate<Number>() {\n+        public boolean evaluate(final Number input) {\n+            return input.intValue() % 2 == 0;\n+        }\n+    };\n+\n+    // -----------------------------------------------------------------------\n+    @Test\n+    public void allMatch() {\n+        assertTrue(FluentIterable.of(iterableEven).allMatch(EVEN));\n+        assertFalse(FluentIterable.of(iterableOdd).allMatch(EVEN));\n+        assertFalse(FluentIterable.of(iterableA).allMatch(EVEN));\n+\n+        try {\n+            FluentIterable.of(iterableEven).allMatch(null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void anyMatch() {\n+        assertTrue(FluentIterable.of(iterableEven).anyMatch(EVEN));\n+        assertFalse(FluentIterable.of(iterableOdd).anyMatch(EVEN));\n+        assertTrue(FluentIterable.of(iterableA).anyMatch(EVEN));\n+\n+        try {\n+            FluentIterable.of(iterableEven).anyMatch(null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void collate() {\n+        List<Integer> result = FluentIterable.of(iterableOdd).collate(iterableEven).toList();\n+        List<Integer> combinedList = new ArrayList<Integer>();\n+        CollectionUtils.addAll(combinedList, iterableOdd);\n+        CollectionUtils.addAll(combinedList, iterableEven);\n+        Collections.sort(combinedList);\n+        assertEquals(combinedList, result);\n+\n+        result = FluentIterable.of(iterableOdd).collate(null).toList();\n+        List<Integer> expected = IterableUtils.toList(iterableOdd);\n+        assertEquals(expected, result);\n+    }\n+\n+    @Test\n+    public void isEmpty() {\n+        assertTrue(FluentIterable.of(emptyIterable).isEmpty());\n+        assertFalse(FluentIterable.of(iterableOdd).isEmpty());\n+    }\n+\n+    @Test\n+    public void contains() {\n+        assertTrue(FluentIterable.of(iterableEven).contains(2));\n+        assertFalse(FluentIterable.of(iterableEven).contains(1));\n+        assertFalse(FluentIterable.of(iterableEven).contains(null));\n+        assertTrue(FluentIterable.of(iterableEven).append((Integer) null).contains(null));\n+    }\n+\n+    @Test\n+    public void get() {\n+        assertEquals(2, FluentIterable.of(iterableEven).get(0).intValue());\n+\n+        try {\n+            FluentIterable.of(iterableEven).get(-1);\n+            fail(\"expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ioe) {\n+            // expected\n+        }\n+\n+        try {\n+            FluentIterable.of(iterableEven).get(IterableUtils.size(iterableEven));\n+            fail(\"expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ioe) {\n+            // expected\n+        }\n+    }\n+}", "timestamp": 1433452329, "metainfo": ""}