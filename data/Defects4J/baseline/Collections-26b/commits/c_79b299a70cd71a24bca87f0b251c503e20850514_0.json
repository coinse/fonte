{"sha": "79b299a70cd71a24bca87f0b251c503e20850514", "log": "javadocs   ", "commit": "\n--- a/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n \n /**\n  * Reverses the order of another comparator.\n- *\n+ * \n  * @author bayard@generationjava.com\n  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n- * @version $Id: ReverseComparator.java,v 1.6 2002/03/20 00:25:37 mas Exp $\n+ * @version $Id: ReverseComparator.java,v 1.7 2002/03/20 17:09:16 morgand Exp $\n  */\n public class ReverseComparator implements Comparator,Serializable {\n \n \n     /**\n      * Creates a comparator that compares objects based on the inverse of their\n-     * natural ordering.\n+     * natural ordering.  Using this Constructor will create a ReverseComparator\n+     * that is functionaly identical to the Comparator returned by\n+     * java.util.Collections.<b>reverseOrder()</b>.\n+     * \n+     * @see java.util.Collections#reverseOrder()\n      */\n     public ReverseComparator() {\n         this(null);\n     }\n \n     /**\n-     * Creates a reverse comparator that inverts the comparison \n-     * of the passed in comparator.\n+     * Creates a reverse comparator that inverts the comparison\n+     * of the passed in comparator.  If you pass in a null,\n+     * the ReverseComparator defaults to reversing the\n+     * natural order, as per \n+     * java.util.Collections.<b>reverseOrder()</b>.\n+     * \n+     * @param comparator Comparator to reverse\n      */\n     public ReverseComparator(Comparator comparator) {\n         if(comparator != null) {", "timestamp": 1016644156, "metainfo": ""}