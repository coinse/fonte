{"sha": "bd94ccdfa58f51cbb40ae0653c6654f4b4943db4", "log": "Extra tests for the internals of LRUMap bug 32573  ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/TestLRUMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLRUMap.java\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n+    static class SingleHashCode {\n+        private final String code;\n+        SingleHashCode(String code) {\n+            this.code = code;\n+        }\n+        public int hashCode() {\n+            // always return the same hashcode\n+            // that way, it will end up in the same bucket\n+            return 12;\n+        }\n+        public String toString() {\n+            return \"SingleHashCode:\" + code;\n+        }\n+    }\n+\n+    public void testInternalState_Buckets() {\n+        if (isPutAddSupported() == false || isPutChangeSupported() == false) return;\n+        SingleHashCode one = new SingleHashCode(\"1\");\n+        SingleHashCode two = new SingleHashCode(\"2\");\n+        SingleHashCode three = new SingleHashCode(\"3\");\n+        SingleHashCode four = new SingleHashCode(\"4\");\n+        SingleHashCode five = new SingleHashCode(\"5\");\n+        SingleHashCode six = new SingleHashCode(\"6\");\n+\n+        LRUMap map = new LRUMap(3, 1.0f);\n+        int hashIndex = map.hashIndex(map.hash(one), 4);\n+        map.put(one, \"A\");\n+        map.put(two, \"B\");\n+        map.put(three, \"C\");\n+        \n+        assertEquals(4, map.data.length);\n+        assertEquals(3, map.size);\n+        assertEquals(null, map.header.next);\n+        assertEquals(one, map.header.after.key);  // LRU\n+        assertEquals(two, map.header.after.after.key);\n+        assertEquals(three, map.header.after.after.after.key);  // MRU\n+        assertEquals(three, map.data[hashIndex].key);\n+        assertEquals(two, map.data[hashIndex].next.key);\n+        assertEquals(one, map.data[hashIndex].next.next.key);\n+        \n+        map.put(four, \"D\");  // reuses last in next list\n+        \n+        assertEquals(4, map.data.length);\n+        assertEquals(3, map.size);\n+        assertEquals(null, map.header.next);\n+        assertEquals(two, map.header.after.key);  // LRU\n+        assertEquals(three, map.header.after.after.key);\n+        assertEquals(four, map.header.after.after.after.key);  // MRU\n+        assertEquals(four, map.data[hashIndex].key);\n+        assertEquals(three, map.data[hashIndex].next.key);\n+        assertEquals(two, map.data[hashIndex].next.next.key);\n+        \n+        map.get(three);\n+        \n+        assertEquals(4, map.data.length);\n+        assertEquals(3, map.size);\n+        assertEquals(null, map.header.next);\n+        assertEquals(two, map.header.after.key);  // LRU\n+        assertEquals(four, map.header.after.after.key);\n+        assertEquals(three, map.header.after.after.after.key);  // MRU\n+        assertEquals(four, map.data[hashIndex].key);\n+        assertEquals(three, map.data[hashIndex].next.key);\n+        assertEquals(two, map.data[hashIndex].next.next.key);\n+        \n+        map.put(five, \"E\");  // reuses last in next list\n+        \n+        assertEquals(4, map.data.length);\n+        assertEquals(3, map.size);\n+        assertEquals(null, map.header.next);\n+        assertEquals(four, map.header.after.key);  // LRU\n+        assertEquals(three, map.header.after.after.key);\n+        assertEquals(five, map.header.after.after.after.key);  // MRU\n+        assertEquals(five, map.data[hashIndex].key);\n+        assertEquals(four, map.data[hashIndex].next.key);\n+        assertEquals(three, map.data[hashIndex].next.next.key);\n+        \n+        map.get(three);\n+        map.get(five);\n+        \n+        assertEquals(4, map.data.length);\n+        assertEquals(3, map.size);\n+        assertEquals(null, map.header.next);\n+        assertEquals(four, map.header.after.key);  // LRU\n+        assertEquals(three, map.header.after.after.key);\n+        assertEquals(five, map.header.after.after.after.key);  // MRU\n+        assertEquals(five, map.data[hashIndex].key);\n+        assertEquals(four, map.data[hashIndex].next.key);\n+        assertEquals(three, map.data[hashIndex].next.next.key);\n+        \n+        map.put(six, \"F\");  // reuses middle in next list\n+        \n+        assertEquals(4, map.data.length);\n+        assertEquals(3, map.size);\n+        assertEquals(null, map.header.next);\n+        assertEquals(three, map.header.after.key);  // LRU\n+        assertEquals(five, map.header.after.after.key);\n+        assertEquals(six, map.header.after.after.after.key);  // MRU\n+        assertEquals(six, map.data[hashIndex].key);\n+        assertEquals(five, map.data[hashIndex].next.key);\n+        assertEquals(three, map.data[hashIndex].next.next.key);\n+    }\n+\n+    public void testInternalState_getEntry_int() {\n+        if (isPutAddSupported() == false || isPutChangeSupported() == false) return;\n+        SingleHashCode one = new SingleHashCode(\"1\");\n+        SingleHashCode two = new SingleHashCode(\"2\");\n+        SingleHashCode three = new SingleHashCode(\"3\");\n+        SingleHashCode four = new SingleHashCode(\"4\");\n+        SingleHashCode five = new SingleHashCode(\"5\");\n+        SingleHashCode six = new SingleHashCode(\"6\");\n+\n+        LRUMap map = new LRUMap(3, 1.0f);\n+        int hashIndex = map.hashIndex(map.hash(one), 4);\n+        map.put(one, \"A\");\n+        map.put(two, \"B\");\n+        map.put(three, \"C\");\n+        \n+        assertEquals(one, map.getEntry(0).key);\n+        assertEquals(two, map.getEntry(1).key);\n+        assertEquals(three, map.getEntry(2).key);\n+        try {\n+            map.getEntry(-1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            map.getEntry(3);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n //    public void testCreate() throws Exception {\n //        resetEmpty();\n //        writeExternalFormToDisk((java.io.Serializable) map, \"D:/dev/collections/data/test/LRUMap.emptyCollection.version3.obj\");", "timestamp": 1131895007, "metainfo": ""}