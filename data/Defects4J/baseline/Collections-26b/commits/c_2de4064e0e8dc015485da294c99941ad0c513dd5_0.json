{"sha": "2de4064e0e8dc015485da294c99941ad0c513dd5", "log": "Generics  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections/TestExtendedProperties.java\n+++ b/src/test/java/org/apache/commons/collections/TestExtendedProperties.java\n             p.addProperty(\"b\", \"bar\");\n             p.addProperty(\"c\", \"bar\");\n \n-            Iterator it = p.getKeys();\n-            assertEquals(\"a\", (String) it.next());\n-            assertEquals(\"b\", (String) it.next());\n-            assertEquals(\"c\", (String) it.next());\n+            Iterator<String> it = p.getKeys();\n+            assertEquals(\"a\", it.next());\n+            assertEquals(\"b\", it.next());\n+            assertEquals(\"c\", it.next());\n             assertFalse(it.hasNext());\n     }\n \n         p.put(\"b\", \"bar\");\n         p.put(\"c\", \"bar\");\n \n-        Iterator it = p.getKeys();\n-        assertEquals(\"a\", (String) it.next());\n-        assertEquals(\"b\", (String) it.next());\n-        assertEquals(\"c\", (String) it.next());\n+        Iterator<String> it = p.getKeys();\n+        assertEquals(\"a\", it.next());\n+        assertEquals(\"b\", it.next());\n+        assertEquals(\"c\", it.next());\n         assertFalse(it.hasNext());\n     }\n \n         ExtendedProperties p = new ExtendedProperties();\n         p.putAll(q);\n \n-        Iterator it = p.getKeys();\n-        assertEquals(\"a\", (String) it.next());\n-        assertEquals(\"b\", (String) it.next());\n-        assertEquals(\"c\", (String) it.next());\n+        Iterator<String> it = p.getKeys();\n+        assertEquals(\"a\", it.next());\n+        assertEquals(\"b\", it.next());\n+        assertEquals(\"c\", it.next());\n         assertFalse(it.hasNext());\n     }\n \n \n         q.remove(\"b\");\n \n-        Iterator it = q.getKeys();\n-        assertEquals(\"a\", (String) it.next());\n-        assertEquals(\"c\", (String) it.next());\n+        Iterator<String> it = q.getKeys();\n+        assertEquals(\"a\", it.next());\n+        assertEquals(\"c\", it.next());\n         assertFalse(it.hasNext());\n     }\n \n--- a/src/test/java/org/apache/commons/collections/list/TestSetUniqueList.java\n+++ b/src/test/java/org/apache/commons/collections/list/TestSetUniqueList.java\n                 size + elements.length, getCollection().size());\n     }\n \n-    // TODO: Generics\n     public void testIntCollectionAddAll() {\n       // make a SetUniqueList with one element\n-      List list = new SetUniqueList(new ArrayList(), new HashSet());\n+      List<Integer> list = new SetUniqueList<Integer>(new ArrayList<Integer>(), new HashSet<Integer>());\n       final Integer existingElement = new Integer(1);\n       list.add(existingElement);\n \n       // add two new unique elements at index 0\n       final Integer firstNewElement = new Integer(2);\n       final Integer secondNewElement = new Integer(3);\n-      Collection collection = Arrays.asList(new Integer[] {firstNewElement, secondNewElement});\n+      Collection<Integer> collection = Arrays.asList(new Integer[] {firstNewElement, secondNewElement});\n       list.addAll(0, collection);\n       assertEquals(\"Unique elements should be added.\", 3, list.size());\n       assertEquals(\"First new element should be at index 0\", firstNewElement, list.get(0));\n \n     // TODO: Generics\n     public void testCollections304() {\n-        List list = new LinkedList();\n-        SetUniqueList decoratedList = SetUniqueList.setUniqueList(list);\n+        List<String> list = new LinkedList<String>();\n+        SetUniqueList<String> decoratedList = SetUniqueList.setUniqueList(list);\n         String s1 = \"Apple\";\n         String s2 = \"Lemon\";\n         String s3 = \"Orange\";\n--- a/src/test/java/org/apache/commons/collections/list/TestTransformedList.java\n+++ b/src/test/java/org/apache/commons/collections/list/TestTransformedList.java\n     }\n \n     public void testTransformedList_decorateTransform() {\n-        List originalList = new ArrayList();\n+        List<Object> originalList = new ArrayList<Object>();\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n         for (int i = 0; i < els.length; i++) {\n             originalList.add(els[i]);\n         }\n-        List list = TransformedList.transformedList(originalList, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        List<?> list = TransformedList.transformedList(originalList, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, list.size());\n         for (int i = 0; i < els.length; i++) {\n             assertEquals(true, list.contains(new Integer((String) els[i])));", "timestamp": 1340501696, "metainfo": ""}