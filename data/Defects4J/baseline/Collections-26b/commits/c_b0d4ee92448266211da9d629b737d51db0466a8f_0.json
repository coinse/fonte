{"sha": "b0d4ee92448266211da9d629b737d51db0466a8f", "log": "Javadoc fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/main/java/org/apache/commons/collections/BufferUtils.java\n      * }\n      * </pre>\n      *\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to synchronize, must not be null\n      * @return a synchronized buffer backed by that buffer\n      * @throws IllegalArgumentException  if the Buffer is null\n      * are added to the buffer, rather than immediately throwing a\n      * <code>BufferUnderflowException</code>.\n      *\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to synchronize, must not be null\n      * @return a blocking buffer backed by that buffer\n      * @throws IllegalArgumentException  if the Buffer is null\n      * until new elements are added to the buffer, rather than immediately\n      * throwing a <code>BufferUnderflowException</code>.\n      *\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to synchronize, must not be null\n      * @param timeoutMillis  the timeout value in milliseconds, zero or less for no timeout\n      * @return a blocking buffer backed by that buffer\n      * removed from the buffer to allow the object(s) to be added and still\n      * maintain the maximum size.\n      *\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to make bounded,  must not be null\n      * @param maximumSize  the maximum size\n      * @return a bounded buffer backed by the given buffer\n      * removed from the buffer to allow the object(s) to be added and still\n      * maintain the maximum size or the timeout expires.\n      *\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer the buffer to make bounded, must not be null\n      * @param maximumSize the maximum size\n      * @param timeoutMillis  the timeout value in milliseconds, zero or less for no timeout\n     /**\n      * Returns an unmodifiable buffer backed by the given buffer.\n      *\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to make unmodifiable, must not be null\n      * @return an unmodifiable buffer backed by that buffer\n      * @throws IllegalArgumentException  if the Buffer is null\n      * It is important not to use the original buffer after invoking this method,\n      * as it is a backdoor for adding invalid objects.\n      *\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to predicate, must not be null\n      * @param predicate  the predicate used to evaluate new elements, must not be null\n      * @return a predicated buffer\n      * Existing entries in the specified buffer will not be transformed.\n      * If you want that behaviour, see {@link TransformedBuffer#transformedBuffer}.\n      *\n+     * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to predicate, must not be null\n      * @param transformer  the transformer for the buffer, must not be null\n      * @return a transformed buffer backed by the given buffer\n \n     /**\n      * Get an empty <code>Buffer</code>.\n-     * @param <E>\n-     * @return Buffer<E>\n+     *\n+     * @param <E> the type of the elements in the buffer\n+     * @return an empty {@link Buffer<E>}\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> Buffer<E> emptyBuffer() {\n--- a/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n     private ExtendedProperties defaults;\n \n     /**\n-     * The file connected to this repository (holding comments and\n-     * such).\n+     * The file connected to this repository (holding comments and such).\n      *\n      * @serial\n      */\n--- a/src/main/java/org/apache/commons/collections/FactoryUtils.java\n+++ b/src/main/java/org/apache/commons/collections/FactoryUtils.java\n      *\n      * @see org.apache.commons.collections.functors.ExceptionFactory\n      * \n+     * @param <T> the type that the factory creates\n      * @return the factory\n      */\n     public static <T> Factory<T> exceptionFactory() {\n      *\n      * @see org.apache.commons.collections.functors.ConstantFactory\n      * \n+     * @param <T> the type that the factory creates\n      * @param constantToReturn  the constant object to return each time in the factory\n      * @return the <code>constant</code> factory.\n      */\n      *\n      * @see org.apache.commons.collections.functors.PrototypeFactory\n      * \n+     * @param <T> the type that the factory creates\n      * @param prototype  the object to clone each time in the factory\n      * @return the <code>prototype</code> factory, or a {@link ConstantFactory#NULL_INSTANCE} if\n      * the {@code prototype} is {@code null}\n      * @throws IllegalArgumentException if the prototype cannot be cloned\n      */\n-    public static <T> Factory<T> prototypeFactory(T  prototype) {\n+    public static <T> Factory<T> prototypeFactory(T prototype) {\n         return PrototypeFactory.<T>prototypeFactory(prototype);\n     }\n \n      *\n      * @see org.apache.commons.collections.functors.InstantiateFactory\n      * \n+     * @param <T> the type that the factory creates\n      * @param classToInstantiate  the Class to instantiate each time in the factory\n      * @return the <code>reflection</code> factory\n      * @throws IllegalArgumentException if the classToInstantiate is null\n      *\n      * @see org.apache.commons.collections.functors.InstantiateFactory\n      * \n+     * @param <T> the type that the factory creates\n      * @param classToInstantiate  the Class to instantiate each time in the factory\n      * @param paramTypes  parameter types for the constructor, can be null\n      * @param args  the arguments to pass to the constructor, can be null", "timestamp": 1340464505, "metainfo": ""}