{"sha": "9d32f4bbfd98c4751ec9587a687f73487527d236", "log": "Add missing since tags.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/list/FixedSizeList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/FixedSizeList.java\n      * @param list  the list to decorate, must not be null\n      * @return a new fixed size list\n      * @throws IllegalArgumentException if list is null\n+     * @since 4.0\n      */\n     public static <E> FixedSizeList<E> fixedSizeList(final List<E> list) {\n         return new FixedSizeList<E>(list);\n--- a/src/main/java/org/apache/commons/collections4/list/GrowthList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/GrowthList.java\n      * @param list  the list to decorate, must not be null\n      * @return a new growth list\n      * @throws IllegalArgumentException if list is null\n+     * @since 4.0\n      */\n     public static <E> GrowthList<E> growthList(final List<E> list) {\n         return new GrowthList<E>(list);\n--- a/src/main/java/org/apache/commons/collections4/list/LazyList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/LazyList.java\n      * @param factory  the factory to use for creation, must not be null\n      * @return a new lazy list\n      * @throws IllegalArgumentException if list or factory is null\n+     * @since 4.0\n      */\n     public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory) {\n         return new LazyList<E>(list, factory);\n--- a/src/main/java/org/apache/commons/collections4/list/PredicatedList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/PredicatedList.java\n      * @return a new predicated list\n      * @throws IllegalArgumentException if list or predicate is null\n      * @throws IllegalArgumentException if the list contains invalid elements\n+     * @since 4.0\n      */\n     public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate) {\n         return new PredicatedList<T>(list, predicate);\n--- a/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java\n      * If the list contains duplicates, these are removed (first indexed one\n      * kept). A <code>HashSet</code> is used for the set behaviour.\n      *\n-     * @param <E>\n-     *            the element type\n-     * @param list\n-     *            the list to decorate, must not be null\n+     * @param <E>  the element type\n+     * @param list  the list to decorate, must not be null\n      * @return a new {@link SetUniqueList}\n-     * @throws IllegalArgumentException\n-     *             if list is null\n+     * @throws IllegalArgumentException if list is null\n+     * @since 4.0\n      */\n     public static <E> SetUniqueList<E> setUniqueList(final List<E> list) {\n         if (list == null) {\n \n     // -----------------------------------------------------------------------\n     /**\n-     * Constructor that wraps (not copies) the List and specifies the set to\n-     * use.\n+     * Constructor that wraps (not copies) the List and specifies the set to use.\n      * <p>\n      * The set and list must both be correctly initialised to the same elements.\n      *\n-     * @param set\n-     *            the set to decorate, must not be null\n-     * @param list\n-     *            the list to decorate, must not be null\n-     * @throws IllegalArgumentException\n-     *             if set or list is null\n+     * @param set  the set to decorate, must not be null\n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if set or list is null\n      */\n     protected SetUniqueList(final List<E> list, final Set<E> set) {\n         super(list);\n      * method returns <code>true</code> always. However this class may return\n      * <code>false</code> because of the <code>Set</code> behaviour.\n      *\n-     * @param object\n-     *            the object to add\n+     * @param object  the object to add\n      * @return true if object was added\n      */\n     @Override\n      * that the element is always inserted. This may not happen with this\n      * implementation.\n      *\n-     * @param index\n-     *            the index to insert at\n-     * @param object\n-     *            the object to add\n+     * @param index  the index to insert at\n+     * @param object  the object to add\n      */\n     @Override\n     public void add(final int index, final E object) {\n      * that the elements are always inserted. This may not happen with this\n      * implementation.\n      *\n-     * @param coll\n-     *            the collection to add in iterator order\n+     * @param coll  the collection to add in iterator order\n      * @return true if this collection changed\n      */\n     @Override\n      * that the elements are always inserted. This may not happen with this\n      * implementation.\n      *\n-     * @param index\n-     *            the index to insert at\n-     * @param coll\n-     *            the collection to add in iterator order\n+     * @param index  the index to insert at\n+     * @param coll  the collection to add in iterator order\n      * @return true if this collection changed\n      */\n     @Override\n      * duplicate is removed. If the object is not already in the list then a\n      * normal set occurs. If it is present, then the old version is removed.\n      *\n-     * @param index\n-     *            the index to insert at\n-     * @param object\n-     *            the object to set\n+     * @param index  the index to insert at\n+     * @param object  the object to set\n      * @return the previous object\n      */\n     @Override\n      * Create a new {@link Set} with the same type as the provided {@code set}\n      * and populate it with all elements of {@code list}.\n      *\n-     * @param set\n-     *            the {@link Set} to be used as return type, must not be null\n-     * @param list\n-     *            the {@link List} to populate the {@link Set}\n+     * @param set  the {@link Set} to be used as return type, must not be null\n+     * @param list  the {@link List} to populate the {@link Set}\n      * @return a new {@link Set} populated with all elements of the provided\n-     *         {@link List}\n+     *   {@link List}\n      */\n     @SuppressWarnings(\"unchecked\")\n     protected Set<E> createSetBasedOnList(final Set<E> set, final List<E> list) {\n--- a/src/main/java/org/apache/commons/collections4/list/TransformedList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/TransformedList.java\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed list\n      * @throws IllegalArgumentException if list or transformer is null\n+     * @since 4.0\n      */\n     public static <E> TransformedList<E> transformingList(final List<E> list,\n                                                           final Transformer<? super E, ? extends E> transformer) {\n--- a/src/main/java/org/apache/commons/collections4/list/UnmodifiableList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/UnmodifiableList.java\n      * @param list  the list to decorate, must not be null\n      * @return a new unmodifiable list\n      * @throws IllegalArgumentException if list is null\n+     * @since 4.0\n      */\n     public static <E> List<E> unmodifiableList(final List<E> list) {\n         if (list instanceof Unmodifiable) {", "timestamp": 1367791132, "metainfo": ""}