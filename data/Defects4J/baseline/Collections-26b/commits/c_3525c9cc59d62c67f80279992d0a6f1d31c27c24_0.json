{"sha": "3525c9cc59d62c67f80279992d0a6f1d31c27c24", "log": "Actually test the class we are supposed to be testing   ", "commit": "\n--- a/src/test/org/apache/commons/collections/decorators/TestTransformedSortedMap.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestTransformedSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedSortedMap.java,v 1.3 2003/10/02 23:01:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedSortedMap.java,v 1.4 2003/10/06 23:44:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.decorators;\n \n-import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n import org.apache.commons.collections.AbstractTestSortedMap;\n \n /**\n- * Extension of {@link TestSortedMap} for exercising the {@link TransformedSortedMap}\n+ * Extension of {@link AbstractTestSortedMap} for exercising the {@link TransformedSortedMap}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/10/02 23:01:09 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/06 23:44:23 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     public Map makeEmptyMap() {\n-        return TransformedMap.decorate(new HashMap(), TestTransformedCollection.NOOP_TRANSFORMER, TestTransformedCollection.NOOP_TRANSFORMER);\n+        return TransformedSortedMap.decorate(new TreeMap(), TestTransformedCollection.NOOP_TRANSFORMER, TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n     public void testTransformedMap() {\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n \n-        Map map = TransformedMap.decorate(new HashMap(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER, null);\n+        Map map = TransformedSortedMap.decorate(new TreeMap(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER, null);\n         assertEquals(0, map.size());\n         for (int i = 0; i < els.length; i++) {\n             map.put(els[i], els[i]);\n             assertEquals(i + 1, map.size());\n             assertEquals(true, map.containsKey(new Integer((String) els[i])));\n-            assertEquals(false, map.containsKey(els[i]));\n+            try {\n+                map.containsKey(els[i]);\n+                fail();\n+            } catch (ClassCastException ex) {}\n             assertEquals(true, map.containsValue(els[i]));\n             assertEquals(els[i], map.get(new Integer((String) els[i])));\n         }\n         \n-        assertEquals(null, map.remove(els[0]));\n+        try {\n+            map.remove(els[0]);\n+            fail();\n+        } catch (ClassCastException ex) {}\n         assertEquals(els[0], map.remove(new Integer((String) els[0])));\n         \n-        map = TransformedMap.decorate(new HashMap(), null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        map = TransformedSortedMap.decorate(new TreeMap(), null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(0, map.size());\n         for (int i = 0; i < els.length; i++) {\n             map.put(els[i], els[i]);", "timestamp": 1065483863, "metainfo": ""}