{"sha": "c71a9e8c2b1baa24e133ce01b0ba91df9686ad61", "log": "[COLLECTIONS-296] Renamed CollectionUtils.merge to collate, simplify implementation by using a CollatingIterator.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n import org.apache.commons.collections4.collection.UnmodifiableCollection;\n import org.apache.commons.collections4.functors.Equator;\n import org.apache.commons.collections4.functors.TruePredicate;\n+import org.apache.commons.collections4.iterators.CollatingIterator;\n import org.apache.commons.collections4.iterators.PermutationIterator;\n \n /**\n      * @throws IllegalArgumentException if either collection is null\n      * @since 4.0\n      */\n-    public static <O extends Comparable<? super O>> List<O> merge(Collection<? extends O> a,\n-                                                                  Collection<? extends O> b) {\n-        return merge(a, b, ComparatorUtils.<O>naturalComparator(), true);\n+    public static <O extends Comparable<? super O>> List<O> collate(Collection<? extends O> a,\n+                                                                    Collection<? extends O> b) {\n+        return collate(a, b, ComparatorUtils.<O>naturalComparator(), true);\n     }\n \n     /**\n      * @throws IllegalArgumentException if either collection is null\n      * @since 4.0 \n      */\n-    public static <O extends Comparable<? super O>> List<O> merge(final Collection<? extends O> a,\n-                                                                  final Collection<? extends O> b,\n-                                                                  final boolean includeDuplicates) {\n-        return merge(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n+    public static <O extends Comparable<? super O>> List<O> collate(final Collection<? extends O> a,\n+                                                                    final Collection<? extends O> b,\n+                                                                    final boolean includeDuplicates) {\n+        return collate(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n     }\n \n     /**\n      * @throws IllegalArgumentException if either collection or the comparator is null\n      * @since 4.0 \n      */\n-    public static <O> List<O> merge(final Collection<? extends O> a, final Collection<? extends O> b,\n-                                    final Comparator<? super O> c) {\n-        return merge(a, b, c, true);\n+    public static <O> List<O> collate(final Collection<? extends O> a, final Collection<? extends O> b,\n+                                      final Comparator<? super O> c) {\n+        return collate(a, b, c, true);\n     }\n     \n     /**\n      * @throws IllegalArgumentException if either collection or the comparator is null\n      * @since 4.0 \n      */\n-    public static <O> List<O> merge(final Collection<? extends O> a, final Collection<? extends O> b,\n-                                    final Comparator<? super O> c, final boolean includeDuplicates) {\n+    public static <O> List<O> collate(final Collection<? extends O> a, final Collection<? extends O> b,\n+                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n         \n         if (a == null || b == null) {\n             throw new IllegalArgumentException(\"The collections must not be null\");\n             throw new IllegalArgumentException(\"The comparator must not be null\");\n         }\n \n-        final List<O> mergedList = new ArrayList<O>(a.size() + b.size());\n-        \n-        // if either collection is empty, just return the other one\n-        if (a.isEmpty() || b.isEmpty()) {\n-            mergedList.addAll(a.isEmpty() ? b : a);\n+        final int totalSize = Math.max(1, a.size() + b.size());\n+        final Iterator<O> iterator = new CollatingIterator<O>(c, a.iterator(), b.iterator());\n+        if (includeDuplicates) {\n+            return IteratorUtils.toList(iterator, totalSize);\n+        } else {\n+            final ArrayList<O> mergedList = new ArrayList<O>(totalSize);\n+\n+            O lastItem = null;\n+            while (iterator.hasNext()) {\n+                final O item = iterator.next();\n+                if (lastItem == null || !lastItem.equals(item)) {\n+                    mergedList.add(item);\n+                }\n+                lastItem = item;\n+            }\n+\n+            mergedList.trimToSize();\n             return mergedList;\n-        }\n-\n-        final Iterator<? extends O> it1 = a.iterator();\n-        final Iterator<? extends O> it2 = b.iterator();\n-        O o1 = it1.next();\n-        O o2 = it2.next();\n-        O last = null;\n-        while (true) {\n-            final int x = c.compare(o1, o2);\n-            if (x <= 0) {\n-                last = addItemToList(o1, mergedList, last, includeDuplicates);\n-                if (it1.hasNext()) {\n-                    o1 = it1.next();\n-                } else {\n-                    // a is empty, so add current element of b\n-                    last = addItemToList(o2, mergedList, last, includeDuplicates);\n-                    break;\n-                }\n-            } else {\n-                last = addItemToList(o2, mergedList, last, includeDuplicates);\n-                if (it2.hasNext()) {\n-                    o2 = it2.next();\n-                } else {\n-                    // b is empty, so add current element of a\n-                    last = addItemToList(o1, mergedList, last, includeDuplicates);\n-                    break;\n-                }                \n-            }\n-        }\n-\n-        // add the remaining elements from the non-empty iterator\n-        final Iterator<? extends O> it = it1.hasNext() ? it1 : it2;\n-        while (it.hasNext()) {\n-            last = addItemToList(it.next(), mergedList, last, includeDuplicates);\n-        }\n-        \n-        return mergedList;\n-    }\n-\n-    /**\n-     * Adds an item to the specified list.\n-     *\n-     * @param item  the item to add\n-     * @param list  the list to use\n-     * @param lastItem  the last added item, may be null\n-     * @param includeDuplicates  whether duplicate entries are allowed\n-     * @return the last added item\n-     * @since 4.0 \n-     */\n-    private static <E> E addItemToList(final E item, final List<E> list, final E lastItem,\n-                                       final boolean includeDuplicates) {\n-        if (includeDuplicates || lastItem == null || !lastItem.equals(item)) {\n-            list.add(item);\n-            return item;\n-        } else {\n-            return lastItem;\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n     }\n         \n     @Test(expected=IllegalArgumentException.class)\n-    public void mergeException1() {\n-        CollectionUtils.merge(collectionA, null);\n+    public void collateException1() {\n+        CollectionUtils.collate(collectionA, null);\n     }\n \n     @Test(expected=IllegalArgumentException.class)\n-    public void mergeException2() {\n-        CollectionUtils.merge(collectionA, collectionC, null);\n-    }\n-\n-    @Test\n-    public void testMerge() {\n-        List<Integer> result = CollectionUtils.merge(emptyCollection, emptyCollection);\n+    public void collateException2() {\n+        CollectionUtils.collate(collectionA, collectionC, null);\n+    }\n+\n+    @Test\n+    public void testCollate() {\n+        List<Integer> result = CollectionUtils.collate(emptyCollection, emptyCollection);\n         assertEquals(\"Merge empty with empty\", 0, result.size());\n \n-        result = CollectionUtils.merge(collectionA, emptyCollection);\n+        result = CollectionUtils.collate(collectionA, emptyCollection);\n         assertEquals(\"Merge empty with non-empty\", collectionA, result);\n \n-        List<Integer> result1 = CollectionUtils.merge(collectionD, collectionE);\n-        List<Integer> result2 = CollectionUtils.merge(collectionE, collectionD);\n+        List<Integer> result1 = CollectionUtils.collate(collectionD, collectionE);\n+        List<Integer> result2 = CollectionUtils.collate(collectionE, collectionD);\n         assertEquals(\"Merge two lists 1\", result1, result2);\n         \n         List<Integer> combinedList = new ArrayList<Integer>();\n         final Comparator<Integer> reverseComparator =\n                 ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n \n-        result = CollectionUtils.merge(emptyCollection, emptyCollection, reverseComparator);\n+        result = CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);\n         assertEquals(\"Comparator Merge empty with empty\", 0, result.size());\n \n         Collections.reverse((List<Integer>) collectionD);\n         Collections.reverse((List<Integer>) collectionE);\n         Collections.reverse(combinedList);\n \n-        result1 = CollectionUtils.merge(collectionD, collectionE, reverseComparator);\n-        result2 = CollectionUtils.merge(collectionE, collectionD, reverseComparator);\n+        result1 = CollectionUtils.collate(collectionD, collectionE, reverseComparator);\n+        result2 = CollectionUtils.collate(collectionE, collectionD, reverseComparator);\n         assertEquals(\"Comparator Merge two lists 1\", result1, result2);\n         assertEquals(\"Comparator Merge two lists 2\", combinedList, result2);\n     }\n     \n     @Test\n-    public void testMergeIgnoreDuplicates() {\n-        List<Integer> result1 = CollectionUtils.merge(collectionD, collectionE, false);\n-        List<Integer> result2 = CollectionUtils.merge(collectionE, collectionD, false);\n+    public void testCollateIgnoreDuplicates() {\n+        List<Integer> result1 = CollectionUtils.collate(collectionD, collectionE, false);\n+        List<Integer> result2 = CollectionUtils.collate(collectionE, collectionD, false);\n         assertEquals(\"Merge two lists 1 - ignore duplicates\", result1, result2);\n         \n         Set<Integer> combinedSet = new HashSet<Integer>();", "timestamp": 1367157517, "metainfo": ""}