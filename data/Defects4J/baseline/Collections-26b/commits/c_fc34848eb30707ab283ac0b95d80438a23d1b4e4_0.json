{"sha": "fc34848eb30707ab283ac0b95d80438a23d1b4e4", "log": "Refactor events so listener is defined as an Object for flexibility   ", "commit": "\n--- a/src/java/org/apache/commons/collections/decorators/ObservedCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/ObservedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/ObservedCollection.java,v 1.2 2003/08/31 17:24:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/ObservedCollection.java,v 1.3 2003/08/31 21:09:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Iterator;\n \n import org.apache.commons.collections.event.ModificationHandler;\n-import org.apache.commons.collections.event.ModificationListener;\n import org.apache.commons.collections.event.StandardModificationHandler;\n import org.apache.commons.collections.event.StandardModificationListener;\n \n  * uses a technique other than listeners to communicate events.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:24:46 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 21:09:49 $\n  * \n  * @author Stephen Colebourne\n  */\n      * @return the listeners\n      * @throws UnsupportedOperationException if the handler does not support listeners\n      */\n-    public ModificationListener[] getModificationListeners() {\n+    public Object[] getModificationListeners() {\n         return getHandler().getModificationListeners();\n     }\n     \n      * This method simply delegates to the handler.\n      * <p>\n      * No error occurs if the listener is <code>null</code>.\n+     * <p>\n+     * The listener does not necessarily have to be a listener in the classic\n+     * JavaBean sense. It is entirely up to the handler as to how it interprets\n+     * the listener parameter. A ClassCastException is thrown if the handler\n+     * cannot interpret the parameter.\n      * \n      * @param listener  the listener to add, may be null (ignored)\n      * @throws ClassCastException if the listener is not of the correct type\n      * @throws UnsupportedOperationException if the handler does not support listeners\n      */\n-    public void addModificationListener(ModificationListener listener) {\n+    public void addModificationListener(Object listener) {\n         getHandler().addModificationListener(listener);\n     }\n     \n      * @param listener  the listener to remove, may be null (ignored)\n      * @throws UnsupportedOperationException if the handler does not support listeners\n      */\n-    public void removeModificationListener(ModificationListener listener) {\n+    public void removeModificationListener(Object listener) {\n         getHandler().removeModificationListener(listener);\n     }\n     \n--- a/src/java/org/apache/commons/collections/event/ModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/event/ModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/ModificationHandler.java,v 1.2 2003/08/31 17:25:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/ModificationHandler.java,v 1.3 2003/08/31 21:09:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * that forwards to single points.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:25:49 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 21:09:49 $\n  * \n  * @author Stephen Colebourne\n  */\n      * @return the listeners\n      * @throws UnsupportedOperationException if the handler does not support listeners\n      */\n-    public ModificationListener[] getModificationListeners() {\n+    public Object[] getModificationListeners() {\n         throw new UnsupportedOperationException(\"Listeners not supported by \" + getClass().getName());\n     }\n     \n      * Adds a listener to the list held in the handler.\n      * <p>\n      * No error occurs if the listener is <code>null</code>.\n+     * <p>\n+     * The listener does not necessarily have to be a listener in the classic\n+     * JavaBean sense. It is entirely up to the handler as to how it interprets\n+     * the listener parameter. A ClassCastException is thrown if the handler\n+     * cannot interpret the parameter.\n      * <p>\n      * This implementation throws UnsupportedOperationException.\n      * \n      * @throws ClassCastException if the listener is not of the correct type\n      * @throws UnsupportedOperationException if the handler does not support listeners\n      */\n-    public void addModificationListener(ModificationListener listener) {\n+    public void addModificationListener(Object listener) {\n         throw new UnsupportedOperationException(\"Listeners not supported by \" + getClass().getName());\n     }\n     \n      * @param listener  the listener to remove, may be null (ignored)\n      * @throws UnsupportedOperationException if the handler does not support listeners\n      */\n-    public void removeModificationListener(ModificationListener listener) {\n+    public void removeModificationListener(Object listener) {\n         throw new UnsupportedOperationException(\"Listeners not supported by \" + getClass().getName());\n     }\n     \n--- a/src/java/org/apache/commons/collections/event/StandardModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/event/StandardModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/StandardModificationHandler.java,v 1.2 2003/08/31 17:25:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/StandardModificationHandler.java,v 1.3 2003/08/31 21:09:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * </ul>\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:25:49 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 21:09:49 $\n  * \n  * @author Stephen Colebourne\n  */\n      * \n      * @return the listeners\n      */\n-    public synchronized ModificationListener[] getModificationListeners() {\n-        ModificationListener[] lnrs = new ModificationListener[holders.length];\n+    public synchronized Object[] getModificationListeners() {\n+        Object[] lnrs = new Object[holders.length];\n         for (int i = 0; i < holders.length; i++) {\n             lnrs[i] = holders[i].listener;\n         }\n      * @param listener  the listener to add, may be null (ignored)\n      * @throws ClassCastException if the listener is not a StandardModificationListener\n      */\n-    public void addModificationListener(ModificationListener listener) {\n-        addModificationListener(listener, -1, -1);\n+    public void addModificationListener(Object listener) {\n+        addModificationListener((StandardModificationListener) listener, -1, -1);\n     }\n     \n     /**\n      * @param listener  the listener to add, may be null (ignored)\n      * @param preMask  the mask for pre events (0 for none, -1 for all)\n      * @param postMask  the mask for post events (0 for none, -1 for all)\n-     * @throws ClassCastException if the listener is not a StandardModificationListener\n-     */\n-    public synchronized void addModificationListener(ModificationListener listener, int preMask, int postMask) {\n+     */\n+    public synchronized void addModificationListener(StandardModificationListener listener, int preMask, int postMask) {\n         if (listener != null) {\n             int oldSize = holders.length;\n             Holder[] array = new Holder[oldSize + 1];\n             System.arraycopy(holders, 0, array, 0, oldSize);\n-            array[oldSize] = new Holder((StandardModificationListener) listener, preMask, postMask);\n+            array[oldSize] = new Holder(listener, preMask, postMask);\n             holders = array;\n             calculateMasks();\n         }\n      * \n      * @param listener  the listener to remove, may be null (ignored)\n      */\n-    public synchronized void removeModificationListener(ModificationListener listener) {\n+    public synchronized void removeModificationListener(Object listener) {\n         if (listener != null) {\n             switch (holders.length) {\n                 case 0:\n--- a/src/java/org/apache/commons/collections/event/StandardModificationListener.java\n+++ b/src/java/org/apache/commons/collections/event/StandardModificationListener.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/StandardModificationListener.java,v 1.2 2003/08/31 17:25:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/StandardModificationListener.java,v 1.3 2003/08/31 21:09:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.event;\n \n+import java.util.EventListener;\n+\n /**\n  * A listener that receives events from the <code>StandardModificationHandler</code>.\n  * <p>\n  * </ol>\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:25:49 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 21:09:49 $\n  * \n  * @author Stephen Colebourne\n  */\n-public interface StandardModificationListener extends ModificationListener {\n+public interface StandardModificationListener extends EventListener {\n \n     /**\n      * A collection modification is occurring.\n--- a/src/test/org/apache/commons/collections/decorators/ObservedTestHelper.java\n+++ b/src/test/org/apache/commons/collections/decorators/ObservedTestHelper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/ObservedTestHelper.java,v 1.2 2003/08/31 17:28:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/ObservedTestHelper.java,v 1.3 2003/08/31 21:09:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Assert;\n \n import org.apache.commons.collections.event.ModificationEventType;\n-import org.apache.commons.collections.event.ModificationListener;\n import org.apache.commons.collections.event.StandardModificationEvent;\n import org.apache.commons.collections.event.StandardModificationHandler;\n import org.apache.commons.collections.event.StandardModificationListener;\n  * {@link ObservedCollection} implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:42 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 21:09:49 $\n  * \n  * @author Stephen Colebourne\n  */\n         Assert.assertEquals(0, coll.getModificationListeners().length);\n         \n         try {\n-            coll.addModificationListener(new ModificationListener() {});\n+            coll.addModificationListener(new Object());\n             Assert.fail();\n         } catch (ClassCastException ex) {\n         }", "timestamp": 1062364189, "metainfo": ""}