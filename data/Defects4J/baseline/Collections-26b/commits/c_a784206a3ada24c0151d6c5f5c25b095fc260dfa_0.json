{"sha": "a784206a3ada24c0151d6c5f5c25b095fc260dfa", "log": "* refactored test framework slightly to support more interesting tests and to make the contract more enforceable * added some new tests and test cases   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.3 2001/04/16 22:42:04 jvanzyl Exp $\n- * $Revision: 1.3 $\n- * $Date: 2001/04/16 22:42:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.4 2001/04/20 16:54:10 rwaldhoff Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2001/04/20 16:54:10 $\n  *\n  * ====================================================================\n  *\n import junit.framework.*;\n \n /**\n+ * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.3 2001/04/16 22:42:04 jvanzyl Exp $\n+ * @version $Id: TestAll.java,v 1.4 2001/04/20 16:54:10 rwaldhoff Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n--- a/src/test/org/apache/commons/collections/TestArrayStack.java\n+++ b/src/test/org/apache/commons/collections/TestArrayStack.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestArrayStack.java,v 1.2 2001/04/14 19:50:31 craigmcc Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/04/14 19:50:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestArrayStack.java,v 1.3 2001/04/20 16:54:08 rwaldhoff Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/04/20 16:54:08 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author Craig McClanahan\n- * @version $Id: TestArrayStack.java,v 1.2 2001/04/14 19:50:31 craigmcc Exp $\n+ * @version $Id: TestArrayStack.java,v 1.3 2001/04/20 16:54:08 rwaldhoff Exp $\n  */\n \n public class TestArrayStack extends TestList {\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    public List makeList() {\n+        return new ArrayStack();\n+    }\n+\n     private ArrayStack stack = null;\n \n     public void setUp() {\n         stack = new ArrayStack();\n-        setList(stack);\n     }\n-\n \n     public void testNewStack() {\n \n--- a/src/test/org/apache/commons/collections/TestCollection.java\n+++ b/src/test/org/apache/commons/collections/TestCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCollection.java,v 1.1 2001/04/14 15:39:51 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/04/14 15:39:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCollection.java,v 1.2 2001/04/20 16:54:08 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/04/20 16:54:08 $\n  *\n  * ====================================================================\n  *\n import java.util.NoSuchElementException;\n \n /**\n+ * Tests base {@link java.util.Collection} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeCollection} method.\n+ * <p>\n+ * If your {@link Collection} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link Collection} fails.\n+ *\n  * @author Rodney Waldhoff\n- * @version $Id: TestCollection.java,v 1.1 2001/04/14 15:39:51 rwaldhoff Exp $\n+ * @version $Id: TestCollection.java,v 1.2 2001/04/20 16:54:08 rwaldhoff Exp $\n  */\n-public abstract class TestCollection extends TestCase {\n+public abstract class TestCollection extends TestObject {\n     public TestCollection(String testName) {\n         super(testName);\n     }\n \n-    private Collection _collection = null;\n-\n-    protected void setCollection(Collection c) {\n-        _collection = c;\n+    /**\n+     * Return a new, empty {@link Collection} to used for testing.\n+     */\n+    public abstract Collection makeCollection();\n+\n+    public Object makeObject() {\n+        return makeCollection();\n     }\n \n     // optional operation\n     public void testCollectionAdd() {\n-        boolean added1 = false;\n-        try {\n-            added1 = _collection.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n-\n-        boolean added2 = false;\n-        try {\n-            added2 = _collection.add(\"element2\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n+        Collection c = makeCollection();\n+        boolean added1 = tryToAdd(c,\"element1\");\n+        boolean added2 = tryToAdd(c,\"element2\");\n     }\n \n     // optional operation\n     public void testCollectionAddAll() {\n+        Collection c = makeCollection();\n         Collection col = new ArrayList();\n         col.add(\"element1\");\n         col.add(\"element2\");\n         col.add(\"element3\");\n         boolean added = false;\n         try {\n-            added = _collection.addAll(col);\n+            added = c.addAll(col);\n         } catch(UnsupportedOperationException e) {\n             // ignored, must not be supported\n         } catch(ClassCastException e) {\n \n     // optional operation\n     public void testCollectionClear() {\n+        Collection c = makeCollection();\n         boolean cleared = false;\n         try {\n-            _collection.clear();\n+            c.clear();\n             cleared = true;\n         } catch(UnsupportedOperationException e) {\n             // ignored, must not be supported\n         }\n \n         if(cleared) {\n-            assert(\"After Collection.clear(), Collection.isEmpty() should be true.\",_collection.isEmpty());\n-        }\n-\n-        boolean added = false;\n-        try {\n-            added = _collection.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n-\n-        if(added) {\n-            assert(\"After element is added, Collection.isEmpty() should be false.\",!_collection.isEmpty());\n+            assert(\"After Collection.clear(), Collection.isEmpty() should be true.\",c.isEmpty());\n+        }\n+\n+        boolean added = tryToAdd(c,\"element1\");\n+\n+        if(added) {\n+            assert(\"After element is added, Collection.isEmpty() should be false.\",!c.isEmpty());\n             boolean cleared2 = false;\n             try {\n-                _collection.clear();\n+                c.clear();\n                 cleared2 = true;\n             } catch(UnsupportedOperationException e) {\n                 // ignored, must not be supported\n                 fail(\"Collection.clear should only throw UnsupportedOperationException. Found \" + t.toString());\n             }\n             if(cleared2) {\n-                assert(\"After Collection.clear(), Collection.isEmpty() should be true.\",_collection.isEmpty());\n+                assert(\"After Collection.clear(), Collection.isEmpty() should be true.\",c.isEmpty());\n             }\n         }\n     }\n \n     public void testCollectionContains() {\n-        boolean added1 = false;\n-        try {\n-            added1 = _collection.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n-        assert(\"If an element was added, it should be contained.\",added1 == _collection.contains(\"element1\"));\n-\n-        boolean added2 = false;\n-        try {\n-            added2 = _collection.add(\"element2\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n-        assert(\"If an element was added, it should be contained.\",added1 == _collection.contains(\"element1\"));\n-        assert(\"If an element was added, it should be contained.\",added2 == _collection.contains(\"element2\"));\n+        Collection c = makeCollection();\n+        assert(\"Empty Collection shouldn't contain element.\",!c.contains(\"element1\"));\n+        boolean added1 = tryToAdd(c,\"element1\");\n+        assert(\"[1] If an element was added, it should be contained, if it wasn't, it shouldn't.\",added1 == c.contains(\"element1\"));\n+\n+        assert(\"Shouldn't be contained.\",!c.contains(\"element2\"));\n+        boolean added2 = tryToAdd(c,\"element2\");\n+        assert(\"[2] If an element was added, it should be contained, if it wasn't, it shouldn't.\",added1 == c.contains(\"element1\"));\n+        assert(\"[3] If an element was added, it should be contained, if it wasn't, it shouldn't.\",added2 == c.contains(\"element2\"));\n     }\n \n     public void testCollectionContainsAll() {\n+        Collection c = makeCollection();\n         Collection col = new ArrayList();\n-        assert(\"Every Collection should contain all elements of an empty Collection.\",_collection.containsAll(col));\n+        assert(\"Every Collection should contain all elements of an empty Collection.\",c.containsAll(col));\n         col.add(\"element1\");\n-        assert(\"Empty Collection shouldn't contain all elements of a non-empty Collection.\",!_collection.containsAll(col));\n-\n-        boolean added1 = false;\n-        try {\n-            added1 = _collection.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n+        assert(\"Empty Collection shouldn't contain all elements of a non-empty Collection.\",!c.containsAll(col));\n+\n+        boolean added1 = tryToAdd(c,\"element1\");\n         if(added1) {\n-            assert(\"Should contain all.\",_collection.containsAll(col));\n+            assert(\"[1] Should contain all.\",c.containsAll(col));\n         }\n \n         col.add(\"element2\");\n-        assert(\"Shouldn't contain all.\",!_collection.containsAll(col));\n-\n-        boolean added2 = false;\n-        try {\n-            added2 = _collection.add(\"element2\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n+        assert(\"Shouldn't contain all.\",!c.containsAll(col));\n+\n+        boolean added2 = tryToAdd(c,\"element2\");\n         if(added1 && added2) {\n-            assert(\"Should contain all.\",_collection.containsAll(col));\n-        }\n+            assert(\"[2] Should contain all.\",c.containsAll(col));\n+        }\n+    }\n+\n+    public void testCollectionEqualsSelf() {\n+        Collection c = makeCollection();\n+        assertEquals(\"A Collection should equal itself\",c,c);\n+        tryToAdd(c,\"element1\");\n+        assertEquals(\"A Collection should equal itself\",c,c);\n+        tryToAdd(c,\"element1\");\n+        tryToAdd(c,\"element2\");\n+        assertEquals(\"A Collection should equal itself\",c,c);\n     }\n \n     public void testCollectionEquals() {\n-        assertEquals(\"A Collection should equal itself\",_collection,_collection);\n-        try {\n-            _collection.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n-        assertEquals(\"A Collection should equal itself\",_collection,_collection);\n-        try {\n-            _collection.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n-        assertEquals(\"A Collection should equal itself\",_collection,_collection);\n-    }\n-\n-    public void testCollectionHashCode() {\n-        assertEquals(\"A Collection's hashCode should equal itself\",_collection.hashCode(),_collection.hashCode());\n+        Collection c1 = makeCollection();\n+        Collection c2 = makeCollection();\n+        assertEquals(\"Empty Collections are equal.\",c1,c2);\n+\n+        boolean added1_1 = tryToAdd(c1,\"element1\");\n+        if(added1_1) {\n+            assert(\"Empty Collection not equal to non-empty Collection.\",!c2.equals(c1));\n+            assert(\"Non-empty Collection not equal to empty Collection.\",!c1.equals(c2));\n+        }\n+\n+        boolean added1_2 = tryToAdd(c2,\"element1\");\n+        assertEquals(\"After duplicate adds, Collections should be equal.\",c1,c2);\n+\n+        boolean added2_1 = tryToAdd(c1,\"element2\");\n+        boolean added3_2 = tryToAdd(c2,\"element3\");\n+        if(added2_1 || added3_2) {\n+            assert(\"Should not be equal.\",!c1.equals(c2));\n+        }\n+    }\n+\n+    public void testCollectionHashCodeEqualsSelfHashCode() {\n+        Collection c = makeCollection();\n+        assertEquals(\"hashCode should be repeatable\",c.hashCode(),c.hashCode());\n+        tryToAdd(c,\"element1\");\n+        assertEquals(\"after add, hashCode should be repeatable\",c.hashCode(),c.hashCode());\n+    }\n+\n+    public void testCollectionHashCodeEqualsContract() {\n+        Collection c1 = makeCollection();\n+        if(c1.equals(c1)) {\n+            assertEquals(\"[1] When two objects are equal, their hashCodes should be also.\",c1.hashCode(),c1.hashCode());\n+        }\n+        Collection c2 = makeCollection();\n+        if(c1.equals(c2)) {\n+            assertEquals(\"[2] When two objects are equal, their hashCodes should be also.\",c1.hashCode(),c2.hashCode());\n+        }\n+        tryToAdd(c1,\"element1\");\n+        tryToAdd(c2,\"element1\");\n+        if(c1.equals(c2)) {\n+            assertEquals(\"[3] When two objects are equal, their hashCodes should be also.\",c1.hashCode(),c2.hashCode());\n+        }\n     }\n \n     public void testCollectionIsEmpty() {\n-        assert(\"New Collection should be empty.\",_collection.isEmpty());\n-        boolean added = false;\n-        try {\n-            added = _collection.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n-        if(added) {\n-            assert(\"If an element was added, the Collection.isEmpty() should return false.\",!_collection.isEmpty());\n+        Collection c = makeCollection();\n+        assert(\"New Collection should be empty.\",c.isEmpty());\n+        boolean added = false;\n+        try {\n+            added = c.add(\"element1\");\n+        } catch(UnsupportedOperationException e) {\n+            // ignored, must not be supported\n+        } catch(ClassCastException e) {\n+            // ignored, type must not be supported\n+        } catch(IllegalArgumentException e) {\n+            // ignored, element must not be supported\n+        } catch(Throwable t) {\n+            t.printStackTrace();\n+            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n+        }\n+        if(added) {\n+            assert(\"If an element was added, the Collection.isEmpty() should return false.\",!c.isEmpty());\n         }\n     }\n \n     public void testCollectionIterator() {\n-        Iterator it1 = _collection.iterator();\n+        Collection c = makeCollection();\n+        Iterator it1 = c.iterator();\n         assert(\"Iterator for empty Collection shouldn't have next.\",!it1.hasNext());\n         try {\n             it1.next();\n \n         boolean added = false;\n         try {\n-            added = _collection.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n-        if(added) {\n-            Iterator it2 = _collection.iterator();\n+            added = c.add(\"element1\");\n+        } catch(UnsupportedOperationException e) {\n+            // ignored, must not be supported\n+        } catch(ClassCastException e) {\n+            // ignored, type must not be supported\n+        } catch(IllegalArgumentException e) {\n+            // ignored, element must not be supported\n+        } catch(Throwable t) {\n+            t.printStackTrace();\n+            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n+        }\n+        if(added) {\n+            Iterator it2 = c.iterator();\n             assert(\"Iterator for non-empty Collection should have next.\",it2.hasNext());\n             assertEquals(\"element1\",it2.next());\n             assert(\"Iterator at end of Collection shouldn't have next.\",!it2.hasNext());\n \n     // optional operation\n     public void testCollectionRemove() {\n-        boolean added = false;\n-        try {\n-            added = _collection.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n-\n-        try {\n-            assert(\"Shouldn't be able to remove an element that wasn't added.\",!_collection.remove(\"element2\"));\n+        Collection c = makeCollection();\n+        boolean added = false;\n+        try {\n+            added = c.add(\"element1\");\n+        } catch(UnsupportedOperationException e) {\n+            // ignored, must not be supported\n+        } catch(ClassCastException e) {\n+            // ignored, type must not be supported\n+        } catch(IllegalArgumentException e) {\n+            // ignored, element must not be supported\n+        } catch(Throwable t) {\n+            t.printStackTrace();\n+            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n+        }\n+\n+        try {\n+            assert(\"Shouldn't be able to remove an element that wasn't added.\",!c.remove(\"element2\"));\n         } catch(UnsupportedOperationException e) {\n         } catch(Throwable t) {\n             t.printStackTrace();\n         }\n \n         try {\n-            assert(\"If added, should be removed by call to remove.\",added == _collection.remove(\"element1\"));\n-            assert(\"If removed, shouldn't be contained.\",!_collection.contains(\"element1\"));\n+            assert(\"If added, should be removed by call to remove.\",added == c.remove(\"element1\"));\n+            assert(\"If removed, shouldn't be contained.\",!c.contains(\"element1\"));\n         } catch(UnsupportedOperationException e) {\n         } catch(Throwable t) {\n             t.printStackTrace();\n \n     // optional operation\n     public void testCollectionRemoveAll() {\n-        assert(\"Initial Collection is empty.\",_collection.isEmpty());\n-        try {\n-            _collection.removeAll(_collection);\n+        Collection c = makeCollection();\n+        assert(\"Initial Collection is empty.\",c.isEmpty());\n+        try {\n+            c.removeAll(c);\n         } catch(UnsupportedOperationException e) {\n             // expected\n         } catch(Throwable t) {\n             t.printStackTrace();\n             fail(\"Collection.removeAll should only throw UnsupportedOperationException. Found \" + t.toString());\n         }\n-        assert(\"Collection is still empty.\",_collection.isEmpty());\n-\n-        boolean added = false;\n-        try {\n-            added = _collection.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n-        if(added) {\n-            assert(\"Collection is not empty.\",!_collection.isEmpty());\n+        assert(\"Collection is still empty.\",c.isEmpty());\n+\n+        boolean added = false;\n+        try {\n+            added = c.add(\"element1\");\n+        } catch(UnsupportedOperationException e) {\n+            // ignored, must not be supported\n+        } catch(ClassCastException e) {\n+            // ignored, type must not be supported\n+        } catch(IllegalArgumentException e) {\n+            // ignored, element must not be supported\n+        } catch(Throwable t) {\n+            t.printStackTrace();\n+            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n+        }\n+        if(added) {\n+            assert(\"Collection is not empty.\",!c.isEmpty());\n             try {\n-                _collection.removeAll(_collection);\n-                assert(\"Collection is empty.\",_collection.isEmpty());\n+                c.removeAll(c);\n+                assert(\"Collection is empty.\",c.isEmpty());\n             } catch(UnsupportedOperationException e) {\n                 // expected\n             } catch(Throwable t) {\n \n     // optional operation\n     public void testCollectionRemoveAll2() {\n+        Collection c = makeCollection();\n         Collection col = new ArrayList();\n         col.add(\"element1\");\n         col.add(\"element2\");\n         col.add(\"element3\");\n         boolean added = false;\n         try {\n-            added = _collection.addAll(col);\n+            added = c.addAll(col);\n             if(added) {\n-                added = _collection.add(\"element0\");\n+                added = c.add(\"element0\");\n             }\n         } catch(UnsupportedOperationException e) {\n             // ignored, must not be supported\n         }\n         col.add(\"element4\");\n         if(added) {\n-            assert(\"Collection is not empty.\",!_collection.isEmpty());\n+            assert(\"Collection is not empty.\",!c.isEmpty());\n             try {\n-                assert(\"Should be changed\",_collection.removeAll(col));\n-                assert(\"Collection is not empty.\",!_collection.isEmpty());\n-                assert(\"Collection should contain element\",_collection.contains(\"element0\"));\n-                assert(\"Collection shouldn't contain removed element\",!_collection.contains(\"element1\"));\n-                assert(\"Collection shouldn't contain removed element\",!_collection.contains(\"element2\"));\n-                assert(\"Collection shouldn't contain removed element\",!_collection.contains(\"element3\"));\n-                assert(\"Collection shouldn't contain removed element\",!_collection.contains(\"element4\"));\n+                assert(\"Should be changed\",c.removeAll(col));\n+                assert(\"Collection is not empty.\",!c.isEmpty());\n+                assert(\"Collection should contain element\",c.contains(\"element0\"));\n+                assert(\"Collection shouldn't contain removed element\",!c.contains(\"element1\"));\n+                assert(\"Collection shouldn't contain removed element\",!c.contains(\"element2\"));\n+                assert(\"Collection shouldn't contain removed element\",!c.contains(\"element3\"));\n+                assert(\"Collection shouldn't contain removed element\",!c.contains(\"element4\"));\n             } catch(UnsupportedOperationException e) {\n                 // expected\n             } catch(Throwable t) {\n \n     // optional operation\n     public void testCollectionRetainAll() {\n+        // XXX finish me\n     }\n \n     public void testCollectionSize() {\n-        assertEquals(\"Size of new Collection is 0.\",0,_collection.size());\n-        boolean added = false;\n-        try {\n-            added = _collection.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n-        if(added) {\n-            assertEquals(\"If one element was added, the Collection.size() should be 1.\",1,_collection.size());\n+        Collection c = makeCollection();\n+        assertEquals(\"Size of new Collection is 0.\",0,c.size());\n+        boolean added = false;\n+        try {\n+            added = c.add(\"element1\");\n+        } catch(UnsupportedOperationException e) {\n+            // ignored, must not be supported\n+        } catch(ClassCastException e) {\n+            // ignored, type must not be supported\n+        } catch(IllegalArgumentException e) {\n+            // ignored, element must not be supported\n+        } catch(Throwable t) {\n+            t.printStackTrace();\n+            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n+        }\n+        if(added) {\n+            assertEquals(\"If one element was added, the Collection.size() should be 1.\",1,c.size());\n         }\n     }\n \n     public void testCollectionToArray() {\n+        Collection c = makeCollection();\n+        assertEquals(\"Empty Collection should return empty array for toArray\",0,c.toArray().length);\n+        boolean added = false;\n+        try {\n+            added = c.add(\"element1\");\n+        } catch(UnsupportedOperationException e) {\n+            // ignored, must not be supported\n+        } catch(ClassCastException e) {\n+            // ignored, type must not be supported\n+        } catch(IllegalArgumentException e) {\n+            // ignored, element must not be supported\n+        } catch(Throwable t) {\n+            t.printStackTrace();\n+            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n+        }\n+        if(added) {\n+            assertEquals(\"If an element was added, the Collection.toArray().length should be 1.\",1,c.toArray().length);\n+        } else {\n+            assertEquals(\"Empty Collection should return empty array for toArray\",0,c.toArray().length);\n+        }\n+\n+        boolean added2 = false;\n+        try {\n+            added2 = c.add(\"element1\");\n+        } catch(UnsupportedOperationException e) {\n+            // ignored, must not be supported\n+        } catch(ClassCastException e) {\n+            // ignored, type must not be supported\n+        } catch(IllegalArgumentException e) {\n+            // ignored, element must not be supported\n+        } catch(Throwable t) {\n+            t.printStackTrace();\n+            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n+        }\n+        if(added && added2) {\n+            assertEquals(\"If another element was added, the Collection.toArray().length should be 2.\",2,c.toArray().length);\n+        } else if(added2) {\n+            assertEquals(\"If an element was added, the Collection.toArray().length should be 1.\",1,c.toArray().length);\n+        } else {\n+            assertEquals(\"Empty Collection should return empty array for toArray\",0,c.toArray().length);\n+        }\n     }\n \n     public void testCollectionToArray2() {\n+        // XXX finish me\n+    }\n+\n+    /**\n+     * Try to add the given object to the given Collection.\n+     * Returns <tt>true</tt> if the element was added,\n+     * <tt>false</tt> otherwise.\n+     *\n+     * Fails any Throwable except UnsupportedOperationException,\n+     * ClassCastException, or IllegalArgumentException is thrown.\n+     */\n+    protected boolean tryToAdd(Collection c,Object obj) {\n+        try {\n+            return c.add(obj);\n+        } catch(UnsupportedOperationException e) {\n+            return false;\n+        } catch(ClassCastException e) {\n+            return false;\n+        } catch(IllegalArgumentException e) {\n+            return false;\n+        } catch(Throwable t) {\n+            t.printStackTrace();\n+            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n+            return false; // never get here, since fail throws exception\n+        }\n     }\n }\n--- a/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.1 2001/04/14 15:39:44 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/04/14 15:39:44 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.2 2001/04/20 16:54:07 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/04/20 16:54:07 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author Rodney Waldhoff\n- * @version $Id: TestCursorableLinkedList.java,v 1.1 2001/04/14 15:39:44 rwaldhoff Exp $\n+ * @version $Id: TestCursorableLinkedList.java,v 1.2 2001/04/20 16:54:07 rwaldhoff Exp $\n  */\n public class TestCursorableLinkedList extends TestList {\n     public TestCursorableLinkedList(String testName) {\n \n     public void setUp() {\n         list = new CursorableLinkedList();\n-        setList(list);\n+    }\n+\n+    public List makeList() {\n+        return new CursorableLinkedList();\n     }\n \n     public void testAdd() {\n--- a/src/test/org/apache/commons/collections/TestFastArrayList.java\n+++ b/src/test/org/apache/commons/collections/TestFastArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFastArrayList.java,v 1.1 2001/04/16 22:42:04 jvanzyl Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/04/16 22:42:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFastArrayList.java,v 1.2 2001/04/20 16:54:06 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/04/20 16:54:06 $\n  *\n  * ====================================================================\n  *\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+import java.util.List;\n \n /**\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n- * @version $Id: TestFastArrayList.java,v 1.1 2001/04/16 22:42:04 jvanzyl Exp $\n+ * @version $Id: TestFastArrayList.java,v 1.2 2001/04/20 16:54:06 rwaldhoff Exp $\n  */\n-public class TestFastArrayList extends TestCase\n+public class TestFastArrayList extends TestList\n {\n-    public TestFastArrayList(String testName) \n+    public TestFastArrayList(String testName)\n     {\n         super(testName);\n     }\n \n-    public static Test suite() \n+    public static Test suite()\n     {\n         return new TestSuite(TestFastArrayList.class);\n     }\n \n-    public static void main(String args[]) \n+    public static void main(String args[])\n     {\n         String[] testCaseName = { TestFastArrayList.class.getName() };\n         junit.textui.TestRunner.main(testCaseName);\n \n     private FastArrayList list = null;\n \n-    public void setUp() \n+    public void setUp()\n     {\n         list = new FastArrayList();\n     }\n \n-    public void testNewFastArrayList() \n+    public List makeList()\n+    {\n+        return new FastArrayList();\n+    }\n+\n+    public void testNewFastArrayList()\n     {\n         assert(\"New list is empty\", list.isEmpty());\n         assertEquals(\"New list has size zero\", list.size(), 0);\n \n-        try \n+        try\n         {\n             list.get(1);\n             fail(\"get(int i) should have thrown IndexOutOfBoundsException\");\n-        } \n+        }\n         catch (IndexOutOfBoundsException e)\n         {\n             ; // Expected result\n         }\n     }\n \n-    public void testSearch() \n+    public void testSearch()\n     {\n         list.add(\"First Item\");\n         list.add(\"Last Item\");\n         assertEquals(\"First item is 'First Item'\", list.get(0), \"First Item\");\n         assertEquals(\"Last Item is 'Last Item'\", list.get(1), \"Last Item\");\n     }\n+\n+    public void testCollectionEquals() {\n+        // FastArrayList currently doesn't support the List equals contract\n+    }\n }\n--- a/src/test/org/apache/commons/collections/TestFastHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestFastHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFastHashMap.java,v 1.1 2001/04/16 22:42:04 jvanzyl Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/04/16 22:42:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFastHashMap.java,v 1.2 2001/04/20 16:54:05 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/04/20 16:54:05 $\n  *\n  * ====================================================================\n  *\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+import java.util.Map;\n \n /**\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n- * @version $Id: TestFastHashMap.java,v 1.1 2001/04/16 22:42:04 jvanzyl Exp $\n+ * @version $Id: TestFastHashMap.java,v 1.2 2001/04/20 16:54:05 rwaldhoff Exp $\n  */\n-public class TestFastHashMap extends TestCase\n+public class TestFastHashMap extends TestMap\n {\n-    public TestFastHashMap(String testName) \n+    public TestFastHashMap(String testName)\n     {\n         super(testName);\n     }\n \n-    public static Test suite() \n+    public static Test suite()\n     {\n         return new TestSuite(TestFastHashMap.class);\n     }\n \n-    public static void main(String args[]) \n+    public static void main(String args[])\n     {\n         String[] testCaseName = { TestFastHashMap.class.getName() };\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    public Map makeMap() {\n+        return new FastHashMap();\n+    }\n+\n     private FastHashMap map = null;\n \n-    public void setUp() \n+    public void setUp()\n     {\n         map = new FastHashMap();\n     }\n \n-    public void testNewMap() \n+    public void testNewMap()\n     {\n         assert(\"New map is empty\", map.isEmpty());\n         assertEquals(\"New map has size zero\", map.size(), 0);\n     }\n \n-    public void testSearch() \n+    public void testSearch()\n     {\n         map.put(\"first\", \"First Item\");\n         map.put(\"second\", \"Second Item\");\n--- a/src/test/org/apache/commons/collections/TestFastTreeMap.java\n+++ b/src/test/org/apache/commons/collections/TestFastTreeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFastTreeMap.java,v 1.1 2001/04/16 22:42:04 jvanzyl Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/04/16 22:42:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFastTreeMap.java,v 1.2 2001/04/20 16:54:04 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/04/20 16:54:04 $\n  *\n  * ====================================================================\n  *\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+import java.util.Map;\n \n /**\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n- * @version $Id: TestFastTreeMap.java,v 1.1 2001/04/16 22:42:04 jvanzyl Exp $\n+ * @version $Id: TestFastTreeMap.java,v 1.2 2001/04/20 16:54:04 rwaldhoff Exp $\n  */\n-public class TestFastTreeMap extends TestCase\n+public class TestFastTreeMap extends TestMap\n {\n-    public TestFastTreeMap(String testName) \n+    public TestFastTreeMap(String testName)\n     {\n         super(testName);\n     }\n \n-    public static Test suite() \n+    public static Test suite()\n     {\n         return new TestSuite(TestFastTreeMap.class);\n     }\n \n-    public static void main(String args[]) \n+    public static void main(String args[])\n     {\n         String[] testCaseName = { TestFastTreeMap.class.getName() };\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    public Map makeMap() {\n+        return new FastTreeMap();\n+    }\n+\n     private FastTreeMap map = null;\n \n-    public void setUp() \n+    public void setUp()\n     {\n         map = new FastTreeMap();\n     }\n \n-    public void testNewMap() \n+    public void testNewMap()\n     {\n         assert(\"New map is empty\", map.isEmpty());\n         assertEquals(\"New map has size zero\", map.size(), 0);\n     }\n \n-    public void testSearch() \n+    public void testSearch()\n     {\n         map.put(\"first\", \"First Item\");\n         map.put(\"second\", \"Second Item\");\n--- a/src/test/org/apache/commons/collections/TestList.java\n+++ b/src/test/org/apache/commons/collections/TestList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.1 2001/04/14 15:39:53 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/04/14 15:39:53 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.2 2001/04/20 16:54:04 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/04/20 16:54:04 $\n  *\n  * ====================================================================\n  *\n \n import junit.framework.*;\n import java.util.List;\n+import java.util.Collection;\n \n /**\n+ * Tests base {@link java.util.List} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeList} method.\n+ * <p>\n+ * If your {@link List} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link List} fails.\n+ *\n  * @author Rodney Waldhoff\n- * @version $Id: TestList.java,v 1.1 2001/04/14 15:39:53 rwaldhoff Exp $\n+ * @version $Id: TestList.java,v 1.2 2001/04/20 16:54:04 rwaldhoff Exp $\n  */\n public abstract class TestList extends TestCollection {\n     public TestList(String testName) {\n         super(testName);\n     }\n \n-    private List _list = null;\n-\n-    protected void setList(List l) {\n-        _list = l;\n-        setCollection(_list);\n-    }\n-\n-    // placeholder.  add list contract tests here\n+    /**\n+     * Return a new, empty {@link List} to used for testing.\n+     */\n+    public abstract List makeList();\n+\n+    public Collection makeCollection() {\n+        return makeList();\n+    }\n+\n+    /*\n+\n+    // optional operation\n+    public void testListAddByIndex() {\n+        // XXX finish me\n+    }\n+\n+    // optional operation\n+    public void testListAdd() {\n+        // XXX finish me\n+    }\n+\n+    // optional operation\n+    public void testListAddAll() {\n+        // XXX finish me\n+    }\n+\n+    // optional operation\n+    public void testListClear() {\n+        // XXX finish me\n+    }\n+\n+    public void testListContains() {\n+        // XXX finish me\n+        // is this any different from Collection.contains?\n+    }\n+\n+    public void testListContainsAll() {\n+        // XXX finish me\n+        // is this any different from Collection.containsAll?\n+    }\n+\n+    public void testListEquals() {\n+        // XXX finish me\n+    }\n+\n+    public void testListGetByIndex() {\n+        // XXX finish me\n+    }\n+\n+    public void testListHashCode() {\n+        // XXX finish me\n+    }\n+\n+    public void testListIndexOf() {\n+        // XXX finish me\n+    }\n+\n+    public void testListIsEmpty() {\n+        // XXX finish me\n+        // is this any different from Collection.isEmpty?\n+    }\n+\n+    public void testListIterator() {\n+        // XXX finish me\n+        // is this any different from Collection.iterator?\n+    }\n+\n+    public void testListLastIndexOf() {\n+        // XXX finish me\n+    }\n+\n+    public void testListListIterator() {\n+        // XXX finish me\n+    }\n+\n+    public void testListListIteratorByIndex() {\n+        // XXX finish me\n+    }\n+\n+    // optional operation\n+    public void testListRemoveByIndex() {\n+        // XXX finish me\n+    }\n+\n+    // optional operation\n+    public void testListRemoveByValue() {\n+        // XXX finish me\n+    }\n+\n+    // optional operation\n+    public void testListRemoveAll() {\n+        // XXX finish me\n+        // is this any different from Collection.removeAll?\n+    }\n+\n+    // optional operation\n+    public void testListRetainAll() {\n+        // XXX finish me\n+        // is this any different from Collection.retainAll?\n+    }\n+\n+    // optional operation\n+    public void testListSet() {\n+        // XXX finish me\n+    }\n+\n+    // size() same as Collection.size() ?\n+\n+    public void testListSubList() {\n+        // XXX finish me\n+    }\n+\n+    // toArray() same as Collection.toArray() ?\n+    // toArray(Object[]) same as Collection.toArray(Object[]) ?\n+\n+    */\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.1 2001/04/20 16:54:04 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/04/20 16:54:04 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import junit.framework.*;\n+import java.util.Map;\n+import java.util.Collection;\n+\n+/**\n+ * Tests base {@link java.util.Map} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeMap} method.\n+ * <p>\n+ * If your {@link Map} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link Map} fails.\n+ *\n+ * @author Rodney Waldhoff\n+ * @version $Id: TestMap.java,v 1.1 2001/04/20 16:54:04 rwaldhoff Exp $\n+ */\n+public abstract class TestMap extends TestObject {\n+    public TestMap(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * Return a new, empty {@link Map} to used for testing.\n+     */\n+    public abstract Map makeMap();\n+\n+    public Object makeObject() {\n+        return makeMap();\n+    }\n+\n+    /*\n+\n+    // optional operation\n+    public void testMapClear() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapContainsKey() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapContainsValue() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapEntrySet() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapEquals() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapGet() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapHashCode() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapIsEmpty() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapKeySet() {\n+        // XXX finish me\n+    }\n+\n+    // optional operation\n+    public void testMapPut() {\n+        // XXX finish me\n+    }\n+\n+    // optional operation\n+    public void testMapPutAll() {\n+        // XXX finish me\n+    }\n+\n+    // optional operation\n+    public void testMapRemove() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapSize() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapValues() {\n+        // XXX finish me\n+    }\n+\n+    */\n+\n+    /**\n+     * Try to put the given pair into the given Collection.\n+     *\n+     * Fails any Throwable except UnsupportedOperationException,\n+     * ClassCastException, or IllegalArgumentException\n+     * or NullPointerException is thrown.\n+     */\n+    protected Object tryToPut(Map map, Object key, Object val) {\n+        try {\n+            return map.put(key,val);\n+        } catch(UnsupportedOperationException e) {\n+            return null;\n+        } catch(ClassCastException e) {\n+            return null;\n+        } catch(IllegalArgumentException e) {\n+            return null;\n+        } catch(NullPointerException e) {\n+            return null;\n+        } catch(Throwable t) {\n+            t.printStackTrace();\n+            fail(\"Map.put should only throw UnsupportedOperationException, ClassCastException, IllegalArgumentException or NullPointerException. Found \" + t.toString());\n+            return null; // never get here, since fail throws exception\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestObject.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.1 2001/04/20 16:54:03 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/04/20 16:54:03 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import junit.framework.*;\n+import java.util.Collection;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests base {@link java.util.Object} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeObject} method.\n+ * <p>\n+ * If your {@link Object} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link Object} fails.\n+ *\n+ * @author Rodney Waldhoff\n+ * @version $Id: TestObject.java,v 1.1 2001/04/20 16:54:03 rwaldhoff Exp $\n+ */\n+public abstract class TestObject extends TestCase {\n+    public TestObject(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * Return a new, empty {@link Object} to used for testing.\n+     */\n+    public abstract Object makeObject();\n+\n+    public void testObjectEqualsSelf() {\n+        Object obj = makeObject();\n+        assertEquals(\"A Object should equal itself\",obj,obj);\n+    }\n+\n+    public void testObjectHashCodeEqualsSelfHashCode() {\n+        Object obj = makeObject();\n+        assertEquals(\"hashCode should be repeatable\",obj.hashCode(),obj.hashCode());\n+    }\n+\n+    public void testObjectHashCodeEqualsContract() {\n+        Object obj1 = makeObject();\n+        if(obj1.equals(obj1)) {\n+            assertEquals(\"[1] When two objects are equal, their hashCodes should be also.\",obj1.hashCode(),obj1.hashCode());\n+        }\n+        Object obj2 = makeObject();\n+        if(obj1.equals(obj2)) {\n+            assertEquals(\"[2] When two objects are equal, their hashCodes should be also.\",obj1.hashCode(),obj2.hashCode());\n+        }\n+    }\n+}", "timestamp": 987785650, "metainfo": ""}