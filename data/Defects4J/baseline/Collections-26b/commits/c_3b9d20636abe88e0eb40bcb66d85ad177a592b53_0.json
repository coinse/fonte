{"sha": "3b9d20636abe88e0eb40bcb66d85ad177a592b53", "log": "Remove trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java\n  * written for each implementation.\n  * <p>\n  * This implementation does not perform any special processing with\n- * {@link #iterator()}. Instead it simply returns the value from the \n+ * {@link #iterator()}. Instead it simply returns the value from the\n  * wrapped collection. This may be undesirable, for example if you are trying\n  * to write an unmodifiable implementation it might provide a loophole.\n  *\n \n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param coll  the collection to decorate, must not be null\n      * @throws IllegalArgumentException if the collection is null\n      */\n     /**\n      * Gets the collection being decorated.\n      * All access to the decorated collection goes via this method.\n-     * \n+     *\n      * @return the decorated collection\n      */\n     protected Collection<E> decorated() {\n     }\n \n     //-----------------------------------------------------------------------\n-    \n+\n     public boolean add(final E object) {\n         return decorated().add(object);\n     }\n--- a/src/main/java/org/apache/commons/collections4/collection/IndexedCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/IndexedCollection.java\n  *\n  * @param <K> the type of object in the index.\n  * @param <C> the type of object in the collection.\n- * \n+ *\n  * @since 4.0\n  * @version $Id$\n  */\n \n     /** The map of indexes to collected objects. */\n     private final MultiMap<K, C> index;\n-    \n+\n     /** The uniqueness constraint for the index. */\n     private final boolean uniqueIndex;\n \n--- a/src/main/java/org/apache/commons/collections4/collection/PredicatedCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/PredicatedCollection.java\n      * <p>\n      * If there are any elements already in the collection being decorated, they\n      * are validated.\n-     * \n+     *\n      * @param <T> the type of the elements in the collection\n      * @param coll  the collection to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * <p>\n      * If there are any elements already in the collection being decorated, they\n      * are validated.\n-     * \n+     *\n      * @param coll  the collection to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @throws IllegalArgumentException if collection or predicate is null\n      * <p>\n      * The predicate itself should not throw an exception, but return false to\n      * indicate that the object cannot be added.\n-     * \n+     *\n      * @param object  the object being added\n      * @throws IllegalArgumentException if the add is invalid\n      */\n     /**\n      * Override to validate the object being added to ensure it matches\n      * the predicate.\n-     * \n+     *\n      * @param object  the object being added\n      * @return the result of adding to the underlying collection\n      * @throws IllegalArgumentException if the add is invalid\n      * Override to validate the objects being added to ensure they match\n      * the predicate. If any one fails, no update is made to the underlying\n      * collection.\n-     * \n+     *\n      * @param coll  the collection being added\n      * @return the result of adding to the underlying collection\n      * @throws IllegalArgumentException if the add is invalid\n--- a/src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java\n \n     /**\n      * Factory method to create a synchronized collection.\n-     * \n+     *\n      * @param <T> the type of the elements in the collection\n      * @param coll  the collection to decorate, must not be null\n      * @return a new synchronized collection\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param collection  the collection to decorate, must not be null\n      * @throws IllegalArgumentException if the collection is null\n      */\n \n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param collection  the collection to decorate, must not be null\n      * @param lock  the lock object to use, must not be null\n      * @throws IllegalArgumentException if the collection is null\n \n     /**\n      * Gets the collection being decorated.\n-     * \n+     *\n      * @return the decorated collection\n      */\n     protected Collection<E> decorated() {\n     }\n \n     //-----------------------------------------------------------------------\n-    \n+\n     public boolean add(final E object) {\n         synchronized (lock) {\n             return decorated().add(object);\n      *   Iterator it = coll.iterator();\n      *   // do stuff with iterator\n      * }\n-     * \n+     * </pre>\n+     *\n      * @return an iterator that must be manually synchronized on the collection\n      */\n     public Iterator<E> iterator() {\n--- a/src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java\n      * If there are any elements already in the collection being decorated, they\n      * are NOT transformed.\n      * Contrast this with {@link #transformedCollection(Collection, Transformer)}.\n-     * \n+     *\n      * @param <E> the type of the elements in the collection\n      * @param coll  the collection to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * If there are any elements already in the collection being decorated, they\n      * will be transformed by this method.\n      * Contrast this with {@link #transformingCollection(Collection, Transformer)}.\n-     * \n+     *\n      * @param <E> the type of the elements in the collection\n      * @param collection  the collection to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n             final Transformer<? super E, ? extends E> transformer) {\n \n         final TransformedCollection<E> decorated = new TransformedCollection<E>(collection, transformer);\n-        // null collection & transformer are disallowed by the constructor call above \n+        // null collection & transformer are disallowed by the constructor call above\n         if (collection.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // collection is of type E\n             final E[] values = (E[]) collection.toArray(); // NOPMD - false positive for generics\n      * <p>\n      * If there are any elements already in the collection being decorated, they\n      * are NOT transformed.\n-     * \n+     *\n      * @param coll  the collection to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @throws IllegalArgumentException if collection or transformer is null\n      * Transforms an object.\n      * <p>\n      * The transformer itself may throw an exception if necessary.\n-     * \n+     *\n      * @param object  the object to transform\n      * @return a transformed object\n      */\n      * Transforms a collection.\n      * <p>\n      * The transformer itself may throw an exception if necessary.\n-     * \n+     *\n      * @param coll  the collection to transform\n      * @return a transformed object\n      */\n--- a/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.\n  *\n  * @since 3.0\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/collections4/collection/UnmodifiableCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/UnmodifiableCollection.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.\n  *\n  * @param <E> the type of the elements in the collection\n  * @since 3.0\n      * Factory method to create an unmodifiable collection.\n      * <p>\n      * If the collection passed in is already unmodifiable, it is returned.\n-     * \n+     *\n      * @param <T> the type of the elements in the collection\n      * @param coll  the collection to decorate, must not be null\n      * @return an unmodifiable collection\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param coll  the collection to decorate, must not be null\n      * @throws IllegalArgumentException if collection is null\n      */\n--- a/src/main/java/org/apache/commons/collections4/collection/package-info.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/package-info.java\n  *   <li>Transformed - transforms elements as they are added\n  *   <li>Indexed - provides a map-like view onto another collection\n  * </ul>\n- * \n+ *\n  * @version $Id$\n  */\n package org.apache.commons.collections4.collection;", "timestamp": 1367345480, "metainfo": ""}