{"sha": "30f5f14baab2392c40874b5d9aa4a852ea9f7136", "log": "Add comment markers for remaining classes where fields could perhaps be privatised  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/bidimap/AbstractDualBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/AbstractDualBidiMap.java\n  */\n public abstract class AbstractDualBidiMap<K, V> implements BidiMap<K, V> {\n \n+    // TODO privatise fields?\n+\n     /**\n      * Normal delegate map.\n      */\n--- a/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java\n \n     /** Serialization version */\n     private static final long serialVersionUID = 6249888059822088500L;\n+\n+    // TODO privatise field? read-only access - could use decorated() - apart from deserialisation\n \n     /** The collection being decorated */\n     protected Collection<E> collection;\n--- a/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java\n  */\n public class ArrayIterator<E> implements ResettableIterator<E> {\n \n+    // TODO Privatise fields? Mainly read-only access\n+\n     /** The array to iterate over */    \n     protected Object array;\n     /** The start index to loop from */\n--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java\n public class ObjectArrayIterator<E>\n         implements Iterator<E>, ResettableIterator<E> {\n \n+    // TODO Privatise fields? Mainly read-only access\n+\n     /** The array */\n     protected E[] array = null;\n     /** The start index to loop from */\n--- a/src/main/java/org/apache/commons/collections4/list/AbstractLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/AbstractLinkedList.java\n      * - respects {@link AbstractList#modCount}\n      */\n \n+    // TODO Privatise fields?\n+\n     /**\n      * A {@link Node} which indicates the start and end of the list and does not\n      * hold a value. The value of <code>next</code> is the first item in the\n--- a/src/main/java/org/apache/commons/collections4/map/AbstractLinkedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/AbstractLinkedMap.java\n public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> implements OrderedMap<K, V> {\n     \n     /** Header in the linked list */\n-    protected transient LinkEntry<K, V> header;\n+    protected transient LinkEntry<K, V> header; // TODO Privatise?\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n      */\n     protected static class LinkEntry<K, V> extends HashEntry<K, V> {\n         /** The entry before this one in the order */\n-        protected LinkEntry<K, V> before;\n+        protected LinkEntry<K, V> before; // TODO Privatise?\n         /** The entry after this one in the order */\n         protected LinkEntry<K, V> after;\n \n--- a/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java\n public abstract class AbstractMapDecorator<K, V> extends AbstractIterableMap<K, V> {\n \n     /** The map to decorate */\n-    protected transient Map<K, V> map;\n+    protected transient Map<K, V> map; // TODO Privatise? Only write access is for deserialisation\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n--- a/src/main/java/org/apache/commons/collections4/map/EntrySetToMapIteratorAdapter.java\n+++ b/src/main/java/org/apache/commons/collections4/map/EntrySetToMapIteratorAdapter.java\n  * @version $Id$\n  */\n public class EntrySetToMapIteratorAdapter<K, V> implements MapIterator<K, V>, ResettableIterator<K> {\n+\n+    // TODO Privatise fields?\n+\n     /** The adapted Map entry Set. */\n     protected Set<Map.Entry<K, V>> entrySet;\n \n--- a/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java\n public class AbstractIterableGetMapDecorator<K, V> implements IterableGet<K, V> {\n \n     /** The map to decorate */\n-    protected transient Map<K, V> map;\n+    protected transient Map<K, V> map; // TODO Privatise? only external access is for deserialisation\n \n     /**\n      * Create a new AbstractSplitMapDecorator.\n--- a/src/main/java/org/apache/commons/collections4/trie/AbstractTrie.java\n+++ b/src/main/java/org/apache/commons/collections4/trie/AbstractTrie.java\n         implements Trie<K, V>, Serializable {\n     \n     private static final long serialVersionUID = 5826987063535505652L;\n-    \n+\n+    // TODO Privatise fields?\n+\n     /**\n      * The {@link KeyAnalyzer} that's being used to build the \n      * PATRICIA {@link Trie}.", "timestamp": 1367331354, "metainfo": ""}