{"sha": "c340a74c7ecfdef96ee5e1407f40d026cc3f12f1", "log": "[COLLECTIONS-351] Removed Synchronized[List, Set, SortedSet] and replaced with calls to Collections.synchronizedXXX.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ListUtils.java\n import org.apache.commons.collections.list.FixedSizeList;\n import org.apache.commons.collections.list.LazyList;\n import org.apache.commons.collections.list.PredicatedList;\n-import org.apache.commons.collections.list.SynchronizedList;\n import org.apache.commons.collections.list.TransformedList;\n import org.apache.commons.collections.list.UnmodifiableList;\n \n     /**\n      * Returns a synchronized list backed by the given list.\n      * <p>\n-     * You must manually synchronize on the returned buffer's iterator to \n+     * You must manually synchronize on the returned list's iterator to \n      * avoid non-deterministic behavior:\n      *  \n      * <pre>\n      * }\n      * </pre>\n      * \n-     * This method uses the implementation in the decorators subpackage.\n+     * This method is just a wrapper for {@link Collections#synchronizedList(List)}.\n      * \n      * @param <E>  the element type\n      * @param list  the list to synchronize, must not be null\n      * @throws IllegalArgumentException  if the list is null\n      */\n     public static <E> List<E> synchronizedList(final List<E> list) {\n-        return SynchronizedList.synchronizedList(list);\n+        return Collections.synchronizedList(list);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/main/java/org/apache/commons/collections/SetUtils.java\n import org.apache.commons.collections.set.ListOrderedSet;\n import org.apache.commons.collections.set.PredicatedSet;\n import org.apache.commons.collections.set.PredicatedSortedSet;\n-import org.apache.commons.collections.set.SynchronizedSet;\n-import org.apache.commons.collections.set.SynchronizedSortedSet;\n import org.apache.commons.collections.set.TransformedSet;\n import org.apache.commons.collections.set.TransformedSortedSet;\n import org.apache.commons.collections.set.UnmodifiableSet;\n     /**\n      * Returns a synchronized set backed by the given set.\n      * <p>\n-     * You must manually synchronize on the returned buffer's iterator to \n+     * You must manually synchronize on the returned set's iterator to \n      * avoid non-deterministic behavior:\n      *  \n      * <pre>\n      * }\n      * </pre>\n      * \n-     * This method uses the implementation in the decorators subpackage.\n+     * This method is just a wrapper for {@link Collections#synchronizedSet(Set)}.\n      * \n      * @param <E> the element type\n      * @param set  the set to synchronize, must not be null\n      * @throws IllegalArgumentException  if the set is null\n      */\n     public static <E> Set<E> synchronizedSet(final Set<E> set) {\n-        return SynchronizedSet.synchronizedSet(set);\n+        return Collections.synchronizedSet(set);\n     }\n \n     /**\n     /**\n      * Returns a synchronized sorted set backed by the given sorted set.\n      * <p>\n-     * You must manually synchronize on the returned buffer's iterator to \n+     * You must manually synchronize on the returned set's iterator to \n      * avoid non-deterministic behavior:\n      *  \n      * <pre>\n      * }\n      * </pre>\n      * \n-     * This method uses the implementation in the decorators subpackage.\n+     * This method is just a wrapper for {@link Collections#synchronizedSortedSet(SortedSet)}.\n      * \n      * @param <E> the element type\n      * @param set  the sorted set to synchronize, must not be null\n      * @throws IllegalArgumentException  if the set is null\n      */\n     public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set) {\n-        return SynchronizedSortedSet.synchronizedSortedSet(set);\n+        return Collections.synchronizedSortedSet(set);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/list/package-info.java\n+++ b/src/main/java/org/apache/commons/collections/list/package-info.java\n  * <p>\n  * The following decorators are provided in the package:\n  * <ul>\n- *   <li>Synchronized - synchronizes method access for multi-threaded environments</li>\n  *   <li>Unmodifiable - ensures the collection cannot be altered</li>\n  *   <li>Predicated - ensures that only elements that are valid according to a predicate can be added</li>\n  *   <li>Transformed - transforms each element added</li>\n--- a/src/main/java/org/apache/commons/collections/set/package-info.java\n+++ b/src/main/java/org/apache/commons/collections/set/package-info.java\n  * </ul>\n  * The following decorators are provided in the package:\n  * <ul>\n- *   <li>Synchronized - synchronizes method access for multi-threaded environments\n  *   <li>Unmodifiable - ensures the collection cannot be altered\n  *   <li>Predicated - ensures that only elements that are valid according to a predicate can be added\n  *   <li>Transformed - transforms each element added\n--- a/src/main/java/org/apache/commons/collections/trie/SynchronizedTrie.java\n+++ b/src/main/java/org/apache/commons/collections/trie/SynchronizedTrie.java\n \n import org.apache.commons.collections.Trie;\n import org.apache.commons.collections.collection.SynchronizedCollection;\n-import org.apache.commons.collections.set.SynchronizedSet;\n \n /**\n  * A synchronized {@link Trie}.\n     }\n     \n     public synchronized Set<Entry<K, V>> entrySet() {\n-        return SynchronizedSet.synchronizedSet(delegate.entrySet());\n+        return Collections.synchronizedSet(delegate.entrySet());\n     }\n \n     public synchronized Set<K> keySet() {\n-        return SynchronizedSet.synchronizedSet(delegate.keySet());\n+        return Collections.synchronizedSet(delegate.keySet());\n     }\n \n     public synchronized Collection<V> values() {", "timestamp": 1363545597, "metainfo": ""}