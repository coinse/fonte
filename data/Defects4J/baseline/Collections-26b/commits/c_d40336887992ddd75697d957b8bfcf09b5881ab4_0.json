{"sha": "d40336887992ddd75697d957b8bfcf09b5881ab4", "log": "Ignore boxing errors in test code  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections4/ListUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/ListUtilsTest.java\n         assertEquals(ListUtils.indexOf(fullList, null), -1);\n     }\n \n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testLongestCommonSubsequence() {\n \n         try {\n       assertEquals(0, lcs.length());\n   }\n \n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testPartition() {\n         final List<Integer> strings = new ArrayList<Integer>();\n         for (int i = 0; i <= 6; i++) {\n         }\n     };\n \n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testSelect() {\n         final List<Integer> list = new ArrayList<Integer>();\n         list.add(1);\n         assertEquals(2, output2.iterator().next());\n     }\n \n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testSelectRejected() {\n         final List<Long> list = new ArrayList<Long>();\n         list.add(1L);\n--- a/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java\n     // mapTransformer\n     //------------------------------------------------------------------\n \n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testMapTransformer() {\n         final Map<Object, Integer> map = new HashMap<Object, Integer>();\n         map.put(null, 0);\n--- a/src/test/java/org/apache/commons/collections4/comparators/TransformingComparatorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/comparators/TransformingComparatorTest.java\n     }\n \n     @Override\n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public List<Integer> getComparableObjectsOrdered() {\n         final List<Integer> list = new LinkedList<Integer>();\n         list.add(1);\n--- a/src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java\n  */\n public class PermutationIteratorTest extends AbstractIteratorTest<List<Character>> {\n \n+    @SuppressWarnings(\"boxing\") // OK in test code\n     protected Character[] testArray = { 'A', 'B', 'C' };\n     protected List<Character> testList;\n \n \n     //-----------------------------------------------------------------------\n \n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testPermutationResultSize() {\n         int factorial = 1;\n         for (int i = 0; i < 8; i++, factorial*=i) {\n     /**\n      * test checking that all the permutations are returned\n      */\n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testPermutationExhaustivity() {\n         List<Character> perm1 = new ArrayList<Character>();\n         List<Character> perm2 = new ArrayList<Character>();\n--- a/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java\n     /*\n      * test case for https://issues.apache.org/jira/browse/COLLECTIONS-427\n      */\n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testRetainAllCollections427() {\n         final int size = 50000;\n         final ArrayList<Integer> list = new ArrayList<Integer>();\n--- a/src/test/java/org/apache/commons/collections4/list/TreeListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/TreeListTest.java\n         assertEquals(\"A\", li.previous());\n     }\n \n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testIterationOrder() {\n         // COLLECTIONS-433:\n         // ensure that the iteration order of elements is correct\n         }\n     }\n \n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testIterationOrderAfterAddAll() {\n         // COLLECTIONS-433:\n         // ensure that the iteration order of elements is correct\n--- a/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java\n     /**\n      * Verifies that values.iterator.remove changes the underlying map.\n      */\n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testValuesIteratorRemoveChangesMap() {\n         resetFull();\n         final List<V> sampleValuesAsList = Arrays.asList(getSampleValues());\n--- a/src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java\n     /*\n      * test case for https://issues.apache.org/jira/browse/COLLECTIONS-426\n      */\n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testRetainAllCollections426() {\n         final int size = 100000;\n         final ListOrderedSet<Integer> set = new ListOrderedSet<Integer>();\n--- a/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java\n+++ b/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java\n public class PatriciaTrieTest {\n \n     @Test\n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testSimple() {\n         final PatriciaTrie<Integer, String> intTrie = new PatriciaTrie<Integer, String>(new IntegerKeyAnalyzer());\n         Assert.assertTrue(intTrie.isEmpty());\n     }\n \n     @Test\n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testCeilingEntry() {\n         final PatriciaTrie<Character, String> charTrie\n             = new PatriciaTrie<Character, String>(new CharacterKeyAnalyzer());\n     }\n \n     @Test\n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testLowerEntry() {\n         final PatriciaTrie<Character, String> charTrie = new PatriciaTrie<Character, String>(new CharacterKeyAnalyzer());\n         charTrie.put('c', \"c\");\n     }\n \n     @Test\n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testIteration() {\n         final PatriciaTrie<Integer, String> intTrie = new PatriciaTrie<Integer, String>(new IntegerKeyAnalyzer());\n         intTrie.put(1, \"One\");\n     }\n \n     @Test\n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testSelect() {\n         final PatriciaTrie<Character, String> charTrie = new PatriciaTrie<Character, String>(new CharacterKeyAnalyzer());\n         charTrie.put('c', \"c\");\n     }\n \n     @Test\n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testTraverseCursorRemove() {\n         final PatriciaTrie<Character, String> charTrie = new PatriciaTrie<Character, String>(new CharacterKeyAnalyzer());\n         charTrie.put('c', \"c\");\n     }\n \n     @Test\n+    @SuppressWarnings(\"boxing\") // OK in test code\n     public void testIteratorRemove() {\n         final PatriciaTrie<Character, String> charTrie = new PatriciaTrie<Character, String>(new CharacterKeyAnalyzer());\n         charTrie.put('c', \"c\");", "timestamp": 1367350107, "metainfo": ""}