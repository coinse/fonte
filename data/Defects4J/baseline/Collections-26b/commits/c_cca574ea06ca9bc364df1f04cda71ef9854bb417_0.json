{"sha": "cca574ea06ca9bc364df1f04cda71ef9854bb417", "log": "Replace references to getInstance with the corresponding factory method name.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/functors/AbstractQuantifierPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/AbstractQuantifierPredicate.java\n     \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n      *\n      * @param predicates  the predicates to check, not cloned, not null\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>allPredicate</code> if you want that.\n      *\n      * @param predicates  the predicates to check, not cloned, not null\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>andPredicate</code> if you want that.\n      *\n      * @param predicate1  the first predicate to check, not null\n      * @param predicate2  the second predicate to check, not null\n--- a/src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>anyPredicate</code> if you want that.\n      *\n      * @param predicates  the predicates to check, not cloned, not null\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>chainedClosure</code> if you want that.\n      * \n      * @param closures  the closures to chain, not copied, no nulls\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>chainedTransformer</code> if you want that.\n      * \n      * @param transformers  the transformers to chain, not copied, no nulls\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/CloneTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/CloneTransformer.java\n /**\n  * Transformer implementation that returns a clone of the input object.\n  * <p>\n- * Clone is performed using <code>PrototypeFactory.getInstance(input).create()</code>.\n+ * Clone is performed using <code>PrototypeFactory.prototypeFactory(input).create()</code>.\n  *\n  * @since 3.0\n  * @version $Id$\n     }\n \n     /**\n-     * Constructor\n+     * Constructor.\n      */\n     private CloneTransformer() {\n         super();\n--- a/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>closureTransformer</code> if you want that.\n      * \n      * @param closure  the closure to call, not null\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java\n  * following way:\n  *\n  * <pre>\n- * ComparatorPredicate.getInstance(ONE, comparator).evaluate(TWO);\n+ * ComparatorPredicate.comparatorPredicate(ONE, comparator).evaluate(TWO);\n  * </pre>\n  *\n  * The input variable <code>TWO</code> in compared to the stored variable <code>ONE</code> using\n  * evaluation of a comparator result.\n  *\n  * <pre>\n- * ComparatorPredicate.getInstance(ONE, comparator, <b>ComparatorPredicate.Criterion.GREATER</b>).evaluate(TWO);\n+ * ComparatorPredicate.comparatorPredicate(ONE, comparator,<b>ComparatorPredicate.Criterion.GREATER</b>).evaluate(TWO);\n  * </pre>\n  *\n  * The input variable TWO is compared to the stored variable ONE using the supplied <code>comparator</code>\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want.\n+     * Use <code>comparatorPredicate</code> if you want that.\n      *\n      * @param object  the object to compare to\n      * @param comparator  the comparator to use for comparison\n--- a/src/main/java/org/apache/commons/collections4/functors/ConstantFactory.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ConstantFactory.java\n     \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>constantFactory</code> if you want that.\n      * \n      * @param constantToReturn  the constant to return each time\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/ConstantTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ConstantTransformer.java\n     \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>constantTransformer</code> if you want that.\n      * \n      * @param constantToReturn  the constant to return each time\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/EqualPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/EqualPredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>equalPredicate</code> if you want that.\n      * \n      * @param object  the object to compare to\n      */\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>equalPredicate</code> if you want that.\n      * \n      * @param object  the object to compare to\n      * @param equator  the equator to use for comparison\n--- a/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>factoryTransformer</code> if you want that.\n      * \n      * @param factory  the factory to call, not null\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/ForClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ForClosure.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>forClosure</code> if you want that.\n      * \n      * @param count  the number of times to execute the closure\n      * @param closure  the closure to execute, not null\n--- a/src/main/java/org/apache/commons/collections4/functors/IdentityPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/IdentityPredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>identityPredicate</code> if you want that.\n      *\n      * @param object  the object to compare to\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/IfClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/IfClosure.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>ifClosure</code> if you want that.\n      * <p>\n      * This constructor creates a closure that performs no action when\n      * the predicate is false.\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>ifClosure</code> if you want that.\n      * \n      * @param predicate  predicate to switch on, not null\n      * @param trueClosure  closure used if true, not null\n--- a/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>instanceOfPredicate</code> if you want that.\n      *\n      * @param type  the type to check for\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>instantiateFactory</code> if you want that.\n      * \n      * @param classToInstantiate  the class to instantiate\n      */\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>instantiateFactory</code> if you want that.\n      * \n      * @param classToInstantiate  the class to instantiate\n      * @param paramTypes  the constructor parameter types, cloned\n--- a/src/main/java/org/apache/commons/collections4/functors/InstantiateTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/InstantiateTransformer.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>instantiateTransformer</code> if you want that.\n      *\n      * @param paramTypes  the constructor parameter types, not cloned\n      * @param args  the constructor arguments, not cloned\n--- a/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>invokerTransformer</code> if you want that.\n      * \n      * @param methodName  the method to call\n      * @param paramTypes  the constructor parameter types, not cloned\n--- a/src/main/java/org/apache/commons/collections4/functors/MapTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/MapTransformer.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>mapTransformer</code> if you want that.\n      *\n      * @param map  the map to use for lookup, not cloned\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/NOPClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/NOPClosure.java\n     }\n \n     /**\n-     * Constructor\n+     * Constructor.\n      */\n     private NOPClosure() {\n         super();\n--- a/src/main/java/org/apache/commons/collections4/functors/NOPTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/NOPTransformer.java\n     }\n \n     /**\n-     * Constructor\n+     * Constructor.\n      */\n     private NOPTransformer() {\n         super();\n--- a/src/main/java/org/apache/commons/collections4/functors/NonePredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/NonePredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>nonePredicate</code> if you want that.\n      *\n      * @param predicates  the predicates to check, not cloned, not null\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>notPredicate</code> if you want that.\n      * \n      * @param predicate  the predicate to call after the null check\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>nullIsExceptionPredicate</code> if you want that.\n      * \n      * @param predicate  the predicate to call after the null check\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>nullIsFalsePredicate</code> if you want that.\n      *\n      * @param predicate  the predicate to call after the null check\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>nullIsTruePredicate</code> if you want that.\n      * \n      * @param predicate  the predicate to call after the null check\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>onePredicate</code> if you want that.\n      * \n      * @param predicates  the predicates to check, not cloned, not null\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>orPredicate</code> if you want that.\n      *\n      * @param predicate1  the first predicate to check, not null\n      * @param predicate2  the second predicate to check, not null\n--- a/src/main/java/org/apache/commons/collections4/functors/PredicateTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/PredicateTransformer.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>predicateTransformer</code> if you want that.\n      * \n      * @param predicate  the predicate to call, not null\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/PrototypeFactory.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/PrototypeFactory.java\n     }\n \n     /**\n-     * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Restricted constructor.\n      */\n     private PrototypeFactory() {\n         super();\n--- a/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>switchClosure</code> if you want that.\n      *\n      * @param predicates  array of predicates, not cloned, no nulls\n      * @param closures  matching array of closures, not cloned, no nulls\n--- a/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java\n     \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>switchTransformer</code> if you want that.\n      * \n      * @param predicates  array of predicates, not cloned, no nulls\n      * @param transformers  matching array of transformers, not cloned, no nulls\n--- a/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>transformedPredicate</code> if you want that.\n      *\n      * @param transformer  the transformer to use\n      * @param predicate  the predicate to decorate\n--- a/src/main/java/org/apache/commons/collections4/functors/TransformerClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/TransformerClosure.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>transformerClosure</code> if you want that.\n      * \n      * @param transformer  the transformer to call, not null\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>transformerPredicate</code> if you want that.\n      *\n      * @param transformer  the transformer to decorate\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/UniquePredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/UniquePredicate.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>uniquePredicate</code> if you want that.\n      */\n     public UniquePredicate() {\n         super();\n--- a/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java\n \n     /**\n      * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want that.\n+     * Use <code>whileClosure</code> if you want that.\n      * \n      * @param predicate  the predicate used to evaluate when the loop terminates, not null\n      * @param closure  the closure the execute, not null", "timestamp": 1367072034, "metainfo": ""}