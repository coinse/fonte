{"sha": "f22d9bce8c560fcab3c564a8acfabd7b2f53672d", "log": "added contract to LRUMap - subclasses can override removeLRU() and remove(Object) to manipulate objects on their way out of the cache   ", "commit": "\n--- a/src/java/org/apache/commons/collections/LRUMap.java\n+++ b/src/java/org/apache/commons/collections/LRUMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/LRUMap.java,v 1.6 2002/02/14 20:21:49 morgand Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/02/14 20:21:49 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/LRUMap.java,v 1.7 2002/02/14 20:58:48 morgand Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/02/14 20:58:48 $\n  *\n  * ====================================================================\n  *\n         maximumSize = i;\n         bubbleList = new ArrayList( i );\n     }\n-\n-    /** Removes the least recently used object from the Map.\n-      * @return the key of the removed item\n+\n+\n+     /**\n+      * <p>\n+      *   Removes the least recently used object from the Map.\n+      * </p>\n+      * \n+      * <p>\n+      * This method will determine the object to\n+      * remove and call remove(Object).  If you want a subclass\n+      * to perform some operation before removing an Object,\n+      * you can override remove(Object) for all remove\n+      * operations, or removeLRU() if you only want to affect\n+      * automatic removes.\n+      * </p>\n+      * \n+      * @return the key of the removed item\n       */\n     public Object removeLRU() {\n         int lastItem = size() - 1;\n-        Object key = bubbleList.remove( lastItem );\n-        ValuePositionPair pair = removePair( key );\n+        Object key = bubbleList.get( lastItem );\n+\n+         remove( key );\n         return key;\n     }\n     \n         }\n         return pair.value;\n     }\n-\n+\n+\n+     /**\n+      * <p>Removes the key and its Object from the Map.</p>\n+      * \n+      * <p>(Note: this may result in the \"Least Recently Used\"\n+      * object being removed from the Map.  In that case,\n+      * the removeLRU() method is called.  See javadoc for\n+      * removeLRU() for more details.)</p>\n+      * \n+      * @param key    Key of the Object to add.\n+      * @param value  Object to add\n+      * @return Former value of the key\n+      * @see removeLRU()\n+      */\n     public Object put( Object key, Object value ) {\n \n          ValuePositionPair pair = new ValuePositionPair( value );\n          } else if ( mapSize >= maximumSize ) {\n             // lets retire the least recently used item in the cache\n             int lastIndex = maximumSize - 1;\n-            pair.position = lastIndex;\n-            Object oldKey = bubbleList.set( lastIndex, key );\n-            super.remove( oldKey );\n+            pair.position = lastIndex;\n+\n+             removeLRU();\n+\n+             bubbleList.add(lastIndex, key);\n         } else {\n             pair.position = mapSize;\n             bubbleList.add( mapSize, key );", "timestamp": 1013720328, "metainfo": ""}