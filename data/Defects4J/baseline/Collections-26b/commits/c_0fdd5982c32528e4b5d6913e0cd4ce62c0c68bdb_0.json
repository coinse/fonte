{"sha": "0fdd5982c32528e4b5d6913e0cd4ce62c0c68bdb", "log": "Add casts to avoid some JDK1.5 compilation warnings bug 35474, from Will Pugh  ", "commit": "\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n             \n         } else {\n             try {\n-                Method method = obj.getClass().getMethod(\"iterator\", null);\n+                Method method = obj.getClass().getMethod(\"iterator\", (Class[]) null);\n                 if (Iterator.class.isAssignableFrom(method.getReturnType())) {\n-                    Iterator it = (Iterator) method.invoke(obj, null);\n+                    Iterator it = (Iterator) method.invoke(obj, (Object[]) null);\n                     if (it != null) {\n                         return it;\n                     }\n--- a/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n             return ConstantFactory.NULL_INSTANCE;\n         }\n         try {\n-            Method method = prototype.getClass().getMethod(\"clone\", null);\n+            Method method = prototype.getClass().getMethod(\"clone\", (Class[]) null);\n             return new PrototypeCloneFactory(prototype, method);\n \n         } catch (NoSuchMethodException ex) {\n          */\n         private void findCloneMethod() {\n             try {\n-                iCloneMethod = iPrototype.getClass().getMethod(\"clone\", null);\n+                iCloneMethod = iPrototype.getClass().getMethod(\"clone\", (Class[]) null);\n \n             } catch (NoSuchMethodException ex) {\n                 throw new IllegalArgumentException(\"PrototypeCloneFactory: The clone method must exist and be public \");\n             }\n \n             try {\n-                return iCloneMethod.invoke(iPrototype, null);\n+                return iCloneMethod.invoke(iPrototype, (Object[])null);\n \n             } catch (IllegalAccessException ex) {\n                 throw new FunctorException(\"PrototypeCloneFactory: Clone method must be public\", ex);\n--- a/src/test/org/apache/commons/collections/BulkTest.java\n+++ b/src/test/org/apache/commons/collections/BulkTest.java\n         \n         BulkTest bulk2;\n         try {\n-            bulk2 = (BulkTest)m.invoke(bulk, null);\n+            bulk2 = (BulkTest)m.invoke(bulk, (Object[]) null);\n             if (bulk2 == null) return;\n         } catch (InvocationTargetException ex) {\n             ex.getTargetException().printStackTrace();\n     private static BulkTest makeTestCase(Class c, Method m) {\n         Constructor con = getTestCaseConstructor(c);\n         try {\n-            return (BulkTest)con.newInstance(new String[] { m.getName() });\n+            return (BulkTest)con.newInstance(new Object[] {m.getName()});\n         } catch (InvocationTargetException e) {\n             e.printStackTrace();\n             throw new RuntimeException(); // FIXME;\n--- a/src/test/org/apache/commons/collections/TestBeanMap.java\n+++ b/src/test/org/apache/commons/collections/TestBeanMap.java\n \n     public void testMethodAccessor() throws Exception {\n         BeanMap map = (BeanMap) makeFullMap();\n-        Method method = BeanWithProperties.class.getDeclaredMethod(\"getSomeIntegerValue\", null);\n+        Method method = BeanWithProperties.class.getDeclaredMethod(\"getSomeIntegerValue\", (Class[]) null);\n         assertEquals(method, map.getReadMethod(\"someIntegerValue\"));\n     }\n     ", "timestamp": 1119717574, "metainfo": ""}