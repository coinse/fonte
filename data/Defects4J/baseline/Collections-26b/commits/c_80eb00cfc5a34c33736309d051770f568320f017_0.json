{"sha": "80eb00cfc5a34c33736309d051770f568320f017", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r468709 | scolebourne | 2006-10-28 10:49:04 -0700 (Sat, 28 Oct 2006) | 1 line          Convert to generics     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MapIterator.java\n+++ b/src/java/org/apache/commons/collections/MapIterator.java\n package org.apache.commons.collections;\n \n import java.util.Iterator;\n+import java.util.NoSuchElementException;\n \n /**\n  * Defines an iterator that operates over a <code>Map</code>.\n  * to <code>next()</code>, the <code>getValue()</code> method provides direct\n  * access to the value. The value can also be set using <code>setValue()</code>.\n  * <pre>\n- * MapIterator it = map.mapIterator();\n+ * MapIterator<String,Integer> it = map.mapIterator();\n  * while (it.hasNext()) {\n- *   Object key = it.next();\n- *   Object value = it.getValue();\n- *   it.setValue(newValue);\n+ *   String key = it.next();\n+ *   Integer value = it.getValue();\n+ *   it.setValue(value + 1);\n  * }\n  * </pre>\n- *  \n+ *\n+ * @param <K> the type of the keys in the map\n+ * @param <V> the type of the values in the map\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n  */\n-public interface MapIterator extends Iterator {\n-    \n+public interface MapIterator<K, V> extends Iterator<K> {\n+\n     /**\n      * Checks to see if there are more entries still to be iterated.\n      *\n      * Gets the next <em>key</em> from the <code>Map</code>.\n      *\n      * @return the next key in the iteration\n-     * @throws java.util.NoSuchElementException if the iteration is finished\n+     * @throws NoSuchElementException if the iteration is finished\n      */\n-    Object next();\n+    K next();\n \n     //-----------------------------------------------------------------------\n     /**\n      * @return the current key\n      * @throws IllegalStateException if <code>next()</code> has not yet been called\n      */\n-    Object getKey();\n+    K getKey();\n \n     /**\n      * Gets the current value, which is the value associated with the last key\n      * @return the current value\n      * @throws IllegalStateException if <code>next()</code> has not yet been called\n      */\n-    Object getValue();\n+    V getValue();\n \n     //-----------------------------------------------------------------------\n     /**\n      *  since the last call to <code>next()</code>\n      */\n     void remove();\n-    \n+\n     /**\n      * Sets the value associated with the current key (optional operation).\n      *\n      * @throws IllegalStateException if <code>remove()</code> has been called since the\n      *  last call to <code>next()</code>\n      */\n-    Object setValue(Object value);\n+    V setValue(V value);\n \n }", "timestamp": 1252994183, "metainfo": ""}